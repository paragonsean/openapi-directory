/*
 * AWS Savings Plans
 * Savings Plans are a pricing model that offer significant savings on AWS usage (for example, on Amazon EC2 instances). You commit to a consistent amount of usage, in USD per hour, for a term of 1 or 3 years, and receive a lower price for that usage. For more information, see the <a href=\"https://docs.aws.amazon.com/savingsplans/latest/userguide/\">AWS Savings Plans User Guide</a>.
 *
 * The version of the OpenAPI document: 2019-06-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SavingsPlanFilter;
import org.openapitools.client.model.SavingsPlanState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeSavingsPlansRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:04.017777-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeSavingsPlansRequest {
  public static final String SERIALIZED_NAME_SAVINGS_PLAN_ARNS = "savingsPlanArns";
  @SerializedName(SERIALIZED_NAME_SAVINGS_PLAN_ARNS)
  private List<String> savingsPlanArns = new ArrayList<>();

  public static final String SERIALIZED_NAME_SAVINGS_PLAN_IDS = "savingsPlanIds";
  @SerializedName(SERIALIZED_NAME_SAVINGS_PLAN_IDS)
  private List<String> savingsPlanIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_NEXT_TOKEN = "nextToken";
  @SerializedName(SERIALIZED_NAME_NEXT_TOKEN)
  private String nextToken;

  public static final String SERIALIZED_NAME_MAX_RESULTS = "maxResults";
  @SerializedName(SERIALIZED_NAME_MAX_RESULTS)
  private Integer maxResults;

  public static final String SERIALIZED_NAME_STATES = "states";
  @SerializedName(SERIALIZED_NAME_STATES)
  private List<SavingsPlanState> states = new ArrayList<>();

  public static final String SERIALIZED_NAME_FILTERS = "filters";
  @SerializedName(SERIALIZED_NAME_FILTERS)
  private List<SavingsPlanFilter> filters = new ArrayList<>();

  public DescribeSavingsPlansRequest() {
  }

  public DescribeSavingsPlansRequest savingsPlanArns(List<String> savingsPlanArns) {
    this.savingsPlanArns = savingsPlanArns;
    return this;
  }

  public DescribeSavingsPlansRequest addSavingsPlanArnsItem(String savingsPlanArnsItem) {
    if (this.savingsPlanArns == null) {
      this.savingsPlanArns = new ArrayList<>();
    }
    this.savingsPlanArns.add(savingsPlanArnsItem);
    return this;
  }

  /**
   * The Amazon Resource Names (ARN) of the Savings Plans.
   * @return savingsPlanArns
   */
  @javax.annotation.Nullable
  public List<String> getSavingsPlanArns() {
    return savingsPlanArns;
  }

  public void setSavingsPlanArns(List<String> savingsPlanArns) {
    this.savingsPlanArns = savingsPlanArns;
  }


  public DescribeSavingsPlansRequest savingsPlanIds(List<String> savingsPlanIds) {
    this.savingsPlanIds = savingsPlanIds;
    return this;
  }

  public DescribeSavingsPlansRequest addSavingsPlanIdsItem(String savingsPlanIdsItem) {
    if (this.savingsPlanIds == null) {
      this.savingsPlanIds = new ArrayList<>();
    }
    this.savingsPlanIds.add(savingsPlanIdsItem);
    return this;
  }

  /**
   * The IDs of the Savings Plans.
   * @return savingsPlanIds
   */
  @javax.annotation.Nullable
  public List<String> getSavingsPlanIds() {
    return savingsPlanIds;
  }

  public void setSavingsPlanIds(List<String> savingsPlanIds) {
    this.savingsPlanIds = savingsPlanIds;
  }


  public DescribeSavingsPlansRequest nextToken(String nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  /**
   * The token for the next page of results.
   * @return nextToken
   */
  @javax.annotation.Nullable
  public String getNextToken() {
    return nextToken;
  }

  public void setNextToken(String nextToken) {
    this.nextToken = nextToken;
  }


  public DescribeSavingsPlansRequest maxResults(Integer maxResults) {
    this.maxResults = maxResults;
    return this;
  }

  /**
   * The maximum number of results to return with a single call. To retrieve additional results, make another call with the returned token value.
   * minimum: 1
   * maximum: 1000
   * @return maxResults
   */
  @javax.annotation.Nullable
  public Integer getMaxResults() {
    return maxResults;
  }

  public void setMaxResults(Integer maxResults) {
    this.maxResults = maxResults;
  }


  public DescribeSavingsPlansRequest states(List<SavingsPlanState> states) {
    this.states = states;
    return this;
  }

  public DescribeSavingsPlansRequest addStatesItem(SavingsPlanState statesItem) {
    if (this.states == null) {
      this.states = new ArrayList<>();
    }
    this.states.add(statesItem);
    return this;
  }

  /**
   * The states.
   * @return states
   */
  @javax.annotation.Nullable
  public List<SavingsPlanState> getStates() {
    return states;
  }

  public void setStates(List<SavingsPlanState> states) {
    this.states = states;
  }


  public DescribeSavingsPlansRequest filters(List<SavingsPlanFilter> filters) {
    this.filters = filters;
    return this;
  }

  public DescribeSavingsPlansRequest addFiltersItem(SavingsPlanFilter filtersItem) {
    if (this.filters == null) {
      this.filters = new ArrayList<>();
    }
    this.filters.add(filtersItem);
    return this;
  }

  /**
   * The filters.
   * @return filters
   */
  @javax.annotation.Nullable
  public List<SavingsPlanFilter> getFilters() {
    return filters;
  }

  public void setFilters(List<SavingsPlanFilter> filters) {
    this.filters = filters;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeSavingsPlansRequest describeSavingsPlansRequest = (DescribeSavingsPlansRequest) o;
    return Objects.equals(this.savingsPlanArns, describeSavingsPlansRequest.savingsPlanArns) &&
        Objects.equals(this.savingsPlanIds, describeSavingsPlansRequest.savingsPlanIds) &&
        Objects.equals(this.nextToken, describeSavingsPlansRequest.nextToken) &&
        Objects.equals(this.maxResults, describeSavingsPlansRequest.maxResults) &&
        Objects.equals(this.states, describeSavingsPlansRequest.states) &&
        Objects.equals(this.filters, describeSavingsPlansRequest.filters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(savingsPlanArns, savingsPlanIds, nextToken, maxResults, states, filters);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeSavingsPlansRequest {\n");
    sb.append("    savingsPlanArns: ").append(toIndentedString(savingsPlanArns)).append("\n");
    sb.append("    savingsPlanIds: ").append(toIndentedString(savingsPlanIds)).append("\n");
    sb.append("    nextToken: ").append(toIndentedString(nextToken)).append("\n");
    sb.append("    maxResults: ").append(toIndentedString(maxResults)).append("\n");
    sb.append("    states: ").append(toIndentedString(states)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("savingsPlanArns");
    openapiFields.add("savingsPlanIds");
    openapiFields.add("nextToken");
    openapiFields.add("maxResults");
    openapiFields.add("states");
    openapiFields.add("filters");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeSavingsPlansRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeSavingsPlansRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeSavingsPlansRequest is not found in the empty JSON string", DescribeSavingsPlansRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeSavingsPlansRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeSavingsPlansRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("savingsPlanArns") != null && !jsonObj.get("savingsPlanArns").isJsonNull() && !jsonObj.get("savingsPlanArns").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `savingsPlanArns` to be an array in the JSON string but got `%s`", jsonObj.get("savingsPlanArns").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("savingsPlanIds") != null && !jsonObj.get("savingsPlanIds").isJsonNull() && !jsonObj.get("savingsPlanIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `savingsPlanIds` to be an array in the JSON string but got `%s`", jsonObj.get("savingsPlanIds").toString()));
      }
      if ((jsonObj.get("nextToken") != null && !jsonObj.get("nextToken").isJsonNull()) && !jsonObj.get("nextToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nextToken").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("states") != null && !jsonObj.get("states").isJsonNull() && !jsonObj.get("states").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `states` to be an array in the JSON string but got `%s`", jsonObj.get("states").toString()));
      }
      if (jsonObj.get("filters") != null && !jsonObj.get("filters").isJsonNull()) {
        JsonArray jsonArrayfilters = jsonObj.getAsJsonArray("filters");
        if (jsonArrayfilters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("filters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `filters` to be an array in the JSON string but got `%s`", jsonObj.get("filters").toString()));
          }

          // validate the optional field `filters` (array)
          for (int i = 0; i < jsonArrayfilters.size(); i++) {
            SavingsPlanFilter.validateJsonElement(jsonArrayfilters.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeSavingsPlansRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeSavingsPlansRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeSavingsPlansRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeSavingsPlansRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeSavingsPlansRequest>() {
           @Override
           public void write(JsonWriter out, DescribeSavingsPlansRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeSavingsPlansRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeSavingsPlansRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeSavingsPlansRequest
   * @throws IOException if the JSON string is invalid with respect to DescribeSavingsPlansRequest
   */
  public static DescribeSavingsPlansRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeSavingsPlansRequest.class);
  }

  /**
   * Convert an instance of DescribeSavingsPlansRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

