/*
 * AWS Savings Plans
 * Savings Plans are a pricing model that offer significant savings on AWS usage (for example, on Amazon EC2 instances). You commit to a consistent amount of usage, in USD per hour, for a term of 1 or 3 years, and receive a lower price for that usage. For more information, see the <a href=\"https://docs.aws.amazon.com/savingsplans/latest/userguide/\">AWS Savings Plans User Guide</a>.
 *
 * The version of the OpenAPI document: 2019-06-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.CurrencyCode;
import org.openapitools.client.model.SavingsPlanPaymentOption;
import org.openapitools.client.model.SavingsPlanState;
import org.openapitools.client.model.SavingsPlanType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about a Savings Plan.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:04.017777-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SavingsPlan {
  public static final String SERIALIZED_NAME_OFFERING_ID = "offeringId";
  @SerializedName(SERIALIZED_NAME_OFFERING_ID)
  private String offeringId;

  public static final String SERIALIZED_NAME_SAVINGS_PLAN_ID = "savingsPlanId";
  @SerializedName(SERIALIZED_NAME_SAVINGS_PLAN_ID)
  private String savingsPlanId;

  public static final String SERIALIZED_NAME_SAVINGS_PLAN_ARN = "savingsPlanArn";
  @SerializedName(SERIALIZED_NAME_SAVINGS_PLAN_ARN)
  private String savingsPlanArn;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_START = "start";
  @SerializedName(SERIALIZED_NAME_START)
  private String start;

  public static final String SERIALIZED_NAME_END = "end";
  @SerializedName(SERIALIZED_NAME_END)
  private String end;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private SavingsPlanState state;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public static final String SERIALIZED_NAME_EC2_INSTANCE_FAMILY = "ec2InstanceFamily";
  @SerializedName(SERIALIZED_NAME_EC2_INSTANCE_FAMILY)
  private String ec2InstanceFamily;

  public static final String SERIALIZED_NAME_SAVINGS_PLAN_TYPE = "savingsPlanType";
  @SerializedName(SERIALIZED_NAME_SAVINGS_PLAN_TYPE)
  private SavingsPlanType savingsPlanType;

  public static final String SERIALIZED_NAME_PAYMENT_OPTION = "paymentOption";
  @SerializedName(SERIALIZED_NAME_PAYMENT_OPTION)
  private SavingsPlanPaymentOption paymentOption;

  public static final String SERIALIZED_NAME_PRODUCT_TYPES = "productTypes";
  @SerializedName(SERIALIZED_NAME_PRODUCT_TYPES)
  private List productTypes;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private CurrencyCode currency;

  public static final String SERIALIZED_NAME_COMMITMENT = "commitment";
  @SerializedName(SERIALIZED_NAME_COMMITMENT)
  private String commitment;

  public static final String SERIALIZED_NAME_UPFRONT_PAYMENT_AMOUNT = "upfrontPaymentAmount";
  @SerializedName(SERIALIZED_NAME_UPFRONT_PAYMENT_AMOUNT)
  private String upfrontPaymentAmount;

  public static final String SERIALIZED_NAME_RECURRING_PAYMENT_AMOUNT = "recurringPaymentAmount";
  @SerializedName(SERIALIZED_NAME_RECURRING_PAYMENT_AMOUNT)
  private String recurringPaymentAmount;

  public static final String SERIALIZED_NAME_TERM_DURATION_IN_SECONDS = "termDurationInSeconds";
  @SerializedName(SERIALIZED_NAME_TERM_DURATION_IN_SECONDS)
  private Integer termDurationInSeconds;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public SavingsPlan() {
  }

  public SavingsPlan offeringId(String offeringId) {
    this.offeringId = offeringId;
    return this;
  }

  /**
   * Get offeringId
   * @return offeringId
   */
  @javax.annotation.Nullable
  public String getOfferingId() {
    return offeringId;
  }

  public void setOfferingId(String offeringId) {
    this.offeringId = offeringId;
  }


  public SavingsPlan savingsPlanId(String savingsPlanId) {
    this.savingsPlanId = savingsPlanId;
    return this;
  }

  /**
   * Get savingsPlanId
   * @return savingsPlanId
   */
  @javax.annotation.Nullable
  public String getSavingsPlanId() {
    return savingsPlanId;
  }

  public void setSavingsPlanId(String savingsPlanId) {
    this.savingsPlanId = savingsPlanId;
  }


  public SavingsPlan savingsPlanArn(String savingsPlanArn) {
    this.savingsPlanArn = savingsPlanArn;
    return this;
  }

  /**
   * Get savingsPlanArn
   * @return savingsPlanArn
   */
  @javax.annotation.Nullable
  public String getSavingsPlanArn() {
    return savingsPlanArn;
  }

  public void setSavingsPlanArn(String savingsPlanArn) {
    this.savingsPlanArn = savingsPlanArn;
  }


  public SavingsPlan description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public SavingsPlan start(String start) {
    this.start = start;
    return this;
  }

  /**
   * Get start
   * @return start
   */
  @javax.annotation.Nullable
  public String getStart() {
    return start;
  }

  public void setStart(String start) {
    this.start = start;
  }


  public SavingsPlan end(String end) {
    this.end = end;
    return this;
  }

  /**
   * Get end
   * @return end
   */
  @javax.annotation.Nullable
  public String getEnd() {
    return end;
  }

  public void setEnd(String end) {
    this.end = end;
  }


  public SavingsPlan state(SavingsPlanState state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public SavingsPlanState getState() {
    return state;
  }

  public void setState(SavingsPlanState state) {
    this.state = state;
  }


  public SavingsPlan region(String region) {
    this.region = region;
    return this;
  }

  /**
   * Get region
   * @return region
   */
  @javax.annotation.Nullable
  public String getRegion() {
    return region;
  }

  public void setRegion(String region) {
    this.region = region;
  }


  public SavingsPlan ec2InstanceFamily(String ec2InstanceFamily) {
    this.ec2InstanceFamily = ec2InstanceFamily;
    return this;
  }

  /**
   * Get ec2InstanceFamily
   * @return ec2InstanceFamily
   */
  @javax.annotation.Nullable
  public String getEc2InstanceFamily() {
    return ec2InstanceFamily;
  }

  public void setEc2InstanceFamily(String ec2InstanceFamily) {
    this.ec2InstanceFamily = ec2InstanceFamily;
  }


  public SavingsPlan savingsPlanType(SavingsPlanType savingsPlanType) {
    this.savingsPlanType = savingsPlanType;
    return this;
  }

  /**
   * Get savingsPlanType
   * @return savingsPlanType
   */
  @javax.annotation.Nullable
  public SavingsPlanType getSavingsPlanType() {
    return savingsPlanType;
  }

  public void setSavingsPlanType(SavingsPlanType savingsPlanType) {
    this.savingsPlanType = savingsPlanType;
  }


  public SavingsPlan paymentOption(SavingsPlanPaymentOption paymentOption) {
    this.paymentOption = paymentOption;
    return this;
  }

  /**
   * Get paymentOption
   * @return paymentOption
   */
  @javax.annotation.Nullable
  public SavingsPlanPaymentOption getPaymentOption() {
    return paymentOption;
  }

  public void setPaymentOption(SavingsPlanPaymentOption paymentOption) {
    this.paymentOption = paymentOption;
  }


  public SavingsPlan productTypes(List productTypes) {
    this.productTypes = productTypes;
    return this;
  }

  /**
   * Get productTypes
   * @return productTypes
   */
  @javax.annotation.Nullable
  public List getProductTypes() {
    return productTypes;
  }

  public void setProductTypes(List productTypes) {
    this.productTypes = productTypes;
  }


  public SavingsPlan currency(CurrencyCode currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Get currency
   * @return currency
   */
  @javax.annotation.Nullable
  public CurrencyCode getCurrency() {
    return currency;
  }

  public void setCurrency(CurrencyCode currency) {
    this.currency = currency;
  }


  public SavingsPlan commitment(String commitment) {
    this.commitment = commitment;
    return this;
  }

  /**
   * Get commitment
   * @return commitment
   */
  @javax.annotation.Nullable
  public String getCommitment() {
    return commitment;
  }

  public void setCommitment(String commitment) {
    this.commitment = commitment;
  }


  public SavingsPlan upfrontPaymentAmount(String upfrontPaymentAmount) {
    this.upfrontPaymentAmount = upfrontPaymentAmount;
    return this;
  }

  /**
   * Get upfrontPaymentAmount
   * @return upfrontPaymentAmount
   */
  @javax.annotation.Nullable
  public String getUpfrontPaymentAmount() {
    return upfrontPaymentAmount;
  }

  public void setUpfrontPaymentAmount(String upfrontPaymentAmount) {
    this.upfrontPaymentAmount = upfrontPaymentAmount;
  }


  public SavingsPlan recurringPaymentAmount(String recurringPaymentAmount) {
    this.recurringPaymentAmount = recurringPaymentAmount;
    return this;
  }

  /**
   * Get recurringPaymentAmount
   * @return recurringPaymentAmount
   */
  @javax.annotation.Nullable
  public String getRecurringPaymentAmount() {
    return recurringPaymentAmount;
  }

  public void setRecurringPaymentAmount(String recurringPaymentAmount) {
    this.recurringPaymentAmount = recurringPaymentAmount;
  }


  public SavingsPlan termDurationInSeconds(Integer termDurationInSeconds) {
    this.termDurationInSeconds = termDurationInSeconds;
    return this;
  }

  /**
   * Get termDurationInSeconds
   * @return termDurationInSeconds
   */
  @javax.annotation.Nullable
  public Integer getTermDurationInSeconds() {
    return termDurationInSeconds;
  }

  public void setTermDurationInSeconds(Integer termDurationInSeconds) {
    this.termDurationInSeconds = termDurationInSeconds;
  }


  public SavingsPlan tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SavingsPlan savingsPlan = (SavingsPlan) o;
    return Objects.equals(this.offeringId, savingsPlan.offeringId) &&
        Objects.equals(this.savingsPlanId, savingsPlan.savingsPlanId) &&
        Objects.equals(this.savingsPlanArn, savingsPlan.savingsPlanArn) &&
        Objects.equals(this.description, savingsPlan.description) &&
        Objects.equals(this.start, savingsPlan.start) &&
        Objects.equals(this.end, savingsPlan.end) &&
        Objects.equals(this.state, savingsPlan.state) &&
        Objects.equals(this.region, savingsPlan.region) &&
        Objects.equals(this.ec2InstanceFamily, savingsPlan.ec2InstanceFamily) &&
        Objects.equals(this.savingsPlanType, savingsPlan.savingsPlanType) &&
        Objects.equals(this.paymentOption, savingsPlan.paymentOption) &&
        Objects.equals(this.productTypes, savingsPlan.productTypes) &&
        Objects.equals(this.currency, savingsPlan.currency) &&
        Objects.equals(this.commitment, savingsPlan.commitment) &&
        Objects.equals(this.upfrontPaymentAmount, savingsPlan.upfrontPaymentAmount) &&
        Objects.equals(this.recurringPaymentAmount, savingsPlan.recurringPaymentAmount) &&
        Objects.equals(this.termDurationInSeconds, savingsPlan.termDurationInSeconds) &&
        Objects.equals(this.tags, savingsPlan.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(offeringId, savingsPlanId, savingsPlanArn, description, start, end, state, region, ec2InstanceFamily, savingsPlanType, paymentOption, productTypes, currency, commitment, upfrontPaymentAmount, recurringPaymentAmount, termDurationInSeconds, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SavingsPlan {\n");
    sb.append("    offeringId: ").append(toIndentedString(offeringId)).append("\n");
    sb.append("    savingsPlanId: ").append(toIndentedString(savingsPlanId)).append("\n");
    sb.append("    savingsPlanArn: ").append(toIndentedString(savingsPlanArn)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("    end: ").append(toIndentedString(end)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    ec2InstanceFamily: ").append(toIndentedString(ec2InstanceFamily)).append("\n");
    sb.append("    savingsPlanType: ").append(toIndentedString(savingsPlanType)).append("\n");
    sb.append("    paymentOption: ").append(toIndentedString(paymentOption)).append("\n");
    sb.append("    productTypes: ").append(toIndentedString(productTypes)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    commitment: ").append(toIndentedString(commitment)).append("\n");
    sb.append("    upfrontPaymentAmount: ").append(toIndentedString(upfrontPaymentAmount)).append("\n");
    sb.append("    recurringPaymentAmount: ").append(toIndentedString(recurringPaymentAmount)).append("\n");
    sb.append("    termDurationInSeconds: ").append(toIndentedString(termDurationInSeconds)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("offeringId");
    openapiFields.add("savingsPlanId");
    openapiFields.add("savingsPlanArn");
    openapiFields.add("description");
    openapiFields.add("start");
    openapiFields.add("end");
    openapiFields.add("state");
    openapiFields.add("region");
    openapiFields.add("ec2InstanceFamily");
    openapiFields.add("savingsPlanType");
    openapiFields.add("paymentOption");
    openapiFields.add("productTypes");
    openapiFields.add("currency");
    openapiFields.add("commitment");
    openapiFields.add("upfrontPaymentAmount");
    openapiFields.add("recurringPaymentAmount");
    openapiFields.add("termDurationInSeconds");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SavingsPlan
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SavingsPlan.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SavingsPlan is not found in the empty JSON string", SavingsPlan.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SavingsPlan.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SavingsPlan` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `offeringId`
      if (jsonObj.get("offeringId") != null && !jsonObj.get("offeringId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("offeringId"));
      }
      // validate the optional field `savingsPlanId`
      if (jsonObj.get("savingsPlanId") != null && !jsonObj.get("savingsPlanId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("savingsPlanId"));
      }
      // validate the optional field `savingsPlanArn`
      if (jsonObj.get("savingsPlanArn") != null && !jsonObj.get("savingsPlanArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("savingsPlanArn"));
      }
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("description"));
      }
      // validate the optional field `start`
      if (jsonObj.get("start") != null && !jsonObj.get("start").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("start"));
      }
      // validate the optional field `end`
      if (jsonObj.get("end") != null && !jsonObj.get("end").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("end"));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        SavingsPlanState.validateJsonElement(jsonObj.get("state"));
      }
      // validate the optional field `region`
      if (jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("region"));
      }
      // validate the optional field `ec2InstanceFamily`
      if (jsonObj.get("ec2InstanceFamily") != null && !jsonObj.get("ec2InstanceFamily").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ec2InstanceFamily"));
      }
      // validate the optional field `savingsPlanType`
      if (jsonObj.get("savingsPlanType") != null && !jsonObj.get("savingsPlanType").isJsonNull()) {
        SavingsPlanType.validateJsonElement(jsonObj.get("savingsPlanType"));
      }
      // validate the optional field `paymentOption`
      if (jsonObj.get("paymentOption") != null && !jsonObj.get("paymentOption").isJsonNull()) {
        SavingsPlanPaymentOption.validateJsonElement(jsonObj.get("paymentOption"));
      }
      // validate the optional field `productTypes`
      if (jsonObj.get("productTypes") != null && !jsonObj.get("productTypes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("productTypes"));
      }
      // validate the optional field `currency`
      if (jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) {
        CurrencyCode.validateJsonElement(jsonObj.get("currency"));
      }
      // validate the optional field `commitment`
      if (jsonObj.get("commitment") != null && !jsonObj.get("commitment").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("commitment"));
      }
      // validate the optional field `upfrontPaymentAmount`
      if (jsonObj.get("upfrontPaymentAmount") != null && !jsonObj.get("upfrontPaymentAmount").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("upfrontPaymentAmount"));
      }
      // validate the optional field `recurringPaymentAmount`
      if (jsonObj.get("recurringPaymentAmount") != null && !jsonObj.get("recurringPaymentAmount").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("recurringPaymentAmount"));
      }
      // validate the optional field `termDurationInSeconds`
      if (jsonObj.get("termDurationInSeconds") != null && !jsonObj.get("termDurationInSeconds").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("termDurationInSeconds"));
      }
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("tags"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SavingsPlan.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SavingsPlan' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SavingsPlan> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SavingsPlan.class));

       return (TypeAdapter<T>) new TypeAdapter<SavingsPlan>() {
           @Override
           public void write(JsonWriter out, SavingsPlan value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SavingsPlan read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SavingsPlan given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SavingsPlan
   * @throws IOException if the JSON string is invalid with respect to SavingsPlan
   */
  public static SavingsPlan fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SavingsPlan.class);
  }

  /**
   * Convert an instance of SavingsPlan to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

