/*
 * AWS Savings Plans
 * Savings Plans are a pricing model that offer significant savings on AWS usage (for example, on Amazon EC2 instances). You commit to a consistent amount of usage, in USD per hour, for a term of 1 or 3 years, and receive a lower price for that usage. For more information, see the <a href=\"https://docs.aws.amazon.com/savingsplans/latest/userguide/\">AWS Savings Plans User Guide</a>.
 *
 * The version of the OpenAPI document: 2019-06-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CurrencyCode;
import org.openapitools.client.model.SavingsPlanOfferingFilterElement;
import org.openapitools.client.model.SavingsPlanPaymentOption;
import org.openapitools.client.model.SavingsPlanType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeSavingsPlansOfferingsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:04.017777-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeSavingsPlansOfferingsRequest {
  public static final String SERIALIZED_NAME_OFFERING_IDS = "offeringIds";
  @SerializedName(SERIALIZED_NAME_OFFERING_IDS)
  private List<String> offeringIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_PAYMENT_OPTIONS = "paymentOptions";
  @SerializedName(SERIALIZED_NAME_PAYMENT_OPTIONS)
  private List<SavingsPlanPaymentOption> paymentOptions = new ArrayList<>();

  /**
   * The product type.
   */
  @JsonAdapter(ProductTypeEnum.Adapter.class)
  public enum ProductTypeEnum {
    EC2("EC2"),
    
    FARGATE("Fargate"),
    
    LAMBDA("Lambda"),
    
    SAGE_MAKER("SageMaker");

    private String value;

    ProductTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProductTypeEnum fromValue(String value) {
      for (ProductTypeEnum b : ProductTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProductTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProductTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProductTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProductTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProductTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PRODUCT_TYPE = "productType";
  @SerializedName(SERIALIZED_NAME_PRODUCT_TYPE)
  private ProductTypeEnum productType;

  public static final String SERIALIZED_NAME_PLAN_TYPES = "planTypes";
  @SerializedName(SERIALIZED_NAME_PLAN_TYPES)
  private List<SavingsPlanType> planTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_DURATIONS = "durations";
  @SerializedName(SERIALIZED_NAME_DURATIONS)
  private List<Integer> durations = new ArrayList<>();

  public static final String SERIALIZED_NAME_CURRENCIES = "currencies";
  @SerializedName(SERIALIZED_NAME_CURRENCIES)
  private List<CurrencyCode> currencies = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTIONS = "descriptions";
  @SerializedName(SERIALIZED_NAME_DESCRIPTIONS)
  private List<String> descriptions = new ArrayList<>();

  public static final String SERIALIZED_NAME_SERVICE_CODES = "serviceCodes";
  @SerializedName(SERIALIZED_NAME_SERVICE_CODES)
  private List<String> serviceCodes = new ArrayList<>();

  public static final String SERIALIZED_NAME_USAGE_TYPES = "usageTypes";
  @SerializedName(SERIALIZED_NAME_USAGE_TYPES)
  private List<String> usageTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_OPERATIONS = "operations";
  @SerializedName(SERIALIZED_NAME_OPERATIONS)
  private List<String> operations = new ArrayList<>();

  public static final String SERIALIZED_NAME_FILTERS = "filters";
  @SerializedName(SERIALIZED_NAME_FILTERS)
  private List<SavingsPlanOfferingFilterElement> filters = new ArrayList<>();

  public static final String SERIALIZED_NAME_NEXT_TOKEN = "nextToken";
  @SerializedName(SERIALIZED_NAME_NEXT_TOKEN)
  private String nextToken;

  public static final String SERIALIZED_NAME_MAX_RESULTS = "maxResults";
  @SerializedName(SERIALIZED_NAME_MAX_RESULTS)
  private Integer maxResults;

  public DescribeSavingsPlansOfferingsRequest() {
  }

  public DescribeSavingsPlansOfferingsRequest offeringIds(List<String> offeringIds) {
    this.offeringIds = offeringIds;
    return this;
  }

  public DescribeSavingsPlansOfferingsRequest addOfferingIdsItem(String offeringIdsItem) {
    if (this.offeringIds == null) {
      this.offeringIds = new ArrayList<>();
    }
    this.offeringIds.add(offeringIdsItem);
    return this;
  }

  /**
   * The IDs of the offerings.
   * @return offeringIds
   */
  @javax.annotation.Nullable
  public List<String> getOfferingIds() {
    return offeringIds;
  }

  public void setOfferingIds(List<String> offeringIds) {
    this.offeringIds = offeringIds;
  }


  public DescribeSavingsPlansOfferingsRequest paymentOptions(List<SavingsPlanPaymentOption> paymentOptions) {
    this.paymentOptions = paymentOptions;
    return this;
  }

  public DescribeSavingsPlansOfferingsRequest addPaymentOptionsItem(SavingsPlanPaymentOption paymentOptionsItem) {
    if (this.paymentOptions == null) {
      this.paymentOptions = new ArrayList<>();
    }
    this.paymentOptions.add(paymentOptionsItem);
    return this;
  }

  /**
   * The payment options.
   * @return paymentOptions
   */
  @javax.annotation.Nullable
  public List<SavingsPlanPaymentOption> getPaymentOptions() {
    return paymentOptions;
  }

  public void setPaymentOptions(List<SavingsPlanPaymentOption> paymentOptions) {
    this.paymentOptions = paymentOptions;
  }


  public DescribeSavingsPlansOfferingsRequest productType(ProductTypeEnum productType) {
    this.productType = productType;
    return this;
  }

  /**
   * The product type.
   * @return productType
   */
  @javax.annotation.Nullable
  public ProductTypeEnum getProductType() {
    return productType;
  }

  public void setProductType(ProductTypeEnum productType) {
    this.productType = productType;
  }


  public DescribeSavingsPlansOfferingsRequest planTypes(List<SavingsPlanType> planTypes) {
    this.planTypes = planTypes;
    return this;
  }

  public DescribeSavingsPlansOfferingsRequest addPlanTypesItem(SavingsPlanType planTypesItem) {
    if (this.planTypes == null) {
      this.planTypes = new ArrayList<>();
    }
    this.planTypes.add(planTypesItem);
    return this;
  }

  /**
   * The plan type.
   * @return planTypes
   */
  @javax.annotation.Nullable
  public List<SavingsPlanType> getPlanTypes() {
    return planTypes;
  }

  public void setPlanTypes(List<SavingsPlanType> planTypes) {
    this.planTypes = planTypes;
  }


  public DescribeSavingsPlansOfferingsRequest durations(List<Integer> durations) {
    this.durations = durations;
    return this;
  }

  public DescribeSavingsPlansOfferingsRequest addDurationsItem(Integer durationsItem) {
    if (this.durations == null) {
      this.durations = new ArrayList<>();
    }
    this.durations.add(durationsItem);
    return this;
  }

  /**
   * The durations, in seconds.
   * @return durations
   */
  @javax.annotation.Nullable
  public List<Integer> getDurations() {
    return durations;
  }

  public void setDurations(List<Integer> durations) {
    this.durations = durations;
  }


  public DescribeSavingsPlansOfferingsRequest currencies(List<CurrencyCode> currencies) {
    this.currencies = currencies;
    return this;
  }

  public DescribeSavingsPlansOfferingsRequest addCurrenciesItem(CurrencyCode currenciesItem) {
    if (this.currencies == null) {
      this.currencies = new ArrayList<>();
    }
    this.currencies.add(currenciesItem);
    return this;
  }

  /**
   * The currencies.
   * @return currencies
   */
  @javax.annotation.Nullable
  public List<CurrencyCode> getCurrencies() {
    return currencies;
  }

  public void setCurrencies(List<CurrencyCode> currencies) {
    this.currencies = currencies;
  }


  public DescribeSavingsPlansOfferingsRequest descriptions(List<String> descriptions) {
    this.descriptions = descriptions;
    return this;
  }

  public DescribeSavingsPlansOfferingsRequest addDescriptionsItem(String descriptionsItem) {
    if (this.descriptions == null) {
      this.descriptions = new ArrayList<>();
    }
    this.descriptions.add(descriptionsItem);
    return this;
  }

  /**
   * The descriptions.
   * @return descriptions
   */
  @javax.annotation.Nullable
  public List<String> getDescriptions() {
    return descriptions;
  }

  public void setDescriptions(List<String> descriptions) {
    this.descriptions = descriptions;
  }


  public DescribeSavingsPlansOfferingsRequest serviceCodes(List<String> serviceCodes) {
    this.serviceCodes = serviceCodes;
    return this;
  }

  public DescribeSavingsPlansOfferingsRequest addServiceCodesItem(String serviceCodesItem) {
    if (this.serviceCodes == null) {
      this.serviceCodes = new ArrayList<>();
    }
    this.serviceCodes.add(serviceCodesItem);
    return this;
  }

  /**
   * The services.
   * @return serviceCodes
   */
  @javax.annotation.Nullable
  public List<String> getServiceCodes() {
    return serviceCodes;
  }

  public void setServiceCodes(List<String> serviceCodes) {
    this.serviceCodes = serviceCodes;
  }


  public DescribeSavingsPlansOfferingsRequest usageTypes(List<String> usageTypes) {
    this.usageTypes = usageTypes;
    return this;
  }

  public DescribeSavingsPlansOfferingsRequest addUsageTypesItem(String usageTypesItem) {
    if (this.usageTypes == null) {
      this.usageTypes = new ArrayList<>();
    }
    this.usageTypes.add(usageTypesItem);
    return this;
  }

  /**
   * The usage details of the line item in the billing report.
   * @return usageTypes
   */
  @javax.annotation.Nullable
  public List<String> getUsageTypes() {
    return usageTypes;
  }

  public void setUsageTypes(List<String> usageTypes) {
    this.usageTypes = usageTypes;
  }


  public DescribeSavingsPlansOfferingsRequest operations(List<String> operations) {
    this.operations = operations;
    return this;
  }

  public DescribeSavingsPlansOfferingsRequest addOperationsItem(String operationsItem) {
    if (this.operations == null) {
      this.operations = new ArrayList<>();
    }
    this.operations.add(operationsItem);
    return this;
  }

  /**
   * The specific AWS operation for the line item in the billing report.
   * @return operations
   */
  @javax.annotation.Nullable
  public List<String> getOperations() {
    return operations;
  }

  public void setOperations(List<String> operations) {
    this.operations = operations;
  }


  public DescribeSavingsPlansOfferingsRequest filters(List<SavingsPlanOfferingFilterElement> filters) {
    this.filters = filters;
    return this;
  }

  public DescribeSavingsPlansOfferingsRequest addFiltersItem(SavingsPlanOfferingFilterElement filtersItem) {
    if (this.filters == null) {
      this.filters = new ArrayList<>();
    }
    this.filters.add(filtersItem);
    return this;
  }

  /**
   * The filters.
   * @return filters
   */
  @javax.annotation.Nullable
  public List<SavingsPlanOfferingFilterElement> getFilters() {
    return filters;
  }

  public void setFilters(List<SavingsPlanOfferingFilterElement> filters) {
    this.filters = filters;
  }


  public DescribeSavingsPlansOfferingsRequest nextToken(String nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  /**
   * The token for the next page of results.
   * @return nextToken
   */
  @javax.annotation.Nullable
  public String getNextToken() {
    return nextToken;
  }

  public void setNextToken(String nextToken) {
    this.nextToken = nextToken;
  }


  public DescribeSavingsPlansOfferingsRequest maxResults(Integer maxResults) {
    this.maxResults = maxResults;
    return this;
  }

  /**
   * The maximum number of results to return with a single call. To retrieve additional results, make another call with the returned token value.
   * minimum: 0
   * maximum: 1000
   * @return maxResults
   */
  @javax.annotation.Nullable
  public Integer getMaxResults() {
    return maxResults;
  }

  public void setMaxResults(Integer maxResults) {
    this.maxResults = maxResults;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeSavingsPlansOfferingsRequest describeSavingsPlansOfferingsRequest = (DescribeSavingsPlansOfferingsRequest) o;
    return Objects.equals(this.offeringIds, describeSavingsPlansOfferingsRequest.offeringIds) &&
        Objects.equals(this.paymentOptions, describeSavingsPlansOfferingsRequest.paymentOptions) &&
        Objects.equals(this.productType, describeSavingsPlansOfferingsRequest.productType) &&
        Objects.equals(this.planTypes, describeSavingsPlansOfferingsRequest.planTypes) &&
        Objects.equals(this.durations, describeSavingsPlansOfferingsRequest.durations) &&
        Objects.equals(this.currencies, describeSavingsPlansOfferingsRequest.currencies) &&
        Objects.equals(this.descriptions, describeSavingsPlansOfferingsRequest.descriptions) &&
        Objects.equals(this.serviceCodes, describeSavingsPlansOfferingsRequest.serviceCodes) &&
        Objects.equals(this.usageTypes, describeSavingsPlansOfferingsRequest.usageTypes) &&
        Objects.equals(this.operations, describeSavingsPlansOfferingsRequest.operations) &&
        Objects.equals(this.filters, describeSavingsPlansOfferingsRequest.filters) &&
        Objects.equals(this.nextToken, describeSavingsPlansOfferingsRequest.nextToken) &&
        Objects.equals(this.maxResults, describeSavingsPlansOfferingsRequest.maxResults);
  }

  @Override
  public int hashCode() {
    return Objects.hash(offeringIds, paymentOptions, productType, planTypes, durations, currencies, descriptions, serviceCodes, usageTypes, operations, filters, nextToken, maxResults);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeSavingsPlansOfferingsRequest {\n");
    sb.append("    offeringIds: ").append(toIndentedString(offeringIds)).append("\n");
    sb.append("    paymentOptions: ").append(toIndentedString(paymentOptions)).append("\n");
    sb.append("    productType: ").append(toIndentedString(productType)).append("\n");
    sb.append("    planTypes: ").append(toIndentedString(planTypes)).append("\n");
    sb.append("    durations: ").append(toIndentedString(durations)).append("\n");
    sb.append("    currencies: ").append(toIndentedString(currencies)).append("\n");
    sb.append("    descriptions: ").append(toIndentedString(descriptions)).append("\n");
    sb.append("    serviceCodes: ").append(toIndentedString(serviceCodes)).append("\n");
    sb.append("    usageTypes: ").append(toIndentedString(usageTypes)).append("\n");
    sb.append("    operations: ").append(toIndentedString(operations)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    nextToken: ").append(toIndentedString(nextToken)).append("\n");
    sb.append("    maxResults: ").append(toIndentedString(maxResults)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("offeringIds");
    openapiFields.add("paymentOptions");
    openapiFields.add("productType");
    openapiFields.add("planTypes");
    openapiFields.add("durations");
    openapiFields.add("currencies");
    openapiFields.add("descriptions");
    openapiFields.add("serviceCodes");
    openapiFields.add("usageTypes");
    openapiFields.add("operations");
    openapiFields.add("filters");
    openapiFields.add("nextToken");
    openapiFields.add("maxResults");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeSavingsPlansOfferingsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeSavingsPlansOfferingsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeSavingsPlansOfferingsRequest is not found in the empty JSON string", DescribeSavingsPlansOfferingsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeSavingsPlansOfferingsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeSavingsPlansOfferingsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("offeringIds") != null && !jsonObj.get("offeringIds").isJsonNull() && !jsonObj.get("offeringIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `offeringIds` to be an array in the JSON string but got `%s`", jsonObj.get("offeringIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("paymentOptions") != null && !jsonObj.get("paymentOptions").isJsonNull() && !jsonObj.get("paymentOptions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentOptions` to be an array in the JSON string but got `%s`", jsonObj.get("paymentOptions").toString()));
      }
      if ((jsonObj.get("productType") != null && !jsonObj.get("productType").isJsonNull()) && !jsonObj.get("productType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productType").toString()));
      }
      // validate the optional field `productType`
      if (jsonObj.get("productType") != null && !jsonObj.get("productType").isJsonNull()) {
        ProductTypeEnum.validateJsonElement(jsonObj.get("productType"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("planTypes") != null && !jsonObj.get("planTypes").isJsonNull() && !jsonObj.get("planTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `planTypes` to be an array in the JSON string but got `%s`", jsonObj.get("planTypes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("durations") != null && !jsonObj.get("durations").isJsonNull() && !jsonObj.get("durations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `durations` to be an array in the JSON string but got `%s`", jsonObj.get("durations").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("currencies") != null && !jsonObj.get("currencies").isJsonNull() && !jsonObj.get("currencies").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencies` to be an array in the JSON string but got `%s`", jsonObj.get("currencies").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("descriptions") != null && !jsonObj.get("descriptions").isJsonNull() && !jsonObj.get("descriptions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `descriptions` to be an array in the JSON string but got `%s`", jsonObj.get("descriptions").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("serviceCodes") != null && !jsonObj.get("serviceCodes").isJsonNull() && !jsonObj.get("serviceCodes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceCodes` to be an array in the JSON string but got `%s`", jsonObj.get("serviceCodes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("usageTypes") != null && !jsonObj.get("usageTypes").isJsonNull() && !jsonObj.get("usageTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `usageTypes` to be an array in the JSON string but got `%s`", jsonObj.get("usageTypes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("operations") != null && !jsonObj.get("operations").isJsonNull() && !jsonObj.get("operations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `operations` to be an array in the JSON string but got `%s`", jsonObj.get("operations").toString()));
      }
      if (jsonObj.get("filters") != null && !jsonObj.get("filters").isJsonNull()) {
        JsonArray jsonArrayfilters = jsonObj.getAsJsonArray("filters");
        if (jsonArrayfilters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("filters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `filters` to be an array in the JSON string but got `%s`", jsonObj.get("filters").toString()));
          }

          // validate the optional field `filters` (array)
          for (int i = 0; i < jsonArrayfilters.size(); i++) {
            SavingsPlanOfferingFilterElement.validateJsonElement(jsonArrayfilters.get(i));
          };
        }
      }
      if ((jsonObj.get("nextToken") != null && !jsonObj.get("nextToken").isJsonNull()) && !jsonObj.get("nextToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nextToken").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeSavingsPlansOfferingsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeSavingsPlansOfferingsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeSavingsPlansOfferingsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeSavingsPlansOfferingsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeSavingsPlansOfferingsRequest>() {
           @Override
           public void write(JsonWriter out, DescribeSavingsPlansOfferingsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeSavingsPlansOfferingsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeSavingsPlansOfferingsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeSavingsPlansOfferingsRequest
   * @throws IOException if the JSON string is invalid with respect to DescribeSavingsPlansOfferingsRequest
   */
  public static DescribeSavingsPlansOfferingsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeSavingsPlansOfferingsRequest.class);
  }

  /**
   * Convert an instance of DescribeSavingsPlansOfferingsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

