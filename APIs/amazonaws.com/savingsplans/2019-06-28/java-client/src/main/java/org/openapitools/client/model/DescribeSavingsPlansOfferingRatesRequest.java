/*
 * AWS Savings Plans
 * Savings Plans are a pricing model that offer significant savings on AWS usage (for example, on Amazon EC2 instances). You commit to a consistent amount of usage, in USD per hour, for a term of 1 or 3 years, and receive a lower price for that usage. For more information, see the <a href=\"https://docs.aws.amazon.com/savingsplans/latest/userguide/\">AWS Savings Plans User Guide</a>.
 *
 * The version of the OpenAPI document: 2019-06-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SavingsPlanOfferingRateFilterElement;
import org.openapitools.client.model.SavingsPlanPaymentOption;
import org.openapitools.client.model.SavingsPlanProductType;
import org.openapitools.client.model.SavingsPlanRateServiceCode;
import org.openapitools.client.model.SavingsPlanType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeSavingsPlansOfferingRatesRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:04.017777-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeSavingsPlansOfferingRatesRequest {
  public static final String SERIALIZED_NAME_SAVINGS_PLAN_OFFERING_IDS = "savingsPlanOfferingIds";
  @SerializedName(SERIALIZED_NAME_SAVINGS_PLAN_OFFERING_IDS)
  private List<String> savingsPlanOfferingIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_SAVINGS_PLAN_PAYMENT_OPTIONS = "savingsPlanPaymentOptions";
  @SerializedName(SERIALIZED_NAME_SAVINGS_PLAN_PAYMENT_OPTIONS)
  private List<SavingsPlanPaymentOption> savingsPlanPaymentOptions = new ArrayList<>();

  public static final String SERIALIZED_NAME_SAVINGS_PLAN_TYPES = "savingsPlanTypes";
  @SerializedName(SERIALIZED_NAME_SAVINGS_PLAN_TYPES)
  private List<SavingsPlanType> savingsPlanTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRODUCTS = "products";
  @SerializedName(SERIALIZED_NAME_PRODUCTS)
  private List<SavingsPlanProductType> products = new ArrayList<>();

  public static final String SERIALIZED_NAME_SERVICE_CODES = "serviceCodes";
  @SerializedName(SERIALIZED_NAME_SERVICE_CODES)
  private List<SavingsPlanRateServiceCode> serviceCodes = new ArrayList<>();

  public static final String SERIALIZED_NAME_USAGE_TYPES = "usageTypes";
  @SerializedName(SERIALIZED_NAME_USAGE_TYPES)
  private List<String> usageTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_OPERATIONS = "operations";
  @SerializedName(SERIALIZED_NAME_OPERATIONS)
  private List<String> operations = new ArrayList<>();

  public static final String SERIALIZED_NAME_FILTERS = "filters";
  @SerializedName(SERIALIZED_NAME_FILTERS)
  private List<SavingsPlanOfferingRateFilterElement> filters = new ArrayList<>();

  public static final String SERIALIZED_NAME_NEXT_TOKEN = "nextToken";
  @SerializedName(SERIALIZED_NAME_NEXT_TOKEN)
  private String nextToken;

  public static final String SERIALIZED_NAME_MAX_RESULTS = "maxResults";
  @SerializedName(SERIALIZED_NAME_MAX_RESULTS)
  private Integer maxResults;

  public DescribeSavingsPlansOfferingRatesRequest() {
  }

  public DescribeSavingsPlansOfferingRatesRequest savingsPlanOfferingIds(List<String> savingsPlanOfferingIds) {
    this.savingsPlanOfferingIds = savingsPlanOfferingIds;
    return this;
  }

  public DescribeSavingsPlansOfferingRatesRequest addSavingsPlanOfferingIdsItem(String savingsPlanOfferingIdsItem) {
    if (this.savingsPlanOfferingIds == null) {
      this.savingsPlanOfferingIds = new ArrayList<>();
    }
    this.savingsPlanOfferingIds.add(savingsPlanOfferingIdsItem);
    return this;
  }

  /**
   * The IDs of the offerings.
   * @return savingsPlanOfferingIds
   */
  @javax.annotation.Nullable
  public List<String> getSavingsPlanOfferingIds() {
    return savingsPlanOfferingIds;
  }

  public void setSavingsPlanOfferingIds(List<String> savingsPlanOfferingIds) {
    this.savingsPlanOfferingIds = savingsPlanOfferingIds;
  }


  public DescribeSavingsPlansOfferingRatesRequest savingsPlanPaymentOptions(List<SavingsPlanPaymentOption> savingsPlanPaymentOptions) {
    this.savingsPlanPaymentOptions = savingsPlanPaymentOptions;
    return this;
  }

  public DescribeSavingsPlansOfferingRatesRequest addSavingsPlanPaymentOptionsItem(SavingsPlanPaymentOption savingsPlanPaymentOptionsItem) {
    if (this.savingsPlanPaymentOptions == null) {
      this.savingsPlanPaymentOptions = new ArrayList<>();
    }
    this.savingsPlanPaymentOptions.add(savingsPlanPaymentOptionsItem);
    return this;
  }

  /**
   * The payment options.
   * @return savingsPlanPaymentOptions
   */
  @javax.annotation.Nullable
  public List<SavingsPlanPaymentOption> getSavingsPlanPaymentOptions() {
    return savingsPlanPaymentOptions;
  }

  public void setSavingsPlanPaymentOptions(List<SavingsPlanPaymentOption> savingsPlanPaymentOptions) {
    this.savingsPlanPaymentOptions = savingsPlanPaymentOptions;
  }


  public DescribeSavingsPlansOfferingRatesRequest savingsPlanTypes(List<SavingsPlanType> savingsPlanTypes) {
    this.savingsPlanTypes = savingsPlanTypes;
    return this;
  }

  public DescribeSavingsPlansOfferingRatesRequest addSavingsPlanTypesItem(SavingsPlanType savingsPlanTypesItem) {
    if (this.savingsPlanTypes == null) {
      this.savingsPlanTypes = new ArrayList<>();
    }
    this.savingsPlanTypes.add(savingsPlanTypesItem);
    return this;
  }

  /**
   * The plan types.
   * @return savingsPlanTypes
   */
  @javax.annotation.Nullable
  public List<SavingsPlanType> getSavingsPlanTypes() {
    return savingsPlanTypes;
  }

  public void setSavingsPlanTypes(List<SavingsPlanType> savingsPlanTypes) {
    this.savingsPlanTypes = savingsPlanTypes;
  }


  public DescribeSavingsPlansOfferingRatesRequest products(List<SavingsPlanProductType> products) {
    this.products = products;
    return this;
  }

  public DescribeSavingsPlansOfferingRatesRequest addProductsItem(SavingsPlanProductType productsItem) {
    if (this.products == null) {
      this.products = new ArrayList<>();
    }
    this.products.add(productsItem);
    return this;
  }

  /**
   * The AWS products.
   * @return products
   */
  @javax.annotation.Nullable
  public List<SavingsPlanProductType> getProducts() {
    return products;
  }

  public void setProducts(List<SavingsPlanProductType> products) {
    this.products = products;
  }


  public DescribeSavingsPlansOfferingRatesRequest serviceCodes(List<SavingsPlanRateServiceCode> serviceCodes) {
    this.serviceCodes = serviceCodes;
    return this;
  }

  public DescribeSavingsPlansOfferingRatesRequest addServiceCodesItem(SavingsPlanRateServiceCode serviceCodesItem) {
    if (this.serviceCodes == null) {
      this.serviceCodes = new ArrayList<>();
    }
    this.serviceCodes.add(serviceCodesItem);
    return this;
  }

  /**
   * The services.
   * @return serviceCodes
   */
  @javax.annotation.Nullable
  public List<SavingsPlanRateServiceCode> getServiceCodes() {
    return serviceCodes;
  }

  public void setServiceCodes(List<SavingsPlanRateServiceCode> serviceCodes) {
    this.serviceCodes = serviceCodes;
  }


  public DescribeSavingsPlansOfferingRatesRequest usageTypes(List<String> usageTypes) {
    this.usageTypes = usageTypes;
    return this;
  }

  public DescribeSavingsPlansOfferingRatesRequest addUsageTypesItem(String usageTypesItem) {
    if (this.usageTypes == null) {
      this.usageTypes = new ArrayList<>();
    }
    this.usageTypes.add(usageTypesItem);
    return this;
  }

  /**
   * The usage details of the line item in the billing report.
   * @return usageTypes
   */
  @javax.annotation.Nullable
  public List<String> getUsageTypes() {
    return usageTypes;
  }

  public void setUsageTypes(List<String> usageTypes) {
    this.usageTypes = usageTypes;
  }


  public DescribeSavingsPlansOfferingRatesRequest operations(List<String> operations) {
    this.operations = operations;
    return this;
  }

  public DescribeSavingsPlansOfferingRatesRequest addOperationsItem(String operationsItem) {
    if (this.operations == null) {
      this.operations = new ArrayList<>();
    }
    this.operations.add(operationsItem);
    return this;
  }

  /**
   * The specific AWS operation for the line item in the billing report.
   * @return operations
   */
  @javax.annotation.Nullable
  public List<String> getOperations() {
    return operations;
  }

  public void setOperations(List<String> operations) {
    this.operations = operations;
  }


  public DescribeSavingsPlansOfferingRatesRequest filters(List<SavingsPlanOfferingRateFilterElement> filters) {
    this.filters = filters;
    return this;
  }

  public DescribeSavingsPlansOfferingRatesRequest addFiltersItem(SavingsPlanOfferingRateFilterElement filtersItem) {
    if (this.filters == null) {
      this.filters = new ArrayList<>();
    }
    this.filters.add(filtersItem);
    return this;
  }

  /**
   * The filters.
   * @return filters
   */
  @javax.annotation.Nullable
  public List<SavingsPlanOfferingRateFilterElement> getFilters() {
    return filters;
  }

  public void setFilters(List<SavingsPlanOfferingRateFilterElement> filters) {
    this.filters = filters;
  }


  public DescribeSavingsPlansOfferingRatesRequest nextToken(String nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  /**
   * The token for the next page of results.
   * @return nextToken
   */
  @javax.annotation.Nullable
  public String getNextToken() {
    return nextToken;
  }

  public void setNextToken(String nextToken) {
    this.nextToken = nextToken;
  }


  public DescribeSavingsPlansOfferingRatesRequest maxResults(Integer maxResults) {
    this.maxResults = maxResults;
    return this;
  }

  /**
   * The maximum number of results to return with a single call. To retrieve additional results, make another call with the returned token value.
   * minimum: 0
   * maximum: 1000
   * @return maxResults
   */
  @javax.annotation.Nullable
  public Integer getMaxResults() {
    return maxResults;
  }

  public void setMaxResults(Integer maxResults) {
    this.maxResults = maxResults;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeSavingsPlansOfferingRatesRequest describeSavingsPlansOfferingRatesRequest = (DescribeSavingsPlansOfferingRatesRequest) o;
    return Objects.equals(this.savingsPlanOfferingIds, describeSavingsPlansOfferingRatesRequest.savingsPlanOfferingIds) &&
        Objects.equals(this.savingsPlanPaymentOptions, describeSavingsPlansOfferingRatesRequest.savingsPlanPaymentOptions) &&
        Objects.equals(this.savingsPlanTypes, describeSavingsPlansOfferingRatesRequest.savingsPlanTypes) &&
        Objects.equals(this.products, describeSavingsPlansOfferingRatesRequest.products) &&
        Objects.equals(this.serviceCodes, describeSavingsPlansOfferingRatesRequest.serviceCodes) &&
        Objects.equals(this.usageTypes, describeSavingsPlansOfferingRatesRequest.usageTypes) &&
        Objects.equals(this.operations, describeSavingsPlansOfferingRatesRequest.operations) &&
        Objects.equals(this.filters, describeSavingsPlansOfferingRatesRequest.filters) &&
        Objects.equals(this.nextToken, describeSavingsPlansOfferingRatesRequest.nextToken) &&
        Objects.equals(this.maxResults, describeSavingsPlansOfferingRatesRequest.maxResults);
  }

  @Override
  public int hashCode() {
    return Objects.hash(savingsPlanOfferingIds, savingsPlanPaymentOptions, savingsPlanTypes, products, serviceCodes, usageTypes, operations, filters, nextToken, maxResults);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeSavingsPlansOfferingRatesRequest {\n");
    sb.append("    savingsPlanOfferingIds: ").append(toIndentedString(savingsPlanOfferingIds)).append("\n");
    sb.append("    savingsPlanPaymentOptions: ").append(toIndentedString(savingsPlanPaymentOptions)).append("\n");
    sb.append("    savingsPlanTypes: ").append(toIndentedString(savingsPlanTypes)).append("\n");
    sb.append("    products: ").append(toIndentedString(products)).append("\n");
    sb.append("    serviceCodes: ").append(toIndentedString(serviceCodes)).append("\n");
    sb.append("    usageTypes: ").append(toIndentedString(usageTypes)).append("\n");
    sb.append("    operations: ").append(toIndentedString(operations)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    nextToken: ").append(toIndentedString(nextToken)).append("\n");
    sb.append("    maxResults: ").append(toIndentedString(maxResults)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("savingsPlanOfferingIds");
    openapiFields.add("savingsPlanPaymentOptions");
    openapiFields.add("savingsPlanTypes");
    openapiFields.add("products");
    openapiFields.add("serviceCodes");
    openapiFields.add("usageTypes");
    openapiFields.add("operations");
    openapiFields.add("filters");
    openapiFields.add("nextToken");
    openapiFields.add("maxResults");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeSavingsPlansOfferingRatesRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeSavingsPlansOfferingRatesRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeSavingsPlansOfferingRatesRequest is not found in the empty JSON string", DescribeSavingsPlansOfferingRatesRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeSavingsPlansOfferingRatesRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeSavingsPlansOfferingRatesRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("savingsPlanOfferingIds") != null && !jsonObj.get("savingsPlanOfferingIds").isJsonNull() && !jsonObj.get("savingsPlanOfferingIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `savingsPlanOfferingIds` to be an array in the JSON string but got `%s`", jsonObj.get("savingsPlanOfferingIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("savingsPlanPaymentOptions") != null && !jsonObj.get("savingsPlanPaymentOptions").isJsonNull() && !jsonObj.get("savingsPlanPaymentOptions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `savingsPlanPaymentOptions` to be an array in the JSON string but got `%s`", jsonObj.get("savingsPlanPaymentOptions").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("savingsPlanTypes") != null && !jsonObj.get("savingsPlanTypes").isJsonNull() && !jsonObj.get("savingsPlanTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `savingsPlanTypes` to be an array in the JSON string but got `%s`", jsonObj.get("savingsPlanTypes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("products") != null && !jsonObj.get("products").isJsonNull() && !jsonObj.get("products").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `products` to be an array in the JSON string but got `%s`", jsonObj.get("products").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("serviceCodes") != null && !jsonObj.get("serviceCodes").isJsonNull() && !jsonObj.get("serviceCodes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceCodes` to be an array in the JSON string but got `%s`", jsonObj.get("serviceCodes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("usageTypes") != null && !jsonObj.get("usageTypes").isJsonNull() && !jsonObj.get("usageTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `usageTypes` to be an array in the JSON string but got `%s`", jsonObj.get("usageTypes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("operations") != null && !jsonObj.get("operations").isJsonNull() && !jsonObj.get("operations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `operations` to be an array in the JSON string but got `%s`", jsonObj.get("operations").toString()));
      }
      if (jsonObj.get("filters") != null && !jsonObj.get("filters").isJsonNull()) {
        JsonArray jsonArrayfilters = jsonObj.getAsJsonArray("filters");
        if (jsonArrayfilters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("filters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `filters` to be an array in the JSON string but got `%s`", jsonObj.get("filters").toString()));
          }

          // validate the optional field `filters` (array)
          for (int i = 0; i < jsonArrayfilters.size(); i++) {
            SavingsPlanOfferingRateFilterElement.validateJsonElement(jsonArrayfilters.get(i));
          };
        }
      }
      if ((jsonObj.get("nextToken") != null && !jsonObj.get("nextToken").isJsonNull()) && !jsonObj.get("nextToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nextToken").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeSavingsPlansOfferingRatesRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeSavingsPlansOfferingRatesRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeSavingsPlansOfferingRatesRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeSavingsPlansOfferingRatesRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeSavingsPlansOfferingRatesRequest>() {
           @Override
           public void write(JsonWriter out, DescribeSavingsPlansOfferingRatesRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeSavingsPlansOfferingRatesRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeSavingsPlansOfferingRatesRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeSavingsPlansOfferingRatesRequest
   * @throws IOException if the JSON string is invalid with respect to DescribeSavingsPlansOfferingRatesRequest
   */
  public static DescribeSavingsPlansOfferingRatesRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeSavingsPlansOfferingRatesRequest.class);
  }

  /**
   * Convert an instance of DescribeSavingsPlansOfferingRatesRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

