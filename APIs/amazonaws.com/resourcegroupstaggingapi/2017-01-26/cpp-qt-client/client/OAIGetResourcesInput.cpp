/**
 * AWS Resource Groups Tagging API
 * <fullname>Resource Groups Tagging API</fullname>
 *
 * The version of the OpenAPI document: 2017-01-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetResourcesInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetResourcesInput::OAIGetResourcesInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetResourcesInput::OAIGetResourcesInput() {
    this->initializeModel();
}

OAIGetResourcesInput::~OAIGetResourcesInput() {}

void OAIGetResourcesInput::initializeModel() {

    m_pagination_token_isSet = false;
    m_pagination_token_isValid = false;

    m_tag_filters_isSet = false;
    m_tag_filters_isValid = false;

    m_resources_per_page_isSet = false;
    m_resources_per_page_isValid = false;

    m_tags_per_page_isSet = false;
    m_tags_per_page_isValid = false;

    m_resource_type_filters_isSet = false;
    m_resource_type_filters_isValid = false;

    m_include_compliance_details_isSet = false;
    m_include_compliance_details_isValid = false;

    m_exclude_compliant_resources_isSet = false;
    m_exclude_compliant_resources_isValid = false;

    m_resource_arn_list_isSet = false;
    m_resource_arn_list_isValid = false;
}

void OAIGetResourcesInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetResourcesInput::fromJsonObject(QJsonObject json) {

    m_pagination_token_isValid = ::OpenAPI::fromJsonValue(m_pagination_token, json[QString("PaginationToken")]);
    m_pagination_token_isSet = !json[QString("PaginationToken")].isNull() && m_pagination_token_isValid;

    m_tag_filters_isValid = ::OpenAPI::fromJsonValue(m_tag_filters, json[QString("TagFilters")]);
    m_tag_filters_isSet = !json[QString("TagFilters")].isNull() && m_tag_filters_isValid;

    m_resources_per_page_isValid = ::OpenAPI::fromJsonValue(m_resources_per_page, json[QString("ResourcesPerPage")]);
    m_resources_per_page_isSet = !json[QString("ResourcesPerPage")].isNull() && m_resources_per_page_isValid;

    m_tags_per_page_isValid = ::OpenAPI::fromJsonValue(m_tags_per_page, json[QString("TagsPerPage")]);
    m_tags_per_page_isSet = !json[QString("TagsPerPage")].isNull() && m_tags_per_page_isValid;

    m_resource_type_filters_isValid = ::OpenAPI::fromJsonValue(m_resource_type_filters, json[QString("ResourceTypeFilters")]);
    m_resource_type_filters_isSet = !json[QString("ResourceTypeFilters")].isNull() && m_resource_type_filters_isValid;

    m_include_compliance_details_isValid = ::OpenAPI::fromJsonValue(m_include_compliance_details, json[QString("IncludeComplianceDetails")]);
    m_include_compliance_details_isSet = !json[QString("IncludeComplianceDetails")].isNull() && m_include_compliance_details_isValid;

    m_exclude_compliant_resources_isValid = ::OpenAPI::fromJsonValue(m_exclude_compliant_resources, json[QString("ExcludeCompliantResources")]);
    m_exclude_compliant_resources_isSet = !json[QString("ExcludeCompliantResources")].isNull() && m_exclude_compliant_resources_isValid;

    m_resource_arn_list_isValid = ::OpenAPI::fromJsonValue(m_resource_arn_list, json[QString("ResourceARNList")]);
    m_resource_arn_list_isSet = !json[QString("ResourceARNList")].isNull() && m_resource_arn_list_isValid;
}

QString OAIGetResourcesInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetResourcesInput::asJsonObject() const {
    QJsonObject obj;
    if (m_pagination_token_isSet) {
        obj.insert(QString("PaginationToken"), ::OpenAPI::toJsonValue(m_pagination_token));
    }
    if (m_tag_filters.isSet()) {
        obj.insert(QString("TagFilters"), ::OpenAPI::toJsonValue(m_tag_filters));
    }
    if (m_resources_per_page_isSet) {
        obj.insert(QString("ResourcesPerPage"), ::OpenAPI::toJsonValue(m_resources_per_page));
    }
    if (m_tags_per_page_isSet) {
        obj.insert(QString("TagsPerPage"), ::OpenAPI::toJsonValue(m_tags_per_page));
    }
    if (m_resource_type_filters.isSet()) {
        obj.insert(QString("ResourceTypeFilters"), ::OpenAPI::toJsonValue(m_resource_type_filters));
    }
    if (m_include_compliance_details_isSet) {
        obj.insert(QString("IncludeComplianceDetails"), ::OpenAPI::toJsonValue(m_include_compliance_details));
    }
    if (m_exclude_compliant_resources_isSet) {
        obj.insert(QString("ExcludeCompliantResources"), ::OpenAPI::toJsonValue(m_exclude_compliant_resources));
    }
    if (m_resource_arn_list.isSet()) {
        obj.insert(QString("ResourceARNList"), ::OpenAPI::toJsonValue(m_resource_arn_list));
    }
    return obj;
}

QString OAIGetResourcesInput::getPaginationToken() const {
    return m_pagination_token;
}
void OAIGetResourcesInput::setPaginationToken(const QString &pagination_token) {
    m_pagination_token = pagination_token;
    m_pagination_token_isSet = true;
}

bool OAIGetResourcesInput::is_pagination_token_Set() const{
    return m_pagination_token_isSet;
}

bool OAIGetResourcesInput::is_pagination_token_Valid() const{
    return m_pagination_token_isValid;
}

QList OAIGetResourcesInput::getTagFilters() const {
    return m_tag_filters;
}
void OAIGetResourcesInput::setTagFilters(const QList &tag_filters) {
    m_tag_filters = tag_filters;
    m_tag_filters_isSet = true;
}

bool OAIGetResourcesInput::is_tag_filters_Set() const{
    return m_tag_filters_isSet;
}

bool OAIGetResourcesInput::is_tag_filters_Valid() const{
    return m_tag_filters_isValid;
}

qint32 OAIGetResourcesInput::getResourcesPerPage() const {
    return m_resources_per_page;
}
void OAIGetResourcesInput::setResourcesPerPage(const qint32 &resources_per_page) {
    m_resources_per_page = resources_per_page;
    m_resources_per_page_isSet = true;
}

bool OAIGetResourcesInput::is_resources_per_page_Set() const{
    return m_resources_per_page_isSet;
}

bool OAIGetResourcesInput::is_resources_per_page_Valid() const{
    return m_resources_per_page_isValid;
}

qint32 OAIGetResourcesInput::getTagsPerPage() const {
    return m_tags_per_page;
}
void OAIGetResourcesInput::setTagsPerPage(const qint32 &tags_per_page) {
    m_tags_per_page = tags_per_page;
    m_tags_per_page_isSet = true;
}

bool OAIGetResourcesInput::is_tags_per_page_Set() const{
    return m_tags_per_page_isSet;
}

bool OAIGetResourcesInput::is_tags_per_page_Valid() const{
    return m_tags_per_page_isValid;
}

QList OAIGetResourcesInput::getResourceTypeFilters() const {
    return m_resource_type_filters;
}
void OAIGetResourcesInput::setResourceTypeFilters(const QList &resource_type_filters) {
    m_resource_type_filters = resource_type_filters;
    m_resource_type_filters_isSet = true;
}

bool OAIGetResourcesInput::is_resource_type_filters_Set() const{
    return m_resource_type_filters_isSet;
}

bool OAIGetResourcesInput::is_resource_type_filters_Valid() const{
    return m_resource_type_filters_isValid;
}

bool OAIGetResourcesInput::getIncludeComplianceDetails() const {
    return m_include_compliance_details;
}
void OAIGetResourcesInput::setIncludeComplianceDetails(const bool &include_compliance_details) {
    m_include_compliance_details = include_compliance_details;
    m_include_compliance_details_isSet = true;
}

bool OAIGetResourcesInput::is_include_compliance_details_Set() const{
    return m_include_compliance_details_isSet;
}

bool OAIGetResourcesInput::is_include_compliance_details_Valid() const{
    return m_include_compliance_details_isValid;
}

bool OAIGetResourcesInput::getExcludeCompliantResources() const {
    return m_exclude_compliant_resources;
}
void OAIGetResourcesInput::setExcludeCompliantResources(const bool &exclude_compliant_resources) {
    m_exclude_compliant_resources = exclude_compliant_resources;
    m_exclude_compliant_resources_isSet = true;
}

bool OAIGetResourcesInput::is_exclude_compliant_resources_Set() const{
    return m_exclude_compliant_resources_isSet;
}

bool OAIGetResourcesInput::is_exclude_compliant_resources_Valid() const{
    return m_exclude_compliant_resources_isValid;
}

QList OAIGetResourcesInput::getResourceArnList() const {
    return m_resource_arn_list;
}
void OAIGetResourcesInput::setResourceArnList(const QList &resource_arn_list) {
    m_resource_arn_list = resource_arn_list;
    m_resource_arn_list_isSet = true;
}

bool OAIGetResourcesInput::is_resource_arn_list_Set() const{
    return m_resource_arn_list_isSet;
}

bool OAIGetResourcesInput::is_resource_arn_list_Valid() const{
    return m_resource_arn_list_isValid;
}

bool OAIGetResourcesInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pagination_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resources_per_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags_per_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_compliance_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclude_compliant_resources_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_arn_list.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetResourcesInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
