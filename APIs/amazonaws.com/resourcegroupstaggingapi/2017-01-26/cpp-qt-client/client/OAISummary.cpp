/**
 * AWS Resource Groups Tagging API
 * <fullname>Resource Groups Tagging API</fullname>
 *
 * The version of the OpenAPI document: 2017-01-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISummary::OAISummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISummary::OAISummary() {
    this->initializeModel();
}

OAISummary::~OAISummary() {}

void OAISummary::initializeModel() {

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_target_id_isSet = false;
    m_target_id_isValid = false;

    m_target_id_type_isSet = false;
    m_target_id_type_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_non_compliant_resources_isSet = false;
    m_non_compliant_resources_isValid = false;
}

void OAISummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISummary::fromJsonObject(QJsonObject json) {

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("LastUpdated")]);
    m_last_updated_isSet = !json[QString("LastUpdated")].isNull() && m_last_updated_isValid;

    m_target_id_isValid = ::OpenAPI::fromJsonValue(m_target_id, json[QString("TargetId")]);
    m_target_id_isSet = !json[QString("TargetId")].isNull() && m_target_id_isValid;

    m_target_id_type_isValid = ::OpenAPI::fromJsonValue(m_target_id_type, json[QString("TargetIdType")]);
    m_target_id_type_isSet = !json[QString("TargetIdType")].isNull() && m_target_id_type_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("Region")]);
    m_region_isSet = !json[QString("Region")].isNull() && m_region_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("ResourceType")]);
    m_resource_type_isSet = !json[QString("ResourceType")].isNull() && m_resource_type_isValid;

    m_non_compliant_resources_isValid = ::OpenAPI::fromJsonValue(m_non_compliant_resources, json[QString("NonCompliantResources")]);
    m_non_compliant_resources_isSet = !json[QString("NonCompliantResources")].isNull() && m_non_compliant_resources_isValid;
}

QString OAISummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISummary::asJsonObject() const {
    QJsonObject obj;
    if (m_last_updated_isSet) {
        obj.insert(QString("LastUpdated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_target_id_isSet) {
        obj.insert(QString("TargetId"), ::OpenAPI::toJsonValue(m_target_id));
    }
    if (m_target_id_type.isSet()) {
        obj.insert(QString("TargetIdType"), ::OpenAPI::toJsonValue(m_target_id_type));
    }
    if (m_region_isSet) {
        obj.insert(QString("Region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("ResourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_non_compliant_resources_isSet) {
        obj.insert(QString("NonCompliantResources"), ::OpenAPI::toJsonValue(m_non_compliant_resources));
    }
    return obj;
}

QString OAISummary::getLastUpdated() const {
    return m_last_updated;
}
void OAISummary::setLastUpdated(const QString &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAISummary::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAISummary::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QString OAISummary::getTargetId() const {
    return m_target_id;
}
void OAISummary::setTargetId(const QString &target_id) {
    m_target_id = target_id;
    m_target_id_isSet = true;
}

bool OAISummary::is_target_id_Set() const{
    return m_target_id_isSet;
}

bool OAISummary::is_target_id_Valid() const{
    return m_target_id_isValid;
}

OAITargetIdType OAISummary::getTargetIdType() const {
    return m_target_id_type;
}
void OAISummary::setTargetIdType(const OAITargetIdType &target_id_type) {
    m_target_id_type = target_id_type;
    m_target_id_type_isSet = true;
}

bool OAISummary::is_target_id_type_Set() const{
    return m_target_id_type_isSet;
}

bool OAISummary::is_target_id_type_Valid() const{
    return m_target_id_type_isValid;
}

QString OAISummary::getRegion() const {
    return m_region;
}
void OAISummary::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAISummary::is_region_Set() const{
    return m_region_isSet;
}

bool OAISummary::is_region_Valid() const{
    return m_region_isValid;
}

QString OAISummary::getResourceType() const {
    return m_resource_type;
}
void OAISummary::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAISummary::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAISummary::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

qint32 OAISummary::getNonCompliantResources() const {
    return m_non_compliant_resources;
}
void OAISummary::setNonCompliantResources(const qint32 &non_compliant_resources) {
    m_non_compliant_resources = non_compliant_resources;
    m_non_compliant_resources_isSet = true;
}

bool OAISummary::is_non_compliant_resources_Set() const{
    return m_non_compliant_resources_isSet;
}

bool OAISummary::is_non_compliant_resources_Valid() const{
    return m_non_compliant_resources_isValid;
}

bool OAISummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_id_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_non_compliant_resources_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
