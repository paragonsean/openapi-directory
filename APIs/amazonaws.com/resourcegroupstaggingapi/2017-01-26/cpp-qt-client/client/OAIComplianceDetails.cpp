/**
 * AWS Resource Groups Tagging API
 * <fullname>Resource Groups Tagging API</fullname>
 *
 * The version of the OpenAPI document: 2017-01-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComplianceDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComplianceDetails::OAIComplianceDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComplianceDetails::OAIComplianceDetails() {
    this->initializeModel();
}

OAIComplianceDetails::~OAIComplianceDetails() {}

void OAIComplianceDetails::initializeModel() {

    m_noncompliant_keys_isSet = false;
    m_noncompliant_keys_isValid = false;

    m_keys_with_noncompliant_values_isSet = false;
    m_keys_with_noncompliant_values_isValid = false;

    m_compliance_status_isSet = false;
    m_compliance_status_isValid = false;
}

void OAIComplianceDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComplianceDetails::fromJsonObject(QJsonObject json) {

    m_noncompliant_keys_isValid = ::OpenAPI::fromJsonValue(m_noncompliant_keys, json[QString("NoncompliantKeys")]);
    m_noncompliant_keys_isSet = !json[QString("NoncompliantKeys")].isNull() && m_noncompliant_keys_isValid;

    m_keys_with_noncompliant_values_isValid = ::OpenAPI::fromJsonValue(m_keys_with_noncompliant_values, json[QString("KeysWithNoncompliantValues")]);
    m_keys_with_noncompliant_values_isSet = !json[QString("KeysWithNoncompliantValues")].isNull() && m_keys_with_noncompliant_values_isValid;

    m_compliance_status_isValid = ::OpenAPI::fromJsonValue(m_compliance_status, json[QString("ComplianceStatus")]);
    m_compliance_status_isSet = !json[QString("ComplianceStatus")].isNull() && m_compliance_status_isValid;
}

QString OAIComplianceDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComplianceDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_noncompliant_keys.isSet()) {
        obj.insert(QString("NoncompliantKeys"), ::OpenAPI::toJsonValue(m_noncompliant_keys));
    }
    if (m_keys_with_noncompliant_values.isSet()) {
        obj.insert(QString("KeysWithNoncompliantValues"), ::OpenAPI::toJsonValue(m_keys_with_noncompliant_values));
    }
    if (m_compliance_status_isSet) {
        obj.insert(QString("ComplianceStatus"), ::OpenAPI::toJsonValue(m_compliance_status));
    }
    return obj;
}

QList OAIComplianceDetails::getNoncompliantKeys() const {
    return m_noncompliant_keys;
}
void OAIComplianceDetails::setNoncompliantKeys(const QList &noncompliant_keys) {
    m_noncompliant_keys = noncompliant_keys;
    m_noncompliant_keys_isSet = true;
}

bool OAIComplianceDetails::is_noncompliant_keys_Set() const{
    return m_noncompliant_keys_isSet;
}

bool OAIComplianceDetails::is_noncompliant_keys_Valid() const{
    return m_noncompliant_keys_isValid;
}

QList OAIComplianceDetails::getKeysWithNoncompliantValues() const {
    return m_keys_with_noncompliant_values;
}
void OAIComplianceDetails::setKeysWithNoncompliantValues(const QList &keys_with_noncompliant_values) {
    m_keys_with_noncompliant_values = keys_with_noncompliant_values;
    m_keys_with_noncompliant_values_isSet = true;
}

bool OAIComplianceDetails::is_keys_with_noncompliant_values_Set() const{
    return m_keys_with_noncompliant_values_isSet;
}

bool OAIComplianceDetails::is_keys_with_noncompliant_values_Valid() const{
    return m_keys_with_noncompliant_values_isValid;
}

bool OAIComplianceDetails::getComplianceStatus() const {
    return m_compliance_status;
}
void OAIComplianceDetails::setComplianceStatus(const bool &compliance_status) {
    m_compliance_status = compliance_status;
    m_compliance_status_isSet = true;
}

bool OAIComplianceDetails::is_compliance_status_Set() const{
    return m_compliance_status_isSet;
}

bool OAIComplianceDetails::is_compliance_status_Valid() const{
    return m_compliance_status_isValid;
}

bool OAIComplianceDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_noncompliant_keys.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_keys_with_noncompliant_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_compliance_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComplianceDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
