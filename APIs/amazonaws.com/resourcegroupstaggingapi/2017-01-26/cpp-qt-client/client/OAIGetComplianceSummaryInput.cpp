/**
 * AWS Resource Groups Tagging API
 * <fullname>Resource Groups Tagging API</fullname>
 *
 * The version of the OpenAPI document: 2017-01-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetComplianceSummaryInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetComplianceSummaryInput::OAIGetComplianceSummaryInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetComplianceSummaryInput::OAIGetComplianceSummaryInput() {
    this->initializeModel();
}

OAIGetComplianceSummaryInput::~OAIGetComplianceSummaryInput() {}

void OAIGetComplianceSummaryInput::initializeModel() {

    m_target_id_filters_isSet = false;
    m_target_id_filters_isValid = false;

    m_region_filters_isSet = false;
    m_region_filters_isValid = false;

    m_resource_type_filters_isSet = false;
    m_resource_type_filters_isValid = false;

    m_tag_key_filters_isSet = false;
    m_tag_key_filters_isValid = false;

    m_group_by_isSet = false;
    m_group_by_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_pagination_token_isSet = false;
    m_pagination_token_isValid = false;
}

void OAIGetComplianceSummaryInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetComplianceSummaryInput::fromJsonObject(QJsonObject json) {

    m_target_id_filters_isValid = ::OpenAPI::fromJsonValue(m_target_id_filters, json[QString("TargetIdFilters")]);
    m_target_id_filters_isSet = !json[QString("TargetIdFilters")].isNull() && m_target_id_filters_isValid;

    m_region_filters_isValid = ::OpenAPI::fromJsonValue(m_region_filters, json[QString("RegionFilters")]);
    m_region_filters_isSet = !json[QString("RegionFilters")].isNull() && m_region_filters_isValid;

    m_resource_type_filters_isValid = ::OpenAPI::fromJsonValue(m_resource_type_filters, json[QString("ResourceTypeFilters")]);
    m_resource_type_filters_isSet = !json[QString("ResourceTypeFilters")].isNull() && m_resource_type_filters_isValid;

    m_tag_key_filters_isValid = ::OpenAPI::fromJsonValue(m_tag_key_filters, json[QString("TagKeyFilters")]);
    m_tag_key_filters_isSet = !json[QString("TagKeyFilters")].isNull() && m_tag_key_filters_isValid;

    m_group_by_isValid = ::OpenAPI::fromJsonValue(m_group_by, json[QString("GroupBy")]);
    m_group_by_isSet = !json[QString("GroupBy")].isNull() && m_group_by_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;

    m_pagination_token_isValid = ::OpenAPI::fromJsonValue(m_pagination_token, json[QString("PaginationToken")]);
    m_pagination_token_isSet = !json[QString("PaginationToken")].isNull() && m_pagination_token_isValid;
}

QString OAIGetComplianceSummaryInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetComplianceSummaryInput::asJsonObject() const {
    QJsonObject obj;
    if (m_target_id_filters.isSet()) {
        obj.insert(QString("TargetIdFilters"), ::OpenAPI::toJsonValue(m_target_id_filters));
    }
    if (m_region_filters.isSet()) {
        obj.insert(QString("RegionFilters"), ::OpenAPI::toJsonValue(m_region_filters));
    }
    if (m_resource_type_filters.isSet()) {
        obj.insert(QString("ResourceTypeFilters"), ::OpenAPI::toJsonValue(m_resource_type_filters));
    }
    if (m_tag_key_filters.isSet()) {
        obj.insert(QString("TagKeyFilters"), ::OpenAPI::toJsonValue(m_tag_key_filters));
    }
    if (m_group_by.isSet()) {
        obj.insert(QString("GroupBy"), ::OpenAPI::toJsonValue(m_group_by));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_pagination_token_isSet) {
        obj.insert(QString("PaginationToken"), ::OpenAPI::toJsonValue(m_pagination_token));
    }
    return obj;
}

QList OAIGetComplianceSummaryInput::getTargetIdFilters() const {
    return m_target_id_filters;
}
void OAIGetComplianceSummaryInput::setTargetIdFilters(const QList &target_id_filters) {
    m_target_id_filters = target_id_filters;
    m_target_id_filters_isSet = true;
}

bool OAIGetComplianceSummaryInput::is_target_id_filters_Set() const{
    return m_target_id_filters_isSet;
}

bool OAIGetComplianceSummaryInput::is_target_id_filters_Valid() const{
    return m_target_id_filters_isValid;
}

QList OAIGetComplianceSummaryInput::getRegionFilters() const {
    return m_region_filters;
}
void OAIGetComplianceSummaryInput::setRegionFilters(const QList &region_filters) {
    m_region_filters = region_filters;
    m_region_filters_isSet = true;
}

bool OAIGetComplianceSummaryInput::is_region_filters_Set() const{
    return m_region_filters_isSet;
}

bool OAIGetComplianceSummaryInput::is_region_filters_Valid() const{
    return m_region_filters_isValid;
}

QList OAIGetComplianceSummaryInput::getResourceTypeFilters() const {
    return m_resource_type_filters;
}
void OAIGetComplianceSummaryInput::setResourceTypeFilters(const QList &resource_type_filters) {
    m_resource_type_filters = resource_type_filters;
    m_resource_type_filters_isSet = true;
}

bool OAIGetComplianceSummaryInput::is_resource_type_filters_Set() const{
    return m_resource_type_filters_isSet;
}

bool OAIGetComplianceSummaryInput::is_resource_type_filters_Valid() const{
    return m_resource_type_filters_isValid;
}

QList OAIGetComplianceSummaryInput::getTagKeyFilters() const {
    return m_tag_key_filters;
}
void OAIGetComplianceSummaryInput::setTagKeyFilters(const QList &tag_key_filters) {
    m_tag_key_filters = tag_key_filters;
    m_tag_key_filters_isSet = true;
}

bool OAIGetComplianceSummaryInput::is_tag_key_filters_Set() const{
    return m_tag_key_filters_isSet;
}

bool OAIGetComplianceSummaryInput::is_tag_key_filters_Valid() const{
    return m_tag_key_filters_isValid;
}

QList OAIGetComplianceSummaryInput::getGroupBy() const {
    return m_group_by;
}
void OAIGetComplianceSummaryInput::setGroupBy(const QList &group_by) {
    m_group_by = group_by;
    m_group_by_isSet = true;
}

bool OAIGetComplianceSummaryInput::is_group_by_Set() const{
    return m_group_by_isSet;
}

bool OAIGetComplianceSummaryInput::is_group_by_Valid() const{
    return m_group_by_isValid;
}

qint32 OAIGetComplianceSummaryInput::getMaxResults() const {
    return m_max_results;
}
void OAIGetComplianceSummaryInput::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIGetComplianceSummaryInput::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIGetComplianceSummaryInput::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAIGetComplianceSummaryInput::getPaginationToken() const {
    return m_pagination_token;
}
void OAIGetComplianceSummaryInput::setPaginationToken(const QString &pagination_token) {
    m_pagination_token = pagination_token;
    m_pagination_token_isSet = true;
}

bool OAIGetComplianceSummaryInput::is_pagination_token_Set() const{
    return m_pagination_token_isSet;
}

bool OAIGetComplianceSummaryInput::is_pagination_token_Valid() const{
    return m_pagination_token_isValid;
}

bool OAIGetComplianceSummaryInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_target_id_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_key_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pagination_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetComplianceSummaryInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
