# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.target_id_type import TargetIdType
from openapi_server import util


class Summary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, last_updated: str=None, target_id: str=None, target_id_type: TargetIdType=None, region: str=None, resource_type: str=None, non_compliant_resources: int=None):
        """Summary - a model defined in OpenAPI

        :param last_updated: The last_updated of this Summary.
        :param target_id: The target_id of this Summary.
        :param target_id_type: The target_id_type of this Summary.
        :param region: The region of this Summary.
        :param resource_type: The resource_type of this Summary.
        :param non_compliant_resources: The non_compliant_resources of this Summary.
        """
        self.openapi_types = {
            'last_updated': str,
            'target_id': str,
            'target_id_type': TargetIdType,
            'region': str,
            'resource_type': str,
            'non_compliant_resources': int
        }

        self.attribute_map = {
            'last_updated': 'LastUpdated',
            'target_id': 'TargetId',
            'target_id_type': 'TargetIdType',
            'region': 'Region',
            'resource_type': 'ResourceType',
            'non_compliant_resources': 'NonCompliantResources'
        }

        self._last_updated = last_updated
        self._target_id = target_id
        self._target_id_type = target_id_type
        self._region = region
        self._resource_type = resource_type
        self._non_compliant_resources = non_compliant_resources

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Summary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Summary of this Summary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def last_updated(self):
        """Gets the last_updated of this Summary.


        :return: The last_updated of this Summary.
        :rtype: str
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this Summary.


        :param last_updated: The last_updated of this Summary.
        :type last_updated: str
        """

        self._last_updated = last_updated

    @property
    def target_id(self):
        """Gets the target_id of this Summary.


        :return: The target_id of this Summary.
        :rtype: str
        """
        return self._target_id

    @target_id.setter
    def target_id(self, target_id):
        """Sets the target_id of this Summary.


        :param target_id: The target_id of this Summary.
        :type target_id: str
        """

        self._target_id = target_id

    @property
    def target_id_type(self):
        """Gets the target_id_type of this Summary.


        :return: The target_id_type of this Summary.
        :rtype: TargetIdType
        """
        return self._target_id_type

    @target_id_type.setter
    def target_id_type(self, target_id_type):
        """Sets the target_id_type of this Summary.


        :param target_id_type: The target_id_type of this Summary.
        :type target_id_type: TargetIdType
        """

        self._target_id_type = target_id_type

    @property
    def region(self):
        """Gets the region of this Summary.


        :return: The region of this Summary.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this Summary.


        :param region: The region of this Summary.
        :type region: str
        """

        self._region = region

    @property
    def resource_type(self):
        """Gets the resource_type of this Summary.


        :return: The resource_type of this Summary.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this Summary.


        :param resource_type: The resource_type of this Summary.
        :type resource_type: str
        """

        self._resource_type = resource_type

    @property
    def non_compliant_resources(self):
        """Gets the non_compliant_resources of this Summary.


        :return: The non_compliant_resources of this Summary.
        :rtype: int
        """
        return self._non_compliant_resources

    @non_compliant_resources.setter
    def non_compliant_resources(self, non_compliant_resources):
        """Sets the non_compliant_resources of this Summary.


        :param non_compliant_resources: The non_compliant_resources of this Summary.
        :type non_compliant_resources: int
        """

        self._non_compliant_resources = non_compliant_resources
