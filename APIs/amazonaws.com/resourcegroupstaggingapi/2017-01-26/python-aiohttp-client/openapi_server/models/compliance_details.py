# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ComplianceDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, noncompliant_keys: List=None, keys_with_noncompliant_values: List=None, compliance_status: bool=None):
        """ComplianceDetails - a model defined in OpenAPI

        :param noncompliant_keys: The noncompliant_keys of this ComplianceDetails.
        :param keys_with_noncompliant_values: The keys_with_noncompliant_values of this ComplianceDetails.
        :param compliance_status: The compliance_status of this ComplianceDetails.
        """
        self.openapi_types = {
            'noncompliant_keys': List,
            'keys_with_noncompliant_values': List,
            'compliance_status': bool
        }

        self.attribute_map = {
            'noncompliant_keys': 'NoncompliantKeys',
            'keys_with_noncompliant_values': 'KeysWithNoncompliantValues',
            'compliance_status': 'ComplianceStatus'
        }

        self._noncompliant_keys = noncompliant_keys
        self._keys_with_noncompliant_values = keys_with_noncompliant_values
        self._compliance_status = compliance_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ComplianceDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ComplianceDetails of this ComplianceDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def noncompliant_keys(self):
        """Gets the noncompliant_keys of this ComplianceDetails.


        :return: The noncompliant_keys of this ComplianceDetails.
        :rtype: List
        """
        return self._noncompliant_keys

    @noncompliant_keys.setter
    def noncompliant_keys(self, noncompliant_keys):
        """Sets the noncompliant_keys of this ComplianceDetails.


        :param noncompliant_keys: The noncompliant_keys of this ComplianceDetails.
        :type noncompliant_keys: List
        """

        self._noncompliant_keys = noncompliant_keys

    @property
    def keys_with_noncompliant_values(self):
        """Gets the keys_with_noncompliant_values of this ComplianceDetails.


        :return: The keys_with_noncompliant_values of this ComplianceDetails.
        :rtype: List
        """
        return self._keys_with_noncompliant_values

    @keys_with_noncompliant_values.setter
    def keys_with_noncompliant_values(self, keys_with_noncompliant_values):
        """Sets the keys_with_noncompliant_values of this ComplianceDetails.


        :param keys_with_noncompliant_values: The keys_with_noncompliant_values of this ComplianceDetails.
        :type keys_with_noncompliant_values: List
        """

        self._keys_with_noncompliant_values = keys_with_noncompliant_values

    @property
    def compliance_status(self):
        """Gets the compliance_status of this ComplianceDetails.


        :return: The compliance_status of this ComplianceDetails.
        :rtype: bool
        """
        return self._compliance_status

    @compliance_status.setter
    def compliance_status(self, compliance_status):
        """Sets the compliance_status of this ComplianceDetails.


        :param compliance_status: The compliance_status of this ComplianceDetails.
        :type compliance_status: bool
        """

        self._compliance_status = compliance_status
