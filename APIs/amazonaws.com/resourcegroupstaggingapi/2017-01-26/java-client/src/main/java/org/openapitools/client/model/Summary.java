/*
 * AWS Resource Groups Tagging API
 * <fullname>Resource Groups Tagging API</fullname>
 *
 * The version of the OpenAPI document: 2017-01-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.TargetIdType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A count of noncompliant resources.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:20.547708-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Summary {
  public static final String SERIALIZED_NAME_LAST_UPDATED = "LastUpdated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private String lastUpdated;

  public static final String SERIALIZED_NAME_TARGET_ID = "TargetId";
  @SerializedName(SERIALIZED_NAME_TARGET_ID)
  private String targetId;

  public static final String SERIALIZED_NAME_TARGET_ID_TYPE = "TargetIdType";
  @SerializedName(SERIALIZED_NAME_TARGET_ID_TYPE)
  private TargetIdType targetIdType;

  public static final String SERIALIZED_NAME_REGION = "Region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "ResourceType";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  private String resourceType;

  public static final String SERIALIZED_NAME_NON_COMPLIANT_RESOURCES = "NonCompliantResources";
  @SerializedName(SERIALIZED_NAME_NON_COMPLIANT_RESOURCES)
  private Integer nonCompliantResources;

  public Summary() {
  }

  public Summary lastUpdated(String lastUpdated) {
    this.lastUpdated = lastUpdated;
    return this;
  }

  /**
   * Get lastUpdated
   * @return lastUpdated
   */
  @javax.annotation.Nullable
  public String getLastUpdated() {
    return lastUpdated;
  }

  public void setLastUpdated(String lastUpdated) {
    this.lastUpdated = lastUpdated;
  }


  public Summary targetId(String targetId) {
    this.targetId = targetId;
    return this;
  }

  /**
   * Get targetId
   * @return targetId
   */
  @javax.annotation.Nullable
  public String getTargetId() {
    return targetId;
  }

  public void setTargetId(String targetId) {
    this.targetId = targetId;
  }


  public Summary targetIdType(TargetIdType targetIdType) {
    this.targetIdType = targetIdType;
    return this;
  }

  /**
   * Get targetIdType
   * @return targetIdType
   */
  @javax.annotation.Nullable
  public TargetIdType getTargetIdType() {
    return targetIdType;
  }

  public void setTargetIdType(TargetIdType targetIdType) {
    this.targetIdType = targetIdType;
  }


  public Summary region(String region) {
    this.region = region;
    return this;
  }

  /**
   * Get region
   * @return region
   */
  @javax.annotation.Nullable
  public String getRegion() {
    return region;
  }

  public void setRegion(String region) {
    this.region = region;
  }


  public Summary resourceType(String resourceType) {
    this.resourceType = resourceType;
    return this;
  }

  /**
   * Get resourceType
   * @return resourceType
   */
  @javax.annotation.Nullable
  public String getResourceType() {
    return resourceType;
  }

  public void setResourceType(String resourceType) {
    this.resourceType = resourceType;
  }


  public Summary nonCompliantResources(Integer nonCompliantResources) {
    this.nonCompliantResources = nonCompliantResources;
    return this;
  }

  /**
   * Get nonCompliantResources
   * @return nonCompliantResources
   */
  @javax.annotation.Nullable
  public Integer getNonCompliantResources() {
    return nonCompliantResources;
  }

  public void setNonCompliantResources(Integer nonCompliantResources) {
    this.nonCompliantResources = nonCompliantResources;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Summary summary = (Summary) o;
    return Objects.equals(this.lastUpdated, summary.lastUpdated) &&
        Objects.equals(this.targetId, summary.targetId) &&
        Objects.equals(this.targetIdType, summary.targetIdType) &&
        Objects.equals(this.region, summary.region) &&
        Objects.equals(this.resourceType, summary.resourceType) &&
        Objects.equals(this.nonCompliantResources, summary.nonCompliantResources);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lastUpdated, targetId, targetIdType, region, resourceType, nonCompliantResources);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Summary {\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    targetId: ").append(toIndentedString(targetId)).append("\n");
    sb.append("    targetIdType: ").append(toIndentedString(targetIdType)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    nonCompliantResources: ").append(toIndentedString(nonCompliantResources)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("LastUpdated");
    openapiFields.add("TargetId");
    openapiFields.add("TargetIdType");
    openapiFields.add("Region");
    openapiFields.add("ResourceType");
    openapiFields.add("NonCompliantResources");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Summary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Summary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Summary is not found in the empty JSON string", Summary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Summary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Summary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `LastUpdated`
      if (jsonObj.get("LastUpdated") != null && !jsonObj.get("LastUpdated").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LastUpdated"));
      }
      // validate the optional field `TargetId`
      if (jsonObj.get("TargetId") != null && !jsonObj.get("TargetId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TargetId"));
      }
      // validate the optional field `TargetIdType`
      if (jsonObj.get("TargetIdType") != null && !jsonObj.get("TargetIdType").isJsonNull()) {
        TargetIdType.validateJsonElement(jsonObj.get("TargetIdType"));
      }
      // validate the optional field `Region`
      if (jsonObj.get("Region") != null && !jsonObj.get("Region").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Region"));
      }
      // validate the optional field `ResourceType`
      if (jsonObj.get("ResourceType") != null && !jsonObj.get("ResourceType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ResourceType"));
      }
      // validate the optional field `NonCompliantResources`
      if (jsonObj.get("NonCompliantResources") != null && !jsonObj.get("NonCompliantResources").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("NonCompliantResources"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Summary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Summary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Summary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Summary.class));

       return (TypeAdapter<T>) new TypeAdapter<Summary>() {
           @Override
           public void write(JsonWriter out, Summary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Summary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Summary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Summary
   * @throws IOException if the JSON string is invalid with respect to Summary
   */
  public static Summary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Summary.class);
  }

  /**
   * Convert an instance of Summary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

