/*
 * AWS Resource Groups Tagging API
 * <fullname>Resource Groups Tagging API</fullname>
 *
 * The version of the OpenAPI document: 2017-01-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetComplianceSummaryInput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:20.547708-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetComplianceSummaryInput {
  public static final String SERIALIZED_NAME_TARGET_ID_FILTERS = "TargetIdFilters";
  @SerializedName(SERIALIZED_NAME_TARGET_ID_FILTERS)
  private List targetIdFilters;

  public static final String SERIALIZED_NAME_REGION_FILTERS = "RegionFilters";
  @SerializedName(SERIALIZED_NAME_REGION_FILTERS)
  private List regionFilters;

  public static final String SERIALIZED_NAME_RESOURCE_TYPE_FILTERS = "ResourceTypeFilters";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE_FILTERS)
  private List resourceTypeFilters;

  public static final String SERIALIZED_NAME_TAG_KEY_FILTERS = "TagKeyFilters";
  @SerializedName(SERIALIZED_NAME_TAG_KEY_FILTERS)
  private List tagKeyFilters;

  public static final String SERIALIZED_NAME_GROUP_BY = "GroupBy";
  @SerializedName(SERIALIZED_NAME_GROUP_BY)
  private List groupBy;

  public static final String SERIALIZED_NAME_MAX_RESULTS = "MaxResults";
  @SerializedName(SERIALIZED_NAME_MAX_RESULTS)
  private Integer maxResults;

  public static final String SERIALIZED_NAME_PAGINATION_TOKEN = "PaginationToken";
  @SerializedName(SERIALIZED_NAME_PAGINATION_TOKEN)
  private String paginationToken;

  public GetComplianceSummaryInput() {
  }

  public GetComplianceSummaryInput targetIdFilters(List targetIdFilters) {
    this.targetIdFilters = targetIdFilters;
    return this;
  }

  /**
   * Get targetIdFilters
   * @return targetIdFilters
   */
  @javax.annotation.Nullable
  public List getTargetIdFilters() {
    return targetIdFilters;
  }

  public void setTargetIdFilters(List targetIdFilters) {
    this.targetIdFilters = targetIdFilters;
  }


  public GetComplianceSummaryInput regionFilters(List regionFilters) {
    this.regionFilters = regionFilters;
    return this;
  }

  /**
   * Get regionFilters
   * @return regionFilters
   */
  @javax.annotation.Nullable
  public List getRegionFilters() {
    return regionFilters;
  }

  public void setRegionFilters(List regionFilters) {
    this.regionFilters = regionFilters;
  }


  public GetComplianceSummaryInput resourceTypeFilters(List resourceTypeFilters) {
    this.resourceTypeFilters = resourceTypeFilters;
    return this;
  }

  /**
   * Get resourceTypeFilters
   * @return resourceTypeFilters
   */
  @javax.annotation.Nullable
  public List getResourceTypeFilters() {
    return resourceTypeFilters;
  }

  public void setResourceTypeFilters(List resourceTypeFilters) {
    this.resourceTypeFilters = resourceTypeFilters;
  }


  public GetComplianceSummaryInput tagKeyFilters(List tagKeyFilters) {
    this.tagKeyFilters = tagKeyFilters;
    return this;
  }

  /**
   * Get tagKeyFilters
   * @return tagKeyFilters
   */
  @javax.annotation.Nullable
  public List getTagKeyFilters() {
    return tagKeyFilters;
  }

  public void setTagKeyFilters(List tagKeyFilters) {
    this.tagKeyFilters = tagKeyFilters;
  }


  public GetComplianceSummaryInput groupBy(List groupBy) {
    this.groupBy = groupBy;
    return this;
  }

  /**
   * Get groupBy
   * @return groupBy
   */
  @javax.annotation.Nullable
  public List getGroupBy() {
    return groupBy;
  }

  public void setGroupBy(List groupBy) {
    this.groupBy = groupBy;
  }


  public GetComplianceSummaryInput maxResults(Integer maxResults) {
    this.maxResults = maxResults;
    return this;
  }

  /**
   * Get maxResults
   * @return maxResults
   */
  @javax.annotation.Nullable
  public Integer getMaxResults() {
    return maxResults;
  }

  public void setMaxResults(Integer maxResults) {
    this.maxResults = maxResults;
  }


  public GetComplianceSummaryInput paginationToken(String paginationToken) {
    this.paginationToken = paginationToken;
    return this;
  }

  /**
   * Get paginationToken
   * @return paginationToken
   */
  @javax.annotation.Nullable
  public String getPaginationToken() {
    return paginationToken;
  }

  public void setPaginationToken(String paginationToken) {
    this.paginationToken = paginationToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetComplianceSummaryInput getComplianceSummaryInput = (GetComplianceSummaryInput) o;
    return Objects.equals(this.targetIdFilters, getComplianceSummaryInput.targetIdFilters) &&
        Objects.equals(this.regionFilters, getComplianceSummaryInput.regionFilters) &&
        Objects.equals(this.resourceTypeFilters, getComplianceSummaryInput.resourceTypeFilters) &&
        Objects.equals(this.tagKeyFilters, getComplianceSummaryInput.tagKeyFilters) &&
        Objects.equals(this.groupBy, getComplianceSummaryInput.groupBy) &&
        Objects.equals(this.maxResults, getComplianceSummaryInput.maxResults) &&
        Objects.equals(this.paginationToken, getComplianceSummaryInput.paginationToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(targetIdFilters, regionFilters, resourceTypeFilters, tagKeyFilters, groupBy, maxResults, paginationToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetComplianceSummaryInput {\n");
    sb.append("    targetIdFilters: ").append(toIndentedString(targetIdFilters)).append("\n");
    sb.append("    regionFilters: ").append(toIndentedString(regionFilters)).append("\n");
    sb.append("    resourceTypeFilters: ").append(toIndentedString(resourceTypeFilters)).append("\n");
    sb.append("    tagKeyFilters: ").append(toIndentedString(tagKeyFilters)).append("\n");
    sb.append("    groupBy: ").append(toIndentedString(groupBy)).append("\n");
    sb.append("    maxResults: ").append(toIndentedString(maxResults)).append("\n");
    sb.append("    paginationToken: ").append(toIndentedString(paginationToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TargetIdFilters");
    openapiFields.add("RegionFilters");
    openapiFields.add("ResourceTypeFilters");
    openapiFields.add("TagKeyFilters");
    openapiFields.add("GroupBy");
    openapiFields.add("MaxResults");
    openapiFields.add("PaginationToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetComplianceSummaryInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetComplianceSummaryInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetComplianceSummaryInput is not found in the empty JSON string", GetComplianceSummaryInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetComplianceSummaryInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetComplianceSummaryInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `TargetIdFilters`
      if (jsonObj.get("TargetIdFilters") != null && !jsonObj.get("TargetIdFilters").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("TargetIdFilters"));
      }
      // validate the optional field `RegionFilters`
      if (jsonObj.get("RegionFilters") != null && !jsonObj.get("RegionFilters").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("RegionFilters"));
      }
      // validate the optional field `ResourceTypeFilters`
      if (jsonObj.get("ResourceTypeFilters") != null && !jsonObj.get("ResourceTypeFilters").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ResourceTypeFilters"));
      }
      // validate the optional field `TagKeyFilters`
      if (jsonObj.get("TagKeyFilters") != null && !jsonObj.get("TagKeyFilters").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("TagKeyFilters"));
      }
      // validate the optional field `GroupBy`
      if (jsonObj.get("GroupBy") != null && !jsonObj.get("GroupBy").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("GroupBy"));
      }
      // validate the optional field `MaxResults`
      if (jsonObj.get("MaxResults") != null && !jsonObj.get("MaxResults").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxResults"));
      }
      // validate the optional field `PaginationToken`
      if (jsonObj.get("PaginationToken") != null && !jsonObj.get("PaginationToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PaginationToken"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetComplianceSummaryInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetComplianceSummaryInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetComplianceSummaryInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetComplianceSummaryInput.class));

       return (TypeAdapter<T>) new TypeAdapter<GetComplianceSummaryInput>() {
           @Override
           public void write(JsonWriter out, GetComplianceSummaryInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetComplianceSummaryInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetComplianceSummaryInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetComplianceSummaryInput
   * @throws IOException if the JSON string is invalid with respect to GetComplianceSummaryInput
   */
  public static GetComplianceSummaryInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetComplianceSummaryInput.class);
  }

  /**
   * Convert an instance of GetComplianceSummaryInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

