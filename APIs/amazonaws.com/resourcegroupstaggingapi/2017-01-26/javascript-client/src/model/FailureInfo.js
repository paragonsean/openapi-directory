/**
 * AWS Resource Groups Tagging API
 * <fullname>Resource Groups Tagging API</fullname>
 *
 * The version of the OpenAPI document: 2017-01-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ErrorCode from './ErrorCode';

/**
 * The FailureInfo model module.
 * @module model/FailureInfo
 * @version 2017-01-26
 */
class FailureInfo {
    /**
     * Constructs a new <code>FailureInfo</code>.
     * &lt;p&gt;Information about the errors that are returned for each failed resource. This information can include &lt;code&gt;InternalServiceException&lt;/code&gt; and &lt;code&gt;InvalidParameterException&lt;/code&gt; errors. It can also include any valid error code returned by the Amazon Web Services service that hosts the resource that the ARN key represents.&lt;/p&gt; &lt;p&gt;The following are common error codes that you might receive from other Amazon Web Services services:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;InternalServiceException&lt;/b&gt; – This can mean that the Resource Groups Tagging API didn&#39;t receive a response from another Amazon Web Services service. It can also mean that the resource type in the request is not supported by the Resource Groups Tagging API. In these cases, it&#39;s safe to retry the request and then call &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/resourcegroupstagging/latest/APIReference/API_GetResources.html\&quot;&gt;GetResources&lt;/a&gt; to verify the changes.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;AccessDeniedException&lt;/b&gt; – This can mean that you need permission to call the tagging operations in the Amazon Web Services service that contains the resource. For example, to use the Resource Groups Tagging API to tag a Amazon CloudWatch alarm resource, you need permission to call both &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/resourcegroupstagging/latest/APIReference/API_TagResources.html\&quot;&gt; &lt;code&gt;TagResources&lt;/code&gt; &lt;/a&gt; &lt;i&gt;and&lt;/i&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_TagResource.html\&quot;&gt; &lt;code&gt;TagResource&lt;/code&gt; &lt;/a&gt; in the CloudWatch API. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information on errors that are generated from other Amazon Web Services services, see the documentation for that service. &lt;/p&gt;
     * @alias module:model/FailureInfo
     */
    constructor() { 
        
        FailureInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FailureInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FailureInfo} obj Optional instance to populate.
     * @return {module:model/FailureInfo} The populated <code>FailureInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FailureInfo();

            if (data.hasOwnProperty('StatusCode')) {
                obj['StatusCode'] = ApiClient.convertToType(data['StatusCode'], 'Number');
            }
            if (data.hasOwnProperty('ErrorCode')) {
                obj['ErrorCode'] = ApiClient.convertToType(data['ErrorCode'], ErrorCode);
            }
            if (data.hasOwnProperty('ErrorMessage')) {
                obj['ErrorMessage'] = ApiClient.convertToType(data['ErrorMessage'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FailureInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FailureInfo</code>.
     */
    static validateJSON(data) {
        // validate the optional field `StatusCode`
        if (data['StatusCode']) { // data not null
          Number.validateJSON(data['StatusCode']);
        }
        // validate the optional field `ErrorCode`
        if (data['ErrorCode']) { // data not null
          ErrorCode.validateJSON(data['ErrorCode']);
        }
        // validate the optional field `ErrorMessage`
        if (data['ErrorMessage']) { // data not null
          String.validateJSON(data['ErrorMessage']);
        }

        return true;
    }


}



/**
 * @member {Number} StatusCode
 */
FailureInfo.prototype['StatusCode'] = undefined;

/**
 * @member {module:model/ErrorCode} ErrorCode
 */
FailureInfo.prototype['ErrorCode'] = undefined;

/**
 * @member {String} ErrorMessage
 */
FailureInfo.prototype['ErrorMessage'] = undefined;






export default FailureInfo;

