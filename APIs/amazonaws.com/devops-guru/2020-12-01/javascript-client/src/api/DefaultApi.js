/**
 * Amazon DevOps Guru
 * <p> Amazon DevOps Guru is a fully managed service that helps you identify anomalous behavior in business critical operational applications. You specify the Amazon Web Services resources that you want DevOps Guru to cover, then the Amazon CloudWatch metrics and Amazon Web Services CloudTrail events related to those resources are analyzed. When anomalous behavior is detected, DevOps Guru creates an <i>insight</i> that includes recommendations, related events, and related metrics that can help you improve your operational applications. For more information, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html\">What is Amazon DevOps Guru</a>. </p> <p> You can specify 1 or 2 Amazon Simple Notification Service topics so you are notified every time a new insight is created. You can also enable DevOps Guru to generate an OpsItem in Amazon Web Services Systems Manager for each insight to help you manage and track your work addressing insights. </p> <p> To learn about the DevOps Guru workflow, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html#how-it-works\">How DevOps Guru works</a>. To learn about DevOps Guru concepts, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/concepts.html\">Concepts in DevOps Guru</a>. </p>
 *
 * The version of the OpenAPI document: 2020-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddNotificationChannelRequest from '../model/AddNotificationChannelRequest';
import AddNotificationChannelResponse from '../model/AddNotificationChannelResponse';
import DescribeAccountHealthResponse from '../model/DescribeAccountHealthResponse';
import DescribeAccountOverviewRequest from '../model/DescribeAccountOverviewRequest';
import DescribeAccountOverviewResponse from '../model/DescribeAccountOverviewResponse';
import DescribeAnomalyResponse from '../model/DescribeAnomalyResponse';
import DescribeEventSourcesConfigResponse from '../model/DescribeEventSourcesConfigResponse';
import DescribeFeedbackRequest from '../model/DescribeFeedbackRequest';
import DescribeFeedbackResponse from '../model/DescribeFeedbackResponse';
import DescribeInsightResponse from '../model/DescribeInsightResponse';
import DescribeOrganizationHealthRequest from '../model/DescribeOrganizationHealthRequest';
import DescribeOrganizationHealthResponse from '../model/DescribeOrganizationHealthResponse';
import DescribeOrganizationOverviewRequest from '../model/DescribeOrganizationOverviewRequest';
import DescribeOrganizationOverviewResponse from '../model/DescribeOrganizationOverviewResponse';
import DescribeOrganizationResourceCollectionHealthRequest from '../model/DescribeOrganizationResourceCollectionHealthRequest';
import DescribeOrganizationResourceCollectionHealthResponse from '../model/DescribeOrganizationResourceCollectionHealthResponse';
import DescribeResourceCollectionHealthResponse from '../model/DescribeResourceCollectionHealthResponse';
import DescribeServiceIntegrationResponse from '../model/DescribeServiceIntegrationResponse';
import GetCostEstimationResponse from '../model/GetCostEstimationResponse';
import GetResourceCollectionResponse from '../model/GetResourceCollectionResponse';
import ListAnomaliesForInsightRequest from '../model/ListAnomaliesForInsightRequest';
import ListAnomaliesForInsightResponse from '../model/ListAnomaliesForInsightResponse';
import ListAnomalousLogGroupsRequest from '../model/ListAnomalousLogGroupsRequest';
import ListAnomalousLogGroupsResponse from '../model/ListAnomalousLogGroupsResponse';
import ListEventsRequest from '../model/ListEventsRequest';
import ListEventsResponse from '../model/ListEventsResponse';
import ListInsightsRequest from '../model/ListInsightsRequest';
import ListInsightsResponse from '../model/ListInsightsResponse';
import ListMonitoredResourcesRequest from '../model/ListMonitoredResourcesRequest';
import ListMonitoredResourcesResponse from '../model/ListMonitoredResourcesResponse';
import ListNotificationChannelsRequest from '../model/ListNotificationChannelsRequest';
import ListNotificationChannelsResponse from '../model/ListNotificationChannelsResponse';
import ListOrganizationInsightsRequest from '../model/ListOrganizationInsightsRequest';
import ListOrganizationInsightsResponse from '../model/ListOrganizationInsightsResponse';
import ListRecommendationsRequest from '../model/ListRecommendationsRequest';
import ListRecommendationsResponse from '../model/ListRecommendationsResponse';
import PutFeedbackRequest from '../model/PutFeedbackRequest';
import SearchInsightsRequest from '../model/SearchInsightsRequest';
import SearchInsightsResponse from '../model/SearchInsightsResponse';
import SearchOrganizationInsightsRequest from '../model/SearchOrganizationInsightsRequest';
import SearchOrganizationInsightsResponse from '../model/SearchOrganizationInsightsResponse';
import StartCostEstimationRequest from '../model/StartCostEstimationRequest';
import UpdateEventSourcesConfigRequest from '../model/UpdateEventSourcesConfigRequest';
import UpdateResourceCollectionRequest from '../model/UpdateResourceCollectionRequest';
import UpdateServiceIntegrationRequest from '../model/UpdateServiceIntegrationRequest';

/**
* Default service.
* @module api/DefaultApi
* @version 2020-12-01
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addNotificationChannel operation.
     * @callback module:api/DefaultApi~addNotificationChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddNotificationChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p> Adds a notification channel to DevOps Guru. A notification channel is used to notify you about important DevOps Guru events, such as when an insight is generated. </p> <p>If you use an Amazon SNS topic in another account, you must attach a policy to it that grants DevOps Guru permission to send it notifications. DevOps Guru adds the required policy on your behalf to send notifications using Amazon SNS in your account. DevOps Guru only supports standard SNS topics. For more information, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/sns-required-permissions.html\">Permissions for Amazon SNS topics</a>.</p> <p>If you use an Amazon SNS topic that is encrypted by an Amazon Web Services Key Management Service customer-managed key (CMK), then you must add permissions to the CMK. For more information, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/sns-kms-permissions.html\">Permissions for Amazon Web Services KMSâ€“encrypted Amazon SNS topics</a>.</p>
     * @param {module:model/AddNotificationChannelRequest} addNotificationChannelRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~addNotificationChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddNotificationChannelResponse}
     */
    addNotificationChannel(addNotificationChannelRequest, opts, callback) {
      opts = opts || {};
      let postBody = addNotificationChannelRequest;
      // verify the required parameter 'addNotificationChannelRequest' is set
      if (addNotificationChannelRequest === undefined || addNotificationChannelRequest === null) {
        throw new Error("Missing the required parameter 'addNotificationChannelRequest' when calling addNotificationChannel");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AddNotificationChannelResponse;
      return this.apiClient.callApi(
        '/channels', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteInsight operation.
     * @callback module:api/DefaultApi~deleteInsightCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the insight along with the associated anomalies, events and recommendations.
     * @param {String} id The ID of the insight.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteInsightCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteInsight(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteInsight");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/insights/{Id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeAccountHealth operation.
     * @callback module:api/DefaultApi~describeAccountHealthCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeAccountHealthResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Returns the number of open reactive insights, the number of open proactive insights, and the number of metrics analyzed in your Amazon Web Services account. Use these numbers to gauge the health of operations in your Amazon Web Services account. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeAccountHealthCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeAccountHealthResponse}
     */
    describeAccountHealth(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeAccountHealthResponse;
      return this.apiClient.callApi(
        '/accounts/health', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeAccountOverview operation.
     * @callback module:api/DefaultApi~describeAccountOverviewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeAccountOverviewResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  For the time range passed in, returns the number of open reactive insight that were created, the number of open proactive insights that were created, and the Mean Time to Recover (MTTR) for all closed reactive insights. 
     * @param {module:model/DescribeAccountOverviewRequest} describeAccountOverviewRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeAccountOverviewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeAccountOverviewResponse}
     */
    describeAccountOverview(describeAccountOverviewRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeAccountOverviewRequest;
      // verify the required parameter 'describeAccountOverviewRequest' is set
      if (describeAccountOverviewRequest === undefined || describeAccountOverviewRequest === null) {
        throw new Error("Missing the required parameter 'describeAccountOverviewRequest' when calling describeAccountOverview");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeAccountOverviewResponse;
      return this.apiClient.callApi(
        '/accounts/overview', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeAnomaly operation.
     * @callback module:api/DefaultApi~describeAnomalyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeAnomalyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Returns details about an anomaly that you specify using its ID. 
     * @param {String} id  The ID of the anomaly. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [accountId] The ID of the member account.
     * @param {module:api/DefaultApi~describeAnomalyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeAnomalyResponse}
     */
    describeAnomaly(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling describeAnomaly");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
        'AccountId': opts['accountId']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeAnomalyResponse;
      return this.apiClient.callApi(
        '/anomalies/{Id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeEventSourcesConfig operation.
     * @callback module:api/DefaultApi~describeEventSourcesConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeEventSourcesConfigResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the integration status of services that are integrated with DevOps Guru as Consumer via EventBridge. The one service that can be integrated with DevOps Guru is Amazon CodeGuru Profiler, which can produce proactive recommendations which can be stored and viewed in DevOps Guru.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeEventSourcesConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeEventSourcesConfigResponse}
     */
    describeEventSourcesConfig(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeEventSourcesConfigResponse;
      return this.apiClient.callApi(
        '/event-sources', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeFeedback operation.
     * @callback module:api/DefaultApi~describeFeedbackCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeFeedbackResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Returns the most recent feedback submitted in the current Amazon Web Services account and Region. 
     * @param {module:model/DescribeFeedbackRequest} describeFeedbackRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeFeedbackCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeFeedbackResponse}
     */
    describeFeedback(describeFeedbackRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeFeedbackRequest;
      // verify the required parameter 'describeFeedbackRequest' is set
      if (describeFeedbackRequest === undefined || describeFeedbackRequest === null) {
        throw new Error("Missing the required parameter 'describeFeedbackRequest' when calling describeFeedback");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeFeedbackResponse;
      return this.apiClient.callApi(
        '/feedback', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeInsight operation.
     * @callback module:api/DefaultApi~describeInsightCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeInsightResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Returns details about an insight that you specify using its ID. 
     * @param {String} id  The ID of the insight. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [accountId] The ID of the member account in the organization.
     * @param {module:api/DefaultApi~describeInsightCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeInsightResponse}
     */
    describeInsight(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling describeInsight");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
        'AccountId': opts['accountId']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeInsightResponse;
      return this.apiClient.callApi(
        '/insights/{Id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeOrganizationHealth operation.
     * @callback module:api/DefaultApi~describeOrganizationHealthCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeOrganizationHealthResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns active insights, predictive insights, and resource hours analyzed in last hour.
     * @param {module:model/DescribeOrganizationHealthRequest} describeOrganizationHealthRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeOrganizationHealthCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeOrganizationHealthResponse}
     */
    describeOrganizationHealth(describeOrganizationHealthRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeOrganizationHealthRequest;
      // verify the required parameter 'describeOrganizationHealthRequest' is set
      if (describeOrganizationHealthRequest === undefined || describeOrganizationHealthRequest === null) {
        throw new Error("Missing the required parameter 'describeOrganizationHealthRequest' when calling describeOrganizationHealth");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeOrganizationHealthResponse;
      return this.apiClient.callApi(
        '/organization/health', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeOrganizationOverview operation.
     * @callback module:api/DefaultApi~describeOrganizationOverviewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeOrganizationOverviewResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an overview of your organization's history based on the specified time range. The overview includes the total reactive and proactive insights.
     * @param {module:model/DescribeOrganizationOverviewRequest} describeOrganizationOverviewRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeOrganizationOverviewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeOrganizationOverviewResponse}
     */
    describeOrganizationOverview(describeOrganizationOverviewRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeOrganizationOverviewRequest;
      // verify the required parameter 'describeOrganizationOverviewRequest' is set
      if (describeOrganizationOverviewRequest === undefined || describeOrganizationOverviewRequest === null) {
        throw new Error("Missing the required parameter 'describeOrganizationOverviewRequest' when calling describeOrganizationOverview");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeOrganizationOverviewResponse;
      return this.apiClient.callApi(
        '/organization/overview', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeOrganizationResourceCollectionHealth operation.
     * @callback module:api/DefaultApi~describeOrganizationResourceCollectionHealthCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeOrganizationResourceCollectionHealthResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provides an overview of your system's health. If additional member accounts are part of your organization, you can filter those accounts using the <code>AccountIds</code> field.
     * @param {module:model/DescribeOrganizationResourceCollectionHealthRequest} describeOrganizationResourceCollectionHealthRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~describeOrganizationResourceCollectionHealthCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeOrganizationResourceCollectionHealthResponse}
     */
    describeOrganizationResourceCollectionHealth(describeOrganizationResourceCollectionHealthRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeOrganizationResourceCollectionHealthRequest;
      // verify the required parameter 'describeOrganizationResourceCollectionHealthRequest' is set
      if (describeOrganizationResourceCollectionHealthRequest === undefined || describeOrganizationResourceCollectionHealthRequest === null) {
        throw new Error("Missing the required parameter 'describeOrganizationResourceCollectionHealthRequest' when calling describeOrganizationResourceCollectionHealth");
      }

      let pathParams = {
      };
      let queryParams = {
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeOrganizationResourceCollectionHealthResponse;
      return this.apiClient.callApi(
        '/organization/health/resource-collection', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeResourceCollectionHealth operation.
     * @callback module:api/DefaultApi~describeResourceCollectionHealthCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeResourceCollectionHealthResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Returns the number of open proactive insights, open reactive insights, and the Mean Time to Recover (MTTR) for all closed insights in resource collections in your account. You specify the type of Amazon Web Services resources collection. The two types of Amazon Web Services resource collections supported are Amazon Web Services CloudFormation stacks and Amazon Web Services resources that contain the same Amazon Web Services tag. DevOps Guru can be configured to analyze the Amazon Web Services resources that are defined in the stacks or that are tagged using the same tag <i>key</i>. You can specify up to 500 Amazon Web Services CloudFormation stacks. 
     * @param {module:model/String} resourceCollectionType  An Amazon Web Services resource collection type. This type specifies how analyzed Amazon Web Services resources are defined. The two types of Amazon Web Services resource collections supported are Amazon Web Services CloudFormation stacks and Amazon Web Services resources that contain the same Amazon Web Services tag. DevOps Guru can be configured to analyze the Amazon Web Services resources that are defined in the stacks or that are tagged using the same tag <i>key</i>. You can specify up to 500 Amazon Web Services CloudFormation stacks. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.
     * @param {module:api/DefaultApi~describeResourceCollectionHealthCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeResourceCollectionHealthResponse}
     */
    describeResourceCollectionHealth(resourceCollectionType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceCollectionType' is set
      if (resourceCollectionType === undefined || resourceCollectionType === null) {
        throw new Error("Missing the required parameter 'resourceCollectionType' when calling describeResourceCollectionHealth");
      }

      let pathParams = {
        'ResourceCollectionType': resourceCollectionType
      };
      let queryParams = {
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeResourceCollectionHealthResponse;
      return this.apiClient.callApi(
        '/accounts/health/resource-collection/{ResourceCollectionType}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeServiceIntegration operation.
     * @callback module:api/DefaultApi~describeServiceIntegrationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeServiceIntegrationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Returns the integration status of services that are integrated with DevOps Guru. The one service that can be integrated with DevOps Guru is Amazon Web Services Systems Manager, which can be used to create an OpsItem for each generated insight. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeServiceIntegrationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeServiceIntegrationResponse}
     */
    describeServiceIntegration(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeServiceIntegrationResponse;
      return this.apiClient.callApi(
        '/service-integrations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCostEstimation operation.
     * @callback module:api/DefaultApi~getCostEstimationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCostEstimationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an estimate of the monthly cost for DevOps Guru to analyze your Amazon Web Services resources. For more information, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/cost-estimate.html\">Estimate your Amazon DevOps Guru costs</a> and <a href=\"http://aws.amazon.com/devops-guru/pricing/\">Amazon DevOps Guru pricing</a>.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.
     * @param {module:api/DefaultApi~getCostEstimationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCostEstimationResponse}
     */
    getCostEstimation(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetCostEstimationResponse;
      return this.apiClient.callApi(
        '/cost-estimation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getResourceCollection operation.
     * @callback module:api/DefaultApi~getResourceCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetResourceCollectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Returns lists Amazon Web Services resources that are of the specified resource collection type. The two types of Amazon Web Services resource collections supported are Amazon Web Services CloudFormation stacks and Amazon Web Services resources that contain the same Amazon Web Services tag. DevOps Guru can be configured to analyze the Amazon Web Services resources that are defined in the stacks or that are tagged using the same tag <i>key</i>. You can specify up to 500 Amazon Web Services CloudFormation stacks. 
     * @param {module:model/String} resourceCollectionType  The type of Amazon Web Services resource collections to return. The one valid value is <code>CLOUD_FORMATION</code> for Amazon Web Services CloudFormation stacks. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.
     * @param {module:api/DefaultApi~getResourceCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetResourceCollectionResponse}
     */
    getResourceCollection(resourceCollectionType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceCollectionType' is set
      if (resourceCollectionType === undefined || resourceCollectionType === null) {
        throw new Error("Missing the required parameter 'resourceCollectionType' when calling getResourceCollection");
      }

      let pathParams = {
        'ResourceCollectionType': resourceCollectionType
      };
      let queryParams = {
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetResourceCollectionResponse;
      return this.apiClient.callApi(
        '/resource-collections/{ResourceCollectionType}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAnomaliesForInsight operation.
     * @callback module:api/DefaultApi~listAnomaliesForInsightCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAnomaliesForInsightResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Returns a list of the anomalies that belong to an insight that you specify using its ID. 
     * @param {String} insightId  The ID of the insight. The returned anomalies belong to this insight. 
     * @param {module:model/ListAnomaliesForInsightRequest} listAnomaliesForInsightRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listAnomaliesForInsightCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAnomaliesForInsightResponse}
     */
    listAnomaliesForInsight(insightId, listAnomaliesForInsightRequest, opts, callback) {
      opts = opts || {};
      let postBody = listAnomaliesForInsightRequest;
      // verify the required parameter 'insightId' is set
      if (insightId === undefined || insightId === null) {
        throw new Error("Missing the required parameter 'insightId' when calling listAnomaliesForInsight");
      }
      // verify the required parameter 'listAnomaliesForInsightRequest' is set
      if (listAnomaliesForInsightRequest === undefined || listAnomaliesForInsightRequest === null) {
        throw new Error("Missing the required parameter 'listAnomaliesForInsightRequest' when calling listAnomaliesForInsight");
      }

      let pathParams = {
        'InsightId': insightId
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListAnomaliesForInsightResponse;
      return this.apiClient.callApi(
        '/anomalies/insight/{InsightId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAnomalousLogGroups operation.
     * @callback module:api/DefaultApi~listAnomalousLogGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAnomalousLogGroupsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Returns the list of log groups that contain log anomalies. 
     * @param {module:model/ListAnomalousLogGroupsRequest} listAnomalousLogGroupsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listAnomalousLogGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAnomalousLogGroupsResponse}
     */
    listAnomalousLogGroups(listAnomalousLogGroupsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listAnomalousLogGroupsRequest;
      // verify the required parameter 'listAnomalousLogGroupsRequest' is set
      if (listAnomalousLogGroupsRequest === undefined || listAnomalousLogGroupsRequest === null) {
        throw new Error("Missing the required parameter 'listAnomalousLogGroupsRequest' when calling listAnomalousLogGroups");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListAnomalousLogGroupsResponse;
      return this.apiClient.callApi(
        '/list-log-anomalies', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listEvents operation.
     * @callback module:api/DefaultApi~listEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListEventsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Returns a list of the events emitted by the resources that are evaluated by DevOps Guru. You can use filters to specify which events are returned. 
     * @param {module:model/ListEventsRequest} listEventsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListEventsResponse}
     */
    listEvents(listEventsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listEventsRequest;
      // verify the required parameter 'listEventsRequest' is set
      if (listEventsRequest === undefined || listEventsRequest === null) {
        throw new Error("Missing the required parameter 'listEventsRequest' when calling listEvents");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListEventsResponse;
      return this.apiClient.callApi(
        '/events', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listInsights operation.
     * @callback module:api/DefaultApi~listInsightsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListInsightsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Returns a list of insights in your Amazon Web Services account. You can specify which insights are returned by their start time and status (<code>ONGOING</code>, <code>CLOSED</code>, or <code>ANY</code>). 
     * @param {module:model/ListInsightsRequest} listInsightsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listInsightsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListInsightsResponse}
     */
    listInsights(listInsightsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listInsightsRequest;
      // verify the required parameter 'listInsightsRequest' is set
      if (listInsightsRequest === undefined || listInsightsRequest === null) {
        throw new Error("Missing the required parameter 'listInsightsRequest' when calling listInsights");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListInsightsResponse;
      return this.apiClient.callApi(
        '/insights', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listMonitoredResources operation.
     * @callback module:api/DefaultApi~listMonitoredResourcesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListMonitoredResourcesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Returns the list of all log groups that are being monitored and tagged by DevOps Guru. 
     * @param {module:model/ListMonitoredResourcesRequest} listMonitoredResourcesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listMonitoredResourcesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListMonitoredResourcesResponse}
     */
    listMonitoredResources(listMonitoredResourcesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listMonitoredResourcesRequest;
      // verify the required parameter 'listMonitoredResourcesRequest' is set
      if (listMonitoredResourcesRequest === undefined || listMonitoredResourcesRequest === null) {
        throw new Error("Missing the required parameter 'listMonitoredResourcesRequest' when calling listMonitoredResources");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListMonitoredResourcesResponse;
      return this.apiClient.callApi(
        '/monitoredResources', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listNotificationChannels operation.
     * @callback module:api/DefaultApi~listNotificationChannelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListNotificationChannelsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Returns a list of notification channels configured for DevOps Guru. Each notification channel is used to notify you when DevOps Guru generates an insight that contains information about how to improve your operations. The one supported notification channel is Amazon Simple Notification Service (Amazon SNS). 
     * @param {module:model/ListNotificationChannelsRequest} listNotificationChannelsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listNotificationChannelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListNotificationChannelsResponse}
     */
    listNotificationChannels(listNotificationChannelsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listNotificationChannelsRequest;
      // verify the required parameter 'listNotificationChannelsRequest' is set
      if (listNotificationChannelsRequest === undefined || listNotificationChannelsRequest === null) {
        throw new Error("Missing the required parameter 'listNotificationChannelsRequest' when calling listNotificationChannels");
      }

      let pathParams = {
      };
      let queryParams = {
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListNotificationChannelsResponse;
      return this.apiClient.callApi(
        '/channels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listOrganizationInsights operation.
     * @callback module:api/DefaultApi~listOrganizationInsightsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListOrganizationInsightsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of insights associated with the account or OU Id.
     * @param {module:model/ListOrganizationInsightsRequest} listOrganizationInsightsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listOrganizationInsightsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListOrganizationInsightsResponse}
     */
    listOrganizationInsights(listOrganizationInsightsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listOrganizationInsightsRequest;
      // verify the required parameter 'listOrganizationInsightsRequest' is set
      if (listOrganizationInsightsRequest === undefined || listOrganizationInsightsRequest === null) {
        throw new Error("Missing the required parameter 'listOrganizationInsightsRequest' when calling listOrganizationInsights");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListOrganizationInsightsResponse;
      return this.apiClient.callApi(
        '/organization/insights', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRecommendations operation.
     * @callback module:api/DefaultApi~listRecommendationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListRecommendationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Returns a list of a specified insight's recommendations. Each recommendation includes a list of related metrics and a list of related events. 
     * @param {module:model/ListRecommendationsRequest} listRecommendationsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listRecommendationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListRecommendationsResponse}
     */
    listRecommendations(listRecommendationsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listRecommendationsRequest;
      // verify the required parameter 'listRecommendationsRequest' is set
      if (listRecommendationsRequest === undefined || listRecommendationsRequest === null) {
        throw new Error("Missing the required parameter 'listRecommendationsRequest' when calling listRecommendations");
      }

      let pathParams = {
      };
      let queryParams = {
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListRecommendationsResponse;
      return this.apiClient.callApi(
        '/recommendations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putFeedback operation.
     * @callback module:api/DefaultApi~putFeedbackCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Collects customer feedback about the specified insight. 
     * @param {module:model/PutFeedbackRequest} putFeedbackRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putFeedbackCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    putFeedback(putFeedbackRequest, opts, callback) {
      opts = opts || {};
      let postBody = putFeedbackRequest;
      // verify the required parameter 'putFeedbackRequest' is set
      if (putFeedbackRequest === undefined || putFeedbackRequest === null) {
        throw new Error("Missing the required parameter 'putFeedbackRequest' when calling putFeedback");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/feedback', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeNotificationChannel operation.
     * @callback module:api/DefaultApi~removeNotificationChannelCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Removes a notification channel from DevOps Guru. A notification channel is used to notify you when DevOps Guru generates an insight that contains information about how to improve your operations. 
     * @param {String} id  The ID of the notification channel to be removed. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~removeNotificationChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    removeNotificationChannel(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeNotificationChannel");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/channels/{Id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchInsights operation.
     * @callback module:api/DefaultApi~searchInsightsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchInsightsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p> Returns a list of insights in your Amazon Web Services account. You can specify which insights are returned by their start time, one or more statuses (<code>ONGOING</code> or <code>CLOSED</code>), one or more severities (<code>LOW</code>, <code>MEDIUM</code>, and <code>HIGH</code>), and type (<code>REACTIVE</code> or <code>PROACTIVE</code>). </p> <p> Use the <code>Filters</code> parameter to specify status and severity search parameters. Use the <code>Type</code> parameter to specify <code>REACTIVE</code> or <code>PROACTIVE</code> in your search. </p>
     * @param {module:model/SearchInsightsRequest} searchInsightsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~searchInsightsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchInsightsResponse}
     */
    searchInsights(searchInsightsRequest, opts, callback) {
      opts = opts || {};
      let postBody = searchInsightsRequest;
      // verify the required parameter 'searchInsightsRequest' is set
      if (searchInsightsRequest === undefined || searchInsightsRequest === null) {
        throw new Error("Missing the required parameter 'searchInsightsRequest' when calling searchInsights");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SearchInsightsResponse;
      return this.apiClient.callApi(
        '/insights/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchOrganizationInsights operation.
     * @callback module:api/DefaultApi~searchOrganizationInsightsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchOrganizationInsightsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p> Returns a list of insights in your organization. You can specify which insights are returned by their start time, one or more statuses (<code>ONGOING</code>, <code>CLOSED</code>, and <code>CLOSED</code>), one or more severities (<code>LOW</code>, <code>MEDIUM</code>, and <code>HIGH</code>), and type (<code>REACTIVE</code> or <code>PROACTIVE</code>). </p> <p> Use the <code>Filters</code> parameter to specify status and severity search parameters. Use the <code>Type</code> parameter to specify <code>REACTIVE</code> or <code>PROACTIVE</code> in your search. </p>
     * @param {module:model/SearchOrganizationInsightsRequest} searchOrganizationInsightsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~searchOrganizationInsightsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchOrganizationInsightsResponse}
     */
    searchOrganizationInsights(searchOrganizationInsightsRequest, opts, callback) {
      opts = opts || {};
      let postBody = searchOrganizationInsightsRequest;
      // verify the required parameter 'searchOrganizationInsightsRequest' is set
      if (searchOrganizationInsightsRequest === undefined || searchOrganizationInsightsRequest === null) {
        throw new Error("Missing the required parameter 'searchOrganizationInsightsRequest' when calling searchOrganizationInsights");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SearchOrganizationInsightsResponse;
      return this.apiClient.callApi(
        '/organization/insights/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startCostEstimation operation.
     * @callback module:api/DefaultApi~startCostEstimationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts the creation of an estimate of the monthly cost to analyze your Amazon Web Services resources.
     * @param {module:model/StartCostEstimationRequest} startCostEstimationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startCostEstimationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    startCostEstimation(startCostEstimationRequest, opts, callback) {
      opts = opts || {};
      let postBody = startCostEstimationRequest;
      // verify the required parameter 'startCostEstimationRequest' is set
      if (startCostEstimationRequest === undefined || startCostEstimationRequest === null) {
        throw new Error("Missing the required parameter 'startCostEstimationRequest' when calling startCostEstimation");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/cost-estimation', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEventSourcesConfig operation.
     * @callback module:api/DefaultApi~updateEventSourcesConfigCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enables or disables integration with a service that can be integrated with DevOps Guru. The one service that can be integrated with DevOps Guru is Amazon CodeGuru Profiler, which can produce proactive recommendations which can be stored and viewed in DevOps Guru.
     * @param {module:model/UpdateEventSourcesConfigRequest} updateEventSourcesConfigRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateEventSourcesConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateEventSourcesConfig(updateEventSourcesConfigRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateEventSourcesConfigRequest;
      // verify the required parameter 'updateEventSourcesConfigRequest' is set
      if (updateEventSourcesConfigRequest === undefined || updateEventSourcesConfigRequest === null) {
        throw new Error("Missing the required parameter 'updateEventSourcesConfigRequest' when calling updateEventSourcesConfig");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/event-sources', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateResourceCollection operation.
     * @callback module:api/DefaultApi~updateResourceCollectionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Updates the collection of resources that DevOps Guru analyzes. The two types of Amazon Web Services resource collections supported are Amazon Web Services CloudFormation stacks and Amazon Web Services resources that contain the same Amazon Web Services tag. DevOps Guru can be configured to analyze the Amazon Web Services resources that are defined in the stacks or that are tagged using the same tag <i>key</i>. You can specify up to 500 Amazon Web Services CloudFormation stacks. This method also creates the IAM role required for you to use DevOps Guru. 
     * @param {module:model/UpdateResourceCollectionRequest} updateResourceCollectionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateResourceCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateResourceCollection(updateResourceCollectionRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateResourceCollectionRequest;
      // verify the required parameter 'updateResourceCollectionRequest' is set
      if (updateResourceCollectionRequest === undefined || updateResourceCollectionRequest === null) {
        throw new Error("Missing the required parameter 'updateResourceCollectionRequest' when calling updateResourceCollection");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/resource-collections', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateServiceIntegration operation.
     * @callback module:api/DefaultApi~updateServiceIntegrationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Enables or disables integration with a service that can be integrated with DevOps Guru. The one service that can be integrated with DevOps Guru is Amazon Web Services Systems Manager, which can be used to create an OpsItem for each generated insight. 
     * @param {module:model/UpdateServiceIntegrationRequest} updateServiceIntegrationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateServiceIntegrationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateServiceIntegration(updateServiceIntegrationRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateServiceIntegrationRequest;
      // verify the required parameter 'updateServiceIntegrationRequest' is set
      if (updateServiceIntegrationRequest === undefined || updateServiceIntegrationRequest === null) {
        throw new Error("Missing the required parameter 'updateServiceIntegrationRequest' when calling updateServiceIntegration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/service-integrations', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
