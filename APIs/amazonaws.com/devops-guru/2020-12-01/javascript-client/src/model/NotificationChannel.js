/**
 * Amazon DevOps Guru
 * <p> Amazon DevOps Guru is a fully managed service that helps you identify anomalous behavior in business critical operational applications. You specify the Amazon Web Services resources that you want DevOps Guru to cover, then the Amazon CloudWatch metrics and Amazon Web Services CloudTrail events related to those resources are analyzed. When anomalous behavior is detected, DevOps Guru creates an <i>insight</i> that includes recommendations, related events, and related metrics that can help you improve your operational applications. For more information, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html\">What is Amazon DevOps Guru</a>. </p> <p> You can specify 1 or 2 Amazon Simple Notification Service topics so you are notified every time a new insight is created. You can also enable DevOps Guru to generate an OpsItem in Amazon Web Services Systems Manager for each insight to help you manage and track your work addressing insights. </p> <p> To learn about the DevOps Guru workflow, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html#how-it-works\">How DevOps Guru works</a>. To learn about DevOps Guru concepts, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/concepts.html\">Concepts in DevOps Guru</a>. </p>
 *
 * The version of the OpenAPI document: 2020-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NotificationChannelConfig from './NotificationChannelConfig';

/**
 * The NotificationChannel model module.
 * @module model/NotificationChannel
 * @version 2020-12-01
 */
class NotificationChannel {
    /**
     * Constructs a new <code>NotificationChannel</code>.
     * &lt;p&gt; Information about a notification channel. A notification channel is used to notify you when DevOps Guru creates an insight. The one supported notification channel is Amazon Simple Notification Service (Amazon SNS). &lt;/p&gt; &lt;p&gt;If you use an Amazon SNS topic in another account, you must attach a policy to it that grants DevOps Guru permission to send it notifications. DevOps Guru adds the required policy on your behalf to send notifications using Amazon SNS in your account. DevOps Guru only supports standard SNS topics. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/devops-guru/latest/userguide/sns-required-permissions.html\&quot;&gt;Permissions for Amazon SNS topics&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you use an Amazon SNS topic that is encrypted by an Amazon Web Services Key Management Service customer-managed key (CMK), then you must add permissions to the CMK. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/devops-guru/latest/userguide/sns-kms-permissions.html\&quot;&gt;Permissions for Amazon Web Services KMSâ€“encrypted Amazon SNS topics&lt;/a&gt;.&lt;/p&gt;
     * @alias module:model/NotificationChannel
     */
    constructor() { 
        
        NotificationChannel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NotificationChannel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NotificationChannel} obj Optional instance to populate.
     * @return {module:model/NotificationChannel} The populated <code>NotificationChannel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NotificationChannel();

            if (data.hasOwnProperty('Id')) {
                obj['Id'] = ApiClient.convertToType(data['Id'], 'String');
            }
            if (data.hasOwnProperty('Config')) {
                obj['Config'] = NotificationChannelConfig.constructFromObject(data['Config']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NotificationChannel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NotificationChannel</code>.
     */
    static validateJSON(data) {
        // validate the optional field `Id`
        if (data['Id']) { // data not null
          String.validateJSON(data['Id']);
        }
        // validate the optional field `Config`
        if (data['Config']) { // data not null
          NotificationChannelConfig.validateJSON(data['Config']);
        }

        return true;
    }


}



/**
 * @member {String} Id
 */
NotificationChannel.prototype['Id'] = undefined;

/**
 * @member {module:model/NotificationChannelConfig} Config
 */
NotificationChannel.prototype['Config'] = undefined;






export default NotificationChannel;

