/**
 * Amazon DevOps Guru
 * <p> Amazon DevOps Guru is a fully managed service that helps you identify anomalous behavior in business critical operational applications. You specify the Amazon Web Services resources that you want DevOps Guru to cover, then the Amazon CloudWatch metrics and Amazon Web Services CloudTrail events related to those resources are analyzed. When anomalous behavior is detected, DevOps Guru creates an <i>insight</i> that includes recommendations, related events, and related metrics that can help you improve your operational applications. For more information, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html\">What is Amazon DevOps Guru</a>. </p> <p> You can specify 1 or 2 Amazon Simple Notification Service topics so you are notified every time a new insight is created. You can also enable DevOps Guru to generate an OpsItem in Amazon Web Services Systems Manager for each insight to help you manage and track your work addressing insights. </p> <p> To learn about the DevOps Guru workflow, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html#how-it-works\">How DevOps Guru works</a>. To learn about DevOps Guru concepts, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/concepts.html\">Concepts in DevOps Guru</a>. </p>
 *
 * The version of the OpenAPI document: 2020-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonDevOpsGuru);
  }
}(this, function(expect, AmazonDevOpsGuru) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonDevOpsGuru.Event();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Event', function() {
    it('should create an instance of Event', function() {
      // uncomment below and update the code to test Event
      //var instance = new AmazonDevOpsGuru.Event();
      //expect(instance).to.be.a(AmazonDevOpsGuru.Event);
    });

    it('should have the property resourceCollection (base name: "ResourceCollection")', function() {
      // uncomment below and update the code to test the property resourceCollection
      //var instance = new AmazonDevOpsGuru.Event();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "Id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new AmazonDevOpsGuru.Event();
      //expect(instance).to.be();
    });

    it('should have the property time (base name: "Time")', function() {
      // uncomment below and update the code to test the property time
      //var instance = new AmazonDevOpsGuru.Event();
      //expect(instance).to.be();
    });

    it('should have the property eventSource (base name: "EventSource")', function() {
      // uncomment below and update the code to test the property eventSource
      //var instance = new AmazonDevOpsGuru.Event();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "Name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new AmazonDevOpsGuru.Event();
      //expect(instance).to.be();
    });

    it('should have the property dataSource (base name: "DataSource")', function() {
      // uncomment below and update the code to test the property dataSource
      //var instance = new AmazonDevOpsGuru.Event();
      //expect(instance).to.be();
    });

    it('should have the property eventClass (base name: "EventClass")', function() {
      // uncomment below and update the code to test the property eventClass
      //var instance = new AmazonDevOpsGuru.Event();
      //expect(instance).to.be();
    });

    it('should have the property resources (base name: "Resources")', function() {
      // uncomment below and update the code to test the property resources
      //var instance = new AmazonDevOpsGuru.Event();
      //expect(instance).to.be();
    });

  });

}));
