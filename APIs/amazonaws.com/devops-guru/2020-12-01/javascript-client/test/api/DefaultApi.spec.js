/**
 * Amazon DevOps Guru
 * <p> Amazon DevOps Guru is a fully managed service that helps you identify anomalous behavior in business critical operational applications. You specify the Amazon Web Services resources that you want DevOps Guru to cover, then the Amazon CloudWatch metrics and Amazon Web Services CloudTrail events related to those resources are analyzed. When anomalous behavior is detected, DevOps Guru creates an <i>insight</i> that includes recommendations, related events, and related metrics that can help you improve your operational applications. For more information, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html\">What is Amazon DevOps Guru</a>. </p> <p> You can specify 1 or 2 Amazon Simple Notification Service topics so you are notified every time a new insight is created. You can also enable DevOps Guru to generate an OpsItem in Amazon Web Services Systems Manager for each insight to help you manage and track your work addressing insights. </p> <p> To learn about the DevOps Guru workflow, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html#how-it-works\">How DevOps Guru works</a>. To learn about DevOps Guru concepts, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/concepts.html\">Concepts in DevOps Guru</a>. </p>
 *
 * The version of the OpenAPI document: 2020-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonDevOpsGuru);
  }
}(this, function(expect, AmazonDevOpsGuru) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonDevOpsGuru.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('addNotificationChannel', function() {
      it('should call addNotificationChannel successfully', function(done) {
        //uncomment below and update the code to test addNotificationChannel
        //instance.addNotificationChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteInsight', function() {
      it('should call deleteInsight successfully', function(done) {
        //uncomment below and update the code to test deleteInsight
        //instance.deleteInsight(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeAccountHealth', function() {
      it('should call describeAccountHealth successfully', function(done) {
        //uncomment below and update the code to test describeAccountHealth
        //instance.describeAccountHealth(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeAccountOverview', function() {
      it('should call describeAccountOverview successfully', function(done) {
        //uncomment below and update the code to test describeAccountOverview
        //instance.describeAccountOverview(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeAnomaly', function() {
      it('should call describeAnomaly successfully', function(done) {
        //uncomment below and update the code to test describeAnomaly
        //instance.describeAnomaly(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeEventSourcesConfig', function() {
      it('should call describeEventSourcesConfig successfully', function(done) {
        //uncomment below and update the code to test describeEventSourcesConfig
        //instance.describeEventSourcesConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeFeedback', function() {
      it('should call describeFeedback successfully', function(done) {
        //uncomment below and update the code to test describeFeedback
        //instance.describeFeedback(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeInsight', function() {
      it('should call describeInsight successfully', function(done) {
        //uncomment below and update the code to test describeInsight
        //instance.describeInsight(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeOrganizationHealth', function() {
      it('should call describeOrganizationHealth successfully', function(done) {
        //uncomment below and update the code to test describeOrganizationHealth
        //instance.describeOrganizationHealth(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeOrganizationOverview', function() {
      it('should call describeOrganizationOverview successfully', function(done) {
        //uncomment below and update the code to test describeOrganizationOverview
        //instance.describeOrganizationOverview(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeOrganizationResourceCollectionHealth', function() {
      it('should call describeOrganizationResourceCollectionHealth successfully', function(done) {
        //uncomment below and update the code to test describeOrganizationResourceCollectionHealth
        //instance.describeOrganizationResourceCollectionHealth(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeResourceCollectionHealth', function() {
      it('should call describeResourceCollectionHealth successfully', function(done) {
        //uncomment below and update the code to test describeResourceCollectionHealth
        //instance.describeResourceCollectionHealth(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeServiceIntegration', function() {
      it('should call describeServiceIntegration successfully', function(done) {
        //uncomment below and update the code to test describeServiceIntegration
        //instance.describeServiceIntegration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCostEstimation', function() {
      it('should call getCostEstimation successfully', function(done) {
        //uncomment below and update the code to test getCostEstimation
        //instance.getCostEstimation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getResourceCollection', function() {
      it('should call getResourceCollection successfully', function(done) {
        //uncomment below and update the code to test getResourceCollection
        //instance.getResourceCollection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAnomaliesForInsight', function() {
      it('should call listAnomaliesForInsight successfully', function(done) {
        //uncomment below and update the code to test listAnomaliesForInsight
        //instance.listAnomaliesForInsight(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAnomalousLogGroups', function() {
      it('should call listAnomalousLogGroups successfully', function(done) {
        //uncomment below and update the code to test listAnomalousLogGroups
        //instance.listAnomalousLogGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listEvents', function() {
      it('should call listEvents successfully', function(done) {
        //uncomment below and update the code to test listEvents
        //instance.listEvents(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listInsights', function() {
      it('should call listInsights successfully', function(done) {
        //uncomment below and update the code to test listInsights
        //instance.listInsights(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listMonitoredResources', function() {
      it('should call listMonitoredResources successfully', function(done) {
        //uncomment below and update the code to test listMonitoredResources
        //instance.listMonitoredResources(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listNotificationChannels', function() {
      it('should call listNotificationChannels successfully', function(done) {
        //uncomment below and update the code to test listNotificationChannels
        //instance.listNotificationChannels(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listOrganizationInsights', function() {
      it('should call listOrganizationInsights successfully', function(done) {
        //uncomment below and update the code to test listOrganizationInsights
        //instance.listOrganizationInsights(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listRecommendations', function() {
      it('should call listRecommendations successfully', function(done) {
        //uncomment below and update the code to test listRecommendations
        //instance.listRecommendations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putFeedback', function() {
      it('should call putFeedback successfully', function(done) {
        //uncomment below and update the code to test putFeedback
        //instance.putFeedback(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeNotificationChannel', function() {
      it('should call removeNotificationChannel successfully', function(done) {
        //uncomment below and update the code to test removeNotificationChannel
        //instance.removeNotificationChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchInsights', function() {
      it('should call searchInsights successfully', function(done) {
        //uncomment below and update the code to test searchInsights
        //instance.searchInsights(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchOrganizationInsights', function() {
      it('should call searchOrganizationInsights successfully', function(done) {
        //uncomment below and update the code to test searchOrganizationInsights
        //instance.searchOrganizationInsights(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startCostEstimation', function() {
      it('should call startCostEstimation successfully', function(done) {
        //uncomment below and update the code to test startCostEstimation
        //instance.startCostEstimation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateEventSourcesConfig', function() {
      it('should call updateEventSourcesConfig successfully', function(done) {
        //uncomment below and update the code to test updateEventSourcesConfig
        //instance.updateEventSourcesConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateResourceCollection', function() {
      it('should call updateResourceCollection successfully', function(done) {
        //uncomment below and update the code to test updateResourceCollection
        //instance.updateResourceCollection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateServiceIntegration', function() {
      it('should call updateServiceIntegration successfully', function(done) {
        //uncomment below and update the code to test updateServiceIntegration
        //instance.updateServiceIntegration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
