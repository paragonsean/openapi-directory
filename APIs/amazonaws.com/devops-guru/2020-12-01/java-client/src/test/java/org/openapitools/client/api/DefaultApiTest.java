/*
 * Amazon DevOps Guru
 * <p> Amazon DevOps Guru is a fully managed service that helps you identify anomalous behavior in business critical operational applications. You specify the Amazon Web Services resources that you want DevOps Guru to cover, then the Amazon CloudWatch metrics and Amazon Web Services CloudTrail events related to those resources are analyzed. When anomalous behavior is detected, DevOps Guru creates an <i>insight</i> that includes recommendations, related events, and related metrics that can help you improve your operational applications. For more information, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html\">What is Amazon DevOps Guru</a>. </p> <p> You can specify 1 or 2 Amazon Simple Notification Service topics so you are notified every time a new insight is created. You can also enable DevOps Guru to generate an OpsItem in Amazon Web Services Systems Manager for each insight to help you manage and track your work addressing insights. </p> <p> To learn about the DevOps Guru workflow, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html#how-it-works\">How DevOps Guru works</a>. To learn about DevOps Guru concepts, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/concepts.html\">Concepts in DevOps Guru</a>. </p>
 *
 * The version of the OpenAPI document: 2020-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddNotificationChannelRequest;
import org.openapitools.client.model.AddNotificationChannelResponse;
import org.openapitools.client.model.DescribeAccountHealthResponse;
import org.openapitools.client.model.DescribeAccountOverviewRequest;
import org.openapitools.client.model.DescribeAccountOverviewResponse;
import org.openapitools.client.model.DescribeAnomalyResponse;
import org.openapitools.client.model.DescribeEventSourcesConfigResponse;
import org.openapitools.client.model.DescribeFeedbackRequest;
import org.openapitools.client.model.DescribeFeedbackResponse;
import org.openapitools.client.model.DescribeInsightResponse;
import org.openapitools.client.model.DescribeOrganizationHealthRequest;
import org.openapitools.client.model.DescribeOrganizationHealthResponse;
import org.openapitools.client.model.DescribeOrganizationOverviewRequest;
import org.openapitools.client.model.DescribeOrganizationOverviewResponse;
import org.openapitools.client.model.DescribeOrganizationResourceCollectionHealthRequest;
import org.openapitools.client.model.DescribeOrganizationResourceCollectionHealthResponse;
import org.openapitools.client.model.DescribeResourceCollectionHealthResponse;
import org.openapitools.client.model.DescribeServiceIntegrationResponse;
import org.openapitools.client.model.GetCostEstimationResponse;
import org.openapitools.client.model.GetResourceCollectionResponse;
import org.openapitools.client.model.ListAnomaliesForInsightRequest;
import org.openapitools.client.model.ListAnomaliesForInsightResponse;
import org.openapitools.client.model.ListAnomalousLogGroupsRequest;
import org.openapitools.client.model.ListAnomalousLogGroupsResponse;
import org.openapitools.client.model.ListEventsRequest;
import org.openapitools.client.model.ListEventsResponse;
import org.openapitools.client.model.ListInsightsRequest;
import org.openapitools.client.model.ListInsightsResponse;
import org.openapitools.client.model.ListMonitoredResourcesRequest;
import org.openapitools.client.model.ListMonitoredResourcesResponse;
import org.openapitools.client.model.ListNotificationChannelsRequest;
import org.openapitools.client.model.ListNotificationChannelsResponse;
import org.openapitools.client.model.ListOrganizationInsightsRequest;
import org.openapitools.client.model.ListOrganizationInsightsResponse;
import org.openapitools.client.model.ListRecommendationsRequest;
import org.openapitools.client.model.ListRecommendationsResponse;
import org.openapitools.client.model.PutFeedbackRequest;
import org.openapitools.client.model.SearchInsightsRequest;
import org.openapitools.client.model.SearchInsightsResponse;
import org.openapitools.client.model.SearchOrganizationInsightsRequest;
import org.openapitools.client.model.SearchOrganizationInsightsResponse;
import org.openapitools.client.model.StartCostEstimationRequest;
import org.openapitools.client.model.UpdateEventSourcesConfigRequest;
import org.openapitools.client.model.UpdateResourceCollectionRequest;
import org.openapitools.client.model.UpdateServiceIntegrationRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * &lt;p&gt; Adds a notification channel to DevOps Guru. A notification channel is used to notify you about important DevOps Guru events, such as when an insight is generated. &lt;/p&gt; &lt;p&gt;If you use an Amazon SNS topic in another account, you must attach a policy to it that grants DevOps Guru permission to send it notifications. DevOps Guru adds the required policy on your behalf to send notifications using Amazon SNS in your account. DevOps Guru only supports standard SNS topics. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/devops-guru/latest/userguide/sns-required-permissions.html\&quot;&gt;Permissions for Amazon SNS topics&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you use an Amazon SNS topic that is encrypted by an Amazon Web Services Key Management Service customer-managed key (CMK), then you must add permissions to the CMK. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/devops-guru/latest/userguide/sns-kms-permissions.html\&quot;&gt;Permissions for Amazon Web Services KMSâ€“encrypted Amazon SNS topics&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addNotificationChannelTest() throws ApiException {
        AddNotificationChannelRequest addNotificationChannelRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AddNotificationChannelResponse response = api.addNotificationChannel(addNotificationChannelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the insight along with the associated anomalies, events and recommendations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteInsightTest() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteInsight(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Returns the number of open reactive insights, the number of open proactive insights, and the number of metrics analyzed in your Amazon Web Services account. Use these numbers to gauge the health of operations in your Amazon Web Services account. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeAccountHealthTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeAccountHealthResponse response = api.describeAccountHealth(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  For the time range passed in, returns the number of open reactive insight that were created, the number of open proactive insights that were created, and the Mean Time to Recover (MTTR) for all closed reactive insights. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeAccountOverviewTest() throws ApiException {
        DescribeAccountOverviewRequest describeAccountOverviewRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeAccountOverviewResponse response = api.describeAccountOverview(describeAccountOverviewRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Returns details about an anomaly that you specify using its ID. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeAnomalyTest() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String accountId = null;
        DescribeAnomalyResponse response = api.describeAnomaly(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, accountId);
        // TODO: test validations
    }

    /**
     * Returns the integration status of services that are integrated with DevOps Guru as Consumer via EventBridge. The one service that can be integrated with DevOps Guru is Amazon CodeGuru Profiler, which can produce proactive recommendations which can be stored and viewed in DevOps Guru.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeEventSourcesConfigTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeEventSourcesConfigResponse response = api.describeEventSourcesConfig(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Returns the most recent feedback submitted in the current Amazon Web Services account and Region. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeFeedbackTest() throws ApiException {
        DescribeFeedbackRequest describeFeedbackRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeFeedbackResponse response = api.describeFeedback(describeFeedbackRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Returns details about an insight that you specify using its ID. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeInsightTest() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String accountId = null;
        DescribeInsightResponse response = api.describeInsight(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, accountId);
        // TODO: test validations
    }

    /**
     * Returns active insights, predictive insights, and resource hours analyzed in last hour.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeOrganizationHealthTest() throws ApiException {
        DescribeOrganizationHealthRequest describeOrganizationHealthRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeOrganizationHealthResponse response = api.describeOrganizationHealth(describeOrganizationHealthRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns an overview of your organization&#39;s history based on the specified time range. The overview includes the total reactive and proactive insights.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeOrganizationOverviewTest() throws ApiException {
        DescribeOrganizationOverviewRequest describeOrganizationOverviewRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeOrganizationOverviewResponse response = api.describeOrganizationOverview(describeOrganizationOverviewRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Provides an overview of your system&#39;s health. If additional member accounts are part of your organization, you can filter those accounts using the &lt;code&gt;AccountIds&lt;/code&gt; field.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeOrganizationResourceCollectionHealthTest() throws ApiException {
        DescribeOrganizationResourceCollectionHealthRequest describeOrganizationResourceCollectionHealthRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        DescribeOrganizationResourceCollectionHealthResponse response = api.describeOrganizationResourceCollectionHealth(describeOrganizationResourceCollectionHealthRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        // TODO: test validations
    }

    /**
     *  Returns the number of open proactive insights, open reactive insights, and the Mean Time to Recover (MTTR) for all closed insights in resource collections in your account. You specify the type of Amazon Web Services resources collection. The two types of Amazon Web Services resource collections supported are Amazon Web Services CloudFormation stacks and Amazon Web Services resources that contain the same Amazon Web Services tag. DevOps Guru can be configured to analyze the Amazon Web Services resources that are defined in the stacks or that are tagged using the same tag &lt;i&gt;key&lt;/i&gt;. You can specify up to 500 Amazon Web Services CloudFormation stacks. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeResourceCollectionHealthTest() throws ApiException {
        String resourceCollectionType = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        DescribeResourceCollectionHealthResponse response = api.describeResourceCollectionHealth(resourceCollectionType, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        // TODO: test validations
    }

    /**
     *  Returns the integration status of services that are integrated with DevOps Guru. The one service that can be integrated with DevOps Guru is Amazon Web Services Systems Manager, which can be used to create an OpsItem for each generated insight. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeServiceIntegrationTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeServiceIntegrationResponse response = api.describeServiceIntegration(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns an estimate of the monthly cost for DevOps Guru to analyze your Amazon Web Services resources. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/devops-guru/latest/userguide/cost-estimate.html\&quot;&gt;Estimate your Amazon DevOps Guru costs&lt;/a&gt; and &lt;a href&#x3D;\&quot;http://aws.amazon.com/devops-guru/pricing/\&quot;&gt;Amazon DevOps Guru pricing&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCostEstimationTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        GetCostEstimationResponse response = api.getCostEstimation(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        // TODO: test validations
    }

    /**
     *  Returns lists Amazon Web Services resources that are of the specified resource collection type. The two types of Amazon Web Services resource collections supported are Amazon Web Services CloudFormation stacks and Amazon Web Services resources that contain the same Amazon Web Services tag. DevOps Guru can be configured to analyze the Amazon Web Services resources that are defined in the stacks or that are tagged using the same tag &lt;i&gt;key&lt;/i&gt;. You can specify up to 500 Amazon Web Services CloudFormation stacks. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getResourceCollectionTest() throws ApiException {
        String resourceCollectionType = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        GetResourceCollectionResponse response = api.getResourceCollection(resourceCollectionType, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        // TODO: test validations
    }

    /**
     *  Returns a list of the anomalies that belong to an insight that you specify using its ID. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAnomaliesForInsightTest() throws ApiException {
        String insightId = null;
        ListAnomaliesForInsightRequest listAnomaliesForInsightRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListAnomaliesForInsightResponse response = api.listAnomaliesForInsight(insightId, listAnomaliesForInsightRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     *  Returns the list of log groups that contain log anomalies. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAnomalousLogGroupsTest() throws ApiException {
        ListAnomalousLogGroupsRequest listAnomalousLogGroupsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListAnomalousLogGroupsResponse response = api.listAnomalousLogGroups(listAnomalousLogGroupsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     *  Returns a list of the events emitted by the resources that are evaluated by DevOps Guru. You can use filters to specify which events are returned. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listEventsTest() throws ApiException {
        ListEventsRequest listEventsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListEventsResponse response = api.listEvents(listEventsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     *  Returns a list of insights in your Amazon Web Services account. You can specify which insights are returned by their start time and status (&lt;code&gt;ONGOING&lt;/code&gt;, &lt;code&gt;CLOSED&lt;/code&gt;, or &lt;code&gt;ANY&lt;/code&gt;). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listInsightsTest() throws ApiException {
        ListInsightsRequest listInsightsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListInsightsResponse response = api.listInsights(listInsightsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     *  Returns the list of all log groups that are being monitored and tagged by DevOps Guru. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMonitoredResourcesTest() throws ApiException {
        ListMonitoredResourcesRequest listMonitoredResourcesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListMonitoredResourcesResponse response = api.listMonitoredResources(listMonitoredResourcesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     *  Returns a list of notification channels configured for DevOps Guru. Each notification channel is used to notify you when DevOps Guru generates an insight that contains information about how to improve your operations. The one supported notification channel is Amazon Simple Notification Service (Amazon SNS). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listNotificationChannelsTest() throws ApiException {
        ListNotificationChannelsRequest listNotificationChannelsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        ListNotificationChannelsResponse response = api.listNotificationChannels(listNotificationChannelsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        // TODO: test validations
    }

    /**
     * Returns a list of insights associated with the account or OU Id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listOrganizationInsightsTest() throws ApiException {
        ListOrganizationInsightsRequest listOrganizationInsightsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListOrganizationInsightsResponse response = api.listOrganizationInsights(listOrganizationInsightsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     *  Returns a list of a specified insight&#39;s recommendations. Each recommendation includes a list of related metrics and a list of related events. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRecommendationsTest() throws ApiException {
        ListRecommendationsRequest listRecommendationsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        ListRecommendationsResponse response = api.listRecommendations(listRecommendationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        // TODO: test validations
    }

    /**
     *  Collects customer feedback about the specified insight. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putFeedbackTest() throws ApiException {
        PutFeedbackRequest putFeedbackRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.putFeedback(putFeedbackRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Removes a notification channel from DevOps Guru. A notification channel is used to notify you when DevOps Guru generates an insight that contains information about how to improve your operations. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeNotificationChannelTest() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.removeNotificationChannel(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt; Returns a list of insights in your Amazon Web Services account. You can specify which insights are returned by their start time, one or more statuses (&lt;code&gt;ONGOING&lt;/code&gt; or &lt;code&gt;CLOSED&lt;/code&gt;), one or more severities (&lt;code&gt;LOW&lt;/code&gt;, &lt;code&gt;MEDIUM&lt;/code&gt;, and &lt;code&gt;HIGH&lt;/code&gt;), and type (&lt;code&gt;REACTIVE&lt;/code&gt; or &lt;code&gt;PROACTIVE&lt;/code&gt;). &lt;/p&gt; &lt;p&gt; Use the &lt;code&gt;Filters&lt;/code&gt; parameter to specify status and severity search parameters. Use the &lt;code&gt;Type&lt;/code&gt; parameter to specify &lt;code&gt;REACTIVE&lt;/code&gt; or &lt;code&gt;PROACTIVE&lt;/code&gt; in your search. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchInsightsTest() throws ApiException {
        SearchInsightsRequest searchInsightsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        SearchInsightsResponse response = api.searchInsights(searchInsightsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt; Returns a list of insights in your organization. You can specify which insights are returned by their start time, one or more statuses (&lt;code&gt;ONGOING&lt;/code&gt;, &lt;code&gt;CLOSED&lt;/code&gt;, and &lt;code&gt;CLOSED&lt;/code&gt;), one or more severities (&lt;code&gt;LOW&lt;/code&gt;, &lt;code&gt;MEDIUM&lt;/code&gt;, and &lt;code&gt;HIGH&lt;/code&gt;), and type (&lt;code&gt;REACTIVE&lt;/code&gt; or &lt;code&gt;PROACTIVE&lt;/code&gt;). &lt;/p&gt; &lt;p&gt; Use the &lt;code&gt;Filters&lt;/code&gt; parameter to specify status and severity search parameters. Use the &lt;code&gt;Type&lt;/code&gt; parameter to specify &lt;code&gt;REACTIVE&lt;/code&gt; or &lt;code&gt;PROACTIVE&lt;/code&gt; in your search. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchOrganizationInsightsTest() throws ApiException {
        SearchOrganizationInsightsRequest searchOrganizationInsightsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        SearchOrganizationInsightsResponse response = api.searchOrganizationInsights(searchOrganizationInsightsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Starts the creation of an estimate of the monthly cost to analyze your Amazon Web Services resources.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startCostEstimationTest() throws ApiException {
        StartCostEstimationRequest startCostEstimationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.startCostEstimation(startCostEstimationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Enables or disables integration with a service that can be integrated with DevOps Guru. The one service that can be integrated with DevOps Guru is Amazon CodeGuru Profiler, which can produce proactive recommendations which can be stored and viewed in DevOps Guru.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEventSourcesConfigTest() throws ApiException {
        UpdateEventSourcesConfigRequest updateEventSourcesConfigRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateEventSourcesConfig(updateEventSourcesConfigRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Updates the collection of resources that DevOps Guru analyzes. The two types of Amazon Web Services resource collections supported are Amazon Web Services CloudFormation stacks and Amazon Web Services resources that contain the same Amazon Web Services tag. DevOps Guru can be configured to analyze the Amazon Web Services resources that are defined in the stacks or that are tagged using the same tag &lt;i&gt;key&lt;/i&gt;. You can specify up to 500 Amazon Web Services CloudFormation stacks. This method also creates the IAM role required for you to use DevOps Guru. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateResourceCollectionTest() throws ApiException {
        UpdateResourceCollectionRequest updateResourceCollectionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateResourceCollection(updateResourceCollectionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Enables or disables integration with a service that can be integrated with DevOps Guru. The one service that can be integrated with DevOps Guru is Amazon Web Services Systems Manager, which can be used to create an OpsItem for each generated insight. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateServiceIntegrationTest() throws ApiException {
        UpdateServiceIntegrationRequest updateServiceIntegrationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateServiceIntegration(updateServiceIntegrationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
