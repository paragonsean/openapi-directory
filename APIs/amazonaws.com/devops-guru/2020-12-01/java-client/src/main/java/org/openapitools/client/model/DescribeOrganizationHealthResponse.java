/*
 * Amazon DevOps Guru
 * <p> Amazon DevOps Guru is a fully managed service that helps you identify anomalous behavior in business critical operational applications. You specify the Amazon Web Services resources that you want DevOps Guru to cover, then the Amazon CloudWatch metrics and Amazon Web Services CloudTrail events related to those resources are analyzed. When anomalous behavior is detected, DevOps Guru creates an <i>insight</i> that includes recommendations, related events, and related metrics that can help you improve your operational applications. For more information, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html\">What is Amazon DevOps Guru</a>. </p> <p> You can specify 1 or 2 Amazon Simple Notification Service topics so you are notified every time a new insight is created. You can also enable DevOps Guru to generate an OpsItem in Amazon Web Services Systems Manager for each insight to help you manage and track your work addressing insights. </p> <p> To learn about the DevOps Guru workflow, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html#how-it-works\">How DevOps Guru works</a>. To learn about DevOps Guru concepts, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/concepts.html\">Concepts in DevOps Guru</a>. </p>
 *
 * The version of the OpenAPI document: 2020-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeOrganizationHealthResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:48.558602-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeOrganizationHealthResponse {
  public static final String SERIALIZED_NAME_OPEN_REACTIVE_INSIGHTS = "OpenReactiveInsights";
  @SerializedName(SERIALIZED_NAME_OPEN_REACTIVE_INSIGHTS)
  private Integer openReactiveInsights;

  public static final String SERIALIZED_NAME_OPEN_PROACTIVE_INSIGHTS = "OpenProactiveInsights";
  @SerializedName(SERIALIZED_NAME_OPEN_PROACTIVE_INSIGHTS)
  private Integer openProactiveInsights;

  public static final String SERIALIZED_NAME_METRICS_ANALYZED = "MetricsAnalyzed";
  @SerializedName(SERIALIZED_NAME_METRICS_ANALYZED)
  private Integer metricsAnalyzed;

  public static final String SERIALIZED_NAME_RESOURCE_HOURS = "ResourceHours";
  @SerializedName(SERIALIZED_NAME_RESOURCE_HOURS)
  private Integer resourceHours;

  public DescribeOrganizationHealthResponse() {
  }

  public DescribeOrganizationHealthResponse openReactiveInsights(Integer openReactiveInsights) {
    this.openReactiveInsights = openReactiveInsights;
    return this;
  }

  /**
   * Get openReactiveInsights
   * @return openReactiveInsights
   */
  @javax.annotation.Nonnull
  public Integer getOpenReactiveInsights() {
    return openReactiveInsights;
  }

  public void setOpenReactiveInsights(Integer openReactiveInsights) {
    this.openReactiveInsights = openReactiveInsights;
  }


  public DescribeOrganizationHealthResponse openProactiveInsights(Integer openProactiveInsights) {
    this.openProactiveInsights = openProactiveInsights;
    return this;
  }

  /**
   * Get openProactiveInsights
   * @return openProactiveInsights
   */
  @javax.annotation.Nonnull
  public Integer getOpenProactiveInsights() {
    return openProactiveInsights;
  }

  public void setOpenProactiveInsights(Integer openProactiveInsights) {
    this.openProactiveInsights = openProactiveInsights;
  }


  public DescribeOrganizationHealthResponse metricsAnalyzed(Integer metricsAnalyzed) {
    this.metricsAnalyzed = metricsAnalyzed;
    return this;
  }

  /**
   * Get metricsAnalyzed
   * @return metricsAnalyzed
   */
  @javax.annotation.Nonnull
  public Integer getMetricsAnalyzed() {
    return metricsAnalyzed;
  }

  public void setMetricsAnalyzed(Integer metricsAnalyzed) {
    this.metricsAnalyzed = metricsAnalyzed;
  }


  public DescribeOrganizationHealthResponse resourceHours(Integer resourceHours) {
    this.resourceHours = resourceHours;
    return this;
  }

  /**
   * Get resourceHours
   * @return resourceHours
   */
  @javax.annotation.Nonnull
  public Integer getResourceHours() {
    return resourceHours;
  }

  public void setResourceHours(Integer resourceHours) {
    this.resourceHours = resourceHours;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeOrganizationHealthResponse describeOrganizationHealthResponse = (DescribeOrganizationHealthResponse) o;
    return Objects.equals(this.openReactiveInsights, describeOrganizationHealthResponse.openReactiveInsights) &&
        Objects.equals(this.openProactiveInsights, describeOrganizationHealthResponse.openProactiveInsights) &&
        Objects.equals(this.metricsAnalyzed, describeOrganizationHealthResponse.metricsAnalyzed) &&
        Objects.equals(this.resourceHours, describeOrganizationHealthResponse.resourceHours);
  }

  @Override
  public int hashCode() {
    return Objects.hash(openReactiveInsights, openProactiveInsights, metricsAnalyzed, resourceHours);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeOrganizationHealthResponse {\n");
    sb.append("    openReactiveInsights: ").append(toIndentedString(openReactiveInsights)).append("\n");
    sb.append("    openProactiveInsights: ").append(toIndentedString(openProactiveInsights)).append("\n");
    sb.append("    metricsAnalyzed: ").append(toIndentedString(metricsAnalyzed)).append("\n");
    sb.append("    resourceHours: ").append(toIndentedString(resourceHours)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("OpenReactiveInsights");
    openapiFields.add("OpenProactiveInsights");
    openapiFields.add("MetricsAnalyzed");
    openapiFields.add("ResourceHours");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("OpenReactiveInsights");
    openapiRequiredFields.add("OpenProactiveInsights");
    openapiRequiredFields.add("MetricsAnalyzed");
    openapiRequiredFields.add("ResourceHours");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeOrganizationHealthResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeOrganizationHealthResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeOrganizationHealthResponse is not found in the empty JSON string", DescribeOrganizationHealthResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeOrganizationHealthResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeOrganizationHealthResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DescribeOrganizationHealthResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `OpenReactiveInsights`
      Integer.validateJsonElement(jsonObj.get("OpenReactiveInsights"));
      // validate the required field `OpenProactiveInsights`
      Integer.validateJsonElement(jsonObj.get("OpenProactiveInsights"));
      // validate the required field `MetricsAnalyzed`
      Integer.validateJsonElement(jsonObj.get("MetricsAnalyzed"));
      // validate the required field `ResourceHours`
      Integer.validateJsonElement(jsonObj.get("ResourceHours"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeOrganizationHealthResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeOrganizationHealthResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeOrganizationHealthResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeOrganizationHealthResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeOrganizationHealthResponse>() {
           @Override
           public void write(JsonWriter out, DescribeOrganizationHealthResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeOrganizationHealthResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeOrganizationHealthResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeOrganizationHealthResponse
   * @throws IOException if the JSON string is invalid with respect to DescribeOrganizationHealthResponse
   */
  public static DescribeOrganizationHealthResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeOrganizationHealthResponse.class);
  }

  /**
   * Convert an instance of DescribeOrganizationHealthResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

