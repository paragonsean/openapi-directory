/*
 * Amazon DevOps Guru
 * <p> Amazon DevOps Guru is a fully managed service that helps you identify anomalous behavior in business critical operational applications. You specify the Amazon Web Services resources that you want DevOps Guru to cover, then the Amazon CloudWatch metrics and Amazon Web Services CloudTrail events related to those resources are analyzed. When anomalous behavior is detected, DevOps Guru creates an <i>insight</i> that includes recommendations, related events, and related metrics that can help you improve your operational applications. For more information, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html\">What is Amazon DevOps Guru</a>. </p> <p> You can specify 1 or 2 Amazon Simple Notification Service topics so you are notified every time a new insight is created. You can also enable DevOps Guru to generate an OpsItem in Amazon Web Services Systems Manager for each insight to help you manage and track your work addressing insights. </p> <p> To learn about the DevOps Guru workflow, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html#how-it-works\">How DevOps Guru works</a>. To learn about DevOps Guru concepts, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/concepts.html\">Concepts in DevOps Guru</a>. </p>
 *
 * The version of the OpenAPI document: 2020-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 *  Information about an anomaly that is related to a recommendation. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:48.558602-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RecommendationRelatedAnomaly {
  public static final String SERIALIZED_NAME_RESOURCES = "Resources";
  @SerializedName(SERIALIZED_NAME_RESOURCES)
  private List resources;

  public static final String SERIALIZED_NAME_SOURCE_DETAILS = "SourceDetails";
  @SerializedName(SERIALIZED_NAME_SOURCE_DETAILS)
  private List sourceDetails;

  public static final String SERIALIZED_NAME_ANOMALY_ID = "AnomalyId";
  @SerializedName(SERIALIZED_NAME_ANOMALY_ID)
  private String anomalyId;

  public RecommendationRelatedAnomaly() {
  }

  public RecommendationRelatedAnomaly resources(List resources) {
    this.resources = resources;
    return this;
  }

  /**
   * Get resources
   * @return resources
   */
  @javax.annotation.Nullable
  public List getResources() {
    return resources;
  }

  public void setResources(List resources) {
    this.resources = resources;
  }


  public RecommendationRelatedAnomaly sourceDetails(List sourceDetails) {
    this.sourceDetails = sourceDetails;
    return this;
  }

  /**
   * Get sourceDetails
   * @return sourceDetails
   */
  @javax.annotation.Nullable
  public List getSourceDetails() {
    return sourceDetails;
  }

  public void setSourceDetails(List sourceDetails) {
    this.sourceDetails = sourceDetails;
  }


  public RecommendationRelatedAnomaly anomalyId(String anomalyId) {
    this.anomalyId = anomalyId;
    return this;
  }

  /**
   * Get anomalyId
   * @return anomalyId
   */
  @javax.annotation.Nullable
  public String getAnomalyId() {
    return anomalyId;
  }

  public void setAnomalyId(String anomalyId) {
    this.anomalyId = anomalyId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecommendationRelatedAnomaly recommendationRelatedAnomaly = (RecommendationRelatedAnomaly) o;
    return Objects.equals(this.resources, recommendationRelatedAnomaly.resources) &&
        Objects.equals(this.sourceDetails, recommendationRelatedAnomaly.sourceDetails) &&
        Objects.equals(this.anomalyId, recommendationRelatedAnomaly.anomalyId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(resources, sourceDetails, anomalyId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecommendationRelatedAnomaly {\n");
    sb.append("    resources: ").append(toIndentedString(resources)).append("\n");
    sb.append("    sourceDetails: ").append(toIndentedString(sourceDetails)).append("\n");
    sb.append("    anomalyId: ").append(toIndentedString(anomalyId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Resources");
    openapiFields.add("SourceDetails");
    openapiFields.add("AnomalyId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RecommendationRelatedAnomaly
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RecommendationRelatedAnomaly.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RecommendationRelatedAnomaly is not found in the empty JSON string", RecommendationRelatedAnomaly.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RecommendationRelatedAnomaly.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RecommendationRelatedAnomaly` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Resources`
      if (jsonObj.get("Resources") != null && !jsonObj.get("Resources").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Resources"));
      }
      // validate the optional field `SourceDetails`
      if (jsonObj.get("SourceDetails") != null && !jsonObj.get("SourceDetails").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("SourceDetails"));
      }
      // validate the optional field `AnomalyId`
      if (jsonObj.get("AnomalyId") != null && !jsonObj.get("AnomalyId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AnomalyId"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RecommendationRelatedAnomaly.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RecommendationRelatedAnomaly' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RecommendationRelatedAnomaly> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RecommendationRelatedAnomaly.class));

       return (TypeAdapter<T>) new TypeAdapter<RecommendationRelatedAnomaly>() {
           @Override
           public void write(JsonWriter out, RecommendationRelatedAnomaly value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RecommendationRelatedAnomaly read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RecommendationRelatedAnomaly given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RecommendationRelatedAnomaly
   * @throws IOException if the JSON string is invalid with respect to RecommendationRelatedAnomaly
   */
  public static RecommendationRelatedAnomaly fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RecommendationRelatedAnomaly.class);
  }

  /**
   * Convert an instance of RecommendationRelatedAnomaly to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

