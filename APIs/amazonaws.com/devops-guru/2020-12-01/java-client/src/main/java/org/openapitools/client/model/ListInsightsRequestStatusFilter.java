/*
 * Amazon DevOps Guru
 * <p> Amazon DevOps Guru is a fully managed service that helps you identify anomalous behavior in business critical operational applications. You specify the Amazon Web Services resources that you want DevOps Guru to cover, then the Amazon CloudWatch metrics and Amazon Web Services CloudTrail events related to those resources are analyzed. When anomalous behavior is detected, DevOps Guru creates an <i>insight</i> that includes recommendations, related events, and related metrics that can help you improve your operational applications. For more information, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html\">What is Amazon DevOps Guru</a>. </p> <p> You can specify 1 or 2 Amazon Simple Notification Service topics so you are notified every time a new insight is created. You can also enable DevOps Guru to generate an OpsItem in Amazon Web Services Systems Manager for each insight to help you manage and track your work addressing insights. </p> <p> To learn about the DevOps Guru workflow, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html#how-it-works\">How DevOps Guru works</a>. To learn about DevOps Guru concepts, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/concepts.html\">Concepts in DevOps Guru</a>. </p>
 *
 * The version of the OpenAPI document: 2020-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ListInsightsRequestStatusFilterAny;
import org.openapitools.client.model.ListInsightsRequestStatusFilterClosed;
import org.openapitools.client.model.ListInsightsRequestStatusFilterOngoing;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListInsightsRequestStatusFilter
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:48.558602-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListInsightsRequestStatusFilter {
  public static final String SERIALIZED_NAME_ONGOING = "Ongoing";
  @SerializedName(SERIALIZED_NAME_ONGOING)
  private ListInsightsRequestStatusFilterOngoing ongoing;

  public static final String SERIALIZED_NAME_CLOSED = "Closed";
  @SerializedName(SERIALIZED_NAME_CLOSED)
  private ListInsightsRequestStatusFilterClosed closed;

  public static final String SERIALIZED_NAME_ANY = "Any";
  @SerializedName(SERIALIZED_NAME_ANY)
  private ListInsightsRequestStatusFilterAny any;

  public ListInsightsRequestStatusFilter() {
  }

  public ListInsightsRequestStatusFilter ongoing(ListInsightsRequestStatusFilterOngoing ongoing) {
    this.ongoing = ongoing;
    return this;
  }

  /**
   * Get ongoing
   * @return ongoing
   */
  @javax.annotation.Nullable
  public ListInsightsRequestStatusFilterOngoing getOngoing() {
    return ongoing;
  }

  public void setOngoing(ListInsightsRequestStatusFilterOngoing ongoing) {
    this.ongoing = ongoing;
  }


  public ListInsightsRequestStatusFilter closed(ListInsightsRequestStatusFilterClosed closed) {
    this.closed = closed;
    return this;
  }

  /**
   * Get closed
   * @return closed
   */
  @javax.annotation.Nullable
  public ListInsightsRequestStatusFilterClosed getClosed() {
    return closed;
  }

  public void setClosed(ListInsightsRequestStatusFilterClosed closed) {
    this.closed = closed;
  }


  public ListInsightsRequestStatusFilter any(ListInsightsRequestStatusFilterAny any) {
    this.any = any;
    return this;
  }

  /**
   * Get any
   * @return any
   */
  @javax.annotation.Nullable
  public ListInsightsRequestStatusFilterAny getAny() {
    return any;
  }

  public void setAny(ListInsightsRequestStatusFilterAny any) {
    this.any = any;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListInsightsRequestStatusFilter listInsightsRequestStatusFilter = (ListInsightsRequestStatusFilter) o;
    return Objects.equals(this.ongoing, listInsightsRequestStatusFilter.ongoing) &&
        Objects.equals(this.closed, listInsightsRequestStatusFilter.closed) &&
        Objects.equals(this.any, listInsightsRequestStatusFilter.any);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ongoing, closed, any);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListInsightsRequestStatusFilter {\n");
    sb.append("    ongoing: ").append(toIndentedString(ongoing)).append("\n");
    sb.append("    closed: ").append(toIndentedString(closed)).append("\n");
    sb.append("    any: ").append(toIndentedString(any)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Ongoing");
    openapiFields.add("Closed");
    openapiFields.add("Any");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListInsightsRequestStatusFilter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListInsightsRequestStatusFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListInsightsRequestStatusFilter is not found in the empty JSON string", ListInsightsRequestStatusFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListInsightsRequestStatusFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListInsightsRequestStatusFilter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Ongoing`
      if (jsonObj.get("Ongoing") != null && !jsonObj.get("Ongoing").isJsonNull()) {
        ListInsightsRequestStatusFilterOngoing.validateJsonElement(jsonObj.get("Ongoing"));
      }
      // validate the optional field `Closed`
      if (jsonObj.get("Closed") != null && !jsonObj.get("Closed").isJsonNull()) {
        ListInsightsRequestStatusFilterClosed.validateJsonElement(jsonObj.get("Closed"));
      }
      // validate the optional field `Any`
      if (jsonObj.get("Any") != null && !jsonObj.get("Any").isJsonNull()) {
        ListInsightsRequestStatusFilterAny.validateJsonElement(jsonObj.get("Any"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListInsightsRequestStatusFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListInsightsRequestStatusFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListInsightsRequestStatusFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListInsightsRequestStatusFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<ListInsightsRequestStatusFilter>() {
           @Override
           public void write(JsonWriter out, ListInsightsRequestStatusFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListInsightsRequestStatusFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListInsightsRequestStatusFilter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListInsightsRequestStatusFilter
   * @throws IOException if the JSON string is invalid with respect to ListInsightsRequestStatusFilter
   */
  public static ListInsightsRequestStatusFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListInsightsRequestStatusFilter.class);
  }

  /**
   * Convert an instance of ListInsightsRequestStatusFilter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

