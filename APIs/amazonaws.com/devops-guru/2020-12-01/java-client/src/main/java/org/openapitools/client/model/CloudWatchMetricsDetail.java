/*
 * Amazon DevOps Guru
 * <p> Amazon DevOps Guru is a fully managed service that helps you identify anomalous behavior in business critical operational applications. You specify the Amazon Web Services resources that you want DevOps Guru to cover, then the Amazon CloudWatch metrics and Amazon Web Services CloudTrail events related to those resources are analyzed. When anomalous behavior is detected, DevOps Guru creates an <i>insight</i> that includes recommendations, related events, and related metrics that can help you improve your operational applications. For more information, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html\">What is Amazon DevOps Guru</a>. </p> <p> You can specify 1 or 2 Amazon Simple Notification Service topics so you are notified every time a new insight is created. You can also enable DevOps Guru to generate an OpsItem in Amazon Web Services Systems Manager for each insight to help you manage and track your work addressing insights. </p> <p> To learn about the DevOps Guru workflow, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html#how-it-works\">How DevOps Guru works</a>. To learn about DevOps Guru concepts, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/concepts.html\">Concepts in DevOps Guru</a>. </p>
 *
 * The version of the OpenAPI document: 2020-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CloudWatchMetricsDetailMetricDataSummary;
import org.openapitools.client.model.CloudWatchMetricsStat;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 *  Information about an Amazon CloudWatch metric. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:48.558602-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CloudWatchMetricsDetail {
  public static final String SERIALIZED_NAME_METRIC_NAME = "MetricName";
  @SerializedName(SERIALIZED_NAME_METRIC_NAME)
  private String metricName;

  public static final String SERIALIZED_NAME_NAMESPACE = "Namespace";
  @SerializedName(SERIALIZED_NAME_NAMESPACE)
  private String namespace;

  public static final String SERIALIZED_NAME_DIMENSIONS = "Dimensions";
  @SerializedName(SERIALIZED_NAME_DIMENSIONS)
  private List dimensions;

  public static final String SERIALIZED_NAME_STAT = "Stat";
  @SerializedName(SERIALIZED_NAME_STAT)
  private CloudWatchMetricsStat stat;

  public static final String SERIALIZED_NAME_UNIT = "Unit";
  @SerializedName(SERIALIZED_NAME_UNIT)
  private String unit;

  public static final String SERIALIZED_NAME_PERIOD = "Period";
  @SerializedName(SERIALIZED_NAME_PERIOD)
  private Integer period;

  public static final String SERIALIZED_NAME_METRIC_DATA_SUMMARY = "MetricDataSummary";
  @SerializedName(SERIALIZED_NAME_METRIC_DATA_SUMMARY)
  private CloudWatchMetricsDetailMetricDataSummary metricDataSummary;

  public CloudWatchMetricsDetail() {
  }

  public CloudWatchMetricsDetail metricName(String metricName) {
    this.metricName = metricName;
    return this;
  }

  /**
   * Get metricName
   * @return metricName
   */
  @javax.annotation.Nullable
  public String getMetricName() {
    return metricName;
  }

  public void setMetricName(String metricName) {
    this.metricName = metricName;
  }


  public CloudWatchMetricsDetail namespace(String namespace) {
    this.namespace = namespace;
    return this;
  }

  /**
   * Get namespace
   * @return namespace
   */
  @javax.annotation.Nullable
  public String getNamespace() {
    return namespace;
  }

  public void setNamespace(String namespace) {
    this.namespace = namespace;
  }


  public CloudWatchMetricsDetail dimensions(List dimensions) {
    this.dimensions = dimensions;
    return this;
  }

  /**
   * Get dimensions
   * @return dimensions
   */
  @javax.annotation.Nullable
  public List getDimensions() {
    return dimensions;
  }

  public void setDimensions(List dimensions) {
    this.dimensions = dimensions;
  }


  public CloudWatchMetricsDetail stat(CloudWatchMetricsStat stat) {
    this.stat = stat;
    return this;
  }

  /**
   * Get stat
   * @return stat
   */
  @javax.annotation.Nullable
  public CloudWatchMetricsStat getStat() {
    return stat;
  }

  public void setStat(CloudWatchMetricsStat stat) {
    this.stat = stat;
  }


  public CloudWatchMetricsDetail unit(String unit) {
    this.unit = unit;
    return this;
  }

  /**
   * Get unit
   * @return unit
   */
  @javax.annotation.Nullable
  public String getUnit() {
    return unit;
  }

  public void setUnit(String unit) {
    this.unit = unit;
  }


  public CloudWatchMetricsDetail period(Integer period) {
    this.period = period;
    return this;
  }

  /**
   * Get period
   * @return period
   */
  @javax.annotation.Nullable
  public Integer getPeriod() {
    return period;
  }

  public void setPeriod(Integer period) {
    this.period = period;
  }


  public CloudWatchMetricsDetail metricDataSummary(CloudWatchMetricsDetailMetricDataSummary metricDataSummary) {
    this.metricDataSummary = metricDataSummary;
    return this;
  }

  /**
   * Get metricDataSummary
   * @return metricDataSummary
   */
  @javax.annotation.Nullable
  public CloudWatchMetricsDetailMetricDataSummary getMetricDataSummary() {
    return metricDataSummary;
  }

  public void setMetricDataSummary(CloudWatchMetricsDetailMetricDataSummary metricDataSummary) {
    this.metricDataSummary = metricDataSummary;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CloudWatchMetricsDetail cloudWatchMetricsDetail = (CloudWatchMetricsDetail) o;
    return Objects.equals(this.metricName, cloudWatchMetricsDetail.metricName) &&
        Objects.equals(this.namespace, cloudWatchMetricsDetail.namespace) &&
        Objects.equals(this.dimensions, cloudWatchMetricsDetail.dimensions) &&
        Objects.equals(this.stat, cloudWatchMetricsDetail.stat) &&
        Objects.equals(this.unit, cloudWatchMetricsDetail.unit) &&
        Objects.equals(this.period, cloudWatchMetricsDetail.period) &&
        Objects.equals(this.metricDataSummary, cloudWatchMetricsDetail.metricDataSummary);
  }

  @Override
  public int hashCode() {
    return Objects.hash(metricName, namespace, dimensions, stat, unit, period, metricDataSummary);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CloudWatchMetricsDetail {\n");
    sb.append("    metricName: ").append(toIndentedString(metricName)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("    stat: ").append(toIndentedString(stat)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("    period: ").append(toIndentedString(period)).append("\n");
    sb.append("    metricDataSummary: ").append(toIndentedString(metricDataSummary)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("MetricName");
    openapiFields.add("Namespace");
    openapiFields.add("Dimensions");
    openapiFields.add("Stat");
    openapiFields.add("Unit");
    openapiFields.add("Period");
    openapiFields.add("MetricDataSummary");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CloudWatchMetricsDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CloudWatchMetricsDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CloudWatchMetricsDetail is not found in the empty JSON string", CloudWatchMetricsDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CloudWatchMetricsDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CloudWatchMetricsDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `MetricName`
      if (jsonObj.get("MetricName") != null && !jsonObj.get("MetricName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MetricName"));
      }
      // validate the optional field `Namespace`
      if (jsonObj.get("Namespace") != null && !jsonObj.get("Namespace").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Namespace"));
      }
      // validate the optional field `Dimensions`
      if (jsonObj.get("Dimensions") != null && !jsonObj.get("Dimensions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Dimensions"));
      }
      // validate the optional field `Stat`
      if (jsonObj.get("Stat") != null && !jsonObj.get("Stat").isJsonNull()) {
        CloudWatchMetricsStat.validateJsonElement(jsonObj.get("Stat"));
      }
      // validate the optional field `Unit`
      if (jsonObj.get("Unit") != null && !jsonObj.get("Unit").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Unit"));
      }
      // validate the optional field `Period`
      if (jsonObj.get("Period") != null && !jsonObj.get("Period").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Period"));
      }
      // validate the optional field `MetricDataSummary`
      if (jsonObj.get("MetricDataSummary") != null && !jsonObj.get("MetricDataSummary").isJsonNull()) {
        CloudWatchMetricsDetailMetricDataSummary.validateJsonElement(jsonObj.get("MetricDataSummary"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CloudWatchMetricsDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CloudWatchMetricsDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CloudWatchMetricsDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CloudWatchMetricsDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<CloudWatchMetricsDetail>() {
           @Override
           public void write(JsonWriter out, CloudWatchMetricsDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CloudWatchMetricsDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CloudWatchMetricsDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CloudWatchMetricsDetail
   * @throws IOException if the JSON string is invalid with respect to CloudWatchMetricsDetail
   */
  public static CloudWatchMetricsDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CloudWatchMetricsDetail.class);
  }

  /**
   * Convert an instance of CloudWatchMetricsDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

