/*
 * Amazon DevOps Guru
 * <p> Amazon DevOps Guru is a fully managed service that helps you identify anomalous behavior in business critical operational applications. You specify the Amazon Web Services resources that you want DevOps Guru to cover, then the Amazon CloudWatch metrics and Amazon Web Services CloudTrail events related to those resources are analyzed. When anomalous behavior is detected, DevOps Guru creates an <i>insight</i> that includes recommendations, related events, and related metrics that can help you improve your operational applications. For more information, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html\">What is Amazon DevOps Guru</a>. </p> <p> You can specify 1 or 2 Amazon Simple Notification Service topics so you are notified every time a new insight is created. You can also enable DevOps Guru to generate an OpsItem in Amazon Web Services Systems Manager for each insight to help you manage and track your work addressing insights. </p> <p> To learn about the DevOps Guru workflow, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html#how-it-works\">How DevOps Guru works</a>. To learn about DevOps Guru concepts, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/concepts.html\">Concepts in DevOps Guru</a>. </p>
 *
 * The version of the OpenAPI document: 2020-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ResourceCollection;
import org.openapitools.client.model.ResourcePermission;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 *  Information about the resource that is being monitored, including the name of the resource, the type of resource, and whether or not permission is given to DevOps Guru to access that resource. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:48.558602-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MonitoredResourceIdentifier {
  public static final String SERIALIZED_NAME_MONITORED_RESOURCE_NAME = "MonitoredResourceName";
  @SerializedName(SERIALIZED_NAME_MONITORED_RESOURCE_NAME)
  private String monitoredResourceName;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_RESOURCE_PERMISSION = "ResourcePermission";
  @SerializedName(SERIALIZED_NAME_RESOURCE_PERMISSION)
  private ResourcePermission resourcePermission;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "LastUpdated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private OffsetDateTime lastUpdated;

  public static final String SERIALIZED_NAME_RESOURCE_COLLECTION = "ResourceCollection";
  @SerializedName(SERIALIZED_NAME_RESOURCE_COLLECTION)
  private ResourceCollection resourceCollection;

  public MonitoredResourceIdentifier() {
  }

  public MonitoredResourceIdentifier monitoredResourceName(String monitoredResourceName) {
    this.monitoredResourceName = monitoredResourceName;
    return this;
  }

  /**
   * Get monitoredResourceName
   * @return monitoredResourceName
   */
  @javax.annotation.Nullable
  public String getMonitoredResourceName() {
    return monitoredResourceName;
  }

  public void setMonitoredResourceName(String monitoredResourceName) {
    this.monitoredResourceName = monitoredResourceName;
  }


  public MonitoredResourceIdentifier type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public MonitoredResourceIdentifier resourcePermission(ResourcePermission resourcePermission) {
    this.resourcePermission = resourcePermission;
    return this;
  }

  /**
   * Get resourcePermission
   * @return resourcePermission
   */
  @javax.annotation.Nullable
  public ResourcePermission getResourcePermission() {
    return resourcePermission;
  }

  public void setResourcePermission(ResourcePermission resourcePermission) {
    this.resourcePermission = resourcePermission;
  }


  public MonitoredResourceIdentifier lastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
    return this;
  }

  /**
   * Get lastUpdated
   * @return lastUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }

  public void setLastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
  }


  public MonitoredResourceIdentifier resourceCollection(ResourceCollection resourceCollection) {
    this.resourceCollection = resourceCollection;
    return this;
  }

  /**
   * Get resourceCollection
   * @return resourceCollection
   */
  @javax.annotation.Nullable
  public ResourceCollection getResourceCollection() {
    return resourceCollection;
  }

  public void setResourceCollection(ResourceCollection resourceCollection) {
    this.resourceCollection = resourceCollection;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MonitoredResourceIdentifier monitoredResourceIdentifier = (MonitoredResourceIdentifier) o;
    return Objects.equals(this.monitoredResourceName, monitoredResourceIdentifier.monitoredResourceName) &&
        Objects.equals(this.type, monitoredResourceIdentifier.type) &&
        Objects.equals(this.resourcePermission, monitoredResourceIdentifier.resourcePermission) &&
        Objects.equals(this.lastUpdated, monitoredResourceIdentifier.lastUpdated) &&
        Objects.equals(this.resourceCollection, monitoredResourceIdentifier.resourceCollection);
  }

  @Override
  public int hashCode() {
    return Objects.hash(monitoredResourceName, type, resourcePermission, lastUpdated, resourceCollection);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MonitoredResourceIdentifier {\n");
    sb.append("    monitoredResourceName: ").append(toIndentedString(monitoredResourceName)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    resourcePermission: ").append(toIndentedString(resourcePermission)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    resourceCollection: ").append(toIndentedString(resourceCollection)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("MonitoredResourceName");
    openapiFields.add("Type");
    openapiFields.add("ResourcePermission");
    openapiFields.add("LastUpdated");
    openapiFields.add("ResourceCollection");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MonitoredResourceIdentifier
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MonitoredResourceIdentifier.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MonitoredResourceIdentifier is not found in the empty JSON string", MonitoredResourceIdentifier.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MonitoredResourceIdentifier.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MonitoredResourceIdentifier` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `MonitoredResourceName`
      if (jsonObj.get("MonitoredResourceName") != null && !jsonObj.get("MonitoredResourceName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MonitoredResourceName"));
      }
      // validate the optional field `Type`
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Type"));
      }
      // validate the optional field `ResourcePermission`
      if (jsonObj.get("ResourcePermission") != null && !jsonObj.get("ResourcePermission").isJsonNull()) {
        ResourcePermission.validateJsonElement(jsonObj.get("ResourcePermission"));
      }
      // validate the optional field `LastUpdated`
      if (jsonObj.get("LastUpdated") != null && !jsonObj.get("LastUpdated").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastUpdated"));
      }
      // validate the optional field `ResourceCollection`
      if (jsonObj.get("ResourceCollection") != null && !jsonObj.get("ResourceCollection").isJsonNull()) {
        ResourceCollection.validateJsonElement(jsonObj.get("ResourceCollection"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MonitoredResourceIdentifier.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MonitoredResourceIdentifier' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MonitoredResourceIdentifier> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MonitoredResourceIdentifier.class));

       return (TypeAdapter<T>) new TypeAdapter<MonitoredResourceIdentifier>() {
           @Override
           public void write(JsonWriter out, MonitoredResourceIdentifier value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MonitoredResourceIdentifier read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MonitoredResourceIdentifier given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MonitoredResourceIdentifier
   * @throws IOException if the JSON string is invalid with respect to MonitoredResourceIdentifier
   */
  public static MonitoredResourceIdentifier fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MonitoredResourceIdentifier.class);
  }

  /**
   * Convert an instance of MonitoredResourceIdentifier to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

