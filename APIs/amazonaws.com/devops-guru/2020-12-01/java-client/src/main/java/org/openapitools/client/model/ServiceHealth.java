/*
 * Amazon DevOps Guru
 * <p> Amazon DevOps Guru is a fully managed service that helps you identify anomalous behavior in business critical operational applications. You specify the Amazon Web Services resources that you want DevOps Guru to cover, then the Amazon CloudWatch metrics and Amazon Web Services CloudTrail events related to those resources are analyzed. When anomalous behavior is detected, DevOps Guru creates an <i>insight</i> that includes recommendations, related events, and related metrics that can help you improve your operational applications. For more information, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html\">What is Amazon DevOps Guru</a>. </p> <p> You can specify 1 or 2 Amazon Simple Notification Service topics so you are notified every time a new insight is created. You can also enable DevOps Guru to generate an OpsItem in Amazon Web Services Systems Manager for each insight to help you manage and track your work addressing insights. </p> <p> To learn about the DevOps Guru workflow, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html#how-it-works\">How DevOps Guru works</a>. To learn about DevOps Guru concepts, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/concepts.html\">Concepts in DevOps Guru</a>. </p>
 *
 * The version of the OpenAPI document: 2020-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ServiceHealthInsight;
import org.openapitools.client.model.ServiceName;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the health of an Amazon Web Services service.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:48.558602-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServiceHealth {
  public static final String SERIALIZED_NAME_SERVICE_NAME = "ServiceName";
  @SerializedName(SERIALIZED_NAME_SERVICE_NAME)
  private ServiceName serviceName;

  public static final String SERIALIZED_NAME_INSIGHT = "Insight";
  @SerializedName(SERIALIZED_NAME_INSIGHT)
  private ServiceHealthInsight insight;

  public static final String SERIALIZED_NAME_ANALYZED_RESOURCE_COUNT = "AnalyzedResourceCount";
  @SerializedName(SERIALIZED_NAME_ANALYZED_RESOURCE_COUNT)
  private Integer analyzedResourceCount;

  public ServiceHealth() {
  }

  public ServiceHealth serviceName(ServiceName serviceName) {
    this.serviceName = serviceName;
    return this;
  }

  /**
   * Get serviceName
   * @return serviceName
   */
  @javax.annotation.Nullable
  public ServiceName getServiceName() {
    return serviceName;
  }

  public void setServiceName(ServiceName serviceName) {
    this.serviceName = serviceName;
  }


  public ServiceHealth insight(ServiceHealthInsight insight) {
    this.insight = insight;
    return this;
  }

  /**
   * Get insight
   * @return insight
   */
  @javax.annotation.Nullable
  public ServiceHealthInsight getInsight() {
    return insight;
  }

  public void setInsight(ServiceHealthInsight insight) {
    this.insight = insight;
  }


  public ServiceHealth analyzedResourceCount(Integer analyzedResourceCount) {
    this.analyzedResourceCount = analyzedResourceCount;
    return this;
  }

  /**
   * Get analyzedResourceCount
   * @return analyzedResourceCount
   */
  @javax.annotation.Nullable
  public Integer getAnalyzedResourceCount() {
    return analyzedResourceCount;
  }

  public void setAnalyzedResourceCount(Integer analyzedResourceCount) {
    this.analyzedResourceCount = analyzedResourceCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceHealth serviceHealth = (ServiceHealth) o;
    return Objects.equals(this.serviceName, serviceHealth.serviceName) &&
        Objects.equals(this.insight, serviceHealth.insight) &&
        Objects.equals(this.analyzedResourceCount, serviceHealth.analyzedResourceCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(serviceName, insight, analyzedResourceCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceHealth {\n");
    sb.append("    serviceName: ").append(toIndentedString(serviceName)).append("\n");
    sb.append("    insight: ").append(toIndentedString(insight)).append("\n");
    sb.append("    analyzedResourceCount: ").append(toIndentedString(analyzedResourceCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ServiceName");
    openapiFields.add("Insight");
    openapiFields.add("AnalyzedResourceCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServiceHealth
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServiceHealth.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServiceHealth is not found in the empty JSON string", ServiceHealth.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServiceHealth.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServiceHealth` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ServiceName`
      if (jsonObj.get("ServiceName") != null && !jsonObj.get("ServiceName").isJsonNull()) {
        ServiceName.validateJsonElement(jsonObj.get("ServiceName"));
      }
      // validate the optional field `Insight`
      if (jsonObj.get("Insight") != null && !jsonObj.get("Insight").isJsonNull()) {
        ServiceHealthInsight.validateJsonElement(jsonObj.get("Insight"));
      }
      // validate the optional field `AnalyzedResourceCount`
      if (jsonObj.get("AnalyzedResourceCount") != null && !jsonObj.get("AnalyzedResourceCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("AnalyzedResourceCount"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServiceHealth.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServiceHealth' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServiceHealth> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServiceHealth.class));

       return (TypeAdapter<T>) new TypeAdapter<ServiceHealth>() {
           @Override
           public void write(JsonWriter out, ServiceHealth value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServiceHealth read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServiceHealth given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServiceHealth
   * @throws IOException if the JSON string is invalid with respect to ServiceHealth
   */
  public static ServiceHealth fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServiceHealth.class);
  }

  /**
   * Convert an instance of ServiceHealth to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

