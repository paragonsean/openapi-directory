/*
 * Amazon DevOps Guru
 * <p> Amazon DevOps Guru is a fully managed service that helps you identify anomalous behavior in business critical operational applications. You specify the Amazon Web Services resources that you want DevOps Guru to cover, then the Amazon CloudWatch metrics and Amazon Web Services CloudTrail events related to those resources are analyzed. When anomalous behavior is detected, DevOps Guru creates an <i>insight</i> that includes recommendations, related events, and related metrics that can help you improve your operational applications. For more information, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html\">What is Amazon DevOps Guru</a>. </p> <p> You can specify 1 or 2 Amazon Simple Notification Service topics so you are notified every time a new insight is created. You can also enable DevOps Guru to generate an OpsItem in Amazon Web Services Systems Manager for each insight to help you manage and track your work addressing insights. </p> <p> To learn about the DevOps Guru workflow, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html#how-it-works\">How DevOps Guru works</a>. To learn about DevOps Guru concepts, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/concepts.html\">Concepts in DevOps Guru</a>. </p>
 *
 * The version of the OpenAPI document: 2020-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CostEstimationStatus;
import org.openapitools.client.model.GetCostEstimationResponseResourceCollection;
import org.openapitools.client.model.GetCostEstimationResponseTimeRange;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetCostEstimationResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:48.558602-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetCostEstimationResponse {
  public static final String SERIALIZED_NAME_RESOURCE_COLLECTION = "ResourceCollection";
  @SerializedName(SERIALIZED_NAME_RESOURCE_COLLECTION)
  private GetCostEstimationResponseResourceCollection resourceCollection;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private CostEstimationStatus status;

  public static final String SERIALIZED_NAME_COSTS = "Costs";
  @SerializedName(SERIALIZED_NAME_COSTS)
  private List costs;

  public static final String SERIALIZED_NAME_TIME_RANGE = "TimeRange";
  @SerializedName(SERIALIZED_NAME_TIME_RANGE)
  private GetCostEstimationResponseTimeRange timeRange;

  public static final String SERIALIZED_NAME_TOTAL_COST = "TotalCost";
  @SerializedName(SERIALIZED_NAME_TOTAL_COST)
  private Double totalCost;

  public static final String SERIALIZED_NAME_NEXT_TOKEN = "NextToken";
  @SerializedName(SERIALIZED_NAME_NEXT_TOKEN)
  private String nextToken;

  public GetCostEstimationResponse() {
  }

  public GetCostEstimationResponse resourceCollection(GetCostEstimationResponseResourceCollection resourceCollection) {
    this.resourceCollection = resourceCollection;
    return this;
  }

  /**
   * Get resourceCollection
   * @return resourceCollection
   */
  @javax.annotation.Nullable
  public GetCostEstimationResponseResourceCollection getResourceCollection() {
    return resourceCollection;
  }

  public void setResourceCollection(GetCostEstimationResponseResourceCollection resourceCollection) {
    this.resourceCollection = resourceCollection;
  }


  public GetCostEstimationResponse status(CostEstimationStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public CostEstimationStatus getStatus() {
    return status;
  }

  public void setStatus(CostEstimationStatus status) {
    this.status = status;
  }


  public GetCostEstimationResponse costs(List costs) {
    this.costs = costs;
    return this;
  }

  /**
   * Get costs
   * @return costs
   */
  @javax.annotation.Nullable
  public List getCosts() {
    return costs;
  }

  public void setCosts(List costs) {
    this.costs = costs;
  }


  public GetCostEstimationResponse timeRange(GetCostEstimationResponseTimeRange timeRange) {
    this.timeRange = timeRange;
    return this;
  }

  /**
   * Get timeRange
   * @return timeRange
   */
  @javax.annotation.Nullable
  public GetCostEstimationResponseTimeRange getTimeRange() {
    return timeRange;
  }

  public void setTimeRange(GetCostEstimationResponseTimeRange timeRange) {
    this.timeRange = timeRange;
  }


  public GetCostEstimationResponse totalCost(Double totalCost) {
    this.totalCost = totalCost;
    return this;
  }

  /**
   * Get totalCost
   * @return totalCost
   */
  @javax.annotation.Nullable
  public Double getTotalCost() {
    return totalCost;
  }

  public void setTotalCost(Double totalCost) {
    this.totalCost = totalCost;
  }


  public GetCostEstimationResponse nextToken(String nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  /**
   * Get nextToken
   * @return nextToken
   */
  @javax.annotation.Nullable
  public String getNextToken() {
    return nextToken;
  }

  public void setNextToken(String nextToken) {
    this.nextToken = nextToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetCostEstimationResponse getCostEstimationResponse = (GetCostEstimationResponse) o;
    return Objects.equals(this.resourceCollection, getCostEstimationResponse.resourceCollection) &&
        Objects.equals(this.status, getCostEstimationResponse.status) &&
        Objects.equals(this.costs, getCostEstimationResponse.costs) &&
        Objects.equals(this.timeRange, getCostEstimationResponse.timeRange) &&
        Objects.equals(this.totalCost, getCostEstimationResponse.totalCost) &&
        Objects.equals(this.nextToken, getCostEstimationResponse.nextToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(resourceCollection, status, costs, timeRange, totalCost, nextToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetCostEstimationResponse {\n");
    sb.append("    resourceCollection: ").append(toIndentedString(resourceCollection)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    costs: ").append(toIndentedString(costs)).append("\n");
    sb.append("    timeRange: ").append(toIndentedString(timeRange)).append("\n");
    sb.append("    totalCost: ").append(toIndentedString(totalCost)).append("\n");
    sb.append("    nextToken: ").append(toIndentedString(nextToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ResourceCollection");
    openapiFields.add("Status");
    openapiFields.add("Costs");
    openapiFields.add("TimeRange");
    openapiFields.add("TotalCost");
    openapiFields.add("NextToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetCostEstimationResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetCostEstimationResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetCostEstimationResponse is not found in the empty JSON string", GetCostEstimationResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetCostEstimationResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetCostEstimationResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ResourceCollection`
      if (jsonObj.get("ResourceCollection") != null && !jsonObj.get("ResourceCollection").isJsonNull()) {
        GetCostEstimationResponseResourceCollection.validateJsonElement(jsonObj.get("ResourceCollection"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        CostEstimationStatus.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `Costs`
      if (jsonObj.get("Costs") != null && !jsonObj.get("Costs").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Costs"));
      }
      // validate the optional field `TimeRange`
      if (jsonObj.get("TimeRange") != null && !jsonObj.get("TimeRange").isJsonNull()) {
        GetCostEstimationResponseTimeRange.validateJsonElement(jsonObj.get("TimeRange"));
      }
      // validate the optional field `TotalCost`
      if (jsonObj.get("TotalCost") != null && !jsonObj.get("TotalCost").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("TotalCost"));
      }
      // validate the optional field `NextToken`
      if (jsonObj.get("NextToken") != null && !jsonObj.get("NextToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NextToken"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetCostEstimationResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetCostEstimationResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetCostEstimationResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetCostEstimationResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetCostEstimationResponse>() {
           @Override
           public void write(JsonWriter out, GetCostEstimationResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetCostEstimationResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetCostEstimationResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetCostEstimationResponse
   * @throws IOException if the JSON string is invalid with respect to GetCostEstimationResponse
   */
  public static GetCostEstimationResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetCostEstimationResponse.class);
  }

  /**
   * Convert an instance of GetCostEstimationResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

