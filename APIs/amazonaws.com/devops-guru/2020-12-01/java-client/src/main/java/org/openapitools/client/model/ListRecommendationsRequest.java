/*
 * Amazon DevOps Guru
 * <p> Amazon DevOps Guru is a fully managed service that helps you identify anomalous behavior in business critical operational applications. You specify the Amazon Web Services resources that you want DevOps Guru to cover, then the Amazon CloudWatch metrics and Amazon Web Services CloudTrail events related to those resources are analyzed. When anomalous behavior is detected, DevOps Guru creates an <i>insight</i> that includes recommendations, related events, and related metrics that can help you improve your operational applications. For more information, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html\">What is Amazon DevOps Guru</a>. </p> <p> You can specify 1 or 2 Amazon Simple Notification Service topics so you are notified every time a new insight is created. You can also enable DevOps Guru to generate an OpsItem in Amazon Web Services Systems Manager for each insight to help you manage and track your work addressing insights. </p> <p> To learn about the DevOps Guru workflow, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html#how-it-works\">How DevOps Guru works</a>. To learn about DevOps Guru concepts, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/concepts.html\">Concepts in DevOps Guru</a>. </p>
 *
 * The version of the OpenAPI document: 2020-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListRecommendationsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:48.558602-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListRecommendationsRequest {
  public static final String SERIALIZED_NAME_INSIGHT_ID = "InsightId";
  @SerializedName(SERIALIZED_NAME_INSIGHT_ID)
  private String insightId;

  public static final String SERIALIZED_NAME_NEXT_TOKEN = "NextToken";
  @SerializedName(SERIALIZED_NAME_NEXT_TOKEN)
  private String nextToken;

  /**
   * A locale that specifies the language to use for recommendations.
   */
  @JsonAdapter(LocaleEnum.Adapter.class)
  public enum LocaleEnum {
    DE_DE("DE_DE"),
    
    EN_US("EN_US"),
    
    EN_GB("EN_GB"),
    
    ES_ES("ES_ES"),
    
    FR_FR("FR_FR"),
    
    IT_IT("IT_IT"),
    
    JA_JP("JA_JP"),
    
    KO_KR("KO_KR"),
    
    PT_BR("PT_BR"),
    
    ZH_CN("ZH_CN"),
    
    ZH_TW("ZH_TW");

    private String value;

    LocaleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LocaleEnum fromValue(String value) {
      for (LocaleEnum b : LocaleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LocaleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LocaleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LocaleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LocaleEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LocaleEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LOCALE = "Locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  private LocaleEnum locale;

  public static final String SERIALIZED_NAME_ACCOUNT_ID = "AccountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public ListRecommendationsRequest() {
  }

  public ListRecommendationsRequest insightId(String insightId) {
    this.insightId = insightId;
    return this;
  }

  /**
   *  The ID of the requested insight. 
   * @return insightId
   */
  @javax.annotation.Nonnull
  public String getInsightId() {
    return insightId;
  }

  public void setInsightId(String insightId) {
    this.insightId = insightId;
  }


  public ListRecommendationsRequest nextToken(String nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  /**
   * The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.
   * @return nextToken
   */
  @javax.annotation.Nullable
  public String getNextToken() {
    return nextToken;
  }

  public void setNextToken(String nextToken) {
    this.nextToken = nextToken;
  }


  public ListRecommendationsRequest locale(LocaleEnum locale) {
    this.locale = locale;
    return this;
  }

  /**
   * A locale that specifies the language to use for recommendations.
   * @return locale
   */
  @javax.annotation.Nullable
  public LocaleEnum getLocale() {
    return locale;
  }

  public void setLocale(LocaleEnum locale) {
    this.locale = locale;
  }


  public ListRecommendationsRequest accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * The ID of the Amazon Web Services account. 
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListRecommendationsRequest listRecommendationsRequest = (ListRecommendationsRequest) o;
    return Objects.equals(this.insightId, listRecommendationsRequest.insightId) &&
        Objects.equals(this.nextToken, listRecommendationsRequest.nextToken) &&
        Objects.equals(this.locale, listRecommendationsRequest.locale) &&
        Objects.equals(this.accountId, listRecommendationsRequest.accountId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(insightId, nextToken, locale, accountId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListRecommendationsRequest {\n");
    sb.append("    insightId: ").append(toIndentedString(insightId)).append("\n");
    sb.append("    nextToken: ").append(toIndentedString(nextToken)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("InsightId");
    openapiFields.add("NextToken");
    openapiFields.add("Locale");
    openapiFields.add("AccountId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("InsightId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListRecommendationsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListRecommendationsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListRecommendationsRequest is not found in the empty JSON string", ListRecommendationsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListRecommendationsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListRecommendationsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ListRecommendationsRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("InsightId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InsightId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InsightId").toString()));
      }
      if ((jsonObj.get("NextToken") != null && !jsonObj.get("NextToken").isJsonNull()) && !jsonObj.get("NextToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NextToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NextToken").toString()));
      }
      if ((jsonObj.get("Locale") != null && !jsonObj.get("Locale").isJsonNull()) && !jsonObj.get("Locale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Locale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Locale").toString()));
      }
      // validate the optional field `Locale`
      if (jsonObj.get("Locale") != null && !jsonObj.get("Locale").isJsonNull()) {
        LocaleEnum.validateJsonElement(jsonObj.get("Locale"));
      }
      if ((jsonObj.get("AccountId") != null && !jsonObj.get("AccountId").isJsonNull()) && !jsonObj.get("AccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AccountId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListRecommendationsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListRecommendationsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListRecommendationsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListRecommendationsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ListRecommendationsRequest>() {
           @Override
           public void write(JsonWriter out, ListRecommendationsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListRecommendationsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListRecommendationsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListRecommendationsRequest
   * @throws IOException if the JSON string is invalid with respect to ListRecommendationsRequest
   */
  public static ListRecommendationsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListRecommendationsRequest.class);
  }

  /**
   * Convert an instance of ListRecommendationsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

