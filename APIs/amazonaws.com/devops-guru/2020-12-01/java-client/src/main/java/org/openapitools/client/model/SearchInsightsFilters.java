/*
 * Amazon DevOps Guru
 * <p> Amazon DevOps Guru is a fully managed service that helps you identify anomalous behavior in business critical operational applications. You specify the Amazon Web Services resources that you want DevOps Guru to cover, then the Amazon CloudWatch metrics and Amazon Web Services CloudTrail events related to those resources are analyzed. When anomalous behavior is detected, DevOps Guru creates an <i>insight</i> that includes recommendations, related events, and related metrics that can help you improve your operational applications. For more information, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html\">What is Amazon DevOps Guru</a>. </p> <p> You can specify 1 or 2 Amazon Simple Notification Service topics so you are notified every time a new insight is created. You can also enable DevOps Guru to generate an OpsItem in Amazon Web Services Systems Manager for each insight to help you manage and track your work addressing insights. </p> <p> To learn about the DevOps Guru workflow, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html#how-it-works\">How DevOps Guru works</a>. To learn about DevOps Guru concepts, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/concepts.html\">Concepts in DevOps Guru</a>. </p>
 *
 * The version of the OpenAPI document: 2020-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ResourceCollection;
import org.openapitools.client.model.SearchInsightsRequestFiltersServiceCollection;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies values used to filter responses when searching for insights. You can use a &lt;code&gt;ResourceCollection&lt;/code&gt;, &lt;code&gt;ServiceCollection&lt;/code&gt;, array of severities, and an array of status values. Each filter type contains one or more values to search for. If you specify multiple filter types, the filter types are joined with an &lt;code&gt;AND&lt;/code&gt;, and the request returns only results that match all of the specified filters.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:48.558602-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SearchInsightsFilters {
  public static final String SERIALIZED_NAME_SEVERITIES = "Severities";
  @SerializedName(SERIALIZED_NAME_SEVERITIES)
  private List severities;

  public static final String SERIALIZED_NAME_STATUSES = "Statuses";
  @SerializedName(SERIALIZED_NAME_STATUSES)
  private List statuses;

  public static final String SERIALIZED_NAME_RESOURCE_COLLECTION = "ResourceCollection";
  @SerializedName(SERIALIZED_NAME_RESOURCE_COLLECTION)
  private ResourceCollection resourceCollection;

  public static final String SERIALIZED_NAME_SERVICE_COLLECTION = "ServiceCollection";
  @SerializedName(SERIALIZED_NAME_SERVICE_COLLECTION)
  private SearchInsightsRequestFiltersServiceCollection serviceCollection;

  public SearchInsightsFilters() {
  }

  public SearchInsightsFilters severities(List severities) {
    this.severities = severities;
    return this;
  }

  /**
   * Get severities
   * @return severities
   */
  @javax.annotation.Nullable
  public List getSeverities() {
    return severities;
  }

  public void setSeverities(List severities) {
    this.severities = severities;
  }


  public SearchInsightsFilters statuses(List statuses) {
    this.statuses = statuses;
    return this;
  }

  /**
   * Get statuses
   * @return statuses
   */
  @javax.annotation.Nullable
  public List getStatuses() {
    return statuses;
  }

  public void setStatuses(List statuses) {
    this.statuses = statuses;
  }


  public SearchInsightsFilters resourceCollection(ResourceCollection resourceCollection) {
    this.resourceCollection = resourceCollection;
    return this;
  }

  /**
   * Get resourceCollection
   * @return resourceCollection
   */
  @javax.annotation.Nullable
  public ResourceCollection getResourceCollection() {
    return resourceCollection;
  }

  public void setResourceCollection(ResourceCollection resourceCollection) {
    this.resourceCollection = resourceCollection;
  }


  public SearchInsightsFilters serviceCollection(SearchInsightsRequestFiltersServiceCollection serviceCollection) {
    this.serviceCollection = serviceCollection;
    return this;
  }

  /**
   * Get serviceCollection
   * @return serviceCollection
   */
  @javax.annotation.Nullable
  public SearchInsightsRequestFiltersServiceCollection getServiceCollection() {
    return serviceCollection;
  }

  public void setServiceCollection(SearchInsightsRequestFiltersServiceCollection serviceCollection) {
    this.serviceCollection = serviceCollection;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchInsightsFilters searchInsightsFilters = (SearchInsightsFilters) o;
    return Objects.equals(this.severities, searchInsightsFilters.severities) &&
        Objects.equals(this.statuses, searchInsightsFilters.statuses) &&
        Objects.equals(this.resourceCollection, searchInsightsFilters.resourceCollection) &&
        Objects.equals(this.serviceCollection, searchInsightsFilters.serviceCollection);
  }

  @Override
  public int hashCode() {
    return Objects.hash(severities, statuses, resourceCollection, serviceCollection);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchInsightsFilters {\n");
    sb.append("    severities: ").append(toIndentedString(severities)).append("\n");
    sb.append("    statuses: ").append(toIndentedString(statuses)).append("\n");
    sb.append("    resourceCollection: ").append(toIndentedString(resourceCollection)).append("\n");
    sb.append("    serviceCollection: ").append(toIndentedString(serviceCollection)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Severities");
    openapiFields.add("Statuses");
    openapiFields.add("ResourceCollection");
    openapiFields.add("ServiceCollection");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SearchInsightsFilters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SearchInsightsFilters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchInsightsFilters is not found in the empty JSON string", SearchInsightsFilters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SearchInsightsFilters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchInsightsFilters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Severities`
      if (jsonObj.get("Severities") != null && !jsonObj.get("Severities").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Severities"));
      }
      // validate the optional field `Statuses`
      if (jsonObj.get("Statuses") != null && !jsonObj.get("Statuses").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Statuses"));
      }
      // validate the optional field `ResourceCollection`
      if (jsonObj.get("ResourceCollection") != null && !jsonObj.get("ResourceCollection").isJsonNull()) {
        ResourceCollection.validateJsonElement(jsonObj.get("ResourceCollection"));
      }
      // validate the optional field `ServiceCollection`
      if (jsonObj.get("ServiceCollection") != null && !jsonObj.get("ServiceCollection").isJsonNull()) {
        SearchInsightsRequestFiltersServiceCollection.validateJsonElement(jsonObj.get("ServiceCollection"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchInsightsFilters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchInsightsFilters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchInsightsFilters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchInsightsFilters.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchInsightsFilters>() {
           @Override
           public void write(JsonWriter out, SearchInsightsFilters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchInsightsFilters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SearchInsightsFilters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SearchInsightsFilters
   * @throws IOException if the JSON string is invalid with respect to SearchInsightsFilters
   */
  public static SearchInsightsFilters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchInsightsFilters.class);
  }

  /**
   * Convert an instance of SearchInsightsFilters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

