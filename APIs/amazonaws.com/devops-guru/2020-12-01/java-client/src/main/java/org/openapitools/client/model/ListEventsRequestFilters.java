/*
 * Amazon DevOps Guru
 * <p> Amazon DevOps Guru is a fully managed service that helps you identify anomalous behavior in business critical operational applications. You specify the Amazon Web Services resources that you want DevOps Guru to cover, then the Amazon CloudWatch metrics and Amazon Web Services CloudTrail events related to those resources are analyzed. When anomalous behavior is detected, DevOps Guru creates an <i>insight</i> that includes recommendations, related events, and related metrics that can help you improve your operational applications. For more information, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html\">What is Amazon DevOps Guru</a>. </p> <p> You can specify 1 or 2 Amazon Simple Notification Service topics so you are notified every time a new insight is created. You can also enable DevOps Guru to generate an OpsItem in Amazon Web Services Systems Manager for each insight to help you manage and track your work addressing insights. </p> <p> To learn about the DevOps Guru workflow, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html#how-it-works\">How DevOps Guru works</a>. To learn about DevOps Guru concepts, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/concepts.html\">Concepts in DevOps Guru</a>. </p>
 *
 * The version of the OpenAPI document: 2020-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.EventClass;
import org.openapitools.client.model.EventDataSource;
import org.openapitools.client.model.ListEventsRequestFiltersEventTimeRange;
import org.openapitools.client.model.ResourceCollection;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListEventsRequestFilters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:48.558602-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListEventsRequestFilters {
  public static final String SERIALIZED_NAME_INSIGHT_ID = "InsightId";
  @SerializedName(SERIALIZED_NAME_INSIGHT_ID)
  private String insightId;

  public static final String SERIALIZED_NAME_EVENT_TIME_RANGE = "EventTimeRange";
  @SerializedName(SERIALIZED_NAME_EVENT_TIME_RANGE)
  private ListEventsRequestFiltersEventTimeRange eventTimeRange;

  public static final String SERIALIZED_NAME_EVENT_CLASS = "EventClass";
  @SerializedName(SERIALIZED_NAME_EVENT_CLASS)
  private EventClass eventClass;

  public static final String SERIALIZED_NAME_EVENT_SOURCE = "EventSource";
  @SerializedName(SERIALIZED_NAME_EVENT_SOURCE)
  private String eventSource;

  public static final String SERIALIZED_NAME_DATA_SOURCE = "DataSource";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCE)
  private EventDataSource dataSource;

  public static final String SERIALIZED_NAME_RESOURCE_COLLECTION = "ResourceCollection";
  @SerializedName(SERIALIZED_NAME_RESOURCE_COLLECTION)
  private ResourceCollection resourceCollection;

  public ListEventsRequestFilters() {
  }

  public ListEventsRequestFilters insightId(String insightId) {
    this.insightId = insightId;
    return this;
  }

  /**
   * Get insightId
   * @return insightId
   */
  @javax.annotation.Nullable
  public String getInsightId() {
    return insightId;
  }

  public void setInsightId(String insightId) {
    this.insightId = insightId;
  }


  public ListEventsRequestFilters eventTimeRange(ListEventsRequestFiltersEventTimeRange eventTimeRange) {
    this.eventTimeRange = eventTimeRange;
    return this;
  }

  /**
   * Get eventTimeRange
   * @return eventTimeRange
   */
  @javax.annotation.Nullable
  public ListEventsRequestFiltersEventTimeRange getEventTimeRange() {
    return eventTimeRange;
  }

  public void setEventTimeRange(ListEventsRequestFiltersEventTimeRange eventTimeRange) {
    this.eventTimeRange = eventTimeRange;
  }


  public ListEventsRequestFilters eventClass(EventClass eventClass) {
    this.eventClass = eventClass;
    return this;
  }

  /**
   * Get eventClass
   * @return eventClass
   */
  @javax.annotation.Nullable
  public EventClass getEventClass() {
    return eventClass;
  }

  public void setEventClass(EventClass eventClass) {
    this.eventClass = eventClass;
  }


  public ListEventsRequestFilters eventSource(String eventSource) {
    this.eventSource = eventSource;
    return this;
  }

  /**
   * Get eventSource
   * @return eventSource
   */
  @javax.annotation.Nullable
  public String getEventSource() {
    return eventSource;
  }

  public void setEventSource(String eventSource) {
    this.eventSource = eventSource;
  }


  public ListEventsRequestFilters dataSource(EventDataSource dataSource) {
    this.dataSource = dataSource;
    return this;
  }

  /**
   * Get dataSource
   * @return dataSource
   */
  @javax.annotation.Nullable
  public EventDataSource getDataSource() {
    return dataSource;
  }

  public void setDataSource(EventDataSource dataSource) {
    this.dataSource = dataSource;
  }


  public ListEventsRequestFilters resourceCollection(ResourceCollection resourceCollection) {
    this.resourceCollection = resourceCollection;
    return this;
  }

  /**
   * Get resourceCollection
   * @return resourceCollection
   */
  @javax.annotation.Nullable
  public ResourceCollection getResourceCollection() {
    return resourceCollection;
  }

  public void setResourceCollection(ResourceCollection resourceCollection) {
    this.resourceCollection = resourceCollection;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListEventsRequestFilters listEventsRequestFilters = (ListEventsRequestFilters) o;
    return Objects.equals(this.insightId, listEventsRequestFilters.insightId) &&
        Objects.equals(this.eventTimeRange, listEventsRequestFilters.eventTimeRange) &&
        Objects.equals(this.eventClass, listEventsRequestFilters.eventClass) &&
        Objects.equals(this.eventSource, listEventsRequestFilters.eventSource) &&
        Objects.equals(this.dataSource, listEventsRequestFilters.dataSource) &&
        Objects.equals(this.resourceCollection, listEventsRequestFilters.resourceCollection);
  }

  @Override
  public int hashCode() {
    return Objects.hash(insightId, eventTimeRange, eventClass, eventSource, dataSource, resourceCollection);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListEventsRequestFilters {\n");
    sb.append("    insightId: ").append(toIndentedString(insightId)).append("\n");
    sb.append("    eventTimeRange: ").append(toIndentedString(eventTimeRange)).append("\n");
    sb.append("    eventClass: ").append(toIndentedString(eventClass)).append("\n");
    sb.append("    eventSource: ").append(toIndentedString(eventSource)).append("\n");
    sb.append("    dataSource: ").append(toIndentedString(dataSource)).append("\n");
    sb.append("    resourceCollection: ").append(toIndentedString(resourceCollection)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("InsightId");
    openapiFields.add("EventTimeRange");
    openapiFields.add("EventClass");
    openapiFields.add("EventSource");
    openapiFields.add("DataSource");
    openapiFields.add("ResourceCollection");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListEventsRequestFilters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListEventsRequestFilters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListEventsRequestFilters is not found in the empty JSON string", ListEventsRequestFilters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListEventsRequestFilters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListEventsRequestFilters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `InsightId`
      if (jsonObj.get("InsightId") != null && !jsonObj.get("InsightId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("InsightId"));
      }
      // validate the optional field `EventTimeRange`
      if (jsonObj.get("EventTimeRange") != null && !jsonObj.get("EventTimeRange").isJsonNull()) {
        ListEventsRequestFiltersEventTimeRange.validateJsonElement(jsonObj.get("EventTimeRange"));
      }
      // validate the optional field `EventClass`
      if (jsonObj.get("EventClass") != null && !jsonObj.get("EventClass").isJsonNull()) {
        EventClass.validateJsonElement(jsonObj.get("EventClass"));
      }
      // validate the optional field `EventSource`
      if (jsonObj.get("EventSource") != null && !jsonObj.get("EventSource").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EventSource"));
      }
      // validate the optional field `DataSource`
      if (jsonObj.get("DataSource") != null && !jsonObj.get("DataSource").isJsonNull()) {
        EventDataSource.validateJsonElement(jsonObj.get("DataSource"));
      }
      // validate the optional field `ResourceCollection`
      if (jsonObj.get("ResourceCollection") != null && !jsonObj.get("ResourceCollection").isJsonNull()) {
        ResourceCollection.validateJsonElement(jsonObj.get("ResourceCollection"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListEventsRequestFilters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListEventsRequestFilters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListEventsRequestFilters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListEventsRequestFilters.class));

       return (TypeAdapter<T>) new TypeAdapter<ListEventsRequestFilters>() {
           @Override
           public void write(JsonWriter out, ListEventsRequestFilters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListEventsRequestFilters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListEventsRequestFilters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListEventsRequestFilters
   * @throws IOException if the JSON string is invalid with respect to ListEventsRequestFilters
   */
  public static ListEventsRequestFilters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListEventsRequestFilters.class);
  }

  /**
   * Convert an instance of ListEventsRequestFilters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

