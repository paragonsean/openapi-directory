/*
 * Amazon DevOps Guru
 * <p> Amazon DevOps Guru is a fully managed service that helps you identify anomalous behavior in business critical operational applications. You specify the Amazon Web Services resources that you want DevOps Guru to cover, then the Amazon CloudWatch metrics and Amazon Web Services CloudTrail events related to those resources are analyzed. When anomalous behavior is detected, DevOps Guru creates an <i>insight</i> that includes recommendations, related events, and related metrics that can help you improve your operational applications. For more information, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html\">What is Amazon DevOps Guru</a>. </p> <p> You can specify 1 or 2 Amazon Simple Notification Service topics so you are notified every time a new insight is created. You can also enable DevOps Guru to generate an OpsItem in Amazon Web Services Systems Manager for each insight to help you manage and track your work addressing insights. </p> <p> To learn about the DevOps Guru workflow, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html#how-it-works\">How DevOps Guru works</a>. To learn about DevOps Guru concepts, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/concepts.html\">Concepts in DevOps Guru</a>. </p>
 *
 * The version of the OpenAPI document: 2020-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.LogAnomalyType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 *  Information about an anomalous log event found within a log group. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:48.558602-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LogAnomalyClass {
  public static final String SERIALIZED_NAME_LOG_STREAM_NAME = "LogStreamName";
  @SerializedName(SERIALIZED_NAME_LOG_STREAM_NAME)
  private String logStreamName;

  public static final String SERIALIZED_NAME_LOG_ANOMALY_TYPE = "LogAnomalyType";
  @SerializedName(SERIALIZED_NAME_LOG_ANOMALY_TYPE)
  private LogAnomalyType logAnomalyType;

  public static final String SERIALIZED_NAME_LOG_ANOMALY_TOKEN = "LogAnomalyToken";
  @SerializedName(SERIALIZED_NAME_LOG_ANOMALY_TOKEN)
  private String logAnomalyToken;

  public static final String SERIALIZED_NAME_LOG_EVENT_ID = "LogEventId";
  @SerializedName(SERIALIZED_NAME_LOG_EVENT_ID)
  private String logEventId;

  public static final String SERIALIZED_NAME_EXPLANATION = "Explanation";
  @SerializedName(SERIALIZED_NAME_EXPLANATION)
  private String explanation;

  public static final String SERIALIZED_NAME_NUMBER_OF_LOG_LINES_OCCURRENCES = "NumberOfLogLinesOccurrences";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_LOG_LINES_OCCURRENCES)
  private Integer numberOfLogLinesOccurrences;

  public static final String SERIALIZED_NAME_LOG_EVENT_TIMESTAMP = "LogEventTimestamp";
  @SerializedName(SERIALIZED_NAME_LOG_EVENT_TIMESTAMP)
  private OffsetDateTime logEventTimestamp;

  public LogAnomalyClass() {
  }

  public LogAnomalyClass logStreamName(String logStreamName) {
    this.logStreamName = logStreamName;
    return this;
  }

  /**
   * Get logStreamName
   * @return logStreamName
   */
  @javax.annotation.Nullable
  public String getLogStreamName() {
    return logStreamName;
  }

  public void setLogStreamName(String logStreamName) {
    this.logStreamName = logStreamName;
  }


  public LogAnomalyClass logAnomalyType(LogAnomalyType logAnomalyType) {
    this.logAnomalyType = logAnomalyType;
    return this;
  }

  /**
   * Get logAnomalyType
   * @return logAnomalyType
   */
  @javax.annotation.Nullable
  public LogAnomalyType getLogAnomalyType() {
    return logAnomalyType;
  }

  public void setLogAnomalyType(LogAnomalyType logAnomalyType) {
    this.logAnomalyType = logAnomalyType;
  }


  public LogAnomalyClass logAnomalyToken(String logAnomalyToken) {
    this.logAnomalyToken = logAnomalyToken;
    return this;
  }

  /**
   * Get logAnomalyToken
   * @return logAnomalyToken
   */
  @javax.annotation.Nullable
  public String getLogAnomalyToken() {
    return logAnomalyToken;
  }

  public void setLogAnomalyToken(String logAnomalyToken) {
    this.logAnomalyToken = logAnomalyToken;
  }


  public LogAnomalyClass logEventId(String logEventId) {
    this.logEventId = logEventId;
    return this;
  }

  /**
   * Get logEventId
   * @return logEventId
   */
  @javax.annotation.Nullable
  public String getLogEventId() {
    return logEventId;
  }

  public void setLogEventId(String logEventId) {
    this.logEventId = logEventId;
  }


  public LogAnomalyClass explanation(String explanation) {
    this.explanation = explanation;
    return this;
  }

  /**
   * Get explanation
   * @return explanation
   */
  @javax.annotation.Nullable
  public String getExplanation() {
    return explanation;
  }

  public void setExplanation(String explanation) {
    this.explanation = explanation;
  }


  public LogAnomalyClass numberOfLogLinesOccurrences(Integer numberOfLogLinesOccurrences) {
    this.numberOfLogLinesOccurrences = numberOfLogLinesOccurrences;
    return this;
  }

  /**
   * Get numberOfLogLinesOccurrences
   * @return numberOfLogLinesOccurrences
   */
  @javax.annotation.Nullable
  public Integer getNumberOfLogLinesOccurrences() {
    return numberOfLogLinesOccurrences;
  }

  public void setNumberOfLogLinesOccurrences(Integer numberOfLogLinesOccurrences) {
    this.numberOfLogLinesOccurrences = numberOfLogLinesOccurrences;
  }


  public LogAnomalyClass logEventTimestamp(OffsetDateTime logEventTimestamp) {
    this.logEventTimestamp = logEventTimestamp;
    return this;
  }

  /**
   * Get logEventTimestamp
   * @return logEventTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLogEventTimestamp() {
    return logEventTimestamp;
  }

  public void setLogEventTimestamp(OffsetDateTime logEventTimestamp) {
    this.logEventTimestamp = logEventTimestamp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LogAnomalyClass logAnomalyClass = (LogAnomalyClass) o;
    return Objects.equals(this.logStreamName, logAnomalyClass.logStreamName) &&
        Objects.equals(this.logAnomalyType, logAnomalyClass.logAnomalyType) &&
        Objects.equals(this.logAnomalyToken, logAnomalyClass.logAnomalyToken) &&
        Objects.equals(this.logEventId, logAnomalyClass.logEventId) &&
        Objects.equals(this.explanation, logAnomalyClass.explanation) &&
        Objects.equals(this.numberOfLogLinesOccurrences, logAnomalyClass.numberOfLogLinesOccurrences) &&
        Objects.equals(this.logEventTimestamp, logAnomalyClass.logEventTimestamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(logStreamName, logAnomalyType, logAnomalyToken, logEventId, explanation, numberOfLogLinesOccurrences, logEventTimestamp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LogAnomalyClass {\n");
    sb.append("    logStreamName: ").append(toIndentedString(logStreamName)).append("\n");
    sb.append("    logAnomalyType: ").append(toIndentedString(logAnomalyType)).append("\n");
    sb.append("    logAnomalyToken: ").append(toIndentedString(logAnomalyToken)).append("\n");
    sb.append("    logEventId: ").append(toIndentedString(logEventId)).append("\n");
    sb.append("    explanation: ").append(toIndentedString(explanation)).append("\n");
    sb.append("    numberOfLogLinesOccurrences: ").append(toIndentedString(numberOfLogLinesOccurrences)).append("\n");
    sb.append("    logEventTimestamp: ").append(toIndentedString(logEventTimestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("LogStreamName");
    openapiFields.add("LogAnomalyType");
    openapiFields.add("LogAnomalyToken");
    openapiFields.add("LogEventId");
    openapiFields.add("Explanation");
    openapiFields.add("NumberOfLogLinesOccurrences");
    openapiFields.add("LogEventTimestamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LogAnomalyClass
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LogAnomalyClass.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LogAnomalyClass is not found in the empty JSON string", LogAnomalyClass.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LogAnomalyClass.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LogAnomalyClass` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `LogStreamName`
      if (jsonObj.get("LogStreamName") != null && !jsonObj.get("LogStreamName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LogStreamName"));
      }
      // validate the optional field `LogAnomalyType`
      if (jsonObj.get("LogAnomalyType") != null && !jsonObj.get("LogAnomalyType").isJsonNull()) {
        LogAnomalyType.validateJsonElement(jsonObj.get("LogAnomalyType"));
      }
      // validate the optional field `LogAnomalyToken`
      if (jsonObj.get("LogAnomalyToken") != null && !jsonObj.get("LogAnomalyToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LogAnomalyToken"));
      }
      // validate the optional field `LogEventId`
      if (jsonObj.get("LogEventId") != null && !jsonObj.get("LogEventId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LogEventId"));
      }
      // validate the optional field `Explanation`
      if (jsonObj.get("Explanation") != null && !jsonObj.get("Explanation").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Explanation"));
      }
      // validate the optional field `NumberOfLogLinesOccurrences`
      if (jsonObj.get("NumberOfLogLinesOccurrences") != null && !jsonObj.get("NumberOfLogLinesOccurrences").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("NumberOfLogLinesOccurrences"));
      }
      // validate the optional field `LogEventTimestamp`
      if (jsonObj.get("LogEventTimestamp") != null && !jsonObj.get("LogEventTimestamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LogEventTimestamp"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LogAnomalyClass.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LogAnomalyClass' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LogAnomalyClass> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LogAnomalyClass.class));

       return (TypeAdapter<T>) new TypeAdapter<LogAnomalyClass>() {
           @Override
           public void write(JsonWriter out, LogAnomalyClass value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LogAnomalyClass read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LogAnomalyClass given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LogAnomalyClass
   * @throws IOException if the JSON string is invalid with respect to LogAnomalyClass
   */
  public static LogAnomalyClass fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LogAnomalyClass.class);
  }

  /**
   * Convert an instance of LogAnomalyClass to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

