/*
 * Amazon DevOps Guru
 * <p> Amazon DevOps Guru is a fully managed service that helps you identify anomalous behavior in business critical operational applications. You specify the Amazon Web Services resources that you want DevOps Guru to cover, then the Amazon CloudWatch metrics and Amazon Web Services CloudTrail events related to those resources are analyzed. When anomalous behavior is detected, DevOps Guru creates an <i>insight</i> that includes recommendations, related events, and related metrics that can help you improve your operational applications. For more information, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html\">What is Amazon DevOps Guru</a>. </p> <p> You can specify 1 or 2 Amazon Simple Notification Service topics so you are notified every time a new insight is created. You can also enable DevOps Guru to generate an OpsItem in Amazon Web Services Systems Manager for each insight to help you manage and track your work addressing insights. </p> <p> To learn about the DevOps Guru workflow, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html#how-it-works\">How DevOps Guru works</a>. To learn about DevOps Guru concepts, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/concepts.html\">Concepts in DevOps Guru</a>. </p>
 *
 * The version of the OpenAPI document: 2020-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ResourceCollectionFilterCloudFormation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetResourceCollectionResponseResourceCollection
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:48.558602-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetResourceCollectionResponseResourceCollection {
  public static final String SERIALIZED_NAME_CLOUD_FORMATION = "CloudFormation";
  @SerializedName(SERIALIZED_NAME_CLOUD_FORMATION)
  private ResourceCollectionFilterCloudFormation cloudFormation;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public GetResourceCollectionResponseResourceCollection() {
  }

  public GetResourceCollectionResponseResourceCollection cloudFormation(ResourceCollectionFilterCloudFormation cloudFormation) {
    this.cloudFormation = cloudFormation;
    return this;
  }

  /**
   * Get cloudFormation
   * @return cloudFormation
   */
  @javax.annotation.Nullable
  public ResourceCollectionFilterCloudFormation getCloudFormation() {
    return cloudFormation;
  }

  public void setCloudFormation(ResourceCollectionFilterCloudFormation cloudFormation) {
    this.cloudFormation = cloudFormation;
  }


  public GetResourceCollectionResponseResourceCollection tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetResourceCollectionResponseResourceCollection getResourceCollectionResponseResourceCollection = (GetResourceCollectionResponseResourceCollection) o;
    return Objects.equals(this.cloudFormation, getResourceCollectionResponseResourceCollection.cloudFormation) &&
        Objects.equals(this.tags, getResourceCollectionResponseResourceCollection.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cloudFormation, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetResourceCollectionResponseResourceCollection {\n");
    sb.append("    cloudFormation: ").append(toIndentedString(cloudFormation)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CloudFormation");
    openapiFields.add("Tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetResourceCollectionResponseResourceCollection
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetResourceCollectionResponseResourceCollection.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetResourceCollectionResponseResourceCollection is not found in the empty JSON string", GetResourceCollectionResponseResourceCollection.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetResourceCollectionResponseResourceCollection.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetResourceCollectionResponseResourceCollection` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `CloudFormation`
      if (jsonObj.get("CloudFormation") != null && !jsonObj.get("CloudFormation").isJsonNull()) {
        ResourceCollectionFilterCloudFormation.validateJsonElement(jsonObj.get("CloudFormation"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Tags"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetResourceCollectionResponseResourceCollection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetResourceCollectionResponseResourceCollection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetResourceCollectionResponseResourceCollection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetResourceCollectionResponseResourceCollection.class));

       return (TypeAdapter<T>) new TypeAdapter<GetResourceCollectionResponseResourceCollection>() {
           @Override
           public void write(JsonWriter out, GetResourceCollectionResponseResourceCollection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetResourceCollectionResponseResourceCollection read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetResourceCollectionResponseResourceCollection given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetResourceCollectionResponseResourceCollection
   * @throws IOException if the JSON string is invalid with respect to GetResourceCollectionResponseResourceCollection
   */
  public static GetResourceCollectionResponseResourceCollection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetResourceCollectionResponseResourceCollection.class);
  }

  /**
   * Convert an instance of GetResourceCollectionResponseResourceCollection to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

