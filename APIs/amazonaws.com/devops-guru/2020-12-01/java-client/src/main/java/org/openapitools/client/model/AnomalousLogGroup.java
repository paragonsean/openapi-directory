/*
 * Amazon DevOps Guru
 * <p> Amazon DevOps Guru is a fully managed service that helps you identify anomalous behavior in business critical operational applications. You specify the Amazon Web Services resources that you want DevOps Guru to cover, then the Amazon CloudWatch metrics and Amazon Web Services CloudTrail events related to those resources are analyzed. When anomalous behavior is detected, DevOps Guru creates an <i>insight</i> that includes recommendations, related events, and related metrics that can help you improve your operational applications. For more information, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html\">What is Amazon DevOps Guru</a>. </p> <p> You can specify 1 or 2 Amazon Simple Notification Service topics so you are notified every time a new insight is created. You can also enable DevOps Guru to generate an OpsItem in Amazon Web Services Systems Manager for each insight to help you manage and track your work addressing insights. </p> <p> To learn about the DevOps Guru workflow, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html#how-it-works\">How DevOps Guru works</a>. To learn about DevOps Guru concepts, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/concepts.html\">Concepts in DevOps Guru</a>. </p>
 *
 * The version of the OpenAPI document: 2020-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 *  An Amazon CloudWatch log group that contains log anomalies and is used to generate an insight. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:48.558602-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AnomalousLogGroup {
  public static final String SERIALIZED_NAME_LOG_GROUP_NAME = "LogGroupName";
  @SerializedName(SERIALIZED_NAME_LOG_GROUP_NAME)
  private String logGroupName;

  public static final String SERIALIZED_NAME_IMPACT_START_TIME = "ImpactStartTime";
  @SerializedName(SERIALIZED_NAME_IMPACT_START_TIME)
  private OffsetDateTime impactStartTime;

  public static final String SERIALIZED_NAME_IMPACT_END_TIME = "ImpactEndTime";
  @SerializedName(SERIALIZED_NAME_IMPACT_END_TIME)
  private OffsetDateTime impactEndTime;

  public static final String SERIALIZED_NAME_NUMBER_OF_LOG_LINES_SCANNED = "NumberOfLogLinesScanned";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_LOG_LINES_SCANNED)
  private Integer numberOfLogLinesScanned;

  public static final String SERIALIZED_NAME_LOG_ANOMALY_SHOWCASES = "LogAnomalyShowcases";
  @SerializedName(SERIALIZED_NAME_LOG_ANOMALY_SHOWCASES)
  private List logAnomalyShowcases;

  public AnomalousLogGroup() {
  }

  public AnomalousLogGroup logGroupName(String logGroupName) {
    this.logGroupName = logGroupName;
    return this;
  }

  /**
   * Get logGroupName
   * @return logGroupName
   */
  @javax.annotation.Nullable
  public String getLogGroupName() {
    return logGroupName;
  }

  public void setLogGroupName(String logGroupName) {
    this.logGroupName = logGroupName;
  }


  public AnomalousLogGroup impactStartTime(OffsetDateTime impactStartTime) {
    this.impactStartTime = impactStartTime;
    return this;
  }

  /**
   * Get impactStartTime
   * @return impactStartTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getImpactStartTime() {
    return impactStartTime;
  }

  public void setImpactStartTime(OffsetDateTime impactStartTime) {
    this.impactStartTime = impactStartTime;
  }


  public AnomalousLogGroup impactEndTime(OffsetDateTime impactEndTime) {
    this.impactEndTime = impactEndTime;
    return this;
  }

  /**
   * Get impactEndTime
   * @return impactEndTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getImpactEndTime() {
    return impactEndTime;
  }

  public void setImpactEndTime(OffsetDateTime impactEndTime) {
    this.impactEndTime = impactEndTime;
  }


  public AnomalousLogGroup numberOfLogLinesScanned(Integer numberOfLogLinesScanned) {
    this.numberOfLogLinesScanned = numberOfLogLinesScanned;
    return this;
  }

  /**
   * Get numberOfLogLinesScanned
   * @return numberOfLogLinesScanned
   */
  @javax.annotation.Nullable
  public Integer getNumberOfLogLinesScanned() {
    return numberOfLogLinesScanned;
  }

  public void setNumberOfLogLinesScanned(Integer numberOfLogLinesScanned) {
    this.numberOfLogLinesScanned = numberOfLogLinesScanned;
  }


  public AnomalousLogGroup logAnomalyShowcases(List logAnomalyShowcases) {
    this.logAnomalyShowcases = logAnomalyShowcases;
    return this;
  }

  /**
   * Get logAnomalyShowcases
   * @return logAnomalyShowcases
   */
  @javax.annotation.Nullable
  public List getLogAnomalyShowcases() {
    return logAnomalyShowcases;
  }

  public void setLogAnomalyShowcases(List logAnomalyShowcases) {
    this.logAnomalyShowcases = logAnomalyShowcases;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AnomalousLogGroup anomalousLogGroup = (AnomalousLogGroup) o;
    return Objects.equals(this.logGroupName, anomalousLogGroup.logGroupName) &&
        Objects.equals(this.impactStartTime, anomalousLogGroup.impactStartTime) &&
        Objects.equals(this.impactEndTime, anomalousLogGroup.impactEndTime) &&
        Objects.equals(this.numberOfLogLinesScanned, anomalousLogGroup.numberOfLogLinesScanned) &&
        Objects.equals(this.logAnomalyShowcases, anomalousLogGroup.logAnomalyShowcases);
  }

  @Override
  public int hashCode() {
    return Objects.hash(logGroupName, impactStartTime, impactEndTime, numberOfLogLinesScanned, logAnomalyShowcases);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AnomalousLogGroup {\n");
    sb.append("    logGroupName: ").append(toIndentedString(logGroupName)).append("\n");
    sb.append("    impactStartTime: ").append(toIndentedString(impactStartTime)).append("\n");
    sb.append("    impactEndTime: ").append(toIndentedString(impactEndTime)).append("\n");
    sb.append("    numberOfLogLinesScanned: ").append(toIndentedString(numberOfLogLinesScanned)).append("\n");
    sb.append("    logAnomalyShowcases: ").append(toIndentedString(logAnomalyShowcases)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("LogGroupName");
    openapiFields.add("ImpactStartTime");
    openapiFields.add("ImpactEndTime");
    openapiFields.add("NumberOfLogLinesScanned");
    openapiFields.add("LogAnomalyShowcases");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AnomalousLogGroup
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AnomalousLogGroup.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AnomalousLogGroup is not found in the empty JSON string", AnomalousLogGroup.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AnomalousLogGroup.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AnomalousLogGroup` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `LogGroupName`
      if (jsonObj.get("LogGroupName") != null && !jsonObj.get("LogGroupName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LogGroupName"));
      }
      // validate the optional field `ImpactStartTime`
      if (jsonObj.get("ImpactStartTime") != null && !jsonObj.get("ImpactStartTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("ImpactStartTime"));
      }
      // validate the optional field `ImpactEndTime`
      if (jsonObj.get("ImpactEndTime") != null && !jsonObj.get("ImpactEndTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("ImpactEndTime"));
      }
      // validate the optional field `NumberOfLogLinesScanned`
      if (jsonObj.get("NumberOfLogLinesScanned") != null && !jsonObj.get("NumberOfLogLinesScanned").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("NumberOfLogLinesScanned"));
      }
      // validate the optional field `LogAnomalyShowcases`
      if (jsonObj.get("LogAnomalyShowcases") != null && !jsonObj.get("LogAnomalyShowcases").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("LogAnomalyShowcases"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AnomalousLogGroup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AnomalousLogGroup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AnomalousLogGroup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AnomalousLogGroup.class));

       return (TypeAdapter<T>) new TypeAdapter<AnomalousLogGroup>() {
           @Override
           public void write(JsonWriter out, AnomalousLogGroup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AnomalousLogGroup read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AnomalousLogGroup given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AnomalousLogGroup
   * @throws IOException if the JSON string is invalid with respect to AnomalousLogGroup
   */
  public static AnomalousLogGroup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AnomalousLogGroup.class);
  }

  /**
   * Convert an instance of AnomalousLogGroup to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

