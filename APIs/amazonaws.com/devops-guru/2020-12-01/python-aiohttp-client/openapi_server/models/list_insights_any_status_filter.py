# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.insight_type import InsightType
from openapi_server.models.list_insights_any_status_filter_start_time_range import ListInsightsAnyStatusFilterStartTimeRange
from openapi_server import util


class ListInsightsAnyStatusFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: InsightType=None, start_time_range: ListInsightsAnyStatusFilterStartTimeRange=None):
        """ListInsightsAnyStatusFilter - a model defined in OpenAPI

        :param type: The type of this ListInsightsAnyStatusFilter.
        :param start_time_range: The start_time_range of this ListInsightsAnyStatusFilter.
        """
        self.openapi_types = {
            'type': InsightType,
            'start_time_range': ListInsightsAnyStatusFilterStartTimeRange
        }

        self.attribute_map = {
            'type': 'Type',
            'start_time_range': 'StartTimeRange'
        }

        self._type = type
        self._start_time_range = start_time_range

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListInsightsAnyStatusFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListInsightsAnyStatusFilter of this ListInsightsAnyStatusFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this ListInsightsAnyStatusFilter.


        :return: The type of this ListInsightsAnyStatusFilter.
        :rtype: InsightType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ListInsightsAnyStatusFilter.


        :param type: The type of this ListInsightsAnyStatusFilter.
        :type type: InsightType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def start_time_range(self):
        """Gets the start_time_range of this ListInsightsAnyStatusFilter.


        :return: The start_time_range of this ListInsightsAnyStatusFilter.
        :rtype: ListInsightsAnyStatusFilterStartTimeRange
        """
        return self._start_time_range

    @start_time_range.setter
    def start_time_range(self, start_time_range):
        """Sets the start_time_range of this ListInsightsAnyStatusFilter.


        :param start_time_range: The start_time_range of this ListInsightsAnyStatusFilter.
        :type start_time_range: ListInsightsAnyStatusFilterStartTimeRange
        """
        if start_time_range is None:
            raise ValueError("Invalid value for `start_time_range`, must not be `None`")

        self._start_time_range = start_time_range
