# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cloud_watch_metrics_detail_metric_data_summary import CloudWatchMetricsDetailMetricDataSummary
from openapi_server.models.cloud_watch_metrics_stat import CloudWatchMetricsStat
from openapi_server import util


class CloudWatchMetricsDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, metric_name: str=None, namespace: str=None, dimensions: List=None, stat: CloudWatchMetricsStat=None, unit: str=None, period: int=None, metric_data_summary: CloudWatchMetricsDetailMetricDataSummary=None):
        """CloudWatchMetricsDetail - a model defined in OpenAPI

        :param metric_name: The metric_name of this CloudWatchMetricsDetail.
        :param namespace: The namespace of this CloudWatchMetricsDetail.
        :param dimensions: The dimensions of this CloudWatchMetricsDetail.
        :param stat: The stat of this CloudWatchMetricsDetail.
        :param unit: The unit of this CloudWatchMetricsDetail.
        :param period: The period of this CloudWatchMetricsDetail.
        :param metric_data_summary: The metric_data_summary of this CloudWatchMetricsDetail.
        """
        self.openapi_types = {
            'metric_name': str,
            'namespace': str,
            'dimensions': List,
            'stat': CloudWatchMetricsStat,
            'unit': str,
            'period': int,
            'metric_data_summary': CloudWatchMetricsDetailMetricDataSummary
        }

        self.attribute_map = {
            'metric_name': 'MetricName',
            'namespace': 'Namespace',
            'dimensions': 'Dimensions',
            'stat': 'Stat',
            'unit': 'Unit',
            'period': 'Period',
            'metric_data_summary': 'MetricDataSummary'
        }

        self._metric_name = metric_name
        self._namespace = namespace
        self._dimensions = dimensions
        self._stat = stat
        self._unit = unit
        self._period = period
        self._metric_data_summary = metric_data_summary

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CloudWatchMetricsDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CloudWatchMetricsDetail of this CloudWatchMetricsDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metric_name(self):
        """Gets the metric_name of this CloudWatchMetricsDetail.


        :return: The metric_name of this CloudWatchMetricsDetail.
        :rtype: str
        """
        return self._metric_name

    @metric_name.setter
    def metric_name(self, metric_name):
        """Sets the metric_name of this CloudWatchMetricsDetail.


        :param metric_name: The metric_name of this CloudWatchMetricsDetail.
        :type metric_name: str
        """

        self._metric_name = metric_name

    @property
    def namespace(self):
        """Gets the namespace of this CloudWatchMetricsDetail.


        :return: The namespace of this CloudWatchMetricsDetail.
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this CloudWatchMetricsDetail.


        :param namespace: The namespace of this CloudWatchMetricsDetail.
        :type namespace: str
        """

        self._namespace = namespace

    @property
    def dimensions(self):
        """Gets the dimensions of this CloudWatchMetricsDetail.


        :return: The dimensions of this CloudWatchMetricsDetail.
        :rtype: List
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this CloudWatchMetricsDetail.


        :param dimensions: The dimensions of this CloudWatchMetricsDetail.
        :type dimensions: List
        """

        self._dimensions = dimensions

    @property
    def stat(self):
        """Gets the stat of this CloudWatchMetricsDetail.


        :return: The stat of this CloudWatchMetricsDetail.
        :rtype: CloudWatchMetricsStat
        """
        return self._stat

    @stat.setter
    def stat(self, stat):
        """Sets the stat of this CloudWatchMetricsDetail.


        :param stat: The stat of this CloudWatchMetricsDetail.
        :type stat: CloudWatchMetricsStat
        """

        self._stat = stat

    @property
    def unit(self):
        """Gets the unit of this CloudWatchMetricsDetail.


        :return: The unit of this CloudWatchMetricsDetail.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this CloudWatchMetricsDetail.


        :param unit: The unit of this CloudWatchMetricsDetail.
        :type unit: str
        """

        self._unit = unit

    @property
    def period(self):
        """Gets the period of this CloudWatchMetricsDetail.


        :return: The period of this CloudWatchMetricsDetail.
        :rtype: int
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this CloudWatchMetricsDetail.


        :param period: The period of this CloudWatchMetricsDetail.
        :type period: int
        """

        self._period = period

    @property
    def metric_data_summary(self):
        """Gets the metric_data_summary of this CloudWatchMetricsDetail.


        :return: The metric_data_summary of this CloudWatchMetricsDetail.
        :rtype: CloudWatchMetricsDetailMetricDataSummary
        """
        return self._metric_data_summary

    @metric_data_summary.setter
    def metric_data_summary(self, metric_data_summary):
        """Sets the metric_data_summary of this CloudWatchMetricsDetail.


        :param metric_data_summary: The metric_data_summary of this CloudWatchMetricsDetail.
        :type metric_data_summary: CloudWatchMetricsDetailMetricDataSummary
        """

        self._metric_data_summary = metric_data_summary
