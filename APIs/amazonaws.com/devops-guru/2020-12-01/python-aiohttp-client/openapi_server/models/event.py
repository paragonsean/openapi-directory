# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.event_class import EventClass
from openapi_server.models.event_data_source import EventDataSource
from openapi_server.models.resource_collection import ResourceCollection
from openapi_server import util


class Event(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resource_collection: ResourceCollection=None, id: str=None, time: datetime=None, event_source: str=None, name: str=None, data_source: EventDataSource=None, event_class: EventClass=None, resources: List=None):
        """Event - a model defined in OpenAPI

        :param resource_collection: The resource_collection of this Event.
        :param id: The id of this Event.
        :param time: The time of this Event.
        :param event_source: The event_source of this Event.
        :param name: The name of this Event.
        :param data_source: The data_source of this Event.
        :param event_class: The event_class of this Event.
        :param resources: The resources of this Event.
        """
        self.openapi_types = {
            'resource_collection': ResourceCollection,
            'id': str,
            'time': datetime,
            'event_source': str,
            'name': str,
            'data_source': EventDataSource,
            'event_class': EventClass,
            'resources': List
        }

        self.attribute_map = {
            'resource_collection': 'ResourceCollection',
            'id': 'Id',
            'time': 'Time',
            'event_source': 'EventSource',
            'name': 'Name',
            'data_source': 'DataSource',
            'event_class': 'EventClass',
            'resources': 'Resources'
        }

        self._resource_collection = resource_collection
        self._id = id
        self._time = time
        self._event_source = event_source
        self._name = name
        self._data_source = data_source
        self._event_class = event_class
        self._resources = resources

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Event':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Event of this Event.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resource_collection(self):
        """Gets the resource_collection of this Event.


        :return: The resource_collection of this Event.
        :rtype: ResourceCollection
        """
        return self._resource_collection

    @resource_collection.setter
    def resource_collection(self, resource_collection):
        """Sets the resource_collection of this Event.


        :param resource_collection: The resource_collection of this Event.
        :type resource_collection: ResourceCollection
        """

        self._resource_collection = resource_collection

    @property
    def id(self):
        """Gets the id of this Event.


        :return: The id of this Event.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Event.


        :param id: The id of this Event.
        :type id: str
        """

        self._id = id

    @property
    def time(self):
        """Gets the time of this Event.


        :return: The time of this Event.
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this Event.


        :param time: The time of this Event.
        :type time: datetime
        """

        self._time = time

    @property
    def event_source(self):
        """Gets the event_source of this Event.


        :return: The event_source of this Event.
        :rtype: str
        """
        return self._event_source

    @event_source.setter
    def event_source(self, event_source):
        """Sets the event_source of this Event.


        :param event_source: The event_source of this Event.
        :type event_source: str
        """

        self._event_source = event_source

    @property
    def name(self):
        """Gets the name of this Event.


        :return: The name of this Event.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Event.


        :param name: The name of this Event.
        :type name: str
        """

        self._name = name

    @property
    def data_source(self):
        """Gets the data_source of this Event.


        :return: The data_source of this Event.
        :rtype: EventDataSource
        """
        return self._data_source

    @data_source.setter
    def data_source(self, data_source):
        """Sets the data_source of this Event.


        :param data_source: The data_source of this Event.
        :type data_source: EventDataSource
        """

        self._data_source = data_source

    @property
    def event_class(self):
        """Gets the event_class of this Event.


        :return: The event_class of this Event.
        :rtype: EventClass
        """
        return self._event_class

    @event_class.setter
    def event_class(self, event_class):
        """Sets the event_class of this Event.


        :param event_class: The event_class of this Event.
        :type event_class: EventClass
        """

        self._event_class = event_class

    @property
    def resources(self):
        """Gets the resources of this Event.


        :return: The resources of this Event.
        :rtype: List
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this Event.


        :param resources: The resources of this Event.
        :type resources: List
        """

        self._resources = resources
