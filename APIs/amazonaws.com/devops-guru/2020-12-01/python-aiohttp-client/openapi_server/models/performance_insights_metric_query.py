# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.performance_insights_metric_query_group_by import PerformanceInsightsMetricQueryGroupBy
from openapi_server import util


class PerformanceInsightsMetricQuery(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, metric: str=None, group_by: PerformanceInsightsMetricQueryGroupBy=None, filter: Dict=None):
        """PerformanceInsightsMetricQuery - a model defined in OpenAPI

        :param metric: The metric of this PerformanceInsightsMetricQuery.
        :param group_by: The group_by of this PerformanceInsightsMetricQuery.
        :param filter: The filter of this PerformanceInsightsMetricQuery.
        """
        self.openapi_types = {
            'metric': str,
            'group_by': PerformanceInsightsMetricQueryGroupBy,
            'filter': Dict
        }

        self.attribute_map = {
            'metric': 'Metric',
            'group_by': 'GroupBy',
            'filter': 'Filter'
        }

        self._metric = metric
        self._group_by = group_by
        self._filter = filter

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PerformanceInsightsMetricQuery':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PerformanceInsightsMetricQuery of this PerformanceInsightsMetricQuery.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metric(self):
        """Gets the metric of this PerformanceInsightsMetricQuery.


        :return: The metric of this PerformanceInsightsMetricQuery.
        :rtype: str
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this PerformanceInsightsMetricQuery.


        :param metric: The metric of this PerformanceInsightsMetricQuery.
        :type metric: str
        """

        self._metric = metric

    @property
    def group_by(self):
        """Gets the group_by of this PerformanceInsightsMetricQuery.


        :return: The group_by of this PerformanceInsightsMetricQuery.
        :rtype: PerformanceInsightsMetricQueryGroupBy
        """
        return self._group_by

    @group_by.setter
    def group_by(self, group_by):
        """Sets the group_by of this PerformanceInsightsMetricQuery.


        :param group_by: The group_by of this PerformanceInsightsMetricQuery.
        :type group_by: PerformanceInsightsMetricQueryGroupBy
        """

        self._group_by = group_by

    @property
    def filter(self):
        """Gets the filter of this PerformanceInsightsMetricQuery.


        :return: The filter of this PerformanceInsightsMetricQuery.
        :rtype: Dict
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this PerformanceInsightsMetricQuery.


        :param filter: The filter of this PerformanceInsightsMetricQuery.
        :type filter: Dict
        """

        self._filter = filter
