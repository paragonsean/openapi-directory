# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DescribeOrganizationHealthResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, open_reactive_insights: int=None, open_proactive_insights: int=None, metrics_analyzed: int=None, resource_hours: int=None):
        """DescribeOrganizationHealthResponse - a model defined in OpenAPI

        :param open_reactive_insights: The open_reactive_insights of this DescribeOrganizationHealthResponse.
        :param open_proactive_insights: The open_proactive_insights of this DescribeOrganizationHealthResponse.
        :param metrics_analyzed: The metrics_analyzed of this DescribeOrganizationHealthResponse.
        :param resource_hours: The resource_hours of this DescribeOrganizationHealthResponse.
        """
        self.openapi_types = {
            'open_reactive_insights': int,
            'open_proactive_insights': int,
            'metrics_analyzed': int,
            'resource_hours': int
        }

        self.attribute_map = {
            'open_reactive_insights': 'OpenReactiveInsights',
            'open_proactive_insights': 'OpenProactiveInsights',
            'metrics_analyzed': 'MetricsAnalyzed',
            'resource_hours': 'ResourceHours'
        }

        self._open_reactive_insights = open_reactive_insights
        self._open_proactive_insights = open_proactive_insights
        self._metrics_analyzed = metrics_analyzed
        self._resource_hours = resource_hours

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeOrganizationHealthResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeOrganizationHealthResponse of this DescribeOrganizationHealthResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def open_reactive_insights(self):
        """Gets the open_reactive_insights of this DescribeOrganizationHealthResponse.


        :return: The open_reactive_insights of this DescribeOrganizationHealthResponse.
        :rtype: int
        """
        return self._open_reactive_insights

    @open_reactive_insights.setter
    def open_reactive_insights(self, open_reactive_insights):
        """Sets the open_reactive_insights of this DescribeOrganizationHealthResponse.


        :param open_reactive_insights: The open_reactive_insights of this DescribeOrganizationHealthResponse.
        :type open_reactive_insights: int
        """
        if open_reactive_insights is None:
            raise ValueError("Invalid value for `open_reactive_insights`, must not be `None`")

        self._open_reactive_insights = open_reactive_insights

    @property
    def open_proactive_insights(self):
        """Gets the open_proactive_insights of this DescribeOrganizationHealthResponse.


        :return: The open_proactive_insights of this DescribeOrganizationHealthResponse.
        :rtype: int
        """
        return self._open_proactive_insights

    @open_proactive_insights.setter
    def open_proactive_insights(self, open_proactive_insights):
        """Sets the open_proactive_insights of this DescribeOrganizationHealthResponse.


        :param open_proactive_insights: The open_proactive_insights of this DescribeOrganizationHealthResponse.
        :type open_proactive_insights: int
        """
        if open_proactive_insights is None:
            raise ValueError("Invalid value for `open_proactive_insights`, must not be `None`")

        self._open_proactive_insights = open_proactive_insights

    @property
    def metrics_analyzed(self):
        """Gets the metrics_analyzed of this DescribeOrganizationHealthResponse.


        :return: The metrics_analyzed of this DescribeOrganizationHealthResponse.
        :rtype: int
        """
        return self._metrics_analyzed

    @metrics_analyzed.setter
    def metrics_analyzed(self, metrics_analyzed):
        """Sets the metrics_analyzed of this DescribeOrganizationHealthResponse.


        :param metrics_analyzed: The metrics_analyzed of this DescribeOrganizationHealthResponse.
        :type metrics_analyzed: int
        """
        if metrics_analyzed is None:
            raise ValueError("Invalid value for `metrics_analyzed`, must not be `None`")

        self._metrics_analyzed = metrics_analyzed

    @property
    def resource_hours(self):
        """Gets the resource_hours of this DescribeOrganizationHealthResponse.


        :return: The resource_hours of this DescribeOrganizationHealthResponse.
        :rtype: int
        """
        return self._resource_hours

    @resource_hours.setter
    def resource_hours(self, resource_hours):
        """Sets the resource_hours of this DescribeOrganizationHealthResponse.


        :param resource_hours: The resource_hours of this DescribeOrganizationHealthResponse.
        :type resource_hours: int
        """
        if resource_hours is None:
            raise ValueError("Invalid value for `resource_hours`, must not be `None`")

        self._resource_hours = resource_hours
