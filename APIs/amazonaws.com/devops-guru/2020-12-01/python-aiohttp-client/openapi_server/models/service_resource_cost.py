# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cost_estimation_service_resource_state import CostEstimationServiceResourceState
from openapi_server import util


class ServiceResourceCost(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: str=None, state: CostEstimationServiceResourceState=None, count: int=None, unit_cost: float=None, cost: float=None):
        """ServiceResourceCost - a model defined in OpenAPI

        :param type: The type of this ServiceResourceCost.
        :param state: The state of this ServiceResourceCost.
        :param count: The count of this ServiceResourceCost.
        :param unit_cost: The unit_cost of this ServiceResourceCost.
        :param cost: The cost of this ServiceResourceCost.
        """
        self.openapi_types = {
            'type': str,
            'state': CostEstimationServiceResourceState,
            'count': int,
            'unit_cost': float,
            'cost': float
        }

        self.attribute_map = {
            'type': 'Type',
            'state': 'State',
            'count': 'Count',
            'unit_cost': 'UnitCost',
            'cost': 'Cost'
        }

        self._type = type
        self._state = state
        self._count = count
        self._unit_cost = unit_cost
        self._cost = cost

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceResourceCost':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceResourceCost of this ServiceResourceCost.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this ServiceResourceCost.


        :return: The type of this ServiceResourceCost.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ServiceResourceCost.


        :param type: The type of this ServiceResourceCost.
        :type type: str
        """

        self._type = type

    @property
    def state(self):
        """Gets the state of this ServiceResourceCost.


        :return: The state of this ServiceResourceCost.
        :rtype: CostEstimationServiceResourceState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ServiceResourceCost.


        :param state: The state of this ServiceResourceCost.
        :type state: CostEstimationServiceResourceState
        """

        self._state = state

    @property
    def count(self):
        """Gets the count of this ServiceResourceCost.


        :return: The count of this ServiceResourceCost.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this ServiceResourceCost.


        :param count: The count of this ServiceResourceCost.
        :type count: int
        """

        self._count = count

    @property
    def unit_cost(self):
        """Gets the unit_cost of this ServiceResourceCost.


        :return: The unit_cost of this ServiceResourceCost.
        :rtype: float
        """
        return self._unit_cost

    @unit_cost.setter
    def unit_cost(self, unit_cost):
        """Sets the unit_cost of this ServiceResourceCost.


        :param unit_cost: The unit_cost of this ServiceResourceCost.
        :type unit_cost: float
        """

        self._unit_cost = unit_cost

    @property
    def cost(self):
        """Gets the cost of this ServiceResourceCost.


        :return: The cost of this ServiceResourceCost.
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this ServiceResourceCost.


        :param cost: The cost of this ServiceResourceCost.
        :type cost: float
        """

        self._cost = cost
