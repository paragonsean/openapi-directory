# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Recommendation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, link: str=None, name: str=None, reason: str=None, related_events: List=None, related_anomalies: List=None, category: str=None):
        """Recommendation - a model defined in OpenAPI

        :param description: The description of this Recommendation.
        :param link: The link of this Recommendation.
        :param name: The name of this Recommendation.
        :param reason: The reason of this Recommendation.
        :param related_events: The related_events of this Recommendation.
        :param related_anomalies: The related_anomalies of this Recommendation.
        :param category: The category of this Recommendation.
        """
        self.openapi_types = {
            'description': str,
            'link': str,
            'name': str,
            'reason': str,
            'related_events': List,
            'related_anomalies': List,
            'category': str
        }

        self.attribute_map = {
            'description': 'Description',
            'link': 'Link',
            'name': 'Name',
            'reason': 'Reason',
            'related_events': 'RelatedEvents',
            'related_anomalies': 'RelatedAnomalies',
            'category': 'Category'
        }

        self._description = description
        self._link = link
        self._name = name
        self._reason = reason
        self._related_events = related_events
        self._related_anomalies = related_anomalies
        self._category = category

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Recommendation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Recommendation of this Recommendation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this Recommendation.


        :return: The description of this Recommendation.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Recommendation.


        :param description: The description of this Recommendation.
        :type description: str
        """

        self._description = description

    @property
    def link(self):
        """Gets the link of this Recommendation.


        :return: The link of this Recommendation.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this Recommendation.


        :param link: The link of this Recommendation.
        :type link: str
        """

        self._link = link

    @property
    def name(self):
        """Gets the name of this Recommendation.


        :return: The name of this Recommendation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Recommendation.


        :param name: The name of this Recommendation.
        :type name: str
        """

        self._name = name

    @property
    def reason(self):
        """Gets the reason of this Recommendation.


        :return: The reason of this Recommendation.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this Recommendation.


        :param reason: The reason of this Recommendation.
        :type reason: str
        """

        self._reason = reason

    @property
    def related_events(self):
        """Gets the related_events of this Recommendation.


        :return: The related_events of this Recommendation.
        :rtype: List
        """
        return self._related_events

    @related_events.setter
    def related_events(self, related_events):
        """Sets the related_events of this Recommendation.


        :param related_events: The related_events of this Recommendation.
        :type related_events: List
        """

        self._related_events = related_events

    @property
    def related_anomalies(self):
        """Gets the related_anomalies of this Recommendation.


        :return: The related_anomalies of this Recommendation.
        :rtype: List
        """
        return self._related_anomalies

    @related_anomalies.setter
    def related_anomalies(self, related_anomalies):
        """Sets the related_anomalies of this Recommendation.


        :param related_anomalies: The related_anomalies of this Recommendation.
        :type related_anomalies: List
        """

        self._related_anomalies = related_anomalies

    @property
    def category(self):
        """Gets the category of this Recommendation.


        :return: The category of this Recommendation.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Recommendation.


        :param category: The category of this Recommendation.
        :type category: str
        """

        self._category = category
