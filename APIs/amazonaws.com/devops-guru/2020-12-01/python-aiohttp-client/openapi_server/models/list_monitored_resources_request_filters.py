# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.resource_permission import ResourcePermission
from openapi_server import util


class ListMonitoredResourcesRequestFilters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resource_permission: ResourcePermission=None, resource_type_filters: List=None):
        """ListMonitoredResourcesRequestFilters - a model defined in OpenAPI

        :param resource_permission: The resource_permission of this ListMonitoredResourcesRequestFilters.
        :param resource_type_filters: The resource_type_filters of this ListMonitoredResourcesRequestFilters.
        """
        self.openapi_types = {
            'resource_permission': ResourcePermission,
            'resource_type_filters': List
        }

        self.attribute_map = {
            'resource_permission': 'ResourcePermission',
            'resource_type_filters': 'ResourceTypeFilters'
        }

        self._resource_permission = resource_permission
        self._resource_type_filters = resource_type_filters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListMonitoredResourcesRequestFilters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListMonitoredResourcesRequest_Filters of this ListMonitoredResourcesRequestFilters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resource_permission(self):
        """Gets the resource_permission of this ListMonitoredResourcesRequestFilters.


        :return: The resource_permission of this ListMonitoredResourcesRequestFilters.
        :rtype: ResourcePermission
        """
        return self._resource_permission

    @resource_permission.setter
    def resource_permission(self, resource_permission):
        """Sets the resource_permission of this ListMonitoredResourcesRequestFilters.


        :param resource_permission: The resource_permission of this ListMonitoredResourcesRequestFilters.
        :type resource_permission: ResourcePermission
        """
        if resource_permission is None:
            raise ValueError("Invalid value for `resource_permission`, must not be `None`")

        self._resource_permission = resource_permission

    @property
    def resource_type_filters(self):
        """Gets the resource_type_filters of this ListMonitoredResourcesRequestFilters.


        :return: The resource_type_filters of this ListMonitoredResourcesRequestFilters.
        :rtype: List
        """
        return self._resource_type_filters

    @resource_type_filters.setter
    def resource_type_filters(self, resource_type_filters):
        """Sets the resource_type_filters of this ListMonitoredResourcesRequestFilters.


        :param resource_type_filters: The resource_type_filters of this ListMonitoredResourcesRequestFilters.
        :type resource_type_filters: List
        """
        if resource_type_filters is None:
            raise ValueError("Invalid value for `resource_type_filters`, must not be `None`")

        self._resource_type_filters = resource_type_filters
