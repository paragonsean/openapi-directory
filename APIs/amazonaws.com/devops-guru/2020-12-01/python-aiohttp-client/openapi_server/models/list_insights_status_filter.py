# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.list_insights_request_status_filter_any import ListInsightsRequestStatusFilterAny
from openapi_server.models.list_insights_request_status_filter_closed import ListInsightsRequestStatusFilterClosed
from openapi_server.models.list_insights_request_status_filter_ongoing import ListInsightsRequestStatusFilterOngoing
from openapi_server import util


class ListInsightsStatusFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ongoing: ListInsightsRequestStatusFilterOngoing=None, closed: ListInsightsRequestStatusFilterClosed=None, any: ListInsightsRequestStatusFilterAny=None):
        """ListInsightsStatusFilter - a model defined in OpenAPI

        :param ongoing: The ongoing of this ListInsightsStatusFilter.
        :param closed: The closed of this ListInsightsStatusFilter.
        :param any: The any of this ListInsightsStatusFilter.
        """
        self.openapi_types = {
            'ongoing': ListInsightsRequestStatusFilterOngoing,
            'closed': ListInsightsRequestStatusFilterClosed,
            'any': ListInsightsRequestStatusFilterAny
        }

        self.attribute_map = {
            'ongoing': 'Ongoing',
            'closed': 'Closed',
            'any': 'Any'
        }

        self._ongoing = ongoing
        self._closed = closed
        self._any = any

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListInsightsStatusFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListInsightsStatusFilter of this ListInsightsStatusFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ongoing(self):
        """Gets the ongoing of this ListInsightsStatusFilter.


        :return: The ongoing of this ListInsightsStatusFilter.
        :rtype: ListInsightsRequestStatusFilterOngoing
        """
        return self._ongoing

    @ongoing.setter
    def ongoing(self, ongoing):
        """Sets the ongoing of this ListInsightsStatusFilter.


        :param ongoing: The ongoing of this ListInsightsStatusFilter.
        :type ongoing: ListInsightsRequestStatusFilterOngoing
        """

        self._ongoing = ongoing

    @property
    def closed(self):
        """Gets the closed of this ListInsightsStatusFilter.


        :return: The closed of this ListInsightsStatusFilter.
        :rtype: ListInsightsRequestStatusFilterClosed
        """
        return self._closed

    @closed.setter
    def closed(self, closed):
        """Sets the closed of this ListInsightsStatusFilter.


        :param closed: The closed of this ListInsightsStatusFilter.
        :type closed: ListInsightsRequestStatusFilterClosed
        """

        self._closed = closed

    @property
    def any(self):
        """Gets the any of this ListInsightsStatusFilter.


        :return: The any of this ListInsightsStatusFilter.
        :rtype: ListInsightsRequestStatusFilterAny
        """
        return self._any

    @any.setter
    def any(self, any):
        """Sets the any of this ListInsightsStatusFilter.


        :param any: The any of this ListInsightsStatusFilter.
        :type any: ListInsightsRequestStatusFilterAny
        """

        self._any = any
