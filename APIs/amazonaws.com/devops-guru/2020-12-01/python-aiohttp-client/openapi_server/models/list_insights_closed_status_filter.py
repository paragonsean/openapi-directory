# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.insight_type import InsightType
from openapi_server.models.list_insights_closed_status_filter_end_time_range import ListInsightsClosedStatusFilterEndTimeRange
from openapi_server import util


class ListInsightsClosedStatusFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: InsightType=None, end_time_range: ListInsightsClosedStatusFilterEndTimeRange=None):
        """ListInsightsClosedStatusFilter - a model defined in OpenAPI

        :param type: The type of this ListInsightsClosedStatusFilter.
        :param end_time_range: The end_time_range of this ListInsightsClosedStatusFilter.
        """
        self.openapi_types = {
            'type': InsightType,
            'end_time_range': ListInsightsClosedStatusFilterEndTimeRange
        }

        self.attribute_map = {
            'type': 'Type',
            'end_time_range': 'EndTimeRange'
        }

        self._type = type
        self._end_time_range = end_time_range

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListInsightsClosedStatusFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListInsightsClosedStatusFilter of this ListInsightsClosedStatusFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this ListInsightsClosedStatusFilter.


        :return: The type of this ListInsightsClosedStatusFilter.
        :rtype: InsightType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ListInsightsClosedStatusFilter.


        :param type: The type of this ListInsightsClosedStatusFilter.
        :type type: InsightType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def end_time_range(self):
        """Gets the end_time_range of this ListInsightsClosedStatusFilter.


        :return: The end_time_range of this ListInsightsClosedStatusFilter.
        :rtype: ListInsightsClosedStatusFilterEndTimeRange
        """
        return self._end_time_range

    @end_time_range.setter
    def end_time_range(self, end_time_range):
        """Sets the end_time_range of this ListInsightsClosedStatusFilter.


        :param end_time_range: The end_time_range of this ListInsightsClosedStatusFilter.
        :type end_time_range: ListInsightsClosedStatusFilterEndTimeRange
        """
        if end_time_range is None:
            raise ValueError("Invalid value for `end_time_range`, must not be `None`")

        self._end_time_range = end_time_range
