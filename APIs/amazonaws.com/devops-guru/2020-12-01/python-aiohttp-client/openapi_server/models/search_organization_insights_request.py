# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.list_anomalies_for_insight_request_start_time_range import ListAnomaliesForInsightRequestStartTimeRange
from openapi_server.models.search_organization_insights_request_filters import SearchOrganizationInsightsRequestFilters
import re
from openapi_server import util


class SearchOrganizationInsightsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_ids: List[str]=None, start_time_range: ListAnomaliesForInsightRequestStartTimeRange=None, filters: SearchOrganizationInsightsRequestFilters=None, max_results: int=None, next_token: str=None, type: str=None):
        """SearchOrganizationInsightsRequest - a model defined in OpenAPI

        :param account_ids: The account_ids of this SearchOrganizationInsightsRequest.
        :param start_time_range: The start_time_range of this SearchOrganizationInsightsRequest.
        :param filters: The filters of this SearchOrganizationInsightsRequest.
        :param max_results: The max_results of this SearchOrganizationInsightsRequest.
        :param next_token: The next_token of this SearchOrganizationInsightsRequest.
        :param type: The type of this SearchOrganizationInsightsRequest.
        """
        self.openapi_types = {
            'account_ids': List[str],
            'start_time_range': ListAnomaliesForInsightRequestStartTimeRange,
            'filters': SearchOrganizationInsightsRequestFilters,
            'max_results': int,
            'next_token': str,
            'type': str
        }

        self.attribute_map = {
            'account_ids': 'AccountIds',
            'start_time_range': 'StartTimeRange',
            'filters': 'Filters',
            'max_results': 'MaxResults',
            'next_token': 'NextToken',
            'type': 'Type'
        }

        self._account_ids = account_ids
        self._start_time_range = start_time_range
        self._filters = filters
        self._max_results = max_results
        self._next_token = next_token
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchOrganizationInsightsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchOrganizationInsights_request of this SearchOrganizationInsightsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_ids(self):
        """Gets the account_ids of this SearchOrganizationInsightsRequest.

        The ID of the Amazon Web Services account. 

        :return: The account_ids of this SearchOrganizationInsightsRequest.
        :rtype: List[str]
        """
        return self._account_ids

    @account_ids.setter
    def account_ids(self, account_ids):
        """Sets the account_ids of this SearchOrganizationInsightsRequest.

        The ID of the Amazon Web Services account. 

        :param account_ids: The account_ids of this SearchOrganizationInsightsRequest.
        :type account_ids: List[str]
        """
        if account_ids is None:
            raise ValueError("Invalid value for `account_ids`, must not be `None`")
        if account_ids is not None and len(account_ids) > 1:
            raise ValueError("Invalid value for `account_ids`, number of items must be less than or equal to `1`")
        if account_ids is not None and len(account_ids) < 1:
            raise ValueError("Invalid value for `account_ids`, number of items must be greater than or equal to `1`")

        self._account_ids = account_ids

    @property
    def start_time_range(self):
        """Gets the start_time_range of this SearchOrganizationInsightsRequest.


        :return: The start_time_range of this SearchOrganizationInsightsRequest.
        :rtype: ListAnomaliesForInsightRequestStartTimeRange
        """
        return self._start_time_range

    @start_time_range.setter
    def start_time_range(self, start_time_range):
        """Sets the start_time_range of this SearchOrganizationInsightsRequest.


        :param start_time_range: The start_time_range of this SearchOrganizationInsightsRequest.
        :type start_time_range: ListAnomaliesForInsightRequestStartTimeRange
        """
        if start_time_range is None:
            raise ValueError("Invalid value for `start_time_range`, must not be `None`")

        self._start_time_range = start_time_range

    @property
    def filters(self):
        """Gets the filters of this SearchOrganizationInsightsRequest.


        :return: The filters of this SearchOrganizationInsightsRequest.
        :rtype: SearchOrganizationInsightsRequestFilters
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this SearchOrganizationInsightsRequest.


        :param filters: The filters of this SearchOrganizationInsightsRequest.
        :type filters: SearchOrganizationInsightsRequestFilters
        """

        self._filters = filters

    @property
    def max_results(self):
        """Gets the max_results of this SearchOrganizationInsightsRequest.

        The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.

        :return: The max_results of this SearchOrganizationInsightsRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this SearchOrganizationInsightsRequest.

        The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.

        :param max_results: The max_results of this SearchOrganizationInsightsRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 100:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `100`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this SearchOrganizationInsightsRequest.

        The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.

        :return: The next_token of this SearchOrganizationInsightsRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this SearchOrganizationInsightsRequest.

        The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.

        :param next_token: The next_token of this SearchOrganizationInsightsRequest.
        :type next_token: str
        """
        if next_token is not None and len(next_token) > 36:
            raise ValueError("Invalid value for `next_token`, length must be less than or equal to `36`")
        if next_token is not None and len(next_token) < 36:
            raise ValueError("Invalid value for `next_token`, length must be greater than or equal to `36`")
        if next_token is not None and not re.search(r'^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$', next_token):
            raise ValueError("Invalid value for `next_token`, must be a follow pattern or equal to `/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/`")

        self._next_token = next_token

    @property
    def type(self):
        """Gets the type of this SearchOrganizationInsightsRequest.

         The type of insights you are searching for (<code>REACTIVE</code> or <code>PROACTIVE</code>). 

        :return: The type of this SearchOrganizationInsightsRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SearchOrganizationInsightsRequest.

         The type of insights you are searching for (<code>REACTIVE</code> or <code>PROACTIVE</code>). 

        :param type: The type of this SearchOrganizationInsightsRequest.
        :type type: str
        """
        allowed_values = ["REACTIVE", "PROACTIVE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
