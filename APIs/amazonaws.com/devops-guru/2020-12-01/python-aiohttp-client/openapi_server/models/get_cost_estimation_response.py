# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cost_estimation_status import CostEstimationStatus
from openapi_server.models.get_cost_estimation_response_resource_collection import GetCostEstimationResponseResourceCollection
from openapi_server.models.get_cost_estimation_response_time_range import GetCostEstimationResponseTimeRange
from openapi_server import util


class GetCostEstimationResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resource_collection: GetCostEstimationResponseResourceCollection=None, status: CostEstimationStatus=None, costs: List=None, time_range: GetCostEstimationResponseTimeRange=None, total_cost: float=None, next_token: str=None):
        """GetCostEstimationResponse - a model defined in OpenAPI

        :param resource_collection: The resource_collection of this GetCostEstimationResponse.
        :param status: The status of this GetCostEstimationResponse.
        :param costs: The costs of this GetCostEstimationResponse.
        :param time_range: The time_range of this GetCostEstimationResponse.
        :param total_cost: The total_cost of this GetCostEstimationResponse.
        :param next_token: The next_token of this GetCostEstimationResponse.
        """
        self.openapi_types = {
            'resource_collection': GetCostEstimationResponseResourceCollection,
            'status': CostEstimationStatus,
            'costs': List,
            'time_range': GetCostEstimationResponseTimeRange,
            'total_cost': float,
            'next_token': str
        }

        self.attribute_map = {
            'resource_collection': 'ResourceCollection',
            'status': 'Status',
            'costs': 'Costs',
            'time_range': 'TimeRange',
            'total_cost': 'TotalCost',
            'next_token': 'NextToken'
        }

        self._resource_collection = resource_collection
        self._status = status
        self._costs = costs
        self._time_range = time_range
        self._total_cost = total_cost
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCostEstimationResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetCostEstimationResponse of this GetCostEstimationResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resource_collection(self):
        """Gets the resource_collection of this GetCostEstimationResponse.


        :return: The resource_collection of this GetCostEstimationResponse.
        :rtype: GetCostEstimationResponseResourceCollection
        """
        return self._resource_collection

    @resource_collection.setter
    def resource_collection(self, resource_collection):
        """Sets the resource_collection of this GetCostEstimationResponse.


        :param resource_collection: The resource_collection of this GetCostEstimationResponse.
        :type resource_collection: GetCostEstimationResponseResourceCollection
        """

        self._resource_collection = resource_collection

    @property
    def status(self):
        """Gets the status of this GetCostEstimationResponse.


        :return: The status of this GetCostEstimationResponse.
        :rtype: CostEstimationStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GetCostEstimationResponse.


        :param status: The status of this GetCostEstimationResponse.
        :type status: CostEstimationStatus
        """

        self._status = status

    @property
    def costs(self):
        """Gets the costs of this GetCostEstimationResponse.


        :return: The costs of this GetCostEstimationResponse.
        :rtype: List
        """
        return self._costs

    @costs.setter
    def costs(self, costs):
        """Sets the costs of this GetCostEstimationResponse.


        :param costs: The costs of this GetCostEstimationResponse.
        :type costs: List
        """

        self._costs = costs

    @property
    def time_range(self):
        """Gets the time_range of this GetCostEstimationResponse.


        :return: The time_range of this GetCostEstimationResponse.
        :rtype: GetCostEstimationResponseTimeRange
        """
        return self._time_range

    @time_range.setter
    def time_range(self, time_range):
        """Sets the time_range of this GetCostEstimationResponse.


        :param time_range: The time_range of this GetCostEstimationResponse.
        :type time_range: GetCostEstimationResponseTimeRange
        """

        self._time_range = time_range

    @property
    def total_cost(self):
        """Gets the total_cost of this GetCostEstimationResponse.


        :return: The total_cost of this GetCostEstimationResponse.
        :rtype: float
        """
        return self._total_cost

    @total_cost.setter
    def total_cost(self, total_cost):
        """Sets the total_cost of this GetCostEstimationResponse.


        :param total_cost: The total_cost of this GetCostEstimationResponse.
        :type total_cost: float
        """

        self._total_cost = total_cost

    @property
    def next_token(self):
        """Gets the next_token of this GetCostEstimationResponse.


        :return: The next_token of this GetCostEstimationResponse.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this GetCostEstimationResponse.


        :param next_token: The next_token of this GetCostEstimationResponse.
        :type next_token: str
        """

        self._next_token = next_token
