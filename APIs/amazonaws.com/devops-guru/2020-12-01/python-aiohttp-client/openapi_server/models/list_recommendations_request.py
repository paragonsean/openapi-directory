# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class ListRecommendationsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, insight_id: str=None, next_token: str=None, locale: str=None, account_id: str=None):
        """ListRecommendationsRequest - a model defined in OpenAPI

        :param insight_id: The insight_id of this ListRecommendationsRequest.
        :param next_token: The next_token of this ListRecommendationsRequest.
        :param locale: The locale of this ListRecommendationsRequest.
        :param account_id: The account_id of this ListRecommendationsRequest.
        """
        self.openapi_types = {
            'insight_id': str,
            'next_token': str,
            'locale': str,
            'account_id': str
        }

        self.attribute_map = {
            'insight_id': 'InsightId',
            'next_token': 'NextToken',
            'locale': 'Locale',
            'account_id': 'AccountId'
        }

        self._insight_id = insight_id
        self._next_token = next_token
        self._locale = locale
        self._account_id = account_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListRecommendationsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListRecommendations_request of this ListRecommendationsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def insight_id(self):
        """Gets the insight_id of this ListRecommendationsRequest.

         The ID of the requested insight. 

        :return: The insight_id of this ListRecommendationsRequest.
        :rtype: str
        """
        return self._insight_id

    @insight_id.setter
    def insight_id(self, insight_id):
        """Sets the insight_id of this ListRecommendationsRequest.

         The ID of the requested insight. 

        :param insight_id: The insight_id of this ListRecommendationsRequest.
        :type insight_id: str
        """
        if insight_id is None:
            raise ValueError("Invalid value for `insight_id`, must not be `None`")
        if insight_id is not None and len(insight_id) > 100:
            raise ValueError("Invalid value for `insight_id`, length must be less than or equal to `100`")
        if insight_id is not None and len(insight_id) < 1:
            raise ValueError("Invalid value for `insight_id`, length must be greater than or equal to `1`")
        if insight_id is not None and not re.search(r'^[\w-]*$', insight_id):
            raise ValueError("Invalid value for `insight_id`, must be a follow pattern or equal to `/^[\w-]*$/`")

        self._insight_id = insight_id

    @property
    def next_token(self):
        """Gets the next_token of this ListRecommendationsRequest.

        The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.

        :return: The next_token of this ListRecommendationsRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListRecommendationsRequest.

        The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.

        :param next_token: The next_token of this ListRecommendationsRequest.
        :type next_token: str
        """
        if next_token is not None and len(next_token) > 36:
            raise ValueError("Invalid value for `next_token`, length must be less than or equal to `36`")
        if next_token is not None and len(next_token) < 36:
            raise ValueError("Invalid value for `next_token`, length must be greater than or equal to `36`")
        if next_token is not None and not re.search(r'^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$', next_token):
            raise ValueError("Invalid value for `next_token`, must be a follow pattern or equal to `/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/`")

        self._next_token = next_token

    @property
    def locale(self):
        """Gets the locale of this ListRecommendationsRequest.

        A locale that specifies the language to use for recommendations.

        :return: The locale of this ListRecommendationsRequest.
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this ListRecommendationsRequest.

        A locale that specifies the language to use for recommendations.

        :param locale: The locale of this ListRecommendationsRequest.
        :type locale: str
        """
        allowed_values = ["DE_DE", "EN_US", "EN_GB", "ES_ES", "FR_FR", "IT_IT", "JA_JP", "KO_KR", "PT_BR", "ZH_CN", "ZH_TW"]  # noqa: E501
        if locale not in allowed_values:
            raise ValueError(
                "Invalid value for `locale` ({0}), must be one of {1}"
                .format(locale, allowed_values)
            )

        self._locale = locale

    @property
    def account_id(self):
        """Gets the account_id of this ListRecommendationsRequest.

        The ID of the Amazon Web Services account. 

        :return: The account_id of this ListRecommendationsRequest.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this ListRecommendationsRequest.

        The ID of the Amazon Web Services account. 

        :param account_id: The account_id of this ListRecommendationsRequest.
        :type account_id: str
        """
        if account_id is not None and len(account_id) > 12:
            raise ValueError("Invalid value for `account_id`, length must be less than or equal to `12`")
        if account_id is not None and len(account_id) < 12:
            raise ValueError("Invalid value for `account_id`, length must be greater than or equal to `12`")
        if account_id is not None and not re.search(r'^\d{12}$', account_id):
            raise ValueError("Invalid value for `account_id`, must be a follow pattern or equal to `/^\d{12}$/`")

        self._account_id = account_id
