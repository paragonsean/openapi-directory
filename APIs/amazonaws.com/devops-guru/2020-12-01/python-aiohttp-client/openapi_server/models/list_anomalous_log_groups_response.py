# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListAnomalousLogGroupsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, insight_id: str=None, anomalous_log_groups: List=None, next_token: str=None):
        """ListAnomalousLogGroupsResponse - a model defined in OpenAPI

        :param insight_id: The insight_id of this ListAnomalousLogGroupsResponse.
        :param anomalous_log_groups: The anomalous_log_groups of this ListAnomalousLogGroupsResponse.
        :param next_token: The next_token of this ListAnomalousLogGroupsResponse.
        """
        self.openapi_types = {
            'insight_id': str,
            'anomalous_log_groups': List,
            'next_token': str
        }

        self.attribute_map = {
            'insight_id': 'InsightId',
            'anomalous_log_groups': 'AnomalousLogGroups',
            'next_token': 'NextToken'
        }

        self._insight_id = insight_id
        self._anomalous_log_groups = anomalous_log_groups
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListAnomalousLogGroupsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListAnomalousLogGroupsResponse of this ListAnomalousLogGroupsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def insight_id(self):
        """Gets the insight_id of this ListAnomalousLogGroupsResponse.


        :return: The insight_id of this ListAnomalousLogGroupsResponse.
        :rtype: str
        """
        return self._insight_id

    @insight_id.setter
    def insight_id(self, insight_id):
        """Sets the insight_id of this ListAnomalousLogGroupsResponse.


        :param insight_id: The insight_id of this ListAnomalousLogGroupsResponse.
        :type insight_id: str
        """
        if insight_id is None:
            raise ValueError("Invalid value for `insight_id`, must not be `None`")

        self._insight_id = insight_id

    @property
    def anomalous_log_groups(self):
        """Gets the anomalous_log_groups of this ListAnomalousLogGroupsResponse.


        :return: The anomalous_log_groups of this ListAnomalousLogGroupsResponse.
        :rtype: List
        """
        return self._anomalous_log_groups

    @anomalous_log_groups.setter
    def anomalous_log_groups(self, anomalous_log_groups):
        """Sets the anomalous_log_groups of this ListAnomalousLogGroupsResponse.


        :param anomalous_log_groups: The anomalous_log_groups of this ListAnomalousLogGroupsResponse.
        :type anomalous_log_groups: List
        """
        if anomalous_log_groups is None:
            raise ValueError("Invalid value for `anomalous_log_groups`, must not be `None`")

        self._anomalous_log_groups = anomalous_log_groups

    @property
    def next_token(self):
        """Gets the next_token of this ListAnomalousLogGroupsResponse.


        :return: The next_token of this ListAnomalousLogGroupsResponse.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListAnomalousLogGroupsResponse.


        :param next_token: The next_token of this ListAnomalousLogGroupsResponse.
        :type next_token: str
        """

        self._next_token = next_token
