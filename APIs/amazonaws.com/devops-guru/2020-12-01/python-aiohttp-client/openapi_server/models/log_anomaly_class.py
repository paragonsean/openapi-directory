# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.log_anomaly_type import LogAnomalyType
from openapi_server import util


class LogAnomalyClass(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, log_stream_name: str=None, log_anomaly_type: LogAnomalyType=None, log_anomaly_token: str=None, log_event_id: str=None, explanation: str=None, number_of_log_lines_occurrences: int=None, log_event_timestamp: datetime=None):
        """LogAnomalyClass - a model defined in OpenAPI

        :param log_stream_name: The log_stream_name of this LogAnomalyClass.
        :param log_anomaly_type: The log_anomaly_type of this LogAnomalyClass.
        :param log_anomaly_token: The log_anomaly_token of this LogAnomalyClass.
        :param log_event_id: The log_event_id of this LogAnomalyClass.
        :param explanation: The explanation of this LogAnomalyClass.
        :param number_of_log_lines_occurrences: The number_of_log_lines_occurrences of this LogAnomalyClass.
        :param log_event_timestamp: The log_event_timestamp of this LogAnomalyClass.
        """
        self.openapi_types = {
            'log_stream_name': str,
            'log_anomaly_type': LogAnomalyType,
            'log_anomaly_token': str,
            'log_event_id': str,
            'explanation': str,
            'number_of_log_lines_occurrences': int,
            'log_event_timestamp': datetime
        }

        self.attribute_map = {
            'log_stream_name': 'LogStreamName',
            'log_anomaly_type': 'LogAnomalyType',
            'log_anomaly_token': 'LogAnomalyToken',
            'log_event_id': 'LogEventId',
            'explanation': 'Explanation',
            'number_of_log_lines_occurrences': 'NumberOfLogLinesOccurrences',
            'log_event_timestamp': 'LogEventTimestamp'
        }

        self._log_stream_name = log_stream_name
        self._log_anomaly_type = log_anomaly_type
        self._log_anomaly_token = log_anomaly_token
        self._log_event_id = log_event_id
        self._explanation = explanation
        self._number_of_log_lines_occurrences = number_of_log_lines_occurrences
        self._log_event_timestamp = log_event_timestamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LogAnomalyClass':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LogAnomalyClass of this LogAnomalyClass.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def log_stream_name(self):
        """Gets the log_stream_name of this LogAnomalyClass.


        :return: The log_stream_name of this LogAnomalyClass.
        :rtype: str
        """
        return self._log_stream_name

    @log_stream_name.setter
    def log_stream_name(self, log_stream_name):
        """Sets the log_stream_name of this LogAnomalyClass.


        :param log_stream_name: The log_stream_name of this LogAnomalyClass.
        :type log_stream_name: str
        """

        self._log_stream_name = log_stream_name

    @property
    def log_anomaly_type(self):
        """Gets the log_anomaly_type of this LogAnomalyClass.


        :return: The log_anomaly_type of this LogAnomalyClass.
        :rtype: LogAnomalyType
        """
        return self._log_anomaly_type

    @log_anomaly_type.setter
    def log_anomaly_type(self, log_anomaly_type):
        """Sets the log_anomaly_type of this LogAnomalyClass.


        :param log_anomaly_type: The log_anomaly_type of this LogAnomalyClass.
        :type log_anomaly_type: LogAnomalyType
        """

        self._log_anomaly_type = log_anomaly_type

    @property
    def log_anomaly_token(self):
        """Gets the log_anomaly_token of this LogAnomalyClass.


        :return: The log_anomaly_token of this LogAnomalyClass.
        :rtype: str
        """
        return self._log_anomaly_token

    @log_anomaly_token.setter
    def log_anomaly_token(self, log_anomaly_token):
        """Sets the log_anomaly_token of this LogAnomalyClass.


        :param log_anomaly_token: The log_anomaly_token of this LogAnomalyClass.
        :type log_anomaly_token: str
        """

        self._log_anomaly_token = log_anomaly_token

    @property
    def log_event_id(self):
        """Gets the log_event_id of this LogAnomalyClass.


        :return: The log_event_id of this LogAnomalyClass.
        :rtype: str
        """
        return self._log_event_id

    @log_event_id.setter
    def log_event_id(self, log_event_id):
        """Sets the log_event_id of this LogAnomalyClass.


        :param log_event_id: The log_event_id of this LogAnomalyClass.
        :type log_event_id: str
        """

        self._log_event_id = log_event_id

    @property
    def explanation(self):
        """Gets the explanation of this LogAnomalyClass.


        :return: The explanation of this LogAnomalyClass.
        :rtype: str
        """
        return self._explanation

    @explanation.setter
    def explanation(self, explanation):
        """Sets the explanation of this LogAnomalyClass.


        :param explanation: The explanation of this LogAnomalyClass.
        :type explanation: str
        """

        self._explanation = explanation

    @property
    def number_of_log_lines_occurrences(self):
        """Gets the number_of_log_lines_occurrences of this LogAnomalyClass.


        :return: The number_of_log_lines_occurrences of this LogAnomalyClass.
        :rtype: int
        """
        return self._number_of_log_lines_occurrences

    @number_of_log_lines_occurrences.setter
    def number_of_log_lines_occurrences(self, number_of_log_lines_occurrences):
        """Sets the number_of_log_lines_occurrences of this LogAnomalyClass.


        :param number_of_log_lines_occurrences: The number_of_log_lines_occurrences of this LogAnomalyClass.
        :type number_of_log_lines_occurrences: int
        """

        self._number_of_log_lines_occurrences = number_of_log_lines_occurrences

    @property
    def log_event_timestamp(self):
        """Gets the log_event_timestamp of this LogAnomalyClass.


        :return: The log_event_timestamp of this LogAnomalyClass.
        :rtype: datetime
        """
        return self._log_event_timestamp

    @log_event_timestamp.setter
    def log_event_timestamp(self, log_event_timestamp):
        """Sets the log_event_timestamp of this LogAnomalyClass.


        :param log_event_timestamp: The log_event_timestamp of this LogAnomalyClass.
        :type log_event_timestamp: datetime
        """

        self._log_event_timestamp = log_event_timestamp
