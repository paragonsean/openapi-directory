# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_resource_collection_request_resource_collection import UpdateResourceCollectionRequestResourceCollection
from openapi_server import util


class UpdateResourceCollectionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, resource_collection: UpdateResourceCollectionRequestResourceCollection=None):
        """UpdateResourceCollectionRequest - a model defined in OpenAPI

        :param action: The action of this UpdateResourceCollectionRequest.
        :param resource_collection: The resource_collection of this UpdateResourceCollectionRequest.
        """
        self.openapi_types = {
            'action': str,
            'resource_collection': UpdateResourceCollectionRequestResourceCollection
        }

        self.attribute_map = {
            'action': 'Action',
            'resource_collection': 'ResourceCollection'
        }

        self._action = action
        self._resource_collection = resource_collection

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateResourceCollectionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateResourceCollection_request of this UpdateResourceCollectionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this UpdateResourceCollectionRequest.

         Specifies if the resource collection in the request is added or deleted to the resource collection. 

        :return: The action of this UpdateResourceCollectionRequest.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this UpdateResourceCollectionRequest.

         Specifies if the resource collection in the request is added or deleted to the resource collection. 

        :param action: The action of this UpdateResourceCollectionRequest.
        :type action: str
        """
        allowed_values = ["ADD", "REMOVE"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def resource_collection(self):
        """Gets the resource_collection of this UpdateResourceCollectionRequest.


        :return: The resource_collection of this UpdateResourceCollectionRequest.
        :rtype: UpdateResourceCollectionRequestResourceCollection
        """
        return self._resource_collection

    @resource_collection.setter
    def resource_collection(self, resource_collection):
        """Sets the resource_collection of this UpdateResourceCollectionRequest.


        :param resource_collection: The resource_collection of this UpdateResourceCollectionRequest.
        :type resource_collection: UpdateResourceCollectionRequestResourceCollection
        """
        if resource_collection is None:
            raise ValueError("Invalid value for `resource_collection`, must not be `None`")

        self._resource_collection = resource_collection
