# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.resource_collection import ResourceCollection
from openapi_server.models.search_insights_request_filters_service_collection import SearchInsightsRequestFiltersServiceCollection
from openapi_server import util


class SearchInsightsFilters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, severities: List=None, statuses: List=None, resource_collection: ResourceCollection=None, service_collection: SearchInsightsRequestFiltersServiceCollection=None):
        """SearchInsightsFilters - a model defined in OpenAPI

        :param severities: The severities of this SearchInsightsFilters.
        :param statuses: The statuses of this SearchInsightsFilters.
        :param resource_collection: The resource_collection of this SearchInsightsFilters.
        :param service_collection: The service_collection of this SearchInsightsFilters.
        """
        self.openapi_types = {
            'severities': List,
            'statuses': List,
            'resource_collection': ResourceCollection,
            'service_collection': SearchInsightsRequestFiltersServiceCollection
        }

        self.attribute_map = {
            'severities': 'Severities',
            'statuses': 'Statuses',
            'resource_collection': 'ResourceCollection',
            'service_collection': 'ServiceCollection'
        }

        self._severities = severities
        self._statuses = statuses
        self._resource_collection = resource_collection
        self._service_collection = service_collection

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchInsightsFilters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchInsightsFilters of this SearchInsightsFilters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def severities(self):
        """Gets the severities of this SearchInsightsFilters.


        :return: The severities of this SearchInsightsFilters.
        :rtype: List
        """
        return self._severities

    @severities.setter
    def severities(self, severities):
        """Sets the severities of this SearchInsightsFilters.


        :param severities: The severities of this SearchInsightsFilters.
        :type severities: List
        """

        self._severities = severities

    @property
    def statuses(self):
        """Gets the statuses of this SearchInsightsFilters.


        :return: The statuses of this SearchInsightsFilters.
        :rtype: List
        """
        return self._statuses

    @statuses.setter
    def statuses(self, statuses):
        """Sets the statuses of this SearchInsightsFilters.


        :param statuses: The statuses of this SearchInsightsFilters.
        :type statuses: List
        """

        self._statuses = statuses

    @property
    def resource_collection(self):
        """Gets the resource_collection of this SearchInsightsFilters.


        :return: The resource_collection of this SearchInsightsFilters.
        :rtype: ResourceCollection
        """
        return self._resource_collection

    @resource_collection.setter
    def resource_collection(self, resource_collection):
        """Sets the resource_collection of this SearchInsightsFilters.


        :param resource_collection: The resource_collection of this SearchInsightsFilters.
        :type resource_collection: ResourceCollection
        """

        self._resource_collection = resource_collection

    @property
    def service_collection(self):
        """Gets the service_collection of this SearchInsightsFilters.


        :return: The service_collection of this SearchInsightsFilters.
        :rtype: SearchInsightsRequestFiltersServiceCollection
        """
        return self._service_collection

    @service_collection.setter
    def service_collection(self, service_collection):
        """Sets the service_collection of this SearchInsightsFilters.


        :param service_collection: The service_collection of this SearchInsightsFilters.
        :type service_collection: SearchInsightsRequestFiltersServiceCollection
        """

        self._service_collection = service_collection
