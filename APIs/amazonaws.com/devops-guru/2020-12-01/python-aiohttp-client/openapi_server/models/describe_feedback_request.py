# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class DescribeFeedbackRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, insight_id: str=None):
        """DescribeFeedbackRequest - a model defined in OpenAPI

        :param insight_id: The insight_id of this DescribeFeedbackRequest.
        """
        self.openapi_types = {
            'insight_id': str
        }

        self.attribute_map = {
            'insight_id': 'InsightId'
        }

        self._insight_id = insight_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeFeedbackRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeFeedback_request of this DescribeFeedbackRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def insight_id(self):
        """Gets the insight_id of this DescribeFeedbackRequest.

         The ID of the insight for which the feedback was provided. 

        :return: The insight_id of this DescribeFeedbackRequest.
        :rtype: str
        """
        return self._insight_id

    @insight_id.setter
    def insight_id(self, insight_id):
        """Sets the insight_id of this DescribeFeedbackRequest.

         The ID of the insight for which the feedback was provided. 

        :param insight_id: The insight_id of this DescribeFeedbackRequest.
        :type insight_id: str
        """
        if insight_id is not None and len(insight_id) > 100:
            raise ValueError("Invalid value for `insight_id`, length must be less than or equal to `100`")
        if insight_id is not None and len(insight_id) < 1:
            raise ValueError("Invalid value for `insight_id`, length must be greater than or equal to `1`")
        if insight_id is not None and not re.search(r'^[\w-]*$', insight_id):
            raise ValueError("Invalid value for `insight_id`, must be a follow pattern or equal to `/^[\w-]*$/`")

        self._insight_id = insight_id
