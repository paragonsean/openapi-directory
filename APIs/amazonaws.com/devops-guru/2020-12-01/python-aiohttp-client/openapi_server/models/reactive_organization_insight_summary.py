# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.insight_severity import InsightSeverity
from openapi_server.models.insight_status import InsightStatus
from openapi_server.models.insight_time_range import InsightTimeRange
from openapi_server.models.resource_collection import ResourceCollection
from openapi_server.models.service_collection import ServiceCollection
from openapi_server import util


class ReactiveOrganizationInsightSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, account_id: str=None, organizational_unit_id: str=None, name: str=None, severity: InsightSeverity=None, status: InsightStatus=None, insight_time_range: InsightTimeRange=None, resource_collection: ResourceCollection=None, service_collection: ServiceCollection=None):
        """ReactiveOrganizationInsightSummary - a model defined in OpenAPI

        :param id: The id of this ReactiveOrganizationInsightSummary.
        :param account_id: The account_id of this ReactiveOrganizationInsightSummary.
        :param organizational_unit_id: The organizational_unit_id of this ReactiveOrganizationInsightSummary.
        :param name: The name of this ReactiveOrganizationInsightSummary.
        :param severity: The severity of this ReactiveOrganizationInsightSummary.
        :param status: The status of this ReactiveOrganizationInsightSummary.
        :param insight_time_range: The insight_time_range of this ReactiveOrganizationInsightSummary.
        :param resource_collection: The resource_collection of this ReactiveOrganizationInsightSummary.
        :param service_collection: The service_collection of this ReactiveOrganizationInsightSummary.
        """
        self.openapi_types = {
            'id': str,
            'account_id': str,
            'organizational_unit_id': str,
            'name': str,
            'severity': InsightSeverity,
            'status': InsightStatus,
            'insight_time_range': InsightTimeRange,
            'resource_collection': ResourceCollection,
            'service_collection': ServiceCollection
        }

        self.attribute_map = {
            'id': 'Id',
            'account_id': 'AccountId',
            'organizational_unit_id': 'OrganizationalUnitId',
            'name': 'Name',
            'severity': 'Severity',
            'status': 'Status',
            'insight_time_range': 'InsightTimeRange',
            'resource_collection': 'ResourceCollection',
            'service_collection': 'ServiceCollection'
        }

        self._id = id
        self._account_id = account_id
        self._organizational_unit_id = organizational_unit_id
        self._name = name
        self._severity = severity
        self._status = status
        self._insight_time_range = insight_time_range
        self._resource_collection = resource_collection
        self._service_collection = service_collection

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReactiveOrganizationInsightSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReactiveOrganizationInsightSummary of this ReactiveOrganizationInsightSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ReactiveOrganizationInsightSummary.


        :return: The id of this ReactiveOrganizationInsightSummary.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReactiveOrganizationInsightSummary.


        :param id: The id of this ReactiveOrganizationInsightSummary.
        :type id: str
        """

        self._id = id

    @property
    def account_id(self):
        """Gets the account_id of this ReactiveOrganizationInsightSummary.


        :return: The account_id of this ReactiveOrganizationInsightSummary.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this ReactiveOrganizationInsightSummary.


        :param account_id: The account_id of this ReactiveOrganizationInsightSummary.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def organizational_unit_id(self):
        """Gets the organizational_unit_id of this ReactiveOrganizationInsightSummary.


        :return: The organizational_unit_id of this ReactiveOrganizationInsightSummary.
        :rtype: str
        """
        return self._organizational_unit_id

    @organizational_unit_id.setter
    def organizational_unit_id(self, organizational_unit_id):
        """Sets the organizational_unit_id of this ReactiveOrganizationInsightSummary.


        :param organizational_unit_id: The organizational_unit_id of this ReactiveOrganizationInsightSummary.
        :type organizational_unit_id: str
        """

        self._organizational_unit_id = organizational_unit_id

    @property
    def name(self):
        """Gets the name of this ReactiveOrganizationInsightSummary.


        :return: The name of this ReactiveOrganizationInsightSummary.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ReactiveOrganizationInsightSummary.


        :param name: The name of this ReactiveOrganizationInsightSummary.
        :type name: str
        """

        self._name = name

    @property
    def severity(self):
        """Gets the severity of this ReactiveOrganizationInsightSummary.


        :return: The severity of this ReactiveOrganizationInsightSummary.
        :rtype: InsightSeverity
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this ReactiveOrganizationInsightSummary.


        :param severity: The severity of this ReactiveOrganizationInsightSummary.
        :type severity: InsightSeverity
        """

        self._severity = severity

    @property
    def status(self):
        """Gets the status of this ReactiveOrganizationInsightSummary.


        :return: The status of this ReactiveOrganizationInsightSummary.
        :rtype: InsightStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ReactiveOrganizationInsightSummary.


        :param status: The status of this ReactiveOrganizationInsightSummary.
        :type status: InsightStatus
        """

        self._status = status

    @property
    def insight_time_range(self):
        """Gets the insight_time_range of this ReactiveOrganizationInsightSummary.


        :return: The insight_time_range of this ReactiveOrganizationInsightSummary.
        :rtype: InsightTimeRange
        """
        return self._insight_time_range

    @insight_time_range.setter
    def insight_time_range(self, insight_time_range):
        """Sets the insight_time_range of this ReactiveOrganizationInsightSummary.


        :param insight_time_range: The insight_time_range of this ReactiveOrganizationInsightSummary.
        :type insight_time_range: InsightTimeRange
        """

        self._insight_time_range = insight_time_range

    @property
    def resource_collection(self):
        """Gets the resource_collection of this ReactiveOrganizationInsightSummary.


        :return: The resource_collection of this ReactiveOrganizationInsightSummary.
        :rtype: ResourceCollection
        """
        return self._resource_collection

    @resource_collection.setter
    def resource_collection(self, resource_collection):
        """Sets the resource_collection of this ReactiveOrganizationInsightSummary.


        :param resource_collection: The resource_collection of this ReactiveOrganizationInsightSummary.
        :type resource_collection: ResourceCollection
        """

        self._resource_collection = resource_collection

    @property
    def service_collection(self):
        """Gets the service_collection of this ReactiveOrganizationInsightSummary.


        :return: The service_collection of this ReactiveOrganizationInsightSummary.
        :rtype: ServiceCollection
        """
        return self._service_collection

    @service_collection.setter
    def service_collection(self, service_collection):
        """Sets the service_collection of this ReactiveOrganizationInsightSummary.


        :param service_collection: The service_collection of this ReactiveOrganizationInsightSummary.
        :type service_collection: ServiceCollection
        """

        self._service_collection = service_collection
