/**
 * Amazon DevOps Guru
 * <p> Amazon DevOps Guru is a fully managed service that helps you identify anomalous behavior in business critical operational applications. You specify the Amazon Web Services resources that you want DevOps Guru to cover, then the Amazon CloudWatch metrics and Amazon Web Services CloudTrail events related to those resources are analyzed. When anomalous behavior is detected, DevOps Guru creates an <i>insight</i> that includes recommendations, related events, and related metrics that can help you improve your operational applications. For more information, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html\">What is Amazon DevOps Guru</a>. </p> <p> You can specify 1 or 2 Amazon Simple Notification Service topics so you are notified every time a new insight is created. You can also enable DevOps Guru to generate an OpsItem in Amazon Web Services Systems Manager for each insight to help you manage and track your work addressing insights. </p> <p> To learn about the DevOps Guru workflow, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html#how-it-works\">How DevOps Guru works</a>. To learn about DevOps Guru concepts, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/concepts.html\">Concepts in DevOps Guru</a>. </p>
 *
 * The version of the OpenAPI document: 2020-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMonitoredResourceIdentifier.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMonitoredResourceIdentifier::OAIMonitoredResourceIdentifier(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMonitoredResourceIdentifier::OAIMonitoredResourceIdentifier() {
    this->initializeModel();
}

OAIMonitoredResourceIdentifier::~OAIMonitoredResourceIdentifier() {}

void OAIMonitoredResourceIdentifier::initializeModel() {

    m_monitored_resource_name_isSet = false;
    m_monitored_resource_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_resource_permission_isSet = false;
    m_resource_permission_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_resource_collection_isSet = false;
    m_resource_collection_isValid = false;
}

void OAIMonitoredResourceIdentifier::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMonitoredResourceIdentifier::fromJsonObject(QJsonObject json) {

    m_monitored_resource_name_isValid = ::OpenAPI::fromJsonValue(m_monitored_resource_name, json[QString("MonitoredResourceName")]);
    m_monitored_resource_name_isSet = !json[QString("MonitoredResourceName")].isNull() && m_monitored_resource_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_resource_permission_isValid = ::OpenAPI::fromJsonValue(m_resource_permission, json[QString("ResourcePermission")]);
    m_resource_permission_isSet = !json[QString("ResourcePermission")].isNull() && m_resource_permission_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("LastUpdated")]);
    m_last_updated_isSet = !json[QString("LastUpdated")].isNull() && m_last_updated_isValid;

    m_resource_collection_isValid = ::OpenAPI::fromJsonValue(m_resource_collection, json[QString("ResourceCollection")]);
    m_resource_collection_isSet = !json[QString("ResourceCollection")].isNull() && m_resource_collection_isValid;
}

QString OAIMonitoredResourceIdentifier::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMonitoredResourceIdentifier::asJsonObject() const {
    QJsonObject obj;
    if (m_monitored_resource_name_isSet) {
        obj.insert(QString("MonitoredResourceName"), ::OpenAPI::toJsonValue(m_monitored_resource_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_resource_permission.isSet()) {
        obj.insert(QString("ResourcePermission"), ::OpenAPI::toJsonValue(m_resource_permission));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("LastUpdated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_resource_collection.isSet()) {
        obj.insert(QString("ResourceCollection"), ::OpenAPI::toJsonValue(m_resource_collection));
    }
    return obj;
}

QString OAIMonitoredResourceIdentifier::getMonitoredResourceName() const {
    return m_monitored_resource_name;
}
void OAIMonitoredResourceIdentifier::setMonitoredResourceName(const QString &monitored_resource_name) {
    m_monitored_resource_name = monitored_resource_name;
    m_monitored_resource_name_isSet = true;
}

bool OAIMonitoredResourceIdentifier::is_monitored_resource_name_Set() const{
    return m_monitored_resource_name_isSet;
}

bool OAIMonitoredResourceIdentifier::is_monitored_resource_name_Valid() const{
    return m_monitored_resource_name_isValid;
}

QString OAIMonitoredResourceIdentifier::getType() const {
    return m_type;
}
void OAIMonitoredResourceIdentifier::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIMonitoredResourceIdentifier::is_type_Set() const{
    return m_type_isSet;
}

bool OAIMonitoredResourceIdentifier::is_type_Valid() const{
    return m_type_isValid;
}

OAIResourcePermission OAIMonitoredResourceIdentifier::getResourcePermission() const {
    return m_resource_permission;
}
void OAIMonitoredResourceIdentifier::setResourcePermission(const OAIResourcePermission &resource_permission) {
    m_resource_permission = resource_permission;
    m_resource_permission_isSet = true;
}

bool OAIMonitoredResourceIdentifier::is_resource_permission_Set() const{
    return m_resource_permission_isSet;
}

bool OAIMonitoredResourceIdentifier::is_resource_permission_Valid() const{
    return m_resource_permission_isValid;
}

QDateTime OAIMonitoredResourceIdentifier::getLastUpdated() const {
    return m_last_updated;
}
void OAIMonitoredResourceIdentifier::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIMonitoredResourceIdentifier::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIMonitoredResourceIdentifier::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

OAIResourceCollection OAIMonitoredResourceIdentifier::getResourceCollection() const {
    return m_resource_collection;
}
void OAIMonitoredResourceIdentifier::setResourceCollection(const OAIResourceCollection &resource_collection) {
    m_resource_collection = resource_collection;
    m_resource_collection_isSet = true;
}

bool OAIMonitoredResourceIdentifier::is_resource_collection_Set() const{
    return m_resource_collection_isSet;
}

bool OAIMonitoredResourceIdentifier::is_resource_collection_Valid() const{
    return m_resource_collection_isValid;
}

bool OAIMonitoredResourceIdentifier::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_monitored_resource_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_permission.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_collection.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMonitoredResourceIdentifier::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
