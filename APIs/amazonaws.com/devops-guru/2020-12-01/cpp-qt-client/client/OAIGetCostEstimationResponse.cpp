/**
 * Amazon DevOps Guru
 * <p> Amazon DevOps Guru is a fully managed service that helps you identify anomalous behavior in business critical operational applications. You specify the Amazon Web Services resources that you want DevOps Guru to cover, then the Amazon CloudWatch metrics and Amazon Web Services CloudTrail events related to those resources are analyzed. When anomalous behavior is detected, DevOps Guru creates an <i>insight</i> that includes recommendations, related events, and related metrics that can help you improve your operational applications. For more information, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html\">What is Amazon DevOps Guru</a>. </p> <p> You can specify 1 or 2 Amazon Simple Notification Service topics so you are notified every time a new insight is created. You can also enable DevOps Guru to generate an OpsItem in Amazon Web Services Systems Manager for each insight to help you manage and track your work addressing insights. </p> <p> To learn about the DevOps Guru workflow, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html#how-it-works\">How DevOps Guru works</a>. To learn about DevOps Guru concepts, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/concepts.html\">Concepts in DevOps Guru</a>. </p>
 *
 * The version of the OpenAPI document: 2020-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetCostEstimationResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetCostEstimationResponse::OAIGetCostEstimationResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetCostEstimationResponse::OAIGetCostEstimationResponse() {
    this->initializeModel();
}

OAIGetCostEstimationResponse::~OAIGetCostEstimationResponse() {}

void OAIGetCostEstimationResponse::initializeModel() {

    m_resource_collection_isSet = false;
    m_resource_collection_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_costs_isSet = false;
    m_costs_isValid = false;

    m_time_range_isSet = false;
    m_time_range_isValid = false;

    m_total_cost_isSet = false;
    m_total_cost_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIGetCostEstimationResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetCostEstimationResponse::fromJsonObject(QJsonObject json) {

    m_resource_collection_isValid = ::OpenAPI::fromJsonValue(m_resource_collection, json[QString("ResourceCollection")]);
    m_resource_collection_isSet = !json[QString("ResourceCollection")].isNull() && m_resource_collection_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_costs_isValid = ::OpenAPI::fromJsonValue(m_costs, json[QString("Costs")]);
    m_costs_isSet = !json[QString("Costs")].isNull() && m_costs_isValid;

    m_time_range_isValid = ::OpenAPI::fromJsonValue(m_time_range, json[QString("TimeRange")]);
    m_time_range_isSet = !json[QString("TimeRange")].isNull() && m_time_range_isValid;

    m_total_cost_isValid = ::OpenAPI::fromJsonValue(m_total_cost, json[QString("TotalCost")]);
    m_total_cost_isSet = !json[QString("TotalCost")].isNull() && m_total_cost_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIGetCostEstimationResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetCostEstimationResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_collection.isSet()) {
        obj.insert(QString("ResourceCollection"), ::OpenAPI::toJsonValue(m_resource_collection));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_costs.isSet()) {
        obj.insert(QString("Costs"), ::OpenAPI::toJsonValue(m_costs));
    }
    if (m_time_range.isSet()) {
        obj.insert(QString("TimeRange"), ::OpenAPI::toJsonValue(m_time_range));
    }
    if (m_total_cost_isSet) {
        obj.insert(QString("TotalCost"), ::OpenAPI::toJsonValue(m_total_cost));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

OAIGetCostEstimationResponse_ResourceCollection OAIGetCostEstimationResponse::getResourceCollection() const {
    return m_resource_collection;
}
void OAIGetCostEstimationResponse::setResourceCollection(const OAIGetCostEstimationResponse_ResourceCollection &resource_collection) {
    m_resource_collection = resource_collection;
    m_resource_collection_isSet = true;
}

bool OAIGetCostEstimationResponse::is_resource_collection_Set() const{
    return m_resource_collection_isSet;
}

bool OAIGetCostEstimationResponse::is_resource_collection_Valid() const{
    return m_resource_collection_isValid;
}

OAICostEstimationStatus OAIGetCostEstimationResponse::getStatus() const {
    return m_status;
}
void OAIGetCostEstimationResponse::setStatus(const OAICostEstimationStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGetCostEstimationResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetCostEstimationResponse::is_status_Valid() const{
    return m_status_isValid;
}

QList OAIGetCostEstimationResponse::getCosts() const {
    return m_costs;
}
void OAIGetCostEstimationResponse::setCosts(const QList &costs) {
    m_costs = costs;
    m_costs_isSet = true;
}

bool OAIGetCostEstimationResponse::is_costs_Set() const{
    return m_costs_isSet;
}

bool OAIGetCostEstimationResponse::is_costs_Valid() const{
    return m_costs_isValid;
}

OAIGetCostEstimationResponse_TimeRange OAIGetCostEstimationResponse::getTimeRange() const {
    return m_time_range;
}
void OAIGetCostEstimationResponse::setTimeRange(const OAIGetCostEstimationResponse_TimeRange &time_range) {
    m_time_range = time_range;
    m_time_range_isSet = true;
}

bool OAIGetCostEstimationResponse::is_time_range_Set() const{
    return m_time_range_isSet;
}

bool OAIGetCostEstimationResponse::is_time_range_Valid() const{
    return m_time_range_isValid;
}

double OAIGetCostEstimationResponse::getTotalCost() const {
    return m_total_cost;
}
void OAIGetCostEstimationResponse::setTotalCost(const double &total_cost) {
    m_total_cost = total_cost;
    m_total_cost_isSet = true;
}

bool OAIGetCostEstimationResponse::is_total_cost_Set() const{
    return m_total_cost_isSet;
}

bool OAIGetCostEstimationResponse::is_total_cost_Valid() const{
    return m_total_cost_isValid;
}

QString OAIGetCostEstimationResponse::getNextToken() const {
    return m_next_token;
}
void OAIGetCostEstimationResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIGetCostEstimationResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIGetCostEstimationResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIGetCostEstimationResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_collection.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_costs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetCostEstimationResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
