/**
 * Amazon DevOps Guru
 * <p> Amazon DevOps Guru is a fully managed service that helps you identify anomalous behavior in business critical operational applications. You specify the Amazon Web Services resources that you want DevOps Guru to cover, then the Amazon CloudWatch metrics and Amazon Web Services CloudTrail events related to those resources are analyzed. When anomalous behavior is detected, DevOps Guru creates an <i>insight</i> that includes recommendations, related events, and related metrics that can help you improve your operational applications. For more information, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html\">What is Amazon DevOps Guru</a>. </p> <p> You can specify 1 or 2 Amazon Simple Notification Service topics so you are notified every time a new insight is created. You can also enable DevOps Guru to generate an OpsItem in Amazon Web Services Systems Manager for each insight to help you manage and track your work addressing insights. </p> <p> To learn about the DevOps Guru workflow, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html#how-it-works\">How DevOps Guru works</a>. To learn about DevOps Guru concepts, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/concepts.html\">Concepts in DevOps Guru</a>. </p>
 *
 * The version of the OpenAPI document: 2020-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITimestampMetricValuePair.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITimestampMetricValuePair::OAITimestampMetricValuePair(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITimestampMetricValuePair::OAITimestampMetricValuePair() {
    this->initializeModel();
}

OAITimestampMetricValuePair::~OAITimestampMetricValuePair() {}

void OAITimestampMetricValuePair::initializeModel() {

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_metric_value_isSet = false;
    m_metric_value_isValid = false;
}

void OAITimestampMetricValuePair::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITimestampMetricValuePair::fromJsonObject(QJsonObject json) {

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("Timestamp")]);
    m_timestamp_isSet = !json[QString("Timestamp")].isNull() && m_timestamp_isValid;

    m_metric_value_isValid = ::OpenAPI::fromJsonValue(m_metric_value, json[QString("MetricValue")]);
    m_metric_value_isSet = !json[QString("MetricValue")].isNull() && m_metric_value_isValid;
}

QString OAITimestampMetricValuePair::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITimestampMetricValuePair::asJsonObject() const {
    QJsonObject obj;
    if (m_timestamp_isSet) {
        obj.insert(QString("Timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_metric_value_isSet) {
        obj.insert(QString("MetricValue"), ::OpenAPI::toJsonValue(m_metric_value));
    }
    return obj;
}

QDateTime OAITimestampMetricValuePair::getTimestamp() const {
    return m_timestamp;
}
void OAITimestampMetricValuePair::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAITimestampMetricValuePair::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAITimestampMetricValuePair::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

double OAITimestampMetricValuePair::getMetricValue() const {
    return m_metric_value;
}
void OAITimestampMetricValuePair::setMetricValue(const double &metric_value) {
    m_metric_value = metric_value;
    m_metric_value_isSet = true;
}

bool OAITimestampMetricValuePair::is_metric_value_Set() const{
    return m_metric_value_isSet;
}

bool OAITimestampMetricValuePair::is_metric_value_Valid() const{
    return m_metric_value_isValid;
}

bool OAITimestampMetricValuePair::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITimestampMetricValuePair::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
