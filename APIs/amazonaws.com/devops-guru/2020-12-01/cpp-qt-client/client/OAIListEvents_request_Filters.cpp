/**
 * Amazon DevOps Guru
 * <p> Amazon DevOps Guru is a fully managed service that helps you identify anomalous behavior in business critical operational applications. You specify the Amazon Web Services resources that you want DevOps Guru to cover, then the Amazon CloudWatch metrics and Amazon Web Services CloudTrail events related to those resources are analyzed. When anomalous behavior is detected, DevOps Guru creates an <i>insight</i> that includes recommendations, related events, and related metrics that can help you improve your operational applications. For more information, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html\">What is Amazon DevOps Guru</a>. </p> <p> You can specify 1 or 2 Amazon Simple Notification Service topics so you are notified every time a new insight is created. You can also enable DevOps Guru to generate an OpsItem in Amazon Web Services Systems Manager for each insight to help you manage and track your work addressing insights. </p> <p> To learn about the DevOps Guru workflow, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html#how-it-works\">How DevOps Guru works</a>. To learn about DevOps Guru concepts, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/concepts.html\">Concepts in DevOps Guru</a>. </p>
 *
 * The version of the OpenAPI document: 2020-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListEvents_request_Filters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListEvents_request_Filters::OAIListEvents_request_Filters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListEvents_request_Filters::OAIListEvents_request_Filters() {
    this->initializeModel();
}

OAIListEvents_request_Filters::~OAIListEvents_request_Filters() {}

void OAIListEvents_request_Filters::initializeModel() {

    m_insight_id_isSet = false;
    m_insight_id_isValid = false;

    m_event_time_range_isSet = false;
    m_event_time_range_isValid = false;

    m_event_class_isSet = false;
    m_event_class_isValid = false;

    m_event_source_isSet = false;
    m_event_source_isValid = false;

    m_data_source_isSet = false;
    m_data_source_isValid = false;

    m_resource_collection_isSet = false;
    m_resource_collection_isValid = false;
}

void OAIListEvents_request_Filters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListEvents_request_Filters::fromJsonObject(QJsonObject json) {

    m_insight_id_isValid = ::OpenAPI::fromJsonValue(m_insight_id, json[QString("InsightId")]);
    m_insight_id_isSet = !json[QString("InsightId")].isNull() && m_insight_id_isValid;

    m_event_time_range_isValid = ::OpenAPI::fromJsonValue(m_event_time_range, json[QString("EventTimeRange")]);
    m_event_time_range_isSet = !json[QString("EventTimeRange")].isNull() && m_event_time_range_isValid;

    m_event_class_isValid = ::OpenAPI::fromJsonValue(m_event_class, json[QString("EventClass")]);
    m_event_class_isSet = !json[QString("EventClass")].isNull() && m_event_class_isValid;

    m_event_source_isValid = ::OpenAPI::fromJsonValue(m_event_source, json[QString("EventSource")]);
    m_event_source_isSet = !json[QString("EventSource")].isNull() && m_event_source_isValid;

    m_data_source_isValid = ::OpenAPI::fromJsonValue(m_data_source, json[QString("DataSource")]);
    m_data_source_isSet = !json[QString("DataSource")].isNull() && m_data_source_isValid;

    m_resource_collection_isValid = ::OpenAPI::fromJsonValue(m_resource_collection, json[QString("ResourceCollection")]);
    m_resource_collection_isSet = !json[QString("ResourceCollection")].isNull() && m_resource_collection_isValid;
}

QString OAIListEvents_request_Filters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListEvents_request_Filters::asJsonObject() const {
    QJsonObject obj;
    if (m_insight_id_isSet) {
        obj.insert(QString("InsightId"), ::OpenAPI::toJsonValue(m_insight_id));
    }
    if (m_event_time_range.isSet()) {
        obj.insert(QString("EventTimeRange"), ::OpenAPI::toJsonValue(m_event_time_range));
    }
    if (m_event_class.isSet()) {
        obj.insert(QString("EventClass"), ::OpenAPI::toJsonValue(m_event_class));
    }
    if (m_event_source_isSet) {
        obj.insert(QString("EventSource"), ::OpenAPI::toJsonValue(m_event_source));
    }
    if (m_data_source.isSet()) {
        obj.insert(QString("DataSource"), ::OpenAPI::toJsonValue(m_data_source));
    }
    if (m_resource_collection.isSet()) {
        obj.insert(QString("ResourceCollection"), ::OpenAPI::toJsonValue(m_resource_collection));
    }
    return obj;
}

QString OAIListEvents_request_Filters::getInsightId() const {
    return m_insight_id;
}
void OAIListEvents_request_Filters::setInsightId(const QString &insight_id) {
    m_insight_id = insight_id;
    m_insight_id_isSet = true;
}

bool OAIListEvents_request_Filters::is_insight_id_Set() const{
    return m_insight_id_isSet;
}

bool OAIListEvents_request_Filters::is_insight_id_Valid() const{
    return m_insight_id_isValid;
}

OAIListEvents_request_Filters_EventTimeRange OAIListEvents_request_Filters::getEventTimeRange() const {
    return m_event_time_range;
}
void OAIListEvents_request_Filters::setEventTimeRange(const OAIListEvents_request_Filters_EventTimeRange &event_time_range) {
    m_event_time_range = event_time_range;
    m_event_time_range_isSet = true;
}

bool OAIListEvents_request_Filters::is_event_time_range_Set() const{
    return m_event_time_range_isSet;
}

bool OAIListEvents_request_Filters::is_event_time_range_Valid() const{
    return m_event_time_range_isValid;
}

OAIEventClass OAIListEvents_request_Filters::getEventClass() const {
    return m_event_class;
}
void OAIListEvents_request_Filters::setEventClass(const OAIEventClass &event_class) {
    m_event_class = event_class;
    m_event_class_isSet = true;
}

bool OAIListEvents_request_Filters::is_event_class_Set() const{
    return m_event_class_isSet;
}

bool OAIListEvents_request_Filters::is_event_class_Valid() const{
    return m_event_class_isValid;
}

QString OAIListEvents_request_Filters::getEventSource() const {
    return m_event_source;
}
void OAIListEvents_request_Filters::setEventSource(const QString &event_source) {
    m_event_source = event_source;
    m_event_source_isSet = true;
}

bool OAIListEvents_request_Filters::is_event_source_Set() const{
    return m_event_source_isSet;
}

bool OAIListEvents_request_Filters::is_event_source_Valid() const{
    return m_event_source_isValid;
}

OAIEventDataSource OAIListEvents_request_Filters::getDataSource() const {
    return m_data_source;
}
void OAIListEvents_request_Filters::setDataSource(const OAIEventDataSource &data_source) {
    m_data_source = data_source;
    m_data_source_isSet = true;
}

bool OAIListEvents_request_Filters::is_data_source_Set() const{
    return m_data_source_isSet;
}

bool OAIListEvents_request_Filters::is_data_source_Valid() const{
    return m_data_source_isValid;
}

OAIResourceCollection OAIListEvents_request_Filters::getResourceCollection() const {
    return m_resource_collection;
}
void OAIListEvents_request_Filters::setResourceCollection(const OAIResourceCollection &resource_collection) {
    m_resource_collection = resource_collection;
    m_resource_collection_isSet = true;
}

bool OAIListEvents_request_Filters::is_resource_collection_Set() const{
    return m_resource_collection_isSet;
}

bool OAIListEvents_request_Filters::is_resource_collection_Valid() const{
    return m_resource_collection_isValid;
}

bool OAIListEvents_request_Filters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_insight_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_time_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_class.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_collection.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListEvents_request_Filters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
