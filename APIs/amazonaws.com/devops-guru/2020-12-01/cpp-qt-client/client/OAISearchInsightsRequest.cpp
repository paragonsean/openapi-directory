/**
 * Amazon DevOps Guru
 * <p> Amazon DevOps Guru is a fully managed service that helps you identify anomalous behavior in business critical operational applications. You specify the Amazon Web Services resources that you want DevOps Guru to cover, then the Amazon CloudWatch metrics and Amazon Web Services CloudTrail events related to those resources are analyzed. When anomalous behavior is detected, DevOps Guru creates an <i>insight</i> that includes recommendations, related events, and related metrics that can help you improve your operational applications. For more information, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html\">What is Amazon DevOps Guru</a>. </p> <p> You can specify 1 or 2 Amazon Simple Notification Service topics so you are notified every time a new insight is created. You can also enable DevOps Guru to generate an OpsItem in Amazon Web Services Systems Manager for each insight to help you manage and track your work addressing insights. </p> <p> To learn about the DevOps Guru workflow, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html#how-it-works\">How DevOps Guru works</a>. To learn about DevOps Guru concepts, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/concepts.html\">Concepts in DevOps Guru</a>. </p>
 *
 * The version of the OpenAPI document: 2020-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchInsightsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchInsightsRequest::OAISearchInsightsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchInsightsRequest::OAISearchInsightsRequest() {
    this->initializeModel();
}

OAISearchInsightsRequest::~OAISearchInsightsRequest() {}

void OAISearchInsightsRequest::initializeModel() {

    m_start_time_range_isSet = false;
    m_start_time_range_isValid = false;

    m_filters_isSet = false;
    m_filters_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAISearchInsightsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchInsightsRequest::fromJsonObject(QJsonObject json) {

    m_start_time_range_isValid = ::OpenAPI::fromJsonValue(m_start_time_range, json[QString("StartTimeRange")]);
    m_start_time_range_isSet = !json[QString("StartTimeRange")].isNull() && m_start_time_range_isValid;

    m_filters_isValid = ::OpenAPI::fromJsonValue(m_filters, json[QString("Filters")]);
    m_filters_isSet = !json[QString("Filters")].isNull() && m_filters_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;
}

QString OAISearchInsightsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchInsightsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_start_time_range.isSet()) {
        obj.insert(QString("StartTimeRange"), ::OpenAPI::toJsonValue(m_start_time_range));
    }
    if (m_filters.isSet()) {
        obj.insert(QString("Filters"), ::OpenAPI::toJsonValue(m_filters));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAISearchInsightsRequest_StartTimeRange OAISearchInsightsRequest::getStartTimeRange() const {
    return m_start_time_range;
}
void OAISearchInsightsRequest::setStartTimeRange(const OAISearchInsightsRequest_StartTimeRange &start_time_range) {
    m_start_time_range = start_time_range;
    m_start_time_range_isSet = true;
}

bool OAISearchInsightsRequest::is_start_time_range_Set() const{
    return m_start_time_range_isSet;
}

bool OAISearchInsightsRequest::is_start_time_range_Valid() const{
    return m_start_time_range_isValid;
}

OAISearchInsightsRequest_Filters OAISearchInsightsRequest::getFilters() const {
    return m_filters;
}
void OAISearchInsightsRequest::setFilters(const OAISearchInsightsRequest_Filters &filters) {
    m_filters = filters;
    m_filters_isSet = true;
}

bool OAISearchInsightsRequest::is_filters_Set() const{
    return m_filters_isSet;
}

bool OAISearchInsightsRequest::is_filters_Valid() const{
    return m_filters_isValid;
}

qint32 OAISearchInsightsRequest::getMaxResults() const {
    return m_max_results;
}
void OAISearchInsightsRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAISearchInsightsRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAISearchInsightsRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAISearchInsightsRequest::getNextToken() const {
    return m_next_token;
}
void OAISearchInsightsRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAISearchInsightsRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAISearchInsightsRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

OAIInsightType OAISearchInsightsRequest::getType() const {
    return m_type;
}
void OAISearchInsightsRequest::setType(const OAIInsightType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISearchInsightsRequest::is_type_Set() const{
    return m_type_isSet;
}

bool OAISearchInsightsRequest::is_type_Valid() const{
    return m_type_isValid;
}

bool OAISearchInsightsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_start_time_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchInsightsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_start_time_range_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
