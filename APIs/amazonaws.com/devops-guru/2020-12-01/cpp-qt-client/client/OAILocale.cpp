/**
 * Amazon DevOps Guru
 * <p> Amazon DevOps Guru is a fully managed service that helps you identify anomalous behavior in business critical operational applications. You specify the Amazon Web Services resources that you want DevOps Guru to cover, then the Amazon CloudWatch metrics and Amazon Web Services CloudTrail events related to those resources are analyzed. When anomalous behavior is detected, DevOps Guru creates an <i>insight</i> that includes recommendations, related events, and related metrics that can help you improve your operational applications. For more information, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html\">What is Amazon DevOps Guru</a>. </p> <p> You can specify 1 or 2 Amazon Simple Notification Service topics so you are notified every time a new insight is created. You can also enable DevOps Guru to generate an OpsItem in Amazon Web Services Systems Manager for each insight to help you manage and track your work addressing insights. </p> <p> To learn about the DevOps Guru workflow, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html#how-it-works\">How DevOps Guru works</a>. To learn about DevOps Guru concepts, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/concepts.html\">Concepts in DevOps Guru</a>. </p>
 *
 * The version of the OpenAPI document: 2020-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILocale.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILocale::OAILocale(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILocale::OAILocale() {
    this->initializeModel();
}

OAILocale::~OAILocale() {}

void OAILocale::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAILocale::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAILocale::fromJson(QString jsonString) {
    
    if ( jsonString.compare("DE_DE", Qt::CaseInsensitive) == 0) {
        m_value = eOAILocale::DE_DE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EN_US", Qt::CaseInsensitive) == 0) {
        m_value = eOAILocale::EN_US;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EN_GB", Qt::CaseInsensitive) == 0) {
        m_value = eOAILocale::EN_GB;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ES_ES", Qt::CaseInsensitive) == 0) {
        m_value = eOAILocale::ES_ES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FR_FR", Qt::CaseInsensitive) == 0) {
        m_value = eOAILocale::FR_FR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IT_IT", Qt::CaseInsensitive) == 0) {
        m_value = eOAILocale::IT_IT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("JA_JP", Qt::CaseInsensitive) == 0) {
        m_value = eOAILocale::JA_JP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("KO_KR", Qt::CaseInsensitive) == 0) {
        m_value = eOAILocale::KO_KR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PT_BR", Qt::CaseInsensitive) == 0) {
        m_value = eOAILocale::PT_BR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ZH_CN", Qt::CaseInsensitive) == 0) {
        m_value = eOAILocale::ZH_CN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ZH_TW", Qt::CaseInsensitive) == 0) {
        m_value = eOAILocale::ZH_TW;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAILocale::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAILocale::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAILocale::DE_DE:
            val = "DE_DE";
            break;
        case eOAILocale::EN_US:
            val = "EN_US";
            break;
        case eOAILocale::EN_GB:
            val = "EN_GB";
            break;
        case eOAILocale::ES_ES:
            val = "ES_ES";
            break;
        case eOAILocale::FR_FR:
            val = "FR_FR";
            break;
        case eOAILocale::IT_IT:
            val = "IT_IT";
            break;
        case eOAILocale::JA_JP:
            val = "JA_JP";
            break;
        case eOAILocale::KO_KR:
            val = "KO_KR";
            break;
        case eOAILocale::PT_BR:
            val = "PT_BR";
            break;
        case eOAILocale::ZH_CN:
            val = "ZH_CN";
            break;
        case eOAILocale::ZH_TW:
            val = "ZH_TW";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAILocale::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAILocale::eOAILocale OAILocale::getValue() const {
    return m_value;
}

void OAILocale::setValue(const OAILocale::eOAILocale& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAILocale::isSet() const {
    
    return m_value_isSet;
}

bool OAILocale::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
