/**
 * Amazon DevOps Guru
 * <p> Amazon DevOps Guru is a fully managed service that helps you identify anomalous behavior in business critical operational applications. You specify the Amazon Web Services resources that you want DevOps Guru to cover, then the Amazon CloudWatch metrics and Amazon Web Services CloudTrail events related to those resources are analyzed. When anomalous behavior is detected, DevOps Guru creates an <i>insight</i> that includes recommendations, related events, and related metrics that can help you improve your operational applications. For more information, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html\">What is Amazon DevOps Guru</a>. </p> <p> You can specify 1 or 2 Amazon Simple Notification Service topics so you are notified every time a new insight is created. You can also enable DevOps Guru to generate an OpsItem in Amazon Web Services Systems Manager for each insight to help you manage and track your work addressing insights. </p> <p> To learn about the DevOps Guru workflow, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html#how-it-works\">How DevOps Guru works</a>. To learn about DevOps Guru concepts, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/concepts.html\">Concepts in DevOps Guru</a>. </p>
 *
 * The version of the OpenAPI document: 2020-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPerformanceInsightsMetricsDetail.h
 *
 * &lt;p&gt;Details about Performance Insights metrics.&lt;/p&gt; &lt;p&gt;Amazon RDS Performance Insights enables you to monitor and explore different dimensions of database load based on data captured from a running DB instance. DB load is measured as average active sessions. Performance Insights provides the data to API consumers as a two-dimensional time-series dataset. The time dimension provides DB load data for each time point in the queried time range. Each time point decomposes overall load in relation to the requested dimensions, measured at that time point. Examples include SQL, Wait event, User, and Host. &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;To learn more about Performance Insights and Amazon Aurora DB instances, go to the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_PerfInsights.html\&quot;&gt; Amazon Aurora User Guide&lt;/a&gt;. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To learn more about Performance Insights and Amazon RDS DB instances, go to the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html\&quot;&gt; Amazon RDS User Guide&lt;/a&gt;. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
 */

#ifndef OAIPerformanceInsightsMetricsDetail_H
#define OAIPerformanceInsightsMetricsDetail_H

#include <QJsonObject>

#include "OAIPerformanceInsightsMetricsDetail_MetricQuery.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPerformanceInsightsMetricsDetail_MetricQuery;

class OAIPerformanceInsightsMetricsDetail : public OAIObject {
public:
    OAIPerformanceInsightsMetricsDetail();
    OAIPerformanceInsightsMetricsDetail(QString json);
    ~OAIPerformanceInsightsMetricsDetail() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getMetricDisplayName() const;
    void setMetricDisplayName(const QString &metric_display_name);
    bool is_metric_display_name_Set() const;
    bool is_metric_display_name_Valid() const;

    QString getUnit() const;
    void setUnit(const QString &unit);
    bool is_unit_Set() const;
    bool is_unit_Valid() const;

    OAIPerformanceInsightsMetricsDetail_MetricQuery getMetricQuery() const;
    void setMetricQuery(const OAIPerformanceInsightsMetricsDetail_MetricQuery &metric_query);
    bool is_metric_query_Set() const;
    bool is_metric_query_Valid() const;

    QList getReferenceData() const;
    void setReferenceData(const QList &reference_data);
    bool is_reference_data_Set() const;
    bool is_reference_data_Valid() const;

    QList getStatsAtAnomaly() const;
    void setStatsAtAnomaly(const QList &stats_at_anomaly);
    bool is_stats_at_anomaly_Set() const;
    bool is_stats_at_anomaly_Valid() const;

    QList getStatsAtBaseline() const;
    void setStatsAtBaseline(const QList &stats_at_baseline);
    bool is_stats_at_baseline_Set() const;
    bool is_stats_at_baseline_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_metric_display_name;
    bool m_metric_display_name_isSet;
    bool m_metric_display_name_isValid;

    QString m_unit;
    bool m_unit_isSet;
    bool m_unit_isValid;

    OAIPerformanceInsightsMetricsDetail_MetricQuery m_metric_query;
    bool m_metric_query_isSet;
    bool m_metric_query_isValid;

    QList m_reference_data;
    bool m_reference_data_isSet;
    bool m_reference_data_isValid;

    QList m_stats_at_anomaly;
    bool m_stats_at_anomaly_isSet;
    bool m_stats_at_anomaly_isValid;

    QList m_stats_at_baseline;
    bool m_stats_at_baseline_isSet;
    bool m_stats_at_baseline_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPerformanceInsightsMetricsDetail)

#endif // OAIPerformanceInsightsMetricsDetail_H
