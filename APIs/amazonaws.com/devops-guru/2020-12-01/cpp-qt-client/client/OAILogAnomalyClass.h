/**
 * Amazon DevOps Guru
 * <p> Amazon DevOps Guru is a fully managed service that helps you identify anomalous behavior in business critical operational applications. You specify the Amazon Web Services resources that you want DevOps Guru to cover, then the Amazon CloudWatch metrics and Amazon Web Services CloudTrail events related to those resources are analyzed. When anomalous behavior is detected, DevOps Guru creates an <i>insight</i> that includes recommendations, related events, and related metrics that can help you improve your operational applications. For more information, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html\">What is Amazon DevOps Guru</a>. </p> <p> You can specify 1 or 2 Amazon Simple Notification Service topics so you are notified every time a new insight is created. You can also enable DevOps Guru to generate an OpsItem in Amazon Web Services Systems Manager for each insight to help you manage and track your work addressing insights. </p> <p> To learn about the DevOps Guru workflow, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html#how-it-works\">How DevOps Guru works</a>. To learn about DevOps Guru concepts, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/concepts.html\">Concepts in DevOps Guru</a>. </p>
 *
 * The version of the OpenAPI document: 2020-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAILogAnomalyClass.h
 *
 *  Information about an anomalous log event found within a log group. 
 */

#ifndef OAILogAnomalyClass_H
#define OAILogAnomalyClass_H

#include <QJsonObject>

#include "OAILogAnomalyType.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAILogAnomalyClass : public OAIObject {
public:
    OAILogAnomalyClass();
    OAILogAnomalyClass(QString json);
    ~OAILogAnomalyClass() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getLogStreamName() const;
    void setLogStreamName(const QString &log_stream_name);
    bool is_log_stream_name_Set() const;
    bool is_log_stream_name_Valid() const;

    OAILogAnomalyType getLogAnomalyType() const;
    void setLogAnomalyType(const OAILogAnomalyType &log_anomaly_type);
    bool is_log_anomaly_type_Set() const;
    bool is_log_anomaly_type_Valid() const;

    QString getLogAnomalyToken() const;
    void setLogAnomalyToken(const QString &log_anomaly_token);
    bool is_log_anomaly_token_Set() const;
    bool is_log_anomaly_token_Valid() const;

    QString getLogEventId() const;
    void setLogEventId(const QString &log_event_id);
    bool is_log_event_id_Set() const;
    bool is_log_event_id_Valid() const;

    QString getExplanation() const;
    void setExplanation(const QString &explanation);
    bool is_explanation_Set() const;
    bool is_explanation_Valid() const;

    qint32 getNumberOfLogLinesOccurrences() const;
    void setNumberOfLogLinesOccurrences(const qint32 &number_of_log_lines_occurrences);
    bool is_number_of_log_lines_occurrences_Set() const;
    bool is_number_of_log_lines_occurrences_Valid() const;

    QDateTime getLogEventTimestamp() const;
    void setLogEventTimestamp(const QDateTime &log_event_timestamp);
    bool is_log_event_timestamp_Set() const;
    bool is_log_event_timestamp_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_log_stream_name;
    bool m_log_stream_name_isSet;
    bool m_log_stream_name_isValid;

    OAILogAnomalyType m_log_anomaly_type;
    bool m_log_anomaly_type_isSet;
    bool m_log_anomaly_type_isValid;

    QString m_log_anomaly_token;
    bool m_log_anomaly_token_isSet;
    bool m_log_anomaly_token_isValid;

    QString m_log_event_id;
    bool m_log_event_id_isSet;
    bool m_log_event_id_isValid;

    QString m_explanation;
    bool m_explanation_isSet;
    bool m_explanation_isValid;

    qint32 m_number_of_log_lines_occurrences;
    bool m_number_of_log_lines_occurrences_isSet;
    bool m_number_of_log_lines_occurrences_isValid;

    QDateTime m_log_event_timestamp;
    bool m_log_event_timestamp_isSet;
    bool m_log_event_timestamp_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAILogAnomalyClass)

#endif // OAILogAnomalyClass_H
