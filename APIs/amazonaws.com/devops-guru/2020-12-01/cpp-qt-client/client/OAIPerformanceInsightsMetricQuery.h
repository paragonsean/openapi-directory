/**
 * Amazon DevOps Guru
 * <p> Amazon DevOps Guru is a fully managed service that helps you identify anomalous behavior in business critical operational applications. You specify the Amazon Web Services resources that you want DevOps Guru to cover, then the Amazon CloudWatch metrics and Amazon Web Services CloudTrail events related to those resources are analyzed. When anomalous behavior is detected, DevOps Guru creates an <i>insight</i> that includes recommendations, related events, and related metrics that can help you improve your operational applications. For more information, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html\">What is Amazon DevOps Guru</a>. </p> <p> You can specify 1 or 2 Amazon Simple Notification Service topics so you are notified every time a new insight is created. You can also enable DevOps Guru to generate an OpsItem in Amazon Web Services Systems Manager for each insight to help you manage and track your work addressing insights. </p> <p> To learn about the DevOps Guru workflow, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html#how-it-works\">How DevOps Guru works</a>. To learn about DevOps Guru concepts, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/concepts.html\">Concepts in DevOps Guru</a>. </p>
 *
 * The version of the OpenAPI document: 2020-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPerformanceInsightsMetricQuery.h
 *
 * &lt;p&gt;A single query to be processed. Use these parameters to query the Performance Insights &lt;code&gt;GetResourceMetrics&lt;/code&gt; API to retrieve the metrics for an anomaly. For more information, see &lt;code&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/performance-insights/latest/APIReference/API_GetResourceMetrics.html\&quot;&gt;GetResourceMetrics&lt;/a&gt; &lt;/code&gt; in the &lt;i&gt;Amazon RDS Performance Insights API Reference&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Amazon RDS Performance Insights enables you to monitor and explore different dimensions of database load based on data captured from a running DB instance. DB load is measured as average active sessions. Performance Insights provides the data to API consumers as a two-dimensional time-series dataset. The time dimension provides DB load data for each time point in the queried time range. Each time point decomposes overall load in relation to the requested dimensions, measured at that time point. Examples include SQL, Wait event, User, and Host. &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;To learn more about Performance Insights and Amazon Aurora DB instances, go to the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_PerfInsights.html\&quot;&gt; Amazon Aurora User Guide&lt;/a&gt;. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To learn more about Performance Insights and Amazon RDS DB instances, go to the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html\&quot;&gt; Amazon RDS User Guide&lt;/a&gt;. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
 */

#ifndef OAIPerformanceInsightsMetricQuery_H
#define OAIPerformanceInsightsMetricQuery_H

#include <QJsonObject>

#include "OAIPerformanceInsightsMetricQuery_GroupBy.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPerformanceInsightsMetricQuery_GroupBy;

class OAIPerformanceInsightsMetricQuery : public OAIObject {
public:
    OAIPerformanceInsightsMetricQuery();
    OAIPerformanceInsightsMetricQuery(QString json);
    ~OAIPerformanceInsightsMetricQuery() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getMetric() const;
    void setMetric(const QString &metric);
    bool is_metric_Set() const;
    bool is_metric_Valid() const;

    OAIPerformanceInsightsMetricQuery_GroupBy getGroupBy() const;
    void setGroupBy(const OAIPerformanceInsightsMetricQuery_GroupBy &group_by);
    bool is_group_by_Set() const;
    bool is_group_by_Valid() const;

    QMap getFilter() const;
    void setFilter(const QMap &filter);
    bool is_filter_Set() const;
    bool is_filter_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_metric;
    bool m_metric_isSet;
    bool m_metric_isValid;

    OAIPerformanceInsightsMetricQuery_GroupBy m_group_by;
    bool m_group_by_isSet;
    bool m_group_by_isValid;

    QMap m_filter;
    bool m_filter_isSet;
    bool m_filter_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPerformanceInsightsMetricQuery)

#endif // OAIPerformanceInsightsMetricQuery_H
