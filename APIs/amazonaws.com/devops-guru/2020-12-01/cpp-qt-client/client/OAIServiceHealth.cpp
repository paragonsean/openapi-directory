/**
 * Amazon DevOps Guru
 * <p> Amazon DevOps Guru is a fully managed service that helps you identify anomalous behavior in business critical operational applications. You specify the Amazon Web Services resources that you want DevOps Guru to cover, then the Amazon CloudWatch metrics and Amazon Web Services CloudTrail events related to those resources are analyzed. When anomalous behavior is detected, DevOps Guru creates an <i>insight</i> that includes recommendations, related events, and related metrics that can help you improve your operational applications. For more information, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html\">What is Amazon DevOps Guru</a>. </p> <p> You can specify 1 or 2 Amazon Simple Notification Service topics so you are notified every time a new insight is created. You can also enable DevOps Guru to generate an OpsItem in Amazon Web Services Systems Manager for each insight to help you manage and track your work addressing insights. </p> <p> To learn about the DevOps Guru workflow, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html#how-it-works\">How DevOps Guru works</a>. To learn about DevOps Guru concepts, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/concepts.html\">Concepts in DevOps Guru</a>. </p>
 *
 * The version of the OpenAPI document: 2020-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceHealth.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceHealth::OAIServiceHealth(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceHealth::OAIServiceHealth() {
    this->initializeModel();
}

OAIServiceHealth::~OAIServiceHealth() {}

void OAIServiceHealth::initializeModel() {

    m_service_name_isSet = false;
    m_service_name_isValid = false;

    m_insight_isSet = false;
    m_insight_isValid = false;

    m_analyzed_resource_count_isSet = false;
    m_analyzed_resource_count_isValid = false;
}

void OAIServiceHealth::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceHealth::fromJsonObject(QJsonObject json) {

    m_service_name_isValid = ::OpenAPI::fromJsonValue(m_service_name, json[QString("ServiceName")]);
    m_service_name_isSet = !json[QString("ServiceName")].isNull() && m_service_name_isValid;

    m_insight_isValid = ::OpenAPI::fromJsonValue(m_insight, json[QString("Insight")]);
    m_insight_isSet = !json[QString("Insight")].isNull() && m_insight_isValid;

    m_analyzed_resource_count_isValid = ::OpenAPI::fromJsonValue(m_analyzed_resource_count, json[QString("AnalyzedResourceCount")]);
    m_analyzed_resource_count_isSet = !json[QString("AnalyzedResourceCount")].isNull() && m_analyzed_resource_count_isValid;
}

QString OAIServiceHealth::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceHealth::asJsonObject() const {
    QJsonObject obj;
    if (m_service_name.isSet()) {
        obj.insert(QString("ServiceName"), ::OpenAPI::toJsonValue(m_service_name));
    }
    if (m_insight.isSet()) {
        obj.insert(QString("Insight"), ::OpenAPI::toJsonValue(m_insight));
    }
    if (m_analyzed_resource_count_isSet) {
        obj.insert(QString("AnalyzedResourceCount"), ::OpenAPI::toJsonValue(m_analyzed_resource_count));
    }
    return obj;
}

OAIServiceName OAIServiceHealth::getServiceName() const {
    return m_service_name;
}
void OAIServiceHealth::setServiceName(const OAIServiceName &service_name) {
    m_service_name = service_name;
    m_service_name_isSet = true;
}

bool OAIServiceHealth::is_service_name_Set() const{
    return m_service_name_isSet;
}

bool OAIServiceHealth::is_service_name_Valid() const{
    return m_service_name_isValid;
}

OAIServiceHealth_Insight OAIServiceHealth::getInsight() const {
    return m_insight;
}
void OAIServiceHealth::setInsight(const OAIServiceHealth_Insight &insight) {
    m_insight = insight;
    m_insight_isSet = true;
}

bool OAIServiceHealth::is_insight_Set() const{
    return m_insight_isSet;
}

bool OAIServiceHealth::is_insight_Valid() const{
    return m_insight_isValid;
}

qint32 OAIServiceHealth::getAnalyzedResourceCount() const {
    return m_analyzed_resource_count;
}
void OAIServiceHealth::setAnalyzedResourceCount(const qint32 &analyzed_resource_count) {
    m_analyzed_resource_count = analyzed_resource_count;
    m_analyzed_resource_count_isSet = true;
}

bool OAIServiceHealth::is_analyzed_resource_count_Set() const{
    return m_analyzed_resource_count_isSet;
}

bool OAIServiceHealth::is_analyzed_resource_count_Valid() const{
    return m_analyzed_resource_count_isValid;
}

bool OAIServiceHealth::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_service_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_insight.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_analyzed_resource_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceHealth::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
