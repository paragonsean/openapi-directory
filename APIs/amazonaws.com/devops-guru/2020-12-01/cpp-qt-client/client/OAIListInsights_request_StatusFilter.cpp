/**
 * Amazon DevOps Guru
 * <p> Amazon DevOps Guru is a fully managed service that helps you identify anomalous behavior in business critical operational applications. You specify the Amazon Web Services resources that you want DevOps Guru to cover, then the Amazon CloudWatch metrics and Amazon Web Services CloudTrail events related to those resources are analyzed. When anomalous behavior is detected, DevOps Guru creates an <i>insight</i> that includes recommendations, related events, and related metrics that can help you improve your operational applications. For more information, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html\">What is Amazon DevOps Guru</a>. </p> <p> You can specify 1 or 2 Amazon Simple Notification Service topics so you are notified every time a new insight is created. You can also enable DevOps Guru to generate an OpsItem in Amazon Web Services Systems Manager for each insight to help you manage and track your work addressing insights. </p> <p> To learn about the DevOps Guru workflow, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html#how-it-works\">How DevOps Guru works</a>. To learn about DevOps Guru concepts, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/concepts.html\">Concepts in DevOps Guru</a>. </p>
 *
 * The version of the OpenAPI document: 2020-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListInsights_request_StatusFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListInsights_request_StatusFilter::OAIListInsights_request_StatusFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListInsights_request_StatusFilter::OAIListInsights_request_StatusFilter() {
    this->initializeModel();
}

OAIListInsights_request_StatusFilter::~OAIListInsights_request_StatusFilter() {}

void OAIListInsights_request_StatusFilter::initializeModel() {

    m_ongoing_isSet = false;
    m_ongoing_isValid = false;

    m_closed_isSet = false;
    m_closed_isValid = false;

    m_any_isSet = false;
    m_any_isValid = false;
}

void OAIListInsights_request_StatusFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListInsights_request_StatusFilter::fromJsonObject(QJsonObject json) {

    m_ongoing_isValid = ::OpenAPI::fromJsonValue(m_ongoing, json[QString("Ongoing")]);
    m_ongoing_isSet = !json[QString("Ongoing")].isNull() && m_ongoing_isValid;

    m_closed_isValid = ::OpenAPI::fromJsonValue(m_closed, json[QString("Closed")]);
    m_closed_isSet = !json[QString("Closed")].isNull() && m_closed_isValid;

    m_any_isValid = ::OpenAPI::fromJsonValue(m_any, json[QString("Any")]);
    m_any_isSet = !json[QString("Any")].isNull() && m_any_isValid;
}

QString OAIListInsights_request_StatusFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListInsights_request_StatusFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_ongoing.isSet()) {
        obj.insert(QString("Ongoing"), ::OpenAPI::toJsonValue(m_ongoing));
    }
    if (m_closed.isSet()) {
        obj.insert(QString("Closed"), ::OpenAPI::toJsonValue(m_closed));
    }
    if (m_any.isSet()) {
        obj.insert(QString("Any"), ::OpenAPI::toJsonValue(m_any));
    }
    return obj;
}

OAIListInsights_request_StatusFilter_Ongoing OAIListInsights_request_StatusFilter::getOngoing() const {
    return m_ongoing;
}
void OAIListInsights_request_StatusFilter::setOngoing(const OAIListInsights_request_StatusFilter_Ongoing &ongoing) {
    m_ongoing = ongoing;
    m_ongoing_isSet = true;
}

bool OAIListInsights_request_StatusFilter::is_ongoing_Set() const{
    return m_ongoing_isSet;
}

bool OAIListInsights_request_StatusFilter::is_ongoing_Valid() const{
    return m_ongoing_isValid;
}

OAIListInsights_request_StatusFilter_Closed OAIListInsights_request_StatusFilter::getClosed() const {
    return m_closed;
}
void OAIListInsights_request_StatusFilter::setClosed(const OAIListInsights_request_StatusFilter_Closed &closed) {
    m_closed = closed;
    m_closed_isSet = true;
}

bool OAIListInsights_request_StatusFilter::is_closed_Set() const{
    return m_closed_isSet;
}

bool OAIListInsights_request_StatusFilter::is_closed_Valid() const{
    return m_closed_isValid;
}

OAIListInsights_request_StatusFilter_Any OAIListInsights_request_StatusFilter::getAny() const {
    return m_any;
}
void OAIListInsights_request_StatusFilter::setAny(const OAIListInsights_request_StatusFilter_Any &any) {
    m_any = any;
    m_any_isSet = true;
}

bool OAIListInsights_request_StatusFilter::is_any_Set() const{
    return m_any_isSet;
}

bool OAIListInsights_request_StatusFilter::is_any_Valid() const{
    return m_any_isValid;
}

bool OAIListInsights_request_StatusFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ongoing.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_closed.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_any.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListInsights_request_StatusFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
