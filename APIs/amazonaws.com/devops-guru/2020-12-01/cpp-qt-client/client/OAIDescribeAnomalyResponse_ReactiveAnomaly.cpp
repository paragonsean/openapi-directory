/**
 * Amazon DevOps Guru
 * <p> Amazon DevOps Guru is a fully managed service that helps you identify anomalous behavior in business critical operational applications. You specify the Amazon Web Services resources that you want DevOps Guru to cover, then the Amazon CloudWatch metrics and Amazon Web Services CloudTrail events related to those resources are analyzed. When anomalous behavior is detected, DevOps Guru creates an <i>insight</i> that includes recommendations, related events, and related metrics that can help you improve your operational applications. For more information, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html\">What is Amazon DevOps Guru</a>. </p> <p> You can specify 1 or 2 Amazon Simple Notification Service topics so you are notified every time a new insight is created. You can also enable DevOps Guru to generate an OpsItem in Amazon Web Services Systems Manager for each insight to help you manage and track your work addressing insights. </p> <p> To learn about the DevOps Guru workflow, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html#how-it-works\">How DevOps Guru works</a>. To learn about DevOps Guru concepts, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/concepts.html\">Concepts in DevOps Guru</a>. </p>
 *
 * The version of the OpenAPI document: 2020-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeAnomalyResponse_ReactiveAnomaly.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeAnomalyResponse_ReactiveAnomaly::OAIDescribeAnomalyResponse_ReactiveAnomaly(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeAnomalyResponse_ReactiveAnomaly::OAIDescribeAnomalyResponse_ReactiveAnomaly() {
    this->initializeModel();
}

OAIDescribeAnomalyResponse_ReactiveAnomaly::~OAIDescribeAnomalyResponse_ReactiveAnomaly() {}

void OAIDescribeAnomalyResponse_ReactiveAnomaly::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_anomaly_time_range_isSet = false;
    m_anomaly_time_range_isValid = false;

    m_anomaly_reported_time_range_isSet = false;
    m_anomaly_reported_time_range_isValid = false;

    m_source_details_isSet = false;
    m_source_details_isValid = false;

    m_associated_insight_id_isSet = false;
    m_associated_insight_id_isValid = false;

    m_resource_collection_isSet = false;
    m_resource_collection_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_causal_anomaly_id_isSet = false;
    m_causal_anomaly_id_isValid = false;

    m_anomaly_resources_isSet = false;
    m_anomaly_resources_isValid = false;
}

void OAIDescribeAnomalyResponse_ReactiveAnomaly::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeAnomalyResponse_ReactiveAnomaly::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("Severity")]);
    m_severity_isSet = !json[QString("Severity")].isNull() && m_severity_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_anomaly_time_range_isValid = ::OpenAPI::fromJsonValue(m_anomaly_time_range, json[QString("AnomalyTimeRange")]);
    m_anomaly_time_range_isSet = !json[QString("AnomalyTimeRange")].isNull() && m_anomaly_time_range_isValid;

    m_anomaly_reported_time_range_isValid = ::OpenAPI::fromJsonValue(m_anomaly_reported_time_range, json[QString("AnomalyReportedTimeRange")]);
    m_anomaly_reported_time_range_isSet = !json[QString("AnomalyReportedTimeRange")].isNull() && m_anomaly_reported_time_range_isValid;

    m_source_details_isValid = ::OpenAPI::fromJsonValue(m_source_details, json[QString("SourceDetails")]);
    m_source_details_isSet = !json[QString("SourceDetails")].isNull() && m_source_details_isValid;

    m_associated_insight_id_isValid = ::OpenAPI::fromJsonValue(m_associated_insight_id, json[QString("AssociatedInsightId")]);
    m_associated_insight_id_isSet = !json[QString("AssociatedInsightId")].isNull() && m_associated_insight_id_isValid;

    m_resource_collection_isValid = ::OpenAPI::fromJsonValue(m_resource_collection, json[QString("ResourceCollection")]);
    m_resource_collection_isSet = !json[QString("ResourceCollection")].isNull() && m_resource_collection_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_causal_anomaly_id_isValid = ::OpenAPI::fromJsonValue(m_causal_anomaly_id, json[QString("CausalAnomalyId")]);
    m_causal_anomaly_id_isSet = !json[QString("CausalAnomalyId")].isNull() && m_causal_anomaly_id_isValid;

    m_anomaly_resources_isValid = ::OpenAPI::fromJsonValue(m_anomaly_resources, json[QString("AnomalyResources")]);
    m_anomaly_resources_isSet = !json[QString("AnomalyResources")].isNull() && m_anomaly_resources_isValid;
}

QString OAIDescribeAnomalyResponse_ReactiveAnomaly::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeAnomalyResponse_ReactiveAnomaly::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_severity.isSet()) {
        obj.insert(QString("Severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_anomaly_time_range.isSet()) {
        obj.insert(QString("AnomalyTimeRange"), ::OpenAPI::toJsonValue(m_anomaly_time_range));
    }
    if (m_anomaly_reported_time_range.isSet()) {
        obj.insert(QString("AnomalyReportedTimeRange"), ::OpenAPI::toJsonValue(m_anomaly_reported_time_range));
    }
    if (m_source_details.isSet()) {
        obj.insert(QString("SourceDetails"), ::OpenAPI::toJsonValue(m_source_details));
    }
    if (m_associated_insight_id_isSet) {
        obj.insert(QString("AssociatedInsightId"), ::OpenAPI::toJsonValue(m_associated_insight_id));
    }
    if (m_resource_collection.isSet()) {
        obj.insert(QString("ResourceCollection"), ::OpenAPI::toJsonValue(m_resource_collection));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_causal_anomaly_id_isSet) {
        obj.insert(QString("CausalAnomalyId"), ::OpenAPI::toJsonValue(m_causal_anomaly_id));
    }
    if (m_anomaly_resources.isSet()) {
        obj.insert(QString("AnomalyResources"), ::OpenAPI::toJsonValue(m_anomaly_resources));
    }
    return obj;
}

QString OAIDescribeAnomalyResponse_ReactiveAnomaly::getId() const {
    return m_id;
}
void OAIDescribeAnomalyResponse_ReactiveAnomaly::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDescribeAnomalyResponse_ReactiveAnomaly::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDescribeAnomalyResponse_ReactiveAnomaly::is_id_Valid() const{
    return m_id_isValid;
}

OAIAnomalySeverity OAIDescribeAnomalyResponse_ReactiveAnomaly::getSeverity() const {
    return m_severity;
}
void OAIDescribeAnomalyResponse_ReactiveAnomaly::setSeverity(const OAIAnomalySeverity &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAIDescribeAnomalyResponse_ReactiveAnomaly::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAIDescribeAnomalyResponse_ReactiveAnomaly::is_severity_Valid() const{
    return m_severity_isValid;
}

OAIAnomalyStatus OAIDescribeAnomalyResponse_ReactiveAnomaly::getStatus() const {
    return m_status;
}
void OAIDescribeAnomalyResponse_ReactiveAnomaly::setStatus(const OAIAnomalyStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeAnomalyResponse_ReactiveAnomaly::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeAnomalyResponse_ReactiveAnomaly::is_status_Valid() const{
    return m_status_isValid;
}

OAIAnomalyTimeRange OAIDescribeAnomalyResponse_ReactiveAnomaly::getAnomalyTimeRange() const {
    return m_anomaly_time_range;
}
void OAIDescribeAnomalyResponse_ReactiveAnomaly::setAnomalyTimeRange(const OAIAnomalyTimeRange &anomaly_time_range) {
    m_anomaly_time_range = anomaly_time_range;
    m_anomaly_time_range_isSet = true;
}

bool OAIDescribeAnomalyResponse_ReactiveAnomaly::is_anomaly_time_range_Set() const{
    return m_anomaly_time_range_isSet;
}

bool OAIDescribeAnomalyResponse_ReactiveAnomaly::is_anomaly_time_range_Valid() const{
    return m_anomaly_time_range_isValid;
}

OAIProactiveAnomaly_AnomalyReportedTimeRange OAIDescribeAnomalyResponse_ReactiveAnomaly::getAnomalyReportedTimeRange() const {
    return m_anomaly_reported_time_range;
}
void OAIDescribeAnomalyResponse_ReactiveAnomaly::setAnomalyReportedTimeRange(const OAIProactiveAnomaly_AnomalyReportedTimeRange &anomaly_reported_time_range) {
    m_anomaly_reported_time_range = anomaly_reported_time_range;
    m_anomaly_reported_time_range_isSet = true;
}

bool OAIDescribeAnomalyResponse_ReactiveAnomaly::is_anomaly_reported_time_range_Set() const{
    return m_anomaly_reported_time_range_isSet;
}

bool OAIDescribeAnomalyResponse_ReactiveAnomaly::is_anomaly_reported_time_range_Valid() const{
    return m_anomaly_reported_time_range_isValid;
}

OAIProactiveAnomaly_SourceDetails OAIDescribeAnomalyResponse_ReactiveAnomaly::getSourceDetails() const {
    return m_source_details;
}
void OAIDescribeAnomalyResponse_ReactiveAnomaly::setSourceDetails(const OAIProactiveAnomaly_SourceDetails &source_details) {
    m_source_details = source_details;
    m_source_details_isSet = true;
}

bool OAIDescribeAnomalyResponse_ReactiveAnomaly::is_source_details_Set() const{
    return m_source_details_isSet;
}

bool OAIDescribeAnomalyResponse_ReactiveAnomaly::is_source_details_Valid() const{
    return m_source_details_isValid;
}

QString OAIDescribeAnomalyResponse_ReactiveAnomaly::getAssociatedInsightId() const {
    return m_associated_insight_id;
}
void OAIDescribeAnomalyResponse_ReactiveAnomaly::setAssociatedInsightId(const QString &associated_insight_id) {
    m_associated_insight_id = associated_insight_id;
    m_associated_insight_id_isSet = true;
}

bool OAIDescribeAnomalyResponse_ReactiveAnomaly::is_associated_insight_id_Set() const{
    return m_associated_insight_id_isSet;
}

bool OAIDescribeAnomalyResponse_ReactiveAnomaly::is_associated_insight_id_Valid() const{
    return m_associated_insight_id_isValid;
}

OAIResourceCollection OAIDescribeAnomalyResponse_ReactiveAnomaly::getResourceCollection() const {
    return m_resource_collection;
}
void OAIDescribeAnomalyResponse_ReactiveAnomaly::setResourceCollection(const OAIResourceCollection &resource_collection) {
    m_resource_collection = resource_collection;
    m_resource_collection_isSet = true;
}

bool OAIDescribeAnomalyResponse_ReactiveAnomaly::is_resource_collection_Set() const{
    return m_resource_collection_isSet;
}

bool OAIDescribeAnomalyResponse_ReactiveAnomaly::is_resource_collection_Valid() const{
    return m_resource_collection_isValid;
}

OAIAnomalyType OAIDescribeAnomalyResponse_ReactiveAnomaly::getType() const {
    return m_type;
}
void OAIDescribeAnomalyResponse_ReactiveAnomaly::setType(const OAIAnomalyType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDescribeAnomalyResponse_ReactiveAnomaly::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDescribeAnomalyResponse_ReactiveAnomaly::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIDescribeAnomalyResponse_ReactiveAnomaly::getName() const {
    return m_name;
}
void OAIDescribeAnomalyResponse_ReactiveAnomaly::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDescribeAnomalyResponse_ReactiveAnomaly::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDescribeAnomalyResponse_ReactiveAnomaly::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDescribeAnomalyResponse_ReactiveAnomaly::getDescription() const {
    return m_description;
}
void OAIDescribeAnomalyResponse_ReactiveAnomaly::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDescribeAnomalyResponse_ReactiveAnomaly::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDescribeAnomalyResponse_ReactiveAnomaly::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIDescribeAnomalyResponse_ReactiveAnomaly::getCausalAnomalyId() const {
    return m_causal_anomaly_id;
}
void OAIDescribeAnomalyResponse_ReactiveAnomaly::setCausalAnomalyId(const QString &causal_anomaly_id) {
    m_causal_anomaly_id = causal_anomaly_id;
    m_causal_anomaly_id_isSet = true;
}

bool OAIDescribeAnomalyResponse_ReactiveAnomaly::is_causal_anomaly_id_Set() const{
    return m_causal_anomaly_id_isSet;
}

bool OAIDescribeAnomalyResponse_ReactiveAnomaly::is_causal_anomaly_id_Valid() const{
    return m_causal_anomaly_id_isValid;
}

QList OAIDescribeAnomalyResponse_ReactiveAnomaly::getAnomalyResources() const {
    return m_anomaly_resources;
}
void OAIDescribeAnomalyResponse_ReactiveAnomaly::setAnomalyResources(const QList &anomaly_resources) {
    m_anomaly_resources = anomaly_resources;
    m_anomaly_resources_isSet = true;
}

bool OAIDescribeAnomalyResponse_ReactiveAnomaly::is_anomaly_resources_Set() const{
    return m_anomaly_resources_isSet;
}

bool OAIDescribeAnomalyResponse_ReactiveAnomaly::is_anomaly_resources_Valid() const{
    return m_anomaly_resources_isValid;
}

bool OAIDescribeAnomalyResponse_ReactiveAnomaly::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_anomaly_time_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_anomaly_reported_time_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_associated_insight_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_collection.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_causal_anomaly_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_anomaly_resources.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeAnomalyResponse_ReactiveAnomaly::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
