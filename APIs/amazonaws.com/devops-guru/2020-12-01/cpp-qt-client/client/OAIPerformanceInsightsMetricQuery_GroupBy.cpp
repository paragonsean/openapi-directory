/**
 * Amazon DevOps Guru
 * <p> Amazon DevOps Guru is a fully managed service that helps you identify anomalous behavior in business critical operational applications. You specify the Amazon Web Services resources that you want DevOps Guru to cover, then the Amazon CloudWatch metrics and Amazon Web Services CloudTrail events related to those resources are analyzed. When anomalous behavior is detected, DevOps Guru creates an <i>insight</i> that includes recommendations, related events, and related metrics that can help you improve your operational applications. For more information, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html\">What is Amazon DevOps Guru</a>. </p> <p> You can specify 1 or 2 Amazon Simple Notification Service topics so you are notified every time a new insight is created. You can also enable DevOps Guru to generate an OpsItem in Amazon Web Services Systems Manager for each insight to help you manage and track your work addressing insights. </p> <p> To learn about the DevOps Guru workflow, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html#how-it-works\">How DevOps Guru works</a>. To learn about DevOps Guru concepts, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/concepts.html\">Concepts in DevOps Guru</a>. </p>
 *
 * The version of the OpenAPI document: 2020-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPerformanceInsightsMetricQuery_GroupBy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPerformanceInsightsMetricQuery_GroupBy::OAIPerformanceInsightsMetricQuery_GroupBy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPerformanceInsightsMetricQuery_GroupBy::OAIPerformanceInsightsMetricQuery_GroupBy() {
    this->initializeModel();
}

OAIPerformanceInsightsMetricQuery_GroupBy::~OAIPerformanceInsightsMetricQuery_GroupBy() {}

void OAIPerformanceInsightsMetricQuery_GroupBy::initializeModel() {

    m_group_isSet = false;
    m_group_isValid = false;

    m_dimensions_isSet = false;
    m_dimensions_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;
}

void OAIPerformanceInsightsMetricQuery_GroupBy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPerformanceInsightsMetricQuery_GroupBy::fromJsonObject(QJsonObject json) {

    m_group_isValid = ::OpenAPI::fromJsonValue(m_group, json[QString("Group")]);
    m_group_isSet = !json[QString("Group")].isNull() && m_group_isValid;

    m_dimensions_isValid = ::OpenAPI::fromJsonValue(m_dimensions, json[QString("Dimensions")]);
    m_dimensions_isSet = !json[QString("Dimensions")].isNull() && m_dimensions_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("Limit")]);
    m_limit_isSet = !json[QString("Limit")].isNull() && m_limit_isValid;
}

QString OAIPerformanceInsightsMetricQuery_GroupBy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPerformanceInsightsMetricQuery_GroupBy::asJsonObject() const {
    QJsonObject obj;
    if (m_group_isSet) {
        obj.insert(QString("Group"), ::OpenAPI::toJsonValue(m_group));
    }
    if (m_dimensions.isSet()) {
        obj.insert(QString("Dimensions"), ::OpenAPI::toJsonValue(m_dimensions));
    }
    if (m_limit_isSet) {
        obj.insert(QString("Limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    return obj;
}

QString OAIPerformanceInsightsMetricQuery_GroupBy::getGroup() const {
    return m_group;
}
void OAIPerformanceInsightsMetricQuery_GroupBy::setGroup(const QString &group) {
    m_group = group;
    m_group_isSet = true;
}

bool OAIPerformanceInsightsMetricQuery_GroupBy::is_group_Set() const{
    return m_group_isSet;
}

bool OAIPerformanceInsightsMetricQuery_GroupBy::is_group_Valid() const{
    return m_group_isValid;
}

QList OAIPerformanceInsightsMetricQuery_GroupBy::getDimensions() const {
    return m_dimensions;
}
void OAIPerformanceInsightsMetricQuery_GroupBy::setDimensions(const QList &dimensions) {
    m_dimensions = dimensions;
    m_dimensions_isSet = true;
}

bool OAIPerformanceInsightsMetricQuery_GroupBy::is_dimensions_Set() const{
    return m_dimensions_isSet;
}

bool OAIPerformanceInsightsMetricQuery_GroupBy::is_dimensions_Valid() const{
    return m_dimensions_isValid;
}

qint32 OAIPerformanceInsightsMetricQuery_GroupBy::getLimit() const {
    return m_limit;
}
void OAIPerformanceInsightsMetricQuery_GroupBy::setLimit(const qint32 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIPerformanceInsightsMetricQuery_GroupBy::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIPerformanceInsightsMetricQuery_GroupBy::is_limit_Valid() const{
    return m_limit_isValid;
}

bool OAIPerformanceInsightsMetricQuery_GroupBy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimensions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPerformanceInsightsMetricQuery_GroupBy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
