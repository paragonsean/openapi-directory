/**
 * Amazon DevOps Guru
 * <p> Amazon DevOps Guru is a fully managed service that helps you identify anomalous behavior in business critical operational applications. You specify the Amazon Web Services resources that you want DevOps Guru to cover, then the Amazon CloudWatch metrics and Amazon Web Services CloudTrail events related to those resources are analyzed. When anomalous behavior is detected, DevOps Guru creates an <i>insight</i> that includes recommendations, related events, and related metrics that can help you improve your operational applications. For more information, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html\">What is Amazon DevOps Guru</a>. </p> <p> You can specify 1 or 2 Amazon Simple Notification Service topics so you are notified every time a new insight is created. You can also enable DevOps Guru to generate an OpsItem in Amazon Web Services Systems Manager for each insight to help you manage and track your work addressing insights. </p> <p> To learn about the DevOps Guru workflow, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html#how-it-works\">How DevOps Guru works</a>. To learn about DevOps Guru concepts, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/concepts.html\">Concepts in DevOps Guru</a>. </p>
 *
 * The version of the OpenAPI document: 2020-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILogAnomalyClass.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILogAnomalyClass::OAILogAnomalyClass(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILogAnomalyClass::OAILogAnomalyClass() {
    this->initializeModel();
}

OAILogAnomalyClass::~OAILogAnomalyClass() {}

void OAILogAnomalyClass::initializeModel() {

    m_log_stream_name_isSet = false;
    m_log_stream_name_isValid = false;

    m_log_anomaly_type_isSet = false;
    m_log_anomaly_type_isValid = false;

    m_log_anomaly_token_isSet = false;
    m_log_anomaly_token_isValid = false;

    m_log_event_id_isSet = false;
    m_log_event_id_isValid = false;

    m_explanation_isSet = false;
    m_explanation_isValid = false;

    m_number_of_log_lines_occurrences_isSet = false;
    m_number_of_log_lines_occurrences_isValid = false;

    m_log_event_timestamp_isSet = false;
    m_log_event_timestamp_isValid = false;
}

void OAILogAnomalyClass::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILogAnomalyClass::fromJsonObject(QJsonObject json) {

    m_log_stream_name_isValid = ::OpenAPI::fromJsonValue(m_log_stream_name, json[QString("LogStreamName")]);
    m_log_stream_name_isSet = !json[QString("LogStreamName")].isNull() && m_log_stream_name_isValid;

    m_log_anomaly_type_isValid = ::OpenAPI::fromJsonValue(m_log_anomaly_type, json[QString("LogAnomalyType")]);
    m_log_anomaly_type_isSet = !json[QString("LogAnomalyType")].isNull() && m_log_anomaly_type_isValid;

    m_log_anomaly_token_isValid = ::OpenAPI::fromJsonValue(m_log_anomaly_token, json[QString("LogAnomalyToken")]);
    m_log_anomaly_token_isSet = !json[QString("LogAnomalyToken")].isNull() && m_log_anomaly_token_isValid;

    m_log_event_id_isValid = ::OpenAPI::fromJsonValue(m_log_event_id, json[QString("LogEventId")]);
    m_log_event_id_isSet = !json[QString("LogEventId")].isNull() && m_log_event_id_isValid;

    m_explanation_isValid = ::OpenAPI::fromJsonValue(m_explanation, json[QString("Explanation")]);
    m_explanation_isSet = !json[QString("Explanation")].isNull() && m_explanation_isValid;

    m_number_of_log_lines_occurrences_isValid = ::OpenAPI::fromJsonValue(m_number_of_log_lines_occurrences, json[QString("NumberOfLogLinesOccurrences")]);
    m_number_of_log_lines_occurrences_isSet = !json[QString("NumberOfLogLinesOccurrences")].isNull() && m_number_of_log_lines_occurrences_isValid;

    m_log_event_timestamp_isValid = ::OpenAPI::fromJsonValue(m_log_event_timestamp, json[QString("LogEventTimestamp")]);
    m_log_event_timestamp_isSet = !json[QString("LogEventTimestamp")].isNull() && m_log_event_timestamp_isValid;
}

QString OAILogAnomalyClass::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILogAnomalyClass::asJsonObject() const {
    QJsonObject obj;
    if (m_log_stream_name_isSet) {
        obj.insert(QString("LogStreamName"), ::OpenAPI::toJsonValue(m_log_stream_name));
    }
    if (m_log_anomaly_type.isSet()) {
        obj.insert(QString("LogAnomalyType"), ::OpenAPI::toJsonValue(m_log_anomaly_type));
    }
    if (m_log_anomaly_token_isSet) {
        obj.insert(QString("LogAnomalyToken"), ::OpenAPI::toJsonValue(m_log_anomaly_token));
    }
    if (m_log_event_id_isSet) {
        obj.insert(QString("LogEventId"), ::OpenAPI::toJsonValue(m_log_event_id));
    }
    if (m_explanation_isSet) {
        obj.insert(QString("Explanation"), ::OpenAPI::toJsonValue(m_explanation));
    }
    if (m_number_of_log_lines_occurrences_isSet) {
        obj.insert(QString("NumberOfLogLinesOccurrences"), ::OpenAPI::toJsonValue(m_number_of_log_lines_occurrences));
    }
    if (m_log_event_timestamp_isSet) {
        obj.insert(QString("LogEventTimestamp"), ::OpenAPI::toJsonValue(m_log_event_timestamp));
    }
    return obj;
}

QString OAILogAnomalyClass::getLogStreamName() const {
    return m_log_stream_name;
}
void OAILogAnomalyClass::setLogStreamName(const QString &log_stream_name) {
    m_log_stream_name = log_stream_name;
    m_log_stream_name_isSet = true;
}

bool OAILogAnomalyClass::is_log_stream_name_Set() const{
    return m_log_stream_name_isSet;
}

bool OAILogAnomalyClass::is_log_stream_name_Valid() const{
    return m_log_stream_name_isValid;
}

OAILogAnomalyType OAILogAnomalyClass::getLogAnomalyType() const {
    return m_log_anomaly_type;
}
void OAILogAnomalyClass::setLogAnomalyType(const OAILogAnomalyType &log_anomaly_type) {
    m_log_anomaly_type = log_anomaly_type;
    m_log_anomaly_type_isSet = true;
}

bool OAILogAnomalyClass::is_log_anomaly_type_Set() const{
    return m_log_anomaly_type_isSet;
}

bool OAILogAnomalyClass::is_log_anomaly_type_Valid() const{
    return m_log_anomaly_type_isValid;
}

QString OAILogAnomalyClass::getLogAnomalyToken() const {
    return m_log_anomaly_token;
}
void OAILogAnomalyClass::setLogAnomalyToken(const QString &log_anomaly_token) {
    m_log_anomaly_token = log_anomaly_token;
    m_log_anomaly_token_isSet = true;
}

bool OAILogAnomalyClass::is_log_anomaly_token_Set() const{
    return m_log_anomaly_token_isSet;
}

bool OAILogAnomalyClass::is_log_anomaly_token_Valid() const{
    return m_log_anomaly_token_isValid;
}

QString OAILogAnomalyClass::getLogEventId() const {
    return m_log_event_id;
}
void OAILogAnomalyClass::setLogEventId(const QString &log_event_id) {
    m_log_event_id = log_event_id;
    m_log_event_id_isSet = true;
}

bool OAILogAnomalyClass::is_log_event_id_Set() const{
    return m_log_event_id_isSet;
}

bool OAILogAnomalyClass::is_log_event_id_Valid() const{
    return m_log_event_id_isValid;
}

QString OAILogAnomalyClass::getExplanation() const {
    return m_explanation;
}
void OAILogAnomalyClass::setExplanation(const QString &explanation) {
    m_explanation = explanation;
    m_explanation_isSet = true;
}

bool OAILogAnomalyClass::is_explanation_Set() const{
    return m_explanation_isSet;
}

bool OAILogAnomalyClass::is_explanation_Valid() const{
    return m_explanation_isValid;
}

qint32 OAILogAnomalyClass::getNumberOfLogLinesOccurrences() const {
    return m_number_of_log_lines_occurrences;
}
void OAILogAnomalyClass::setNumberOfLogLinesOccurrences(const qint32 &number_of_log_lines_occurrences) {
    m_number_of_log_lines_occurrences = number_of_log_lines_occurrences;
    m_number_of_log_lines_occurrences_isSet = true;
}

bool OAILogAnomalyClass::is_number_of_log_lines_occurrences_Set() const{
    return m_number_of_log_lines_occurrences_isSet;
}

bool OAILogAnomalyClass::is_number_of_log_lines_occurrences_Valid() const{
    return m_number_of_log_lines_occurrences_isValid;
}

QDateTime OAILogAnomalyClass::getLogEventTimestamp() const {
    return m_log_event_timestamp;
}
void OAILogAnomalyClass::setLogEventTimestamp(const QDateTime &log_event_timestamp) {
    m_log_event_timestamp = log_event_timestamp;
    m_log_event_timestamp_isSet = true;
}

bool OAILogAnomalyClass::is_log_event_timestamp_Set() const{
    return m_log_event_timestamp_isSet;
}

bool OAILogAnomalyClass::is_log_event_timestamp_Valid() const{
    return m_log_event_timestamp_isValid;
}

bool OAILogAnomalyClass::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_log_stream_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_anomaly_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_anomaly_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_event_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_explanation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_log_lines_occurrences_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_event_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILogAnomalyClass::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
