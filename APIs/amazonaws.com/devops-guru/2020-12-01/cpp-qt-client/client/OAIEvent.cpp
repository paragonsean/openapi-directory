/**
 * Amazon DevOps Guru
 * <p> Amazon DevOps Guru is a fully managed service that helps you identify anomalous behavior in business critical operational applications. You specify the Amazon Web Services resources that you want DevOps Guru to cover, then the Amazon CloudWatch metrics and Amazon Web Services CloudTrail events related to those resources are analyzed. When anomalous behavior is detected, DevOps Guru creates an <i>insight</i> that includes recommendations, related events, and related metrics that can help you improve your operational applications. For more information, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html\">What is Amazon DevOps Guru</a>. </p> <p> You can specify 1 or 2 Amazon Simple Notification Service topics so you are notified every time a new insight is created. You can also enable DevOps Guru to generate an OpsItem in Amazon Web Services Systems Manager for each insight to help you manage and track your work addressing insights. </p> <p> To learn about the DevOps Guru workflow, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html#how-it-works\">How DevOps Guru works</a>. To learn about DevOps Guru concepts, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/concepts.html\">Concepts in DevOps Guru</a>. </p>
 *
 * The version of the OpenAPI document: 2020-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvent::OAIEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvent::OAIEvent() {
    this->initializeModel();
}

OAIEvent::~OAIEvent() {}

void OAIEvent::initializeModel() {

    m_resource_collection_isSet = false;
    m_resource_collection_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_time_isSet = false;
    m_time_isValid = false;

    m_event_source_isSet = false;
    m_event_source_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_data_source_isSet = false;
    m_data_source_isValid = false;

    m_event_class_isSet = false;
    m_event_class_isValid = false;

    m_resources_isSet = false;
    m_resources_isValid = false;
}

void OAIEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvent::fromJsonObject(QJsonObject json) {

    m_resource_collection_isValid = ::OpenAPI::fromJsonValue(m_resource_collection, json[QString("ResourceCollection")]);
    m_resource_collection_isSet = !json[QString("ResourceCollection")].isNull() && m_resource_collection_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_time_isValid = ::OpenAPI::fromJsonValue(m_time, json[QString("Time")]);
    m_time_isSet = !json[QString("Time")].isNull() && m_time_isValid;

    m_event_source_isValid = ::OpenAPI::fromJsonValue(m_event_source, json[QString("EventSource")]);
    m_event_source_isSet = !json[QString("EventSource")].isNull() && m_event_source_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_data_source_isValid = ::OpenAPI::fromJsonValue(m_data_source, json[QString("DataSource")]);
    m_data_source_isSet = !json[QString("DataSource")].isNull() && m_data_source_isValid;

    m_event_class_isValid = ::OpenAPI::fromJsonValue(m_event_class, json[QString("EventClass")]);
    m_event_class_isSet = !json[QString("EventClass")].isNull() && m_event_class_isValid;

    m_resources_isValid = ::OpenAPI::fromJsonValue(m_resources, json[QString("Resources")]);
    m_resources_isSet = !json[QString("Resources")].isNull() && m_resources_isValid;
}

QString OAIEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_collection.isSet()) {
        obj.insert(QString("ResourceCollection"), ::OpenAPI::toJsonValue(m_resource_collection));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_time_isSet) {
        obj.insert(QString("Time"), ::OpenAPI::toJsonValue(m_time));
    }
    if (m_event_source_isSet) {
        obj.insert(QString("EventSource"), ::OpenAPI::toJsonValue(m_event_source));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_data_source.isSet()) {
        obj.insert(QString("DataSource"), ::OpenAPI::toJsonValue(m_data_source));
    }
    if (m_event_class.isSet()) {
        obj.insert(QString("EventClass"), ::OpenAPI::toJsonValue(m_event_class));
    }
    if (m_resources.isSet()) {
        obj.insert(QString("Resources"), ::OpenAPI::toJsonValue(m_resources));
    }
    return obj;
}

OAIResourceCollection OAIEvent::getResourceCollection() const {
    return m_resource_collection;
}
void OAIEvent::setResourceCollection(const OAIResourceCollection &resource_collection) {
    m_resource_collection = resource_collection;
    m_resource_collection_isSet = true;
}

bool OAIEvent::is_resource_collection_Set() const{
    return m_resource_collection_isSet;
}

bool OAIEvent::is_resource_collection_Valid() const{
    return m_resource_collection_isValid;
}

QString OAIEvent::getId() const {
    return m_id;
}
void OAIEvent::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIEvent::is_id_Set() const{
    return m_id_isSet;
}

bool OAIEvent::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIEvent::getTime() const {
    return m_time;
}
void OAIEvent::setTime(const QDateTime &time) {
    m_time = time;
    m_time_isSet = true;
}

bool OAIEvent::is_time_Set() const{
    return m_time_isSet;
}

bool OAIEvent::is_time_Valid() const{
    return m_time_isValid;
}

QString OAIEvent::getEventSource() const {
    return m_event_source;
}
void OAIEvent::setEventSource(const QString &event_source) {
    m_event_source = event_source;
    m_event_source_isSet = true;
}

bool OAIEvent::is_event_source_Set() const{
    return m_event_source_isSet;
}

bool OAIEvent::is_event_source_Valid() const{
    return m_event_source_isValid;
}

QString OAIEvent::getName() const {
    return m_name;
}
void OAIEvent::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEvent::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEvent::is_name_Valid() const{
    return m_name_isValid;
}

OAIEventDataSource OAIEvent::getDataSource() const {
    return m_data_source;
}
void OAIEvent::setDataSource(const OAIEventDataSource &data_source) {
    m_data_source = data_source;
    m_data_source_isSet = true;
}

bool OAIEvent::is_data_source_Set() const{
    return m_data_source_isSet;
}

bool OAIEvent::is_data_source_Valid() const{
    return m_data_source_isValid;
}

OAIEventClass OAIEvent::getEventClass() const {
    return m_event_class;
}
void OAIEvent::setEventClass(const OAIEventClass &event_class) {
    m_event_class = event_class;
    m_event_class_isSet = true;
}

bool OAIEvent::is_event_class_Set() const{
    return m_event_class_isSet;
}

bool OAIEvent::is_event_class_Valid() const{
    return m_event_class_isValid;
}

QList OAIEvent::getResources() const {
    return m_resources;
}
void OAIEvent::setResources(const QList &resources) {
    m_resources = resources;
    m_resources_isSet = true;
}

bool OAIEvent::is_resources_Set() const{
    return m_resources_isSet;
}

bool OAIEvent::is_resources_Valid() const{
    return m_resources_isValid;
}

bool OAIEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_collection.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_class.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resources.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
