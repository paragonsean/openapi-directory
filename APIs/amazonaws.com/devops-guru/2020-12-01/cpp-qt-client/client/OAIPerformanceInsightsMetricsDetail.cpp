/**
 * Amazon DevOps Guru
 * <p> Amazon DevOps Guru is a fully managed service that helps you identify anomalous behavior in business critical operational applications. You specify the Amazon Web Services resources that you want DevOps Guru to cover, then the Amazon CloudWatch metrics and Amazon Web Services CloudTrail events related to those resources are analyzed. When anomalous behavior is detected, DevOps Guru creates an <i>insight</i> that includes recommendations, related events, and related metrics that can help you improve your operational applications. For more information, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html\">What is Amazon DevOps Guru</a>. </p> <p> You can specify 1 or 2 Amazon Simple Notification Service topics so you are notified every time a new insight is created. You can also enable DevOps Guru to generate an OpsItem in Amazon Web Services Systems Manager for each insight to help you manage and track your work addressing insights. </p> <p> To learn about the DevOps Guru workflow, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html#how-it-works\">How DevOps Guru works</a>. To learn about DevOps Guru concepts, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/concepts.html\">Concepts in DevOps Guru</a>. </p>
 *
 * The version of the OpenAPI document: 2020-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPerformanceInsightsMetricsDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPerformanceInsightsMetricsDetail::OAIPerformanceInsightsMetricsDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPerformanceInsightsMetricsDetail::OAIPerformanceInsightsMetricsDetail() {
    this->initializeModel();
}

OAIPerformanceInsightsMetricsDetail::~OAIPerformanceInsightsMetricsDetail() {}

void OAIPerformanceInsightsMetricsDetail::initializeModel() {

    m_metric_display_name_isSet = false;
    m_metric_display_name_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;

    m_metric_query_isSet = false;
    m_metric_query_isValid = false;

    m_reference_data_isSet = false;
    m_reference_data_isValid = false;

    m_stats_at_anomaly_isSet = false;
    m_stats_at_anomaly_isValid = false;

    m_stats_at_baseline_isSet = false;
    m_stats_at_baseline_isValid = false;
}

void OAIPerformanceInsightsMetricsDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPerformanceInsightsMetricsDetail::fromJsonObject(QJsonObject json) {

    m_metric_display_name_isValid = ::OpenAPI::fromJsonValue(m_metric_display_name, json[QString("MetricDisplayName")]);
    m_metric_display_name_isSet = !json[QString("MetricDisplayName")].isNull() && m_metric_display_name_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("Unit")]);
    m_unit_isSet = !json[QString("Unit")].isNull() && m_unit_isValid;

    m_metric_query_isValid = ::OpenAPI::fromJsonValue(m_metric_query, json[QString("MetricQuery")]);
    m_metric_query_isSet = !json[QString("MetricQuery")].isNull() && m_metric_query_isValid;

    m_reference_data_isValid = ::OpenAPI::fromJsonValue(m_reference_data, json[QString("ReferenceData")]);
    m_reference_data_isSet = !json[QString("ReferenceData")].isNull() && m_reference_data_isValid;

    m_stats_at_anomaly_isValid = ::OpenAPI::fromJsonValue(m_stats_at_anomaly, json[QString("StatsAtAnomaly")]);
    m_stats_at_anomaly_isSet = !json[QString("StatsAtAnomaly")].isNull() && m_stats_at_anomaly_isValid;

    m_stats_at_baseline_isValid = ::OpenAPI::fromJsonValue(m_stats_at_baseline, json[QString("StatsAtBaseline")]);
    m_stats_at_baseline_isSet = !json[QString("StatsAtBaseline")].isNull() && m_stats_at_baseline_isValid;
}

QString OAIPerformanceInsightsMetricsDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPerformanceInsightsMetricsDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_metric_display_name_isSet) {
        obj.insert(QString("MetricDisplayName"), ::OpenAPI::toJsonValue(m_metric_display_name));
    }
    if (m_unit_isSet) {
        obj.insert(QString("Unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    if (m_metric_query.isSet()) {
        obj.insert(QString("MetricQuery"), ::OpenAPI::toJsonValue(m_metric_query));
    }
    if (m_reference_data.isSet()) {
        obj.insert(QString("ReferenceData"), ::OpenAPI::toJsonValue(m_reference_data));
    }
    if (m_stats_at_anomaly.isSet()) {
        obj.insert(QString("StatsAtAnomaly"), ::OpenAPI::toJsonValue(m_stats_at_anomaly));
    }
    if (m_stats_at_baseline.isSet()) {
        obj.insert(QString("StatsAtBaseline"), ::OpenAPI::toJsonValue(m_stats_at_baseline));
    }
    return obj;
}

QString OAIPerformanceInsightsMetricsDetail::getMetricDisplayName() const {
    return m_metric_display_name;
}
void OAIPerformanceInsightsMetricsDetail::setMetricDisplayName(const QString &metric_display_name) {
    m_metric_display_name = metric_display_name;
    m_metric_display_name_isSet = true;
}

bool OAIPerformanceInsightsMetricsDetail::is_metric_display_name_Set() const{
    return m_metric_display_name_isSet;
}

bool OAIPerformanceInsightsMetricsDetail::is_metric_display_name_Valid() const{
    return m_metric_display_name_isValid;
}

QString OAIPerformanceInsightsMetricsDetail::getUnit() const {
    return m_unit;
}
void OAIPerformanceInsightsMetricsDetail::setUnit(const QString &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAIPerformanceInsightsMetricsDetail::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAIPerformanceInsightsMetricsDetail::is_unit_Valid() const{
    return m_unit_isValid;
}

OAIPerformanceInsightsMetricsDetail_MetricQuery OAIPerformanceInsightsMetricsDetail::getMetricQuery() const {
    return m_metric_query;
}
void OAIPerformanceInsightsMetricsDetail::setMetricQuery(const OAIPerformanceInsightsMetricsDetail_MetricQuery &metric_query) {
    m_metric_query = metric_query;
    m_metric_query_isSet = true;
}

bool OAIPerformanceInsightsMetricsDetail::is_metric_query_Set() const{
    return m_metric_query_isSet;
}

bool OAIPerformanceInsightsMetricsDetail::is_metric_query_Valid() const{
    return m_metric_query_isValid;
}

QList OAIPerformanceInsightsMetricsDetail::getReferenceData() const {
    return m_reference_data;
}
void OAIPerformanceInsightsMetricsDetail::setReferenceData(const QList &reference_data) {
    m_reference_data = reference_data;
    m_reference_data_isSet = true;
}

bool OAIPerformanceInsightsMetricsDetail::is_reference_data_Set() const{
    return m_reference_data_isSet;
}

bool OAIPerformanceInsightsMetricsDetail::is_reference_data_Valid() const{
    return m_reference_data_isValid;
}

QList OAIPerformanceInsightsMetricsDetail::getStatsAtAnomaly() const {
    return m_stats_at_anomaly;
}
void OAIPerformanceInsightsMetricsDetail::setStatsAtAnomaly(const QList &stats_at_anomaly) {
    m_stats_at_anomaly = stats_at_anomaly;
    m_stats_at_anomaly_isSet = true;
}

bool OAIPerformanceInsightsMetricsDetail::is_stats_at_anomaly_Set() const{
    return m_stats_at_anomaly_isSet;
}

bool OAIPerformanceInsightsMetricsDetail::is_stats_at_anomaly_Valid() const{
    return m_stats_at_anomaly_isValid;
}

QList OAIPerformanceInsightsMetricsDetail::getStatsAtBaseline() const {
    return m_stats_at_baseline;
}
void OAIPerformanceInsightsMetricsDetail::setStatsAtBaseline(const QList &stats_at_baseline) {
    m_stats_at_baseline = stats_at_baseline;
    m_stats_at_baseline_isSet = true;
}

bool OAIPerformanceInsightsMetricsDetail::is_stats_at_baseline_Set() const{
    return m_stats_at_baseline_isSet;
}

bool OAIPerformanceInsightsMetricsDetail::is_stats_at_baseline_Valid() const{
    return m_stats_at_baseline_isValid;
}

bool OAIPerformanceInsightsMetricsDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_metric_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_query.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stats_at_anomaly.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stats_at_baseline.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPerformanceInsightsMetricsDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
