/**
 * Amazon DevOps Guru
 * <p> Amazon DevOps Guru is a fully managed service that helps you identify anomalous behavior in business critical operational applications. You specify the Amazon Web Services resources that you want DevOps Guru to cover, then the Amazon CloudWatch metrics and Amazon Web Services CloudTrail events related to those resources are analyzed. When anomalous behavior is detected, DevOps Guru creates an <i>insight</i> that includes recommendations, related events, and related metrics that can help you improve your operational applications. For more information, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html\">What is Amazon DevOps Guru</a>. </p> <p> You can specify 1 or 2 Amazon Simple Notification Service topics so you are notified every time a new insight is created. You can also enable DevOps Guru to generate an OpsItem in Amazon Web Services Systems Manager for each insight to help you manage and track your work addressing insights. </p> <p> To learn about the DevOps Guru workflow, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html#how-it-works\">How DevOps Guru works</a>. To learn about DevOps Guru concepts, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/concepts.html\">Concepts in DevOps Guru</a>. </p>
 *
 * The version of the OpenAPI document: 2020-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListMonitoredResourcesFilters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListMonitoredResourcesFilters::OAIListMonitoredResourcesFilters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListMonitoredResourcesFilters::OAIListMonitoredResourcesFilters() {
    this->initializeModel();
}

OAIListMonitoredResourcesFilters::~OAIListMonitoredResourcesFilters() {}

void OAIListMonitoredResourcesFilters::initializeModel() {

    m_resource_permission_isSet = false;
    m_resource_permission_isValid = false;

    m_resource_type_filters_isSet = false;
    m_resource_type_filters_isValid = false;
}

void OAIListMonitoredResourcesFilters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListMonitoredResourcesFilters::fromJsonObject(QJsonObject json) {

    m_resource_permission_isValid = ::OpenAPI::fromJsonValue(m_resource_permission, json[QString("ResourcePermission")]);
    m_resource_permission_isSet = !json[QString("ResourcePermission")].isNull() && m_resource_permission_isValid;

    m_resource_type_filters_isValid = ::OpenAPI::fromJsonValue(m_resource_type_filters, json[QString("ResourceTypeFilters")]);
    m_resource_type_filters_isSet = !json[QString("ResourceTypeFilters")].isNull() && m_resource_type_filters_isValid;
}

QString OAIListMonitoredResourcesFilters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListMonitoredResourcesFilters::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_permission.isSet()) {
        obj.insert(QString("ResourcePermission"), ::OpenAPI::toJsonValue(m_resource_permission));
    }
    if (m_resource_type_filters.isSet()) {
        obj.insert(QString("ResourceTypeFilters"), ::OpenAPI::toJsonValue(m_resource_type_filters));
    }
    return obj;
}

OAIResourcePermission OAIListMonitoredResourcesFilters::getResourcePermission() const {
    return m_resource_permission;
}
void OAIListMonitoredResourcesFilters::setResourcePermission(const OAIResourcePermission &resource_permission) {
    m_resource_permission = resource_permission;
    m_resource_permission_isSet = true;
}

bool OAIListMonitoredResourcesFilters::is_resource_permission_Set() const{
    return m_resource_permission_isSet;
}

bool OAIListMonitoredResourcesFilters::is_resource_permission_Valid() const{
    return m_resource_permission_isValid;
}

QList OAIListMonitoredResourcesFilters::getResourceTypeFilters() const {
    return m_resource_type_filters;
}
void OAIListMonitoredResourcesFilters::setResourceTypeFilters(const QList &resource_type_filters) {
    m_resource_type_filters = resource_type_filters;
    m_resource_type_filters_isSet = true;
}

bool OAIListMonitoredResourcesFilters::is_resource_type_filters_Set() const{
    return m_resource_type_filters_isSet;
}

bool OAIListMonitoredResourcesFilters::is_resource_type_filters_Valid() const{
    return m_resource_type_filters_isValid;
}

bool OAIListMonitoredResourcesFilters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_permission.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListMonitoredResourcesFilters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_resource_permission_isValid && m_resource_type_filters_isValid && true;
}

} // namespace OpenAPI
