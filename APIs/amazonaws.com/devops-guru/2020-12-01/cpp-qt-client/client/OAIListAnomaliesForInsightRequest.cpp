/**
 * Amazon DevOps Guru
 * <p> Amazon DevOps Guru is a fully managed service that helps you identify anomalous behavior in business critical operational applications. You specify the Amazon Web Services resources that you want DevOps Guru to cover, then the Amazon CloudWatch metrics and Amazon Web Services CloudTrail events related to those resources are analyzed. When anomalous behavior is detected, DevOps Guru creates an <i>insight</i> that includes recommendations, related events, and related metrics that can help you improve your operational applications. For more information, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html\">What is Amazon DevOps Guru</a>. </p> <p> You can specify 1 or 2 Amazon Simple Notification Service topics so you are notified every time a new insight is created. You can also enable DevOps Guru to generate an OpsItem in Amazon Web Services Systems Manager for each insight to help you manage and track your work addressing insights. </p> <p> To learn about the DevOps Guru workflow, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html#how-it-works\">How DevOps Guru works</a>. To learn about DevOps Guru concepts, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/concepts.html\">Concepts in DevOps Guru</a>. </p>
 *
 * The version of the OpenAPI document: 2020-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListAnomaliesForInsightRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListAnomaliesForInsightRequest::OAIListAnomaliesForInsightRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListAnomaliesForInsightRequest::OAIListAnomaliesForInsightRequest() {
    this->initializeModel();
}

OAIListAnomaliesForInsightRequest::~OAIListAnomaliesForInsightRequest() {}

void OAIListAnomaliesForInsightRequest::initializeModel() {

    m_start_time_range_isSet = false;
    m_start_time_range_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_filters_isSet = false;
    m_filters_isValid = false;
}

void OAIListAnomaliesForInsightRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListAnomaliesForInsightRequest::fromJsonObject(QJsonObject json) {

    m_start_time_range_isValid = ::OpenAPI::fromJsonValue(m_start_time_range, json[QString("StartTimeRange")]);
    m_start_time_range_isSet = !json[QString("StartTimeRange")].isNull() && m_start_time_range_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("AccountId")]);
    m_account_id_isSet = !json[QString("AccountId")].isNull() && m_account_id_isValid;

    m_filters_isValid = ::OpenAPI::fromJsonValue(m_filters, json[QString("Filters")]);
    m_filters_isSet = !json[QString("Filters")].isNull() && m_filters_isValid;
}

QString OAIListAnomaliesForInsightRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListAnomaliesForInsightRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_start_time_range.isSet()) {
        obj.insert(QString("StartTimeRange"), ::OpenAPI::toJsonValue(m_start_time_range));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_account_id_isSet) {
        obj.insert(QString("AccountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_filters.isSet()) {
        obj.insert(QString("Filters"), ::OpenAPI::toJsonValue(m_filters));
    }
    return obj;
}

OAIListAnomaliesForInsightRequest_StartTimeRange OAIListAnomaliesForInsightRequest::getStartTimeRange() const {
    return m_start_time_range;
}
void OAIListAnomaliesForInsightRequest::setStartTimeRange(const OAIListAnomaliesForInsightRequest_StartTimeRange &start_time_range) {
    m_start_time_range = start_time_range;
    m_start_time_range_isSet = true;
}

bool OAIListAnomaliesForInsightRequest::is_start_time_range_Set() const{
    return m_start_time_range_isSet;
}

bool OAIListAnomaliesForInsightRequest::is_start_time_range_Valid() const{
    return m_start_time_range_isValid;
}

qint32 OAIListAnomaliesForInsightRequest::getMaxResults() const {
    return m_max_results;
}
void OAIListAnomaliesForInsightRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListAnomaliesForInsightRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListAnomaliesForInsightRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAIListAnomaliesForInsightRequest::getNextToken() const {
    return m_next_token;
}
void OAIListAnomaliesForInsightRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListAnomaliesForInsightRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListAnomaliesForInsightRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

QString OAIListAnomaliesForInsightRequest::getAccountId() const {
    return m_account_id;
}
void OAIListAnomaliesForInsightRequest::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIListAnomaliesForInsightRequest::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIListAnomaliesForInsightRequest::is_account_id_Valid() const{
    return m_account_id_isValid;
}

OAIListAnomaliesForInsightRequest_Filters OAIListAnomaliesForInsightRequest::getFilters() const {
    return m_filters;
}
void OAIListAnomaliesForInsightRequest::setFilters(const OAIListAnomaliesForInsightRequest_Filters &filters) {
    m_filters = filters;
    m_filters_isSet = true;
}

bool OAIListAnomaliesForInsightRequest::is_filters_Set() const{
    return m_filters_isSet;
}

bool OAIListAnomaliesForInsightRequest::is_filters_Valid() const{
    return m_filters_isValid;
}

bool OAIListAnomaliesForInsightRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_start_time_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListAnomaliesForInsightRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
