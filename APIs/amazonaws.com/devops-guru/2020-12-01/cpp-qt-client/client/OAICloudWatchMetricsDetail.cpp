/**
 * Amazon DevOps Guru
 * <p> Amazon DevOps Guru is a fully managed service that helps you identify anomalous behavior in business critical operational applications. You specify the Amazon Web Services resources that you want DevOps Guru to cover, then the Amazon CloudWatch metrics and Amazon Web Services CloudTrail events related to those resources are analyzed. When anomalous behavior is detected, DevOps Guru creates an <i>insight</i> that includes recommendations, related events, and related metrics that can help you improve your operational applications. For more information, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html\">What is Amazon DevOps Guru</a>. </p> <p> You can specify 1 or 2 Amazon Simple Notification Service topics so you are notified every time a new insight is created. You can also enable DevOps Guru to generate an OpsItem in Amazon Web Services Systems Manager for each insight to help you manage and track your work addressing insights. </p> <p> To learn about the DevOps Guru workflow, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html#how-it-works\">How DevOps Guru works</a>. To learn about DevOps Guru concepts, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/concepts.html\">Concepts in DevOps Guru</a>. </p>
 *
 * The version of the OpenAPI document: 2020-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICloudWatchMetricsDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICloudWatchMetricsDetail::OAICloudWatchMetricsDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICloudWatchMetricsDetail::OAICloudWatchMetricsDetail() {
    this->initializeModel();
}

OAICloudWatchMetricsDetail::~OAICloudWatchMetricsDetail() {}

void OAICloudWatchMetricsDetail::initializeModel() {

    m_metric_name_isSet = false;
    m_metric_name_isValid = false;

    m_r_namespace_isSet = false;
    m_r_namespace_isValid = false;

    m_dimensions_isSet = false;
    m_dimensions_isValid = false;

    m_stat_isSet = false;
    m_stat_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;

    m_period_isSet = false;
    m_period_isValid = false;

    m_metric_data_summary_isSet = false;
    m_metric_data_summary_isValid = false;
}

void OAICloudWatchMetricsDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICloudWatchMetricsDetail::fromJsonObject(QJsonObject json) {

    m_metric_name_isValid = ::OpenAPI::fromJsonValue(m_metric_name, json[QString("MetricName")]);
    m_metric_name_isSet = !json[QString("MetricName")].isNull() && m_metric_name_isValid;

    m_r_namespace_isValid = ::OpenAPI::fromJsonValue(m_r_namespace, json[QString("Namespace")]);
    m_r_namespace_isSet = !json[QString("Namespace")].isNull() && m_r_namespace_isValid;

    m_dimensions_isValid = ::OpenAPI::fromJsonValue(m_dimensions, json[QString("Dimensions")]);
    m_dimensions_isSet = !json[QString("Dimensions")].isNull() && m_dimensions_isValid;

    m_stat_isValid = ::OpenAPI::fromJsonValue(m_stat, json[QString("Stat")]);
    m_stat_isSet = !json[QString("Stat")].isNull() && m_stat_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("Unit")]);
    m_unit_isSet = !json[QString("Unit")].isNull() && m_unit_isValid;

    m_period_isValid = ::OpenAPI::fromJsonValue(m_period, json[QString("Period")]);
    m_period_isSet = !json[QString("Period")].isNull() && m_period_isValid;

    m_metric_data_summary_isValid = ::OpenAPI::fromJsonValue(m_metric_data_summary, json[QString("MetricDataSummary")]);
    m_metric_data_summary_isSet = !json[QString("MetricDataSummary")].isNull() && m_metric_data_summary_isValid;
}

QString OAICloudWatchMetricsDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICloudWatchMetricsDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_metric_name_isSet) {
        obj.insert(QString("MetricName"), ::OpenAPI::toJsonValue(m_metric_name));
    }
    if (m_r_namespace_isSet) {
        obj.insert(QString("Namespace"), ::OpenAPI::toJsonValue(m_r_namespace));
    }
    if (m_dimensions.isSet()) {
        obj.insert(QString("Dimensions"), ::OpenAPI::toJsonValue(m_dimensions));
    }
    if (m_stat.isSet()) {
        obj.insert(QString("Stat"), ::OpenAPI::toJsonValue(m_stat));
    }
    if (m_unit_isSet) {
        obj.insert(QString("Unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    if (m_period_isSet) {
        obj.insert(QString("Period"), ::OpenAPI::toJsonValue(m_period));
    }
    if (m_metric_data_summary.isSet()) {
        obj.insert(QString("MetricDataSummary"), ::OpenAPI::toJsonValue(m_metric_data_summary));
    }
    return obj;
}

QString OAICloudWatchMetricsDetail::getMetricName() const {
    return m_metric_name;
}
void OAICloudWatchMetricsDetail::setMetricName(const QString &metric_name) {
    m_metric_name = metric_name;
    m_metric_name_isSet = true;
}

bool OAICloudWatchMetricsDetail::is_metric_name_Set() const{
    return m_metric_name_isSet;
}

bool OAICloudWatchMetricsDetail::is_metric_name_Valid() const{
    return m_metric_name_isValid;
}

QString OAICloudWatchMetricsDetail::getRNamespace() const {
    return m_r_namespace;
}
void OAICloudWatchMetricsDetail::setRNamespace(const QString &r_namespace) {
    m_r_namespace = r_namespace;
    m_r_namespace_isSet = true;
}

bool OAICloudWatchMetricsDetail::is_r_namespace_Set() const{
    return m_r_namespace_isSet;
}

bool OAICloudWatchMetricsDetail::is_r_namespace_Valid() const{
    return m_r_namespace_isValid;
}

QList OAICloudWatchMetricsDetail::getDimensions() const {
    return m_dimensions;
}
void OAICloudWatchMetricsDetail::setDimensions(const QList &dimensions) {
    m_dimensions = dimensions;
    m_dimensions_isSet = true;
}

bool OAICloudWatchMetricsDetail::is_dimensions_Set() const{
    return m_dimensions_isSet;
}

bool OAICloudWatchMetricsDetail::is_dimensions_Valid() const{
    return m_dimensions_isValid;
}

OAICloudWatchMetricsStat OAICloudWatchMetricsDetail::getStat() const {
    return m_stat;
}
void OAICloudWatchMetricsDetail::setStat(const OAICloudWatchMetricsStat &stat) {
    m_stat = stat;
    m_stat_isSet = true;
}

bool OAICloudWatchMetricsDetail::is_stat_Set() const{
    return m_stat_isSet;
}

bool OAICloudWatchMetricsDetail::is_stat_Valid() const{
    return m_stat_isValid;
}

QString OAICloudWatchMetricsDetail::getUnit() const {
    return m_unit;
}
void OAICloudWatchMetricsDetail::setUnit(const QString &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAICloudWatchMetricsDetail::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAICloudWatchMetricsDetail::is_unit_Valid() const{
    return m_unit_isValid;
}

qint32 OAICloudWatchMetricsDetail::getPeriod() const {
    return m_period;
}
void OAICloudWatchMetricsDetail::setPeriod(const qint32 &period) {
    m_period = period;
    m_period_isSet = true;
}

bool OAICloudWatchMetricsDetail::is_period_Set() const{
    return m_period_isSet;
}

bool OAICloudWatchMetricsDetail::is_period_Valid() const{
    return m_period_isValid;
}

OAICloudWatchMetricsDetail_MetricDataSummary OAICloudWatchMetricsDetail::getMetricDataSummary() const {
    return m_metric_data_summary;
}
void OAICloudWatchMetricsDetail::setMetricDataSummary(const OAICloudWatchMetricsDetail_MetricDataSummary &metric_data_summary) {
    m_metric_data_summary = metric_data_summary;
    m_metric_data_summary_isSet = true;
}

bool OAICloudWatchMetricsDetail::is_metric_data_summary_Set() const{
    return m_metric_data_summary_isSet;
}

bool OAICloudWatchMetricsDetail::is_metric_data_summary_Valid() const{
    return m_metric_data_summary_isValid;
}

bool OAICloudWatchMetricsDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_metric_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimensions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stat.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_data_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICloudWatchMetricsDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
