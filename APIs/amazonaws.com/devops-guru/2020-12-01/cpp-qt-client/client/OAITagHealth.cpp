/**
 * Amazon DevOps Guru
 * <p> Amazon DevOps Guru is a fully managed service that helps you identify anomalous behavior in business critical operational applications. You specify the Amazon Web Services resources that you want DevOps Guru to cover, then the Amazon CloudWatch metrics and Amazon Web Services CloudTrail events related to those resources are analyzed. When anomalous behavior is detected, DevOps Guru creates an <i>insight</i> that includes recommendations, related events, and related metrics that can help you improve your operational applications. For more information, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html\">What is Amazon DevOps Guru</a>. </p> <p> You can specify 1 or 2 Amazon Simple Notification Service topics so you are notified every time a new insight is created. You can also enable DevOps Guru to generate an OpsItem in Amazon Web Services Systems Manager for each insight to help you manage and track your work addressing insights. </p> <p> To learn about the DevOps Guru workflow, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html#how-it-works\">How DevOps Guru works</a>. To learn about DevOps Guru concepts, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/concepts.html\">Concepts in DevOps Guru</a>. </p>
 *
 * The version of the OpenAPI document: 2020-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITagHealth.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITagHealth::OAITagHealth(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITagHealth::OAITagHealth() {
    this->initializeModel();
}

OAITagHealth::~OAITagHealth() {}

void OAITagHealth::initializeModel() {

    m_app_boundary_key_isSet = false;
    m_app_boundary_key_isValid = false;

    m_tag_value_isSet = false;
    m_tag_value_isValid = false;

    m_insight_isSet = false;
    m_insight_isValid = false;

    m_analyzed_resource_count_isSet = false;
    m_analyzed_resource_count_isValid = false;
}

void OAITagHealth::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITagHealth::fromJsonObject(QJsonObject json) {

    m_app_boundary_key_isValid = ::OpenAPI::fromJsonValue(m_app_boundary_key, json[QString("AppBoundaryKey")]);
    m_app_boundary_key_isSet = !json[QString("AppBoundaryKey")].isNull() && m_app_boundary_key_isValid;

    m_tag_value_isValid = ::OpenAPI::fromJsonValue(m_tag_value, json[QString("TagValue")]);
    m_tag_value_isSet = !json[QString("TagValue")].isNull() && m_tag_value_isValid;

    m_insight_isValid = ::OpenAPI::fromJsonValue(m_insight, json[QString("Insight")]);
    m_insight_isSet = !json[QString("Insight")].isNull() && m_insight_isValid;

    m_analyzed_resource_count_isValid = ::OpenAPI::fromJsonValue(m_analyzed_resource_count, json[QString("AnalyzedResourceCount")]);
    m_analyzed_resource_count_isSet = !json[QString("AnalyzedResourceCount")].isNull() && m_analyzed_resource_count_isValid;
}

QString OAITagHealth::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITagHealth::asJsonObject() const {
    QJsonObject obj;
    if (m_app_boundary_key_isSet) {
        obj.insert(QString("AppBoundaryKey"), ::OpenAPI::toJsonValue(m_app_boundary_key));
    }
    if (m_tag_value_isSet) {
        obj.insert(QString("TagValue"), ::OpenAPI::toJsonValue(m_tag_value));
    }
    if (m_insight.isSet()) {
        obj.insert(QString("Insight"), ::OpenAPI::toJsonValue(m_insight));
    }
    if (m_analyzed_resource_count_isSet) {
        obj.insert(QString("AnalyzedResourceCount"), ::OpenAPI::toJsonValue(m_analyzed_resource_count));
    }
    return obj;
}

QString OAITagHealth::getAppBoundaryKey() const {
    return m_app_boundary_key;
}
void OAITagHealth::setAppBoundaryKey(const QString &app_boundary_key) {
    m_app_boundary_key = app_boundary_key;
    m_app_boundary_key_isSet = true;
}

bool OAITagHealth::is_app_boundary_key_Set() const{
    return m_app_boundary_key_isSet;
}

bool OAITagHealth::is_app_boundary_key_Valid() const{
    return m_app_boundary_key_isValid;
}

QString OAITagHealth::getTagValue() const {
    return m_tag_value;
}
void OAITagHealth::setTagValue(const QString &tag_value) {
    m_tag_value = tag_value;
    m_tag_value_isSet = true;
}

bool OAITagHealth::is_tag_value_Set() const{
    return m_tag_value_isSet;
}

bool OAITagHealth::is_tag_value_Valid() const{
    return m_tag_value_isValid;
}

OAITagHealth_Insight OAITagHealth::getInsight() const {
    return m_insight;
}
void OAITagHealth::setInsight(const OAITagHealth_Insight &insight) {
    m_insight = insight;
    m_insight_isSet = true;
}

bool OAITagHealth::is_insight_Set() const{
    return m_insight_isSet;
}

bool OAITagHealth::is_insight_Valid() const{
    return m_insight_isValid;
}

qint32 OAITagHealth::getAnalyzedResourceCount() const {
    return m_analyzed_resource_count;
}
void OAITagHealth::setAnalyzedResourceCount(const qint32 &analyzed_resource_count) {
    m_analyzed_resource_count = analyzed_resource_count;
    m_analyzed_resource_count_isSet = true;
}

bool OAITagHealth::is_analyzed_resource_count_Set() const{
    return m_analyzed_resource_count_isSet;
}

bool OAITagHealth::is_analyzed_resource_count_Valid() const{
    return m_analyzed_resource_count_isValid;
}

bool OAITagHealth::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_boundary_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_insight.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_analyzed_resource_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITagHealth::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
