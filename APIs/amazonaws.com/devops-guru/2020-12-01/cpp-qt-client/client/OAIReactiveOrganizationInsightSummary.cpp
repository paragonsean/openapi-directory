/**
 * Amazon DevOps Guru
 * <p> Amazon DevOps Guru is a fully managed service that helps you identify anomalous behavior in business critical operational applications. You specify the Amazon Web Services resources that you want DevOps Guru to cover, then the Amazon CloudWatch metrics and Amazon Web Services CloudTrail events related to those resources are analyzed. When anomalous behavior is detected, DevOps Guru creates an <i>insight</i> that includes recommendations, related events, and related metrics that can help you improve your operational applications. For more information, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html\">What is Amazon DevOps Guru</a>. </p> <p> You can specify 1 or 2 Amazon Simple Notification Service topics so you are notified every time a new insight is created. You can also enable DevOps Guru to generate an OpsItem in Amazon Web Services Systems Manager for each insight to help you manage and track your work addressing insights. </p> <p> To learn about the DevOps Guru workflow, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html#how-it-works\">How DevOps Guru works</a>. To learn about DevOps Guru concepts, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/concepts.html\">Concepts in DevOps Guru</a>. </p>
 *
 * The version of the OpenAPI document: 2020-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReactiveOrganizationInsightSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReactiveOrganizationInsightSummary::OAIReactiveOrganizationInsightSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReactiveOrganizationInsightSummary::OAIReactiveOrganizationInsightSummary() {
    this->initializeModel();
}

OAIReactiveOrganizationInsightSummary::~OAIReactiveOrganizationInsightSummary() {}

void OAIReactiveOrganizationInsightSummary::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_organizational_unit_id_isSet = false;
    m_organizational_unit_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_insight_time_range_isSet = false;
    m_insight_time_range_isValid = false;

    m_resource_collection_isSet = false;
    m_resource_collection_isValid = false;

    m_service_collection_isSet = false;
    m_service_collection_isValid = false;
}

void OAIReactiveOrganizationInsightSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReactiveOrganizationInsightSummary::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("AccountId")]);
    m_account_id_isSet = !json[QString("AccountId")].isNull() && m_account_id_isValid;

    m_organizational_unit_id_isValid = ::OpenAPI::fromJsonValue(m_organizational_unit_id, json[QString("OrganizationalUnitId")]);
    m_organizational_unit_id_isSet = !json[QString("OrganizationalUnitId")].isNull() && m_organizational_unit_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("Severity")]);
    m_severity_isSet = !json[QString("Severity")].isNull() && m_severity_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_insight_time_range_isValid = ::OpenAPI::fromJsonValue(m_insight_time_range, json[QString("InsightTimeRange")]);
    m_insight_time_range_isSet = !json[QString("InsightTimeRange")].isNull() && m_insight_time_range_isValid;

    m_resource_collection_isValid = ::OpenAPI::fromJsonValue(m_resource_collection, json[QString("ResourceCollection")]);
    m_resource_collection_isSet = !json[QString("ResourceCollection")].isNull() && m_resource_collection_isValid;

    m_service_collection_isValid = ::OpenAPI::fromJsonValue(m_service_collection, json[QString("ServiceCollection")]);
    m_service_collection_isSet = !json[QString("ServiceCollection")].isNull() && m_service_collection_isValid;
}

QString OAIReactiveOrganizationInsightSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReactiveOrganizationInsightSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_account_id_isSet) {
        obj.insert(QString("AccountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_organizational_unit_id_isSet) {
        obj.insert(QString("OrganizationalUnitId"), ::OpenAPI::toJsonValue(m_organizational_unit_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_severity.isSet()) {
        obj.insert(QString("Severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_insight_time_range.isSet()) {
        obj.insert(QString("InsightTimeRange"), ::OpenAPI::toJsonValue(m_insight_time_range));
    }
    if (m_resource_collection.isSet()) {
        obj.insert(QString("ResourceCollection"), ::OpenAPI::toJsonValue(m_resource_collection));
    }
    if (m_service_collection.isSet()) {
        obj.insert(QString("ServiceCollection"), ::OpenAPI::toJsonValue(m_service_collection));
    }
    return obj;
}

QString OAIReactiveOrganizationInsightSummary::getId() const {
    return m_id;
}
void OAIReactiveOrganizationInsightSummary::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIReactiveOrganizationInsightSummary::is_id_Set() const{
    return m_id_isSet;
}

bool OAIReactiveOrganizationInsightSummary::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIReactiveOrganizationInsightSummary::getAccountId() const {
    return m_account_id;
}
void OAIReactiveOrganizationInsightSummary::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIReactiveOrganizationInsightSummary::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIReactiveOrganizationInsightSummary::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAIReactiveOrganizationInsightSummary::getOrganizationalUnitId() const {
    return m_organizational_unit_id;
}
void OAIReactiveOrganizationInsightSummary::setOrganizationalUnitId(const QString &organizational_unit_id) {
    m_organizational_unit_id = organizational_unit_id;
    m_organizational_unit_id_isSet = true;
}

bool OAIReactiveOrganizationInsightSummary::is_organizational_unit_id_Set() const{
    return m_organizational_unit_id_isSet;
}

bool OAIReactiveOrganizationInsightSummary::is_organizational_unit_id_Valid() const{
    return m_organizational_unit_id_isValid;
}

QString OAIReactiveOrganizationInsightSummary::getName() const {
    return m_name;
}
void OAIReactiveOrganizationInsightSummary::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIReactiveOrganizationInsightSummary::is_name_Set() const{
    return m_name_isSet;
}

bool OAIReactiveOrganizationInsightSummary::is_name_Valid() const{
    return m_name_isValid;
}

OAIInsightSeverity OAIReactiveOrganizationInsightSummary::getSeverity() const {
    return m_severity;
}
void OAIReactiveOrganizationInsightSummary::setSeverity(const OAIInsightSeverity &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAIReactiveOrganizationInsightSummary::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAIReactiveOrganizationInsightSummary::is_severity_Valid() const{
    return m_severity_isValid;
}

OAIInsightStatus OAIReactiveOrganizationInsightSummary::getStatus() const {
    return m_status;
}
void OAIReactiveOrganizationInsightSummary::setStatus(const OAIInsightStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIReactiveOrganizationInsightSummary::is_status_Set() const{
    return m_status_isSet;
}

bool OAIReactiveOrganizationInsightSummary::is_status_Valid() const{
    return m_status_isValid;
}

OAIInsightTimeRange OAIReactiveOrganizationInsightSummary::getInsightTimeRange() const {
    return m_insight_time_range;
}
void OAIReactiveOrganizationInsightSummary::setInsightTimeRange(const OAIInsightTimeRange &insight_time_range) {
    m_insight_time_range = insight_time_range;
    m_insight_time_range_isSet = true;
}

bool OAIReactiveOrganizationInsightSummary::is_insight_time_range_Set() const{
    return m_insight_time_range_isSet;
}

bool OAIReactiveOrganizationInsightSummary::is_insight_time_range_Valid() const{
    return m_insight_time_range_isValid;
}

OAIResourceCollection OAIReactiveOrganizationInsightSummary::getResourceCollection() const {
    return m_resource_collection;
}
void OAIReactiveOrganizationInsightSummary::setResourceCollection(const OAIResourceCollection &resource_collection) {
    m_resource_collection = resource_collection;
    m_resource_collection_isSet = true;
}

bool OAIReactiveOrganizationInsightSummary::is_resource_collection_Set() const{
    return m_resource_collection_isSet;
}

bool OAIReactiveOrganizationInsightSummary::is_resource_collection_Valid() const{
    return m_resource_collection_isValid;
}

OAIServiceCollection OAIReactiveOrganizationInsightSummary::getServiceCollection() const {
    return m_service_collection;
}
void OAIReactiveOrganizationInsightSummary::setServiceCollection(const OAIServiceCollection &service_collection) {
    m_service_collection = service_collection;
    m_service_collection_isSet = true;
}

bool OAIReactiveOrganizationInsightSummary::is_service_collection_Set() const{
    return m_service_collection_isSet;
}

bool OAIReactiveOrganizationInsightSummary::is_service_collection_Valid() const{
    return m_service_collection_isValid;
}

bool OAIReactiveOrganizationInsightSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organizational_unit_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_insight_time_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_collection.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_collection.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReactiveOrganizationInsightSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
