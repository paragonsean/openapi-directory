/**
 * Amazon DevOps Guru
 * <p> Amazon DevOps Guru is a fully managed service that helps you identify anomalous behavior in business critical operational applications. You specify the Amazon Web Services resources that you want DevOps Guru to cover, then the Amazon CloudWatch metrics and Amazon Web Services CloudTrail events related to those resources are analyzed. When anomalous behavior is detected, DevOps Guru creates an <i>insight</i> that includes recommendations, related events, and related metrics that can help you improve your operational applications. For more information, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html\">What is Amazon DevOps Guru</a>. </p> <p> You can specify 1 or 2 Amazon Simple Notification Service topics so you are notified every time a new insight is created. You can also enable DevOps Guru to generate an OpsItem in Amazon Web Services Systems Manager for each insight to help you manage and track your work addressing insights. </p> <p> To learn about the DevOps Guru workflow, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html#how-it-works\">How DevOps Guru works</a>. To learn about DevOps Guru concepts, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/concepts.html\">Concepts in DevOps Guru</a>. </p>
 *
 * The version of the OpenAPI document: 2020-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeOrganizationResourceCollectionHealth_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeOrganizationResourceCollectionHealth_request::OAIDescribeOrganizationResourceCollectionHealth_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeOrganizationResourceCollectionHealth_request::OAIDescribeOrganizationResourceCollectionHealth_request() {
    this->initializeModel();
}

OAIDescribeOrganizationResourceCollectionHealth_request::~OAIDescribeOrganizationResourceCollectionHealth_request() {}

void OAIDescribeOrganizationResourceCollectionHealth_request::initializeModel() {

    m_organization_resource_collection_type_isSet = false;
    m_organization_resource_collection_type_isValid = false;

    m_account_ids_isSet = false;
    m_account_ids_isValid = false;

    m_organizational_unit_ids_isSet = false;
    m_organizational_unit_ids_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;
}

void OAIDescribeOrganizationResourceCollectionHealth_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeOrganizationResourceCollectionHealth_request::fromJsonObject(QJsonObject json) {

    m_organization_resource_collection_type_isValid = ::OpenAPI::fromJsonValue(m_organization_resource_collection_type, json[QString("OrganizationResourceCollectionType")]);
    m_organization_resource_collection_type_isSet = !json[QString("OrganizationResourceCollectionType")].isNull() && m_organization_resource_collection_type_isValid;

    m_account_ids_isValid = ::OpenAPI::fromJsonValue(m_account_ids, json[QString("AccountIds")]);
    m_account_ids_isSet = !json[QString("AccountIds")].isNull() && m_account_ids_isValid;

    m_organizational_unit_ids_isValid = ::OpenAPI::fromJsonValue(m_organizational_unit_ids, json[QString("OrganizationalUnitIds")]);
    m_organizational_unit_ids_isSet = !json[QString("OrganizationalUnitIds")].isNull() && m_organizational_unit_ids_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;
}

QString OAIDescribeOrganizationResourceCollectionHealth_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeOrganizationResourceCollectionHealth_request::asJsonObject() const {
    QJsonObject obj;
    if (m_organization_resource_collection_type_isSet) {
        obj.insert(QString("OrganizationResourceCollectionType"), ::OpenAPI::toJsonValue(m_organization_resource_collection_type));
    }
    if (m_account_ids.size() > 0) {
        obj.insert(QString("AccountIds"), ::OpenAPI::toJsonValue(m_account_ids));
    }
    if (m_organizational_unit_ids.size() > 0) {
        obj.insert(QString("OrganizationalUnitIds"), ::OpenAPI::toJsonValue(m_organizational_unit_ids));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    return obj;
}

QString OAIDescribeOrganizationResourceCollectionHealth_request::getOrganizationResourceCollectionType() const {
    return m_organization_resource_collection_type;
}
void OAIDescribeOrganizationResourceCollectionHealth_request::setOrganizationResourceCollectionType(const QString &organization_resource_collection_type) {
    m_organization_resource_collection_type = organization_resource_collection_type;
    m_organization_resource_collection_type_isSet = true;
}

bool OAIDescribeOrganizationResourceCollectionHealth_request::is_organization_resource_collection_type_Set() const{
    return m_organization_resource_collection_type_isSet;
}

bool OAIDescribeOrganizationResourceCollectionHealth_request::is_organization_resource_collection_type_Valid() const{
    return m_organization_resource_collection_type_isValid;
}

QList<QString> OAIDescribeOrganizationResourceCollectionHealth_request::getAccountIds() const {
    return m_account_ids;
}
void OAIDescribeOrganizationResourceCollectionHealth_request::setAccountIds(const QList<QString> &account_ids) {
    m_account_ids = account_ids;
    m_account_ids_isSet = true;
}

bool OAIDescribeOrganizationResourceCollectionHealth_request::is_account_ids_Set() const{
    return m_account_ids_isSet;
}

bool OAIDescribeOrganizationResourceCollectionHealth_request::is_account_ids_Valid() const{
    return m_account_ids_isValid;
}

QList<QString> OAIDescribeOrganizationResourceCollectionHealth_request::getOrganizationalUnitIds() const {
    return m_organizational_unit_ids;
}
void OAIDescribeOrganizationResourceCollectionHealth_request::setOrganizationalUnitIds(const QList<QString> &organizational_unit_ids) {
    m_organizational_unit_ids = organizational_unit_ids;
    m_organizational_unit_ids_isSet = true;
}

bool OAIDescribeOrganizationResourceCollectionHealth_request::is_organizational_unit_ids_Set() const{
    return m_organizational_unit_ids_isSet;
}

bool OAIDescribeOrganizationResourceCollectionHealth_request::is_organizational_unit_ids_Valid() const{
    return m_organizational_unit_ids_isValid;
}

QString OAIDescribeOrganizationResourceCollectionHealth_request::getNextToken() const {
    return m_next_token;
}
void OAIDescribeOrganizationResourceCollectionHealth_request::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIDescribeOrganizationResourceCollectionHealth_request::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIDescribeOrganizationResourceCollectionHealth_request::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIDescribeOrganizationResourceCollectionHealth_request::getMaxResults() const {
    return m_max_results;
}
void OAIDescribeOrganizationResourceCollectionHealth_request::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIDescribeOrganizationResourceCollectionHealth_request::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIDescribeOrganizationResourceCollectionHealth_request::is_max_results_Valid() const{
    return m_max_results_isValid;
}

bool OAIDescribeOrganizationResourceCollectionHealth_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_organization_resource_collection_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_organizational_unit_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeOrganizationResourceCollectionHealth_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_organization_resource_collection_type_isValid && true;
}

} // namespace OpenAPI
