/**
 * Amazon DevOps Guru
 * <p> Amazon DevOps Guru is a fully managed service that helps you identify anomalous behavior in business critical operational applications. You specify the Amazon Web Services resources that you want DevOps Guru to cover, then the Amazon CloudWatch metrics and Amazon Web Services CloudTrail events related to those resources are analyzed. When anomalous behavior is detected, DevOps Guru creates an <i>insight</i> that includes recommendations, related events, and related metrics that can help you improve your operational applications. For more information, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html\">What is Amazon DevOps Guru</a>. </p> <p> You can specify 1 or 2 Amazon Simple Notification Service topics so you are notified every time a new insight is created. You can also enable DevOps Guru to generate an OpsItem in Amazon Web Services Systems Manager for each insight to help you manage and track your work addressing insights. </p> <p> To learn about the DevOps Guru workflow, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html#how-it-works\">How DevOps Guru works</a>. To learn about DevOps Guru concepts, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/concepts.html\">Concepts in DevOps Guru</a>. </p>
 *
 * The version of the OpenAPI document: 2020-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceResourceCost.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceResourceCost::OAIServiceResourceCost(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceResourceCost::OAIServiceResourceCost() {
    this->initializeModel();
}

OAIServiceResourceCost::~OAIServiceResourceCost() {}

void OAIServiceResourceCost::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_count_isSet = false;
    m_count_isValid = false;

    m_unit_cost_isSet = false;
    m_unit_cost_isValid = false;

    m_cost_isSet = false;
    m_cost_isValid = false;
}

void OAIServiceResourceCost::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceResourceCost::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("Count")]);
    m_count_isSet = !json[QString("Count")].isNull() && m_count_isValid;

    m_unit_cost_isValid = ::OpenAPI::fromJsonValue(m_unit_cost, json[QString("UnitCost")]);
    m_unit_cost_isSet = !json[QString("UnitCost")].isNull() && m_unit_cost_isValid;

    m_cost_isValid = ::OpenAPI::fromJsonValue(m_cost, json[QString("Cost")]);
    m_cost_isSet = !json[QString("Cost")].isNull() && m_cost_isValid;
}

QString OAIServiceResourceCost::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceResourceCost::asJsonObject() const {
    QJsonObject obj;
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_state.isSet()) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_count_isSet) {
        obj.insert(QString("Count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_unit_cost_isSet) {
        obj.insert(QString("UnitCost"), ::OpenAPI::toJsonValue(m_unit_cost));
    }
    if (m_cost_isSet) {
        obj.insert(QString("Cost"), ::OpenAPI::toJsonValue(m_cost));
    }
    return obj;
}

QString OAIServiceResourceCost::getType() const {
    return m_type;
}
void OAIServiceResourceCost::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIServiceResourceCost::is_type_Set() const{
    return m_type_isSet;
}

bool OAIServiceResourceCost::is_type_Valid() const{
    return m_type_isValid;
}

OAICostEstimationServiceResourceState OAIServiceResourceCost::getState() const {
    return m_state;
}
void OAIServiceResourceCost::setState(const OAICostEstimationServiceResourceState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIServiceResourceCost::is_state_Set() const{
    return m_state_isSet;
}

bool OAIServiceResourceCost::is_state_Valid() const{
    return m_state_isValid;
}

qint32 OAIServiceResourceCost::getCount() const {
    return m_count;
}
void OAIServiceResourceCost::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIServiceResourceCost::is_count_Set() const{
    return m_count_isSet;
}

bool OAIServiceResourceCost::is_count_Valid() const{
    return m_count_isValid;
}

double OAIServiceResourceCost::getUnitCost() const {
    return m_unit_cost;
}
void OAIServiceResourceCost::setUnitCost(const double &unit_cost) {
    m_unit_cost = unit_cost;
    m_unit_cost_isSet = true;
}

bool OAIServiceResourceCost::is_unit_cost_Set() const{
    return m_unit_cost_isSet;
}

bool OAIServiceResourceCost::is_unit_cost_Valid() const{
    return m_unit_cost_isValid;
}

double OAIServiceResourceCost::getCost() const {
    return m_cost;
}
void OAIServiceResourceCost::setCost(const double &cost) {
    m_cost = cost;
    m_cost_isSet = true;
}

bool OAIServiceResourceCost::is_cost_Set() const{
    return m_cost_isSet;
}

bool OAIServiceResourceCost::is_cost_Valid() const{
    return m_cost_isValid;
}

bool OAIServiceResourceCost::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceResourceCost::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
