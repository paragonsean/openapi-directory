/**
 * Amazon DevOps Guru
 * <p> Amazon DevOps Guru is a fully managed service that helps you identify anomalous behavior in business critical operational applications. You specify the Amazon Web Services resources that you want DevOps Guru to cover, then the Amazon CloudWatch metrics and Amazon Web Services CloudTrail events related to those resources are analyzed. When anomalous behavior is detected, DevOps Guru creates an <i>insight</i> that includes recommendations, related events, and related metrics that can help you improve your operational applications. For more information, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html\">What is Amazon DevOps Guru</a>. </p> <p> You can specify 1 or 2 Amazon Simple Notification Service topics so you are notified every time a new insight is created. You can also enable DevOps Guru to generate an OpsItem in Amazon Web Services Systems Manager for each insight to help you manage and track your work addressing insights. </p> <p> To learn about the DevOps Guru workflow, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html#how-it-works\">How DevOps Guru works</a>. To learn about DevOps Guru concepts, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/concepts.html\">Concepts in DevOps Guru</a>. </p>
 *
 * The version of the OpenAPI document: 2020-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProactiveAnomalySummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProactiveAnomalySummary::OAIProactiveAnomalySummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProactiveAnomalySummary::OAIProactiveAnomalySummary() {
    this->initializeModel();
}

OAIProactiveAnomalySummary::~OAIProactiveAnomalySummary() {}

void OAIProactiveAnomalySummary::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_anomaly_time_range_isSet = false;
    m_anomaly_time_range_isValid = false;

    m_anomaly_reported_time_range_isSet = false;
    m_anomaly_reported_time_range_isValid = false;

    m_prediction_time_range_isSet = false;
    m_prediction_time_range_isValid = false;

    m_source_details_isSet = false;
    m_source_details_isValid = false;

    m_associated_insight_id_isSet = false;
    m_associated_insight_id_isValid = false;

    m_resource_collection_isSet = false;
    m_resource_collection_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_source_metadata_isSet = false;
    m_source_metadata_isValid = false;

    m_anomaly_resources_isSet = false;
    m_anomaly_resources_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;
}

void OAIProactiveAnomalySummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProactiveAnomalySummary::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("Severity")]);
    m_severity_isSet = !json[QString("Severity")].isNull() && m_severity_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("UpdateTime")]);
    m_update_time_isSet = !json[QString("UpdateTime")].isNull() && m_update_time_isValid;

    m_anomaly_time_range_isValid = ::OpenAPI::fromJsonValue(m_anomaly_time_range, json[QString("AnomalyTimeRange")]);
    m_anomaly_time_range_isSet = !json[QString("AnomalyTimeRange")].isNull() && m_anomaly_time_range_isValid;

    m_anomaly_reported_time_range_isValid = ::OpenAPI::fromJsonValue(m_anomaly_reported_time_range, json[QString("AnomalyReportedTimeRange")]);
    m_anomaly_reported_time_range_isSet = !json[QString("AnomalyReportedTimeRange")].isNull() && m_anomaly_reported_time_range_isValid;

    m_prediction_time_range_isValid = ::OpenAPI::fromJsonValue(m_prediction_time_range, json[QString("PredictionTimeRange")]);
    m_prediction_time_range_isSet = !json[QString("PredictionTimeRange")].isNull() && m_prediction_time_range_isValid;

    m_source_details_isValid = ::OpenAPI::fromJsonValue(m_source_details, json[QString("SourceDetails")]);
    m_source_details_isSet = !json[QString("SourceDetails")].isNull() && m_source_details_isValid;

    m_associated_insight_id_isValid = ::OpenAPI::fromJsonValue(m_associated_insight_id, json[QString("AssociatedInsightId")]);
    m_associated_insight_id_isSet = !json[QString("AssociatedInsightId")].isNull() && m_associated_insight_id_isValid;

    m_resource_collection_isValid = ::OpenAPI::fromJsonValue(m_resource_collection, json[QString("ResourceCollection")]);
    m_resource_collection_isSet = !json[QString("ResourceCollection")].isNull() && m_resource_collection_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("Limit")]);
    m_limit_isSet = !json[QString("Limit")].isNull() && m_limit_isValid;

    m_source_metadata_isValid = ::OpenAPI::fromJsonValue(m_source_metadata, json[QString("SourceMetadata")]);
    m_source_metadata_isSet = !json[QString("SourceMetadata")].isNull() && m_source_metadata_isValid;

    m_anomaly_resources_isValid = ::OpenAPI::fromJsonValue(m_anomaly_resources, json[QString("AnomalyResources")]);
    m_anomaly_resources_isSet = !json[QString("AnomalyResources")].isNull() && m_anomaly_resources_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;
}

QString OAIProactiveAnomalySummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProactiveAnomalySummary::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_severity.isSet()) {
        obj.insert(QString("Severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("UpdateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_anomaly_time_range.isSet()) {
        obj.insert(QString("AnomalyTimeRange"), ::OpenAPI::toJsonValue(m_anomaly_time_range));
    }
    if (m_anomaly_reported_time_range.isSet()) {
        obj.insert(QString("AnomalyReportedTimeRange"), ::OpenAPI::toJsonValue(m_anomaly_reported_time_range));
    }
    if (m_prediction_time_range.isSet()) {
        obj.insert(QString("PredictionTimeRange"), ::OpenAPI::toJsonValue(m_prediction_time_range));
    }
    if (m_source_details.isSet()) {
        obj.insert(QString("SourceDetails"), ::OpenAPI::toJsonValue(m_source_details));
    }
    if (m_associated_insight_id_isSet) {
        obj.insert(QString("AssociatedInsightId"), ::OpenAPI::toJsonValue(m_associated_insight_id));
    }
    if (m_resource_collection.isSet()) {
        obj.insert(QString("ResourceCollection"), ::OpenAPI::toJsonValue(m_resource_collection));
    }
    if (m_limit_isSet) {
        obj.insert(QString("Limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_source_metadata.isSet()) {
        obj.insert(QString("SourceMetadata"), ::OpenAPI::toJsonValue(m_source_metadata));
    }
    if (m_anomaly_resources.isSet()) {
        obj.insert(QString("AnomalyResources"), ::OpenAPI::toJsonValue(m_anomaly_resources));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    return obj;
}

QString OAIProactiveAnomalySummary::getId() const {
    return m_id;
}
void OAIProactiveAnomalySummary::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIProactiveAnomalySummary::is_id_Set() const{
    return m_id_isSet;
}

bool OAIProactiveAnomalySummary::is_id_Valid() const{
    return m_id_isValid;
}

OAIAnomalySeverity OAIProactiveAnomalySummary::getSeverity() const {
    return m_severity;
}
void OAIProactiveAnomalySummary::setSeverity(const OAIAnomalySeverity &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAIProactiveAnomalySummary::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAIProactiveAnomalySummary::is_severity_Valid() const{
    return m_severity_isValid;
}

OAIAnomalyStatus OAIProactiveAnomalySummary::getStatus() const {
    return m_status;
}
void OAIProactiveAnomalySummary::setStatus(const OAIAnomalyStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIProactiveAnomalySummary::is_status_Set() const{
    return m_status_isSet;
}

bool OAIProactiveAnomalySummary::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIProactiveAnomalySummary::getUpdateTime() const {
    return m_update_time;
}
void OAIProactiveAnomalySummary::setUpdateTime(const QDateTime &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIProactiveAnomalySummary::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIProactiveAnomalySummary::is_update_time_Valid() const{
    return m_update_time_isValid;
}

OAIAnomalyTimeRange OAIProactiveAnomalySummary::getAnomalyTimeRange() const {
    return m_anomaly_time_range;
}
void OAIProactiveAnomalySummary::setAnomalyTimeRange(const OAIAnomalyTimeRange &anomaly_time_range) {
    m_anomaly_time_range = anomaly_time_range;
    m_anomaly_time_range_isSet = true;
}

bool OAIProactiveAnomalySummary::is_anomaly_time_range_Set() const{
    return m_anomaly_time_range_isSet;
}

bool OAIProactiveAnomalySummary::is_anomaly_time_range_Valid() const{
    return m_anomaly_time_range_isValid;
}

OAIProactiveAnomaly_AnomalyReportedTimeRange OAIProactiveAnomalySummary::getAnomalyReportedTimeRange() const {
    return m_anomaly_reported_time_range;
}
void OAIProactiveAnomalySummary::setAnomalyReportedTimeRange(const OAIProactiveAnomaly_AnomalyReportedTimeRange &anomaly_reported_time_range) {
    m_anomaly_reported_time_range = anomaly_reported_time_range;
    m_anomaly_reported_time_range_isSet = true;
}

bool OAIProactiveAnomalySummary::is_anomaly_reported_time_range_Set() const{
    return m_anomaly_reported_time_range_isSet;
}

bool OAIProactiveAnomalySummary::is_anomaly_reported_time_range_Valid() const{
    return m_anomaly_reported_time_range_isValid;
}

OAIPredictionTimeRange OAIProactiveAnomalySummary::getPredictionTimeRange() const {
    return m_prediction_time_range;
}
void OAIProactiveAnomalySummary::setPredictionTimeRange(const OAIPredictionTimeRange &prediction_time_range) {
    m_prediction_time_range = prediction_time_range;
    m_prediction_time_range_isSet = true;
}

bool OAIProactiveAnomalySummary::is_prediction_time_range_Set() const{
    return m_prediction_time_range_isSet;
}

bool OAIProactiveAnomalySummary::is_prediction_time_range_Valid() const{
    return m_prediction_time_range_isValid;
}

OAIProactiveAnomaly_SourceDetails OAIProactiveAnomalySummary::getSourceDetails() const {
    return m_source_details;
}
void OAIProactiveAnomalySummary::setSourceDetails(const OAIProactiveAnomaly_SourceDetails &source_details) {
    m_source_details = source_details;
    m_source_details_isSet = true;
}

bool OAIProactiveAnomalySummary::is_source_details_Set() const{
    return m_source_details_isSet;
}

bool OAIProactiveAnomalySummary::is_source_details_Valid() const{
    return m_source_details_isValid;
}

QString OAIProactiveAnomalySummary::getAssociatedInsightId() const {
    return m_associated_insight_id;
}
void OAIProactiveAnomalySummary::setAssociatedInsightId(const QString &associated_insight_id) {
    m_associated_insight_id = associated_insight_id;
    m_associated_insight_id_isSet = true;
}

bool OAIProactiveAnomalySummary::is_associated_insight_id_Set() const{
    return m_associated_insight_id_isSet;
}

bool OAIProactiveAnomalySummary::is_associated_insight_id_Valid() const{
    return m_associated_insight_id_isValid;
}

OAIResourceCollection OAIProactiveAnomalySummary::getResourceCollection() const {
    return m_resource_collection;
}
void OAIProactiveAnomalySummary::setResourceCollection(const OAIResourceCollection &resource_collection) {
    m_resource_collection = resource_collection;
    m_resource_collection_isSet = true;
}

bool OAIProactiveAnomalySummary::is_resource_collection_Set() const{
    return m_resource_collection_isSet;
}

bool OAIProactiveAnomalySummary::is_resource_collection_Valid() const{
    return m_resource_collection_isValid;
}

double OAIProactiveAnomalySummary::getLimit() const {
    return m_limit;
}
void OAIProactiveAnomalySummary::setLimit(const double &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIProactiveAnomalySummary::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIProactiveAnomalySummary::is_limit_Valid() const{
    return m_limit_isValid;
}

OAIProactiveAnomalySummary_SourceMetadata OAIProactiveAnomalySummary::getSourceMetadata() const {
    return m_source_metadata;
}
void OAIProactiveAnomalySummary::setSourceMetadata(const OAIProactiveAnomalySummary_SourceMetadata &source_metadata) {
    m_source_metadata = source_metadata;
    m_source_metadata_isSet = true;
}

bool OAIProactiveAnomalySummary::is_source_metadata_Set() const{
    return m_source_metadata_isSet;
}

bool OAIProactiveAnomalySummary::is_source_metadata_Valid() const{
    return m_source_metadata_isValid;
}

QList OAIProactiveAnomalySummary::getAnomalyResources() const {
    return m_anomaly_resources;
}
void OAIProactiveAnomalySummary::setAnomalyResources(const QList &anomaly_resources) {
    m_anomaly_resources = anomaly_resources;
    m_anomaly_resources_isSet = true;
}

bool OAIProactiveAnomalySummary::is_anomaly_resources_Set() const{
    return m_anomaly_resources_isSet;
}

bool OAIProactiveAnomalySummary::is_anomaly_resources_Valid() const{
    return m_anomaly_resources_isValid;
}

QString OAIProactiveAnomalySummary::getDescription() const {
    return m_description;
}
void OAIProactiveAnomalySummary::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIProactiveAnomalySummary::is_description_Set() const{
    return m_description_isSet;
}

bool OAIProactiveAnomalySummary::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIProactiveAnomalySummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_anomaly_time_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_anomaly_reported_time_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_prediction_time_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_associated_insight_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_collection.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_anomaly_resources.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProactiveAnomalySummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
