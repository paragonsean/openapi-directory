/**
 * Amazon DevOps Guru
 * <p> Amazon DevOps Guru is a fully managed service that helps you identify anomalous behavior in business critical operational applications. You specify the Amazon Web Services resources that you want DevOps Guru to cover, then the Amazon CloudWatch metrics and Amazon Web Services CloudTrail events related to those resources are analyzed. When anomalous behavior is detected, DevOps Guru creates an <i>insight</i> that includes recommendations, related events, and related metrics that can help you improve your operational applications. For more information, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html\">What is Amazon DevOps Guru</a>. </p> <p> You can specify 1 or 2 Amazon Simple Notification Service topics so you are notified every time a new insight is created. You can also enable DevOps Guru to generate an OpsItem in Amazon Web Services Systems Manager for each insight to help you manage and track your work addressing insights. </p> <p> To learn about the DevOps Guru workflow, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html#how-it-works\">How DevOps Guru works</a>. To learn about DevOps Guru concepts, see <a href=\"https://docs.aws.amazon.com/devops-guru/latest/userguide/concepts.html\">Concepts in DevOps Guru</a>. </p>
 *
 * The version of the OpenAPI document: 2020-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListRecommendationsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListRecommendationsRequest::OAIListRecommendationsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListRecommendationsRequest::OAIListRecommendationsRequest() {
    this->initializeModel();
}

OAIListRecommendationsRequest::~OAIListRecommendationsRequest() {}

void OAIListRecommendationsRequest::initializeModel() {

    m_insight_id_isSet = false;
    m_insight_id_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_locale_isSet = false;
    m_locale_isValid = false;

    m_account_id_isSet = false;
    m_account_id_isValid = false;
}

void OAIListRecommendationsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListRecommendationsRequest::fromJsonObject(QJsonObject json) {

    m_insight_id_isValid = ::OpenAPI::fromJsonValue(m_insight_id, json[QString("InsightId")]);
    m_insight_id_isSet = !json[QString("InsightId")].isNull() && m_insight_id_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_locale_isValid = ::OpenAPI::fromJsonValue(m_locale, json[QString("Locale")]);
    m_locale_isSet = !json[QString("Locale")].isNull() && m_locale_isValid;

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("AccountId")]);
    m_account_id_isSet = !json[QString("AccountId")].isNull() && m_account_id_isValid;
}

QString OAIListRecommendationsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListRecommendationsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_insight_id_isSet) {
        obj.insert(QString("InsightId"), ::OpenAPI::toJsonValue(m_insight_id));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_locale.isSet()) {
        obj.insert(QString("Locale"), ::OpenAPI::toJsonValue(m_locale));
    }
    if (m_account_id_isSet) {
        obj.insert(QString("AccountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    return obj;
}

QString OAIListRecommendationsRequest::getInsightId() const {
    return m_insight_id;
}
void OAIListRecommendationsRequest::setInsightId(const QString &insight_id) {
    m_insight_id = insight_id;
    m_insight_id_isSet = true;
}

bool OAIListRecommendationsRequest::is_insight_id_Set() const{
    return m_insight_id_isSet;
}

bool OAIListRecommendationsRequest::is_insight_id_Valid() const{
    return m_insight_id_isValid;
}

QString OAIListRecommendationsRequest::getNextToken() const {
    return m_next_token;
}
void OAIListRecommendationsRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListRecommendationsRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListRecommendationsRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

OAILocale OAIListRecommendationsRequest::getLocale() const {
    return m_locale;
}
void OAIListRecommendationsRequest::setLocale(const OAILocale &locale) {
    m_locale = locale;
    m_locale_isSet = true;
}

bool OAIListRecommendationsRequest::is_locale_Set() const{
    return m_locale_isSet;
}

bool OAIListRecommendationsRequest::is_locale_Valid() const{
    return m_locale_isValid;
}

QString OAIListRecommendationsRequest::getAccountId() const {
    return m_account_id;
}
void OAIListRecommendationsRequest::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIListRecommendationsRequest::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIListRecommendationsRequest::is_account_id_Valid() const{
    return m_account_id_isValid;
}

bool OAIListRecommendationsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_insight_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListRecommendationsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_insight_id_isValid && true;
}

} // namespace OpenAPI
