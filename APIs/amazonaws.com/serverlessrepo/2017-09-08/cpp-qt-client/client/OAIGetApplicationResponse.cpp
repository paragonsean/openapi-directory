/**
 * AWSServerlessApplicationRepository
 * <p>The AWS Serverless Application Repository makes it easy for developers and enterprises to quickly find  and deploy serverless applications in the AWS Cloud. For more information about serverless applications,  see Serverless Computing and Applications on the AWS website.</p><p>The AWS Serverless Application Repository is deeply integrated with the AWS Lambda console, so that developers of   all levels can get started with serverless computing without needing to learn anything new. You can use category   keywords to browse for applications such as web and mobile backends, data processing applications, or chatbots.   You can also search for applications by name, publisher, or event source. To use an application, you simply choose it,   configure any required fields, and deploy it with a few clicks. </p><p>You can also easily publish applications, sharing them publicly with the community at large, or privately  within your team or across your organization. To publish a serverless application (or app), you can use the  AWS Management Console, AWS Command Line Interface (AWS CLI), or AWS SDKs to upload the code. Along with the  code, you upload a simple manifest file, also known as the AWS Serverless Application Model (AWS SAM) template.  For more information about AWS SAM, see AWS Serverless Application Model (AWS SAM) on the AWS Labs  GitHub repository.</p><p>The AWS Serverless Application Repository Developer Guide contains more information about the two developer  experiences available:</p><ul>  <li>  <p>Consuming Applications – Browse for applications and view information about them, including  source code and readme files. Also install, configure, and deploy applications of your choosing. </p>  <p>Publishing Applications – Configure and upload applications to make them available to other  developers, and publish new versions of applications. </p>  </li>  </ul>
 *
 * The version of the OpenAPI document: 2017-09-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetApplicationResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetApplicationResponse::OAIGetApplicationResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetApplicationResponse::OAIGetApplicationResponse() {
    this->initializeModel();
}

OAIGetApplicationResponse::~OAIGetApplicationResponse() {}

void OAIGetApplicationResponse::initializeModel() {

    m_application_id_isSet = false;
    m_application_id_isValid = false;

    m_author_isSet = false;
    m_author_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_home_page_url_isSet = false;
    m_home_page_url_isValid = false;

    m_is_verified_author_isSet = false;
    m_is_verified_author_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_license_url_isSet = false;
    m_license_url_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_readme_url_isSet = false;
    m_readme_url_isValid = false;

    m_spdx_license_id_isSet = false;
    m_spdx_license_id_isValid = false;

    m_verified_author_url_isSet = false;
    m_verified_author_url_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIGetApplicationResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetApplicationResponse::fromJsonObject(QJsonObject json) {

    m_application_id_isValid = ::OpenAPI::fromJsonValue(m_application_id, json[QString("ApplicationId")]);
    m_application_id_isSet = !json[QString("ApplicationId")].isNull() && m_application_id_isValid;

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("Author")]);
    m_author_isSet = !json[QString("Author")].isNull() && m_author_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_home_page_url_isValid = ::OpenAPI::fromJsonValue(m_home_page_url, json[QString("HomePageUrl")]);
    m_home_page_url_isSet = !json[QString("HomePageUrl")].isNull() && m_home_page_url_isValid;

    m_is_verified_author_isValid = ::OpenAPI::fromJsonValue(m_is_verified_author, json[QString("IsVerifiedAuthor")]);
    m_is_verified_author_isSet = !json[QString("IsVerifiedAuthor")].isNull() && m_is_verified_author_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("Labels")]);
    m_labels_isSet = !json[QString("Labels")].isNull() && m_labels_isValid;

    m_license_url_isValid = ::OpenAPI::fromJsonValue(m_license_url, json[QString("LicenseUrl")]);
    m_license_url_isSet = !json[QString("LicenseUrl")].isNull() && m_license_url_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_readme_url_isValid = ::OpenAPI::fromJsonValue(m_readme_url, json[QString("ReadmeUrl")]);
    m_readme_url_isSet = !json[QString("ReadmeUrl")].isNull() && m_readme_url_isValid;

    m_spdx_license_id_isValid = ::OpenAPI::fromJsonValue(m_spdx_license_id, json[QString("SpdxLicenseId")]);
    m_spdx_license_id_isSet = !json[QString("SpdxLicenseId")].isNull() && m_spdx_license_id_isValid;

    m_verified_author_url_isValid = ::OpenAPI::fromJsonValue(m_verified_author_url, json[QString("VerifiedAuthorUrl")]);
    m_verified_author_url_isSet = !json[QString("VerifiedAuthorUrl")].isNull() && m_verified_author_url_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("Version")]);
    m_version_isSet = !json[QString("Version")].isNull() && m_version_isValid;
}

QString OAIGetApplicationResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetApplicationResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_application_id_isSet) {
        obj.insert(QString("ApplicationId"), ::OpenAPI::toJsonValue(m_application_id));
    }
    if (m_author_isSet) {
        obj.insert(QString("Author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_home_page_url_isSet) {
        obj.insert(QString("HomePageUrl"), ::OpenAPI::toJsonValue(m_home_page_url));
    }
    if (m_is_verified_author_isSet) {
        obj.insert(QString("IsVerifiedAuthor"), ::OpenAPI::toJsonValue(m_is_verified_author));
    }
    if (m_labels.isSet()) {
        obj.insert(QString("Labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_license_url_isSet) {
        obj.insert(QString("LicenseUrl"), ::OpenAPI::toJsonValue(m_license_url));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_readme_url_isSet) {
        obj.insert(QString("ReadmeUrl"), ::OpenAPI::toJsonValue(m_readme_url));
    }
    if (m_spdx_license_id_isSet) {
        obj.insert(QString("SpdxLicenseId"), ::OpenAPI::toJsonValue(m_spdx_license_id));
    }
    if (m_verified_author_url_isSet) {
        obj.insert(QString("VerifiedAuthorUrl"), ::OpenAPI::toJsonValue(m_verified_author_url));
    }
    if (m_version.isSet()) {
        obj.insert(QString("Version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIGetApplicationResponse::getApplicationId() const {
    return m_application_id;
}
void OAIGetApplicationResponse::setApplicationId(const QString &application_id) {
    m_application_id = application_id;
    m_application_id_isSet = true;
}

bool OAIGetApplicationResponse::is_application_id_Set() const{
    return m_application_id_isSet;
}

bool OAIGetApplicationResponse::is_application_id_Valid() const{
    return m_application_id_isValid;
}

QString OAIGetApplicationResponse::getAuthor() const {
    return m_author;
}
void OAIGetApplicationResponse::setAuthor(const QString &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAIGetApplicationResponse::is_author_Set() const{
    return m_author_isSet;
}

bool OAIGetApplicationResponse::is_author_Valid() const{
    return m_author_isValid;
}

QString OAIGetApplicationResponse::getCreationTime() const {
    return m_creation_time;
}
void OAIGetApplicationResponse::setCreationTime(const QString &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIGetApplicationResponse::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIGetApplicationResponse::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAIGetApplicationResponse::getDescription() const {
    return m_description;
}
void OAIGetApplicationResponse::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGetApplicationResponse::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGetApplicationResponse::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIGetApplicationResponse::getHomePageUrl() const {
    return m_home_page_url;
}
void OAIGetApplicationResponse::setHomePageUrl(const QString &home_page_url) {
    m_home_page_url = home_page_url;
    m_home_page_url_isSet = true;
}

bool OAIGetApplicationResponse::is_home_page_url_Set() const{
    return m_home_page_url_isSet;
}

bool OAIGetApplicationResponse::is_home_page_url_Valid() const{
    return m_home_page_url_isValid;
}

bool OAIGetApplicationResponse::getIsVerifiedAuthor() const {
    return m_is_verified_author;
}
void OAIGetApplicationResponse::setIsVerifiedAuthor(const bool &is_verified_author) {
    m_is_verified_author = is_verified_author;
    m_is_verified_author_isSet = true;
}

bool OAIGetApplicationResponse::is_is_verified_author_Set() const{
    return m_is_verified_author_isSet;
}

bool OAIGetApplicationResponse::is_is_verified_author_Valid() const{
    return m_is_verified_author_isValid;
}

QList OAIGetApplicationResponse::getLabels() const {
    return m_labels;
}
void OAIGetApplicationResponse::setLabels(const QList &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIGetApplicationResponse::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIGetApplicationResponse::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIGetApplicationResponse::getLicenseUrl() const {
    return m_license_url;
}
void OAIGetApplicationResponse::setLicenseUrl(const QString &license_url) {
    m_license_url = license_url;
    m_license_url_isSet = true;
}

bool OAIGetApplicationResponse::is_license_url_Set() const{
    return m_license_url_isSet;
}

bool OAIGetApplicationResponse::is_license_url_Valid() const{
    return m_license_url_isValid;
}

QString OAIGetApplicationResponse::getName() const {
    return m_name;
}
void OAIGetApplicationResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetApplicationResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetApplicationResponse::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGetApplicationResponse::getReadmeUrl() const {
    return m_readme_url;
}
void OAIGetApplicationResponse::setReadmeUrl(const QString &readme_url) {
    m_readme_url = readme_url;
    m_readme_url_isSet = true;
}

bool OAIGetApplicationResponse::is_readme_url_Set() const{
    return m_readme_url_isSet;
}

bool OAIGetApplicationResponse::is_readme_url_Valid() const{
    return m_readme_url_isValid;
}

QString OAIGetApplicationResponse::getSpdxLicenseId() const {
    return m_spdx_license_id;
}
void OAIGetApplicationResponse::setSpdxLicenseId(const QString &spdx_license_id) {
    m_spdx_license_id = spdx_license_id;
    m_spdx_license_id_isSet = true;
}

bool OAIGetApplicationResponse::is_spdx_license_id_Set() const{
    return m_spdx_license_id_isSet;
}

bool OAIGetApplicationResponse::is_spdx_license_id_Valid() const{
    return m_spdx_license_id_isValid;
}

QString OAIGetApplicationResponse::getVerifiedAuthorUrl() const {
    return m_verified_author_url;
}
void OAIGetApplicationResponse::setVerifiedAuthorUrl(const QString &verified_author_url) {
    m_verified_author_url = verified_author_url;
    m_verified_author_url_isSet = true;
}

bool OAIGetApplicationResponse::is_verified_author_url_Set() const{
    return m_verified_author_url_isSet;
}

bool OAIGetApplicationResponse::is_verified_author_url_Valid() const{
    return m_verified_author_url_isValid;
}

OAICreateApplicationResponse_Version OAIGetApplicationResponse::getVersion() const {
    return m_version;
}
void OAIGetApplicationResponse::setVersion(const OAICreateApplicationResponse_Version &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIGetApplicationResponse::is_version_Set() const{
    return m_version_isSet;
}

bool OAIGetApplicationResponse::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIGetApplicationResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_author_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_page_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_verified_author_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_readme_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spdx_license_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verified_author_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetApplicationResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
