/**
 * AWSServerlessApplicationRepository
 * <p>The AWS Serverless Application Repository makes it easy for developers and enterprises to quickly find  and deploy serverless applications in the AWS Cloud. For more information about serverless applications,  see Serverless Computing and Applications on the AWS website.</p><p>The AWS Serverless Application Repository is deeply integrated with the AWS Lambda console, so that developers of   all levels can get started with serverless computing without needing to learn anything new. You can use category   keywords to browse for applications such as web and mobile backends, data processing applications, or chatbots.   You can also search for applications by name, publisher, or event source. To use an application, you simply choose it,   configure any required fields, and deploy it with a few clicks. </p><p>You can also easily publish applications, sharing them publicly with the community at large, or privately  within your team or across your organization. To publish a serverless application (or app), you can use the  AWS Management Console, AWS Command Line Interface (AWS CLI), or AWS SDKs to upload the code. Along with the  code, you upload a simple manifest file, also known as the AWS Serverless Application Model (AWS SAM) template.  For more information about AWS SAM, see AWS Serverless Application Model (AWS SAM) on the AWS Labs  GitHub repository.</p><p>The AWS Serverless Application Repository Developer Guide contains more information about the two developer  experiences available:</p><ul>  <li>  <p>Consuming Applications – Browse for applications and view information about them, including  source code and readme files. Also install, configure, and deploy applications of your choosing. </p>  <p>Publishing Applications – Configure and upload applications to make them available to other  developers, and publish new versions of applications. </p>  </li>  </ul>
 *
 * The version of the OpenAPI document: 2017-09-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateApplicationResponse_Version.h
 *
 * 
 */

#ifndef OAICreateApplicationResponse_Version_H
#define OAICreateApplicationResponse_Version_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICreateApplicationResponse_Version : public OAIObject {
public:
    OAICreateApplicationResponse_Version();
    OAICreateApplicationResponse_Version(QString json);
    ~OAICreateApplicationResponse_Version() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getApplicationId() const;
    void setApplicationId(const QString &application_id);
    bool is_application_id_Set() const;
    bool is_application_id_Valid() const;

    QString getCreationTime() const;
    void setCreationTime(const QString &creation_time);
    bool is_creation_time_Set() const;
    bool is_creation_time_Valid() const;

    QList getParameterDefinitions() const;
    void setParameterDefinitions(const QList &parameter_definitions);
    bool is_parameter_definitions_Set() const;
    bool is_parameter_definitions_Valid() const;

    QList getRequiredCapabilities() const;
    void setRequiredCapabilities(const QList &required_capabilities);
    bool is_required_capabilities_Set() const;
    bool is_required_capabilities_Valid() const;

    bool getResourcesSupported() const;
    void setResourcesSupported(const bool &resources_supported);
    bool is_resources_supported_Set() const;
    bool is_resources_supported_Valid() const;

    QString getSemanticVersion() const;
    void setSemanticVersion(const QString &semantic_version);
    bool is_semantic_version_Set() const;
    bool is_semantic_version_Valid() const;

    QString getSourceCodeArchiveUrl() const;
    void setSourceCodeArchiveUrl(const QString &source_code_archive_url);
    bool is_source_code_archive_url_Set() const;
    bool is_source_code_archive_url_Valid() const;

    QString getSourceCodeUrl() const;
    void setSourceCodeUrl(const QString &source_code_url);
    bool is_source_code_url_Set() const;
    bool is_source_code_url_Valid() const;

    QString getTemplateUrl() const;
    void setTemplateUrl(const QString &template_url);
    bool is_template_url_Set() const;
    bool is_template_url_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_application_id;
    bool m_application_id_isSet;
    bool m_application_id_isValid;

    QString m_creation_time;
    bool m_creation_time_isSet;
    bool m_creation_time_isValid;

    QList m_parameter_definitions;
    bool m_parameter_definitions_isSet;
    bool m_parameter_definitions_isValid;

    QList m_required_capabilities;
    bool m_required_capabilities_isSet;
    bool m_required_capabilities_isValid;

    bool m_resources_supported;
    bool m_resources_supported_isSet;
    bool m_resources_supported_isValid;

    QString m_semantic_version;
    bool m_semantic_version_isSet;
    bool m_semantic_version_isValid;

    QString m_source_code_archive_url;
    bool m_source_code_archive_url_isSet;
    bool m_source_code_archive_url_isValid;

    QString m_source_code_url;
    bool m_source_code_url_isSet;
    bool m_source_code_url_isValid;

    QString m_template_url;
    bool m_template_url_isSet;
    bool m_template_url_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateApplicationResponse_Version)

#endif // OAICreateApplicationResponse_Version_H
