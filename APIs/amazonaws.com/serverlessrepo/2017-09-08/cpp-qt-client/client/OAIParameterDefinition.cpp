/**
 * AWSServerlessApplicationRepository
 * <p>The AWS Serverless Application Repository makes it easy for developers and enterprises to quickly find  and deploy serverless applications in the AWS Cloud. For more information about serverless applications,  see Serverless Computing and Applications on the AWS website.</p><p>The AWS Serverless Application Repository is deeply integrated with the AWS Lambda console, so that developers of   all levels can get started with serverless computing without needing to learn anything new. You can use category   keywords to browse for applications such as web and mobile backends, data processing applications, or chatbots.   You can also search for applications by name, publisher, or event source. To use an application, you simply choose it,   configure any required fields, and deploy it with a few clicks. </p><p>You can also easily publish applications, sharing them publicly with the community at large, or privately  within your team or across your organization. To publish a serverless application (or app), you can use the  AWS Management Console, AWS Command Line Interface (AWS CLI), or AWS SDKs to upload the code. Along with the  code, you upload a simple manifest file, also known as the AWS Serverless Application Model (AWS SAM) template.  For more information about AWS SAM, see AWS Serverless Application Model (AWS SAM) on the AWS Labs  GitHub repository.</p><p>The AWS Serverless Application Repository Developer Guide contains more information about the two developer  experiences available:</p><ul>  <li>  <p>Consuming Applications – Browse for applications and view information about them, including  source code and readme files. Also install, configure, and deploy applications of your choosing. </p>  <p>Publishing Applications – Configure and upload applications to make them available to other  developers, and publish new versions of applications. </p>  </li>  </ul>
 *
 * The version of the OpenAPI document: 2017-09-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIParameterDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIParameterDefinition::OAIParameterDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIParameterDefinition::OAIParameterDefinition() {
    this->initializeModel();
}

OAIParameterDefinition::~OAIParameterDefinition() {}

void OAIParameterDefinition::initializeModel() {

    m_allowed_pattern_isSet = false;
    m_allowed_pattern_isValid = false;

    m_allowed_values_isSet = false;
    m_allowed_values_isValid = false;

    m_constraint_description_isSet = false;
    m_constraint_description_isValid = false;

    m_default_value_isSet = false;
    m_default_value_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_max_length_isSet = false;
    m_max_length_isValid = false;

    m_max_value_isSet = false;
    m_max_value_isValid = false;

    m_min_length_isSet = false;
    m_min_length_isValid = false;

    m_min_value_isSet = false;
    m_min_value_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_no_echo_isSet = false;
    m_no_echo_isValid = false;

    m_referenced_by_resources_isSet = false;
    m_referenced_by_resources_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIParameterDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIParameterDefinition::fromJsonObject(QJsonObject json) {

    m_allowed_pattern_isValid = ::OpenAPI::fromJsonValue(m_allowed_pattern, json[QString("AllowedPattern")]);
    m_allowed_pattern_isSet = !json[QString("AllowedPattern")].isNull() && m_allowed_pattern_isValid;

    m_allowed_values_isValid = ::OpenAPI::fromJsonValue(m_allowed_values, json[QString("AllowedValues")]);
    m_allowed_values_isSet = !json[QString("AllowedValues")].isNull() && m_allowed_values_isValid;

    m_constraint_description_isValid = ::OpenAPI::fromJsonValue(m_constraint_description, json[QString("ConstraintDescription")]);
    m_constraint_description_isSet = !json[QString("ConstraintDescription")].isNull() && m_constraint_description_isValid;

    m_default_value_isValid = ::OpenAPI::fromJsonValue(m_default_value, json[QString("DefaultValue")]);
    m_default_value_isSet = !json[QString("DefaultValue")].isNull() && m_default_value_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_max_length_isValid = ::OpenAPI::fromJsonValue(m_max_length, json[QString("MaxLength")]);
    m_max_length_isSet = !json[QString("MaxLength")].isNull() && m_max_length_isValid;

    m_max_value_isValid = ::OpenAPI::fromJsonValue(m_max_value, json[QString("MaxValue")]);
    m_max_value_isSet = !json[QString("MaxValue")].isNull() && m_max_value_isValid;

    m_min_length_isValid = ::OpenAPI::fromJsonValue(m_min_length, json[QString("MinLength")]);
    m_min_length_isSet = !json[QString("MinLength")].isNull() && m_min_length_isValid;

    m_min_value_isValid = ::OpenAPI::fromJsonValue(m_min_value, json[QString("MinValue")]);
    m_min_value_isSet = !json[QString("MinValue")].isNull() && m_min_value_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_no_echo_isValid = ::OpenAPI::fromJsonValue(m_no_echo, json[QString("NoEcho")]);
    m_no_echo_isSet = !json[QString("NoEcho")].isNull() && m_no_echo_isValid;

    m_referenced_by_resources_isValid = ::OpenAPI::fromJsonValue(m_referenced_by_resources, json[QString("ReferencedByResources")]);
    m_referenced_by_resources_isSet = !json[QString("ReferencedByResources")].isNull() && m_referenced_by_resources_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;
}

QString OAIParameterDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIParameterDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_pattern_isSet) {
        obj.insert(QString("AllowedPattern"), ::OpenAPI::toJsonValue(m_allowed_pattern));
    }
    if (m_allowed_values.isSet()) {
        obj.insert(QString("AllowedValues"), ::OpenAPI::toJsonValue(m_allowed_values));
    }
    if (m_constraint_description_isSet) {
        obj.insert(QString("ConstraintDescription"), ::OpenAPI::toJsonValue(m_constraint_description));
    }
    if (m_default_value_isSet) {
        obj.insert(QString("DefaultValue"), ::OpenAPI::toJsonValue(m_default_value));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_max_length_isSet) {
        obj.insert(QString("MaxLength"), ::OpenAPI::toJsonValue(m_max_length));
    }
    if (m_max_value_isSet) {
        obj.insert(QString("MaxValue"), ::OpenAPI::toJsonValue(m_max_value));
    }
    if (m_min_length_isSet) {
        obj.insert(QString("MinLength"), ::OpenAPI::toJsonValue(m_min_length));
    }
    if (m_min_value_isSet) {
        obj.insert(QString("MinValue"), ::OpenAPI::toJsonValue(m_min_value));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_no_echo_isSet) {
        obj.insert(QString("NoEcho"), ::OpenAPI::toJsonValue(m_no_echo));
    }
    if (m_referenced_by_resources.isSet()) {
        obj.insert(QString("ReferencedByResources"), ::OpenAPI::toJsonValue(m_referenced_by_resources));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIParameterDefinition::getAllowedPattern() const {
    return m_allowed_pattern;
}
void OAIParameterDefinition::setAllowedPattern(const QString &allowed_pattern) {
    m_allowed_pattern = allowed_pattern;
    m_allowed_pattern_isSet = true;
}

bool OAIParameterDefinition::is_allowed_pattern_Set() const{
    return m_allowed_pattern_isSet;
}

bool OAIParameterDefinition::is_allowed_pattern_Valid() const{
    return m_allowed_pattern_isValid;
}

QList OAIParameterDefinition::getAllowedValues() const {
    return m_allowed_values;
}
void OAIParameterDefinition::setAllowedValues(const QList &allowed_values) {
    m_allowed_values = allowed_values;
    m_allowed_values_isSet = true;
}

bool OAIParameterDefinition::is_allowed_values_Set() const{
    return m_allowed_values_isSet;
}

bool OAIParameterDefinition::is_allowed_values_Valid() const{
    return m_allowed_values_isValid;
}

QString OAIParameterDefinition::getConstraintDescription() const {
    return m_constraint_description;
}
void OAIParameterDefinition::setConstraintDescription(const QString &constraint_description) {
    m_constraint_description = constraint_description;
    m_constraint_description_isSet = true;
}

bool OAIParameterDefinition::is_constraint_description_Set() const{
    return m_constraint_description_isSet;
}

bool OAIParameterDefinition::is_constraint_description_Valid() const{
    return m_constraint_description_isValid;
}

QString OAIParameterDefinition::getDefaultValue() const {
    return m_default_value;
}
void OAIParameterDefinition::setDefaultValue(const QString &default_value) {
    m_default_value = default_value;
    m_default_value_isSet = true;
}

bool OAIParameterDefinition::is_default_value_Set() const{
    return m_default_value_isSet;
}

bool OAIParameterDefinition::is_default_value_Valid() const{
    return m_default_value_isValid;
}

QString OAIParameterDefinition::getDescription() const {
    return m_description;
}
void OAIParameterDefinition::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIParameterDefinition::is_description_Set() const{
    return m_description_isSet;
}

bool OAIParameterDefinition::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIParameterDefinition::getMaxLength() const {
    return m_max_length;
}
void OAIParameterDefinition::setMaxLength(const qint32 &max_length) {
    m_max_length = max_length;
    m_max_length_isSet = true;
}

bool OAIParameterDefinition::is_max_length_Set() const{
    return m_max_length_isSet;
}

bool OAIParameterDefinition::is_max_length_Valid() const{
    return m_max_length_isValid;
}

qint32 OAIParameterDefinition::getMaxValue() const {
    return m_max_value;
}
void OAIParameterDefinition::setMaxValue(const qint32 &max_value) {
    m_max_value = max_value;
    m_max_value_isSet = true;
}

bool OAIParameterDefinition::is_max_value_Set() const{
    return m_max_value_isSet;
}

bool OAIParameterDefinition::is_max_value_Valid() const{
    return m_max_value_isValid;
}

qint32 OAIParameterDefinition::getMinLength() const {
    return m_min_length;
}
void OAIParameterDefinition::setMinLength(const qint32 &min_length) {
    m_min_length = min_length;
    m_min_length_isSet = true;
}

bool OAIParameterDefinition::is_min_length_Set() const{
    return m_min_length_isSet;
}

bool OAIParameterDefinition::is_min_length_Valid() const{
    return m_min_length_isValid;
}

qint32 OAIParameterDefinition::getMinValue() const {
    return m_min_value;
}
void OAIParameterDefinition::setMinValue(const qint32 &min_value) {
    m_min_value = min_value;
    m_min_value_isSet = true;
}

bool OAIParameterDefinition::is_min_value_Set() const{
    return m_min_value_isSet;
}

bool OAIParameterDefinition::is_min_value_Valid() const{
    return m_min_value_isValid;
}

QString OAIParameterDefinition::getName() const {
    return m_name;
}
void OAIParameterDefinition::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIParameterDefinition::is_name_Set() const{
    return m_name_isSet;
}

bool OAIParameterDefinition::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIParameterDefinition::getNoEcho() const {
    return m_no_echo;
}
void OAIParameterDefinition::setNoEcho(const bool &no_echo) {
    m_no_echo = no_echo;
    m_no_echo_isSet = true;
}

bool OAIParameterDefinition::is_no_echo_Set() const{
    return m_no_echo_isSet;
}

bool OAIParameterDefinition::is_no_echo_Valid() const{
    return m_no_echo_isValid;
}

QList OAIParameterDefinition::getReferencedByResources() const {
    return m_referenced_by_resources;
}
void OAIParameterDefinition::setReferencedByResources(const QList &referenced_by_resources) {
    m_referenced_by_resources = referenced_by_resources;
    m_referenced_by_resources_isSet = true;
}

bool OAIParameterDefinition::is_referenced_by_resources_Set() const{
    return m_referenced_by_resources_isSet;
}

bool OAIParameterDefinition::is_referenced_by_resources_Valid() const{
    return m_referenced_by_resources_isValid;
}

QString OAIParameterDefinition::getType() const {
    return m_type;
}
void OAIParameterDefinition::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIParameterDefinition::is_type_Set() const{
    return m_type_isSet;
}

bool OAIParameterDefinition::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIParameterDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_pattern_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_constraint_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_no_echo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_referenced_by_resources.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIParameterDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_referenced_by_resources_isValid && true;
}

} // namespace OpenAPI
