/**
 * AWSServerlessApplicationRepository
 * <p>The AWS Serverless Application Repository makes it easy for developers and enterprises to quickly find  and deploy serverless applications in the AWS Cloud. For more information about serverless applications,  see Serverless Computing and Applications on the AWS website.</p><p>The AWS Serverless Application Repository is deeply integrated with the AWS Lambda console, so that developers of   all levels can get started with serverless computing without needing to learn anything new. You can use category   keywords to browse for applications such as web and mobile backends, data processing applications, or chatbots.   You can also search for applications by name, publisher, or event source. To use an application, you simply choose it,   configure any required fields, and deploy it with a few clicks. </p><p>You can also easily publish applications, sharing them publicly with the community at large, or privately  within your team or across your organization. To publish a serverless application (or app), you can use the  AWS Management Console, AWS Command Line Interface (AWS CLI), or AWS SDKs to upload the code. Along with the  code, you upload a simple manifest file, also known as the AWS Serverless Application Model (AWS SAM) template.  For more information about AWS SAM, see AWS Serverless Application Model (AWS SAM) on the AWS Labs  GitHub repository.</p><p>The AWS Serverless Application Repository Developer Guide contains more information about the two developer  experiences available:</p><ul>  <li>  <p>Consuming Applications – Browse for applications and view information about them, including  source code and readme files. Also install, configure, and deploy applications of your choosing. </p>  <p>Publishing Applications – Configure and upload applications to make them available to other  developers, and publish new versions of applications. </p>  </li>  </ul>
 *
 * The version of the OpenAPI document: 2017-09-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateCloudFormationChangeSetResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateCloudFormationChangeSetResponse::OAICreateCloudFormationChangeSetResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateCloudFormationChangeSetResponse::OAICreateCloudFormationChangeSetResponse() {
    this->initializeModel();
}

OAICreateCloudFormationChangeSetResponse::~OAICreateCloudFormationChangeSetResponse() {}

void OAICreateCloudFormationChangeSetResponse::initializeModel() {

    m_application_id_isSet = false;
    m_application_id_isValid = false;

    m_change_set_id_isSet = false;
    m_change_set_id_isValid = false;

    m_semantic_version_isSet = false;
    m_semantic_version_isValid = false;

    m_stack_id_isSet = false;
    m_stack_id_isValid = false;
}

void OAICreateCloudFormationChangeSetResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateCloudFormationChangeSetResponse::fromJsonObject(QJsonObject json) {

    m_application_id_isValid = ::OpenAPI::fromJsonValue(m_application_id, json[QString("ApplicationId")]);
    m_application_id_isSet = !json[QString("ApplicationId")].isNull() && m_application_id_isValid;

    m_change_set_id_isValid = ::OpenAPI::fromJsonValue(m_change_set_id, json[QString("ChangeSetId")]);
    m_change_set_id_isSet = !json[QString("ChangeSetId")].isNull() && m_change_set_id_isValid;

    m_semantic_version_isValid = ::OpenAPI::fromJsonValue(m_semantic_version, json[QString("SemanticVersion")]);
    m_semantic_version_isSet = !json[QString("SemanticVersion")].isNull() && m_semantic_version_isValid;

    m_stack_id_isValid = ::OpenAPI::fromJsonValue(m_stack_id, json[QString("StackId")]);
    m_stack_id_isSet = !json[QString("StackId")].isNull() && m_stack_id_isValid;
}

QString OAICreateCloudFormationChangeSetResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateCloudFormationChangeSetResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_application_id_isSet) {
        obj.insert(QString("ApplicationId"), ::OpenAPI::toJsonValue(m_application_id));
    }
    if (m_change_set_id_isSet) {
        obj.insert(QString("ChangeSetId"), ::OpenAPI::toJsonValue(m_change_set_id));
    }
    if (m_semantic_version_isSet) {
        obj.insert(QString("SemanticVersion"), ::OpenAPI::toJsonValue(m_semantic_version));
    }
    if (m_stack_id_isSet) {
        obj.insert(QString("StackId"), ::OpenAPI::toJsonValue(m_stack_id));
    }
    return obj;
}

QString OAICreateCloudFormationChangeSetResponse::getApplicationId() const {
    return m_application_id;
}
void OAICreateCloudFormationChangeSetResponse::setApplicationId(const QString &application_id) {
    m_application_id = application_id;
    m_application_id_isSet = true;
}

bool OAICreateCloudFormationChangeSetResponse::is_application_id_Set() const{
    return m_application_id_isSet;
}

bool OAICreateCloudFormationChangeSetResponse::is_application_id_Valid() const{
    return m_application_id_isValid;
}

QString OAICreateCloudFormationChangeSetResponse::getChangeSetId() const {
    return m_change_set_id;
}
void OAICreateCloudFormationChangeSetResponse::setChangeSetId(const QString &change_set_id) {
    m_change_set_id = change_set_id;
    m_change_set_id_isSet = true;
}

bool OAICreateCloudFormationChangeSetResponse::is_change_set_id_Set() const{
    return m_change_set_id_isSet;
}

bool OAICreateCloudFormationChangeSetResponse::is_change_set_id_Valid() const{
    return m_change_set_id_isValid;
}

QString OAICreateCloudFormationChangeSetResponse::getSemanticVersion() const {
    return m_semantic_version;
}
void OAICreateCloudFormationChangeSetResponse::setSemanticVersion(const QString &semantic_version) {
    m_semantic_version = semantic_version;
    m_semantic_version_isSet = true;
}

bool OAICreateCloudFormationChangeSetResponse::is_semantic_version_Set() const{
    return m_semantic_version_isSet;
}

bool OAICreateCloudFormationChangeSetResponse::is_semantic_version_Valid() const{
    return m_semantic_version_isValid;
}

QString OAICreateCloudFormationChangeSetResponse::getStackId() const {
    return m_stack_id;
}
void OAICreateCloudFormationChangeSetResponse::setStackId(const QString &stack_id) {
    m_stack_id = stack_id;
    m_stack_id_isSet = true;
}

bool OAICreateCloudFormationChangeSetResponse::is_stack_id_Set() const{
    return m_stack_id_isSet;
}

bool OAICreateCloudFormationChangeSetResponse::is_stack_id_Valid() const{
    return m_stack_id_isValid;
}

bool OAICreateCloudFormationChangeSetResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_change_set_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_semantic_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateCloudFormationChangeSetResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
