/**
 * AWSServerlessApplicationRepository
 * <p>The AWS Serverless Application Repository makes it easy for developers and enterprises to quickly find  and deploy serverless applications in the AWS Cloud. For more information about serverless applications,  see Serverless Computing and Applications on the AWS website.</p><p>The AWS Serverless Application Repository is deeply integrated with the AWS Lambda console, so that developers of   all levels can get started with serverless computing without needing to learn anything new. You can use category   keywords to browse for applications such as web and mobile backends, data processing applications, or chatbots.   You can also search for applications by name, publisher, or event source. To use an application, you simply choose it,   configure any required fields, and deploy it with a few clicks. </p><p>You can also easily publish applications, sharing them publicly with the community at large, or privately  within your team or across your organization. To publish a serverless application (or app), you can use the  AWS Management Console, AWS Command Line Interface (AWS CLI), or AWS SDKs to upload the code. Along with the  code, you upload a simple manifest file, also known as the AWS Serverless Application Model (AWS SAM) template.  For more information about AWS SAM, see AWS Serverless Application Model (AWS SAM) on the AWS Labs  GitHub repository.</p><p>The AWS Serverless Application Repository Developer Guide contains more information about the two developer  experiences available:</p><ul>  <li>  <p>Consuming Applications – Browse for applications and view information about them, including  source code and readme files. Also install, configure, and deploy applications of your choosing. </p>  <p>Publishing Applications – Configure and upload applications to make them available to other  developers, and publish new versions of applications. </p>  </li>  </ul>
 *
 * The version of the OpenAPI document: 2017-09-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateApplication_request.h
 *
 * 
 */

#ifndef OAICreateApplication_request_H
#define OAICreateApplication_request_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICreateApplication_request : public OAIObject {
public:
    OAICreateApplication_request();
    OAICreateApplication_request(QString json);
    ~OAICreateApplication_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAuthor() const;
    void setAuthor(const QString &author);
    bool is_author_Set() const;
    bool is_author_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getHomePageUrl() const;
    void setHomePageUrl(const QString &home_page_url);
    bool is_home_page_url_Set() const;
    bool is_home_page_url_Valid() const;

    QList<QString> getLabels() const;
    void setLabels(const QList<QString> &labels);
    bool is_labels_Set() const;
    bool is_labels_Valid() const;

    QString getLicenseBody() const;
    void setLicenseBody(const QString &license_body);
    bool is_license_body_Set() const;
    bool is_license_body_Valid() const;

    QString getLicenseUrl() const;
    void setLicenseUrl(const QString &license_url);
    bool is_license_url_Set() const;
    bool is_license_url_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getReadmeBody() const;
    void setReadmeBody(const QString &readme_body);
    bool is_readme_body_Set() const;
    bool is_readme_body_Valid() const;

    QString getReadmeUrl() const;
    void setReadmeUrl(const QString &readme_url);
    bool is_readme_url_Set() const;
    bool is_readme_url_Valid() const;

    QString getSemanticVersion() const;
    void setSemanticVersion(const QString &semantic_version);
    bool is_semantic_version_Set() const;
    bool is_semantic_version_Valid() const;

    QString getSourceCodeArchiveUrl() const;
    void setSourceCodeArchiveUrl(const QString &source_code_archive_url);
    bool is_source_code_archive_url_Set() const;
    bool is_source_code_archive_url_Valid() const;

    QString getSourceCodeUrl() const;
    void setSourceCodeUrl(const QString &source_code_url);
    bool is_source_code_url_Set() const;
    bool is_source_code_url_Valid() const;

    QString getSpdxLicenseId() const;
    void setSpdxLicenseId(const QString &spdx_license_id);
    bool is_spdx_license_id_Set() const;
    bool is_spdx_license_id_Valid() const;

    QString getTemplateBody() const;
    void setTemplateBody(const QString &template_body);
    bool is_template_body_Set() const;
    bool is_template_body_Valid() const;

    QString getTemplateUrl() const;
    void setTemplateUrl(const QString &template_url);
    bool is_template_url_Set() const;
    bool is_template_url_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_author;
    bool m_author_isSet;
    bool m_author_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_home_page_url;
    bool m_home_page_url_isSet;
    bool m_home_page_url_isValid;

    QList<QString> m_labels;
    bool m_labels_isSet;
    bool m_labels_isValid;

    QString m_license_body;
    bool m_license_body_isSet;
    bool m_license_body_isValid;

    QString m_license_url;
    bool m_license_url_isSet;
    bool m_license_url_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_readme_body;
    bool m_readme_body_isSet;
    bool m_readme_body_isValid;

    QString m_readme_url;
    bool m_readme_url_isSet;
    bool m_readme_url_isValid;

    QString m_semantic_version;
    bool m_semantic_version_isSet;
    bool m_semantic_version_isValid;

    QString m_source_code_archive_url;
    bool m_source_code_archive_url_isSet;
    bool m_source_code_archive_url_isValid;

    QString m_source_code_url;
    bool m_source_code_url_isSet;
    bool m_source_code_url_isValid;

    QString m_spdx_license_id;
    bool m_spdx_license_id_isSet;
    bool m_spdx_license_id_isValid;

    QString m_template_body;
    bool m_template_body_isSet;
    bool m_template_body_isValid;

    QString m_template_url;
    bool m_template_url_isSet;
    bool m_template_url_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateApplication_request)

#endif // OAICreateApplication_request_H
