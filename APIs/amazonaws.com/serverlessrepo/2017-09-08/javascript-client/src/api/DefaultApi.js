/**
 * AWSServerlessApplicationRepository
 * <p>The AWS Serverless Application Repository makes it easy for developers and enterprises to quickly find  and deploy serverless applications in the AWS Cloud. For more information about serverless applications,  see Serverless Computing and Applications on the AWS website.</p><p>The AWS Serverless Application Repository is deeply integrated with the AWS Lambda console, so that developers of   all levels can get started with serverless computing without needing to learn anything new. You can use category   keywords to browse for applications such as web and mobile backends, data processing applications, or chatbots.   You can also search for applications by name, publisher, or event source. To use an application, you simply choose it,   configure any required fields, and deploy it with a few clicks. </p><p>You can also easily publish applications, sharing them publicly with the community at large, or privately  within your team or across your organization. To publish a serverless application (or app), you can use the  AWS Management Console, AWS Command Line Interface (AWS CLI), or AWS SDKs to upload the code. Along with the  code, you upload a simple manifest file, also known as the AWS Serverless Application Model (AWS SAM) template.  For more information about AWS SAM, see AWS Serverless Application Model (AWS SAM) on the AWS Labs  GitHub repository.</p><p>The AWS Serverless Application Repository Developer Guide contains more information about the two developer  experiences available:</p><ul>  <li>  <p>Consuming Applications – Browse for applications and view information about them, including  source code and readme files. Also install, configure, and deploy applications of your choosing. </p>  <p>Publishing Applications – Configure and upload applications to make them available to other  developers, and publish new versions of applications. </p>  </li>  </ul>
 *
 * The version of the OpenAPI document: 2017-09-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateApplicationRequest from '../model/CreateApplicationRequest';
import CreateApplicationResponse from '../model/CreateApplicationResponse';
import CreateApplicationVersionRequest from '../model/CreateApplicationVersionRequest';
import CreateApplicationVersionResponse from '../model/CreateApplicationVersionResponse';
import CreateCloudFormationChangeSetRequest from '../model/CreateCloudFormationChangeSetRequest';
import CreateCloudFormationChangeSetResponse from '../model/CreateCloudFormationChangeSetResponse';
import CreateCloudFormationTemplateRequest from '../model/CreateCloudFormationTemplateRequest';
import CreateCloudFormationTemplateResponse from '../model/CreateCloudFormationTemplateResponse';
import GetApplicationPolicyResponse from '../model/GetApplicationPolicyResponse';
import GetApplicationResponse from '../model/GetApplicationResponse';
import GetCloudFormationTemplateResponse from '../model/GetCloudFormationTemplateResponse';
import ListApplicationDependenciesResponse from '../model/ListApplicationDependenciesResponse';
import ListApplicationVersionsResponse from '../model/ListApplicationVersionsResponse';
import ListApplicationsResponse from '../model/ListApplicationsResponse';
import PutApplicationPolicyRequest from '../model/PutApplicationPolicyRequest';
import PutApplicationPolicyResponse from '../model/PutApplicationPolicyResponse';
import UnshareApplicationRequest from '../model/UnshareApplicationRequest';
import UpdateApplicationRequest from '../model/UpdateApplicationRequest';
import UpdateApplicationResponse from '../model/UpdateApplicationResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 2017-09-08
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createApplication operation.
     * @callback module:api/DefaultApi~createApplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateApplicationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an application, optionally including an AWS SAM file to create the first application version in the same call.
     * @param {module:model/CreateApplicationRequest} createApplicationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateApplicationResponse}
     */
    createApplication(createApplicationRequest, opts, callback) {
      opts = opts || {};
      let postBody = createApplicationRequest;
      // verify the required parameter 'createApplicationRequest' is set
      if (createApplicationRequest === undefined || createApplicationRequest === null) {
        throw new Error("Missing the required parameter 'createApplicationRequest' when calling createApplication");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateApplicationResponse;
      return this.apiClient.callApi(
        '/applications', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createApplicationVersion operation.
     * @callback module:api/DefaultApi~createApplicationVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateApplicationVersionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an application version.
     * @param {String} applicationId The Amazon Resource Name (ARN) of the application.
     * @param {String} semanticVersion The semantic version of the new version.
     * @param {module:model/CreateApplicationVersionRequest} createApplicationVersionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createApplicationVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateApplicationVersionResponse}
     */
    createApplicationVersion(applicationId, semanticVersion, createApplicationVersionRequest, opts, callback) {
      opts = opts || {};
      let postBody = createApplicationVersionRequest;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling createApplicationVersion");
      }
      // verify the required parameter 'semanticVersion' is set
      if (semanticVersion === undefined || semanticVersion === null) {
        throw new Error("Missing the required parameter 'semanticVersion' when calling createApplicationVersion");
      }
      // verify the required parameter 'createApplicationVersionRequest' is set
      if (createApplicationVersionRequest === undefined || createApplicationVersionRequest === null) {
        throw new Error("Missing the required parameter 'createApplicationVersionRequest' when calling createApplicationVersion");
      }

      let pathParams = {
        'applicationId': applicationId,
        'semanticVersion': semanticVersion
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateApplicationVersionResponse;
      return this.apiClient.callApi(
        '/applications/{applicationId}/versions/{semanticVersion}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createCloudFormationChangeSet operation.
     * @callback module:api/DefaultApi~createCloudFormationChangeSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateCloudFormationChangeSetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an AWS CloudFormation change set for the given application.
     * @param {String} applicationId The Amazon Resource Name (ARN) of the application.
     * @param {module:model/CreateCloudFormationChangeSetRequest} createCloudFormationChangeSetRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createCloudFormationChangeSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateCloudFormationChangeSetResponse}
     */
    createCloudFormationChangeSet(applicationId, createCloudFormationChangeSetRequest, opts, callback) {
      opts = opts || {};
      let postBody = createCloudFormationChangeSetRequest;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling createCloudFormationChangeSet");
      }
      // verify the required parameter 'createCloudFormationChangeSetRequest' is set
      if (createCloudFormationChangeSetRequest === undefined || createCloudFormationChangeSetRequest === null) {
        throw new Error("Missing the required parameter 'createCloudFormationChangeSetRequest' when calling createCloudFormationChangeSet");
      }

      let pathParams = {
        'applicationId': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateCloudFormationChangeSetResponse;
      return this.apiClient.callApi(
        '/applications/{applicationId}/changesets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createCloudFormationTemplate operation.
     * @callback module:api/DefaultApi~createCloudFormationTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateCloudFormationTemplateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an AWS CloudFormation template.
     * @param {String} applicationId The Amazon Resource Name (ARN) of the application.
     * @param {module:model/CreateCloudFormationTemplateRequest} createCloudFormationTemplateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createCloudFormationTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateCloudFormationTemplateResponse}
     */
    createCloudFormationTemplate(applicationId, createCloudFormationTemplateRequest, opts, callback) {
      opts = opts || {};
      let postBody = createCloudFormationTemplateRequest;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling createCloudFormationTemplate");
      }
      // verify the required parameter 'createCloudFormationTemplateRequest' is set
      if (createCloudFormationTemplateRequest === undefined || createCloudFormationTemplateRequest === null) {
        throw new Error("Missing the required parameter 'createCloudFormationTemplateRequest' when calling createCloudFormationTemplate");
      }

      let pathParams = {
        'applicationId': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateCloudFormationTemplateResponse;
      return this.apiClient.callApi(
        '/applications/{applicationId}/templates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteApplication operation.
     * @callback module:api/DefaultApi~deleteApplicationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified application.
     * @param {String} applicationId The Amazon Resource Name (ARN) of the application.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteApplication(applicationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling deleteApplication");
      }

      let pathParams = {
        'applicationId': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/applications/{applicationId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getApplication operation.
     * @callback module:api/DefaultApi~getApplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetApplicationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the specified application.
     * @param {String} applicationId The Amazon Resource Name (ARN) of the application.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [semanticVersion] The semantic version of the application to get.
     * @param {module:api/DefaultApi~getApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetApplicationResponse}
     */
    getApplication(applicationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getApplication");
      }

      let pathParams = {
        'applicationId': applicationId
      };
      let queryParams = {
        'semanticVersion': opts['semanticVersion']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetApplicationResponse;
      return this.apiClient.callApi(
        '/applications/{applicationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getApplicationPolicy operation.
     * @callback module:api/DefaultApi~getApplicationPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetApplicationPolicyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the policy for the application.
     * @param {String} applicationId The Amazon Resource Name (ARN) of the application.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getApplicationPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetApplicationPolicyResponse}
     */
    getApplicationPolicy(applicationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getApplicationPolicy");
      }

      let pathParams = {
        'applicationId': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetApplicationPolicyResponse;
      return this.apiClient.callApi(
        '/applications/{applicationId}/policy', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCloudFormationTemplate operation.
     * @callback module:api/DefaultApi~getCloudFormationTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCloudFormationTemplateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the specified AWS CloudFormation template.
     * @param {String} applicationId The Amazon Resource Name (ARN) of the application.
     * @param {String} templateId <p>The UUID returned by CreateCloudFormationTemplate.</p><p>Pattern: [0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}</p>
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getCloudFormationTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCloudFormationTemplateResponse}
     */
    getCloudFormationTemplate(applicationId, templateId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getCloudFormationTemplate");
      }
      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling getCloudFormationTemplate");
      }

      let pathParams = {
        'applicationId': applicationId,
        'templateId': templateId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetCloudFormationTemplateResponse;
      return this.apiClient.callApi(
        '/applications/{applicationId}/templates/{templateId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listApplicationDependencies operation.
     * @callback module:api/DefaultApi~listApplicationDependenciesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListApplicationDependenciesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the list of applications nested in the containing application.
     * @param {String} applicationId The Amazon Resource Name (ARN) of the application.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxItems] The total number of items to return.
     * @param {String} [nextToken] A token to specify where to start paginating.
     * @param {String} [semanticVersion] The semantic version of the application to get.
     * @param {String} [maxItems2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listApplicationDependenciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListApplicationDependenciesResponse}
     */
    listApplicationDependencies(applicationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling listApplicationDependencies");
      }

      let pathParams = {
        'applicationId': applicationId
      };
      let queryParams = {
        'maxItems': opts['maxItems'],
        'nextToken': opts['nextToken'],
        'semanticVersion': opts['semanticVersion'],
        'MaxItems': opts['maxItems2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListApplicationDependenciesResponse;
      return this.apiClient.callApi(
        '/applications/{applicationId}/dependencies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listApplicationVersions operation.
     * @callback module:api/DefaultApi~listApplicationVersionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListApplicationVersionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists versions for the specified application.
     * @param {String} applicationId The Amazon Resource Name (ARN) of the application.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxItems] The total number of items to return.
     * @param {String} [nextToken] A token to specify where to start paginating.
     * @param {String} [maxItems2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listApplicationVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListApplicationVersionsResponse}
     */
    listApplicationVersions(applicationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling listApplicationVersions");
      }

      let pathParams = {
        'applicationId': applicationId
      };
      let queryParams = {
        'maxItems': opts['maxItems'],
        'nextToken': opts['nextToken'],
        'MaxItems': opts['maxItems2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListApplicationVersionsResponse;
      return this.apiClient.callApi(
        '/applications/{applicationId}/versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listApplications operation.
     * @callback module:api/DefaultApi~listApplicationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListApplicationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists applications owned by the requester.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxItems] The total number of items to return.
     * @param {String} [nextToken] A token to specify where to start paginating.
     * @param {String} [maxItems2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listApplicationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListApplicationsResponse}
     */
    listApplications(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'maxItems': opts['maxItems'],
        'nextToken': opts['nextToken'],
        'MaxItems': opts['maxItems2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListApplicationsResponse;
      return this.apiClient.callApi(
        '/applications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putApplicationPolicy operation.
     * @callback module:api/DefaultApi~putApplicationPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PutApplicationPolicyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the permission policy for an application. For the list of actions supported for this operation, see  <a href=\"https://docs.aws.amazon.com/serverlessrepo/latest/devguide/access-control-resource-based.html#application-permissions\">Application   Permissions</a>  .
     * @param {String} applicationId The Amazon Resource Name (ARN) of the application.
     * @param {module:model/PutApplicationPolicyRequest} putApplicationPolicyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putApplicationPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PutApplicationPolicyResponse}
     */
    putApplicationPolicy(applicationId, putApplicationPolicyRequest, opts, callback) {
      opts = opts || {};
      let postBody = putApplicationPolicyRequest;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling putApplicationPolicy");
      }
      // verify the required parameter 'putApplicationPolicyRequest' is set
      if (putApplicationPolicyRequest === undefined || putApplicationPolicyRequest === null) {
        throw new Error("Missing the required parameter 'putApplicationPolicyRequest' when calling putApplicationPolicy");
      }

      let pathParams = {
        'applicationId': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PutApplicationPolicyResponse;
      return this.apiClient.callApi(
        '/applications/{applicationId}/policy', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unshareApplication operation.
     * @callback module:api/DefaultApi~unshareApplicationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Unshares an application from an AWS Organization.</p><p>This operation can be called only from the organization's master account.</p>
     * @param {String} applicationId The Amazon Resource Name (ARN) of the application.
     * @param {module:model/UnshareApplicationRequest} unshareApplicationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~unshareApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    unshareApplication(applicationId, unshareApplicationRequest, opts, callback) {
      opts = opts || {};
      let postBody = unshareApplicationRequest;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling unshareApplication");
      }
      // verify the required parameter 'unshareApplicationRequest' is set
      if (unshareApplicationRequest === undefined || unshareApplicationRequest === null) {
        throw new Error("Missing the required parameter 'unshareApplicationRequest' when calling unshareApplication");
      }

      let pathParams = {
        'applicationId': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/applications/{applicationId}/unshare', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateApplication operation.
     * @callback module:api/DefaultApi~updateApplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateApplicationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the specified application.
     * @param {String} applicationId The Amazon Resource Name (ARN) of the application.
     * @param {module:model/UpdateApplicationRequest} updateApplicationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateApplicationResponse}
     */
    updateApplication(applicationId, updateApplicationRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateApplicationRequest;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling updateApplication");
      }
      // verify the required parameter 'updateApplicationRequest' is set
      if (updateApplicationRequest === undefined || updateApplicationRequest === null) {
        throw new Error("Missing the required parameter 'updateApplicationRequest' when calling updateApplication");
      }

      let pathParams = {
        'applicationId': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateApplicationResponse;
      return this.apiClient.callApi(
        '/applications/{applicationId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
