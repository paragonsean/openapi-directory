/**
 * AWSServerlessApplicationRepository
 * <p>The AWS Serverless Application Repository makes it easy for developers and enterprises to quickly find  and deploy serverless applications in the AWS Cloud. For more information about serverless applications,  see Serverless Computing and Applications on the AWS website.</p><p>The AWS Serverless Application Repository is deeply integrated with the AWS Lambda console, so that developers of   all levels can get started with serverless computing without needing to learn anything new. You can use category   keywords to browse for applications such as web and mobile backends, data processing applications, or chatbots.   You can also search for applications by name, publisher, or event source. To use an application, you simply choose it,   configure any required fields, and deploy it with a few clicks. </p><p>You can also easily publish applications, sharing them publicly with the community at large, or privately  within your team or across your organization. To publish a serverless application (or app), you can use the  AWS Management Console, AWS Command Line Interface (AWS CLI), or AWS SDKs to upload the code. Along with the  code, you upload a simple manifest file, also known as the AWS Serverless Application Model (AWS SAM) template.  For more information about AWS SAM, see AWS Serverless Application Model (AWS SAM) on the AWS Labs  GitHub repository.</p><p>The AWS Serverless Application Repository Developer Guide contains more information about the two developer  experiences available:</p><ul>  <li>  <p>Consuming Applications – Browse for applications and view information about them, including  source code and readme files. Also install, configure, and deploy applications of your choosing. </p>  <p>Publishing Applications – Configure and upload applications to make them available to other  developers, and publish new versions of applications. </p>  </li>  </ul>
 *
 * The version of the OpenAPI document: 2017-09-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsServerlessApplicationRepository);
  }
}(this, function(expect, AwsServerlessApplicationRepository) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsServerlessApplicationRepository.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('createApplication', function() {
      it('should call createApplication successfully', function(done) {
        //uncomment below and update the code to test createApplication
        //instance.createApplication(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createApplicationVersion', function() {
      it('should call createApplicationVersion successfully', function(done) {
        //uncomment below and update the code to test createApplicationVersion
        //instance.createApplicationVersion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCloudFormationChangeSet', function() {
      it('should call createCloudFormationChangeSet successfully', function(done) {
        //uncomment below and update the code to test createCloudFormationChangeSet
        //instance.createCloudFormationChangeSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCloudFormationTemplate', function() {
      it('should call createCloudFormationTemplate successfully', function(done) {
        //uncomment below and update the code to test createCloudFormationTemplate
        //instance.createCloudFormationTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteApplication', function() {
      it('should call deleteApplication successfully', function(done) {
        //uncomment below and update the code to test deleteApplication
        //instance.deleteApplication(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getApplication', function() {
      it('should call getApplication successfully', function(done) {
        //uncomment below and update the code to test getApplication
        //instance.getApplication(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getApplicationPolicy', function() {
      it('should call getApplicationPolicy successfully', function(done) {
        //uncomment below and update the code to test getApplicationPolicy
        //instance.getApplicationPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCloudFormationTemplate', function() {
      it('should call getCloudFormationTemplate successfully', function(done) {
        //uncomment below and update the code to test getCloudFormationTemplate
        //instance.getCloudFormationTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listApplicationDependencies', function() {
      it('should call listApplicationDependencies successfully', function(done) {
        //uncomment below and update the code to test listApplicationDependencies
        //instance.listApplicationDependencies(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listApplicationVersions', function() {
      it('should call listApplicationVersions successfully', function(done) {
        //uncomment below and update the code to test listApplicationVersions
        //instance.listApplicationVersions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listApplications', function() {
      it('should call listApplications successfully', function(done) {
        //uncomment below and update the code to test listApplications
        //instance.listApplications(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putApplicationPolicy', function() {
      it('should call putApplicationPolicy successfully', function(done) {
        //uncomment below and update the code to test putApplicationPolicy
        //instance.putApplicationPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('unshareApplication', function() {
      it('should call unshareApplication successfully', function(done) {
        //uncomment below and update the code to test unshareApplication
        //instance.unshareApplication(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateApplication', function() {
      it('should call updateApplication successfully', function(done) {
        //uncomment below and update the code to test updateApplication
        //instance.updateApplication(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
