/*
 * AWSServerlessApplicationRepository
 * <p>The AWS Serverless Application Repository makes it easy for developers and enterprises to quickly find  and deploy serverless applications in the AWS Cloud. For more information about serverless applications,  see Serverless Computing and Applications on the AWS website.</p><p>The AWS Serverless Application Repository is deeply integrated with the AWS Lambda console, so that developers of   all levels can get started with serverless computing without needing to learn anything new. You can use category   keywords to browse for applications such as web and mobile backends, data processing applications, or chatbots.   You can also search for applications by name, publisher, or event source. To use an application, you simply choose it,   configure any required fields, and deploy it with a few clicks. </p><p>You can also easily publish applications, sharing them publicly with the community at large, or privately  within your team or across your organization. To publish a serverless application (or app), you can use the  AWS Management Console, AWS Command Line Interface (AWS CLI), or AWS SDKs to upload the code. Along with the  code, you upload a simple manifest file, also known as the AWS Serverless Application Model (AWS SAM) template.  For more information about AWS SAM, see AWS Serverless Application Model (AWS SAM) on the AWS Labs  GitHub repository.</p><p>The AWS Serverless Application Repository Developer Guide contains more information about the two developer  experiences available:</p><ul>  <li>  <p>Consuming Applications – Browse for applications and view information about them, including  source code and readme files. Also install, configure, and deploy applications of your choosing. </p>  <p>Publishing Applications – Configure and upload applications to make them available to other  developers, and publish new versions of applications. </p>  </li>  </ul>
 *
 * The version of the OpenAPI document: 2017-09-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateApplicationRequest;
import org.openapitools.client.model.CreateApplicationResponse;
import org.openapitools.client.model.CreateApplicationVersionRequest;
import org.openapitools.client.model.CreateApplicationVersionResponse;
import org.openapitools.client.model.CreateCloudFormationChangeSetRequest;
import org.openapitools.client.model.CreateCloudFormationChangeSetResponse;
import org.openapitools.client.model.CreateCloudFormationTemplateRequest;
import org.openapitools.client.model.CreateCloudFormationTemplateResponse;
import org.openapitools.client.model.GetApplicationPolicyResponse;
import org.openapitools.client.model.GetApplicationResponse;
import org.openapitools.client.model.GetCloudFormationTemplateResponse;
import org.openapitools.client.model.ListApplicationDependenciesResponse;
import org.openapitools.client.model.ListApplicationVersionsResponse;
import org.openapitools.client.model.ListApplicationsResponse;
import org.openapitools.client.model.PutApplicationPolicyRequest;
import org.openapitools.client.model.PutApplicationPolicyResponse;
import org.openapitools.client.model.UnshareApplicationRequest;
import org.openapitools.client.model.UpdateApplicationRequest;
import org.openapitools.client.model.UpdateApplicationResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Creates an application, optionally including an AWS SAM file to create the first application version in the same call.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createApplicationTest() throws ApiException {
        CreateApplicationRequest createApplicationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateApplicationResponse response = api.createApplication(createApplicationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates an application version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createApplicationVersionTest() throws ApiException {
        String applicationId = null;
        String semanticVersion = null;
        CreateApplicationVersionRequest createApplicationVersionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateApplicationVersionResponse response = api.createApplicationVersion(applicationId, semanticVersion, createApplicationVersionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates an AWS CloudFormation change set for the given application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCloudFormationChangeSetTest() throws ApiException {
        String applicationId = null;
        CreateCloudFormationChangeSetRequest createCloudFormationChangeSetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateCloudFormationChangeSetResponse response = api.createCloudFormationChangeSet(applicationId, createCloudFormationChangeSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates an AWS CloudFormation template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCloudFormationTemplateTest() throws ApiException {
        String applicationId = null;
        CreateCloudFormationTemplateRequest createCloudFormationTemplateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateCloudFormationTemplateResponse response = api.createCloudFormationTemplate(applicationId, createCloudFormationTemplateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the specified application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteApplicationTest() throws ApiException {
        String applicationId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteApplication(applicationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets the specified application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApplicationTest() throws ApiException {
        String applicationId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String semanticVersion = null;
        GetApplicationResponse response = api.getApplication(applicationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, semanticVersion);
        // TODO: test validations
    }

    /**
     * Retrieves the policy for the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApplicationPolicyTest() throws ApiException {
        String applicationId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetApplicationPolicyResponse response = api.getApplicationPolicy(applicationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets the specified AWS CloudFormation template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCloudFormationTemplateTest() throws ApiException {
        String applicationId = null;
        String templateId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetCloudFormationTemplateResponse response = api.getCloudFormationTemplate(applicationId, templateId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the list of applications nested in the containing application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listApplicationDependenciesTest() throws ApiException {
        String applicationId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxItems = null;
        String nextToken = null;
        String semanticVersion = null;
        String maxItems2 = null;
        String nextToken2 = null;
        ListApplicationDependenciesResponse response = api.listApplicationDependencies(applicationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxItems, nextToken, semanticVersion, maxItems2, nextToken2);
        // TODO: test validations
    }

    /**
     * Lists versions for the specified application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listApplicationVersionsTest() throws ApiException {
        String applicationId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxItems = null;
        String nextToken = null;
        String maxItems2 = null;
        String nextToken2 = null;
        ListApplicationVersionsResponse response = api.listApplicationVersions(applicationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxItems, nextToken, maxItems2, nextToken2);
        // TODO: test validations
    }

    /**
     * Lists applications owned by the requester.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listApplicationsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxItems = null;
        String nextToken = null;
        String maxItems2 = null;
        String nextToken2 = null;
        ListApplicationsResponse response = api.listApplications(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxItems, nextToken, maxItems2, nextToken2);
        // TODO: test validations
    }

    /**
     * Sets the permission policy for an application. For the list of actions supported for this operation, see  &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/serverlessrepo/latest/devguide/access-control-resource-based.html#application-permissions\&quot;&gt;Application   Permissions&lt;/a&gt;  .
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putApplicationPolicyTest() throws ApiException {
        String applicationId = null;
        PutApplicationPolicyRequest putApplicationPolicyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PutApplicationPolicyResponse response = api.putApplicationPolicy(applicationId, putApplicationPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Unshares an application from an AWS Organization.&lt;/p&gt;&lt;p&gt;This operation can be called only from the organization&#39;s master account.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unshareApplicationTest() throws ApiException {
        String applicationId = null;
        UnshareApplicationRequest unshareApplicationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.unshareApplication(applicationId, unshareApplicationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the specified application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateApplicationTest() throws ApiException {
        String applicationId = null;
        UpdateApplicationRequest updateApplicationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateApplicationResponse response = api.updateApplication(applicationId, updateApplicationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
