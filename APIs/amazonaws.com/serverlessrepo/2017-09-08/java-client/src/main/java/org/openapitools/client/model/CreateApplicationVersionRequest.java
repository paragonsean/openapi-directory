/*
 * AWSServerlessApplicationRepository
 * <p>The AWS Serverless Application Repository makes it easy for developers and enterprises to quickly find  and deploy serverless applications in the AWS Cloud. For more information about serverless applications,  see Serverless Computing and Applications on the AWS website.</p><p>The AWS Serverless Application Repository is deeply integrated with the AWS Lambda console, so that developers of   all levels can get started with serverless computing without needing to learn anything new. You can use category   keywords to browse for applications such as web and mobile backends, data processing applications, or chatbots.   You can also search for applications by name, publisher, or event source. To use an application, you simply choose it,   configure any required fields, and deploy it with a few clicks. </p><p>You can also easily publish applications, sharing them publicly with the community at large, or privately  within your team or across your organization. To publish a serverless application (or app), you can use the  AWS Management Console, AWS Command Line Interface (AWS CLI), or AWS SDKs to upload the code. Along with the  code, you upload a simple manifest file, also known as the AWS Serverless Application Model (AWS SAM) template.  For more information about AWS SAM, see AWS Serverless Application Model (AWS SAM) on the AWS Labs  GitHub repository.</p><p>The AWS Serverless Application Repository Developer Guide contains more information about the two developer  experiences available:</p><ul>  <li>  <p>Consuming Applications – Browse for applications and view information about them, including  source code and readme files. Also install, configure, and deploy applications of your choosing. </p>  <p>Publishing Applications – Configure and upload applications to make them available to other  developers, and publish new versions of applications. </p>  </li>  </ul>
 *
 * The version of the OpenAPI document: 2017-09-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateApplicationVersionRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:44.517434-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateApplicationVersionRequest {
  public static final String SERIALIZED_NAME_SOURCE_CODE_ARCHIVE_URL = "sourceCodeArchiveUrl";
  @SerializedName(SERIALIZED_NAME_SOURCE_CODE_ARCHIVE_URL)
  private String sourceCodeArchiveUrl;

  public static final String SERIALIZED_NAME_SOURCE_CODE_URL = "sourceCodeUrl";
  @SerializedName(SERIALIZED_NAME_SOURCE_CODE_URL)
  private String sourceCodeUrl;

  public static final String SERIALIZED_NAME_TEMPLATE_BODY = "templateBody";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_BODY)
  private String templateBody;

  public static final String SERIALIZED_NAME_TEMPLATE_URL = "templateUrl";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_URL)
  private String templateUrl;

  public CreateApplicationVersionRequest() {
  }

  public CreateApplicationVersionRequest sourceCodeArchiveUrl(String sourceCodeArchiveUrl) {
    this.sourceCodeArchiveUrl = sourceCodeArchiveUrl;
    return this;
  }

  /**
   * &lt;p&gt;A link to the S3 object that contains the ZIP archive of the source code for this version of your application.&lt;/p&gt;&lt;p&gt;Maximum size 50 MB&lt;/p&gt;
   * @return sourceCodeArchiveUrl
   */
  @javax.annotation.Nullable
  public String getSourceCodeArchiveUrl() {
    return sourceCodeArchiveUrl;
  }

  public void setSourceCodeArchiveUrl(String sourceCodeArchiveUrl) {
    this.sourceCodeArchiveUrl = sourceCodeArchiveUrl;
  }


  public CreateApplicationVersionRequest sourceCodeUrl(String sourceCodeUrl) {
    this.sourceCodeUrl = sourceCodeUrl;
    return this;
  }

  /**
   * A link to a public repository for the source code of your application, for example the URL of a specific GitHub commit.
   * @return sourceCodeUrl
   */
  @javax.annotation.Nullable
  public String getSourceCodeUrl() {
    return sourceCodeUrl;
  }

  public void setSourceCodeUrl(String sourceCodeUrl) {
    this.sourceCodeUrl = sourceCodeUrl;
  }


  public CreateApplicationVersionRequest templateBody(String templateBody) {
    this.templateBody = templateBody;
    return this;
  }

  /**
   * The raw packaged AWS SAM template of your application.
   * @return templateBody
   */
  @javax.annotation.Nullable
  public String getTemplateBody() {
    return templateBody;
  }

  public void setTemplateBody(String templateBody) {
    this.templateBody = templateBody;
  }


  public CreateApplicationVersionRequest templateUrl(String templateUrl) {
    this.templateUrl = templateUrl;
    return this;
  }

  /**
   * A link to the packaged AWS SAM template of your application.
   * @return templateUrl
   */
  @javax.annotation.Nullable
  public String getTemplateUrl() {
    return templateUrl;
  }

  public void setTemplateUrl(String templateUrl) {
    this.templateUrl = templateUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateApplicationVersionRequest createApplicationVersionRequest = (CreateApplicationVersionRequest) o;
    return Objects.equals(this.sourceCodeArchiveUrl, createApplicationVersionRequest.sourceCodeArchiveUrl) &&
        Objects.equals(this.sourceCodeUrl, createApplicationVersionRequest.sourceCodeUrl) &&
        Objects.equals(this.templateBody, createApplicationVersionRequest.templateBody) &&
        Objects.equals(this.templateUrl, createApplicationVersionRequest.templateUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sourceCodeArchiveUrl, sourceCodeUrl, templateBody, templateUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateApplicationVersionRequest {\n");
    sb.append("    sourceCodeArchiveUrl: ").append(toIndentedString(sourceCodeArchiveUrl)).append("\n");
    sb.append("    sourceCodeUrl: ").append(toIndentedString(sourceCodeUrl)).append("\n");
    sb.append("    templateBody: ").append(toIndentedString(templateBody)).append("\n");
    sb.append("    templateUrl: ").append(toIndentedString(templateUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("sourceCodeArchiveUrl");
    openapiFields.add("sourceCodeUrl");
    openapiFields.add("templateBody");
    openapiFields.add("templateUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateApplicationVersionRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateApplicationVersionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateApplicationVersionRequest is not found in the empty JSON string", CreateApplicationVersionRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateApplicationVersionRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateApplicationVersionRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("sourceCodeArchiveUrl") != null && !jsonObj.get("sourceCodeArchiveUrl").isJsonNull()) && !jsonObj.get("sourceCodeArchiveUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceCodeArchiveUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceCodeArchiveUrl").toString()));
      }
      if ((jsonObj.get("sourceCodeUrl") != null && !jsonObj.get("sourceCodeUrl").isJsonNull()) && !jsonObj.get("sourceCodeUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceCodeUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceCodeUrl").toString()));
      }
      if ((jsonObj.get("templateBody") != null && !jsonObj.get("templateBody").isJsonNull()) && !jsonObj.get("templateBody").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `templateBody` to be a primitive type in the JSON string but got `%s`", jsonObj.get("templateBody").toString()));
      }
      if ((jsonObj.get("templateUrl") != null && !jsonObj.get("templateUrl").isJsonNull()) && !jsonObj.get("templateUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `templateUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("templateUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateApplicationVersionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateApplicationVersionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateApplicationVersionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateApplicationVersionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateApplicationVersionRequest>() {
           @Override
           public void write(JsonWriter out, CreateApplicationVersionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateApplicationVersionRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateApplicationVersionRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateApplicationVersionRequest
   * @throws IOException if the JSON string is invalid with respect to CreateApplicationVersionRequest
   */
  public static CreateApplicationVersionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateApplicationVersionRequest.class);
  }

  /**
   * Convert an instance of CreateApplicationVersionRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

