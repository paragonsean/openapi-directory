/*
 * AWSServerlessApplicationRepository
 * <p>The AWS Serverless Application Repository makes it easy for developers and enterprises to quickly find  and deploy serverless applications in the AWS Cloud. For more information about serverless applications,  see Serverless Computing and Applications on the AWS website.</p><p>The AWS Serverless Application Repository is deeply integrated with the AWS Lambda console, so that developers of   all levels can get started with serverless computing without needing to learn anything new. You can use category   keywords to browse for applications such as web and mobile backends, data processing applications, or chatbots.   You can also search for applications by name, publisher, or event source. To use an application, you simply choose it,   configure any required fields, and deploy it with a few clicks. </p><p>You can also easily publish applications, sharing them publicly with the community at large, or privately  within your team or across your organization. To publish a serverless application (or app), you can use the  AWS Management Console, AWS Command Line Interface (AWS CLI), or AWS SDKs to upload the code. Along with the  code, you upload a simple manifest file, also known as the AWS Serverless Application Model (AWS SAM) template.  For more information about AWS SAM, see AWS Serverless Application Model (AWS SAM) on the AWS Labs  GitHub repository.</p><p>The AWS Serverless Application Repository Developer Guide contains more information about the two developer  experiences available:</p><ul>  <li>  <p>Consuming Applications – Browse for applications and view information about them, including  source code and readme files. Also install, configure, and deploy applications of your choosing. </p>  <p>Publishing Applications – Configure and upload applications to make them available to other  developers, and publish new versions of applications. </p>  </li>  </ul>
 *
 * The version of the OpenAPI document: 2017-09-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateCloudFormationChangeSetResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:44.517434-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateCloudFormationChangeSetResponse {
  public static final String SERIALIZED_NAME_APPLICATION_ID = "ApplicationId";
  @SerializedName(SERIALIZED_NAME_APPLICATION_ID)
  private String applicationId;

  public static final String SERIALIZED_NAME_CHANGE_SET_ID = "ChangeSetId";
  @SerializedName(SERIALIZED_NAME_CHANGE_SET_ID)
  private String changeSetId;

  public static final String SERIALIZED_NAME_SEMANTIC_VERSION = "SemanticVersion";
  @SerializedName(SERIALIZED_NAME_SEMANTIC_VERSION)
  private String semanticVersion;

  public static final String SERIALIZED_NAME_STACK_ID = "StackId";
  @SerializedName(SERIALIZED_NAME_STACK_ID)
  private String stackId;

  public CreateCloudFormationChangeSetResponse() {
  }

  public CreateCloudFormationChangeSetResponse applicationId(String applicationId) {
    this.applicationId = applicationId;
    return this;
  }

  /**
   * Get applicationId
   * @return applicationId
   */
  @javax.annotation.Nullable
  public String getApplicationId() {
    return applicationId;
  }

  public void setApplicationId(String applicationId) {
    this.applicationId = applicationId;
  }


  public CreateCloudFormationChangeSetResponse changeSetId(String changeSetId) {
    this.changeSetId = changeSetId;
    return this;
  }

  /**
   * Get changeSetId
   * @return changeSetId
   */
  @javax.annotation.Nullable
  public String getChangeSetId() {
    return changeSetId;
  }

  public void setChangeSetId(String changeSetId) {
    this.changeSetId = changeSetId;
  }


  public CreateCloudFormationChangeSetResponse semanticVersion(String semanticVersion) {
    this.semanticVersion = semanticVersion;
    return this;
  }

  /**
   * Get semanticVersion
   * @return semanticVersion
   */
  @javax.annotation.Nullable
  public String getSemanticVersion() {
    return semanticVersion;
  }

  public void setSemanticVersion(String semanticVersion) {
    this.semanticVersion = semanticVersion;
  }


  public CreateCloudFormationChangeSetResponse stackId(String stackId) {
    this.stackId = stackId;
    return this;
  }

  /**
   * Get stackId
   * @return stackId
   */
  @javax.annotation.Nullable
  public String getStackId() {
    return stackId;
  }

  public void setStackId(String stackId) {
    this.stackId = stackId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateCloudFormationChangeSetResponse createCloudFormationChangeSetResponse = (CreateCloudFormationChangeSetResponse) o;
    return Objects.equals(this.applicationId, createCloudFormationChangeSetResponse.applicationId) &&
        Objects.equals(this.changeSetId, createCloudFormationChangeSetResponse.changeSetId) &&
        Objects.equals(this.semanticVersion, createCloudFormationChangeSetResponse.semanticVersion) &&
        Objects.equals(this.stackId, createCloudFormationChangeSetResponse.stackId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationId, changeSetId, semanticVersion, stackId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateCloudFormationChangeSetResponse {\n");
    sb.append("    applicationId: ").append(toIndentedString(applicationId)).append("\n");
    sb.append("    changeSetId: ").append(toIndentedString(changeSetId)).append("\n");
    sb.append("    semanticVersion: ").append(toIndentedString(semanticVersion)).append("\n");
    sb.append("    stackId: ").append(toIndentedString(stackId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ApplicationId");
    openapiFields.add("ChangeSetId");
    openapiFields.add("SemanticVersion");
    openapiFields.add("StackId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateCloudFormationChangeSetResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateCloudFormationChangeSetResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateCloudFormationChangeSetResponse is not found in the empty JSON string", CreateCloudFormationChangeSetResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateCloudFormationChangeSetResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateCloudFormationChangeSetResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ApplicationId`
      if (jsonObj.get("ApplicationId") != null && !jsonObj.get("ApplicationId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ApplicationId"));
      }
      // validate the optional field `ChangeSetId`
      if (jsonObj.get("ChangeSetId") != null && !jsonObj.get("ChangeSetId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ChangeSetId"));
      }
      // validate the optional field `SemanticVersion`
      if (jsonObj.get("SemanticVersion") != null && !jsonObj.get("SemanticVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SemanticVersion"));
      }
      // validate the optional field `StackId`
      if (jsonObj.get("StackId") != null && !jsonObj.get("StackId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StackId"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateCloudFormationChangeSetResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateCloudFormationChangeSetResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateCloudFormationChangeSetResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateCloudFormationChangeSetResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateCloudFormationChangeSetResponse>() {
           @Override
           public void write(JsonWriter out, CreateCloudFormationChangeSetResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateCloudFormationChangeSetResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateCloudFormationChangeSetResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateCloudFormationChangeSetResponse
   * @throws IOException if the JSON string is invalid with respect to CreateCloudFormationChangeSetResponse
   */
  public static CreateCloudFormationChangeSetResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateCloudFormationChangeSetResponse.class);
  }

  /**
   * Convert an instance of CreateCloudFormationChangeSetResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

