/*
 * AWSServerlessApplicationRepository
 * <p>The AWS Serverless Application Repository makes it easy for developers and enterprises to quickly find  and deploy serverless applications in the AWS Cloud. For more information about serverless applications,  see Serverless Computing and Applications on the AWS website.</p><p>The AWS Serverless Application Repository is deeply integrated with the AWS Lambda console, so that developers of   all levels can get started with serverless computing without needing to learn anything new. You can use category   keywords to browse for applications such as web and mobile backends, data processing applications, or chatbots.   You can also search for applications by name, publisher, or event source. To use an application, you simply choose it,   configure any required fields, and deploy it with a few clicks. </p><p>You can also easily publish applications, sharing them publicly with the community at large, or privately  within your team or across your organization. To publish a serverless application (or app), you can use the  AWS Management Console, AWS Command Line Interface (AWS CLI), or AWS SDKs to upload the code. Along with the  code, you upload a simple manifest file, also known as the AWS Serverless Application Model (AWS SAM) template.  For more information about AWS SAM, see AWS Serverless Application Model (AWS SAM) on the AWS Labs  GitHub repository.</p><p>The AWS Serverless Application Repository Developer Guide contains more information about the two developer  experiences available:</p><ul>  <li>  <p>Consuming Applications – Browse for applications and view information about them, including  source code and readme files. Also install, configure, and deploy applications of your choosing. </p>  <p>Publishing Applications – Configure and upload applications to make them available to other  developers, and publish new versions of applications. </p>  </li>  </ul>
 *
 * The version of the OpenAPI document: 2017-09-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateApplicationRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:44.517434-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateApplicationRequest {
  public static final String SERIALIZED_NAME_AUTHOR = "author";
  @SerializedName(SERIALIZED_NAME_AUTHOR)
  private String author;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_HOME_PAGE_URL = "homePageUrl";
  @SerializedName(SERIALIZED_NAME_HOME_PAGE_URL)
  private String homePageUrl;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private List<String> labels = new ArrayList<>();

  public static final String SERIALIZED_NAME_LICENSE_BODY = "licenseBody";
  @SerializedName(SERIALIZED_NAME_LICENSE_BODY)
  private String licenseBody;

  public static final String SERIALIZED_NAME_LICENSE_URL = "licenseUrl";
  @SerializedName(SERIALIZED_NAME_LICENSE_URL)
  private String licenseUrl;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_README_BODY = "readmeBody";
  @SerializedName(SERIALIZED_NAME_README_BODY)
  private String readmeBody;

  public static final String SERIALIZED_NAME_README_URL = "readmeUrl";
  @SerializedName(SERIALIZED_NAME_README_URL)
  private String readmeUrl;

  public static final String SERIALIZED_NAME_SEMANTIC_VERSION = "semanticVersion";
  @SerializedName(SERIALIZED_NAME_SEMANTIC_VERSION)
  private String semanticVersion;

  public static final String SERIALIZED_NAME_SOURCE_CODE_ARCHIVE_URL = "sourceCodeArchiveUrl";
  @SerializedName(SERIALIZED_NAME_SOURCE_CODE_ARCHIVE_URL)
  private String sourceCodeArchiveUrl;

  public static final String SERIALIZED_NAME_SOURCE_CODE_URL = "sourceCodeUrl";
  @SerializedName(SERIALIZED_NAME_SOURCE_CODE_URL)
  private String sourceCodeUrl;

  public static final String SERIALIZED_NAME_SPDX_LICENSE_ID = "spdxLicenseId";
  @SerializedName(SERIALIZED_NAME_SPDX_LICENSE_ID)
  private String spdxLicenseId;

  public static final String SERIALIZED_NAME_TEMPLATE_BODY = "templateBody";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_BODY)
  private String templateBody;

  public static final String SERIALIZED_NAME_TEMPLATE_URL = "templateUrl";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_URL)
  private String templateUrl;

  public CreateApplicationRequest() {
  }

  public CreateApplicationRequest author(String author) {
    this.author = author;
    return this;
  }

  /**
   * &lt;p&gt;The name of the author publishing the app.&lt;/p&gt;&lt;p&gt;Minimum length&#x3D;1. Maximum length&#x3D;127.&lt;/p&gt;&lt;p&gt;Pattern \&quot;^[a-z0-9](([a-z0-9]|-(?!-))*[a-z0-9])?$\&quot;;&lt;/p&gt;
   * @return author
   */
  @javax.annotation.Nonnull
  public String getAuthor() {
    return author;
  }

  public void setAuthor(String author) {
    this.author = author;
  }


  public CreateApplicationRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * &lt;p&gt;The description of the application.&lt;/p&gt;&lt;p&gt;Minimum length&#x3D;1. Maximum length&#x3D;256&lt;/p&gt;
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateApplicationRequest homePageUrl(String homePageUrl) {
    this.homePageUrl = homePageUrl;
    return this;
  }

  /**
   * A URL with more information about the application, for example the location of your GitHub repository for the application.
   * @return homePageUrl
   */
  @javax.annotation.Nullable
  public String getHomePageUrl() {
    return homePageUrl;
  }

  public void setHomePageUrl(String homePageUrl) {
    this.homePageUrl = homePageUrl;
  }


  public CreateApplicationRequest labels(List<String> labels) {
    this.labels = labels;
    return this;
  }

  public CreateApplicationRequest addLabelsItem(String labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<>();
    }
    this.labels.add(labelsItem);
    return this;
  }

  /**
   * &lt;p&gt;Labels to improve discovery of apps in search results.&lt;/p&gt;&lt;p&gt;Minimum length&#x3D;1. Maximum length&#x3D;127. Maximum number of labels: 10&lt;/p&gt;&lt;p&gt;Pattern: \&quot;^[a-zA-Z0-9+\\\\-_:\\/@]+$\&quot;;&lt;/p&gt;
   * @return labels
   */
  @javax.annotation.Nullable
  public List<String> getLabels() {
    return labels;
  }

  public void setLabels(List<String> labels) {
    this.labels = labels;
  }


  public CreateApplicationRequest licenseBody(String licenseBody) {
    this.licenseBody = licenseBody;
    return this;
  }

  /**
   * &lt;p&gt;A local text file that contains the license of the app that matches the spdxLicenseID value of your application.  The file has the format file://&amp;lt;path&gt;/&amp;lt;filename&gt;.&lt;/p&gt;&lt;p&gt;Maximum size 5 MB&lt;/p&gt;&lt;p&gt;You can specify only one of licenseBody and licenseUrl; otherwise, an error results.&lt;/p&gt;
   * @return licenseBody
   */
  @javax.annotation.Nullable
  public String getLicenseBody() {
    return licenseBody;
  }

  public void setLicenseBody(String licenseBody) {
    this.licenseBody = licenseBody;
  }


  public CreateApplicationRequest licenseUrl(String licenseUrl) {
    this.licenseUrl = licenseUrl;
    return this;
  }

  /**
   * &lt;p&gt;A link to the S3 object that contains the license of the app that matches the spdxLicenseID value of your application.&lt;/p&gt;&lt;p&gt;Maximum size 5 MB&lt;/p&gt;&lt;p&gt;You can specify only one of licenseBody and licenseUrl; otherwise, an error results.&lt;/p&gt;
   * @return licenseUrl
   */
  @javax.annotation.Nullable
  public String getLicenseUrl() {
    return licenseUrl;
  }

  public void setLicenseUrl(String licenseUrl) {
    this.licenseUrl = licenseUrl;
  }


  public CreateApplicationRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * &lt;p&gt;The name of the application that you want to publish.&lt;/p&gt;&lt;p&gt;Minimum length&#x3D;1. Maximum length&#x3D;140&lt;/p&gt;&lt;p&gt;Pattern: \&quot;[a-zA-Z0-9\\\\-]+\&quot;;&lt;/p&gt;
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateApplicationRequest readmeBody(String readmeBody) {
    this.readmeBody = readmeBody;
    return this;
  }

  /**
   * &lt;p&gt;A local text readme file in Markdown language that contains a more detailed description of the application and how it works.  The file has the format file://&amp;lt;path&gt;/&amp;lt;filename&gt;.&lt;/p&gt;&lt;p&gt;Maximum size 5 MB&lt;/p&gt;&lt;p&gt;You can specify only one of readmeBody and readmeUrl; otherwise, an error results.&lt;/p&gt;
   * @return readmeBody
   */
  @javax.annotation.Nullable
  public String getReadmeBody() {
    return readmeBody;
  }

  public void setReadmeBody(String readmeBody) {
    this.readmeBody = readmeBody;
  }


  public CreateApplicationRequest readmeUrl(String readmeUrl) {
    this.readmeUrl = readmeUrl;
    return this;
  }

  /**
   * &lt;p&gt;A link to the S3 object in Markdown language that contains a more detailed description of the application and how it works.&lt;/p&gt;&lt;p&gt;Maximum size 5 MB&lt;/p&gt;&lt;p&gt;You can specify only one of readmeBody and readmeUrl; otherwise, an error results.&lt;/p&gt;
   * @return readmeUrl
   */
  @javax.annotation.Nullable
  public String getReadmeUrl() {
    return readmeUrl;
  }

  public void setReadmeUrl(String readmeUrl) {
    this.readmeUrl = readmeUrl;
  }


  public CreateApplicationRequest semanticVersion(String semanticVersion) {
    this.semanticVersion = semanticVersion;
    return this;
  }

  /**
   * &lt;p&gt;The semantic version of the application:&lt;/p&gt;&lt;p&gt;  &lt;a href&#x3D;\&quot;https://semver.org/\&quot;&gt;https://semver.org/&lt;/a&gt;  &lt;/p&gt;
   * @return semanticVersion
   */
  @javax.annotation.Nullable
  public String getSemanticVersion() {
    return semanticVersion;
  }

  public void setSemanticVersion(String semanticVersion) {
    this.semanticVersion = semanticVersion;
  }


  public CreateApplicationRequest sourceCodeArchiveUrl(String sourceCodeArchiveUrl) {
    this.sourceCodeArchiveUrl = sourceCodeArchiveUrl;
    return this;
  }

  /**
   * &lt;p&gt;A link to the S3 object that contains the ZIP archive of the source code for this version of your application.&lt;/p&gt;&lt;p&gt;Maximum size 50 MB&lt;/p&gt;
   * @return sourceCodeArchiveUrl
   */
  @javax.annotation.Nullable
  public String getSourceCodeArchiveUrl() {
    return sourceCodeArchiveUrl;
  }

  public void setSourceCodeArchiveUrl(String sourceCodeArchiveUrl) {
    this.sourceCodeArchiveUrl = sourceCodeArchiveUrl;
  }


  public CreateApplicationRequest sourceCodeUrl(String sourceCodeUrl) {
    this.sourceCodeUrl = sourceCodeUrl;
    return this;
  }

  /**
   * A link to a public repository for the source code of your application, for example the URL of a specific GitHub commit.
   * @return sourceCodeUrl
   */
  @javax.annotation.Nullable
  public String getSourceCodeUrl() {
    return sourceCodeUrl;
  }

  public void setSourceCodeUrl(String sourceCodeUrl) {
    this.sourceCodeUrl = sourceCodeUrl;
  }


  public CreateApplicationRequest spdxLicenseId(String spdxLicenseId) {
    this.spdxLicenseId = spdxLicenseId;
    return this;
  }

  /**
   * A valid identifier from &lt;a href&#x3D;\&quot;https://spdx.org/licenses/\&quot;&gt;https://spdx.org/licenses/&lt;/a&gt;.
   * @return spdxLicenseId
   */
  @javax.annotation.Nullable
  public String getSpdxLicenseId() {
    return spdxLicenseId;
  }

  public void setSpdxLicenseId(String spdxLicenseId) {
    this.spdxLicenseId = spdxLicenseId;
  }


  public CreateApplicationRequest templateBody(String templateBody) {
    this.templateBody = templateBody;
    return this;
  }

  /**
   * &lt;p&gt;The local raw packaged AWS SAM template file of your application.  The file has the format file://&amp;lt;path&gt;/&amp;lt;filename&gt;.&lt;/p&gt;&lt;p&gt;You can specify only one of templateBody and templateUrl; otherwise an error results.&lt;/p&gt;
   * @return templateBody
   */
  @javax.annotation.Nullable
  public String getTemplateBody() {
    return templateBody;
  }

  public void setTemplateBody(String templateBody) {
    this.templateBody = templateBody;
  }


  public CreateApplicationRequest templateUrl(String templateUrl) {
    this.templateUrl = templateUrl;
    return this;
  }

  /**
   * &lt;p&gt;A link to the S3 object containing the packaged AWS SAM template of your application.&lt;/p&gt;&lt;p&gt;You can specify only one of templateBody and templateUrl; otherwise an error results.&lt;/p&gt;
   * @return templateUrl
   */
  @javax.annotation.Nullable
  public String getTemplateUrl() {
    return templateUrl;
  }

  public void setTemplateUrl(String templateUrl) {
    this.templateUrl = templateUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateApplicationRequest createApplicationRequest = (CreateApplicationRequest) o;
    return Objects.equals(this.author, createApplicationRequest.author) &&
        Objects.equals(this.description, createApplicationRequest.description) &&
        Objects.equals(this.homePageUrl, createApplicationRequest.homePageUrl) &&
        Objects.equals(this.labels, createApplicationRequest.labels) &&
        Objects.equals(this.licenseBody, createApplicationRequest.licenseBody) &&
        Objects.equals(this.licenseUrl, createApplicationRequest.licenseUrl) &&
        Objects.equals(this.name, createApplicationRequest.name) &&
        Objects.equals(this.readmeBody, createApplicationRequest.readmeBody) &&
        Objects.equals(this.readmeUrl, createApplicationRequest.readmeUrl) &&
        Objects.equals(this.semanticVersion, createApplicationRequest.semanticVersion) &&
        Objects.equals(this.sourceCodeArchiveUrl, createApplicationRequest.sourceCodeArchiveUrl) &&
        Objects.equals(this.sourceCodeUrl, createApplicationRequest.sourceCodeUrl) &&
        Objects.equals(this.spdxLicenseId, createApplicationRequest.spdxLicenseId) &&
        Objects.equals(this.templateBody, createApplicationRequest.templateBody) &&
        Objects.equals(this.templateUrl, createApplicationRequest.templateUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(author, description, homePageUrl, labels, licenseBody, licenseUrl, name, readmeBody, readmeUrl, semanticVersion, sourceCodeArchiveUrl, sourceCodeUrl, spdxLicenseId, templateBody, templateUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateApplicationRequest {\n");
    sb.append("    author: ").append(toIndentedString(author)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    homePageUrl: ").append(toIndentedString(homePageUrl)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    licenseBody: ").append(toIndentedString(licenseBody)).append("\n");
    sb.append("    licenseUrl: ").append(toIndentedString(licenseUrl)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    readmeBody: ").append(toIndentedString(readmeBody)).append("\n");
    sb.append("    readmeUrl: ").append(toIndentedString(readmeUrl)).append("\n");
    sb.append("    semanticVersion: ").append(toIndentedString(semanticVersion)).append("\n");
    sb.append("    sourceCodeArchiveUrl: ").append(toIndentedString(sourceCodeArchiveUrl)).append("\n");
    sb.append("    sourceCodeUrl: ").append(toIndentedString(sourceCodeUrl)).append("\n");
    sb.append("    spdxLicenseId: ").append(toIndentedString(spdxLicenseId)).append("\n");
    sb.append("    templateBody: ").append(toIndentedString(templateBody)).append("\n");
    sb.append("    templateUrl: ").append(toIndentedString(templateUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("author");
    openapiFields.add("description");
    openapiFields.add("homePageUrl");
    openapiFields.add("labels");
    openapiFields.add("licenseBody");
    openapiFields.add("licenseUrl");
    openapiFields.add("name");
    openapiFields.add("readmeBody");
    openapiFields.add("readmeUrl");
    openapiFields.add("semanticVersion");
    openapiFields.add("sourceCodeArchiveUrl");
    openapiFields.add("sourceCodeUrl");
    openapiFields.add("spdxLicenseId");
    openapiFields.add("templateBody");
    openapiFields.add("templateUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("author");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateApplicationRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateApplicationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateApplicationRequest is not found in the empty JSON string", CreateApplicationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateApplicationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateApplicationRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateApplicationRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("author").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `author` to be a primitive type in the JSON string but got `%s`", jsonObj.get("author").toString()));
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("homePageUrl") != null && !jsonObj.get("homePageUrl").isJsonNull()) && !jsonObj.get("homePageUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `homePageUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("homePageUrl").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("labels") != null && !jsonObj.get("labels").isJsonNull() && !jsonObj.get("labels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `labels` to be an array in the JSON string but got `%s`", jsonObj.get("labels").toString()));
      }
      if ((jsonObj.get("licenseBody") != null && !jsonObj.get("licenseBody").isJsonNull()) && !jsonObj.get("licenseBody").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `licenseBody` to be a primitive type in the JSON string but got `%s`", jsonObj.get("licenseBody").toString()));
      }
      if ((jsonObj.get("licenseUrl") != null && !jsonObj.get("licenseUrl").isJsonNull()) && !jsonObj.get("licenseUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `licenseUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("licenseUrl").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("readmeBody") != null && !jsonObj.get("readmeBody").isJsonNull()) && !jsonObj.get("readmeBody").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `readmeBody` to be a primitive type in the JSON string but got `%s`", jsonObj.get("readmeBody").toString()));
      }
      if ((jsonObj.get("readmeUrl") != null && !jsonObj.get("readmeUrl").isJsonNull()) && !jsonObj.get("readmeUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `readmeUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("readmeUrl").toString()));
      }
      if ((jsonObj.get("semanticVersion") != null && !jsonObj.get("semanticVersion").isJsonNull()) && !jsonObj.get("semanticVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `semanticVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("semanticVersion").toString()));
      }
      if ((jsonObj.get("sourceCodeArchiveUrl") != null && !jsonObj.get("sourceCodeArchiveUrl").isJsonNull()) && !jsonObj.get("sourceCodeArchiveUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceCodeArchiveUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceCodeArchiveUrl").toString()));
      }
      if ((jsonObj.get("sourceCodeUrl") != null && !jsonObj.get("sourceCodeUrl").isJsonNull()) && !jsonObj.get("sourceCodeUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceCodeUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceCodeUrl").toString()));
      }
      if ((jsonObj.get("spdxLicenseId") != null && !jsonObj.get("spdxLicenseId").isJsonNull()) && !jsonObj.get("spdxLicenseId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `spdxLicenseId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("spdxLicenseId").toString()));
      }
      if ((jsonObj.get("templateBody") != null && !jsonObj.get("templateBody").isJsonNull()) && !jsonObj.get("templateBody").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `templateBody` to be a primitive type in the JSON string but got `%s`", jsonObj.get("templateBody").toString()));
      }
      if ((jsonObj.get("templateUrl") != null && !jsonObj.get("templateUrl").isJsonNull()) && !jsonObj.get("templateUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `templateUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("templateUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateApplicationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateApplicationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateApplicationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateApplicationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateApplicationRequest>() {
           @Override
           public void write(JsonWriter out, CreateApplicationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateApplicationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateApplicationRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateApplicationRequest
   * @throws IOException if the JSON string is invalid with respect to CreateApplicationRequest
   */
  public static CreateApplicationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateApplicationRequest.class);
  }

  /**
   * Convert an instance of CreateApplicationRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

