/*
 * AWSServerlessApplicationRepository
 * <p>The AWS Serverless Application Repository makes it easy for developers and enterprises to quickly find  and deploy serverless applications in the AWS Cloud. For more information about serverless applications,  see Serverless Computing and Applications on the AWS website.</p><p>The AWS Serverless Application Repository is deeply integrated with the AWS Lambda console, so that developers of   all levels can get started with serverless computing without needing to learn anything new. You can use category   keywords to browse for applications such as web and mobile backends, data processing applications, or chatbots.   You can also search for applications by name, publisher, or event source. To use an application, you simply choose it,   configure any required fields, and deploy it with a few clicks. </p><p>You can also easily publish applications, sharing them publicly with the community at large, or privately  within your team or across your organization. To publish a serverless application (or app), you can use the  AWS Management Console, AWS Command Line Interface (AWS CLI), or AWS SDKs to upload the code. Along with the  code, you upload a simple manifest file, also known as the AWS Serverless Application Model (AWS SAM) template.  For more information about AWS SAM, see AWS Serverless Application Model (AWS SAM) on the AWS Labs  GitHub repository.</p><p>The AWS Serverless Application Repository Developer Guide contains more information about the two developer  experiences available:</p><ul>  <li>  <p>Consuming Applications – Browse for applications and view information about them, including  source code and readme files. Also install, configure, and deploy applications of your choosing. </p>  <p>Publishing Applications – Configure and upload applications to make them available to other  developers, and publish new versions of applications. </p>  </li>  </ul>
 *
 * The version of the OpenAPI document: 2017-09-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateApplicationRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:44.517434-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateApplicationRequest {
  public static final String SERIALIZED_NAME_AUTHOR = "author";
  @SerializedName(SERIALIZED_NAME_AUTHOR)
  private String author;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_HOME_PAGE_URL = "homePageUrl";
  @SerializedName(SERIALIZED_NAME_HOME_PAGE_URL)
  private String homePageUrl;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private List<String> labels = new ArrayList<>();

  public static final String SERIALIZED_NAME_README_BODY = "readmeBody";
  @SerializedName(SERIALIZED_NAME_README_BODY)
  private String readmeBody;

  public static final String SERIALIZED_NAME_README_URL = "readmeUrl";
  @SerializedName(SERIALIZED_NAME_README_URL)
  private String readmeUrl;

  public UpdateApplicationRequest() {
  }

  public UpdateApplicationRequest author(String author) {
    this.author = author;
    return this;
  }

  /**
   * &lt;p&gt;The name of the author publishing the app.&lt;/p&gt;&lt;p&gt;Minimum length&#x3D;1. Maximum length&#x3D;127.&lt;/p&gt;&lt;p&gt;Pattern \&quot;^[a-z0-9](([a-z0-9]|-(?!-))*[a-z0-9])?$\&quot;;&lt;/p&gt;
   * @return author
   */
  @javax.annotation.Nullable
  public String getAuthor() {
    return author;
  }

  public void setAuthor(String author) {
    this.author = author;
  }


  public UpdateApplicationRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * &lt;p&gt;The description of the application.&lt;/p&gt;&lt;p&gt;Minimum length&#x3D;1. Maximum length&#x3D;256&lt;/p&gt;
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public UpdateApplicationRequest homePageUrl(String homePageUrl) {
    this.homePageUrl = homePageUrl;
    return this;
  }

  /**
   * A URL with more information about the application, for example the location of your GitHub repository for the application.
   * @return homePageUrl
   */
  @javax.annotation.Nullable
  public String getHomePageUrl() {
    return homePageUrl;
  }

  public void setHomePageUrl(String homePageUrl) {
    this.homePageUrl = homePageUrl;
  }


  public UpdateApplicationRequest labels(List<String> labels) {
    this.labels = labels;
    return this;
  }

  public UpdateApplicationRequest addLabelsItem(String labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<>();
    }
    this.labels.add(labelsItem);
    return this;
  }

  /**
   * &lt;p&gt;Labels to improve discovery of apps in search results.&lt;/p&gt;&lt;p&gt;Minimum length&#x3D;1. Maximum length&#x3D;127. Maximum number of labels: 10&lt;/p&gt;&lt;p&gt;Pattern: \&quot;^[a-zA-Z0-9+\\\\-_:\\/@]+$\&quot;;&lt;/p&gt;
   * @return labels
   */
  @javax.annotation.Nullable
  public List<String> getLabels() {
    return labels;
  }

  public void setLabels(List<String> labels) {
    this.labels = labels;
  }


  public UpdateApplicationRequest readmeBody(String readmeBody) {
    this.readmeBody = readmeBody;
    return this;
  }

  /**
   * &lt;p&gt;A text readme file in Markdown language that contains a more detailed description of the application and how it works.&lt;/p&gt;&lt;p&gt;Maximum size 5 MB&lt;/p&gt;
   * @return readmeBody
   */
  @javax.annotation.Nullable
  public String getReadmeBody() {
    return readmeBody;
  }

  public void setReadmeBody(String readmeBody) {
    this.readmeBody = readmeBody;
  }


  public UpdateApplicationRequest readmeUrl(String readmeUrl) {
    this.readmeUrl = readmeUrl;
    return this;
  }

  /**
   * &lt;p&gt;A link to the readme file in Markdown language that contains a more detailed description of the application and how it works.&lt;/p&gt;&lt;p&gt;Maximum size 5 MB&lt;/p&gt;
   * @return readmeUrl
   */
  @javax.annotation.Nullable
  public String getReadmeUrl() {
    return readmeUrl;
  }

  public void setReadmeUrl(String readmeUrl) {
    this.readmeUrl = readmeUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateApplicationRequest updateApplicationRequest = (UpdateApplicationRequest) o;
    return Objects.equals(this.author, updateApplicationRequest.author) &&
        Objects.equals(this.description, updateApplicationRequest.description) &&
        Objects.equals(this.homePageUrl, updateApplicationRequest.homePageUrl) &&
        Objects.equals(this.labels, updateApplicationRequest.labels) &&
        Objects.equals(this.readmeBody, updateApplicationRequest.readmeBody) &&
        Objects.equals(this.readmeUrl, updateApplicationRequest.readmeUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(author, description, homePageUrl, labels, readmeBody, readmeUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateApplicationRequest {\n");
    sb.append("    author: ").append(toIndentedString(author)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    homePageUrl: ").append(toIndentedString(homePageUrl)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    readmeBody: ").append(toIndentedString(readmeBody)).append("\n");
    sb.append("    readmeUrl: ").append(toIndentedString(readmeUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("author");
    openapiFields.add("description");
    openapiFields.add("homePageUrl");
    openapiFields.add("labels");
    openapiFields.add("readmeBody");
    openapiFields.add("readmeUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateApplicationRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateApplicationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateApplicationRequest is not found in the empty JSON string", UpdateApplicationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateApplicationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateApplicationRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("author") != null && !jsonObj.get("author").isJsonNull()) && !jsonObj.get("author").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `author` to be a primitive type in the JSON string but got `%s`", jsonObj.get("author").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("homePageUrl") != null && !jsonObj.get("homePageUrl").isJsonNull()) && !jsonObj.get("homePageUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `homePageUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("homePageUrl").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("labels") != null && !jsonObj.get("labels").isJsonNull() && !jsonObj.get("labels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `labels` to be an array in the JSON string but got `%s`", jsonObj.get("labels").toString()));
      }
      if ((jsonObj.get("readmeBody") != null && !jsonObj.get("readmeBody").isJsonNull()) && !jsonObj.get("readmeBody").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `readmeBody` to be a primitive type in the JSON string but got `%s`", jsonObj.get("readmeBody").toString()));
      }
      if ((jsonObj.get("readmeUrl") != null && !jsonObj.get("readmeUrl").isJsonNull()) && !jsonObj.get("readmeUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `readmeUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("readmeUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateApplicationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateApplicationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateApplicationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateApplicationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateApplicationRequest>() {
           @Override
           public void write(JsonWriter out, UpdateApplicationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateApplicationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateApplicationRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateApplicationRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateApplicationRequest
   */
  public static UpdateApplicationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateApplicationRequest.class);
  }

  /**
   * Convert an instance of UpdateApplicationRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

