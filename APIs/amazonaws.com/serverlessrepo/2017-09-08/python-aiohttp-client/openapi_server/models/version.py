# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Version(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_id: str=None, creation_time: str=None, parameter_definitions: List=None, required_capabilities: List=None, resources_supported: bool=None, semantic_version: str=None, source_code_archive_url: str=None, source_code_url: str=None, template_url: str=None):
        """Version - a model defined in OpenAPI

        :param application_id: The application_id of this Version.
        :param creation_time: The creation_time of this Version.
        :param parameter_definitions: The parameter_definitions of this Version.
        :param required_capabilities: The required_capabilities of this Version.
        :param resources_supported: The resources_supported of this Version.
        :param semantic_version: The semantic_version of this Version.
        :param source_code_archive_url: The source_code_archive_url of this Version.
        :param source_code_url: The source_code_url of this Version.
        :param template_url: The template_url of this Version.
        """
        self.openapi_types = {
            'application_id': str,
            'creation_time': str,
            'parameter_definitions': List,
            'required_capabilities': List,
            'resources_supported': bool,
            'semantic_version': str,
            'source_code_archive_url': str,
            'source_code_url': str,
            'template_url': str
        }

        self.attribute_map = {
            'application_id': 'ApplicationId',
            'creation_time': 'CreationTime',
            'parameter_definitions': 'ParameterDefinitions',
            'required_capabilities': 'RequiredCapabilities',
            'resources_supported': 'ResourcesSupported',
            'semantic_version': 'SemanticVersion',
            'source_code_archive_url': 'SourceCodeArchiveUrl',
            'source_code_url': 'SourceCodeUrl',
            'template_url': 'TemplateUrl'
        }

        self._application_id = application_id
        self._creation_time = creation_time
        self._parameter_definitions = parameter_definitions
        self._required_capabilities = required_capabilities
        self._resources_supported = resources_supported
        self._semantic_version = semantic_version
        self._source_code_archive_url = source_code_archive_url
        self._source_code_url = source_code_url
        self._template_url = template_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Version':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Version of this Version.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_id(self):
        """Gets the application_id of this Version.


        :return: The application_id of this Version.
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this Version.


        :param application_id: The application_id of this Version.
        :type application_id: str
        """
        if application_id is None:
            raise ValueError("Invalid value for `application_id`, must not be `None`")

        self._application_id = application_id

    @property
    def creation_time(self):
        """Gets the creation_time of this Version.


        :return: The creation_time of this Version.
        :rtype: str
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this Version.


        :param creation_time: The creation_time of this Version.
        :type creation_time: str
        """
        if creation_time is None:
            raise ValueError("Invalid value for `creation_time`, must not be `None`")

        self._creation_time = creation_time

    @property
    def parameter_definitions(self):
        """Gets the parameter_definitions of this Version.


        :return: The parameter_definitions of this Version.
        :rtype: List
        """
        return self._parameter_definitions

    @parameter_definitions.setter
    def parameter_definitions(self, parameter_definitions):
        """Sets the parameter_definitions of this Version.


        :param parameter_definitions: The parameter_definitions of this Version.
        :type parameter_definitions: List
        """
        if parameter_definitions is None:
            raise ValueError("Invalid value for `parameter_definitions`, must not be `None`")

        self._parameter_definitions = parameter_definitions

    @property
    def required_capabilities(self):
        """Gets the required_capabilities of this Version.


        :return: The required_capabilities of this Version.
        :rtype: List
        """
        return self._required_capabilities

    @required_capabilities.setter
    def required_capabilities(self, required_capabilities):
        """Sets the required_capabilities of this Version.


        :param required_capabilities: The required_capabilities of this Version.
        :type required_capabilities: List
        """
        if required_capabilities is None:
            raise ValueError("Invalid value for `required_capabilities`, must not be `None`")

        self._required_capabilities = required_capabilities

    @property
    def resources_supported(self):
        """Gets the resources_supported of this Version.


        :return: The resources_supported of this Version.
        :rtype: bool
        """
        return self._resources_supported

    @resources_supported.setter
    def resources_supported(self, resources_supported):
        """Sets the resources_supported of this Version.


        :param resources_supported: The resources_supported of this Version.
        :type resources_supported: bool
        """
        if resources_supported is None:
            raise ValueError("Invalid value for `resources_supported`, must not be `None`")

        self._resources_supported = resources_supported

    @property
    def semantic_version(self):
        """Gets the semantic_version of this Version.


        :return: The semantic_version of this Version.
        :rtype: str
        """
        return self._semantic_version

    @semantic_version.setter
    def semantic_version(self, semantic_version):
        """Sets the semantic_version of this Version.


        :param semantic_version: The semantic_version of this Version.
        :type semantic_version: str
        """
        if semantic_version is None:
            raise ValueError("Invalid value for `semantic_version`, must not be `None`")

        self._semantic_version = semantic_version

    @property
    def source_code_archive_url(self):
        """Gets the source_code_archive_url of this Version.


        :return: The source_code_archive_url of this Version.
        :rtype: str
        """
        return self._source_code_archive_url

    @source_code_archive_url.setter
    def source_code_archive_url(self, source_code_archive_url):
        """Sets the source_code_archive_url of this Version.


        :param source_code_archive_url: The source_code_archive_url of this Version.
        :type source_code_archive_url: str
        """

        self._source_code_archive_url = source_code_archive_url

    @property
    def source_code_url(self):
        """Gets the source_code_url of this Version.


        :return: The source_code_url of this Version.
        :rtype: str
        """
        return self._source_code_url

    @source_code_url.setter
    def source_code_url(self, source_code_url):
        """Sets the source_code_url of this Version.


        :param source_code_url: The source_code_url of this Version.
        :type source_code_url: str
        """

        self._source_code_url = source_code_url

    @property
    def template_url(self):
        """Gets the template_url of this Version.


        :return: The template_url of this Version.
        :rtype: str
        """
        return self._template_url

    @template_url.setter
    def template_url(self, template_url):
        """Sets the template_url of this Version.


        :param template_url: The template_url of this Version.
        :type template_url: str
        """
        if template_url is None:
            raise ValueError("Invalid value for `template_url`, must not be `None`")

        self._template_url = template_url
