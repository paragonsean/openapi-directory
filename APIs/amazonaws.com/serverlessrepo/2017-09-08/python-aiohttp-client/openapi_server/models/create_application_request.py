# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateApplicationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, author: str=None, description: str=None, home_page_url: str=None, labels: List[str]=None, license_body: str=None, license_url: str=None, name: str=None, readme_body: str=None, readme_url: str=None, semantic_version: str=None, source_code_archive_url: str=None, source_code_url: str=None, spdx_license_id: str=None, template_body: str=None, template_url: str=None):
        """CreateApplicationRequest - a model defined in OpenAPI

        :param author: The author of this CreateApplicationRequest.
        :param description: The description of this CreateApplicationRequest.
        :param home_page_url: The home_page_url of this CreateApplicationRequest.
        :param labels: The labels of this CreateApplicationRequest.
        :param license_body: The license_body of this CreateApplicationRequest.
        :param license_url: The license_url of this CreateApplicationRequest.
        :param name: The name of this CreateApplicationRequest.
        :param readme_body: The readme_body of this CreateApplicationRequest.
        :param readme_url: The readme_url of this CreateApplicationRequest.
        :param semantic_version: The semantic_version of this CreateApplicationRequest.
        :param source_code_archive_url: The source_code_archive_url of this CreateApplicationRequest.
        :param source_code_url: The source_code_url of this CreateApplicationRequest.
        :param spdx_license_id: The spdx_license_id of this CreateApplicationRequest.
        :param template_body: The template_body of this CreateApplicationRequest.
        :param template_url: The template_url of this CreateApplicationRequest.
        """
        self.openapi_types = {
            'author': str,
            'description': str,
            'home_page_url': str,
            'labels': List[str],
            'license_body': str,
            'license_url': str,
            'name': str,
            'readme_body': str,
            'readme_url': str,
            'semantic_version': str,
            'source_code_archive_url': str,
            'source_code_url': str,
            'spdx_license_id': str,
            'template_body': str,
            'template_url': str
        }

        self.attribute_map = {
            'author': 'author',
            'description': 'description',
            'home_page_url': 'homePageUrl',
            'labels': 'labels',
            'license_body': 'licenseBody',
            'license_url': 'licenseUrl',
            'name': 'name',
            'readme_body': 'readmeBody',
            'readme_url': 'readmeUrl',
            'semantic_version': 'semanticVersion',
            'source_code_archive_url': 'sourceCodeArchiveUrl',
            'source_code_url': 'sourceCodeUrl',
            'spdx_license_id': 'spdxLicenseId',
            'template_body': 'templateBody',
            'template_url': 'templateUrl'
        }

        self._author = author
        self._description = description
        self._home_page_url = home_page_url
        self._labels = labels
        self._license_body = license_body
        self._license_url = license_url
        self._name = name
        self._readme_body = readme_body
        self._readme_url = readme_url
        self._semantic_version = semantic_version
        self._source_code_archive_url = source_code_archive_url
        self._source_code_url = source_code_url
        self._spdx_license_id = spdx_license_id
        self._template_body = template_body
        self._template_url = template_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateApplicationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateApplication_request of this CreateApplicationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def author(self):
        """Gets the author of this CreateApplicationRequest.

        <p>The name of the author publishing the app.</p><p>Minimum length=1. Maximum length=127.</p><p>Pattern \"^[a-z0-9](([a-z0-9]|-(?!-))*[a-z0-9])?$\";</p>

        :return: The author of this CreateApplicationRequest.
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this CreateApplicationRequest.

        <p>The name of the author publishing the app.</p><p>Minimum length=1. Maximum length=127.</p><p>Pattern \"^[a-z0-9](([a-z0-9]|-(?!-))*[a-z0-9])?$\";</p>

        :param author: The author of this CreateApplicationRequest.
        :type author: str
        """
        if author is None:
            raise ValueError("Invalid value for `author`, must not be `None`")

        self._author = author

    @property
    def description(self):
        """Gets the description of this CreateApplicationRequest.

        <p>The description of the application.</p><p>Minimum length=1. Maximum length=256</p>

        :return: The description of this CreateApplicationRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateApplicationRequest.

        <p>The description of the application.</p><p>Minimum length=1. Maximum length=256</p>

        :param description: The description of this CreateApplicationRequest.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def home_page_url(self):
        """Gets the home_page_url of this CreateApplicationRequest.

        A URL with more information about the application, for example the location of your GitHub repository for the application.

        :return: The home_page_url of this CreateApplicationRequest.
        :rtype: str
        """
        return self._home_page_url

    @home_page_url.setter
    def home_page_url(self, home_page_url):
        """Sets the home_page_url of this CreateApplicationRequest.

        A URL with more information about the application, for example the location of your GitHub repository for the application.

        :param home_page_url: The home_page_url of this CreateApplicationRequest.
        :type home_page_url: str
        """

        self._home_page_url = home_page_url

    @property
    def labels(self):
        """Gets the labels of this CreateApplicationRequest.

        <p>Labels to improve discovery of apps in search results.</p><p>Minimum length=1. Maximum length=127. Maximum number of labels: 10</p><p>Pattern: \"^[a-zA-Z0-9+\\\\-_:\\/@]+$\";</p>

        :return: The labels of this CreateApplicationRequest.
        :rtype: List[str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this CreateApplicationRequest.

        <p>Labels to improve discovery of apps in search results.</p><p>Minimum length=1. Maximum length=127. Maximum number of labels: 10</p><p>Pattern: \"^[a-zA-Z0-9+\\\\-_:\\/@]+$\";</p>

        :param labels: The labels of this CreateApplicationRequest.
        :type labels: List[str]
        """

        self._labels = labels

    @property
    def license_body(self):
        """Gets the license_body of this CreateApplicationRequest.

        <p>A local text file that contains the license of the app that matches the spdxLicenseID value of your application.  The file has the format file://&lt;path>/&lt;filename>.</p><p>Maximum size 5 MB</p><p>You can specify only one of licenseBody and licenseUrl; otherwise, an error results.</p>

        :return: The license_body of this CreateApplicationRequest.
        :rtype: str
        """
        return self._license_body

    @license_body.setter
    def license_body(self, license_body):
        """Sets the license_body of this CreateApplicationRequest.

        <p>A local text file that contains the license of the app that matches the spdxLicenseID value of your application.  The file has the format file://&lt;path>/&lt;filename>.</p><p>Maximum size 5 MB</p><p>You can specify only one of licenseBody and licenseUrl; otherwise, an error results.</p>

        :param license_body: The license_body of this CreateApplicationRequest.
        :type license_body: str
        """

        self._license_body = license_body

    @property
    def license_url(self):
        """Gets the license_url of this CreateApplicationRequest.

        <p>A link to the S3 object that contains the license of the app that matches the spdxLicenseID value of your application.</p><p>Maximum size 5 MB</p><p>You can specify only one of licenseBody and licenseUrl; otherwise, an error results.</p>

        :return: The license_url of this CreateApplicationRequest.
        :rtype: str
        """
        return self._license_url

    @license_url.setter
    def license_url(self, license_url):
        """Sets the license_url of this CreateApplicationRequest.

        <p>A link to the S3 object that contains the license of the app that matches the spdxLicenseID value of your application.</p><p>Maximum size 5 MB</p><p>You can specify only one of licenseBody and licenseUrl; otherwise, an error results.</p>

        :param license_url: The license_url of this CreateApplicationRequest.
        :type license_url: str
        """

        self._license_url = license_url

    @property
    def name(self):
        """Gets the name of this CreateApplicationRequest.

        <p>The name of the application that you want to publish.</p><p>Minimum length=1. Maximum length=140</p><p>Pattern: \"[a-zA-Z0-9\\\\-]+\";</p>

        :return: The name of this CreateApplicationRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateApplicationRequest.

        <p>The name of the application that you want to publish.</p><p>Minimum length=1. Maximum length=140</p><p>Pattern: \"[a-zA-Z0-9\\\\-]+\";</p>

        :param name: The name of this CreateApplicationRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def readme_body(self):
        """Gets the readme_body of this CreateApplicationRequest.

        <p>A local text readme file in Markdown language that contains a more detailed description of the application and how it works.  The file has the format file://&lt;path>/&lt;filename>.</p><p>Maximum size 5 MB</p><p>You can specify only one of readmeBody and readmeUrl; otherwise, an error results.</p>

        :return: The readme_body of this CreateApplicationRequest.
        :rtype: str
        """
        return self._readme_body

    @readme_body.setter
    def readme_body(self, readme_body):
        """Sets the readme_body of this CreateApplicationRequest.

        <p>A local text readme file in Markdown language that contains a more detailed description of the application and how it works.  The file has the format file://&lt;path>/&lt;filename>.</p><p>Maximum size 5 MB</p><p>You can specify only one of readmeBody and readmeUrl; otherwise, an error results.</p>

        :param readme_body: The readme_body of this CreateApplicationRequest.
        :type readme_body: str
        """

        self._readme_body = readme_body

    @property
    def readme_url(self):
        """Gets the readme_url of this CreateApplicationRequest.

        <p>A link to the S3 object in Markdown language that contains a more detailed description of the application and how it works.</p><p>Maximum size 5 MB</p><p>You can specify only one of readmeBody and readmeUrl; otherwise, an error results.</p>

        :return: The readme_url of this CreateApplicationRequest.
        :rtype: str
        """
        return self._readme_url

    @readme_url.setter
    def readme_url(self, readme_url):
        """Sets the readme_url of this CreateApplicationRequest.

        <p>A link to the S3 object in Markdown language that contains a more detailed description of the application and how it works.</p><p>Maximum size 5 MB</p><p>You can specify only one of readmeBody and readmeUrl; otherwise, an error results.</p>

        :param readme_url: The readme_url of this CreateApplicationRequest.
        :type readme_url: str
        """

        self._readme_url = readme_url

    @property
    def semantic_version(self):
        """Gets the semantic_version of this CreateApplicationRequest.

        <p>The semantic version of the application:</p><p>  <a href=\"https://semver.org/\">https://semver.org/</a>  </p>

        :return: The semantic_version of this CreateApplicationRequest.
        :rtype: str
        """
        return self._semantic_version

    @semantic_version.setter
    def semantic_version(self, semantic_version):
        """Sets the semantic_version of this CreateApplicationRequest.

        <p>The semantic version of the application:</p><p>  <a href=\"https://semver.org/\">https://semver.org/</a>  </p>

        :param semantic_version: The semantic_version of this CreateApplicationRequest.
        :type semantic_version: str
        """

        self._semantic_version = semantic_version

    @property
    def source_code_archive_url(self):
        """Gets the source_code_archive_url of this CreateApplicationRequest.

        <p>A link to the S3 object that contains the ZIP archive of the source code for this version of your application.</p><p>Maximum size 50 MB</p>

        :return: The source_code_archive_url of this CreateApplicationRequest.
        :rtype: str
        """
        return self._source_code_archive_url

    @source_code_archive_url.setter
    def source_code_archive_url(self, source_code_archive_url):
        """Sets the source_code_archive_url of this CreateApplicationRequest.

        <p>A link to the S3 object that contains the ZIP archive of the source code for this version of your application.</p><p>Maximum size 50 MB</p>

        :param source_code_archive_url: The source_code_archive_url of this CreateApplicationRequest.
        :type source_code_archive_url: str
        """

        self._source_code_archive_url = source_code_archive_url

    @property
    def source_code_url(self):
        """Gets the source_code_url of this CreateApplicationRequest.

        A link to a public repository for the source code of your application, for example the URL of a specific GitHub commit.

        :return: The source_code_url of this CreateApplicationRequest.
        :rtype: str
        """
        return self._source_code_url

    @source_code_url.setter
    def source_code_url(self, source_code_url):
        """Sets the source_code_url of this CreateApplicationRequest.

        A link to a public repository for the source code of your application, for example the URL of a specific GitHub commit.

        :param source_code_url: The source_code_url of this CreateApplicationRequest.
        :type source_code_url: str
        """

        self._source_code_url = source_code_url

    @property
    def spdx_license_id(self):
        """Gets the spdx_license_id of this CreateApplicationRequest.

        A valid identifier from <a href=\"https://spdx.org/licenses/\">https://spdx.org/licenses/</a>.

        :return: The spdx_license_id of this CreateApplicationRequest.
        :rtype: str
        """
        return self._spdx_license_id

    @spdx_license_id.setter
    def spdx_license_id(self, spdx_license_id):
        """Sets the spdx_license_id of this CreateApplicationRequest.

        A valid identifier from <a href=\"https://spdx.org/licenses/\">https://spdx.org/licenses/</a>.

        :param spdx_license_id: The spdx_license_id of this CreateApplicationRequest.
        :type spdx_license_id: str
        """

        self._spdx_license_id = spdx_license_id

    @property
    def template_body(self):
        """Gets the template_body of this CreateApplicationRequest.

        <p>The local raw packaged AWS SAM template file of your application.  The file has the format file://&lt;path>/&lt;filename>.</p><p>You can specify only one of templateBody and templateUrl; otherwise an error results.</p>

        :return: The template_body of this CreateApplicationRequest.
        :rtype: str
        """
        return self._template_body

    @template_body.setter
    def template_body(self, template_body):
        """Sets the template_body of this CreateApplicationRequest.

        <p>The local raw packaged AWS SAM template file of your application.  The file has the format file://&lt;path>/&lt;filename>.</p><p>You can specify only one of templateBody and templateUrl; otherwise an error results.</p>

        :param template_body: The template_body of this CreateApplicationRequest.
        :type template_body: str
        """

        self._template_body = template_body

    @property
    def template_url(self):
        """Gets the template_url of this CreateApplicationRequest.

        <p>A link to the S3 object containing the packaged AWS SAM template of your application.</p><p>You can specify only one of templateBody and templateUrl; otherwise an error results.</p>

        :return: The template_url of this CreateApplicationRequest.
        :rtype: str
        """
        return self._template_url

    @template_url.setter
    def template_url(self, template_url):
        """Sets the template_url of this CreateApplicationRequest.

        <p>A link to the S3 object containing the packaged AWS SAM template of your application.</p><p>You can specify only one of templateBody and templateUrl; otherwise an error results.</p>

        :param template_url: The template_url of this CreateApplicationRequest.
        :type template_url: str
        """

        self._template_url = template_url
