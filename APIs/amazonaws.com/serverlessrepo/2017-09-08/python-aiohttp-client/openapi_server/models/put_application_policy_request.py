# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.application_policy_statement import ApplicationPolicyStatement
from openapi_server import util


class PutApplicationPolicyRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, statements: List[ApplicationPolicyStatement]=None):
        """PutApplicationPolicyRequest - a model defined in OpenAPI

        :param statements: The statements of this PutApplicationPolicyRequest.
        """
        self.openapi_types = {
            'statements': List[ApplicationPolicyStatement]
        }

        self.attribute_map = {
            'statements': 'statements'
        }

        self._statements = statements

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutApplicationPolicyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutApplicationPolicy_request of this PutApplicationPolicyRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def statements(self):
        """Gets the statements of this PutApplicationPolicyRequest.

        An array of policy statements applied to the application.

        :return: The statements of this PutApplicationPolicyRequest.
        :rtype: List[ApplicationPolicyStatement]
        """
        return self._statements

    @statements.setter
    def statements(self, statements):
        """Sets the statements of this PutApplicationPolicyRequest.

        An array of policy statements applied to the application.

        :param statements: The statements of this PutApplicationPolicyRequest.
        :type statements: List[ApplicationPolicyStatement]
        """
        if statements is None:
            raise ValueError("Invalid value for `statements`, must not be `None`")

        self._statements = statements
