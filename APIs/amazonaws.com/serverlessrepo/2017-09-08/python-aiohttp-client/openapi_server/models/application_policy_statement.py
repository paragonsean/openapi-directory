# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApplicationPolicyStatement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actions: List=None, principal_org_ids: List=None, principals: List=None, statement_id: str=None):
        """ApplicationPolicyStatement - a model defined in OpenAPI

        :param actions: The actions of this ApplicationPolicyStatement.
        :param principal_org_ids: The principal_org_ids of this ApplicationPolicyStatement.
        :param principals: The principals of this ApplicationPolicyStatement.
        :param statement_id: The statement_id of this ApplicationPolicyStatement.
        """
        self.openapi_types = {
            'actions': List,
            'principal_org_ids': List,
            'principals': List,
            'statement_id': str
        }

        self.attribute_map = {
            'actions': 'Actions',
            'principal_org_ids': 'PrincipalOrgIDs',
            'principals': 'Principals',
            'statement_id': 'StatementId'
        }

        self._actions = actions
        self._principal_org_ids = principal_org_ids
        self._principals = principals
        self._statement_id = statement_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationPolicyStatement':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationPolicyStatement of this ApplicationPolicyStatement.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actions(self):
        """Gets the actions of this ApplicationPolicyStatement.


        :return: The actions of this ApplicationPolicyStatement.
        :rtype: List
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this ApplicationPolicyStatement.


        :param actions: The actions of this ApplicationPolicyStatement.
        :type actions: List
        """
        if actions is None:
            raise ValueError("Invalid value for `actions`, must not be `None`")

        self._actions = actions

    @property
    def principal_org_ids(self):
        """Gets the principal_org_ids of this ApplicationPolicyStatement.


        :return: The principal_org_ids of this ApplicationPolicyStatement.
        :rtype: List
        """
        return self._principal_org_ids

    @principal_org_ids.setter
    def principal_org_ids(self, principal_org_ids):
        """Sets the principal_org_ids of this ApplicationPolicyStatement.


        :param principal_org_ids: The principal_org_ids of this ApplicationPolicyStatement.
        :type principal_org_ids: List
        """

        self._principal_org_ids = principal_org_ids

    @property
    def principals(self):
        """Gets the principals of this ApplicationPolicyStatement.


        :return: The principals of this ApplicationPolicyStatement.
        :rtype: List
        """
        return self._principals

    @principals.setter
    def principals(self, principals):
        """Sets the principals of this ApplicationPolicyStatement.


        :param principals: The principals of this ApplicationPolicyStatement.
        :type principals: List
        """
        if principals is None:
            raise ValueError("Invalid value for `principals`, must not be `None`")

        self._principals = principals

    @property
    def statement_id(self):
        """Gets the statement_id of this ApplicationPolicyStatement.


        :return: The statement_id of this ApplicationPolicyStatement.
        :rtype: str
        """
        return self._statement_id

    @statement_id.setter
    def statement_id(self, statement_id):
        """Sets the statement_id of this ApplicationPolicyStatement.


        :param statement_id: The statement_id of this ApplicationPolicyStatement.
        :type statement_id: str
        """

        self._statement_id = statement_id
