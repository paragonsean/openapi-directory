# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApplicationDependencySummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_id: str=None, semantic_version: str=None):
        """ApplicationDependencySummary - a model defined in OpenAPI

        :param application_id: The application_id of this ApplicationDependencySummary.
        :param semantic_version: The semantic_version of this ApplicationDependencySummary.
        """
        self.openapi_types = {
            'application_id': str,
            'semantic_version': str
        }

        self.attribute_map = {
            'application_id': 'ApplicationId',
            'semantic_version': 'SemanticVersion'
        }

        self._application_id = application_id
        self._semantic_version = semantic_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationDependencySummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationDependencySummary of this ApplicationDependencySummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_id(self):
        """Gets the application_id of this ApplicationDependencySummary.


        :return: The application_id of this ApplicationDependencySummary.
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this ApplicationDependencySummary.


        :param application_id: The application_id of this ApplicationDependencySummary.
        :type application_id: str
        """
        if application_id is None:
            raise ValueError("Invalid value for `application_id`, must not be `None`")

        self._application_id = application_id

    @property
    def semantic_version(self):
        """Gets the semantic_version of this ApplicationDependencySummary.


        :return: The semantic_version of this ApplicationDependencySummary.
        :rtype: str
        """
        return self._semantic_version

    @semantic_version.setter
    def semantic_version(self, semantic_version):
        """Sets the semantic_version of this ApplicationDependencySummary.


        :param semantic_version: The semantic_version of this ApplicationDependencySummary.
        :type semantic_version: str
        """
        if semantic_version is None:
            raise ValueError("Invalid value for `semantic_version`, must not be `None`")

        self._semantic_version = semantic_version
