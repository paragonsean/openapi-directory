# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ParameterDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed_pattern: str=None, allowed_values: List=None, constraint_description: str=None, default_value: str=None, description: str=None, max_length: int=None, max_value: int=None, min_length: int=None, min_value: int=None, name: str=None, no_echo: bool=None, referenced_by_resources: List=None, type: str=None):
        """ParameterDefinition - a model defined in OpenAPI

        :param allowed_pattern: The allowed_pattern of this ParameterDefinition.
        :param allowed_values: The allowed_values of this ParameterDefinition.
        :param constraint_description: The constraint_description of this ParameterDefinition.
        :param default_value: The default_value of this ParameterDefinition.
        :param description: The description of this ParameterDefinition.
        :param max_length: The max_length of this ParameterDefinition.
        :param max_value: The max_value of this ParameterDefinition.
        :param min_length: The min_length of this ParameterDefinition.
        :param min_value: The min_value of this ParameterDefinition.
        :param name: The name of this ParameterDefinition.
        :param no_echo: The no_echo of this ParameterDefinition.
        :param referenced_by_resources: The referenced_by_resources of this ParameterDefinition.
        :param type: The type of this ParameterDefinition.
        """
        self.openapi_types = {
            'allowed_pattern': str,
            'allowed_values': List,
            'constraint_description': str,
            'default_value': str,
            'description': str,
            'max_length': int,
            'max_value': int,
            'min_length': int,
            'min_value': int,
            'name': str,
            'no_echo': bool,
            'referenced_by_resources': List,
            'type': str
        }

        self.attribute_map = {
            'allowed_pattern': 'AllowedPattern',
            'allowed_values': 'AllowedValues',
            'constraint_description': 'ConstraintDescription',
            'default_value': 'DefaultValue',
            'description': 'Description',
            'max_length': 'MaxLength',
            'max_value': 'MaxValue',
            'min_length': 'MinLength',
            'min_value': 'MinValue',
            'name': 'Name',
            'no_echo': 'NoEcho',
            'referenced_by_resources': 'ReferencedByResources',
            'type': 'Type'
        }

        self._allowed_pattern = allowed_pattern
        self._allowed_values = allowed_values
        self._constraint_description = constraint_description
        self._default_value = default_value
        self._description = description
        self._max_length = max_length
        self._max_value = max_value
        self._min_length = min_length
        self._min_value = min_value
        self._name = name
        self._no_echo = no_echo
        self._referenced_by_resources = referenced_by_resources
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ParameterDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ParameterDefinition of this ParameterDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_pattern(self):
        """Gets the allowed_pattern of this ParameterDefinition.


        :return: The allowed_pattern of this ParameterDefinition.
        :rtype: str
        """
        return self._allowed_pattern

    @allowed_pattern.setter
    def allowed_pattern(self, allowed_pattern):
        """Sets the allowed_pattern of this ParameterDefinition.


        :param allowed_pattern: The allowed_pattern of this ParameterDefinition.
        :type allowed_pattern: str
        """

        self._allowed_pattern = allowed_pattern

    @property
    def allowed_values(self):
        """Gets the allowed_values of this ParameterDefinition.


        :return: The allowed_values of this ParameterDefinition.
        :rtype: List
        """
        return self._allowed_values

    @allowed_values.setter
    def allowed_values(self, allowed_values):
        """Sets the allowed_values of this ParameterDefinition.


        :param allowed_values: The allowed_values of this ParameterDefinition.
        :type allowed_values: List
        """

        self._allowed_values = allowed_values

    @property
    def constraint_description(self):
        """Gets the constraint_description of this ParameterDefinition.


        :return: The constraint_description of this ParameterDefinition.
        :rtype: str
        """
        return self._constraint_description

    @constraint_description.setter
    def constraint_description(self, constraint_description):
        """Sets the constraint_description of this ParameterDefinition.


        :param constraint_description: The constraint_description of this ParameterDefinition.
        :type constraint_description: str
        """

        self._constraint_description = constraint_description

    @property
    def default_value(self):
        """Gets the default_value of this ParameterDefinition.


        :return: The default_value of this ParameterDefinition.
        :rtype: str
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this ParameterDefinition.


        :param default_value: The default_value of this ParameterDefinition.
        :type default_value: str
        """

        self._default_value = default_value

    @property
    def description(self):
        """Gets the description of this ParameterDefinition.


        :return: The description of this ParameterDefinition.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ParameterDefinition.


        :param description: The description of this ParameterDefinition.
        :type description: str
        """

        self._description = description

    @property
    def max_length(self):
        """Gets the max_length of this ParameterDefinition.


        :return: The max_length of this ParameterDefinition.
        :rtype: int
        """
        return self._max_length

    @max_length.setter
    def max_length(self, max_length):
        """Sets the max_length of this ParameterDefinition.


        :param max_length: The max_length of this ParameterDefinition.
        :type max_length: int
        """

        self._max_length = max_length

    @property
    def max_value(self):
        """Gets the max_value of this ParameterDefinition.


        :return: The max_value of this ParameterDefinition.
        :rtype: int
        """
        return self._max_value

    @max_value.setter
    def max_value(self, max_value):
        """Sets the max_value of this ParameterDefinition.


        :param max_value: The max_value of this ParameterDefinition.
        :type max_value: int
        """

        self._max_value = max_value

    @property
    def min_length(self):
        """Gets the min_length of this ParameterDefinition.


        :return: The min_length of this ParameterDefinition.
        :rtype: int
        """
        return self._min_length

    @min_length.setter
    def min_length(self, min_length):
        """Sets the min_length of this ParameterDefinition.


        :param min_length: The min_length of this ParameterDefinition.
        :type min_length: int
        """

        self._min_length = min_length

    @property
    def min_value(self):
        """Gets the min_value of this ParameterDefinition.


        :return: The min_value of this ParameterDefinition.
        :rtype: int
        """
        return self._min_value

    @min_value.setter
    def min_value(self, min_value):
        """Sets the min_value of this ParameterDefinition.


        :param min_value: The min_value of this ParameterDefinition.
        :type min_value: int
        """

        self._min_value = min_value

    @property
    def name(self):
        """Gets the name of this ParameterDefinition.


        :return: The name of this ParameterDefinition.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ParameterDefinition.


        :param name: The name of this ParameterDefinition.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def no_echo(self):
        """Gets the no_echo of this ParameterDefinition.


        :return: The no_echo of this ParameterDefinition.
        :rtype: bool
        """
        return self._no_echo

    @no_echo.setter
    def no_echo(self, no_echo):
        """Sets the no_echo of this ParameterDefinition.


        :param no_echo: The no_echo of this ParameterDefinition.
        :type no_echo: bool
        """

        self._no_echo = no_echo

    @property
    def referenced_by_resources(self):
        """Gets the referenced_by_resources of this ParameterDefinition.


        :return: The referenced_by_resources of this ParameterDefinition.
        :rtype: List
        """
        return self._referenced_by_resources

    @referenced_by_resources.setter
    def referenced_by_resources(self, referenced_by_resources):
        """Sets the referenced_by_resources of this ParameterDefinition.


        :param referenced_by_resources: The referenced_by_resources of this ParameterDefinition.
        :type referenced_by_resources: List
        """
        if referenced_by_resources is None:
            raise ValueError("Invalid value for `referenced_by_resources`, must not be `None`")

        self._referenced_by_resources = referenced_by_resources

    @property
    def type(self):
        """Gets the type of this ParameterDefinition.


        :return: The type of this ParameterDefinition.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ParameterDefinition.


        :param type: The type of this ParameterDefinition.
        :type type: str
        """

        self._type = type
