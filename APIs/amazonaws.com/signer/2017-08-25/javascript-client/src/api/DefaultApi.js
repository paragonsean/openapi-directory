/**
 * AWS Signer
 * <p>AWS Signer is a fully managed code signing service to help you ensure the trust and integrity of your code. </p> <p>AWS Signer supports the following applications:</p> <p>With code signing for AWS Lambda, you can sign <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/\">AWS Lambda</a> deployment packages. Integrated support is provided for <a href=\"http://docs.aws.amazon.com/AmazonS3/latest/gsg/\">Amazon S3</a>, <a href=\"http://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/\">Amazon CloudWatch</a>, and <a href=\"http://docs.aws.amazon.com/awscloudtrail/latest/userguide/\">AWS CloudTrail</a>. In order to sign code, you create a signing profile and then use Signer to sign Lambda zip files in S3. </p> <p>With code signing for IoT, you can sign code for any IoT device that is supported by AWS. IoT code signing is available for <a href=\"http://docs.aws.amazon.com/freertos/latest/userguide/\">Amazon FreeRTOS</a> and <a href=\"http://docs.aws.amazon.com/iot/latest/developerguide/\">AWS IoT Device Management</a>, and is integrated with <a href=\"http://docs.aws.amazon.com/acm/latest/userguide/\">AWS Certificate Manager (ACM)</a>. In order to sign code, you import a third-party code signing certificate using ACM, and use that to sign updates in Amazon FreeRTOS and AWS IoT Device Management. </p> <p>With code signing for containers â€¦(TBD)</p> <p>For more information about AWS Signer, see the <a href=\"https://docs.aws.amazon.com/signer/latest/developerguide/Welcome.html\">AWS Signer Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddProfilePermissionRequest from '../model/AddProfilePermissionRequest';
import AddProfilePermissionResponse from '../model/AddProfilePermissionResponse';
import DescribeSigningJobResponse from '../model/DescribeSigningJobResponse';
import GetRevocationStatusResponse from '../model/GetRevocationStatusResponse';
import GetSigningPlatformResponse from '../model/GetSigningPlatformResponse';
import GetSigningProfileResponse from '../model/GetSigningProfileResponse';
import ListProfilePermissionsResponse from '../model/ListProfilePermissionsResponse';
import ListSigningJobsResponse from '../model/ListSigningJobsResponse';
import ListSigningPlatformsResponse from '../model/ListSigningPlatformsResponse';
import ListSigningProfilesResponse from '../model/ListSigningProfilesResponse';
import ListTagsForResourceResponse from '../model/ListTagsForResourceResponse';
import PutSigningProfileRequest from '../model/PutSigningProfileRequest';
import PutSigningProfileResponse from '../model/PutSigningProfileResponse';
import RemoveProfilePermissionResponse from '../model/RemoveProfilePermissionResponse';
import RevokeSignatureRequest from '../model/RevokeSignatureRequest';
import RevokeSigningProfileRequest from '../model/RevokeSigningProfileRequest';
import SignPayloadRequest from '../model/SignPayloadRequest';
import SignPayloadResponse from '../model/SignPayloadResponse';
import SigningProfileStatus from '../model/SigningProfileStatus';
import StartSigningJobRequest from '../model/StartSigningJobRequest';
import StartSigningJobResponse from '../model/StartSigningJobResponse';
import TagResourceRequest from '../model/TagResourceRequest';

/**
* Default service.
* @module api/DefaultApi
* @version 2017-08-25
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addProfilePermission operation.
     * @callback module:api/DefaultApi~addProfilePermissionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddProfilePermissionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds cross-account permissions to a signing profile.
     * @param {String} profileName The human-readable name of the signing profile.
     * @param {module:model/AddProfilePermissionRequest} addProfilePermissionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~addProfilePermissionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddProfilePermissionResponse}
     */
    addProfilePermission(profileName, addProfilePermissionRequest, opts, callback) {
      opts = opts || {};
      let postBody = addProfilePermissionRequest;
      // verify the required parameter 'profileName' is set
      if (profileName === undefined || profileName === null) {
        throw new Error("Missing the required parameter 'profileName' when calling addProfilePermission");
      }
      // verify the required parameter 'addProfilePermissionRequest' is set
      if (addProfilePermissionRequest === undefined || addProfilePermissionRequest === null) {
        throw new Error("Missing the required parameter 'addProfilePermissionRequest' when calling addProfilePermission");
      }

      let pathParams = {
        'profileName': profileName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AddProfilePermissionResponse;
      return this.apiClient.callApi(
        '/signing-profiles/{profileName}/permissions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cancelSigningProfile operation.
     * @callback module:api/DefaultApi~cancelSigningProfileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Changes the state of an <code>ACTIVE</code> signing profile to <code>CANCELED</code>. A canceled profile is still viewable with the <code>ListSigningProfiles</code> operation, but it cannot perform new signing jobs, and is deleted two years after cancelation.
     * @param {String} profileName The name of the signing profile to be canceled.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~cancelSigningProfileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cancelSigningProfile(profileName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'profileName' is set
      if (profileName === undefined || profileName === null) {
        throw new Error("Missing the required parameter 'profileName' when calling cancelSigningProfile");
      }

      let pathParams = {
        'profileName': profileName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/signing-profiles/{profileName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeSigningJob operation.
     * @callback module:api/DefaultApi~describeSigningJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeSigningJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about a specific code signing job. You specify the job by using the <code>jobId</code> value that is returned by the <a>StartSigningJob</a> operation. 
     * @param {String} jobId The ID of the signing job on input.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeSigningJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeSigningJobResponse}
     */
    describeSigningJob(jobId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling describeSigningJob");
      }

      let pathParams = {
        'jobId': jobId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeSigningJobResponse;
      return this.apiClient.callApi(
        '/signing-jobs/{jobId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRevocationStatus operation.
     * @callback module:api/DefaultApi~getRevocationStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRevocationStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the revocation status of one or more of the signing profile, signing job, and signing certificate.
     * @param {Date} signatureTimestamp The timestamp of the signature that validates the profile or job.
     * @param {String} platformId The ID of a signing platform. 
     * @param {String} profileVersionArn The version of a signing profile.
     * @param {String} jobArn The ARN of a signing job.
     * @param {Array.<String>} certificateHashes <p>A list of composite signed hashes that identify certificates.</p> <p>A certificate identifier consists of a subject certificate TBS hash (signed by the parent CA) combined with a parent CA TBS hash (signed by the parent CAâ€™s CA). Root certificates are defined as their own CA.</p>
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getRevocationStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRevocationStatusResponse}
     */
    getRevocationStatus(signatureTimestamp, platformId, profileVersionArn, jobArn, certificateHashes, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'signatureTimestamp' is set
      if (signatureTimestamp === undefined || signatureTimestamp === null) {
        throw new Error("Missing the required parameter 'signatureTimestamp' when calling getRevocationStatus");
      }
      // verify the required parameter 'platformId' is set
      if (platformId === undefined || platformId === null) {
        throw new Error("Missing the required parameter 'platformId' when calling getRevocationStatus");
      }
      // verify the required parameter 'profileVersionArn' is set
      if (profileVersionArn === undefined || profileVersionArn === null) {
        throw new Error("Missing the required parameter 'profileVersionArn' when calling getRevocationStatus");
      }
      // verify the required parameter 'jobArn' is set
      if (jobArn === undefined || jobArn === null) {
        throw new Error("Missing the required parameter 'jobArn' when calling getRevocationStatus");
      }
      // verify the required parameter 'certificateHashes' is set
      if (certificateHashes === undefined || certificateHashes === null) {
        throw new Error("Missing the required parameter 'certificateHashes' when calling getRevocationStatus");
      }

      let pathParams = {
      };
      let queryParams = {
        'signatureTimestamp': signatureTimestamp,
        'platformId': platformId,
        'profileVersionArn': profileVersionArn,
        'jobArn': jobArn,
        'certificateHashes': this.apiClient.buildCollectionParam(certificateHashes, 'multi')
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetRevocationStatusResponse;
      return this.apiClient.callApi(
        '/revocations#signatureTimestamp&platformId&profileVersionArn&jobArn&certificateHashes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSigningPlatform operation.
     * @callback module:api/DefaultApi~getSigningPlatformCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSigningPlatformResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information on a specific signing platform.
     * @param {String} platformId The ID of the target signing platform.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getSigningPlatformCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSigningPlatformResponse}
     */
    getSigningPlatform(platformId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'platformId' is set
      if (platformId === undefined || platformId === null) {
        throw new Error("Missing the required parameter 'platformId' when calling getSigningPlatform");
      }

      let pathParams = {
        'platformId': platformId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSigningPlatformResponse;
      return this.apiClient.callApi(
        '/signing-platforms/{platformId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSigningProfile operation.
     * @callback module:api/DefaultApi~getSigningProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSigningProfileResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information on a specific signing profile.
     * @param {String} profileName The name of the target signing profile.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [profileOwner] The AWS account ID of the profile owner.
     * @param {module:api/DefaultApi~getSigningProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSigningProfileResponse}
     */
    getSigningProfile(profileName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'profileName' is set
      if (profileName === undefined || profileName === null) {
        throw new Error("Missing the required parameter 'profileName' when calling getSigningProfile");
      }

      let pathParams = {
        'profileName': profileName
      };
      let queryParams = {
        'profileOwner': opts['profileOwner']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSigningProfileResponse;
      return this.apiClient.callApi(
        '/signing-profiles/{profileName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listProfilePermissions operation.
     * @callback module:api/DefaultApi~listProfilePermissionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListProfilePermissionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the cross-account permissions associated with a signing profile.
     * @param {String} profileName Name of the signing profile containing the cross-account permissions.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] String for specifying the next set of paginated results.
     * @param {module:api/DefaultApi~listProfilePermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListProfilePermissionsResponse}
     */
    listProfilePermissions(profileName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'profileName' is set
      if (profileName === undefined || profileName === null) {
        throw new Error("Missing the required parameter 'profileName' when calling listProfilePermissions");
      }

      let pathParams = {
        'profileName': profileName
      };
      let queryParams = {
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListProfilePermissionsResponse;
      return this.apiClient.callApi(
        '/signing-profiles/{profileName}/permissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSigningJobs operation.
     * @callback module:api/DefaultApi~listSigningJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSigningJobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all your signing jobs. You can use the <code>maxResults</code> parameter to limit the number of signing jobs that are returned in the response. If additional jobs remain to be listed, code signing returns a <code>nextToken</code> value. Use this value in subsequent calls to <code>ListSigningJobs</code> to fetch the remaining values. You can continue calling <code>ListSigningJobs</code> with your <code>maxResults</code> parameter and with new values that code signing returns in the <code>nextToken</code> parameter until all of your signing jobs have been returned. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/String} [status] A status value with which to filter your results.
     * @param {String} [platformId] The ID of microcontroller platform that you specified for the distribution of your code image.
     * @param {String} [requestedBy] The IAM principal that requested the signing job.
     * @param {Number} [maxResults] Specifies the maximum number of items to return in the response. Use this parameter when paginating results. If additional items exist beyond the number you specify, the <code>nextToken</code> element is set in the response. Use the <code>nextToken</code> value in a subsequent request to retrieve additional items. 
     * @param {String} [nextToken] String for specifying the next set of paginated results to return. After you receive a response with truncated results, use this parameter in a subsequent request. Set it to the value of <code>nextToken</code> from the response that you just received.
     * @param {Boolean} [isRevoked] Filters results to return only signing jobs with revoked signatures.
     * @param {Date} [signatureExpiresBefore] Filters results to return only signing jobs with signatures expiring before a specified timestamp.
     * @param {Date} [signatureExpiresAfter] Filters results to return only signing jobs with signatures expiring after a specified timestamp.
     * @param {String} [jobInvoker] Filters results to return only signing jobs initiated by a specified IAM entity.
     * @param {module:api/DefaultApi~listSigningJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSigningJobsResponse}
     */
    listSigningJobs(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'status': opts['status'],
        'platformId': opts['platformId'],
        'requestedBy': opts['requestedBy'],
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'isRevoked': opts['isRevoked'],
        'signatureExpiresBefore': opts['signatureExpiresBefore'],
        'signatureExpiresAfter': opts['signatureExpiresAfter'],
        'jobInvoker': opts['jobInvoker']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListSigningJobsResponse;
      return this.apiClient.callApi(
        '/signing-jobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSigningPlatforms operation.
     * @callback module:api/DefaultApi~listSigningPlatformsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSigningPlatformsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all signing platforms available in code signing that match the request parameters. If additional jobs remain to be listed, code signing returns a <code>nextToken</code> value. Use this value in subsequent calls to <code>ListSigningJobs</code> to fetch the remaining values. You can continue calling <code>ListSigningJobs</code> with your <code>maxResults</code> parameter and with new values that code signing returns in the <code>nextToken</code> parameter until all of your signing jobs have been returned.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [category] The category type of a signing platform.
     * @param {String} [partner] Any partner entities connected to a signing platform.
     * @param {String} [target] The validation template that is used by the target signing platform.
     * @param {Number} [maxResults] The maximum number of results to be returned by this operation.
     * @param {String} [nextToken] Value for specifying the next set of paginated results to return. After you receive a response with truncated results, use this parameter in a subsequent request. Set it to the value of <code>nextToken</code> from the response that you just received.
     * @param {module:api/DefaultApi~listSigningPlatformsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSigningPlatformsResponse}
     */
    listSigningPlatforms(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'category': opts['category'],
        'partner': opts['partner'],
        'target': opts['target'],
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListSigningPlatformsResponse;
      return this.apiClient.callApi(
        '/signing-platforms', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSigningProfiles operation.
     * @callback module:api/DefaultApi~listSigningProfilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSigningProfilesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all available signing profiles in your AWS account. Returns only profiles with an <code>ACTIVE</code> status unless the <code>includeCanceled</code> request field is set to <code>true</code>. If additional jobs remain to be listed, code signing returns a <code>nextToken</code> value. Use this value in subsequent calls to <code>ListSigningJobs</code> to fetch the remaining values. You can continue calling <code>ListSigningJobs</code> with your <code>maxResults</code> parameter and with new values that code signing returns in the <code>nextToken</code> parameter until all of your signing jobs have been returned.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Boolean} [includeCanceled] Designates whether to include profiles with the status of <code>CANCELED</code>.
     * @param {Number} [maxResults] The maximum number of profiles to be returned.
     * @param {String} [nextToken] Value for specifying the next set of paginated results to return. After you receive a response with truncated results, use this parameter in a subsequent request. Set it to the value of <code>nextToken</code> from the response that you just received.
     * @param {String} [platformId] Filters results to return only signing jobs initiated for a specified signing platform.
     * @param {Array.<module:model/SigningProfileStatus>} [statuses] Filters results to return only signing jobs with statuses in the specified list.
     * @param {module:api/DefaultApi~listSigningProfilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSigningProfilesResponse}
     */
    listSigningProfiles(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'includeCanceled': opts['includeCanceled'],
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'platformId': opts['platformId'],
        'statuses': this.apiClient.buildCollectionParam(opts['statuses'], 'multi')
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListSigningProfilesResponse;
      return this.apiClient.callApi(
        '/signing-profiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of the tags associated with a signing profile resource.
     * @param {String} resourceArn The Amazon Resource Name (ARN) for the signing profile.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceResponse}
     */
    listTagsForResource(resourceArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling listTagsForResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceResponse;
      return this.apiClient.callApi(
        '/tags/{resourceArn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSigningProfile operation.
     * @callback module:api/DefaultApi~putSigningProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PutSigningProfileResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a signing profile. A signing profile is a code signing template that can be used to carry out a pre-defined signing job. 
     * @param {String} profileName The name of the signing profile to be created.
     * @param {module:model/PutSigningProfileRequest} putSigningProfileRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putSigningProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PutSigningProfileResponse}
     */
    putSigningProfile(profileName, putSigningProfileRequest, opts, callback) {
      opts = opts || {};
      let postBody = putSigningProfileRequest;
      // verify the required parameter 'profileName' is set
      if (profileName === undefined || profileName === null) {
        throw new Error("Missing the required parameter 'profileName' when calling putSigningProfile");
      }
      // verify the required parameter 'putSigningProfileRequest' is set
      if (putSigningProfileRequest === undefined || putSigningProfileRequest === null) {
        throw new Error("Missing the required parameter 'putSigningProfileRequest' when calling putSigningProfile");
      }

      let pathParams = {
        'profileName': profileName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PutSigningProfileResponse;
      return this.apiClient.callApi(
        '/signing-profiles/{profileName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeProfilePermission operation.
     * @callback module:api/DefaultApi~removeProfilePermissionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemoveProfilePermissionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes cross-account permissions from a signing profile.
     * @param {String} profileName A human-readable name for the signing profile with permissions to be removed.
     * @param {String} revisionId An identifier for the current revision of the signing profile permissions.
     * @param {String} statementId A unique identifier for the cross-account permissions statement.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~removeProfilePermissionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemoveProfilePermissionResponse}
     */
    removeProfilePermission(profileName, revisionId, statementId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'profileName' is set
      if (profileName === undefined || profileName === null) {
        throw new Error("Missing the required parameter 'profileName' when calling removeProfilePermission");
      }
      // verify the required parameter 'revisionId' is set
      if (revisionId === undefined || revisionId === null) {
        throw new Error("Missing the required parameter 'revisionId' when calling removeProfilePermission");
      }
      // verify the required parameter 'statementId' is set
      if (statementId === undefined || statementId === null) {
        throw new Error("Missing the required parameter 'statementId' when calling removeProfilePermission");
      }

      let pathParams = {
        'profileName': profileName,
        'statementId': statementId
      };
      let queryParams = {
        'revisionId': revisionId
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RemoveProfilePermissionResponse;
      return this.apiClient.callApi(
        '/signing-profiles/{profileName}/permissions/{statementId}#revisionId', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the revokeSignature operation.
     * @callback module:api/DefaultApi~revokeSignatureCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Changes the state of a signing job to REVOKED. This indicates that the signature is no longer valid.
     * @param {String} jobId ID of the signing job to be revoked.
     * @param {module:model/RevokeSignatureRequest} revokeSignatureRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~revokeSignatureCallback} callback The callback function, accepting three arguments: error, data, response
     */
    revokeSignature(jobId, revokeSignatureRequest, opts, callback) {
      opts = opts || {};
      let postBody = revokeSignatureRequest;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling revokeSignature");
      }
      // verify the required parameter 'revokeSignatureRequest' is set
      if (revokeSignatureRequest === undefined || revokeSignatureRequest === null) {
        throw new Error("Missing the required parameter 'revokeSignatureRequest' when calling revokeSignature");
      }

      let pathParams = {
        'jobId': jobId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/signing-jobs/{jobId}/revoke', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the revokeSigningProfile operation.
     * @callback module:api/DefaultApi~revokeSigningProfileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Changes the state of a signing profile to REVOKED. This indicates that signatures generated using the signing profile after an effective start date are no longer valid.
     * @param {String} profileName The name of the signing profile to be revoked.
     * @param {module:model/RevokeSigningProfileRequest} revokeSigningProfileRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~revokeSigningProfileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    revokeSigningProfile(profileName, revokeSigningProfileRequest, opts, callback) {
      opts = opts || {};
      let postBody = revokeSigningProfileRequest;
      // verify the required parameter 'profileName' is set
      if (profileName === undefined || profileName === null) {
        throw new Error("Missing the required parameter 'profileName' when calling revokeSigningProfile");
      }
      // verify the required parameter 'revokeSigningProfileRequest' is set
      if (revokeSigningProfileRequest === undefined || revokeSigningProfileRequest === null) {
        throw new Error("Missing the required parameter 'revokeSigningProfileRequest' when calling revokeSigningProfile");
      }

      let pathParams = {
        'profileName': profileName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/signing-profiles/{profileName}/revoke', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the signPayload operation.
     * @callback module:api/DefaultApi~signPayloadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SignPayloadResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Signs a binary payload and returns a signature envelope.
     * @param {module:model/SignPayloadRequest} signPayloadRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~signPayloadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SignPayloadResponse}
     */
    signPayload(signPayloadRequest, opts, callback) {
      opts = opts || {};
      let postBody = signPayloadRequest;
      // verify the required parameter 'signPayloadRequest' is set
      if (signPayloadRequest === undefined || signPayloadRequest === null) {
        throw new Error("Missing the required parameter 'signPayloadRequest' when calling signPayload");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SignPayloadResponse;
      return this.apiClient.callApi(
        '/signing-jobs/with-payload', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startSigningJob operation.
     * @callback module:api/DefaultApi~startSigningJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartSigningJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Initiates a signing job to be performed on the code provided. Signing jobs are viewable by the <code>ListSigningJobs</code> operation for two years after they are performed. Note the following requirements: </p> <ul> <li> <p> You must create an Amazon S3 source bucket. For more information, see <a href=\"http://docs.aws.amazon.com/AmazonS3/latest/gsg/CreatingABucket.html\">Creating a Bucket</a> in the <i>Amazon S3 Getting Started Guide</i>. </p> </li> <li> <p>Your S3 source bucket must be version enabled.</p> </li> <li> <p>You must create an S3 destination bucket. Code signing uses your S3 destination bucket to write your signed code.</p> </li> <li> <p>You specify the name of the source and destination buckets when calling the <code>StartSigningJob</code> operation.</p> </li> <li> <p>You must also specify a request token that identifies your request to code signing.</p> </li> </ul> <p>You can call the <a>DescribeSigningJob</a> and the <a>ListSigningJobs</a> actions after you call <code>StartSigningJob</code>.</p> <p>For a Java example that shows how to use this action, see <a href=\"https://docs.aws.amazon.com/signer/latest/developerguide/api-startsigningjob.html\">StartSigningJob</a>.</p>
     * @param {module:model/StartSigningJobRequest} startSigningJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startSigningJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartSigningJobResponse}
     */
    startSigningJob(startSigningJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = startSigningJobRequest;
      // verify the required parameter 'startSigningJobRequest' is set
      if (startSigningJobRequest === undefined || startSigningJobRequest === null) {
        throw new Error("Missing the required parameter 'startSigningJobRequest' when calling startSigningJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartSigningJobResponse;
      return this.apiClient.callApi(
        '/signing-jobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds one or more tags to a signing profile. Tags are labels that you can use to identify and organize your AWS resources. Each tag consists of a key and an optional value. To specify the signing profile, use its Amazon Resource Name (ARN). To specify the tag, use a key-value pair.
     * @param {String} resourceArn The Amazon Resource Name (ARN) for the signing profile.
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    tagResource(resourceArn, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/tags/{resourceArn}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes one or more tags from a signing profile. To remove the tags, specify a list of tag keys.
     * @param {String} resourceArn The Amazon Resource Name (ARN) for the signing profile.
     * @param {Array.<String>} tagKeys A list of tag keys to be removed from the signing profile.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    untagResource(resourceArn, tagKeys, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling untagResource");
      }
      // verify the required parameter 'tagKeys' is set
      if (tagKeys === undefined || tagKeys === null) {
        throw new Error("Missing the required parameter 'tagKeys' when calling untagResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
        'tagKeys': this.apiClient.buildCollectionParam(tagKeys, 'multi')
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/tags/{resourceArn}#tagKeys', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
