/**
 * AWS Signer
 * <p>AWS Signer is a fully managed code signing service to help you ensure the trust and integrity of your code. </p> <p>AWS Signer supports the following applications:</p> <p>With code signing for AWS Lambda, you can sign <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/\">AWS Lambda</a> deployment packages. Integrated support is provided for <a href=\"http://docs.aws.amazon.com/AmazonS3/latest/gsg/\">Amazon S3</a>, <a href=\"http://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/\">Amazon CloudWatch</a>, and <a href=\"http://docs.aws.amazon.com/awscloudtrail/latest/userguide/\">AWS CloudTrail</a>. In order to sign code, you create a signing profile and then use Signer to sign Lambda zip files in S3. </p> <p>With code signing for IoT, you can sign code for any IoT device that is supported by AWS. IoT code signing is available for <a href=\"http://docs.aws.amazon.com/freertos/latest/userguide/\">Amazon FreeRTOS</a> and <a href=\"http://docs.aws.amazon.com/iot/latest/developerguide/\">AWS IoT Device Management</a>, and is integrated with <a href=\"http://docs.aws.amazon.com/acm/latest/userguide/\">AWS Certificate Manager (ACM)</a>. In order to sign code, you import a third-party code signing certificate using ACM, and use that to sign updates in Amazon FreeRTOS and AWS IoT Device Management. </p> <p>With code signing for containers â€¦(TBD)</p> <p>For more information about AWS Signer, see the <a href=\"https://docs.aws.amazon.com/signer/latest/developerguide/Welcome.html\">AWS Signer Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SignPayloadRequest model module.
 * @module model/SignPayloadRequest
 * @version 2017-08-25
 */
class SignPayloadRequest {
    /**
     * Constructs a new <code>SignPayloadRequest</code>.
     * @alias module:model/SignPayloadRequest
     * @param profileName {String} The name of the signing profile.
     * @param payload {String} Specifies the object digest (hash) to sign.
     * @param payloadFormat {String} Payload content type
     */
    constructor(profileName, payload, payloadFormat) { 
        
        SignPayloadRequest.initialize(this, profileName, payload, payloadFormat);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, profileName, payload, payloadFormat) { 
        obj['profileName'] = profileName;
        obj['payload'] = payload;
        obj['payloadFormat'] = payloadFormat;
    }

    /**
     * Constructs a <code>SignPayloadRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SignPayloadRequest} obj Optional instance to populate.
     * @return {module:model/SignPayloadRequest} The populated <code>SignPayloadRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SignPayloadRequest();

            if (data.hasOwnProperty('profileName')) {
                obj['profileName'] = ApiClient.convertToType(data['profileName'], 'String');
            }
            if (data.hasOwnProperty('profileOwner')) {
                obj['profileOwner'] = ApiClient.convertToType(data['profileOwner'], 'String');
            }
            if (data.hasOwnProperty('payload')) {
                obj['payload'] = ApiClient.convertToType(data['payload'], 'String');
            }
            if (data.hasOwnProperty('payloadFormat')) {
                obj['payloadFormat'] = ApiClient.convertToType(data['payloadFormat'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SignPayloadRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SignPayloadRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SignPayloadRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['profileName'] && !(typeof data['profileName'] === 'string' || data['profileName'] instanceof String)) {
            throw new Error("Expected the field `profileName` to be a primitive type in the JSON string but got " + data['profileName']);
        }
        // ensure the json data is a string
        if (data['profileOwner'] && !(typeof data['profileOwner'] === 'string' || data['profileOwner'] instanceof String)) {
            throw new Error("Expected the field `profileOwner` to be a primitive type in the JSON string but got " + data['profileOwner']);
        }
        // ensure the json data is a string
        if (data['payload'] && !(typeof data['payload'] === 'string' || data['payload'] instanceof String)) {
            throw new Error("Expected the field `payload` to be a primitive type in the JSON string but got " + data['payload']);
        }
        // ensure the json data is a string
        if (data['payloadFormat'] && !(typeof data['payloadFormat'] === 'string' || data['payloadFormat'] instanceof String)) {
            throw new Error("Expected the field `payloadFormat` to be a primitive type in the JSON string but got " + data['payloadFormat']);
        }

        return true;
    }


}

SignPayloadRequest.RequiredProperties = ["profileName", "payload", "payloadFormat"];

/**
 * The name of the signing profile.
 * @member {String} profileName
 */
SignPayloadRequest.prototype['profileName'] = undefined;

/**
 * The AWS account ID of the profile owner.
 * @member {String} profileOwner
 */
SignPayloadRequest.prototype['profileOwner'] = undefined;

/**
 * Specifies the object digest (hash) to sign.
 * @member {String} payload
 */
SignPayloadRequest.prototype['payload'] = undefined;

/**
 * Payload content type
 * @member {String} payloadFormat
 */
SignPayloadRequest.prototype['payloadFormat'] = undefined;






export default SignPayloadRequest;

