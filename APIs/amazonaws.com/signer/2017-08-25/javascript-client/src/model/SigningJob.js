/**
 * AWS Signer
 * <p>AWS Signer is a fully managed code signing service to help you ensure the trust and integrity of your code. </p> <p>AWS Signer supports the following applications:</p> <p>With code signing for AWS Lambda, you can sign <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/\">AWS Lambda</a> deployment packages. Integrated support is provided for <a href=\"http://docs.aws.amazon.com/AmazonS3/latest/gsg/\">Amazon S3</a>, <a href=\"http://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/\">Amazon CloudWatch</a>, and <a href=\"http://docs.aws.amazon.com/awscloudtrail/latest/userguide/\">AWS CloudTrail</a>. In order to sign code, you create a signing profile and then use Signer to sign Lambda zip files in S3. </p> <p>With code signing for IoT, you can sign code for any IoT device that is supported by AWS. IoT code signing is available for <a href=\"http://docs.aws.amazon.com/freertos/latest/userguide/\">Amazon FreeRTOS</a> and <a href=\"http://docs.aws.amazon.com/iot/latest/developerguide/\">AWS IoT Device Management</a>, and is integrated with <a href=\"http://docs.aws.amazon.com/acm/latest/userguide/\">AWS Certificate Manager (ACM)</a>. In order to sign code, you import a third-party code signing certificate using ACM, and use that to sign updates in Amazon FreeRTOS and AWS IoT Device Management. </p> <p>With code signing for containers â€¦(TBD)</p> <p>For more information about AWS Signer, see the <a href=\"https://docs.aws.amazon.com/signer/latest/developerguide/Welcome.html\">AWS Signer Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SigningJobSignedObject from './SigningJobSignedObject';
import SigningJobSigningMaterial from './SigningJobSigningMaterial';
import SigningJobSource from './SigningJobSource';
import SigningStatus from './SigningStatus';

/**
 * The SigningJob model module.
 * @module model/SigningJob
 * @version 2017-08-25
 */
class SigningJob {
    /**
     * Constructs a new <code>SigningJob</code>.
     * Contains information about a signing job.
     * @alias module:model/SigningJob
     */
    constructor() { 
        
        SigningJob.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SigningJob</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SigningJob} obj Optional instance to populate.
     * @return {module:model/SigningJob} The populated <code>SigningJob</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SigningJob();

            if (data.hasOwnProperty('jobId')) {
                obj['jobId'] = ApiClient.convertToType(data['jobId'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = SigningJobSource.constructFromObject(data['source']);
            }
            if (data.hasOwnProperty('signedObject')) {
                obj['signedObject'] = SigningJobSignedObject.constructFromObject(data['signedObject']);
            }
            if (data.hasOwnProperty('signingMaterial')) {
                obj['signingMaterial'] = SigningJobSigningMaterial.constructFromObject(data['signingMaterial']);
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], SigningStatus);
            }
            if (data.hasOwnProperty('isRevoked')) {
                obj['isRevoked'] = ApiClient.convertToType(data['isRevoked'], 'Boolean');
            }
            if (data.hasOwnProperty('profileName')) {
                obj['profileName'] = ApiClient.convertToType(data['profileName'], 'String');
            }
            if (data.hasOwnProperty('profileVersion')) {
                obj['profileVersion'] = ApiClient.convertToType(data['profileVersion'], 'String');
            }
            if (data.hasOwnProperty('platformId')) {
                obj['platformId'] = ApiClient.convertToType(data['platformId'], 'String');
            }
            if (data.hasOwnProperty('platformDisplayName')) {
                obj['platformDisplayName'] = ApiClient.convertToType(data['platformDisplayName'], 'String');
            }
            if (data.hasOwnProperty('signatureExpiresAt')) {
                obj['signatureExpiresAt'] = ApiClient.convertToType(data['signatureExpiresAt'], 'Date');
            }
            if (data.hasOwnProperty('jobOwner')) {
                obj['jobOwner'] = ApiClient.convertToType(data['jobOwner'], 'String');
            }
            if (data.hasOwnProperty('jobInvoker')) {
                obj['jobInvoker'] = ApiClient.convertToType(data['jobInvoker'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SigningJob</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SigningJob</code>.
     */
    static validateJSON(data) {
        // validate the optional field `jobId`
        if (data['jobId']) { // data not null
          String.validateJSON(data['jobId']);
        }
        // validate the optional field `source`
        if (data['source']) { // data not null
          SigningJobSource.validateJSON(data['source']);
        }
        // validate the optional field `signedObject`
        if (data['signedObject']) { // data not null
          SigningJobSignedObject.validateJSON(data['signedObject']);
        }
        // validate the optional field `signingMaterial`
        if (data['signingMaterial']) { // data not null
          SigningJobSigningMaterial.validateJSON(data['signingMaterial']);
        }
        // validate the optional field `createdAt`
        if (data['createdAt']) { // data not null
          Date.validateJSON(data['createdAt']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          SigningStatus.validateJSON(data['status']);
        }
        // validate the optional field `isRevoked`
        if (data['isRevoked']) { // data not null
          Boolean.validateJSON(data['isRevoked']);
        }
        // validate the optional field `profileName`
        if (data['profileName']) { // data not null
          String.validateJSON(data['profileName']);
        }
        // validate the optional field `profileVersion`
        if (data['profileVersion']) { // data not null
          String.validateJSON(data['profileVersion']);
        }
        // validate the optional field `platformId`
        if (data['platformId']) { // data not null
          String.validateJSON(data['platformId']);
        }
        // validate the optional field `platformDisplayName`
        if (data['platformDisplayName']) { // data not null
          String.validateJSON(data['platformDisplayName']);
        }
        // validate the optional field `signatureExpiresAt`
        if (data['signatureExpiresAt']) { // data not null
          Date.validateJSON(data['signatureExpiresAt']);
        }
        // validate the optional field `jobOwner`
        if (data['jobOwner']) { // data not null
          String.validateJSON(data['jobOwner']);
        }
        // validate the optional field `jobInvoker`
        if (data['jobInvoker']) { // data not null
          String.validateJSON(data['jobInvoker']);
        }

        return true;
    }


}



/**
 * @member {String} jobId
 */
SigningJob.prototype['jobId'] = undefined;

/**
 * @member {module:model/SigningJobSource} source
 */
SigningJob.prototype['source'] = undefined;

/**
 * @member {module:model/SigningJobSignedObject} signedObject
 */
SigningJob.prototype['signedObject'] = undefined;

/**
 * @member {module:model/SigningJobSigningMaterial} signingMaterial
 */
SigningJob.prototype['signingMaterial'] = undefined;

/**
 * @member {Date} createdAt
 */
SigningJob.prototype['createdAt'] = undefined;

/**
 * @member {module:model/SigningStatus} status
 */
SigningJob.prototype['status'] = undefined;

/**
 * @member {Boolean} isRevoked
 */
SigningJob.prototype['isRevoked'] = undefined;

/**
 * @member {String} profileName
 */
SigningJob.prototype['profileName'] = undefined;

/**
 * @member {String} profileVersion
 */
SigningJob.prototype['profileVersion'] = undefined;

/**
 * @member {String} platformId
 */
SigningJob.prototype['platformId'] = undefined;

/**
 * @member {String} platformDisplayName
 */
SigningJob.prototype['platformDisplayName'] = undefined;

/**
 * @member {Date} signatureExpiresAt
 */
SigningJob.prototype['signatureExpiresAt'] = undefined;

/**
 * @member {String} jobOwner
 */
SigningJob.prototype['jobOwner'] = undefined;

/**
 * @member {String} jobInvoker
 */
SigningJob.prototype['jobInvoker'] = undefined;






export default SigningJob;

