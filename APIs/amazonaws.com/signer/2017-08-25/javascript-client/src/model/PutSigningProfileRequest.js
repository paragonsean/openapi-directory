/**
 * AWS Signer
 * <p>AWS Signer is a fully managed code signing service to help you ensure the trust and integrity of your code. </p> <p>AWS Signer supports the following applications:</p> <p>With code signing for AWS Lambda, you can sign <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/\">AWS Lambda</a> deployment packages. Integrated support is provided for <a href=\"http://docs.aws.amazon.com/AmazonS3/latest/gsg/\">Amazon S3</a>, <a href=\"http://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/\">Amazon CloudWatch</a>, and <a href=\"http://docs.aws.amazon.com/awscloudtrail/latest/userguide/\">AWS CloudTrail</a>. In order to sign code, you create a signing profile and then use Signer to sign Lambda zip files in S3. </p> <p>With code signing for IoT, you can sign code for any IoT device that is supported by AWS. IoT code signing is available for <a href=\"http://docs.aws.amazon.com/freertos/latest/userguide/\">Amazon FreeRTOS</a> and <a href=\"http://docs.aws.amazon.com/iot/latest/developerguide/\">AWS IoT Device Management</a>, and is integrated with <a href=\"http://docs.aws.amazon.com/acm/latest/userguide/\">AWS Certificate Manager (ACM)</a>. In order to sign code, you import a third-party code signing certificate using ACM, and use that to sign updates in Amazon FreeRTOS and AWS IoT Device Management. </p> <p>With code signing for containers â€¦(TBD)</p> <p>For more information about AWS Signer, see the <a href=\"https://docs.aws.amazon.com/signer/latest/developerguide/Welcome.html\">AWS Signer Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PutSigningProfileRequestOverrides from './PutSigningProfileRequestOverrides';
import PutSigningProfileRequestSignatureValidityPeriod from './PutSigningProfileRequestSignatureValidityPeriod';
import PutSigningProfileRequestSigningMaterial from './PutSigningProfileRequestSigningMaterial';

/**
 * The PutSigningProfileRequest model module.
 * @module model/PutSigningProfileRequest
 * @version 2017-08-25
 */
class PutSigningProfileRequest {
    /**
     * Constructs a new <code>PutSigningProfileRequest</code>.
     * @alias module:model/PutSigningProfileRequest
     * @param platformId {String} The ID of the signing platform to be created.
     */
    constructor(platformId) { 
        
        PutSigningProfileRequest.initialize(this, platformId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, platformId) { 
        obj['platformId'] = platformId;
    }

    /**
     * Constructs a <code>PutSigningProfileRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PutSigningProfileRequest} obj Optional instance to populate.
     * @return {module:model/PutSigningProfileRequest} The populated <code>PutSigningProfileRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PutSigningProfileRequest();

            if (data.hasOwnProperty('signingMaterial')) {
                obj['signingMaterial'] = PutSigningProfileRequestSigningMaterial.constructFromObject(data['signingMaterial']);
            }
            if (data.hasOwnProperty('signatureValidityPeriod')) {
                obj['signatureValidityPeriod'] = PutSigningProfileRequestSignatureValidityPeriod.constructFromObject(data['signatureValidityPeriod']);
            }
            if (data.hasOwnProperty('platformId')) {
                obj['platformId'] = ApiClient.convertToType(data['platformId'], 'String');
            }
            if (data.hasOwnProperty('overrides')) {
                obj['overrides'] = PutSigningProfileRequestOverrides.constructFromObject(data['overrides']);
            }
            if (data.hasOwnProperty('signingParameters')) {
                obj['signingParameters'] = ApiClient.convertToType(data['signingParameters'], {'String': 'String'});
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PutSigningProfileRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PutSigningProfileRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PutSigningProfileRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `signingMaterial`
        if (data['signingMaterial']) { // data not null
          PutSigningProfileRequestSigningMaterial.validateJSON(data['signingMaterial']);
        }
        // validate the optional field `signatureValidityPeriod`
        if (data['signatureValidityPeriod']) { // data not null
          PutSigningProfileRequestSignatureValidityPeriod.validateJSON(data['signatureValidityPeriod']);
        }
        // ensure the json data is a string
        if (data['platformId'] && !(typeof data['platformId'] === 'string' || data['platformId'] instanceof String)) {
            throw new Error("Expected the field `platformId` to be a primitive type in the JSON string but got " + data['platformId']);
        }
        // validate the optional field `overrides`
        if (data['overrides']) { // data not null
          PutSigningProfileRequestOverrides.validateJSON(data['overrides']);
        }

        return true;
    }


}

PutSigningProfileRequest.RequiredProperties = ["platformId"];

/**
 * @member {module:model/PutSigningProfileRequestSigningMaterial} signingMaterial
 */
PutSigningProfileRequest.prototype['signingMaterial'] = undefined;

/**
 * @member {module:model/PutSigningProfileRequestSignatureValidityPeriod} signatureValidityPeriod
 */
PutSigningProfileRequest.prototype['signatureValidityPeriod'] = undefined;

/**
 * The ID of the signing platform to be created.
 * @member {String} platformId
 */
PutSigningProfileRequest.prototype['platformId'] = undefined;

/**
 * @member {module:model/PutSigningProfileRequestOverrides} overrides
 */
PutSigningProfileRequest.prototype['overrides'] = undefined;

/**
 * Map of key-value pairs for signing. These can include any information that you want to use during signing.
 * @member {Object.<String, String>} signingParameters
 */
PutSigningProfileRequest.prototype['signingParameters'] = undefined;

/**
 * Tags to be associated with the signing profile that is being created.
 * @member {Object.<String, String>} tags
 */
PutSigningProfileRequest.prototype['tags'] = undefined;






export default PutSigningProfileRequest;

