/**
 * AWS Signer
 * <p>AWS Signer is a fully managed code signing service to help you ensure the trust and integrity of your code. </p> <p>AWS Signer supports the following applications:</p> <p>With code signing for AWS Lambda, you can sign <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/\">AWS Lambda</a> deployment packages. Integrated support is provided for <a href=\"http://docs.aws.amazon.com/AmazonS3/latest/gsg/\">Amazon S3</a>, <a href=\"http://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/\">Amazon CloudWatch</a>, and <a href=\"http://docs.aws.amazon.com/awscloudtrail/latest/userguide/\">AWS CloudTrail</a>. In order to sign code, you create a signing profile and then use Signer to sign Lambda zip files in S3. </p> <p>With code signing for IoT, you can sign code for any IoT device that is supported by AWS. IoT code signing is available for <a href=\"http://docs.aws.amazon.com/freertos/latest/userguide/\">Amazon FreeRTOS</a> and <a href=\"http://docs.aws.amazon.com/iot/latest/developerguide/\">AWS IoT Device Management</a>, and is integrated with <a href=\"http://docs.aws.amazon.com/acm/latest/userguide/\">AWS Certificate Manager (ACM)</a>. In order to sign code, you import a third-party code signing certificate using ACM, and use that to sign updates in Amazon FreeRTOS and AWS IoT Device Management. </p> <p>With code signing for containers â€¦(TBD)</p> <p>For more information about AWS Signer, see the <a href=\"https://docs.aws.amazon.com/signer/latest/developerguide/Welcome.html\">AWS Signer Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Category from './Category';
import SigningImageFormat from './SigningImageFormat';
import SigningPlatformSigningConfiguration from './SigningPlatformSigningConfiguration';

/**
 * The SigningPlatform model module.
 * @module model/SigningPlatform
 * @version 2017-08-25
 */
class SigningPlatform {
    /**
     * Constructs a new <code>SigningPlatform</code>.
     * Contains information about the signing configurations and parameters that are used to perform a code signing job.
     * @alias module:model/SigningPlatform
     */
    constructor() { 
        
        SigningPlatform.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SigningPlatform</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SigningPlatform} obj Optional instance to populate.
     * @return {module:model/SigningPlatform} The populated <code>SigningPlatform</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SigningPlatform();

            if (data.hasOwnProperty('platformId')) {
                obj['platformId'] = ApiClient.convertToType(data['platformId'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('partner')) {
                obj['partner'] = ApiClient.convertToType(data['partner'], 'String');
            }
            if (data.hasOwnProperty('target')) {
                obj['target'] = ApiClient.convertToType(data['target'], 'String');
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], Category);
            }
            if (data.hasOwnProperty('signingConfiguration')) {
                obj['signingConfiguration'] = SigningPlatformSigningConfiguration.constructFromObject(data['signingConfiguration']);
            }
            if (data.hasOwnProperty('signingImageFormat')) {
                obj['signingImageFormat'] = SigningImageFormat.constructFromObject(data['signingImageFormat']);
            }
            if (data.hasOwnProperty('maxSizeInMB')) {
                obj['maxSizeInMB'] = ApiClient.convertToType(data['maxSizeInMB'], 'Number');
            }
            if (data.hasOwnProperty('revocationSupported')) {
                obj['revocationSupported'] = ApiClient.convertToType(data['revocationSupported'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SigningPlatform</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SigningPlatform</code>.
     */
    static validateJSON(data) {
        // validate the optional field `platformId`
        if (data['platformId']) { // data not null
          String.validateJSON(data['platformId']);
        }
        // validate the optional field `displayName`
        if (data['displayName']) { // data not null
          String.validateJSON(data['displayName']);
        }
        // validate the optional field `partner`
        if (data['partner']) { // data not null
          String.validateJSON(data['partner']);
        }
        // validate the optional field `target`
        if (data['target']) { // data not null
          String.validateJSON(data['target']);
        }
        // validate the optional field `category`
        if (data['category']) { // data not null
          Category.validateJSON(data['category']);
        }
        // validate the optional field `signingConfiguration`
        if (data['signingConfiguration']) { // data not null
          SigningPlatformSigningConfiguration.validateJSON(data['signingConfiguration']);
        }
        // validate the optional field `signingImageFormat`
        if (data['signingImageFormat']) { // data not null
          SigningImageFormat.validateJSON(data['signingImageFormat']);
        }
        // validate the optional field `maxSizeInMB`
        if (data['maxSizeInMB']) { // data not null
          Number.validateJSON(data['maxSizeInMB']);
        }
        // validate the optional field `revocationSupported`
        if (data['revocationSupported']) { // data not null
          Boolean.validateJSON(data['revocationSupported']);
        }

        return true;
    }


}



/**
 * @member {String} platformId
 */
SigningPlatform.prototype['platformId'] = undefined;

/**
 * @member {String} displayName
 */
SigningPlatform.prototype['displayName'] = undefined;

/**
 * @member {String} partner
 */
SigningPlatform.prototype['partner'] = undefined;

/**
 * @member {String} target
 */
SigningPlatform.prototype['target'] = undefined;

/**
 * @member {module:model/Category} category
 */
SigningPlatform.prototype['category'] = undefined;

/**
 * @member {module:model/SigningPlatformSigningConfiguration} signingConfiguration
 */
SigningPlatform.prototype['signingConfiguration'] = undefined;

/**
 * @member {module:model/SigningImageFormat} signingImageFormat
 */
SigningPlatform.prototype['signingImageFormat'] = undefined;

/**
 * @member {Number} maxSizeInMB
 */
SigningPlatform.prototype['maxSizeInMB'] = undefined;

/**
 * @member {Boolean} revocationSupported
 */
SigningPlatform.prototype['revocationSupported'] = undefined;






export default SigningPlatform;

