/**
 * AWS Signer
 * <p>AWS Signer is a fully managed code signing service to help you ensure the trust and integrity of your code. </p> <p>AWS Signer supports the following applications:</p> <p>With code signing for AWS Lambda, you can sign <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/\">AWS Lambda</a> deployment packages. Integrated support is provided for <a href=\"http://docs.aws.amazon.com/AmazonS3/latest/gsg/\">Amazon S3</a>, <a href=\"http://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/\">Amazon CloudWatch</a>, and <a href=\"http://docs.aws.amazon.com/awscloudtrail/latest/userguide/\">AWS CloudTrail</a>. In order to sign code, you create a signing profile and then use Signer to sign Lambda zip files in S3. </p> <p>With code signing for IoT, you can sign code for any IoT device that is supported by AWS. IoT code signing is available for <a href=\"http://docs.aws.amazon.com/freertos/latest/userguide/\">Amazon FreeRTOS</a> and <a href=\"http://docs.aws.amazon.com/iot/latest/developerguide/\">AWS IoT Device Management</a>, and is integrated with <a href=\"http://docs.aws.amazon.com/acm/latest/userguide/\">AWS Certificate Manager (ACM)</a>. In order to sign code, you import a third-party code signing certificate using ACM, and use that to sign updates in Amazon FreeRTOS and AWS IoT Device Management. </p> <p>With code signing for containers â€¦(TBD)</p> <p>For more information about AWS Signer, see the <a href=\"https://docs.aws.amazon.com/signer/latest/developerguide/Welcome.html\">AWS Signer Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AddProfilePermissionRequest model module.
 * @module model/AddProfilePermissionRequest
 * @version 2017-08-25
 */
class AddProfilePermissionRequest {
    /**
     * Constructs a new <code>AddProfilePermissionRequest</code>.
     * @alias module:model/AddProfilePermissionRequest
     * @param action {String} The AWS Signer action permitted as part of cross-account permissions.
     * @param principal {String} The AWS principal receiving cross-account permissions. This may be an IAM role or another AWS account ID.
     * @param statementId {String} A unique identifier for the cross-account permission statement.
     */
    constructor(action, principal, statementId) { 
        
        AddProfilePermissionRequest.initialize(this, action, principal, statementId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, action, principal, statementId) { 
        obj['action'] = action;
        obj['principal'] = principal;
        obj['statementId'] = statementId;
    }

    /**
     * Constructs a <code>AddProfilePermissionRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AddProfilePermissionRequest} obj Optional instance to populate.
     * @return {module:model/AddProfilePermissionRequest} The populated <code>AddProfilePermissionRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AddProfilePermissionRequest();

            if (data.hasOwnProperty('profileVersion')) {
                obj['profileVersion'] = ApiClient.convertToType(data['profileVersion'], 'String');
            }
            if (data.hasOwnProperty('action')) {
                obj['action'] = ApiClient.convertToType(data['action'], 'String');
            }
            if (data.hasOwnProperty('principal')) {
                obj['principal'] = ApiClient.convertToType(data['principal'], 'String');
            }
            if (data.hasOwnProperty('revisionId')) {
                obj['revisionId'] = ApiClient.convertToType(data['revisionId'], 'String');
            }
            if (data.hasOwnProperty('statementId')) {
                obj['statementId'] = ApiClient.convertToType(data['statementId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AddProfilePermissionRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AddProfilePermissionRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AddProfilePermissionRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['profileVersion'] && !(typeof data['profileVersion'] === 'string' || data['profileVersion'] instanceof String)) {
            throw new Error("Expected the field `profileVersion` to be a primitive type in the JSON string but got " + data['profileVersion']);
        }
        // ensure the json data is a string
        if (data['action'] && !(typeof data['action'] === 'string' || data['action'] instanceof String)) {
            throw new Error("Expected the field `action` to be a primitive type in the JSON string but got " + data['action']);
        }
        // ensure the json data is a string
        if (data['principal'] && !(typeof data['principal'] === 'string' || data['principal'] instanceof String)) {
            throw new Error("Expected the field `principal` to be a primitive type in the JSON string but got " + data['principal']);
        }
        // ensure the json data is a string
        if (data['revisionId'] && !(typeof data['revisionId'] === 'string' || data['revisionId'] instanceof String)) {
            throw new Error("Expected the field `revisionId` to be a primitive type in the JSON string but got " + data['revisionId']);
        }
        // ensure the json data is a string
        if (data['statementId'] && !(typeof data['statementId'] === 'string' || data['statementId'] instanceof String)) {
            throw new Error("Expected the field `statementId` to be a primitive type in the JSON string but got " + data['statementId']);
        }

        return true;
    }


}

AddProfilePermissionRequest.RequiredProperties = ["action", "principal", "statementId"];

/**
 * The version of the signing profile.
 * @member {String} profileVersion
 */
AddProfilePermissionRequest.prototype['profileVersion'] = undefined;

/**
 * The AWS Signer action permitted as part of cross-account permissions.
 * @member {String} action
 */
AddProfilePermissionRequest.prototype['action'] = undefined;

/**
 * The AWS principal receiving cross-account permissions. This may be an IAM role or another AWS account ID.
 * @member {String} principal
 */
AddProfilePermissionRequest.prototype['principal'] = undefined;

/**
 * A unique identifier for the current profile revision.
 * @member {String} revisionId
 */
AddProfilePermissionRequest.prototype['revisionId'] = undefined;

/**
 * A unique identifier for the cross-account permission statement.
 * @member {String} statementId
 */
AddProfilePermissionRequest.prototype['statementId'] = undefined;






export default AddProfilePermissionRequest;

