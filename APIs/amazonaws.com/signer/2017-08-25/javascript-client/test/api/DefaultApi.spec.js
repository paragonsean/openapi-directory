/**
 * AWS Signer
 * <p>AWS Signer is a fully managed code signing service to help you ensure the trust and integrity of your code. </p> <p>AWS Signer supports the following applications:</p> <p>With code signing for AWS Lambda, you can sign <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/\">AWS Lambda</a> deployment packages. Integrated support is provided for <a href=\"http://docs.aws.amazon.com/AmazonS3/latest/gsg/\">Amazon S3</a>, <a href=\"http://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/\">Amazon CloudWatch</a>, and <a href=\"http://docs.aws.amazon.com/awscloudtrail/latest/userguide/\">AWS CloudTrail</a>. In order to sign code, you create a signing profile and then use Signer to sign Lambda zip files in S3. </p> <p>With code signing for IoT, you can sign code for any IoT device that is supported by AWS. IoT code signing is available for <a href=\"http://docs.aws.amazon.com/freertos/latest/userguide/\">Amazon FreeRTOS</a> and <a href=\"http://docs.aws.amazon.com/iot/latest/developerguide/\">AWS IoT Device Management</a>, and is integrated with <a href=\"http://docs.aws.amazon.com/acm/latest/userguide/\">AWS Certificate Manager (ACM)</a>. In order to sign code, you import a third-party code signing certificate using ACM, and use that to sign updates in Amazon FreeRTOS and AWS IoT Device Management. </p> <p>With code signing for containers â€¦(TBD)</p> <p>For more information about AWS Signer, see the <a href=\"https://docs.aws.amazon.com/signer/latest/developerguide/Welcome.html\">AWS Signer Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsSigner);
  }
}(this, function(expect, AwsSigner) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsSigner.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('addProfilePermission', function() {
      it('should call addProfilePermission successfully', function(done) {
        //uncomment below and update the code to test addProfilePermission
        //instance.addProfilePermission(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cancelSigningProfile', function() {
      it('should call cancelSigningProfile successfully', function(done) {
        //uncomment below and update the code to test cancelSigningProfile
        //instance.cancelSigningProfile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeSigningJob', function() {
      it('should call describeSigningJob successfully', function(done) {
        //uncomment below and update the code to test describeSigningJob
        //instance.describeSigningJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRevocationStatus', function() {
      it('should call getRevocationStatus successfully', function(done) {
        //uncomment below and update the code to test getRevocationStatus
        //instance.getRevocationStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSigningPlatform', function() {
      it('should call getSigningPlatform successfully', function(done) {
        //uncomment below and update the code to test getSigningPlatform
        //instance.getSigningPlatform(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSigningProfile', function() {
      it('should call getSigningProfile successfully', function(done) {
        //uncomment below and update the code to test getSigningProfile
        //instance.getSigningProfile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listProfilePermissions', function() {
      it('should call listProfilePermissions successfully', function(done) {
        //uncomment below and update the code to test listProfilePermissions
        //instance.listProfilePermissions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listSigningJobs', function() {
      it('should call listSigningJobs successfully', function(done) {
        //uncomment below and update the code to test listSigningJobs
        //instance.listSigningJobs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listSigningPlatforms', function() {
      it('should call listSigningPlatforms successfully', function(done) {
        //uncomment below and update the code to test listSigningPlatforms
        //instance.listSigningPlatforms(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listSigningProfiles', function() {
      it('should call listSigningProfiles successfully', function(done) {
        //uncomment below and update the code to test listSigningProfiles
        //instance.listSigningProfiles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putSigningProfile', function() {
      it('should call putSigningProfile successfully', function(done) {
        //uncomment below and update the code to test putSigningProfile
        //instance.putSigningProfile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeProfilePermission', function() {
      it('should call removeProfilePermission successfully', function(done) {
        //uncomment below and update the code to test removeProfilePermission
        //instance.removeProfilePermission(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('revokeSignature', function() {
      it('should call revokeSignature successfully', function(done) {
        //uncomment below and update the code to test revokeSignature
        //instance.revokeSignature(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('revokeSigningProfile', function() {
      it('should call revokeSigningProfile successfully', function(done) {
        //uncomment below and update the code to test revokeSigningProfile
        //instance.revokeSigningProfile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('signPayload', function() {
      it('should call signPayload successfully', function(done) {
        //uncomment below and update the code to test signPayload
        //instance.signPayload(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startSigningJob', function() {
      it('should call startSigningJob successfully', function(done) {
        //uncomment below and update the code to test startSigningJob
        //instance.startSigningJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
