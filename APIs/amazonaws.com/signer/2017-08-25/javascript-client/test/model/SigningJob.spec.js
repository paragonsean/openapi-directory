/**
 * AWS Signer
 * <p>AWS Signer is a fully managed code signing service to help you ensure the trust and integrity of your code. </p> <p>AWS Signer supports the following applications:</p> <p>With code signing for AWS Lambda, you can sign <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/\">AWS Lambda</a> deployment packages. Integrated support is provided for <a href=\"http://docs.aws.amazon.com/AmazonS3/latest/gsg/\">Amazon S3</a>, <a href=\"http://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/\">Amazon CloudWatch</a>, and <a href=\"http://docs.aws.amazon.com/awscloudtrail/latest/userguide/\">AWS CloudTrail</a>. In order to sign code, you create a signing profile and then use Signer to sign Lambda zip files in S3. </p> <p>With code signing for IoT, you can sign code for any IoT device that is supported by AWS. IoT code signing is available for <a href=\"http://docs.aws.amazon.com/freertos/latest/userguide/\">Amazon FreeRTOS</a> and <a href=\"http://docs.aws.amazon.com/iot/latest/developerguide/\">AWS IoT Device Management</a>, and is integrated with <a href=\"http://docs.aws.amazon.com/acm/latest/userguide/\">AWS Certificate Manager (ACM)</a>. In order to sign code, you import a third-party code signing certificate using ACM, and use that to sign updates in Amazon FreeRTOS and AWS IoT Device Management. </p> <p>With code signing for containers â€¦(TBD)</p> <p>For more information about AWS Signer, see the <a href=\"https://docs.aws.amazon.com/signer/latest/developerguide/Welcome.html\">AWS Signer Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsSigner);
  }
}(this, function(expect, AwsSigner) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsSigner.SigningJob();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SigningJob', function() {
    it('should create an instance of SigningJob', function() {
      // uncomment below and update the code to test SigningJob
      //var instance = new AwsSigner.SigningJob();
      //expect(instance).to.be.a(AwsSigner.SigningJob);
    });

    it('should have the property jobId (base name: "jobId")', function() {
      // uncomment below and update the code to test the property jobId
      //var instance = new AwsSigner.SigningJob();
      //expect(instance).to.be();
    });

    it('should have the property source (base name: "source")', function() {
      // uncomment below and update the code to test the property source
      //var instance = new AwsSigner.SigningJob();
      //expect(instance).to.be();
    });

    it('should have the property signedObject (base name: "signedObject")', function() {
      // uncomment below and update the code to test the property signedObject
      //var instance = new AwsSigner.SigningJob();
      //expect(instance).to.be();
    });

    it('should have the property signingMaterial (base name: "signingMaterial")', function() {
      // uncomment below and update the code to test the property signingMaterial
      //var instance = new AwsSigner.SigningJob();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "createdAt")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new AwsSigner.SigningJob();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new AwsSigner.SigningJob();
      //expect(instance).to.be();
    });

    it('should have the property isRevoked (base name: "isRevoked")', function() {
      // uncomment below and update the code to test the property isRevoked
      //var instance = new AwsSigner.SigningJob();
      //expect(instance).to.be();
    });

    it('should have the property profileName (base name: "profileName")', function() {
      // uncomment below and update the code to test the property profileName
      //var instance = new AwsSigner.SigningJob();
      //expect(instance).to.be();
    });

    it('should have the property profileVersion (base name: "profileVersion")', function() {
      // uncomment below and update the code to test the property profileVersion
      //var instance = new AwsSigner.SigningJob();
      //expect(instance).to.be();
    });

    it('should have the property platformId (base name: "platformId")', function() {
      // uncomment below and update the code to test the property platformId
      //var instance = new AwsSigner.SigningJob();
      //expect(instance).to.be();
    });

    it('should have the property platformDisplayName (base name: "platformDisplayName")', function() {
      // uncomment below and update the code to test the property platformDisplayName
      //var instance = new AwsSigner.SigningJob();
      //expect(instance).to.be();
    });

    it('should have the property signatureExpiresAt (base name: "signatureExpiresAt")', function() {
      // uncomment below and update the code to test the property signatureExpiresAt
      //var instance = new AwsSigner.SigningJob();
      //expect(instance).to.be();
    });

    it('should have the property jobOwner (base name: "jobOwner")', function() {
      // uncomment below and update the code to test the property jobOwner
      //var instance = new AwsSigner.SigningJob();
      //expect(instance).to.be();
    });

    it('should have the property jobInvoker (base name: "jobInvoker")', function() {
      // uncomment below and update the code to test the property jobInvoker
      //var instance = new AwsSigner.SigningJob();
      //expect(instance).to.be();
    });

  });

}));
