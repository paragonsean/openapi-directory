/*
 * AWS Signer
 * <p>AWS Signer is a fully managed code signing service to help you ensure the trust and integrity of your code. </p> <p>AWS Signer supports the following applications:</p> <p>With code signing for AWS Lambda, you can sign <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/\">AWS Lambda</a> deployment packages. Integrated support is provided for <a href=\"http://docs.aws.amazon.com/AmazonS3/latest/gsg/\">Amazon S3</a>, <a href=\"http://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/\">Amazon CloudWatch</a>, and <a href=\"http://docs.aws.amazon.com/awscloudtrail/latest/userguide/\">AWS CloudTrail</a>. In order to sign code, you create a signing profile and then use Signer to sign Lambda zip files in S3. </p> <p>With code signing for IoT, you can sign code for any IoT device that is supported by AWS. IoT code signing is available for <a href=\"http://docs.aws.amazon.com/freertos/latest/userguide/\">Amazon FreeRTOS</a> and <a href=\"http://docs.aws.amazon.com/iot/latest/developerguide/\">AWS IoT Device Management</a>, and is integrated with <a href=\"http://docs.aws.amazon.com/acm/latest/userguide/\">AWS Certificate Manager (ACM)</a>. In order to sign code, you import a third-party code signing certificate using ACM, and use that to sign updates in Amazon FreeRTOS and AWS IoT Device Management. </p> <p>With code signing for containers â€¦(TBD)</p> <p>For more information about AWS Signer, see the <a href=\"https://docs.aws.amazon.com/signer/latest/developerguide/Welcome.html\">AWS Signer Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.SigningJobSignedObject;
import org.openapitools.client.model.SigningJobSigningMaterial;
import org.openapitools.client.model.SigningJobSource;
import org.openapitools.client.model.SigningStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains information about a signing job.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:00.154164-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SigningJob {
  public static final String SERIALIZED_NAME_JOB_ID = "jobId";
  @SerializedName(SERIALIZED_NAME_JOB_ID)
  private String jobId;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private SigningJobSource source;

  public static final String SERIALIZED_NAME_SIGNED_OBJECT = "signedObject";
  @SerializedName(SERIALIZED_NAME_SIGNED_OBJECT)
  private SigningJobSignedObject signedObject;

  public static final String SERIALIZED_NAME_SIGNING_MATERIAL = "signingMaterial";
  @SerializedName(SERIALIZED_NAME_SIGNING_MATERIAL)
  private SigningJobSigningMaterial signingMaterial;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private SigningStatus status;

  public static final String SERIALIZED_NAME_IS_REVOKED = "isRevoked";
  @SerializedName(SERIALIZED_NAME_IS_REVOKED)
  private Boolean isRevoked;

  public static final String SERIALIZED_NAME_PROFILE_NAME = "profileName";
  @SerializedName(SERIALIZED_NAME_PROFILE_NAME)
  private String profileName;

  public static final String SERIALIZED_NAME_PROFILE_VERSION = "profileVersion";
  @SerializedName(SERIALIZED_NAME_PROFILE_VERSION)
  private String profileVersion;

  public static final String SERIALIZED_NAME_PLATFORM_ID = "platformId";
  @SerializedName(SERIALIZED_NAME_PLATFORM_ID)
  private String platformId;

  public static final String SERIALIZED_NAME_PLATFORM_DISPLAY_NAME = "platformDisplayName";
  @SerializedName(SERIALIZED_NAME_PLATFORM_DISPLAY_NAME)
  private String platformDisplayName;

  public static final String SERIALIZED_NAME_SIGNATURE_EXPIRES_AT = "signatureExpiresAt";
  @SerializedName(SERIALIZED_NAME_SIGNATURE_EXPIRES_AT)
  private OffsetDateTime signatureExpiresAt;

  public static final String SERIALIZED_NAME_JOB_OWNER = "jobOwner";
  @SerializedName(SERIALIZED_NAME_JOB_OWNER)
  private String jobOwner;

  public static final String SERIALIZED_NAME_JOB_INVOKER = "jobInvoker";
  @SerializedName(SERIALIZED_NAME_JOB_INVOKER)
  private String jobInvoker;

  public SigningJob() {
  }

  public SigningJob jobId(String jobId) {
    this.jobId = jobId;
    return this;
  }

  /**
   * Get jobId
   * @return jobId
   */
  @javax.annotation.Nullable
  public String getJobId() {
    return jobId;
  }

  public void setJobId(String jobId) {
    this.jobId = jobId;
  }


  public SigningJob source(SigningJobSource source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nullable
  public SigningJobSource getSource() {
    return source;
  }

  public void setSource(SigningJobSource source) {
    this.source = source;
  }


  public SigningJob signedObject(SigningJobSignedObject signedObject) {
    this.signedObject = signedObject;
    return this;
  }

  /**
   * Get signedObject
   * @return signedObject
   */
  @javax.annotation.Nullable
  public SigningJobSignedObject getSignedObject() {
    return signedObject;
  }

  public void setSignedObject(SigningJobSignedObject signedObject) {
    this.signedObject = signedObject;
  }


  public SigningJob signingMaterial(SigningJobSigningMaterial signingMaterial) {
    this.signingMaterial = signingMaterial;
    return this;
  }

  /**
   * Get signingMaterial
   * @return signingMaterial
   */
  @javax.annotation.Nullable
  public SigningJobSigningMaterial getSigningMaterial() {
    return signingMaterial;
  }

  public void setSigningMaterial(SigningJobSigningMaterial signingMaterial) {
    this.signingMaterial = signingMaterial;
  }


  public SigningJob createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public SigningJob status(SigningStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public SigningStatus getStatus() {
    return status;
  }

  public void setStatus(SigningStatus status) {
    this.status = status;
  }


  public SigningJob isRevoked(Boolean isRevoked) {
    this.isRevoked = isRevoked;
    return this;
  }

  /**
   * Get isRevoked
   * @return isRevoked
   */
  @javax.annotation.Nullable
  public Boolean getIsRevoked() {
    return isRevoked;
  }

  public void setIsRevoked(Boolean isRevoked) {
    this.isRevoked = isRevoked;
  }


  public SigningJob profileName(String profileName) {
    this.profileName = profileName;
    return this;
  }

  /**
   * Get profileName
   * @return profileName
   */
  @javax.annotation.Nullable
  public String getProfileName() {
    return profileName;
  }

  public void setProfileName(String profileName) {
    this.profileName = profileName;
  }


  public SigningJob profileVersion(String profileVersion) {
    this.profileVersion = profileVersion;
    return this;
  }

  /**
   * Get profileVersion
   * @return profileVersion
   */
  @javax.annotation.Nullable
  public String getProfileVersion() {
    return profileVersion;
  }

  public void setProfileVersion(String profileVersion) {
    this.profileVersion = profileVersion;
  }


  public SigningJob platformId(String platformId) {
    this.platformId = platformId;
    return this;
  }

  /**
   * Get platformId
   * @return platformId
   */
  @javax.annotation.Nullable
  public String getPlatformId() {
    return platformId;
  }

  public void setPlatformId(String platformId) {
    this.platformId = platformId;
  }


  public SigningJob platformDisplayName(String platformDisplayName) {
    this.platformDisplayName = platformDisplayName;
    return this;
  }

  /**
   * Get platformDisplayName
   * @return platformDisplayName
   */
  @javax.annotation.Nullable
  public String getPlatformDisplayName() {
    return platformDisplayName;
  }

  public void setPlatformDisplayName(String platformDisplayName) {
    this.platformDisplayName = platformDisplayName;
  }


  public SigningJob signatureExpiresAt(OffsetDateTime signatureExpiresAt) {
    this.signatureExpiresAt = signatureExpiresAt;
    return this;
  }

  /**
   * Get signatureExpiresAt
   * @return signatureExpiresAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSignatureExpiresAt() {
    return signatureExpiresAt;
  }

  public void setSignatureExpiresAt(OffsetDateTime signatureExpiresAt) {
    this.signatureExpiresAt = signatureExpiresAt;
  }


  public SigningJob jobOwner(String jobOwner) {
    this.jobOwner = jobOwner;
    return this;
  }

  /**
   * Get jobOwner
   * @return jobOwner
   */
  @javax.annotation.Nullable
  public String getJobOwner() {
    return jobOwner;
  }

  public void setJobOwner(String jobOwner) {
    this.jobOwner = jobOwner;
  }


  public SigningJob jobInvoker(String jobInvoker) {
    this.jobInvoker = jobInvoker;
    return this;
  }

  /**
   * Get jobInvoker
   * @return jobInvoker
   */
  @javax.annotation.Nullable
  public String getJobInvoker() {
    return jobInvoker;
  }

  public void setJobInvoker(String jobInvoker) {
    this.jobInvoker = jobInvoker;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SigningJob signingJob = (SigningJob) o;
    return Objects.equals(this.jobId, signingJob.jobId) &&
        Objects.equals(this.source, signingJob.source) &&
        Objects.equals(this.signedObject, signingJob.signedObject) &&
        Objects.equals(this.signingMaterial, signingJob.signingMaterial) &&
        Objects.equals(this.createdAt, signingJob.createdAt) &&
        Objects.equals(this.status, signingJob.status) &&
        Objects.equals(this.isRevoked, signingJob.isRevoked) &&
        Objects.equals(this.profileName, signingJob.profileName) &&
        Objects.equals(this.profileVersion, signingJob.profileVersion) &&
        Objects.equals(this.platformId, signingJob.platformId) &&
        Objects.equals(this.platformDisplayName, signingJob.platformDisplayName) &&
        Objects.equals(this.signatureExpiresAt, signingJob.signatureExpiresAt) &&
        Objects.equals(this.jobOwner, signingJob.jobOwner) &&
        Objects.equals(this.jobInvoker, signingJob.jobInvoker);
  }

  @Override
  public int hashCode() {
    return Objects.hash(jobId, source, signedObject, signingMaterial, createdAt, status, isRevoked, profileName, profileVersion, platformId, platformDisplayName, signatureExpiresAt, jobOwner, jobInvoker);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SigningJob {\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    signedObject: ").append(toIndentedString(signedObject)).append("\n");
    sb.append("    signingMaterial: ").append(toIndentedString(signingMaterial)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    isRevoked: ").append(toIndentedString(isRevoked)).append("\n");
    sb.append("    profileName: ").append(toIndentedString(profileName)).append("\n");
    sb.append("    profileVersion: ").append(toIndentedString(profileVersion)).append("\n");
    sb.append("    platformId: ").append(toIndentedString(platformId)).append("\n");
    sb.append("    platformDisplayName: ").append(toIndentedString(platformDisplayName)).append("\n");
    sb.append("    signatureExpiresAt: ").append(toIndentedString(signatureExpiresAt)).append("\n");
    sb.append("    jobOwner: ").append(toIndentedString(jobOwner)).append("\n");
    sb.append("    jobInvoker: ").append(toIndentedString(jobInvoker)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("jobId");
    openapiFields.add("source");
    openapiFields.add("signedObject");
    openapiFields.add("signingMaterial");
    openapiFields.add("createdAt");
    openapiFields.add("status");
    openapiFields.add("isRevoked");
    openapiFields.add("profileName");
    openapiFields.add("profileVersion");
    openapiFields.add("platformId");
    openapiFields.add("platformDisplayName");
    openapiFields.add("signatureExpiresAt");
    openapiFields.add("jobOwner");
    openapiFields.add("jobInvoker");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SigningJob
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SigningJob.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SigningJob is not found in the empty JSON string", SigningJob.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SigningJob.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SigningJob` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `jobId`
      if (jsonObj.get("jobId") != null && !jsonObj.get("jobId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("jobId"));
      }
      // validate the optional field `source`
      if (jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) {
        SigningJobSource.validateJsonElement(jsonObj.get("source"));
      }
      // validate the optional field `signedObject`
      if (jsonObj.get("signedObject") != null && !jsonObj.get("signedObject").isJsonNull()) {
        SigningJobSignedObject.validateJsonElement(jsonObj.get("signedObject"));
      }
      // validate the optional field `signingMaterial`
      if (jsonObj.get("signingMaterial") != null && !jsonObj.get("signingMaterial").isJsonNull()) {
        SigningJobSigningMaterial.validateJsonElement(jsonObj.get("signingMaterial"));
      }
      // validate the optional field `createdAt`
      if (jsonObj.get("createdAt") != null && !jsonObj.get("createdAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("createdAt"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        SigningStatus.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `isRevoked`
      if (jsonObj.get("isRevoked") != null && !jsonObj.get("isRevoked").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("isRevoked"));
      }
      // validate the optional field `profileName`
      if (jsonObj.get("profileName") != null && !jsonObj.get("profileName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("profileName"));
      }
      // validate the optional field `profileVersion`
      if (jsonObj.get("profileVersion") != null && !jsonObj.get("profileVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("profileVersion"));
      }
      // validate the optional field `platformId`
      if (jsonObj.get("platformId") != null && !jsonObj.get("platformId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("platformId"));
      }
      // validate the optional field `platformDisplayName`
      if (jsonObj.get("platformDisplayName") != null && !jsonObj.get("platformDisplayName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("platformDisplayName"));
      }
      // validate the optional field `signatureExpiresAt`
      if (jsonObj.get("signatureExpiresAt") != null && !jsonObj.get("signatureExpiresAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("signatureExpiresAt"));
      }
      // validate the optional field `jobOwner`
      if (jsonObj.get("jobOwner") != null && !jsonObj.get("jobOwner").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("jobOwner"));
      }
      // validate the optional field `jobInvoker`
      if (jsonObj.get("jobInvoker") != null && !jsonObj.get("jobInvoker").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("jobInvoker"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SigningJob.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SigningJob' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SigningJob> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SigningJob.class));

       return (TypeAdapter<T>) new TypeAdapter<SigningJob>() {
           @Override
           public void write(JsonWriter out, SigningJob value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SigningJob read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SigningJob given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SigningJob
   * @throws IOException if the JSON string is invalid with respect to SigningJob
   */
  public static SigningJob fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SigningJob.class);
  }

  /**
   * Convert an instance of SigningJob to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

