/*
 * AWS Signer
 * <p>AWS Signer is a fully managed code signing service to help you ensure the trust and integrity of your code. </p> <p>AWS Signer supports the following applications:</p> <p>With code signing for AWS Lambda, you can sign <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/\">AWS Lambda</a> deployment packages. Integrated support is provided for <a href=\"http://docs.aws.amazon.com/AmazonS3/latest/gsg/\">Amazon S3</a>, <a href=\"http://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/\">Amazon CloudWatch</a>, and <a href=\"http://docs.aws.amazon.com/awscloudtrail/latest/userguide/\">AWS CloudTrail</a>. In order to sign code, you create a signing profile and then use Signer to sign Lambda zip files in S3. </p> <p>With code signing for IoT, you can sign code for any IoT device that is supported by AWS. IoT code signing is available for <a href=\"http://docs.aws.amazon.com/freertos/latest/userguide/\">Amazon FreeRTOS</a> and <a href=\"http://docs.aws.amazon.com/iot/latest/developerguide/\">AWS IoT Device Management</a>, and is integrated with <a href=\"http://docs.aws.amazon.com/acm/latest/userguide/\">AWS Certificate Manager (ACM)</a>. In order to sign code, you import a third-party code signing certificate using ACM, and use that to sign updates in Amazon FreeRTOS and AWS IoT Device Management. </p> <p>With code signing for containers â€¦(TBD)</p> <p>For more information about AWS Signer, see the <a href=\"https://docs.aws.amazon.com/signer/latest/developerguide/Welcome.html\">AWS Signer Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Category;
import org.openapitools.client.model.GetSigningPlatformResponseSigningConfiguration;
import org.openapitools.client.model.GetSigningPlatformResponseSigningImageFormat;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetSigningPlatformResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:00.154164-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetSigningPlatformResponse {
  public static final String SERIALIZED_NAME_PLATFORM_ID = "platformId";
  @SerializedName(SERIALIZED_NAME_PLATFORM_ID)
  private String platformId;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_PARTNER = "partner";
  @SerializedName(SERIALIZED_NAME_PARTNER)
  private String partner;

  public static final String SERIALIZED_NAME_TARGET = "target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private String target;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private Category category;

  public static final String SERIALIZED_NAME_SIGNING_CONFIGURATION = "signingConfiguration";
  @SerializedName(SERIALIZED_NAME_SIGNING_CONFIGURATION)
  private GetSigningPlatformResponseSigningConfiguration signingConfiguration;

  public static final String SERIALIZED_NAME_SIGNING_IMAGE_FORMAT = "signingImageFormat";
  @SerializedName(SERIALIZED_NAME_SIGNING_IMAGE_FORMAT)
  private GetSigningPlatformResponseSigningImageFormat signingImageFormat;

  public static final String SERIALIZED_NAME_MAX_SIZE_IN_M_B = "maxSizeInMB";
  @SerializedName(SERIALIZED_NAME_MAX_SIZE_IN_M_B)
  private Integer maxSizeInMB;

  public static final String SERIALIZED_NAME_REVOCATION_SUPPORTED = "revocationSupported";
  @SerializedName(SERIALIZED_NAME_REVOCATION_SUPPORTED)
  private Boolean revocationSupported;

  public GetSigningPlatformResponse() {
  }

  public GetSigningPlatformResponse platformId(String platformId) {
    this.platformId = platformId;
    return this;
  }

  /**
   * Get platformId
   * @return platformId
   */
  @javax.annotation.Nullable
  public String getPlatformId() {
    return platformId;
  }

  public void setPlatformId(String platformId) {
    this.platformId = platformId;
  }


  public GetSigningPlatformResponse displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Get displayName
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public GetSigningPlatformResponse partner(String partner) {
    this.partner = partner;
    return this;
  }

  /**
   * Get partner
   * @return partner
   */
  @javax.annotation.Nullable
  public String getPartner() {
    return partner;
  }

  public void setPartner(String partner) {
    this.partner = partner;
  }


  public GetSigningPlatformResponse target(String target) {
    this.target = target;
    return this;
  }

  /**
   * Get target
   * @return target
   */
  @javax.annotation.Nullable
  public String getTarget() {
    return target;
  }

  public void setTarget(String target) {
    this.target = target;
  }


  public GetSigningPlatformResponse category(Category category) {
    this.category = category;
    return this;
  }

  /**
   * Get category
   * @return category
   */
  @javax.annotation.Nullable
  public Category getCategory() {
    return category;
  }

  public void setCategory(Category category) {
    this.category = category;
  }


  public GetSigningPlatformResponse signingConfiguration(GetSigningPlatformResponseSigningConfiguration signingConfiguration) {
    this.signingConfiguration = signingConfiguration;
    return this;
  }

  /**
   * Get signingConfiguration
   * @return signingConfiguration
   */
  @javax.annotation.Nullable
  public GetSigningPlatformResponseSigningConfiguration getSigningConfiguration() {
    return signingConfiguration;
  }

  public void setSigningConfiguration(GetSigningPlatformResponseSigningConfiguration signingConfiguration) {
    this.signingConfiguration = signingConfiguration;
  }


  public GetSigningPlatformResponse signingImageFormat(GetSigningPlatformResponseSigningImageFormat signingImageFormat) {
    this.signingImageFormat = signingImageFormat;
    return this;
  }

  /**
   * Get signingImageFormat
   * @return signingImageFormat
   */
  @javax.annotation.Nullable
  public GetSigningPlatformResponseSigningImageFormat getSigningImageFormat() {
    return signingImageFormat;
  }

  public void setSigningImageFormat(GetSigningPlatformResponseSigningImageFormat signingImageFormat) {
    this.signingImageFormat = signingImageFormat;
  }


  public GetSigningPlatformResponse maxSizeInMB(Integer maxSizeInMB) {
    this.maxSizeInMB = maxSizeInMB;
    return this;
  }

  /**
   * Get maxSizeInMB
   * @return maxSizeInMB
   */
  @javax.annotation.Nullable
  public Integer getMaxSizeInMB() {
    return maxSizeInMB;
  }

  public void setMaxSizeInMB(Integer maxSizeInMB) {
    this.maxSizeInMB = maxSizeInMB;
  }


  public GetSigningPlatformResponse revocationSupported(Boolean revocationSupported) {
    this.revocationSupported = revocationSupported;
    return this;
  }

  /**
   * Get revocationSupported
   * @return revocationSupported
   */
  @javax.annotation.Nullable
  public Boolean getRevocationSupported() {
    return revocationSupported;
  }

  public void setRevocationSupported(Boolean revocationSupported) {
    this.revocationSupported = revocationSupported;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetSigningPlatformResponse getSigningPlatformResponse = (GetSigningPlatformResponse) o;
    return Objects.equals(this.platformId, getSigningPlatformResponse.platformId) &&
        Objects.equals(this.displayName, getSigningPlatformResponse.displayName) &&
        Objects.equals(this.partner, getSigningPlatformResponse.partner) &&
        Objects.equals(this.target, getSigningPlatformResponse.target) &&
        Objects.equals(this.category, getSigningPlatformResponse.category) &&
        Objects.equals(this.signingConfiguration, getSigningPlatformResponse.signingConfiguration) &&
        Objects.equals(this.signingImageFormat, getSigningPlatformResponse.signingImageFormat) &&
        Objects.equals(this.maxSizeInMB, getSigningPlatformResponse.maxSizeInMB) &&
        Objects.equals(this.revocationSupported, getSigningPlatformResponse.revocationSupported);
  }

  @Override
  public int hashCode() {
    return Objects.hash(platformId, displayName, partner, target, category, signingConfiguration, signingImageFormat, maxSizeInMB, revocationSupported);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetSigningPlatformResponse {\n");
    sb.append("    platformId: ").append(toIndentedString(platformId)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    partner: ").append(toIndentedString(partner)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    signingConfiguration: ").append(toIndentedString(signingConfiguration)).append("\n");
    sb.append("    signingImageFormat: ").append(toIndentedString(signingImageFormat)).append("\n");
    sb.append("    maxSizeInMB: ").append(toIndentedString(maxSizeInMB)).append("\n");
    sb.append("    revocationSupported: ").append(toIndentedString(revocationSupported)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("platformId");
    openapiFields.add("displayName");
    openapiFields.add("partner");
    openapiFields.add("target");
    openapiFields.add("category");
    openapiFields.add("signingConfiguration");
    openapiFields.add("signingImageFormat");
    openapiFields.add("maxSizeInMB");
    openapiFields.add("revocationSupported");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetSigningPlatformResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetSigningPlatformResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetSigningPlatformResponse is not found in the empty JSON string", GetSigningPlatformResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetSigningPlatformResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetSigningPlatformResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `platformId`
      if (jsonObj.get("platformId") != null && !jsonObj.get("platformId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("platformId"));
      }
      // validate the optional field `displayName`
      if (jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("displayName"));
      }
      // validate the optional field `partner`
      if (jsonObj.get("partner") != null && !jsonObj.get("partner").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("partner"));
      }
      // validate the optional field `target`
      if (jsonObj.get("target") != null && !jsonObj.get("target").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("target"));
      }
      // validate the optional field `category`
      if (jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) {
        Category.validateJsonElement(jsonObj.get("category"));
      }
      // validate the optional field `signingConfiguration`
      if (jsonObj.get("signingConfiguration") != null && !jsonObj.get("signingConfiguration").isJsonNull()) {
        GetSigningPlatformResponseSigningConfiguration.validateJsonElement(jsonObj.get("signingConfiguration"));
      }
      // validate the optional field `signingImageFormat`
      if (jsonObj.get("signingImageFormat") != null && !jsonObj.get("signingImageFormat").isJsonNull()) {
        GetSigningPlatformResponseSigningImageFormat.validateJsonElement(jsonObj.get("signingImageFormat"));
      }
      // validate the optional field `maxSizeInMB`
      if (jsonObj.get("maxSizeInMB") != null && !jsonObj.get("maxSizeInMB").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("maxSizeInMB"));
      }
      // validate the optional field `revocationSupported`
      if (jsonObj.get("revocationSupported") != null && !jsonObj.get("revocationSupported").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("revocationSupported"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetSigningPlatformResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetSigningPlatformResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetSigningPlatformResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetSigningPlatformResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetSigningPlatformResponse>() {
           @Override
           public void write(JsonWriter out, GetSigningPlatformResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetSigningPlatformResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetSigningPlatformResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetSigningPlatformResponse
   * @throws IOException if the JSON string is invalid with respect to GetSigningPlatformResponse
   */
  public static GetSigningPlatformResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetSigningPlatformResponse.class);
  }

  /**
   * Convert an instance of GetSigningPlatformResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

