/*
 * AWS Signer
 * <p>AWS Signer is a fully managed code signing service to help you ensure the trust and integrity of your code. </p> <p>AWS Signer supports the following applications:</p> <p>With code signing for AWS Lambda, you can sign <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/\">AWS Lambda</a> deployment packages. Integrated support is provided for <a href=\"http://docs.aws.amazon.com/AmazonS3/latest/gsg/\">Amazon S3</a>, <a href=\"http://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/\">Amazon CloudWatch</a>, and <a href=\"http://docs.aws.amazon.com/awscloudtrail/latest/userguide/\">AWS CloudTrail</a>. In order to sign code, you create a signing profile and then use Signer to sign Lambda zip files in S3. </p> <p>With code signing for IoT, you can sign code for any IoT device that is supported by AWS. IoT code signing is available for <a href=\"http://docs.aws.amazon.com/freertos/latest/userguide/\">Amazon FreeRTOS</a> and <a href=\"http://docs.aws.amazon.com/iot/latest/developerguide/\">AWS IoT Device Management</a>, and is integrated with <a href=\"http://docs.aws.amazon.com/acm/latest/userguide/\">AWS Certificate Manager (ACM)</a>. In order to sign code, you import a third-party code signing certificate using ACM, and use that to sign updates in Amazon FreeRTOS and AWS IoT Device Management. </p> <p>With code signing for containers â€¦(TBD)</p> <p>For more information about AWS Signer, see the <a href=\"https://docs.aws.amazon.com/signer/latest/developerguide/Welcome.html\">AWS Signer Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.SigningProfileSignatureValidityPeriod;
import org.openapitools.client.model.SigningProfileSigningMaterial;
import org.openapitools.client.model.SigningProfileStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains information about the ACM certificates and code signing configuration parameters that can be used by a given code signing user.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:00.154164-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SigningProfile {
  public static final String SERIALIZED_NAME_PROFILE_NAME = "profileName";
  @SerializedName(SERIALIZED_NAME_PROFILE_NAME)
  private String profileName;

  public static final String SERIALIZED_NAME_PROFILE_VERSION = "profileVersion";
  @SerializedName(SERIALIZED_NAME_PROFILE_VERSION)
  private String profileVersion;

  public static final String SERIALIZED_NAME_PROFILE_VERSION_ARN = "profileVersionArn";
  @SerializedName(SERIALIZED_NAME_PROFILE_VERSION_ARN)
  private String profileVersionArn;

  public static final String SERIALIZED_NAME_SIGNING_MATERIAL = "signingMaterial";
  @SerializedName(SERIALIZED_NAME_SIGNING_MATERIAL)
  private SigningProfileSigningMaterial signingMaterial;

  public static final String SERIALIZED_NAME_SIGNATURE_VALIDITY_PERIOD = "signatureValidityPeriod";
  @SerializedName(SERIALIZED_NAME_SIGNATURE_VALIDITY_PERIOD)
  private SigningProfileSignatureValidityPeriod signatureValidityPeriod;

  public static final String SERIALIZED_NAME_PLATFORM_ID = "platformId";
  @SerializedName(SERIALIZED_NAME_PLATFORM_ID)
  private String platformId;

  public static final String SERIALIZED_NAME_PLATFORM_DISPLAY_NAME = "platformDisplayName";
  @SerializedName(SERIALIZED_NAME_PLATFORM_DISPLAY_NAME)
  private String platformDisplayName;

  public static final String SERIALIZED_NAME_SIGNING_PARAMETERS = "signingParameters";
  @SerializedName(SERIALIZED_NAME_SIGNING_PARAMETERS)
  private Map signingParameters;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private SigningProfileStatus status;

  public static final String SERIALIZED_NAME_ARN = "arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public SigningProfile() {
  }

  public SigningProfile profileName(String profileName) {
    this.profileName = profileName;
    return this;
  }

  /**
   * Get profileName
   * @return profileName
   */
  @javax.annotation.Nullable
  public String getProfileName() {
    return profileName;
  }

  public void setProfileName(String profileName) {
    this.profileName = profileName;
  }


  public SigningProfile profileVersion(String profileVersion) {
    this.profileVersion = profileVersion;
    return this;
  }

  /**
   * Get profileVersion
   * @return profileVersion
   */
  @javax.annotation.Nullable
  public String getProfileVersion() {
    return profileVersion;
  }

  public void setProfileVersion(String profileVersion) {
    this.profileVersion = profileVersion;
  }


  public SigningProfile profileVersionArn(String profileVersionArn) {
    this.profileVersionArn = profileVersionArn;
    return this;
  }

  /**
   * Get profileVersionArn
   * @return profileVersionArn
   */
  @javax.annotation.Nullable
  public String getProfileVersionArn() {
    return profileVersionArn;
  }

  public void setProfileVersionArn(String profileVersionArn) {
    this.profileVersionArn = profileVersionArn;
  }


  public SigningProfile signingMaterial(SigningProfileSigningMaterial signingMaterial) {
    this.signingMaterial = signingMaterial;
    return this;
  }

  /**
   * Get signingMaterial
   * @return signingMaterial
   */
  @javax.annotation.Nullable
  public SigningProfileSigningMaterial getSigningMaterial() {
    return signingMaterial;
  }

  public void setSigningMaterial(SigningProfileSigningMaterial signingMaterial) {
    this.signingMaterial = signingMaterial;
  }


  public SigningProfile signatureValidityPeriod(SigningProfileSignatureValidityPeriod signatureValidityPeriod) {
    this.signatureValidityPeriod = signatureValidityPeriod;
    return this;
  }

  /**
   * Get signatureValidityPeriod
   * @return signatureValidityPeriod
   */
  @javax.annotation.Nullable
  public SigningProfileSignatureValidityPeriod getSignatureValidityPeriod() {
    return signatureValidityPeriod;
  }

  public void setSignatureValidityPeriod(SigningProfileSignatureValidityPeriod signatureValidityPeriod) {
    this.signatureValidityPeriod = signatureValidityPeriod;
  }


  public SigningProfile platformId(String platformId) {
    this.platformId = platformId;
    return this;
  }

  /**
   * Get platformId
   * @return platformId
   */
  @javax.annotation.Nullable
  public String getPlatformId() {
    return platformId;
  }

  public void setPlatformId(String platformId) {
    this.platformId = platformId;
  }


  public SigningProfile platformDisplayName(String platformDisplayName) {
    this.platformDisplayName = platformDisplayName;
    return this;
  }

  /**
   * Get platformDisplayName
   * @return platformDisplayName
   */
  @javax.annotation.Nullable
  public String getPlatformDisplayName() {
    return platformDisplayName;
  }

  public void setPlatformDisplayName(String platformDisplayName) {
    this.platformDisplayName = platformDisplayName;
  }


  public SigningProfile signingParameters(Map signingParameters) {
    this.signingParameters = signingParameters;
    return this;
  }

  /**
   * Get signingParameters
   * @return signingParameters
   */
  @javax.annotation.Nullable
  public Map getSigningParameters() {
    return signingParameters;
  }

  public void setSigningParameters(Map signingParameters) {
    this.signingParameters = signingParameters;
  }


  public SigningProfile status(SigningProfileStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public SigningProfileStatus getStatus() {
    return status;
  }

  public void setStatus(SigningProfileStatus status) {
    this.status = status;
  }


  public SigningProfile arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public SigningProfile tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SigningProfile signingProfile = (SigningProfile) o;
    return Objects.equals(this.profileName, signingProfile.profileName) &&
        Objects.equals(this.profileVersion, signingProfile.profileVersion) &&
        Objects.equals(this.profileVersionArn, signingProfile.profileVersionArn) &&
        Objects.equals(this.signingMaterial, signingProfile.signingMaterial) &&
        Objects.equals(this.signatureValidityPeriod, signingProfile.signatureValidityPeriod) &&
        Objects.equals(this.platformId, signingProfile.platformId) &&
        Objects.equals(this.platformDisplayName, signingProfile.platformDisplayName) &&
        Objects.equals(this.signingParameters, signingProfile.signingParameters) &&
        Objects.equals(this.status, signingProfile.status) &&
        Objects.equals(this.arn, signingProfile.arn) &&
        Objects.equals(this.tags, signingProfile.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(profileName, profileVersion, profileVersionArn, signingMaterial, signatureValidityPeriod, platformId, platformDisplayName, signingParameters, status, arn, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SigningProfile {\n");
    sb.append("    profileName: ").append(toIndentedString(profileName)).append("\n");
    sb.append("    profileVersion: ").append(toIndentedString(profileVersion)).append("\n");
    sb.append("    profileVersionArn: ").append(toIndentedString(profileVersionArn)).append("\n");
    sb.append("    signingMaterial: ").append(toIndentedString(signingMaterial)).append("\n");
    sb.append("    signatureValidityPeriod: ").append(toIndentedString(signatureValidityPeriod)).append("\n");
    sb.append("    platformId: ").append(toIndentedString(platformId)).append("\n");
    sb.append("    platformDisplayName: ").append(toIndentedString(platformDisplayName)).append("\n");
    sb.append("    signingParameters: ").append(toIndentedString(signingParameters)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("profileName");
    openapiFields.add("profileVersion");
    openapiFields.add("profileVersionArn");
    openapiFields.add("signingMaterial");
    openapiFields.add("signatureValidityPeriod");
    openapiFields.add("platformId");
    openapiFields.add("platformDisplayName");
    openapiFields.add("signingParameters");
    openapiFields.add("status");
    openapiFields.add("arn");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SigningProfile
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SigningProfile.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SigningProfile is not found in the empty JSON string", SigningProfile.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SigningProfile.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SigningProfile` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `profileName`
      if (jsonObj.get("profileName") != null && !jsonObj.get("profileName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("profileName"));
      }
      // validate the optional field `profileVersion`
      if (jsonObj.get("profileVersion") != null && !jsonObj.get("profileVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("profileVersion"));
      }
      // validate the optional field `profileVersionArn`
      if (jsonObj.get("profileVersionArn") != null && !jsonObj.get("profileVersionArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("profileVersionArn"));
      }
      // validate the optional field `signingMaterial`
      if (jsonObj.get("signingMaterial") != null && !jsonObj.get("signingMaterial").isJsonNull()) {
        SigningProfileSigningMaterial.validateJsonElement(jsonObj.get("signingMaterial"));
      }
      // validate the optional field `signatureValidityPeriod`
      if (jsonObj.get("signatureValidityPeriod") != null && !jsonObj.get("signatureValidityPeriod").isJsonNull()) {
        SigningProfileSignatureValidityPeriod.validateJsonElement(jsonObj.get("signatureValidityPeriod"));
      }
      // validate the optional field `platformId`
      if (jsonObj.get("platformId") != null && !jsonObj.get("platformId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("platformId"));
      }
      // validate the optional field `platformDisplayName`
      if (jsonObj.get("platformDisplayName") != null && !jsonObj.get("platformDisplayName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("platformDisplayName"));
      }
      // validate the optional field `signingParameters`
      if (jsonObj.get("signingParameters") != null && !jsonObj.get("signingParameters").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("signingParameters"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        SigningProfileStatus.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `arn`
      if (jsonObj.get("arn") != null && !jsonObj.get("arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("arn"));
      }
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("tags"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SigningProfile.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SigningProfile' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SigningProfile> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SigningProfile.class));

       return (TypeAdapter<T>) new TypeAdapter<SigningProfile>() {
           @Override
           public void write(JsonWriter out, SigningProfile value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SigningProfile read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SigningProfile given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SigningProfile
   * @throws IOException if the JSON string is invalid with respect to SigningProfile
   */
  public static SigningProfile fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SigningProfile.class);
  }

  /**
   * Convert an instance of SigningProfile to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

