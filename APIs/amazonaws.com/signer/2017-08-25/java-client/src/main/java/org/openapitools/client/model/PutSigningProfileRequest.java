/*
 * AWS Signer
 * <p>AWS Signer is a fully managed code signing service to help you ensure the trust and integrity of your code. </p> <p>AWS Signer supports the following applications:</p> <p>With code signing for AWS Lambda, you can sign <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/\">AWS Lambda</a> deployment packages. Integrated support is provided for <a href=\"http://docs.aws.amazon.com/AmazonS3/latest/gsg/\">Amazon S3</a>, <a href=\"http://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/\">Amazon CloudWatch</a>, and <a href=\"http://docs.aws.amazon.com/awscloudtrail/latest/userguide/\">AWS CloudTrail</a>. In order to sign code, you create a signing profile and then use Signer to sign Lambda zip files in S3. </p> <p>With code signing for IoT, you can sign code for any IoT device that is supported by AWS. IoT code signing is available for <a href=\"http://docs.aws.amazon.com/freertos/latest/userguide/\">Amazon FreeRTOS</a> and <a href=\"http://docs.aws.amazon.com/iot/latest/developerguide/\">AWS IoT Device Management</a>, and is integrated with <a href=\"http://docs.aws.amazon.com/acm/latest/userguide/\">AWS Certificate Manager (ACM)</a>. In order to sign code, you import a third-party code signing certificate using ACM, and use that to sign updates in Amazon FreeRTOS and AWS IoT Device Management. </p> <p>With code signing for containers â€¦(TBD)</p> <p>For more information about AWS Signer, see the <a href=\"https://docs.aws.amazon.com/signer/latest/developerguide/Welcome.html\">AWS Signer Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.PutSigningProfileRequestOverrides;
import org.openapitools.client.model.PutSigningProfileRequestSignatureValidityPeriod;
import org.openapitools.client.model.PutSigningProfileRequestSigningMaterial;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PutSigningProfileRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:00.154164-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PutSigningProfileRequest {
  public static final String SERIALIZED_NAME_SIGNING_MATERIAL = "signingMaterial";
  @SerializedName(SERIALIZED_NAME_SIGNING_MATERIAL)
  private PutSigningProfileRequestSigningMaterial signingMaterial;

  public static final String SERIALIZED_NAME_SIGNATURE_VALIDITY_PERIOD = "signatureValidityPeriod";
  @SerializedName(SERIALIZED_NAME_SIGNATURE_VALIDITY_PERIOD)
  private PutSigningProfileRequestSignatureValidityPeriod signatureValidityPeriod;

  public static final String SERIALIZED_NAME_PLATFORM_ID = "platformId";
  @SerializedName(SERIALIZED_NAME_PLATFORM_ID)
  private String platformId;

  public static final String SERIALIZED_NAME_OVERRIDES = "overrides";
  @SerializedName(SERIALIZED_NAME_OVERRIDES)
  private PutSigningProfileRequestOverrides overrides;

  public static final String SERIALIZED_NAME_SIGNING_PARAMETERS = "signingParameters";
  @SerializedName(SERIALIZED_NAME_SIGNING_PARAMETERS)
  private Map<String, String> signingParameters = new HashMap<>();

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public PutSigningProfileRequest() {
  }

  public PutSigningProfileRequest signingMaterial(PutSigningProfileRequestSigningMaterial signingMaterial) {
    this.signingMaterial = signingMaterial;
    return this;
  }

  /**
   * Get signingMaterial
   * @return signingMaterial
   */
  @javax.annotation.Nullable
  public PutSigningProfileRequestSigningMaterial getSigningMaterial() {
    return signingMaterial;
  }

  public void setSigningMaterial(PutSigningProfileRequestSigningMaterial signingMaterial) {
    this.signingMaterial = signingMaterial;
  }


  public PutSigningProfileRequest signatureValidityPeriod(PutSigningProfileRequestSignatureValidityPeriod signatureValidityPeriod) {
    this.signatureValidityPeriod = signatureValidityPeriod;
    return this;
  }

  /**
   * Get signatureValidityPeriod
   * @return signatureValidityPeriod
   */
  @javax.annotation.Nullable
  public PutSigningProfileRequestSignatureValidityPeriod getSignatureValidityPeriod() {
    return signatureValidityPeriod;
  }

  public void setSignatureValidityPeriod(PutSigningProfileRequestSignatureValidityPeriod signatureValidityPeriod) {
    this.signatureValidityPeriod = signatureValidityPeriod;
  }


  public PutSigningProfileRequest platformId(String platformId) {
    this.platformId = platformId;
    return this;
  }

  /**
   * The ID of the signing platform to be created.
   * @return platformId
   */
  @javax.annotation.Nonnull
  public String getPlatformId() {
    return platformId;
  }

  public void setPlatformId(String platformId) {
    this.platformId = platformId;
  }


  public PutSigningProfileRequest overrides(PutSigningProfileRequestOverrides overrides) {
    this.overrides = overrides;
    return this;
  }

  /**
   * Get overrides
   * @return overrides
   */
  @javax.annotation.Nullable
  public PutSigningProfileRequestOverrides getOverrides() {
    return overrides;
  }

  public void setOverrides(PutSigningProfileRequestOverrides overrides) {
    this.overrides = overrides;
  }


  public PutSigningProfileRequest signingParameters(Map<String, String> signingParameters) {
    this.signingParameters = signingParameters;
    return this;
  }

  public PutSigningProfileRequest putSigningParametersItem(String key, String signingParametersItem) {
    if (this.signingParameters == null) {
      this.signingParameters = new HashMap<>();
    }
    this.signingParameters.put(key, signingParametersItem);
    return this;
  }

  /**
   * Map of key-value pairs for signing. These can include any information that you want to use during signing.
   * @return signingParameters
   */
  @javax.annotation.Nullable
  public Map<String, String> getSigningParameters() {
    return signingParameters;
  }

  public void setSigningParameters(Map<String, String> signingParameters) {
    this.signingParameters = signingParameters;
  }


  public PutSigningProfileRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public PutSigningProfileRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * Tags to be associated with the signing profile that is being created.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PutSigningProfileRequest putSigningProfileRequest = (PutSigningProfileRequest) o;
    return Objects.equals(this.signingMaterial, putSigningProfileRequest.signingMaterial) &&
        Objects.equals(this.signatureValidityPeriod, putSigningProfileRequest.signatureValidityPeriod) &&
        Objects.equals(this.platformId, putSigningProfileRequest.platformId) &&
        Objects.equals(this.overrides, putSigningProfileRequest.overrides) &&
        Objects.equals(this.signingParameters, putSigningProfileRequest.signingParameters) &&
        Objects.equals(this.tags, putSigningProfileRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(signingMaterial, signatureValidityPeriod, platformId, overrides, signingParameters, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PutSigningProfileRequest {\n");
    sb.append("    signingMaterial: ").append(toIndentedString(signingMaterial)).append("\n");
    sb.append("    signatureValidityPeriod: ").append(toIndentedString(signatureValidityPeriod)).append("\n");
    sb.append("    platformId: ").append(toIndentedString(platformId)).append("\n");
    sb.append("    overrides: ").append(toIndentedString(overrides)).append("\n");
    sb.append("    signingParameters: ").append(toIndentedString(signingParameters)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("signingMaterial");
    openapiFields.add("signatureValidityPeriod");
    openapiFields.add("platformId");
    openapiFields.add("overrides");
    openapiFields.add("signingParameters");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("platformId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PutSigningProfileRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PutSigningProfileRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PutSigningProfileRequest is not found in the empty JSON string", PutSigningProfileRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PutSigningProfileRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PutSigningProfileRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PutSigningProfileRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `signingMaterial`
      if (jsonObj.get("signingMaterial") != null && !jsonObj.get("signingMaterial").isJsonNull()) {
        PutSigningProfileRequestSigningMaterial.validateJsonElement(jsonObj.get("signingMaterial"));
      }
      // validate the optional field `signatureValidityPeriod`
      if (jsonObj.get("signatureValidityPeriod") != null && !jsonObj.get("signatureValidityPeriod").isJsonNull()) {
        PutSigningProfileRequestSignatureValidityPeriod.validateJsonElement(jsonObj.get("signatureValidityPeriod"));
      }
      if (!jsonObj.get("platformId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `platformId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("platformId").toString()));
      }
      // validate the optional field `overrides`
      if (jsonObj.get("overrides") != null && !jsonObj.get("overrides").isJsonNull()) {
        PutSigningProfileRequestOverrides.validateJsonElement(jsonObj.get("overrides"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PutSigningProfileRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PutSigningProfileRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PutSigningProfileRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PutSigningProfileRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PutSigningProfileRequest>() {
           @Override
           public void write(JsonWriter out, PutSigningProfileRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PutSigningProfileRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PutSigningProfileRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PutSigningProfileRequest
   * @throws IOException if the JSON string is invalid with respect to PutSigningProfileRequest
   */
  public static PutSigningProfileRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PutSigningProfileRequest.class);
  }

  /**
   * Convert an instance of PutSigningProfileRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

