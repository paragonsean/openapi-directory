/*
 * AWS Signer
 * <p>AWS Signer is a fully managed code signing service to help you ensure the trust and integrity of your code. </p> <p>AWS Signer supports the following applications:</p> <p>With code signing for AWS Lambda, you can sign <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/\">AWS Lambda</a> deployment packages. Integrated support is provided for <a href=\"http://docs.aws.amazon.com/AmazonS3/latest/gsg/\">Amazon S3</a>, <a href=\"http://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/\">Amazon CloudWatch</a>, and <a href=\"http://docs.aws.amazon.com/awscloudtrail/latest/userguide/\">AWS CloudTrail</a>. In order to sign code, you create a signing profile and then use Signer to sign Lambda zip files in S3. </p> <p>With code signing for IoT, you can sign code for any IoT device that is supported by AWS. IoT code signing is available for <a href=\"http://docs.aws.amazon.com/freertos/latest/userguide/\">Amazon FreeRTOS</a> and <a href=\"http://docs.aws.amazon.com/iot/latest/developerguide/\">AWS IoT Device Management</a>, and is integrated with <a href=\"http://docs.aws.amazon.com/acm/latest/userguide/\">AWS Certificate Manager (ACM)</a>. In order to sign code, you import a third-party code signing certificate using ACM, and use that to sign updates in Amazon FreeRTOS and AWS IoT Device Management. </p> <p>With code signing for containers â€¦(TBD)</p> <p>For more information about AWS Signer, see the <a href=\"https://docs.aws.amazon.com/signer/latest/developerguide/Welcome.html\">AWS Signer Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddProfilePermissionRequest;
import org.openapitools.client.model.AddProfilePermissionResponse;
import org.openapitools.client.model.DescribeSigningJobResponse;
import org.openapitools.client.model.GetRevocationStatusResponse;
import org.openapitools.client.model.GetSigningPlatformResponse;
import org.openapitools.client.model.GetSigningProfileResponse;
import org.openapitools.client.model.ListProfilePermissionsResponse;
import org.openapitools.client.model.ListSigningJobsResponse;
import org.openapitools.client.model.ListSigningPlatformsResponse;
import org.openapitools.client.model.ListSigningProfilesResponse;
import org.openapitools.client.model.ListTagsForResourceResponse;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PutSigningProfileRequest;
import org.openapitools.client.model.PutSigningProfileResponse;
import org.openapitools.client.model.RemoveProfilePermissionResponse;
import org.openapitools.client.model.RevokeSignatureRequest;
import org.openapitools.client.model.RevokeSigningProfileRequest;
import org.openapitools.client.model.SignPayloadRequest;
import org.openapitools.client.model.SignPayloadResponse;
import org.openapitools.client.model.SigningProfileStatus;
import org.openapitools.client.model.StartSigningJobRequest;
import org.openapitools.client.model.StartSigningJobResponse;
import org.openapitools.client.model.TagResourceRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Adds cross-account permissions to a signing profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addProfilePermissionTest() throws ApiException {
        String profileName = null;
        AddProfilePermissionRequest addProfilePermissionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AddProfilePermissionResponse response = api.addProfilePermission(profileName, addProfilePermissionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Changes the state of an &lt;code&gt;ACTIVE&lt;/code&gt; signing profile to &lt;code&gt;CANCELED&lt;/code&gt;. A canceled profile is still viewable with the &lt;code&gt;ListSigningProfiles&lt;/code&gt; operation, but it cannot perform new signing jobs, and is deleted two years after cancelation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelSigningProfileTest() throws ApiException {
        String profileName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.cancelSigningProfile(profileName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns information about a specific code signing job. You specify the job by using the &lt;code&gt;jobId&lt;/code&gt; value that is returned by the &lt;a&gt;StartSigningJob&lt;/a&gt; operation. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeSigningJobTest() throws ApiException {
        String jobId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeSigningJobResponse response = api.describeSigningJob(jobId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the revocation status of one or more of the signing profile, signing job, and signing certificate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRevocationStatusTest() throws ApiException {
        OffsetDateTime signatureTimestamp = null;
        String platformId = null;
        String profileVersionArn = null;
        String jobArn = null;
        List<String> certificateHashes = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetRevocationStatusResponse response = api.getRevocationStatus(signatureTimestamp, platformId, profileVersionArn, jobArn, certificateHashes, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns information on a specific signing platform.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSigningPlatformTest() throws ApiException {
        String platformId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetSigningPlatformResponse response = api.getSigningPlatform(platformId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns information on a specific signing profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSigningProfileTest() throws ApiException {
        String profileName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String profileOwner = null;
        GetSigningProfileResponse response = api.getSigningProfile(profileName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, profileOwner);
        // TODO: test validations
    }

    /**
     * Lists the cross-account permissions associated with a signing profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listProfilePermissionsTest() throws ApiException {
        String profileName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        ListProfilePermissionsResponse response = api.listProfilePermissions(profileName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        // TODO: test validations
    }

    /**
     * Lists all your signing jobs. You can use the &lt;code&gt;maxResults&lt;/code&gt; parameter to limit the number of signing jobs that are returned in the response. If additional jobs remain to be listed, code signing returns a &lt;code&gt;nextToken&lt;/code&gt; value. Use this value in subsequent calls to &lt;code&gt;ListSigningJobs&lt;/code&gt; to fetch the remaining values. You can continue calling &lt;code&gt;ListSigningJobs&lt;/code&gt; with your &lt;code&gt;maxResults&lt;/code&gt; parameter and with new values that code signing returns in the &lt;code&gt;nextToken&lt;/code&gt; parameter until all of your signing jobs have been returned. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSigningJobsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String status = null;
        String platformId = null;
        String requestedBy = null;
        Integer maxResults = null;
        String nextToken = null;
        Boolean isRevoked = null;
        OffsetDateTime signatureExpiresBefore = null;
        OffsetDateTime signatureExpiresAfter = null;
        String jobInvoker = null;
        ListSigningJobsResponse response = api.listSigningJobs(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, status, platformId, requestedBy, maxResults, nextToken, isRevoked, signatureExpiresBefore, signatureExpiresAfter, jobInvoker);
        // TODO: test validations
    }

    /**
     * Lists all signing platforms available in code signing that match the request parameters. If additional jobs remain to be listed, code signing returns a &lt;code&gt;nextToken&lt;/code&gt; value. Use this value in subsequent calls to &lt;code&gt;ListSigningJobs&lt;/code&gt; to fetch the remaining values. You can continue calling &lt;code&gt;ListSigningJobs&lt;/code&gt; with your &lt;code&gt;maxResults&lt;/code&gt; parameter and with new values that code signing returns in the &lt;code&gt;nextToken&lt;/code&gt; parameter until all of your signing jobs have been returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSigningPlatformsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String category = null;
        String partner = null;
        String target = null;
        Integer maxResults = null;
        String nextToken = null;
        ListSigningPlatformsResponse response = api.listSigningPlatforms(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, category, partner, target, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists all available signing profiles in your AWS account. Returns only profiles with an &lt;code&gt;ACTIVE&lt;/code&gt; status unless the &lt;code&gt;includeCanceled&lt;/code&gt; request field is set to &lt;code&gt;true&lt;/code&gt;. If additional jobs remain to be listed, code signing returns a &lt;code&gt;nextToken&lt;/code&gt; value. Use this value in subsequent calls to &lt;code&gt;ListSigningJobs&lt;/code&gt; to fetch the remaining values. You can continue calling &lt;code&gt;ListSigningJobs&lt;/code&gt; with your &lt;code&gt;maxResults&lt;/code&gt; parameter and with new values that code signing returns in the &lt;code&gt;nextToken&lt;/code&gt; parameter until all of your signing jobs have been returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSigningProfilesTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Boolean includeCanceled = null;
        Integer maxResults = null;
        String nextToken = null;
        String platformId = null;
        List<SigningProfileStatus> statuses = null;
        ListSigningProfilesResponse response = api.listSigningProfiles(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, includeCanceled, maxResults, nextToken, platformId, statuses);
        // TODO: test validations
    }

    /**
     * Returns a list of the tags associated with a signing profile resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String resourceArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceResponse response = api.listTagsForResource(resourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a signing profile. A signing profile is a code signing template that can be used to carry out a pre-defined signing job. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putSigningProfileTest() throws ApiException {
        String profileName = null;
        PutSigningProfileRequest putSigningProfileRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PutSigningProfileResponse response = api.putSigningProfile(profileName, putSigningProfileRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes cross-account permissions from a signing profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeProfilePermissionTest() throws ApiException {
        String profileName = null;
        String revisionId = null;
        String statementId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RemoveProfilePermissionResponse response = api.removeProfilePermission(profileName, revisionId, statementId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Changes the state of a signing job to REVOKED. This indicates that the signature is no longer valid.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void revokeSignatureTest() throws ApiException {
        String jobId = null;
        RevokeSignatureRequest revokeSignatureRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.revokeSignature(jobId, revokeSignatureRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Changes the state of a signing profile to REVOKED. This indicates that signatures generated using the signing profile after an effective start date are no longer valid.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void revokeSigningProfileTest() throws ApiException {
        String profileName = null;
        RevokeSigningProfileRequest revokeSigningProfileRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.revokeSigningProfile(profileName, revokeSigningProfileRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Signs a binary payload and returns a signature envelope.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void signPayloadTest() throws ApiException {
        SignPayloadRequest signPayloadRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        SignPayloadResponse response = api.signPayload(signPayloadRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Initiates a signing job to be performed on the code provided. Signing jobs are viewable by the &lt;code&gt;ListSigningJobs&lt;/code&gt; operation for two years after they are performed. Note the following requirements: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; You must create an Amazon S3 source bucket. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonS3/latest/gsg/CreatingABucket.html\&quot;&gt;Creating a Bucket&lt;/a&gt; in the &lt;i&gt;Amazon S3 Getting Started Guide&lt;/i&gt;. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Your S3 source bucket must be version enabled.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You must create an S3 destination bucket. Code signing uses your S3 destination bucket to write your signed code.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You specify the name of the source and destination buckets when calling the &lt;code&gt;StartSigningJob&lt;/code&gt; operation.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You must also specify a request token that identifies your request to code signing.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You can call the &lt;a&gt;DescribeSigningJob&lt;/a&gt; and the &lt;a&gt;ListSigningJobs&lt;/a&gt; actions after you call &lt;code&gt;StartSigningJob&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For a Java example that shows how to use this action, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/signer/latest/developerguide/api-startsigningjob.html\&quot;&gt;StartSigningJob&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startSigningJobTest() throws ApiException {
        StartSigningJobRequest startSigningJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartSigningJobResponse response = api.startSigningJob(startSigningJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Adds one or more tags to a signing profile. Tags are labels that you can use to identify and organize your AWS resources. Each tag consists of a key and an optional value. To specify the signing profile, use its Amazon Resource Name (ARN). To specify the tag, use a key-value pair.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String resourceArn = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.tagResource(resourceArn, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes one or more tags from a signing profile. To remove the tags, specify a list of tag keys.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String resourceArn = null;
        List<String> tagKeys = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.untagResource(resourceArn, tagKeys, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
