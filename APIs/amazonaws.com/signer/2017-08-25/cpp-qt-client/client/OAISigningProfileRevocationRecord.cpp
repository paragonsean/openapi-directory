/**
 * AWS Signer
 * <p>AWS Signer is a fully managed code signing service to help you ensure the trust and integrity of your code. </p> <p>AWS Signer supports the following applications:</p> <p>With code signing for AWS Lambda, you can sign <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/\">AWS Lambda</a> deployment packages. Integrated support is provided for <a href=\"http://docs.aws.amazon.com/AmazonS3/latest/gsg/\">Amazon S3</a>, <a href=\"http://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/\">Amazon CloudWatch</a>, and <a href=\"http://docs.aws.amazon.com/awscloudtrail/latest/userguide/\">AWS CloudTrail</a>. In order to sign code, you create a signing profile and then use Signer to sign Lambda zip files in S3. </p> <p>With code signing for IoT, you can sign code for any IoT device that is supported by AWS. IoT code signing is available for <a href=\"http://docs.aws.amazon.com/freertos/latest/userguide/\">Amazon FreeRTOS</a> and <a href=\"http://docs.aws.amazon.com/iot/latest/developerguide/\">AWS IoT Device Management</a>, and is integrated with <a href=\"http://docs.aws.amazon.com/acm/latest/userguide/\">AWS Certificate Manager (ACM)</a>. In order to sign code, you import a third-party code signing certificate using ACM, and use that to sign updates in Amazon FreeRTOS and AWS IoT Device Management. </p> <p>With code signing for containers â€¦(TBD)</p> <p>For more information about AWS Signer, see the <a href=\"https://docs.aws.amazon.com/signer/latest/developerguide/Welcome.html\">AWS Signer Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISigningProfileRevocationRecord.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISigningProfileRevocationRecord::OAISigningProfileRevocationRecord(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISigningProfileRevocationRecord::OAISigningProfileRevocationRecord() {
    this->initializeModel();
}

OAISigningProfileRevocationRecord::~OAISigningProfileRevocationRecord() {}

void OAISigningProfileRevocationRecord::initializeModel() {

    m_revocation_effective_from_isSet = false;
    m_revocation_effective_from_isValid = false;

    m_revoked_at_isSet = false;
    m_revoked_at_isValid = false;

    m_revoked_by_isSet = false;
    m_revoked_by_isValid = false;
}

void OAISigningProfileRevocationRecord::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISigningProfileRevocationRecord::fromJsonObject(QJsonObject json) {

    m_revocation_effective_from_isValid = ::OpenAPI::fromJsonValue(m_revocation_effective_from, json[QString("revocationEffectiveFrom")]);
    m_revocation_effective_from_isSet = !json[QString("revocationEffectiveFrom")].isNull() && m_revocation_effective_from_isValid;

    m_revoked_at_isValid = ::OpenAPI::fromJsonValue(m_revoked_at, json[QString("revokedAt")]);
    m_revoked_at_isSet = !json[QString("revokedAt")].isNull() && m_revoked_at_isValid;

    m_revoked_by_isValid = ::OpenAPI::fromJsonValue(m_revoked_by, json[QString("revokedBy")]);
    m_revoked_by_isSet = !json[QString("revokedBy")].isNull() && m_revoked_by_isValid;
}

QString OAISigningProfileRevocationRecord::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISigningProfileRevocationRecord::asJsonObject() const {
    QJsonObject obj;
    if (m_revocation_effective_from_isSet) {
        obj.insert(QString("revocationEffectiveFrom"), ::OpenAPI::toJsonValue(m_revocation_effective_from));
    }
    if (m_revoked_at_isSet) {
        obj.insert(QString("revokedAt"), ::OpenAPI::toJsonValue(m_revoked_at));
    }
    if (m_revoked_by_isSet) {
        obj.insert(QString("revokedBy"), ::OpenAPI::toJsonValue(m_revoked_by));
    }
    return obj;
}

QDateTime OAISigningProfileRevocationRecord::getRevocationEffectiveFrom() const {
    return m_revocation_effective_from;
}
void OAISigningProfileRevocationRecord::setRevocationEffectiveFrom(const QDateTime &revocation_effective_from) {
    m_revocation_effective_from = revocation_effective_from;
    m_revocation_effective_from_isSet = true;
}

bool OAISigningProfileRevocationRecord::is_revocation_effective_from_Set() const{
    return m_revocation_effective_from_isSet;
}

bool OAISigningProfileRevocationRecord::is_revocation_effective_from_Valid() const{
    return m_revocation_effective_from_isValid;
}

QDateTime OAISigningProfileRevocationRecord::getRevokedAt() const {
    return m_revoked_at;
}
void OAISigningProfileRevocationRecord::setRevokedAt(const QDateTime &revoked_at) {
    m_revoked_at = revoked_at;
    m_revoked_at_isSet = true;
}

bool OAISigningProfileRevocationRecord::is_revoked_at_Set() const{
    return m_revoked_at_isSet;
}

bool OAISigningProfileRevocationRecord::is_revoked_at_Valid() const{
    return m_revoked_at_isValid;
}

QString OAISigningProfileRevocationRecord::getRevokedBy() const {
    return m_revoked_by;
}
void OAISigningProfileRevocationRecord::setRevokedBy(const QString &revoked_by) {
    m_revoked_by = revoked_by;
    m_revoked_by_isSet = true;
}

bool OAISigningProfileRevocationRecord::is_revoked_by_Set() const{
    return m_revoked_by_isSet;
}

bool OAISigningProfileRevocationRecord::is_revoked_by_Valid() const{
    return m_revoked_by_isValid;
}

bool OAISigningProfileRevocationRecord::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_revocation_effective_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revoked_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revoked_by_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISigningProfileRevocationRecord::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
