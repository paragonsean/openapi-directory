/**
 * AWS Signer
 * <p>AWS Signer is a fully managed code signing service to help you ensure the trust and integrity of your code. </p> <p>AWS Signer supports the following applications:</p> <p>With code signing for AWS Lambda, you can sign <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/\">AWS Lambda</a> deployment packages. Integrated support is provided for <a href=\"http://docs.aws.amazon.com/AmazonS3/latest/gsg/\">Amazon S3</a>, <a href=\"http://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/\">Amazon CloudWatch</a>, and <a href=\"http://docs.aws.amazon.com/awscloudtrail/latest/userguide/\">AWS CloudTrail</a>. In order to sign code, you create a signing profile and then use Signer to sign Lambda zip files in S3. </p> <p>With code signing for IoT, you can sign code for any IoT device that is supported by AWS. IoT code signing is available for <a href=\"http://docs.aws.amazon.com/freertos/latest/userguide/\">Amazon FreeRTOS</a> and <a href=\"http://docs.aws.amazon.com/iot/latest/developerguide/\">AWS IoT Device Management</a>, and is integrated with <a href=\"http://docs.aws.amazon.com/acm/latest/userguide/\">AWS Certificate Manager (ACM)</a>. In order to sign code, you import a third-party code signing certificate using ACM, and use that to sign updates in Amazon FreeRTOS and AWS IoT Device Management. </p> <p>With code signing for containers â€¦(TBD)</p> <p>For more information about AWS Signer, see the <a href=\"https://docs.aws.amazon.com/signer/latest/developerguide/Welcome.html\">AWS Signer Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetSigningProfileResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetSigningProfileResponse::OAIGetSigningProfileResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetSigningProfileResponse::OAIGetSigningProfileResponse() {
    this->initializeModel();
}

OAIGetSigningProfileResponse::~OAIGetSigningProfileResponse() {}

void OAIGetSigningProfileResponse::initializeModel() {

    m_profile_name_isSet = false;
    m_profile_name_isValid = false;

    m_profile_version_isSet = false;
    m_profile_version_isValid = false;

    m_profile_version_arn_isSet = false;
    m_profile_version_arn_isValid = false;

    m_revocation_record_isSet = false;
    m_revocation_record_isValid = false;

    m_signing_material_isSet = false;
    m_signing_material_isValid = false;

    m_platform_id_isSet = false;
    m_platform_id_isValid = false;

    m_platform_display_name_isSet = false;
    m_platform_display_name_isValid = false;

    m_signature_validity_period_isSet = false;
    m_signature_validity_period_isValid = false;

    m_overrides_isSet = false;
    m_overrides_isValid = false;

    m_signing_parameters_isSet = false;
    m_signing_parameters_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_reason_isSet = false;
    m_status_reason_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIGetSigningProfileResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetSigningProfileResponse::fromJsonObject(QJsonObject json) {

    m_profile_name_isValid = ::OpenAPI::fromJsonValue(m_profile_name, json[QString("profileName")]);
    m_profile_name_isSet = !json[QString("profileName")].isNull() && m_profile_name_isValid;

    m_profile_version_isValid = ::OpenAPI::fromJsonValue(m_profile_version, json[QString("profileVersion")]);
    m_profile_version_isSet = !json[QString("profileVersion")].isNull() && m_profile_version_isValid;

    m_profile_version_arn_isValid = ::OpenAPI::fromJsonValue(m_profile_version_arn, json[QString("profileVersionArn")]);
    m_profile_version_arn_isSet = !json[QString("profileVersionArn")].isNull() && m_profile_version_arn_isValid;

    m_revocation_record_isValid = ::OpenAPI::fromJsonValue(m_revocation_record, json[QString("revocationRecord")]);
    m_revocation_record_isSet = !json[QString("revocationRecord")].isNull() && m_revocation_record_isValid;

    m_signing_material_isValid = ::OpenAPI::fromJsonValue(m_signing_material, json[QString("signingMaterial")]);
    m_signing_material_isSet = !json[QString("signingMaterial")].isNull() && m_signing_material_isValid;

    m_platform_id_isValid = ::OpenAPI::fromJsonValue(m_platform_id, json[QString("platformId")]);
    m_platform_id_isSet = !json[QString("platformId")].isNull() && m_platform_id_isValid;

    m_platform_display_name_isValid = ::OpenAPI::fromJsonValue(m_platform_display_name, json[QString("platformDisplayName")]);
    m_platform_display_name_isSet = !json[QString("platformDisplayName")].isNull() && m_platform_display_name_isValid;

    m_signature_validity_period_isValid = ::OpenAPI::fromJsonValue(m_signature_validity_period, json[QString("signatureValidityPeriod")]);
    m_signature_validity_period_isSet = !json[QString("signatureValidityPeriod")].isNull() && m_signature_validity_period_isValid;

    m_overrides_isValid = ::OpenAPI::fromJsonValue(m_overrides, json[QString("overrides")]);
    m_overrides_isSet = !json[QString("overrides")].isNull() && m_overrides_isValid;

    m_signing_parameters_isValid = ::OpenAPI::fromJsonValue(m_signing_parameters, json[QString("signingParameters")]);
    m_signing_parameters_isSet = !json[QString("signingParameters")].isNull() && m_signing_parameters_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_reason_isValid = ::OpenAPI::fromJsonValue(m_status_reason, json[QString("statusReason")]);
    m_status_reason_isSet = !json[QString("statusReason")].isNull() && m_status_reason_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIGetSigningProfileResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetSigningProfileResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_profile_name_isSet) {
        obj.insert(QString("profileName"), ::OpenAPI::toJsonValue(m_profile_name));
    }
    if (m_profile_version_isSet) {
        obj.insert(QString("profileVersion"), ::OpenAPI::toJsonValue(m_profile_version));
    }
    if (m_profile_version_arn_isSet) {
        obj.insert(QString("profileVersionArn"), ::OpenAPI::toJsonValue(m_profile_version_arn));
    }
    if (m_revocation_record.isSet()) {
        obj.insert(QString("revocationRecord"), ::OpenAPI::toJsonValue(m_revocation_record));
    }
    if (m_signing_material.isSet()) {
        obj.insert(QString("signingMaterial"), ::OpenAPI::toJsonValue(m_signing_material));
    }
    if (m_platform_id_isSet) {
        obj.insert(QString("platformId"), ::OpenAPI::toJsonValue(m_platform_id));
    }
    if (m_platform_display_name_isSet) {
        obj.insert(QString("platformDisplayName"), ::OpenAPI::toJsonValue(m_platform_display_name));
    }
    if (m_signature_validity_period.isSet()) {
        obj.insert(QString("signatureValidityPeriod"), ::OpenAPI::toJsonValue(m_signature_validity_period));
    }
    if (m_overrides.isSet()) {
        obj.insert(QString("overrides"), ::OpenAPI::toJsonValue(m_overrides));
    }
    if (m_signing_parameters.isSet()) {
        obj.insert(QString("signingParameters"), ::OpenAPI::toJsonValue(m_signing_parameters));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_reason_isSet) {
        obj.insert(QString("statusReason"), ::OpenAPI::toJsonValue(m_status_reason));
    }
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIGetSigningProfileResponse::getProfileName() const {
    return m_profile_name;
}
void OAIGetSigningProfileResponse::setProfileName(const QString &profile_name) {
    m_profile_name = profile_name;
    m_profile_name_isSet = true;
}

bool OAIGetSigningProfileResponse::is_profile_name_Set() const{
    return m_profile_name_isSet;
}

bool OAIGetSigningProfileResponse::is_profile_name_Valid() const{
    return m_profile_name_isValid;
}

QString OAIGetSigningProfileResponse::getProfileVersion() const {
    return m_profile_version;
}
void OAIGetSigningProfileResponse::setProfileVersion(const QString &profile_version) {
    m_profile_version = profile_version;
    m_profile_version_isSet = true;
}

bool OAIGetSigningProfileResponse::is_profile_version_Set() const{
    return m_profile_version_isSet;
}

bool OAIGetSigningProfileResponse::is_profile_version_Valid() const{
    return m_profile_version_isValid;
}

QString OAIGetSigningProfileResponse::getProfileVersionArn() const {
    return m_profile_version_arn;
}
void OAIGetSigningProfileResponse::setProfileVersionArn(const QString &profile_version_arn) {
    m_profile_version_arn = profile_version_arn;
    m_profile_version_arn_isSet = true;
}

bool OAIGetSigningProfileResponse::is_profile_version_arn_Set() const{
    return m_profile_version_arn_isSet;
}

bool OAIGetSigningProfileResponse::is_profile_version_arn_Valid() const{
    return m_profile_version_arn_isValid;
}

OAISigningProfileRevocationRecord OAIGetSigningProfileResponse::getRevocationRecord() const {
    return m_revocation_record;
}
void OAIGetSigningProfileResponse::setRevocationRecord(const OAISigningProfileRevocationRecord &revocation_record) {
    m_revocation_record = revocation_record;
    m_revocation_record_isSet = true;
}

bool OAIGetSigningProfileResponse::is_revocation_record_Set() const{
    return m_revocation_record_isSet;
}

bool OAIGetSigningProfileResponse::is_revocation_record_Valid() const{
    return m_revocation_record_isValid;
}

OAIGetSigningProfileResponse_signingMaterial OAIGetSigningProfileResponse::getSigningMaterial() const {
    return m_signing_material;
}
void OAIGetSigningProfileResponse::setSigningMaterial(const OAIGetSigningProfileResponse_signingMaterial &signing_material) {
    m_signing_material = signing_material;
    m_signing_material_isSet = true;
}

bool OAIGetSigningProfileResponse::is_signing_material_Set() const{
    return m_signing_material_isSet;
}

bool OAIGetSigningProfileResponse::is_signing_material_Valid() const{
    return m_signing_material_isValid;
}

QString OAIGetSigningProfileResponse::getPlatformId() const {
    return m_platform_id;
}
void OAIGetSigningProfileResponse::setPlatformId(const QString &platform_id) {
    m_platform_id = platform_id;
    m_platform_id_isSet = true;
}

bool OAIGetSigningProfileResponse::is_platform_id_Set() const{
    return m_platform_id_isSet;
}

bool OAIGetSigningProfileResponse::is_platform_id_Valid() const{
    return m_platform_id_isValid;
}

QString OAIGetSigningProfileResponse::getPlatformDisplayName() const {
    return m_platform_display_name;
}
void OAIGetSigningProfileResponse::setPlatformDisplayName(const QString &platform_display_name) {
    m_platform_display_name = platform_display_name;
    m_platform_display_name_isSet = true;
}

bool OAIGetSigningProfileResponse::is_platform_display_name_Set() const{
    return m_platform_display_name_isSet;
}

bool OAIGetSigningProfileResponse::is_platform_display_name_Valid() const{
    return m_platform_display_name_isValid;
}

OAISignatureValidityPeriod OAIGetSigningProfileResponse::getSignatureValidityPeriod() const {
    return m_signature_validity_period;
}
void OAIGetSigningProfileResponse::setSignatureValidityPeriod(const OAISignatureValidityPeriod &signature_validity_period) {
    m_signature_validity_period = signature_validity_period;
    m_signature_validity_period_isSet = true;
}

bool OAIGetSigningProfileResponse::is_signature_validity_period_Set() const{
    return m_signature_validity_period_isSet;
}

bool OAIGetSigningProfileResponse::is_signature_validity_period_Valid() const{
    return m_signature_validity_period_isValid;
}

OAIGetSigningProfileResponse_overrides OAIGetSigningProfileResponse::getOverrides() const {
    return m_overrides;
}
void OAIGetSigningProfileResponse::setOverrides(const OAIGetSigningProfileResponse_overrides &overrides) {
    m_overrides = overrides;
    m_overrides_isSet = true;
}

bool OAIGetSigningProfileResponse::is_overrides_Set() const{
    return m_overrides_isSet;
}

bool OAIGetSigningProfileResponse::is_overrides_Valid() const{
    return m_overrides_isValid;
}

QMap OAIGetSigningProfileResponse::getSigningParameters() const {
    return m_signing_parameters;
}
void OAIGetSigningProfileResponse::setSigningParameters(const QMap &signing_parameters) {
    m_signing_parameters = signing_parameters;
    m_signing_parameters_isSet = true;
}

bool OAIGetSigningProfileResponse::is_signing_parameters_Set() const{
    return m_signing_parameters_isSet;
}

bool OAIGetSigningProfileResponse::is_signing_parameters_Valid() const{
    return m_signing_parameters_isValid;
}

OAISigningProfileStatus OAIGetSigningProfileResponse::getStatus() const {
    return m_status;
}
void OAIGetSigningProfileResponse::setStatus(const OAISigningProfileStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGetSigningProfileResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetSigningProfileResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIGetSigningProfileResponse::getStatusReason() const {
    return m_status_reason;
}
void OAIGetSigningProfileResponse::setStatusReason(const QString &status_reason) {
    m_status_reason = status_reason;
    m_status_reason_isSet = true;
}

bool OAIGetSigningProfileResponse::is_status_reason_Set() const{
    return m_status_reason_isSet;
}

bool OAIGetSigningProfileResponse::is_status_reason_Valid() const{
    return m_status_reason_isValid;
}

QString OAIGetSigningProfileResponse::getArn() const {
    return m_arn;
}
void OAIGetSigningProfileResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIGetSigningProfileResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIGetSigningProfileResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

QMap OAIGetSigningProfileResponse::getTags() const {
    return m_tags;
}
void OAIGetSigningProfileResponse::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIGetSigningProfileResponse::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIGetSigningProfileResponse::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIGetSigningProfileResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_profile_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_version_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revocation_record.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_signing_material.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signature_validity_period.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_overrides.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_signing_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetSigningProfileResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
