/**
 * AWS Signer
 * <p>AWS Signer is a fully managed code signing service to help you ensure the trust and integrity of your code. </p> <p>AWS Signer supports the following applications:</p> <p>With code signing for AWS Lambda, you can sign <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/\">AWS Lambda</a> deployment packages. Integrated support is provided for <a href=\"http://docs.aws.amazon.com/AmazonS3/latest/gsg/\">Amazon S3</a>, <a href=\"http://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/\">Amazon CloudWatch</a>, and <a href=\"http://docs.aws.amazon.com/awscloudtrail/latest/userguide/\">AWS CloudTrail</a>. In order to sign code, you create a signing profile and then use Signer to sign Lambda zip files in S3. </p> <p>With code signing for IoT, you can sign code for any IoT device that is supported by AWS. IoT code signing is available for <a href=\"http://docs.aws.amazon.com/freertos/latest/userguide/\">Amazon FreeRTOS</a> and <a href=\"http://docs.aws.amazon.com/iot/latest/developerguide/\">AWS IoT Device Management</a>, and is integrated with <a href=\"http://docs.aws.amazon.com/acm/latest/userguide/\">AWS Certificate Manager (ACM)</a>. In order to sign code, you import a third-party code signing certificate using ACM, and use that to sign updates in Amazon FreeRTOS and AWS IoT Device Management. </p> <p>With code signing for containers â€¦(TBD)</p> <p>For more information about AWS Signer, see the <a href=\"https://docs.aws.amazon.com/signer/latest/developerguide/Welcome.html\">AWS Signer Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartSigningJob_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartSigningJob_request::OAIStartSigningJob_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartSigningJob_request::OAIStartSigningJob_request() {
    this->initializeModel();
}

OAIStartSigningJob_request::~OAIStartSigningJob_request() {}

void OAIStartSigningJob_request::initializeModel() {

    m_source_isSet = false;
    m_source_isValid = false;

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_profile_name_isSet = false;
    m_profile_name_isValid = false;

    m_client_request_token_isSet = false;
    m_client_request_token_isValid = false;

    m_profile_owner_isSet = false;
    m_profile_owner_isValid = false;
}

void OAIStartSigningJob_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartSigningJob_request::fromJsonObject(QJsonObject json) {

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("destination")]);
    m_destination_isSet = !json[QString("destination")].isNull() && m_destination_isValid;

    m_profile_name_isValid = ::OpenAPI::fromJsonValue(m_profile_name, json[QString("profileName")]);
    m_profile_name_isSet = !json[QString("profileName")].isNull() && m_profile_name_isValid;

    m_client_request_token_isValid = ::OpenAPI::fromJsonValue(m_client_request_token, json[QString("clientRequestToken")]);
    m_client_request_token_isSet = !json[QString("clientRequestToken")].isNull() && m_client_request_token_isValid;

    m_profile_owner_isValid = ::OpenAPI::fromJsonValue(m_profile_owner, json[QString("profileOwner")]);
    m_profile_owner_isSet = !json[QString("profileOwner")].isNull() && m_profile_owner_isValid;
}

QString OAIStartSigningJob_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartSigningJob_request::asJsonObject() const {
    QJsonObject obj;
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_destination.isSet()) {
        obj.insert(QString("destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_profile_name_isSet) {
        obj.insert(QString("profileName"), ::OpenAPI::toJsonValue(m_profile_name));
    }
    if (m_client_request_token_isSet) {
        obj.insert(QString("clientRequestToken"), ::OpenAPI::toJsonValue(m_client_request_token));
    }
    if (m_profile_owner_isSet) {
        obj.insert(QString("profileOwner"), ::OpenAPI::toJsonValue(m_profile_owner));
    }
    return obj;
}

OAIStartSigningJob_request_source OAIStartSigningJob_request::getSource() const {
    return m_source;
}
void OAIStartSigningJob_request::setSource(const OAIStartSigningJob_request_source &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIStartSigningJob_request::is_source_Set() const{
    return m_source_isSet;
}

bool OAIStartSigningJob_request::is_source_Valid() const{
    return m_source_isValid;
}

OAIStartSigningJob_request_destination OAIStartSigningJob_request::getDestination() const {
    return m_destination;
}
void OAIStartSigningJob_request::setDestination(const OAIStartSigningJob_request_destination &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAIStartSigningJob_request::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAIStartSigningJob_request::is_destination_Valid() const{
    return m_destination_isValid;
}

QString OAIStartSigningJob_request::getProfileName() const {
    return m_profile_name;
}
void OAIStartSigningJob_request::setProfileName(const QString &profile_name) {
    m_profile_name = profile_name;
    m_profile_name_isSet = true;
}

bool OAIStartSigningJob_request::is_profile_name_Set() const{
    return m_profile_name_isSet;
}

bool OAIStartSigningJob_request::is_profile_name_Valid() const{
    return m_profile_name_isValid;
}

QString OAIStartSigningJob_request::getClientRequestToken() const {
    return m_client_request_token;
}
void OAIStartSigningJob_request::setClientRequestToken(const QString &client_request_token) {
    m_client_request_token = client_request_token;
    m_client_request_token_isSet = true;
}

bool OAIStartSigningJob_request::is_client_request_token_Set() const{
    return m_client_request_token_isSet;
}

bool OAIStartSigningJob_request::is_client_request_token_Valid() const{
    return m_client_request_token_isValid;
}

QString OAIStartSigningJob_request::getProfileOwner() const {
    return m_profile_owner;
}
void OAIStartSigningJob_request::setProfileOwner(const QString &profile_owner) {
    m_profile_owner = profile_owner;
    m_profile_owner_isSet = true;
}

bool OAIStartSigningJob_request::is_profile_owner_Set() const{
    return m_profile_owner_isSet;
}

bool OAIStartSigningJob_request::is_profile_owner_Valid() const{
    return m_profile_owner_isValid;
}

bool OAIStartSigningJob_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_owner_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartSigningJob_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_source_isValid && m_destination_isValid && m_profile_name_isValid && m_client_request_token_isValid && true;
}

} // namespace OpenAPI
