/**
 * AWS Signer
 * <p>AWS Signer is a fully managed code signing service to help you ensure the trust and integrity of your code. </p> <p>AWS Signer supports the following applications:</p> <p>With code signing for AWS Lambda, you can sign <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/\">AWS Lambda</a> deployment packages. Integrated support is provided for <a href=\"http://docs.aws.amazon.com/AmazonS3/latest/gsg/\">Amazon S3</a>, <a href=\"http://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/\">Amazon CloudWatch</a>, and <a href=\"http://docs.aws.amazon.com/awscloudtrail/latest/userguide/\">AWS CloudTrail</a>. In order to sign code, you create a signing profile and then use Signer to sign Lambda zip files in S3. </p> <p>With code signing for IoT, you can sign code for any IoT device that is supported by AWS. IoT code signing is available for <a href=\"http://docs.aws.amazon.com/freertos/latest/userguide/\">Amazon FreeRTOS</a> and <a href=\"http://docs.aws.amazon.com/iot/latest/developerguide/\">AWS IoT Device Management</a>, and is integrated with <a href=\"http://docs.aws.amazon.com/acm/latest/userguide/\">AWS Certificate Manager (ACM)</a>. In order to sign code, you import a third-party code signing certificate using ACM, and use that to sign updates in Amazon FreeRTOS and AWS IoT Device Management. </p> <p>With code signing for containers â€¦(TBD)</p> <p>For more information about AWS Signer, see the <a href=\"https://docs.aws.amazon.com/signer/latest/developerguide/Welcome.html\">AWS Signer Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRevokeSigningProfile_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRevokeSigningProfile_request::OAIRevokeSigningProfile_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRevokeSigningProfile_request::OAIRevokeSigningProfile_request() {
    this->initializeModel();
}

OAIRevokeSigningProfile_request::~OAIRevokeSigningProfile_request() {}

void OAIRevokeSigningProfile_request::initializeModel() {

    m_profile_version_isSet = false;
    m_profile_version_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_effective_time_isSet = false;
    m_effective_time_isValid = false;
}

void OAIRevokeSigningProfile_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRevokeSigningProfile_request::fromJsonObject(QJsonObject json) {

    m_profile_version_isValid = ::OpenAPI::fromJsonValue(m_profile_version, json[QString("profileVersion")]);
    m_profile_version_isSet = !json[QString("profileVersion")].isNull() && m_profile_version_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_effective_time_isValid = ::OpenAPI::fromJsonValue(m_effective_time, json[QString("effectiveTime")]);
    m_effective_time_isSet = !json[QString("effectiveTime")].isNull() && m_effective_time_isValid;
}

QString OAIRevokeSigningProfile_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRevokeSigningProfile_request::asJsonObject() const {
    QJsonObject obj;
    if (m_profile_version_isSet) {
        obj.insert(QString("profileVersion"), ::OpenAPI::toJsonValue(m_profile_version));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_effective_time_isSet) {
        obj.insert(QString("effectiveTime"), ::OpenAPI::toJsonValue(m_effective_time));
    }
    return obj;
}

QString OAIRevokeSigningProfile_request::getProfileVersion() const {
    return m_profile_version;
}
void OAIRevokeSigningProfile_request::setProfileVersion(const QString &profile_version) {
    m_profile_version = profile_version;
    m_profile_version_isSet = true;
}

bool OAIRevokeSigningProfile_request::is_profile_version_Set() const{
    return m_profile_version_isSet;
}

bool OAIRevokeSigningProfile_request::is_profile_version_Valid() const{
    return m_profile_version_isValid;
}

QString OAIRevokeSigningProfile_request::getReason() const {
    return m_reason;
}
void OAIRevokeSigningProfile_request::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIRevokeSigningProfile_request::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIRevokeSigningProfile_request::is_reason_Valid() const{
    return m_reason_isValid;
}

QDateTime OAIRevokeSigningProfile_request::getEffectiveTime() const {
    return m_effective_time;
}
void OAIRevokeSigningProfile_request::setEffectiveTime(const QDateTime &effective_time) {
    m_effective_time = effective_time;
    m_effective_time_isSet = true;
}

bool OAIRevokeSigningProfile_request::is_effective_time_Set() const{
    return m_effective_time_isSet;
}

bool OAIRevokeSigningProfile_request::is_effective_time_Valid() const{
    return m_effective_time_isValid;
}

bool OAIRevokeSigningProfile_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_profile_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_effective_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRevokeSigningProfile_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_profile_version_isValid && m_reason_isValid && m_effective_time_isValid && true;
}

} // namespace OpenAPI
