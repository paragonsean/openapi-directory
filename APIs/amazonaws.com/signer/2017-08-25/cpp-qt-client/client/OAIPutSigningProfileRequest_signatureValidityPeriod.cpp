/**
 * AWS Signer
 * <p>AWS Signer is a fully managed code signing service to help you ensure the trust and integrity of your code. </p> <p>AWS Signer supports the following applications:</p> <p>With code signing for AWS Lambda, you can sign <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/\">AWS Lambda</a> deployment packages. Integrated support is provided for <a href=\"http://docs.aws.amazon.com/AmazonS3/latest/gsg/\">Amazon S3</a>, <a href=\"http://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/\">Amazon CloudWatch</a>, and <a href=\"http://docs.aws.amazon.com/awscloudtrail/latest/userguide/\">AWS CloudTrail</a>. In order to sign code, you create a signing profile and then use Signer to sign Lambda zip files in S3. </p> <p>With code signing for IoT, you can sign code for any IoT device that is supported by AWS. IoT code signing is available for <a href=\"http://docs.aws.amazon.com/freertos/latest/userguide/\">Amazon FreeRTOS</a> and <a href=\"http://docs.aws.amazon.com/iot/latest/developerguide/\">AWS IoT Device Management</a>, and is integrated with <a href=\"http://docs.aws.amazon.com/acm/latest/userguide/\">AWS Certificate Manager (ACM)</a>. In order to sign code, you import a third-party code signing certificate using ACM, and use that to sign updates in Amazon FreeRTOS and AWS IoT Device Management. </p> <p>With code signing for containers â€¦(TBD)</p> <p>For more information about AWS Signer, see the <a href=\"https://docs.aws.amazon.com/signer/latest/developerguide/Welcome.html\">AWS Signer Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutSigningProfileRequest_signatureValidityPeriod.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutSigningProfileRequest_signatureValidityPeriod::OAIPutSigningProfileRequest_signatureValidityPeriod(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutSigningProfileRequest_signatureValidityPeriod::OAIPutSigningProfileRequest_signatureValidityPeriod() {
    this->initializeModel();
}

OAIPutSigningProfileRequest_signatureValidityPeriod::~OAIPutSigningProfileRequest_signatureValidityPeriod() {}

void OAIPutSigningProfileRequest_signatureValidityPeriod::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIPutSigningProfileRequest_signatureValidityPeriod::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutSigningProfileRequest_signatureValidityPeriod::fromJsonObject(QJsonObject json) {

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIPutSigningProfileRequest_signatureValidityPeriod::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutSigningProfileRequest_signatureValidityPeriod::asJsonObject() const {
    QJsonObject obj;
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

qint32 OAIPutSigningProfileRequest_signatureValidityPeriod::getValue() const {
    return m_value;
}
void OAIPutSigningProfileRequest_signatureValidityPeriod::setValue(const qint32 &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIPutSigningProfileRequest_signatureValidityPeriod::is_value_Set() const{
    return m_value_isSet;
}

bool OAIPutSigningProfileRequest_signatureValidityPeriod::is_value_Valid() const{
    return m_value_isValid;
}

OAIValidityType OAIPutSigningProfileRequest_signatureValidityPeriod::getType() const {
    return m_type;
}
void OAIPutSigningProfileRequest_signatureValidityPeriod::setType(const OAIValidityType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPutSigningProfileRequest_signatureValidityPeriod::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPutSigningProfileRequest_signatureValidityPeriod::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIPutSigningProfileRequest_signatureValidityPeriod::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutSigningProfileRequest_signatureValidityPeriod::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
