/**
 * AWS Signer
 * <p>AWS Signer is a fully managed code signing service to help you ensure the trust and integrity of your code. </p> <p>AWS Signer supports the following applications:</p> <p>With code signing for AWS Lambda, you can sign <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/\">AWS Lambda</a> deployment packages. Integrated support is provided for <a href=\"http://docs.aws.amazon.com/AmazonS3/latest/gsg/\">Amazon S3</a>, <a href=\"http://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/\">Amazon CloudWatch</a>, and <a href=\"http://docs.aws.amazon.com/awscloudtrail/latest/userguide/\">AWS CloudTrail</a>. In order to sign code, you create a signing profile and then use Signer to sign Lambda zip files in S3. </p> <p>With code signing for IoT, you can sign code for any IoT device that is supported by AWS. IoT code signing is available for <a href=\"http://docs.aws.amazon.com/freertos/latest/userguide/\">Amazon FreeRTOS</a> and <a href=\"http://docs.aws.amazon.com/iot/latest/developerguide/\">AWS IoT Device Management</a>, and is integrated with <a href=\"http://docs.aws.amazon.com/acm/latest/userguide/\">AWS Certificate Manager (ACM)</a>. In order to sign code, you import a third-party code signing certificate using ACM, and use that to sign updates in Amazon FreeRTOS and AWS IoT Device Management. </p> <p>With code signing for containers â€¦(TBD)</p> <p>For more information about AWS Signer, see the <a href=\"https://docs.aws.amazon.com/signer/latest/developerguide/Welcome.html\">AWS Signer Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISigningPlatform.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISigningPlatform::OAISigningPlatform(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISigningPlatform::OAISigningPlatform() {
    this->initializeModel();
}

OAISigningPlatform::~OAISigningPlatform() {}

void OAISigningPlatform::initializeModel() {

    m_platform_id_isSet = false;
    m_platform_id_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_partner_isSet = false;
    m_partner_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_signing_configuration_isSet = false;
    m_signing_configuration_isValid = false;

    m_signing_image_format_isSet = false;
    m_signing_image_format_isValid = false;

    m_max_size_in_mb_isSet = false;
    m_max_size_in_mb_isValid = false;

    m_revocation_supported_isSet = false;
    m_revocation_supported_isValid = false;
}

void OAISigningPlatform::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISigningPlatform::fromJsonObject(QJsonObject json) {

    m_platform_id_isValid = ::OpenAPI::fromJsonValue(m_platform_id, json[QString("platformId")]);
    m_platform_id_isSet = !json[QString("platformId")].isNull() && m_platform_id_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_partner_isValid = ::OpenAPI::fromJsonValue(m_partner, json[QString("partner")]);
    m_partner_isSet = !json[QString("partner")].isNull() && m_partner_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("target")]);
    m_target_isSet = !json[QString("target")].isNull() && m_target_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_signing_configuration_isValid = ::OpenAPI::fromJsonValue(m_signing_configuration, json[QString("signingConfiguration")]);
    m_signing_configuration_isSet = !json[QString("signingConfiguration")].isNull() && m_signing_configuration_isValid;

    m_signing_image_format_isValid = ::OpenAPI::fromJsonValue(m_signing_image_format, json[QString("signingImageFormat")]);
    m_signing_image_format_isSet = !json[QString("signingImageFormat")].isNull() && m_signing_image_format_isValid;

    m_max_size_in_mb_isValid = ::OpenAPI::fromJsonValue(m_max_size_in_mb, json[QString("maxSizeInMB")]);
    m_max_size_in_mb_isSet = !json[QString("maxSizeInMB")].isNull() && m_max_size_in_mb_isValid;

    m_revocation_supported_isValid = ::OpenAPI::fromJsonValue(m_revocation_supported, json[QString("revocationSupported")]);
    m_revocation_supported_isSet = !json[QString("revocationSupported")].isNull() && m_revocation_supported_isValid;
}

QString OAISigningPlatform::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISigningPlatform::asJsonObject() const {
    QJsonObject obj;
    if (m_platform_id_isSet) {
        obj.insert(QString("platformId"), ::OpenAPI::toJsonValue(m_platform_id));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_partner_isSet) {
        obj.insert(QString("partner"), ::OpenAPI::toJsonValue(m_partner));
    }
    if (m_target_isSet) {
        obj.insert(QString("target"), ::OpenAPI::toJsonValue(m_target));
    }
    if (m_category.isSet()) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_signing_configuration.isSet()) {
        obj.insert(QString("signingConfiguration"), ::OpenAPI::toJsonValue(m_signing_configuration));
    }
    if (m_signing_image_format.isSet()) {
        obj.insert(QString("signingImageFormat"), ::OpenAPI::toJsonValue(m_signing_image_format));
    }
    if (m_max_size_in_mb_isSet) {
        obj.insert(QString("maxSizeInMB"), ::OpenAPI::toJsonValue(m_max_size_in_mb));
    }
    if (m_revocation_supported_isSet) {
        obj.insert(QString("revocationSupported"), ::OpenAPI::toJsonValue(m_revocation_supported));
    }
    return obj;
}

QString OAISigningPlatform::getPlatformId() const {
    return m_platform_id;
}
void OAISigningPlatform::setPlatformId(const QString &platform_id) {
    m_platform_id = platform_id;
    m_platform_id_isSet = true;
}

bool OAISigningPlatform::is_platform_id_Set() const{
    return m_platform_id_isSet;
}

bool OAISigningPlatform::is_platform_id_Valid() const{
    return m_platform_id_isValid;
}

QString OAISigningPlatform::getDisplayName() const {
    return m_display_name;
}
void OAISigningPlatform::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAISigningPlatform::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAISigningPlatform::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAISigningPlatform::getPartner() const {
    return m_partner;
}
void OAISigningPlatform::setPartner(const QString &partner) {
    m_partner = partner;
    m_partner_isSet = true;
}

bool OAISigningPlatform::is_partner_Set() const{
    return m_partner_isSet;
}

bool OAISigningPlatform::is_partner_Valid() const{
    return m_partner_isValid;
}

QString OAISigningPlatform::getTarget() const {
    return m_target;
}
void OAISigningPlatform::setTarget(const QString &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAISigningPlatform::is_target_Set() const{
    return m_target_isSet;
}

bool OAISigningPlatform::is_target_Valid() const{
    return m_target_isValid;
}

OAICategory OAISigningPlatform::getCategory() const {
    return m_category;
}
void OAISigningPlatform::setCategory(const OAICategory &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAISigningPlatform::is_category_Set() const{
    return m_category_isSet;
}

bool OAISigningPlatform::is_category_Valid() const{
    return m_category_isValid;
}

OAISigningPlatform_signingConfiguration OAISigningPlatform::getSigningConfiguration() const {
    return m_signing_configuration;
}
void OAISigningPlatform::setSigningConfiguration(const OAISigningPlatform_signingConfiguration &signing_configuration) {
    m_signing_configuration = signing_configuration;
    m_signing_configuration_isSet = true;
}

bool OAISigningPlatform::is_signing_configuration_Set() const{
    return m_signing_configuration_isSet;
}

bool OAISigningPlatform::is_signing_configuration_Valid() const{
    return m_signing_configuration_isValid;
}

OAISigningImageFormat OAISigningPlatform::getSigningImageFormat() const {
    return m_signing_image_format;
}
void OAISigningPlatform::setSigningImageFormat(const OAISigningImageFormat &signing_image_format) {
    m_signing_image_format = signing_image_format;
    m_signing_image_format_isSet = true;
}

bool OAISigningPlatform::is_signing_image_format_Set() const{
    return m_signing_image_format_isSet;
}

bool OAISigningPlatform::is_signing_image_format_Valid() const{
    return m_signing_image_format_isValid;
}

qint32 OAISigningPlatform::getMaxSizeInMb() const {
    return m_max_size_in_mb;
}
void OAISigningPlatform::setMaxSizeInMb(const qint32 &max_size_in_mb) {
    m_max_size_in_mb = max_size_in_mb;
    m_max_size_in_mb_isSet = true;
}

bool OAISigningPlatform::is_max_size_in_mb_Set() const{
    return m_max_size_in_mb_isSet;
}

bool OAISigningPlatform::is_max_size_in_mb_Valid() const{
    return m_max_size_in_mb_isValid;
}

bool OAISigningPlatform::getRevocationSupported() const {
    return m_revocation_supported;
}
void OAISigningPlatform::setRevocationSupported(const bool &revocation_supported) {
    m_revocation_supported = revocation_supported;
    m_revocation_supported_isSet = true;
}

bool OAISigningPlatform::is_revocation_supported_Set() const{
    return m_revocation_supported_isSet;
}

bool OAISigningPlatform::is_revocation_supported_Valid() const{
    return m_revocation_supported_isValid;
}

bool OAISigningPlatform::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_platform_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_signing_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_signing_image_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_size_in_mb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revocation_supported_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISigningPlatform::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
