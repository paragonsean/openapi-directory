/**
 * AWS Signer
 * <p>AWS Signer is a fully managed code signing service to help you ensure the trust and integrity of your code. </p> <p>AWS Signer supports the following applications:</p> <p>With code signing for AWS Lambda, you can sign <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/\">AWS Lambda</a> deployment packages. Integrated support is provided for <a href=\"http://docs.aws.amazon.com/AmazonS3/latest/gsg/\">Amazon S3</a>, <a href=\"http://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/\">Amazon CloudWatch</a>, and <a href=\"http://docs.aws.amazon.com/awscloudtrail/latest/userguide/\">AWS CloudTrail</a>. In order to sign code, you create a signing profile and then use Signer to sign Lambda zip files in S3. </p> <p>With code signing for IoT, you can sign code for any IoT device that is supported by AWS. IoT code signing is available for <a href=\"http://docs.aws.amazon.com/freertos/latest/userguide/\">Amazon FreeRTOS</a> and <a href=\"http://docs.aws.amazon.com/iot/latest/developerguide/\">AWS IoT Device Management</a>, and is integrated with <a href=\"http://docs.aws.amazon.com/acm/latest/userguide/\">AWS Certificate Manager (ACM)</a>. In order to sign code, you import a third-party code signing certificate using ACM, and use that to sign updates in Amazon FreeRTOS and AWS IoT Device Management. </p> <p>With code signing for containers â€¦(TBD)</p> <p>For more information about AWS Signer, see the <a href=\"https://docs.aws.amazon.com/signer/latest/developerguide/Welcome.html\">AWS Signer Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeSigningJobResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeSigningJobResponse::OAIDescribeSigningJobResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeSigningJobResponse::OAIDescribeSigningJobResponse() {
    this->initializeModel();
}

OAIDescribeSigningJobResponse::~OAIDescribeSigningJobResponse() {}

void OAIDescribeSigningJobResponse::initializeModel() {

    m_job_id_isSet = false;
    m_job_id_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_signing_material_isSet = false;
    m_signing_material_isValid = false;

    m_platform_id_isSet = false;
    m_platform_id_isValid = false;

    m_platform_display_name_isSet = false;
    m_platform_display_name_isValid = false;

    m_profile_name_isSet = false;
    m_profile_name_isValid = false;

    m_profile_version_isSet = false;
    m_profile_version_isValid = false;

    m_overrides_isSet = false;
    m_overrides_isValid = false;

    m_signing_parameters_isSet = false;
    m_signing_parameters_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_completed_at_isSet = false;
    m_completed_at_isValid = false;

    m_signature_expires_at_isSet = false;
    m_signature_expires_at_isValid = false;

    m_requested_by_isSet = false;
    m_requested_by_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_reason_isSet = false;
    m_status_reason_isValid = false;

    m_revocation_record_isSet = false;
    m_revocation_record_isValid = false;

    m_signed_object_isSet = false;
    m_signed_object_isValid = false;

    m_job_owner_isSet = false;
    m_job_owner_isValid = false;

    m_job_invoker_isSet = false;
    m_job_invoker_isValid = false;
}

void OAIDescribeSigningJobResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeSigningJobResponse::fromJsonObject(QJsonObject json) {

    m_job_id_isValid = ::OpenAPI::fromJsonValue(m_job_id, json[QString("jobId")]);
    m_job_id_isSet = !json[QString("jobId")].isNull() && m_job_id_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_signing_material_isValid = ::OpenAPI::fromJsonValue(m_signing_material, json[QString("signingMaterial")]);
    m_signing_material_isSet = !json[QString("signingMaterial")].isNull() && m_signing_material_isValid;

    m_platform_id_isValid = ::OpenAPI::fromJsonValue(m_platform_id, json[QString("platformId")]);
    m_platform_id_isSet = !json[QString("platformId")].isNull() && m_platform_id_isValid;

    m_platform_display_name_isValid = ::OpenAPI::fromJsonValue(m_platform_display_name, json[QString("platformDisplayName")]);
    m_platform_display_name_isSet = !json[QString("platformDisplayName")].isNull() && m_platform_display_name_isValid;

    m_profile_name_isValid = ::OpenAPI::fromJsonValue(m_profile_name, json[QString("profileName")]);
    m_profile_name_isSet = !json[QString("profileName")].isNull() && m_profile_name_isValid;

    m_profile_version_isValid = ::OpenAPI::fromJsonValue(m_profile_version, json[QString("profileVersion")]);
    m_profile_version_isSet = !json[QString("profileVersion")].isNull() && m_profile_version_isValid;

    m_overrides_isValid = ::OpenAPI::fromJsonValue(m_overrides, json[QString("overrides")]);
    m_overrides_isSet = !json[QString("overrides")].isNull() && m_overrides_isValid;

    m_signing_parameters_isValid = ::OpenAPI::fromJsonValue(m_signing_parameters, json[QString("signingParameters")]);
    m_signing_parameters_isSet = !json[QString("signingParameters")].isNull() && m_signing_parameters_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_completed_at_isValid = ::OpenAPI::fromJsonValue(m_completed_at, json[QString("completedAt")]);
    m_completed_at_isSet = !json[QString("completedAt")].isNull() && m_completed_at_isValid;

    m_signature_expires_at_isValid = ::OpenAPI::fromJsonValue(m_signature_expires_at, json[QString("signatureExpiresAt")]);
    m_signature_expires_at_isSet = !json[QString("signatureExpiresAt")].isNull() && m_signature_expires_at_isValid;

    m_requested_by_isValid = ::OpenAPI::fromJsonValue(m_requested_by, json[QString("requestedBy")]);
    m_requested_by_isSet = !json[QString("requestedBy")].isNull() && m_requested_by_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_reason_isValid = ::OpenAPI::fromJsonValue(m_status_reason, json[QString("statusReason")]);
    m_status_reason_isSet = !json[QString("statusReason")].isNull() && m_status_reason_isValid;

    m_revocation_record_isValid = ::OpenAPI::fromJsonValue(m_revocation_record, json[QString("revocationRecord")]);
    m_revocation_record_isSet = !json[QString("revocationRecord")].isNull() && m_revocation_record_isValid;

    m_signed_object_isValid = ::OpenAPI::fromJsonValue(m_signed_object, json[QString("signedObject")]);
    m_signed_object_isSet = !json[QString("signedObject")].isNull() && m_signed_object_isValid;

    m_job_owner_isValid = ::OpenAPI::fromJsonValue(m_job_owner, json[QString("jobOwner")]);
    m_job_owner_isSet = !json[QString("jobOwner")].isNull() && m_job_owner_isValid;

    m_job_invoker_isValid = ::OpenAPI::fromJsonValue(m_job_invoker, json[QString("jobInvoker")]);
    m_job_invoker_isSet = !json[QString("jobInvoker")].isNull() && m_job_invoker_isValid;
}

QString OAIDescribeSigningJobResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeSigningJobResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_job_id_isSet) {
        obj.insert(QString("jobId"), ::OpenAPI::toJsonValue(m_job_id));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_signing_material.isSet()) {
        obj.insert(QString("signingMaterial"), ::OpenAPI::toJsonValue(m_signing_material));
    }
    if (m_platform_id_isSet) {
        obj.insert(QString("platformId"), ::OpenAPI::toJsonValue(m_platform_id));
    }
    if (m_platform_display_name_isSet) {
        obj.insert(QString("platformDisplayName"), ::OpenAPI::toJsonValue(m_platform_display_name));
    }
    if (m_profile_name_isSet) {
        obj.insert(QString("profileName"), ::OpenAPI::toJsonValue(m_profile_name));
    }
    if (m_profile_version_isSet) {
        obj.insert(QString("profileVersion"), ::OpenAPI::toJsonValue(m_profile_version));
    }
    if (m_overrides.isSet()) {
        obj.insert(QString("overrides"), ::OpenAPI::toJsonValue(m_overrides));
    }
    if (m_signing_parameters.isSet()) {
        obj.insert(QString("signingParameters"), ::OpenAPI::toJsonValue(m_signing_parameters));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_completed_at_isSet) {
        obj.insert(QString("completedAt"), ::OpenAPI::toJsonValue(m_completed_at));
    }
    if (m_signature_expires_at_isSet) {
        obj.insert(QString("signatureExpiresAt"), ::OpenAPI::toJsonValue(m_signature_expires_at));
    }
    if (m_requested_by_isSet) {
        obj.insert(QString("requestedBy"), ::OpenAPI::toJsonValue(m_requested_by));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_reason_isSet) {
        obj.insert(QString("statusReason"), ::OpenAPI::toJsonValue(m_status_reason));
    }
    if (m_revocation_record.isSet()) {
        obj.insert(QString("revocationRecord"), ::OpenAPI::toJsonValue(m_revocation_record));
    }
    if (m_signed_object.isSet()) {
        obj.insert(QString("signedObject"), ::OpenAPI::toJsonValue(m_signed_object));
    }
    if (m_job_owner_isSet) {
        obj.insert(QString("jobOwner"), ::OpenAPI::toJsonValue(m_job_owner));
    }
    if (m_job_invoker_isSet) {
        obj.insert(QString("jobInvoker"), ::OpenAPI::toJsonValue(m_job_invoker));
    }
    return obj;
}

QString OAIDescribeSigningJobResponse::getJobId() const {
    return m_job_id;
}
void OAIDescribeSigningJobResponse::setJobId(const QString &job_id) {
    m_job_id = job_id;
    m_job_id_isSet = true;
}

bool OAIDescribeSigningJobResponse::is_job_id_Set() const{
    return m_job_id_isSet;
}

bool OAIDescribeSigningJobResponse::is_job_id_Valid() const{
    return m_job_id_isValid;
}

OAIDescribeSigningJobResponse_source OAIDescribeSigningJobResponse::getSource() const {
    return m_source;
}
void OAIDescribeSigningJobResponse::setSource(const OAIDescribeSigningJobResponse_source &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIDescribeSigningJobResponse::is_source_Set() const{
    return m_source_isSet;
}

bool OAIDescribeSigningJobResponse::is_source_Valid() const{
    return m_source_isValid;
}

OAIDescribeSigningJobResponse_signingMaterial OAIDescribeSigningJobResponse::getSigningMaterial() const {
    return m_signing_material;
}
void OAIDescribeSigningJobResponse::setSigningMaterial(const OAIDescribeSigningJobResponse_signingMaterial &signing_material) {
    m_signing_material = signing_material;
    m_signing_material_isSet = true;
}

bool OAIDescribeSigningJobResponse::is_signing_material_Set() const{
    return m_signing_material_isSet;
}

bool OAIDescribeSigningJobResponse::is_signing_material_Valid() const{
    return m_signing_material_isValid;
}

QString OAIDescribeSigningJobResponse::getPlatformId() const {
    return m_platform_id;
}
void OAIDescribeSigningJobResponse::setPlatformId(const QString &platform_id) {
    m_platform_id = platform_id;
    m_platform_id_isSet = true;
}

bool OAIDescribeSigningJobResponse::is_platform_id_Set() const{
    return m_platform_id_isSet;
}

bool OAIDescribeSigningJobResponse::is_platform_id_Valid() const{
    return m_platform_id_isValid;
}

QString OAIDescribeSigningJobResponse::getPlatformDisplayName() const {
    return m_platform_display_name;
}
void OAIDescribeSigningJobResponse::setPlatformDisplayName(const QString &platform_display_name) {
    m_platform_display_name = platform_display_name;
    m_platform_display_name_isSet = true;
}

bool OAIDescribeSigningJobResponse::is_platform_display_name_Set() const{
    return m_platform_display_name_isSet;
}

bool OAIDescribeSigningJobResponse::is_platform_display_name_Valid() const{
    return m_platform_display_name_isValid;
}

QString OAIDescribeSigningJobResponse::getProfileName() const {
    return m_profile_name;
}
void OAIDescribeSigningJobResponse::setProfileName(const QString &profile_name) {
    m_profile_name = profile_name;
    m_profile_name_isSet = true;
}

bool OAIDescribeSigningJobResponse::is_profile_name_Set() const{
    return m_profile_name_isSet;
}

bool OAIDescribeSigningJobResponse::is_profile_name_Valid() const{
    return m_profile_name_isValid;
}

QString OAIDescribeSigningJobResponse::getProfileVersion() const {
    return m_profile_version;
}
void OAIDescribeSigningJobResponse::setProfileVersion(const QString &profile_version) {
    m_profile_version = profile_version;
    m_profile_version_isSet = true;
}

bool OAIDescribeSigningJobResponse::is_profile_version_Set() const{
    return m_profile_version_isSet;
}

bool OAIDescribeSigningJobResponse::is_profile_version_Valid() const{
    return m_profile_version_isValid;
}

OAIDescribeSigningJobResponse_overrides OAIDescribeSigningJobResponse::getOverrides() const {
    return m_overrides;
}
void OAIDescribeSigningJobResponse::setOverrides(const OAIDescribeSigningJobResponse_overrides &overrides) {
    m_overrides = overrides;
    m_overrides_isSet = true;
}

bool OAIDescribeSigningJobResponse::is_overrides_Set() const{
    return m_overrides_isSet;
}

bool OAIDescribeSigningJobResponse::is_overrides_Valid() const{
    return m_overrides_isValid;
}

QMap OAIDescribeSigningJobResponse::getSigningParameters() const {
    return m_signing_parameters;
}
void OAIDescribeSigningJobResponse::setSigningParameters(const QMap &signing_parameters) {
    m_signing_parameters = signing_parameters;
    m_signing_parameters_isSet = true;
}

bool OAIDescribeSigningJobResponse::is_signing_parameters_Set() const{
    return m_signing_parameters_isSet;
}

bool OAIDescribeSigningJobResponse::is_signing_parameters_Valid() const{
    return m_signing_parameters_isValid;
}

QDateTime OAIDescribeSigningJobResponse::getCreatedAt() const {
    return m_created_at;
}
void OAIDescribeSigningJobResponse::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIDescribeSigningJobResponse::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIDescribeSigningJobResponse::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAIDescribeSigningJobResponse::getCompletedAt() const {
    return m_completed_at;
}
void OAIDescribeSigningJobResponse::setCompletedAt(const QDateTime &completed_at) {
    m_completed_at = completed_at;
    m_completed_at_isSet = true;
}

bool OAIDescribeSigningJobResponse::is_completed_at_Set() const{
    return m_completed_at_isSet;
}

bool OAIDescribeSigningJobResponse::is_completed_at_Valid() const{
    return m_completed_at_isValid;
}

QDateTime OAIDescribeSigningJobResponse::getSignatureExpiresAt() const {
    return m_signature_expires_at;
}
void OAIDescribeSigningJobResponse::setSignatureExpiresAt(const QDateTime &signature_expires_at) {
    m_signature_expires_at = signature_expires_at;
    m_signature_expires_at_isSet = true;
}

bool OAIDescribeSigningJobResponse::is_signature_expires_at_Set() const{
    return m_signature_expires_at_isSet;
}

bool OAIDescribeSigningJobResponse::is_signature_expires_at_Valid() const{
    return m_signature_expires_at_isValid;
}

QString OAIDescribeSigningJobResponse::getRequestedBy() const {
    return m_requested_by;
}
void OAIDescribeSigningJobResponse::setRequestedBy(const QString &requested_by) {
    m_requested_by = requested_by;
    m_requested_by_isSet = true;
}

bool OAIDescribeSigningJobResponse::is_requested_by_Set() const{
    return m_requested_by_isSet;
}

bool OAIDescribeSigningJobResponse::is_requested_by_Valid() const{
    return m_requested_by_isValid;
}

OAISigningStatus OAIDescribeSigningJobResponse::getStatus() const {
    return m_status;
}
void OAIDescribeSigningJobResponse::setStatus(const OAISigningStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeSigningJobResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeSigningJobResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDescribeSigningJobResponse::getStatusReason() const {
    return m_status_reason;
}
void OAIDescribeSigningJobResponse::setStatusReason(const QString &status_reason) {
    m_status_reason = status_reason;
    m_status_reason_isSet = true;
}

bool OAIDescribeSigningJobResponse::is_status_reason_Set() const{
    return m_status_reason_isSet;
}

bool OAIDescribeSigningJobResponse::is_status_reason_Valid() const{
    return m_status_reason_isValid;
}

OAIDescribeSigningJobResponse_revocationRecord OAIDescribeSigningJobResponse::getRevocationRecord() const {
    return m_revocation_record;
}
void OAIDescribeSigningJobResponse::setRevocationRecord(const OAIDescribeSigningJobResponse_revocationRecord &revocation_record) {
    m_revocation_record = revocation_record;
    m_revocation_record_isSet = true;
}

bool OAIDescribeSigningJobResponse::is_revocation_record_Set() const{
    return m_revocation_record_isSet;
}

bool OAIDescribeSigningJobResponse::is_revocation_record_Valid() const{
    return m_revocation_record_isValid;
}

OAIDescribeSigningJobResponse_signedObject OAIDescribeSigningJobResponse::getSignedObject() const {
    return m_signed_object;
}
void OAIDescribeSigningJobResponse::setSignedObject(const OAIDescribeSigningJobResponse_signedObject &signed_object) {
    m_signed_object = signed_object;
    m_signed_object_isSet = true;
}

bool OAIDescribeSigningJobResponse::is_signed_object_Set() const{
    return m_signed_object_isSet;
}

bool OAIDescribeSigningJobResponse::is_signed_object_Valid() const{
    return m_signed_object_isValid;
}

QString OAIDescribeSigningJobResponse::getJobOwner() const {
    return m_job_owner;
}
void OAIDescribeSigningJobResponse::setJobOwner(const QString &job_owner) {
    m_job_owner = job_owner;
    m_job_owner_isSet = true;
}

bool OAIDescribeSigningJobResponse::is_job_owner_Set() const{
    return m_job_owner_isSet;
}

bool OAIDescribeSigningJobResponse::is_job_owner_Valid() const{
    return m_job_owner_isValid;
}

QString OAIDescribeSigningJobResponse::getJobInvoker() const {
    return m_job_invoker;
}
void OAIDescribeSigningJobResponse::setJobInvoker(const QString &job_invoker) {
    m_job_invoker = job_invoker;
    m_job_invoker_isSet = true;
}

bool OAIDescribeSigningJobResponse::is_job_invoker_Set() const{
    return m_job_invoker_isSet;
}

bool OAIDescribeSigningJobResponse::is_job_invoker_Valid() const{
    return m_job_invoker_isValid;
}

bool OAIDescribeSigningJobResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_signing_material.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overrides.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_signing_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signature_expires_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revocation_record.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_signed_object.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_invoker_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeSigningJobResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
