/**
 * AWS Signer
 * <p>AWS Signer is a fully managed code signing service to help you ensure the trust and integrity of your code. </p> <p>AWS Signer supports the following applications:</p> <p>With code signing for AWS Lambda, you can sign <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/\">AWS Lambda</a> deployment packages. Integrated support is provided for <a href=\"http://docs.aws.amazon.com/AmazonS3/latest/gsg/\">Amazon S3</a>, <a href=\"http://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/\">Amazon CloudWatch</a>, and <a href=\"http://docs.aws.amazon.com/awscloudtrail/latest/userguide/\">AWS CloudTrail</a>. In order to sign code, you create a signing profile and then use Signer to sign Lambda zip files in S3. </p> <p>With code signing for IoT, you can sign code for any IoT device that is supported by AWS. IoT code signing is available for <a href=\"http://docs.aws.amazon.com/freertos/latest/userguide/\">Amazon FreeRTOS</a> and <a href=\"http://docs.aws.amazon.com/iot/latest/developerguide/\">AWS IoT Device Management</a>, and is integrated with <a href=\"http://docs.aws.amazon.com/acm/latest/userguide/\">AWS Certificate Manager (ACM)</a>. In order to sign code, you import a third-party code signing certificate using ACM, and use that to sign updates in Amazon FreeRTOS and AWS IoT Device Management. </p> <p>With code signing for containers â€¦(TBD)</p> <p>For more information about AWS Signer, see the <a href=\"https://docs.aws.amazon.com/signer/latest/developerguide/Welcome.html\">AWS Signer Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPutSigningProfile_request.h
 *
 * 
 */

#ifndef OAIPutSigningProfile_request_H
#define OAIPutSigningProfile_request_H

#include <QJsonObject>

#include "OAIPutSigningProfile_request_overrides.h"
#include "OAIPutSigningProfile_request_signatureValidityPeriod.h"
#include "OAIPutSigningProfile_request_signingMaterial.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPutSigningProfile_request_signingMaterial;
class OAIPutSigningProfile_request_signatureValidityPeriod;
class OAIPutSigningProfile_request_overrides;

class OAIPutSigningProfile_request : public OAIObject {
public:
    OAIPutSigningProfile_request();
    OAIPutSigningProfile_request(QString json);
    ~OAIPutSigningProfile_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIPutSigningProfile_request_signingMaterial getSigningMaterial() const;
    void setSigningMaterial(const OAIPutSigningProfile_request_signingMaterial &signing_material);
    bool is_signing_material_Set() const;
    bool is_signing_material_Valid() const;

    OAIPutSigningProfile_request_signatureValidityPeriod getSignatureValidityPeriod() const;
    void setSignatureValidityPeriod(const OAIPutSigningProfile_request_signatureValidityPeriod &signature_validity_period);
    bool is_signature_validity_period_Set() const;
    bool is_signature_validity_period_Valid() const;

    QString getPlatformId() const;
    void setPlatformId(const QString &platform_id);
    bool is_platform_id_Set() const;
    bool is_platform_id_Valid() const;

    OAIPutSigningProfile_request_overrides getOverrides() const;
    void setOverrides(const OAIPutSigningProfile_request_overrides &overrides);
    bool is_overrides_Set() const;
    bool is_overrides_Valid() const;

    QMap<QString, QString> getSigningParameters() const;
    void setSigningParameters(const QMap<QString, QString> &signing_parameters);
    bool is_signing_parameters_Set() const;
    bool is_signing_parameters_Valid() const;

    QMap<QString, QString> getTags() const;
    void setTags(const QMap<QString, QString> &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIPutSigningProfile_request_signingMaterial m_signing_material;
    bool m_signing_material_isSet;
    bool m_signing_material_isValid;

    OAIPutSigningProfile_request_signatureValidityPeriod m_signature_validity_period;
    bool m_signature_validity_period_isSet;
    bool m_signature_validity_period_isValid;

    QString m_platform_id;
    bool m_platform_id_isSet;
    bool m_platform_id_isValid;

    OAIPutSigningProfile_request_overrides m_overrides;
    bool m_overrides_isSet;
    bool m_overrides_isValid;

    QMap<QString, QString> m_signing_parameters;
    bool m_signing_parameters_isSet;
    bool m_signing_parameters_isValid;

    QMap<QString, QString> m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPutSigningProfile_request)

#endif // OAIPutSigningProfile_request_H
