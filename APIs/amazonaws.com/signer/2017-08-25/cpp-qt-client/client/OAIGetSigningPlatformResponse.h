/**
 * AWS Signer
 * <p>AWS Signer is a fully managed code signing service to help you ensure the trust and integrity of your code. </p> <p>AWS Signer supports the following applications:</p> <p>With code signing for AWS Lambda, you can sign <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/\">AWS Lambda</a> deployment packages. Integrated support is provided for <a href=\"http://docs.aws.amazon.com/AmazonS3/latest/gsg/\">Amazon S3</a>, <a href=\"http://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/\">Amazon CloudWatch</a>, and <a href=\"http://docs.aws.amazon.com/awscloudtrail/latest/userguide/\">AWS CloudTrail</a>. In order to sign code, you create a signing profile and then use Signer to sign Lambda zip files in S3. </p> <p>With code signing for IoT, you can sign code for any IoT device that is supported by AWS. IoT code signing is available for <a href=\"http://docs.aws.amazon.com/freertos/latest/userguide/\">Amazon FreeRTOS</a> and <a href=\"http://docs.aws.amazon.com/iot/latest/developerguide/\">AWS IoT Device Management</a>, and is integrated with <a href=\"http://docs.aws.amazon.com/acm/latest/userguide/\">AWS Certificate Manager (ACM)</a>. In order to sign code, you import a third-party code signing certificate using ACM, and use that to sign updates in Amazon FreeRTOS and AWS IoT Device Management. </p> <p>With code signing for containers â€¦(TBD)</p> <p>For more information about AWS Signer, see the <a href=\"https://docs.aws.amazon.com/signer/latest/developerguide/Welcome.html\">AWS Signer Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-08-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetSigningPlatformResponse.h
 *
 * 
 */

#ifndef OAIGetSigningPlatformResponse_H
#define OAIGetSigningPlatformResponse_H

#include <QJsonObject>

#include "OAICategory.h"
#include "OAIGetSigningPlatformResponse_signingConfiguration.h"
#include "OAIGetSigningPlatformResponse_signingImageFormat.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGetSigningPlatformResponse_signingConfiguration;
class OAIGetSigningPlatformResponse_signingImageFormat;

class OAIGetSigningPlatformResponse : public OAIObject {
public:
    OAIGetSigningPlatformResponse();
    OAIGetSigningPlatformResponse(QString json);
    ~OAIGetSigningPlatformResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getPlatformId() const;
    void setPlatformId(const QString &platform_id);
    bool is_platform_id_Set() const;
    bool is_platform_id_Valid() const;

    QString getDisplayName() const;
    void setDisplayName(const QString &display_name);
    bool is_display_name_Set() const;
    bool is_display_name_Valid() const;

    QString getPartner() const;
    void setPartner(const QString &partner);
    bool is_partner_Set() const;
    bool is_partner_Valid() const;

    QString getTarget() const;
    void setTarget(const QString &target);
    bool is_target_Set() const;
    bool is_target_Valid() const;

    OAICategory getCategory() const;
    void setCategory(const OAICategory &category);
    bool is_category_Set() const;
    bool is_category_Valid() const;

    OAIGetSigningPlatformResponse_signingConfiguration getSigningConfiguration() const;
    void setSigningConfiguration(const OAIGetSigningPlatformResponse_signingConfiguration &signing_configuration);
    bool is_signing_configuration_Set() const;
    bool is_signing_configuration_Valid() const;

    OAIGetSigningPlatformResponse_signingImageFormat getSigningImageFormat() const;
    void setSigningImageFormat(const OAIGetSigningPlatformResponse_signingImageFormat &signing_image_format);
    bool is_signing_image_format_Set() const;
    bool is_signing_image_format_Valid() const;

    qint32 getMaxSizeInMb() const;
    void setMaxSizeInMb(const qint32 &max_size_in_mb);
    bool is_max_size_in_mb_Set() const;
    bool is_max_size_in_mb_Valid() const;

    bool getRevocationSupported() const;
    void setRevocationSupported(const bool &revocation_supported);
    bool is_revocation_supported_Set() const;
    bool is_revocation_supported_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_platform_id;
    bool m_platform_id_isSet;
    bool m_platform_id_isValid;

    QString m_display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    QString m_partner;
    bool m_partner_isSet;
    bool m_partner_isValid;

    QString m_target;
    bool m_target_isSet;
    bool m_target_isValid;

    OAICategory m_category;
    bool m_category_isSet;
    bool m_category_isValid;

    OAIGetSigningPlatformResponse_signingConfiguration m_signing_configuration;
    bool m_signing_configuration_isSet;
    bool m_signing_configuration_isValid;

    OAIGetSigningPlatformResponse_signingImageFormat m_signing_image_format;
    bool m_signing_image_format_isSet;
    bool m_signing_image_format_isValid;

    qint32 m_max_size_in_mb;
    bool m_max_size_in_mb_isSet;
    bool m_max_size_in_mb_isValid;

    bool m_revocation_supported;
    bool m_revocation_supported_isSet;
    bool m_revocation_supported_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetSigningPlatformResponse)

#endif // OAIGetSigningPlatformResponse_H
