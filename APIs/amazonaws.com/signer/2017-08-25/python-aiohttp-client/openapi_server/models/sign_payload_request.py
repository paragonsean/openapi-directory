# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class SignPayloadRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, profile_name: str=None, profile_owner: str=None, payload: str=None, payload_format: str=None):
        """SignPayloadRequest - a model defined in OpenAPI

        :param profile_name: The profile_name of this SignPayloadRequest.
        :param profile_owner: The profile_owner of this SignPayloadRequest.
        :param payload: The payload of this SignPayloadRequest.
        :param payload_format: The payload_format of this SignPayloadRequest.
        """
        self.openapi_types = {
            'profile_name': str,
            'profile_owner': str,
            'payload': str,
            'payload_format': str
        }

        self.attribute_map = {
            'profile_name': 'profileName',
            'profile_owner': 'profileOwner',
            'payload': 'payload',
            'payload_format': 'payloadFormat'
        }

        self._profile_name = profile_name
        self._profile_owner = profile_owner
        self._payload = payload
        self._payload_format = payload_format

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SignPayloadRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SignPayload_request of this SignPayloadRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def profile_name(self):
        """Gets the profile_name of this SignPayloadRequest.

        The name of the signing profile.

        :return: The profile_name of this SignPayloadRequest.
        :rtype: str
        """
        return self._profile_name

    @profile_name.setter
    def profile_name(self, profile_name):
        """Sets the profile_name of this SignPayloadRequest.

        The name of the signing profile.

        :param profile_name: The profile_name of this SignPayloadRequest.
        :type profile_name: str
        """
        if profile_name is None:
            raise ValueError("Invalid value for `profile_name`, must not be `None`")
        if profile_name is not None and len(profile_name) > 64:
            raise ValueError("Invalid value for `profile_name`, length must be less than or equal to `64`")
        if profile_name is not None and len(profile_name) < 2:
            raise ValueError("Invalid value for `profile_name`, length must be greater than or equal to `2`")
        if profile_name is not None and not re.search(r'^[a-zA-Z0-9_]{2,}', profile_name):
            raise ValueError("Invalid value for `profile_name`, must be a follow pattern or equal to `/^[a-zA-Z0-9_]{2,}/`")

        self._profile_name = profile_name

    @property
    def profile_owner(self):
        """Gets the profile_owner of this SignPayloadRequest.

        The AWS account ID of the profile owner.

        :return: The profile_owner of this SignPayloadRequest.
        :rtype: str
        """
        return self._profile_owner

    @profile_owner.setter
    def profile_owner(self, profile_owner):
        """Sets the profile_owner of this SignPayloadRequest.

        The AWS account ID of the profile owner.

        :param profile_owner: The profile_owner of this SignPayloadRequest.
        :type profile_owner: str
        """
        if profile_owner is not None and len(profile_owner) > 12:
            raise ValueError("Invalid value for `profile_owner`, length must be less than or equal to `12`")
        if profile_owner is not None and len(profile_owner) < 12:
            raise ValueError("Invalid value for `profile_owner`, length must be greater than or equal to `12`")
        if profile_owner is not None and not re.search(r'^[0-9]{12}$', profile_owner):
            raise ValueError("Invalid value for `profile_owner`, must be a follow pattern or equal to `/^[0-9]{12}$/`")

        self._profile_owner = profile_owner

    @property
    def payload(self):
        """Gets the payload of this SignPayloadRequest.

        Specifies the object digest (hash) to sign.

        :return: The payload of this SignPayloadRequest.
        :rtype: str
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this SignPayloadRequest.

        Specifies the object digest (hash) to sign.

        :param payload: The payload of this SignPayloadRequest.
        :type payload: str
        """
        if payload is None:
            raise ValueError("Invalid value for `payload`, must not be `None`")
        if payload is not None and len(payload) > 4096:
            raise ValueError("Invalid value for `payload`, length must be less than or equal to `4096`")
        if payload is not None and len(payload) < 1:
            raise ValueError("Invalid value for `payload`, length must be greater than or equal to `1`")

        self._payload = payload

    @property
    def payload_format(self):
        """Gets the payload_format of this SignPayloadRequest.

        Payload content type

        :return: The payload_format of this SignPayloadRequest.
        :rtype: str
        """
        return self._payload_format

    @payload_format.setter
    def payload_format(self, payload_format):
        """Sets the payload_format of this SignPayloadRequest.

        Payload content type

        :param payload_format: The payload_format of this SignPayloadRequest.
        :type payload_format: str
        """
        if payload_format is None:
            raise ValueError("Invalid value for `payload_format`, must not be `None`")

        self._payload_format = payload_format
