# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.category import Category
from openapi_server.models.signing_image_format import SigningImageFormat
from openapi_server.models.signing_platform_signing_configuration import SigningPlatformSigningConfiguration
from openapi_server import util


class SigningPlatform(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, platform_id: str=None, display_name: str=None, partner: str=None, target: str=None, category: Category=None, signing_configuration: SigningPlatformSigningConfiguration=None, signing_image_format: SigningImageFormat=None, max_size_in_mb: int=None, revocation_supported: bool=None):
        """SigningPlatform - a model defined in OpenAPI

        :param platform_id: The platform_id of this SigningPlatform.
        :param display_name: The display_name of this SigningPlatform.
        :param partner: The partner of this SigningPlatform.
        :param target: The target of this SigningPlatform.
        :param category: The category of this SigningPlatform.
        :param signing_configuration: The signing_configuration of this SigningPlatform.
        :param signing_image_format: The signing_image_format of this SigningPlatform.
        :param max_size_in_mb: The max_size_in_mb of this SigningPlatform.
        :param revocation_supported: The revocation_supported of this SigningPlatform.
        """
        self.openapi_types = {
            'platform_id': str,
            'display_name': str,
            'partner': str,
            'target': str,
            'category': Category,
            'signing_configuration': SigningPlatformSigningConfiguration,
            'signing_image_format': SigningImageFormat,
            'max_size_in_mb': int,
            'revocation_supported': bool
        }

        self.attribute_map = {
            'platform_id': 'platformId',
            'display_name': 'displayName',
            'partner': 'partner',
            'target': 'target',
            'category': 'category',
            'signing_configuration': 'signingConfiguration',
            'signing_image_format': 'signingImageFormat',
            'max_size_in_mb': 'maxSizeInMB',
            'revocation_supported': 'revocationSupported'
        }

        self._platform_id = platform_id
        self._display_name = display_name
        self._partner = partner
        self._target = target
        self._category = category
        self._signing_configuration = signing_configuration
        self._signing_image_format = signing_image_format
        self._max_size_in_mb = max_size_in_mb
        self._revocation_supported = revocation_supported

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SigningPlatform':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SigningPlatform of this SigningPlatform.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def platform_id(self):
        """Gets the platform_id of this SigningPlatform.


        :return: The platform_id of this SigningPlatform.
        :rtype: str
        """
        return self._platform_id

    @platform_id.setter
    def platform_id(self, platform_id):
        """Sets the platform_id of this SigningPlatform.


        :param platform_id: The platform_id of this SigningPlatform.
        :type platform_id: str
        """

        self._platform_id = platform_id

    @property
    def display_name(self):
        """Gets the display_name of this SigningPlatform.


        :return: The display_name of this SigningPlatform.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this SigningPlatform.


        :param display_name: The display_name of this SigningPlatform.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def partner(self):
        """Gets the partner of this SigningPlatform.


        :return: The partner of this SigningPlatform.
        :rtype: str
        """
        return self._partner

    @partner.setter
    def partner(self, partner):
        """Sets the partner of this SigningPlatform.


        :param partner: The partner of this SigningPlatform.
        :type partner: str
        """

        self._partner = partner

    @property
    def target(self):
        """Gets the target of this SigningPlatform.


        :return: The target of this SigningPlatform.
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this SigningPlatform.


        :param target: The target of this SigningPlatform.
        :type target: str
        """

        self._target = target

    @property
    def category(self):
        """Gets the category of this SigningPlatform.


        :return: The category of this SigningPlatform.
        :rtype: Category
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this SigningPlatform.


        :param category: The category of this SigningPlatform.
        :type category: Category
        """

        self._category = category

    @property
    def signing_configuration(self):
        """Gets the signing_configuration of this SigningPlatform.


        :return: The signing_configuration of this SigningPlatform.
        :rtype: SigningPlatformSigningConfiguration
        """
        return self._signing_configuration

    @signing_configuration.setter
    def signing_configuration(self, signing_configuration):
        """Sets the signing_configuration of this SigningPlatform.


        :param signing_configuration: The signing_configuration of this SigningPlatform.
        :type signing_configuration: SigningPlatformSigningConfiguration
        """

        self._signing_configuration = signing_configuration

    @property
    def signing_image_format(self):
        """Gets the signing_image_format of this SigningPlatform.


        :return: The signing_image_format of this SigningPlatform.
        :rtype: SigningImageFormat
        """
        return self._signing_image_format

    @signing_image_format.setter
    def signing_image_format(self, signing_image_format):
        """Sets the signing_image_format of this SigningPlatform.


        :param signing_image_format: The signing_image_format of this SigningPlatform.
        :type signing_image_format: SigningImageFormat
        """

        self._signing_image_format = signing_image_format

    @property
    def max_size_in_mb(self):
        """Gets the max_size_in_mb of this SigningPlatform.


        :return: The max_size_in_mb of this SigningPlatform.
        :rtype: int
        """
        return self._max_size_in_mb

    @max_size_in_mb.setter
    def max_size_in_mb(self, max_size_in_mb):
        """Sets the max_size_in_mb of this SigningPlatform.


        :param max_size_in_mb: The max_size_in_mb of this SigningPlatform.
        :type max_size_in_mb: int
        """

        self._max_size_in_mb = max_size_in_mb

    @property
    def revocation_supported(self):
        """Gets the revocation_supported of this SigningPlatform.


        :return: The revocation_supported of this SigningPlatform.
        :rtype: bool
        """
        return self._revocation_supported

    @revocation_supported.setter
    def revocation_supported(self, revocation_supported):
        """Sets the revocation_supported of this SigningPlatform.


        :param revocation_supported: The revocation_supported of this SigningPlatform.
        :type revocation_supported: bool
        """

        self._revocation_supported = revocation_supported
