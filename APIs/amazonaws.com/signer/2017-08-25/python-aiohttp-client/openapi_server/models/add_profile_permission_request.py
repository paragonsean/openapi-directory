# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class AddProfilePermissionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, profile_version: str=None, action: str=None, principal: str=None, revision_id: str=None, statement_id: str=None):
        """AddProfilePermissionRequest - a model defined in OpenAPI

        :param profile_version: The profile_version of this AddProfilePermissionRequest.
        :param action: The action of this AddProfilePermissionRequest.
        :param principal: The principal of this AddProfilePermissionRequest.
        :param revision_id: The revision_id of this AddProfilePermissionRequest.
        :param statement_id: The statement_id of this AddProfilePermissionRequest.
        """
        self.openapi_types = {
            'profile_version': str,
            'action': str,
            'principal': str,
            'revision_id': str,
            'statement_id': str
        }

        self.attribute_map = {
            'profile_version': 'profileVersion',
            'action': 'action',
            'principal': 'principal',
            'revision_id': 'revisionId',
            'statement_id': 'statementId'
        }

        self._profile_version = profile_version
        self._action = action
        self._principal = principal
        self._revision_id = revision_id
        self._statement_id = statement_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddProfilePermissionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AddProfilePermission_request of this AddProfilePermissionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def profile_version(self):
        """Gets the profile_version of this AddProfilePermissionRequest.

        The version of the signing profile.

        :return: The profile_version of this AddProfilePermissionRequest.
        :rtype: str
        """
        return self._profile_version

    @profile_version.setter
    def profile_version(self, profile_version):
        """Sets the profile_version of this AddProfilePermissionRequest.

        The version of the signing profile.

        :param profile_version: The profile_version of this AddProfilePermissionRequest.
        :type profile_version: str
        """
        if profile_version is not None and len(profile_version) > 10:
            raise ValueError("Invalid value for `profile_version`, length must be less than or equal to `10`")
        if profile_version is not None and len(profile_version) < 10:
            raise ValueError("Invalid value for `profile_version`, length must be greater than or equal to `10`")
        if profile_version is not None and not re.search(r'^[a-zA-Z0-9]{10}$', profile_version):
            raise ValueError("Invalid value for `profile_version`, must be a follow pattern or equal to `/^[a-zA-Z0-9]{10}$/`")

        self._profile_version = profile_version

    @property
    def action(self):
        """Gets the action of this AddProfilePermissionRequest.

        The AWS Signer action permitted as part of cross-account permissions.

        :return: The action of this AddProfilePermissionRequest.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this AddProfilePermissionRequest.

        The AWS Signer action permitted as part of cross-account permissions.

        :param action: The action of this AddProfilePermissionRequest.
        :type action: str
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")

        self._action = action

    @property
    def principal(self):
        """Gets the principal of this AddProfilePermissionRequest.

        The AWS principal receiving cross-account permissions. This may be an IAM role or another AWS account ID.

        :return: The principal of this AddProfilePermissionRequest.
        :rtype: str
        """
        return self._principal

    @principal.setter
    def principal(self, principal):
        """Sets the principal of this AddProfilePermissionRequest.

        The AWS principal receiving cross-account permissions. This may be an IAM role or another AWS account ID.

        :param principal: The principal of this AddProfilePermissionRequest.
        :type principal: str
        """
        if principal is None:
            raise ValueError("Invalid value for `principal`, must not be `None`")

        self._principal = principal

    @property
    def revision_id(self):
        """Gets the revision_id of this AddProfilePermissionRequest.

        A unique identifier for the current profile revision.

        :return: The revision_id of this AddProfilePermissionRequest.
        :rtype: str
        """
        return self._revision_id

    @revision_id.setter
    def revision_id(self, revision_id):
        """Sets the revision_id of this AddProfilePermissionRequest.

        A unique identifier for the current profile revision.

        :param revision_id: The revision_id of this AddProfilePermissionRequest.
        :type revision_id: str
        """

        self._revision_id = revision_id

    @property
    def statement_id(self):
        """Gets the statement_id of this AddProfilePermissionRequest.

        A unique identifier for the cross-account permission statement.

        :return: The statement_id of this AddProfilePermissionRequest.
        :rtype: str
        """
        return self._statement_id

    @statement_id.setter
    def statement_id(self, statement_id):
        """Sets the statement_id of this AddProfilePermissionRequest.

        A unique identifier for the cross-account permission statement.

        :param statement_id: The statement_id of this AddProfilePermissionRequest.
        :type statement_id: str
        """
        if statement_id is None:
            raise ValueError("Invalid value for `statement_id`, must not be `None`")

        self._statement_id = statement_id
