# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.encryption_algorithm import EncryptionAlgorithm
from openapi_server import util


class SigningConfigurationEncryptionAlgorithmOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed_values: List=None, default_value: EncryptionAlgorithm=None):
        """SigningConfigurationEncryptionAlgorithmOptions - a model defined in OpenAPI

        :param allowed_values: The allowed_values of this SigningConfigurationEncryptionAlgorithmOptions.
        :param default_value: The default_value of this SigningConfigurationEncryptionAlgorithmOptions.
        """
        self.openapi_types = {
            'allowed_values': List,
            'default_value': EncryptionAlgorithm
        }

        self.attribute_map = {
            'allowed_values': 'allowedValues',
            'default_value': 'defaultValue'
        }

        self._allowed_values = allowed_values
        self._default_value = default_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SigningConfigurationEncryptionAlgorithmOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SigningConfiguration_encryptionAlgorithmOptions of this SigningConfigurationEncryptionAlgorithmOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_values(self):
        """Gets the allowed_values of this SigningConfigurationEncryptionAlgorithmOptions.


        :return: The allowed_values of this SigningConfigurationEncryptionAlgorithmOptions.
        :rtype: List
        """
        return self._allowed_values

    @allowed_values.setter
    def allowed_values(self, allowed_values):
        """Sets the allowed_values of this SigningConfigurationEncryptionAlgorithmOptions.


        :param allowed_values: The allowed_values of this SigningConfigurationEncryptionAlgorithmOptions.
        :type allowed_values: List
        """
        if allowed_values is None:
            raise ValueError("Invalid value for `allowed_values`, must not be `None`")

        self._allowed_values = allowed_values

    @property
    def default_value(self):
        """Gets the default_value of this SigningConfigurationEncryptionAlgorithmOptions.


        :return: The default_value of this SigningConfigurationEncryptionAlgorithmOptions.
        :rtype: EncryptionAlgorithm
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this SigningConfigurationEncryptionAlgorithmOptions.


        :param default_value: The default_value of this SigningConfigurationEncryptionAlgorithmOptions.
        :type default_value: EncryptionAlgorithm
        """
        if default_value is None:
            raise ValueError("Invalid value for `default_value`, must not be `None`")

        self._default_value = default_value
