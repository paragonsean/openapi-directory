# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class RevokeSigningProfileRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, profile_version: str=None, reason: str=None, effective_time: datetime=None):
        """RevokeSigningProfileRequest - a model defined in OpenAPI

        :param profile_version: The profile_version of this RevokeSigningProfileRequest.
        :param reason: The reason of this RevokeSigningProfileRequest.
        :param effective_time: The effective_time of this RevokeSigningProfileRequest.
        """
        self.openapi_types = {
            'profile_version': str,
            'reason': str,
            'effective_time': datetime
        }

        self.attribute_map = {
            'profile_version': 'profileVersion',
            'reason': 'reason',
            'effective_time': 'effectiveTime'
        }

        self._profile_version = profile_version
        self._reason = reason
        self._effective_time = effective_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RevokeSigningProfileRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RevokeSigningProfile_request of this RevokeSigningProfileRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def profile_version(self):
        """Gets the profile_version of this RevokeSigningProfileRequest.

        The version of the signing profile to be revoked.

        :return: The profile_version of this RevokeSigningProfileRequest.
        :rtype: str
        """
        return self._profile_version

    @profile_version.setter
    def profile_version(self, profile_version):
        """Sets the profile_version of this RevokeSigningProfileRequest.

        The version of the signing profile to be revoked.

        :param profile_version: The profile_version of this RevokeSigningProfileRequest.
        :type profile_version: str
        """
        if profile_version is None:
            raise ValueError("Invalid value for `profile_version`, must not be `None`")
        if profile_version is not None and len(profile_version) > 10:
            raise ValueError("Invalid value for `profile_version`, length must be less than or equal to `10`")
        if profile_version is not None and len(profile_version) < 10:
            raise ValueError("Invalid value for `profile_version`, length must be greater than or equal to `10`")
        if profile_version is not None and not re.search(r'^[a-zA-Z0-9]{10}$', profile_version):
            raise ValueError("Invalid value for `profile_version`, must be a follow pattern or equal to `/^[a-zA-Z0-9]{10}$/`")

        self._profile_version = profile_version

    @property
    def reason(self):
        """Gets the reason of this RevokeSigningProfileRequest.

        The reason for revoking a signing profile.

        :return: The reason of this RevokeSigningProfileRequest.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this RevokeSigningProfileRequest.

        The reason for revoking a signing profile.

        :param reason: The reason of this RevokeSigningProfileRequest.
        :type reason: str
        """
        if reason is None:
            raise ValueError("Invalid value for `reason`, must not be `None`")
        if reason is not None and len(reason) > 500:
            raise ValueError("Invalid value for `reason`, length must be less than or equal to `500`")
        if reason is not None and len(reason) < 1:
            raise ValueError("Invalid value for `reason`, length must be greater than or equal to `1`")

        self._reason = reason

    @property
    def effective_time(self):
        """Gets the effective_time of this RevokeSigningProfileRequest.

        A timestamp for when revocation of a Signing Profile should become effective. Signatures generated using the signing profile after this timestamp are not trusted.

        :return: The effective_time of this RevokeSigningProfileRequest.
        :rtype: datetime
        """
        return self._effective_time

    @effective_time.setter
    def effective_time(self, effective_time):
        """Sets the effective_time of this RevokeSigningProfileRequest.

        A timestamp for when revocation of a Signing Profile should become effective. Signatures generated using the signing profile after this timestamp are not trusted.

        :param effective_time: The effective_time of this RevokeSigningProfileRequest.
        :type effective_time: datetime
        """
        if effective_time is None:
            raise ValueError("Invalid value for `effective_time`, must not be `None`")

        self._effective_time = effective_time
