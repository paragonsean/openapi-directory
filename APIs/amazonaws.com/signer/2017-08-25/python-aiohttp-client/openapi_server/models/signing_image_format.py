# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.image_format import ImageFormat
from openapi_server import util


class SigningImageFormat(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, supported_formats: List=None, default_format: ImageFormat=None):
        """SigningImageFormat - a model defined in OpenAPI

        :param supported_formats: The supported_formats of this SigningImageFormat.
        :param default_format: The default_format of this SigningImageFormat.
        """
        self.openapi_types = {
            'supported_formats': List,
            'default_format': ImageFormat
        }

        self.attribute_map = {
            'supported_formats': 'supportedFormats',
            'default_format': 'defaultFormat'
        }

        self._supported_formats = supported_formats
        self._default_format = default_format

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SigningImageFormat':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SigningImageFormat of this SigningImageFormat.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def supported_formats(self):
        """Gets the supported_formats of this SigningImageFormat.


        :return: The supported_formats of this SigningImageFormat.
        :rtype: List
        """
        return self._supported_formats

    @supported_formats.setter
    def supported_formats(self, supported_formats):
        """Sets the supported_formats of this SigningImageFormat.


        :param supported_formats: The supported_formats of this SigningImageFormat.
        :type supported_formats: List
        """
        if supported_formats is None:
            raise ValueError("Invalid value for `supported_formats`, must not be `None`")

        self._supported_formats = supported_formats

    @property
    def default_format(self):
        """Gets the default_format of this SigningImageFormat.


        :return: The default_format of this SigningImageFormat.
        :rtype: ImageFormat
        """
        return self._default_format

    @default_format.setter
    def default_format(self, default_format):
        """Sets the default_format of this SigningImageFormat.


        :param default_format: The default_format of this SigningImageFormat.
        :type default_format: ImageFormat
        """
        if default_format is None:
            raise ValueError("Invalid value for `default_format`, must not be `None`")

        self._default_format = default_format
