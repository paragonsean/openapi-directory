# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.start_signing_job_request_destination import StartSigningJobRequestDestination
from openapi_server.models.start_signing_job_request_source import StartSigningJobRequestSource
import re
from openapi_server import util


class StartSigningJobRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, source: StartSigningJobRequestSource=None, destination: StartSigningJobRequestDestination=None, profile_name: str=None, client_request_token: str=None, profile_owner: str=None):
        """StartSigningJobRequest - a model defined in OpenAPI

        :param source: The source of this StartSigningJobRequest.
        :param destination: The destination of this StartSigningJobRequest.
        :param profile_name: The profile_name of this StartSigningJobRequest.
        :param client_request_token: The client_request_token of this StartSigningJobRequest.
        :param profile_owner: The profile_owner of this StartSigningJobRequest.
        """
        self.openapi_types = {
            'source': StartSigningJobRequestSource,
            'destination': StartSigningJobRequestDestination,
            'profile_name': str,
            'client_request_token': str,
            'profile_owner': str
        }

        self.attribute_map = {
            'source': 'source',
            'destination': 'destination',
            'profile_name': 'profileName',
            'client_request_token': 'clientRequestToken',
            'profile_owner': 'profileOwner'
        }

        self._source = source
        self._destination = destination
        self._profile_name = profile_name
        self._client_request_token = client_request_token
        self._profile_owner = profile_owner

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartSigningJobRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartSigningJob_request of this StartSigningJobRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def source(self):
        """Gets the source of this StartSigningJobRequest.


        :return: The source of this StartSigningJobRequest.
        :rtype: StartSigningJobRequestSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this StartSigningJobRequest.


        :param source: The source of this StartSigningJobRequest.
        :type source: StartSigningJobRequestSource
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")

        self._source = source

    @property
    def destination(self):
        """Gets the destination of this StartSigningJobRequest.


        :return: The destination of this StartSigningJobRequest.
        :rtype: StartSigningJobRequestDestination
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this StartSigningJobRequest.


        :param destination: The destination of this StartSigningJobRequest.
        :type destination: StartSigningJobRequestDestination
        """
        if destination is None:
            raise ValueError("Invalid value for `destination`, must not be `None`")

        self._destination = destination

    @property
    def profile_name(self):
        """Gets the profile_name of this StartSigningJobRequest.

        The name of the signing profile.

        :return: The profile_name of this StartSigningJobRequest.
        :rtype: str
        """
        return self._profile_name

    @profile_name.setter
    def profile_name(self, profile_name):
        """Sets the profile_name of this StartSigningJobRequest.

        The name of the signing profile.

        :param profile_name: The profile_name of this StartSigningJobRequest.
        :type profile_name: str
        """
        if profile_name is None:
            raise ValueError("Invalid value for `profile_name`, must not be `None`")
        if profile_name is not None and len(profile_name) > 64:
            raise ValueError("Invalid value for `profile_name`, length must be less than or equal to `64`")
        if profile_name is not None and len(profile_name) < 2:
            raise ValueError("Invalid value for `profile_name`, length must be greater than or equal to `2`")
        if profile_name is not None and not re.search(r'^[a-zA-Z0-9_]{2,}', profile_name):
            raise ValueError("Invalid value for `profile_name`, must be a follow pattern or equal to `/^[a-zA-Z0-9_]{2,}/`")

        self._profile_name = profile_name

    @property
    def client_request_token(self):
        """Gets the client_request_token of this StartSigningJobRequest.

        String that identifies the signing request. All calls after the first that use this token return the same response as the first call.

        :return: The client_request_token of this StartSigningJobRequest.
        :rtype: str
        """
        return self._client_request_token

    @client_request_token.setter
    def client_request_token(self, client_request_token):
        """Sets the client_request_token of this StartSigningJobRequest.

        String that identifies the signing request. All calls after the first that use this token return the same response as the first call.

        :param client_request_token: The client_request_token of this StartSigningJobRequest.
        :type client_request_token: str
        """
        if client_request_token is None:
            raise ValueError("Invalid value for `client_request_token`, must not be `None`")

        self._client_request_token = client_request_token

    @property
    def profile_owner(self):
        """Gets the profile_owner of this StartSigningJobRequest.

        The AWS account ID of the signing profile owner.

        :return: The profile_owner of this StartSigningJobRequest.
        :rtype: str
        """
        return self._profile_owner

    @profile_owner.setter
    def profile_owner(self, profile_owner):
        """Sets the profile_owner of this StartSigningJobRequest.

        The AWS account ID of the signing profile owner.

        :param profile_owner: The profile_owner of this StartSigningJobRequest.
        :type profile_owner: str
        """
        if profile_owner is not None and len(profile_owner) > 12:
            raise ValueError("Invalid value for `profile_owner`, length must be less than or equal to `12`")
        if profile_owner is not None and len(profile_owner) < 12:
            raise ValueError("Invalid value for `profile_owner`, length must be greater than or equal to `12`")
        if profile_owner is not None and not re.search(r'^[0-9]{12}$', profile_owner):
            raise ValueError("Invalid value for `profile_owner`, must be a follow pattern or equal to `/^[0-9]{12}$/`")

        self._profile_owner = profile_owner
