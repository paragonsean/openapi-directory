# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Permission(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, principal: str=None, statement_id: str=None, profile_version: str=None):
        """Permission - a model defined in OpenAPI

        :param action: The action of this Permission.
        :param principal: The principal of this Permission.
        :param statement_id: The statement_id of this Permission.
        :param profile_version: The profile_version of this Permission.
        """
        self.openapi_types = {
            'action': str,
            'principal': str,
            'statement_id': str,
            'profile_version': str
        }

        self.attribute_map = {
            'action': 'action',
            'principal': 'principal',
            'statement_id': 'statementId',
            'profile_version': 'profileVersion'
        }

        self._action = action
        self._principal = principal
        self._statement_id = statement_id
        self._profile_version = profile_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Permission':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Permission of this Permission.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this Permission.


        :return: The action of this Permission.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this Permission.


        :param action: The action of this Permission.
        :type action: str
        """

        self._action = action

    @property
    def principal(self):
        """Gets the principal of this Permission.


        :return: The principal of this Permission.
        :rtype: str
        """
        return self._principal

    @principal.setter
    def principal(self, principal):
        """Sets the principal of this Permission.


        :param principal: The principal of this Permission.
        :type principal: str
        """

        self._principal = principal

    @property
    def statement_id(self):
        """Gets the statement_id of this Permission.


        :return: The statement_id of this Permission.
        :rtype: str
        """
        return self._statement_id

    @statement_id.setter
    def statement_id(self, statement_id):
        """Sets the statement_id of this Permission.


        :param statement_id: The statement_id of this Permission.
        :type statement_id: str
        """

        self._statement_id = statement_id

    @property
    def profile_version(self):
        """Gets the profile_version of this Permission.


        :return: The profile_version of this Permission.
        :rtype: str
        """
        return self._profile_version

    @profile_version.setter
    def profile_version(self, profile_version):
        """Sets the profile_version of this Permission.


        :param profile_version: The profile_version of this Permission.
        :type profile_version: str
        """

        self._profile_version = profile_version
