# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.put_signing_profile_request_overrides import PutSigningProfileRequestOverrides
from openapi_server.models.put_signing_profile_request_signature_validity_period import PutSigningProfileRequestSignatureValidityPeriod
from openapi_server.models.put_signing_profile_request_signing_material import PutSigningProfileRequestSigningMaterial
from openapi_server import util


class PutSigningProfileRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, signing_material: PutSigningProfileRequestSigningMaterial=None, signature_validity_period: PutSigningProfileRequestSignatureValidityPeriod=None, platform_id: str=None, overrides: PutSigningProfileRequestOverrides=None, signing_parameters: Dict[str, str]=None, tags: Dict[str, str]=None):
        """PutSigningProfileRequest - a model defined in OpenAPI

        :param signing_material: The signing_material of this PutSigningProfileRequest.
        :param signature_validity_period: The signature_validity_period of this PutSigningProfileRequest.
        :param platform_id: The platform_id of this PutSigningProfileRequest.
        :param overrides: The overrides of this PutSigningProfileRequest.
        :param signing_parameters: The signing_parameters of this PutSigningProfileRequest.
        :param tags: The tags of this PutSigningProfileRequest.
        """
        self.openapi_types = {
            'signing_material': PutSigningProfileRequestSigningMaterial,
            'signature_validity_period': PutSigningProfileRequestSignatureValidityPeriod,
            'platform_id': str,
            'overrides': PutSigningProfileRequestOverrides,
            'signing_parameters': Dict[str, str],
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'signing_material': 'signingMaterial',
            'signature_validity_period': 'signatureValidityPeriod',
            'platform_id': 'platformId',
            'overrides': 'overrides',
            'signing_parameters': 'signingParameters',
            'tags': 'tags'
        }

        self._signing_material = signing_material
        self._signature_validity_period = signature_validity_period
        self._platform_id = platform_id
        self._overrides = overrides
        self._signing_parameters = signing_parameters
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutSigningProfileRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutSigningProfile_request of this PutSigningProfileRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def signing_material(self):
        """Gets the signing_material of this PutSigningProfileRequest.


        :return: The signing_material of this PutSigningProfileRequest.
        :rtype: PutSigningProfileRequestSigningMaterial
        """
        return self._signing_material

    @signing_material.setter
    def signing_material(self, signing_material):
        """Sets the signing_material of this PutSigningProfileRequest.


        :param signing_material: The signing_material of this PutSigningProfileRequest.
        :type signing_material: PutSigningProfileRequestSigningMaterial
        """

        self._signing_material = signing_material

    @property
    def signature_validity_period(self):
        """Gets the signature_validity_period of this PutSigningProfileRequest.


        :return: The signature_validity_period of this PutSigningProfileRequest.
        :rtype: PutSigningProfileRequestSignatureValidityPeriod
        """
        return self._signature_validity_period

    @signature_validity_period.setter
    def signature_validity_period(self, signature_validity_period):
        """Sets the signature_validity_period of this PutSigningProfileRequest.


        :param signature_validity_period: The signature_validity_period of this PutSigningProfileRequest.
        :type signature_validity_period: PutSigningProfileRequestSignatureValidityPeriod
        """

        self._signature_validity_period = signature_validity_period

    @property
    def platform_id(self):
        """Gets the platform_id of this PutSigningProfileRequest.

        The ID of the signing platform to be created.

        :return: The platform_id of this PutSigningProfileRequest.
        :rtype: str
        """
        return self._platform_id

    @platform_id.setter
    def platform_id(self, platform_id):
        """Sets the platform_id of this PutSigningProfileRequest.

        The ID of the signing platform to be created.

        :param platform_id: The platform_id of this PutSigningProfileRequest.
        :type platform_id: str
        """
        if platform_id is None:
            raise ValueError("Invalid value for `platform_id`, must not be `None`")

        self._platform_id = platform_id

    @property
    def overrides(self):
        """Gets the overrides of this PutSigningProfileRequest.


        :return: The overrides of this PutSigningProfileRequest.
        :rtype: PutSigningProfileRequestOverrides
        """
        return self._overrides

    @overrides.setter
    def overrides(self, overrides):
        """Sets the overrides of this PutSigningProfileRequest.


        :param overrides: The overrides of this PutSigningProfileRequest.
        :type overrides: PutSigningProfileRequestOverrides
        """

        self._overrides = overrides

    @property
    def signing_parameters(self):
        """Gets the signing_parameters of this PutSigningProfileRequest.

        Map of key-value pairs for signing. These can include any information that you want to use during signing.

        :return: The signing_parameters of this PutSigningProfileRequest.
        :rtype: Dict[str, str]
        """
        return self._signing_parameters

    @signing_parameters.setter
    def signing_parameters(self, signing_parameters):
        """Sets the signing_parameters of this PutSigningProfileRequest.

        Map of key-value pairs for signing. These can include any information that you want to use during signing.

        :param signing_parameters: The signing_parameters of this PutSigningProfileRequest.
        :type signing_parameters: Dict[str, str]
        """

        self._signing_parameters = signing_parameters

    @property
    def tags(self):
        """Gets the tags of this PutSigningProfileRequest.

        Tags to be associated with the signing profile that is being created.

        :return: The tags of this PutSigningProfileRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this PutSigningProfileRequest.

        Tags to be associated with the signing profile that is being created.

        :param tags: The tags of this PutSigningProfileRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 200:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `200`")
        if tags is not None and len(tags) < 1:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `1`")

        self._tags = tags
