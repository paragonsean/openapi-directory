# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class RevokeSignatureRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, job_owner: str=None, reason: str=None):
        """RevokeSignatureRequest - a model defined in OpenAPI

        :param job_owner: The job_owner of this RevokeSignatureRequest.
        :param reason: The reason of this RevokeSignatureRequest.
        """
        self.openapi_types = {
            'job_owner': str,
            'reason': str
        }

        self.attribute_map = {
            'job_owner': 'jobOwner',
            'reason': 'reason'
        }

        self._job_owner = job_owner
        self._reason = reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RevokeSignatureRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RevokeSignature_request of this RevokeSignatureRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def job_owner(self):
        """Gets the job_owner of this RevokeSignatureRequest.

        AWS account ID of the job owner.

        :return: The job_owner of this RevokeSignatureRequest.
        :rtype: str
        """
        return self._job_owner

    @job_owner.setter
    def job_owner(self, job_owner):
        """Sets the job_owner of this RevokeSignatureRequest.

        AWS account ID of the job owner.

        :param job_owner: The job_owner of this RevokeSignatureRequest.
        :type job_owner: str
        """
        if job_owner is not None and len(job_owner) > 12:
            raise ValueError("Invalid value for `job_owner`, length must be less than or equal to `12`")
        if job_owner is not None and len(job_owner) < 12:
            raise ValueError("Invalid value for `job_owner`, length must be greater than or equal to `12`")
        if job_owner is not None and not re.search(r'^[0-9]{12}$', job_owner):
            raise ValueError("Invalid value for `job_owner`, must be a follow pattern or equal to `/^[0-9]{12}$/`")

        self._job_owner = job_owner

    @property
    def reason(self):
        """Gets the reason of this RevokeSignatureRequest.

        The reason for revoking the signing job.

        :return: The reason of this RevokeSignatureRequest.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this RevokeSignatureRequest.

        The reason for revoking the signing job.

        :param reason: The reason of this RevokeSignatureRequest.
        :type reason: str
        """
        if reason is None:
            raise ValueError("Invalid value for `reason`, must not be `None`")
        if reason is not None and len(reason) > 500:
            raise ValueError("Invalid value for `reason`, length must be less than or equal to `500`")
        if reason is not None and len(reason) < 1:
            raise ValueError("Invalid value for `reason`, length must be greater than or equal to `1`")

        self._reason = reason
