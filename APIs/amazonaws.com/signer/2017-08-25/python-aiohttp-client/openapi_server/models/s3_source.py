# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class S3Source(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bucket_name: str=None, key: str=None, version: str=None):
        """S3Source - a model defined in OpenAPI

        :param bucket_name: The bucket_name of this S3Source.
        :param key: The key of this S3Source.
        :param version: The version of this S3Source.
        """
        self.openapi_types = {
            'bucket_name': str,
            'key': str,
            'version': str
        }

        self.attribute_map = {
            'bucket_name': 'bucketName',
            'key': 'key',
            'version': 'version'
        }

        self._bucket_name = bucket_name
        self._key = key
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'S3Source':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The S3Source of this S3Source.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bucket_name(self):
        """Gets the bucket_name of this S3Source.


        :return: The bucket_name of this S3Source.
        :rtype: str
        """
        return self._bucket_name

    @bucket_name.setter
    def bucket_name(self, bucket_name):
        """Sets the bucket_name of this S3Source.


        :param bucket_name: The bucket_name of this S3Source.
        :type bucket_name: str
        """
        if bucket_name is None:
            raise ValueError("Invalid value for `bucket_name`, must not be `None`")

        self._bucket_name = bucket_name

    @property
    def key(self):
        """Gets the key of this S3Source.


        :return: The key of this S3Source.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this S3Source.


        :param key: The key of this S3Source.
        :type key: str
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")

        self._key = key

    @property
    def version(self):
        """Gets the version of this S3Source.


        :return: The version of this S3Source.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this S3Source.


        :param version: The version of this S3Source.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version
