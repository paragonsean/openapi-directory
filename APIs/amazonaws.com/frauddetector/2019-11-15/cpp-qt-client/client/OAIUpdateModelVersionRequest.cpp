/**
 * Amazon Fraud Detector
 * <p>This is the Amazon Fraud Detector API Reference. This guide is for developers who need detailed information about Amazon Fraud Detector API actions, data types, and errors. For more information about Amazon Fraud Detector features, see the <a href=\"https://docs.aws.amazon.com/frauddetector/latest/ug/\">Amazon Fraud Detector User Guide</a>.</p> <p>We provide the Query API as well as AWS software development kits (SDK) for Amazon Fraud Detector in Java and Python programming languages.</p> <p>The Amazon Fraud Detector Query API provides HTTPS requests that use the HTTP verb GET or POST and a Query parameter <code>Action</code>. AWS SDK provides libraries, sample code, tutorials, and other resources for software developers who prefer to build applications using language-specific APIs instead of submitting a request over HTTP or HTTPS. These libraries provide basic functions that automatically take care of tasks such as cryptographically signing your requests, retrying requests, and handling error responses, so that it is easier for you to get started. For more information about the AWS SDKs, go to <a href=\"https://aws.amazon.com/developer/tools/\">Tools to build on AWS</a> page, scroll down to the <b>SDK</b> section, and choose plus (+) sign to expand the section. </p>
 *
 * The version of the OpenAPI document: 2019-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateModelVersionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateModelVersionRequest::OAIUpdateModelVersionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateModelVersionRequest::OAIUpdateModelVersionRequest() {
    this->initializeModel();
}

OAIUpdateModelVersionRequest::~OAIUpdateModelVersionRequest() {}

void OAIUpdateModelVersionRequest::initializeModel() {

    m_model_id_isSet = false;
    m_model_id_isValid = false;

    m_model_type_isSet = false;
    m_model_type_isValid = false;

    m_major_version_number_isSet = false;
    m_major_version_number_isValid = false;

    m_external_events_detail_isSet = false;
    m_external_events_detail_isValid = false;

    m_ingested_events_detail_isSet = false;
    m_ingested_events_detail_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIUpdateModelVersionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateModelVersionRequest::fromJsonObject(QJsonObject json) {

    m_model_id_isValid = ::OpenAPI::fromJsonValue(m_model_id, json[QString("modelId")]);
    m_model_id_isSet = !json[QString("modelId")].isNull() && m_model_id_isValid;

    m_model_type_isValid = ::OpenAPI::fromJsonValue(m_model_type, json[QString("modelType")]);
    m_model_type_isSet = !json[QString("modelType")].isNull() && m_model_type_isValid;

    m_major_version_number_isValid = ::OpenAPI::fromJsonValue(m_major_version_number, json[QString("majorVersionNumber")]);
    m_major_version_number_isSet = !json[QString("majorVersionNumber")].isNull() && m_major_version_number_isValid;

    m_external_events_detail_isValid = ::OpenAPI::fromJsonValue(m_external_events_detail, json[QString("externalEventsDetail")]);
    m_external_events_detail_isSet = !json[QString("externalEventsDetail")].isNull() && m_external_events_detail_isValid;

    m_ingested_events_detail_isValid = ::OpenAPI::fromJsonValue(m_ingested_events_detail, json[QString("ingestedEventsDetail")]);
    m_ingested_events_detail_isSet = !json[QString("ingestedEventsDetail")].isNull() && m_ingested_events_detail_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIUpdateModelVersionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateModelVersionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_model_id_isSet) {
        obj.insert(QString("modelId"), ::OpenAPI::toJsonValue(m_model_id));
    }
    if (m_model_type.isSet()) {
        obj.insert(QString("modelType"), ::OpenAPI::toJsonValue(m_model_type));
    }
    if (m_major_version_number_isSet) {
        obj.insert(QString("majorVersionNumber"), ::OpenAPI::toJsonValue(m_major_version_number));
    }
    if (m_external_events_detail.isSet()) {
        obj.insert(QString("externalEventsDetail"), ::OpenAPI::toJsonValue(m_external_events_detail));
    }
    if (m_ingested_events_detail.isSet()) {
        obj.insert(QString("ingestedEventsDetail"), ::OpenAPI::toJsonValue(m_ingested_events_detail));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIUpdateModelVersionRequest::getModelId() const {
    return m_model_id;
}
void OAIUpdateModelVersionRequest::setModelId(const QString &model_id) {
    m_model_id = model_id;
    m_model_id_isSet = true;
}

bool OAIUpdateModelVersionRequest::is_model_id_Set() const{
    return m_model_id_isSet;
}

bool OAIUpdateModelVersionRequest::is_model_id_Valid() const{
    return m_model_id_isValid;
}

OAIModelTypeEnum OAIUpdateModelVersionRequest::getModelType() const {
    return m_model_type;
}
void OAIUpdateModelVersionRequest::setModelType(const OAIModelTypeEnum &model_type) {
    m_model_type = model_type;
    m_model_type_isSet = true;
}

bool OAIUpdateModelVersionRequest::is_model_type_Set() const{
    return m_model_type_isSet;
}

bool OAIUpdateModelVersionRequest::is_model_type_Valid() const{
    return m_model_type_isValid;
}

QString OAIUpdateModelVersionRequest::getMajorVersionNumber() const {
    return m_major_version_number;
}
void OAIUpdateModelVersionRequest::setMajorVersionNumber(const QString &major_version_number) {
    m_major_version_number = major_version_number;
    m_major_version_number_isSet = true;
}

bool OAIUpdateModelVersionRequest::is_major_version_number_Set() const{
    return m_major_version_number_isSet;
}

bool OAIUpdateModelVersionRequest::is_major_version_number_Valid() const{
    return m_major_version_number_isValid;
}

OAIUpdateModelVersionRequest_externalEventsDetail OAIUpdateModelVersionRequest::getExternalEventsDetail() const {
    return m_external_events_detail;
}
void OAIUpdateModelVersionRequest::setExternalEventsDetail(const OAIUpdateModelVersionRequest_externalEventsDetail &external_events_detail) {
    m_external_events_detail = external_events_detail;
    m_external_events_detail_isSet = true;
}

bool OAIUpdateModelVersionRequest::is_external_events_detail_Set() const{
    return m_external_events_detail_isSet;
}

bool OAIUpdateModelVersionRequest::is_external_events_detail_Valid() const{
    return m_external_events_detail_isValid;
}

OAIUpdateModelVersionRequest_ingestedEventsDetail OAIUpdateModelVersionRequest::getIngestedEventsDetail() const {
    return m_ingested_events_detail;
}
void OAIUpdateModelVersionRequest::setIngestedEventsDetail(const OAIUpdateModelVersionRequest_ingestedEventsDetail &ingested_events_detail) {
    m_ingested_events_detail = ingested_events_detail;
    m_ingested_events_detail_isSet = true;
}

bool OAIUpdateModelVersionRequest::is_ingested_events_detail_Set() const{
    return m_ingested_events_detail_isSet;
}

bool OAIUpdateModelVersionRequest::is_ingested_events_detail_Valid() const{
    return m_ingested_events_detail_isValid;
}

QList OAIUpdateModelVersionRequest::getTags() const {
    return m_tags;
}
void OAIUpdateModelVersionRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIUpdateModelVersionRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIUpdateModelVersionRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIUpdateModelVersionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_model_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_major_version_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_events_detail.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ingested_events_detail.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateModelVersionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_model_id_isValid && m_model_type_isValid && m_major_version_number_isValid && true;
}

} // namespace OpenAPI
