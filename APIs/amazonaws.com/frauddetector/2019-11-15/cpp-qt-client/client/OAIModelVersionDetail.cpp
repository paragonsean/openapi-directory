/**
 * Amazon Fraud Detector
 * <p>This is the Amazon Fraud Detector API Reference. This guide is for developers who need detailed information about Amazon Fraud Detector API actions, data types, and errors. For more information about Amazon Fraud Detector features, see the <a href=\"https://docs.aws.amazon.com/frauddetector/latest/ug/\">Amazon Fraud Detector User Guide</a>.</p> <p>We provide the Query API as well as AWS software development kits (SDK) for Amazon Fraud Detector in Java and Python programming languages.</p> <p>The Amazon Fraud Detector Query API provides HTTPS requests that use the HTTP verb GET or POST and a Query parameter <code>Action</code>. AWS SDK provides libraries, sample code, tutorials, and other resources for software developers who prefer to build applications using language-specific APIs instead of submitting a request over HTTP or HTTPS. These libraries provide basic functions that automatically take care of tasks such as cryptographically signing your requests, retrying requests, and handling error responses, so that it is easier for you to get started. For more information about the AWS SDKs, go to <a href=\"https://aws.amazon.com/developer/tools/\">Tools to build on AWS</a> page, scroll down to the <b>SDK</b> section, and choose plus (+) sign to expand the section. </p>
 *
 * The version of the OpenAPI document: 2019-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModelVersionDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModelVersionDetail::OAIModelVersionDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModelVersionDetail::OAIModelVersionDetail() {
    this->initializeModel();
}

OAIModelVersionDetail::~OAIModelVersionDetail() {}

void OAIModelVersionDetail::initializeModel() {

    m_model_id_isSet = false;
    m_model_id_isValid = false;

    m_model_type_isSet = false;
    m_model_type_isValid = false;

    m_model_version_number_isSet = false;
    m_model_version_number_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_training_data_source_isSet = false;
    m_training_data_source_isValid = false;

    m_training_data_schema_isSet = false;
    m_training_data_schema_isValid = false;

    m_external_events_detail_isSet = false;
    m_external_events_detail_isValid = false;

    m_ingested_events_detail_isSet = false;
    m_ingested_events_detail_isValid = false;

    m_training_result_isSet = false;
    m_training_result_isValid = false;

    m_last_updated_time_isSet = false;
    m_last_updated_time_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_training_result_v2_isSet = false;
    m_training_result_v2_isValid = false;
}

void OAIModelVersionDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModelVersionDetail::fromJsonObject(QJsonObject json) {

    m_model_id_isValid = ::OpenAPI::fromJsonValue(m_model_id, json[QString("modelId")]);
    m_model_id_isSet = !json[QString("modelId")].isNull() && m_model_id_isValid;

    m_model_type_isValid = ::OpenAPI::fromJsonValue(m_model_type, json[QString("modelType")]);
    m_model_type_isSet = !json[QString("modelType")].isNull() && m_model_type_isValid;

    m_model_version_number_isValid = ::OpenAPI::fromJsonValue(m_model_version_number, json[QString("modelVersionNumber")]);
    m_model_version_number_isSet = !json[QString("modelVersionNumber")].isNull() && m_model_version_number_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_training_data_source_isValid = ::OpenAPI::fromJsonValue(m_training_data_source, json[QString("trainingDataSource")]);
    m_training_data_source_isSet = !json[QString("trainingDataSource")].isNull() && m_training_data_source_isValid;

    m_training_data_schema_isValid = ::OpenAPI::fromJsonValue(m_training_data_schema, json[QString("trainingDataSchema")]);
    m_training_data_schema_isSet = !json[QString("trainingDataSchema")].isNull() && m_training_data_schema_isValid;

    m_external_events_detail_isValid = ::OpenAPI::fromJsonValue(m_external_events_detail, json[QString("externalEventsDetail")]);
    m_external_events_detail_isSet = !json[QString("externalEventsDetail")].isNull() && m_external_events_detail_isValid;

    m_ingested_events_detail_isValid = ::OpenAPI::fromJsonValue(m_ingested_events_detail, json[QString("ingestedEventsDetail")]);
    m_ingested_events_detail_isSet = !json[QString("ingestedEventsDetail")].isNull() && m_ingested_events_detail_isValid;

    m_training_result_isValid = ::OpenAPI::fromJsonValue(m_training_result, json[QString("trainingResult")]);
    m_training_result_isSet = !json[QString("trainingResult")].isNull() && m_training_result_isValid;

    m_last_updated_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time, json[QString("lastUpdatedTime")]);
    m_last_updated_time_isSet = !json[QString("lastUpdatedTime")].isNull() && m_last_updated_time_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("createdTime")]);
    m_created_time_isSet = !json[QString("createdTime")].isNull() && m_created_time_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_training_result_v2_isValid = ::OpenAPI::fromJsonValue(m_training_result_v2, json[QString("trainingResultV2")]);
    m_training_result_v2_isSet = !json[QString("trainingResultV2")].isNull() && m_training_result_v2_isValid;
}

QString OAIModelVersionDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModelVersionDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_model_id_isSet) {
        obj.insert(QString("modelId"), ::OpenAPI::toJsonValue(m_model_id));
    }
    if (m_model_type.isSet()) {
        obj.insert(QString("modelType"), ::OpenAPI::toJsonValue(m_model_type));
    }
    if (m_model_version_number_isSet) {
        obj.insert(QString("modelVersionNumber"), ::OpenAPI::toJsonValue(m_model_version_number));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_training_data_source.isSet()) {
        obj.insert(QString("trainingDataSource"), ::OpenAPI::toJsonValue(m_training_data_source));
    }
    if (m_training_data_schema.isSet()) {
        obj.insert(QString("trainingDataSchema"), ::OpenAPI::toJsonValue(m_training_data_schema));
    }
    if (m_external_events_detail.isSet()) {
        obj.insert(QString("externalEventsDetail"), ::OpenAPI::toJsonValue(m_external_events_detail));
    }
    if (m_ingested_events_detail.isSet()) {
        obj.insert(QString("ingestedEventsDetail"), ::OpenAPI::toJsonValue(m_ingested_events_detail));
    }
    if (m_training_result.isSet()) {
        obj.insert(QString("trainingResult"), ::OpenAPI::toJsonValue(m_training_result));
    }
    if (m_last_updated_time_isSet) {
        obj.insert(QString("lastUpdatedTime"), ::OpenAPI::toJsonValue(m_last_updated_time));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("createdTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_training_result_v2.isSet()) {
        obj.insert(QString("trainingResultV2"), ::OpenAPI::toJsonValue(m_training_result_v2));
    }
    return obj;
}

QString OAIModelVersionDetail::getModelId() const {
    return m_model_id;
}
void OAIModelVersionDetail::setModelId(const QString &model_id) {
    m_model_id = model_id;
    m_model_id_isSet = true;
}

bool OAIModelVersionDetail::is_model_id_Set() const{
    return m_model_id_isSet;
}

bool OAIModelVersionDetail::is_model_id_Valid() const{
    return m_model_id_isValid;
}

OAIModelTypeEnum OAIModelVersionDetail::getModelType() const {
    return m_model_type;
}
void OAIModelVersionDetail::setModelType(const OAIModelTypeEnum &model_type) {
    m_model_type = model_type;
    m_model_type_isSet = true;
}

bool OAIModelVersionDetail::is_model_type_Set() const{
    return m_model_type_isSet;
}

bool OAIModelVersionDetail::is_model_type_Valid() const{
    return m_model_type_isValid;
}

QString OAIModelVersionDetail::getModelVersionNumber() const {
    return m_model_version_number;
}
void OAIModelVersionDetail::setModelVersionNumber(const QString &model_version_number) {
    m_model_version_number = model_version_number;
    m_model_version_number_isSet = true;
}

bool OAIModelVersionDetail::is_model_version_number_Set() const{
    return m_model_version_number_isSet;
}

bool OAIModelVersionDetail::is_model_version_number_Valid() const{
    return m_model_version_number_isValid;
}

QString OAIModelVersionDetail::getStatus() const {
    return m_status;
}
void OAIModelVersionDetail::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIModelVersionDetail::is_status_Set() const{
    return m_status_isSet;
}

bool OAIModelVersionDetail::is_status_Valid() const{
    return m_status_isValid;
}

OAITrainingDataSourceEnum OAIModelVersionDetail::getTrainingDataSource() const {
    return m_training_data_source;
}
void OAIModelVersionDetail::setTrainingDataSource(const OAITrainingDataSourceEnum &training_data_source) {
    m_training_data_source = training_data_source;
    m_training_data_source_isSet = true;
}

bool OAIModelVersionDetail::is_training_data_source_Set() const{
    return m_training_data_source_isSet;
}

bool OAIModelVersionDetail::is_training_data_source_Valid() const{
    return m_training_data_source_isValid;
}

OAICreateModelVersionRequest_trainingDataSchema OAIModelVersionDetail::getTrainingDataSchema() const {
    return m_training_data_schema;
}
void OAIModelVersionDetail::setTrainingDataSchema(const OAICreateModelVersionRequest_trainingDataSchema &training_data_schema) {
    m_training_data_schema = training_data_schema;
    m_training_data_schema_isSet = true;
}

bool OAIModelVersionDetail::is_training_data_schema_Set() const{
    return m_training_data_schema_isSet;
}

bool OAIModelVersionDetail::is_training_data_schema_Valid() const{
    return m_training_data_schema_isValid;
}

OAIModelVersionDetail_externalEventsDetail OAIModelVersionDetail::getExternalEventsDetail() const {
    return m_external_events_detail;
}
void OAIModelVersionDetail::setExternalEventsDetail(const OAIModelVersionDetail_externalEventsDetail &external_events_detail) {
    m_external_events_detail = external_events_detail;
    m_external_events_detail_isSet = true;
}

bool OAIModelVersionDetail::is_external_events_detail_Set() const{
    return m_external_events_detail_isSet;
}

bool OAIModelVersionDetail::is_external_events_detail_Valid() const{
    return m_external_events_detail_isValid;
}

OAIModelVersionDetail_ingestedEventsDetail OAIModelVersionDetail::getIngestedEventsDetail() const {
    return m_ingested_events_detail;
}
void OAIModelVersionDetail::setIngestedEventsDetail(const OAIModelVersionDetail_ingestedEventsDetail &ingested_events_detail) {
    m_ingested_events_detail = ingested_events_detail;
    m_ingested_events_detail_isSet = true;
}

bool OAIModelVersionDetail::is_ingested_events_detail_Set() const{
    return m_ingested_events_detail_isSet;
}

bool OAIModelVersionDetail::is_ingested_events_detail_Valid() const{
    return m_ingested_events_detail_isValid;
}

OAIModelVersionDetail_trainingResult OAIModelVersionDetail::getTrainingResult() const {
    return m_training_result;
}
void OAIModelVersionDetail::setTrainingResult(const OAIModelVersionDetail_trainingResult &training_result) {
    m_training_result = training_result;
    m_training_result_isSet = true;
}

bool OAIModelVersionDetail::is_training_result_Set() const{
    return m_training_result_isSet;
}

bool OAIModelVersionDetail::is_training_result_Valid() const{
    return m_training_result_isValid;
}

QString OAIModelVersionDetail::getLastUpdatedTime() const {
    return m_last_updated_time;
}
void OAIModelVersionDetail::setLastUpdatedTime(const QString &last_updated_time) {
    m_last_updated_time = last_updated_time;
    m_last_updated_time_isSet = true;
}

bool OAIModelVersionDetail::is_last_updated_time_Set() const{
    return m_last_updated_time_isSet;
}

bool OAIModelVersionDetail::is_last_updated_time_Valid() const{
    return m_last_updated_time_isValid;
}

QString OAIModelVersionDetail::getCreatedTime() const {
    return m_created_time;
}
void OAIModelVersionDetail::setCreatedTime(const QString &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIModelVersionDetail::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIModelVersionDetail::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QString OAIModelVersionDetail::getArn() const {
    return m_arn;
}
void OAIModelVersionDetail::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIModelVersionDetail::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIModelVersionDetail::is_arn_Valid() const{
    return m_arn_isValid;
}

OAIModelVersionDetail_trainingResultV2 OAIModelVersionDetail::getTrainingResultV2() const {
    return m_training_result_v2;
}
void OAIModelVersionDetail::setTrainingResultV2(const OAIModelVersionDetail_trainingResultV2 &training_result_v2) {
    m_training_result_v2 = training_result_v2;
    m_training_result_v2_isSet = true;
}

bool OAIModelVersionDetail::is_training_result_v2_Set() const{
    return m_training_result_v2_isSet;
}

bool OAIModelVersionDetail::is_training_result_v2_Valid() const{
    return m_training_result_v2_isValid;
}

bool OAIModelVersionDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_model_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_version_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_training_data_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_training_data_schema.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_events_detail.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ingested_events_detail.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_training_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_training_result_v2.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModelVersionDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
