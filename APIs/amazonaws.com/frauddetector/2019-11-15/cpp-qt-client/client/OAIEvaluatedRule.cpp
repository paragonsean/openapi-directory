/**
 * Amazon Fraud Detector
 * <p>This is the Amazon Fraud Detector API Reference. This guide is for developers who need detailed information about Amazon Fraud Detector API actions, data types, and errors. For more information about Amazon Fraud Detector features, see the <a href=\"https://docs.aws.amazon.com/frauddetector/latest/ug/\">Amazon Fraud Detector User Guide</a>.</p> <p>We provide the Query API as well as AWS software development kits (SDK) for Amazon Fraud Detector in Java and Python programming languages.</p> <p>The Amazon Fraud Detector Query API provides HTTPS requests that use the HTTP verb GET or POST and a Query parameter <code>Action</code>. AWS SDK provides libraries, sample code, tutorials, and other resources for software developers who prefer to build applications using language-specific APIs instead of submitting a request over HTTP or HTTPS. These libraries provide basic functions that automatically take care of tasks such as cryptographically signing your requests, retrying requests, and handling error responses, so that it is easier for you to get started. For more information about the AWS SDKs, go to <a href=\"https://aws.amazon.com/developer/tools/\">Tools to build on AWS</a> page, scroll down to the <b>SDK</b> section, and choose plus (+) sign to expand the section. </p>
 *
 * The version of the OpenAPI document: 2019-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvaluatedRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvaluatedRule::OAIEvaluatedRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvaluatedRule::OAIEvaluatedRule() {
    this->initializeModel();
}

OAIEvaluatedRule::~OAIEvaluatedRule() {}

void OAIEvaluatedRule::initializeModel() {

    m_rule_id_isSet = false;
    m_rule_id_isValid = false;

    m_rule_version_isSet = false;
    m_rule_version_isValid = false;

    m_expression_isSet = false;
    m_expression_isValid = false;

    m_expression_with_values_isSet = false;
    m_expression_with_values_isValid = false;

    m_outcomes_isSet = false;
    m_outcomes_isValid = false;

    m_evaluated_isSet = false;
    m_evaluated_isValid = false;

    m_matched_isSet = false;
    m_matched_isValid = false;
}

void OAIEvaluatedRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvaluatedRule::fromJsonObject(QJsonObject json) {

    m_rule_id_isValid = ::OpenAPI::fromJsonValue(m_rule_id, json[QString("ruleId")]);
    m_rule_id_isSet = !json[QString("ruleId")].isNull() && m_rule_id_isValid;

    m_rule_version_isValid = ::OpenAPI::fromJsonValue(m_rule_version, json[QString("ruleVersion")]);
    m_rule_version_isSet = !json[QString("ruleVersion")].isNull() && m_rule_version_isValid;

    m_expression_isValid = ::OpenAPI::fromJsonValue(m_expression, json[QString("expression")]);
    m_expression_isSet = !json[QString("expression")].isNull() && m_expression_isValid;

    m_expression_with_values_isValid = ::OpenAPI::fromJsonValue(m_expression_with_values, json[QString("expressionWithValues")]);
    m_expression_with_values_isSet = !json[QString("expressionWithValues")].isNull() && m_expression_with_values_isValid;

    m_outcomes_isValid = ::OpenAPI::fromJsonValue(m_outcomes, json[QString("outcomes")]);
    m_outcomes_isSet = !json[QString("outcomes")].isNull() && m_outcomes_isValid;

    m_evaluated_isValid = ::OpenAPI::fromJsonValue(m_evaluated, json[QString("evaluated")]);
    m_evaluated_isSet = !json[QString("evaluated")].isNull() && m_evaluated_isValid;

    m_matched_isValid = ::OpenAPI::fromJsonValue(m_matched, json[QString("matched")]);
    m_matched_isSet = !json[QString("matched")].isNull() && m_matched_isValid;
}

QString OAIEvaluatedRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvaluatedRule::asJsonObject() const {
    QJsonObject obj;
    if (m_rule_id_isSet) {
        obj.insert(QString("ruleId"), ::OpenAPI::toJsonValue(m_rule_id));
    }
    if (m_rule_version_isSet) {
        obj.insert(QString("ruleVersion"), ::OpenAPI::toJsonValue(m_rule_version));
    }
    if (m_expression_isSet) {
        obj.insert(QString("expression"), ::OpenAPI::toJsonValue(m_expression));
    }
    if (m_expression_with_values_isSet) {
        obj.insert(QString("expressionWithValues"), ::OpenAPI::toJsonValue(m_expression_with_values));
    }
    if (m_outcomes.isSet()) {
        obj.insert(QString("outcomes"), ::OpenAPI::toJsonValue(m_outcomes));
    }
    if (m_evaluated_isSet) {
        obj.insert(QString("evaluated"), ::OpenAPI::toJsonValue(m_evaluated));
    }
    if (m_matched_isSet) {
        obj.insert(QString("matched"), ::OpenAPI::toJsonValue(m_matched));
    }
    return obj;
}

QString OAIEvaluatedRule::getRuleId() const {
    return m_rule_id;
}
void OAIEvaluatedRule::setRuleId(const QString &rule_id) {
    m_rule_id = rule_id;
    m_rule_id_isSet = true;
}

bool OAIEvaluatedRule::is_rule_id_Set() const{
    return m_rule_id_isSet;
}

bool OAIEvaluatedRule::is_rule_id_Valid() const{
    return m_rule_id_isValid;
}

QString OAIEvaluatedRule::getRuleVersion() const {
    return m_rule_version;
}
void OAIEvaluatedRule::setRuleVersion(const QString &rule_version) {
    m_rule_version = rule_version;
    m_rule_version_isSet = true;
}

bool OAIEvaluatedRule::is_rule_version_Set() const{
    return m_rule_version_isSet;
}

bool OAIEvaluatedRule::is_rule_version_Valid() const{
    return m_rule_version_isValid;
}

QString OAIEvaluatedRule::getExpression() const {
    return m_expression;
}
void OAIEvaluatedRule::setExpression(const QString &expression) {
    m_expression = expression;
    m_expression_isSet = true;
}

bool OAIEvaluatedRule::is_expression_Set() const{
    return m_expression_isSet;
}

bool OAIEvaluatedRule::is_expression_Valid() const{
    return m_expression_isValid;
}

QString OAIEvaluatedRule::getExpressionWithValues() const {
    return m_expression_with_values;
}
void OAIEvaluatedRule::setExpressionWithValues(const QString &expression_with_values) {
    m_expression_with_values = expression_with_values;
    m_expression_with_values_isSet = true;
}

bool OAIEvaluatedRule::is_expression_with_values_Set() const{
    return m_expression_with_values_isSet;
}

bool OAIEvaluatedRule::is_expression_with_values_Valid() const{
    return m_expression_with_values_isValid;
}

QList OAIEvaluatedRule::getOutcomes() const {
    return m_outcomes;
}
void OAIEvaluatedRule::setOutcomes(const QList &outcomes) {
    m_outcomes = outcomes;
    m_outcomes_isSet = true;
}

bool OAIEvaluatedRule::is_outcomes_Set() const{
    return m_outcomes_isSet;
}

bool OAIEvaluatedRule::is_outcomes_Valid() const{
    return m_outcomes_isValid;
}

bool OAIEvaluatedRule::getEvaluated() const {
    return m_evaluated;
}
void OAIEvaluatedRule::setEvaluated(const bool &evaluated) {
    m_evaluated = evaluated;
    m_evaluated_isSet = true;
}

bool OAIEvaluatedRule::is_evaluated_Set() const{
    return m_evaluated_isSet;
}

bool OAIEvaluatedRule::is_evaluated_Valid() const{
    return m_evaluated_isValid;
}

bool OAIEvaluatedRule::getMatched() const {
    return m_matched;
}
void OAIEvaluatedRule::setMatched(const bool &matched) {
    m_matched = matched;
    m_matched_isSet = true;
}

bool OAIEvaluatedRule::is_matched_Set() const{
    return m_matched_isSet;
}

bool OAIEvaluatedRule::is_matched_Valid() const{
    return m_matched_isValid;
}

bool OAIEvaluatedRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rule_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expression_with_values_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outcomes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_evaluated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_matched_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvaluatedRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
