/**
 * Amazon Fraud Detector
 * <p>This is the Amazon Fraud Detector API Reference. This guide is for developers who need detailed information about Amazon Fraud Detector API actions, data types, and errors. For more information about Amazon Fraud Detector features, see the <a href=\"https://docs.aws.amazon.com/frauddetector/latest/ug/\">Amazon Fraud Detector User Guide</a>.</p> <p>We provide the Query API as well as AWS software development kits (SDK) for Amazon Fraud Detector in Java and Python programming languages.</p> <p>The Amazon Fraud Detector Query API provides HTTPS requests that use the HTTP verb GET or POST and a Query parameter <code>Action</code>. AWS SDK provides libraries, sample code, tutorials, and other resources for software developers who prefer to build applications using language-specific APIs instead of submitting a request over HTTP or HTTPS. These libraries provide basic functions that automatically take care of tasks such as cryptographically signing your requests, retrying requests, and handling error responses, so that it is easier for you to get started. For more information about the AWS SDKs, go to <a href=\"https://aws.amazon.com/developer/tools/\">Tools to build on AWS</a> page, scroll down to the <b>SDK</b> section, and choose plus (+) sign to expand the section. </p>
 *
 * The version of the OpenAPI document: 2019-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateRuleVersionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateRuleVersionRequest::OAIUpdateRuleVersionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateRuleVersionRequest::OAIUpdateRuleVersionRequest() {
    this->initializeModel();
}

OAIUpdateRuleVersionRequest::~OAIUpdateRuleVersionRequest() {}

void OAIUpdateRuleVersionRequest::initializeModel() {

    m_rule_isSet = false;
    m_rule_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_expression_isSet = false;
    m_expression_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_outcomes_isSet = false;
    m_outcomes_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIUpdateRuleVersionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateRuleVersionRequest::fromJsonObject(QJsonObject json) {

    m_rule_isValid = ::OpenAPI::fromJsonValue(m_rule, json[QString("rule")]);
    m_rule_isSet = !json[QString("rule")].isNull() && m_rule_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_expression_isValid = ::OpenAPI::fromJsonValue(m_expression, json[QString("expression")]);
    m_expression_isSet = !json[QString("expression")].isNull() && m_expression_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_outcomes_isValid = ::OpenAPI::fromJsonValue(m_outcomes, json[QString("outcomes")]);
    m_outcomes_isSet = !json[QString("outcomes")].isNull() && m_outcomes_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIUpdateRuleVersionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateRuleVersionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_rule.isSet()) {
        obj.insert(QString("rule"), ::OpenAPI::toJsonValue(m_rule));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_expression_isSet) {
        obj.insert(QString("expression"), ::OpenAPI::toJsonValue(m_expression));
    }
    if (m_language.isSet()) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_outcomes.isSet()) {
        obj.insert(QString("outcomes"), ::OpenAPI::toJsonValue(m_outcomes));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

OAIUpdateRuleMetadataRequest_rule OAIUpdateRuleVersionRequest::getRule() const {
    return m_rule;
}
void OAIUpdateRuleVersionRequest::setRule(const OAIUpdateRuleMetadataRequest_rule &rule) {
    m_rule = rule;
    m_rule_isSet = true;
}

bool OAIUpdateRuleVersionRequest::is_rule_Set() const{
    return m_rule_isSet;
}

bool OAIUpdateRuleVersionRequest::is_rule_Valid() const{
    return m_rule_isValid;
}

QString OAIUpdateRuleVersionRequest::getDescription() const {
    return m_description;
}
void OAIUpdateRuleVersionRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpdateRuleVersionRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdateRuleVersionRequest::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIUpdateRuleVersionRequest::getExpression() const {
    return m_expression;
}
void OAIUpdateRuleVersionRequest::setExpression(const QString &expression) {
    m_expression = expression;
    m_expression_isSet = true;
}

bool OAIUpdateRuleVersionRequest::is_expression_Set() const{
    return m_expression_isSet;
}

bool OAIUpdateRuleVersionRequest::is_expression_Valid() const{
    return m_expression_isValid;
}

OAILanguage OAIUpdateRuleVersionRequest::getLanguage() const {
    return m_language;
}
void OAIUpdateRuleVersionRequest::setLanguage(const OAILanguage &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIUpdateRuleVersionRequest::is_language_Set() const{
    return m_language_isSet;
}

bool OAIUpdateRuleVersionRequest::is_language_Valid() const{
    return m_language_isValid;
}

QList OAIUpdateRuleVersionRequest::getOutcomes() const {
    return m_outcomes;
}
void OAIUpdateRuleVersionRequest::setOutcomes(const QList &outcomes) {
    m_outcomes = outcomes;
    m_outcomes_isSet = true;
}

bool OAIUpdateRuleVersionRequest::is_outcomes_Set() const{
    return m_outcomes_isSet;
}

bool OAIUpdateRuleVersionRequest::is_outcomes_Valid() const{
    return m_outcomes_isValid;
}

QList OAIUpdateRuleVersionRequest::getTags() const {
    return m_tags;
}
void OAIUpdateRuleVersionRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIUpdateRuleVersionRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIUpdateRuleVersionRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIUpdateRuleVersionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_outcomes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateRuleVersionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_rule_isValid && m_expression_isValid && m_language_isValid && m_outcomes_isValid && true;
}

} // namespace OpenAPI
