/**
 * Amazon Fraud Detector
 * <p>This is the Amazon Fraud Detector API Reference. This guide is for developers who need detailed information about Amazon Fraud Detector API actions, data types, and errors. For more information about Amazon Fraud Detector features, see the <a href=\"https://docs.aws.amazon.com/frauddetector/latest/ug/\">Amazon Fraud Detector User Guide</a>.</p> <p>We provide the Query API as well as AWS software development kits (SDK) for Amazon Fraud Detector in Java and Python programming languages.</p> <p>The Amazon Fraud Detector Query API provides HTTPS requests that use the HTTP verb GET or POST and a Query parameter <code>Action</code>. AWS SDK provides libraries, sample code, tutorials, and other resources for software developers who prefer to build applications using language-specific APIs instead of submitting a request over HTTP or HTTPS. These libraries provide basic functions that automatically take care of tasks such as cryptographically signing your requests, retrying requests, and handling error responses, so that it is easier for you to get started. For more information about the AWS SDKs, go to <a href=\"https://aws.amazon.com/developer/tools/\">Tools to build on AWS</a> page, scroll down to the <b>SDK</b> section, and choose plus (+) sign to expand the section. </p>
 *
 * The version of the OpenAPI document: 2019-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRuleDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRuleDetail::OAIRuleDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRuleDetail::OAIRuleDetail() {
    this->initializeModel();
}

OAIRuleDetail::~OAIRuleDetail() {}

void OAIRuleDetail::initializeModel() {

    m_rule_id_isSet = false;
    m_rule_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_detector_id_isSet = false;
    m_detector_id_isValid = false;

    m_rule_version_isSet = false;
    m_rule_version_isValid = false;

    m_expression_isSet = false;
    m_expression_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_outcomes_isSet = false;
    m_outcomes_isValid = false;

    m_last_updated_time_isSet = false;
    m_last_updated_time_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;
}

void OAIRuleDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRuleDetail::fromJsonObject(QJsonObject json) {

    m_rule_id_isValid = ::OpenAPI::fromJsonValue(m_rule_id, json[QString("ruleId")]);
    m_rule_id_isSet = !json[QString("ruleId")].isNull() && m_rule_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_detector_id_isValid = ::OpenAPI::fromJsonValue(m_detector_id, json[QString("detectorId")]);
    m_detector_id_isSet = !json[QString("detectorId")].isNull() && m_detector_id_isValid;

    m_rule_version_isValid = ::OpenAPI::fromJsonValue(m_rule_version, json[QString("ruleVersion")]);
    m_rule_version_isSet = !json[QString("ruleVersion")].isNull() && m_rule_version_isValid;

    m_expression_isValid = ::OpenAPI::fromJsonValue(m_expression, json[QString("expression")]);
    m_expression_isSet = !json[QString("expression")].isNull() && m_expression_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_outcomes_isValid = ::OpenAPI::fromJsonValue(m_outcomes, json[QString("outcomes")]);
    m_outcomes_isSet = !json[QString("outcomes")].isNull() && m_outcomes_isValid;

    m_last_updated_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time, json[QString("lastUpdatedTime")]);
    m_last_updated_time_isSet = !json[QString("lastUpdatedTime")].isNull() && m_last_updated_time_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("createdTime")]);
    m_created_time_isSet = !json[QString("createdTime")].isNull() && m_created_time_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;
}

QString OAIRuleDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRuleDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_rule_id_isSet) {
        obj.insert(QString("ruleId"), ::OpenAPI::toJsonValue(m_rule_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_detector_id_isSet) {
        obj.insert(QString("detectorId"), ::OpenAPI::toJsonValue(m_detector_id));
    }
    if (m_rule_version_isSet) {
        obj.insert(QString("ruleVersion"), ::OpenAPI::toJsonValue(m_rule_version));
    }
    if (m_expression_isSet) {
        obj.insert(QString("expression"), ::OpenAPI::toJsonValue(m_expression));
    }
    if (m_language.isSet()) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_outcomes.isSet()) {
        obj.insert(QString("outcomes"), ::OpenAPI::toJsonValue(m_outcomes));
    }
    if (m_last_updated_time_isSet) {
        obj.insert(QString("lastUpdatedTime"), ::OpenAPI::toJsonValue(m_last_updated_time));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("createdTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    return obj;
}

QString OAIRuleDetail::getRuleId() const {
    return m_rule_id;
}
void OAIRuleDetail::setRuleId(const QString &rule_id) {
    m_rule_id = rule_id;
    m_rule_id_isSet = true;
}

bool OAIRuleDetail::is_rule_id_Set() const{
    return m_rule_id_isSet;
}

bool OAIRuleDetail::is_rule_id_Valid() const{
    return m_rule_id_isValid;
}

QString OAIRuleDetail::getDescription() const {
    return m_description;
}
void OAIRuleDetail::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIRuleDetail::is_description_Set() const{
    return m_description_isSet;
}

bool OAIRuleDetail::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIRuleDetail::getDetectorId() const {
    return m_detector_id;
}
void OAIRuleDetail::setDetectorId(const QString &detector_id) {
    m_detector_id = detector_id;
    m_detector_id_isSet = true;
}

bool OAIRuleDetail::is_detector_id_Set() const{
    return m_detector_id_isSet;
}

bool OAIRuleDetail::is_detector_id_Valid() const{
    return m_detector_id_isValid;
}

QString OAIRuleDetail::getRuleVersion() const {
    return m_rule_version;
}
void OAIRuleDetail::setRuleVersion(const QString &rule_version) {
    m_rule_version = rule_version;
    m_rule_version_isSet = true;
}

bool OAIRuleDetail::is_rule_version_Set() const{
    return m_rule_version_isSet;
}

bool OAIRuleDetail::is_rule_version_Valid() const{
    return m_rule_version_isValid;
}

QString OAIRuleDetail::getExpression() const {
    return m_expression;
}
void OAIRuleDetail::setExpression(const QString &expression) {
    m_expression = expression;
    m_expression_isSet = true;
}

bool OAIRuleDetail::is_expression_Set() const{
    return m_expression_isSet;
}

bool OAIRuleDetail::is_expression_Valid() const{
    return m_expression_isValid;
}

OAILanguage OAIRuleDetail::getLanguage() const {
    return m_language;
}
void OAIRuleDetail::setLanguage(const OAILanguage &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIRuleDetail::is_language_Set() const{
    return m_language_isSet;
}

bool OAIRuleDetail::is_language_Valid() const{
    return m_language_isValid;
}

QList OAIRuleDetail::getOutcomes() const {
    return m_outcomes;
}
void OAIRuleDetail::setOutcomes(const QList &outcomes) {
    m_outcomes = outcomes;
    m_outcomes_isSet = true;
}

bool OAIRuleDetail::is_outcomes_Set() const{
    return m_outcomes_isSet;
}

bool OAIRuleDetail::is_outcomes_Valid() const{
    return m_outcomes_isValid;
}

QString OAIRuleDetail::getLastUpdatedTime() const {
    return m_last_updated_time;
}
void OAIRuleDetail::setLastUpdatedTime(const QString &last_updated_time) {
    m_last_updated_time = last_updated_time;
    m_last_updated_time_isSet = true;
}

bool OAIRuleDetail::is_last_updated_time_Set() const{
    return m_last_updated_time_isSet;
}

bool OAIRuleDetail::is_last_updated_time_Valid() const{
    return m_last_updated_time_isValid;
}

QString OAIRuleDetail::getCreatedTime() const {
    return m_created_time;
}
void OAIRuleDetail::setCreatedTime(const QString &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIRuleDetail::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIRuleDetail::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QString OAIRuleDetail::getArn() const {
    return m_arn;
}
void OAIRuleDetail::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIRuleDetail::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIRuleDetail::is_arn_Valid() const{
    return m_arn_isValid;
}

bool OAIRuleDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rule_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detector_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_outcomes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRuleDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
