/**
 * Amazon Fraud Detector
 * <p>This is the Amazon Fraud Detector API Reference. This guide is for developers who need detailed information about Amazon Fraud Detector API actions, data types, and errors. For more information about Amazon Fraud Detector features, see the <a href=\"https://docs.aws.amazon.com/frauddetector/latest/ug/\">Amazon Fraud Detector User Guide</a>.</p> <p>We provide the Query API as well as AWS software development kits (SDK) for Amazon Fraud Detector in Java and Python programming languages.</p> <p>The Amazon Fraud Detector Query API provides HTTPS requests that use the HTTP verb GET or POST and a Query parameter <code>Action</code>. AWS SDK provides libraries, sample code, tutorials, and other resources for software developers who prefer to build applications using language-specific APIs instead of submitting a request over HTTP or HTTPS. These libraries provide basic functions that automatically take care of tasks such as cryptographically signing your requests, retrying requests, and handling error responses, so that it is easier for you to get started. For more information about the AWS SDKs, go to <a href=\"https://aws.amazon.com/developer/tools/\">Tools to build on AWS</a> page, scroll down to the <b>SDK</b> section, and choose plus (+) sign to expand the section. </p>
 *
 * The version of the OpenAPI document: 2019-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetEventResult_event.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetEventResult_event::OAIGetEventResult_event(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetEventResult_event::OAIGetEventResult_event() {
    this->initializeModel();
}

OAIGetEventResult_event::~OAIGetEventResult_event() {}

void OAIGetEventResult_event::initializeModel() {

    m_event_id_isSet = false;
    m_event_id_isValid = false;

    m_event_type_name_isSet = false;
    m_event_type_name_isValid = false;

    m_event_timestamp_isSet = false;
    m_event_timestamp_isValid = false;

    m_event_variables_isSet = false;
    m_event_variables_isValid = false;

    m_current_label_isSet = false;
    m_current_label_isValid = false;

    m_label_timestamp_isSet = false;
    m_label_timestamp_isValid = false;

    m_entities_isSet = false;
    m_entities_isValid = false;
}

void OAIGetEventResult_event::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetEventResult_event::fromJsonObject(QJsonObject json) {

    m_event_id_isValid = ::OpenAPI::fromJsonValue(m_event_id, json[QString("eventId")]);
    m_event_id_isSet = !json[QString("eventId")].isNull() && m_event_id_isValid;

    m_event_type_name_isValid = ::OpenAPI::fromJsonValue(m_event_type_name, json[QString("eventTypeName")]);
    m_event_type_name_isSet = !json[QString("eventTypeName")].isNull() && m_event_type_name_isValid;

    m_event_timestamp_isValid = ::OpenAPI::fromJsonValue(m_event_timestamp, json[QString("eventTimestamp")]);
    m_event_timestamp_isSet = !json[QString("eventTimestamp")].isNull() && m_event_timestamp_isValid;

    m_event_variables_isValid = ::OpenAPI::fromJsonValue(m_event_variables, json[QString("eventVariables")]);
    m_event_variables_isSet = !json[QString("eventVariables")].isNull() && m_event_variables_isValid;

    m_current_label_isValid = ::OpenAPI::fromJsonValue(m_current_label, json[QString("currentLabel")]);
    m_current_label_isSet = !json[QString("currentLabel")].isNull() && m_current_label_isValid;

    m_label_timestamp_isValid = ::OpenAPI::fromJsonValue(m_label_timestamp, json[QString("labelTimestamp")]);
    m_label_timestamp_isSet = !json[QString("labelTimestamp")].isNull() && m_label_timestamp_isValid;

    m_entities_isValid = ::OpenAPI::fromJsonValue(m_entities, json[QString("entities")]);
    m_entities_isSet = !json[QString("entities")].isNull() && m_entities_isValid;
}

QString OAIGetEventResult_event::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetEventResult_event::asJsonObject() const {
    QJsonObject obj;
    if (m_event_id_isSet) {
        obj.insert(QString("eventId"), ::OpenAPI::toJsonValue(m_event_id));
    }
    if (m_event_type_name_isSet) {
        obj.insert(QString("eventTypeName"), ::OpenAPI::toJsonValue(m_event_type_name));
    }
    if (m_event_timestamp_isSet) {
        obj.insert(QString("eventTimestamp"), ::OpenAPI::toJsonValue(m_event_timestamp));
    }
    if (m_event_variables.isSet()) {
        obj.insert(QString("eventVariables"), ::OpenAPI::toJsonValue(m_event_variables));
    }
    if (m_current_label_isSet) {
        obj.insert(QString("currentLabel"), ::OpenAPI::toJsonValue(m_current_label));
    }
    if (m_label_timestamp_isSet) {
        obj.insert(QString("labelTimestamp"), ::OpenAPI::toJsonValue(m_label_timestamp));
    }
    if (m_entities.isSet()) {
        obj.insert(QString("entities"), ::OpenAPI::toJsonValue(m_entities));
    }
    return obj;
}

QString OAIGetEventResult_event::getEventId() const {
    return m_event_id;
}
void OAIGetEventResult_event::setEventId(const QString &event_id) {
    m_event_id = event_id;
    m_event_id_isSet = true;
}

bool OAIGetEventResult_event::is_event_id_Set() const{
    return m_event_id_isSet;
}

bool OAIGetEventResult_event::is_event_id_Valid() const{
    return m_event_id_isValid;
}

QString OAIGetEventResult_event::getEventTypeName() const {
    return m_event_type_name;
}
void OAIGetEventResult_event::setEventTypeName(const QString &event_type_name) {
    m_event_type_name = event_type_name;
    m_event_type_name_isSet = true;
}

bool OAIGetEventResult_event::is_event_type_name_Set() const{
    return m_event_type_name_isSet;
}

bool OAIGetEventResult_event::is_event_type_name_Valid() const{
    return m_event_type_name_isValid;
}

QString OAIGetEventResult_event::getEventTimestamp() const {
    return m_event_timestamp;
}
void OAIGetEventResult_event::setEventTimestamp(const QString &event_timestamp) {
    m_event_timestamp = event_timestamp;
    m_event_timestamp_isSet = true;
}

bool OAIGetEventResult_event::is_event_timestamp_Set() const{
    return m_event_timestamp_isSet;
}

bool OAIGetEventResult_event::is_event_timestamp_Valid() const{
    return m_event_timestamp_isValid;
}

QMap OAIGetEventResult_event::getEventVariables() const {
    return m_event_variables;
}
void OAIGetEventResult_event::setEventVariables(const QMap &event_variables) {
    m_event_variables = event_variables;
    m_event_variables_isSet = true;
}

bool OAIGetEventResult_event::is_event_variables_Set() const{
    return m_event_variables_isSet;
}

bool OAIGetEventResult_event::is_event_variables_Valid() const{
    return m_event_variables_isValid;
}

QString OAIGetEventResult_event::getCurrentLabel() const {
    return m_current_label;
}
void OAIGetEventResult_event::setCurrentLabel(const QString &current_label) {
    m_current_label = current_label;
    m_current_label_isSet = true;
}

bool OAIGetEventResult_event::is_current_label_Set() const{
    return m_current_label_isSet;
}

bool OAIGetEventResult_event::is_current_label_Valid() const{
    return m_current_label_isValid;
}

QString OAIGetEventResult_event::getLabelTimestamp() const {
    return m_label_timestamp;
}
void OAIGetEventResult_event::setLabelTimestamp(const QString &label_timestamp) {
    m_label_timestamp = label_timestamp;
    m_label_timestamp_isSet = true;
}

bool OAIGetEventResult_event::is_label_timestamp_Set() const{
    return m_label_timestamp_isSet;
}

bool OAIGetEventResult_event::is_label_timestamp_Valid() const{
    return m_label_timestamp_isValid;
}

QList OAIGetEventResult_event::getEntities() const {
    return m_entities;
}
void OAIGetEventResult_event::setEntities(const QList &entities) {
    m_entities = entities;
    m_entities_isSet = true;
}

bool OAIGetEventResult_event::is_entities_Set() const{
    return m_entities_isSet;
}

bool OAIGetEventResult_event::is_entities_Valid() const{
    return m_entities_isValid;
}

bool OAIGetEventResult_event::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_event_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_variables.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entities.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetEventResult_event::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
