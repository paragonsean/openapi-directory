/**
 * Amazon Fraud Detector
 * <p>This is the Amazon Fraud Detector API Reference. This guide is for developers who need detailed information about Amazon Fraud Detector API actions, data types, and errors. For more information about Amazon Fraud Detector features, see the <a href=\"https://docs.aws.amazon.com/frauddetector/latest/ug/\">Amazon Fraud Detector User Guide</a>.</p> <p>We provide the Query API as well as AWS software development kits (SDK) for Amazon Fraud Detector in Java and Python programming languages.</p> <p>The Amazon Fraud Detector Query API provides HTTPS requests that use the HTTP verb GET or POST and a Query parameter <code>Action</code>. AWS SDK provides libraries, sample code, tutorials, and other resources for software developers who prefer to build applications using language-specific APIs instead of submitting a request over HTTP or HTTPS. These libraries provide basic functions that automatically take care of tasks such as cryptographically signing your requests, retrying requests, and handling error responses, so that it is easier for you to get started. For more information about the AWS SDKs, go to <a href=\"https://aws.amazon.com/developer/tools/\">Tools to build on AWS</a> page, scroll down to the <b>SDK</b> section, and choose plus (+) sign to expand the section. </p>
 *
 * The version of the OpenAPI document: 2019-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetEventPredictionMetadataResult.h
 *
 * 
 */

#ifndef OAIGetEventPredictionMetadataResult_H
#define OAIGetEventPredictionMetadataResult_H

#include <QJsonObject>

#include "OAIRuleExecutionMode.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGetEventPredictionMetadataResult : public OAIObject {
public:
    OAIGetEventPredictionMetadataResult();
    OAIGetEventPredictionMetadataResult(QString json);
    ~OAIGetEventPredictionMetadataResult() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getEventId() const;
    void setEventId(const QString &event_id);
    bool is_event_id_Set() const;
    bool is_event_id_Valid() const;

    QString getEventTypeName() const;
    void setEventTypeName(const QString &event_type_name);
    bool is_event_type_name_Set() const;
    bool is_event_type_name_Valid() const;

    QString getEntityId() const;
    void setEntityId(const QString &entity_id);
    bool is_entity_id_Set() const;
    bool is_entity_id_Valid() const;

    QString getEntityType() const;
    void setEntityType(const QString &entity_type);
    bool is_entity_type_Set() const;
    bool is_entity_type_Valid() const;

    QString getEventTimestamp() const;
    void setEventTimestamp(const QString &event_timestamp);
    bool is_event_timestamp_Set() const;
    bool is_event_timestamp_Valid() const;

    QString getDetectorId() const;
    void setDetectorId(const QString &detector_id);
    bool is_detector_id_Set() const;
    bool is_detector_id_Valid() const;

    QString getDetectorVersionId() const;
    void setDetectorVersionId(const QString &detector_version_id);
    bool is_detector_version_id_Set() const;
    bool is_detector_version_id_Valid() const;

    QString getDetectorVersionStatus() const;
    void setDetectorVersionStatus(const QString &detector_version_status);
    bool is_detector_version_status_Set() const;
    bool is_detector_version_status_Valid() const;

    QList getEventVariables() const;
    void setEventVariables(const QList &event_variables);
    bool is_event_variables_Set() const;
    bool is_event_variables_Valid() const;

    QList getRules() const;
    void setRules(const QList &rules);
    bool is_rules_Set() const;
    bool is_rules_Valid() const;

    OAIRuleExecutionMode getRuleExecutionMode() const;
    void setRuleExecutionMode(const OAIRuleExecutionMode &rule_execution_mode);
    bool is_rule_execution_mode_Set() const;
    bool is_rule_execution_mode_Valid() const;

    QList getOutcomes() const;
    void setOutcomes(const QList &outcomes);
    bool is_outcomes_Set() const;
    bool is_outcomes_Valid() const;

    QList getEvaluatedModelVersions() const;
    void setEvaluatedModelVersions(const QList &evaluated_model_versions);
    bool is_evaluated_model_versions_Set() const;
    bool is_evaluated_model_versions_Valid() const;

    QList getEvaluatedExternalModels() const;
    void setEvaluatedExternalModels(const QList &evaluated_external_models);
    bool is_evaluated_external_models_Set() const;
    bool is_evaluated_external_models_Valid() const;

    QString getPredictionTimestamp() const;
    void setPredictionTimestamp(const QString &prediction_timestamp);
    bool is_prediction_timestamp_Set() const;
    bool is_prediction_timestamp_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_event_id;
    bool m_event_id_isSet;
    bool m_event_id_isValid;

    QString m_event_type_name;
    bool m_event_type_name_isSet;
    bool m_event_type_name_isValid;

    QString m_entity_id;
    bool m_entity_id_isSet;
    bool m_entity_id_isValid;

    QString m_entity_type;
    bool m_entity_type_isSet;
    bool m_entity_type_isValid;

    QString m_event_timestamp;
    bool m_event_timestamp_isSet;
    bool m_event_timestamp_isValid;

    QString m_detector_id;
    bool m_detector_id_isSet;
    bool m_detector_id_isValid;

    QString m_detector_version_id;
    bool m_detector_version_id_isSet;
    bool m_detector_version_id_isValid;

    QString m_detector_version_status;
    bool m_detector_version_status_isSet;
    bool m_detector_version_status_isValid;

    QList m_event_variables;
    bool m_event_variables_isSet;
    bool m_event_variables_isValid;

    QList m_rules;
    bool m_rules_isSet;
    bool m_rules_isValid;

    OAIRuleExecutionMode m_rule_execution_mode;
    bool m_rule_execution_mode_isSet;
    bool m_rule_execution_mode_isValid;

    QList m_outcomes;
    bool m_outcomes_isSet;
    bool m_outcomes_isValid;

    QList m_evaluated_model_versions;
    bool m_evaluated_model_versions_isSet;
    bool m_evaluated_model_versions_isValid;

    QList m_evaluated_external_models;
    bool m_evaluated_external_models_isSet;
    bool m_evaluated_external_models_isValid;

    QString m_prediction_timestamp;
    bool m_prediction_timestamp_isSet;
    bool m_prediction_timestamp_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetEventPredictionMetadataResult)

#endif // OAIGetEventPredictionMetadataResult_H
