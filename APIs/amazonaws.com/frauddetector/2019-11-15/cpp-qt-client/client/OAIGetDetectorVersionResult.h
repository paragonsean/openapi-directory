/**
 * Amazon Fraud Detector
 * <p>This is the Amazon Fraud Detector API Reference. This guide is for developers who need detailed information about Amazon Fraud Detector API actions, data types, and errors. For more information about Amazon Fraud Detector features, see the <a href=\"https://docs.aws.amazon.com/frauddetector/latest/ug/\">Amazon Fraud Detector User Guide</a>.</p> <p>We provide the Query API as well as AWS software development kits (SDK) for Amazon Fraud Detector in Java and Python programming languages.</p> <p>The Amazon Fraud Detector Query API provides HTTPS requests that use the HTTP verb GET or POST and a Query parameter <code>Action</code>. AWS SDK provides libraries, sample code, tutorials, and other resources for software developers who prefer to build applications using language-specific APIs instead of submitting a request over HTTP or HTTPS. These libraries provide basic functions that automatically take care of tasks such as cryptographically signing your requests, retrying requests, and handling error responses, so that it is easier for you to get started. For more information about the AWS SDKs, go to <a href=\"https://aws.amazon.com/developer/tools/\">Tools to build on AWS</a> page, scroll down to the <b>SDK</b> section, and choose plus (+) sign to expand the section. </p>
 *
 * The version of the OpenAPI document: 2019-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetDetectorVersionResult.h
 *
 * 
 */

#ifndef OAIGetDetectorVersionResult_H
#define OAIGetDetectorVersionResult_H

#include <QJsonObject>

#include "OAIDetectorVersionStatus.h"
#include "OAIRuleExecutionMode.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGetDetectorVersionResult : public OAIObject {
public:
    OAIGetDetectorVersionResult();
    OAIGetDetectorVersionResult(QString json);
    ~OAIGetDetectorVersionResult() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDetectorId() const;
    void setDetectorId(const QString &detector_id);
    bool is_detector_id_Set() const;
    bool is_detector_id_Valid() const;

    QString getDetectorVersionId() const;
    void setDetectorVersionId(const QString &detector_version_id);
    bool is_detector_version_id_Set() const;
    bool is_detector_version_id_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QList getExternalModelEndpoints() const;
    void setExternalModelEndpoints(const QList &external_model_endpoints);
    bool is_external_model_endpoints_Set() const;
    bool is_external_model_endpoints_Valid() const;

    QList getModelVersions() const;
    void setModelVersions(const QList &model_versions);
    bool is_model_versions_Set() const;
    bool is_model_versions_Valid() const;

    QList getRules() const;
    void setRules(const QList &rules);
    bool is_rules_Set() const;
    bool is_rules_Valid() const;

    OAIDetectorVersionStatus getStatus() const;
    void setStatus(const OAIDetectorVersionStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getLastUpdatedTime() const;
    void setLastUpdatedTime(const QString &last_updated_time);
    bool is_last_updated_time_Set() const;
    bool is_last_updated_time_Valid() const;

    QString getCreatedTime() const;
    void setCreatedTime(const QString &created_time);
    bool is_created_time_Set() const;
    bool is_created_time_Valid() const;

    OAIRuleExecutionMode getRuleExecutionMode() const;
    void setRuleExecutionMode(const OAIRuleExecutionMode &rule_execution_mode);
    bool is_rule_execution_mode_Set() const;
    bool is_rule_execution_mode_Valid() const;

    QString getArn() const;
    void setArn(const QString &arn);
    bool is_arn_Set() const;
    bool is_arn_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_detector_id;
    bool m_detector_id_isSet;
    bool m_detector_id_isValid;

    QString m_detector_version_id;
    bool m_detector_version_id_isSet;
    bool m_detector_version_id_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QList m_external_model_endpoints;
    bool m_external_model_endpoints_isSet;
    bool m_external_model_endpoints_isValid;

    QList m_model_versions;
    bool m_model_versions_isSet;
    bool m_model_versions_isValid;

    QList m_rules;
    bool m_rules_isSet;
    bool m_rules_isValid;

    OAIDetectorVersionStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_last_updated_time;
    bool m_last_updated_time_isSet;
    bool m_last_updated_time_isValid;

    QString m_created_time;
    bool m_created_time_isSet;
    bool m_created_time_isValid;

    OAIRuleExecutionMode m_rule_execution_mode;
    bool m_rule_execution_mode_isSet;
    bool m_rule_execution_mode_isValid;

    QString m_arn;
    bool m_arn_isSet;
    bool m_arn_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetDetectorVersionResult)

#endif // OAIGetDetectorVersionResult_H
