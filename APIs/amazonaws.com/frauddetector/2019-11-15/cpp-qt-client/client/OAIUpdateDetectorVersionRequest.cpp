/**
 * Amazon Fraud Detector
 * <p>This is the Amazon Fraud Detector API Reference. This guide is for developers who need detailed information about Amazon Fraud Detector API actions, data types, and errors. For more information about Amazon Fraud Detector features, see the <a href=\"https://docs.aws.amazon.com/frauddetector/latest/ug/\">Amazon Fraud Detector User Guide</a>.</p> <p>We provide the Query API as well as AWS software development kits (SDK) for Amazon Fraud Detector in Java and Python programming languages.</p> <p>The Amazon Fraud Detector Query API provides HTTPS requests that use the HTTP verb GET or POST and a Query parameter <code>Action</code>. AWS SDK provides libraries, sample code, tutorials, and other resources for software developers who prefer to build applications using language-specific APIs instead of submitting a request over HTTP or HTTPS. These libraries provide basic functions that automatically take care of tasks such as cryptographically signing your requests, retrying requests, and handling error responses, so that it is easier for you to get started. For more information about the AWS SDKs, go to <a href=\"https://aws.amazon.com/developer/tools/\">Tools to build on AWS</a> page, scroll down to the <b>SDK</b> section, and choose plus (+) sign to expand the section. </p>
 *
 * The version of the OpenAPI document: 2019-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateDetectorVersionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateDetectorVersionRequest::OAIUpdateDetectorVersionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateDetectorVersionRequest::OAIUpdateDetectorVersionRequest() {
    this->initializeModel();
}

OAIUpdateDetectorVersionRequest::~OAIUpdateDetectorVersionRequest() {}

void OAIUpdateDetectorVersionRequest::initializeModel() {

    m_detector_id_isSet = false;
    m_detector_id_isValid = false;

    m_detector_version_id_isSet = false;
    m_detector_version_id_isValid = false;

    m_external_model_endpoints_isSet = false;
    m_external_model_endpoints_isValid = false;

    m_rules_isSet = false;
    m_rules_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_model_versions_isSet = false;
    m_model_versions_isValid = false;

    m_rule_execution_mode_isSet = false;
    m_rule_execution_mode_isValid = false;
}

void OAIUpdateDetectorVersionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateDetectorVersionRequest::fromJsonObject(QJsonObject json) {

    m_detector_id_isValid = ::OpenAPI::fromJsonValue(m_detector_id, json[QString("detectorId")]);
    m_detector_id_isSet = !json[QString("detectorId")].isNull() && m_detector_id_isValid;

    m_detector_version_id_isValid = ::OpenAPI::fromJsonValue(m_detector_version_id, json[QString("detectorVersionId")]);
    m_detector_version_id_isSet = !json[QString("detectorVersionId")].isNull() && m_detector_version_id_isValid;

    m_external_model_endpoints_isValid = ::OpenAPI::fromJsonValue(m_external_model_endpoints, json[QString("externalModelEndpoints")]);
    m_external_model_endpoints_isSet = !json[QString("externalModelEndpoints")].isNull() && m_external_model_endpoints_isValid;

    m_rules_isValid = ::OpenAPI::fromJsonValue(m_rules, json[QString("rules")]);
    m_rules_isSet = !json[QString("rules")].isNull() && m_rules_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_model_versions_isValid = ::OpenAPI::fromJsonValue(m_model_versions, json[QString("modelVersions")]);
    m_model_versions_isSet = !json[QString("modelVersions")].isNull() && m_model_versions_isValid;

    m_rule_execution_mode_isValid = ::OpenAPI::fromJsonValue(m_rule_execution_mode, json[QString("ruleExecutionMode")]);
    m_rule_execution_mode_isSet = !json[QString("ruleExecutionMode")].isNull() && m_rule_execution_mode_isValid;
}

QString OAIUpdateDetectorVersionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateDetectorVersionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_detector_id_isSet) {
        obj.insert(QString("detectorId"), ::OpenAPI::toJsonValue(m_detector_id));
    }
    if (m_detector_version_id_isSet) {
        obj.insert(QString("detectorVersionId"), ::OpenAPI::toJsonValue(m_detector_version_id));
    }
    if (m_external_model_endpoints.isSet()) {
        obj.insert(QString("externalModelEndpoints"), ::OpenAPI::toJsonValue(m_external_model_endpoints));
    }
    if (m_rules.isSet()) {
        obj.insert(QString("rules"), ::OpenAPI::toJsonValue(m_rules));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_model_versions.isSet()) {
        obj.insert(QString("modelVersions"), ::OpenAPI::toJsonValue(m_model_versions));
    }
    if (m_rule_execution_mode.isSet()) {
        obj.insert(QString("ruleExecutionMode"), ::OpenAPI::toJsonValue(m_rule_execution_mode));
    }
    return obj;
}

QString OAIUpdateDetectorVersionRequest::getDetectorId() const {
    return m_detector_id;
}
void OAIUpdateDetectorVersionRequest::setDetectorId(const QString &detector_id) {
    m_detector_id = detector_id;
    m_detector_id_isSet = true;
}

bool OAIUpdateDetectorVersionRequest::is_detector_id_Set() const{
    return m_detector_id_isSet;
}

bool OAIUpdateDetectorVersionRequest::is_detector_id_Valid() const{
    return m_detector_id_isValid;
}

QString OAIUpdateDetectorVersionRequest::getDetectorVersionId() const {
    return m_detector_version_id;
}
void OAIUpdateDetectorVersionRequest::setDetectorVersionId(const QString &detector_version_id) {
    m_detector_version_id = detector_version_id;
    m_detector_version_id_isSet = true;
}

bool OAIUpdateDetectorVersionRequest::is_detector_version_id_Set() const{
    return m_detector_version_id_isSet;
}

bool OAIUpdateDetectorVersionRequest::is_detector_version_id_Valid() const{
    return m_detector_version_id_isValid;
}

QList OAIUpdateDetectorVersionRequest::getExternalModelEndpoints() const {
    return m_external_model_endpoints;
}
void OAIUpdateDetectorVersionRequest::setExternalModelEndpoints(const QList &external_model_endpoints) {
    m_external_model_endpoints = external_model_endpoints;
    m_external_model_endpoints_isSet = true;
}

bool OAIUpdateDetectorVersionRequest::is_external_model_endpoints_Set() const{
    return m_external_model_endpoints_isSet;
}

bool OAIUpdateDetectorVersionRequest::is_external_model_endpoints_Valid() const{
    return m_external_model_endpoints_isValid;
}

QList OAIUpdateDetectorVersionRequest::getRules() const {
    return m_rules;
}
void OAIUpdateDetectorVersionRequest::setRules(const QList &rules) {
    m_rules = rules;
    m_rules_isSet = true;
}

bool OAIUpdateDetectorVersionRequest::is_rules_Set() const{
    return m_rules_isSet;
}

bool OAIUpdateDetectorVersionRequest::is_rules_Valid() const{
    return m_rules_isValid;
}

QString OAIUpdateDetectorVersionRequest::getDescription() const {
    return m_description;
}
void OAIUpdateDetectorVersionRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpdateDetectorVersionRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdateDetectorVersionRequest::is_description_Valid() const{
    return m_description_isValid;
}

QList OAIUpdateDetectorVersionRequest::getModelVersions() const {
    return m_model_versions;
}
void OAIUpdateDetectorVersionRequest::setModelVersions(const QList &model_versions) {
    m_model_versions = model_versions;
    m_model_versions_isSet = true;
}

bool OAIUpdateDetectorVersionRequest::is_model_versions_Set() const{
    return m_model_versions_isSet;
}

bool OAIUpdateDetectorVersionRequest::is_model_versions_Valid() const{
    return m_model_versions_isValid;
}

OAIRuleExecutionMode OAIUpdateDetectorVersionRequest::getRuleExecutionMode() const {
    return m_rule_execution_mode;
}
void OAIUpdateDetectorVersionRequest::setRuleExecutionMode(const OAIRuleExecutionMode &rule_execution_mode) {
    m_rule_execution_mode = rule_execution_mode;
    m_rule_execution_mode_isSet = true;
}

bool OAIUpdateDetectorVersionRequest::is_rule_execution_mode_Set() const{
    return m_rule_execution_mode_isSet;
}

bool OAIUpdateDetectorVersionRequest::is_rule_execution_mode_Valid() const{
    return m_rule_execution_mode_isValid;
}

bool OAIUpdateDetectorVersionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_detector_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detector_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_model_endpoints.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rules.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_versions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_execution_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateDetectorVersionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_detector_id_isValid && m_detector_version_id_isValid && m_external_model_endpoints_isValid && m_rules_isValid && true;
}

} // namespace OpenAPI
