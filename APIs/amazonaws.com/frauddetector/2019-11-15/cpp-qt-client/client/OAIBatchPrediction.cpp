/**
 * Amazon Fraud Detector
 * <p>This is the Amazon Fraud Detector API Reference. This guide is for developers who need detailed information about Amazon Fraud Detector API actions, data types, and errors. For more information about Amazon Fraud Detector features, see the <a href=\"https://docs.aws.amazon.com/frauddetector/latest/ug/\">Amazon Fraud Detector User Guide</a>.</p> <p>We provide the Query API as well as AWS software development kits (SDK) for Amazon Fraud Detector in Java and Python programming languages.</p> <p>The Amazon Fraud Detector Query API provides HTTPS requests that use the HTTP verb GET or POST and a Query parameter <code>Action</code>. AWS SDK provides libraries, sample code, tutorials, and other resources for software developers who prefer to build applications using language-specific APIs instead of submitting a request over HTTP or HTTPS. These libraries provide basic functions that automatically take care of tasks such as cryptographically signing your requests, retrying requests, and handling error responses, so that it is easier for you to get started. For more information about the AWS SDKs, go to <a href=\"https://aws.amazon.com/developer/tools/\">Tools to build on AWS</a> page, scroll down to the <b>SDK</b> section, and choose plus (+) sign to expand the section. </p>
 *
 * The version of the OpenAPI document: 2019-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchPrediction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchPrediction::OAIBatchPrediction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchPrediction::OAIBatchPrediction() {
    this->initializeModel();
}

OAIBatchPrediction::~OAIBatchPrediction() {}

void OAIBatchPrediction::initializeModel() {

    m_job_id_isSet = false;
    m_job_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_failure_reason_isSet = false;
    m_failure_reason_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_completion_time_isSet = false;
    m_completion_time_isValid = false;

    m_last_heartbeat_time_isSet = false;
    m_last_heartbeat_time_isValid = false;

    m_input_path_isSet = false;
    m_input_path_isValid = false;

    m_output_path_isSet = false;
    m_output_path_isValid = false;

    m_event_type_name_isSet = false;
    m_event_type_name_isValid = false;

    m_detector_name_isSet = false;
    m_detector_name_isValid = false;

    m_detector_version_isSet = false;
    m_detector_version_isValid = false;

    m_iam_role_arn_isSet = false;
    m_iam_role_arn_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_processed_records_count_isSet = false;
    m_processed_records_count_isValid = false;

    m_total_records_count_isSet = false;
    m_total_records_count_isValid = false;
}

void OAIBatchPrediction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchPrediction::fromJsonObject(QJsonObject json) {

    m_job_id_isValid = ::OpenAPI::fromJsonValue(m_job_id, json[QString("jobId")]);
    m_job_id_isSet = !json[QString("jobId")].isNull() && m_job_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_failure_reason_isValid = ::OpenAPI::fromJsonValue(m_failure_reason, json[QString("failureReason")]);
    m_failure_reason_isSet = !json[QString("failureReason")].isNull() && m_failure_reason_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_completion_time_isValid = ::OpenAPI::fromJsonValue(m_completion_time, json[QString("completionTime")]);
    m_completion_time_isSet = !json[QString("completionTime")].isNull() && m_completion_time_isValid;

    m_last_heartbeat_time_isValid = ::OpenAPI::fromJsonValue(m_last_heartbeat_time, json[QString("lastHeartbeatTime")]);
    m_last_heartbeat_time_isSet = !json[QString("lastHeartbeatTime")].isNull() && m_last_heartbeat_time_isValid;

    m_input_path_isValid = ::OpenAPI::fromJsonValue(m_input_path, json[QString("inputPath")]);
    m_input_path_isSet = !json[QString("inputPath")].isNull() && m_input_path_isValid;

    m_output_path_isValid = ::OpenAPI::fromJsonValue(m_output_path, json[QString("outputPath")]);
    m_output_path_isSet = !json[QString("outputPath")].isNull() && m_output_path_isValid;

    m_event_type_name_isValid = ::OpenAPI::fromJsonValue(m_event_type_name, json[QString("eventTypeName")]);
    m_event_type_name_isSet = !json[QString("eventTypeName")].isNull() && m_event_type_name_isValid;

    m_detector_name_isValid = ::OpenAPI::fromJsonValue(m_detector_name, json[QString("detectorName")]);
    m_detector_name_isSet = !json[QString("detectorName")].isNull() && m_detector_name_isValid;

    m_detector_version_isValid = ::OpenAPI::fromJsonValue(m_detector_version, json[QString("detectorVersion")]);
    m_detector_version_isSet = !json[QString("detectorVersion")].isNull() && m_detector_version_isValid;

    m_iam_role_arn_isValid = ::OpenAPI::fromJsonValue(m_iam_role_arn, json[QString("iamRoleArn")]);
    m_iam_role_arn_isSet = !json[QString("iamRoleArn")].isNull() && m_iam_role_arn_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_processed_records_count_isValid = ::OpenAPI::fromJsonValue(m_processed_records_count, json[QString("processedRecordsCount")]);
    m_processed_records_count_isSet = !json[QString("processedRecordsCount")].isNull() && m_processed_records_count_isValid;

    m_total_records_count_isValid = ::OpenAPI::fromJsonValue(m_total_records_count, json[QString("totalRecordsCount")]);
    m_total_records_count_isSet = !json[QString("totalRecordsCount")].isNull() && m_total_records_count_isValid;
}

QString OAIBatchPrediction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchPrediction::asJsonObject() const {
    QJsonObject obj;
    if (m_job_id_isSet) {
        obj.insert(QString("jobId"), ::OpenAPI::toJsonValue(m_job_id));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_failure_reason_isSet) {
        obj.insert(QString("failureReason"), ::OpenAPI::toJsonValue(m_failure_reason));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_completion_time_isSet) {
        obj.insert(QString("completionTime"), ::OpenAPI::toJsonValue(m_completion_time));
    }
    if (m_last_heartbeat_time_isSet) {
        obj.insert(QString("lastHeartbeatTime"), ::OpenAPI::toJsonValue(m_last_heartbeat_time));
    }
    if (m_input_path_isSet) {
        obj.insert(QString("inputPath"), ::OpenAPI::toJsonValue(m_input_path));
    }
    if (m_output_path_isSet) {
        obj.insert(QString("outputPath"), ::OpenAPI::toJsonValue(m_output_path));
    }
    if (m_event_type_name_isSet) {
        obj.insert(QString("eventTypeName"), ::OpenAPI::toJsonValue(m_event_type_name));
    }
    if (m_detector_name_isSet) {
        obj.insert(QString("detectorName"), ::OpenAPI::toJsonValue(m_detector_name));
    }
    if (m_detector_version_isSet) {
        obj.insert(QString("detectorVersion"), ::OpenAPI::toJsonValue(m_detector_version));
    }
    if (m_iam_role_arn_isSet) {
        obj.insert(QString("iamRoleArn"), ::OpenAPI::toJsonValue(m_iam_role_arn));
    }
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_processed_records_count_isSet) {
        obj.insert(QString("processedRecordsCount"), ::OpenAPI::toJsonValue(m_processed_records_count));
    }
    if (m_total_records_count_isSet) {
        obj.insert(QString("totalRecordsCount"), ::OpenAPI::toJsonValue(m_total_records_count));
    }
    return obj;
}

QString OAIBatchPrediction::getJobId() const {
    return m_job_id;
}
void OAIBatchPrediction::setJobId(const QString &job_id) {
    m_job_id = job_id;
    m_job_id_isSet = true;
}

bool OAIBatchPrediction::is_job_id_Set() const{
    return m_job_id_isSet;
}

bool OAIBatchPrediction::is_job_id_Valid() const{
    return m_job_id_isValid;
}

OAIAsyncJobStatus OAIBatchPrediction::getStatus() const {
    return m_status;
}
void OAIBatchPrediction::setStatus(const OAIAsyncJobStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIBatchPrediction::is_status_Set() const{
    return m_status_isSet;
}

bool OAIBatchPrediction::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIBatchPrediction::getFailureReason() const {
    return m_failure_reason;
}
void OAIBatchPrediction::setFailureReason(const QString &failure_reason) {
    m_failure_reason = failure_reason;
    m_failure_reason_isSet = true;
}

bool OAIBatchPrediction::is_failure_reason_Set() const{
    return m_failure_reason_isSet;
}

bool OAIBatchPrediction::is_failure_reason_Valid() const{
    return m_failure_reason_isValid;
}

QString OAIBatchPrediction::getStartTime() const {
    return m_start_time;
}
void OAIBatchPrediction::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIBatchPrediction::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIBatchPrediction::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIBatchPrediction::getCompletionTime() const {
    return m_completion_time;
}
void OAIBatchPrediction::setCompletionTime(const QString &completion_time) {
    m_completion_time = completion_time;
    m_completion_time_isSet = true;
}

bool OAIBatchPrediction::is_completion_time_Set() const{
    return m_completion_time_isSet;
}

bool OAIBatchPrediction::is_completion_time_Valid() const{
    return m_completion_time_isValid;
}

QString OAIBatchPrediction::getLastHeartbeatTime() const {
    return m_last_heartbeat_time;
}
void OAIBatchPrediction::setLastHeartbeatTime(const QString &last_heartbeat_time) {
    m_last_heartbeat_time = last_heartbeat_time;
    m_last_heartbeat_time_isSet = true;
}

bool OAIBatchPrediction::is_last_heartbeat_time_Set() const{
    return m_last_heartbeat_time_isSet;
}

bool OAIBatchPrediction::is_last_heartbeat_time_Valid() const{
    return m_last_heartbeat_time_isValid;
}

QString OAIBatchPrediction::getInputPath() const {
    return m_input_path;
}
void OAIBatchPrediction::setInputPath(const QString &input_path) {
    m_input_path = input_path;
    m_input_path_isSet = true;
}

bool OAIBatchPrediction::is_input_path_Set() const{
    return m_input_path_isSet;
}

bool OAIBatchPrediction::is_input_path_Valid() const{
    return m_input_path_isValid;
}

QString OAIBatchPrediction::getOutputPath() const {
    return m_output_path;
}
void OAIBatchPrediction::setOutputPath(const QString &output_path) {
    m_output_path = output_path;
    m_output_path_isSet = true;
}

bool OAIBatchPrediction::is_output_path_Set() const{
    return m_output_path_isSet;
}

bool OAIBatchPrediction::is_output_path_Valid() const{
    return m_output_path_isValid;
}

QString OAIBatchPrediction::getEventTypeName() const {
    return m_event_type_name;
}
void OAIBatchPrediction::setEventTypeName(const QString &event_type_name) {
    m_event_type_name = event_type_name;
    m_event_type_name_isSet = true;
}

bool OAIBatchPrediction::is_event_type_name_Set() const{
    return m_event_type_name_isSet;
}

bool OAIBatchPrediction::is_event_type_name_Valid() const{
    return m_event_type_name_isValid;
}

QString OAIBatchPrediction::getDetectorName() const {
    return m_detector_name;
}
void OAIBatchPrediction::setDetectorName(const QString &detector_name) {
    m_detector_name = detector_name;
    m_detector_name_isSet = true;
}

bool OAIBatchPrediction::is_detector_name_Set() const{
    return m_detector_name_isSet;
}

bool OAIBatchPrediction::is_detector_name_Valid() const{
    return m_detector_name_isValid;
}

QString OAIBatchPrediction::getDetectorVersion() const {
    return m_detector_version;
}
void OAIBatchPrediction::setDetectorVersion(const QString &detector_version) {
    m_detector_version = detector_version;
    m_detector_version_isSet = true;
}

bool OAIBatchPrediction::is_detector_version_Set() const{
    return m_detector_version_isSet;
}

bool OAIBatchPrediction::is_detector_version_Valid() const{
    return m_detector_version_isValid;
}

QString OAIBatchPrediction::getIamRoleArn() const {
    return m_iam_role_arn;
}
void OAIBatchPrediction::setIamRoleArn(const QString &iam_role_arn) {
    m_iam_role_arn = iam_role_arn;
    m_iam_role_arn_isSet = true;
}

bool OAIBatchPrediction::is_iam_role_arn_Set() const{
    return m_iam_role_arn_isSet;
}

bool OAIBatchPrediction::is_iam_role_arn_Valid() const{
    return m_iam_role_arn_isValid;
}

QString OAIBatchPrediction::getArn() const {
    return m_arn;
}
void OAIBatchPrediction::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIBatchPrediction::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIBatchPrediction::is_arn_Valid() const{
    return m_arn_isValid;
}

qint32 OAIBatchPrediction::getProcessedRecordsCount() const {
    return m_processed_records_count;
}
void OAIBatchPrediction::setProcessedRecordsCount(const qint32 &processed_records_count) {
    m_processed_records_count = processed_records_count;
    m_processed_records_count_isSet = true;
}

bool OAIBatchPrediction::is_processed_records_count_Set() const{
    return m_processed_records_count_isSet;
}

bool OAIBatchPrediction::is_processed_records_count_Valid() const{
    return m_processed_records_count_isValid;
}

qint32 OAIBatchPrediction::getTotalRecordsCount() const {
    return m_total_records_count;
}
void OAIBatchPrediction::setTotalRecordsCount(const qint32 &total_records_count) {
    m_total_records_count = total_records_count;
    m_total_records_count_isSet = true;
}

bool OAIBatchPrediction::is_total_records_count_Set() const{
    return m_total_records_count_isSet;
}

bool OAIBatchPrediction::is_total_records_count_Valid() const{
    return m_total_records_count_isValid;
}

bool OAIBatchPrediction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completion_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_heartbeat_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detector_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detector_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iam_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_processed_records_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_records_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchPrediction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
