/**
 * Amazon Fraud Detector
 * <p>This is the Amazon Fraud Detector API Reference. This guide is for developers who need detailed information about Amazon Fraud Detector API actions, data types, and errors. For more information about Amazon Fraud Detector features, see the <a href=\"https://docs.aws.amazon.com/frauddetector/latest/ug/\">Amazon Fraud Detector User Guide</a>.</p> <p>We provide the Query API as well as AWS software development kits (SDK) for Amazon Fraud Detector in Java and Python programming languages.</p> <p>The Amazon Fraud Detector Query API provides HTTPS requests that use the HTTP verb GET or POST and a Query parameter <code>Action</code>. AWS SDK provides libraries, sample code, tutorials, and other resources for software developers who prefer to build applications using language-specific APIs instead of submitting a request over HTTP or HTTPS. These libraries provide basic functions that automatically take care of tasks such as cryptographically signing your requests, retrying requests, and handling error responses, so that it is easier for you to get started. For more information about the AWS SDKs, go to <a href=\"https://aws.amazon.com/developer/tools/\">Tools to build on AWS</a> page, scroll down to the <b>SDK</b> section, and choose plus (+) sign to expand the section. </p>
 *
 * The version of the OpenAPI document: 2019-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetEventPredictionMetadataResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetEventPredictionMetadataResult::OAIGetEventPredictionMetadataResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetEventPredictionMetadataResult::OAIGetEventPredictionMetadataResult() {
    this->initializeModel();
}

OAIGetEventPredictionMetadataResult::~OAIGetEventPredictionMetadataResult() {}

void OAIGetEventPredictionMetadataResult::initializeModel() {

    m_event_id_isSet = false;
    m_event_id_isValid = false;

    m_event_type_name_isSet = false;
    m_event_type_name_isValid = false;

    m_entity_id_isSet = false;
    m_entity_id_isValid = false;

    m_entity_type_isSet = false;
    m_entity_type_isValid = false;

    m_event_timestamp_isSet = false;
    m_event_timestamp_isValid = false;

    m_detector_id_isSet = false;
    m_detector_id_isValid = false;

    m_detector_version_id_isSet = false;
    m_detector_version_id_isValid = false;

    m_detector_version_status_isSet = false;
    m_detector_version_status_isValid = false;

    m_event_variables_isSet = false;
    m_event_variables_isValid = false;

    m_rules_isSet = false;
    m_rules_isValid = false;

    m_rule_execution_mode_isSet = false;
    m_rule_execution_mode_isValid = false;

    m_outcomes_isSet = false;
    m_outcomes_isValid = false;

    m_evaluated_model_versions_isSet = false;
    m_evaluated_model_versions_isValid = false;

    m_evaluated_external_models_isSet = false;
    m_evaluated_external_models_isValid = false;

    m_prediction_timestamp_isSet = false;
    m_prediction_timestamp_isValid = false;
}

void OAIGetEventPredictionMetadataResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetEventPredictionMetadataResult::fromJsonObject(QJsonObject json) {

    m_event_id_isValid = ::OpenAPI::fromJsonValue(m_event_id, json[QString("eventId")]);
    m_event_id_isSet = !json[QString("eventId")].isNull() && m_event_id_isValid;

    m_event_type_name_isValid = ::OpenAPI::fromJsonValue(m_event_type_name, json[QString("eventTypeName")]);
    m_event_type_name_isSet = !json[QString("eventTypeName")].isNull() && m_event_type_name_isValid;

    m_entity_id_isValid = ::OpenAPI::fromJsonValue(m_entity_id, json[QString("entityId")]);
    m_entity_id_isSet = !json[QString("entityId")].isNull() && m_entity_id_isValid;

    m_entity_type_isValid = ::OpenAPI::fromJsonValue(m_entity_type, json[QString("entityType")]);
    m_entity_type_isSet = !json[QString("entityType")].isNull() && m_entity_type_isValid;

    m_event_timestamp_isValid = ::OpenAPI::fromJsonValue(m_event_timestamp, json[QString("eventTimestamp")]);
    m_event_timestamp_isSet = !json[QString("eventTimestamp")].isNull() && m_event_timestamp_isValid;

    m_detector_id_isValid = ::OpenAPI::fromJsonValue(m_detector_id, json[QString("detectorId")]);
    m_detector_id_isSet = !json[QString("detectorId")].isNull() && m_detector_id_isValid;

    m_detector_version_id_isValid = ::OpenAPI::fromJsonValue(m_detector_version_id, json[QString("detectorVersionId")]);
    m_detector_version_id_isSet = !json[QString("detectorVersionId")].isNull() && m_detector_version_id_isValid;

    m_detector_version_status_isValid = ::OpenAPI::fromJsonValue(m_detector_version_status, json[QString("detectorVersionStatus")]);
    m_detector_version_status_isSet = !json[QString("detectorVersionStatus")].isNull() && m_detector_version_status_isValid;

    m_event_variables_isValid = ::OpenAPI::fromJsonValue(m_event_variables, json[QString("eventVariables")]);
    m_event_variables_isSet = !json[QString("eventVariables")].isNull() && m_event_variables_isValid;

    m_rules_isValid = ::OpenAPI::fromJsonValue(m_rules, json[QString("rules")]);
    m_rules_isSet = !json[QString("rules")].isNull() && m_rules_isValid;

    m_rule_execution_mode_isValid = ::OpenAPI::fromJsonValue(m_rule_execution_mode, json[QString("ruleExecutionMode")]);
    m_rule_execution_mode_isSet = !json[QString("ruleExecutionMode")].isNull() && m_rule_execution_mode_isValid;

    m_outcomes_isValid = ::OpenAPI::fromJsonValue(m_outcomes, json[QString("outcomes")]);
    m_outcomes_isSet = !json[QString("outcomes")].isNull() && m_outcomes_isValid;

    m_evaluated_model_versions_isValid = ::OpenAPI::fromJsonValue(m_evaluated_model_versions, json[QString("evaluatedModelVersions")]);
    m_evaluated_model_versions_isSet = !json[QString("evaluatedModelVersions")].isNull() && m_evaluated_model_versions_isValid;

    m_evaluated_external_models_isValid = ::OpenAPI::fromJsonValue(m_evaluated_external_models, json[QString("evaluatedExternalModels")]);
    m_evaluated_external_models_isSet = !json[QString("evaluatedExternalModels")].isNull() && m_evaluated_external_models_isValid;

    m_prediction_timestamp_isValid = ::OpenAPI::fromJsonValue(m_prediction_timestamp, json[QString("predictionTimestamp")]);
    m_prediction_timestamp_isSet = !json[QString("predictionTimestamp")].isNull() && m_prediction_timestamp_isValid;
}

QString OAIGetEventPredictionMetadataResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetEventPredictionMetadataResult::asJsonObject() const {
    QJsonObject obj;
    if (m_event_id_isSet) {
        obj.insert(QString("eventId"), ::OpenAPI::toJsonValue(m_event_id));
    }
    if (m_event_type_name_isSet) {
        obj.insert(QString("eventTypeName"), ::OpenAPI::toJsonValue(m_event_type_name));
    }
    if (m_entity_id_isSet) {
        obj.insert(QString("entityId"), ::OpenAPI::toJsonValue(m_entity_id));
    }
    if (m_entity_type_isSet) {
        obj.insert(QString("entityType"), ::OpenAPI::toJsonValue(m_entity_type));
    }
    if (m_event_timestamp_isSet) {
        obj.insert(QString("eventTimestamp"), ::OpenAPI::toJsonValue(m_event_timestamp));
    }
    if (m_detector_id_isSet) {
        obj.insert(QString("detectorId"), ::OpenAPI::toJsonValue(m_detector_id));
    }
    if (m_detector_version_id_isSet) {
        obj.insert(QString("detectorVersionId"), ::OpenAPI::toJsonValue(m_detector_version_id));
    }
    if (m_detector_version_status_isSet) {
        obj.insert(QString("detectorVersionStatus"), ::OpenAPI::toJsonValue(m_detector_version_status));
    }
    if (m_event_variables.isSet()) {
        obj.insert(QString("eventVariables"), ::OpenAPI::toJsonValue(m_event_variables));
    }
    if (m_rules.isSet()) {
        obj.insert(QString("rules"), ::OpenAPI::toJsonValue(m_rules));
    }
    if (m_rule_execution_mode.isSet()) {
        obj.insert(QString("ruleExecutionMode"), ::OpenAPI::toJsonValue(m_rule_execution_mode));
    }
    if (m_outcomes.isSet()) {
        obj.insert(QString("outcomes"), ::OpenAPI::toJsonValue(m_outcomes));
    }
    if (m_evaluated_model_versions.isSet()) {
        obj.insert(QString("evaluatedModelVersions"), ::OpenAPI::toJsonValue(m_evaluated_model_versions));
    }
    if (m_evaluated_external_models.isSet()) {
        obj.insert(QString("evaluatedExternalModels"), ::OpenAPI::toJsonValue(m_evaluated_external_models));
    }
    if (m_prediction_timestamp_isSet) {
        obj.insert(QString("predictionTimestamp"), ::OpenAPI::toJsonValue(m_prediction_timestamp));
    }
    return obj;
}

QString OAIGetEventPredictionMetadataResult::getEventId() const {
    return m_event_id;
}
void OAIGetEventPredictionMetadataResult::setEventId(const QString &event_id) {
    m_event_id = event_id;
    m_event_id_isSet = true;
}

bool OAIGetEventPredictionMetadataResult::is_event_id_Set() const{
    return m_event_id_isSet;
}

bool OAIGetEventPredictionMetadataResult::is_event_id_Valid() const{
    return m_event_id_isValid;
}

QString OAIGetEventPredictionMetadataResult::getEventTypeName() const {
    return m_event_type_name;
}
void OAIGetEventPredictionMetadataResult::setEventTypeName(const QString &event_type_name) {
    m_event_type_name = event_type_name;
    m_event_type_name_isSet = true;
}

bool OAIGetEventPredictionMetadataResult::is_event_type_name_Set() const{
    return m_event_type_name_isSet;
}

bool OAIGetEventPredictionMetadataResult::is_event_type_name_Valid() const{
    return m_event_type_name_isValid;
}

QString OAIGetEventPredictionMetadataResult::getEntityId() const {
    return m_entity_id;
}
void OAIGetEventPredictionMetadataResult::setEntityId(const QString &entity_id) {
    m_entity_id = entity_id;
    m_entity_id_isSet = true;
}

bool OAIGetEventPredictionMetadataResult::is_entity_id_Set() const{
    return m_entity_id_isSet;
}

bool OAIGetEventPredictionMetadataResult::is_entity_id_Valid() const{
    return m_entity_id_isValid;
}

QString OAIGetEventPredictionMetadataResult::getEntityType() const {
    return m_entity_type;
}
void OAIGetEventPredictionMetadataResult::setEntityType(const QString &entity_type) {
    m_entity_type = entity_type;
    m_entity_type_isSet = true;
}

bool OAIGetEventPredictionMetadataResult::is_entity_type_Set() const{
    return m_entity_type_isSet;
}

bool OAIGetEventPredictionMetadataResult::is_entity_type_Valid() const{
    return m_entity_type_isValid;
}

QString OAIGetEventPredictionMetadataResult::getEventTimestamp() const {
    return m_event_timestamp;
}
void OAIGetEventPredictionMetadataResult::setEventTimestamp(const QString &event_timestamp) {
    m_event_timestamp = event_timestamp;
    m_event_timestamp_isSet = true;
}

bool OAIGetEventPredictionMetadataResult::is_event_timestamp_Set() const{
    return m_event_timestamp_isSet;
}

bool OAIGetEventPredictionMetadataResult::is_event_timestamp_Valid() const{
    return m_event_timestamp_isValid;
}

QString OAIGetEventPredictionMetadataResult::getDetectorId() const {
    return m_detector_id;
}
void OAIGetEventPredictionMetadataResult::setDetectorId(const QString &detector_id) {
    m_detector_id = detector_id;
    m_detector_id_isSet = true;
}

bool OAIGetEventPredictionMetadataResult::is_detector_id_Set() const{
    return m_detector_id_isSet;
}

bool OAIGetEventPredictionMetadataResult::is_detector_id_Valid() const{
    return m_detector_id_isValid;
}

QString OAIGetEventPredictionMetadataResult::getDetectorVersionId() const {
    return m_detector_version_id;
}
void OAIGetEventPredictionMetadataResult::setDetectorVersionId(const QString &detector_version_id) {
    m_detector_version_id = detector_version_id;
    m_detector_version_id_isSet = true;
}

bool OAIGetEventPredictionMetadataResult::is_detector_version_id_Set() const{
    return m_detector_version_id_isSet;
}

bool OAIGetEventPredictionMetadataResult::is_detector_version_id_Valid() const{
    return m_detector_version_id_isValid;
}

QString OAIGetEventPredictionMetadataResult::getDetectorVersionStatus() const {
    return m_detector_version_status;
}
void OAIGetEventPredictionMetadataResult::setDetectorVersionStatus(const QString &detector_version_status) {
    m_detector_version_status = detector_version_status;
    m_detector_version_status_isSet = true;
}

bool OAIGetEventPredictionMetadataResult::is_detector_version_status_Set() const{
    return m_detector_version_status_isSet;
}

bool OAIGetEventPredictionMetadataResult::is_detector_version_status_Valid() const{
    return m_detector_version_status_isValid;
}

QList OAIGetEventPredictionMetadataResult::getEventVariables() const {
    return m_event_variables;
}
void OAIGetEventPredictionMetadataResult::setEventVariables(const QList &event_variables) {
    m_event_variables = event_variables;
    m_event_variables_isSet = true;
}

bool OAIGetEventPredictionMetadataResult::is_event_variables_Set() const{
    return m_event_variables_isSet;
}

bool OAIGetEventPredictionMetadataResult::is_event_variables_Valid() const{
    return m_event_variables_isValid;
}

QList OAIGetEventPredictionMetadataResult::getRules() const {
    return m_rules;
}
void OAIGetEventPredictionMetadataResult::setRules(const QList &rules) {
    m_rules = rules;
    m_rules_isSet = true;
}

bool OAIGetEventPredictionMetadataResult::is_rules_Set() const{
    return m_rules_isSet;
}

bool OAIGetEventPredictionMetadataResult::is_rules_Valid() const{
    return m_rules_isValid;
}

OAIRuleExecutionMode OAIGetEventPredictionMetadataResult::getRuleExecutionMode() const {
    return m_rule_execution_mode;
}
void OAIGetEventPredictionMetadataResult::setRuleExecutionMode(const OAIRuleExecutionMode &rule_execution_mode) {
    m_rule_execution_mode = rule_execution_mode;
    m_rule_execution_mode_isSet = true;
}

bool OAIGetEventPredictionMetadataResult::is_rule_execution_mode_Set() const{
    return m_rule_execution_mode_isSet;
}

bool OAIGetEventPredictionMetadataResult::is_rule_execution_mode_Valid() const{
    return m_rule_execution_mode_isValid;
}

QList OAIGetEventPredictionMetadataResult::getOutcomes() const {
    return m_outcomes;
}
void OAIGetEventPredictionMetadataResult::setOutcomes(const QList &outcomes) {
    m_outcomes = outcomes;
    m_outcomes_isSet = true;
}

bool OAIGetEventPredictionMetadataResult::is_outcomes_Set() const{
    return m_outcomes_isSet;
}

bool OAIGetEventPredictionMetadataResult::is_outcomes_Valid() const{
    return m_outcomes_isValid;
}

QList OAIGetEventPredictionMetadataResult::getEvaluatedModelVersions() const {
    return m_evaluated_model_versions;
}
void OAIGetEventPredictionMetadataResult::setEvaluatedModelVersions(const QList &evaluated_model_versions) {
    m_evaluated_model_versions = evaluated_model_versions;
    m_evaluated_model_versions_isSet = true;
}

bool OAIGetEventPredictionMetadataResult::is_evaluated_model_versions_Set() const{
    return m_evaluated_model_versions_isSet;
}

bool OAIGetEventPredictionMetadataResult::is_evaluated_model_versions_Valid() const{
    return m_evaluated_model_versions_isValid;
}

QList OAIGetEventPredictionMetadataResult::getEvaluatedExternalModels() const {
    return m_evaluated_external_models;
}
void OAIGetEventPredictionMetadataResult::setEvaluatedExternalModels(const QList &evaluated_external_models) {
    m_evaluated_external_models = evaluated_external_models;
    m_evaluated_external_models_isSet = true;
}

bool OAIGetEventPredictionMetadataResult::is_evaluated_external_models_Set() const{
    return m_evaluated_external_models_isSet;
}

bool OAIGetEventPredictionMetadataResult::is_evaluated_external_models_Valid() const{
    return m_evaluated_external_models_isValid;
}

QString OAIGetEventPredictionMetadataResult::getPredictionTimestamp() const {
    return m_prediction_timestamp;
}
void OAIGetEventPredictionMetadataResult::setPredictionTimestamp(const QString &prediction_timestamp) {
    m_prediction_timestamp = prediction_timestamp;
    m_prediction_timestamp_isSet = true;
}

bool OAIGetEventPredictionMetadataResult::is_prediction_timestamp_Set() const{
    return m_prediction_timestamp_isSet;
}

bool OAIGetEventPredictionMetadataResult::is_prediction_timestamp_Valid() const{
    return m_prediction_timestamp_isValid;
}

bool OAIGetEventPredictionMetadataResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_event_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detector_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detector_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detector_version_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_variables.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rules.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_execution_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_outcomes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_evaluated_model_versions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_evaluated_external_models.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_prediction_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetEventPredictionMetadataResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
