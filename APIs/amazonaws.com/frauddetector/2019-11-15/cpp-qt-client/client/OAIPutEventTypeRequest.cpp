/**
 * Amazon Fraud Detector
 * <p>This is the Amazon Fraud Detector API Reference. This guide is for developers who need detailed information about Amazon Fraud Detector API actions, data types, and errors. For more information about Amazon Fraud Detector features, see the <a href=\"https://docs.aws.amazon.com/frauddetector/latest/ug/\">Amazon Fraud Detector User Guide</a>.</p> <p>We provide the Query API as well as AWS software development kits (SDK) for Amazon Fraud Detector in Java and Python programming languages.</p> <p>The Amazon Fraud Detector Query API provides HTTPS requests that use the HTTP verb GET or POST and a Query parameter <code>Action</code>. AWS SDK provides libraries, sample code, tutorials, and other resources for software developers who prefer to build applications using language-specific APIs instead of submitting a request over HTTP or HTTPS. These libraries provide basic functions that automatically take care of tasks such as cryptographically signing your requests, retrying requests, and handling error responses, so that it is easier for you to get started. For more information about the AWS SDKs, go to <a href=\"https://aws.amazon.com/developer/tools/\">Tools to build on AWS</a> page, scroll down to the <b>SDK</b> section, and choose plus (+) sign to expand the section. </p>
 *
 * The version of the OpenAPI document: 2019-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutEventTypeRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutEventTypeRequest::OAIPutEventTypeRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutEventTypeRequest::OAIPutEventTypeRequest() {
    this->initializeModel();
}

OAIPutEventTypeRequest::~OAIPutEventTypeRequest() {}

void OAIPutEventTypeRequest::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_event_variables_isSet = false;
    m_event_variables_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_entity_types_isSet = false;
    m_entity_types_isValid = false;

    m_event_ingestion_isSet = false;
    m_event_ingestion_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_event_orchestration_isSet = false;
    m_event_orchestration_isValid = false;
}

void OAIPutEventTypeRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutEventTypeRequest::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_event_variables_isValid = ::OpenAPI::fromJsonValue(m_event_variables, json[QString("eventVariables")]);
    m_event_variables_isSet = !json[QString("eventVariables")].isNull() && m_event_variables_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_entity_types_isValid = ::OpenAPI::fromJsonValue(m_entity_types, json[QString("entityTypes")]);
    m_entity_types_isSet = !json[QString("entityTypes")].isNull() && m_entity_types_isValid;

    m_event_ingestion_isValid = ::OpenAPI::fromJsonValue(m_event_ingestion, json[QString("eventIngestion")]);
    m_event_ingestion_isSet = !json[QString("eventIngestion")].isNull() && m_event_ingestion_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_event_orchestration_isValid = ::OpenAPI::fromJsonValue(m_event_orchestration, json[QString("eventOrchestration")]);
    m_event_orchestration_isSet = !json[QString("eventOrchestration")].isNull() && m_event_orchestration_isValid;
}

QString OAIPutEventTypeRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutEventTypeRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_event_variables.isSet()) {
        obj.insert(QString("eventVariables"), ::OpenAPI::toJsonValue(m_event_variables));
    }
    if (m_labels.isSet()) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_entity_types.isSet()) {
        obj.insert(QString("entityTypes"), ::OpenAPI::toJsonValue(m_entity_types));
    }
    if (m_event_ingestion.isSet()) {
        obj.insert(QString("eventIngestion"), ::OpenAPI::toJsonValue(m_event_ingestion));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_event_orchestration.isSet()) {
        obj.insert(QString("eventOrchestration"), ::OpenAPI::toJsonValue(m_event_orchestration));
    }
    return obj;
}

QString OAIPutEventTypeRequest::getName() const {
    return m_name;
}
void OAIPutEventTypeRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPutEventTypeRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPutEventTypeRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPutEventTypeRequest::getDescription() const {
    return m_description;
}
void OAIPutEventTypeRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPutEventTypeRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPutEventTypeRequest::is_description_Valid() const{
    return m_description_isValid;
}

QList OAIPutEventTypeRequest::getEventVariables() const {
    return m_event_variables;
}
void OAIPutEventTypeRequest::setEventVariables(const QList &event_variables) {
    m_event_variables = event_variables;
    m_event_variables_isSet = true;
}

bool OAIPutEventTypeRequest::is_event_variables_Set() const{
    return m_event_variables_isSet;
}

bool OAIPutEventTypeRequest::is_event_variables_Valid() const{
    return m_event_variables_isValid;
}

QList OAIPutEventTypeRequest::getLabels() const {
    return m_labels;
}
void OAIPutEventTypeRequest::setLabels(const QList &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIPutEventTypeRequest::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIPutEventTypeRequest::is_labels_Valid() const{
    return m_labels_isValid;
}

QList OAIPutEventTypeRequest::getEntityTypes() const {
    return m_entity_types;
}
void OAIPutEventTypeRequest::setEntityTypes(const QList &entity_types) {
    m_entity_types = entity_types;
    m_entity_types_isSet = true;
}

bool OAIPutEventTypeRequest::is_entity_types_Set() const{
    return m_entity_types_isSet;
}

bool OAIPutEventTypeRequest::is_entity_types_Valid() const{
    return m_entity_types_isValid;
}

OAIEventIngestion OAIPutEventTypeRequest::getEventIngestion() const {
    return m_event_ingestion;
}
void OAIPutEventTypeRequest::setEventIngestion(const OAIEventIngestion &event_ingestion) {
    m_event_ingestion = event_ingestion;
    m_event_ingestion_isSet = true;
}

bool OAIPutEventTypeRequest::is_event_ingestion_Set() const{
    return m_event_ingestion_isSet;
}

bool OAIPutEventTypeRequest::is_event_ingestion_Valid() const{
    return m_event_ingestion_isValid;
}

QList OAIPutEventTypeRequest::getTags() const {
    return m_tags;
}
void OAIPutEventTypeRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIPutEventTypeRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIPutEventTypeRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

OAIPutEventTypeRequest_eventOrchestration OAIPutEventTypeRequest::getEventOrchestration() const {
    return m_event_orchestration;
}
void OAIPutEventTypeRequest::setEventOrchestration(const OAIPutEventTypeRequest_eventOrchestration &event_orchestration) {
    m_event_orchestration = event_orchestration;
    m_event_orchestration_isSet = true;
}

bool OAIPutEventTypeRequest::is_event_orchestration_Set() const{
    return m_event_orchestration_isSet;
}

bool OAIPutEventTypeRequest::is_event_orchestration_Valid() const{
    return m_event_orchestration_isValid;
}

bool OAIPutEventTypeRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_variables.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_ingestion.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_orchestration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutEventTypeRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_event_variables_isValid && m_entity_types_isValid && true;
}

} // namespace OpenAPI
