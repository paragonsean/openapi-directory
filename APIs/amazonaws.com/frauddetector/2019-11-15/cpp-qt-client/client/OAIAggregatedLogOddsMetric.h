/**
 * Amazon Fraud Detector
 * <p>This is the Amazon Fraud Detector API Reference. This guide is for developers who need detailed information about Amazon Fraud Detector API actions, data types, and errors. For more information about Amazon Fraud Detector features, see the <a href=\"https://docs.aws.amazon.com/frauddetector/latest/ug/\">Amazon Fraud Detector User Guide</a>.</p> <p>We provide the Query API as well as AWS software development kits (SDK) for Amazon Fraud Detector in Java and Python programming languages.</p> <p>The Amazon Fraud Detector Query API provides HTTPS requests that use the HTTP verb GET or POST and a Query parameter <code>Action</code>. AWS SDK provides libraries, sample code, tutorials, and other resources for software developers who prefer to build applications using language-specific APIs instead of submitting a request over HTTP or HTTPS. These libraries provide basic functions that automatically take care of tasks such as cryptographically signing your requests, retrying requests, and handling error responses, so that it is easier for you to get started. For more information about the AWS SDKs, go to <a href=\"https://aws.amazon.com/developer/tools/\">Tools to build on AWS</a> page, scroll down to the <b>SDK</b> section, and choose plus (+) sign to expand the section. </p>
 *
 * The version of the OpenAPI document: 2019-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAggregatedLogOddsMetric.h
 *
 * &lt;p&gt;The log odds metric details.&lt;/p&gt; &lt;p&gt;Account Takeover Insights (ATI) model uses event variables from the login data you provide to continuously calculate a set of variables (aggregated variables) based on historical events. For example, your ATI model might calculate the number of times an user has logged in using the same IP address. In this case, event variables used to derive the aggregated variables are &lt;code&gt;IP address&lt;/code&gt; and &lt;code&gt;user&lt;/code&gt;.&lt;/p&gt;
 */

#ifndef OAIAggregatedLogOddsMetric_H
#define OAIAggregatedLogOddsMetric_H

#include <QJsonObject>

#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAggregatedLogOddsMetric : public OAIObject {
public:
    OAIAggregatedLogOddsMetric();
    OAIAggregatedLogOddsMetric(QString json);
    ~OAIAggregatedLogOddsMetric() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList getVariableNames() const;
    void setVariableNames(const QList &variable_names);
    bool is_variable_names_Set() const;
    bool is_variable_names_Valid() const;

    float getAggregatedVariablesImportance() const;
    void setAggregatedVariablesImportance(const float &aggregated_variables_importance);
    bool is_aggregated_variables_importance_Set() const;
    bool is_aggregated_variables_importance_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList m_variable_names;
    bool m_variable_names_isSet;
    bool m_variable_names_isValid;

    float m_aggregated_variables_importance;
    bool m_aggregated_variables_importance_isSet;
    bool m_aggregated_variables_importance_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAggregatedLogOddsMetric)

#endif // OAIAggregatedLogOddsMetric_H
