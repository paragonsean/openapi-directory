/**
 * Amazon Fraud Detector
 * <p>This is the Amazon Fraud Detector API Reference. This guide is for developers who need detailed information about Amazon Fraud Detector API actions, data types, and errors. For more information about Amazon Fraud Detector features, see the <a href=\"https://docs.aws.amazon.com/frauddetector/latest/ug/\">Amazon Fraud Detector User Guide</a>.</p> <p>We provide the Query API as well as AWS software development kits (SDK) for Amazon Fraud Detector in Java and Python programming languages.</p> <p>The Amazon Fraud Detector Query API provides HTTPS requests that use the HTTP verb GET or POST and a Query parameter <code>Action</code>. AWS SDK provides libraries, sample code, tutorials, and other resources for software developers who prefer to build applications using language-specific APIs instead of submitting a request over HTTP or HTTPS. These libraries provide basic functions that automatically take care of tasks such as cryptographically signing your requests, retrying requests, and handling error responses, so that it is easier for you to get started. For more information about the AWS SDKs, go to <a href=\"https://aws.amazon.com/developer/tools/\">Tools to build on AWS</a> page, scroll down to the <b>SDK</b> section, and choose plus (+) sign to expand the section. </p>
 *
 * The version of the OpenAPI document: 2019-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBatchPrediction.h
 *
 * The batch prediction details.
 */

#ifndef OAIBatchPrediction_H
#define OAIBatchPrediction_H

#include <QJsonObject>

#include "OAIAsyncJobStatus.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIBatchPrediction : public OAIObject {
public:
    OAIBatchPrediction();
    OAIBatchPrediction(QString json);
    ~OAIBatchPrediction() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getJobId() const;
    void setJobId(const QString &job_id);
    bool is_job_id_Set() const;
    bool is_job_id_Valid() const;

    OAIAsyncJobStatus getStatus() const;
    void setStatus(const OAIAsyncJobStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getFailureReason() const;
    void setFailureReason(const QString &failure_reason);
    bool is_failure_reason_Set() const;
    bool is_failure_reason_Valid() const;

    QString getStartTime() const;
    void setStartTime(const QString &start_time);
    bool is_start_time_Set() const;
    bool is_start_time_Valid() const;

    QString getCompletionTime() const;
    void setCompletionTime(const QString &completion_time);
    bool is_completion_time_Set() const;
    bool is_completion_time_Valid() const;

    QString getLastHeartbeatTime() const;
    void setLastHeartbeatTime(const QString &last_heartbeat_time);
    bool is_last_heartbeat_time_Set() const;
    bool is_last_heartbeat_time_Valid() const;

    QString getInputPath() const;
    void setInputPath(const QString &input_path);
    bool is_input_path_Set() const;
    bool is_input_path_Valid() const;

    QString getOutputPath() const;
    void setOutputPath(const QString &output_path);
    bool is_output_path_Set() const;
    bool is_output_path_Valid() const;

    QString getEventTypeName() const;
    void setEventTypeName(const QString &event_type_name);
    bool is_event_type_name_Set() const;
    bool is_event_type_name_Valid() const;

    QString getDetectorName() const;
    void setDetectorName(const QString &detector_name);
    bool is_detector_name_Set() const;
    bool is_detector_name_Valid() const;

    QString getDetectorVersion() const;
    void setDetectorVersion(const QString &detector_version);
    bool is_detector_version_Set() const;
    bool is_detector_version_Valid() const;

    QString getIamRoleArn() const;
    void setIamRoleArn(const QString &iam_role_arn);
    bool is_iam_role_arn_Set() const;
    bool is_iam_role_arn_Valid() const;

    QString getArn() const;
    void setArn(const QString &arn);
    bool is_arn_Set() const;
    bool is_arn_Valid() const;

    qint32 getProcessedRecordsCount() const;
    void setProcessedRecordsCount(const qint32 &processed_records_count);
    bool is_processed_records_count_Set() const;
    bool is_processed_records_count_Valid() const;

    qint32 getTotalRecordsCount() const;
    void setTotalRecordsCount(const qint32 &total_records_count);
    bool is_total_records_count_Set() const;
    bool is_total_records_count_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_job_id;
    bool m_job_id_isSet;
    bool m_job_id_isValid;

    OAIAsyncJobStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_failure_reason;
    bool m_failure_reason_isSet;
    bool m_failure_reason_isValid;

    QString m_start_time;
    bool m_start_time_isSet;
    bool m_start_time_isValid;

    QString m_completion_time;
    bool m_completion_time_isSet;
    bool m_completion_time_isValid;

    QString m_last_heartbeat_time;
    bool m_last_heartbeat_time_isSet;
    bool m_last_heartbeat_time_isValid;

    QString m_input_path;
    bool m_input_path_isSet;
    bool m_input_path_isValid;

    QString m_output_path;
    bool m_output_path_isSet;
    bool m_output_path_isValid;

    QString m_event_type_name;
    bool m_event_type_name_isSet;
    bool m_event_type_name_isValid;

    QString m_detector_name;
    bool m_detector_name_isSet;
    bool m_detector_name_isValid;

    QString m_detector_version;
    bool m_detector_version_isSet;
    bool m_detector_version_isValid;

    QString m_iam_role_arn;
    bool m_iam_role_arn_isSet;
    bool m_iam_role_arn_isValid;

    QString m_arn;
    bool m_arn_isSet;
    bool m_arn_isValid;

    qint32 m_processed_records_count;
    bool m_processed_records_count_isSet;
    bool m_processed_records_count_isValid;

    qint32 m_total_records_count;
    bool m_total_records_count_isSet;
    bool m_total_records_count_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBatchPrediction)

#endif // OAIBatchPrediction_H
