/**
 * Amazon Fraud Detector
 * <p>This is the Amazon Fraud Detector API Reference. This guide is for developers who need detailed information about Amazon Fraud Detector API actions, data types, and errors. For more information about Amazon Fraud Detector features, see the <a href=\"https://docs.aws.amazon.com/frauddetector/latest/ug/\">Amazon Fraud Detector User Guide</a>.</p> <p>We provide the Query API as well as AWS software development kits (SDK) for Amazon Fraud Detector in Java and Python programming languages.</p> <p>The Amazon Fraud Detector Query API provides HTTPS requests that use the HTTP verb GET or POST and a Query parameter <code>Action</code>. AWS SDK provides libraries, sample code, tutorials, and other resources for software developers who prefer to build applications using language-specific APIs instead of submitting a request over HTTP or HTTPS. These libraries provide basic functions that automatically take care of tasks such as cryptographically signing your requests, retrying requests, and handling error responses, so that it is easier for you to get started. For more information about the AWS SDKs, go to <a href=\"https://aws.amazon.com/developer/tools/\">Tools to build on AWS</a> page, scroll down to the <b>SDK</b> section, and choose plus (+) sign to expand the section. </p>
 *
 * The version of the OpenAPI document: 2019-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListEventPredictionsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListEventPredictionsRequest::OAIListEventPredictionsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListEventPredictionsRequest::OAIListEventPredictionsRequest() {
    this->initializeModel();
}

OAIListEventPredictionsRequest::~OAIListEventPredictionsRequest() {}

void OAIListEventPredictionsRequest::initializeModel() {

    m_event_id_isSet = false;
    m_event_id_isValid = false;

    m_event_type_isSet = false;
    m_event_type_isValid = false;

    m_detector_id_isSet = false;
    m_detector_id_isValid = false;

    m_detector_version_id_isSet = false;
    m_detector_version_id_isValid = false;

    m_prediction_time_range_isSet = false;
    m_prediction_time_range_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;
}

void OAIListEventPredictionsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListEventPredictionsRequest::fromJsonObject(QJsonObject json) {

    m_event_id_isValid = ::OpenAPI::fromJsonValue(m_event_id, json[QString("eventId")]);
    m_event_id_isSet = !json[QString("eventId")].isNull() && m_event_id_isValid;

    m_event_type_isValid = ::OpenAPI::fromJsonValue(m_event_type, json[QString("eventType")]);
    m_event_type_isSet = !json[QString("eventType")].isNull() && m_event_type_isValid;

    m_detector_id_isValid = ::OpenAPI::fromJsonValue(m_detector_id, json[QString("detectorId")]);
    m_detector_id_isSet = !json[QString("detectorId")].isNull() && m_detector_id_isValid;

    m_detector_version_id_isValid = ::OpenAPI::fromJsonValue(m_detector_version_id, json[QString("detectorVersionId")]);
    m_detector_version_id_isSet = !json[QString("detectorVersionId")].isNull() && m_detector_version_id_isValid;

    m_prediction_time_range_isValid = ::OpenAPI::fromJsonValue(m_prediction_time_range, json[QString("predictionTimeRange")]);
    m_prediction_time_range_isSet = !json[QString("predictionTimeRange")].isNull() && m_prediction_time_range_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("maxResults")]);
    m_max_results_isSet = !json[QString("maxResults")].isNull() && m_max_results_isValid;
}

QString OAIListEventPredictionsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListEventPredictionsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_event_id.isSet()) {
        obj.insert(QString("eventId"), ::OpenAPI::toJsonValue(m_event_id));
    }
    if (m_event_type.isSet()) {
        obj.insert(QString("eventType"), ::OpenAPI::toJsonValue(m_event_type));
    }
    if (m_detector_id.isSet()) {
        obj.insert(QString("detectorId"), ::OpenAPI::toJsonValue(m_detector_id));
    }
    if (m_detector_version_id.isSet()) {
        obj.insert(QString("detectorVersionId"), ::OpenAPI::toJsonValue(m_detector_version_id));
    }
    if (m_prediction_time_range.isSet()) {
        obj.insert(QString("predictionTimeRange"), ::OpenAPI::toJsonValue(m_prediction_time_range));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("maxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    return obj;
}

OAIListEventPredictionsRequest_eventId OAIListEventPredictionsRequest::getEventId() const {
    return m_event_id;
}
void OAIListEventPredictionsRequest::setEventId(const OAIListEventPredictionsRequest_eventId &event_id) {
    m_event_id = event_id;
    m_event_id_isSet = true;
}

bool OAIListEventPredictionsRequest::is_event_id_Set() const{
    return m_event_id_isSet;
}

bool OAIListEventPredictionsRequest::is_event_id_Valid() const{
    return m_event_id_isValid;
}

OAIListEventPredictionsRequest_eventType OAIListEventPredictionsRequest::getEventType() const {
    return m_event_type;
}
void OAIListEventPredictionsRequest::setEventType(const OAIListEventPredictionsRequest_eventType &event_type) {
    m_event_type = event_type;
    m_event_type_isSet = true;
}

bool OAIListEventPredictionsRequest::is_event_type_Set() const{
    return m_event_type_isSet;
}

bool OAIListEventPredictionsRequest::is_event_type_Valid() const{
    return m_event_type_isValid;
}

OAIListEventPredictionsRequest_detectorId OAIListEventPredictionsRequest::getDetectorId() const {
    return m_detector_id;
}
void OAIListEventPredictionsRequest::setDetectorId(const OAIListEventPredictionsRequest_detectorId &detector_id) {
    m_detector_id = detector_id;
    m_detector_id_isSet = true;
}

bool OAIListEventPredictionsRequest::is_detector_id_Set() const{
    return m_detector_id_isSet;
}

bool OAIListEventPredictionsRequest::is_detector_id_Valid() const{
    return m_detector_id_isValid;
}

OAIListEventPredictionsRequest_detectorVersionId OAIListEventPredictionsRequest::getDetectorVersionId() const {
    return m_detector_version_id;
}
void OAIListEventPredictionsRequest::setDetectorVersionId(const OAIListEventPredictionsRequest_detectorVersionId &detector_version_id) {
    m_detector_version_id = detector_version_id;
    m_detector_version_id_isSet = true;
}

bool OAIListEventPredictionsRequest::is_detector_version_id_Set() const{
    return m_detector_version_id_isSet;
}

bool OAIListEventPredictionsRequest::is_detector_version_id_Valid() const{
    return m_detector_version_id_isValid;
}

OAIListEventPredictionsRequest_predictionTimeRange OAIListEventPredictionsRequest::getPredictionTimeRange() const {
    return m_prediction_time_range;
}
void OAIListEventPredictionsRequest::setPredictionTimeRange(const OAIListEventPredictionsRequest_predictionTimeRange &prediction_time_range) {
    m_prediction_time_range = prediction_time_range;
    m_prediction_time_range_isSet = true;
}

bool OAIListEventPredictionsRequest::is_prediction_time_range_Set() const{
    return m_prediction_time_range_isSet;
}

bool OAIListEventPredictionsRequest::is_prediction_time_range_Valid() const{
    return m_prediction_time_range_isValid;
}

QString OAIListEventPredictionsRequest::getNextToken() const {
    return m_next_token;
}
void OAIListEventPredictionsRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListEventPredictionsRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListEventPredictionsRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIListEventPredictionsRequest::getMaxResults() const {
    return m_max_results;
}
void OAIListEventPredictionsRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListEventPredictionsRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListEventPredictionsRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

bool OAIListEventPredictionsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_event_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_detector_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_detector_version_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_prediction_time_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListEventPredictionsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
