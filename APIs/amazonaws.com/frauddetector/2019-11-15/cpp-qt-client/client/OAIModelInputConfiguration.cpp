/**
 * Amazon Fraud Detector
 * <p>This is the Amazon Fraud Detector API Reference. This guide is for developers who need detailed information about Amazon Fraud Detector API actions, data types, and errors. For more information about Amazon Fraud Detector features, see the <a href=\"https://docs.aws.amazon.com/frauddetector/latest/ug/\">Amazon Fraud Detector User Guide</a>.</p> <p>We provide the Query API as well as AWS software development kits (SDK) for Amazon Fraud Detector in Java and Python programming languages.</p> <p>The Amazon Fraud Detector Query API provides HTTPS requests that use the HTTP verb GET or POST and a Query parameter <code>Action</code>. AWS SDK provides libraries, sample code, tutorials, and other resources for software developers who prefer to build applications using language-specific APIs instead of submitting a request over HTTP or HTTPS. These libraries provide basic functions that automatically take care of tasks such as cryptographically signing your requests, retrying requests, and handling error responses, so that it is easier for you to get started. For more information about the AWS SDKs, go to <a href=\"https://aws.amazon.com/developer/tools/\">Tools to build on AWS</a> page, scroll down to the <b>SDK</b> section, and choose plus (+) sign to expand the section. </p>
 *
 * The version of the OpenAPI document: 2019-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModelInputConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModelInputConfiguration::OAIModelInputConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModelInputConfiguration::OAIModelInputConfiguration() {
    this->initializeModel();
}

OAIModelInputConfiguration::~OAIModelInputConfiguration() {}

void OAIModelInputConfiguration::initializeModel() {

    m_event_type_name_isSet = false;
    m_event_type_name_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_use_event_variables_isSet = false;
    m_use_event_variables_isValid = false;

    m_json_input_template_isSet = false;
    m_json_input_template_isValid = false;

    m_csv_input_template_isSet = false;
    m_csv_input_template_isValid = false;
}

void OAIModelInputConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModelInputConfiguration::fromJsonObject(QJsonObject json) {

    m_event_type_name_isValid = ::OpenAPI::fromJsonValue(m_event_type_name, json[QString("eventTypeName")]);
    m_event_type_name_isSet = !json[QString("eventTypeName")].isNull() && m_event_type_name_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_use_event_variables_isValid = ::OpenAPI::fromJsonValue(m_use_event_variables, json[QString("useEventVariables")]);
    m_use_event_variables_isSet = !json[QString("useEventVariables")].isNull() && m_use_event_variables_isValid;

    m_json_input_template_isValid = ::OpenAPI::fromJsonValue(m_json_input_template, json[QString("jsonInputTemplate")]);
    m_json_input_template_isSet = !json[QString("jsonInputTemplate")].isNull() && m_json_input_template_isValid;

    m_csv_input_template_isValid = ::OpenAPI::fromJsonValue(m_csv_input_template, json[QString("csvInputTemplate")]);
    m_csv_input_template_isSet = !json[QString("csvInputTemplate")].isNull() && m_csv_input_template_isValid;
}

QString OAIModelInputConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModelInputConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_event_type_name_isSet) {
        obj.insert(QString("eventTypeName"), ::OpenAPI::toJsonValue(m_event_type_name));
    }
    if (m_format.isSet()) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_use_event_variables_isSet) {
        obj.insert(QString("useEventVariables"), ::OpenAPI::toJsonValue(m_use_event_variables));
    }
    if (m_json_input_template_isSet) {
        obj.insert(QString("jsonInputTemplate"), ::OpenAPI::toJsonValue(m_json_input_template));
    }
    if (m_csv_input_template_isSet) {
        obj.insert(QString("csvInputTemplate"), ::OpenAPI::toJsonValue(m_csv_input_template));
    }
    return obj;
}

QString OAIModelInputConfiguration::getEventTypeName() const {
    return m_event_type_name;
}
void OAIModelInputConfiguration::setEventTypeName(const QString &event_type_name) {
    m_event_type_name = event_type_name;
    m_event_type_name_isSet = true;
}

bool OAIModelInputConfiguration::is_event_type_name_Set() const{
    return m_event_type_name_isSet;
}

bool OAIModelInputConfiguration::is_event_type_name_Valid() const{
    return m_event_type_name_isValid;
}

OAIModelInputDataFormat OAIModelInputConfiguration::getFormat() const {
    return m_format;
}
void OAIModelInputConfiguration::setFormat(const OAIModelInputDataFormat &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIModelInputConfiguration::is_format_Set() const{
    return m_format_isSet;
}

bool OAIModelInputConfiguration::is_format_Valid() const{
    return m_format_isValid;
}

bool OAIModelInputConfiguration::getUseEventVariables() const {
    return m_use_event_variables;
}
void OAIModelInputConfiguration::setUseEventVariables(const bool &use_event_variables) {
    m_use_event_variables = use_event_variables;
    m_use_event_variables_isSet = true;
}

bool OAIModelInputConfiguration::is_use_event_variables_Set() const{
    return m_use_event_variables_isSet;
}

bool OAIModelInputConfiguration::is_use_event_variables_Valid() const{
    return m_use_event_variables_isValid;
}

QString OAIModelInputConfiguration::getJsonInputTemplate() const {
    return m_json_input_template;
}
void OAIModelInputConfiguration::setJsonInputTemplate(const QString &json_input_template) {
    m_json_input_template = json_input_template;
    m_json_input_template_isSet = true;
}

bool OAIModelInputConfiguration::is_json_input_template_Set() const{
    return m_json_input_template_isSet;
}

bool OAIModelInputConfiguration::is_json_input_template_Valid() const{
    return m_json_input_template_isValid;
}

QString OAIModelInputConfiguration::getCsvInputTemplate() const {
    return m_csv_input_template;
}
void OAIModelInputConfiguration::setCsvInputTemplate(const QString &csv_input_template) {
    m_csv_input_template = csv_input_template;
    m_csv_input_template_isSet = true;
}

bool OAIModelInputConfiguration::is_csv_input_template_Set() const{
    return m_csv_input_template_isSet;
}

bool OAIModelInputConfiguration::is_csv_input_template_Valid() const{
    return m_csv_input_template_isValid;
}

bool OAIModelInputConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_event_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_event_variables_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_json_input_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_csv_input_template_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModelInputConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_use_event_variables_isValid && true;
}

} // namespace OpenAPI
