/**
 * Amazon Fraud Detector
 * <p>This is the Amazon Fraud Detector API Reference. This guide is for developers who need detailed information about Amazon Fraud Detector API actions, data types, and errors. For more information about Amazon Fraud Detector features, see the <a href=\"https://docs.aws.amazon.com/frauddetector/latest/ug/\">Amazon Fraud Detector User Guide</a>.</p> <p>We provide the Query API as well as AWS software development kits (SDK) for Amazon Fraud Detector in Java and Python programming languages.</p> <p>The Amazon Fraud Detector Query API provides HTTPS requests that use the HTTP verb GET or POST and a Query parameter <code>Action</code>. AWS SDK provides libraries, sample code, tutorials, and other resources for software developers who prefer to build applications using language-specific APIs instead of submitting a request over HTTP or HTTPS. These libraries provide basic functions that automatically take care of tasks such as cryptographically signing your requests, retrying requests, and handling error responses, so that it is easier for you to get started. For more information about the AWS SDKs, go to <a href=\"https://aws.amazon.com/developer/tools/\">Tools to build on AWS</a> page, scroll down to the <b>SDK</b> section, and choose plus (+) sign to expand the section. </p>
 *
 * The version of the OpenAPI document: 2019-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEventType.h
 *
 * The event type details.
 */

#ifndef OAIEventType_H
#define OAIEventType_H

#include <QJsonObject>

#include "OAIEventIngestion.h"
#include "OAIEventType_eventOrchestration.h"
#include "OAIEventType_ingestedEventStatistics.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIEventType_ingestedEventStatistics;
class OAIEventType_eventOrchestration;

class OAIEventType : public OAIObject {
public:
    OAIEventType();
    OAIEventType(QString json);
    ~OAIEventType() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QList getEventVariables() const;
    void setEventVariables(const QList &event_variables);
    bool is_event_variables_Set() const;
    bool is_event_variables_Valid() const;

    QList getLabels() const;
    void setLabels(const QList &labels);
    bool is_labels_Set() const;
    bool is_labels_Valid() const;

    QList getEntityTypes() const;
    void setEntityTypes(const QList &entity_types);
    bool is_entity_types_Set() const;
    bool is_entity_types_Valid() const;

    OAIEventIngestion getEventIngestion() const;
    void setEventIngestion(const OAIEventIngestion &event_ingestion);
    bool is_event_ingestion_Set() const;
    bool is_event_ingestion_Valid() const;

    OAIEventType_ingestedEventStatistics getIngestedEventStatistics() const;
    void setIngestedEventStatistics(const OAIEventType_ingestedEventStatistics &ingested_event_statistics);
    bool is_ingested_event_statistics_Set() const;
    bool is_ingested_event_statistics_Valid() const;

    QString getLastUpdatedTime() const;
    void setLastUpdatedTime(const QString &last_updated_time);
    bool is_last_updated_time_Set() const;
    bool is_last_updated_time_Valid() const;

    QString getCreatedTime() const;
    void setCreatedTime(const QString &created_time);
    bool is_created_time_Set() const;
    bool is_created_time_Valid() const;

    QString getArn() const;
    void setArn(const QString &arn);
    bool is_arn_Set() const;
    bool is_arn_Valid() const;

    OAIEventType_eventOrchestration getEventOrchestration() const;
    void setEventOrchestration(const OAIEventType_eventOrchestration &event_orchestration);
    bool is_event_orchestration_Set() const;
    bool is_event_orchestration_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QList m_event_variables;
    bool m_event_variables_isSet;
    bool m_event_variables_isValid;

    QList m_labels;
    bool m_labels_isSet;
    bool m_labels_isValid;

    QList m_entity_types;
    bool m_entity_types_isSet;
    bool m_entity_types_isValid;

    OAIEventIngestion m_event_ingestion;
    bool m_event_ingestion_isSet;
    bool m_event_ingestion_isValid;

    OAIEventType_ingestedEventStatistics m_ingested_event_statistics;
    bool m_ingested_event_statistics_isSet;
    bool m_ingested_event_statistics_isValid;

    QString m_last_updated_time;
    bool m_last_updated_time_isSet;
    bool m_last_updated_time_isValid;

    QString m_created_time;
    bool m_created_time_isSet;
    bool m_created_time_isValid;

    QString m_arn;
    bool m_arn_isSet;
    bool m_arn_isValid;

    OAIEventType_eventOrchestration m_event_orchestration;
    bool m_event_orchestration_isSet;
    bool m_event_orchestration_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEventType)

#endif // OAIEventType_H
