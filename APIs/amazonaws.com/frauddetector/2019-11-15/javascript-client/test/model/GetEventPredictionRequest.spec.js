/**
 * Amazon Fraud Detector
 * <p>This is the Amazon Fraud Detector API Reference. This guide is for developers who need detailed information about Amazon Fraud Detector API actions, data types, and errors. For more information about Amazon Fraud Detector features, see the <a href=\"https://docs.aws.amazon.com/frauddetector/latest/ug/\">Amazon Fraud Detector User Guide</a>.</p> <p>We provide the Query API as well as AWS software development kits (SDK) for Amazon Fraud Detector in Java and Python programming languages.</p> <p>The Amazon Fraud Detector Query API provides HTTPS requests that use the HTTP verb GET or POST and a Query parameter <code>Action</code>. AWS SDK provides libraries, sample code, tutorials, and other resources for software developers who prefer to build applications using language-specific APIs instead of submitting a request over HTTP or HTTPS. These libraries provide basic functions that automatically take care of tasks such as cryptographically signing your requests, retrying requests, and handling error responses, so that it is easier for you to get started. For more information about the AWS SDKs, go to <a href=\"https://aws.amazon.com/developer/tools/\">Tools to build on AWS</a> page, scroll down to the <b>SDK</b> section, and choose plus (+) sign to expand the section. </p>
 *
 * The version of the OpenAPI document: 2019-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonFraudDetector);
  }
}(this, function(expect, AmazonFraudDetector) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonFraudDetector.GetEventPredictionRequest();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('GetEventPredictionRequest', function() {
    it('should create an instance of GetEventPredictionRequest', function() {
      // uncomment below and update the code to test GetEventPredictionRequest
      //var instance = new AmazonFraudDetector.GetEventPredictionRequest();
      //expect(instance).to.be.a(AmazonFraudDetector.GetEventPredictionRequest);
    });

    it('should have the property detectorId (base name: "detectorId")', function() {
      // uncomment below and update the code to test the property detectorId
      //var instance = new AmazonFraudDetector.GetEventPredictionRequest();
      //expect(instance).to.be();
    });

    it('should have the property detectorVersionId (base name: "detectorVersionId")', function() {
      // uncomment below and update the code to test the property detectorVersionId
      //var instance = new AmazonFraudDetector.GetEventPredictionRequest();
      //expect(instance).to.be();
    });

    it('should have the property eventId (base name: "eventId")', function() {
      // uncomment below and update the code to test the property eventId
      //var instance = new AmazonFraudDetector.GetEventPredictionRequest();
      //expect(instance).to.be();
    });

    it('should have the property eventTypeName (base name: "eventTypeName")', function() {
      // uncomment below and update the code to test the property eventTypeName
      //var instance = new AmazonFraudDetector.GetEventPredictionRequest();
      //expect(instance).to.be();
    });

    it('should have the property entities (base name: "entities")', function() {
      // uncomment below and update the code to test the property entities
      //var instance = new AmazonFraudDetector.GetEventPredictionRequest();
      //expect(instance).to.be();
    });

    it('should have the property eventTimestamp (base name: "eventTimestamp")', function() {
      // uncomment below and update the code to test the property eventTimestamp
      //var instance = new AmazonFraudDetector.GetEventPredictionRequest();
      //expect(instance).to.be();
    });

    it('should have the property eventVariables (base name: "eventVariables")', function() {
      // uncomment below and update the code to test the property eventVariables
      //var instance = new AmazonFraudDetector.GetEventPredictionRequest();
      //expect(instance).to.be();
    });

    it('should have the property externalModelEndpointDataBlobs (base name: "externalModelEndpointDataBlobs")', function() {
      // uncomment below and update the code to test the property externalModelEndpointDataBlobs
      //var instance = new AmazonFraudDetector.GetEventPredictionRequest();
      //expect(instance).to.be();
    });

  });

}));
