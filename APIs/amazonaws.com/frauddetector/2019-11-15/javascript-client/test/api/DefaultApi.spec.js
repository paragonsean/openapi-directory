/**
 * Amazon Fraud Detector
 * <p>This is the Amazon Fraud Detector API Reference. This guide is for developers who need detailed information about Amazon Fraud Detector API actions, data types, and errors. For more information about Amazon Fraud Detector features, see the <a href=\"https://docs.aws.amazon.com/frauddetector/latest/ug/\">Amazon Fraud Detector User Guide</a>.</p> <p>We provide the Query API as well as AWS software development kits (SDK) for Amazon Fraud Detector in Java and Python programming languages.</p> <p>The Amazon Fraud Detector Query API provides HTTPS requests that use the HTTP verb GET or POST and a Query parameter <code>Action</code>. AWS SDK provides libraries, sample code, tutorials, and other resources for software developers who prefer to build applications using language-specific APIs instead of submitting a request over HTTP or HTTPS. These libraries provide basic functions that automatically take care of tasks such as cryptographically signing your requests, retrying requests, and handling error responses, so that it is easier for you to get started. For more information about the AWS SDKs, go to <a href=\"https://aws.amazon.com/developer/tools/\">Tools to build on AWS</a> page, scroll down to the <b>SDK</b> section, and choose plus (+) sign to expand the section. </p>
 *
 * The version of the OpenAPI document: 2019-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonFraudDetector);
  }
}(this, function(expect, AmazonFraudDetector) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonFraudDetector.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('batchCreateVariable', function() {
      it('should call batchCreateVariable successfully', function(done) {
        //uncomment below and update the code to test batchCreateVariable
        //instance.batchCreateVariable(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('batchGetVariable', function() {
      it('should call batchGetVariable successfully', function(done) {
        //uncomment below and update the code to test batchGetVariable
        //instance.batchGetVariable(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cancelBatchImportJob', function() {
      it('should call cancelBatchImportJob successfully', function(done) {
        //uncomment below and update the code to test cancelBatchImportJob
        //instance.cancelBatchImportJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cancelBatchPredictionJob', function() {
      it('should call cancelBatchPredictionJob successfully', function(done) {
        //uncomment below and update the code to test cancelBatchPredictionJob
        //instance.cancelBatchPredictionJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createBatchImportJob', function() {
      it('should call createBatchImportJob successfully', function(done) {
        //uncomment below and update the code to test createBatchImportJob
        //instance.createBatchImportJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createBatchPredictionJob', function() {
      it('should call createBatchPredictionJob successfully', function(done) {
        //uncomment below and update the code to test createBatchPredictionJob
        //instance.createBatchPredictionJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createDetectorVersion', function() {
      it('should call createDetectorVersion successfully', function(done) {
        //uncomment below and update the code to test createDetectorVersion
        //instance.createDetectorVersion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createList', function() {
      it('should call createList successfully', function(done) {
        //uncomment below and update the code to test createList
        //instance.createList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createModel', function() {
      it('should call createModel successfully', function(done) {
        //uncomment below and update the code to test createModel
        //instance.createModel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createModelVersion', function() {
      it('should call createModelVersion successfully', function(done) {
        //uncomment below and update the code to test createModelVersion
        //instance.createModelVersion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createRule', function() {
      it('should call createRule successfully', function(done) {
        //uncomment below and update the code to test createRule
        //instance.createRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createVariable', function() {
      it('should call createVariable successfully', function(done) {
        //uncomment below and update the code to test createVariable
        //instance.createVariable(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteBatchImportJob', function() {
      it('should call deleteBatchImportJob successfully', function(done) {
        //uncomment below and update the code to test deleteBatchImportJob
        //instance.deleteBatchImportJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteBatchPredictionJob', function() {
      it('should call deleteBatchPredictionJob successfully', function(done) {
        //uncomment below and update the code to test deleteBatchPredictionJob
        //instance.deleteBatchPredictionJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteDetector', function() {
      it('should call deleteDetector successfully', function(done) {
        //uncomment below and update the code to test deleteDetector
        //instance.deleteDetector(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteDetectorVersion', function() {
      it('should call deleteDetectorVersion successfully', function(done) {
        //uncomment below and update the code to test deleteDetectorVersion
        //instance.deleteDetectorVersion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteEntityType', function() {
      it('should call deleteEntityType successfully', function(done) {
        //uncomment below and update the code to test deleteEntityType
        //instance.deleteEntityType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteEvent', function() {
      it('should call deleteEvent successfully', function(done) {
        //uncomment below and update the code to test deleteEvent
        //instance.deleteEvent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteEventType', function() {
      it('should call deleteEventType successfully', function(done) {
        //uncomment below and update the code to test deleteEventType
        //instance.deleteEventType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteEventsByEventType', function() {
      it('should call deleteEventsByEventType successfully', function(done) {
        //uncomment below and update the code to test deleteEventsByEventType
        //instance.deleteEventsByEventType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteExternalModel', function() {
      it('should call deleteExternalModel successfully', function(done) {
        //uncomment below and update the code to test deleteExternalModel
        //instance.deleteExternalModel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteLabel', function() {
      it('should call deleteLabel successfully', function(done) {
        //uncomment below and update the code to test deleteLabel
        //instance.deleteLabel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteList', function() {
      it('should call deleteList successfully', function(done) {
        //uncomment below and update the code to test deleteList
        //instance.deleteList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteModel', function() {
      it('should call deleteModel successfully', function(done) {
        //uncomment below and update the code to test deleteModel
        //instance.deleteModel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteModelVersion', function() {
      it('should call deleteModelVersion successfully', function(done) {
        //uncomment below and update the code to test deleteModelVersion
        //instance.deleteModelVersion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteOutcome', function() {
      it('should call deleteOutcome successfully', function(done) {
        //uncomment below and update the code to test deleteOutcome
        //instance.deleteOutcome(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteRule', function() {
      it('should call deleteRule successfully', function(done) {
        //uncomment below and update the code to test deleteRule
        //instance.deleteRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteVariable', function() {
      it('should call deleteVariable successfully', function(done) {
        //uncomment below and update the code to test deleteVariable
        //instance.deleteVariable(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeDetector', function() {
      it('should call describeDetector successfully', function(done) {
        //uncomment below and update the code to test describeDetector
        //instance.describeDetector(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeModelVersions', function() {
      it('should call describeModelVersions successfully', function(done) {
        //uncomment below and update the code to test describeModelVersions
        //instance.describeModelVersions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getBatchImportJobs', function() {
      it('should call getBatchImportJobs successfully', function(done) {
        //uncomment below and update the code to test getBatchImportJobs
        //instance.getBatchImportJobs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getBatchPredictionJobs', function() {
      it('should call getBatchPredictionJobs successfully', function(done) {
        //uncomment below and update the code to test getBatchPredictionJobs
        //instance.getBatchPredictionJobs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDeleteEventsByEventTypeStatus', function() {
      it('should call getDeleteEventsByEventTypeStatus successfully', function(done) {
        //uncomment below and update the code to test getDeleteEventsByEventTypeStatus
        //instance.getDeleteEventsByEventTypeStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDetectorVersion', function() {
      it('should call getDetectorVersion successfully', function(done) {
        //uncomment below and update the code to test getDetectorVersion
        //instance.getDetectorVersion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDetectors', function() {
      it('should call getDetectors successfully', function(done) {
        //uncomment below and update the code to test getDetectors
        //instance.getDetectors(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getEntityTypes', function() {
      it('should call getEntityTypes successfully', function(done) {
        //uncomment below and update the code to test getEntityTypes
        //instance.getEntityTypes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getEvent', function() {
      it('should call getEvent successfully', function(done) {
        //uncomment below and update the code to test getEvent
        //instance.getEvent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getEventPrediction', function() {
      it('should call getEventPrediction successfully', function(done) {
        //uncomment below and update the code to test getEventPrediction
        //instance.getEventPrediction(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getEventPredictionMetadata', function() {
      it('should call getEventPredictionMetadata successfully', function(done) {
        //uncomment below and update the code to test getEventPredictionMetadata
        //instance.getEventPredictionMetadata(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getEventTypes', function() {
      it('should call getEventTypes successfully', function(done) {
        //uncomment below and update the code to test getEventTypes
        //instance.getEventTypes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getExternalModels', function() {
      it('should call getExternalModels successfully', function(done) {
        //uncomment below and update the code to test getExternalModels
        //instance.getExternalModels(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getKMSEncryptionKey', function() {
      it('should call getKMSEncryptionKey successfully', function(done) {
        //uncomment below and update the code to test getKMSEncryptionKey
        //instance.getKMSEncryptionKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLabels', function() {
      it('should call getLabels successfully', function(done) {
        //uncomment below and update the code to test getLabels
        //instance.getLabels(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getListElements', function() {
      it('should call getListElements successfully', function(done) {
        //uncomment below and update the code to test getListElements
        //instance.getListElements(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getListsMetadata', function() {
      it('should call getListsMetadata successfully', function(done) {
        //uncomment below and update the code to test getListsMetadata
        //instance.getListsMetadata(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getModelVersion', function() {
      it('should call getModelVersion successfully', function(done) {
        //uncomment below and update the code to test getModelVersion
        //instance.getModelVersion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getModels', function() {
      it('should call getModels successfully', function(done) {
        //uncomment below and update the code to test getModels
        //instance.getModels(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getOutcomes', function() {
      it('should call getOutcomes successfully', function(done) {
        //uncomment below and update the code to test getOutcomes
        //instance.getOutcomes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRules', function() {
      it('should call getRules successfully', function(done) {
        //uncomment below and update the code to test getRules
        //instance.getRules(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getVariables', function() {
      it('should call getVariables successfully', function(done) {
        //uncomment below and update the code to test getVariables
        //instance.getVariables(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listEventPredictions', function() {
      it('should call listEventPredictions successfully', function(done) {
        //uncomment below and update the code to test listEventPredictions
        //instance.listEventPredictions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putDetector', function() {
      it('should call putDetector successfully', function(done) {
        //uncomment below and update the code to test putDetector
        //instance.putDetector(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putEntityType', function() {
      it('should call putEntityType successfully', function(done) {
        //uncomment below and update the code to test putEntityType
        //instance.putEntityType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putEventType', function() {
      it('should call putEventType successfully', function(done) {
        //uncomment below and update the code to test putEventType
        //instance.putEventType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putExternalModel', function() {
      it('should call putExternalModel successfully', function(done) {
        //uncomment below and update the code to test putExternalModel
        //instance.putExternalModel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putKMSEncryptionKey', function() {
      it('should call putKMSEncryptionKey successfully', function(done) {
        //uncomment below and update the code to test putKMSEncryptionKey
        //instance.putKMSEncryptionKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putLabel', function() {
      it('should call putLabel successfully', function(done) {
        //uncomment below and update the code to test putLabel
        //instance.putLabel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putOutcome', function() {
      it('should call putOutcome successfully', function(done) {
        //uncomment below and update the code to test putOutcome
        //instance.putOutcome(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sendEvent', function() {
      it('should call sendEvent successfully', function(done) {
        //uncomment below and update the code to test sendEvent
        //instance.sendEvent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateDetectorVersion', function() {
      it('should call updateDetectorVersion successfully', function(done) {
        //uncomment below and update the code to test updateDetectorVersion
        //instance.updateDetectorVersion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateDetectorVersionMetadata', function() {
      it('should call updateDetectorVersionMetadata successfully', function(done) {
        //uncomment below and update the code to test updateDetectorVersionMetadata
        //instance.updateDetectorVersionMetadata(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateDetectorVersionStatus', function() {
      it('should call updateDetectorVersionStatus successfully', function(done) {
        //uncomment below and update the code to test updateDetectorVersionStatus
        //instance.updateDetectorVersionStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateEventLabel', function() {
      it('should call updateEventLabel successfully', function(done) {
        //uncomment below and update the code to test updateEventLabel
        //instance.updateEventLabel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateList', function() {
      it('should call updateList successfully', function(done) {
        //uncomment below and update the code to test updateList
        //instance.updateList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateModel', function() {
      it('should call updateModel successfully', function(done) {
        //uncomment below and update the code to test updateModel
        //instance.updateModel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateModelVersion', function() {
      it('should call updateModelVersion successfully', function(done) {
        //uncomment below and update the code to test updateModelVersion
        //instance.updateModelVersion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateModelVersionStatus', function() {
      it('should call updateModelVersionStatus successfully', function(done) {
        //uncomment below and update the code to test updateModelVersionStatus
        //instance.updateModelVersionStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateRuleMetadata', function() {
      it('should call updateRuleMetadata successfully', function(done) {
        //uncomment below and update the code to test updateRuleMetadata
        //instance.updateRuleMetadata(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateRuleVersion', function() {
      it('should call updateRuleVersion successfully', function(done) {
        //uncomment below and update the code to test updateRuleVersion
        //instance.updateRuleVersion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateVariable', function() {
      it('should call updateVariable successfully', function(done) {
        //uncomment below and update the code to test updateVariable
        //instance.updateVariable(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
