# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.event_ingestion import EventIngestion
from openapi_server.models.put_event_type_request_event_orchestration import PutEventTypeRequestEventOrchestration
from openapi_server import util


class PutEventTypeRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, description: str=None, event_variables: List=None, labels: List=None, entity_types: List=None, event_ingestion: EventIngestion=None, tags: List=None, event_orchestration: PutEventTypeRequestEventOrchestration=None):
        """PutEventTypeRequest - a model defined in OpenAPI

        :param name: The name of this PutEventTypeRequest.
        :param description: The description of this PutEventTypeRequest.
        :param event_variables: The event_variables of this PutEventTypeRequest.
        :param labels: The labels of this PutEventTypeRequest.
        :param entity_types: The entity_types of this PutEventTypeRequest.
        :param event_ingestion: The event_ingestion of this PutEventTypeRequest.
        :param tags: The tags of this PutEventTypeRequest.
        :param event_orchestration: The event_orchestration of this PutEventTypeRequest.
        """
        self.openapi_types = {
            'name': str,
            'description': str,
            'event_variables': List,
            'labels': List,
            'entity_types': List,
            'event_ingestion': EventIngestion,
            'tags': List,
            'event_orchestration': PutEventTypeRequestEventOrchestration
        }

        self.attribute_map = {
            'name': 'name',
            'description': 'description',
            'event_variables': 'eventVariables',
            'labels': 'labels',
            'entity_types': 'entityTypes',
            'event_ingestion': 'eventIngestion',
            'tags': 'tags',
            'event_orchestration': 'eventOrchestration'
        }

        self._name = name
        self._description = description
        self._event_variables = event_variables
        self._labels = labels
        self._entity_types = entity_types
        self._event_ingestion = event_ingestion
        self._tags = tags
        self._event_orchestration = event_orchestration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutEventTypeRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutEventTypeRequest of this PutEventTypeRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this PutEventTypeRequest.


        :return: The name of this PutEventTypeRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PutEventTypeRequest.


        :param name: The name of this PutEventTypeRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def description(self):
        """Gets the description of this PutEventTypeRequest.


        :return: The description of this PutEventTypeRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PutEventTypeRequest.


        :param description: The description of this PutEventTypeRequest.
        :type description: str
        """

        self._description = description

    @property
    def event_variables(self):
        """Gets the event_variables of this PutEventTypeRequest.


        :return: The event_variables of this PutEventTypeRequest.
        :rtype: List
        """
        return self._event_variables

    @event_variables.setter
    def event_variables(self, event_variables):
        """Sets the event_variables of this PutEventTypeRequest.


        :param event_variables: The event_variables of this PutEventTypeRequest.
        :type event_variables: List
        """
        if event_variables is None:
            raise ValueError("Invalid value for `event_variables`, must not be `None`")

        self._event_variables = event_variables

    @property
    def labels(self):
        """Gets the labels of this PutEventTypeRequest.


        :return: The labels of this PutEventTypeRequest.
        :rtype: List
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this PutEventTypeRequest.


        :param labels: The labels of this PutEventTypeRequest.
        :type labels: List
        """

        self._labels = labels

    @property
    def entity_types(self):
        """Gets the entity_types of this PutEventTypeRequest.


        :return: The entity_types of this PutEventTypeRequest.
        :rtype: List
        """
        return self._entity_types

    @entity_types.setter
    def entity_types(self, entity_types):
        """Sets the entity_types of this PutEventTypeRequest.


        :param entity_types: The entity_types of this PutEventTypeRequest.
        :type entity_types: List
        """
        if entity_types is None:
            raise ValueError("Invalid value for `entity_types`, must not be `None`")

        self._entity_types = entity_types

    @property
    def event_ingestion(self):
        """Gets the event_ingestion of this PutEventTypeRequest.


        :return: The event_ingestion of this PutEventTypeRequest.
        :rtype: EventIngestion
        """
        return self._event_ingestion

    @event_ingestion.setter
    def event_ingestion(self, event_ingestion):
        """Sets the event_ingestion of this PutEventTypeRequest.


        :param event_ingestion: The event_ingestion of this PutEventTypeRequest.
        :type event_ingestion: EventIngestion
        """

        self._event_ingestion = event_ingestion

    @property
    def tags(self):
        """Gets the tags of this PutEventTypeRequest.


        :return: The tags of this PutEventTypeRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this PutEventTypeRequest.


        :param tags: The tags of this PutEventTypeRequest.
        :type tags: List
        """

        self._tags = tags

    @property
    def event_orchestration(self):
        """Gets the event_orchestration of this PutEventTypeRequest.


        :return: The event_orchestration of this PutEventTypeRequest.
        :rtype: PutEventTypeRequestEventOrchestration
        """
        return self._event_orchestration

    @event_orchestration.setter
    def event_orchestration(self, event_orchestration):
        """Sets the event_orchestration of this PutEventTypeRequest.


        :param event_orchestration: The event_orchestration of this PutEventTypeRequest.
        :type event_orchestration: PutEventTypeRequestEventOrchestration
        """

        self._event_orchestration = event_orchestration
