# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EvaluatedRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rule_id: str=None, rule_version: str=None, expression: str=None, expression_with_values: str=None, outcomes: List=None, evaluated: bool=None, matched: bool=None):
        """EvaluatedRule - a model defined in OpenAPI

        :param rule_id: The rule_id of this EvaluatedRule.
        :param rule_version: The rule_version of this EvaluatedRule.
        :param expression: The expression of this EvaluatedRule.
        :param expression_with_values: The expression_with_values of this EvaluatedRule.
        :param outcomes: The outcomes of this EvaluatedRule.
        :param evaluated: The evaluated of this EvaluatedRule.
        :param matched: The matched of this EvaluatedRule.
        """
        self.openapi_types = {
            'rule_id': str,
            'rule_version': str,
            'expression': str,
            'expression_with_values': str,
            'outcomes': List,
            'evaluated': bool,
            'matched': bool
        }

        self.attribute_map = {
            'rule_id': 'ruleId',
            'rule_version': 'ruleVersion',
            'expression': 'expression',
            'expression_with_values': 'expressionWithValues',
            'outcomes': 'outcomes',
            'evaluated': 'evaluated',
            'matched': 'matched'
        }

        self._rule_id = rule_id
        self._rule_version = rule_version
        self._expression = expression
        self._expression_with_values = expression_with_values
        self._outcomes = outcomes
        self._evaluated = evaluated
        self._matched = matched

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EvaluatedRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EvaluatedRule of this EvaluatedRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rule_id(self):
        """Gets the rule_id of this EvaluatedRule.


        :return: The rule_id of this EvaluatedRule.
        :rtype: str
        """
        return self._rule_id

    @rule_id.setter
    def rule_id(self, rule_id):
        """Sets the rule_id of this EvaluatedRule.


        :param rule_id: The rule_id of this EvaluatedRule.
        :type rule_id: str
        """

        self._rule_id = rule_id

    @property
    def rule_version(self):
        """Gets the rule_version of this EvaluatedRule.


        :return: The rule_version of this EvaluatedRule.
        :rtype: str
        """
        return self._rule_version

    @rule_version.setter
    def rule_version(self, rule_version):
        """Sets the rule_version of this EvaluatedRule.


        :param rule_version: The rule_version of this EvaluatedRule.
        :type rule_version: str
        """

        self._rule_version = rule_version

    @property
    def expression(self):
        """Gets the expression of this EvaluatedRule.


        :return: The expression of this EvaluatedRule.
        :rtype: str
        """
        return self._expression

    @expression.setter
    def expression(self, expression):
        """Sets the expression of this EvaluatedRule.


        :param expression: The expression of this EvaluatedRule.
        :type expression: str
        """

        self._expression = expression

    @property
    def expression_with_values(self):
        """Gets the expression_with_values of this EvaluatedRule.


        :return: The expression_with_values of this EvaluatedRule.
        :rtype: str
        """
        return self._expression_with_values

    @expression_with_values.setter
    def expression_with_values(self, expression_with_values):
        """Sets the expression_with_values of this EvaluatedRule.


        :param expression_with_values: The expression_with_values of this EvaluatedRule.
        :type expression_with_values: str
        """

        self._expression_with_values = expression_with_values

    @property
    def outcomes(self):
        """Gets the outcomes of this EvaluatedRule.


        :return: The outcomes of this EvaluatedRule.
        :rtype: List
        """
        return self._outcomes

    @outcomes.setter
    def outcomes(self, outcomes):
        """Sets the outcomes of this EvaluatedRule.


        :param outcomes: The outcomes of this EvaluatedRule.
        :type outcomes: List
        """

        self._outcomes = outcomes

    @property
    def evaluated(self):
        """Gets the evaluated of this EvaluatedRule.


        :return: The evaluated of this EvaluatedRule.
        :rtype: bool
        """
        return self._evaluated

    @evaluated.setter
    def evaluated(self, evaluated):
        """Sets the evaluated of this EvaluatedRule.


        :param evaluated: The evaluated of this EvaluatedRule.
        :type evaluated: bool
        """

        self._evaluated = evaluated

    @property
    def matched(self):
        """Gets the matched of this EvaluatedRule.


        :return: The matched of this EvaluatedRule.
        :rtype: bool
        """
        return self._matched

    @matched.setter
    def matched(self, matched):
        """Sets the matched of this EvaluatedRule.


        :param matched: The matched of this EvaluatedRule.
        :type matched: bool
        """

        self._matched = matched
