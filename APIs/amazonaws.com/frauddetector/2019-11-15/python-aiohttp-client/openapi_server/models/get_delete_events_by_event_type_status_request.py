# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetDeleteEventsByEventTypeStatusRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_type_name: str=None):
        """GetDeleteEventsByEventTypeStatusRequest - a model defined in OpenAPI

        :param event_type_name: The event_type_name of this GetDeleteEventsByEventTypeStatusRequest.
        """
        self.openapi_types = {
            'event_type_name': str
        }

        self.attribute_map = {
            'event_type_name': 'eventTypeName'
        }

        self._event_type_name = event_type_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetDeleteEventsByEventTypeStatusRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetDeleteEventsByEventTypeStatusRequest of this GetDeleteEventsByEventTypeStatusRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_type_name(self):
        """Gets the event_type_name of this GetDeleteEventsByEventTypeStatusRequest.


        :return: The event_type_name of this GetDeleteEventsByEventTypeStatusRequest.
        :rtype: str
        """
        return self._event_type_name

    @event_type_name.setter
    def event_type_name(self, event_type_name):
        """Sets the event_type_name of this GetDeleteEventsByEventTypeStatusRequest.


        :param event_type_name: The event_type_name of this GetDeleteEventsByEventTypeStatusRequest.
        :type event_type_name: str
        """
        if event_type_name is None:
            raise ValueError("Invalid value for `event_type_name`, must not be `None`")

        self._event_type_name = event_type_name
