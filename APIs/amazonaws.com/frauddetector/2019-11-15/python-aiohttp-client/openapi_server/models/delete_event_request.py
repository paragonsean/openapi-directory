# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeleteEventRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_id: str=None, event_type_name: str=None, delete_audit_history: bool=None):
        """DeleteEventRequest - a model defined in OpenAPI

        :param event_id: The event_id of this DeleteEventRequest.
        :param event_type_name: The event_type_name of this DeleteEventRequest.
        :param delete_audit_history: The delete_audit_history of this DeleteEventRequest.
        """
        self.openapi_types = {
            'event_id': str,
            'event_type_name': str,
            'delete_audit_history': bool
        }

        self.attribute_map = {
            'event_id': 'eventId',
            'event_type_name': 'eventTypeName',
            'delete_audit_history': 'deleteAuditHistory'
        }

        self._event_id = event_id
        self._event_type_name = event_type_name
        self._delete_audit_history = delete_audit_history

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeleteEventRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeleteEventRequest of this DeleteEventRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_id(self):
        """Gets the event_id of this DeleteEventRequest.


        :return: The event_id of this DeleteEventRequest.
        :rtype: str
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this DeleteEventRequest.


        :param event_id: The event_id of this DeleteEventRequest.
        :type event_id: str
        """
        if event_id is None:
            raise ValueError("Invalid value for `event_id`, must not be `None`")

        self._event_id = event_id

    @property
    def event_type_name(self):
        """Gets the event_type_name of this DeleteEventRequest.


        :return: The event_type_name of this DeleteEventRequest.
        :rtype: str
        """
        return self._event_type_name

    @event_type_name.setter
    def event_type_name(self, event_type_name):
        """Sets the event_type_name of this DeleteEventRequest.


        :param event_type_name: The event_type_name of this DeleteEventRequest.
        :type event_type_name: str
        """
        if event_type_name is None:
            raise ValueError("Invalid value for `event_type_name`, must not be `None`")

        self._event_type_name = event_type_name

    @property
    def delete_audit_history(self):
        """Gets the delete_audit_history of this DeleteEventRequest.


        :return: The delete_audit_history of this DeleteEventRequest.
        :rtype: bool
        """
        return self._delete_audit_history

    @delete_audit_history.setter
    def delete_audit_history(self, delete_audit_history):
        """Sets the delete_audit_history of this DeleteEventRequest.


        :param delete_audit_history: The delete_audit_history of this DeleteEventRequest.
        :type delete_audit_history: bool
        """

        self._delete_audit_history = delete_audit_history
