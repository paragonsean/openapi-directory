# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TFIModelPerformanceUncertaintyRange(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, lower_bound_value: float=None, upper_bound_value: float=None):
        """TFIModelPerformanceUncertaintyRange - a model defined in OpenAPI

        :param lower_bound_value: The lower_bound_value of this TFIModelPerformanceUncertaintyRange.
        :param upper_bound_value: The upper_bound_value of this TFIModelPerformanceUncertaintyRange.
        """
        self.openapi_types = {
            'lower_bound_value': float,
            'upper_bound_value': float
        }

        self.attribute_map = {
            'lower_bound_value': 'lowerBoundValue',
            'upper_bound_value': 'upperBoundValue'
        }

        self._lower_bound_value = lower_bound_value
        self._upper_bound_value = upper_bound_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TFIModelPerformanceUncertaintyRange':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TFIModelPerformance_uncertaintyRange of this TFIModelPerformanceUncertaintyRange.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def lower_bound_value(self):
        """Gets the lower_bound_value of this TFIModelPerformanceUncertaintyRange.


        :return: The lower_bound_value of this TFIModelPerformanceUncertaintyRange.
        :rtype: float
        """
        return self._lower_bound_value

    @lower_bound_value.setter
    def lower_bound_value(self, lower_bound_value):
        """Sets the lower_bound_value of this TFIModelPerformanceUncertaintyRange.


        :param lower_bound_value: The lower_bound_value of this TFIModelPerformanceUncertaintyRange.
        :type lower_bound_value: float
        """
        if lower_bound_value is None:
            raise ValueError("Invalid value for `lower_bound_value`, must not be `None`")

        self._lower_bound_value = lower_bound_value

    @property
    def upper_bound_value(self):
        """Gets the upper_bound_value of this TFIModelPerformanceUncertaintyRange.


        :return: The upper_bound_value of this TFIModelPerformanceUncertaintyRange.
        :rtype: float
        """
        return self._upper_bound_value

    @upper_bound_value.setter
    def upper_bound_value(self, upper_bound_value):
        """Sets the upper_bound_value of this TFIModelPerformanceUncertaintyRange.


        :param upper_bound_value: The upper_bound_value of this TFIModelPerformanceUncertaintyRange.
        :type upper_bound_value: float
        """
        if upper_bound_value is None:
            raise ValueError("Invalid value for `upper_bound_value`, must not be `None`")

        self._upper_bound_value = upper_bound_value
