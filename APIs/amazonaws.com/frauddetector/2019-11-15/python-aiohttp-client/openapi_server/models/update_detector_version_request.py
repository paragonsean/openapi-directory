# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.rule_execution_mode import RuleExecutionMode
from openapi_server import util


class UpdateDetectorVersionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, detector_id: str=None, detector_version_id: str=None, external_model_endpoints: List=None, rules: List=None, description: str=None, model_versions: List=None, rule_execution_mode: RuleExecutionMode=None):
        """UpdateDetectorVersionRequest - a model defined in OpenAPI

        :param detector_id: The detector_id of this UpdateDetectorVersionRequest.
        :param detector_version_id: The detector_version_id of this UpdateDetectorVersionRequest.
        :param external_model_endpoints: The external_model_endpoints of this UpdateDetectorVersionRequest.
        :param rules: The rules of this UpdateDetectorVersionRequest.
        :param description: The description of this UpdateDetectorVersionRequest.
        :param model_versions: The model_versions of this UpdateDetectorVersionRequest.
        :param rule_execution_mode: The rule_execution_mode of this UpdateDetectorVersionRequest.
        """
        self.openapi_types = {
            'detector_id': str,
            'detector_version_id': str,
            'external_model_endpoints': List,
            'rules': List,
            'description': str,
            'model_versions': List,
            'rule_execution_mode': RuleExecutionMode
        }

        self.attribute_map = {
            'detector_id': 'detectorId',
            'detector_version_id': 'detectorVersionId',
            'external_model_endpoints': 'externalModelEndpoints',
            'rules': 'rules',
            'description': 'description',
            'model_versions': 'modelVersions',
            'rule_execution_mode': 'ruleExecutionMode'
        }

        self._detector_id = detector_id
        self._detector_version_id = detector_version_id
        self._external_model_endpoints = external_model_endpoints
        self._rules = rules
        self._description = description
        self._model_versions = model_versions
        self._rule_execution_mode = rule_execution_mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateDetectorVersionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateDetectorVersionRequest of this UpdateDetectorVersionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def detector_id(self):
        """Gets the detector_id of this UpdateDetectorVersionRequest.


        :return: The detector_id of this UpdateDetectorVersionRequest.
        :rtype: str
        """
        return self._detector_id

    @detector_id.setter
    def detector_id(self, detector_id):
        """Sets the detector_id of this UpdateDetectorVersionRequest.


        :param detector_id: The detector_id of this UpdateDetectorVersionRequest.
        :type detector_id: str
        """
        if detector_id is None:
            raise ValueError("Invalid value for `detector_id`, must not be `None`")

        self._detector_id = detector_id

    @property
    def detector_version_id(self):
        """Gets the detector_version_id of this UpdateDetectorVersionRequest.


        :return: The detector_version_id of this UpdateDetectorVersionRequest.
        :rtype: str
        """
        return self._detector_version_id

    @detector_version_id.setter
    def detector_version_id(self, detector_version_id):
        """Sets the detector_version_id of this UpdateDetectorVersionRequest.


        :param detector_version_id: The detector_version_id of this UpdateDetectorVersionRequest.
        :type detector_version_id: str
        """
        if detector_version_id is None:
            raise ValueError("Invalid value for `detector_version_id`, must not be `None`")

        self._detector_version_id = detector_version_id

    @property
    def external_model_endpoints(self):
        """Gets the external_model_endpoints of this UpdateDetectorVersionRequest.


        :return: The external_model_endpoints of this UpdateDetectorVersionRequest.
        :rtype: List
        """
        return self._external_model_endpoints

    @external_model_endpoints.setter
    def external_model_endpoints(self, external_model_endpoints):
        """Sets the external_model_endpoints of this UpdateDetectorVersionRequest.


        :param external_model_endpoints: The external_model_endpoints of this UpdateDetectorVersionRequest.
        :type external_model_endpoints: List
        """
        if external_model_endpoints is None:
            raise ValueError("Invalid value for `external_model_endpoints`, must not be `None`")

        self._external_model_endpoints = external_model_endpoints

    @property
    def rules(self):
        """Gets the rules of this UpdateDetectorVersionRequest.


        :return: The rules of this UpdateDetectorVersionRequest.
        :rtype: List
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this UpdateDetectorVersionRequest.


        :param rules: The rules of this UpdateDetectorVersionRequest.
        :type rules: List
        """
        if rules is None:
            raise ValueError("Invalid value for `rules`, must not be `None`")

        self._rules = rules

    @property
    def description(self):
        """Gets the description of this UpdateDetectorVersionRequest.


        :return: The description of this UpdateDetectorVersionRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateDetectorVersionRequest.


        :param description: The description of this UpdateDetectorVersionRequest.
        :type description: str
        """

        self._description = description

    @property
    def model_versions(self):
        """Gets the model_versions of this UpdateDetectorVersionRequest.


        :return: The model_versions of this UpdateDetectorVersionRequest.
        :rtype: List
        """
        return self._model_versions

    @model_versions.setter
    def model_versions(self, model_versions):
        """Sets the model_versions of this UpdateDetectorVersionRequest.


        :param model_versions: The model_versions of this UpdateDetectorVersionRequest.
        :type model_versions: List
        """

        self._model_versions = model_versions

    @property
    def rule_execution_mode(self):
        """Gets the rule_execution_mode of this UpdateDetectorVersionRequest.


        :return: The rule_execution_mode of this UpdateDetectorVersionRequest.
        :rtype: RuleExecutionMode
        """
        return self._rule_execution_mode

    @rule_execution_mode.setter
    def rule_execution_mode(self, rule_execution_mode):
        """Sets the rule_execution_mode of this UpdateDetectorVersionRequest.


        :param rule_execution_mode: The rule_execution_mode of this UpdateDetectorVersionRequest.
        :type rule_execution_mode: RuleExecutionMode
        """

        self._rule_execution_mode = rule_execution_mode
