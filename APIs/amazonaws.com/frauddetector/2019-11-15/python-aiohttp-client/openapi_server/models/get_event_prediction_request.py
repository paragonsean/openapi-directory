# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetEventPredictionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, detector_id: str=None, detector_version_id: str=None, event_id: str=None, event_type_name: str=None, entities: List=None, event_timestamp: str=None, event_variables: Dict=None, external_model_endpoint_data_blobs: Dict=None):
        """GetEventPredictionRequest - a model defined in OpenAPI

        :param detector_id: The detector_id of this GetEventPredictionRequest.
        :param detector_version_id: The detector_version_id of this GetEventPredictionRequest.
        :param event_id: The event_id of this GetEventPredictionRequest.
        :param event_type_name: The event_type_name of this GetEventPredictionRequest.
        :param entities: The entities of this GetEventPredictionRequest.
        :param event_timestamp: The event_timestamp of this GetEventPredictionRequest.
        :param event_variables: The event_variables of this GetEventPredictionRequest.
        :param external_model_endpoint_data_blobs: The external_model_endpoint_data_blobs of this GetEventPredictionRequest.
        """
        self.openapi_types = {
            'detector_id': str,
            'detector_version_id': str,
            'event_id': str,
            'event_type_name': str,
            'entities': List,
            'event_timestamp': str,
            'event_variables': Dict,
            'external_model_endpoint_data_blobs': Dict
        }

        self.attribute_map = {
            'detector_id': 'detectorId',
            'detector_version_id': 'detectorVersionId',
            'event_id': 'eventId',
            'event_type_name': 'eventTypeName',
            'entities': 'entities',
            'event_timestamp': 'eventTimestamp',
            'event_variables': 'eventVariables',
            'external_model_endpoint_data_blobs': 'externalModelEndpointDataBlobs'
        }

        self._detector_id = detector_id
        self._detector_version_id = detector_version_id
        self._event_id = event_id
        self._event_type_name = event_type_name
        self._entities = entities
        self._event_timestamp = event_timestamp
        self._event_variables = event_variables
        self._external_model_endpoint_data_blobs = external_model_endpoint_data_blobs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetEventPredictionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetEventPredictionRequest of this GetEventPredictionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def detector_id(self):
        """Gets the detector_id of this GetEventPredictionRequest.


        :return: The detector_id of this GetEventPredictionRequest.
        :rtype: str
        """
        return self._detector_id

    @detector_id.setter
    def detector_id(self, detector_id):
        """Sets the detector_id of this GetEventPredictionRequest.


        :param detector_id: The detector_id of this GetEventPredictionRequest.
        :type detector_id: str
        """
        if detector_id is None:
            raise ValueError("Invalid value for `detector_id`, must not be `None`")

        self._detector_id = detector_id

    @property
    def detector_version_id(self):
        """Gets the detector_version_id of this GetEventPredictionRequest.


        :return: The detector_version_id of this GetEventPredictionRequest.
        :rtype: str
        """
        return self._detector_version_id

    @detector_version_id.setter
    def detector_version_id(self, detector_version_id):
        """Sets the detector_version_id of this GetEventPredictionRequest.


        :param detector_version_id: The detector_version_id of this GetEventPredictionRequest.
        :type detector_version_id: str
        """

        self._detector_version_id = detector_version_id

    @property
    def event_id(self):
        """Gets the event_id of this GetEventPredictionRequest.


        :return: The event_id of this GetEventPredictionRequest.
        :rtype: str
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this GetEventPredictionRequest.


        :param event_id: The event_id of this GetEventPredictionRequest.
        :type event_id: str
        """
        if event_id is None:
            raise ValueError("Invalid value for `event_id`, must not be `None`")

        self._event_id = event_id

    @property
    def event_type_name(self):
        """Gets the event_type_name of this GetEventPredictionRequest.


        :return: The event_type_name of this GetEventPredictionRequest.
        :rtype: str
        """
        return self._event_type_name

    @event_type_name.setter
    def event_type_name(self, event_type_name):
        """Sets the event_type_name of this GetEventPredictionRequest.


        :param event_type_name: The event_type_name of this GetEventPredictionRequest.
        :type event_type_name: str
        """
        if event_type_name is None:
            raise ValueError("Invalid value for `event_type_name`, must not be `None`")

        self._event_type_name = event_type_name

    @property
    def entities(self):
        """Gets the entities of this GetEventPredictionRequest.


        :return: The entities of this GetEventPredictionRequest.
        :rtype: List
        """
        return self._entities

    @entities.setter
    def entities(self, entities):
        """Sets the entities of this GetEventPredictionRequest.


        :param entities: The entities of this GetEventPredictionRequest.
        :type entities: List
        """
        if entities is None:
            raise ValueError("Invalid value for `entities`, must not be `None`")

        self._entities = entities

    @property
    def event_timestamp(self):
        """Gets the event_timestamp of this GetEventPredictionRequest.


        :return: The event_timestamp of this GetEventPredictionRequest.
        :rtype: str
        """
        return self._event_timestamp

    @event_timestamp.setter
    def event_timestamp(self, event_timestamp):
        """Sets the event_timestamp of this GetEventPredictionRequest.


        :param event_timestamp: The event_timestamp of this GetEventPredictionRequest.
        :type event_timestamp: str
        """
        if event_timestamp is None:
            raise ValueError("Invalid value for `event_timestamp`, must not be `None`")

        self._event_timestamp = event_timestamp

    @property
    def event_variables(self):
        """Gets the event_variables of this GetEventPredictionRequest.


        :return: The event_variables of this GetEventPredictionRequest.
        :rtype: Dict
        """
        return self._event_variables

    @event_variables.setter
    def event_variables(self, event_variables):
        """Sets the event_variables of this GetEventPredictionRequest.


        :param event_variables: The event_variables of this GetEventPredictionRequest.
        :type event_variables: Dict
        """
        if event_variables is None:
            raise ValueError("Invalid value for `event_variables`, must not be `None`")

        self._event_variables = event_variables

    @property
    def external_model_endpoint_data_blobs(self):
        """Gets the external_model_endpoint_data_blobs of this GetEventPredictionRequest.


        :return: The external_model_endpoint_data_blobs of this GetEventPredictionRequest.
        :rtype: Dict
        """
        return self._external_model_endpoint_data_blobs

    @external_model_endpoint_data_blobs.setter
    def external_model_endpoint_data_blobs(self, external_model_endpoint_data_blobs):
        """Sets the external_model_endpoint_data_blobs of this GetEventPredictionRequest.


        :param external_model_endpoint_data_blobs: The external_model_endpoint_data_blobs of this GetEventPredictionRequest.
        :type external_model_endpoint_data_blobs: Dict
        """

        self._external_model_endpoint_data_blobs = external_model_endpoint_data_blobs
