# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateRuleMetadataRequestRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, detector_id: str=None, rule_id: str=None, rule_version: str=None):
        """UpdateRuleMetadataRequestRule - a model defined in OpenAPI

        :param detector_id: The detector_id of this UpdateRuleMetadataRequestRule.
        :param rule_id: The rule_id of this UpdateRuleMetadataRequestRule.
        :param rule_version: The rule_version of this UpdateRuleMetadataRequestRule.
        """
        self.openapi_types = {
            'detector_id': str,
            'rule_id': str,
            'rule_version': str
        }

        self.attribute_map = {
            'detector_id': 'detectorId',
            'rule_id': 'ruleId',
            'rule_version': 'ruleVersion'
        }

        self._detector_id = detector_id
        self._rule_id = rule_id
        self._rule_version = rule_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateRuleMetadataRequestRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateRuleMetadataRequest_rule of this UpdateRuleMetadataRequestRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def detector_id(self):
        """Gets the detector_id of this UpdateRuleMetadataRequestRule.


        :return: The detector_id of this UpdateRuleMetadataRequestRule.
        :rtype: str
        """
        return self._detector_id

    @detector_id.setter
    def detector_id(self, detector_id):
        """Sets the detector_id of this UpdateRuleMetadataRequestRule.


        :param detector_id: The detector_id of this UpdateRuleMetadataRequestRule.
        :type detector_id: str
        """
        if detector_id is None:
            raise ValueError("Invalid value for `detector_id`, must not be `None`")

        self._detector_id = detector_id

    @property
    def rule_id(self):
        """Gets the rule_id of this UpdateRuleMetadataRequestRule.


        :return: The rule_id of this UpdateRuleMetadataRequestRule.
        :rtype: str
        """
        return self._rule_id

    @rule_id.setter
    def rule_id(self, rule_id):
        """Sets the rule_id of this UpdateRuleMetadataRequestRule.


        :param rule_id: The rule_id of this UpdateRuleMetadataRequestRule.
        :type rule_id: str
        """
        if rule_id is None:
            raise ValueError("Invalid value for `rule_id`, must not be `None`")

        self._rule_id = rule_id

    @property
    def rule_version(self):
        """Gets the rule_version of this UpdateRuleMetadataRequestRule.


        :return: The rule_version of this UpdateRuleMetadataRequestRule.
        :rtype: str
        """
        return self._rule_version

    @rule_version.setter
    def rule_version(self, rule_version):
        """Sets the rule_version of this UpdateRuleMetadataRequestRule.


        :param rule_version: The rule_version of this UpdateRuleMetadataRequestRule.
        :type rule_version: str
        """
        if rule_version is None:
            raise ValueError("Invalid value for `rule_version`, must not be `None`")

        self._rule_version = rule_version
