# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AggregatedLogOddsMetric(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, variable_names: List=None, aggregated_variables_importance: float=None):
        """AggregatedLogOddsMetric - a model defined in OpenAPI

        :param variable_names: The variable_names of this AggregatedLogOddsMetric.
        :param aggregated_variables_importance: The aggregated_variables_importance of this AggregatedLogOddsMetric.
        """
        self.openapi_types = {
            'variable_names': List,
            'aggregated_variables_importance': float
        }

        self.attribute_map = {
            'variable_names': 'variableNames',
            'aggregated_variables_importance': 'aggregatedVariablesImportance'
        }

        self._variable_names = variable_names
        self._aggregated_variables_importance = aggregated_variables_importance

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AggregatedLogOddsMetric':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AggregatedLogOddsMetric of this AggregatedLogOddsMetric.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def variable_names(self):
        """Gets the variable_names of this AggregatedLogOddsMetric.


        :return: The variable_names of this AggregatedLogOddsMetric.
        :rtype: List
        """
        return self._variable_names

    @variable_names.setter
    def variable_names(self, variable_names):
        """Sets the variable_names of this AggregatedLogOddsMetric.


        :param variable_names: The variable_names of this AggregatedLogOddsMetric.
        :type variable_names: List
        """
        if variable_names is None:
            raise ValueError("Invalid value for `variable_names`, must not be `None`")

        self._variable_names = variable_names

    @property
    def aggregated_variables_importance(self):
        """Gets the aggregated_variables_importance of this AggregatedLogOddsMetric.


        :return: The aggregated_variables_importance of this AggregatedLogOddsMetric.
        :rtype: float
        """
        return self._aggregated_variables_importance

    @aggregated_variables_importance.setter
    def aggregated_variables_importance(self, aggregated_variables_importance):
        """Sets the aggregated_variables_importance of this AggregatedLogOddsMetric.


        :param aggregated_variables_importance: The aggregated_variables_importance of this AggregatedLogOddsMetric.
        :type aggregated_variables_importance: float
        """
        if aggregated_variables_importance is None:
            raise ValueError("Invalid value for `aggregated_variables_importance`, must not be `None`")

        self._aggregated_variables_importance = aggregated_variables_importance
