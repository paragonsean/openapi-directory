# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.language import Language
from openapi_server.models.update_rule_metadata_request_rule import UpdateRuleMetadataRequestRule
from openapi_server import util


class UpdateRuleVersionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rule: UpdateRuleMetadataRequestRule=None, description: str=None, expression: str=None, language: Language=None, outcomes: List=None, tags: List=None):
        """UpdateRuleVersionRequest - a model defined in OpenAPI

        :param rule: The rule of this UpdateRuleVersionRequest.
        :param description: The description of this UpdateRuleVersionRequest.
        :param expression: The expression of this UpdateRuleVersionRequest.
        :param language: The language of this UpdateRuleVersionRequest.
        :param outcomes: The outcomes of this UpdateRuleVersionRequest.
        :param tags: The tags of this UpdateRuleVersionRequest.
        """
        self.openapi_types = {
            'rule': UpdateRuleMetadataRequestRule,
            'description': str,
            'expression': str,
            'language': Language,
            'outcomes': List,
            'tags': List
        }

        self.attribute_map = {
            'rule': 'rule',
            'description': 'description',
            'expression': 'expression',
            'language': 'language',
            'outcomes': 'outcomes',
            'tags': 'tags'
        }

        self._rule = rule
        self._description = description
        self._expression = expression
        self._language = language
        self._outcomes = outcomes
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateRuleVersionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateRuleVersionRequest of this UpdateRuleVersionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rule(self):
        """Gets the rule of this UpdateRuleVersionRequest.


        :return: The rule of this UpdateRuleVersionRequest.
        :rtype: UpdateRuleMetadataRequestRule
        """
        return self._rule

    @rule.setter
    def rule(self, rule):
        """Sets the rule of this UpdateRuleVersionRequest.


        :param rule: The rule of this UpdateRuleVersionRequest.
        :type rule: UpdateRuleMetadataRequestRule
        """
        if rule is None:
            raise ValueError("Invalid value for `rule`, must not be `None`")

        self._rule = rule

    @property
    def description(self):
        """Gets the description of this UpdateRuleVersionRequest.


        :return: The description of this UpdateRuleVersionRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateRuleVersionRequest.


        :param description: The description of this UpdateRuleVersionRequest.
        :type description: str
        """

        self._description = description

    @property
    def expression(self):
        """Gets the expression of this UpdateRuleVersionRequest.


        :return: The expression of this UpdateRuleVersionRequest.
        :rtype: str
        """
        return self._expression

    @expression.setter
    def expression(self, expression):
        """Sets the expression of this UpdateRuleVersionRequest.


        :param expression: The expression of this UpdateRuleVersionRequest.
        :type expression: str
        """
        if expression is None:
            raise ValueError("Invalid value for `expression`, must not be `None`")

        self._expression = expression

    @property
    def language(self):
        """Gets the language of this UpdateRuleVersionRequest.


        :return: The language of this UpdateRuleVersionRequest.
        :rtype: Language
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this UpdateRuleVersionRequest.


        :param language: The language of this UpdateRuleVersionRequest.
        :type language: Language
        """
        if language is None:
            raise ValueError("Invalid value for `language`, must not be `None`")

        self._language = language

    @property
    def outcomes(self):
        """Gets the outcomes of this UpdateRuleVersionRequest.


        :return: The outcomes of this UpdateRuleVersionRequest.
        :rtype: List
        """
        return self._outcomes

    @outcomes.setter
    def outcomes(self, outcomes):
        """Sets the outcomes of this UpdateRuleVersionRequest.


        :param outcomes: The outcomes of this UpdateRuleVersionRequest.
        :type outcomes: List
        """
        if outcomes is None:
            raise ValueError("Invalid value for `outcomes`, must not be `None`")

        self._outcomes = outcomes

    @property
    def tags(self):
        """Gets the tags of this UpdateRuleVersionRequest.


        :return: The tags of this UpdateRuleVersionRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this UpdateRuleVersionRequest.


        :param tags: The tags of this UpdateRuleVersionRequest.
        :type tags: List
        """

        self._tags = tags
