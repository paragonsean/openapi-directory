# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateBatchImportJobRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, job_id: str=None, input_path: str=None, output_path: str=None, event_type_name: str=None, iam_role_arn: str=None, tags: List=None):
        """CreateBatchImportJobRequest - a model defined in OpenAPI

        :param job_id: The job_id of this CreateBatchImportJobRequest.
        :param input_path: The input_path of this CreateBatchImportJobRequest.
        :param output_path: The output_path of this CreateBatchImportJobRequest.
        :param event_type_name: The event_type_name of this CreateBatchImportJobRequest.
        :param iam_role_arn: The iam_role_arn of this CreateBatchImportJobRequest.
        :param tags: The tags of this CreateBatchImportJobRequest.
        """
        self.openapi_types = {
            'job_id': str,
            'input_path': str,
            'output_path': str,
            'event_type_name': str,
            'iam_role_arn': str,
            'tags': List
        }

        self.attribute_map = {
            'job_id': 'jobId',
            'input_path': 'inputPath',
            'output_path': 'outputPath',
            'event_type_name': 'eventTypeName',
            'iam_role_arn': 'iamRoleArn',
            'tags': 'tags'
        }

        self._job_id = job_id
        self._input_path = input_path
        self._output_path = output_path
        self._event_type_name = event_type_name
        self._iam_role_arn = iam_role_arn
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateBatchImportJobRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateBatchImportJobRequest of this CreateBatchImportJobRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def job_id(self):
        """Gets the job_id of this CreateBatchImportJobRequest.


        :return: The job_id of this CreateBatchImportJobRequest.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this CreateBatchImportJobRequest.


        :param job_id: The job_id of this CreateBatchImportJobRequest.
        :type job_id: str
        """
        if job_id is None:
            raise ValueError("Invalid value for `job_id`, must not be `None`")

        self._job_id = job_id

    @property
    def input_path(self):
        """Gets the input_path of this CreateBatchImportJobRequest.


        :return: The input_path of this CreateBatchImportJobRequest.
        :rtype: str
        """
        return self._input_path

    @input_path.setter
    def input_path(self, input_path):
        """Sets the input_path of this CreateBatchImportJobRequest.


        :param input_path: The input_path of this CreateBatchImportJobRequest.
        :type input_path: str
        """
        if input_path is None:
            raise ValueError("Invalid value for `input_path`, must not be `None`")

        self._input_path = input_path

    @property
    def output_path(self):
        """Gets the output_path of this CreateBatchImportJobRequest.


        :return: The output_path of this CreateBatchImportJobRequest.
        :rtype: str
        """
        return self._output_path

    @output_path.setter
    def output_path(self, output_path):
        """Sets the output_path of this CreateBatchImportJobRequest.


        :param output_path: The output_path of this CreateBatchImportJobRequest.
        :type output_path: str
        """
        if output_path is None:
            raise ValueError("Invalid value for `output_path`, must not be `None`")

        self._output_path = output_path

    @property
    def event_type_name(self):
        """Gets the event_type_name of this CreateBatchImportJobRequest.


        :return: The event_type_name of this CreateBatchImportJobRequest.
        :rtype: str
        """
        return self._event_type_name

    @event_type_name.setter
    def event_type_name(self, event_type_name):
        """Sets the event_type_name of this CreateBatchImportJobRequest.


        :param event_type_name: The event_type_name of this CreateBatchImportJobRequest.
        :type event_type_name: str
        """
        if event_type_name is None:
            raise ValueError("Invalid value for `event_type_name`, must not be `None`")

        self._event_type_name = event_type_name

    @property
    def iam_role_arn(self):
        """Gets the iam_role_arn of this CreateBatchImportJobRequest.


        :return: The iam_role_arn of this CreateBatchImportJobRequest.
        :rtype: str
        """
        return self._iam_role_arn

    @iam_role_arn.setter
    def iam_role_arn(self, iam_role_arn):
        """Sets the iam_role_arn of this CreateBatchImportJobRequest.


        :param iam_role_arn: The iam_role_arn of this CreateBatchImportJobRequest.
        :type iam_role_arn: str
        """
        if iam_role_arn is None:
            raise ValueError("Invalid value for `iam_role_arn`, must not be `None`")

        self._iam_role_arn = iam_role_arn

    @property
    def tags(self):
        """Gets the tags of this CreateBatchImportJobRequest.


        :return: The tags of this CreateBatchImportJobRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateBatchImportJobRequest.


        :param tags: The tags of this CreateBatchImportJobRequest.
        :type tags: List
        """

        self._tags = tags
