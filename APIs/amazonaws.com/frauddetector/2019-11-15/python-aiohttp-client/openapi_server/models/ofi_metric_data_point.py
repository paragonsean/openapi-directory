# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OFIMetricDataPoint(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fpr: float=None, precision: float=None, tpr: float=None, threshold: float=None):
        """OFIMetricDataPoint - a model defined in OpenAPI

        :param fpr: The fpr of this OFIMetricDataPoint.
        :param precision: The precision of this OFIMetricDataPoint.
        :param tpr: The tpr of this OFIMetricDataPoint.
        :param threshold: The threshold of this OFIMetricDataPoint.
        """
        self.openapi_types = {
            'fpr': float,
            'precision': float,
            'tpr': float,
            'threshold': float
        }

        self.attribute_map = {
            'fpr': 'fpr',
            'precision': 'precision',
            'tpr': 'tpr',
            'threshold': 'threshold'
        }

        self._fpr = fpr
        self._precision = precision
        self._tpr = tpr
        self._threshold = threshold

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OFIMetricDataPoint':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OFIMetricDataPoint of this OFIMetricDataPoint.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fpr(self):
        """Gets the fpr of this OFIMetricDataPoint.


        :return: The fpr of this OFIMetricDataPoint.
        :rtype: float
        """
        return self._fpr

    @fpr.setter
    def fpr(self, fpr):
        """Sets the fpr of this OFIMetricDataPoint.


        :param fpr: The fpr of this OFIMetricDataPoint.
        :type fpr: float
        """

        self._fpr = fpr

    @property
    def precision(self):
        """Gets the precision of this OFIMetricDataPoint.


        :return: The precision of this OFIMetricDataPoint.
        :rtype: float
        """
        return self._precision

    @precision.setter
    def precision(self, precision):
        """Sets the precision of this OFIMetricDataPoint.


        :param precision: The precision of this OFIMetricDataPoint.
        :type precision: float
        """

        self._precision = precision

    @property
    def tpr(self):
        """Gets the tpr of this OFIMetricDataPoint.


        :return: The tpr of this OFIMetricDataPoint.
        :rtype: float
        """
        return self._tpr

    @tpr.setter
    def tpr(self, tpr):
        """Sets the tpr of this OFIMetricDataPoint.


        :param tpr: The tpr of this OFIMetricDataPoint.
        :type tpr: float
        """

        self._tpr = tpr

    @property
    def threshold(self):
        """Gets the threshold of this OFIMetricDataPoint.


        :return: The threshold of this OFIMetricDataPoint.
        :rtype: float
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold):
        """Sets the threshold of this OFIMetricDataPoint.


        :param threshold: The threshold of this OFIMetricDataPoint.
        :type threshold: float
        """

        self._threshold = threshold
