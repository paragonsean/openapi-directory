# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LogOddsMetric(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, variable_name: str=None, variable_type: str=None, variable_importance: float=None):
        """LogOddsMetric - a model defined in OpenAPI

        :param variable_name: The variable_name of this LogOddsMetric.
        :param variable_type: The variable_type of this LogOddsMetric.
        :param variable_importance: The variable_importance of this LogOddsMetric.
        """
        self.openapi_types = {
            'variable_name': str,
            'variable_type': str,
            'variable_importance': float
        }

        self.attribute_map = {
            'variable_name': 'variableName',
            'variable_type': 'variableType',
            'variable_importance': 'variableImportance'
        }

        self._variable_name = variable_name
        self._variable_type = variable_type
        self._variable_importance = variable_importance

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LogOddsMetric':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LogOddsMetric of this LogOddsMetric.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def variable_name(self):
        """Gets the variable_name of this LogOddsMetric.


        :return: The variable_name of this LogOddsMetric.
        :rtype: str
        """
        return self._variable_name

    @variable_name.setter
    def variable_name(self, variable_name):
        """Sets the variable_name of this LogOddsMetric.


        :param variable_name: The variable_name of this LogOddsMetric.
        :type variable_name: str
        """
        if variable_name is None:
            raise ValueError("Invalid value for `variable_name`, must not be `None`")

        self._variable_name = variable_name

    @property
    def variable_type(self):
        """Gets the variable_type of this LogOddsMetric.


        :return: The variable_type of this LogOddsMetric.
        :rtype: str
        """
        return self._variable_type

    @variable_type.setter
    def variable_type(self, variable_type):
        """Sets the variable_type of this LogOddsMetric.


        :param variable_type: The variable_type of this LogOddsMetric.
        :type variable_type: str
        """
        if variable_type is None:
            raise ValueError("Invalid value for `variable_type`, must not be `None`")

        self._variable_type = variable_type

    @property
    def variable_importance(self):
        """Gets the variable_importance of this LogOddsMetric.


        :return: The variable_importance of this LogOddsMetric.
        :rtype: float
        """
        return self._variable_importance

    @variable_importance.setter
    def variable_importance(self, variable_importance):
        """Sets the variable_importance of this LogOddsMetric.


        :param variable_importance: The variable_importance of this LogOddsMetric.
        :type variable_importance: float
        """
        if variable_importance is None:
            raise ValueError("Invalid value for `variable_importance`, must not be `None`")

        self._variable_importance = variable_importance
