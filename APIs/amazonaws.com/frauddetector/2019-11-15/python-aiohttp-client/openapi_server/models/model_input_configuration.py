# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.model_input_data_format import ModelInputDataFormat
from openapi_server import util


class ModelInputConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_type_name: str=None, format: ModelInputDataFormat=None, use_event_variables: bool=None, json_input_template: str=None, csv_input_template: str=None):
        """ModelInputConfiguration - a model defined in OpenAPI

        :param event_type_name: The event_type_name of this ModelInputConfiguration.
        :param format: The format of this ModelInputConfiguration.
        :param use_event_variables: The use_event_variables of this ModelInputConfiguration.
        :param json_input_template: The json_input_template of this ModelInputConfiguration.
        :param csv_input_template: The csv_input_template of this ModelInputConfiguration.
        """
        self.openapi_types = {
            'event_type_name': str,
            'format': ModelInputDataFormat,
            'use_event_variables': bool,
            'json_input_template': str,
            'csv_input_template': str
        }

        self.attribute_map = {
            'event_type_name': 'eventTypeName',
            'format': 'format',
            'use_event_variables': 'useEventVariables',
            'json_input_template': 'jsonInputTemplate',
            'csv_input_template': 'csvInputTemplate'
        }

        self._event_type_name = event_type_name
        self._format = format
        self._use_event_variables = use_event_variables
        self._json_input_template = json_input_template
        self._csv_input_template = csv_input_template

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ModelInputConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ModelInputConfiguration of this ModelInputConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_type_name(self):
        """Gets the event_type_name of this ModelInputConfiguration.


        :return: The event_type_name of this ModelInputConfiguration.
        :rtype: str
        """
        return self._event_type_name

    @event_type_name.setter
    def event_type_name(self, event_type_name):
        """Sets the event_type_name of this ModelInputConfiguration.


        :param event_type_name: The event_type_name of this ModelInputConfiguration.
        :type event_type_name: str
        """

        self._event_type_name = event_type_name

    @property
    def format(self):
        """Gets the format of this ModelInputConfiguration.


        :return: The format of this ModelInputConfiguration.
        :rtype: ModelInputDataFormat
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this ModelInputConfiguration.


        :param format: The format of this ModelInputConfiguration.
        :type format: ModelInputDataFormat
        """

        self._format = format

    @property
    def use_event_variables(self):
        """Gets the use_event_variables of this ModelInputConfiguration.


        :return: The use_event_variables of this ModelInputConfiguration.
        :rtype: bool
        """
        return self._use_event_variables

    @use_event_variables.setter
    def use_event_variables(self, use_event_variables):
        """Sets the use_event_variables of this ModelInputConfiguration.


        :param use_event_variables: The use_event_variables of this ModelInputConfiguration.
        :type use_event_variables: bool
        """
        if use_event_variables is None:
            raise ValueError("Invalid value for `use_event_variables`, must not be `None`")

        self._use_event_variables = use_event_variables

    @property
    def json_input_template(self):
        """Gets the json_input_template of this ModelInputConfiguration.


        :return: The json_input_template of this ModelInputConfiguration.
        :rtype: str
        """
        return self._json_input_template

    @json_input_template.setter
    def json_input_template(self, json_input_template):
        """Sets the json_input_template of this ModelInputConfiguration.


        :param json_input_template: The json_input_template of this ModelInputConfiguration.
        :type json_input_template: str
        """

        self._json_input_template = json_input_template

    @property
    def csv_input_template(self):
        """Gets the csv_input_template of this ModelInputConfiguration.


        :return: The csv_input_template of this ModelInputConfiguration.
        :rtype: str
        """
        return self._csv_input_template

    @csv_input_template.setter
    def csv_input_template(self, csv_input_template):
        """Sets the csv_input_template of this ModelInputConfiguration.


        :param csv_input_template: The csv_input_template of this ModelInputConfiguration.
        :type csv_input_template: str
        """

        self._csv_input_template = csv_input_template
