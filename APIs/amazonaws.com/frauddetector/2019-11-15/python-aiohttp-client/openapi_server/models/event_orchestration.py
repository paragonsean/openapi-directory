# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EventOrchestration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_bridge_enabled: bool=None):
        """EventOrchestration - a model defined in OpenAPI

        :param event_bridge_enabled: The event_bridge_enabled of this EventOrchestration.
        """
        self.openapi_types = {
            'event_bridge_enabled': bool
        }

        self.attribute_map = {
            'event_bridge_enabled': 'eventBridgeEnabled'
        }

        self._event_bridge_enabled = event_bridge_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventOrchestration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventOrchestration of this EventOrchestration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_bridge_enabled(self):
        """Gets the event_bridge_enabled of this EventOrchestration.


        :return: The event_bridge_enabled of this EventOrchestration.
        :rtype: bool
        """
        return self._event_bridge_enabled

    @event_bridge_enabled.setter
    def event_bridge_enabled(self, event_bridge_enabled):
        """Sets the event_bridge_enabled of this EventOrchestration.


        :param event_bridge_enabled: The event_bridge_enabled of this EventOrchestration.
        :type event_bridge_enabled: bool
        """
        if event_bridge_enabled is None:
            raise ValueError("Invalid value for `event_bridge_enabled`, must not be `None`")

        self._event_bridge_enabled = event_bridge_enabled
