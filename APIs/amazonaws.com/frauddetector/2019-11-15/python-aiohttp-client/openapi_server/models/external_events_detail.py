# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExternalEventsDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_location: str=None, data_access_role_arn: str=None):
        """ExternalEventsDetail - a model defined in OpenAPI

        :param data_location: The data_location of this ExternalEventsDetail.
        :param data_access_role_arn: The data_access_role_arn of this ExternalEventsDetail.
        """
        self.openapi_types = {
            'data_location': str,
            'data_access_role_arn': str
        }

        self.attribute_map = {
            'data_location': 'dataLocation',
            'data_access_role_arn': 'dataAccessRoleArn'
        }

        self._data_location = data_location
        self._data_access_role_arn = data_access_role_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExternalEventsDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExternalEventsDetail of this ExternalEventsDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_location(self):
        """Gets the data_location of this ExternalEventsDetail.


        :return: The data_location of this ExternalEventsDetail.
        :rtype: str
        """
        return self._data_location

    @data_location.setter
    def data_location(self, data_location):
        """Sets the data_location of this ExternalEventsDetail.


        :param data_location: The data_location of this ExternalEventsDetail.
        :type data_location: str
        """
        if data_location is None:
            raise ValueError("Invalid value for `data_location`, must not be `None`")

        self._data_location = data_location

    @property
    def data_access_role_arn(self):
        """Gets the data_access_role_arn of this ExternalEventsDetail.


        :return: The data_access_role_arn of this ExternalEventsDetail.
        :rtype: str
        """
        return self._data_access_role_arn

    @data_access_role_arn.setter
    def data_access_role_arn(self, data_access_role_arn):
        """Sets the data_access_role_arn of this ExternalEventsDetail.


        :param data_access_role_arn: The data_access_role_arn of this ExternalEventsDetail.
        :type data_access_role_arn: str
        """
        if data_access_role_arn is None:
            raise ValueError("Invalid value for `data_access_role_arn`, must not be `None`")

        self._data_access_role_arn = data_access_role_arn
