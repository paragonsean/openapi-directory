# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.model_type_enum import ModelTypeEnum
from openapi_server.models.model_version_status import ModelVersionStatus
from openapi_server import util


class UpdateModelVersionStatusRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, model_id: str=None, model_type: ModelTypeEnum=None, model_version_number: str=None, status: ModelVersionStatus=None):
        """UpdateModelVersionStatusRequest - a model defined in OpenAPI

        :param model_id: The model_id of this UpdateModelVersionStatusRequest.
        :param model_type: The model_type of this UpdateModelVersionStatusRequest.
        :param model_version_number: The model_version_number of this UpdateModelVersionStatusRequest.
        :param status: The status of this UpdateModelVersionStatusRequest.
        """
        self.openapi_types = {
            'model_id': str,
            'model_type': ModelTypeEnum,
            'model_version_number': str,
            'status': ModelVersionStatus
        }

        self.attribute_map = {
            'model_id': 'modelId',
            'model_type': 'modelType',
            'model_version_number': 'modelVersionNumber',
            'status': 'status'
        }

        self._model_id = model_id
        self._model_type = model_type
        self._model_version_number = model_version_number
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateModelVersionStatusRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateModelVersionStatusRequest of this UpdateModelVersionStatusRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def model_id(self):
        """Gets the model_id of this UpdateModelVersionStatusRequest.


        :return: The model_id of this UpdateModelVersionStatusRequest.
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this UpdateModelVersionStatusRequest.


        :param model_id: The model_id of this UpdateModelVersionStatusRequest.
        :type model_id: str
        """
        if model_id is None:
            raise ValueError("Invalid value for `model_id`, must not be `None`")

        self._model_id = model_id

    @property
    def model_type(self):
        """Gets the model_type of this UpdateModelVersionStatusRequest.


        :return: The model_type of this UpdateModelVersionStatusRequest.
        :rtype: ModelTypeEnum
        """
        return self._model_type

    @model_type.setter
    def model_type(self, model_type):
        """Sets the model_type of this UpdateModelVersionStatusRequest.


        :param model_type: The model_type of this UpdateModelVersionStatusRequest.
        :type model_type: ModelTypeEnum
        """
        if model_type is None:
            raise ValueError("Invalid value for `model_type`, must not be `None`")

        self._model_type = model_type

    @property
    def model_version_number(self):
        """Gets the model_version_number of this UpdateModelVersionStatusRequest.


        :return: The model_version_number of this UpdateModelVersionStatusRequest.
        :rtype: str
        """
        return self._model_version_number

    @model_version_number.setter
    def model_version_number(self, model_version_number):
        """Sets the model_version_number of this UpdateModelVersionStatusRequest.


        :param model_version_number: The model_version_number of this UpdateModelVersionStatusRequest.
        :type model_version_number: str
        """
        if model_version_number is None:
            raise ValueError("Invalid value for `model_version_number`, must not be `None`")

        self._model_version_number = model_version_number

    @property
    def status(self):
        """Gets the status of this UpdateModelVersionStatusRequest.


        :return: The status of this UpdateModelVersionStatusRequest.
        :rtype: ModelVersionStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this UpdateModelVersionStatusRequest.


        :param status: The status of this UpdateModelVersionStatusRequest.
        :type status: ModelVersionStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
