# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.async_job_status import AsyncJobStatus
from openapi_server import util


class BatchImport(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, job_id: str=None, status: AsyncJobStatus=None, failure_reason: str=None, start_time: str=None, completion_time: str=None, input_path: str=None, output_path: str=None, event_type_name: str=None, iam_role_arn: str=None, arn: str=None, processed_records_count: int=None, failed_records_count: int=None, total_records_count: int=None):
        """BatchImport - a model defined in OpenAPI

        :param job_id: The job_id of this BatchImport.
        :param status: The status of this BatchImport.
        :param failure_reason: The failure_reason of this BatchImport.
        :param start_time: The start_time of this BatchImport.
        :param completion_time: The completion_time of this BatchImport.
        :param input_path: The input_path of this BatchImport.
        :param output_path: The output_path of this BatchImport.
        :param event_type_name: The event_type_name of this BatchImport.
        :param iam_role_arn: The iam_role_arn of this BatchImport.
        :param arn: The arn of this BatchImport.
        :param processed_records_count: The processed_records_count of this BatchImport.
        :param failed_records_count: The failed_records_count of this BatchImport.
        :param total_records_count: The total_records_count of this BatchImport.
        """
        self.openapi_types = {
            'job_id': str,
            'status': AsyncJobStatus,
            'failure_reason': str,
            'start_time': str,
            'completion_time': str,
            'input_path': str,
            'output_path': str,
            'event_type_name': str,
            'iam_role_arn': str,
            'arn': str,
            'processed_records_count': int,
            'failed_records_count': int,
            'total_records_count': int
        }

        self.attribute_map = {
            'job_id': 'jobId',
            'status': 'status',
            'failure_reason': 'failureReason',
            'start_time': 'startTime',
            'completion_time': 'completionTime',
            'input_path': 'inputPath',
            'output_path': 'outputPath',
            'event_type_name': 'eventTypeName',
            'iam_role_arn': 'iamRoleArn',
            'arn': 'arn',
            'processed_records_count': 'processedRecordsCount',
            'failed_records_count': 'failedRecordsCount',
            'total_records_count': 'totalRecordsCount'
        }

        self._job_id = job_id
        self._status = status
        self._failure_reason = failure_reason
        self._start_time = start_time
        self._completion_time = completion_time
        self._input_path = input_path
        self._output_path = output_path
        self._event_type_name = event_type_name
        self._iam_role_arn = iam_role_arn
        self._arn = arn
        self._processed_records_count = processed_records_count
        self._failed_records_count = failed_records_count
        self._total_records_count = total_records_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchImport':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchImport of this BatchImport.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def job_id(self):
        """Gets the job_id of this BatchImport.


        :return: The job_id of this BatchImport.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this BatchImport.


        :param job_id: The job_id of this BatchImport.
        :type job_id: str
        """

        self._job_id = job_id

    @property
    def status(self):
        """Gets the status of this BatchImport.


        :return: The status of this BatchImport.
        :rtype: AsyncJobStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BatchImport.


        :param status: The status of this BatchImport.
        :type status: AsyncJobStatus
        """

        self._status = status

    @property
    def failure_reason(self):
        """Gets the failure_reason of this BatchImport.


        :return: The failure_reason of this BatchImport.
        :rtype: str
        """
        return self._failure_reason

    @failure_reason.setter
    def failure_reason(self, failure_reason):
        """Sets the failure_reason of this BatchImport.


        :param failure_reason: The failure_reason of this BatchImport.
        :type failure_reason: str
        """

        self._failure_reason = failure_reason

    @property
    def start_time(self):
        """Gets the start_time of this BatchImport.


        :return: The start_time of this BatchImport.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this BatchImport.


        :param start_time: The start_time of this BatchImport.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def completion_time(self):
        """Gets the completion_time of this BatchImport.


        :return: The completion_time of this BatchImport.
        :rtype: str
        """
        return self._completion_time

    @completion_time.setter
    def completion_time(self, completion_time):
        """Sets the completion_time of this BatchImport.


        :param completion_time: The completion_time of this BatchImport.
        :type completion_time: str
        """

        self._completion_time = completion_time

    @property
    def input_path(self):
        """Gets the input_path of this BatchImport.


        :return: The input_path of this BatchImport.
        :rtype: str
        """
        return self._input_path

    @input_path.setter
    def input_path(self, input_path):
        """Sets the input_path of this BatchImport.


        :param input_path: The input_path of this BatchImport.
        :type input_path: str
        """

        self._input_path = input_path

    @property
    def output_path(self):
        """Gets the output_path of this BatchImport.


        :return: The output_path of this BatchImport.
        :rtype: str
        """
        return self._output_path

    @output_path.setter
    def output_path(self, output_path):
        """Sets the output_path of this BatchImport.


        :param output_path: The output_path of this BatchImport.
        :type output_path: str
        """

        self._output_path = output_path

    @property
    def event_type_name(self):
        """Gets the event_type_name of this BatchImport.


        :return: The event_type_name of this BatchImport.
        :rtype: str
        """
        return self._event_type_name

    @event_type_name.setter
    def event_type_name(self, event_type_name):
        """Sets the event_type_name of this BatchImport.


        :param event_type_name: The event_type_name of this BatchImport.
        :type event_type_name: str
        """

        self._event_type_name = event_type_name

    @property
    def iam_role_arn(self):
        """Gets the iam_role_arn of this BatchImport.


        :return: The iam_role_arn of this BatchImport.
        :rtype: str
        """
        return self._iam_role_arn

    @iam_role_arn.setter
    def iam_role_arn(self, iam_role_arn):
        """Sets the iam_role_arn of this BatchImport.


        :param iam_role_arn: The iam_role_arn of this BatchImport.
        :type iam_role_arn: str
        """

        self._iam_role_arn = iam_role_arn

    @property
    def arn(self):
        """Gets the arn of this BatchImport.


        :return: The arn of this BatchImport.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this BatchImport.


        :param arn: The arn of this BatchImport.
        :type arn: str
        """

        self._arn = arn

    @property
    def processed_records_count(self):
        """Gets the processed_records_count of this BatchImport.


        :return: The processed_records_count of this BatchImport.
        :rtype: int
        """
        return self._processed_records_count

    @processed_records_count.setter
    def processed_records_count(self, processed_records_count):
        """Sets the processed_records_count of this BatchImport.


        :param processed_records_count: The processed_records_count of this BatchImport.
        :type processed_records_count: int
        """

        self._processed_records_count = processed_records_count

    @property
    def failed_records_count(self):
        """Gets the failed_records_count of this BatchImport.


        :return: The failed_records_count of this BatchImport.
        :rtype: int
        """
        return self._failed_records_count

    @failed_records_count.setter
    def failed_records_count(self, failed_records_count):
        """Sets the failed_records_count of this BatchImport.


        :param failed_records_count: The failed_records_count of this BatchImport.
        :type failed_records_count: int
        """

        self._failed_records_count = failed_records_count

    @property
    def total_records_count(self):
        """Gets the total_records_count of this BatchImport.


        :return: The total_records_count of this BatchImport.
        :rtype: int
        """
        return self._total_records_count

    @total_records_count.setter
    def total_records_count(self, total_records_count):
        """Sets the total_records_count of this BatchImport.


        :param total_records_count: The total_records_count of this BatchImport.
        :type total_records_count: int
        """

        self._total_records_count = total_records_count
