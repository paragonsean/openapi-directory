/*
 * Amazon Fraud Detector
 * <p>This is the Amazon Fraud Detector API Reference. This guide is for developers who need detailed information about Amazon Fraud Detector API actions, data types, and errors. For more information about Amazon Fraud Detector features, see the <a href=\"https://docs.aws.amazon.com/frauddetector/latest/ug/\">Amazon Fraud Detector User Guide</a>.</p> <p>We provide the Query API as well as AWS software development kits (SDK) for Amazon Fraud Detector in Java and Python programming languages.</p> <p>The Amazon Fraud Detector Query API provides HTTPS requests that use the HTTP verb GET or POST and a Query parameter <code>Action</code>. AWS SDK provides libraries, sample code, tutorials, and other resources for software developers who prefer to build applications using language-specific APIs instead of submitting a request over HTTP or HTTPS. These libraries provide basic functions that automatically take care of tasks such as cryptographically signing your requests, retrying requests, and handling error responses, so that it is easier for you to get started. For more information about the AWS SDKs, go to <a href=\"https://aws.amazon.com/developer/tools/\">Tools to build on AWS</a> page, scroll down to the <b>SDK</b> section, and choose plus (+) sign to expand the section. </p>
 *
 * The version of the OpenAPI document: 2019-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BatchCreateVariableRequest;
import org.openapitools.client.model.BatchCreateVariableResult;
import org.openapitools.client.model.BatchGetVariableRequest;
import org.openapitools.client.model.BatchGetVariableResult;
import org.openapitools.client.model.CancelBatchImportJobRequest;
import org.openapitools.client.model.CancelBatchPredictionJobRequest;
import org.openapitools.client.model.CreateBatchImportJobRequest;
import org.openapitools.client.model.CreateBatchPredictionJobRequest;
import org.openapitools.client.model.CreateDetectorVersionRequest;
import org.openapitools.client.model.CreateDetectorVersionResult;
import org.openapitools.client.model.CreateListRequest;
import org.openapitools.client.model.CreateModelRequest;
import org.openapitools.client.model.CreateModelVersionRequest;
import org.openapitools.client.model.CreateModelVersionResult;
import org.openapitools.client.model.CreateRuleRequest;
import org.openapitools.client.model.CreateRuleResult;
import org.openapitools.client.model.CreateVariableRequest;
import org.openapitools.client.model.DeleteBatchImportJobRequest;
import org.openapitools.client.model.DeleteBatchPredictionJobRequest;
import org.openapitools.client.model.DeleteDetectorRequest;
import org.openapitools.client.model.DeleteDetectorVersionRequest;
import org.openapitools.client.model.DeleteEntityTypeRequest;
import org.openapitools.client.model.DeleteEventRequest;
import org.openapitools.client.model.DeleteEventTypeRequest;
import org.openapitools.client.model.DeleteEventsByEventTypeRequest;
import org.openapitools.client.model.DeleteEventsByEventTypeResult;
import org.openapitools.client.model.DeleteExternalModelRequest;
import org.openapitools.client.model.DeleteLabelRequest;
import org.openapitools.client.model.DeleteListRequest;
import org.openapitools.client.model.DeleteModelRequest;
import org.openapitools.client.model.DeleteModelVersionRequest;
import org.openapitools.client.model.DeleteOutcomeRequest;
import org.openapitools.client.model.DeleteRuleRequest;
import org.openapitools.client.model.DeleteVariableRequest;
import org.openapitools.client.model.DescribeDetectorRequest;
import org.openapitools.client.model.DescribeDetectorResult;
import org.openapitools.client.model.DescribeModelVersionsRequest;
import org.openapitools.client.model.DescribeModelVersionsResult;
import org.openapitools.client.model.GetBatchImportJobsRequest;
import org.openapitools.client.model.GetBatchImportJobsResult;
import org.openapitools.client.model.GetBatchPredictionJobsRequest;
import org.openapitools.client.model.GetBatchPredictionJobsResult;
import org.openapitools.client.model.GetDeleteEventsByEventTypeStatusRequest;
import org.openapitools.client.model.GetDeleteEventsByEventTypeStatusResult;
import org.openapitools.client.model.GetDetectorVersionRequest;
import org.openapitools.client.model.GetDetectorVersionResult;
import org.openapitools.client.model.GetDetectorsRequest;
import org.openapitools.client.model.GetDetectorsResult;
import org.openapitools.client.model.GetEntityTypesRequest;
import org.openapitools.client.model.GetEntityTypesResult;
import org.openapitools.client.model.GetEventPredictionMetadataRequest;
import org.openapitools.client.model.GetEventPredictionMetadataResult;
import org.openapitools.client.model.GetEventPredictionRequest;
import org.openapitools.client.model.GetEventPredictionResult;
import org.openapitools.client.model.GetEventRequest;
import org.openapitools.client.model.GetEventResult;
import org.openapitools.client.model.GetEventTypesRequest;
import org.openapitools.client.model.GetEventTypesResult;
import org.openapitools.client.model.GetExternalModelsRequest;
import org.openapitools.client.model.GetExternalModelsResult;
import org.openapitools.client.model.GetKMSEncryptionKeyResult;
import org.openapitools.client.model.GetLabelsRequest;
import org.openapitools.client.model.GetLabelsResult;
import org.openapitools.client.model.GetListElementsRequest;
import org.openapitools.client.model.GetListElementsResult;
import org.openapitools.client.model.GetListsMetadataRequest;
import org.openapitools.client.model.GetListsMetadataResult;
import org.openapitools.client.model.GetModelVersionRequest;
import org.openapitools.client.model.GetModelVersionResult;
import org.openapitools.client.model.GetModelsRequest;
import org.openapitools.client.model.GetModelsResult;
import org.openapitools.client.model.GetOutcomesRequest;
import org.openapitools.client.model.GetOutcomesResult;
import org.openapitools.client.model.GetRulesRequest;
import org.openapitools.client.model.GetRulesResult;
import org.openapitools.client.model.GetVariablesRequest;
import org.openapitools.client.model.GetVariablesResult;
import org.openapitools.client.model.ListEventPredictionsRequest;
import org.openapitools.client.model.ListEventPredictionsResult;
import org.openapitools.client.model.ListTagsForResourceRequest;
import org.openapitools.client.model.ListTagsForResourceResult;
import org.openapitools.client.model.PutDetectorRequest;
import org.openapitools.client.model.PutEntityTypeRequest;
import org.openapitools.client.model.PutEventTypeRequest;
import org.openapitools.client.model.PutExternalModelRequest;
import org.openapitools.client.model.PutKMSEncryptionKeyRequest;
import org.openapitools.client.model.PutLabelRequest;
import org.openapitools.client.model.PutOutcomeRequest;
import org.openapitools.client.model.SendEventRequest;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UntagResourceRequest;
import org.openapitools.client.model.UpdateDetectorVersionMetadataRequest;
import org.openapitools.client.model.UpdateDetectorVersionRequest;
import org.openapitools.client.model.UpdateDetectorVersionStatusRequest;
import org.openapitools.client.model.UpdateEventLabelRequest;
import org.openapitools.client.model.UpdateListRequest;
import org.openapitools.client.model.UpdateModelRequest;
import org.openapitools.client.model.UpdateModelVersionRequest;
import org.openapitools.client.model.UpdateModelVersionResult;
import org.openapitools.client.model.UpdateModelVersionStatusRequest;
import org.openapitools.client.model.UpdateRuleMetadataRequest;
import org.openapitools.client.model.UpdateRuleVersionRequest;
import org.openapitools.client.model.UpdateRuleVersionResult;
import org.openapitools.client.model.UpdateVariableRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Creates a batch of variables.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchCreateVariableTest() throws ApiException {
        String xAmzTarget = null;
        BatchCreateVariableRequest batchCreateVariableRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchCreateVariableResult response = api.batchCreateVariable(xAmzTarget, batchCreateVariableRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets a batch of variables.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchGetVariableTest() throws ApiException {
        String xAmzTarget = null;
        BatchGetVariableRequest batchGetVariableRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchGetVariableResult response = api.batchGetVariable(xAmzTarget, batchGetVariableRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Cancels an in-progress batch import job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelBatchImportJobTest() throws ApiException {
        String xAmzTarget = null;
        CancelBatchImportJobRequest cancelBatchImportJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.cancelBatchImportJob(xAmzTarget, cancelBatchImportJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Cancels the specified batch prediction job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelBatchPredictionJobTest() throws ApiException {
        String xAmzTarget = null;
        CancelBatchPredictionJobRequest cancelBatchPredictionJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.cancelBatchPredictionJob(xAmzTarget, cancelBatchPredictionJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a batch import job. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createBatchImportJobTest() throws ApiException {
        String xAmzTarget = null;
        CreateBatchImportJobRequest createBatchImportJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.createBatchImportJob(xAmzTarget, createBatchImportJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a batch prediction job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createBatchPredictionJobTest() throws ApiException {
        String xAmzTarget = null;
        CreateBatchPredictionJobRequest createBatchPredictionJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.createBatchPredictionJob(xAmzTarget, createBatchPredictionJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a detector version. The detector version starts in a &lt;code&gt;DRAFT&lt;/code&gt; status.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDetectorVersionTest() throws ApiException {
        String xAmzTarget = null;
        CreateDetectorVersionRequest createDetectorVersionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateDetectorVersionResult response = api.createDetectorVersion(xAmzTarget, createDetectorVersionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt; Creates a list. &lt;/p&gt; &lt;p&gt;List is a set of input data for a variable in your event dataset. You use the input data in a rule that&#39;s associated with your detector. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/frauddetector/latest/ug/lists.html\&quot;&gt;Lists&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createListTest() throws ApiException {
        String xAmzTarget = null;
        CreateListRequest createListRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.createList(xAmzTarget, createListRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a model using the specified model type.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createModelTest() throws ApiException {
        String xAmzTarget = null;
        CreateModelRequest createModelRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.createModel(xAmzTarget, createModelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a version of the model using the specified model type and model id. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createModelVersionTest() throws ApiException {
        String xAmzTarget = null;
        CreateModelVersionRequest createModelVersionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateModelVersionResult response = api.createModelVersion(xAmzTarget, createModelVersionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a rule for use with the specified detector. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRuleTest() throws ApiException {
        String xAmzTarget = null;
        CreateRuleRequest createRuleRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateRuleResult response = api.createRule(xAmzTarget, createRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a variable.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createVariableTest() throws ApiException {
        String xAmzTarget = null;
        CreateVariableRequest createVariableRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.createVariable(xAmzTarget, createVariableRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the specified batch import job ID record. This action does not delete the data that was batch imported. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteBatchImportJobTest() throws ApiException {
        String xAmzTarget = null;
        DeleteBatchImportJobRequest deleteBatchImportJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteBatchImportJob(xAmzTarget, deleteBatchImportJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a batch prediction job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteBatchPredictionJobTest() throws ApiException {
        String xAmzTarget = null;
        DeleteBatchPredictionJobRequest deleteBatchPredictionJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteBatchPredictionJob(xAmzTarget, deleteBatchPredictionJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes the detector. Before deleting a detector, you must first delete all detector versions and rule versions associated with the detector.&lt;/p&gt; &lt;p&gt;When you delete a detector, Amazon Fraud Detector permanently deletes the detector and the data is no longer stored in Amazon Fraud Detector.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDetectorTest() throws ApiException {
        String xAmzTarget = null;
        DeleteDetectorRequest deleteDetectorRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteDetector(xAmzTarget, deleteDetectorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes the detector version. You cannot delete detector versions that are in &lt;code&gt;ACTIVE&lt;/code&gt; status.&lt;/p&gt; &lt;p&gt;When you delete a detector version, Amazon Fraud Detector permanently deletes the detector and the data is no longer stored in Amazon Fraud Detector.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDetectorVersionTest() throws ApiException {
        String xAmzTarget = null;
        DeleteDetectorVersionRequest deleteDetectorVersionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteDetectorVersion(xAmzTarget, deleteDetectorVersionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes an entity type.&lt;/p&gt; &lt;p&gt;You cannot delete an entity type that is included in an event type.&lt;/p&gt; &lt;p&gt;When you delete an entity type, Amazon Fraud Detector permanently deletes that entity type and the data is no longer stored in Amazon Fraud Detector.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteEntityTypeTest() throws ApiException {
        String xAmzTarget = null;
        DeleteEntityTypeRequest deleteEntityTypeRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteEntityType(xAmzTarget, deleteEntityTypeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes the specified event.&lt;/p&gt; &lt;p&gt;When you delete an event, Amazon Fraud Detector permanently deletes that event and the event data is no longer stored in Amazon Fraud Detector. If &lt;code&gt;deleteAuditHistory&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;, event data is available through search for up to 30 seconds after the delete operation is completed.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteEventTest() throws ApiException {
        String xAmzTarget = null;
        DeleteEventRequest deleteEventRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteEvent(xAmzTarget, deleteEventRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes an event type.&lt;/p&gt; &lt;p&gt;You cannot delete an event type that is used in a detector or a model.&lt;/p&gt; &lt;p&gt;When you delete an event type, Amazon Fraud Detector permanently deletes that event type and the data is no longer stored in Amazon Fraud Detector.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteEventTypeTest() throws ApiException {
        String xAmzTarget = null;
        DeleteEventTypeRequest deleteEventTypeRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteEventType(xAmzTarget, deleteEventTypeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes all events of a particular event type.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteEventsByEventTypeTest() throws ApiException {
        String xAmzTarget = null;
        DeleteEventsByEventTypeRequest deleteEventsByEventTypeRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteEventsByEventTypeResult response = api.deleteEventsByEventType(xAmzTarget, deleteEventsByEventTypeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Removes a SageMaker model from Amazon Fraud Detector.&lt;/p&gt; &lt;p&gt;You can remove an Amazon SageMaker model if it is not associated with a detector version. Removing a SageMaker model disconnects it from Amazon Fraud Detector, but the model remains available in SageMaker.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteExternalModelTest() throws ApiException {
        String xAmzTarget = null;
        DeleteExternalModelRequest deleteExternalModelRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteExternalModel(xAmzTarget, deleteExternalModelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a label.&lt;/p&gt; &lt;p&gt;You cannot delete labels that are included in an event type in Amazon Fraud Detector.&lt;/p&gt; &lt;p&gt;You cannot delete a label assigned to an event ID. You must first delete the relevant event ID.&lt;/p&gt; &lt;p&gt;When you delete a label, Amazon Fraud Detector permanently deletes that label and the data is no longer stored in Amazon Fraud Detector.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteLabelTest() throws ApiException {
        String xAmzTarget = null;
        DeleteLabelRequest deleteLabelRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteLabel(xAmzTarget, deleteLabelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt; Deletes the list, provided it is not used in a rule. &lt;/p&gt; &lt;p&gt; When you delete a list, Amazon Fraud Detector permanently deletes that list and the elements in the list.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteListTest() throws ApiException {
        String xAmzTarget = null;
        DeleteListRequest deleteListRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteList(xAmzTarget, deleteListRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a model.&lt;/p&gt; &lt;p&gt;You can delete models and model versions in Amazon Fraud Detector, provided that they are not associated with a detector version.&lt;/p&gt; &lt;p&gt; When you delete a model, Amazon Fraud Detector permanently deletes that model and the data is no longer stored in Amazon Fraud Detector.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteModelTest() throws ApiException {
        String xAmzTarget = null;
        DeleteModelRequest deleteModelRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteModel(xAmzTarget, deleteModelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a model version.&lt;/p&gt; &lt;p&gt;You can delete models and model versions in Amazon Fraud Detector, provided that they are not associated with a detector version.&lt;/p&gt; &lt;p&gt; When you delete a model version, Amazon Fraud Detector permanently deletes that model version and the data is no longer stored in Amazon Fraud Detector.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteModelVersionTest() throws ApiException {
        String xAmzTarget = null;
        DeleteModelVersionRequest deleteModelVersionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteModelVersion(xAmzTarget, deleteModelVersionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes an outcome.&lt;/p&gt; &lt;p&gt;You cannot delete an outcome that is used in a rule version.&lt;/p&gt; &lt;p&gt;When you delete an outcome, Amazon Fraud Detector permanently deletes that outcome and the data is no longer stored in Amazon Fraud Detector.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOutcomeTest() throws ApiException {
        String xAmzTarget = null;
        DeleteOutcomeRequest deleteOutcomeRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteOutcome(xAmzTarget, deleteOutcomeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes the rule. You cannot delete a rule if it is used by an &lt;code&gt;ACTIVE&lt;/code&gt; or &lt;code&gt;INACTIVE&lt;/code&gt; detector version.&lt;/p&gt; &lt;p&gt;When you delete a rule, Amazon Fraud Detector permanently deletes that rule and the data is no longer stored in Amazon Fraud Detector.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRuleTest() throws ApiException {
        String xAmzTarget = null;
        DeleteRuleRequest deleteRuleRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteRule(xAmzTarget, deleteRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a variable.&lt;/p&gt; &lt;p&gt;You can&#39;t delete variables that are included in an event type in Amazon Fraud Detector.&lt;/p&gt; &lt;p&gt;Amazon Fraud Detector automatically deletes model output variables and SageMaker model output variables when you delete the model. You can&#39;t delete these variables manually.&lt;/p&gt; &lt;p&gt;When you delete a variable, Amazon Fraud Detector permanently deletes that variable and the data is no longer stored in Amazon Fraud Detector.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteVariableTest() throws ApiException {
        String xAmzTarget = null;
        DeleteVariableRequest deleteVariableRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteVariable(xAmzTarget, deleteVariableRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets all versions for a specified detector.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeDetectorTest() throws ApiException {
        String xAmzTarget = null;
        DescribeDetectorRequest describeDetectorRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeDetectorResult response = api.describeDetector(xAmzTarget, describeDetectorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets all of the model versions for the specified model type or for the specified model type and model ID. You can also get details for a single, specified model version. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeModelVersionsTest() throws ApiException {
        String xAmzTarget = null;
        DescribeModelVersionsRequest describeModelVersionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        DescribeModelVersionsResult response = api.describeModelVersions(xAmzTarget, describeModelVersionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Gets all batch import jobs or a specific job of the specified ID. This is a paginated API. If you provide a null &lt;code&gt;maxResults&lt;/code&gt;, this action retrieves a maximum of 50 records per page. If you provide a &lt;code&gt;maxResults&lt;/code&gt;, the value must be between 1 and 50. To get the next page results, provide the pagination token from the &lt;code&gt;GetBatchImportJobsResponse&lt;/code&gt; as part of your request. A null pagination token fetches the records from the beginning.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBatchImportJobsTest() throws ApiException {
        String xAmzTarget = null;
        GetBatchImportJobsRequest getBatchImportJobsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetBatchImportJobsResult response = api.getBatchImportJobs(xAmzTarget, getBatchImportJobsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Gets all batch prediction jobs or a specific job if you specify a job ID. This is a paginated API. If you provide a null maxResults, this action retrieves a maximum of 50 records per page. If you provide a maxResults, the value must be between 1 and 50. To get the next page results, provide the pagination token from the GetBatchPredictionJobsResponse as part of your request. A null pagination token fetches the records from the beginning.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBatchPredictionJobsTest() throws ApiException {
        String xAmzTarget = null;
        GetBatchPredictionJobsRequest getBatchPredictionJobsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetBatchPredictionJobsResult response = api.getBatchPredictionJobs(xAmzTarget, getBatchPredictionJobsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves the status of a &lt;code&gt;DeleteEventsByEventType&lt;/code&gt; action.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeleteEventsByEventTypeStatusTest() throws ApiException {
        String xAmzTarget = null;
        GetDeleteEventsByEventTypeStatusRequest getDeleteEventsByEventTypeStatusRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDeleteEventsByEventTypeStatusResult response = api.getDeleteEventsByEventTypeStatus(xAmzTarget, getDeleteEventsByEventTypeStatusRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets a particular detector version. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDetectorVersionTest() throws ApiException {
        String xAmzTarget = null;
        GetDetectorVersionRequest getDetectorVersionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDetectorVersionResult response = api.getDetectorVersion(xAmzTarget, getDetectorVersionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets all detectors or a single detector if a &lt;code&gt;detectorId&lt;/code&gt; is specified. This is a paginated API. If you provide a null &lt;code&gt;maxResults&lt;/code&gt;, this action retrieves a maximum of 10 records per page. If you provide a &lt;code&gt;maxResults&lt;/code&gt;, the value must be between 5 and 10. To get the next page results, provide the pagination token from the &lt;code&gt;GetDetectorsResponse&lt;/code&gt; as part of your request. A null pagination token fetches the records from the beginning. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDetectorsTest() throws ApiException {
        String xAmzTarget = null;
        GetDetectorsRequest getDetectorsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetDetectorsResult response = api.getDetectors(xAmzTarget, getDetectorsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Gets all entity types or a specific entity type if a name is specified. This is a paginated API. If you provide a null &lt;code&gt;maxResults&lt;/code&gt;, this action retrieves a maximum of 10 records per page. If you provide a &lt;code&gt;maxResults&lt;/code&gt;, the value must be between 5 and 10. To get the next page results, provide the pagination token from the &lt;code&gt;GetEntityTypesResponse&lt;/code&gt; as part of your request. A null pagination token fetches the records from the beginning. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEntityTypesTest() throws ApiException {
        String xAmzTarget = null;
        GetEntityTypesRequest getEntityTypesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetEntityTypesResult response = api.getEntityTypes(xAmzTarget, getEntityTypesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves details of events stored with Amazon Fraud Detector. This action does not retrieve prediction results.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEventTest() throws ApiException {
        String xAmzTarget = null;
        GetEventRequest getEventRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetEventResult response = api.getEvent(xAmzTarget, getEventRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Evaluates an event against a detector version. If a version ID is not provided, the detector’s (&lt;code&gt;ACTIVE&lt;/code&gt;) version is used.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEventPredictionTest() throws ApiException {
        String xAmzTarget = null;
        GetEventPredictionRequest getEventPredictionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetEventPredictionResult response = api.getEventPrediction(xAmzTarget, getEventPredictionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Gets details of the past fraud predictions for the specified event ID, event type, detector ID, and detector version ID that was generated in the specified time period. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEventPredictionMetadataTest() throws ApiException {
        String xAmzTarget = null;
        GetEventPredictionMetadataRequest getEventPredictionMetadataRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetEventPredictionMetadataResult response = api.getEventPredictionMetadata(xAmzTarget, getEventPredictionMetadataRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets all event types or a specific event type if name is provided. This is a paginated API. If you provide a null &lt;code&gt;maxResults&lt;/code&gt;, this action retrieves a maximum of 10 records per page. If you provide a &lt;code&gt;maxResults&lt;/code&gt;, the value must be between 5 and 10. To get the next page results, provide the pagination token from the &lt;code&gt;GetEventTypesResponse&lt;/code&gt; as part of your request. A null pagination token fetches the records from the beginning. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEventTypesTest() throws ApiException {
        String xAmzTarget = null;
        GetEventTypesRequest getEventTypesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetEventTypesResult response = api.getEventTypes(xAmzTarget, getEventTypesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Gets the details for one or more Amazon SageMaker models that have been imported into the service. This is a paginated API. If you provide a null &lt;code&gt;maxResults&lt;/code&gt;, this actions retrieves a maximum of 10 records per page. If you provide a &lt;code&gt;maxResults&lt;/code&gt;, the value must be between 5 and 10. To get the next page results, provide the pagination token from the &lt;code&gt;GetExternalModelsResult&lt;/code&gt; as part of your request. A null pagination token fetches the records from the beginning. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getExternalModelsTest() throws ApiException {
        String xAmzTarget = null;
        GetExternalModelsRequest getExternalModelsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetExternalModelsResult response = api.getExternalModels(xAmzTarget, getExternalModelsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Gets the encryption key if a KMS key has been specified to be used to encrypt content in Amazon Fraud Detector.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getKMSEncryptionKeyTest() throws ApiException {
        String xAmzTarget = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetKMSEncryptionKeyResult response = api.getKMSEncryptionKey(xAmzTarget, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets all labels or a specific label if name is provided. This is a paginated API. If you provide a null &lt;code&gt;maxResults&lt;/code&gt;, this action retrieves a maximum of 50 records per page. If you provide a &lt;code&gt;maxResults&lt;/code&gt;, the value must be between 10 and 50. To get the next page results, provide the pagination token from the &lt;code&gt;GetGetLabelsResponse&lt;/code&gt; as part of your request. A null pagination token fetches the records from the beginning. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLabelsTest() throws ApiException {
        String xAmzTarget = null;
        GetLabelsRequest getLabelsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetLabelsResult response = api.getLabels(xAmzTarget, getLabelsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     *  Gets all the elements in the specified list. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getListElementsTest() throws ApiException {
        String xAmzTarget = null;
        GetListElementsRequest getListElementsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetListElementsResult response = api.getListElements(xAmzTarget, getListElementsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     *  Gets the metadata of either all the lists under the account or the specified list. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getListsMetadataTest() throws ApiException {
        String xAmzTarget = null;
        GetListsMetadataRequest getListsMetadataRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetListsMetadataResult response = api.getListsMetadata(xAmzTarget, getListsMetadataRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Gets the details of the specified model version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getModelVersionTest() throws ApiException {
        String xAmzTarget = null;
        GetModelVersionRequest getModelVersionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetModelVersionResult response = api.getModelVersion(xAmzTarget, getModelVersionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets one or more models. Gets all models for the Amazon Web Services account if no model type and no model id provided. Gets all models for the Amazon Web Services account and model type, if the model type is specified but model id is not provided. Gets a specific model if (model type, model id) tuple is specified. &lt;/p&gt; &lt;p&gt;This is a paginated API. If you provide a null &lt;code&gt;maxResults&lt;/code&gt;, this action retrieves a maximum of 10 records per page. If you provide a &lt;code&gt;maxResults&lt;/code&gt;, the value must be between 1 and 10. To get the next page results, provide the pagination token from the response as part of your request. A null pagination token fetches the records from the beginning.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getModelsTest() throws ApiException {
        String xAmzTarget = null;
        GetModelsRequest getModelsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetModelsResult response = api.getModels(xAmzTarget, getModelsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Gets one or more outcomes. This is a paginated API. If you provide a null &lt;code&gt;maxResults&lt;/code&gt;, this actions retrieves a maximum of 100 records per page. If you provide a &lt;code&gt;maxResults&lt;/code&gt;, the value must be between 50 and 100. To get the next page results, provide the pagination token from the &lt;code&gt;GetOutcomesResult&lt;/code&gt; as part of your request. A null pagination token fetches the records from the beginning. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOutcomesTest() throws ApiException {
        String xAmzTarget = null;
        GetOutcomesRequest getOutcomesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetOutcomesResult response = api.getOutcomes(xAmzTarget, getOutcomesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Get all rules for a detector (paginated) if &lt;code&gt;ruleId&lt;/code&gt; and &lt;code&gt;ruleVersion&lt;/code&gt; are not specified. Gets all rules for the detector and the &lt;code&gt;ruleId&lt;/code&gt; if present (paginated). Gets a specific rule if both the &lt;code&gt;ruleId&lt;/code&gt; and the &lt;code&gt;ruleVersion&lt;/code&gt; are specified.&lt;/p&gt; &lt;p&gt;This is a paginated API. Providing null maxResults results in retrieving maximum of 100 records per page. If you provide maxResults the value must be between 50 and 100. To get the next page result, a provide a pagination token from GetRulesResult as part of your request. Null pagination token fetches the records from the beginning.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRulesTest() throws ApiException {
        String xAmzTarget = null;
        GetRulesRequest getRulesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetRulesResult response = api.getRules(xAmzTarget, getRulesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Gets all of the variables or the specific variable. This is a paginated API. Providing null &lt;code&gt;maxSizePerPage&lt;/code&gt; results in retrieving maximum of 100 records per page. If you provide &lt;code&gt;maxSizePerPage&lt;/code&gt; the value must be between 50 and 100. To get the next page result, a provide a pagination token from &lt;code&gt;GetVariablesResult&lt;/code&gt; as part of your request. Null pagination token fetches the records from the beginning. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVariablesTest() throws ApiException {
        String xAmzTarget = null;
        GetVariablesRequest getVariablesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetVariablesResult response = api.getVariables(xAmzTarget, getVariablesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets a list of past predictions. The list can be filtered by detector ID, detector version ID, event ID, event type, or by specifying a time period. If filter is not specified, the most recent prediction is returned.&lt;/p&gt; &lt;p&gt;For example, the following filter lists all past predictions for &lt;code&gt;xyz&lt;/code&gt; event type - &lt;code&gt;{ \&quot;eventType\&quot;:{ \&quot;value\&quot;: \&quot;xyz\&quot; }” } &lt;/code&gt; &lt;/p&gt; &lt;p&gt;This is a paginated API. If you provide a null &lt;code&gt;maxResults&lt;/code&gt;, this action will retrieve a maximum of 10 records per page. If you provide a &lt;code&gt;maxResults&lt;/code&gt;, the value must be between 50 and 100. To get the next page results, provide the &lt;code&gt;nextToken&lt;/code&gt; from the response as part of your request. A null &lt;code&gt;nextToken&lt;/code&gt; fetches the records from the beginning. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listEventPredictionsTest() throws ApiException {
        String xAmzTarget = null;
        ListEventPredictionsRequest listEventPredictionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListEventPredictionsResult response = api.listEventPredictions(xAmzTarget, listEventPredictionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists all tags associated with the resource. This is a paginated API. To get the next page results, provide the pagination token from the response as part of your request. A null pagination token fetches the records from the beginning. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String xAmzTarget = null;
        ListTagsForResourceRequest listTagsForResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListTagsForResourceResult response = api.listTagsForResource(xAmzTarget, listTagsForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Creates or updates a detector. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putDetectorTest() throws ApiException {
        String xAmzTarget = null;
        PutDetectorRequest putDetectorRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.putDetector(xAmzTarget, putDetectorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates or updates an entity type. An entity represents who is performing the event. As part of a fraud prediction, you pass the entity ID to indicate the specific entity who performed the event. An entity type classifies the entity. Example classifications include customer, merchant, or account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putEntityTypeTest() throws ApiException {
        String xAmzTarget = null;
        PutEntityTypeRequest putEntityTypeRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.putEntityType(xAmzTarget, putEntityTypeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates or updates an event type. An event is a business activity that is evaluated for fraud risk. With Amazon Fraud Detector, you generate fraud predictions for events. An event type defines the structure for an event sent to Amazon Fraud Detector. This includes the variables sent as part of the event, the entity performing the event (such as a customer), and the labels that classify the event. Example event types include online payment transactions, account registrations, and authentications.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putEventTypeTest() throws ApiException {
        String xAmzTarget = null;
        PutEventTypeRequest putEventTypeRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.putEventType(xAmzTarget, putEventTypeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates or updates an Amazon SageMaker model endpoint. You can also use this action to update the configuration of the model endpoint, including the IAM role and/or the mapped variables. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putExternalModelTest() throws ApiException {
        String xAmzTarget = null;
        PutExternalModelRequest putExternalModelRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.putExternalModel(xAmzTarget, putExternalModelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Specifies the KMS key to be used to encrypt content in Amazon Fraud Detector.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putKMSEncryptionKeyTest() throws ApiException {
        String xAmzTarget = null;
        PutKMSEncryptionKeyRequest putKMSEncryptionKeyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.putKMSEncryptionKey(xAmzTarget, putKMSEncryptionKeyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates or updates label. A label classifies an event as fraudulent or legitimate. Labels are associated with event types and used to train supervised machine learning models in Amazon Fraud Detector. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putLabelTest() throws ApiException {
        String xAmzTarget = null;
        PutLabelRequest putLabelRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.putLabel(xAmzTarget, putLabelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates or updates an outcome. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putOutcomeTest() throws ApiException {
        String xAmzTarget = null;
        PutOutcomeRequest putOutcomeRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.putOutcome(xAmzTarget, putOutcomeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Stores events in Amazon Fraud Detector without generating fraud predictions for those events. For example, you can use &lt;code&gt;SendEvent&lt;/code&gt; to upload a historical dataset, which you can then later use to train a model.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendEventTest() throws ApiException {
        String xAmzTarget = null;
        SendEventRequest sendEventRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.sendEvent(xAmzTarget, sendEventRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Assigns tags to a resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String xAmzTarget = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.tagResource(xAmzTarget, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes tags from a resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String xAmzTarget = null;
        UntagResourceRequest untagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.untagResource(xAmzTarget, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Updates a detector version. The detector version attributes that you can update include models, external model endpoints, rules, rule execution mode, and description. You can only update a &lt;code&gt;DRAFT&lt;/code&gt; detector version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDetectorVersionTest() throws ApiException {
        String xAmzTarget = null;
        UpdateDetectorVersionRequest updateDetectorVersionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateDetectorVersion(xAmzTarget, updateDetectorVersionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the detector version&#39;s description. You can update the metadata for any detector version (&lt;code&gt;DRAFT, ACTIVE,&lt;/code&gt; or &lt;code&gt;INACTIVE&lt;/code&gt;). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDetectorVersionMetadataTest() throws ApiException {
        String xAmzTarget = null;
        UpdateDetectorVersionMetadataRequest updateDetectorVersionMetadataRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateDetectorVersionMetadata(xAmzTarget, updateDetectorVersionMetadataRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the detector version’s status. You can perform the following promotions or demotions using &lt;code&gt;UpdateDetectorVersionStatus&lt;/code&gt;: &lt;code&gt;DRAFT&lt;/code&gt; to &lt;code&gt;ACTIVE&lt;/code&gt;, &lt;code&gt;ACTIVE&lt;/code&gt; to &lt;code&gt;INACTIVE&lt;/code&gt;, and &lt;code&gt;INACTIVE&lt;/code&gt; to &lt;code&gt;ACTIVE&lt;/code&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDetectorVersionStatusTest() throws ApiException {
        String xAmzTarget = null;
        UpdateDetectorVersionStatusRequest updateDetectorVersionStatusRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateDetectorVersionStatus(xAmzTarget, updateDetectorVersionStatusRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the specified event with a new label.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEventLabelTest() throws ApiException {
        String xAmzTarget = null;
        UpdateEventLabelRequest updateEventLabelRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateEventLabel(xAmzTarget, updateEventLabelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Updates a list. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateListTest() throws ApiException {
        String xAmzTarget = null;
        UpdateListRequest updateListRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateList(xAmzTarget, updateListRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates model description.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateModelTest() throws ApiException {
        String xAmzTarget = null;
        UpdateModelRequest updateModelRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateModel(xAmzTarget, updateModelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a model version. Updating a model version retrains an existing model version using updated training data and produces a new minor version of the model. You can update the training data set location and data access role attributes using this action. This action creates and trains a new minor version of the model, for example version 1.01, 1.02, 1.03.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateModelVersionTest() throws ApiException {
        String xAmzTarget = null;
        UpdateModelVersionRequest updateModelVersionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateModelVersionResult response = api.updateModelVersion(xAmzTarget, updateModelVersionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates the status of a model version.&lt;/p&gt; &lt;p&gt;You can perform the following status updates:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Change the &lt;code&gt;TRAINING_IN_PROGRESS&lt;/code&gt; status to &lt;code&gt;TRAINING_CANCELLED&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Change the &lt;code&gt;TRAINING_COMPLETE&lt;/code&gt; status to &lt;code&gt;ACTIVE&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Change &lt;code&gt;ACTIVE&lt;/code&gt; to &lt;code&gt;INACTIVE&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateModelVersionStatusTest() throws ApiException {
        String xAmzTarget = null;
        UpdateModelVersionStatusRequest updateModelVersionStatusRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateModelVersionStatus(xAmzTarget, updateModelVersionStatusRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a rule&#39;s metadata. The description attribute can be updated.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRuleMetadataTest() throws ApiException {
        String xAmzTarget = null;
        UpdateRuleMetadataRequest updateRuleMetadataRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateRuleMetadata(xAmzTarget, updateRuleMetadataRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a rule version resulting in a new rule version. Updates a rule version resulting in a new rule version (version 1, 2, 3 ...). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRuleVersionTest() throws ApiException {
        String xAmzTarget = null;
        UpdateRuleVersionRequest updateRuleVersionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateRuleVersionResult response = api.updateRuleVersion(xAmzTarget, updateRuleVersionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a variable.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateVariableTest() throws ApiException {
        String xAmzTarget = null;
        UpdateVariableRequest updateVariableRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateVariable(xAmzTarget, updateVariableRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
