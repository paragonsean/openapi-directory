/*
 * Amazon Fraud Detector
 * <p>This is the Amazon Fraud Detector API Reference. This guide is for developers who need detailed information about Amazon Fraud Detector API actions, data types, and errors. For more information about Amazon Fraud Detector features, see the <a href=\"https://docs.aws.amazon.com/frauddetector/latest/ug/\">Amazon Fraud Detector User Guide</a>.</p> <p>We provide the Query API as well as AWS software development kits (SDK) for Amazon Fraud Detector in Java and Python programming languages.</p> <p>The Amazon Fraud Detector Query API provides HTTPS requests that use the HTTP verb GET or POST and a Query parameter <code>Action</code>. AWS SDK provides libraries, sample code, tutorials, and other resources for software developers who prefer to build applications using language-specific APIs instead of submitting a request over HTTP or HTTPS. These libraries provide basic functions that automatically take care of tasks such as cryptographically signing your requests, retrying requests, and handling error responses, so that it is easier for you to get started. For more information about the AWS SDKs, go to <a href=\"https://aws.amazon.com/developer/tools/\">Tools to build on AWS</a> page, scroll down to the <b>SDK</b> section, and choose plus (+) sign to expand the section. </p>
 *
 * The version of the OpenAPI document: 2019-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ListEventPredictionsRequestDetectorId;
import org.openapitools.client.model.ListEventPredictionsRequestDetectorVersionId;
import org.openapitools.client.model.ListEventPredictionsRequestEventId;
import org.openapitools.client.model.ListEventPredictionsRequestEventType;
import org.openapitools.client.model.ListEventPredictionsRequestPredictionTimeRange;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListEventPredictionsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:35.913975-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListEventPredictionsRequest {
  public static final String SERIALIZED_NAME_EVENT_ID = "eventId";
  @SerializedName(SERIALIZED_NAME_EVENT_ID)
  private ListEventPredictionsRequestEventId eventId;

  public static final String SERIALIZED_NAME_EVENT_TYPE = "eventType";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
  private ListEventPredictionsRequestEventType eventType;

  public static final String SERIALIZED_NAME_DETECTOR_ID = "detectorId";
  @SerializedName(SERIALIZED_NAME_DETECTOR_ID)
  private ListEventPredictionsRequestDetectorId detectorId;

  public static final String SERIALIZED_NAME_DETECTOR_VERSION_ID = "detectorVersionId";
  @SerializedName(SERIALIZED_NAME_DETECTOR_VERSION_ID)
  private ListEventPredictionsRequestDetectorVersionId detectorVersionId;

  public static final String SERIALIZED_NAME_PREDICTION_TIME_RANGE = "predictionTimeRange";
  @SerializedName(SERIALIZED_NAME_PREDICTION_TIME_RANGE)
  private ListEventPredictionsRequestPredictionTimeRange predictionTimeRange;

  public static final String SERIALIZED_NAME_NEXT_TOKEN = "nextToken";
  @SerializedName(SERIALIZED_NAME_NEXT_TOKEN)
  private String nextToken;

  public static final String SERIALIZED_NAME_MAX_RESULTS = "maxResults";
  @SerializedName(SERIALIZED_NAME_MAX_RESULTS)
  private Integer maxResults;

  public ListEventPredictionsRequest() {
  }

  public ListEventPredictionsRequest eventId(ListEventPredictionsRequestEventId eventId) {
    this.eventId = eventId;
    return this;
  }

  /**
   * Get eventId
   * @return eventId
   */
  @javax.annotation.Nullable
  public ListEventPredictionsRequestEventId getEventId() {
    return eventId;
  }

  public void setEventId(ListEventPredictionsRequestEventId eventId) {
    this.eventId = eventId;
  }


  public ListEventPredictionsRequest eventType(ListEventPredictionsRequestEventType eventType) {
    this.eventType = eventType;
    return this;
  }

  /**
   * Get eventType
   * @return eventType
   */
  @javax.annotation.Nullable
  public ListEventPredictionsRequestEventType getEventType() {
    return eventType;
  }

  public void setEventType(ListEventPredictionsRequestEventType eventType) {
    this.eventType = eventType;
  }


  public ListEventPredictionsRequest detectorId(ListEventPredictionsRequestDetectorId detectorId) {
    this.detectorId = detectorId;
    return this;
  }

  /**
   * Get detectorId
   * @return detectorId
   */
  @javax.annotation.Nullable
  public ListEventPredictionsRequestDetectorId getDetectorId() {
    return detectorId;
  }

  public void setDetectorId(ListEventPredictionsRequestDetectorId detectorId) {
    this.detectorId = detectorId;
  }


  public ListEventPredictionsRequest detectorVersionId(ListEventPredictionsRequestDetectorVersionId detectorVersionId) {
    this.detectorVersionId = detectorVersionId;
    return this;
  }

  /**
   * Get detectorVersionId
   * @return detectorVersionId
   */
  @javax.annotation.Nullable
  public ListEventPredictionsRequestDetectorVersionId getDetectorVersionId() {
    return detectorVersionId;
  }

  public void setDetectorVersionId(ListEventPredictionsRequestDetectorVersionId detectorVersionId) {
    this.detectorVersionId = detectorVersionId;
  }


  public ListEventPredictionsRequest predictionTimeRange(ListEventPredictionsRequestPredictionTimeRange predictionTimeRange) {
    this.predictionTimeRange = predictionTimeRange;
    return this;
  }

  /**
   * Get predictionTimeRange
   * @return predictionTimeRange
   */
  @javax.annotation.Nullable
  public ListEventPredictionsRequestPredictionTimeRange getPredictionTimeRange() {
    return predictionTimeRange;
  }

  public void setPredictionTimeRange(ListEventPredictionsRequestPredictionTimeRange predictionTimeRange) {
    this.predictionTimeRange = predictionTimeRange;
  }


  public ListEventPredictionsRequest nextToken(String nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  /**
   * Get nextToken
   * @return nextToken
   */
  @javax.annotation.Nullable
  public String getNextToken() {
    return nextToken;
  }

  public void setNextToken(String nextToken) {
    this.nextToken = nextToken;
  }


  public ListEventPredictionsRequest maxResults(Integer maxResults) {
    this.maxResults = maxResults;
    return this;
  }

  /**
   * Get maxResults
   * @return maxResults
   */
  @javax.annotation.Nullable
  public Integer getMaxResults() {
    return maxResults;
  }

  public void setMaxResults(Integer maxResults) {
    this.maxResults = maxResults;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListEventPredictionsRequest listEventPredictionsRequest = (ListEventPredictionsRequest) o;
    return Objects.equals(this.eventId, listEventPredictionsRequest.eventId) &&
        Objects.equals(this.eventType, listEventPredictionsRequest.eventType) &&
        Objects.equals(this.detectorId, listEventPredictionsRequest.detectorId) &&
        Objects.equals(this.detectorVersionId, listEventPredictionsRequest.detectorVersionId) &&
        Objects.equals(this.predictionTimeRange, listEventPredictionsRequest.predictionTimeRange) &&
        Objects.equals(this.nextToken, listEventPredictionsRequest.nextToken) &&
        Objects.equals(this.maxResults, listEventPredictionsRequest.maxResults);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eventId, eventType, detectorId, detectorVersionId, predictionTimeRange, nextToken, maxResults);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListEventPredictionsRequest {\n");
    sb.append("    eventId: ").append(toIndentedString(eventId)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    detectorId: ").append(toIndentedString(detectorId)).append("\n");
    sb.append("    detectorVersionId: ").append(toIndentedString(detectorVersionId)).append("\n");
    sb.append("    predictionTimeRange: ").append(toIndentedString(predictionTimeRange)).append("\n");
    sb.append("    nextToken: ").append(toIndentedString(nextToken)).append("\n");
    sb.append("    maxResults: ").append(toIndentedString(maxResults)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("eventId");
    openapiFields.add("eventType");
    openapiFields.add("detectorId");
    openapiFields.add("detectorVersionId");
    openapiFields.add("predictionTimeRange");
    openapiFields.add("nextToken");
    openapiFields.add("maxResults");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListEventPredictionsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListEventPredictionsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListEventPredictionsRequest is not found in the empty JSON string", ListEventPredictionsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListEventPredictionsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListEventPredictionsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `eventId`
      if (jsonObj.get("eventId") != null && !jsonObj.get("eventId").isJsonNull()) {
        ListEventPredictionsRequestEventId.validateJsonElement(jsonObj.get("eventId"));
      }
      // validate the optional field `eventType`
      if (jsonObj.get("eventType") != null && !jsonObj.get("eventType").isJsonNull()) {
        ListEventPredictionsRequestEventType.validateJsonElement(jsonObj.get("eventType"));
      }
      // validate the optional field `detectorId`
      if (jsonObj.get("detectorId") != null && !jsonObj.get("detectorId").isJsonNull()) {
        ListEventPredictionsRequestDetectorId.validateJsonElement(jsonObj.get("detectorId"));
      }
      // validate the optional field `detectorVersionId`
      if (jsonObj.get("detectorVersionId") != null && !jsonObj.get("detectorVersionId").isJsonNull()) {
        ListEventPredictionsRequestDetectorVersionId.validateJsonElement(jsonObj.get("detectorVersionId"));
      }
      // validate the optional field `predictionTimeRange`
      if (jsonObj.get("predictionTimeRange") != null && !jsonObj.get("predictionTimeRange").isJsonNull()) {
        ListEventPredictionsRequestPredictionTimeRange.validateJsonElement(jsonObj.get("predictionTimeRange"));
      }
      // validate the optional field `nextToken`
      if (jsonObj.get("nextToken") != null && !jsonObj.get("nextToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("nextToken"));
      }
      // validate the optional field `maxResults`
      if (jsonObj.get("maxResults") != null && !jsonObj.get("maxResults").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("maxResults"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListEventPredictionsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListEventPredictionsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListEventPredictionsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListEventPredictionsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ListEventPredictionsRequest>() {
           @Override
           public void write(JsonWriter out, ListEventPredictionsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListEventPredictionsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListEventPredictionsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListEventPredictionsRequest
   * @throws IOException if the JSON string is invalid with respect to ListEventPredictionsRequest
   */
  public static ListEventPredictionsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListEventPredictionsRequest.class);
  }

  /**
   * Convert an instance of ListEventPredictionsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

