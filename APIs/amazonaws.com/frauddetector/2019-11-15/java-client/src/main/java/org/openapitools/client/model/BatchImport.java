/*
 * Amazon Fraud Detector
 * <p>This is the Amazon Fraud Detector API Reference. This guide is for developers who need detailed information about Amazon Fraud Detector API actions, data types, and errors. For more information about Amazon Fraud Detector features, see the <a href=\"https://docs.aws.amazon.com/frauddetector/latest/ug/\">Amazon Fraud Detector User Guide</a>.</p> <p>We provide the Query API as well as AWS software development kits (SDK) for Amazon Fraud Detector in Java and Python programming languages.</p> <p>The Amazon Fraud Detector Query API provides HTTPS requests that use the HTTP verb GET or POST and a Query parameter <code>Action</code>. AWS SDK provides libraries, sample code, tutorials, and other resources for software developers who prefer to build applications using language-specific APIs instead of submitting a request over HTTP or HTTPS. These libraries provide basic functions that automatically take care of tasks such as cryptographically signing your requests, retrying requests, and handling error responses, so that it is easier for you to get started. For more information about the AWS SDKs, go to <a href=\"https://aws.amazon.com/developer/tools/\">Tools to build on AWS</a> page, scroll down to the <b>SDK</b> section, and choose plus (+) sign to expand the section. </p>
 *
 * The version of the OpenAPI document: 2019-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AsyncJobStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The batch import job details.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:35.913975-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BatchImport {
  public static final String SERIALIZED_NAME_JOB_ID = "jobId";
  @SerializedName(SERIALIZED_NAME_JOB_ID)
  private String jobId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private AsyncJobStatus status;

  public static final String SERIALIZED_NAME_FAILURE_REASON = "failureReason";
  @SerializedName(SERIALIZED_NAME_FAILURE_REASON)
  private String failureReason;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  public static final String SERIALIZED_NAME_COMPLETION_TIME = "completionTime";
  @SerializedName(SERIALIZED_NAME_COMPLETION_TIME)
  private String completionTime;

  public static final String SERIALIZED_NAME_INPUT_PATH = "inputPath";
  @SerializedName(SERIALIZED_NAME_INPUT_PATH)
  private String inputPath;

  public static final String SERIALIZED_NAME_OUTPUT_PATH = "outputPath";
  @SerializedName(SERIALIZED_NAME_OUTPUT_PATH)
  private String outputPath;

  public static final String SERIALIZED_NAME_EVENT_TYPE_NAME = "eventTypeName";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE_NAME)
  private String eventTypeName;

  public static final String SERIALIZED_NAME_IAM_ROLE_ARN = "iamRoleArn";
  @SerializedName(SERIALIZED_NAME_IAM_ROLE_ARN)
  private String iamRoleArn;

  public static final String SERIALIZED_NAME_ARN = "arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_PROCESSED_RECORDS_COUNT = "processedRecordsCount";
  @SerializedName(SERIALIZED_NAME_PROCESSED_RECORDS_COUNT)
  private Integer processedRecordsCount;

  public static final String SERIALIZED_NAME_FAILED_RECORDS_COUNT = "failedRecordsCount";
  @SerializedName(SERIALIZED_NAME_FAILED_RECORDS_COUNT)
  private Integer failedRecordsCount;

  public static final String SERIALIZED_NAME_TOTAL_RECORDS_COUNT = "totalRecordsCount";
  @SerializedName(SERIALIZED_NAME_TOTAL_RECORDS_COUNT)
  private Integer totalRecordsCount;

  public BatchImport() {
  }

  public BatchImport jobId(String jobId) {
    this.jobId = jobId;
    return this;
  }

  /**
   * Get jobId
   * @return jobId
   */
  @javax.annotation.Nullable
  public String getJobId() {
    return jobId;
  }

  public void setJobId(String jobId) {
    this.jobId = jobId;
  }


  public BatchImport status(AsyncJobStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public AsyncJobStatus getStatus() {
    return status;
  }

  public void setStatus(AsyncJobStatus status) {
    this.status = status;
  }


  public BatchImport failureReason(String failureReason) {
    this.failureReason = failureReason;
    return this;
  }

  /**
   * Get failureReason
   * @return failureReason
   */
  @javax.annotation.Nullable
  public String getFailureReason() {
    return failureReason;
  }

  public void setFailureReason(String failureReason) {
    this.failureReason = failureReason;
  }


  public BatchImport startTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Get startTime
   * @return startTime
   */
  @javax.annotation.Nullable
  public String getStartTime() {
    return startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }


  public BatchImport completionTime(String completionTime) {
    this.completionTime = completionTime;
    return this;
  }

  /**
   * Get completionTime
   * @return completionTime
   */
  @javax.annotation.Nullable
  public String getCompletionTime() {
    return completionTime;
  }

  public void setCompletionTime(String completionTime) {
    this.completionTime = completionTime;
  }


  public BatchImport inputPath(String inputPath) {
    this.inputPath = inputPath;
    return this;
  }

  /**
   * Get inputPath
   * @return inputPath
   */
  @javax.annotation.Nullable
  public String getInputPath() {
    return inputPath;
  }

  public void setInputPath(String inputPath) {
    this.inputPath = inputPath;
  }


  public BatchImport outputPath(String outputPath) {
    this.outputPath = outputPath;
    return this;
  }

  /**
   * Get outputPath
   * @return outputPath
   */
  @javax.annotation.Nullable
  public String getOutputPath() {
    return outputPath;
  }

  public void setOutputPath(String outputPath) {
    this.outputPath = outputPath;
  }


  public BatchImport eventTypeName(String eventTypeName) {
    this.eventTypeName = eventTypeName;
    return this;
  }

  /**
   * Get eventTypeName
   * @return eventTypeName
   */
  @javax.annotation.Nullable
  public String getEventTypeName() {
    return eventTypeName;
  }

  public void setEventTypeName(String eventTypeName) {
    this.eventTypeName = eventTypeName;
  }


  public BatchImport iamRoleArn(String iamRoleArn) {
    this.iamRoleArn = iamRoleArn;
    return this;
  }

  /**
   * Get iamRoleArn
   * @return iamRoleArn
   */
  @javax.annotation.Nullable
  public String getIamRoleArn() {
    return iamRoleArn;
  }

  public void setIamRoleArn(String iamRoleArn) {
    this.iamRoleArn = iamRoleArn;
  }


  public BatchImport arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public BatchImport processedRecordsCount(Integer processedRecordsCount) {
    this.processedRecordsCount = processedRecordsCount;
    return this;
  }

  /**
   * Get processedRecordsCount
   * @return processedRecordsCount
   */
  @javax.annotation.Nullable
  public Integer getProcessedRecordsCount() {
    return processedRecordsCount;
  }

  public void setProcessedRecordsCount(Integer processedRecordsCount) {
    this.processedRecordsCount = processedRecordsCount;
  }


  public BatchImport failedRecordsCount(Integer failedRecordsCount) {
    this.failedRecordsCount = failedRecordsCount;
    return this;
  }

  /**
   * Get failedRecordsCount
   * @return failedRecordsCount
   */
  @javax.annotation.Nullable
  public Integer getFailedRecordsCount() {
    return failedRecordsCount;
  }

  public void setFailedRecordsCount(Integer failedRecordsCount) {
    this.failedRecordsCount = failedRecordsCount;
  }


  public BatchImport totalRecordsCount(Integer totalRecordsCount) {
    this.totalRecordsCount = totalRecordsCount;
    return this;
  }

  /**
   * Get totalRecordsCount
   * @return totalRecordsCount
   */
  @javax.annotation.Nullable
  public Integer getTotalRecordsCount() {
    return totalRecordsCount;
  }

  public void setTotalRecordsCount(Integer totalRecordsCount) {
    this.totalRecordsCount = totalRecordsCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BatchImport batchImport = (BatchImport) o;
    return Objects.equals(this.jobId, batchImport.jobId) &&
        Objects.equals(this.status, batchImport.status) &&
        Objects.equals(this.failureReason, batchImport.failureReason) &&
        Objects.equals(this.startTime, batchImport.startTime) &&
        Objects.equals(this.completionTime, batchImport.completionTime) &&
        Objects.equals(this.inputPath, batchImport.inputPath) &&
        Objects.equals(this.outputPath, batchImport.outputPath) &&
        Objects.equals(this.eventTypeName, batchImport.eventTypeName) &&
        Objects.equals(this.iamRoleArn, batchImport.iamRoleArn) &&
        Objects.equals(this.arn, batchImport.arn) &&
        Objects.equals(this.processedRecordsCount, batchImport.processedRecordsCount) &&
        Objects.equals(this.failedRecordsCount, batchImport.failedRecordsCount) &&
        Objects.equals(this.totalRecordsCount, batchImport.totalRecordsCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(jobId, status, failureReason, startTime, completionTime, inputPath, outputPath, eventTypeName, iamRoleArn, arn, processedRecordsCount, failedRecordsCount, totalRecordsCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BatchImport {\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    failureReason: ").append(toIndentedString(failureReason)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    completionTime: ").append(toIndentedString(completionTime)).append("\n");
    sb.append("    inputPath: ").append(toIndentedString(inputPath)).append("\n");
    sb.append("    outputPath: ").append(toIndentedString(outputPath)).append("\n");
    sb.append("    eventTypeName: ").append(toIndentedString(eventTypeName)).append("\n");
    sb.append("    iamRoleArn: ").append(toIndentedString(iamRoleArn)).append("\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    processedRecordsCount: ").append(toIndentedString(processedRecordsCount)).append("\n");
    sb.append("    failedRecordsCount: ").append(toIndentedString(failedRecordsCount)).append("\n");
    sb.append("    totalRecordsCount: ").append(toIndentedString(totalRecordsCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("jobId");
    openapiFields.add("status");
    openapiFields.add("failureReason");
    openapiFields.add("startTime");
    openapiFields.add("completionTime");
    openapiFields.add("inputPath");
    openapiFields.add("outputPath");
    openapiFields.add("eventTypeName");
    openapiFields.add("iamRoleArn");
    openapiFields.add("arn");
    openapiFields.add("processedRecordsCount");
    openapiFields.add("failedRecordsCount");
    openapiFields.add("totalRecordsCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BatchImport
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BatchImport.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BatchImport is not found in the empty JSON string", BatchImport.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BatchImport.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BatchImport` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `jobId`
      if (jsonObj.get("jobId") != null && !jsonObj.get("jobId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("jobId"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        AsyncJobStatus.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `failureReason`
      if (jsonObj.get("failureReason") != null && !jsonObj.get("failureReason").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("failureReason"));
      }
      // validate the optional field `startTime`
      if (jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("startTime"));
      }
      // validate the optional field `completionTime`
      if (jsonObj.get("completionTime") != null && !jsonObj.get("completionTime").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("completionTime"));
      }
      // validate the optional field `inputPath`
      if (jsonObj.get("inputPath") != null && !jsonObj.get("inputPath").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("inputPath"));
      }
      // validate the optional field `outputPath`
      if (jsonObj.get("outputPath") != null && !jsonObj.get("outputPath").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("outputPath"));
      }
      // validate the optional field `eventTypeName`
      if (jsonObj.get("eventTypeName") != null && !jsonObj.get("eventTypeName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("eventTypeName"));
      }
      // validate the optional field `iamRoleArn`
      if (jsonObj.get("iamRoleArn") != null && !jsonObj.get("iamRoleArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("iamRoleArn"));
      }
      // validate the optional field `arn`
      if (jsonObj.get("arn") != null && !jsonObj.get("arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("arn"));
      }
      // validate the optional field `processedRecordsCount`
      if (jsonObj.get("processedRecordsCount") != null && !jsonObj.get("processedRecordsCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("processedRecordsCount"));
      }
      // validate the optional field `failedRecordsCount`
      if (jsonObj.get("failedRecordsCount") != null && !jsonObj.get("failedRecordsCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("failedRecordsCount"));
      }
      // validate the optional field `totalRecordsCount`
      if (jsonObj.get("totalRecordsCount") != null && !jsonObj.get("totalRecordsCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("totalRecordsCount"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BatchImport.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BatchImport' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BatchImport> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BatchImport.class));

       return (TypeAdapter<T>) new TypeAdapter<BatchImport>() {
           @Override
           public void write(JsonWriter out, BatchImport value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BatchImport read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BatchImport given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BatchImport
   * @throws IOException if the JSON string is invalid with respect to BatchImport
   */
  public static BatchImport fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BatchImport.class);
  }

  /**
   * Convert an instance of BatchImport to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

