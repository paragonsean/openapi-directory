/*
 * Amazon Fraud Detector
 * <p>This is the Amazon Fraud Detector API Reference. This guide is for developers who need detailed information about Amazon Fraud Detector API actions, data types, and errors. For more information about Amazon Fraud Detector features, see the <a href=\"https://docs.aws.amazon.com/frauddetector/latest/ug/\">Amazon Fraud Detector User Guide</a>.</p> <p>We provide the Query API as well as AWS software development kits (SDK) for Amazon Fraud Detector in Java and Python programming languages.</p> <p>The Amazon Fraud Detector Query API provides HTTPS requests that use the HTTP verb GET or POST and a Query parameter <code>Action</code>. AWS SDK provides libraries, sample code, tutorials, and other resources for software developers who prefer to build applications using language-specific APIs instead of submitting a request over HTTP or HTTPS. These libraries provide basic functions that automatically take care of tasks such as cryptographically signing your requests, retrying requests, and handling error responses, so that it is easier for you to get started. For more information about the AWS SDKs, go to <a href=\"https://aws.amazon.com/developer/tools/\">Tools to build on AWS</a> page, scroll down to the <b>SDK</b> section, and choose plus (+) sign to expand the section. </p>
 *
 * The version of the OpenAPI document: 2019-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 *  The details of the external (Amazon Sagemaker) model evaluated for generating predictions. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:35.913975-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EvaluatedExternalModel {
  public static final String SERIALIZED_NAME_MODEL_ENDPOINT = "modelEndpoint";
  @SerializedName(SERIALIZED_NAME_MODEL_ENDPOINT)
  private String modelEndpoint;

  public static final String SERIALIZED_NAME_USE_EVENT_VARIABLES = "useEventVariables";
  @SerializedName(SERIALIZED_NAME_USE_EVENT_VARIABLES)
  private Boolean useEventVariables;

  public static final String SERIALIZED_NAME_INPUT_VARIABLES = "inputVariables";
  @SerializedName(SERIALIZED_NAME_INPUT_VARIABLES)
  private Map inputVariables;

  public static final String SERIALIZED_NAME_OUTPUT_VARIABLES = "outputVariables";
  @SerializedName(SERIALIZED_NAME_OUTPUT_VARIABLES)
  private Map outputVariables;

  public EvaluatedExternalModel() {
  }

  public EvaluatedExternalModel modelEndpoint(String modelEndpoint) {
    this.modelEndpoint = modelEndpoint;
    return this;
  }

  /**
   * Get modelEndpoint
   * @return modelEndpoint
   */
  @javax.annotation.Nullable
  public String getModelEndpoint() {
    return modelEndpoint;
  }

  public void setModelEndpoint(String modelEndpoint) {
    this.modelEndpoint = modelEndpoint;
  }


  public EvaluatedExternalModel useEventVariables(Boolean useEventVariables) {
    this.useEventVariables = useEventVariables;
    return this;
  }

  /**
   * Get useEventVariables
   * @return useEventVariables
   */
  @javax.annotation.Nullable
  public Boolean getUseEventVariables() {
    return useEventVariables;
  }

  public void setUseEventVariables(Boolean useEventVariables) {
    this.useEventVariables = useEventVariables;
  }


  public EvaluatedExternalModel inputVariables(Map inputVariables) {
    this.inputVariables = inputVariables;
    return this;
  }

  /**
   * Get inputVariables
   * @return inputVariables
   */
  @javax.annotation.Nullable
  public Map getInputVariables() {
    return inputVariables;
  }

  public void setInputVariables(Map inputVariables) {
    this.inputVariables = inputVariables;
  }


  public EvaluatedExternalModel outputVariables(Map outputVariables) {
    this.outputVariables = outputVariables;
    return this;
  }

  /**
   * Get outputVariables
   * @return outputVariables
   */
  @javax.annotation.Nullable
  public Map getOutputVariables() {
    return outputVariables;
  }

  public void setOutputVariables(Map outputVariables) {
    this.outputVariables = outputVariables;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EvaluatedExternalModel evaluatedExternalModel = (EvaluatedExternalModel) o;
    return Objects.equals(this.modelEndpoint, evaluatedExternalModel.modelEndpoint) &&
        Objects.equals(this.useEventVariables, evaluatedExternalModel.useEventVariables) &&
        Objects.equals(this.inputVariables, evaluatedExternalModel.inputVariables) &&
        Objects.equals(this.outputVariables, evaluatedExternalModel.outputVariables);
  }

  @Override
  public int hashCode() {
    return Objects.hash(modelEndpoint, useEventVariables, inputVariables, outputVariables);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EvaluatedExternalModel {\n");
    sb.append("    modelEndpoint: ").append(toIndentedString(modelEndpoint)).append("\n");
    sb.append("    useEventVariables: ").append(toIndentedString(useEventVariables)).append("\n");
    sb.append("    inputVariables: ").append(toIndentedString(inputVariables)).append("\n");
    sb.append("    outputVariables: ").append(toIndentedString(outputVariables)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("modelEndpoint");
    openapiFields.add("useEventVariables");
    openapiFields.add("inputVariables");
    openapiFields.add("outputVariables");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EvaluatedExternalModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EvaluatedExternalModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EvaluatedExternalModel is not found in the empty JSON string", EvaluatedExternalModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EvaluatedExternalModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EvaluatedExternalModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `modelEndpoint`
      if (jsonObj.get("modelEndpoint") != null && !jsonObj.get("modelEndpoint").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("modelEndpoint"));
      }
      // validate the optional field `useEventVariables`
      if (jsonObj.get("useEventVariables") != null && !jsonObj.get("useEventVariables").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("useEventVariables"));
      }
      // validate the optional field `inputVariables`
      if (jsonObj.get("inputVariables") != null && !jsonObj.get("inputVariables").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("inputVariables"));
      }
      // validate the optional field `outputVariables`
      if (jsonObj.get("outputVariables") != null && !jsonObj.get("outputVariables").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("outputVariables"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EvaluatedExternalModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EvaluatedExternalModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EvaluatedExternalModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EvaluatedExternalModel.class));

       return (TypeAdapter<T>) new TypeAdapter<EvaluatedExternalModel>() {
           @Override
           public void write(JsonWriter out, EvaluatedExternalModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EvaluatedExternalModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EvaluatedExternalModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EvaluatedExternalModel
   * @throws IOException if the JSON string is invalid with respect to EvaluatedExternalModel
   */
  public static EvaluatedExternalModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EvaluatedExternalModel.class);
  }

  /**
   * Convert an instance of EvaluatedExternalModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

