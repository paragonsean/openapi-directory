/*
 * Amazon Fraud Detector
 * <p>This is the Amazon Fraud Detector API Reference. This guide is for developers who need detailed information about Amazon Fraud Detector API actions, data types, and errors. For more information about Amazon Fraud Detector features, see the <a href=\"https://docs.aws.amazon.com/frauddetector/latest/ug/\">Amazon Fraud Detector User Guide</a>.</p> <p>We provide the Query API as well as AWS software development kits (SDK) for Amazon Fraud Detector in Java and Python programming languages.</p> <p>The Amazon Fraud Detector Query API provides HTTPS requests that use the HTTP verb GET or POST and a Query parameter <code>Action</code>. AWS SDK provides libraries, sample code, tutorials, and other resources for software developers who prefer to build applications using language-specific APIs instead of submitting a request over HTTP or HTTPS. These libraries provide basic functions that automatically take care of tasks such as cryptographically signing your requests, retrying requests, and handling error responses, so that it is easier for you to get started. For more information about the AWS SDKs, go to <a href=\"https://aws.amazon.com/developer/tools/\">Tools to build on AWS</a> page, scroll down to the <b>SDK</b> section, and choose plus (+) sign to expand the section. </p>
 *
 * The version of the OpenAPI document: 2019-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetEventResultEvent
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:35.913975-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetEventResultEvent {
  public static final String SERIALIZED_NAME_EVENT_ID = "eventId";
  @SerializedName(SERIALIZED_NAME_EVENT_ID)
  private String eventId;

  public static final String SERIALIZED_NAME_EVENT_TYPE_NAME = "eventTypeName";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE_NAME)
  private String eventTypeName;

  public static final String SERIALIZED_NAME_EVENT_TIMESTAMP = "eventTimestamp";
  @SerializedName(SERIALIZED_NAME_EVENT_TIMESTAMP)
  private String eventTimestamp;

  public static final String SERIALIZED_NAME_EVENT_VARIABLES = "eventVariables";
  @SerializedName(SERIALIZED_NAME_EVENT_VARIABLES)
  private Map eventVariables;

  public static final String SERIALIZED_NAME_CURRENT_LABEL = "currentLabel";
  @SerializedName(SERIALIZED_NAME_CURRENT_LABEL)
  private String currentLabel;

  public static final String SERIALIZED_NAME_LABEL_TIMESTAMP = "labelTimestamp";
  @SerializedName(SERIALIZED_NAME_LABEL_TIMESTAMP)
  private String labelTimestamp;

  public static final String SERIALIZED_NAME_ENTITIES = "entities";
  @SerializedName(SERIALIZED_NAME_ENTITIES)
  private List entities;

  public GetEventResultEvent() {
  }

  public GetEventResultEvent eventId(String eventId) {
    this.eventId = eventId;
    return this;
  }

  /**
   * Get eventId
   * @return eventId
   */
  @javax.annotation.Nullable
  public String getEventId() {
    return eventId;
  }

  public void setEventId(String eventId) {
    this.eventId = eventId;
  }


  public GetEventResultEvent eventTypeName(String eventTypeName) {
    this.eventTypeName = eventTypeName;
    return this;
  }

  /**
   * Get eventTypeName
   * @return eventTypeName
   */
  @javax.annotation.Nullable
  public String getEventTypeName() {
    return eventTypeName;
  }

  public void setEventTypeName(String eventTypeName) {
    this.eventTypeName = eventTypeName;
  }


  public GetEventResultEvent eventTimestamp(String eventTimestamp) {
    this.eventTimestamp = eventTimestamp;
    return this;
  }

  /**
   * Get eventTimestamp
   * @return eventTimestamp
   */
  @javax.annotation.Nullable
  public String getEventTimestamp() {
    return eventTimestamp;
  }

  public void setEventTimestamp(String eventTimestamp) {
    this.eventTimestamp = eventTimestamp;
  }


  public GetEventResultEvent eventVariables(Map eventVariables) {
    this.eventVariables = eventVariables;
    return this;
  }

  /**
   * Get eventVariables
   * @return eventVariables
   */
  @javax.annotation.Nullable
  public Map getEventVariables() {
    return eventVariables;
  }

  public void setEventVariables(Map eventVariables) {
    this.eventVariables = eventVariables;
  }


  public GetEventResultEvent currentLabel(String currentLabel) {
    this.currentLabel = currentLabel;
    return this;
  }

  /**
   * Get currentLabel
   * @return currentLabel
   */
  @javax.annotation.Nullable
  public String getCurrentLabel() {
    return currentLabel;
  }

  public void setCurrentLabel(String currentLabel) {
    this.currentLabel = currentLabel;
  }


  public GetEventResultEvent labelTimestamp(String labelTimestamp) {
    this.labelTimestamp = labelTimestamp;
    return this;
  }

  /**
   * Get labelTimestamp
   * @return labelTimestamp
   */
  @javax.annotation.Nullable
  public String getLabelTimestamp() {
    return labelTimestamp;
  }

  public void setLabelTimestamp(String labelTimestamp) {
    this.labelTimestamp = labelTimestamp;
  }


  public GetEventResultEvent entities(List entities) {
    this.entities = entities;
    return this;
  }

  /**
   * Get entities
   * @return entities
   */
  @javax.annotation.Nullable
  public List getEntities() {
    return entities;
  }

  public void setEntities(List entities) {
    this.entities = entities;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetEventResultEvent getEventResultEvent = (GetEventResultEvent) o;
    return Objects.equals(this.eventId, getEventResultEvent.eventId) &&
        Objects.equals(this.eventTypeName, getEventResultEvent.eventTypeName) &&
        Objects.equals(this.eventTimestamp, getEventResultEvent.eventTimestamp) &&
        Objects.equals(this.eventVariables, getEventResultEvent.eventVariables) &&
        Objects.equals(this.currentLabel, getEventResultEvent.currentLabel) &&
        Objects.equals(this.labelTimestamp, getEventResultEvent.labelTimestamp) &&
        Objects.equals(this.entities, getEventResultEvent.entities);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eventId, eventTypeName, eventTimestamp, eventVariables, currentLabel, labelTimestamp, entities);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetEventResultEvent {\n");
    sb.append("    eventId: ").append(toIndentedString(eventId)).append("\n");
    sb.append("    eventTypeName: ").append(toIndentedString(eventTypeName)).append("\n");
    sb.append("    eventTimestamp: ").append(toIndentedString(eventTimestamp)).append("\n");
    sb.append("    eventVariables: ").append(toIndentedString(eventVariables)).append("\n");
    sb.append("    currentLabel: ").append(toIndentedString(currentLabel)).append("\n");
    sb.append("    labelTimestamp: ").append(toIndentedString(labelTimestamp)).append("\n");
    sb.append("    entities: ").append(toIndentedString(entities)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("eventId");
    openapiFields.add("eventTypeName");
    openapiFields.add("eventTimestamp");
    openapiFields.add("eventVariables");
    openapiFields.add("currentLabel");
    openapiFields.add("labelTimestamp");
    openapiFields.add("entities");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetEventResultEvent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetEventResultEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetEventResultEvent is not found in the empty JSON string", GetEventResultEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetEventResultEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetEventResultEvent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `eventId`
      if (jsonObj.get("eventId") != null && !jsonObj.get("eventId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("eventId"));
      }
      // validate the optional field `eventTypeName`
      if (jsonObj.get("eventTypeName") != null && !jsonObj.get("eventTypeName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("eventTypeName"));
      }
      // validate the optional field `eventTimestamp`
      if (jsonObj.get("eventTimestamp") != null && !jsonObj.get("eventTimestamp").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("eventTimestamp"));
      }
      // validate the optional field `eventVariables`
      if (jsonObj.get("eventVariables") != null && !jsonObj.get("eventVariables").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("eventVariables"));
      }
      // validate the optional field `currentLabel`
      if (jsonObj.get("currentLabel") != null && !jsonObj.get("currentLabel").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("currentLabel"));
      }
      // validate the optional field `labelTimestamp`
      if (jsonObj.get("labelTimestamp") != null && !jsonObj.get("labelTimestamp").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("labelTimestamp"));
      }
      // validate the optional field `entities`
      if (jsonObj.get("entities") != null && !jsonObj.get("entities").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("entities"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetEventResultEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetEventResultEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetEventResultEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetEventResultEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<GetEventResultEvent>() {
           @Override
           public void write(JsonWriter out, GetEventResultEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetEventResultEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetEventResultEvent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetEventResultEvent
   * @throws IOException if the JSON string is invalid with respect to GetEventResultEvent
   */
  public static GetEventResultEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetEventResultEvent.class);
  }

  /**
   * Convert an instance of GetEventResultEvent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

