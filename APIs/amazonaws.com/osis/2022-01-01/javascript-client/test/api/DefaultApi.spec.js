/**
 * Amazon OpenSearch Ingestion
 * Use the Amazon OpenSearch Ingestion API to create and manage ingestion pipelines. OpenSearch Ingestion is a fully managed data collector that delivers real-time log and trace data to OpenSearch Service domains. For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/ingestion.html\">Getting data into your cluster using OpenSearch Ingestion</a>.
 *
 * The version of the OpenAPI document: 2022-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonOpenSearchIngestion);
  }
}(this, function(expect, AmazonOpenSearchIngestion) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonOpenSearchIngestion.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('createPipeline', function() {
      it('should call createPipeline successfully', function(done) {
        //uncomment below and update the code to test createPipeline
        //instance.createPipeline(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deletePipeline', function() {
      it('should call deletePipeline successfully', function(done) {
        //uncomment below and update the code to test deletePipeline
        //instance.deletePipeline(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPipeline', function() {
      it('should call getPipeline successfully', function(done) {
        //uncomment below and update the code to test getPipeline
        //instance.getPipeline(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPipelineBlueprint', function() {
      it('should call getPipelineBlueprint successfully', function(done) {
        //uncomment below and update the code to test getPipelineBlueprint
        //instance.getPipelineBlueprint(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPipelineChangeProgress', function() {
      it('should call getPipelineChangeProgress successfully', function(done) {
        //uncomment below and update the code to test getPipelineChangeProgress
        //instance.getPipelineChangeProgress(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listPipelineBlueprints', function() {
      it('should call listPipelineBlueprints successfully', function(done) {
        //uncomment below and update the code to test listPipelineBlueprints
        //instance.listPipelineBlueprints(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listPipelines', function() {
      it('should call listPipelines successfully', function(done) {
        //uncomment below and update the code to test listPipelines
        //instance.listPipelines(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startPipeline', function() {
      it('should call startPipeline successfully', function(done) {
        //uncomment below and update the code to test startPipeline
        //instance.startPipeline(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopPipeline', function() {
      it('should call stopPipeline successfully', function(done) {
        //uncomment below and update the code to test stopPipeline
        //instance.stopPipeline(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updatePipeline', function() {
      it('should call updatePipeline successfully', function(done) {
        //uncomment below and update the code to test updatePipeline
        //instance.updatePipeline(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('validatePipeline', function() {
      it('should call validatePipeline successfully', function(done) {
        //uncomment below and update the code to test validatePipeline
        //instance.validatePipeline(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
