/**
 * Amazon OpenSearch Ingestion
 * Use the Amazon OpenSearch Ingestion API to create and manage ingestion pipelines. OpenSearch Ingestion is a fully managed data collector that delivers real-time log and trace data to OpenSearch Service domains. For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/ingestion.html\">Getting data into your cluster using OpenSearch Ingestion</a>.
 *
 * The version of the OpenAPI document: 2022-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdatePipeline_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdatePipeline_request::OAIUpdatePipeline_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdatePipeline_request::OAIUpdatePipeline_request() {
    this->initializeModel();
}

OAIUpdatePipeline_request::~OAIUpdatePipeline_request() {}

void OAIUpdatePipeline_request::initializeModel() {

    m_min_units_isSet = false;
    m_min_units_isValid = false;

    m_max_units_isSet = false;
    m_max_units_isValid = false;

    m_pipeline_configuration_body_isSet = false;
    m_pipeline_configuration_body_isValid = false;

    m_log_publishing_options_isSet = false;
    m_log_publishing_options_isValid = false;
}

void OAIUpdatePipeline_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdatePipeline_request::fromJsonObject(QJsonObject json) {

    m_min_units_isValid = ::OpenAPI::fromJsonValue(m_min_units, json[QString("MinUnits")]);
    m_min_units_isSet = !json[QString("MinUnits")].isNull() && m_min_units_isValid;

    m_max_units_isValid = ::OpenAPI::fromJsonValue(m_max_units, json[QString("MaxUnits")]);
    m_max_units_isSet = !json[QString("MaxUnits")].isNull() && m_max_units_isValid;

    m_pipeline_configuration_body_isValid = ::OpenAPI::fromJsonValue(m_pipeline_configuration_body, json[QString("PipelineConfigurationBody")]);
    m_pipeline_configuration_body_isSet = !json[QString("PipelineConfigurationBody")].isNull() && m_pipeline_configuration_body_isValid;

    m_log_publishing_options_isValid = ::OpenAPI::fromJsonValue(m_log_publishing_options, json[QString("LogPublishingOptions")]);
    m_log_publishing_options_isSet = !json[QString("LogPublishingOptions")].isNull() && m_log_publishing_options_isValid;
}

QString OAIUpdatePipeline_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdatePipeline_request::asJsonObject() const {
    QJsonObject obj;
    if (m_min_units_isSet) {
        obj.insert(QString("MinUnits"), ::OpenAPI::toJsonValue(m_min_units));
    }
    if (m_max_units_isSet) {
        obj.insert(QString("MaxUnits"), ::OpenAPI::toJsonValue(m_max_units));
    }
    if (m_pipeline_configuration_body_isSet) {
        obj.insert(QString("PipelineConfigurationBody"), ::OpenAPI::toJsonValue(m_pipeline_configuration_body));
    }
    if (m_log_publishing_options.isSet()) {
        obj.insert(QString("LogPublishingOptions"), ::OpenAPI::toJsonValue(m_log_publishing_options));
    }
    return obj;
}

qint32 OAIUpdatePipeline_request::getMinUnits() const {
    return m_min_units;
}
void OAIUpdatePipeline_request::setMinUnits(const qint32 &min_units) {
    m_min_units = min_units;
    m_min_units_isSet = true;
}

bool OAIUpdatePipeline_request::is_min_units_Set() const{
    return m_min_units_isSet;
}

bool OAIUpdatePipeline_request::is_min_units_Valid() const{
    return m_min_units_isValid;
}

qint32 OAIUpdatePipeline_request::getMaxUnits() const {
    return m_max_units;
}
void OAIUpdatePipeline_request::setMaxUnits(const qint32 &max_units) {
    m_max_units = max_units;
    m_max_units_isSet = true;
}

bool OAIUpdatePipeline_request::is_max_units_Set() const{
    return m_max_units_isSet;
}

bool OAIUpdatePipeline_request::is_max_units_Valid() const{
    return m_max_units_isValid;
}

QString OAIUpdatePipeline_request::getPipelineConfigurationBody() const {
    return m_pipeline_configuration_body;
}
void OAIUpdatePipeline_request::setPipelineConfigurationBody(const QString &pipeline_configuration_body) {
    m_pipeline_configuration_body = pipeline_configuration_body;
    m_pipeline_configuration_body_isSet = true;
}

bool OAIUpdatePipeline_request::is_pipeline_configuration_body_Set() const{
    return m_pipeline_configuration_body_isSet;
}

bool OAIUpdatePipeline_request::is_pipeline_configuration_body_Valid() const{
    return m_pipeline_configuration_body_isValid;
}

OAICreatePipeline_request_LogPublishingOptions OAIUpdatePipeline_request::getLogPublishingOptions() const {
    return m_log_publishing_options;
}
void OAIUpdatePipeline_request::setLogPublishingOptions(const OAICreatePipeline_request_LogPublishingOptions &log_publishing_options) {
    m_log_publishing_options = log_publishing_options;
    m_log_publishing_options_isSet = true;
}

bool OAIUpdatePipeline_request::is_log_publishing_options_Set() const{
    return m_log_publishing_options_isSet;
}

bool OAIUpdatePipeline_request::is_log_publishing_options_Valid() const{
    return m_log_publishing_options_isValid;
}

bool OAIUpdatePipeline_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_min_units_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_units_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pipeline_configuration_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_publishing_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdatePipeline_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
