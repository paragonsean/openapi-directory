/**
 * Amazon OpenSearch Ingestion
 * Use the Amazon OpenSearch Ingestion API to create and manage ingestion pipelines. OpenSearch Ingestion is a fully managed data collector that delivers real-time log and trace data to OpenSearch Service domains. For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/ingestion.html\">Getting data into your cluster using OpenSearch Ingestion</a>.
 *
 * The version of the OpenAPI document: 2022-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreatePipelineRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreatePipelineRequest::OAICreatePipelineRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreatePipelineRequest::OAICreatePipelineRequest() {
    this->initializeModel();
}

OAICreatePipelineRequest::~OAICreatePipelineRequest() {}

void OAICreatePipelineRequest::initializeModel() {

    m_pipeline_name_isSet = false;
    m_pipeline_name_isValid = false;

    m_min_units_isSet = false;
    m_min_units_isValid = false;

    m_max_units_isSet = false;
    m_max_units_isValid = false;

    m_pipeline_configuration_body_isSet = false;
    m_pipeline_configuration_body_isValid = false;

    m_log_publishing_options_isSet = false;
    m_log_publishing_options_isValid = false;

    m_vpc_options_isSet = false;
    m_vpc_options_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreatePipelineRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreatePipelineRequest::fromJsonObject(QJsonObject json) {

    m_pipeline_name_isValid = ::OpenAPI::fromJsonValue(m_pipeline_name, json[QString("PipelineName")]);
    m_pipeline_name_isSet = !json[QString("PipelineName")].isNull() && m_pipeline_name_isValid;

    m_min_units_isValid = ::OpenAPI::fromJsonValue(m_min_units, json[QString("MinUnits")]);
    m_min_units_isSet = !json[QString("MinUnits")].isNull() && m_min_units_isValid;

    m_max_units_isValid = ::OpenAPI::fromJsonValue(m_max_units, json[QString("MaxUnits")]);
    m_max_units_isSet = !json[QString("MaxUnits")].isNull() && m_max_units_isValid;

    m_pipeline_configuration_body_isValid = ::OpenAPI::fromJsonValue(m_pipeline_configuration_body, json[QString("PipelineConfigurationBody")]);
    m_pipeline_configuration_body_isSet = !json[QString("PipelineConfigurationBody")].isNull() && m_pipeline_configuration_body_isValid;

    m_log_publishing_options_isValid = ::OpenAPI::fromJsonValue(m_log_publishing_options, json[QString("LogPublishingOptions")]);
    m_log_publishing_options_isSet = !json[QString("LogPublishingOptions")].isNull() && m_log_publishing_options_isValid;

    m_vpc_options_isValid = ::OpenAPI::fromJsonValue(m_vpc_options, json[QString("VpcOptions")]);
    m_vpc_options_isSet = !json[QString("VpcOptions")].isNull() && m_vpc_options_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreatePipelineRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreatePipelineRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_pipeline_name_isSet) {
        obj.insert(QString("PipelineName"), ::OpenAPI::toJsonValue(m_pipeline_name));
    }
    if (m_min_units_isSet) {
        obj.insert(QString("MinUnits"), ::OpenAPI::toJsonValue(m_min_units));
    }
    if (m_max_units_isSet) {
        obj.insert(QString("MaxUnits"), ::OpenAPI::toJsonValue(m_max_units));
    }
    if (m_pipeline_configuration_body_isSet) {
        obj.insert(QString("PipelineConfigurationBody"), ::OpenAPI::toJsonValue(m_pipeline_configuration_body));
    }
    if (m_log_publishing_options.isSet()) {
        obj.insert(QString("LogPublishingOptions"), ::OpenAPI::toJsonValue(m_log_publishing_options));
    }
    if (m_vpc_options.isSet()) {
        obj.insert(QString("VpcOptions"), ::OpenAPI::toJsonValue(m_vpc_options));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreatePipelineRequest::getPipelineName() const {
    return m_pipeline_name;
}
void OAICreatePipelineRequest::setPipelineName(const QString &pipeline_name) {
    m_pipeline_name = pipeline_name;
    m_pipeline_name_isSet = true;
}

bool OAICreatePipelineRequest::is_pipeline_name_Set() const{
    return m_pipeline_name_isSet;
}

bool OAICreatePipelineRequest::is_pipeline_name_Valid() const{
    return m_pipeline_name_isValid;
}

qint32 OAICreatePipelineRequest::getMinUnits() const {
    return m_min_units;
}
void OAICreatePipelineRequest::setMinUnits(const qint32 &min_units) {
    m_min_units = min_units;
    m_min_units_isSet = true;
}

bool OAICreatePipelineRequest::is_min_units_Set() const{
    return m_min_units_isSet;
}

bool OAICreatePipelineRequest::is_min_units_Valid() const{
    return m_min_units_isValid;
}

qint32 OAICreatePipelineRequest::getMaxUnits() const {
    return m_max_units;
}
void OAICreatePipelineRequest::setMaxUnits(const qint32 &max_units) {
    m_max_units = max_units;
    m_max_units_isSet = true;
}

bool OAICreatePipelineRequest::is_max_units_Set() const{
    return m_max_units_isSet;
}

bool OAICreatePipelineRequest::is_max_units_Valid() const{
    return m_max_units_isValid;
}

QString OAICreatePipelineRequest::getPipelineConfigurationBody() const {
    return m_pipeline_configuration_body;
}
void OAICreatePipelineRequest::setPipelineConfigurationBody(const QString &pipeline_configuration_body) {
    m_pipeline_configuration_body = pipeline_configuration_body;
    m_pipeline_configuration_body_isSet = true;
}

bool OAICreatePipelineRequest::is_pipeline_configuration_body_Set() const{
    return m_pipeline_configuration_body_isSet;
}

bool OAICreatePipelineRequest::is_pipeline_configuration_body_Valid() const{
    return m_pipeline_configuration_body_isValid;
}

OAICreatePipelineRequest_LogPublishingOptions OAICreatePipelineRequest::getLogPublishingOptions() const {
    return m_log_publishing_options;
}
void OAICreatePipelineRequest::setLogPublishingOptions(const OAICreatePipelineRequest_LogPublishingOptions &log_publishing_options) {
    m_log_publishing_options = log_publishing_options;
    m_log_publishing_options_isSet = true;
}

bool OAICreatePipelineRequest::is_log_publishing_options_Set() const{
    return m_log_publishing_options_isSet;
}

bool OAICreatePipelineRequest::is_log_publishing_options_Valid() const{
    return m_log_publishing_options_isValid;
}

OAICreatePipelineRequest_VpcOptions OAICreatePipelineRequest::getVpcOptions() const {
    return m_vpc_options;
}
void OAICreatePipelineRequest::setVpcOptions(const OAICreatePipelineRequest_VpcOptions &vpc_options) {
    m_vpc_options = vpc_options;
    m_vpc_options_isSet = true;
}

bool OAICreatePipelineRequest::is_vpc_options_Set() const{
    return m_vpc_options_isSet;
}

bool OAICreatePipelineRequest::is_vpc_options_Valid() const{
    return m_vpc_options_isValid;
}

QList OAICreatePipelineRequest::getTags() const {
    return m_tags;
}
void OAICreatePipelineRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreatePipelineRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreatePipelineRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreatePipelineRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pipeline_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_units_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_units_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pipeline_configuration_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_publishing_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreatePipelineRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_pipeline_name_isValid && m_min_units_isValid && m_max_units_isValid && m_pipeline_configuration_body_isValid && true;
}

} // namespace OpenAPI
