/**
 * Amazon OpenSearch Ingestion
 * Use the Amazon OpenSearch Ingestion API to create and manage ingestion pipelines. OpenSearch Ingestion is a fully managed data collector that delivers real-time log and trace data to OpenSearch Service domains. For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/ingestion.html\">Getting data into your cluster using OpenSearch Ingestion</a>.
 *
 * The version of the OpenAPI document: 2022-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPipelineSummary.h
 *
 * Summary information for an OpenSearch Ingestion pipeline.
 */

#ifndef OAIPipelineSummary_H
#define OAIPipelineSummary_H

#include <QJsonObject>

#include "OAIPipelineStatus.h"
#include "OAIPipelineStatusReason.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPipelineStatusReason;

class OAIPipelineSummary : public OAIObject {
public:
    OAIPipelineSummary();
    OAIPipelineSummary(QString json);
    ~OAIPipelineSummary() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIPipelineStatus getStatus() const;
    void setStatus(const OAIPipelineStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    OAIPipelineStatusReason getStatusReason() const;
    void setStatusReason(const OAIPipelineStatusReason &status_reason);
    bool is_status_reason_Set() const;
    bool is_status_reason_Valid() const;

    QString getPipelineName() const;
    void setPipelineName(const QString &pipeline_name);
    bool is_pipeline_name_Set() const;
    bool is_pipeline_name_Valid() const;

    QString getPipelineArn() const;
    void setPipelineArn(const QString &pipeline_arn);
    bool is_pipeline_arn_Set() const;
    bool is_pipeline_arn_Valid() const;

    qint32 getMinUnits() const;
    void setMinUnits(const qint32 &min_units);
    bool is_min_units_Set() const;
    bool is_min_units_Valid() const;

    qint32 getMaxUnits() const;
    void setMaxUnits(const qint32 &max_units);
    bool is_max_units_Set() const;
    bool is_max_units_Valid() const;

    QDateTime getCreatedAt() const;
    void setCreatedAt(const QDateTime &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    QDateTime getLastUpdatedAt() const;
    void setLastUpdatedAt(const QDateTime &last_updated_at);
    bool is_last_updated_at_Set() const;
    bool is_last_updated_at_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIPipelineStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    OAIPipelineStatusReason m_status_reason;
    bool m_status_reason_isSet;
    bool m_status_reason_isValid;

    QString m_pipeline_name;
    bool m_pipeline_name_isSet;
    bool m_pipeline_name_isValid;

    QString m_pipeline_arn;
    bool m_pipeline_arn_isSet;
    bool m_pipeline_arn_isValid;

    qint32 m_min_units;
    bool m_min_units_isSet;
    bool m_min_units_isValid;

    qint32 m_max_units;
    bool m_max_units_isSet;
    bool m_max_units_isValid;

    QDateTime m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    QDateTime m_last_updated_at;
    bool m_last_updated_at_isSet;
    bool m_last_updated_at_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPipelineSummary)

#endif // OAIPipelineSummary_H
