/**
 * Amazon OpenSearch Ingestion
 * Use the Amazon OpenSearch Ingestion API to create and manage ingestion pipelines. OpenSearch Ingestion is a fully managed data collector that delivers real-time log and trace data to OpenSearch Service domains. For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/ingestion.html\">Getting data into your cluster using OpenSearch Ingestion</a>.
 *
 * The version of the OpenAPI document: 2022-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIValidatePipelineResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIValidatePipelineResponse::OAIValidatePipelineResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIValidatePipelineResponse::OAIValidatePipelineResponse() {
    this->initializeModel();
}

OAIValidatePipelineResponse::~OAIValidatePipelineResponse() {}

void OAIValidatePipelineResponse::initializeModel() {

    m_is_valid_isSet = false;
    m_is_valid_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;
}

void OAIValidatePipelineResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIValidatePipelineResponse::fromJsonObject(QJsonObject json) {

    m_is_valid_isValid = ::OpenAPI::fromJsonValue(m_is_valid, json[QString("isValid")]);
    m_is_valid_isSet = !json[QString("isValid")].isNull() && m_is_valid_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("Errors")]);
    m_errors_isSet = !json[QString("Errors")].isNull() && m_errors_isValid;
}

QString OAIValidatePipelineResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIValidatePipelineResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_is_valid_isSet) {
        obj.insert(QString("isValid"), ::OpenAPI::toJsonValue(m_is_valid));
    }
    if (m_errors.isSet()) {
        obj.insert(QString("Errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    return obj;
}

bool OAIValidatePipelineResponse::getIsValid() const {
    return m_is_valid;
}
void OAIValidatePipelineResponse::setIsValid(const bool &is_valid) {
    m_is_valid = is_valid;
    m_is_valid_isSet = true;
}

bool OAIValidatePipelineResponse::is_is_valid_Set() const{
    return m_is_valid_isSet;
}

bool OAIValidatePipelineResponse::is_is_valid_Valid() const{
    return m_is_valid_isValid;
}

QList OAIValidatePipelineResponse::getErrors() const {
    return m_errors;
}
void OAIValidatePipelineResponse::setErrors(const QList &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIValidatePipelineResponse::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIValidatePipelineResponse::is_errors_Valid() const{
    return m_errors_isValid;
}

bool OAIValidatePipelineResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_valid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIValidatePipelineResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
