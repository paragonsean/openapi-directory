/**
 * Amazon OpenSearch Ingestion
 * Use the Amazon OpenSearch Ingestion API to create and manage ingestion pipelines. OpenSearch Ingestion is a fully managed data collector that delivers real-time log and trace data to OpenSearch Service domains. For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/ingestion.html\">Getting data into your cluster using OpenSearch Ingestion</a>.
 *
 * The version of the OpenAPI document: 2022-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreatePipeline_request_LogPublishingOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreatePipeline_request_LogPublishingOptions::OAICreatePipeline_request_LogPublishingOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreatePipeline_request_LogPublishingOptions::OAICreatePipeline_request_LogPublishingOptions() {
    this->initializeModel();
}

OAICreatePipeline_request_LogPublishingOptions::~OAICreatePipeline_request_LogPublishingOptions() {}

void OAICreatePipeline_request_LogPublishingOptions::initializeModel() {

    m_is_logging_enabled_isSet = false;
    m_is_logging_enabled_isValid = false;

    m_cloud_watch_log_destination_isSet = false;
    m_cloud_watch_log_destination_isValid = false;
}

void OAICreatePipeline_request_LogPublishingOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreatePipeline_request_LogPublishingOptions::fromJsonObject(QJsonObject json) {

    m_is_logging_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_logging_enabled, json[QString("IsLoggingEnabled")]);
    m_is_logging_enabled_isSet = !json[QString("IsLoggingEnabled")].isNull() && m_is_logging_enabled_isValid;

    m_cloud_watch_log_destination_isValid = ::OpenAPI::fromJsonValue(m_cloud_watch_log_destination, json[QString("CloudWatchLogDestination")]);
    m_cloud_watch_log_destination_isSet = !json[QString("CloudWatchLogDestination")].isNull() && m_cloud_watch_log_destination_isValid;
}

QString OAICreatePipeline_request_LogPublishingOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreatePipeline_request_LogPublishingOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_is_logging_enabled_isSet) {
        obj.insert(QString("IsLoggingEnabled"), ::OpenAPI::toJsonValue(m_is_logging_enabled));
    }
    if (m_cloud_watch_log_destination.isSet()) {
        obj.insert(QString("CloudWatchLogDestination"), ::OpenAPI::toJsonValue(m_cloud_watch_log_destination));
    }
    return obj;
}

bool OAICreatePipeline_request_LogPublishingOptions::getIsLoggingEnabled() const {
    return m_is_logging_enabled;
}
void OAICreatePipeline_request_LogPublishingOptions::setIsLoggingEnabled(const bool &is_logging_enabled) {
    m_is_logging_enabled = is_logging_enabled;
    m_is_logging_enabled_isSet = true;
}

bool OAICreatePipeline_request_LogPublishingOptions::is_is_logging_enabled_Set() const{
    return m_is_logging_enabled_isSet;
}

bool OAICreatePipeline_request_LogPublishingOptions::is_is_logging_enabled_Valid() const{
    return m_is_logging_enabled_isValid;
}

OAICreatePipeline_request_LogPublishingOptions_CloudWatchLogDestination OAICreatePipeline_request_LogPublishingOptions::getCloudWatchLogDestination() const {
    return m_cloud_watch_log_destination;
}
void OAICreatePipeline_request_LogPublishingOptions::setCloudWatchLogDestination(const OAICreatePipeline_request_LogPublishingOptions_CloudWatchLogDestination &cloud_watch_log_destination) {
    m_cloud_watch_log_destination = cloud_watch_log_destination;
    m_cloud_watch_log_destination_isSet = true;
}

bool OAICreatePipeline_request_LogPublishingOptions::is_cloud_watch_log_destination_Set() const{
    return m_cloud_watch_log_destination_isSet;
}

bool OAICreatePipeline_request_LogPublishingOptions::is_cloud_watch_log_destination_Valid() const{
    return m_cloud_watch_log_destination_isValid;
}

bool OAICreatePipeline_request_LogPublishingOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_logging_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloud_watch_log_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreatePipeline_request_LogPublishingOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
