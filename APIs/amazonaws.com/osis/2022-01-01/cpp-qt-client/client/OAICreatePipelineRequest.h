/**
 * Amazon OpenSearch Ingestion
 * Use the Amazon OpenSearch Ingestion API to create and manage ingestion pipelines. OpenSearch Ingestion is a fully managed data collector that delivers real-time log and trace data to OpenSearch Service domains. For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/ingestion.html\">Getting data into your cluster using OpenSearch Ingestion</a>.
 *
 * The version of the OpenAPI document: 2022-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreatePipelineRequest.h
 *
 * 
 */

#ifndef OAICreatePipelineRequest_H
#define OAICreatePipelineRequest_H

#include <QJsonObject>

#include "OAICreatePipelineRequest_LogPublishingOptions.h"
#include "OAICreatePipelineRequest_VpcOptions.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreatePipelineRequest_LogPublishingOptions;
class OAICreatePipelineRequest_VpcOptions;

class OAICreatePipelineRequest : public OAIObject {
public:
    OAICreatePipelineRequest();
    OAICreatePipelineRequest(QString json);
    ~OAICreatePipelineRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getPipelineName() const;
    void setPipelineName(const QString &pipeline_name);
    bool is_pipeline_name_Set() const;
    bool is_pipeline_name_Valid() const;

    qint32 getMinUnits() const;
    void setMinUnits(const qint32 &min_units);
    bool is_min_units_Set() const;
    bool is_min_units_Valid() const;

    qint32 getMaxUnits() const;
    void setMaxUnits(const qint32 &max_units);
    bool is_max_units_Set() const;
    bool is_max_units_Valid() const;

    QString getPipelineConfigurationBody() const;
    void setPipelineConfigurationBody(const QString &pipeline_configuration_body);
    bool is_pipeline_configuration_body_Set() const;
    bool is_pipeline_configuration_body_Valid() const;

    OAICreatePipelineRequest_LogPublishingOptions getLogPublishingOptions() const;
    void setLogPublishingOptions(const OAICreatePipelineRequest_LogPublishingOptions &log_publishing_options);
    bool is_log_publishing_options_Set() const;
    bool is_log_publishing_options_Valid() const;

    OAICreatePipelineRequest_VpcOptions getVpcOptions() const;
    void setVpcOptions(const OAICreatePipelineRequest_VpcOptions &vpc_options);
    bool is_vpc_options_Set() const;
    bool is_vpc_options_Valid() const;

    QList getTags() const;
    void setTags(const QList &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_pipeline_name;
    bool m_pipeline_name_isSet;
    bool m_pipeline_name_isValid;

    qint32 m_min_units;
    bool m_min_units_isSet;
    bool m_min_units_isValid;

    qint32 m_max_units;
    bool m_max_units_isSet;
    bool m_max_units_isValid;

    QString m_pipeline_configuration_body;
    bool m_pipeline_configuration_body_isSet;
    bool m_pipeline_configuration_body_isValid;

    OAICreatePipelineRequest_LogPublishingOptions m_log_publishing_options;
    bool m_log_publishing_options_isSet;
    bool m_log_publishing_options_isValid;

    OAICreatePipelineRequest_VpcOptions m_vpc_options;
    bool m_vpc_options_isSet;
    bool m_vpc_options_isValid;

    QList m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreatePipelineRequest)

#endif // OAICreatePipelineRequest_H
