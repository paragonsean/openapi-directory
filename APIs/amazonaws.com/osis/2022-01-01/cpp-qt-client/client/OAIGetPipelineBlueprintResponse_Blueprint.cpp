/**
 * Amazon OpenSearch Ingestion
 * Use the Amazon OpenSearch Ingestion API to create and manage ingestion pipelines. OpenSearch Ingestion is a fully managed data collector that delivers real-time log and trace data to OpenSearch Service domains. For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/ingestion.html\">Getting data into your cluster using OpenSearch Ingestion</a>.
 *
 * The version of the OpenAPI document: 2022-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetPipelineBlueprintResponse_Blueprint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetPipelineBlueprintResponse_Blueprint::OAIGetPipelineBlueprintResponse_Blueprint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetPipelineBlueprintResponse_Blueprint::OAIGetPipelineBlueprintResponse_Blueprint() {
    this->initializeModel();
}

OAIGetPipelineBlueprintResponse_Blueprint::~OAIGetPipelineBlueprintResponse_Blueprint() {}

void OAIGetPipelineBlueprintResponse_Blueprint::initializeModel() {

    m_blueprint_name_isSet = false;
    m_blueprint_name_isValid = false;

    m_pipeline_configuration_body_isSet = false;
    m_pipeline_configuration_body_isValid = false;
}

void OAIGetPipelineBlueprintResponse_Blueprint::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetPipelineBlueprintResponse_Blueprint::fromJsonObject(QJsonObject json) {

    m_blueprint_name_isValid = ::OpenAPI::fromJsonValue(m_blueprint_name, json[QString("BlueprintName")]);
    m_blueprint_name_isSet = !json[QString("BlueprintName")].isNull() && m_blueprint_name_isValid;

    m_pipeline_configuration_body_isValid = ::OpenAPI::fromJsonValue(m_pipeline_configuration_body, json[QString("PipelineConfigurationBody")]);
    m_pipeline_configuration_body_isSet = !json[QString("PipelineConfigurationBody")].isNull() && m_pipeline_configuration_body_isValid;
}

QString OAIGetPipelineBlueprintResponse_Blueprint::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetPipelineBlueprintResponse_Blueprint::asJsonObject() const {
    QJsonObject obj;
    if (m_blueprint_name_isSet) {
        obj.insert(QString("BlueprintName"), ::OpenAPI::toJsonValue(m_blueprint_name));
    }
    if (m_pipeline_configuration_body_isSet) {
        obj.insert(QString("PipelineConfigurationBody"), ::OpenAPI::toJsonValue(m_pipeline_configuration_body));
    }
    return obj;
}

QString OAIGetPipelineBlueprintResponse_Blueprint::getBlueprintName() const {
    return m_blueprint_name;
}
void OAIGetPipelineBlueprintResponse_Blueprint::setBlueprintName(const QString &blueprint_name) {
    m_blueprint_name = blueprint_name;
    m_blueprint_name_isSet = true;
}

bool OAIGetPipelineBlueprintResponse_Blueprint::is_blueprint_name_Set() const{
    return m_blueprint_name_isSet;
}

bool OAIGetPipelineBlueprintResponse_Blueprint::is_blueprint_name_Valid() const{
    return m_blueprint_name_isValid;
}

QString OAIGetPipelineBlueprintResponse_Blueprint::getPipelineConfigurationBody() const {
    return m_pipeline_configuration_body;
}
void OAIGetPipelineBlueprintResponse_Blueprint::setPipelineConfigurationBody(const QString &pipeline_configuration_body) {
    m_pipeline_configuration_body = pipeline_configuration_body;
    m_pipeline_configuration_body_isSet = true;
}

bool OAIGetPipelineBlueprintResponse_Blueprint::is_pipeline_configuration_body_Set() const{
    return m_pipeline_configuration_body_isSet;
}

bool OAIGetPipelineBlueprintResponse_Blueprint::is_pipeline_configuration_body_Valid() const{
    return m_pipeline_configuration_body_isValid;
}

bool OAIGetPipelineBlueprintResponse_Blueprint::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_blueprint_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pipeline_configuration_body_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetPipelineBlueprintResponse_Blueprint::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
