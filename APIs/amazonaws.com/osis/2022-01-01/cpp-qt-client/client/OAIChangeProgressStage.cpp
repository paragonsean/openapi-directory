/**
 * Amazon OpenSearch Ingestion
 * Use the Amazon OpenSearch Ingestion API to create and manage ingestion pipelines. OpenSearch Ingestion is a fully managed data collector that delivers real-time log and trace data to OpenSearch Service domains. For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/ingestion.html\">Getting data into your cluster using OpenSearch Ingestion</a>.
 *
 * The version of the OpenAPI document: 2022-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChangeProgressStage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChangeProgressStage::OAIChangeProgressStage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChangeProgressStage::OAIChangeProgressStage() {
    this->initializeModel();
}

OAIChangeProgressStage::~OAIChangeProgressStage() {}

void OAIChangeProgressStage::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_last_updated_at_isSet = false;
    m_last_updated_at_isValid = false;
}

void OAIChangeProgressStage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChangeProgressStage::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_last_updated_at_isValid = ::OpenAPI::fromJsonValue(m_last_updated_at, json[QString("LastUpdatedAt")]);
    m_last_updated_at_isSet = !json[QString("LastUpdatedAt")].isNull() && m_last_updated_at_isValid;
}

QString OAIChangeProgressStage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChangeProgressStage::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_last_updated_at_isSet) {
        obj.insert(QString("LastUpdatedAt"), ::OpenAPI::toJsonValue(m_last_updated_at));
    }
    return obj;
}

QString OAIChangeProgressStage::getName() const {
    return m_name;
}
void OAIChangeProgressStage::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIChangeProgressStage::is_name_Set() const{
    return m_name_isSet;
}

bool OAIChangeProgressStage::is_name_Valid() const{
    return m_name_isValid;
}

OAIChangeProgressStageStatuses OAIChangeProgressStage::getStatus() const {
    return m_status;
}
void OAIChangeProgressStage::setStatus(const OAIChangeProgressStageStatuses &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIChangeProgressStage::is_status_Set() const{
    return m_status_isSet;
}

bool OAIChangeProgressStage::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIChangeProgressStage::getDescription() const {
    return m_description;
}
void OAIChangeProgressStage::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIChangeProgressStage::is_description_Set() const{
    return m_description_isSet;
}

bool OAIChangeProgressStage::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAIChangeProgressStage::getLastUpdatedAt() const {
    return m_last_updated_at;
}
void OAIChangeProgressStage::setLastUpdatedAt(const QDateTime &last_updated_at) {
    m_last_updated_at = last_updated_at;
    m_last_updated_at_isSet = true;
}

bool OAIChangeProgressStage::is_last_updated_at_Set() const{
    return m_last_updated_at_isSet;
}

bool OAIChangeProgressStage::is_last_updated_at_Valid() const{
    return m_last_updated_at_isValid;
}

bool OAIChangeProgressStage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChangeProgressStage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
