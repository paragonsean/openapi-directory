/**
 * Amazon OpenSearch Ingestion
 * Use the Amazon OpenSearch Ingestion API to create and manage ingestion pipelines. OpenSearch Ingestion is a fully managed data collector that delivers real-time log and trace data to OpenSearch Service domains. For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/ingestion.html\">Getting data into your cluster using OpenSearch Ingestion</a>.
 *
 * The version of the OpenAPI document: 2022-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChangeProgressStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChangeProgressStatus::OAIChangeProgressStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChangeProgressStatus::OAIChangeProgressStatus() {
    this->initializeModel();
}

OAIChangeProgressStatus::~OAIChangeProgressStatus() {}

void OAIChangeProgressStatus::initializeModel() {

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_total_number_of_stages_isSet = false;
    m_total_number_of_stages_isValid = false;

    m_change_progress_stages_isSet = false;
    m_change_progress_stages_isValid = false;
}

void OAIChangeProgressStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChangeProgressStatus::fromJsonObject(QJsonObject json) {

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_total_number_of_stages_isValid = ::OpenAPI::fromJsonValue(m_total_number_of_stages, json[QString("TotalNumberOfStages")]);
    m_total_number_of_stages_isSet = !json[QString("TotalNumberOfStages")].isNull() && m_total_number_of_stages_isValid;

    m_change_progress_stages_isValid = ::OpenAPI::fromJsonValue(m_change_progress_stages, json[QString("ChangeProgressStages")]);
    m_change_progress_stages_isSet = !json[QString("ChangeProgressStages")].isNull() && m_change_progress_stages_isValid;
}

QString OAIChangeProgressStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChangeProgressStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_total_number_of_stages_isSet) {
        obj.insert(QString("TotalNumberOfStages"), ::OpenAPI::toJsonValue(m_total_number_of_stages));
    }
    if (m_change_progress_stages.isSet()) {
        obj.insert(QString("ChangeProgressStages"), ::OpenAPI::toJsonValue(m_change_progress_stages));
    }
    return obj;
}

QDateTime OAIChangeProgressStatus::getStartTime() const {
    return m_start_time;
}
void OAIChangeProgressStatus::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIChangeProgressStatus::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIChangeProgressStatus::is_start_time_Valid() const{
    return m_start_time_isValid;
}

OAIChangeProgressStatuses OAIChangeProgressStatus::getStatus() const {
    return m_status;
}
void OAIChangeProgressStatus::setStatus(const OAIChangeProgressStatuses &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIChangeProgressStatus::is_status_Set() const{
    return m_status_isSet;
}

bool OAIChangeProgressStatus::is_status_Valid() const{
    return m_status_isValid;
}

qint32 OAIChangeProgressStatus::getTotalNumberOfStages() const {
    return m_total_number_of_stages;
}
void OAIChangeProgressStatus::setTotalNumberOfStages(const qint32 &total_number_of_stages) {
    m_total_number_of_stages = total_number_of_stages;
    m_total_number_of_stages_isSet = true;
}

bool OAIChangeProgressStatus::is_total_number_of_stages_Set() const{
    return m_total_number_of_stages_isSet;
}

bool OAIChangeProgressStatus::is_total_number_of_stages_Valid() const{
    return m_total_number_of_stages_isValid;
}

QList OAIChangeProgressStatus::getChangeProgressStages() const {
    return m_change_progress_stages;
}
void OAIChangeProgressStatus::setChangeProgressStages(const QList &change_progress_stages) {
    m_change_progress_stages = change_progress_stages;
    m_change_progress_stages_isSet = true;
}

bool OAIChangeProgressStatus::is_change_progress_stages_Set() const{
    return m_change_progress_stages_isSet;
}

bool OAIChangeProgressStatus::is_change_progress_stages_Valid() const{
    return m_change_progress_stages_isValid;
}

bool OAIChangeProgressStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_number_of_stages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_change_progress_stages.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChangeProgressStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
