/**
 * Amazon OpenSearch Ingestion
 * Use the Amazon OpenSearch Ingestion API to create and manage ingestion pipelines. OpenSearch Ingestion is a fully managed data collector that delivers real-time log and trace data to OpenSearch Service domains. For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/ingestion.html\">Getting data into your cluster using OpenSearch Ingestion</a>.
 *
 * The version of the OpenAPI document: 2022-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChangeProgressStageStatuses.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChangeProgressStageStatuses::OAIChangeProgressStageStatuses(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChangeProgressStageStatuses::OAIChangeProgressStageStatuses() {
    this->initializeModel();
}

OAIChangeProgressStageStatuses::~OAIChangeProgressStageStatuses() {}

void OAIChangeProgressStageStatuses::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIChangeProgressStageStatuses::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIChangeProgressStageStatuses::fromJson(QString jsonString) {
    
    if ( jsonString.compare("PENDING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIChangeProgressStageStatuses::PENDING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IN_PROGRESS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIChangeProgressStageStatuses::IN_PROGRESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("COMPLETED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIChangeProgressStageStatuses::COMPLETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIChangeProgressStageStatuses::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIChangeProgressStageStatuses::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIChangeProgressStageStatuses::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIChangeProgressStageStatuses::PENDING:
            val = "PENDING";
            break;
        case eOAIChangeProgressStageStatuses::IN_PROGRESS:
            val = "IN_PROGRESS";
            break;
        case eOAIChangeProgressStageStatuses::COMPLETED:
            val = "COMPLETED";
            break;
        case eOAIChangeProgressStageStatuses::FAILED:
            val = "FAILED";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIChangeProgressStageStatuses::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIChangeProgressStageStatuses::eOAIChangeProgressStageStatuses OAIChangeProgressStageStatuses::getValue() const {
    return m_value;
}

void OAIChangeProgressStageStatuses::setValue(const OAIChangeProgressStageStatuses::eOAIChangeProgressStageStatuses& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIChangeProgressStageStatuses::isSet() const {
    
    return m_value_isSet;
}

bool OAIChangeProgressStageStatuses::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
