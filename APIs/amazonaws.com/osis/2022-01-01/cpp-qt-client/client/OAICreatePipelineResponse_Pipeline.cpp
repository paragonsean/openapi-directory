/**
 * Amazon OpenSearch Ingestion
 * Use the Amazon OpenSearch Ingestion API to create and manage ingestion pipelines. OpenSearch Ingestion is a fully managed data collector that delivers real-time log and trace data to OpenSearch Service domains. For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/ingestion.html\">Getting data into your cluster using OpenSearch Ingestion</a>.
 *
 * The version of the OpenAPI document: 2022-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreatePipelineResponse_Pipeline.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreatePipelineResponse_Pipeline::OAICreatePipelineResponse_Pipeline(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreatePipelineResponse_Pipeline::OAICreatePipelineResponse_Pipeline() {
    this->initializeModel();
}

OAICreatePipelineResponse_Pipeline::~OAICreatePipelineResponse_Pipeline() {}

void OAICreatePipelineResponse_Pipeline::initializeModel() {

    m_pipeline_name_isSet = false;
    m_pipeline_name_isValid = false;

    m_pipeline_arn_isSet = false;
    m_pipeline_arn_isValid = false;

    m_min_units_isSet = false;
    m_min_units_isValid = false;

    m_max_units_isSet = false;
    m_max_units_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_reason_isSet = false;
    m_status_reason_isValid = false;

    m_pipeline_configuration_body_isSet = false;
    m_pipeline_configuration_body_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_last_updated_at_isSet = false;
    m_last_updated_at_isValid = false;

    m_ingest_endpoint_urls_isSet = false;
    m_ingest_endpoint_urls_isValid = false;

    m_log_publishing_options_isSet = false;
    m_log_publishing_options_isValid = false;

    m_vpc_endpoints_isSet = false;
    m_vpc_endpoints_isValid = false;
}

void OAICreatePipelineResponse_Pipeline::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreatePipelineResponse_Pipeline::fromJsonObject(QJsonObject json) {

    m_pipeline_name_isValid = ::OpenAPI::fromJsonValue(m_pipeline_name, json[QString("PipelineName")]);
    m_pipeline_name_isSet = !json[QString("PipelineName")].isNull() && m_pipeline_name_isValid;

    m_pipeline_arn_isValid = ::OpenAPI::fromJsonValue(m_pipeline_arn, json[QString("PipelineArn")]);
    m_pipeline_arn_isSet = !json[QString("PipelineArn")].isNull() && m_pipeline_arn_isValid;

    m_min_units_isValid = ::OpenAPI::fromJsonValue(m_min_units, json[QString("MinUnits")]);
    m_min_units_isSet = !json[QString("MinUnits")].isNull() && m_min_units_isValid;

    m_max_units_isValid = ::OpenAPI::fromJsonValue(m_max_units, json[QString("MaxUnits")]);
    m_max_units_isSet = !json[QString("MaxUnits")].isNull() && m_max_units_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_status_reason_isValid = ::OpenAPI::fromJsonValue(m_status_reason, json[QString("StatusReason")]);
    m_status_reason_isSet = !json[QString("StatusReason")].isNull() && m_status_reason_isValid;

    m_pipeline_configuration_body_isValid = ::OpenAPI::fromJsonValue(m_pipeline_configuration_body, json[QString("PipelineConfigurationBody")]);
    m_pipeline_configuration_body_isSet = !json[QString("PipelineConfigurationBody")].isNull() && m_pipeline_configuration_body_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("CreatedAt")]);
    m_created_at_isSet = !json[QString("CreatedAt")].isNull() && m_created_at_isValid;

    m_last_updated_at_isValid = ::OpenAPI::fromJsonValue(m_last_updated_at, json[QString("LastUpdatedAt")]);
    m_last_updated_at_isSet = !json[QString("LastUpdatedAt")].isNull() && m_last_updated_at_isValid;

    m_ingest_endpoint_urls_isValid = ::OpenAPI::fromJsonValue(m_ingest_endpoint_urls, json[QString("IngestEndpointUrls")]);
    m_ingest_endpoint_urls_isSet = !json[QString("IngestEndpointUrls")].isNull() && m_ingest_endpoint_urls_isValid;

    m_log_publishing_options_isValid = ::OpenAPI::fromJsonValue(m_log_publishing_options, json[QString("LogPublishingOptions")]);
    m_log_publishing_options_isSet = !json[QString("LogPublishingOptions")].isNull() && m_log_publishing_options_isValid;

    m_vpc_endpoints_isValid = ::OpenAPI::fromJsonValue(m_vpc_endpoints, json[QString("VpcEndpoints")]);
    m_vpc_endpoints_isSet = !json[QString("VpcEndpoints")].isNull() && m_vpc_endpoints_isValid;
}

QString OAICreatePipelineResponse_Pipeline::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreatePipelineResponse_Pipeline::asJsonObject() const {
    QJsonObject obj;
    if (m_pipeline_name_isSet) {
        obj.insert(QString("PipelineName"), ::OpenAPI::toJsonValue(m_pipeline_name));
    }
    if (m_pipeline_arn_isSet) {
        obj.insert(QString("PipelineArn"), ::OpenAPI::toJsonValue(m_pipeline_arn));
    }
    if (m_min_units_isSet) {
        obj.insert(QString("MinUnits"), ::OpenAPI::toJsonValue(m_min_units));
    }
    if (m_max_units_isSet) {
        obj.insert(QString("MaxUnits"), ::OpenAPI::toJsonValue(m_max_units));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_reason.isSet()) {
        obj.insert(QString("StatusReason"), ::OpenAPI::toJsonValue(m_status_reason));
    }
    if (m_pipeline_configuration_body_isSet) {
        obj.insert(QString("PipelineConfigurationBody"), ::OpenAPI::toJsonValue(m_pipeline_configuration_body));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("CreatedAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_last_updated_at_isSet) {
        obj.insert(QString("LastUpdatedAt"), ::OpenAPI::toJsonValue(m_last_updated_at));
    }
    if (m_ingest_endpoint_urls.isSet()) {
        obj.insert(QString("IngestEndpointUrls"), ::OpenAPI::toJsonValue(m_ingest_endpoint_urls));
    }
    if (m_log_publishing_options.isSet()) {
        obj.insert(QString("LogPublishingOptions"), ::OpenAPI::toJsonValue(m_log_publishing_options));
    }
    if (m_vpc_endpoints.isSet()) {
        obj.insert(QString("VpcEndpoints"), ::OpenAPI::toJsonValue(m_vpc_endpoints));
    }
    return obj;
}

QString OAICreatePipelineResponse_Pipeline::getPipelineName() const {
    return m_pipeline_name;
}
void OAICreatePipelineResponse_Pipeline::setPipelineName(const QString &pipeline_name) {
    m_pipeline_name = pipeline_name;
    m_pipeline_name_isSet = true;
}

bool OAICreatePipelineResponse_Pipeline::is_pipeline_name_Set() const{
    return m_pipeline_name_isSet;
}

bool OAICreatePipelineResponse_Pipeline::is_pipeline_name_Valid() const{
    return m_pipeline_name_isValid;
}

QString OAICreatePipelineResponse_Pipeline::getPipelineArn() const {
    return m_pipeline_arn;
}
void OAICreatePipelineResponse_Pipeline::setPipelineArn(const QString &pipeline_arn) {
    m_pipeline_arn = pipeline_arn;
    m_pipeline_arn_isSet = true;
}

bool OAICreatePipelineResponse_Pipeline::is_pipeline_arn_Set() const{
    return m_pipeline_arn_isSet;
}

bool OAICreatePipelineResponse_Pipeline::is_pipeline_arn_Valid() const{
    return m_pipeline_arn_isValid;
}

qint32 OAICreatePipelineResponse_Pipeline::getMinUnits() const {
    return m_min_units;
}
void OAICreatePipelineResponse_Pipeline::setMinUnits(const qint32 &min_units) {
    m_min_units = min_units;
    m_min_units_isSet = true;
}

bool OAICreatePipelineResponse_Pipeline::is_min_units_Set() const{
    return m_min_units_isSet;
}

bool OAICreatePipelineResponse_Pipeline::is_min_units_Valid() const{
    return m_min_units_isValid;
}

qint32 OAICreatePipelineResponse_Pipeline::getMaxUnits() const {
    return m_max_units;
}
void OAICreatePipelineResponse_Pipeline::setMaxUnits(const qint32 &max_units) {
    m_max_units = max_units;
    m_max_units_isSet = true;
}

bool OAICreatePipelineResponse_Pipeline::is_max_units_Set() const{
    return m_max_units_isSet;
}

bool OAICreatePipelineResponse_Pipeline::is_max_units_Valid() const{
    return m_max_units_isValid;
}

OAIPipelineStatus OAICreatePipelineResponse_Pipeline::getStatus() const {
    return m_status;
}
void OAICreatePipelineResponse_Pipeline::setStatus(const OAIPipelineStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICreatePipelineResponse_Pipeline::is_status_Set() const{
    return m_status_isSet;
}

bool OAICreatePipelineResponse_Pipeline::is_status_Valid() const{
    return m_status_isValid;
}

OAIPipeline_StatusReason OAICreatePipelineResponse_Pipeline::getStatusReason() const {
    return m_status_reason;
}
void OAICreatePipelineResponse_Pipeline::setStatusReason(const OAIPipeline_StatusReason &status_reason) {
    m_status_reason = status_reason;
    m_status_reason_isSet = true;
}

bool OAICreatePipelineResponse_Pipeline::is_status_reason_Set() const{
    return m_status_reason_isSet;
}

bool OAICreatePipelineResponse_Pipeline::is_status_reason_Valid() const{
    return m_status_reason_isValid;
}

QString OAICreatePipelineResponse_Pipeline::getPipelineConfigurationBody() const {
    return m_pipeline_configuration_body;
}
void OAICreatePipelineResponse_Pipeline::setPipelineConfigurationBody(const QString &pipeline_configuration_body) {
    m_pipeline_configuration_body = pipeline_configuration_body;
    m_pipeline_configuration_body_isSet = true;
}

bool OAICreatePipelineResponse_Pipeline::is_pipeline_configuration_body_Set() const{
    return m_pipeline_configuration_body_isSet;
}

bool OAICreatePipelineResponse_Pipeline::is_pipeline_configuration_body_Valid() const{
    return m_pipeline_configuration_body_isValid;
}

QDateTime OAICreatePipelineResponse_Pipeline::getCreatedAt() const {
    return m_created_at;
}
void OAICreatePipelineResponse_Pipeline::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAICreatePipelineResponse_Pipeline::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAICreatePipelineResponse_Pipeline::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAICreatePipelineResponse_Pipeline::getLastUpdatedAt() const {
    return m_last_updated_at;
}
void OAICreatePipelineResponse_Pipeline::setLastUpdatedAt(const QDateTime &last_updated_at) {
    m_last_updated_at = last_updated_at;
    m_last_updated_at_isSet = true;
}

bool OAICreatePipelineResponse_Pipeline::is_last_updated_at_Set() const{
    return m_last_updated_at_isSet;
}

bool OAICreatePipelineResponse_Pipeline::is_last_updated_at_Valid() const{
    return m_last_updated_at_isValid;
}

QList OAICreatePipelineResponse_Pipeline::getIngestEndpointUrls() const {
    return m_ingest_endpoint_urls;
}
void OAICreatePipelineResponse_Pipeline::setIngestEndpointUrls(const QList &ingest_endpoint_urls) {
    m_ingest_endpoint_urls = ingest_endpoint_urls;
    m_ingest_endpoint_urls_isSet = true;
}

bool OAICreatePipelineResponse_Pipeline::is_ingest_endpoint_urls_Set() const{
    return m_ingest_endpoint_urls_isSet;
}

bool OAICreatePipelineResponse_Pipeline::is_ingest_endpoint_urls_Valid() const{
    return m_ingest_endpoint_urls_isValid;
}

OAIPipeline_LogPublishingOptions OAICreatePipelineResponse_Pipeline::getLogPublishingOptions() const {
    return m_log_publishing_options;
}
void OAICreatePipelineResponse_Pipeline::setLogPublishingOptions(const OAIPipeline_LogPublishingOptions &log_publishing_options) {
    m_log_publishing_options = log_publishing_options;
    m_log_publishing_options_isSet = true;
}

bool OAICreatePipelineResponse_Pipeline::is_log_publishing_options_Set() const{
    return m_log_publishing_options_isSet;
}

bool OAICreatePipelineResponse_Pipeline::is_log_publishing_options_Valid() const{
    return m_log_publishing_options_isValid;
}

QList OAICreatePipelineResponse_Pipeline::getVpcEndpoints() const {
    return m_vpc_endpoints;
}
void OAICreatePipelineResponse_Pipeline::setVpcEndpoints(const QList &vpc_endpoints) {
    m_vpc_endpoints = vpc_endpoints;
    m_vpc_endpoints_isSet = true;
}

bool OAICreatePipelineResponse_Pipeline::is_vpc_endpoints_Set() const{
    return m_vpc_endpoints_isSet;
}

bool OAICreatePipelineResponse_Pipeline::is_vpc_endpoints_Valid() const{
    return m_vpc_endpoints_isValid;
}

bool OAICreatePipelineResponse_Pipeline::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pipeline_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pipeline_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_units_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_units_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_reason.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pipeline_configuration_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ingest_endpoint_urls.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_publishing_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_endpoints.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreatePipelineResponse_Pipeline::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
