/*
 * Amazon OpenSearch Ingestion
 * Use the Amazon OpenSearch Ingestion API to create and manage ingestion pipelines. OpenSearch Ingestion is a fully managed data collector that delivers real-time log and trace data to OpenSearch Service domains. For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/ingestion.html\">Getting data into your cluster using OpenSearch Ingestion</a>.
 *
 * The version of the OpenAPI document: 2022-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CreatePipelineRequestLogPublishingOptions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdatePipelineRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:12.484894-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdatePipelineRequest {
  public static final String SERIALIZED_NAME_MIN_UNITS = "MinUnits";
  @SerializedName(SERIALIZED_NAME_MIN_UNITS)
  private Integer minUnits;

  public static final String SERIALIZED_NAME_MAX_UNITS = "MaxUnits";
  @SerializedName(SERIALIZED_NAME_MAX_UNITS)
  private Integer maxUnits;

  public static final String SERIALIZED_NAME_PIPELINE_CONFIGURATION_BODY = "PipelineConfigurationBody";
  @SerializedName(SERIALIZED_NAME_PIPELINE_CONFIGURATION_BODY)
  private String pipelineConfigurationBody;

  public static final String SERIALIZED_NAME_LOG_PUBLISHING_OPTIONS = "LogPublishingOptions";
  @SerializedName(SERIALIZED_NAME_LOG_PUBLISHING_OPTIONS)
  private CreatePipelineRequestLogPublishingOptions logPublishingOptions;

  public UpdatePipelineRequest() {
  }

  public UpdatePipelineRequest minUnits(Integer minUnits) {
    this.minUnits = minUnits;
    return this;
  }

  /**
   * The minimum pipeline capacity, in Ingestion Compute Units (ICUs).
   * minimum: 1
   * maximum: 96
   * @return minUnits
   */
  @javax.annotation.Nullable
  public Integer getMinUnits() {
    return minUnits;
  }

  public void setMinUnits(Integer minUnits) {
    this.minUnits = minUnits;
  }


  public UpdatePipelineRequest maxUnits(Integer maxUnits) {
    this.maxUnits = maxUnits;
    return this;
  }

  /**
   * The maximum pipeline capacity, in Ingestion Compute Units (ICUs)
   * minimum: 1
   * maximum: 96
   * @return maxUnits
   */
  @javax.annotation.Nullable
  public Integer getMaxUnits() {
    return maxUnits;
  }

  public void setMaxUnits(Integer maxUnits) {
    this.maxUnits = maxUnits;
  }


  public UpdatePipelineRequest pipelineConfigurationBody(String pipelineConfigurationBody) {
    this.pipelineConfigurationBody = pipelineConfigurationBody;
    return this;
  }

  /**
   * The pipeline configuration in YAML format. The command accepts the pipeline configuration as a string or within a .yaml file. If you provide the configuration as a string, each new line must be escaped with &lt;code&gt;\\n&lt;/code&gt;.
   * @return pipelineConfigurationBody
   */
  @javax.annotation.Nullable
  public String getPipelineConfigurationBody() {
    return pipelineConfigurationBody;
  }

  public void setPipelineConfigurationBody(String pipelineConfigurationBody) {
    this.pipelineConfigurationBody = pipelineConfigurationBody;
  }


  public UpdatePipelineRequest logPublishingOptions(CreatePipelineRequestLogPublishingOptions logPublishingOptions) {
    this.logPublishingOptions = logPublishingOptions;
    return this;
  }

  /**
   * Get logPublishingOptions
   * @return logPublishingOptions
   */
  @javax.annotation.Nullable
  public CreatePipelineRequestLogPublishingOptions getLogPublishingOptions() {
    return logPublishingOptions;
  }

  public void setLogPublishingOptions(CreatePipelineRequestLogPublishingOptions logPublishingOptions) {
    this.logPublishingOptions = logPublishingOptions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdatePipelineRequest updatePipelineRequest = (UpdatePipelineRequest) o;
    return Objects.equals(this.minUnits, updatePipelineRequest.minUnits) &&
        Objects.equals(this.maxUnits, updatePipelineRequest.maxUnits) &&
        Objects.equals(this.pipelineConfigurationBody, updatePipelineRequest.pipelineConfigurationBody) &&
        Objects.equals(this.logPublishingOptions, updatePipelineRequest.logPublishingOptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(minUnits, maxUnits, pipelineConfigurationBody, logPublishingOptions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdatePipelineRequest {\n");
    sb.append("    minUnits: ").append(toIndentedString(minUnits)).append("\n");
    sb.append("    maxUnits: ").append(toIndentedString(maxUnits)).append("\n");
    sb.append("    pipelineConfigurationBody: ").append(toIndentedString(pipelineConfigurationBody)).append("\n");
    sb.append("    logPublishingOptions: ").append(toIndentedString(logPublishingOptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("MinUnits");
    openapiFields.add("MaxUnits");
    openapiFields.add("PipelineConfigurationBody");
    openapiFields.add("LogPublishingOptions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdatePipelineRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdatePipelineRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdatePipelineRequest is not found in the empty JSON string", UpdatePipelineRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdatePipelineRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdatePipelineRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("PipelineConfigurationBody") != null && !jsonObj.get("PipelineConfigurationBody").isJsonNull()) && !jsonObj.get("PipelineConfigurationBody").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PipelineConfigurationBody` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PipelineConfigurationBody").toString()));
      }
      // validate the optional field `LogPublishingOptions`
      if (jsonObj.get("LogPublishingOptions") != null && !jsonObj.get("LogPublishingOptions").isJsonNull()) {
        CreatePipelineRequestLogPublishingOptions.validateJsonElement(jsonObj.get("LogPublishingOptions"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdatePipelineRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdatePipelineRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdatePipelineRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdatePipelineRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdatePipelineRequest>() {
           @Override
           public void write(JsonWriter out, UpdatePipelineRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdatePipelineRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdatePipelineRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdatePipelineRequest
   * @throws IOException if the JSON string is invalid with respect to UpdatePipelineRequest
   */
  public static UpdatePipelineRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdatePipelineRequest.class);
  }

  /**
   * Convert an instance of UpdatePipelineRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

