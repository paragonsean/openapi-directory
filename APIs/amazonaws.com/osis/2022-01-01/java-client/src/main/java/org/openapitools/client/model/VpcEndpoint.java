/*
 * Amazon OpenSearch Ingestion
 * Use the Amazon OpenSearch Ingestion API to create and manage ingestion pipelines. OpenSearch Ingestion is a fully managed data collector that delivers real-time log and trace data to OpenSearch Service domains. For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/ingestion.html\">Getting data into your cluster using OpenSearch Ingestion</a>.
 *
 * The version of the OpenAPI document: 2022-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.VpcEndpointVpcOptions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An OpenSearch Ingestion-managed VPC endpoint that will access one or more pipelines.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:12.484894-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VpcEndpoint {
  public static final String SERIALIZED_NAME_VPC_ENDPOINT_ID = "VpcEndpointId";
  @SerializedName(SERIALIZED_NAME_VPC_ENDPOINT_ID)
  private String vpcEndpointId;

  public static final String SERIALIZED_NAME_VPC_ID = "VpcId";
  @SerializedName(SERIALIZED_NAME_VPC_ID)
  private String vpcId;

  public static final String SERIALIZED_NAME_VPC_OPTIONS = "VpcOptions";
  @SerializedName(SERIALIZED_NAME_VPC_OPTIONS)
  private VpcEndpointVpcOptions vpcOptions;

  public VpcEndpoint() {
  }

  public VpcEndpoint vpcEndpointId(String vpcEndpointId) {
    this.vpcEndpointId = vpcEndpointId;
    return this;
  }

  /**
   * Get vpcEndpointId
   * @return vpcEndpointId
   */
  @javax.annotation.Nullable
  public String getVpcEndpointId() {
    return vpcEndpointId;
  }

  public void setVpcEndpointId(String vpcEndpointId) {
    this.vpcEndpointId = vpcEndpointId;
  }


  public VpcEndpoint vpcId(String vpcId) {
    this.vpcId = vpcId;
    return this;
  }

  /**
   * Get vpcId
   * @return vpcId
   */
  @javax.annotation.Nullable
  public String getVpcId() {
    return vpcId;
  }

  public void setVpcId(String vpcId) {
    this.vpcId = vpcId;
  }


  public VpcEndpoint vpcOptions(VpcEndpointVpcOptions vpcOptions) {
    this.vpcOptions = vpcOptions;
    return this;
  }

  /**
   * Get vpcOptions
   * @return vpcOptions
   */
  @javax.annotation.Nullable
  public VpcEndpointVpcOptions getVpcOptions() {
    return vpcOptions;
  }

  public void setVpcOptions(VpcEndpointVpcOptions vpcOptions) {
    this.vpcOptions = vpcOptions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VpcEndpoint vpcEndpoint = (VpcEndpoint) o;
    return Objects.equals(this.vpcEndpointId, vpcEndpoint.vpcEndpointId) &&
        Objects.equals(this.vpcId, vpcEndpoint.vpcId) &&
        Objects.equals(this.vpcOptions, vpcEndpoint.vpcOptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(vpcEndpointId, vpcId, vpcOptions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VpcEndpoint {\n");
    sb.append("    vpcEndpointId: ").append(toIndentedString(vpcEndpointId)).append("\n");
    sb.append("    vpcId: ").append(toIndentedString(vpcId)).append("\n");
    sb.append("    vpcOptions: ").append(toIndentedString(vpcOptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("VpcEndpointId");
    openapiFields.add("VpcId");
    openapiFields.add("VpcOptions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VpcEndpoint
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VpcEndpoint.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VpcEndpoint is not found in the empty JSON string", VpcEndpoint.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VpcEndpoint.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VpcEndpoint` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `VpcEndpointId`
      if (jsonObj.get("VpcEndpointId") != null && !jsonObj.get("VpcEndpointId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("VpcEndpointId"));
      }
      // validate the optional field `VpcId`
      if (jsonObj.get("VpcId") != null && !jsonObj.get("VpcId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("VpcId"));
      }
      // validate the optional field `VpcOptions`
      if (jsonObj.get("VpcOptions") != null && !jsonObj.get("VpcOptions").isJsonNull()) {
        VpcEndpointVpcOptions.validateJsonElement(jsonObj.get("VpcOptions"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VpcEndpoint.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VpcEndpoint' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VpcEndpoint> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VpcEndpoint.class));

       return (TypeAdapter<T>) new TypeAdapter<VpcEndpoint>() {
           @Override
           public void write(JsonWriter out, VpcEndpoint value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VpcEndpoint read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VpcEndpoint given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VpcEndpoint
   * @throws IOException if the JSON string is invalid with respect to VpcEndpoint
   */
  public static VpcEndpoint fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VpcEndpoint.class);
  }

  /**
   * Convert an instance of VpcEndpoint to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

