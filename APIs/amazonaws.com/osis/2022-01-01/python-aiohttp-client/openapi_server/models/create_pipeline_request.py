# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_pipeline_request_log_publishing_options import CreatePipelineRequestLogPublishingOptions
from openapi_server.models.create_pipeline_request_vpc_options import CreatePipelineRequestVpcOptions
from openapi_server.models.tag import Tag
import re
from openapi_server import util


class CreatePipelineRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pipeline_name: str=None, min_units: int=None, max_units: int=None, pipeline_configuration_body: str=None, log_publishing_options: CreatePipelineRequestLogPublishingOptions=None, vpc_options: CreatePipelineRequestVpcOptions=None, tags: List[Tag]=None):
        """CreatePipelineRequest - a model defined in OpenAPI

        :param pipeline_name: The pipeline_name of this CreatePipelineRequest.
        :param min_units: The min_units of this CreatePipelineRequest.
        :param max_units: The max_units of this CreatePipelineRequest.
        :param pipeline_configuration_body: The pipeline_configuration_body of this CreatePipelineRequest.
        :param log_publishing_options: The log_publishing_options of this CreatePipelineRequest.
        :param vpc_options: The vpc_options of this CreatePipelineRequest.
        :param tags: The tags of this CreatePipelineRequest.
        """
        self.openapi_types = {
            'pipeline_name': str,
            'min_units': int,
            'max_units': int,
            'pipeline_configuration_body': str,
            'log_publishing_options': CreatePipelineRequestLogPublishingOptions,
            'vpc_options': CreatePipelineRequestVpcOptions,
            'tags': List[Tag]
        }

        self.attribute_map = {
            'pipeline_name': 'PipelineName',
            'min_units': 'MinUnits',
            'max_units': 'MaxUnits',
            'pipeline_configuration_body': 'PipelineConfigurationBody',
            'log_publishing_options': 'LogPublishingOptions',
            'vpc_options': 'VpcOptions',
            'tags': 'Tags'
        }

        self._pipeline_name = pipeline_name
        self._min_units = min_units
        self._max_units = max_units
        self._pipeline_configuration_body = pipeline_configuration_body
        self._log_publishing_options = log_publishing_options
        self._vpc_options = vpc_options
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreatePipelineRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreatePipeline_request of this CreatePipelineRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pipeline_name(self):
        """Gets the pipeline_name of this CreatePipelineRequest.

        The name of the OpenSearch Ingestion pipeline to create. Pipeline names are unique across the pipelines owned by an account within an Amazon Web Services Region.

        :return: The pipeline_name of this CreatePipelineRequest.
        :rtype: str
        """
        return self._pipeline_name

    @pipeline_name.setter
    def pipeline_name(self, pipeline_name):
        """Sets the pipeline_name of this CreatePipelineRequest.

        The name of the OpenSearch Ingestion pipeline to create. Pipeline names are unique across the pipelines owned by an account within an Amazon Web Services Region.

        :param pipeline_name: The pipeline_name of this CreatePipelineRequest.
        :type pipeline_name: str
        """
        if pipeline_name is None:
            raise ValueError("Invalid value for `pipeline_name`, must not be `None`")
        if pipeline_name is not None and len(pipeline_name) > 28:
            raise ValueError("Invalid value for `pipeline_name`, length must be less than or equal to `28`")
        if pipeline_name is not None and len(pipeline_name) < 3:
            raise ValueError("Invalid value for `pipeline_name`, length must be greater than or equal to `3`")
        if pipeline_name is not None and not re.search(r'[a-z][a-z0-9\-]+', pipeline_name):
            raise ValueError("Invalid value for `pipeline_name`, must be a follow pattern or equal to `/[a-z][a-z0-9\-]+/`")

        self._pipeline_name = pipeline_name

    @property
    def min_units(self):
        """Gets the min_units of this CreatePipelineRequest.

        The minimum pipeline capacity, in Ingestion Compute Units (ICUs).

        :return: The min_units of this CreatePipelineRequest.
        :rtype: int
        """
        return self._min_units

    @min_units.setter
    def min_units(self, min_units):
        """Sets the min_units of this CreatePipelineRequest.

        The minimum pipeline capacity, in Ingestion Compute Units (ICUs).

        :param min_units: The min_units of this CreatePipelineRequest.
        :type min_units: int
        """
        if min_units is None:
            raise ValueError("Invalid value for `min_units`, must not be `None`")
        if min_units is not None and min_units > 96:
            raise ValueError("Invalid value for `min_units`, must be a value less than or equal to `96`")
        if min_units is not None and min_units < 1:
            raise ValueError("Invalid value for `min_units`, must be a value greater than or equal to `1`")

        self._min_units = min_units

    @property
    def max_units(self):
        """Gets the max_units of this CreatePipelineRequest.

        The maximum pipeline capacity, in Ingestion Compute Units (ICUs).

        :return: The max_units of this CreatePipelineRequest.
        :rtype: int
        """
        return self._max_units

    @max_units.setter
    def max_units(self, max_units):
        """Sets the max_units of this CreatePipelineRequest.

        The maximum pipeline capacity, in Ingestion Compute Units (ICUs).

        :param max_units: The max_units of this CreatePipelineRequest.
        :type max_units: int
        """
        if max_units is None:
            raise ValueError("Invalid value for `max_units`, must not be `None`")
        if max_units is not None and max_units > 96:
            raise ValueError("Invalid value for `max_units`, must be a value less than or equal to `96`")
        if max_units is not None and max_units < 1:
            raise ValueError("Invalid value for `max_units`, must be a value greater than or equal to `1`")

        self._max_units = max_units

    @property
    def pipeline_configuration_body(self):
        """Gets the pipeline_configuration_body of this CreatePipelineRequest.

        The pipeline configuration in YAML format. The command accepts the pipeline configuration as a string or within a .yaml file. If you provide the configuration as a string, each new line must be escaped with <code>\\n</code>.

        :return: The pipeline_configuration_body of this CreatePipelineRequest.
        :rtype: str
        """
        return self._pipeline_configuration_body

    @pipeline_configuration_body.setter
    def pipeline_configuration_body(self, pipeline_configuration_body):
        """Sets the pipeline_configuration_body of this CreatePipelineRequest.

        The pipeline configuration in YAML format. The command accepts the pipeline configuration as a string or within a .yaml file. If you provide the configuration as a string, each new line must be escaped with <code>\\n</code>.

        :param pipeline_configuration_body: The pipeline_configuration_body of this CreatePipelineRequest.
        :type pipeline_configuration_body: str
        """
        if pipeline_configuration_body is None:
            raise ValueError("Invalid value for `pipeline_configuration_body`, must not be `None`")
        if pipeline_configuration_body is not None and len(pipeline_configuration_body) > 24000:
            raise ValueError("Invalid value for `pipeline_configuration_body`, length must be less than or equal to `24000`")
        if pipeline_configuration_body is not None and len(pipeline_configuration_body) < 1:
            raise ValueError("Invalid value for `pipeline_configuration_body`, length must be greater than or equal to `1`")

        self._pipeline_configuration_body = pipeline_configuration_body

    @property
    def log_publishing_options(self):
        """Gets the log_publishing_options of this CreatePipelineRequest.


        :return: The log_publishing_options of this CreatePipelineRequest.
        :rtype: CreatePipelineRequestLogPublishingOptions
        """
        return self._log_publishing_options

    @log_publishing_options.setter
    def log_publishing_options(self, log_publishing_options):
        """Sets the log_publishing_options of this CreatePipelineRequest.


        :param log_publishing_options: The log_publishing_options of this CreatePipelineRequest.
        :type log_publishing_options: CreatePipelineRequestLogPublishingOptions
        """

        self._log_publishing_options = log_publishing_options

    @property
    def vpc_options(self):
        """Gets the vpc_options of this CreatePipelineRequest.


        :return: The vpc_options of this CreatePipelineRequest.
        :rtype: CreatePipelineRequestVpcOptions
        """
        return self._vpc_options

    @vpc_options.setter
    def vpc_options(self, vpc_options):
        """Sets the vpc_options of this CreatePipelineRequest.


        :param vpc_options: The vpc_options of this CreatePipelineRequest.
        :type vpc_options: CreatePipelineRequestVpcOptions
        """

        self._vpc_options = vpc_options

    @property
    def tags(self):
        """Gets the tags of this CreatePipelineRequest.

        List of tags to add to the pipeline upon creation.

        :return: The tags of this CreatePipelineRequest.
        :rtype: List[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreatePipelineRequest.

        List of tags to add to the pipeline upon creation.

        :param tags: The tags of this CreatePipelineRequest.
        :type tags: List[Tag]
        """

        self._tags = tags
