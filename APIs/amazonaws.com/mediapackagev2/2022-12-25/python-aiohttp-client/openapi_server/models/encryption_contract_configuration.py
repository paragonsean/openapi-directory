# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.preset_speke20_audio import PresetSpeke20Audio
from openapi_server.models.preset_speke20_video import PresetSpeke20Video
from openapi_server import util


class EncryptionContractConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, preset_speke20_audio: PresetSpeke20Audio=None, preset_speke20_video: PresetSpeke20Video=None):
        """EncryptionContractConfiguration - a model defined in OpenAPI

        :param preset_speke20_audio: The preset_speke20_audio of this EncryptionContractConfiguration.
        :param preset_speke20_video: The preset_speke20_video of this EncryptionContractConfiguration.
        """
        self.openapi_types = {
            'preset_speke20_audio': PresetSpeke20Audio,
            'preset_speke20_video': PresetSpeke20Video
        }

        self.attribute_map = {
            'preset_speke20_audio': 'PresetSpeke20Audio',
            'preset_speke20_video': 'PresetSpeke20Video'
        }

        self._preset_speke20_audio = preset_speke20_audio
        self._preset_speke20_video = preset_speke20_video

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EncryptionContractConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EncryptionContractConfiguration of this EncryptionContractConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def preset_speke20_audio(self):
        """Gets the preset_speke20_audio of this EncryptionContractConfiguration.


        :return: The preset_speke20_audio of this EncryptionContractConfiguration.
        :rtype: PresetSpeke20Audio
        """
        return self._preset_speke20_audio

    @preset_speke20_audio.setter
    def preset_speke20_audio(self, preset_speke20_audio):
        """Sets the preset_speke20_audio of this EncryptionContractConfiguration.


        :param preset_speke20_audio: The preset_speke20_audio of this EncryptionContractConfiguration.
        :type preset_speke20_audio: PresetSpeke20Audio
        """
        if preset_speke20_audio is None:
            raise ValueError("Invalid value for `preset_speke20_audio`, must not be `None`")

        self._preset_speke20_audio = preset_speke20_audio

    @property
    def preset_speke20_video(self):
        """Gets the preset_speke20_video of this EncryptionContractConfiguration.


        :return: The preset_speke20_video of this EncryptionContractConfiguration.
        :rtype: PresetSpeke20Video
        """
        return self._preset_speke20_video

    @preset_speke20_video.setter
    def preset_speke20_video(self, preset_speke20_video):
        """Sets the preset_speke20_video of this EncryptionContractConfiguration.


        :param preset_speke20_video: The preset_speke20_video of this EncryptionContractConfiguration.
        :type preset_speke20_video: PresetSpeke20Video
        """
        if preset_speke20_video is None:
            raise ValueError("Invalid value for `preset_speke20_video`, must not be `None`")

        self._preset_speke20_video = preset_speke20_video
