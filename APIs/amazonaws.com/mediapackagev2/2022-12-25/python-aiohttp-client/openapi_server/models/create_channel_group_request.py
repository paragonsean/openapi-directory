# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CreateChannelGroupRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel_group_name: str=None, description: str=None, tags: Dict[str, str]=None):
        """CreateChannelGroupRequest - a model defined in OpenAPI

        :param channel_group_name: The channel_group_name of this CreateChannelGroupRequest.
        :param description: The description of this CreateChannelGroupRequest.
        :param tags: The tags of this CreateChannelGroupRequest.
        """
        self.openapi_types = {
            'channel_group_name': str,
            'description': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'channel_group_name': 'ChannelGroupName',
            'description': 'Description',
            'tags': 'tags'
        }

        self._channel_group_name = channel_group_name
        self._description = description
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateChannelGroupRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateChannelGroup_request of this CreateChannelGroupRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel_group_name(self):
        """Gets the channel_group_name of this CreateChannelGroupRequest.

        The name that describes the channel group. The name is the primary identifier for the channel group, and must be unique for your account in the AWS Region. You can't use spaces in the name. You can't change the name after you create the channel group.

        :return: The channel_group_name of this CreateChannelGroupRequest.
        :rtype: str
        """
        return self._channel_group_name

    @channel_group_name.setter
    def channel_group_name(self, channel_group_name):
        """Sets the channel_group_name of this CreateChannelGroupRequest.

        The name that describes the channel group. The name is the primary identifier for the channel group, and must be unique for your account in the AWS Region. You can't use spaces in the name. You can't change the name after you create the channel group.

        :param channel_group_name: The channel_group_name of this CreateChannelGroupRequest.
        :type channel_group_name: str
        """
        if channel_group_name is None:
            raise ValueError("Invalid value for `channel_group_name`, must not be `None`")
        if channel_group_name is not None and len(channel_group_name) > 256:
            raise ValueError("Invalid value for `channel_group_name`, length must be less than or equal to `256`")
        if channel_group_name is not None and len(channel_group_name) < 1:
            raise ValueError("Invalid value for `channel_group_name`, length must be greater than or equal to `1`")
        if channel_group_name is not None and not re.search(r'[a-zA-Z0-9_-]+', channel_group_name):
            raise ValueError("Invalid value for `channel_group_name`, must be a follow pattern or equal to `/[a-zA-Z0-9_-]+/`")

        self._channel_group_name = channel_group_name

    @property
    def description(self):
        """Gets the description of this CreateChannelGroupRequest.

        Enter any descriptive text that helps you to identify the channel group.

        :return: The description of this CreateChannelGroupRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateChannelGroupRequest.

        Enter any descriptive text that helps you to identify the channel group.

        :param description: The description of this CreateChannelGroupRequest.
        :type description: str
        """
        if description is not None and len(description) > 1024:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1024`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")

        self._description = description

    @property
    def tags(self):
        """Gets the tags of this CreateChannelGroupRequest.

        <p>A comma-separated list of tag key:value pairs that you define. For example:</p> <p> <code>\"Key1\": \"Value1\",</code> </p> <p> <code>\"Key2\": \"Value2\"</code> </p>

        :return: The tags of this CreateChannelGroupRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateChannelGroupRequest.

        <p>A comma-separated list of tag key:value pairs that you define. For example:</p> <p> <code>\"Key1\": \"Value1\",</code> </p> <p> <code>\"Key2\": \"Value2\"</code> </p>

        :param tags: The tags of this CreateChannelGroupRequest.
        :type tags: Dict[str, str]
        """

        self._tags = tags
