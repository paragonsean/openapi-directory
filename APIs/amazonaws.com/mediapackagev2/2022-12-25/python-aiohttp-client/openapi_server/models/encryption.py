# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.encryption_encryption_method import EncryptionEncryptionMethod
from openapi_server.models.encryption_speke_key_provider import EncryptionSpekeKeyProvider
from openapi_server import util


class Encryption(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, constant_initialization_vector: str=None, encryption_method: EncryptionEncryptionMethod=None, key_rotation_interval_seconds: int=None, speke_key_provider: EncryptionSpekeKeyProvider=None):
        """Encryption - a model defined in OpenAPI

        :param constant_initialization_vector: The constant_initialization_vector of this Encryption.
        :param encryption_method: The encryption_method of this Encryption.
        :param key_rotation_interval_seconds: The key_rotation_interval_seconds of this Encryption.
        :param speke_key_provider: The speke_key_provider of this Encryption.
        """
        self.openapi_types = {
            'constant_initialization_vector': str,
            'encryption_method': EncryptionEncryptionMethod,
            'key_rotation_interval_seconds': int,
            'speke_key_provider': EncryptionSpekeKeyProvider
        }

        self.attribute_map = {
            'constant_initialization_vector': 'ConstantInitializationVector',
            'encryption_method': 'EncryptionMethod',
            'key_rotation_interval_seconds': 'KeyRotationIntervalSeconds',
            'speke_key_provider': 'SpekeKeyProvider'
        }

        self._constant_initialization_vector = constant_initialization_vector
        self._encryption_method = encryption_method
        self._key_rotation_interval_seconds = key_rotation_interval_seconds
        self._speke_key_provider = speke_key_provider

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Encryption':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Encryption of this Encryption.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def constant_initialization_vector(self):
        """Gets the constant_initialization_vector of this Encryption.


        :return: The constant_initialization_vector of this Encryption.
        :rtype: str
        """
        return self._constant_initialization_vector

    @constant_initialization_vector.setter
    def constant_initialization_vector(self, constant_initialization_vector):
        """Sets the constant_initialization_vector of this Encryption.


        :param constant_initialization_vector: The constant_initialization_vector of this Encryption.
        :type constant_initialization_vector: str
        """

        self._constant_initialization_vector = constant_initialization_vector

    @property
    def encryption_method(self):
        """Gets the encryption_method of this Encryption.


        :return: The encryption_method of this Encryption.
        :rtype: EncryptionEncryptionMethod
        """
        return self._encryption_method

    @encryption_method.setter
    def encryption_method(self, encryption_method):
        """Sets the encryption_method of this Encryption.


        :param encryption_method: The encryption_method of this Encryption.
        :type encryption_method: EncryptionEncryptionMethod
        """
        if encryption_method is None:
            raise ValueError("Invalid value for `encryption_method`, must not be `None`")

        self._encryption_method = encryption_method

    @property
    def key_rotation_interval_seconds(self):
        """Gets the key_rotation_interval_seconds of this Encryption.


        :return: The key_rotation_interval_seconds of this Encryption.
        :rtype: int
        """
        return self._key_rotation_interval_seconds

    @key_rotation_interval_seconds.setter
    def key_rotation_interval_seconds(self, key_rotation_interval_seconds):
        """Sets the key_rotation_interval_seconds of this Encryption.


        :param key_rotation_interval_seconds: The key_rotation_interval_seconds of this Encryption.
        :type key_rotation_interval_seconds: int
        """

        self._key_rotation_interval_seconds = key_rotation_interval_seconds

    @property
    def speke_key_provider(self):
        """Gets the speke_key_provider of this Encryption.


        :return: The speke_key_provider of this Encryption.
        :rtype: EncryptionSpekeKeyProvider
        """
        return self._speke_key_provider

    @speke_key_provider.setter
    def speke_key_provider(self, speke_key_provider):
        """Sets the speke_key_provider of this Encryption.


        :param speke_key_provider: The speke_key_provider of this Encryption.
        :type speke_key_provider: EncryptionSpekeKeyProvider
        """
        if speke_key_provider is None:
            raise ValueError("Invalid value for `speke_key_provider`, must not be `None`")

        self._speke_key_provider = speke_key_provider
