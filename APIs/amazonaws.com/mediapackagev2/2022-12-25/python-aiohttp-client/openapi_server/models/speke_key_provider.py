# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.speke_key_provider_encryption_contract_configuration import SpekeKeyProviderEncryptionContractConfiguration
from openapi_server import util


class SpekeKeyProvider(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, encryption_contract_configuration: SpekeKeyProviderEncryptionContractConfiguration=None, resource_id: str=None, drm_systems: List=None, role_arn: str=None, url: str=None):
        """SpekeKeyProvider - a model defined in OpenAPI

        :param encryption_contract_configuration: The encryption_contract_configuration of this SpekeKeyProvider.
        :param resource_id: The resource_id of this SpekeKeyProvider.
        :param drm_systems: The drm_systems of this SpekeKeyProvider.
        :param role_arn: The role_arn of this SpekeKeyProvider.
        :param url: The url of this SpekeKeyProvider.
        """
        self.openapi_types = {
            'encryption_contract_configuration': SpekeKeyProviderEncryptionContractConfiguration,
            'resource_id': str,
            'drm_systems': List,
            'role_arn': str,
            'url': str
        }

        self.attribute_map = {
            'encryption_contract_configuration': 'EncryptionContractConfiguration',
            'resource_id': 'ResourceId',
            'drm_systems': 'DrmSystems',
            'role_arn': 'RoleArn',
            'url': 'Url'
        }

        self._encryption_contract_configuration = encryption_contract_configuration
        self._resource_id = resource_id
        self._drm_systems = drm_systems
        self._role_arn = role_arn
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SpekeKeyProvider':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SpekeKeyProvider of this SpekeKeyProvider.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def encryption_contract_configuration(self):
        """Gets the encryption_contract_configuration of this SpekeKeyProvider.


        :return: The encryption_contract_configuration of this SpekeKeyProvider.
        :rtype: SpekeKeyProviderEncryptionContractConfiguration
        """
        return self._encryption_contract_configuration

    @encryption_contract_configuration.setter
    def encryption_contract_configuration(self, encryption_contract_configuration):
        """Sets the encryption_contract_configuration of this SpekeKeyProvider.


        :param encryption_contract_configuration: The encryption_contract_configuration of this SpekeKeyProvider.
        :type encryption_contract_configuration: SpekeKeyProviderEncryptionContractConfiguration
        """
        if encryption_contract_configuration is None:
            raise ValueError("Invalid value for `encryption_contract_configuration`, must not be `None`")

        self._encryption_contract_configuration = encryption_contract_configuration

    @property
    def resource_id(self):
        """Gets the resource_id of this SpekeKeyProvider.


        :return: The resource_id of this SpekeKeyProvider.
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this SpekeKeyProvider.


        :param resource_id: The resource_id of this SpekeKeyProvider.
        :type resource_id: str
        """
        if resource_id is None:
            raise ValueError("Invalid value for `resource_id`, must not be `None`")

        self._resource_id = resource_id

    @property
    def drm_systems(self):
        """Gets the drm_systems of this SpekeKeyProvider.


        :return: The drm_systems of this SpekeKeyProvider.
        :rtype: List
        """
        return self._drm_systems

    @drm_systems.setter
    def drm_systems(self, drm_systems):
        """Sets the drm_systems of this SpekeKeyProvider.


        :param drm_systems: The drm_systems of this SpekeKeyProvider.
        :type drm_systems: List
        """
        if drm_systems is None:
            raise ValueError("Invalid value for `drm_systems`, must not be `None`")

        self._drm_systems = drm_systems

    @property
    def role_arn(self):
        """Gets the role_arn of this SpekeKeyProvider.


        :return: The role_arn of this SpekeKeyProvider.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this SpekeKeyProvider.


        :param role_arn: The role_arn of this SpekeKeyProvider.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")

        self._role_arn = role_arn

    @property
    def url(self):
        """Gets the url of this SpekeKeyProvider.


        :return: The url of this SpekeKeyProvider.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this SpekeKeyProvider.


        :param url: The url of this SpekeKeyProvider.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
