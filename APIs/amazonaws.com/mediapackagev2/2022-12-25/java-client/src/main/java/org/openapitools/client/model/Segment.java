/*
 * AWS Elemental MediaPackage v2
 * <note> <p>This guide is intended for creating AWS Elemental MediaPackage resources in MediaPackage Version 2 (v2) starting from May 2023. To get started with MediaPackage v2, create your MediaPackage resources. There isn't an automated process to migrate your resources from MediaPackage v1 to MediaPackage v2. </p> <p>The names of the entities that you use to access this API, like URLs and ARNs, all have the versioning information added, like \"v2\", to distinguish from the prior version. If you used MediaPackage prior to this release, you can't use the MediaPackage v2 CLI or the MediaPackage v2 API to access any MediaPackage v1 resources.</p> <p>If you created resources in MediaPackage v1, use video on demand (VOD) workflows, and aren't looking to migrate to MediaPackage v2 yet, see the <a href=\"https://docs.aws.amazon.com/mediapackage/latest/apireference/what-is.html\">MediaPackage v1 Live API Reference</a>.</p> </note> <p>This is the AWS Elemental MediaPackage v2 Live REST API Reference. It describes all the MediaPackage API operations for live content in detail, and provides sample requests, responses, and errors for the supported web services protocols.</p> <p>We assume that you have the IAM permissions that you need to use MediaPackage via the REST API. We also assume that you are familiar with the features and operations of MediaPackage, as described in the AWS Elemental MediaPackage User Guide.</p>
 *
 * The version of the OpenAPI document: 2022-12-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CreateOriginEndpointRequestSegmentScte;
import org.openapitools.client.model.Encryption;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The segment configuration, including the segment name, duration, and other configuration values.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:03.443122-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Segment {
  public static final String SERIALIZED_NAME_SEGMENT_DURATION_SECONDS = "SegmentDurationSeconds";
  @SerializedName(SERIALIZED_NAME_SEGMENT_DURATION_SECONDS)
  private Integer segmentDurationSeconds;

  public static final String SERIALIZED_NAME_SEGMENT_NAME = "SegmentName";
  @SerializedName(SERIALIZED_NAME_SEGMENT_NAME)
  private String segmentName;

  public static final String SERIALIZED_NAME_TS_USE_AUDIO_RENDITION_GROUP = "TsUseAudioRenditionGroup";
  @SerializedName(SERIALIZED_NAME_TS_USE_AUDIO_RENDITION_GROUP)
  private Boolean tsUseAudioRenditionGroup;

  public static final String SERIALIZED_NAME_INCLUDE_IFRAME_ONLY_STREAMS = "IncludeIframeOnlyStreams";
  @SerializedName(SERIALIZED_NAME_INCLUDE_IFRAME_ONLY_STREAMS)
  private Boolean includeIframeOnlyStreams;

  public static final String SERIALIZED_NAME_TS_INCLUDE_DVB_SUBTITLES = "TsIncludeDvbSubtitles";
  @SerializedName(SERIALIZED_NAME_TS_INCLUDE_DVB_SUBTITLES)
  private Boolean tsIncludeDvbSubtitles;

  public static final String SERIALIZED_NAME_SCTE = "Scte";
  @SerializedName(SERIALIZED_NAME_SCTE)
  private CreateOriginEndpointRequestSegmentScte scte;

  public static final String SERIALIZED_NAME_ENCRYPTION = "Encryption";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION)
  private Encryption encryption;

  public Segment() {
  }

  public Segment segmentDurationSeconds(Integer segmentDurationSeconds) {
    this.segmentDurationSeconds = segmentDurationSeconds;
    return this;
  }

  /**
   * Get segmentDurationSeconds
   * @return segmentDurationSeconds
   */
  @javax.annotation.Nullable
  public Integer getSegmentDurationSeconds() {
    return segmentDurationSeconds;
  }

  public void setSegmentDurationSeconds(Integer segmentDurationSeconds) {
    this.segmentDurationSeconds = segmentDurationSeconds;
  }


  public Segment segmentName(String segmentName) {
    this.segmentName = segmentName;
    return this;
  }

  /**
   * Get segmentName
   * @return segmentName
   */
  @javax.annotation.Nullable
  public String getSegmentName() {
    return segmentName;
  }

  public void setSegmentName(String segmentName) {
    this.segmentName = segmentName;
  }


  public Segment tsUseAudioRenditionGroup(Boolean tsUseAudioRenditionGroup) {
    this.tsUseAudioRenditionGroup = tsUseAudioRenditionGroup;
    return this;
  }

  /**
   * Get tsUseAudioRenditionGroup
   * @return tsUseAudioRenditionGroup
   */
  @javax.annotation.Nullable
  public Boolean getTsUseAudioRenditionGroup() {
    return tsUseAudioRenditionGroup;
  }

  public void setTsUseAudioRenditionGroup(Boolean tsUseAudioRenditionGroup) {
    this.tsUseAudioRenditionGroup = tsUseAudioRenditionGroup;
  }


  public Segment includeIframeOnlyStreams(Boolean includeIframeOnlyStreams) {
    this.includeIframeOnlyStreams = includeIframeOnlyStreams;
    return this;
  }

  /**
   * Get includeIframeOnlyStreams
   * @return includeIframeOnlyStreams
   */
  @javax.annotation.Nullable
  public Boolean getIncludeIframeOnlyStreams() {
    return includeIframeOnlyStreams;
  }

  public void setIncludeIframeOnlyStreams(Boolean includeIframeOnlyStreams) {
    this.includeIframeOnlyStreams = includeIframeOnlyStreams;
  }


  public Segment tsIncludeDvbSubtitles(Boolean tsIncludeDvbSubtitles) {
    this.tsIncludeDvbSubtitles = tsIncludeDvbSubtitles;
    return this;
  }

  /**
   * Get tsIncludeDvbSubtitles
   * @return tsIncludeDvbSubtitles
   */
  @javax.annotation.Nullable
  public Boolean getTsIncludeDvbSubtitles() {
    return tsIncludeDvbSubtitles;
  }

  public void setTsIncludeDvbSubtitles(Boolean tsIncludeDvbSubtitles) {
    this.tsIncludeDvbSubtitles = tsIncludeDvbSubtitles;
  }


  public Segment scte(CreateOriginEndpointRequestSegmentScte scte) {
    this.scte = scte;
    return this;
  }

  /**
   * Get scte
   * @return scte
   */
  @javax.annotation.Nullable
  public CreateOriginEndpointRequestSegmentScte getScte() {
    return scte;
  }

  public void setScte(CreateOriginEndpointRequestSegmentScte scte) {
    this.scte = scte;
  }


  public Segment encryption(Encryption encryption) {
    this.encryption = encryption;
    return this;
  }

  /**
   * Get encryption
   * @return encryption
   */
  @javax.annotation.Nullable
  public Encryption getEncryption() {
    return encryption;
  }

  public void setEncryption(Encryption encryption) {
    this.encryption = encryption;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Segment segment = (Segment) o;
    return Objects.equals(this.segmentDurationSeconds, segment.segmentDurationSeconds) &&
        Objects.equals(this.segmentName, segment.segmentName) &&
        Objects.equals(this.tsUseAudioRenditionGroup, segment.tsUseAudioRenditionGroup) &&
        Objects.equals(this.includeIframeOnlyStreams, segment.includeIframeOnlyStreams) &&
        Objects.equals(this.tsIncludeDvbSubtitles, segment.tsIncludeDvbSubtitles) &&
        Objects.equals(this.scte, segment.scte) &&
        Objects.equals(this.encryption, segment.encryption);
  }

  @Override
  public int hashCode() {
    return Objects.hash(segmentDurationSeconds, segmentName, tsUseAudioRenditionGroup, includeIframeOnlyStreams, tsIncludeDvbSubtitles, scte, encryption);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Segment {\n");
    sb.append("    segmentDurationSeconds: ").append(toIndentedString(segmentDurationSeconds)).append("\n");
    sb.append("    segmentName: ").append(toIndentedString(segmentName)).append("\n");
    sb.append("    tsUseAudioRenditionGroup: ").append(toIndentedString(tsUseAudioRenditionGroup)).append("\n");
    sb.append("    includeIframeOnlyStreams: ").append(toIndentedString(includeIframeOnlyStreams)).append("\n");
    sb.append("    tsIncludeDvbSubtitles: ").append(toIndentedString(tsIncludeDvbSubtitles)).append("\n");
    sb.append("    scte: ").append(toIndentedString(scte)).append("\n");
    sb.append("    encryption: ").append(toIndentedString(encryption)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SegmentDurationSeconds");
    openapiFields.add("SegmentName");
    openapiFields.add("TsUseAudioRenditionGroup");
    openapiFields.add("IncludeIframeOnlyStreams");
    openapiFields.add("TsIncludeDvbSubtitles");
    openapiFields.add("Scte");
    openapiFields.add("Encryption");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Segment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Segment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Segment is not found in the empty JSON string", Segment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Segment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Segment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `SegmentDurationSeconds`
      if (jsonObj.get("SegmentDurationSeconds") != null && !jsonObj.get("SegmentDurationSeconds").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("SegmentDurationSeconds"));
      }
      // validate the optional field `SegmentName`
      if (jsonObj.get("SegmentName") != null && !jsonObj.get("SegmentName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SegmentName"));
      }
      // validate the optional field `TsUseAudioRenditionGroup`
      if (jsonObj.get("TsUseAudioRenditionGroup") != null && !jsonObj.get("TsUseAudioRenditionGroup").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("TsUseAudioRenditionGroup"));
      }
      // validate the optional field `IncludeIframeOnlyStreams`
      if (jsonObj.get("IncludeIframeOnlyStreams") != null && !jsonObj.get("IncludeIframeOnlyStreams").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("IncludeIframeOnlyStreams"));
      }
      // validate the optional field `TsIncludeDvbSubtitles`
      if (jsonObj.get("TsIncludeDvbSubtitles") != null && !jsonObj.get("TsIncludeDvbSubtitles").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("TsIncludeDvbSubtitles"));
      }
      // validate the optional field `Scte`
      if (jsonObj.get("Scte") != null && !jsonObj.get("Scte").isJsonNull()) {
        CreateOriginEndpointRequestSegmentScte.validateJsonElement(jsonObj.get("Scte"));
      }
      // validate the optional field `Encryption`
      if (jsonObj.get("Encryption") != null && !jsonObj.get("Encryption").isJsonNull()) {
        Encryption.validateJsonElement(jsonObj.get("Encryption"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Segment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Segment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Segment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Segment.class));

       return (TypeAdapter<T>) new TypeAdapter<Segment>() {
           @Override
           public void write(JsonWriter out, Segment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Segment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Segment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Segment
   * @throws IOException if the JSON string is invalid with respect to Segment
   */
  public static Segment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Segment.class);
  }

  /**
   * Convert an instance of Segment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

