/**
 * AWS Elemental MediaPackage v2
 * <note> <p>This guide is intended for creating AWS Elemental MediaPackage resources in MediaPackage Version 2 (v2) starting from May 2023. To get started with MediaPackage v2, create your MediaPackage resources. There isn't an automated process to migrate your resources from MediaPackage v1 to MediaPackage v2. </p> <p>The names of the entities that you use to access this API, like URLs and ARNs, all have the versioning information added, like \"v2\", to distinguish from the prior version. If you used MediaPackage prior to this release, you can't use the MediaPackage v2 CLI or the MediaPackage v2 API to access any MediaPackage v1 resources.</p> <p>If you created resources in MediaPackage v1, use video on demand (VOD) workflows, and aren't looking to migrate to MediaPackage v2 yet, see the <a href=\"https://docs.aws.amazon.com/mediapackage/latest/apireference/what-is.html\">MediaPackage v1 Live API Reference</a>.</p> </note> <p>This is the AWS Elemental MediaPackage v2 Live REST API Reference. It describes all the MediaPackage API operations for live content in detail, and provides sample requests, responses, and errors for the supported web services protocols.</p> <p>We assume that you have the IAM permissions that you need to use MediaPackage via the REST API. We also assume that you are familiar with the features and operations of MediaPackage, as described in the AWS Elemental MediaPackage User Guide.</p>
 *
 * The version of the OpenAPI document: 2022-12-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsElementalMediaPackageV2);
  }
}(this, function(expect, AwsElementalMediaPackageV2) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsElementalMediaPackageV2.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('createChannel', function() {
      it('should call createChannel successfully', function(done) {
        //uncomment below and update the code to test createChannel
        //instance.createChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createChannelGroup', function() {
      it('should call createChannelGroup successfully', function(done) {
        //uncomment below and update the code to test createChannelGroup
        //instance.createChannelGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createOriginEndpoint', function() {
      it('should call createOriginEndpoint successfully', function(done) {
        //uncomment below and update the code to test createOriginEndpoint
        //instance.createOriginEndpoint(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteChannel', function() {
      it('should call deleteChannel successfully', function(done) {
        //uncomment below and update the code to test deleteChannel
        //instance.deleteChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteChannelGroup', function() {
      it('should call deleteChannelGroup successfully', function(done) {
        //uncomment below and update the code to test deleteChannelGroup
        //instance.deleteChannelGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteChannelPolicy', function() {
      it('should call deleteChannelPolicy successfully', function(done) {
        //uncomment below and update the code to test deleteChannelPolicy
        //instance.deleteChannelPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteOriginEndpoint', function() {
      it('should call deleteOriginEndpoint successfully', function(done) {
        //uncomment below and update the code to test deleteOriginEndpoint
        //instance.deleteOriginEndpoint(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteOriginEndpointPolicy', function() {
      it('should call deleteOriginEndpointPolicy successfully', function(done) {
        //uncomment below and update the code to test deleteOriginEndpointPolicy
        //instance.deleteOriginEndpointPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getChannel', function() {
      it('should call getChannel successfully', function(done) {
        //uncomment below and update the code to test getChannel
        //instance.getChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getChannelGroup', function() {
      it('should call getChannelGroup successfully', function(done) {
        //uncomment below and update the code to test getChannelGroup
        //instance.getChannelGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getChannelPolicy', function() {
      it('should call getChannelPolicy successfully', function(done) {
        //uncomment below and update the code to test getChannelPolicy
        //instance.getChannelPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getOriginEndpoint', function() {
      it('should call getOriginEndpoint successfully', function(done) {
        //uncomment below and update the code to test getOriginEndpoint
        //instance.getOriginEndpoint(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getOriginEndpointPolicy', function() {
      it('should call getOriginEndpointPolicy successfully', function(done) {
        //uncomment below and update the code to test getOriginEndpointPolicy
        //instance.getOriginEndpointPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listChannelGroups', function() {
      it('should call listChannelGroups successfully', function(done) {
        //uncomment below and update the code to test listChannelGroups
        //instance.listChannelGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listChannels', function() {
      it('should call listChannels successfully', function(done) {
        //uncomment below and update the code to test listChannels
        //instance.listChannels(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listOriginEndpoints', function() {
      it('should call listOriginEndpoints successfully', function(done) {
        //uncomment below and update the code to test listOriginEndpoints
        //instance.listOriginEndpoints(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putChannelPolicy', function() {
      it('should call putChannelPolicy successfully', function(done) {
        //uncomment below and update the code to test putChannelPolicy
        //instance.putChannelPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putOriginEndpointPolicy', function() {
      it('should call putOriginEndpointPolicy successfully', function(done) {
        //uncomment below and update the code to test putOriginEndpointPolicy
        //instance.putOriginEndpointPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateChannel', function() {
      it('should call updateChannel successfully', function(done) {
        //uncomment below and update the code to test updateChannel
        //instance.updateChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateChannelGroup', function() {
      it('should call updateChannelGroup successfully', function(done) {
        //uncomment below and update the code to test updateChannelGroup
        //instance.updateChannelGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateOriginEndpoint', function() {
      it('should call updateOriginEndpoint successfully', function(done) {
        //uncomment below and update the code to test updateOriginEndpoint
        //instance.updateOriginEndpoint(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
