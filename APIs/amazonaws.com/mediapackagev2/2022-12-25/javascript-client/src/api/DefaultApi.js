/**
 * AWS Elemental MediaPackage v2
 * <note> <p>This guide is intended for creating AWS Elemental MediaPackage resources in MediaPackage Version 2 (v2) starting from May 2023. To get started with MediaPackage v2, create your MediaPackage resources. There isn't an automated process to migrate your resources from MediaPackage v1 to MediaPackage v2. </p> <p>The names of the entities that you use to access this API, like URLs and ARNs, all have the versioning information added, like \"v2\", to distinguish from the prior version. If you used MediaPackage prior to this release, you can't use the MediaPackage v2 CLI or the MediaPackage v2 API to access any MediaPackage v1 resources.</p> <p>If you created resources in MediaPackage v1, use video on demand (VOD) workflows, and aren't looking to migrate to MediaPackage v2 yet, see the <a href=\"https://docs.aws.amazon.com/mediapackage/latest/apireference/what-is.html\">MediaPackage v1 Live API Reference</a>.</p> </note> <p>This is the AWS Elemental MediaPackage v2 Live REST API Reference. It describes all the MediaPackage API operations for live content in detail, and provides sample requests, responses, and errors for the supported web services protocols.</p> <p>We assume that you have the IAM permissions that you need to use MediaPackage via the REST API. We also assume that you are familiar with the features and operations of MediaPackage, as described in the AWS Elemental MediaPackage User Guide.</p>
 *
 * The version of the OpenAPI document: 2022-12-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateChannelGroupRequest from '../model/CreateChannelGroupRequest';
import CreateChannelGroupResponse from '../model/CreateChannelGroupResponse';
import CreateChannelRequest from '../model/CreateChannelRequest';
import CreateChannelResponse from '../model/CreateChannelResponse';
import CreateOriginEndpointRequest from '../model/CreateOriginEndpointRequest';
import CreateOriginEndpointResponse from '../model/CreateOriginEndpointResponse';
import GetChannelGroupResponse from '../model/GetChannelGroupResponse';
import GetChannelPolicyResponse from '../model/GetChannelPolicyResponse';
import GetChannelResponse from '../model/GetChannelResponse';
import GetOriginEndpointPolicyResponse from '../model/GetOriginEndpointPolicyResponse';
import GetOriginEndpointResponse from '../model/GetOriginEndpointResponse';
import ListChannelGroupsResponse from '../model/ListChannelGroupsResponse';
import ListChannelsResponse from '../model/ListChannelsResponse';
import ListOriginEndpointsResponse from '../model/ListOriginEndpointsResponse';
import ListTagsForResourceResponse from '../model/ListTagsForResourceResponse';
import PutChannelPolicyRequest from '../model/PutChannelPolicyRequest';
import PutOriginEndpointPolicyRequest from '../model/PutOriginEndpointPolicyRequest';
import TagResourceRequest from '../model/TagResourceRequest';
import UpdateChannelGroupRequest from '../model/UpdateChannelGroupRequest';
import UpdateChannelGroupResponse from '../model/UpdateChannelGroupResponse';
import UpdateChannelRequest from '../model/UpdateChannelRequest';
import UpdateChannelResponse from '../model/UpdateChannelResponse';
import UpdateOriginEndpointRequest from '../model/UpdateOriginEndpointRequest';
import UpdateOriginEndpointResponse from '../model/UpdateOriginEndpointResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 2022-12-25
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createChannel operation.
     * @callback module:api/DefaultApi~createChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a channel to start receiving content streams. The channel represents the input to MediaPackage for incoming live content from an encoder such as AWS Elemental MediaLive. The channel receives content, and after packaging it, outputs it through an origin endpoint to downstream devices (such as video players or CDNs) that request the content. You can create only one channel with each request. We recommend that you spread out channels between channel groups, such as putting redundant channels in the same AWS Region in different channel groups.
     * @param {String} channelGroupName The name that describes the channel group. The name is the primary identifier for the channel group, and must be unique for your account in the AWS Region.
     * @param {module:model/CreateChannelRequest} createChannelRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [xAmznClientToken] A unique, case-sensitive token that you provide to ensure the idempotency of the request.
     * @param {module:api/DefaultApi~createChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateChannelResponse}
     */
    createChannel(channelGroupName, createChannelRequest, opts, callback) {
      opts = opts || {};
      let postBody = createChannelRequest;
      // verify the required parameter 'channelGroupName' is set
      if (channelGroupName === undefined || channelGroupName === null) {
        throw new Error("Missing the required parameter 'channelGroupName' when calling createChannel");
      }
      // verify the required parameter 'createChannelRequest' is set
      if (createChannelRequest === undefined || createChannelRequest === null) {
        throw new Error("Missing the required parameter 'createChannelRequest' when calling createChannel");
      }

      let pathParams = {
        'ChannelGroupName': channelGroupName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'x-amzn-client-token': opts['xAmznClientToken']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateChannelResponse;
      return this.apiClient.callApi(
        '/channelGroup/{ChannelGroupName}/channel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createChannelGroup operation.
     * @callback module:api/DefaultApi~createChannelGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateChannelGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a channel group to group your channels and origin endpoints. A channel group is the top-level resource that consists of channels and origin endpoints that are associated with it and that provides predictable URLs for stream delivery. All channels and origin endpoints within the channel group are guaranteed to share the DNS. You can create only one channel group with each request. 
     * @param {module:model/CreateChannelGroupRequest} createChannelGroupRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [xAmznClientToken] A unique, case-sensitive token that you provide to ensure the idempotency of the request.
     * @param {module:api/DefaultApi~createChannelGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateChannelGroupResponse}
     */
    createChannelGroup(createChannelGroupRequest, opts, callback) {
      opts = opts || {};
      let postBody = createChannelGroupRequest;
      // verify the required parameter 'createChannelGroupRequest' is set
      if (createChannelGroupRequest === undefined || createChannelGroupRequest === null) {
        throw new Error("Missing the required parameter 'createChannelGroupRequest' when calling createChannelGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'x-amzn-client-token': opts['xAmznClientToken']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateChannelGroupResponse;
      return this.apiClient.callApi(
        '/channelGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOriginEndpoint operation.
     * @callback module:api/DefaultApi~createOriginEndpointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateOriginEndpointResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The endpoint is attached to a channel, and represents the output of the live content. You can associate multiple endpoints to a single channel. Each endpoint gives players and downstream CDNs (such as Amazon CloudFront) access to the content for playback. Content can't be served from a channel until it has an endpoint. You can create only one endpoint with each request. 
     * @param {String} channelGroupName The name that describes the channel group. The name is the primary identifier for the channel group, and must be unique for your account in the AWS Region.
     * @param {String} channelName The name that describes the channel. The name is the primary identifier for the channel, and must be unique for your account in the AWS Region and channel group. 
     * @param {module:model/CreateOriginEndpointRequest} createOriginEndpointRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [xAmznClientToken] A unique, case-sensitive token that you provide to ensure the idempotency of the request.
     * @param {module:api/DefaultApi~createOriginEndpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateOriginEndpointResponse}
     */
    createOriginEndpoint(channelGroupName, channelName, createOriginEndpointRequest, opts, callback) {
      opts = opts || {};
      let postBody = createOriginEndpointRequest;
      // verify the required parameter 'channelGroupName' is set
      if (channelGroupName === undefined || channelGroupName === null) {
        throw new Error("Missing the required parameter 'channelGroupName' when calling createOriginEndpoint");
      }
      // verify the required parameter 'channelName' is set
      if (channelName === undefined || channelName === null) {
        throw new Error("Missing the required parameter 'channelName' when calling createOriginEndpoint");
      }
      // verify the required parameter 'createOriginEndpointRequest' is set
      if (createOriginEndpointRequest === undefined || createOriginEndpointRequest === null) {
        throw new Error("Missing the required parameter 'createOriginEndpointRequest' when calling createOriginEndpoint");
      }

      let pathParams = {
        'ChannelGroupName': channelGroupName,
        'ChannelName': channelName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'x-amzn-client-token': opts['xAmznClientToken']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateOriginEndpointResponse;
      return this.apiClient.callApi(
        '/channelGroup/{ChannelGroupName}/channel/{ChannelName}/originEndpoint', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteChannel operation.
     * @callback module:api/DefaultApi~deleteChannelCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a channel to stop AWS Elemental MediaPackage from receiving further content. You must delete the channel's origin endpoints before you can delete the channel.
     * @param {String} channelGroupName The name that describes the channel group. The name is the primary identifier for the channel group, and must be unique for your account in the AWS Region.
     * @param {String} channelName The name that describes the channel. The name is the primary identifier for the channel, and must be unique for your account in the AWS Region and channel group.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteChannel(channelGroupName, channelName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelGroupName' is set
      if (channelGroupName === undefined || channelGroupName === null) {
        throw new Error("Missing the required parameter 'channelGroupName' when calling deleteChannel");
      }
      // verify the required parameter 'channelName' is set
      if (channelName === undefined || channelName === null) {
        throw new Error("Missing the required parameter 'channelName' when calling deleteChannel");
      }

      let pathParams = {
        'ChannelGroupName': channelGroupName,
        'ChannelName': channelName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/channelGroup/{ChannelGroupName}/channel/{ChannelName}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteChannelGroup operation.
     * @callback module:api/DefaultApi~deleteChannelGroupCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a channel group. You must delete the channel group's channels and origin endpoints before you can delete the channel group. If you delete a channel group, you'll lose access to the egress domain and will have to create a new channel group to replace it.
     * @param {String} channelGroupName The name that describes the channel group. The name is the primary identifier for the channel group, and must be unique for your account in the AWS Region.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteChannelGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteChannelGroup(channelGroupName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelGroupName' is set
      if (channelGroupName === undefined || channelGroupName === null) {
        throw new Error("Missing the required parameter 'channelGroupName' when calling deleteChannelGroup");
      }

      let pathParams = {
        'ChannelGroupName': channelGroupName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/channelGroup/{ChannelGroupName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteChannelPolicy operation.
     * @callback module:api/DefaultApi~deleteChannelPolicyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a channel policy.
     * @param {String} channelGroupName The name that describes the channel group. The name is the primary identifier for the channel group, and must be unique for your account in the AWS Region.
     * @param {String} channelName The name that describes the channel. The name is the primary identifier for the channel, and must be unique for your account in the AWS Region and channel group.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteChannelPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteChannelPolicy(channelGroupName, channelName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelGroupName' is set
      if (channelGroupName === undefined || channelGroupName === null) {
        throw new Error("Missing the required parameter 'channelGroupName' when calling deleteChannelPolicy");
      }
      // verify the required parameter 'channelName' is set
      if (channelName === undefined || channelName === null) {
        throw new Error("Missing the required parameter 'channelName' when calling deleteChannelPolicy");
      }

      let pathParams = {
        'ChannelGroupName': channelGroupName,
        'ChannelName': channelName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/channelGroup/{ChannelGroupName}/channel/{ChannelName}/policy', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOriginEndpoint operation.
     * @callback module:api/DefaultApi~deleteOriginEndpointCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Origin endpoints can serve content until they're deleted. Delete the endpoint if it should no longer respond to playback requests. You must delete all endpoints from a channel before you can delete the channel.
     * @param {String} channelGroupName The name that describes the channel group. The name is the primary identifier for the channel group, and must be unique for your account in the AWS Region.
     * @param {String} channelName The name that describes the channel. The name is the primary identifier for the channel, and must be unique for your account in the AWS Region and channel group. 
     * @param {String} originEndpointName The name that describes the origin endpoint. The name is the primary identifier for the origin endpoint, and and must be unique for your account in the AWS Region and channel. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteOriginEndpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteOriginEndpoint(channelGroupName, channelName, originEndpointName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelGroupName' is set
      if (channelGroupName === undefined || channelGroupName === null) {
        throw new Error("Missing the required parameter 'channelGroupName' when calling deleteOriginEndpoint");
      }
      // verify the required parameter 'channelName' is set
      if (channelName === undefined || channelName === null) {
        throw new Error("Missing the required parameter 'channelName' when calling deleteOriginEndpoint");
      }
      // verify the required parameter 'originEndpointName' is set
      if (originEndpointName === undefined || originEndpointName === null) {
        throw new Error("Missing the required parameter 'originEndpointName' when calling deleteOriginEndpoint");
      }

      let pathParams = {
        'ChannelGroupName': channelGroupName,
        'ChannelName': channelName,
        'OriginEndpointName': originEndpointName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/channelGroup/{ChannelGroupName}/channel/{ChannelName}/originEndpoint/{OriginEndpointName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOriginEndpointPolicy operation.
     * @callback module:api/DefaultApi~deleteOriginEndpointPolicyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an origin endpoint policy.
     * @param {String} channelGroupName The name that describes the channel group. The name is the primary identifier for the channel group, and must be unique for your account in the AWS Region.
     * @param {String} channelName The name that describes the channel. The name is the primary identifier for the channel, and must be unique for your account in the AWS Region and channel group. 
     * @param {String} originEndpointName The name that describes the origin endpoint. The name is the primary identifier for the origin endpoint, and and must be unique for your account in the AWS Region and channel. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteOriginEndpointPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteOriginEndpointPolicy(channelGroupName, channelName, originEndpointName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelGroupName' is set
      if (channelGroupName === undefined || channelGroupName === null) {
        throw new Error("Missing the required parameter 'channelGroupName' when calling deleteOriginEndpointPolicy");
      }
      // verify the required parameter 'channelName' is set
      if (channelName === undefined || channelName === null) {
        throw new Error("Missing the required parameter 'channelName' when calling deleteOriginEndpointPolicy");
      }
      // verify the required parameter 'originEndpointName' is set
      if (originEndpointName === undefined || originEndpointName === null) {
        throw new Error("Missing the required parameter 'originEndpointName' when calling deleteOriginEndpointPolicy");
      }

      let pathParams = {
        'ChannelGroupName': channelGroupName,
        'ChannelName': channelName,
        'OriginEndpointName': originEndpointName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/channelGroup/{ChannelGroupName}/channel/{ChannelName}/originEndpoint/{OriginEndpointName}/policy', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChannel operation.
     * @callback module:api/DefaultApi~getChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the specified channel that's configured in AWS Elemental MediaPackage, including the origin endpoints that are associated with it.
     * @param {String} channelGroupName The name that describes the channel group. The name is the primary identifier for the channel group, and must be unique for your account in the AWS Region.
     * @param {String} channelName The name that describes the channel. The name is the primary identifier for the channel, and must be unique for your account in the AWS Region and channel group. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetChannelResponse}
     */
    getChannel(channelGroupName, channelName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelGroupName' is set
      if (channelGroupName === undefined || channelGroupName === null) {
        throw new Error("Missing the required parameter 'channelGroupName' when calling getChannel");
      }
      // verify the required parameter 'channelName' is set
      if (channelName === undefined || channelName === null) {
        throw new Error("Missing the required parameter 'channelName' when calling getChannel");
      }

      let pathParams = {
        'ChannelGroupName': channelGroupName,
        'ChannelName': channelName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetChannelResponse;
      return this.apiClient.callApi(
        '/channelGroup/{ChannelGroupName}/channel/{ChannelName}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChannelGroup operation.
     * @callback module:api/DefaultApi~getChannelGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetChannelGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the specified channel group that's configured in AWS Elemental MediaPackage, including the channels and origin endpoints that are associated with it.
     * @param {String} channelGroupName The name that describes the channel group. The name is the primary identifier for the channel group, and must be unique for your account in the AWS Region.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getChannelGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetChannelGroupResponse}
     */
    getChannelGroup(channelGroupName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelGroupName' is set
      if (channelGroupName === undefined || channelGroupName === null) {
        throw new Error("Missing the required parameter 'channelGroupName' when calling getChannelGroup");
      }

      let pathParams = {
        'ChannelGroupName': channelGroupName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetChannelGroupResponse;
      return this.apiClient.callApi(
        '/channelGroup/{ChannelGroupName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChannelPolicy operation.
     * @callback module:api/DefaultApi~getChannelPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetChannelPolicyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the specified channel policy that's configured in AWS Elemental MediaPackage. With policies, you can specify who has access to AWS resources and what actions they can perform on those resources.
     * @param {String} channelGroupName The name that describes the channel group. The name is the primary identifier for the channel group, and must be unique for your account in the AWS Region.
     * @param {String} channelName The name that describes the channel. The name is the primary identifier for the channel, and must be unique for your account in the AWS Region and channel group. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getChannelPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetChannelPolicyResponse}
     */
    getChannelPolicy(channelGroupName, channelName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelGroupName' is set
      if (channelGroupName === undefined || channelGroupName === null) {
        throw new Error("Missing the required parameter 'channelGroupName' when calling getChannelPolicy");
      }
      // verify the required parameter 'channelName' is set
      if (channelName === undefined || channelName === null) {
        throw new Error("Missing the required parameter 'channelName' when calling getChannelPolicy");
      }

      let pathParams = {
        'ChannelGroupName': channelGroupName,
        'ChannelName': channelName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetChannelPolicyResponse;
      return this.apiClient.callApi(
        '/channelGroup/{ChannelGroupName}/channel/{ChannelName}/policy', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOriginEndpoint operation.
     * @callback module:api/DefaultApi~getOriginEndpointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOriginEndpointResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the specified origin endpoint that's configured in AWS Elemental MediaPackage to obtain its playback URL and to view the packaging settings that it's currently using.
     * @param {String} channelGroupName The name that describes the channel group. The name is the primary identifier for the channel group, and must be unique for your account in the AWS Region.
     * @param {String} channelName The name that describes the channel. The name is the primary identifier for the channel, and must be unique for your account in the AWS Region and channel group. 
     * @param {String} originEndpointName The name that describes the origin endpoint. The name is the primary identifier for the origin endpoint, and and must be unique for your account in the AWS Region and channel. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getOriginEndpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOriginEndpointResponse}
     */
    getOriginEndpoint(channelGroupName, channelName, originEndpointName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelGroupName' is set
      if (channelGroupName === undefined || channelGroupName === null) {
        throw new Error("Missing the required parameter 'channelGroupName' when calling getOriginEndpoint");
      }
      // verify the required parameter 'channelName' is set
      if (channelName === undefined || channelName === null) {
        throw new Error("Missing the required parameter 'channelName' when calling getOriginEndpoint");
      }
      // verify the required parameter 'originEndpointName' is set
      if (originEndpointName === undefined || originEndpointName === null) {
        throw new Error("Missing the required parameter 'originEndpointName' when calling getOriginEndpoint");
      }

      let pathParams = {
        'ChannelGroupName': channelGroupName,
        'ChannelName': channelName,
        'OriginEndpointName': originEndpointName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetOriginEndpointResponse;
      return this.apiClient.callApi(
        '/channelGroup/{ChannelGroupName}/channel/{ChannelName}/originEndpoint/{OriginEndpointName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOriginEndpointPolicy operation.
     * @callback module:api/DefaultApi~getOriginEndpointPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOriginEndpointPolicyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the specified origin endpoint policy that's configured in AWS Elemental MediaPackage.
     * @param {String} channelGroupName The name that describes the channel group. The name is the primary identifier for the channel group, and must be unique for your account in the AWS Region.
     * @param {String} channelName The name that describes the channel. The name is the primary identifier for the channel, and must be unique for your account in the AWS Region and channel group. 
     * @param {String} originEndpointName The name that describes the origin endpoint. The name is the primary identifier for the origin endpoint, and and must be unique for your account in the AWS Region and channel. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getOriginEndpointPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOriginEndpointPolicyResponse}
     */
    getOriginEndpointPolicy(channelGroupName, channelName, originEndpointName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelGroupName' is set
      if (channelGroupName === undefined || channelGroupName === null) {
        throw new Error("Missing the required parameter 'channelGroupName' when calling getOriginEndpointPolicy");
      }
      // verify the required parameter 'channelName' is set
      if (channelName === undefined || channelName === null) {
        throw new Error("Missing the required parameter 'channelName' when calling getOriginEndpointPolicy");
      }
      // verify the required parameter 'originEndpointName' is set
      if (originEndpointName === undefined || originEndpointName === null) {
        throw new Error("Missing the required parameter 'originEndpointName' when calling getOriginEndpointPolicy");
      }

      let pathParams = {
        'ChannelGroupName': channelGroupName,
        'ChannelName': channelName,
        'OriginEndpointName': originEndpointName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetOriginEndpointPolicyResponse;
      return this.apiClient.callApi(
        '/channelGroup/{ChannelGroupName}/channel/{ChannelName}/originEndpoint/{OriginEndpointName}/policy', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listChannelGroups operation.
     * @callback module:api/DefaultApi~listChannelGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListChannelGroupsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves all channel groups that are configured in AWS Elemental MediaPackage, including the channels and origin endpoints that are associated with it.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of results to return in the response.
     * @param {String} [nextToken] The pagination token from the GET list request. Use the token to fetch the next page of results.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listChannelGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListChannelGroupsResponse}
     */
    listChannelGroups(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListChannelGroupsResponse;
      return this.apiClient.callApi(
        '/channelGroup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listChannels operation.
     * @callback module:api/DefaultApi~listChannelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListChannelsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves all channels in a specific channel group that are configured in AWS Elemental MediaPackage, including the origin endpoints that are associated with it.
     * @param {String} channelGroupName The name that describes the channel group. The name is the primary identifier for the channel group, and must be unique for your account in the AWS Region.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of results to return in the response.
     * @param {String} [nextToken] The pagination token from the GET list request. Use the token to fetch the next page of results.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listChannelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListChannelsResponse}
     */
    listChannels(channelGroupName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelGroupName' is set
      if (channelGroupName === undefined || channelGroupName === null) {
        throw new Error("Missing the required parameter 'channelGroupName' when calling listChannels");
      }

      let pathParams = {
        'ChannelGroupName': channelGroupName
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListChannelsResponse;
      return this.apiClient.callApi(
        '/channelGroup/{ChannelGroupName}/channel', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listOriginEndpoints operation.
     * @callback module:api/DefaultApi~listOriginEndpointsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListOriginEndpointsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves all origin endpoints in a specific channel that are configured in AWS Elemental MediaPackage.
     * @param {String} channelGroupName The name that describes the channel group. The name is the primary identifier for the channel group, and must be unique for your account in the AWS Region.
     * @param {String} channelName The name that describes the channel. The name is the primary identifier for the channel, and must be unique for your account in the AWS Region and channel group. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of results to return in the response.
     * @param {String} [nextToken] The pagination token from the GET list request. Use the token to fetch the next page of results.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listOriginEndpointsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListOriginEndpointsResponse}
     */
    listOriginEndpoints(channelGroupName, channelName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelGroupName' is set
      if (channelGroupName === undefined || channelGroupName === null) {
        throw new Error("Missing the required parameter 'channelGroupName' when calling listOriginEndpoints");
      }
      // verify the required parameter 'channelName' is set
      if (channelName === undefined || channelName === null) {
        throw new Error("Missing the required parameter 'channelName' when calling listOriginEndpoints");
      }

      let pathParams = {
        'ChannelGroupName': channelGroupName,
        'ChannelName': channelName
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListOriginEndpointsResponse;
      return this.apiClient.callApi(
        '/channelGroup/{ChannelGroupName}/channel/{ChannelName}/originEndpoint', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the tags assigned to a resource.
     * @param {String} resourceArn The ARN of the CloudWatch resource that you want to view tags for.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceResponse}
     */
    listTagsForResource(resourceArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling listTagsForResource");
      }

      let pathParams = {
        'ResourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceResponse;
      return this.apiClient.callApi(
        '/tags/{ResourceArn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putChannelPolicy operation.
     * @callback module:api/DefaultApi~putChannelPolicyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attaches an IAM policy to the specified channel. With policies, you can specify who has access to AWS resources and what actions they can perform on those resources. You can attach only one policy with each request.
     * @param {String} channelGroupName The name that describes the channel group. The name is the primary identifier for the channel group, and must be unique for your account in the AWS Region.
     * @param {String} channelName The name that describes the channel. The name is the primary identifier for the channel, and must be unique for your account in the AWS Region and channel group. 
     * @param {module:model/PutChannelPolicyRequest} putChannelPolicyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putChannelPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    putChannelPolicy(channelGroupName, channelName, putChannelPolicyRequest, opts, callback) {
      opts = opts || {};
      let postBody = putChannelPolicyRequest;
      // verify the required parameter 'channelGroupName' is set
      if (channelGroupName === undefined || channelGroupName === null) {
        throw new Error("Missing the required parameter 'channelGroupName' when calling putChannelPolicy");
      }
      // verify the required parameter 'channelName' is set
      if (channelName === undefined || channelName === null) {
        throw new Error("Missing the required parameter 'channelName' when calling putChannelPolicy");
      }
      // verify the required parameter 'putChannelPolicyRequest' is set
      if (putChannelPolicyRequest === undefined || putChannelPolicyRequest === null) {
        throw new Error("Missing the required parameter 'putChannelPolicyRequest' when calling putChannelPolicy");
      }

      let pathParams = {
        'ChannelGroupName': channelGroupName,
        'ChannelName': channelName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/channelGroup/{ChannelGroupName}/channel/{ChannelName}/policy', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putOriginEndpointPolicy operation.
     * @callback module:api/DefaultApi~putOriginEndpointPolicyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attaches an IAM policy to the specified origin endpoint. You can attach only one policy with each request.
     * @param {String} channelGroupName The name that describes the channel group. The name is the primary identifier for the channel group, and must be unique for your account in the AWS Region.
     * @param {String} channelName The name that describes the channel. The name is the primary identifier for the channel, and must be unique for your account in the AWS Region and channel group. 
     * @param {String} originEndpointName The name that describes the origin endpoint. The name is the primary identifier for the origin endpoint, and and must be unique for your account in the AWS Region and channel. 
     * @param {module:model/PutOriginEndpointPolicyRequest} putOriginEndpointPolicyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putOriginEndpointPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    putOriginEndpointPolicy(channelGroupName, channelName, originEndpointName, putOriginEndpointPolicyRequest, opts, callback) {
      opts = opts || {};
      let postBody = putOriginEndpointPolicyRequest;
      // verify the required parameter 'channelGroupName' is set
      if (channelGroupName === undefined || channelGroupName === null) {
        throw new Error("Missing the required parameter 'channelGroupName' when calling putOriginEndpointPolicy");
      }
      // verify the required parameter 'channelName' is set
      if (channelName === undefined || channelName === null) {
        throw new Error("Missing the required parameter 'channelName' when calling putOriginEndpointPolicy");
      }
      // verify the required parameter 'originEndpointName' is set
      if (originEndpointName === undefined || originEndpointName === null) {
        throw new Error("Missing the required parameter 'originEndpointName' when calling putOriginEndpointPolicy");
      }
      // verify the required parameter 'putOriginEndpointPolicyRequest' is set
      if (putOriginEndpointPolicyRequest === undefined || putOriginEndpointPolicyRequest === null) {
        throw new Error("Missing the required parameter 'putOriginEndpointPolicyRequest' when calling putOriginEndpointPolicy");
      }

      let pathParams = {
        'ChannelGroupName': channelGroupName,
        'ChannelName': channelName,
        'OriginEndpointName': originEndpointName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/channelGroup/{ChannelGroupName}/channel/{ChannelName}/originEndpoint/{OriginEndpointName}/policy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Assigns one of more tags (key-value pairs) to the specified MediaPackage resource.</p> <p>Tags can help you organize and categorize your resources. You can also use them to scope user permissions, by granting a user permission to access or change only resources with certain tag values. You can use the TagResource operation with a resource that already has tags. If you specify a new tag key for the resource, this tag is appended to the list of tags associated with the resource. If you specify a tag key that is already associated with the resource, the new tag value that you specify replaces the previous value for that tag.</p>
     * @param {String} resourceArn The ARN of the MediaPackage resource that you're adding tags to.
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tagResource(resourceArn, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
        'ResourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/tags/{ResourceArn}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes one or more tags from the specified resource.
     * @param {String} resourceArn The ARN of the MediaPackage resource that you're removing tags from.
     * @param {Array.<String>} tagKeys The list of tag keys to remove from the resource.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    untagResource(resourceArn, tagKeys, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling untagResource");
      }
      // verify the required parameter 'tagKeys' is set
      if (tagKeys === undefined || tagKeys === null) {
        throw new Error("Missing the required parameter 'tagKeys' when calling untagResource");
      }

      let pathParams = {
        'ResourceArn': resourceArn
      };
      let queryParams = {
        'tagKeys': this.apiClient.buildCollectionParam(tagKeys, 'multi')
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/tags/{ResourceArn}#tagKeys', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateChannel operation.
     * @callback module:api/DefaultApi~updateChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Update the specified channel. You can edit if MediaPackage sends ingest or egress access logs to the CloudWatch log group, if content will be encrypted, the description on a channel, and your channel's policy settings. You can't edit the name of the channel or CloudFront distribution details.</p> <p>Any edits you make that impact the video output may not be reflected for a few minutes.</p>
     * @param {String} channelGroupName The name that describes the channel group. The name is the primary identifier for the channel group, and must be unique for your account in the AWS Region.
     * @param {String} channelName The name that describes the channel. The name is the primary identifier for the channel, and must be unique for your account in the AWS Region and channel group. 
     * @param {module:model/UpdateChannelRequest} updateChannelRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateChannelResponse}
     */
    updateChannel(channelGroupName, channelName, updateChannelRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateChannelRequest;
      // verify the required parameter 'channelGroupName' is set
      if (channelGroupName === undefined || channelGroupName === null) {
        throw new Error("Missing the required parameter 'channelGroupName' when calling updateChannel");
      }
      // verify the required parameter 'channelName' is set
      if (channelName === undefined || channelName === null) {
        throw new Error("Missing the required parameter 'channelName' when calling updateChannel");
      }
      // verify the required parameter 'updateChannelRequest' is set
      if (updateChannelRequest === undefined || updateChannelRequest === null) {
        throw new Error("Missing the required parameter 'updateChannelRequest' when calling updateChannel");
      }

      let pathParams = {
        'ChannelGroupName': channelGroupName,
        'ChannelName': channelName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateChannelResponse;
      return this.apiClient.callApi(
        '/channelGroup/{ChannelGroupName}/channel/{ChannelName}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateChannelGroup operation.
     * @callback module:api/DefaultApi~updateChannelGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateChannelGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Update the specified channel group. You can edit the description on a channel group for easier identification later from the AWS Elemental MediaPackage console. You can't edit the name of the channel group.</p> <p>Any edits you make that impact the video output may not be reflected for a few minutes.</p>
     * @param {String} channelGroupName The name that describes the channel group. The name is the primary identifier for the channel group, and must be unique for your account in the AWS Region.
     * @param {module:model/UpdateChannelGroupRequest} updateChannelGroupRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateChannelGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateChannelGroupResponse}
     */
    updateChannelGroup(channelGroupName, updateChannelGroupRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateChannelGroupRequest;
      // verify the required parameter 'channelGroupName' is set
      if (channelGroupName === undefined || channelGroupName === null) {
        throw new Error("Missing the required parameter 'channelGroupName' when calling updateChannelGroup");
      }
      // verify the required parameter 'updateChannelGroupRequest' is set
      if (updateChannelGroupRequest === undefined || updateChannelGroupRequest === null) {
        throw new Error("Missing the required parameter 'updateChannelGroupRequest' when calling updateChannelGroup");
      }

      let pathParams = {
        'ChannelGroupName': channelGroupName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateChannelGroupResponse;
      return this.apiClient.callApi(
        '/channelGroup/{ChannelGroupName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOriginEndpoint operation.
     * @callback module:api/DefaultApi~updateOriginEndpointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateOriginEndpointResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Update the specified origin endpoint. Edit the packaging preferences on an endpoint to optimize the viewing experience. You can't edit the name of the endpoint.</p> <p>Any edits you make that impact the video output may not be reflected for a few minutes.</p>
     * @param {String} channelGroupName The name that describes the channel group. The name is the primary identifier for the channel group, and must be unique for your account in the AWS Region.
     * @param {String} channelName The name that describes the channel. The name is the primary identifier for the channel, and must be unique for your account in the AWS Region and channel group. 
     * @param {String} originEndpointName The name that describes the origin endpoint. The name is the primary identifier for the origin endpoint, and and must be unique for your account in the AWS Region and channel. 
     * @param {module:model/UpdateOriginEndpointRequest} updateOriginEndpointRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateOriginEndpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateOriginEndpointResponse}
     */
    updateOriginEndpoint(channelGroupName, channelName, originEndpointName, updateOriginEndpointRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateOriginEndpointRequest;
      // verify the required parameter 'channelGroupName' is set
      if (channelGroupName === undefined || channelGroupName === null) {
        throw new Error("Missing the required parameter 'channelGroupName' when calling updateOriginEndpoint");
      }
      // verify the required parameter 'channelName' is set
      if (channelName === undefined || channelName === null) {
        throw new Error("Missing the required parameter 'channelName' when calling updateOriginEndpoint");
      }
      // verify the required parameter 'originEndpointName' is set
      if (originEndpointName === undefined || originEndpointName === null) {
        throw new Error("Missing the required parameter 'originEndpointName' when calling updateOriginEndpoint");
      }
      // verify the required parameter 'updateOriginEndpointRequest' is set
      if (updateOriginEndpointRequest === undefined || updateOriginEndpointRequest === null) {
        throw new Error("Missing the required parameter 'updateOriginEndpointRequest' when calling updateOriginEndpoint");
      }

      let pathParams = {
        'ChannelGroupName': channelGroupName,
        'ChannelName': channelName,
        'OriginEndpointName': originEndpointName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateOriginEndpointResponse;
      return this.apiClient.callApi(
        '/channelGroup/{ChannelGroupName}/channel/{ChannelName}/originEndpoint/{OriginEndpointName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
