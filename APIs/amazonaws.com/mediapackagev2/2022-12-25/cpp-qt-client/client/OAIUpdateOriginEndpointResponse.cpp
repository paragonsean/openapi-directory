/**
 * AWS Elemental MediaPackage v2
 * <note> <p>This guide is intended for creating AWS Elemental MediaPackage resources in MediaPackage Version 2 (v2) starting from May 2023. To get started with MediaPackage v2, create your MediaPackage resources. There isn't an automated process to migrate your resources from MediaPackage v1 to MediaPackage v2. </p> <p>The names of the entities that you use to access this API, like URLs and ARNs, all have the versioning information added, like \"v2\", to distinguish from the prior version. If you used MediaPackage prior to this release, you can't use the MediaPackage v2 CLI or the MediaPackage v2 API to access any MediaPackage v1 resources.</p> <p>If you created resources in MediaPackage v1, use video on demand (VOD) workflows, and aren't looking to migrate to MediaPackage v2 yet, see the <a href=\"https://docs.aws.amazon.com/mediapackage/latest/apireference/what-is.html\">MediaPackage v1 Live API Reference</a>.</p> </note> <p>This is the AWS Elemental MediaPackage v2 Live REST API Reference. It describes all the MediaPackage API operations for live content in detail, and provides sample requests, responses, and errors for the supported web services protocols.</p> <p>We assume that you have the IAM permissions that you need to use MediaPackage via the REST API. We also assume that you are familiar with the features and operations of MediaPackage, as described in the AWS Elemental MediaPackage User Guide.</p>
 *
 * The version of the OpenAPI document: 2022-12-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateOriginEndpointResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateOriginEndpointResponse::OAIUpdateOriginEndpointResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateOriginEndpointResponse::OAIUpdateOriginEndpointResponse() {
    this->initializeModel();
}

OAIUpdateOriginEndpointResponse::~OAIUpdateOriginEndpointResponse() {}

void OAIUpdateOriginEndpointResponse::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_channel_group_name_isSet = false;
    m_channel_group_name_isValid = false;

    m_channel_name_isSet = false;
    m_channel_name_isValid = false;

    m_origin_endpoint_name_isSet = false;
    m_origin_endpoint_name_isValid = false;

    m_container_type_isSet = false;
    m_container_type_isValid = false;

    m_segment_isSet = false;
    m_segment_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_modified_at_isSet = false;
    m_modified_at_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_startover_window_seconds_isSet = false;
    m_startover_window_seconds_isValid = false;

    m_hls_manifests_isSet = false;
    m_hls_manifests_isValid = false;

    m_low_latency_hls_manifests_isSet = false;
    m_low_latency_hls_manifests_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIUpdateOriginEndpointResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateOriginEndpointResponse::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_channel_group_name_isValid = ::OpenAPI::fromJsonValue(m_channel_group_name, json[QString("ChannelGroupName")]);
    m_channel_group_name_isSet = !json[QString("ChannelGroupName")].isNull() && m_channel_group_name_isValid;

    m_channel_name_isValid = ::OpenAPI::fromJsonValue(m_channel_name, json[QString("ChannelName")]);
    m_channel_name_isSet = !json[QString("ChannelName")].isNull() && m_channel_name_isValid;

    m_origin_endpoint_name_isValid = ::OpenAPI::fromJsonValue(m_origin_endpoint_name, json[QString("OriginEndpointName")]);
    m_origin_endpoint_name_isSet = !json[QString("OriginEndpointName")].isNull() && m_origin_endpoint_name_isValid;

    m_container_type_isValid = ::OpenAPI::fromJsonValue(m_container_type, json[QString("ContainerType")]);
    m_container_type_isSet = !json[QString("ContainerType")].isNull() && m_container_type_isValid;

    m_segment_isValid = ::OpenAPI::fromJsonValue(m_segment, json[QString("Segment")]);
    m_segment_isSet = !json[QString("Segment")].isNull() && m_segment_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("CreatedAt")]);
    m_created_at_isSet = !json[QString("CreatedAt")].isNull() && m_created_at_isValid;

    m_modified_at_isValid = ::OpenAPI::fromJsonValue(m_modified_at, json[QString("ModifiedAt")]);
    m_modified_at_isSet = !json[QString("ModifiedAt")].isNull() && m_modified_at_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_startover_window_seconds_isValid = ::OpenAPI::fromJsonValue(m_startover_window_seconds, json[QString("StartoverWindowSeconds")]);
    m_startover_window_seconds_isSet = !json[QString("StartoverWindowSeconds")].isNull() && m_startover_window_seconds_isValid;

    m_hls_manifests_isValid = ::OpenAPI::fromJsonValue(m_hls_manifests, json[QString("HlsManifests")]);
    m_hls_manifests_isSet = !json[QString("HlsManifests")].isNull() && m_hls_manifests_isValid;

    m_low_latency_hls_manifests_isValid = ::OpenAPI::fromJsonValue(m_low_latency_hls_manifests, json[QString("LowLatencyHlsManifests")]);
    m_low_latency_hls_manifests_isSet = !json[QString("LowLatencyHlsManifests")].isNull() && m_low_latency_hls_manifests_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIUpdateOriginEndpointResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateOriginEndpointResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_channel_group_name_isSet) {
        obj.insert(QString("ChannelGroupName"), ::OpenAPI::toJsonValue(m_channel_group_name));
    }
    if (m_channel_name_isSet) {
        obj.insert(QString("ChannelName"), ::OpenAPI::toJsonValue(m_channel_name));
    }
    if (m_origin_endpoint_name_isSet) {
        obj.insert(QString("OriginEndpointName"), ::OpenAPI::toJsonValue(m_origin_endpoint_name));
    }
    if (m_container_type.isSet()) {
        obj.insert(QString("ContainerType"), ::OpenAPI::toJsonValue(m_container_type));
    }
    if (m_segment.isSet()) {
        obj.insert(QString("Segment"), ::OpenAPI::toJsonValue(m_segment));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("CreatedAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_modified_at_isSet) {
        obj.insert(QString("ModifiedAt"), ::OpenAPI::toJsonValue(m_modified_at));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_startover_window_seconds_isSet) {
        obj.insert(QString("StartoverWindowSeconds"), ::OpenAPI::toJsonValue(m_startover_window_seconds));
    }
    if (m_hls_manifests.isSet()) {
        obj.insert(QString("HlsManifests"), ::OpenAPI::toJsonValue(m_hls_manifests));
    }
    if (m_low_latency_hls_manifests.isSet()) {
        obj.insert(QString("LowLatencyHlsManifests"), ::OpenAPI::toJsonValue(m_low_latency_hls_manifests));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIUpdateOriginEndpointResponse::getArn() const {
    return m_arn;
}
void OAIUpdateOriginEndpointResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIUpdateOriginEndpointResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIUpdateOriginEndpointResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIUpdateOriginEndpointResponse::getChannelGroupName() const {
    return m_channel_group_name;
}
void OAIUpdateOriginEndpointResponse::setChannelGroupName(const QString &channel_group_name) {
    m_channel_group_name = channel_group_name;
    m_channel_group_name_isSet = true;
}

bool OAIUpdateOriginEndpointResponse::is_channel_group_name_Set() const{
    return m_channel_group_name_isSet;
}

bool OAIUpdateOriginEndpointResponse::is_channel_group_name_Valid() const{
    return m_channel_group_name_isValid;
}

QString OAIUpdateOriginEndpointResponse::getChannelName() const {
    return m_channel_name;
}
void OAIUpdateOriginEndpointResponse::setChannelName(const QString &channel_name) {
    m_channel_name = channel_name;
    m_channel_name_isSet = true;
}

bool OAIUpdateOriginEndpointResponse::is_channel_name_Set() const{
    return m_channel_name_isSet;
}

bool OAIUpdateOriginEndpointResponse::is_channel_name_Valid() const{
    return m_channel_name_isValid;
}

QString OAIUpdateOriginEndpointResponse::getOriginEndpointName() const {
    return m_origin_endpoint_name;
}
void OAIUpdateOriginEndpointResponse::setOriginEndpointName(const QString &origin_endpoint_name) {
    m_origin_endpoint_name = origin_endpoint_name;
    m_origin_endpoint_name_isSet = true;
}

bool OAIUpdateOriginEndpointResponse::is_origin_endpoint_name_Set() const{
    return m_origin_endpoint_name_isSet;
}

bool OAIUpdateOriginEndpointResponse::is_origin_endpoint_name_Valid() const{
    return m_origin_endpoint_name_isValid;
}

OAIContainerType OAIUpdateOriginEndpointResponse::getContainerType() const {
    return m_container_type;
}
void OAIUpdateOriginEndpointResponse::setContainerType(const OAIContainerType &container_type) {
    m_container_type = container_type;
    m_container_type_isSet = true;
}

bool OAIUpdateOriginEndpointResponse::is_container_type_Set() const{
    return m_container_type_isSet;
}

bool OAIUpdateOriginEndpointResponse::is_container_type_Valid() const{
    return m_container_type_isValid;
}

OAICreateOriginEndpointResponse_Segment OAIUpdateOriginEndpointResponse::getSegment() const {
    return m_segment;
}
void OAIUpdateOriginEndpointResponse::setSegment(const OAICreateOriginEndpointResponse_Segment &segment) {
    m_segment = segment;
    m_segment_isSet = true;
}

bool OAIUpdateOriginEndpointResponse::is_segment_Set() const{
    return m_segment_isSet;
}

bool OAIUpdateOriginEndpointResponse::is_segment_Valid() const{
    return m_segment_isValid;
}

QDateTime OAIUpdateOriginEndpointResponse::getCreatedAt() const {
    return m_created_at;
}
void OAIUpdateOriginEndpointResponse::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIUpdateOriginEndpointResponse::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIUpdateOriginEndpointResponse::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAIUpdateOriginEndpointResponse::getModifiedAt() const {
    return m_modified_at;
}
void OAIUpdateOriginEndpointResponse::setModifiedAt(const QDateTime &modified_at) {
    m_modified_at = modified_at;
    m_modified_at_isSet = true;
}

bool OAIUpdateOriginEndpointResponse::is_modified_at_Set() const{
    return m_modified_at_isSet;
}

bool OAIUpdateOriginEndpointResponse::is_modified_at_Valid() const{
    return m_modified_at_isValid;
}

QString OAIUpdateOriginEndpointResponse::getDescription() const {
    return m_description;
}
void OAIUpdateOriginEndpointResponse::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpdateOriginEndpointResponse::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdateOriginEndpointResponse::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIUpdateOriginEndpointResponse::getStartoverWindowSeconds() const {
    return m_startover_window_seconds;
}
void OAIUpdateOriginEndpointResponse::setStartoverWindowSeconds(const qint32 &startover_window_seconds) {
    m_startover_window_seconds = startover_window_seconds;
    m_startover_window_seconds_isSet = true;
}

bool OAIUpdateOriginEndpointResponse::is_startover_window_seconds_Set() const{
    return m_startover_window_seconds_isSet;
}

bool OAIUpdateOriginEndpointResponse::is_startover_window_seconds_Valid() const{
    return m_startover_window_seconds_isValid;
}

QList OAIUpdateOriginEndpointResponse::getHlsManifests() const {
    return m_hls_manifests;
}
void OAIUpdateOriginEndpointResponse::setHlsManifests(const QList &hls_manifests) {
    m_hls_manifests = hls_manifests;
    m_hls_manifests_isSet = true;
}

bool OAIUpdateOriginEndpointResponse::is_hls_manifests_Set() const{
    return m_hls_manifests_isSet;
}

bool OAIUpdateOriginEndpointResponse::is_hls_manifests_Valid() const{
    return m_hls_manifests_isValid;
}

QList OAIUpdateOriginEndpointResponse::getLowLatencyHlsManifests() const {
    return m_low_latency_hls_manifests;
}
void OAIUpdateOriginEndpointResponse::setLowLatencyHlsManifests(const QList &low_latency_hls_manifests) {
    m_low_latency_hls_manifests = low_latency_hls_manifests;
    m_low_latency_hls_manifests_isSet = true;
}

bool OAIUpdateOriginEndpointResponse::is_low_latency_hls_manifests_Set() const{
    return m_low_latency_hls_manifests_isSet;
}

bool OAIUpdateOriginEndpointResponse::is_low_latency_hls_manifests_Valid() const{
    return m_low_latency_hls_manifests_isValid;
}

QMap OAIUpdateOriginEndpointResponse::getTags() const {
    return m_tags;
}
void OAIUpdateOriginEndpointResponse::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIUpdateOriginEndpointResponse::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIUpdateOriginEndpointResponse::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIUpdateOriginEndpointResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_endpoint_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_startover_window_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hls_manifests.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_low_latency_hls_manifests.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateOriginEndpointResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_arn_isValid && m_channel_group_name_isValid && m_channel_name_isValid && m_origin_endpoint_name_isValid && m_container_type_isValid && m_segment_isValid && m_created_at_isValid && m_modified_at_isValid && true;
}

} // namespace OpenAPI
