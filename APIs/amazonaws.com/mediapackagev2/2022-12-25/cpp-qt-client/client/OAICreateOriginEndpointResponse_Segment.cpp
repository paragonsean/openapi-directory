/**
 * AWS Elemental MediaPackage v2
 * <note> <p>This guide is intended for creating AWS Elemental MediaPackage resources in MediaPackage Version 2 (v2) starting from May 2023. To get started with MediaPackage v2, create your MediaPackage resources. There isn't an automated process to migrate your resources from MediaPackage v1 to MediaPackage v2. </p> <p>The names of the entities that you use to access this API, like URLs and ARNs, all have the versioning information added, like \"v2\", to distinguish from the prior version. If you used MediaPackage prior to this release, you can't use the MediaPackage v2 CLI or the MediaPackage v2 API to access any MediaPackage v1 resources.</p> <p>If you created resources in MediaPackage v1, use video on demand (VOD) workflows, and aren't looking to migrate to MediaPackage v2 yet, see the <a href=\"https://docs.aws.amazon.com/mediapackage/latest/apireference/what-is.html\">MediaPackage v1 Live API Reference</a>.</p> </note> <p>This is the AWS Elemental MediaPackage v2 Live REST API Reference. It describes all the MediaPackage API operations for live content in detail, and provides sample requests, responses, and errors for the supported web services protocols.</p> <p>We assume that you have the IAM permissions that you need to use MediaPackage via the REST API. We also assume that you are familiar with the features and operations of MediaPackage, as described in the AWS Elemental MediaPackage User Guide.</p>
 *
 * The version of the OpenAPI document: 2022-12-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateOriginEndpointResponse_Segment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateOriginEndpointResponse_Segment::OAICreateOriginEndpointResponse_Segment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateOriginEndpointResponse_Segment::OAICreateOriginEndpointResponse_Segment() {
    this->initializeModel();
}

OAICreateOriginEndpointResponse_Segment::~OAICreateOriginEndpointResponse_Segment() {}

void OAICreateOriginEndpointResponse_Segment::initializeModel() {

    m_segment_duration_seconds_isSet = false;
    m_segment_duration_seconds_isValid = false;

    m_segment_name_isSet = false;
    m_segment_name_isValid = false;

    m_ts_use_audio_rendition_group_isSet = false;
    m_ts_use_audio_rendition_group_isValid = false;

    m_include_iframe_only_streams_isSet = false;
    m_include_iframe_only_streams_isValid = false;

    m_ts_include_dvb_subtitles_isSet = false;
    m_ts_include_dvb_subtitles_isValid = false;

    m_scte_isSet = false;
    m_scte_isValid = false;

    m_encryption_isSet = false;
    m_encryption_isValid = false;
}

void OAICreateOriginEndpointResponse_Segment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateOriginEndpointResponse_Segment::fromJsonObject(QJsonObject json) {

    m_segment_duration_seconds_isValid = ::OpenAPI::fromJsonValue(m_segment_duration_seconds, json[QString("SegmentDurationSeconds")]);
    m_segment_duration_seconds_isSet = !json[QString("SegmentDurationSeconds")].isNull() && m_segment_duration_seconds_isValid;

    m_segment_name_isValid = ::OpenAPI::fromJsonValue(m_segment_name, json[QString("SegmentName")]);
    m_segment_name_isSet = !json[QString("SegmentName")].isNull() && m_segment_name_isValid;

    m_ts_use_audio_rendition_group_isValid = ::OpenAPI::fromJsonValue(m_ts_use_audio_rendition_group, json[QString("TsUseAudioRenditionGroup")]);
    m_ts_use_audio_rendition_group_isSet = !json[QString("TsUseAudioRenditionGroup")].isNull() && m_ts_use_audio_rendition_group_isValid;

    m_include_iframe_only_streams_isValid = ::OpenAPI::fromJsonValue(m_include_iframe_only_streams, json[QString("IncludeIframeOnlyStreams")]);
    m_include_iframe_only_streams_isSet = !json[QString("IncludeIframeOnlyStreams")].isNull() && m_include_iframe_only_streams_isValid;

    m_ts_include_dvb_subtitles_isValid = ::OpenAPI::fromJsonValue(m_ts_include_dvb_subtitles, json[QString("TsIncludeDvbSubtitles")]);
    m_ts_include_dvb_subtitles_isSet = !json[QString("TsIncludeDvbSubtitles")].isNull() && m_ts_include_dvb_subtitles_isValid;

    m_scte_isValid = ::OpenAPI::fromJsonValue(m_scte, json[QString("Scte")]);
    m_scte_isSet = !json[QString("Scte")].isNull() && m_scte_isValid;

    m_encryption_isValid = ::OpenAPI::fromJsonValue(m_encryption, json[QString("Encryption")]);
    m_encryption_isSet = !json[QString("Encryption")].isNull() && m_encryption_isValid;
}

QString OAICreateOriginEndpointResponse_Segment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateOriginEndpointResponse_Segment::asJsonObject() const {
    QJsonObject obj;
    if (m_segment_duration_seconds_isSet) {
        obj.insert(QString("SegmentDurationSeconds"), ::OpenAPI::toJsonValue(m_segment_duration_seconds));
    }
    if (m_segment_name_isSet) {
        obj.insert(QString("SegmentName"), ::OpenAPI::toJsonValue(m_segment_name));
    }
    if (m_ts_use_audio_rendition_group_isSet) {
        obj.insert(QString("TsUseAudioRenditionGroup"), ::OpenAPI::toJsonValue(m_ts_use_audio_rendition_group));
    }
    if (m_include_iframe_only_streams_isSet) {
        obj.insert(QString("IncludeIframeOnlyStreams"), ::OpenAPI::toJsonValue(m_include_iframe_only_streams));
    }
    if (m_ts_include_dvb_subtitles_isSet) {
        obj.insert(QString("TsIncludeDvbSubtitles"), ::OpenAPI::toJsonValue(m_ts_include_dvb_subtitles));
    }
    if (m_scte.isSet()) {
        obj.insert(QString("Scte"), ::OpenAPI::toJsonValue(m_scte));
    }
    if (m_encryption.isSet()) {
        obj.insert(QString("Encryption"), ::OpenAPI::toJsonValue(m_encryption));
    }
    return obj;
}

qint32 OAICreateOriginEndpointResponse_Segment::getSegmentDurationSeconds() const {
    return m_segment_duration_seconds;
}
void OAICreateOriginEndpointResponse_Segment::setSegmentDurationSeconds(const qint32 &segment_duration_seconds) {
    m_segment_duration_seconds = segment_duration_seconds;
    m_segment_duration_seconds_isSet = true;
}

bool OAICreateOriginEndpointResponse_Segment::is_segment_duration_seconds_Set() const{
    return m_segment_duration_seconds_isSet;
}

bool OAICreateOriginEndpointResponse_Segment::is_segment_duration_seconds_Valid() const{
    return m_segment_duration_seconds_isValid;
}

QString OAICreateOriginEndpointResponse_Segment::getSegmentName() const {
    return m_segment_name;
}
void OAICreateOriginEndpointResponse_Segment::setSegmentName(const QString &segment_name) {
    m_segment_name = segment_name;
    m_segment_name_isSet = true;
}

bool OAICreateOriginEndpointResponse_Segment::is_segment_name_Set() const{
    return m_segment_name_isSet;
}

bool OAICreateOriginEndpointResponse_Segment::is_segment_name_Valid() const{
    return m_segment_name_isValid;
}

bool OAICreateOriginEndpointResponse_Segment::getTsUseAudioRenditionGroup() const {
    return m_ts_use_audio_rendition_group;
}
void OAICreateOriginEndpointResponse_Segment::setTsUseAudioRenditionGroup(const bool &ts_use_audio_rendition_group) {
    m_ts_use_audio_rendition_group = ts_use_audio_rendition_group;
    m_ts_use_audio_rendition_group_isSet = true;
}

bool OAICreateOriginEndpointResponse_Segment::is_ts_use_audio_rendition_group_Set() const{
    return m_ts_use_audio_rendition_group_isSet;
}

bool OAICreateOriginEndpointResponse_Segment::is_ts_use_audio_rendition_group_Valid() const{
    return m_ts_use_audio_rendition_group_isValid;
}

bool OAICreateOriginEndpointResponse_Segment::getIncludeIframeOnlyStreams() const {
    return m_include_iframe_only_streams;
}
void OAICreateOriginEndpointResponse_Segment::setIncludeIframeOnlyStreams(const bool &include_iframe_only_streams) {
    m_include_iframe_only_streams = include_iframe_only_streams;
    m_include_iframe_only_streams_isSet = true;
}

bool OAICreateOriginEndpointResponse_Segment::is_include_iframe_only_streams_Set() const{
    return m_include_iframe_only_streams_isSet;
}

bool OAICreateOriginEndpointResponse_Segment::is_include_iframe_only_streams_Valid() const{
    return m_include_iframe_only_streams_isValid;
}

bool OAICreateOriginEndpointResponse_Segment::getTsIncludeDvbSubtitles() const {
    return m_ts_include_dvb_subtitles;
}
void OAICreateOriginEndpointResponse_Segment::setTsIncludeDvbSubtitles(const bool &ts_include_dvb_subtitles) {
    m_ts_include_dvb_subtitles = ts_include_dvb_subtitles;
    m_ts_include_dvb_subtitles_isSet = true;
}

bool OAICreateOriginEndpointResponse_Segment::is_ts_include_dvb_subtitles_Set() const{
    return m_ts_include_dvb_subtitles_isSet;
}

bool OAICreateOriginEndpointResponse_Segment::is_ts_include_dvb_subtitles_Valid() const{
    return m_ts_include_dvb_subtitles_isValid;
}

OAICreateOriginEndpoint_request_Segment_Scte OAICreateOriginEndpointResponse_Segment::getScte() const {
    return m_scte;
}
void OAICreateOriginEndpointResponse_Segment::setScte(const OAICreateOriginEndpoint_request_Segment_Scte &scte) {
    m_scte = scte;
    m_scte_isSet = true;
}

bool OAICreateOriginEndpointResponse_Segment::is_scte_Set() const{
    return m_scte_isSet;
}

bool OAICreateOriginEndpointResponse_Segment::is_scte_Valid() const{
    return m_scte_isValid;
}

OAIEncryption OAICreateOriginEndpointResponse_Segment::getEncryption() const {
    return m_encryption;
}
void OAICreateOriginEndpointResponse_Segment::setEncryption(const OAIEncryption &encryption) {
    m_encryption = encryption;
    m_encryption_isSet = true;
}

bool OAICreateOriginEndpointResponse_Segment::is_encryption_Set() const{
    return m_encryption_isSet;
}

bool OAICreateOriginEndpointResponse_Segment::is_encryption_Valid() const{
    return m_encryption_isValid;
}

bool OAICreateOriginEndpointResponse_Segment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_segment_duration_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ts_use_audio_rendition_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_iframe_only_streams_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ts_include_dvb_subtitles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scte.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateOriginEndpointResponse_Segment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
