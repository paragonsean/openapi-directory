/**
 * AWS Elemental MediaPackage v2
 * <note> <p>This guide is intended for creating AWS Elemental MediaPackage resources in MediaPackage Version 2 (v2) starting from May 2023. To get started with MediaPackage v2, create your MediaPackage resources. There isn't an automated process to migrate your resources from MediaPackage v1 to MediaPackage v2. </p> <p>The names of the entities that you use to access this API, like URLs and ARNs, all have the versioning information added, like \"v2\", to distinguish from the prior version. If you used MediaPackage prior to this release, you can't use the MediaPackage v2 CLI or the MediaPackage v2 API to access any MediaPackage v1 resources.</p> <p>If you created resources in MediaPackage v1, use video on demand (VOD) workflows, and aren't looking to migrate to MediaPackage v2 yet, see the <a href=\"https://docs.aws.amazon.com/mediapackage/latest/apireference/what-is.html\">MediaPackage v1 Live API Reference</a>.</p> </note> <p>This is the AWS Elemental MediaPackage v2 Live REST API Reference. It describes all the MediaPackage API operations for live content in detail, and provides sample requests, responses, and errors for the supported web services protocols.</p> <p>We assume that you have the IAM permissions that you need to use MediaPackage via the REST API. We also assume that you are familiar with the features and operations of MediaPackage, as described in the AWS Elemental MediaPackage User Guide.</p>
 *
 * The version of the OpenAPI document: 2022-12-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetChannelResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetChannelResponse::OAIGetChannelResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetChannelResponse::OAIGetChannelResponse() {
    this->initializeModel();
}

OAIGetChannelResponse::~OAIGetChannelResponse() {}

void OAIGetChannelResponse::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_channel_name_isSet = false;
    m_channel_name_isValid = false;

    m_channel_group_name_isSet = false;
    m_channel_group_name_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_modified_at_isSet = false;
    m_modified_at_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_ingest_endpoints_isSet = false;
    m_ingest_endpoints_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIGetChannelResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetChannelResponse::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_channel_name_isValid = ::OpenAPI::fromJsonValue(m_channel_name, json[QString("ChannelName")]);
    m_channel_name_isSet = !json[QString("ChannelName")].isNull() && m_channel_name_isValid;

    m_channel_group_name_isValid = ::OpenAPI::fromJsonValue(m_channel_group_name, json[QString("ChannelGroupName")]);
    m_channel_group_name_isSet = !json[QString("ChannelGroupName")].isNull() && m_channel_group_name_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("CreatedAt")]);
    m_created_at_isSet = !json[QString("CreatedAt")].isNull() && m_created_at_isValid;

    m_modified_at_isValid = ::OpenAPI::fromJsonValue(m_modified_at, json[QString("ModifiedAt")]);
    m_modified_at_isSet = !json[QString("ModifiedAt")].isNull() && m_modified_at_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_ingest_endpoints_isValid = ::OpenAPI::fromJsonValue(m_ingest_endpoints, json[QString("IngestEndpoints")]);
    m_ingest_endpoints_isSet = !json[QString("IngestEndpoints")].isNull() && m_ingest_endpoints_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIGetChannelResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetChannelResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_channel_name_isSet) {
        obj.insert(QString("ChannelName"), ::OpenAPI::toJsonValue(m_channel_name));
    }
    if (m_channel_group_name_isSet) {
        obj.insert(QString("ChannelGroupName"), ::OpenAPI::toJsonValue(m_channel_group_name));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("CreatedAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_modified_at_isSet) {
        obj.insert(QString("ModifiedAt"), ::OpenAPI::toJsonValue(m_modified_at));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_ingest_endpoints.size() > 0) {
        obj.insert(QString("IngestEndpoints"), ::OpenAPI::toJsonValue(m_ingest_endpoints));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIGetChannelResponse::getArn() const {
    return m_arn;
}
void OAIGetChannelResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIGetChannelResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIGetChannelResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIGetChannelResponse::getChannelName() const {
    return m_channel_name;
}
void OAIGetChannelResponse::setChannelName(const QString &channel_name) {
    m_channel_name = channel_name;
    m_channel_name_isSet = true;
}

bool OAIGetChannelResponse::is_channel_name_Set() const{
    return m_channel_name_isSet;
}

bool OAIGetChannelResponse::is_channel_name_Valid() const{
    return m_channel_name_isValid;
}

QString OAIGetChannelResponse::getChannelGroupName() const {
    return m_channel_group_name;
}
void OAIGetChannelResponse::setChannelGroupName(const QString &channel_group_name) {
    m_channel_group_name = channel_group_name;
    m_channel_group_name_isSet = true;
}

bool OAIGetChannelResponse::is_channel_group_name_Set() const{
    return m_channel_group_name_isSet;
}

bool OAIGetChannelResponse::is_channel_group_name_Valid() const{
    return m_channel_group_name_isValid;
}

QDateTime OAIGetChannelResponse::getCreatedAt() const {
    return m_created_at;
}
void OAIGetChannelResponse::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIGetChannelResponse::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIGetChannelResponse::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAIGetChannelResponse::getModifiedAt() const {
    return m_modified_at;
}
void OAIGetChannelResponse::setModifiedAt(const QDateTime &modified_at) {
    m_modified_at = modified_at;
    m_modified_at_isSet = true;
}

bool OAIGetChannelResponse::is_modified_at_Set() const{
    return m_modified_at_isSet;
}

bool OAIGetChannelResponse::is_modified_at_Valid() const{
    return m_modified_at_isValid;
}

QString OAIGetChannelResponse::getDescription() const {
    return m_description;
}
void OAIGetChannelResponse::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGetChannelResponse::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGetChannelResponse::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIIngestEndpoint> OAIGetChannelResponse::getIngestEndpoints() const {
    return m_ingest_endpoints;
}
void OAIGetChannelResponse::setIngestEndpoints(const QList<OAIIngestEndpoint> &ingest_endpoints) {
    m_ingest_endpoints = ingest_endpoints;
    m_ingest_endpoints_isSet = true;
}

bool OAIGetChannelResponse::is_ingest_endpoints_Set() const{
    return m_ingest_endpoints_isSet;
}

bool OAIGetChannelResponse::is_ingest_endpoints_Valid() const{
    return m_ingest_endpoints_isValid;
}

QMap OAIGetChannelResponse::getTags() const {
    return m_tags;
}
void OAIGetChannelResponse::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIGetChannelResponse::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIGetChannelResponse::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIGetChannelResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ingest_endpoints.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetChannelResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_arn_isValid && m_channel_name_isValid && m_channel_group_name_isValid && m_created_at_isValid && m_modified_at_isValid && true;
}

} // namespace OpenAPI
