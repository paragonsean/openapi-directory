/**
 * AWS Elemental MediaPackage v2
 * <note> <p>This guide is intended for creating AWS Elemental MediaPackage resources in MediaPackage Version 2 (v2) starting from May 2023. To get started with MediaPackage v2, create your MediaPackage resources. There isn't an automated process to migrate your resources from MediaPackage v1 to MediaPackage v2. </p> <p>The names of the entities that you use to access this API, like URLs and ARNs, all have the versioning information added, like \"v2\", to distinguish from the prior version. If you used MediaPackage prior to this release, you can't use the MediaPackage v2 CLI or the MediaPackage v2 API to access any MediaPackage v1 resources.</p> <p>If you created resources in MediaPackage v1, use video on demand (VOD) workflows, and aren't looking to migrate to MediaPackage v2 yet, see the <a href=\"https://docs.aws.amazon.com/mediapackage/latest/apireference/what-is.html\">MediaPackage v1 Live API Reference</a>.</p> </note> <p>This is the AWS Elemental MediaPackage v2 Live REST API Reference. It describes all the MediaPackage API operations for live content in detail, and provides sample requests, responses, and errors for the supported web services protocols.</p> <p>We assume that you have the IAM permissions that you need to use MediaPackage via the REST API. We also assume that you are familiar with the features and operations of MediaPackage, as described in the AWS Elemental MediaPackage User Guide.</p>
 *
 * The version of the OpenAPI document: 2022-12-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateOriginEndpoint_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateOriginEndpoint_request::OAICreateOriginEndpoint_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateOriginEndpoint_request::OAICreateOriginEndpoint_request() {
    this->initializeModel();
}

OAICreateOriginEndpoint_request::~OAICreateOriginEndpoint_request() {}

void OAICreateOriginEndpoint_request::initializeModel() {

    m_origin_endpoint_name_isSet = false;
    m_origin_endpoint_name_isValid = false;

    m_container_type_isSet = false;
    m_container_type_isValid = false;

    m_segment_isSet = false;
    m_segment_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_startover_window_seconds_isSet = false;
    m_startover_window_seconds_isValid = false;

    m_hls_manifests_isSet = false;
    m_hls_manifests_isValid = false;

    m_low_latency_hls_manifests_isSet = false;
    m_low_latency_hls_manifests_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateOriginEndpoint_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateOriginEndpoint_request::fromJsonObject(QJsonObject json) {

    m_origin_endpoint_name_isValid = ::OpenAPI::fromJsonValue(m_origin_endpoint_name, json[QString("OriginEndpointName")]);
    m_origin_endpoint_name_isSet = !json[QString("OriginEndpointName")].isNull() && m_origin_endpoint_name_isValid;

    m_container_type_isValid = ::OpenAPI::fromJsonValue(m_container_type, json[QString("ContainerType")]);
    m_container_type_isSet = !json[QString("ContainerType")].isNull() && m_container_type_isValid;

    m_segment_isValid = ::OpenAPI::fromJsonValue(m_segment, json[QString("Segment")]);
    m_segment_isSet = !json[QString("Segment")].isNull() && m_segment_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_startover_window_seconds_isValid = ::OpenAPI::fromJsonValue(m_startover_window_seconds, json[QString("StartoverWindowSeconds")]);
    m_startover_window_seconds_isSet = !json[QString("StartoverWindowSeconds")].isNull() && m_startover_window_seconds_isValid;

    m_hls_manifests_isValid = ::OpenAPI::fromJsonValue(m_hls_manifests, json[QString("HlsManifests")]);
    m_hls_manifests_isSet = !json[QString("HlsManifests")].isNull() && m_hls_manifests_isValid;

    m_low_latency_hls_manifests_isValid = ::OpenAPI::fromJsonValue(m_low_latency_hls_manifests, json[QString("LowLatencyHlsManifests")]);
    m_low_latency_hls_manifests_isSet = !json[QString("LowLatencyHlsManifests")].isNull() && m_low_latency_hls_manifests_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateOriginEndpoint_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateOriginEndpoint_request::asJsonObject() const {
    QJsonObject obj;
    if (m_origin_endpoint_name_isSet) {
        obj.insert(QString("OriginEndpointName"), ::OpenAPI::toJsonValue(m_origin_endpoint_name));
    }
    if (m_container_type_isSet) {
        obj.insert(QString("ContainerType"), ::OpenAPI::toJsonValue(m_container_type));
    }
    if (m_segment.isSet()) {
        obj.insert(QString("Segment"), ::OpenAPI::toJsonValue(m_segment));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_startover_window_seconds_isSet) {
        obj.insert(QString("StartoverWindowSeconds"), ::OpenAPI::toJsonValue(m_startover_window_seconds));
    }
    if (m_hls_manifests.size() > 0) {
        obj.insert(QString("HlsManifests"), ::OpenAPI::toJsonValue(m_hls_manifests));
    }
    if (m_low_latency_hls_manifests.size() > 0) {
        obj.insert(QString("LowLatencyHlsManifests"), ::OpenAPI::toJsonValue(m_low_latency_hls_manifests));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateOriginEndpoint_request::getOriginEndpointName() const {
    return m_origin_endpoint_name;
}
void OAICreateOriginEndpoint_request::setOriginEndpointName(const QString &origin_endpoint_name) {
    m_origin_endpoint_name = origin_endpoint_name;
    m_origin_endpoint_name_isSet = true;
}

bool OAICreateOriginEndpoint_request::is_origin_endpoint_name_Set() const{
    return m_origin_endpoint_name_isSet;
}

bool OAICreateOriginEndpoint_request::is_origin_endpoint_name_Valid() const{
    return m_origin_endpoint_name_isValid;
}

QString OAICreateOriginEndpoint_request::getContainerType() const {
    return m_container_type;
}
void OAICreateOriginEndpoint_request::setContainerType(const QString &container_type) {
    m_container_type = container_type;
    m_container_type_isSet = true;
}

bool OAICreateOriginEndpoint_request::is_container_type_Set() const{
    return m_container_type_isSet;
}

bool OAICreateOriginEndpoint_request::is_container_type_Valid() const{
    return m_container_type_isValid;
}

OAICreateOriginEndpoint_request_Segment OAICreateOriginEndpoint_request::getSegment() const {
    return m_segment;
}
void OAICreateOriginEndpoint_request::setSegment(const OAICreateOriginEndpoint_request_Segment &segment) {
    m_segment = segment;
    m_segment_isSet = true;
}

bool OAICreateOriginEndpoint_request::is_segment_Set() const{
    return m_segment_isSet;
}

bool OAICreateOriginEndpoint_request::is_segment_Valid() const{
    return m_segment_isValid;
}

QString OAICreateOriginEndpoint_request::getDescription() const {
    return m_description;
}
void OAICreateOriginEndpoint_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateOriginEndpoint_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateOriginEndpoint_request::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAICreateOriginEndpoint_request::getStartoverWindowSeconds() const {
    return m_startover_window_seconds;
}
void OAICreateOriginEndpoint_request::setStartoverWindowSeconds(const qint32 &startover_window_seconds) {
    m_startover_window_seconds = startover_window_seconds;
    m_startover_window_seconds_isSet = true;
}

bool OAICreateOriginEndpoint_request::is_startover_window_seconds_Set() const{
    return m_startover_window_seconds_isSet;
}

bool OAICreateOriginEndpoint_request::is_startover_window_seconds_Valid() const{
    return m_startover_window_seconds_isValid;
}

QList<OAICreateHlsManifestConfiguration> OAICreateOriginEndpoint_request::getHlsManifests() const {
    return m_hls_manifests;
}
void OAICreateOriginEndpoint_request::setHlsManifests(const QList<OAICreateHlsManifestConfiguration> &hls_manifests) {
    m_hls_manifests = hls_manifests;
    m_hls_manifests_isSet = true;
}

bool OAICreateOriginEndpoint_request::is_hls_manifests_Set() const{
    return m_hls_manifests_isSet;
}

bool OAICreateOriginEndpoint_request::is_hls_manifests_Valid() const{
    return m_hls_manifests_isValid;
}

QList<OAICreateLowLatencyHlsManifestConfiguration> OAICreateOriginEndpoint_request::getLowLatencyHlsManifests() const {
    return m_low_latency_hls_manifests;
}
void OAICreateOriginEndpoint_request::setLowLatencyHlsManifests(const QList<OAICreateLowLatencyHlsManifestConfiguration> &low_latency_hls_manifests) {
    m_low_latency_hls_manifests = low_latency_hls_manifests;
    m_low_latency_hls_manifests_isSet = true;
}

bool OAICreateOriginEndpoint_request::is_low_latency_hls_manifests_Set() const{
    return m_low_latency_hls_manifests_isSet;
}

bool OAICreateOriginEndpoint_request::is_low_latency_hls_manifests_Valid() const{
    return m_low_latency_hls_manifests_isValid;
}

QMap<QString, QString> OAICreateOriginEndpoint_request::getTags() const {
    return m_tags;
}
void OAICreateOriginEndpoint_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateOriginEndpoint_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateOriginEndpoint_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateOriginEndpoint_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_origin_endpoint_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_startover_window_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hls_manifests.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_low_latency_hls_manifests.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateOriginEndpoint_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_origin_endpoint_name_isValid && m_container_type_isValid && true;
}

} // namespace OpenAPI
