/*
 * AWS License Manager Linux Subscriptions
 * With License Manager, you can discover and track your commercial Linux subscriptions on running Amazon EC2 instances.
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.UpdateServiceSettingsRequestLinuxSubscriptionsDiscoverySettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateServiceSettingsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:25.047728-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateServiceSettingsRequest {
  public static final String SERIALIZED_NAME_ALLOW_UPDATE = "AllowUpdate";
  @SerializedName(SERIALIZED_NAME_ALLOW_UPDATE)
  private Boolean allowUpdate;

  /**
   * Describes if the discovery of Linux subscriptions is enabled.
   */
  @JsonAdapter(LinuxSubscriptionsDiscoveryEnum.Adapter.class)
  public enum LinuxSubscriptionsDiscoveryEnum {
    ENABLED("Enabled"),
    
    DISABLED("Disabled");

    private String value;

    LinuxSubscriptionsDiscoveryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LinuxSubscriptionsDiscoveryEnum fromValue(String value) {
      for (LinuxSubscriptionsDiscoveryEnum b : LinuxSubscriptionsDiscoveryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LinuxSubscriptionsDiscoveryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LinuxSubscriptionsDiscoveryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LinuxSubscriptionsDiscoveryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LinuxSubscriptionsDiscoveryEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LinuxSubscriptionsDiscoveryEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LINUX_SUBSCRIPTIONS_DISCOVERY = "LinuxSubscriptionsDiscovery";
  @SerializedName(SERIALIZED_NAME_LINUX_SUBSCRIPTIONS_DISCOVERY)
  private LinuxSubscriptionsDiscoveryEnum linuxSubscriptionsDiscovery;

  public static final String SERIALIZED_NAME_LINUX_SUBSCRIPTIONS_DISCOVERY_SETTINGS = "LinuxSubscriptionsDiscoverySettings";
  @SerializedName(SERIALIZED_NAME_LINUX_SUBSCRIPTIONS_DISCOVERY_SETTINGS)
  private UpdateServiceSettingsRequestLinuxSubscriptionsDiscoverySettings linuxSubscriptionsDiscoverySettings;

  public UpdateServiceSettingsRequest() {
  }

  public UpdateServiceSettingsRequest allowUpdate(Boolean allowUpdate) {
    this.allowUpdate = allowUpdate;
    return this;
  }

  /**
   * Describes if updates are allowed to the service settings for Linux subscriptions. If you allow updates, you can aggregate Linux subscription data in more than one home Region.
   * @return allowUpdate
   */
  @javax.annotation.Nullable
  public Boolean getAllowUpdate() {
    return allowUpdate;
  }

  public void setAllowUpdate(Boolean allowUpdate) {
    this.allowUpdate = allowUpdate;
  }


  public UpdateServiceSettingsRequest linuxSubscriptionsDiscovery(LinuxSubscriptionsDiscoveryEnum linuxSubscriptionsDiscovery) {
    this.linuxSubscriptionsDiscovery = linuxSubscriptionsDiscovery;
    return this;
  }

  /**
   * Describes if the discovery of Linux subscriptions is enabled.
   * @return linuxSubscriptionsDiscovery
   */
  @javax.annotation.Nonnull
  public LinuxSubscriptionsDiscoveryEnum getLinuxSubscriptionsDiscovery() {
    return linuxSubscriptionsDiscovery;
  }

  public void setLinuxSubscriptionsDiscovery(LinuxSubscriptionsDiscoveryEnum linuxSubscriptionsDiscovery) {
    this.linuxSubscriptionsDiscovery = linuxSubscriptionsDiscovery;
  }


  public UpdateServiceSettingsRequest linuxSubscriptionsDiscoverySettings(UpdateServiceSettingsRequestLinuxSubscriptionsDiscoverySettings linuxSubscriptionsDiscoverySettings) {
    this.linuxSubscriptionsDiscoverySettings = linuxSubscriptionsDiscoverySettings;
    return this;
  }

  /**
   * Get linuxSubscriptionsDiscoverySettings
   * @return linuxSubscriptionsDiscoverySettings
   */
  @javax.annotation.Nonnull
  public UpdateServiceSettingsRequestLinuxSubscriptionsDiscoverySettings getLinuxSubscriptionsDiscoverySettings() {
    return linuxSubscriptionsDiscoverySettings;
  }

  public void setLinuxSubscriptionsDiscoverySettings(UpdateServiceSettingsRequestLinuxSubscriptionsDiscoverySettings linuxSubscriptionsDiscoverySettings) {
    this.linuxSubscriptionsDiscoverySettings = linuxSubscriptionsDiscoverySettings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateServiceSettingsRequest updateServiceSettingsRequest = (UpdateServiceSettingsRequest) o;
    return Objects.equals(this.allowUpdate, updateServiceSettingsRequest.allowUpdate) &&
        Objects.equals(this.linuxSubscriptionsDiscovery, updateServiceSettingsRequest.linuxSubscriptionsDiscovery) &&
        Objects.equals(this.linuxSubscriptionsDiscoverySettings, updateServiceSettingsRequest.linuxSubscriptionsDiscoverySettings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowUpdate, linuxSubscriptionsDiscovery, linuxSubscriptionsDiscoverySettings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateServiceSettingsRequest {\n");
    sb.append("    allowUpdate: ").append(toIndentedString(allowUpdate)).append("\n");
    sb.append("    linuxSubscriptionsDiscovery: ").append(toIndentedString(linuxSubscriptionsDiscovery)).append("\n");
    sb.append("    linuxSubscriptionsDiscoverySettings: ").append(toIndentedString(linuxSubscriptionsDiscoverySettings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AllowUpdate");
    openapiFields.add("LinuxSubscriptionsDiscovery");
    openapiFields.add("LinuxSubscriptionsDiscoverySettings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("LinuxSubscriptionsDiscovery");
    openapiRequiredFields.add("LinuxSubscriptionsDiscoverySettings");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateServiceSettingsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateServiceSettingsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateServiceSettingsRequest is not found in the empty JSON string", UpdateServiceSettingsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateServiceSettingsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateServiceSettingsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateServiceSettingsRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("LinuxSubscriptionsDiscovery").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LinuxSubscriptionsDiscovery` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LinuxSubscriptionsDiscovery").toString()));
      }
      // validate the required field `LinuxSubscriptionsDiscovery`
      LinuxSubscriptionsDiscoveryEnum.validateJsonElement(jsonObj.get("LinuxSubscriptionsDiscovery"));
      // validate the required field `LinuxSubscriptionsDiscoverySettings`
      UpdateServiceSettingsRequestLinuxSubscriptionsDiscoverySettings.validateJsonElement(jsonObj.get("LinuxSubscriptionsDiscoverySettings"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateServiceSettingsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateServiceSettingsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateServiceSettingsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateServiceSettingsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateServiceSettingsRequest>() {
           @Override
           public void write(JsonWriter out, UpdateServiceSettingsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateServiceSettingsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateServiceSettingsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateServiceSettingsRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateServiceSettingsRequest
   */
  public static UpdateServiceSettingsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateServiceSettingsRequest.class);
  }

  /**
   * Convert an instance of UpdateServiceSettingsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

