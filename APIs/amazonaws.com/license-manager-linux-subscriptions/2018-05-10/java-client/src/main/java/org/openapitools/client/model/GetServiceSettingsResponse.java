/*
 * AWS License Manager Linux Subscriptions
 * With License Manager, you can discover and track your commercial Linux subscriptions on running Amazon EC2 instances.
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.GetServiceSettingsResponseLinuxSubscriptionsDiscoverySettings;
import org.openapitools.client.model.LinuxSubscriptionsDiscovery;
import org.openapitools.client.model.Status;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetServiceSettingsResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:25.047728-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetServiceSettingsResponse {
  public static final String SERIALIZED_NAME_HOME_REGIONS = "HomeRegions";
  @SerializedName(SERIALIZED_NAME_HOME_REGIONS)
  private List homeRegions;

  public static final String SERIALIZED_NAME_LINUX_SUBSCRIPTIONS_DISCOVERY = "LinuxSubscriptionsDiscovery";
  @SerializedName(SERIALIZED_NAME_LINUX_SUBSCRIPTIONS_DISCOVERY)
  private LinuxSubscriptionsDiscovery linuxSubscriptionsDiscovery;

  public static final String SERIALIZED_NAME_LINUX_SUBSCRIPTIONS_DISCOVERY_SETTINGS = "LinuxSubscriptionsDiscoverySettings";
  @SerializedName(SERIALIZED_NAME_LINUX_SUBSCRIPTIONS_DISCOVERY_SETTINGS)
  private GetServiceSettingsResponseLinuxSubscriptionsDiscoverySettings linuxSubscriptionsDiscoverySettings;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Status status;

  public static final String SERIALIZED_NAME_STATUS_MESSAGE = "StatusMessage";
  @SerializedName(SERIALIZED_NAME_STATUS_MESSAGE)
  private Map statusMessage;

  public GetServiceSettingsResponse() {
  }

  public GetServiceSettingsResponse homeRegions(List homeRegions) {
    this.homeRegions = homeRegions;
    return this;
  }

  /**
   * Get homeRegions
   * @return homeRegions
   */
  @javax.annotation.Nullable
  public List getHomeRegions() {
    return homeRegions;
  }

  public void setHomeRegions(List homeRegions) {
    this.homeRegions = homeRegions;
  }


  public GetServiceSettingsResponse linuxSubscriptionsDiscovery(LinuxSubscriptionsDiscovery linuxSubscriptionsDiscovery) {
    this.linuxSubscriptionsDiscovery = linuxSubscriptionsDiscovery;
    return this;
  }

  /**
   * Get linuxSubscriptionsDiscovery
   * @return linuxSubscriptionsDiscovery
   */
  @javax.annotation.Nullable
  public LinuxSubscriptionsDiscovery getLinuxSubscriptionsDiscovery() {
    return linuxSubscriptionsDiscovery;
  }

  public void setLinuxSubscriptionsDiscovery(LinuxSubscriptionsDiscovery linuxSubscriptionsDiscovery) {
    this.linuxSubscriptionsDiscovery = linuxSubscriptionsDiscovery;
  }


  public GetServiceSettingsResponse linuxSubscriptionsDiscoverySettings(GetServiceSettingsResponseLinuxSubscriptionsDiscoverySettings linuxSubscriptionsDiscoverySettings) {
    this.linuxSubscriptionsDiscoverySettings = linuxSubscriptionsDiscoverySettings;
    return this;
  }

  /**
   * Get linuxSubscriptionsDiscoverySettings
   * @return linuxSubscriptionsDiscoverySettings
   */
  @javax.annotation.Nullable
  public GetServiceSettingsResponseLinuxSubscriptionsDiscoverySettings getLinuxSubscriptionsDiscoverySettings() {
    return linuxSubscriptionsDiscoverySettings;
  }

  public void setLinuxSubscriptionsDiscoverySettings(GetServiceSettingsResponseLinuxSubscriptionsDiscoverySettings linuxSubscriptionsDiscoverySettings) {
    this.linuxSubscriptionsDiscoverySettings = linuxSubscriptionsDiscoverySettings;
  }


  public GetServiceSettingsResponse status(Status status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public Status getStatus() {
    return status;
  }

  public void setStatus(Status status) {
    this.status = status;
  }


  public GetServiceSettingsResponse statusMessage(Map statusMessage) {
    this.statusMessage = statusMessage;
    return this;
  }

  /**
   * Get statusMessage
   * @return statusMessage
   */
  @javax.annotation.Nullable
  public Map getStatusMessage() {
    return statusMessage;
  }

  public void setStatusMessage(Map statusMessage) {
    this.statusMessage = statusMessage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetServiceSettingsResponse getServiceSettingsResponse = (GetServiceSettingsResponse) o;
    return Objects.equals(this.homeRegions, getServiceSettingsResponse.homeRegions) &&
        Objects.equals(this.linuxSubscriptionsDiscovery, getServiceSettingsResponse.linuxSubscriptionsDiscovery) &&
        Objects.equals(this.linuxSubscriptionsDiscoverySettings, getServiceSettingsResponse.linuxSubscriptionsDiscoverySettings) &&
        Objects.equals(this.status, getServiceSettingsResponse.status) &&
        Objects.equals(this.statusMessage, getServiceSettingsResponse.statusMessage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(homeRegions, linuxSubscriptionsDiscovery, linuxSubscriptionsDiscoverySettings, status, statusMessage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetServiceSettingsResponse {\n");
    sb.append("    homeRegions: ").append(toIndentedString(homeRegions)).append("\n");
    sb.append("    linuxSubscriptionsDiscovery: ").append(toIndentedString(linuxSubscriptionsDiscovery)).append("\n");
    sb.append("    linuxSubscriptionsDiscoverySettings: ").append(toIndentedString(linuxSubscriptionsDiscoverySettings)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusMessage: ").append(toIndentedString(statusMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("HomeRegions");
    openapiFields.add("LinuxSubscriptionsDiscovery");
    openapiFields.add("LinuxSubscriptionsDiscoverySettings");
    openapiFields.add("Status");
    openapiFields.add("StatusMessage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetServiceSettingsResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetServiceSettingsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetServiceSettingsResponse is not found in the empty JSON string", GetServiceSettingsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetServiceSettingsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetServiceSettingsResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `HomeRegions`
      if (jsonObj.get("HomeRegions") != null && !jsonObj.get("HomeRegions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("HomeRegions"));
      }
      // validate the optional field `LinuxSubscriptionsDiscovery`
      if (jsonObj.get("LinuxSubscriptionsDiscovery") != null && !jsonObj.get("LinuxSubscriptionsDiscovery").isJsonNull()) {
        LinuxSubscriptionsDiscovery.validateJsonElement(jsonObj.get("LinuxSubscriptionsDiscovery"));
      }
      // validate the optional field `LinuxSubscriptionsDiscoverySettings`
      if (jsonObj.get("LinuxSubscriptionsDiscoverySettings") != null && !jsonObj.get("LinuxSubscriptionsDiscoverySettings").isJsonNull()) {
        GetServiceSettingsResponseLinuxSubscriptionsDiscoverySettings.validateJsonElement(jsonObj.get("LinuxSubscriptionsDiscoverySettings"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        Status.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `StatusMessage`
      if (jsonObj.get("StatusMessage") != null && !jsonObj.get("StatusMessage").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("StatusMessage"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetServiceSettingsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetServiceSettingsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetServiceSettingsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetServiceSettingsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetServiceSettingsResponse>() {
           @Override
           public void write(JsonWriter out, GetServiceSettingsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetServiceSettingsResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetServiceSettingsResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetServiceSettingsResponse
   * @throws IOException if the JSON string is invalid with respect to GetServiceSettingsResponse
   */
  public static GetServiceSettingsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetServiceSettingsResponse.class);
  }

  /**
   * Convert an instance of GetServiceSettingsResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

