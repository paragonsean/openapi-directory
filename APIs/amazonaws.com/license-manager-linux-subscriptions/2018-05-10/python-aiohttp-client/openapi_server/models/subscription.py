# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Subscription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, instance_count: int=None, name: str=None, type: str=None):
        """Subscription - a model defined in OpenAPI

        :param instance_count: The instance_count of this Subscription.
        :param name: The name of this Subscription.
        :param type: The type of this Subscription.
        """
        self.openapi_types = {
            'instance_count': int,
            'name': str,
            'type': str
        }

        self.attribute_map = {
            'instance_count': 'InstanceCount',
            'name': 'Name',
            'type': 'Type'
        }

        self._instance_count = instance_count
        self._name = name
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Subscription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Subscription of this Subscription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def instance_count(self):
        """Gets the instance_count of this Subscription.


        :return: The instance_count of this Subscription.
        :rtype: int
        """
        return self._instance_count

    @instance_count.setter
    def instance_count(self, instance_count):
        """Sets the instance_count of this Subscription.


        :param instance_count: The instance_count of this Subscription.
        :type instance_count: int
        """

        self._instance_count = instance_count

    @property
    def name(self):
        """Gets the name of this Subscription.


        :return: The name of this Subscription.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Subscription.


        :param name: The name of this Subscription.
        :type name: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this Subscription.


        :return: The type of this Subscription.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Subscription.


        :param type: The type of this Subscription.
        :type type: str
        """

        self._type = type
