# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Instance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, ami_id: str=None, instance_id: str=None, instance_type: str=None, last_updated_time: str=None, product_code: List=None, region: str=None, status: str=None, subscription_name: str=None, usage_operation: str=None):
        """Instance - a model defined in OpenAPI

        :param account_id: The account_id of this Instance.
        :param ami_id: The ami_id of this Instance.
        :param instance_id: The instance_id of this Instance.
        :param instance_type: The instance_type of this Instance.
        :param last_updated_time: The last_updated_time of this Instance.
        :param product_code: The product_code of this Instance.
        :param region: The region of this Instance.
        :param status: The status of this Instance.
        :param subscription_name: The subscription_name of this Instance.
        :param usage_operation: The usage_operation of this Instance.
        """
        self.openapi_types = {
            'account_id': str,
            'ami_id': str,
            'instance_id': str,
            'instance_type': str,
            'last_updated_time': str,
            'product_code': List,
            'region': str,
            'status': str,
            'subscription_name': str,
            'usage_operation': str
        }

        self.attribute_map = {
            'account_id': 'AccountID',
            'ami_id': 'AmiId',
            'instance_id': 'InstanceID',
            'instance_type': 'InstanceType',
            'last_updated_time': 'LastUpdatedTime',
            'product_code': 'ProductCode',
            'region': 'Region',
            'status': 'Status',
            'subscription_name': 'SubscriptionName',
            'usage_operation': 'UsageOperation'
        }

        self._account_id = account_id
        self._ami_id = ami_id
        self._instance_id = instance_id
        self._instance_type = instance_type
        self._last_updated_time = last_updated_time
        self._product_code = product_code
        self._region = region
        self._status = status
        self._subscription_name = subscription_name
        self._usage_operation = usage_operation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Instance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Instance of this Instance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this Instance.


        :return: The account_id of this Instance.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Instance.


        :param account_id: The account_id of this Instance.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def ami_id(self):
        """Gets the ami_id of this Instance.


        :return: The ami_id of this Instance.
        :rtype: str
        """
        return self._ami_id

    @ami_id.setter
    def ami_id(self, ami_id):
        """Sets the ami_id of this Instance.


        :param ami_id: The ami_id of this Instance.
        :type ami_id: str
        """

        self._ami_id = ami_id

    @property
    def instance_id(self):
        """Gets the instance_id of this Instance.


        :return: The instance_id of this Instance.
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this Instance.


        :param instance_id: The instance_id of this Instance.
        :type instance_id: str
        """

        self._instance_id = instance_id

    @property
    def instance_type(self):
        """Gets the instance_type of this Instance.


        :return: The instance_type of this Instance.
        :rtype: str
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """Sets the instance_type of this Instance.


        :param instance_type: The instance_type of this Instance.
        :type instance_type: str
        """

        self._instance_type = instance_type

    @property
    def last_updated_time(self):
        """Gets the last_updated_time of this Instance.


        :return: The last_updated_time of this Instance.
        :rtype: str
        """
        return self._last_updated_time

    @last_updated_time.setter
    def last_updated_time(self, last_updated_time):
        """Sets the last_updated_time of this Instance.


        :param last_updated_time: The last_updated_time of this Instance.
        :type last_updated_time: str
        """

        self._last_updated_time = last_updated_time

    @property
    def product_code(self):
        """Gets the product_code of this Instance.


        :return: The product_code of this Instance.
        :rtype: List
        """
        return self._product_code

    @product_code.setter
    def product_code(self, product_code):
        """Sets the product_code of this Instance.


        :param product_code: The product_code of this Instance.
        :type product_code: List
        """

        self._product_code = product_code

    @property
    def region(self):
        """Gets the region of this Instance.


        :return: The region of this Instance.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this Instance.


        :param region: The region of this Instance.
        :type region: str
        """

        self._region = region

    @property
    def status(self):
        """Gets the status of this Instance.


        :return: The status of this Instance.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Instance.


        :param status: The status of this Instance.
        :type status: str
        """

        self._status = status

    @property
    def subscription_name(self):
        """Gets the subscription_name of this Instance.


        :return: The subscription_name of this Instance.
        :rtype: str
        """
        return self._subscription_name

    @subscription_name.setter
    def subscription_name(self, subscription_name):
        """Sets the subscription_name of this Instance.


        :param subscription_name: The subscription_name of this Instance.
        :type subscription_name: str
        """

        self._subscription_name = subscription_name

    @property
    def usage_operation(self):
        """Gets the usage_operation of this Instance.


        :return: The usage_operation of this Instance.
        :rtype: str
        """
        return self._usage_operation

    @usage_operation.setter
    def usage_operation(self, usage_operation):
        """Sets the usage_operation of this Instance.


        :param usage_operation: The usage_operation of this Instance.
        :type usage_operation: str
        """

        self._usage_operation = usage_operation
