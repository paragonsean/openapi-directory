# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_service_settings_request_linux_subscriptions_discovery_settings import UpdateServiceSettingsRequestLinuxSubscriptionsDiscoverySettings
from openapi_server import util


class UpdateServiceSettingsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_update: bool=None, linux_subscriptions_discovery: str=None, linux_subscriptions_discovery_settings: UpdateServiceSettingsRequestLinuxSubscriptionsDiscoverySettings=None):
        """UpdateServiceSettingsRequest - a model defined in OpenAPI

        :param allow_update: The allow_update of this UpdateServiceSettingsRequest.
        :param linux_subscriptions_discovery: The linux_subscriptions_discovery of this UpdateServiceSettingsRequest.
        :param linux_subscriptions_discovery_settings: The linux_subscriptions_discovery_settings of this UpdateServiceSettingsRequest.
        """
        self.openapi_types = {
            'allow_update': bool,
            'linux_subscriptions_discovery': str,
            'linux_subscriptions_discovery_settings': UpdateServiceSettingsRequestLinuxSubscriptionsDiscoverySettings
        }

        self.attribute_map = {
            'allow_update': 'AllowUpdate',
            'linux_subscriptions_discovery': 'LinuxSubscriptionsDiscovery',
            'linux_subscriptions_discovery_settings': 'LinuxSubscriptionsDiscoverySettings'
        }

        self._allow_update = allow_update
        self._linux_subscriptions_discovery = linux_subscriptions_discovery
        self._linux_subscriptions_discovery_settings = linux_subscriptions_discovery_settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateServiceSettingsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateServiceSettings_request of this UpdateServiceSettingsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_update(self):
        """Gets the allow_update of this UpdateServiceSettingsRequest.

        Describes if updates are allowed to the service settings for Linux subscriptions. If you allow updates, you can aggregate Linux subscription data in more than one home Region.

        :return: The allow_update of this UpdateServiceSettingsRequest.
        :rtype: bool
        """
        return self._allow_update

    @allow_update.setter
    def allow_update(self, allow_update):
        """Sets the allow_update of this UpdateServiceSettingsRequest.

        Describes if updates are allowed to the service settings for Linux subscriptions. If you allow updates, you can aggregate Linux subscription data in more than one home Region.

        :param allow_update: The allow_update of this UpdateServiceSettingsRequest.
        :type allow_update: bool
        """

        self._allow_update = allow_update

    @property
    def linux_subscriptions_discovery(self):
        """Gets the linux_subscriptions_discovery of this UpdateServiceSettingsRequest.

        Describes if the discovery of Linux subscriptions is enabled.

        :return: The linux_subscriptions_discovery of this UpdateServiceSettingsRequest.
        :rtype: str
        """
        return self._linux_subscriptions_discovery

    @linux_subscriptions_discovery.setter
    def linux_subscriptions_discovery(self, linux_subscriptions_discovery):
        """Sets the linux_subscriptions_discovery of this UpdateServiceSettingsRequest.

        Describes if the discovery of Linux subscriptions is enabled.

        :param linux_subscriptions_discovery: The linux_subscriptions_discovery of this UpdateServiceSettingsRequest.
        :type linux_subscriptions_discovery: str
        """
        allowed_values = ["Enabled", "Disabled"]  # noqa: E501
        if linux_subscriptions_discovery not in allowed_values:
            raise ValueError(
                "Invalid value for `linux_subscriptions_discovery` ({0}), must be one of {1}"
                .format(linux_subscriptions_discovery, allowed_values)
            )

        self._linux_subscriptions_discovery = linux_subscriptions_discovery

    @property
    def linux_subscriptions_discovery_settings(self):
        """Gets the linux_subscriptions_discovery_settings of this UpdateServiceSettingsRequest.


        :return: The linux_subscriptions_discovery_settings of this UpdateServiceSettingsRequest.
        :rtype: UpdateServiceSettingsRequestLinuxSubscriptionsDiscoverySettings
        """
        return self._linux_subscriptions_discovery_settings

    @linux_subscriptions_discovery_settings.setter
    def linux_subscriptions_discovery_settings(self, linux_subscriptions_discovery_settings):
        """Sets the linux_subscriptions_discovery_settings of this UpdateServiceSettingsRequest.


        :param linux_subscriptions_discovery_settings: The linux_subscriptions_discovery_settings of this UpdateServiceSettingsRequest.
        :type linux_subscriptions_discovery_settings: UpdateServiceSettingsRequestLinuxSubscriptionsDiscoverySettings
        """
        if linux_subscriptions_discovery_settings is None:
            raise ValueError("Invalid value for `linux_subscriptions_discovery_settings`, must not be `None`")

        self._linux_subscriptions_discovery_settings = linux_subscriptions_discovery_settings
