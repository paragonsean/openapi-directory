/**
 * AWS License Manager Linux Subscriptions
 * With License Manager, you can discover and track your commercial Linux subscriptions on running Amazon EC2 instances.
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInstance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInstance::OAIInstance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInstance::OAIInstance() {
    this->initializeModel();
}

OAIInstance::~OAIInstance() {}

void OAIInstance::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_ami_id_isSet = false;
    m_ami_id_isValid = false;

    m_instance_id_isSet = false;
    m_instance_id_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;

    m_last_updated_time_isSet = false;
    m_last_updated_time_isValid = false;

    m_product_code_isSet = false;
    m_product_code_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_subscription_name_isSet = false;
    m_subscription_name_isValid = false;

    m_usage_operation_isSet = false;
    m_usage_operation_isValid = false;
}

void OAIInstance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInstance::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("AccountID")]);
    m_account_id_isSet = !json[QString("AccountID")].isNull() && m_account_id_isValid;

    m_ami_id_isValid = ::OpenAPI::fromJsonValue(m_ami_id, json[QString("AmiId")]);
    m_ami_id_isSet = !json[QString("AmiId")].isNull() && m_ami_id_isValid;

    m_instance_id_isValid = ::OpenAPI::fromJsonValue(m_instance_id, json[QString("InstanceID")]);
    m_instance_id_isSet = !json[QString("InstanceID")].isNull() && m_instance_id_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("InstanceType")]);
    m_instance_type_isSet = !json[QString("InstanceType")].isNull() && m_instance_type_isValid;

    m_last_updated_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time, json[QString("LastUpdatedTime")]);
    m_last_updated_time_isSet = !json[QString("LastUpdatedTime")].isNull() && m_last_updated_time_isValid;

    m_product_code_isValid = ::OpenAPI::fromJsonValue(m_product_code, json[QString("ProductCode")]);
    m_product_code_isSet = !json[QString("ProductCode")].isNull() && m_product_code_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("Region")]);
    m_region_isSet = !json[QString("Region")].isNull() && m_region_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_subscription_name_isValid = ::OpenAPI::fromJsonValue(m_subscription_name, json[QString("SubscriptionName")]);
    m_subscription_name_isSet = !json[QString("SubscriptionName")].isNull() && m_subscription_name_isValid;

    m_usage_operation_isValid = ::OpenAPI::fromJsonValue(m_usage_operation, json[QString("UsageOperation")]);
    m_usage_operation_isSet = !json[QString("UsageOperation")].isNull() && m_usage_operation_isValid;
}

QString OAIInstance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInstance::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("AccountID"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_ami_id_isSet) {
        obj.insert(QString("AmiId"), ::OpenAPI::toJsonValue(m_ami_id));
    }
    if (m_instance_id_isSet) {
        obj.insert(QString("InstanceID"), ::OpenAPI::toJsonValue(m_instance_id));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("InstanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    if (m_last_updated_time_isSet) {
        obj.insert(QString("LastUpdatedTime"), ::OpenAPI::toJsonValue(m_last_updated_time));
    }
    if (m_product_code.isSet()) {
        obj.insert(QString("ProductCode"), ::OpenAPI::toJsonValue(m_product_code));
    }
    if (m_region_isSet) {
        obj.insert(QString("Region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_subscription_name_isSet) {
        obj.insert(QString("SubscriptionName"), ::OpenAPI::toJsonValue(m_subscription_name));
    }
    if (m_usage_operation_isSet) {
        obj.insert(QString("UsageOperation"), ::OpenAPI::toJsonValue(m_usage_operation));
    }
    return obj;
}

QString OAIInstance::getAccountId() const {
    return m_account_id;
}
void OAIInstance::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIInstance::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIInstance::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAIInstance::getAmiId() const {
    return m_ami_id;
}
void OAIInstance::setAmiId(const QString &ami_id) {
    m_ami_id = ami_id;
    m_ami_id_isSet = true;
}

bool OAIInstance::is_ami_id_Set() const{
    return m_ami_id_isSet;
}

bool OAIInstance::is_ami_id_Valid() const{
    return m_ami_id_isValid;
}

QString OAIInstance::getInstanceId() const {
    return m_instance_id;
}
void OAIInstance::setInstanceId(const QString &instance_id) {
    m_instance_id = instance_id;
    m_instance_id_isSet = true;
}

bool OAIInstance::is_instance_id_Set() const{
    return m_instance_id_isSet;
}

bool OAIInstance::is_instance_id_Valid() const{
    return m_instance_id_isValid;
}

QString OAIInstance::getInstanceType() const {
    return m_instance_type;
}
void OAIInstance::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIInstance::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIInstance::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

QString OAIInstance::getLastUpdatedTime() const {
    return m_last_updated_time;
}
void OAIInstance::setLastUpdatedTime(const QString &last_updated_time) {
    m_last_updated_time = last_updated_time;
    m_last_updated_time_isSet = true;
}

bool OAIInstance::is_last_updated_time_Set() const{
    return m_last_updated_time_isSet;
}

bool OAIInstance::is_last_updated_time_Valid() const{
    return m_last_updated_time_isValid;
}

QList OAIInstance::getProductCode() const {
    return m_product_code;
}
void OAIInstance::setProductCode(const QList &product_code) {
    m_product_code = product_code;
    m_product_code_isSet = true;
}

bool OAIInstance::is_product_code_Set() const{
    return m_product_code_isSet;
}

bool OAIInstance::is_product_code_Valid() const{
    return m_product_code_isValid;
}

QString OAIInstance::getRegion() const {
    return m_region;
}
void OAIInstance::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIInstance::is_region_Set() const{
    return m_region_isSet;
}

bool OAIInstance::is_region_Valid() const{
    return m_region_isValid;
}

QString OAIInstance::getStatus() const {
    return m_status;
}
void OAIInstance::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIInstance::is_status_Set() const{
    return m_status_isSet;
}

bool OAIInstance::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIInstance::getSubscriptionName() const {
    return m_subscription_name;
}
void OAIInstance::setSubscriptionName(const QString &subscription_name) {
    m_subscription_name = subscription_name;
    m_subscription_name_isSet = true;
}

bool OAIInstance::is_subscription_name_Set() const{
    return m_subscription_name_isSet;
}

bool OAIInstance::is_subscription_name_Valid() const{
    return m_subscription_name_isValid;
}

QString OAIInstance::getUsageOperation() const {
    return m_usage_operation;
}
void OAIInstance::setUsageOperation(const QString &usage_operation) {
    m_usage_operation = usage_operation;
    m_usage_operation_isSet = true;
}

bool OAIInstance::is_usage_operation_Set() const{
    return m_usage_operation_isSet;
}

bool OAIInstance::is_usage_operation_Valid() const{
    return m_usage_operation_isValid;
}

bool OAIInstance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ami_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_operation_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInstance::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
