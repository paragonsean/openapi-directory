/**
 * AWS License Manager Linux Subscriptions
 * With License Manager, you can discover and track your commercial Linux subscriptions on running Amazon EC2 instances.
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetServiceSettingsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetServiceSettingsResponse::OAIGetServiceSettingsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetServiceSettingsResponse::OAIGetServiceSettingsResponse() {
    this->initializeModel();
}

OAIGetServiceSettingsResponse::~OAIGetServiceSettingsResponse() {}

void OAIGetServiceSettingsResponse::initializeModel() {

    m_home_regions_isSet = false;
    m_home_regions_isValid = false;

    m_linux_subscriptions_discovery_isSet = false;
    m_linux_subscriptions_discovery_isValid = false;

    m_linux_subscriptions_discovery_settings_isSet = false;
    m_linux_subscriptions_discovery_settings_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_message_isSet = false;
    m_status_message_isValid = false;
}

void OAIGetServiceSettingsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetServiceSettingsResponse::fromJsonObject(QJsonObject json) {

    m_home_regions_isValid = ::OpenAPI::fromJsonValue(m_home_regions, json[QString("HomeRegions")]);
    m_home_regions_isSet = !json[QString("HomeRegions")].isNull() && m_home_regions_isValid;

    m_linux_subscriptions_discovery_isValid = ::OpenAPI::fromJsonValue(m_linux_subscriptions_discovery, json[QString("LinuxSubscriptionsDiscovery")]);
    m_linux_subscriptions_discovery_isSet = !json[QString("LinuxSubscriptionsDiscovery")].isNull() && m_linux_subscriptions_discovery_isValid;

    m_linux_subscriptions_discovery_settings_isValid = ::OpenAPI::fromJsonValue(m_linux_subscriptions_discovery_settings, json[QString("LinuxSubscriptionsDiscoverySettings")]);
    m_linux_subscriptions_discovery_settings_isSet = !json[QString("LinuxSubscriptionsDiscoverySettings")].isNull() && m_linux_subscriptions_discovery_settings_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_status_message_isValid = ::OpenAPI::fromJsonValue(m_status_message, json[QString("StatusMessage")]);
    m_status_message_isSet = !json[QString("StatusMessage")].isNull() && m_status_message_isValid;
}

QString OAIGetServiceSettingsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetServiceSettingsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_home_regions.isSet()) {
        obj.insert(QString("HomeRegions"), ::OpenAPI::toJsonValue(m_home_regions));
    }
    if (m_linux_subscriptions_discovery.isSet()) {
        obj.insert(QString("LinuxSubscriptionsDiscovery"), ::OpenAPI::toJsonValue(m_linux_subscriptions_discovery));
    }
    if (m_linux_subscriptions_discovery_settings.isSet()) {
        obj.insert(QString("LinuxSubscriptionsDiscoverySettings"), ::OpenAPI::toJsonValue(m_linux_subscriptions_discovery_settings));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_message.isSet()) {
        obj.insert(QString("StatusMessage"), ::OpenAPI::toJsonValue(m_status_message));
    }
    return obj;
}

QList OAIGetServiceSettingsResponse::getHomeRegions() const {
    return m_home_regions;
}
void OAIGetServiceSettingsResponse::setHomeRegions(const QList &home_regions) {
    m_home_regions = home_regions;
    m_home_regions_isSet = true;
}

bool OAIGetServiceSettingsResponse::is_home_regions_Set() const{
    return m_home_regions_isSet;
}

bool OAIGetServiceSettingsResponse::is_home_regions_Valid() const{
    return m_home_regions_isValid;
}

OAILinuxSubscriptionsDiscovery OAIGetServiceSettingsResponse::getLinuxSubscriptionsDiscovery() const {
    return m_linux_subscriptions_discovery;
}
void OAIGetServiceSettingsResponse::setLinuxSubscriptionsDiscovery(const OAILinuxSubscriptionsDiscovery &linux_subscriptions_discovery) {
    m_linux_subscriptions_discovery = linux_subscriptions_discovery;
    m_linux_subscriptions_discovery_isSet = true;
}

bool OAIGetServiceSettingsResponse::is_linux_subscriptions_discovery_Set() const{
    return m_linux_subscriptions_discovery_isSet;
}

bool OAIGetServiceSettingsResponse::is_linux_subscriptions_discovery_Valid() const{
    return m_linux_subscriptions_discovery_isValid;
}

OAIGetServiceSettingsResponse_LinuxSubscriptionsDiscoverySettings OAIGetServiceSettingsResponse::getLinuxSubscriptionsDiscoverySettings() const {
    return m_linux_subscriptions_discovery_settings;
}
void OAIGetServiceSettingsResponse::setLinuxSubscriptionsDiscoverySettings(const OAIGetServiceSettingsResponse_LinuxSubscriptionsDiscoverySettings &linux_subscriptions_discovery_settings) {
    m_linux_subscriptions_discovery_settings = linux_subscriptions_discovery_settings;
    m_linux_subscriptions_discovery_settings_isSet = true;
}

bool OAIGetServiceSettingsResponse::is_linux_subscriptions_discovery_settings_Set() const{
    return m_linux_subscriptions_discovery_settings_isSet;
}

bool OAIGetServiceSettingsResponse::is_linux_subscriptions_discovery_settings_Valid() const{
    return m_linux_subscriptions_discovery_settings_isValid;
}

OAIStatus OAIGetServiceSettingsResponse::getStatus() const {
    return m_status;
}
void OAIGetServiceSettingsResponse::setStatus(const OAIStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGetServiceSettingsResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetServiceSettingsResponse::is_status_Valid() const{
    return m_status_isValid;
}

QMap OAIGetServiceSettingsResponse::getStatusMessage() const {
    return m_status_message;
}
void OAIGetServiceSettingsResponse::setStatusMessage(const QMap &status_message) {
    m_status_message = status_message;
    m_status_message_isSet = true;
}

bool OAIGetServiceSettingsResponse::is_status_message_Set() const{
    return m_status_message_isSet;
}

bool OAIGetServiceSettingsResponse::is_status_message_Valid() const{
    return m_status_message_isValid;
}

bool OAIGetServiceSettingsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_home_regions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_linux_subscriptions_discovery.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_linux_subscriptions_discovery_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_message.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetServiceSettingsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
