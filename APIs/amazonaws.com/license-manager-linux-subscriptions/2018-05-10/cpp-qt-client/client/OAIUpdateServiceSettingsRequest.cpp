/**
 * AWS License Manager Linux Subscriptions
 * With License Manager, you can discover and track your commercial Linux subscriptions on running Amazon EC2 instances.
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateServiceSettingsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateServiceSettingsRequest::OAIUpdateServiceSettingsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateServiceSettingsRequest::OAIUpdateServiceSettingsRequest() {
    this->initializeModel();
}

OAIUpdateServiceSettingsRequest::~OAIUpdateServiceSettingsRequest() {}

void OAIUpdateServiceSettingsRequest::initializeModel() {

    m_allow_update_isSet = false;
    m_allow_update_isValid = false;

    m_linux_subscriptions_discovery_isSet = false;
    m_linux_subscriptions_discovery_isValid = false;

    m_linux_subscriptions_discovery_settings_isSet = false;
    m_linux_subscriptions_discovery_settings_isValid = false;
}

void OAIUpdateServiceSettingsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateServiceSettingsRequest::fromJsonObject(QJsonObject json) {

    m_allow_update_isValid = ::OpenAPI::fromJsonValue(m_allow_update, json[QString("AllowUpdate")]);
    m_allow_update_isSet = !json[QString("AllowUpdate")].isNull() && m_allow_update_isValid;

    m_linux_subscriptions_discovery_isValid = ::OpenAPI::fromJsonValue(m_linux_subscriptions_discovery, json[QString("LinuxSubscriptionsDiscovery")]);
    m_linux_subscriptions_discovery_isSet = !json[QString("LinuxSubscriptionsDiscovery")].isNull() && m_linux_subscriptions_discovery_isValid;

    m_linux_subscriptions_discovery_settings_isValid = ::OpenAPI::fromJsonValue(m_linux_subscriptions_discovery_settings, json[QString("LinuxSubscriptionsDiscoverySettings")]);
    m_linux_subscriptions_discovery_settings_isSet = !json[QString("LinuxSubscriptionsDiscoverySettings")].isNull() && m_linux_subscriptions_discovery_settings_isValid;
}

QString OAIUpdateServiceSettingsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateServiceSettingsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_update_isSet) {
        obj.insert(QString("AllowUpdate"), ::OpenAPI::toJsonValue(m_allow_update));
    }
    if (m_linux_subscriptions_discovery.isSet()) {
        obj.insert(QString("LinuxSubscriptionsDiscovery"), ::OpenAPI::toJsonValue(m_linux_subscriptions_discovery));
    }
    if (m_linux_subscriptions_discovery_settings.isSet()) {
        obj.insert(QString("LinuxSubscriptionsDiscoverySettings"), ::OpenAPI::toJsonValue(m_linux_subscriptions_discovery_settings));
    }
    return obj;
}

bool OAIUpdateServiceSettingsRequest::getAllowUpdate() const {
    return m_allow_update;
}
void OAIUpdateServiceSettingsRequest::setAllowUpdate(const bool &allow_update) {
    m_allow_update = allow_update;
    m_allow_update_isSet = true;
}

bool OAIUpdateServiceSettingsRequest::is_allow_update_Set() const{
    return m_allow_update_isSet;
}

bool OAIUpdateServiceSettingsRequest::is_allow_update_Valid() const{
    return m_allow_update_isValid;
}

OAILinuxSubscriptionsDiscovery OAIUpdateServiceSettingsRequest::getLinuxSubscriptionsDiscovery() const {
    return m_linux_subscriptions_discovery;
}
void OAIUpdateServiceSettingsRequest::setLinuxSubscriptionsDiscovery(const OAILinuxSubscriptionsDiscovery &linux_subscriptions_discovery) {
    m_linux_subscriptions_discovery = linux_subscriptions_discovery;
    m_linux_subscriptions_discovery_isSet = true;
}

bool OAIUpdateServiceSettingsRequest::is_linux_subscriptions_discovery_Set() const{
    return m_linux_subscriptions_discovery_isSet;
}

bool OAIUpdateServiceSettingsRequest::is_linux_subscriptions_discovery_Valid() const{
    return m_linux_subscriptions_discovery_isValid;
}

OAIUpdateServiceSettingsResponse_LinuxSubscriptionsDiscoverySettings OAIUpdateServiceSettingsRequest::getLinuxSubscriptionsDiscoverySettings() const {
    return m_linux_subscriptions_discovery_settings;
}
void OAIUpdateServiceSettingsRequest::setLinuxSubscriptionsDiscoverySettings(const OAIUpdateServiceSettingsResponse_LinuxSubscriptionsDiscoverySettings &linux_subscriptions_discovery_settings) {
    m_linux_subscriptions_discovery_settings = linux_subscriptions_discovery_settings;
    m_linux_subscriptions_discovery_settings_isSet = true;
}

bool OAIUpdateServiceSettingsRequest::is_linux_subscriptions_discovery_settings_Set() const{
    return m_linux_subscriptions_discovery_settings_isSet;
}

bool OAIUpdateServiceSettingsRequest::is_linux_subscriptions_discovery_settings_Valid() const{
    return m_linux_subscriptions_discovery_settings_isValid;
}

bool OAIUpdateServiceSettingsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_update_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_linux_subscriptions_discovery.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_linux_subscriptions_discovery_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateServiceSettingsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_linux_subscriptions_discovery_isValid && m_linux_subscriptions_discovery_settings_isValid && true;
}

} // namespace OpenAPI
