/**
 * AWS License Manager Linux Subscriptions
 * With License Manager, you can discover and track your commercial Linux subscriptions on running Amazon EC2 instances.
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILinuxSubscriptionsDiscoverySettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILinuxSubscriptionsDiscoverySettings::OAILinuxSubscriptionsDiscoverySettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILinuxSubscriptionsDiscoverySettings::OAILinuxSubscriptionsDiscoverySettings() {
    this->initializeModel();
}

OAILinuxSubscriptionsDiscoverySettings::~OAILinuxSubscriptionsDiscoverySettings() {}

void OAILinuxSubscriptionsDiscoverySettings::initializeModel() {

    m_organization_integration_isSet = false;
    m_organization_integration_isValid = false;

    m_source_regions_isSet = false;
    m_source_regions_isValid = false;
}

void OAILinuxSubscriptionsDiscoverySettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILinuxSubscriptionsDiscoverySettings::fromJsonObject(QJsonObject json) {

    m_organization_integration_isValid = ::OpenAPI::fromJsonValue(m_organization_integration, json[QString("OrganizationIntegration")]);
    m_organization_integration_isSet = !json[QString("OrganizationIntegration")].isNull() && m_organization_integration_isValid;

    m_source_regions_isValid = ::OpenAPI::fromJsonValue(m_source_regions, json[QString("SourceRegions")]);
    m_source_regions_isSet = !json[QString("SourceRegions")].isNull() && m_source_regions_isValid;
}

QString OAILinuxSubscriptionsDiscoverySettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILinuxSubscriptionsDiscoverySettings::asJsonObject() const {
    QJsonObject obj;
    if (m_organization_integration.isSet()) {
        obj.insert(QString("OrganizationIntegration"), ::OpenAPI::toJsonValue(m_organization_integration));
    }
    if (m_source_regions.isSet()) {
        obj.insert(QString("SourceRegions"), ::OpenAPI::toJsonValue(m_source_regions));
    }
    return obj;
}

OAIOrganizationIntegration OAILinuxSubscriptionsDiscoverySettings::getOrganizationIntegration() const {
    return m_organization_integration;
}
void OAILinuxSubscriptionsDiscoverySettings::setOrganizationIntegration(const OAIOrganizationIntegration &organization_integration) {
    m_organization_integration = organization_integration;
    m_organization_integration_isSet = true;
}

bool OAILinuxSubscriptionsDiscoverySettings::is_organization_integration_Set() const{
    return m_organization_integration_isSet;
}

bool OAILinuxSubscriptionsDiscoverySettings::is_organization_integration_Valid() const{
    return m_organization_integration_isValid;
}

QList OAILinuxSubscriptionsDiscoverySettings::getSourceRegions() const {
    return m_source_regions;
}
void OAILinuxSubscriptionsDiscoverySettings::setSourceRegions(const QList &source_regions) {
    m_source_regions = source_regions;
    m_source_regions_isSet = true;
}

bool OAILinuxSubscriptionsDiscoverySettings::is_source_regions_Set() const{
    return m_source_regions_isSet;
}

bool OAILinuxSubscriptionsDiscoverySettings::is_source_regions_Valid() const{
    return m_source_regions_isValid;
}

bool OAILinuxSubscriptionsDiscoverySettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_organization_integration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_regions.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILinuxSubscriptionsDiscoverySettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_organization_integration_isValid && m_source_regions_isValid && true;
}

} // namespace OpenAPI
