/**
 * AWS License Manager Linux Subscriptions
 * With License Manager, you can discover and track your commercial Linux subscriptions on running Amazon EC2 instances.
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UpdateServiceSettingsRequestLinuxSubscriptionsDiscoverySettings from './UpdateServiceSettingsRequestLinuxSubscriptionsDiscoverySettings';

/**
 * The UpdateServiceSettingsRequest model module.
 * @module model/UpdateServiceSettingsRequest
 * @version 2018-05-10
 */
class UpdateServiceSettingsRequest {
    /**
     * Constructs a new <code>UpdateServiceSettingsRequest</code>.
     * @alias module:model/UpdateServiceSettingsRequest
     * @param linuxSubscriptionsDiscovery {module:model/UpdateServiceSettingsRequest.LinuxSubscriptionsDiscoveryEnum} Describes if the discovery of Linux subscriptions is enabled.
     * @param linuxSubscriptionsDiscoverySettings {module:model/UpdateServiceSettingsRequestLinuxSubscriptionsDiscoverySettings} 
     */
    constructor(linuxSubscriptionsDiscovery, linuxSubscriptionsDiscoverySettings) { 
        
        UpdateServiceSettingsRequest.initialize(this, linuxSubscriptionsDiscovery, linuxSubscriptionsDiscoverySettings);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, linuxSubscriptionsDiscovery, linuxSubscriptionsDiscoverySettings) { 
        obj['LinuxSubscriptionsDiscovery'] = linuxSubscriptionsDiscovery;
        obj['LinuxSubscriptionsDiscoverySettings'] = linuxSubscriptionsDiscoverySettings;
    }

    /**
     * Constructs a <code>UpdateServiceSettingsRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateServiceSettingsRequest} obj Optional instance to populate.
     * @return {module:model/UpdateServiceSettingsRequest} The populated <code>UpdateServiceSettingsRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateServiceSettingsRequest();

            if (data.hasOwnProperty('AllowUpdate')) {
                obj['AllowUpdate'] = ApiClient.convertToType(data['AllowUpdate'], 'Boolean');
            }
            if (data.hasOwnProperty('LinuxSubscriptionsDiscovery')) {
                obj['LinuxSubscriptionsDiscovery'] = ApiClient.convertToType(data['LinuxSubscriptionsDiscovery'], 'String');
            }
            if (data.hasOwnProperty('LinuxSubscriptionsDiscoverySettings')) {
                obj['LinuxSubscriptionsDiscoverySettings'] = UpdateServiceSettingsRequestLinuxSubscriptionsDiscoverySettings.constructFromObject(data['LinuxSubscriptionsDiscoverySettings']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateServiceSettingsRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateServiceSettingsRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UpdateServiceSettingsRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['LinuxSubscriptionsDiscovery'] && !(typeof data['LinuxSubscriptionsDiscovery'] === 'string' || data['LinuxSubscriptionsDiscovery'] instanceof String)) {
            throw new Error("Expected the field `LinuxSubscriptionsDiscovery` to be a primitive type in the JSON string but got " + data['LinuxSubscriptionsDiscovery']);
        }
        // validate the optional field `LinuxSubscriptionsDiscoverySettings`
        if (data['LinuxSubscriptionsDiscoverySettings']) { // data not null
          UpdateServiceSettingsRequestLinuxSubscriptionsDiscoverySettings.validateJSON(data['LinuxSubscriptionsDiscoverySettings']);
        }

        return true;
    }


}

UpdateServiceSettingsRequest.RequiredProperties = ["LinuxSubscriptionsDiscovery", "LinuxSubscriptionsDiscoverySettings"];

/**
 * Describes if updates are allowed to the service settings for Linux subscriptions. If you allow updates, you can aggregate Linux subscription data in more than one home Region.
 * @member {Boolean} AllowUpdate
 */
UpdateServiceSettingsRequest.prototype['AllowUpdate'] = undefined;

/**
 * Describes if the discovery of Linux subscriptions is enabled.
 * @member {module:model/UpdateServiceSettingsRequest.LinuxSubscriptionsDiscoveryEnum} LinuxSubscriptionsDiscovery
 */
UpdateServiceSettingsRequest.prototype['LinuxSubscriptionsDiscovery'] = undefined;

/**
 * @member {module:model/UpdateServiceSettingsRequestLinuxSubscriptionsDiscoverySettings} LinuxSubscriptionsDiscoverySettings
 */
UpdateServiceSettingsRequest.prototype['LinuxSubscriptionsDiscoverySettings'] = undefined;





/**
 * Allowed values for the <code>LinuxSubscriptionsDiscovery</code> property.
 * @enum {String}
 * @readonly
 */
UpdateServiceSettingsRequest['LinuxSubscriptionsDiscoveryEnum'] = {

    /**
     * value: "Enabled"
     * @const
     */
    "Enabled": "Enabled",

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled"
};



export default UpdateServiceSettingsRequest;

