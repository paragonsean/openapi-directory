/**
 * AWS License Manager Linux Subscriptions
 * With License Manager, you can discover and track your commercial Linux subscriptions on running Amazon EC2 instances.
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetServiceSettingsResponse from '../model/GetServiceSettingsResponse';
import ListLinuxSubscriptionInstancesRequest from '../model/ListLinuxSubscriptionInstancesRequest';
import ListLinuxSubscriptionInstancesResponse from '../model/ListLinuxSubscriptionInstancesResponse';
import ListLinuxSubscriptionsRequest from '../model/ListLinuxSubscriptionsRequest';
import ListLinuxSubscriptionsResponse from '../model/ListLinuxSubscriptionsResponse';
import UpdateServiceSettingsRequest from '../model/UpdateServiceSettingsRequest';
import UpdateServiceSettingsResponse from '../model/UpdateServiceSettingsResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 2018-05-10
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getServiceSettings operation.
     * @callback module:api/DefaultApi~getServiceSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetServiceSettingsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the Linux subscriptions service settings.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getServiceSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetServiceSettingsResponse}
     */
    getServiceSettings(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetServiceSettingsResponse;
      return this.apiClient.callApi(
        '/subscription/GetServiceSettings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listLinuxSubscriptionInstances operation.
     * @callback module:api/DefaultApi~listLinuxSubscriptionInstancesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListLinuxSubscriptionInstancesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the running Amazon EC2 instances that were discovered with commercial Linux subscriptions.
     * @param {module:model/ListLinuxSubscriptionInstancesRequest} listLinuxSubscriptionInstancesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listLinuxSubscriptionInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListLinuxSubscriptionInstancesResponse}
     */
    listLinuxSubscriptionInstances(listLinuxSubscriptionInstancesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listLinuxSubscriptionInstancesRequest;
      // verify the required parameter 'listLinuxSubscriptionInstancesRequest' is set
      if (listLinuxSubscriptionInstancesRequest === undefined || listLinuxSubscriptionInstancesRequest === null) {
        throw new Error("Missing the required parameter 'listLinuxSubscriptionInstancesRequest' when calling listLinuxSubscriptionInstances");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListLinuxSubscriptionInstancesResponse;
      return this.apiClient.callApi(
        '/subscription/ListLinuxSubscriptionInstances', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listLinuxSubscriptions operation.
     * @callback module:api/DefaultApi~listLinuxSubscriptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListLinuxSubscriptionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the Linux subscriptions that have been discovered. If you have linked your organization, the returned results will include data aggregated across your accounts in Organizations.
     * @param {module:model/ListLinuxSubscriptionsRequest} listLinuxSubscriptionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listLinuxSubscriptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListLinuxSubscriptionsResponse}
     */
    listLinuxSubscriptions(listLinuxSubscriptionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listLinuxSubscriptionsRequest;
      // verify the required parameter 'listLinuxSubscriptionsRequest' is set
      if (listLinuxSubscriptionsRequest === undefined || listLinuxSubscriptionsRequest === null) {
        throw new Error("Missing the required parameter 'listLinuxSubscriptionsRequest' when calling listLinuxSubscriptions");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListLinuxSubscriptionsResponse;
      return this.apiClient.callApi(
        '/subscription/ListLinuxSubscriptions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateServiceSettings operation.
     * @callback module:api/DefaultApi~updateServiceSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateServiceSettingsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the service settings for Linux subscriptions.
     * @param {module:model/UpdateServiceSettingsRequest} updateServiceSettingsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateServiceSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateServiceSettingsResponse}
     */
    updateServiceSettings(updateServiceSettingsRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateServiceSettingsRequest;
      // verify the required parameter 'updateServiceSettingsRequest' is set
      if (updateServiceSettingsRequest === undefined || updateServiceSettingsRequest === null) {
        throw new Error("Missing the required parameter 'updateServiceSettingsRequest' when calling updateServiceSettings");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateServiceSettingsResponse;
      return this.apiClient.callApi(
        '/subscription/UpdateServiceSettings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
