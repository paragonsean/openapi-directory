# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.subscription_limits_protection_group_limits import SubscriptionLimitsProtectionGroupLimits
from openapi_server.models.subscription_limits_protection_limits import SubscriptionLimitsProtectionLimits
from openapi_server import util


class SubscriptionSubscriptionLimits(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, protection_limits: SubscriptionLimitsProtectionLimits=None, protection_group_limits: SubscriptionLimitsProtectionGroupLimits=None):
        """SubscriptionSubscriptionLimits - a model defined in OpenAPI

        :param protection_limits: The protection_limits of this SubscriptionSubscriptionLimits.
        :param protection_group_limits: The protection_group_limits of this SubscriptionSubscriptionLimits.
        """
        self.openapi_types = {
            'protection_limits': SubscriptionLimitsProtectionLimits,
            'protection_group_limits': SubscriptionLimitsProtectionGroupLimits
        }

        self.attribute_map = {
            'protection_limits': 'ProtectionLimits',
            'protection_group_limits': 'ProtectionGroupLimits'
        }

        self._protection_limits = protection_limits
        self._protection_group_limits = protection_group_limits

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubscriptionSubscriptionLimits':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Subscription_SubscriptionLimits of this SubscriptionSubscriptionLimits.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def protection_limits(self):
        """Gets the protection_limits of this SubscriptionSubscriptionLimits.


        :return: The protection_limits of this SubscriptionSubscriptionLimits.
        :rtype: SubscriptionLimitsProtectionLimits
        """
        return self._protection_limits

    @protection_limits.setter
    def protection_limits(self, protection_limits):
        """Sets the protection_limits of this SubscriptionSubscriptionLimits.


        :param protection_limits: The protection_limits of this SubscriptionSubscriptionLimits.
        :type protection_limits: SubscriptionLimitsProtectionLimits
        """
        if protection_limits is None:
            raise ValueError("Invalid value for `protection_limits`, must not be `None`")

        self._protection_limits = protection_limits

    @property
    def protection_group_limits(self):
        """Gets the protection_group_limits of this SubscriptionSubscriptionLimits.


        :return: The protection_group_limits of this SubscriptionSubscriptionLimits.
        :rtype: SubscriptionLimitsProtectionGroupLimits
        """
        return self._protection_group_limits

    @protection_group_limits.setter
    def protection_group_limits(self, protection_group_limits):
        """Sets the protection_group_limits of this SubscriptionSubscriptionLimits.


        :param protection_group_limits: The protection_group_limits of this SubscriptionSubscriptionLimits.
        :type protection_group_limits: SubscriptionLimitsProtectionGroupLimits
        """
        if protection_group_limits is None:
            raise ValueError("Invalid value for `protection_group_limits`, must not be `None`")

        self._protection_group_limits = protection_group_limits
