# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AttackVectorDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, vector_type: str=None):
        """AttackVectorDescription - a model defined in OpenAPI

        :param vector_type: The vector_type of this AttackVectorDescription.
        """
        self.openapi_types = {
            'vector_type': str
        }

        self.attribute_map = {
            'vector_type': 'VectorType'
        }

        self._vector_type = vector_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AttackVectorDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AttackVectorDescription of this AttackVectorDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def vector_type(self):
        """Gets the vector_type of this AttackVectorDescription.


        :return: The vector_type of this AttackVectorDescription.
        :rtype: str
        """
        return self._vector_type

    @vector_type.setter
    def vector_type(self, vector_type):
        """Sets the vector_type of this AttackVectorDescription.


        :param vector_type: The vector_type of this AttackVectorDescription.
        :type vector_type: str
        """
        if vector_type is None:
            raise ValueError("Invalid value for `vector_type`, must not be `None`")

        self._vector_type = vector_type
