# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AssociateHealthCheckRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, protection_id: str=None, health_check_arn: str=None):
        """AssociateHealthCheckRequest - a model defined in OpenAPI

        :param protection_id: The protection_id of this AssociateHealthCheckRequest.
        :param health_check_arn: The health_check_arn of this AssociateHealthCheckRequest.
        """
        self.openapi_types = {
            'protection_id': str,
            'health_check_arn': str
        }

        self.attribute_map = {
            'protection_id': 'ProtectionId',
            'health_check_arn': 'HealthCheckArn'
        }

        self._protection_id = protection_id
        self._health_check_arn = health_check_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssociateHealthCheckRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssociateHealthCheckRequest of this AssociateHealthCheckRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def protection_id(self):
        """Gets the protection_id of this AssociateHealthCheckRequest.


        :return: The protection_id of this AssociateHealthCheckRequest.
        :rtype: str
        """
        return self._protection_id

    @protection_id.setter
    def protection_id(self, protection_id):
        """Sets the protection_id of this AssociateHealthCheckRequest.


        :param protection_id: The protection_id of this AssociateHealthCheckRequest.
        :type protection_id: str
        """
        if protection_id is None:
            raise ValueError("Invalid value for `protection_id`, must not be `None`")

        self._protection_id = protection_id

    @property
    def health_check_arn(self):
        """Gets the health_check_arn of this AssociateHealthCheckRequest.


        :return: The health_check_arn of this AssociateHealthCheckRequest.
        :rtype: str
        """
        return self._health_check_arn

    @health_check_arn.setter
    def health_check_arn(self, health_check_arn):
        """Sets the health_check_arn of this AssociateHealthCheckRequest.


        :param health_check_arn: The health_check_arn of this AssociateHealthCheckRequest.
        :type health_check_arn: str
        """
        if health_check_arn is None:
            raise ValueError("Invalid value for `health_check_arn`, must not be `None`")

        self._health_check_arn = health_check_arn
