# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.protected_resource_type import ProtectedResourceType
from openapi_server.models.protection_group_aggregation import ProtectionGroupAggregation
from openapi_server.models.protection_group_pattern import ProtectionGroupPattern
from openapi_server import util


class ProtectionGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, protection_group_id: str=None, aggregation: ProtectionGroupAggregation=None, pattern: ProtectionGroupPattern=None, resource_type: ProtectedResourceType=None, members: List=None, protection_group_arn: str=None):
        """ProtectionGroup - a model defined in OpenAPI

        :param protection_group_id: The protection_group_id of this ProtectionGroup.
        :param aggregation: The aggregation of this ProtectionGroup.
        :param pattern: The pattern of this ProtectionGroup.
        :param resource_type: The resource_type of this ProtectionGroup.
        :param members: The members of this ProtectionGroup.
        :param protection_group_arn: The protection_group_arn of this ProtectionGroup.
        """
        self.openapi_types = {
            'protection_group_id': str,
            'aggregation': ProtectionGroupAggregation,
            'pattern': ProtectionGroupPattern,
            'resource_type': ProtectedResourceType,
            'members': List,
            'protection_group_arn': str
        }

        self.attribute_map = {
            'protection_group_id': 'ProtectionGroupId',
            'aggregation': 'Aggregation',
            'pattern': 'Pattern',
            'resource_type': 'ResourceType',
            'members': 'Members',
            'protection_group_arn': 'ProtectionGroupArn'
        }

        self._protection_group_id = protection_group_id
        self._aggregation = aggregation
        self._pattern = pattern
        self._resource_type = resource_type
        self._members = members
        self._protection_group_arn = protection_group_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProtectionGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProtectionGroup of this ProtectionGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def protection_group_id(self):
        """Gets the protection_group_id of this ProtectionGroup.


        :return: The protection_group_id of this ProtectionGroup.
        :rtype: str
        """
        return self._protection_group_id

    @protection_group_id.setter
    def protection_group_id(self, protection_group_id):
        """Sets the protection_group_id of this ProtectionGroup.


        :param protection_group_id: The protection_group_id of this ProtectionGroup.
        :type protection_group_id: str
        """
        if protection_group_id is None:
            raise ValueError("Invalid value for `protection_group_id`, must not be `None`")

        self._protection_group_id = protection_group_id

    @property
    def aggregation(self):
        """Gets the aggregation of this ProtectionGroup.


        :return: The aggregation of this ProtectionGroup.
        :rtype: ProtectionGroupAggregation
        """
        return self._aggregation

    @aggregation.setter
    def aggregation(self, aggregation):
        """Sets the aggregation of this ProtectionGroup.


        :param aggregation: The aggregation of this ProtectionGroup.
        :type aggregation: ProtectionGroupAggregation
        """
        if aggregation is None:
            raise ValueError("Invalid value for `aggregation`, must not be `None`")

        self._aggregation = aggregation

    @property
    def pattern(self):
        """Gets the pattern of this ProtectionGroup.


        :return: The pattern of this ProtectionGroup.
        :rtype: ProtectionGroupPattern
        """
        return self._pattern

    @pattern.setter
    def pattern(self, pattern):
        """Sets the pattern of this ProtectionGroup.


        :param pattern: The pattern of this ProtectionGroup.
        :type pattern: ProtectionGroupPattern
        """
        if pattern is None:
            raise ValueError("Invalid value for `pattern`, must not be `None`")

        self._pattern = pattern

    @property
    def resource_type(self):
        """Gets the resource_type of this ProtectionGroup.


        :return: The resource_type of this ProtectionGroup.
        :rtype: ProtectedResourceType
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this ProtectionGroup.


        :param resource_type: The resource_type of this ProtectionGroup.
        :type resource_type: ProtectedResourceType
        """

        self._resource_type = resource_type

    @property
    def members(self):
        """Gets the members of this ProtectionGroup.


        :return: The members of this ProtectionGroup.
        :rtype: List
        """
        return self._members

    @members.setter
    def members(self, members):
        """Sets the members of this ProtectionGroup.


        :param members: The members of this ProtectionGroup.
        :type members: List
        """
        if members is None:
            raise ValueError("Invalid value for `members`, must not be `None`")

        self._members = members

    @property
    def protection_group_arn(self):
        """Gets the protection_group_arn of this ProtectionGroup.


        :return: The protection_group_arn of this ProtectionGroup.
        :rtype: str
        """
        return self._protection_group_arn

    @protection_group_arn.setter
    def protection_group_arn(self, protection_group_arn):
        """Sets the protection_group_arn of this ProtectionGroup.


        :param protection_group_arn: The protection_group_arn of this ProtectionGroup.
        :type protection_group_arn: str
        """

        self._protection_group_arn = protection_group_arn
