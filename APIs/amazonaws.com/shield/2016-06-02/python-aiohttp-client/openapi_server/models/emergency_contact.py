# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EmergencyContact(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email_address: str=None, phone_number: str=None, contact_notes: str=None):
        """EmergencyContact - a model defined in OpenAPI

        :param email_address: The email_address of this EmergencyContact.
        :param phone_number: The phone_number of this EmergencyContact.
        :param contact_notes: The contact_notes of this EmergencyContact.
        """
        self.openapi_types = {
            'email_address': str,
            'phone_number': str,
            'contact_notes': str
        }

        self.attribute_map = {
            'email_address': 'EmailAddress',
            'phone_number': 'PhoneNumber',
            'contact_notes': 'ContactNotes'
        }

        self._email_address = email_address
        self._phone_number = phone_number
        self._contact_notes = contact_notes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EmergencyContact':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EmergencyContact of this EmergencyContact.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email_address(self):
        """Gets the email_address of this EmergencyContact.


        :return: The email_address of this EmergencyContact.
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this EmergencyContact.


        :param email_address: The email_address of this EmergencyContact.
        :type email_address: str
        """
        if email_address is None:
            raise ValueError("Invalid value for `email_address`, must not be `None`")

        self._email_address = email_address

    @property
    def phone_number(self):
        """Gets the phone_number of this EmergencyContact.


        :return: The phone_number of this EmergencyContact.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this EmergencyContact.


        :param phone_number: The phone_number of this EmergencyContact.
        :type phone_number: str
        """

        self._phone_number = phone_number

    @property
    def contact_notes(self):
        """Gets the contact_notes of this EmergencyContact.


        :return: The contact_notes of this EmergencyContact.
        :rtype: str
        """
        return self._contact_notes

    @contact_notes.setter
    def contact_notes(self, contact_notes):
        """Sets the contact_notes of this EmergencyContact.


        :param contact_notes: The contact_notes of this EmergencyContact.
        :type contact_notes: str
        """

        self._contact_notes = contact_notes
