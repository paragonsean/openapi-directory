# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SummarizedCounter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, max: float=None, average: float=None, sum: float=None, n: int=None, unit: str=None):
        """SummarizedCounter - a model defined in OpenAPI

        :param name: The name of this SummarizedCounter.
        :param max: The max of this SummarizedCounter.
        :param average: The average of this SummarizedCounter.
        :param sum: The sum of this SummarizedCounter.
        :param n: The n of this SummarizedCounter.
        :param unit: The unit of this SummarizedCounter.
        """
        self.openapi_types = {
            'name': str,
            'max': float,
            'average': float,
            'sum': float,
            'n': int,
            'unit': str
        }

        self.attribute_map = {
            'name': 'Name',
            'max': 'Max',
            'average': 'Average',
            'sum': 'Sum',
            'n': 'N',
            'unit': 'Unit'
        }

        self._name = name
        self._max = max
        self._average = average
        self._sum = sum
        self._n = n
        self._unit = unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SummarizedCounter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SummarizedCounter of this SummarizedCounter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this SummarizedCounter.


        :return: The name of this SummarizedCounter.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SummarizedCounter.


        :param name: The name of this SummarizedCounter.
        :type name: str
        """

        self._name = name

    @property
    def max(self):
        """Gets the max of this SummarizedCounter.


        :return: The max of this SummarizedCounter.
        :rtype: float
        """
        return self._max

    @max.setter
    def max(self, max):
        """Sets the max of this SummarizedCounter.


        :param max: The max of this SummarizedCounter.
        :type max: float
        """

        self._max = max

    @property
    def average(self):
        """Gets the average of this SummarizedCounter.


        :return: The average of this SummarizedCounter.
        :rtype: float
        """
        return self._average

    @average.setter
    def average(self, average):
        """Sets the average of this SummarizedCounter.


        :param average: The average of this SummarizedCounter.
        :type average: float
        """

        self._average = average

    @property
    def sum(self):
        """Gets the sum of this SummarizedCounter.


        :return: The sum of this SummarizedCounter.
        :rtype: float
        """
        return self._sum

    @sum.setter
    def sum(self, sum):
        """Sets the sum of this SummarizedCounter.


        :param sum: The sum of this SummarizedCounter.
        :type sum: float
        """

        self._sum = sum

    @property
    def n(self):
        """Gets the n of this SummarizedCounter.


        :return: The n of this SummarizedCounter.
        :rtype: int
        """
        return self._n

    @n.setter
    def n(self, n):
        """Sets the n of this SummarizedCounter.


        :param n: The n of this SummarizedCounter.
        :type n: int
        """

        self._n = n

    @property
    def unit(self):
        """Gets the unit of this SummarizedCounter.


        :return: The unit of this SummarizedCounter.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this SummarizedCounter.


        :param unit: The unit of this SummarizedCounter.
        :type unit: str
        """

        self._unit = unit
