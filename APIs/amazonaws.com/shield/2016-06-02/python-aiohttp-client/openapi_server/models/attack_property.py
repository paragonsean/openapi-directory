# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attack_layer import AttackLayer
from openapi_server.models.attack_property_identifier import AttackPropertyIdentifier
from openapi_server.models.unit import Unit
from openapi_server import util


class AttackProperty(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attack_layer: AttackLayer=None, attack_property_identifier: AttackPropertyIdentifier=None, top_contributors: List=None, unit: Unit=None, total: int=None):
        """AttackProperty - a model defined in OpenAPI

        :param attack_layer: The attack_layer of this AttackProperty.
        :param attack_property_identifier: The attack_property_identifier of this AttackProperty.
        :param top_contributors: The top_contributors of this AttackProperty.
        :param unit: The unit of this AttackProperty.
        :param total: The total of this AttackProperty.
        """
        self.openapi_types = {
            'attack_layer': AttackLayer,
            'attack_property_identifier': AttackPropertyIdentifier,
            'top_contributors': List,
            'unit': Unit,
            'total': int
        }

        self.attribute_map = {
            'attack_layer': 'AttackLayer',
            'attack_property_identifier': 'AttackPropertyIdentifier',
            'top_contributors': 'TopContributors',
            'unit': 'Unit',
            'total': 'Total'
        }

        self._attack_layer = attack_layer
        self._attack_property_identifier = attack_property_identifier
        self._top_contributors = top_contributors
        self._unit = unit
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AttackProperty':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AttackProperty of this AttackProperty.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attack_layer(self):
        """Gets the attack_layer of this AttackProperty.


        :return: The attack_layer of this AttackProperty.
        :rtype: AttackLayer
        """
        return self._attack_layer

    @attack_layer.setter
    def attack_layer(self, attack_layer):
        """Sets the attack_layer of this AttackProperty.


        :param attack_layer: The attack_layer of this AttackProperty.
        :type attack_layer: AttackLayer
        """

        self._attack_layer = attack_layer

    @property
    def attack_property_identifier(self):
        """Gets the attack_property_identifier of this AttackProperty.


        :return: The attack_property_identifier of this AttackProperty.
        :rtype: AttackPropertyIdentifier
        """
        return self._attack_property_identifier

    @attack_property_identifier.setter
    def attack_property_identifier(self, attack_property_identifier):
        """Sets the attack_property_identifier of this AttackProperty.


        :param attack_property_identifier: The attack_property_identifier of this AttackProperty.
        :type attack_property_identifier: AttackPropertyIdentifier
        """

        self._attack_property_identifier = attack_property_identifier

    @property
    def top_contributors(self):
        """Gets the top_contributors of this AttackProperty.


        :return: The top_contributors of this AttackProperty.
        :rtype: List
        """
        return self._top_contributors

    @top_contributors.setter
    def top_contributors(self, top_contributors):
        """Sets the top_contributors of this AttackProperty.


        :param top_contributors: The top_contributors of this AttackProperty.
        :type top_contributors: List
        """

        self._top_contributors = top_contributors

    @property
    def unit(self):
        """Gets the unit of this AttackProperty.


        :return: The unit of this AttackProperty.
        :rtype: Unit
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this AttackProperty.


        :param unit: The unit of this AttackProperty.
        :type unit: Unit
        """

        self._unit = unit

    @property
    def total(self):
        """Gets the total of this AttackProperty.


        :return: The total of this AttackProperty.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this AttackProperty.


        :param total: The total of this AttackProperty.
        :type total: int
        """

        self._total = total
