# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.auto_renew import AutoRenew
from openapi_server.models.proactive_engagement_status import ProactiveEngagementStatus
from openapi_server.models.subscription_subscription_limits import SubscriptionSubscriptionLimits
from openapi_server import util


class Subscription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, start_time: datetime=None, end_time: datetime=None, time_commitment_in_seconds: int=None, auto_renew: AutoRenew=None, limits: List=None, proactive_engagement_status: ProactiveEngagementStatus=None, subscription_limits: SubscriptionSubscriptionLimits=None, subscription_arn: str=None):
        """Subscription - a model defined in OpenAPI

        :param start_time: The start_time of this Subscription.
        :param end_time: The end_time of this Subscription.
        :param time_commitment_in_seconds: The time_commitment_in_seconds of this Subscription.
        :param auto_renew: The auto_renew of this Subscription.
        :param limits: The limits of this Subscription.
        :param proactive_engagement_status: The proactive_engagement_status of this Subscription.
        :param subscription_limits: The subscription_limits of this Subscription.
        :param subscription_arn: The subscription_arn of this Subscription.
        """
        self.openapi_types = {
            'start_time': datetime,
            'end_time': datetime,
            'time_commitment_in_seconds': int,
            'auto_renew': AutoRenew,
            'limits': List,
            'proactive_engagement_status': ProactiveEngagementStatus,
            'subscription_limits': SubscriptionSubscriptionLimits,
            'subscription_arn': str
        }

        self.attribute_map = {
            'start_time': 'StartTime',
            'end_time': 'EndTime',
            'time_commitment_in_seconds': 'TimeCommitmentInSeconds',
            'auto_renew': 'AutoRenew',
            'limits': 'Limits',
            'proactive_engagement_status': 'ProactiveEngagementStatus',
            'subscription_limits': 'SubscriptionLimits',
            'subscription_arn': 'SubscriptionArn'
        }

        self._start_time = start_time
        self._end_time = end_time
        self._time_commitment_in_seconds = time_commitment_in_seconds
        self._auto_renew = auto_renew
        self._limits = limits
        self._proactive_engagement_status = proactive_engagement_status
        self._subscription_limits = subscription_limits
        self._subscription_arn = subscription_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Subscription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Subscription of this Subscription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def start_time(self):
        """Gets the start_time of this Subscription.


        :return: The start_time of this Subscription.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this Subscription.


        :param start_time: The start_time of this Subscription.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this Subscription.


        :return: The end_time of this Subscription.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this Subscription.


        :param end_time: The end_time of this Subscription.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def time_commitment_in_seconds(self):
        """Gets the time_commitment_in_seconds of this Subscription.


        :return: The time_commitment_in_seconds of this Subscription.
        :rtype: int
        """
        return self._time_commitment_in_seconds

    @time_commitment_in_seconds.setter
    def time_commitment_in_seconds(self, time_commitment_in_seconds):
        """Sets the time_commitment_in_seconds of this Subscription.


        :param time_commitment_in_seconds: The time_commitment_in_seconds of this Subscription.
        :type time_commitment_in_seconds: int
        """

        self._time_commitment_in_seconds = time_commitment_in_seconds

    @property
    def auto_renew(self):
        """Gets the auto_renew of this Subscription.


        :return: The auto_renew of this Subscription.
        :rtype: AutoRenew
        """
        return self._auto_renew

    @auto_renew.setter
    def auto_renew(self, auto_renew):
        """Sets the auto_renew of this Subscription.


        :param auto_renew: The auto_renew of this Subscription.
        :type auto_renew: AutoRenew
        """

        self._auto_renew = auto_renew

    @property
    def limits(self):
        """Gets the limits of this Subscription.


        :return: The limits of this Subscription.
        :rtype: List
        """
        return self._limits

    @limits.setter
    def limits(self, limits):
        """Sets the limits of this Subscription.


        :param limits: The limits of this Subscription.
        :type limits: List
        """

        self._limits = limits

    @property
    def proactive_engagement_status(self):
        """Gets the proactive_engagement_status of this Subscription.


        :return: The proactive_engagement_status of this Subscription.
        :rtype: ProactiveEngagementStatus
        """
        return self._proactive_engagement_status

    @proactive_engagement_status.setter
    def proactive_engagement_status(self, proactive_engagement_status):
        """Sets the proactive_engagement_status of this Subscription.


        :param proactive_engagement_status: The proactive_engagement_status of this Subscription.
        :type proactive_engagement_status: ProactiveEngagementStatus
        """

        self._proactive_engagement_status = proactive_engagement_status

    @property
    def subscription_limits(self):
        """Gets the subscription_limits of this Subscription.


        :return: The subscription_limits of this Subscription.
        :rtype: SubscriptionSubscriptionLimits
        """
        return self._subscription_limits

    @subscription_limits.setter
    def subscription_limits(self, subscription_limits):
        """Sets the subscription_limits of this Subscription.


        :param subscription_limits: The subscription_limits of this Subscription.
        :type subscription_limits: SubscriptionSubscriptionLimits
        """
        if subscription_limits is None:
            raise ValueError("Invalid value for `subscription_limits`, must not be `None`")

        self._subscription_limits = subscription_limits

    @property
    def subscription_arn(self):
        """Gets the subscription_arn of this Subscription.


        :return: The subscription_arn of this Subscription.
        :rtype: str
        """
        return self._subscription_arn

    @subscription_arn.setter
    def subscription_arn(self, subscription_arn):
        """Sets the subscription_arn of this Subscription.


        :param subscription_arn: The subscription_arn of this Subscription.
        :type subscription_arn: str
        """

        self._subscription_arn = subscription_arn
