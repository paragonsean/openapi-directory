# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.describe_protection_group_response_protection_group import DescribeProtectionGroupResponseProtectionGroup
from openapi_server import util


class DescribeProtectionGroupResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, protection_group: DescribeProtectionGroupResponseProtectionGroup=None):
        """DescribeProtectionGroupResponse - a model defined in OpenAPI

        :param protection_group: The protection_group of this DescribeProtectionGroupResponse.
        """
        self.openapi_types = {
            'protection_group': DescribeProtectionGroupResponseProtectionGroup
        }

        self.attribute_map = {
            'protection_group': 'ProtectionGroup'
        }

        self._protection_group = protection_group

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeProtectionGroupResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeProtectionGroupResponse of this DescribeProtectionGroupResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def protection_group(self):
        """Gets the protection_group of this DescribeProtectionGroupResponse.


        :return: The protection_group of this DescribeProtectionGroupResponse.
        :rtype: DescribeProtectionGroupResponseProtectionGroup
        """
        return self._protection_group

    @protection_group.setter
    def protection_group(self, protection_group):
        """Sets the protection_group of this DescribeProtectionGroupResponse.


        :param protection_group: The protection_group of this DescribeProtectionGroupResponse.
        :type protection_group: DescribeProtectionGroupResponseProtectionGroup
        """
        if protection_group is None:
            raise ValueError("Invalid value for `protection_group`, must not be `None`")

        self._protection_group = protection_group
