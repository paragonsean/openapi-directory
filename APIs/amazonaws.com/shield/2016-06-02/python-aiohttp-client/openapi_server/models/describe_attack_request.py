# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DescribeAttackRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attack_id: str=None):
        """DescribeAttackRequest - a model defined in OpenAPI

        :param attack_id: The attack_id of this DescribeAttackRequest.
        """
        self.openapi_types = {
            'attack_id': str
        }

        self.attribute_map = {
            'attack_id': 'AttackId'
        }

        self._attack_id = attack_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeAttackRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeAttackRequest of this DescribeAttackRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attack_id(self):
        """Gets the attack_id of this DescribeAttackRequest.


        :return: The attack_id of this DescribeAttackRequest.
        :rtype: str
        """
        return self._attack_id

    @attack_id.setter
    def attack_id(self, attack_id):
        """Sets the attack_id of this DescribeAttackRequest.


        :param attack_id: The attack_id of this DescribeAttackRequest.
        :type attack_id: str
        """
        if attack_id is None:
            raise ValueError("Invalid value for `attack_id`, must not be `None`")

        self._attack_id = attack_id
