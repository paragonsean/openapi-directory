# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attack_statistics_data_item_attack_volume import AttackStatisticsDataItemAttackVolume
from openapi_server import util


class AttackStatisticsDataItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attack_volume: AttackStatisticsDataItemAttackVolume=None, attack_count: int=None):
        """AttackStatisticsDataItem - a model defined in OpenAPI

        :param attack_volume: The attack_volume of this AttackStatisticsDataItem.
        :param attack_count: The attack_count of this AttackStatisticsDataItem.
        """
        self.openapi_types = {
            'attack_volume': AttackStatisticsDataItemAttackVolume,
            'attack_count': int
        }

        self.attribute_map = {
            'attack_volume': 'AttackVolume',
            'attack_count': 'AttackCount'
        }

        self._attack_volume = attack_volume
        self._attack_count = attack_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AttackStatisticsDataItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AttackStatisticsDataItem of this AttackStatisticsDataItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attack_volume(self):
        """Gets the attack_volume of this AttackStatisticsDataItem.


        :return: The attack_volume of this AttackStatisticsDataItem.
        :rtype: AttackStatisticsDataItemAttackVolume
        """
        return self._attack_volume

    @attack_volume.setter
    def attack_volume(self, attack_volume):
        """Sets the attack_volume of this AttackStatisticsDataItem.


        :param attack_volume: The attack_volume of this AttackStatisticsDataItem.
        :type attack_volume: AttackStatisticsDataItemAttackVolume
        """

        self._attack_volume = attack_volume

    @property
    def attack_count(self):
        """Gets the attack_count of this AttackStatisticsDataItem.


        :return: The attack_count of this AttackStatisticsDataItem.
        :rtype: int
        """
        return self._attack_count

    @attack_count.setter
    def attack_count(self, attack_count):
        """Sets the attack_count of this AttackStatisticsDataItem.


        :param attack_count: The attack_count of this AttackStatisticsDataItem.
        :type attack_count: int
        """
        if attack_count is None:
            raise ValueError("Invalid value for `attack_count`, must not be `None`")

        self._attack_count = attack_count
