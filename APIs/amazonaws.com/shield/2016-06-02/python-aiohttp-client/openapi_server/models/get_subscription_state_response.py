# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.subscription_state import SubscriptionState
from openapi_server import util


class GetSubscriptionStateResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, subscription_state: SubscriptionState=None):
        """GetSubscriptionStateResponse - a model defined in OpenAPI

        :param subscription_state: The subscription_state of this GetSubscriptionStateResponse.
        """
        self.openapi_types = {
            'subscription_state': SubscriptionState
        }

        self.attribute_map = {
            'subscription_state': 'SubscriptionState'
        }

        self._subscription_state = subscription_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetSubscriptionStateResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetSubscriptionStateResponse of this GetSubscriptionStateResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def subscription_state(self):
        """Gets the subscription_state of this GetSubscriptionStateResponse.


        :return: The subscription_state of this GetSubscriptionStateResponse.
        :rtype: SubscriptionState
        """
        return self._subscription_state

    @subscription_state.setter
    def subscription_state(self, subscription_state):
        """Sets the subscription_state of this GetSubscriptionStateResponse.


        :param subscription_state: The subscription_state of this GetSubscriptionStateResponse.
        :type subscription_state: SubscriptionState
        """
        if subscription_state is None:
            raise ValueError("Invalid value for `subscription_state`, must not be `None`")

        self._subscription_state = subscription_state
