# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.protection_group_pattern_type_limits_arbitrary_pattern_limits import ProtectionGroupPatternTypeLimitsArbitraryPatternLimits
from openapi_server import util


class ProtectionGroupPatternTypeLimits(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arbitrary_pattern_limits: ProtectionGroupPatternTypeLimitsArbitraryPatternLimits=None):
        """ProtectionGroupPatternTypeLimits - a model defined in OpenAPI

        :param arbitrary_pattern_limits: The arbitrary_pattern_limits of this ProtectionGroupPatternTypeLimits.
        """
        self.openapi_types = {
            'arbitrary_pattern_limits': ProtectionGroupPatternTypeLimitsArbitraryPatternLimits
        }

        self.attribute_map = {
            'arbitrary_pattern_limits': 'ArbitraryPatternLimits'
        }

        self._arbitrary_pattern_limits = arbitrary_pattern_limits

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProtectionGroupPatternTypeLimits':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProtectionGroupPatternTypeLimits of this ProtectionGroupPatternTypeLimits.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arbitrary_pattern_limits(self):
        """Gets the arbitrary_pattern_limits of this ProtectionGroupPatternTypeLimits.


        :return: The arbitrary_pattern_limits of this ProtectionGroupPatternTypeLimits.
        :rtype: ProtectionGroupPatternTypeLimitsArbitraryPatternLimits
        """
        return self._arbitrary_pattern_limits

    @arbitrary_pattern_limits.setter
    def arbitrary_pattern_limits(self, arbitrary_pattern_limits):
        """Sets the arbitrary_pattern_limits of this ProtectionGroupPatternTypeLimits.


        :param arbitrary_pattern_limits: The arbitrary_pattern_limits of this ProtectionGroupPatternTypeLimits.
        :type arbitrary_pattern_limits: ProtectionGroupPatternTypeLimitsArbitraryPatternLimits
        """
        if arbitrary_pattern_limits is None:
            raise ValueError("Invalid value for `arbitrary_pattern_limits`, must not be `None`")

        self._arbitrary_pattern_limits = arbitrary_pattern_limits
