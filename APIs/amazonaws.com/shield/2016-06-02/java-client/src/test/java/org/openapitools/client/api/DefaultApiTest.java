/*
 * AWS Shield
 * <fullname>Shield Advanced</fullname> <p>This is the <i>Shield Advanced API Reference</i>. This guide is for developers who need detailed information about the Shield Advanced API actions, data types, and errors. For detailed information about WAF and Shield Advanced features and an overview of how to use the WAF and Shield Advanced APIs, see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/\">WAF and Shield Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-06-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AssociateDRTLogBucketRequest;
import org.openapitools.client.model.AssociateDRTRoleRequest;
import org.openapitools.client.model.AssociateHealthCheckRequest;
import org.openapitools.client.model.AssociateProactiveEngagementDetailsRequest;
import org.openapitools.client.model.CreateProtectionGroupRequest;
import org.openapitools.client.model.CreateProtectionRequest;
import org.openapitools.client.model.CreateProtectionResponse;
import org.openapitools.client.model.DeleteProtectionGroupRequest;
import org.openapitools.client.model.DeleteProtectionRequest;
import org.openapitools.client.model.DescribeAttackRequest;
import org.openapitools.client.model.DescribeAttackResponse;
import org.openapitools.client.model.DescribeAttackStatisticsResponse;
import org.openapitools.client.model.DescribeDRTAccessResponse;
import org.openapitools.client.model.DescribeEmergencyContactSettingsResponse;
import org.openapitools.client.model.DescribeProtectionGroupRequest;
import org.openapitools.client.model.DescribeProtectionGroupResponse;
import org.openapitools.client.model.DescribeProtectionRequest;
import org.openapitools.client.model.DescribeProtectionResponse;
import org.openapitools.client.model.DescribeSubscriptionResponse;
import org.openapitools.client.model.DisableApplicationLayerAutomaticResponseRequest;
import org.openapitools.client.model.DisassociateDRTLogBucketRequest;
import org.openapitools.client.model.DisassociateHealthCheckRequest;
import org.openapitools.client.model.EnableApplicationLayerAutomaticResponseRequest;
import org.openapitools.client.model.GetSubscriptionStateResponse;
import org.openapitools.client.model.ListAttacksRequest;
import org.openapitools.client.model.ListAttacksResponse;
import org.openapitools.client.model.ListProtectionGroupsRequest;
import org.openapitools.client.model.ListProtectionGroupsResponse;
import org.openapitools.client.model.ListProtectionsRequest;
import org.openapitools.client.model.ListProtectionsResponse;
import org.openapitools.client.model.ListResourcesInProtectionGroupRequest;
import org.openapitools.client.model.ListResourcesInProtectionGroupResponse;
import org.openapitools.client.model.ListTagsForResourceRequest;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UntagResourceRequest;
import org.openapitools.client.model.UpdateApplicationLayerAutomaticResponseRequest;
import org.openapitools.client.model.UpdateEmergencyContactSettingsRequest;
import org.openapitools.client.model.UpdateProtectionGroupRequest;
import org.openapitools.client.model.UpdateSubscriptionRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * &lt;p&gt;Authorizes the Shield Response Team (SRT) to access the specified Amazon S3 bucket containing log data such as Application Load Balancer access logs, CloudFront logs, or logs from third party sources. You can associate up to 10 Amazon S3 buckets with your subscription.&lt;/p&gt; &lt;p&gt;To use the services of the SRT and make an &lt;code&gt;AssociateDRTLogBucket&lt;/code&gt; request, you must be subscribed to the &lt;a href&#x3D;\&quot;http://aws.amazon.com/premiumsupport/business-support/\&quot;&gt;Business Support plan&lt;/a&gt; or the &lt;a href&#x3D;\&quot;http://aws.amazon.com/premiumsupport/enterprise-support/\&quot;&gt;Enterprise Support plan&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associateDRTLogBucketTest() throws ApiException {
        String xAmzTarget = null;
        AssociateDRTLogBucketRequest associateDRTLogBucketRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.associateDRTLogBucket(xAmzTarget, associateDRTLogBucketRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Authorizes the Shield Response Team (SRT) using the specified role, to access your Amazon Web Services account to assist with DDoS attack mitigation during potential attacks. This enables the SRT to inspect your WAF configuration and create or update WAF rules and web ACLs.&lt;/p&gt; &lt;p&gt;You can associate only one &lt;code&gt;RoleArn&lt;/code&gt; with your subscription. If you submit an &lt;code&gt;AssociateDRTRole&lt;/code&gt; request for an account that already has an associated role, the new &lt;code&gt;RoleArn&lt;/code&gt; will replace the existing &lt;code&gt;RoleArn&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;Prior to making the &lt;code&gt;AssociateDRTRole&lt;/code&gt; request, you must attach the &lt;code&gt;AWSShieldDRTAccessPolicy&lt;/code&gt; managed policy to the role that you&#39;ll specify in the request. You can access this policy in the IAM console at &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/iam/home?#/policies/arn:aws:iam::aws:policy/service-role/AWSShieldDRTAccessPolicy\&quot;&gt;AWSShieldDRTAccessPolicy&lt;/a&gt;. For more information see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_manage-attach-detach.html\&quot;&gt;Adding and removing IAM identity permissions&lt;/a&gt;. The role must also trust the service principal &lt;code&gt;drt.shield.amazonaws.com&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html\&quot;&gt;IAM JSON policy elements: Principal&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The SRT will have access only to your WAF and Shield resources. By submitting this request, you authorize the SRT to inspect your WAF and Shield configuration and create and update WAF rules and web ACLs on your behalf. The SRT takes these actions only if explicitly authorized by you.&lt;/p&gt; &lt;p&gt;You must have the &lt;code&gt;iam:PassRole&lt;/code&gt; permission to make an &lt;code&gt;AssociateDRTRole&lt;/code&gt; request. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_passrole.html\&quot;&gt;Granting a user permissions to pass a role to an Amazon Web Services service&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;To use the services of the SRT and make an &lt;code&gt;AssociateDRTRole&lt;/code&gt; request, you must be subscribed to the &lt;a href&#x3D;\&quot;http://aws.amazon.com/premiumsupport/business-support/\&quot;&gt;Business Support plan&lt;/a&gt; or the &lt;a href&#x3D;\&quot;http://aws.amazon.com/premiumsupport/enterprise-support/\&quot;&gt;Enterprise Support plan&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associateDRTRoleTest() throws ApiException {
        String xAmzTarget = null;
        AssociateDRTRoleRequest associateDRTRoleRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.associateDRTRole(xAmzTarget, associateDRTRoleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Adds health-based detection to the Shield Advanced protection for a resource. Shield Advanced health-based detection uses the health of your Amazon Web Services resource to improve responsiveness and accuracy in attack detection and response. &lt;/p&gt; &lt;p&gt;You define the health check in RouteÂ 53 and then associate it with your Shield Advanced protection. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/ddos-overview.html#ddos-advanced-health-check-option\&quot;&gt;Shield Advanced Health-Based Detection&lt;/a&gt; in the &lt;i&gt;WAF Developer Guide&lt;/i&gt;. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associateHealthCheckTest() throws ApiException {
        String xAmzTarget = null;
        AssociateHealthCheckRequest associateHealthCheckRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.associateHealthCheck(xAmzTarget, associateHealthCheckRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Initializes proactive engagement and sets the list of contacts for the Shield Response Team (SRT) to use. You must provide at least one phone number in the emergency contact list. &lt;/p&gt; &lt;p&gt;After you have initialized proactive engagement using this call, to disable or enable proactive engagement, use the calls &lt;code&gt;DisableProactiveEngagement&lt;/code&gt; and &lt;code&gt;EnableProactiveEngagement&lt;/code&gt;. &lt;/p&gt; &lt;note&gt; &lt;p&gt;This call defines the list of email addresses and phone numbers that the SRT can use to contact you for escalations to the SRT and to initiate proactive customer support.&lt;/p&gt; &lt;p&gt;The contacts that you provide in the request replace any contacts that were already defined. If you already have contacts defined and want to use them, retrieve the list using &lt;code&gt;DescribeEmergencyContactSettings&lt;/code&gt; and then provide it to this call. &lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associateProactiveEngagementDetailsTest() throws ApiException {
        String xAmzTarget = null;
        AssociateProactiveEngagementDetailsRequest associateProactiveEngagementDetailsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.associateProactiveEngagementDetails(xAmzTarget, associateProactiveEngagementDetailsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Enables Shield Advanced for a specific Amazon Web Services resource. The resource can be an Amazon CloudFront distribution, Amazon RouteÂ 53 hosted zone, Global Accelerator standard accelerator, Elastic IP Address, Application Load Balancer, or a Classic Load Balancer. You can protect Amazon EC2 instances and Network Load Balancers by association with protected Amazon EC2 Elastic IP addresses.&lt;/p&gt; &lt;p&gt;You can add protection to only a single resource with each &lt;code&gt;CreateProtection&lt;/code&gt; request. You can add protection to multiple resources at once through the Shield Advanced console at &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/wafv2/shieldv2#/\&quot;&gt;https://console.aws.amazon.com/wafv2/shieldv2#/&lt;/a&gt;. For more information see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/getting-started-ddos.html\&quot;&gt;Getting Started with Shield Advanced&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/configure-new-protection.html\&quot;&gt;Adding Shield Advanced protection to Amazon Web Services resources&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createProtectionTest() throws ApiException {
        String xAmzTarget = null;
        CreateProtectionRequest createProtectionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateProtectionResponse response = api.createProtection(xAmzTarget, createProtectionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a grouping of protected resources so they can be handled as a collective. This resource grouping improves the accuracy of detection and reduces false positives. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createProtectionGroupTest() throws ApiException {
        String xAmzTarget = null;
        CreateProtectionGroupRequest createProtectionGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.createProtectionGroup(xAmzTarget, createProtectionGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Activates Shield Advanced for an account.&lt;/p&gt; &lt;note&gt; &lt;p&gt;For accounts that are members of an Organizations organization, Shield Advanced subscriptions are billed against the organization&#39;s payer account, regardless of whether the payer account itself is subscribed. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;When you initially create a subscription, your subscription is set to be automatically renewed at the end of the existing subscription period. You can change this by submitting an &lt;code&gt;UpdateSubscription&lt;/code&gt; request. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSubscriptionTest() throws ApiException {
        String xAmzTarget = null;
        Object body = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.createSubscription(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an Shield Advanced &lt;a&gt;Protection&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteProtectionTest() throws ApiException {
        String xAmzTarget = null;
        DeleteProtectionRequest deleteProtectionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteProtection(xAmzTarget, deleteProtectionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes the specified protection group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteProtectionGroupTest() throws ApiException {
        String xAmzTarget = null;
        DeleteProtectionGroupRequest deleteProtectionGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteProtectionGroup(xAmzTarget, deleteProtectionGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes Shield Advanced from an account. Shield Advanced requires a 1-year subscription commitment. You cannot delete a subscription prior to the completion of that commitment. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSubscriptionTest() throws ApiException {
        String xAmzTarget = null;
        Object body = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteSubscription(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes the details of a DDoS attack. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeAttackTest() throws ApiException {
        String xAmzTarget = null;
        DescribeAttackRequest describeAttackRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeAttackResponse response = api.describeAttack(xAmzTarget, describeAttackRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Provides information about the number and type of attacks Shield has detected in the last year for all resources that belong to your account, regardless of whether you&#39;ve defined Shield protections for them. This operation is available to Shield customers as well as to Shield Advanced customers.&lt;/p&gt; &lt;p&gt;The operation returns data for the time range of midnight UTC, one year ago, to midnight UTC, today. For example, if the current time is &lt;code&gt;2020-10-26 15:39:32 PDT&lt;/code&gt;, equal to &lt;code&gt;2020-10-26 22:39:32 UTC&lt;/code&gt;, then the time range for the attack data returned is from &lt;code&gt;2019-10-26 00:00:00 UTC&lt;/code&gt; to &lt;code&gt;2020-10-26 00:00:00 UTC&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;The time range indicates the period covered by the attack statistics data items.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeAttackStatisticsTest() throws ApiException {
        String xAmzTarget = null;
        Object body = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeAttackStatisticsResponse response = api.describeAttackStatistics(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns the current role and list of Amazon S3 log buckets used by the Shield Response Team (SRT) to access your Amazon Web Services account while assisting with attack mitigation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeDRTAccessTest() throws ApiException {
        String xAmzTarget = null;
        Object body = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeDRTAccessResponse response = api.describeDRTAccess(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * A list of email addresses and phone numbers that the Shield Response Team (SRT) can use to contact you if you have proactive engagement enabled, for escalations to the SRT and to initiate proactive customer support.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeEmergencyContactSettingsTest() throws ApiException {
        String xAmzTarget = null;
        Object body = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeEmergencyContactSettingsResponse response = api.describeEmergencyContactSettings(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists the details of a &lt;a&gt;Protection&lt;/a&gt; object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeProtectionTest() throws ApiException {
        String xAmzTarget = null;
        DescribeProtectionRequest describeProtectionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeProtectionResponse response = api.describeProtection(xAmzTarget, describeProtectionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns the specification for the specified protection group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeProtectionGroupTest() throws ApiException {
        String xAmzTarget = null;
        DescribeProtectionGroupRequest describeProtectionGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeProtectionGroupResponse response = api.describeProtectionGroup(xAmzTarget, describeProtectionGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Provides details about the Shield Advanced subscription for an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeSubscriptionTest() throws ApiException {
        String xAmzTarget = null;
        Object body = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeSubscriptionResponse response = api.describeSubscription(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Disable the Shield Advanced automatic application layer DDoS mitigation feature for the protected resource. This stops Shield Advanced from creating, verifying, and applying WAF rules for attacks that it detects for the resource. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disableApplicationLayerAutomaticResponseTest() throws ApiException {
        String xAmzTarget = null;
        DisableApplicationLayerAutomaticResponseRequest disableApplicationLayerAutomaticResponseRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.disableApplicationLayerAutomaticResponse(xAmzTarget, disableApplicationLayerAutomaticResponseRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes authorization from the Shield Response Team (SRT) to notify contacts about escalations to the SRT and to initiate proactive customer support.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disableProactiveEngagementTest() throws ApiException {
        String xAmzTarget = null;
        Object body = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.disableProactiveEngagement(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes the Shield Response Team&#39;s (SRT) access to the specified Amazon S3 bucket containing the logs that you shared previously.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociateDRTLogBucketTest() throws ApiException {
        String xAmzTarget = null;
        DisassociateDRTLogBucketRequest disassociateDRTLogBucketRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.disassociateDRTLogBucket(xAmzTarget, disassociateDRTLogBucketRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes the Shield Response Team&#39;s (SRT) access to your Amazon Web Services account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociateDRTRoleTest() throws ApiException {
        String xAmzTarget = null;
        Object body = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.disassociateDRTRole(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Removes health-based detection from the Shield Advanced protection for a resource. Shield Advanced health-based detection uses the health of your Amazon Web Services resource to improve responsiveness and accuracy in attack detection and response. &lt;/p&gt; &lt;p&gt;You define the health check in RouteÂ 53 and then associate or disassociate it with your Shield Advanced protection. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/ddos-overview.html#ddos-advanced-health-check-option\&quot;&gt;Shield Advanced Health-Based Detection&lt;/a&gt; in the &lt;i&gt;WAF Developer Guide&lt;/i&gt;. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociateHealthCheckTest() throws ApiException {
        String xAmzTarget = null;
        DisassociateHealthCheckRequest disassociateHealthCheckRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.disassociateHealthCheck(xAmzTarget, disassociateHealthCheckRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Enable the Shield Advanced automatic application layer DDoS mitigation for the protected resource. &lt;/p&gt; &lt;note&gt; &lt;p&gt;This feature is available for Amazon CloudFront distributions and Application Load Balancers only.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;This causes Shield Advanced to create, verify, and apply WAF rules for DDoS attacks that it detects for the resource. Shield Advanced applies the rules in a Shield rule group inside the web ACL that you&#39;ve associated with the resource. For information about how automatic mitigation works and the requirements for using it, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/ddos-advanced-automatic-app-layer-response.html\&quot;&gt;Shield Advanced automatic application layer DDoS mitigation&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Don&#39;t use this action to make changes to automatic mitigation settings when it&#39;s already enabled for a resource. Instead, use &lt;a&gt;UpdateApplicationLayerAutomaticResponse&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;To use this feature, you must associate a web ACL with the protected resource. The web ACL must be created using the latest version of WAF (v2). You can associate the web ACL through the Shield Advanced console at &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/wafv2/shieldv2#/\&quot;&gt;https://console.aws.amazon.com/wafv2/shieldv2#/&lt;/a&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/getting-started-ddos.html\&quot;&gt;Getting Started with Shield Advanced&lt;/a&gt;. You can also associate the web ACL to the resource through the WAF console or the WAF API, but you must manage Shield Advanced automatic mitigation through Shield Advanced. For information about WAF, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enableApplicationLayerAutomaticResponseTest() throws ApiException {
        String xAmzTarget = null;
        EnableApplicationLayerAutomaticResponseRequest enableApplicationLayerAutomaticResponseRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.enableApplicationLayerAutomaticResponse(xAmzTarget, enableApplicationLayerAutomaticResponseRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Authorizes the Shield Response Team (SRT) to use email and phone to notify contacts about escalations to the SRT and to initiate proactive customer support.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enableProactiveEngagementTest() throws ApiException {
        String xAmzTarget = null;
        Object body = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.enableProactiveEngagement(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns the &lt;code&gt;SubscriptionState&lt;/code&gt;, either &lt;code&gt;Active&lt;/code&gt; or &lt;code&gt;Inactive&lt;/code&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSubscriptionStateTest() throws ApiException {
        String xAmzTarget = null;
        Object body = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetSubscriptionStateResponse response = api.getSubscriptionState(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns all ongoing DDoS attacks or all DDoS attacks during a specified time period.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAttacksTest() throws ApiException {
        String xAmzTarget = null;
        ListAttacksRequest listAttacksRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListAttacksResponse response = api.listAttacks(xAmzTarget, listAttacksRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves &lt;a&gt;ProtectionGroup&lt;/a&gt; objects for the account. You can retrieve all protection groups or you can provide filtering criteria and retrieve just the subset of protection groups that match the criteria. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listProtectionGroupsTest() throws ApiException {
        String xAmzTarget = null;
        ListProtectionGroupsRequest listProtectionGroupsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListProtectionGroupsResponse response = api.listProtectionGroups(xAmzTarget, listProtectionGroupsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves &lt;a&gt;Protection&lt;/a&gt; objects for the account. You can retrieve all protections or you can provide filtering criteria and retrieve just the subset of protections that match the criteria. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listProtectionsTest() throws ApiException {
        String xAmzTarget = null;
        ListProtectionsRequest listProtectionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListProtectionsResponse response = api.listProtections(xAmzTarget, listProtectionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves the resources that are included in the protection group. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listResourcesInProtectionGroupTest() throws ApiException {
        String xAmzTarget = null;
        ListResourcesInProtectionGroupRequest listResourcesInProtectionGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListResourcesInProtectionGroupResponse response = api.listResourcesInProtectionGroup(xAmzTarget, listResourcesInProtectionGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Gets information about Amazon Web Services tags for a specified Amazon Resource Name (ARN) in Shield.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String xAmzTarget = null;
        ListTagsForResourceRequest listTagsForResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceResponse response = api.listTagsForResource(xAmzTarget, listTagsForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Adds or updates tags for a resource in Shield.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String xAmzTarget = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.tagResource(xAmzTarget, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes tags from a resource in Shield.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String xAmzTarget = null;
        UntagResourceRequest untagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.untagResource(xAmzTarget, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates an existing Shield Advanced automatic application layer DDoS mitigation configuration for the specified resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateApplicationLayerAutomaticResponseTest() throws ApiException {
        String xAmzTarget = null;
        UpdateApplicationLayerAutomaticResponseRequest updateApplicationLayerAutomaticResponseRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateApplicationLayerAutomaticResponse(xAmzTarget, updateApplicationLayerAutomaticResponseRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the details of the list of email addresses and phone numbers that the Shield Response Team (SRT) can use to contact you if you have proactive engagement enabled, for escalations to the SRT and to initiate proactive customer support.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEmergencyContactSettingsTest() throws ApiException {
        String xAmzTarget = null;
        UpdateEmergencyContactSettingsRequest updateEmergencyContactSettingsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateEmergencyContactSettings(xAmzTarget, updateEmergencyContactSettingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates an existing protection group. A protection group is a grouping of protected resources so they can be handled as a collective. This resource grouping improves the accuracy of detection and reduces false positives. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProtectionGroupTest() throws ApiException {
        String xAmzTarget = null;
        UpdateProtectionGroupRequest updateProtectionGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateProtectionGroup(xAmzTarget, updateProtectionGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates the details of an existing subscription. Only enter values for parameters you want to change. Empty parameters are not updated.&lt;/p&gt; &lt;note&gt; &lt;p&gt;For accounts that are members of an Organizations organization, Shield Advanced subscriptions are billed against the organization&#39;s payer account, regardless of whether the payer account itself is subscribed. &lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSubscriptionTest() throws ApiException {
        String xAmzTarget = null;
        UpdateSubscriptionRequest updateSubscriptionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateSubscription(xAmzTarget, updateSubscriptionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
