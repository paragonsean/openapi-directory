/*
 * AWS Shield
 * <fullname>Shield Advanced</fullname> <p>This is the <i>Shield Advanced API Reference</i>. This guide is for developers who need detailed information about the Shield Advanced API actions, data types, and errors. For detailed information about WAF and Shield Advanced features and an overview of how to use the WAF and Shield Advanced APIs, see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/\">WAF and Shield Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-06-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ProtectionApplicationLayerAutomaticResponseConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An object that represents a resource that is under DDoS protection.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:57.716468-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Protection {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RESOURCE_ARN = "ResourceArn";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ARN)
  private String resourceArn;

  public static final String SERIALIZED_NAME_HEALTH_CHECK_IDS = "HealthCheckIds";
  @SerializedName(SERIALIZED_NAME_HEALTH_CHECK_IDS)
  private List healthCheckIds;

  public static final String SERIALIZED_NAME_PROTECTION_ARN = "ProtectionArn";
  @SerializedName(SERIALIZED_NAME_PROTECTION_ARN)
  private String protectionArn;

  public static final String SERIALIZED_NAME_APPLICATION_LAYER_AUTOMATIC_RESPONSE_CONFIGURATION = "ApplicationLayerAutomaticResponseConfiguration";
  @SerializedName(SERIALIZED_NAME_APPLICATION_LAYER_AUTOMATIC_RESPONSE_CONFIGURATION)
  private ProtectionApplicationLayerAutomaticResponseConfiguration applicationLayerAutomaticResponseConfiguration;

  public Protection() {
  }

  public Protection id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Protection name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Protection resourceArn(String resourceArn) {
    this.resourceArn = resourceArn;
    return this;
  }

  /**
   * Get resourceArn
   * @return resourceArn
   */
  @javax.annotation.Nullable
  public String getResourceArn() {
    return resourceArn;
  }

  public void setResourceArn(String resourceArn) {
    this.resourceArn = resourceArn;
  }


  public Protection healthCheckIds(List healthCheckIds) {
    this.healthCheckIds = healthCheckIds;
    return this;
  }

  /**
   * Get healthCheckIds
   * @return healthCheckIds
   */
  @javax.annotation.Nullable
  public List getHealthCheckIds() {
    return healthCheckIds;
  }

  public void setHealthCheckIds(List healthCheckIds) {
    this.healthCheckIds = healthCheckIds;
  }


  public Protection protectionArn(String protectionArn) {
    this.protectionArn = protectionArn;
    return this;
  }

  /**
   * Get protectionArn
   * @return protectionArn
   */
  @javax.annotation.Nullable
  public String getProtectionArn() {
    return protectionArn;
  }

  public void setProtectionArn(String protectionArn) {
    this.protectionArn = protectionArn;
  }


  public Protection applicationLayerAutomaticResponseConfiguration(ProtectionApplicationLayerAutomaticResponseConfiguration applicationLayerAutomaticResponseConfiguration) {
    this.applicationLayerAutomaticResponseConfiguration = applicationLayerAutomaticResponseConfiguration;
    return this;
  }

  /**
   * Get applicationLayerAutomaticResponseConfiguration
   * @return applicationLayerAutomaticResponseConfiguration
   */
  @javax.annotation.Nullable
  public ProtectionApplicationLayerAutomaticResponseConfiguration getApplicationLayerAutomaticResponseConfiguration() {
    return applicationLayerAutomaticResponseConfiguration;
  }

  public void setApplicationLayerAutomaticResponseConfiguration(ProtectionApplicationLayerAutomaticResponseConfiguration applicationLayerAutomaticResponseConfiguration) {
    this.applicationLayerAutomaticResponseConfiguration = applicationLayerAutomaticResponseConfiguration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Protection protection = (Protection) o;
    return Objects.equals(this.id, protection.id) &&
        Objects.equals(this.name, protection.name) &&
        Objects.equals(this.resourceArn, protection.resourceArn) &&
        Objects.equals(this.healthCheckIds, protection.healthCheckIds) &&
        Objects.equals(this.protectionArn, protection.protectionArn) &&
        Objects.equals(this.applicationLayerAutomaticResponseConfiguration, protection.applicationLayerAutomaticResponseConfiguration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, resourceArn, healthCheckIds, protectionArn, applicationLayerAutomaticResponseConfiguration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Protection {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    resourceArn: ").append(toIndentedString(resourceArn)).append("\n");
    sb.append("    healthCheckIds: ").append(toIndentedString(healthCheckIds)).append("\n");
    sb.append("    protectionArn: ").append(toIndentedString(protectionArn)).append("\n");
    sb.append("    applicationLayerAutomaticResponseConfiguration: ").append(toIndentedString(applicationLayerAutomaticResponseConfiguration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id");
    openapiFields.add("Name");
    openapiFields.add("ResourceArn");
    openapiFields.add("HealthCheckIds");
    openapiFields.add("ProtectionArn");
    openapiFields.add("ApplicationLayerAutomaticResponseConfiguration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Protection
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Protection.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Protection is not found in the empty JSON string", Protection.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Protection.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Protection` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Id`
      if (jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Id"));
      }
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the optional field `ResourceArn`
      if (jsonObj.get("ResourceArn") != null && !jsonObj.get("ResourceArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ResourceArn"));
      }
      // validate the optional field `HealthCheckIds`
      if (jsonObj.get("HealthCheckIds") != null && !jsonObj.get("HealthCheckIds").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("HealthCheckIds"));
      }
      // validate the optional field `ProtectionArn`
      if (jsonObj.get("ProtectionArn") != null && !jsonObj.get("ProtectionArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ProtectionArn"));
      }
      // validate the optional field `ApplicationLayerAutomaticResponseConfiguration`
      if (jsonObj.get("ApplicationLayerAutomaticResponseConfiguration") != null && !jsonObj.get("ApplicationLayerAutomaticResponseConfiguration").isJsonNull()) {
        ProtectionApplicationLayerAutomaticResponseConfiguration.validateJsonElement(jsonObj.get("ApplicationLayerAutomaticResponseConfiguration"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Protection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Protection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Protection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Protection.class));

       return (TypeAdapter<T>) new TypeAdapter<Protection>() {
           @Override
           public void write(JsonWriter out, Protection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Protection read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Protection given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Protection
   * @throws IOException if the JSON string is invalid with respect to Protection
   */
  public static Protection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Protection.class);
  }

  /**
   * Convert an instance of Protection to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

