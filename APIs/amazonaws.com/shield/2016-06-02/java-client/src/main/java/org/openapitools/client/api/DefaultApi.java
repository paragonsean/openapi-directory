/*
 * AWS Shield
 * <fullname>Shield Advanced</fullname> <p>This is the <i>Shield Advanced API Reference</i>. This guide is for developers who need detailed information about the Shield Advanced API actions, data types, and errors. For detailed information about WAF and Shield Advanced features and an overview of how to use the WAF and Shield Advanced APIs, see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/\">WAF and Shield Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-06-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AssociateDRTLogBucketRequest;
import org.openapitools.client.model.AssociateDRTRoleRequest;
import org.openapitools.client.model.AssociateHealthCheckRequest;
import org.openapitools.client.model.AssociateProactiveEngagementDetailsRequest;
import org.openapitools.client.model.CreateProtectionGroupRequest;
import org.openapitools.client.model.CreateProtectionRequest;
import org.openapitools.client.model.CreateProtectionResponse;
import org.openapitools.client.model.DeleteProtectionGroupRequest;
import org.openapitools.client.model.DeleteProtectionRequest;
import org.openapitools.client.model.DescribeAttackRequest;
import org.openapitools.client.model.DescribeAttackResponse;
import org.openapitools.client.model.DescribeAttackStatisticsResponse;
import org.openapitools.client.model.DescribeDRTAccessResponse;
import org.openapitools.client.model.DescribeEmergencyContactSettingsResponse;
import org.openapitools.client.model.DescribeProtectionGroupRequest;
import org.openapitools.client.model.DescribeProtectionGroupResponse;
import org.openapitools.client.model.DescribeProtectionRequest;
import org.openapitools.client.model.DescribeProtectionResponse;
import org.openapitools.client.model.DescribeSubscriptionResponse;
import org.openapitools.client.model.DisableApplicationLayerAutomaticResponseRequest;
import org.openapitools.client.model.DisassociateDRTLogBucketRequest;
import org.openapitools.client.model.DisassociateHealthCheckRequest;
import org.openapitools.client.model.EnableApplicationLayerAutomaticResponseRequest;
import org.openapitools.client.model.GetSubscriptionStateResponse;
import org.openapitools.client.model.ListAttacksRequest;
import org.openapitools.client.model.ListAttacksResponse;
import org.openapitools.client.model.ListProtectionGroupsRequest;
import org.openapitools.client.model.ListProtectionGroupsResponse;
import org.openapitools.client.model.ListProtectionsRequest;
import org.openapitools.client.model.ListProtectionsResponse;
import org.openapitools.client.model.ListResourcesInProtectionGroupRequest;
import org.openapitools.client.model.ListResourcesInProtectionGroupResponse;
import org.openapitools.client.model.ListTagsForResourceRequest;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UntagResourceRequest;
import org.openapitools.client.model.UpdateApplicationLayerAutomaticResponseRequest;
import org.openapitools.client.model.UpdateEmergencyContactSettingsRequest;
import org.openapitools.client.model.UpdateProtectionGroupRequest;
import org.openapitools.client.model.UpdateSubscriptionRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for associateDRTLogBucket
     * @param xAmzTarget  (required)
     * @param associateDRTLogBucketRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoAssociatedRoleException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> LimitsExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedForDependencyException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> OptimisticLockException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call associateDRTLogBucketCall(String xAmzTarget, AssociateDRTLogBucketRequest associateDRTLogBucketRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = associateDRTLogBucketRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSShield_20160616.AssociateDRTLogBucket";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call associateDRTLogBucketValidateBeforeCall(String xAmzTarget, AssociateDRTLogBucketRequest associateDRTLogBucketRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling associateDRTLogBucket(Async)");
        }

        // verify the required parameter 'associateDRTLogBucketRequest' is set
        if (associateDRTLogBucketRequest == null) {
            throw new ApiException("Missing the required parameter 'associateDRTLogBucketRequest' when calling associateDRTLogBucket(Async)");
        }

        return associateDRTLogBucketCall(xAmzTarget, associateDRTLogBucketRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Authorizes the Shield Response Team (SRT) to access the specified Amazon S3 bucket containing log data such as Application Load Balancer access logs, CloudFront logs, or logs from third party sources. You can associate up to 10 Amazon S3 buckets with your subscription.&lt;/p&gt; &lt;p&gt;To use the services of the SRT and make an &lt;code&gt;AssociateDRTLogBucket&lt;/code&gt; request, you must be subscribed to the &lt;a href&#x3D;\&quot;http://aws.amazon.com/premiumsupport/business-support/\&quot;&gt;Business Support plan&lt;/a&gt; or the &lt;a href&#x3D;\&quot;http://aws.amazon.com/premiumsupport/enterprise-support/\&quot;&gt;Enterprise Support plan&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param associateDRTLogBucketRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoAssociatedRoleException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> LimitsExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedForDependencyException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> OptimisticLockException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public Object associateDRTLogBucket(String xAmzTarget, AssociateDRTLogBucketRequest associateDRTLogBucketRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = associateDRTLogBucketWithHttpInfo(xAmzTarget, associateDRTLogBucketRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Authorizes the Shield Response Team (SRT) to access the specified Amazon S3 bucket containing log data such as Application Load Balancer access logs, CloudFront logs, or logs from third party sources. You can associate up to 10 Amazon S3 buckets with your subscription.&lt;/p&gt; &lt;p&gt;To use the services of the SRT and make an &lt;code&gt;AssociateDRTLogBucket&lt;/code&gt; request, you must be subscribed to the &lt;a href&#x3D;\&quot;http://aws.amazon.com/premiumsupport/business-support/\&quot;&gt;Business Support plan&lt;/a&gt; or the &lt;a href&#x3D;\&quot;http://aws.amazon.com/premiumsupport/enterprise-support/\&quot;&gt;Enterprise Support plan&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param associateDRTLogBucketRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoAssociatedRoleException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> LimitsExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedForDependencyException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> OptimisticLockException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> associateDRTLogBucketWithHttpInfo(String xAmzTarget, AssociateDRTLogBucketRequest associateDRTLogBucketRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = associateDRTLogBucketValidateBeforeCall(xAmzTarget, associateDRTLogBucketRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Authorizes the Shield Response Team (SRT) to access the specified Amazon S3 bucket containing log data such as Application Load Balancer access logs, CloudFront logs, or logs from third party sources. You can associate up to 10 Amazon S3 buckets with your subscription.&lt;/p&gt; &lt;p&gt;To use the services of the SRT and make an &lt;code&gt;AssociateDRTLogBucket&lt;/code&gt; request, you must be subscribed to the &lt;a href&#x3D;\&quot;http://aws.amazon.com/premiumsupport/business-support/\&quot;&gt;Business Support plan&lt;/a&gt; or the &lt;a href&#x3D;\&quot;http://aws.amazon.com/premiumsupport/enterprise-support/\&quot;&gt;Enterprise Support plan&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param associateDRTLogBucketRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoAssociatedRoleException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> LimitsExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedForDependencyException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> OptimisticLockException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call associateDRTLogBucketAsync(String xAmzTarget, AssociateDRTLogBucketRequest associateDRTLogBucketRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = associateDRTLogBucketValidateBeforeCall(xAmzTarget, associateDRTLogBucketRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for associateDRTRole
     * @param xAmzTarget  (required)
     * @param associateDRTRoleRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AccessDeniedForDependencyException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OptimisticLockException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call associateDRTRoleCall(String xAmzTarget, AssociateDRTRoleRequest associateDRTRoleRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = associateDRTRoleRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSShield_20160616.AssociateDRTRole";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call associateDRTRoleValidateBeforeCall(String xAmzTarget, AssociateDRTRoleRequest associateDRTRoleRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling associateDRTRole(Async)");
        }

        // verify the required parameter 'associateDRTRoleRequest' is set
        if (associateDRTRoleRequest == null) {
            throw new ApiException("Missing the required parameter 'associateDRTRoleRequest' when calling associateDRTRole(Async)");
        }

        return associateDRTRoleCall(xAmzTarget, associateDRTRoleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Authorizes the Shield Response Team (SRT) using the specified role, to access your Amazon Web Services account to assist with DDoS attack mitigation during potential attacks. This enables the SRT to inspect your WAF configuration and create or update WAF rules and web ACLs.&lt;/p&gt; &lt;p&gt;You can associate only one &lt;code&gt;RoleArn&lt;/code&gt; with your subscription. If you submit an &lt;code&gt;AssociateDRTRole&lt;/code&gt; request for an account that already has an associated role, the new &lt;code&gt;RoleArn&lt;/code&gt; will replace the existing &lt;code&gt;RoleArn&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;Prior to making the &lt;code&gt;AssociateDRTRole&lt;/code&gt; request, you must attach the &lt;code&gt;AWSShieldDRTAccessPolicy&lt;/code&gt; managed policy to the role that you&#39;ll specify in the request. You can access this policy in the IAM console at &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/iam/home?#/policies/arn:aws:iam::aws:policy/service-role/AWSShieldDRTAccessPolicy\&quot;&gt;AWSShieldDRTAccessPolicy&lt;/a&gt;. For more information see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_manage-attach-detach.html\&quot;&gt;Adding and removing IAM identity permissions&lt;/a&gt;. The role must also trust the service principal &lt;code&gt;drt.shield.amazonaws.com&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html\&quot;&gt;IAM JSON policy elements: Principal&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The SRT will have access only to your WAF and Shield resources. By submitting this request, you authorize the SRT to inspect your WAF and Shield configuration and create and update WAF rules and web ACLs on your behalf. The SRT takes these actions only if explicitly authorized by you.&lt;/p&gt; &lt;p&gt;You must have the &lt;code&gt;iam:PassRole&lt;/code&gt; permission to make an &lt;code&gt;AssociateDRTRole&lt;/code&gt; request. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_passrole.html\&quot;&gt;Granting a user permissions to pass a role to an Amazon Web Services service&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;To use the services of the SRT and make an &lt;code&gt;AssociateDRTRole&lt;/code&gt; request, you must be subscribed to the &lt;a href&#x3D;\&quot;http://aws.amazon.com/premiumsupport/business-support/\&quot;&gt;Business Support plan&lt;/a&gt; or the &lt;a href&#x3D;\&quot;http://aws.amazon.com/premiumsupport/enterprise-support/\&quot;&gt;Enterprise Support plan&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param associateDRTRoleRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AccessDeniedForDependencyException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OptimisticLockException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public Object associateDRTRole(String xAmzTarget, AssociateDRTRoleRequest associateDRTRoleRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = associateDRTRoleWithHttpInfo(xAmzTarget, associateDRTRoleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Authorizes the Shield Response Team (SRT) using the specified role, to access your Amazon Web Services account to assist with DDoS attack mitigation during potential attacks. This enables the SRT to inspect your WAF configuration and create or update WAF rules and web ACLs.&lt;/p&gt; &lt;p&gt;You can associate only one &lt;code&gt;RoleArn&lt;/code&gt; with your subscription. If you submit an &lt;code&gt;AssociateDRTRole&lt;/code&gt; request for an account that already has an associated role, the new &lt;code&gt;RoleArn&lt;/code&gt; will replace the existing &lt;code&gt;RoleArn&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;Prior to making the &lt;code&gt;AssociateDRTRole&lt;/code&gt; request, you must attach the &lt;code&gt;AWSShieldDRTAccessPolicy&lt;/code&gt; managed policy to the role that you&#39;ll specify in the request. You can access this policy in the IAM console at &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/iam/home?#/policies/arn:aws:iam::aws:policy/service-role/AWSShieldDRTAccessPolicy\&quot;&gt;AWSShieldDRTAccessPolicy&lt;/a&gt;. For more information see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_manage-attach-detach.html\&quot;&gt;Adding and removing IAM identity permissions&lt;/a&gt;. The role must also trust the service principal &lt;code&gt;drt.shield.amazonaws.com&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html\&quot;&gt;IAM JSON policy elements: Principal&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The SRT will have access only to your WAF and Shield resources. By submitting this request, you authorize the SRT to inspect your WAF and Shield configuration and create and update WAF rules and web ACLs on your behalf. The SRT takes these actions only if explicitly authorized by you.&lt;/p&gt; &lt;p&gt;You must have the &lt;code&gt;iam:PassRole&lt;/code&gt; permission to make an &lt;code&gt;AssociateDRTRole&lt;/code&gt; request. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_passrole.html\&quot;&gt;Granting a user permissions to pass a role to an Amazon Web Services service&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;To use the services of the SRT and make an &lt;code&gt;AssociateDRTRole&lt;/code&gt; request, you must be subscribed to the &lt;a href&#x3D;\&quot;http://aws.amazon.com/premiumsupport/business-support/\&quot;&gt;Business Support plan&lt;/a&gt; or the &lt;a href&#x3D;\&quot;http://aws.amazon.com/premiumsupport/enterprise-support/\&quot;&gt;Enterprise Support plan&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param associateDRTRoleRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AccessDeniedForDependencyException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OptimisticLockException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> associateDRTRoleWithHttpInfo(String xAmzTarget, AssociateDRTRoleRequest associateDRTRoleRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = associateDRTRoleValidateBeforeCall(xAmzTarget, associateDRTRoleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Authorizes the Shield Response Team (SRT) using the specified role, to access your Amazon Web Services account to assist with DDoS attack mitigation during potential attacks. This enables the SRT to inspect your WAF configuration and create or update WAF rules and web ACLs.&lt;/p&gt; &lt;p&gt;You can associate only one &lt;code&gt;RoleArn&lt;/code&gt; with your subscription. If you submit an &lt;code&gt;AssociateDRTRole&lt;/code&gt; request for an account that already has an associated role, the new &lt;code&gt;RoleArn&lt;/code&gt; will replace the existing &lt;code&gt;RoleArn&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;Prior to making the &lt;code&gt;AssociateDRTRole&lt;/code&gt; request, you must attach the &lt;code&gt;AWSShieldDRTAccessPolicy&lt;/code&gt; managed policy to the role that you&#39;ll specify in the request. You can access this policy in the IAM console at &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/iam/home?#/policies/arn:aws:iam::aws:policy/service-role/AWSShieldDRTAccessPolicy\&quot;&gt;AWSShieldDRTAccessPolicy&lt;/a&gt;. For more information see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_manage-attach-detach.html\&quot;&gt;Adding and removing IAM identity permissions&lt;/a&gt;. The role must also trust the service principal &lt;code&gt;drt.shield.amazonaws.com&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html\&quot;&gt;IAM JSON policy elements: Principal&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The SRT will have access only to your WAF and Shield resources. By submitting this request, you authorize the SRT to inspect your WAF and Shield configuration and create and update WAF rules and web ACLs on your behalf. The SRT takes these actions only if explicitly authorized by you.&lt;/p&gt; &lt;p&gt;You must have the &lt;code&gt;iam:PassRole&lt;/code&gt; permission to make an &lt;code&gt;AssociateDRTRole&lt;/code&gt; request. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_passrole.html\&quot;&gt;Granting a user permissions to pass a role to an Amazon Web Services service&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;To use the services of the SRT and make an &lt;code&gt;AssociateDRTRole&lt;/code&gt; request, you must be subscribed to the &lt;a href&#x3D;\&quot;http://aws.amazon.com/premiumsupport/business-support/\&quot;&gt;Business Support plan&lt;/a&gt; or the &lt;a href&#x3D;\&quot;http://aws.amazon.com/premiumsupport/enterprise-support/\&quot;&gt;Enterprise Support plan&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param associateDRTRoleRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AccessDeniedForDependencyException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OptimisticLockException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call associateDRTRoleAsync(String xAmzTarget, AssociateDRTRoleRequest associateDRTRoleRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = associateDRTRoleValidateBeforeCall(xAmzTarget, associateDRTRoleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for associateHealthCheck
     * @param xAmzTarget  (required)
     * @param associateHealthCheckRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LimitsExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OptimisticLockException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidResourceException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call associateHealthCheckCall(String xAmzTarget, AssociateHealthCheckRequest associateHealthCheckRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = associateHealthCheckRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSShield_20160616.AssociateHealthCheck";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call associateHealthCheckValidateBeforeCall(String xAmzTarget, AssociateHealthCheckRequest associateHealthCheckRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling associateHealthCheck(Async)");
        }

        // verify the required parameter 'associateHealthCheckRequest' is set
        if (associateHealthCheckRequest == null) {
            throw new ApiException("Missing the required parameter 'associateHealthCheckRequest' when calling associateHealthCheck(Async)");
        }

        return associateHealthCheckCall(xAmzTarget, associateHealthCheckRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Adds health-based detection to the Shield Advanced protection for a resource. Shield Advanced health-based detection uses the health of your Amazon Web Services resource to improve responsiveness and accuracy in attack detection and response. &lt;/p&gt; &lt;p&gt;You define the health check in Route 53 and then associate it with your Shield Advanced protection. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/ddos-overview.html#ddos-advanced-health-check-option\&quot;&gt;Shield Advanced Health-Based Detection&lt;/a&gt; in the &lt;i&gt;WAF Developer Guide&lt;/i&gt;. &lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param associateHealthCheckRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LimitsExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OptimisticLockException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidResourceException </td><td>  -  </td></tr>
     </table>
     */
    public Object associateHealthCheck(String xAmzTarget, AssociateHealthCheckRequest associateHealthCheckRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = associateHealthCheckWithHttpInfo(xAmzTarget, associateHealthCheckRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Adds health-based detection to the Shield Advanced protection for a resource. Shield Advanced health-based detection uses the health of your Amazon Web Services resource to improve responsiveness and accuracy in attack detection and response. &lt;/p&gt; &lt;p&gt;You define the health check in Route 53 and then associate it with your Shield Advanced protection. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/ddos-overview.html#ddos-advanced-health-check-option\&quot;&gt;Shield Advanced Health-Based Detection&lt;/a&gt; in the &lt;i&gt;WAF Developer Guide&lt;/i&gt;. &lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param associateHealthCheckRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LimitsExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OptimisticLockException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidResourceException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> associateHealthCheckWithHttpInfo(String xAmzTarget, AssociateHealthCheckRequest associateHealthCheckRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = associateHealthCheckValidateBeforeCall(xAmzTarget, associateHealthCheckRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Adds health-based detection to the Shield Advanced protection for a resource. Shield Advanced health-based detection uses the health of your Amazon Web Services resource to improve responsiveness and accuracy in attack detection and response. &lt;/p&gt; &lt;p&gt;You define the health check in Route 53 and then associate it with your Shield Advanced protection. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/ddos-overview.html#ddos-advanced-health-check-option\&quot;&gt;Shield Advanced Health-Based Detection&lt;/a&gt; in the &lt;i&gt;WAF Developer Guide&lt;/i&gt;. &lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param associateHealthCheckRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LimitsExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OptimisticLockException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidResourceException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call associateHealthCheckAsync(String xAmzTarget, AssociateHealthCheckRequest associateHealthCheckRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = associateHealthCheckValidateBeforeCall(xAmzTarget, associateHealthCheckRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for associateProactiveEngagementDetails
     * @param xAmzTarget  (required)
     * @param associateProactiveEngagementDetailsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OptimisticLockException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call associateProactiveEngagementDetailsCall(String xAmzTarget, AssociateProactiveEngagementDetailsRequest associateProactiveEngagementDetailsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = associateProactiveEngagementDetailsRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSShield_20160616.AssociateProactiveEngagementDetails";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call associateProactiveEngagementDetailsValidateBeforeCall(String xAmzTarget, AssociateProactiveEngagementDetailsRequest associateProactiveEngagementDetailsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling associateProactiveEngagementDetails(Async)");
        }

        // verify the required parameter 'associateProactiveEngagementDetailsRequest' is set
        if (associateProactiveEngagementDetailsRequest == null) {
            throw new ApiException("Missing the required parameter 'associateProactiveEngagementDetailsRequest' when calling associateProactiveEngagementDetails(Async)");
        }

        return associateProactiveEngagementDetailsCall(xAmzTarget, associateProactiveEngagementDetailsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Initializes proactive engagement and sets the list of contacts for the Shield Response Team (SRT) to use. You must provide at least one phone number in the emergency contact list. &lt;/p&gt; &lt;p&gt;After you have initialized proactive engagement using this call, to disable or enable proactive engagement, use the calls &lt;code&gt;DisableProactiveEngagement&lt;/code&gt; and &lt;code&gt;EnableProactiveEngagement&lt;/code&gt;. &lt;/p&gt; &lt;note&gt; &lt;p&gt;This call defines the list of email addresses and phone numbers that the SRT can use to contact you for escalations to the SRT and to initiate proactive customer support.&lt;/p&gt; &lt;p&gt;The contacts that you provide in the request replace any contacts that were already defined. If you already have contacts defined and want to use them, retrieve the list using &lt;code&gt;DescribeEmergencyContactSettings&lt;/code&gt; and then provide it to this call. &lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param associateProactiveEngagementDetailsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OptimisticLockException </td><td>  -  </td></tr>
     </table>
     */
    public Object associateProactiveEngagementDetails(String xAmzTarget, AssociateProactiveEngagementDetailsRequest associateProactiveEngagementDetailsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = associateProactiveEngagementDetailsWithHttpInfo(xAmzTarget, associateProactiveEngagementDetailsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Initializes proactive engagement and sets the list of contacts for the Shield Response Team (SRT) to use. You must provide at least one phone number in the emergency contact list. &lt;/p&gt; &lt;p&gt;After you have initialized proactive engagement using this call, to disable or enable proactive engagement, use the calls &lt;code&gt;DisableProactiveEngagement&lt;/code&gt; and &lt;code&gt;EnableProactiveEngagement&lt;/code&gt;. &lt;/p&gt; &lt;note&gt; &lt;p&gt;This call defines the list of email addresses and phone numbers that the SRT can use to contact you for escalations to the SRT and to initiate proactive customer support.&lt;/p&gt; &lt;p&gt;The contacts that you provide in the request replace any contacts that were already defined. If you already have contacts defined and want to use them, retrieve the list using &lt;code&gt;DescribeEmergencyContactSettings&lt;/code&gt; and then provide it to this call. &lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param associateProactiveEngagementDetailsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OptimisticLockException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> associateProactiveEngagementDetailsWithHttpInfo(String xAmzTarget, AssociateProactiveEngagementDetailsRequest associateProactiveEngagementDetailsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = associateProactiveEngagementDetailsValidateBeforeCall(xAmzTarget, associateProactiveEngagementDetailsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Initializes proactive engagement and sets the list of contacts for the Shield Response Team (SRT) to use. You must provide at least one phone number in the emergency contact list. &lt;/p&gt; &lt;p&gt;After you have initialized proactive engagement using this call, to disable or enable proactive engagement, use the calls &lt;code&gt;DisableProactiveEngagement&lt;/code&gt; and &lt;code&gt;EnableProactiveEngagement&lt;/code&gt;. &lt;/p&gt; &lt;note&gt; &lt;p&gt;This call defines the list of email addresses and phone numbers that the SRT can use to contact you for escalations to the SRT and to initiate proactive customer support.&lt;/p&gt; &lt;p&gt;The contacts that you provide in the request replace any contacts that were already defined. If you already have contacts defined and want to use them, retrieve the list using &lt;code&gt;DescribeEmergencyContactSettings&lt;/code&gt; and then provide it to this call. &lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param associateProactiveEngagementDetailsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OptimisticLockException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call associateProactiveEngagementDetailsAsync(String xAmzTarget, AssociateProactiveEngagementDetailsRequest associateProactiveEngagementDetailsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = associateProactiveEngagementDetailsValidateBeforeCall(xAmzTarget, associateProactiveEngagementDetailsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createProtection
     * @param xAmzTarget  (required)
     * @param createProtectionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> LimitsExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> OptimisticLockException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProtectionCall(String xAmzTarget, CreateProtectionRequest createProtectionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createProtectionRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSShield_20160616.CreateProtection";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createProtectionValidateBeforeCall(String xAmzTarget, CreateProtectionRequest createProtectionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createProtection(Async)");
        }

        // verify the required parameter 'createProtectionRequest' is set
        if (createProtectionRequest == null) {
            throw new ApiException("Missing the required parameter 'createProtectionRequest' when calling createProtection(Async)");
        }

        return createProtectionCall(xAmzTarget, createProtectionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Enables Shield Advanced for a specific Amazon Web Services resource. The resource can be an Amazon CloudFront distribution, Amazon Route 53 hosted zone, Global Accelerator standard accelerator, Elastic IP Address, Application Load Balancer, or a Classic Load Balancer. You can protect Amazon EC2 instances and Network Load Balancers by association with protected Amazon EC2 Elastic IP addresses.&lt;/p&gt; &lt;p&gt;You can add protection to only a single resource with each &lt;code&gt;CreateProtection&lt;/code&gt; request. You can add protection to multiple resources at once through the Shield Advanced console at &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/wafv2/shieldv2#/\&quot;&gt;https://console.aws.amazon.com/wafv2/shieldv2#/&lt;/a&gt;. For more information see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/getting-started-ddos.html\&quot;&gt;Getting Started with Shield Advanced&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/configure-new-protection.html\&quot;&gt;Adding Shield Advanced protection to Amazon Web Services resources&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createProtectionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateProtectionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> LimitsExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> OptimisticLockException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public CreateProtectionResponse createProtection(String xAmzTarget, CreateProtectionRequest createProtectionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateProtectionResponse> localVarResp = createProtectionWithHttpInfo(xAmzTarget, createProtectionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Enables Shield Advanced for a specific Amazon Web Services resource. The resource can be an Amazon CloudFront distribution, Amazon Route 53 hosted zone, Global Accelerator standard accelerator, Elastic IP Address, Application Load Balancer, or a Classic Load Balancer. You can protect Amazon EC2 instances and Network Load Balancers by association with protected Amazon EC2 Elastic IP addresses.&lt;/p&gt; &lt;p&gt;You can add protection to only a single resource with each &lt;code&gt;CreateProtection&lt;/code&gt; request. You can add protection to multiple resources at once through the Shield Advanced console at &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/wafv2/shieldv2#/\&quot;&gt;https://console.aws.amazon.com/wafv2/shieldv2#/&lt;/a&gt;. For more information see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/getting-started-ddos.html\&quot;&gt;Getting Started with Shield Advanced&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/configure-new-protection.html\&quot;&gt;Adding Shield Advanced protection to Amazon Web Services resources&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createProtectionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateProtectionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> LimitsExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> OptimisticLockException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateProtectionResponse> createProtectionWithHttpInfo(String xAmzTarget, CreateProtectionRequest createProtectionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createProtectionValidateBeforeCall(xAmzTarget, createProtectionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateProtectionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Enables Shield Advanced for a specific Amazon Web Services resource. The resource can be an Amazon CloudFront distribution, Amazon Route 53 hosted zone, Global Accelerator standard accelerator, Elastic IP Address, Application Load Balancer, or a Classic Load Balancer. You can protect Amazon EC2 instances and Network Load Balancers by association with protected Amazon EC2 Elastic IP addresses.&lt;/p&gt; &lt;p&gt;You can add protection to only a single resource with each &lt;code&gt;CreateProtection&lt;/code&gt; request. You can add protection to multiple resources at once through the Shield Advanced console at &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/wafv2/shieldv2#/\&quot;&gt;https://console.aws.amazon.com/wafv2/shieldv2#/&lt;/a&gt;. For more information see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/getting-started-ddos.html\&quot;&gt;Getting Started with Shield Advanced&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/configure-new-protection.html\&quot;&gt;Adding Shield Advanced protection to Amazon Web Services resources&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createProtectionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> LimitsExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> OptimisticLockException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProtectionAsync(String xAmzTarget, CreateProtectionRequest createProtectionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateProtectionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createProtectionValidateBeforeCall(xAmzTarget, createProtectionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateProtectionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createProtectionGroup
     * @param xAmzTarget  (required)
     * @param createProtectionGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OptimisticLockException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> LimitsExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProtectionGroupCall(String xAmzTarget, CreateProtectionGroupRequest createProtectionGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createProtectionGroupRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSShield_20160616.CreateProtectionGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createProtectionGroupValidateBeforeCall(String xAmzTarget, CreateProtectionGroupRequest createProtectionGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createProtectionGroup(Async)");
        }

        // verify the required parameter 'createProtectionGroupRequest' is set
        if (createProtectionGroupRequest == null) {
            throw new ApiException("Missing the required parameter 'createProtectionGroupRequest' when calling createProtectionGroup(Async)");
        }

        return createProtectionGroupCall(xAmzTarget, createProtectionGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Creates a grouping of protected resources so they can be handled as a collective. This resource grouping improves the accuracy of detection and reduces false positives. 
     * @param xAmzTarget  (required)
     * @param createProtectionGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OptimisticLockException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> LimitsExceededException </td><td>  -  </td></tr>
     </table>
     */
    public Object createProtectionGroup(String xAmzTarget, CreateProtectionGroupRequest createProtectionGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = createProtectionGroupWithHttpInfo(xAmzTarget, createProtectionGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a grouping of protected resources so they can be handled as a collective. This resource grouping improves the accuracy of detection and reduces false positives. 
     * @param xAmzTarget  (required)
     * @param createProtectionGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OptimisticLockException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> LimitsExceededException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createProtectionGroupWithHttpInfo(String xAmzTarget, CreateProtectionGroupRequest createProtectionGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createProtectionGroupValidateBeforeCall(xAmzTarget, createProtectionGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a grouping of protected resources so they can be handled as a collective. This resource grouping improves the accuracy of detection and reduces false positives. 
     * @param xAmzTarget  (required)
     * @param createProtectionGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OptimisticLockException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> LimitsExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProtectionGroupAsync(String xAmzTarget, CreateProtectionGroupRequest createProtectionGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createProtectionGroupValidateBeforeCall(xAmzTarget, createProtectionGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createSubscription
     * @param xAmzTarget  (required)
     * @param body  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceAlreadyExistsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSubscriptionCall(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSShield_20160616.CreateSubscription";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSubscriptionValidateBeforeCall(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createSubscription(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createSubscription(Async)");
        }

        return createSubscriptionCall(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Activates Shield Advanced for an account.&lt;/p&gt; &lt;note&gt; &lt;p&gt;For accounts that are members of an Organizations organization, Shield Advanced subscriptions are billed against the organization&#39;s payer account, regardless of whether the payer account itself is subscribed. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;When you initially create a subscription, your subscription is set to be automatically renewed at the end of the existing subscription period. You can change this by submitting an &lt;code&gt;UpdateSubscription&lt;/code&gt; request. &lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param body  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceAlreadyExistsException </td><td>  -  </td></tr>
     </table>
     */
    public Object createSubscription(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = createSubscriptionWithHttpInfo(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Activates Shield Advanced for an account.&lt;/p&gt; &lt;note&gt; &lt;p&gt;For accounts that are members of an Organizations organization, Shield Advanced subscriptions are billed against the organization&#39;s payer account, regardless of whether the payer account itself is subscribed. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;When you initially create a subscription, your subscription is set to be automatically renewed at the end of the existing subscription period. You can change this by submitting an &lt;code&gt;UpdateSubscription&lt;/code&gt; request. &lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param body  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceAlreadyExistsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createSubscriptionWithHttpInfo(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createSubscriptionValidateBeforeCall(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Activates Shield Advanced for an account.&lt;/p&gt; &lt;note&gt; &lt;p&gt;For accounts that are members of an Organizations organization, Shield Advanced subscriptions are billed against the organization&#39;s payer account, regardless of whether the payer account itself is subscribed. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;When you initially create a subscription, your subscription is set to be automatically renewed at the end of the existing subscription period. You can change this by submitting an &lt;code&gt;UpdateSubscription&lt;/code&gt; request. &lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param body  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceAlreadyExistsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSubscriptionAsync(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSubscriptionValidateBeforeCall(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteProtection
     * @param xAmzTarget  (required)
     * @param deleteProtectionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OptimisticLockException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProtectionCall(String xAmzTarget, DeleteProtectionRequest deleteProtectionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteProtectionRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSShield_20160616.DeleteProtection";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProtectionValidateBeforeCall(String xAmzTarget, DeleteProtectionRequest deleteProtectionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteProtection(Async)");
        }

        // verify the required parameter 'deleteProtectionRequest' is set
        if (deleteProtectionRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteProtectionRequest' when calling deleteProtection(Async)");
        }

        return deleteProtectionCall(xAmzTarget, deleteProtectionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Deletes an Shield Advanced &lt;a&gt;Protection&lt;/a&gt;.
     * @param xAmzTarget  (required)
     * @param deleteProtectionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OptimisticLockException </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteProtection(String xAmzTarget, DeleteProtectionRequest deleteProtectionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = deleteProtectionWithHttpInfo(xAmzTarget, deleteProtectionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes an Shield Advanced &lt;a&gt;Protection&lt;/a&gt;.
     * @param xAmzTarget  (required)
     * @param deleteProtectionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OptimisticLockException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteProtectionWithHttpInfo(String xAmzTarget, DeleteProtectionRequest deleteProtectionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteProtectionValidateBeforeCall(xAmzTarget, deleteProtectionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes an Shield Advanced &lt;a&gt;Protection&lt;/a&gt;.
     * @param xAmzTarget  (required)
     * @param deleteProtectionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OptimisticLockException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProtectionAsync(String xAmzTarget, DeleteProtectionRequest deleteProtectionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteProtectionValidateBeforeCall(xAmzTarget, deleteProtectionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteProtectionGroup
     * @param xAmzTarget  (required)
     * @param deleteProtectionGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OptimisticLockException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProtectionGroupCall(String xAmzTarget, DeleteProtectionGroupRequest deleteProtectionGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteProtectionGroupRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSShield_20160616.DeleteProtectionGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProtectionGroupValidateBeforeCall(String xAmzTarget, DeleteProtectionGroupRequest deleteProtectionGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteProtectionGroup(Async)");
        }

        // verify the required parameter 'deleteProtectionGroupRequest' is set
        if (deleteProtectionGroupRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteProtectionGroupRequest' when calling deleteProtectionGroup(Async)");
        }

        return deleteProtectionGroupCall(xAmzTarget, deleteProtectionGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Removes the specified protection group.
     * @param xAmzTarget  (required)
     * @param deleteProtectionGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OptimisticLockException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteProtectionGroup(String xAmzTarget, DeleteProtectionGroupRequest deleteProtectionGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = deleteProtectionGroupWithHttpInfo(xAmzTarget, deleteProtectionGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Removes the specified protection group.
     * @param xAmzTarget  (required)
     * @param deleteProtectionGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OptimisticLockException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteProtectionGroupWithHttpInfo(String xAmzTarget, DeleteProtectionGroupRequest deleteProtectionGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteProtectionGroupValidateBeforeCall(xAmzTarget, deleteProtectionGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Removes the specified protection group.
     * @param xAmzTarget  (required)
     * @param deleteProtectionGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OptimisticLockException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProtectionGroupAsync(String xAmzTarget, DeleteProtectionGroupRequest deleteProtectionGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteProtectionGroupValidateBeforeCall(xAmzTarget, deleteProtectionGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSubscription
     * @param xAmzTarget  (required)
     * @param body  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LockedSubscriptionException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteSubscriptionCall(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSShield_20160616.DeleteSubscription";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSubscriptionValidateBeforeCall(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteSubscription(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling deleteSubscription(Async)");
        }

        return deleteSubscriptionCall(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Removes Shield Advanced from an account. Shield Advanced requires a 1-year subscription commitment. You cannot delete a subscription prior to the completion of that commitment. 
     * @param xAmzTarget  (required)
     * @param body  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LockedSubscriptionException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public Object deleteSubscription(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = deleteSubscriptionWithHttpInfo(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Removes Shield Advanced from an account. Shield Advanced requires a 1-year subscription commitment. You cannot delete a subscription prior to the completion of that commitment. 
     * @param xAmzTarget  (required)
     * @param body  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LockedSubscriptionException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Object> deleteSubscriptionWithHttpInfo(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteSubscriptionValidateBeforeCall(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Removes Shield Advanced from an account. Shield Advanced requires a 1-year subscription commitment. You cannot delete a subscription prior to the completion of that commitment. 
     * @param xAmzTarget  (required)
     * @param body  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LockedSubscriptionException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteSubscriptionAsync(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSubscriptionValidateBeforeCall(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeAttack
     * @param xAmzTarget  (required)
     * @param describeAttackRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDeniedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeAttackCall(String xAmzTarget, DescribeAttackRequest describeAttackRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeAttackRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSShield_20160616.DescribeAttack";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeAttackValidateBeforeCall(String xAmzTarget, DescribeAttackRequest describeAttackRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeAttack(Async)");
        }

        // verify the required parameter 'describeAttackRequest' is set
        if (describeAttackRequest == null) {
            throw new ApiException("Missing the required parameter 'describeAttackRequest' when calling describeAttack(Async)");
        }

        return describeAttackCall(xAmzTarget, describeAttackRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Describes the details of a DDoS attack. 
     * @param xAmzTarget  (required)
     * @param describeAttackRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeAttackResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDeniedException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeAttackResponse describeAttack(String xAmzTarget, DescribeAttackRequest describeAttackRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeAttackResponse> localVarResp = describeAttackWithHttpInfo(xAmzTarget, describeAttackRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Describes the details of a DDoS attack. 
     * @param xAmzTarget  (required)
     * @param describeAttackRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeAttackResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDeniedException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeAttackResponse> describeAttackWithHttpInfo(String xAmzTarget, DescribeAttackRequest describeAttackRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = describeAttackValidateBeforeCall(xAmzTarget, describeAttackRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeAttackResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Describes the details of a DDoS attack. 
     * @param xAmzTarget  (required)
     * @param describeAttackRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDeniedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeAttackAsync(String xAmzTarget, DescribeAttackRequest describeAttackRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeAttackResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeAttackValidateBeforeCall(xAmzTarget, describeAttackRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeAttackResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeAttackStatistics
     * @param xAmzTarget  (required)
     * @param body  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeAttackStatisticsCall(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSShield_20160616.DescribeAttackStatistics";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeAttackStatisticsValidateBeforeCall(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeAttackStatistics(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling describeAttackStatistics(Async)");
        }

        return describeAttackStatisticsCall(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Provides information about the number and type of attacks Shield has detected in the last year for all resources that belong to your account, regardless of whether you&#39;ve defined Shield protections for them. This operation is available to Shield customers as well as to Shield Advanced customers.&lt;/p&gt; &lt;p&gt;The operation returns data for the time range of midnight UTC, one year ago, to midnight UTC, today. For example, if the current time is &lt;code&gt;2020-10-26 15:39:32 PDT&lt;/code&gt;, equal to &lt;code&gt;2020-10-26 22:39:32 UTC&lt;/code&gt;, then the time range for the attack data returned is from &lt;code&gt;2019-10-26 00:00:00 UTC&lt;/code&gt; to &lt;code&gt;2020-10-26 00:00:00 UTC&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;The time range indicates the period covered by the attack statistics data items.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param body  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeAttackStatisticsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeAttackStatisticsResponse describeAttackStatistics(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeAttackStatisticsResponse> localVarResp = describeAttackStatisticsWithHttpInfo(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Provides information about the number and type of attacks Shield has detected in the last year for all resources that belong to your account, regardless of whether you&#39;ve defined Shield protections for them. This operation is available to Shield customers as well as to Shield Advanced customers.&lt;/p&gt; &lt;p&gt;The operation returns data for the time range of midnight UTC, one year ago, to midnight UTC, today. For example, if the current time is &lt;code&gt;2020-10-26 15:39:32 PDT&lt;/code&gt;, equal to &lt;code&gt;2020-10-26 22:39:32 UTC&lt;/code&gt;, then the time range for the attack data returned is from &lt;code&gt;2019-10-26 00:00:00 UTC&lt;/code&gt; to &lt;code&gt;2020-10-26 00:00:00 UTC&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;The time range indicates the period covered by the attack statistics data items.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param body  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeAttackStatisticsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeAttackStatisticsResponse> describeAttackStatisticsWithHttpInfo(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = describeAttackStatisticsValidateBeforeCall(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeAttackStatisticsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Provides information about the number and type of attacks Shield has detected in the last year for all resources that belong to your account, regardless of whether you&#39;ve defined Shield protections for them. This operation is available to Shield customers as well as to Shield Advanced customers.&lt;/p&gt; &lt;p&gt;The operation returns data for the time range of midnight UTC, one year ago, to midnight UTC, today. For example, if the current time is &lt;code&gt;2020-10-26 15:39:32 PDT&lt;/code&gt;, equal to &lt;code&gt;2020-10-26 22:39:32 UTC&lt;/code&gt;, then the time range for the attack data returned is from &lt;code&gt;2019-10-26 00:00:00 UTC&lt;/code&gt; to &lt;code&gt;2020-10-26 00:00:00 UTC&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;The time range indicates the period covered by the attack statistics data items.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param body  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeAttackStatisticsAsync(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeAttackStatisticsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeAttackStatisticsValidateBeforeCall(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeAttackStatisticsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeDRTAccess
     * @param xAmzTarget  (required)
     * @param body  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeDRTAccessCall(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSShield_20160616.DescribeDRTAccess";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeDRTAccessValidateBeforeCall(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeDRTAccess(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling describeDRTAccess(Async)");
        }

        return describeDRTAccessCall(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Returns the current role and list of Amazon S3 log buckets used by the Shield Response Team (SRT) to access your Amazon Web Services account while assisting with attack mitigation.
     * @param xAmzTarget  (required)
     * @param body  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeDRTAccessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeDRTAccessResponse describeDRTAccess(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeDRTAccessResponse> localVarResp = describeDRTAccessWithHttpInfo(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the current role and list of Amazon S3 log buckets used by the Shield Response Team (SRT) to access your Amazon Web Services account while assisting with attack mitigation.
     * @param xAmzTarget  (required)
     * @param body  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeDRTAccessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeDRTAccessResponse> describeDRTAccessWithHttpInfo(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = describeDRTAccessValidateBeforeCall(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeDRTAccessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the current role and list of Amazon S3 log buckets used by the Shield Response Team (SRT) to access your Amazon Web Services account while assisting with attack mitigation.
     * @param xAmzTarget  (required)
     * @param body  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeDRTAccessAsync(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeDRTAccessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeDRTAccessValidateBeforeCall(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeDRTAccessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeEmergencyContactSettings
     * @param xAmzTarget  (required)
     * @param body  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeEmergencyContactSettingsCall(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSShield_20160616.DescribeEmergencyContactSettings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeEmergencyContactSettingsValidateBeforeCall(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeEmergencyContactSettings(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling describeEmergencyContactSettings(Async)");
        }

        return describeEmergencyContactSettingsCall(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * A list of email addresses and phone numbers that the Shield Response Team (SRT) can use to contact you if you have proactive engagement enabled, for escalations to the SRT and to initiate proactive customer support.
     * @param xAmzTarget  (required)
     * @param body  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeEmergencyContactSettingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeEmergencyContactSettingsResponse describeEmergencyContactSettings(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeEmergencyContactSettingsResponse> localVarResp = describeEmergencyContactSettingsWithHttpInfo(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * A list of email addresses and phone numbers that the Shield Response Team (SRT) can use to contact you if you have proactive engagement enabled, for escalations to the SRT and to initiate proactive customer support.
     * @param xAmzTarget  (required)
     * @param body  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeEmergencyContactSettingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeEmergencyContactSettingsResponse> describeEmergencyContactSettingsWithHttpInfo(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = describeEmergencyContactSettingsValidateBeforeCall(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeEmergencyContactSettingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * A list of email addresses and phone numbers that the Shield Response Team (SRT) can use to contact you if you have proactive engagement enabled, for escalations to the SRT and to initiate proactive customer support.
     * @param xAmzTarget  (required)
     * @param body  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeEmergencyContactSettingsAsync(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeEmergencyContactSettingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeEmergencyContactSettingsValidateBeforeCall(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeEmergencyContactSettingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeProtection
     * @param xAmzTarget  (required)
     * @param describeProtectionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeProtectionCall(String xAmzTarget, DescribeProtectionRequest describeProtectionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeProtectionRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSShield_20160616.DescribeProtection";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeProtectionValidateBeforeCall(String xAmzTarget, DescribeProtectionRequest describeProtectionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeProtection(Async)");
        }

        // verify the required parameter 'describeProtectionRequest' is set
        if (describeProtectionRequest == null) {
            throw new ApiException("Missing the required parameter 'describeProtectionRequest' when calling describeProtection(Async)");
        }

        return describeProtectionCall(xAmzTarget, describeProtectionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Lists the details of a &lt;a&gt;Protection&lt;/a&gt; object.
     * @param xAmzTarget  (required)
     * @param describeProtectionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeProtectionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeProtectionResponse describeProtection(String xAmzTarget, DescribeProtectionRequest describeProtectionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeProtectionResponse> localVarResp = describeProtectionWithHttpInfo(xAmzTarget, describeProtectionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the details of a &lt;a&gt;Protection&lt;/a&gt; object.
     * @param xAmzTarget  (required)
     * @param describeProtectionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeProtectionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeProtectionResponse> describeProtectionWithHttpInfo(String xAmzTarget, DescribeProtectionRequest describeProtectionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = describeProtectionValidateBeforeCall(xAmzTarget, describeProtectionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeProtectionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the details of a &lt;a&gt;Protection&lt;/a&gt; object.
     * @param xAmzTarget  (required)
     * @param describeProtectionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeProtectionAsync(String xAmzTarget, DescribeProtectionRequest describeProtectionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeProtectionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeProtectionValidateBeforeCall(xAmzTarget, describeProtectionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeProtectionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeProtectionGroup
     * @param xAmzTarget  (required)
     * @param describeProtectionGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeProtectionGroupCall(String xAmzTarget, DescribeProtectionGroupRequest describeProtectionGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeProtectionGroupRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSShield_20160616.DescribeProtectionGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeProtectionGroupValidateBeforeCall(String xAmzTarget, DescribeProtectionGroupRequest describeProtectionGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeProtectionGroup(Async)");
        }

        // verify the required parameter 'describeProtectionGroupRequest' is set
        if (describeProtectionGroupRequest == null) {
            throw new ApiException("Missing the required parameter 'describeProtectionGroupRequest' when calling describeProtectionGroup(Async)");
        }

        return describeProtectionGroupCall(xAmzTarget, describeProtectionGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Returns the specification for the specified protection group.
     * @param xAmzTarget  (required)
     * @param describeProtectionGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeProtectionGroupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeProtectionGroupResponse describeProtectionGroup(String xAmzTarget, DescribeProtectionGroupRequest describeProtectionGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeProtectionGroupResponse> localVarResp = describeProtectionGroupWithHttpInfo(xAmzTarget, describeProtectionGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the specification for the specified protection group.
     * @param xAmzTarget  (required)
     * @param describeProtectionGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeProtectionGroupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeProtectionGroupResponse> describeProtectionGroupWithHttpInfo(String xAmzTarget, DescribeProtectionGroupRequest describeProtectionGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = describeProtectionGroupValidateBeforeCall(xAmzTarget, describeProtectionGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeProtectionGroupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the specification for the specified protection group.
     * @param xAmzTarget  (required)
     * @param describeProtectionGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeProtectionGroupAsync(String xAmzTarget, DescribeProtectionGroupRequest describeProtectionGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeProtectionGroupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeProtectionGroupValidateBeforeCall(xAmzTarget, describeProtectionGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeProtectionGroupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeSubscription
     * @param xAmzTarget  (required)
     * @param body  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeSubscriptionCall(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSShield_20160616.DescribeSubscription";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeSubscriptionValidateBeforeCall(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeSubscription(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling describeSubscription(Async)");
        }

        return describeSubscriptionCall(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Provides details about the Shield Advanced subscription for an account.
     * @param xAmzTarget  (required)
     * @param body  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeSubscriptionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeSubscriptionResponse describeSubscription(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeSubscriptionResponse> localVarResp = describeSubscriptionWithHttpInfo(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Provides details about the Shield Advanced subscription for an account.
     * @param xAmzTarget  (required)
     * @param body  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeSubscriptionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeSubscriptionResponse> describeSubscriptionWithHttpInfo(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = describeSubscriptionValidateBeforeCall(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeSubscriptionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Provides details about the Shield Advanced subscription for an account.
     * @param xAmzTarget  (required)
     * @param body  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeSubscriptionAsync(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeSubscriptionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeSubscriptionValidateBeforeCall(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeSubscriptionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for disableApplicationLayerAutomaticResponse
     * @param xAmzTarget  (required)
     * @param disableApplicationLayerAutomaticResponseRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OptimisticLockException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidOperationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disableApplicationLayerAutomaticResponseCall(String xAmzTarget, DisableApplicationLayerAutomaticResponseRequest disableApplicationLayerAutomaticResponseRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = disableApplicationLayerAutomaticResponseRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSShield_20160616.DisableApplicationLayerAutomaticResponse";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disableApplicationLayerAutomaticResponseValidateBeforeCall(String xAmzTarget, DisableApplicationLayerAutomaticResponseRequest disableApplicationLayerAutomaticResponseRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling disableApplicationLayerAutomaticResponse(Async)");
        }

        // verify the required parameter 'disableApplicationLayerAutomaticResponseRequest' is set
        if (disableApplicationLayerAutomaticResponseRequest == null) {
            throw new ApiException("Missing the required parameter 'disableApplicationLayerAutomaticResponseRequest' when calling disableApplicationLayerAutomaticResponse(Async)");
        }

        return disableApplicationLayerAutomaticResponseCall(xAmzTarget, disableApplicationLayerAutomaticResponseRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Disable the Shield Advanced automatic application layer DDoS mitigation feature for the protected resource. This stops Shield Advanced from creating, verifying, and applying WAF rules for attacks that it detects for the resource. 
     * @param xAmzTarget  (required)
     * @param disableApplicationLayerAutomaticResponseRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OptimisticLockException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidOperationException </td><td>  -  </td></tr>
     </table>
     */
    public Object disableApplicationLayerAutomaticResponse(String xAmzTarget, DisableApplicationLayerAutomaticResponseRequest disableApplicationLayerAutomaticResponseRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = disableApplicationLayerAutomaticResponseWithHttpInfo(xAmzTarget, disableApplicationLayerAutomaticResponseRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Disable the Shield Advanced automatic application layer DDoS mitigation feature for the protected resource. This stops Shield Advanced from creating, verifying, and applying WAF rules for attacks that it detects for the resource. 
     * @param xAmzTarget  (required)
     * @param disableApplicationLayerAutomaticResponseRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OptimisticLockException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidOperationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> disableApplicationLayerAutomaticResponseWithHttpInfo(String xAmzTarget, DisableApplicationLayerAutomaticResponseRequest disableApplicationLayerAutomaticResponseRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = disableApplicationLayerAutomaticResponseValidateBeforeCall(xAmzTarget, disableApplicationLayerAutomaticResponseRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Disable the Shield Advanced automatic application layer DDoS mitigation feature for the protected resource. This stops Shield Advanced from creating, verifying, and applying WAF rules for attacks that it detects for the resource. 
     * @param xAmzTarget  (required)
     * @param disableApplicationLayerAutomaticResponseRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OptimisticLockException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidOperationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disableApplicationLayerAutomaticResponseAsync(String xAmzTarget, DisableApplicationLayerAutomaticResponseRequest disableApplicationLayerAutomaticResponseRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = disableApplicationLayerAutomaticResponseValidateBeforeCall(xAmzTarget, disableApplicationLayerAutomaticResponseRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for disableProactiveEngagement
     * @param xAmzTarget  (required)
     * @param body  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OptimisticLockException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disableProactiveEngagementCall(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSShield_20160616.DisableProactiveEngagement";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disableProactiveEngagementValidateBeforeCall(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling disableProactiveEngagement(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling disableProactiveEngagement(Async)");
        }

        return disableProactiveEngagementCall(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Removes authorization from the Shield Response Team (SRT) to notify contacts about escalations to the SRT and to initiate proactive customer support.
     * @param xAmzTarget  (required)
     * @param body  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OptimisticLockException </td><td>  -  </td></tr>
     </table>
     */
    public Object disableProactiveEngagement(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = disableProactiveEngagementWithHttpInfo(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Removes authorization from the Shield Response Team (SRT) to notify contacts about escalations to the SRT and to initiate proactive customer support.
     * @param xAmzTarget  (required)
     * @param body  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OptimisticLockException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> disableProactiveEngagementWithHttpInfo(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = disableProactiveEngagementValidateBeforeCall(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Removes authorization from the Shield Response Team (SRT) to notify contacts about escalations to the SRT and to initiate proactive customer support.
     * @param xAmzTarget  (required)
     * @param body  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OptimisticLockException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disableProactiveEngagementAsync(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = disableProactiveEngagementValidateBeforeCall(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for disassociateDRTLogBucket
     * @param xAmzTarget  (required)
     * @param disassociateDRTLogBucketRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoAssociatedRoleException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AccessDeniedForDependencyException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OptimisticLockException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disassociateDRTLogBucketCall(String xAmzTarget, DisassociateDRTLogBucketRequest disassociateDRTLogBucketRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = disassociateDRTLogBucketRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSShield_20160616.DisassociateDRTLogBucket";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disassociateDRTLogBucketValidateBeforeCall(String xAmzTarget, DisassociateDRTLogBucketRequest disassociateDRTLogBucketRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling disassociateDRTLogBucket(Async)");
        }

        // verify the required parameter 'disassociateDRTLogBucketRequest' is set
        if (disassociateDRTLogBucketRequest == null) {
            throw new ApiException("Missing the required parameter 'disassociateDRTLogBucketRequest' when calling disassociateDRTLogBucket(Async)");
        }

        return disassociateDRTLogBucketCall(xAmzTarget, disassociateDRTLogBucketRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Removes the Shield Response Team&#39;s (SRT) access to the specified Amazon S3 bucket containing the logs that you shared previously.
     * @param xAmzTarget  (required)
     * @param disassociateDRTLogBucketRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoAssociatedRoleException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AccessDeniedForDependencyException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OptimisticLockException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public Object disassociateDRTLogBucket(String xAmzTarget, DisassociateDRTLogBucketRequest disassociateDRTLogBucketRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = disassociateDRTLogBucketWithHttpInfo(xAmzTarget, disassociateDRTLogBucketRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Removes the Shield Response Team&#39;s (SRT) access to the specified Amazon S3 bucket containing the logs that you shared previously.
     * @param xAmzTarget  (required)
     * @param disassociateDRTLogBucketRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoAssociatedRoleException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AccessDeniedForDependencyException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OptimisticLockException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> disassociateDRTLogBucketWithHttpInfo(String xAmzTarget, DisassociateDRTLogBucketRequest disassociateDRTLogBucketRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = disassociateDRTLogBucketValidateBeforeCall(xAmzTarget, disassociateDRTLogBucketRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Removes the Shield Response Team&#39;s (SRT) access to the specified Amazon S3 bucket containing the logs that you shared previously.
     * @param xAmzTarget  (required)
     * @param disassociateDRTLogBucketRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoAssociatedRoleException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AccessDeniedForDependencyException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OptimisticLockException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disassociateDRTLogBucketAsync(String xAmzTarget, DisassociateDRTLogBucketRequest disassociateDRTLogBucketRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = disassociateDRTLogBucketValidateBeforeCall(xAmzTarget, disassociateDRTLogBucketRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for disassociateDRTRole
     * @param xAmzTarget  (required)
     * @param body  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OptimisticLockException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disassociateDRTRoleCall(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSShield_20160616.DisassociateDRTRole";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disassociateDRTRoleValidateBeforeCall(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling disassociateDRTRole(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling disassociateDRTRole(Async)");
        }

        return disassociateDRTRoleCall(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Removes the Shield Response Team&#39;s (SRT) access to your Amazon Web Services account.
     * @param xAmzTarget  (required)
     * @param body  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OptimisticLockException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public Object disassociateDRTRole(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = disassociateDRTRoleWithHttpInfo(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Removes the Shield Response Team&#39;s (SRT) access to your Amazon Web Services account.
     * @param xAmzTarget  (required)
     * @param body  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OptimisticLockException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> disassociateDRTRoleWithHttpInfo(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = disassociateDRTRoleValidateBeforeCall(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Removes the Shield Response Team&#39;s (SRT) access to your Amazon Web Services account.
     * @param xAmzTarget  (required)
     * @param body  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OptimisticLockException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disassociateDRTRoleAsync(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = disassociateDRTRoleValidateBeforeCall(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for disassociateHealthCheck
     * @param xAmzTarget  (required)
     * @param disassociateHealthCheckRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OptimisticLockException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidResourceException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disassociateHealthCheckCall(String xAmzTarget, DisassociateHealthCheckRequest disassociateHealthCheckRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = disassociateHealthCheckRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSShield_20160616.DisassociateHealthCheck";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disassociateHealthCheckValidateBeforeCall(String xAmzTarget, DisassociateHealthCheckRequest disassociateHealthCheckRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling disassociateHealthCheck(Async)");
        }

        // verify the required parameter 'disassociateHealthCheckRequest' is set
        if (disassociateHealthCheckRequest == null) {
            throw new ApiException("Missing the required parameter 'disassociateHealthCheckRequest' when calling disassociateHealthCheck(Async)");
        }

        return disassociateHealthCheckCall(xAmzTarget, disassociateHealthCheckRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Removes health-based detection from the Shield Advanced protection for a resource. Shield Advanced health-based detection uses the health of your Amazon Web Services resource to improve responsiveness and accuracy in attack detection and response. &lt;/p&gt; &lt;p&gt;You define the health check in Route 53 and then associate or disassociate it with your Shield Advanced protection. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/ddos-overview.html#ddos-advanced-health-check-option\&quot;&gt;Shield Advanced Health-Based Detection&lt;/a&gt; in the &lt;i&gt;WAF Developer Guide&lt;/i&gt;. &lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param disassociateHealthCheckRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OptimisticLockException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidResourceException </td><td>  -  </td></tr>
     </table>
     */
    public Object disassociateHealthCheck(String xAmzTarget, DisassociateHealthCheckRequest disassociateHealthCheckRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = disassociateHealthCheckWithHttpInfo(xAmzTarget, disassociateHealthCheckRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Removes health-based detection from the Shield Advanced protection for a resource. Shield Advanced health-based detection uses the health of your Amazon Web Services resource to improve responsiveness and accuracy in attack detection and response. &lt;/p&gt; &lt;p&gt;You define the health check in Route 53 and then associate or disassociate it with your Shield Advanced protection. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/ddos-overview.html#ddos-advanced-health-check-option\&quot;&gt;Shield Advanced Health-Based Detection&lt;/a&gt; in the &lt;i&gt;WAF Developer Guide&lt;/i&gt;. &lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param disassociateHealthCheckRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OptimisticLockException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidResourceException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> disassociateHealthCheckWithHttpInfo(String xAmzTarget, DisassociateHealthCheckRequest disassociateHealthCheckRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = disassociateHealthCheckValidateBeforeCall(xAmzTarget, disassociateHealthCheckRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Removes health-based detection from the Shield Advanced protection for a resource. Shield Advanced health-based detection uses the health of your Amazon Web Services resource to improve responsiveness and accuracy in attack detection and response. &lt;/p&gt; &lt;p&gt;You define the health check in Route 53 and then associate or disassociate it with your Shield Advanced protection. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/ddos-overview.html#ddos-advanced-health-check-option\&quot;&gt;Shield Advanced Health-Based Detection&lt;/a&gt; in the &lt;i&gt;WAF Developer Guide&lt;/i&gt;. &lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param disassociateHealthCheckRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OptimisticLockException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidResourceException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disassociateHealthCheckAsync(String xAmzTarget, DisassociateHealthCheckRequest disassociateHealthCheckRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = disassociateHealthCheckValidateBeforeCall(xAmzTarget, disassociateHealthCheckRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enableApplicationLayerAutomaticResponse
     * @param xAmzTarget  (required)
     * @param enableApplicationLayerAutomaticResponseRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitsExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OptimisticLockException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidOperationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enableApplicationLayerAutomaticResponseCall(String xAmzTarget, EnableApplicationLayerAutomaticResponseRequest enableApplicationLayerAutomaticResponseRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = enableApplicationLayerAutomaticResponseRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSShield_20160616.EnableApplicationLayerAutomaticResponse";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enableApplicationLayerAutomaticResponseValidateBeforeCall(String xAmzTarget, EnableApplicationLayerAutomaticResponseRequest enableApplicationLayerAutomaticResponseRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling enableApplicationLayerAutomaticResponse(Async)");
        }

        // verify the required parameter 'enableApplicationLayerAutomaticResponseRequest' is set
        if (enableApplicationLayerAutomaticResponseRequest == null) {
            throw new ApiException("Missing the required parameter 'enableApplicationLayerAutomaticResponseRequest' when calling enableApplicationLayerAutomaticResponse(Async)");
        }

        return enableApplicationLayerAutomaticResponseCall(xAmzTarget, enableApplicationLayerAutomaticResponseRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Enable the Shield Advanced automatic application layer DDoS mitigation for the protected resource. &lt;/p&gt; &lt;note&gt; &lt;p&gt;This feature is available for Amazon CloudFront distributions and Application Load Balancers only.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;This causes Shield Advanced to create, verify, and apply WAF rules for DDoS attacks that it detects for the resource. Shield Advanced applies the rules in a Shield rule group inside the web ACL that you&#39;ve associated with the resource. For information about how automatic mitigation works and the requirements for using it, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/ddos-advanced-automatic-app-layer-response.html\&quot;&gt;Shield Advanced automatic application layer DDoS mitigation&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Don&#39;t use this action to make changes to automatic mitigation settings when it&#39;s already enabled for a resource. Instead, use &lt;a&gt;UpdateApplicationLayerAutomaticResponse&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;To use this feature, you must associate a web ACL with the protected resource. The web ACL must be created using the latest version of WAF (v2). You can associate the web ACL through the Shield Advanced console at &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/wafv2/shieldv2#/\&quot;&gt;https://console.aws.amazon.com/wafv2/shieldv2#/&lt;/a&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/getting-started-ddos.html\&quot;&gt;Getting Started with Shield Advanced&lt;/a&gt;. You can also associate the web ACL to the resource through the WAF console or the WAF API, but you must manage Shield Advanced automatic mitigation through Shield Advanced. For information about WAF, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param enableApplicationLayerAutomaticResponseRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitsExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OptimisticLockException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidOperationException </td><td>  -  </td></tr>
     </table>
     */
    public Object enableApplicationLayerAutomaticResponse(String xAmzTarget, EnableApplicationLayerAutomaticResponseRequest enableApplicationLayerAutomaticResponseRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = enableApplicationLayerAutomaticResponseWithHttpInfo(xAmzTarget, enableApplicationLayerAutomaticResponseRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Enable the Shield Advanced automatic application layer DDoS mitigation for the protected resource. &lt;/p&gt; &lt;note&gt; &lt;p&gt;This feature is available for Amazon CloudFront distributions and Application Load Balancers only.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;This causes Shield Advanced to create, verify, and apply WAF rules for DDoS attacks that it detects for the resource. Shield Advanced applies the rules in a Shield rule group inside the web ACL that you&#39;ve associated with the resource. For information about how automatic mitigation works and the requirements for using it, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/ddos-advanced-automatic-app-layer-response.html\&quot;&gt;Shield Advanced automatic application layer DDoS mitigation&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Don&#39;t use this action to make changes to automatic mitigation settings when it&#39;s already enabled for a resource. Instead, use &lt;a&gt;UpdateApplicationLayerAutomaticResponse&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;To use this feature, you must associate a web ACL with the protected resource. The web ACL must be created using the latest version of WAF (v2). You can associate the web ACL through the Shield Advanced console at &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/wafv2/shieldv2#/\&quot;&gt;https://console.aws.amazon.com/wafv2/shieldv2#/&lt;/a&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/getting-started-ddos.html\&quot;&gt;Getting Started with Shield Advanced&lt;/a&gt;. You can also associate the web ACL to the resource through the WAF console or the WAF API, but you must manage Shield Advanced automatic mitigation through Shield Advanced. For information about WAF, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param enableApplicationLayerAutomaticResponseRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitsExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OptimisticLockException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidOperationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> enableApplicationLayerAutomaticResponseWithHttpInfo(String xAmzTarget, EnableApplicationLayerAutomaticResponseRequest enableApplicationLayerAutomaticResponseRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = enableApplicationLayerAutomaticResponseValidateBeforeCall(xAmzTarget, enableApplicationLayerAutomaticResponseRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Enable the Shield Advanced automatic application layer DDoS mitigation for the protected resource. &lt;/p&gt; &lt;note&gt; &lt;p&gt;This feature is available for Amazon CloudFront distributions and Application Load Balancers only.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;This causes Shield Advanced to create, verify, and apply WAF rules for DDoS attacks that it detects for the resource. Shield Advanced applies the rules in a Shield rule group inside the web ACL that you&#39;ve associated with the resource. For information about how automatic mitigation works and the requirements for using it, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/ddos-advanced-automatic-app-layer-response.html\&quot;&gt;Shield Advanced automatic application layer DDoS mitigation&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Don&#39;t use this action to make changes to automatic mitigation settings when it&#39;s already enabled for a resource. Instead, use &lt;a&gt;UpdateApplicationLayerAutomaticResponse&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;To use this feature, you must associate a web ACL with the protected resource. The web ACL must be created using the latest version of WAF (v2). You can associate the web ACL through the Shield Advanced console at &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/wafv2/shieldv2#/\&quot;&gt;https://console.aws.amazon.com/wafv2/shieldv2#/&lt;/a&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/getting-started-ddos.html\&quot;&gt;Getting Started with Shield Advanced&lt;/a&gt;. You can also associate the web ACL to the resource through the WAF console or the WAF API, but you must manage Shield Advanced automatic mitigation through Shield Advanced. For information about WAF, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param enableApplicationLayerAutomaticResponseRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitsExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OptimisticLockException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidOperationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enableApplicationLayerAutomaticResponseAsync(String xAmzTarget, EnableApplicationLayerAutomaticResponseRequest enableApplicationLayerAutomaticResponseRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = enableApplicationLayerAutomaticResponseValidateBeforeCall(xAmzTarget, enableApplicationLayerAutomaticResponseRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enableProactiveEngagement
     * @param xAmzTarget  (required)
     * @param body  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OptimisticLockException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enableProactiveEngagementCall(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSShield_20160616.EnableProactiveEngagement";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enableProactiveEngagementValidateBeforeCall(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling enableProactiveEngagement(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling enableProactiveEngagement(Async)");
        }

        return enableProactiveEngagementCall(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Authorizes the Shield Response Team (SRT) to use email and phone to notify contacts about escalations to the SRT and to initiate proactive customer support.
     * @param xAmzTarget  (required)
     * @param body  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OptimisticLockException </td><td>  -  </td></tr>
     </table>
     */
    public Object enableProactiveEngagement(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = enableProactiveEngagementWithHttpInfo(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Authorizes the Shield Response Team (SRT) to use email and phone to notify contacts about escalations to the SRT and to initiate proactive customer support.
     * @param xAmzTarget  (required)
     * @param body  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OptimisticLockException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> enableProactiveEngagementWithHttpInfo(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = enableProactiveEngagementValidateBeforeCall(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Authorizes the Shield Response Team (SRT) to use email and phone to notify contacts about escalations to the SRT and to initiate proactive customer support.
     * @param xAmzTarget  (required)
     * @param body  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OptimisticLockException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enableProactiveEngagementAsync(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = enableProactiveEngagementValidateBeforeCall(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSubscriptionState
     * @param xAmzTarget  (required)
     * @param body  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSubscriptionStateCall(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSShield_20160616.GetSubscriptionState";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSubscriptionStateValidateBeforeCall(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getSubscriptionState(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling getSubscriptionState(Async)");
        }

        return getSubscriptionStateCall(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Returns the &lt;code&gt;SubscriptionState&lt;/code&gt;, either &lt;code&gt;Active&lt;/code&gt; or &lt;code&gt;Inactive&lt;/code&gt;.
     * @param xAmzTarget  (required)
     * @param body  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetSubscriptionStateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public GetSubscriptionStateResponse getSubscriptionState(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetSubscriptionStateResponse> localVarResp = getSubscriptionStateWithHttpInfo(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the &lt;code&gt;SubscriptionState&lt;/code&gt;, either &lt;code&gt;Active&lt;/code&gt; or &lt;code&gt;Inactive&lt;/code&gt;.
     * @param xAmzTarget  (required)
     * @param body  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetSubscriptionStateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetSubscriptionStateResponse> getSubscriptionStateWithHttpInfo(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getSubscriptionStateValidateBeforeCall(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetSubscriptionStateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the &lt;code&gt;SubscriptionState&lt;/code&gt;, either &lt;code&gt;Active&lt;/code&gt; or &lt;code&gt;Inactive&lt;/code&gt;.
     * @param xAmzTarget  (required)
     * @param body  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSubscriptionStateAsync(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetSubscriptionStateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSubscriptionStateValidateBeforeCall(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetSubscriptionStateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAttacks
     * @param xAmzTarget  (required)
     * @param listAttacksRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOperationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAttacksCall(String xAmzTarget, ListAttacksRequest listAttacksRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listAttacksRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSShield_20160616.ListAttacks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAttacksValidateBeforeCall(String xAmzTarget, ListAttacksRequest listAttacksRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listAttacks(Async)");
        }

        // verify the required parameter 'listAttacksRequest' is set
        if (listAttacksRequest == null) {
            throw new ApiException("Missing the required parameter 'listAttacksRequest' when calling listAttacks(Async)");
        }

        return listAttacksCall(xAmzTarget, listAttacksRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * Returns all ongoing DDoS attacks or all DDoS attacks during a specified time period.
     * @param xAmzTarget  (required)
     * @param listAttacksRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListAttacksResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOperationException </td><td>  -  </td></tr>
     </table>
     */
    public ListAttacksResponse listAttacks(String xAmzTarget, ListAttacksRequest listAttacksRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListAttacksResponse> localVarResp = listAttacksWithHttpInfo(xAmzTarget, listAttacksRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns all ongoing DDoS attacks or all DDoS attacks during a specified time period.
     * @param xAmzTarget  (required)
     * @param listAttacksRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListAttacksResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOperationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListAttacksResponse> listAttacksWithHttpInfo(String xAmzTarget, ListAttacksRequest listAttacksRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listAttacksValidateBeforeCall(xAmzTarget, listAttacksRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListAttacksResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns all ongoing DDoS attacks or all DDoS attacks during a specified time period.
     * @param xAmzTarget  (required)
     * @param listAttacksRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOperationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAttacksAsync(String xAmzTarget, ListAttacksRequest listAttacksRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<ListAttacksResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAttacksValidateBeforeCall(xAmzTarget, listAttacksRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListAttacksResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listProtectionGroups
     * @param xAmzTarget  (required)
     * @param listProtectionGroupsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidPaginationTokenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listProtectionGroupsCall(String xAmzTarget, ListProtectionGroupsRequest listProtectionGroupsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listProtectionGroupsRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSShield_20160616.ListProtectionGroups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listProtectionGroupsValidateBeforeCall(String xAmzTarget, ListProtectionGroupsRequest listProtectionGroupsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listProtectionGroups(Async)");
        }

        // verify the required parameter 'listProtectionGroupsRequest' is set
        if (listProtectionGroupsRequest == null) {
            throw new ApiException("Missing the required parameter 'listProtectionGroupsRequest' when calling listProtectionGroups(Async)");
        }

        return listProtectionGroupsCall(xAmzTarget, listProtectionGroupsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * Retrieves &lt;a&gt;ProtectionGroup&lt;/a&gt; objects for the account. You can retrieve all protection groups or you can provide filtering criteria and retrieve just the subset of protection groups that match the criteria. 
     * @param xAmzTarget  (required)
     * @param listProtectionGroupsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListProtectionGroupsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidPaginationTokenException </td><td>  -  </td></tr>
     </table>
     */
    public ListProtectionGroupsResponse listProtectionGroups(String xAmzTarget, ListProtectionGroupsRequest listProtectionGroupsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListProtectionGroupsResponse> localVarResp = listProtectionGroupsWithHttpInfo(xAmzTarget, listProtectionGroupsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves &lt;a&gt;ProtectionGroup&lt;/a&gt; objects for the account. You can retrieve all protection groups or you can provide filtering criteria and retrieve just the subset of protection groups that match the criteria. 
     * @param xAmzTarget  (required)
     * @param listProtectionGroupsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListProtectionGroupsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidPaginationTokenException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListProtectionGroupsResponse> listProtectionGroupsWithHttpInfo(String xAmzTarget, ListProtectionGroupsRequest listProtectionGroupsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listProtectionGroupsValidateBeforeCall(xAmzTarget, listProtectionGroupsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListProtectionGroupsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves &lt;a&gt;ProtectionGroup&lt;/a&gt; objects for the account. You can retrieve all protection groups or you can provide filtering criteria and retrieve just the subset of protection groups that match the criteria. 
     * @param xAmzTarget  (required)
     * @param listProtectionGroupsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidPaginationTokenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listProtectionGroupsAsync(String xAmzTarget, ListProtectionGroupsRequest listProtectionGroupsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<ListProtectionGroupsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listProtectionGroupsValidateBeforeCall(xAmzTarget, listProtectionGroupsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListProtectionGroupsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listProtections
     * @param xAmzTarget  (required)
     * @param listProtectionsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidPaginationTokenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listProtectionsCall(String xAmzTarget, ListProtectionsRequest listProtectionsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listProtectionsRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSShield_20160616.ListProtections";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listProtectionsValidateBeforeCall(String xAmzTarget, ListProtectionsRequest listProtectionsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listProtections(Async)");
        }

        // verify the required parameter 'listProtectionsRequest' is set
        if (listProtectionsRequest == null) {
            throw new ApiException("Missing the required parameter 'listProtectionsRequest' when calling listProtections(Async)");
        }

        return listProtectionsCall(xAmzTarget, listProtectionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * Retrieves &lt;a&gt;Protection&lt;/a&gt; objects for the account. You can retrieve all protections or you can provide filtering criteria and retrieve just the subset of protections that match the criteria. 
     * @param xAmzTarget  (required)
     * @param listProtectionsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListProtectionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidPaginationTokenException </td><td>  -  </td></tr>
     </table>
     */
    public ListProtectionsResponse listProtections(String xAmzTarget, ListProtectionsRequest listProtectionsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListProtectionsResponse> localVarResp = listProtectionsWithHttpInfo(xAmzTarget, listProtectionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves &lt;a&gt;Protection&lt;/a&gt; objects for the account. You can retrieve all protections or you can provide filtering criteria and retrieve just the subset of protections that match the criteria. 
     * @param xAmzTarget  (required)
     * @param listProtectionsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListProtectionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidPaginationTokenException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListProtectionsResponse> listProtectionsWithHttpInfo(String xAmzTarget, ListProtectionsRequest listProtectionsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listProtectionsValidateBeforeCall(xAmzTarget, listProtectionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListProtectionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves &lt;a&gt;Protection&lt;/a&gt; objects for the account. You can retrieve all protections or you can provide filtering criteria and retrieve just the subset of protections that match the criteria. 
     * @param xAmzTarget  (required)
     * @param listProtectionsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidPaginationTokenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listProtectionsAsync(String xAmzTarget, ListProtectionsRequest listProtectionsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<ListProtectionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listProtectionsValidateBeforeCall(xAmzTarget, listProtectionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListProtectionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listResourcesInProtectionGroup
     * @param xAmzTarget  (required)
     * @param listResourcesInProtectionGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidPaginationTokenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listResourcesInProtectionGroupCall(String xAmzTarget, ListResourcesInProtectionGroupRequest listResourcesInProtectionGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listResourcesInProtectionGroupRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSShield_20160616.ListResourcesInProtectionGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listResourcesInProtectionGroupValidateBeforeCall(String xAmzTarget, ListResourcesInProtectionGroupRequest listResourcesInProtectionGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listResourcesInProtectionGroup(Async)");
        }

        // verify the required parameter 'listResourcesInProtectionGroupRequest' is set
        if (listResourcesInProtectionGroupRequest == null) {
            throw new ApiException("Missing the required parameter 'listResourcesInProtectionGroupRequest' when calling listResourcesInProtectionGroup(Async)");
        }

        return listResourcesInProtectionGroupCall(xAmzTarget, listResourcesInProtectionGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * Retrieves the resources that are included in the protection group. 
     * @param xAmzTarget  (required)
     * @param listResourcesInProtectionGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListResourcesInProtectionGroupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidPaginationTokenException </td><td>  -  </td></tr>
     </table>
     */
    public ListResourcesInProtectionGroupResponse listResourcesInProtectionGroup(String xAmzTarget, ListResourcesInProtectionGroupRequest listResourcesInProtectionGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListResourcesInProtectionGroupResponse> localVarResp = listResourcesInProtectionGroupWithHttpInfo(xAmzTarget, listResourcesInProtectionGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the resources that are included in the protection group. 
     * @param xAmzTarget  (required)
     * @param listResourcesInProtectionGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListResourcesInProtectionGroupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidPaginationTokenException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListResourcesInProtectionGroupResponse> listResourcesInProtectionGroupWithHttpInfo(String xAmzTarget, ListResourcesInProtectionGroupRequest listResourcesInProtectionGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listResourcesInProtectionGroupValidateBeforeCall(xAmzTarget, listResourcesInProtectionGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListResourcesInProtectionGroupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the resources that are included in the protection group. 
     * @param xAmzTarget  (required)
     * @param listResourcesInProtectionGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidPaginationTokenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listResourcesInProtectionGroupAsync(String xAmzTarget, ListResourcesInProtectionGroupRequest listResourcesInProtectionGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<ListResourcesInProtectionGroupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listResourcesInProtectionGroupValidateBeforeCall(xAmzTarget, listResourcesInProtectionGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListResourcesInProtectionGroupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTagsForResource
     * @param xAmzTarget  (required)
     * @param listTagsForResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTagsForResourceCall(String xAmzTarget, ListTagsForResourceRequest listTagsForResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listTagsForResourceRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSShield_20160616.ListTagsForResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTagsForResourceValidateBeforeCall(String xAmzTarget, ListTagsForResourceRequest listTagsForResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listTagsForResource(Async)");
        }

        // verify the required parameter 'listTagsForResourceRequest' is set
        if (listTagsForResourceRequest == null) {
            throw new ApiException("Missing the required parameter 'listTagsForResourceRequest' when calling listTagsForResource(Async)");
        }

        return listTagsForResourceCall(xAmzTarget, listTagsForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Gets information about Amazon Web Services tags for a specified Amazon Resource Name (ARN) in Shield.
     * @param xAmzTarget  (required)
     * @param listTagsForResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ListTagsForResourceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ListTagsForResourceResponse listTagsForResource(String xAmzTarget, ListTagsForResourceRequest listTagsForResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ListTagsForResourceResponse> localVarResp = listTagsForResourceWithHttpInfo(xAmzTarget, listTagsForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets information about Amazon Web Services tags for a specified Amazon Resource Name (ARN) in Shield.
     * @param xAmzTarget  (required)
     * @param listTagsForResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ListTagsForResourceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTagsForResourceResponse> listTagsForResourceWithHttpInfo(String xAmzTarget, ListTagsForResourceRequest listTagsForResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = listTagsForResourceValidateBeforeCall(xAmzTarget, listTagsForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ListTagsForResourceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets information about Amazon Web Services tags for a specified Amazon Resource Name (ARN) in Shield.
     * @param xAmzTarget  (required)
     * @param listTagsForResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTagsForResourceAsync(String xAmzTarget, ListTagsForResourceRequest listTagsForResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ListTagsForResourceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTagsForResourceValidateBeforeCall(xAmzTarget, listTagsForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ListTagsForResourceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tagResource
     * @param xAmzTarget  (required)
     * @param tagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagResourceCall(String xAmzTarget, TagResourceRequest tagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tagResourceRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSShield_20160616.TagResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tagResourceValidateBeforeCall(String xAmzTarget, TagResourceRequest tagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling tagResource(Async)");
        }

        // verify the required parameter 'tagResourceRequest' is set
        if (tagResourceRequest == null) {
            throw new ApiException("Missing the required parameter 'tagResourceRequest' when calling tagResource(Async)");
        }

        return tagResourceCall(xAmzTarget, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Adds or updates tags for a resource in Shield.
     * @param xAmzTarget  (required)
     * @param tagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public Object tagResource(String xAmzTarget, TagResourceRequest tagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = tagResourceWithHttpInfo(xAmzTarget, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Adds or updates tags for a resource in Shield.
     * @param xAmzTarget  (required)
     * @param tagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> tagResourceWithHttpInfo(String xAmzTarget, TagResourceRequest tagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = tagResourceValidateBeforeCall(xAmzTarget, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Adds or updates tags for a resource in Shield.
     * @param xAmzTarget  (required)
     * @param tagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagResourceAsync(String xAmzTarget, TagResourceRequest tagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = tagResourceValidateBeforeCall(xAmzTarget, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for untagResource
     * @param xAmzTarget  (required)
     * @param untagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call untagResourceCall(String xAmzTarget, UntagResourceRequest untagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = untagResourceRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSShield_20160616.UntagResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call untagResourceValidateBeforeCall(String xAmzTarget, UntagResourceRequest untagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling untagResource(Async)");
        }

        // verify the required parameter 'untagResourceRequest' is set
        if (untagResourceRequest == null) {
            throw new ApiException("Missing the required parameter 'untagResourceRequest' when calling untagResource(Async)");
        }

        return untagResourceCall(xAmzTarget, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Removes tags from a resource in Shield.
     * @param xAmzTarget  (required)
     * @param untagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public Object untagResource(String xAmzTarget, UntagResourceRequest untagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = untagResourceWithHttpInfo(xAmzTarget, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Removes tags from a resource in Shield.
     * @param xAmzTarget  (required)
     * @param untagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> untagResourceWithHttpInfo(String xAmzTarget, UntagResourceRequest untagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = untagResourceValidateBeforeCall(xAmzTarget, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Removes tags from a resource in Shield.
     * @param xAmzTarget  (required)
     * @param untagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call untagResourceAsync(String xAmzTarget, UntagResourceRequest untagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = untagResourceValidateBeforeCall(xAmzTarget, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateApplicationLayerAutomaticResponse
     * @param xAmzTarget  (required)
     * @param updateApplicationLayerAutomaticResponseRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OptimisticLockException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidOperationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateApplicationLayerAutomaticResponseCall(String xAmzTarget, UpdateApplicationLayerAutomaticResponseRequest updateApplicationLayerAutomaticResponseRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateApplicationLayerAutomaticResponseRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSShield_20160616.UpdateApplicationLayerAutomaticResponse";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateApplicationLayerAutomaticResponseValidateBeforeCall(String xAmzTarget, UpdateApplicationLayerAutomaticResponseRequest updateApplicationLayerAutomaticResponseRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateApplicationLayerAutomaticResponse(Async)");
        }

        // verify the required parameter 'updateApplicationLayerAutomaticResponseRequest' is set
        if (updateApplicationLayerAutomaticResponseRequest == null) {
            throw new ApiException("Missing the required parameter 'updateApplicationLayerAutomaticResponseRequest' when calling updateApplicationLayerAutomaticResponse(Async)");
        }

        return updateApplicationLayerAutomaticResponseCall(xAmzTarget, updateApplicationLayerAutomaticResponseRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Updates an existing Shield Advanced automatic application layer DDoS mitigation configuration for the specified resource.
     * @param xAmzTarget  (required)
     * @param updateApplicationLayerAutomaticResponseRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OptimisticLockException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidOperationException </td><td>  -  </td></tr>
     </table>
     */
    public Object updateApplicationLayerAutomaticResponse(String xAmzTarget, UpdateApplicationLayerAutomaticResponseRequest updateApplicationLayerAutomaticResponseRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = updateApplicationLayerAutomaticResponseWithHttpInfo(xAmzTarget, updateApplicationLayerAutomaticResponseRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates an existing Shield Advanced automatic application layer DDoS mitigation configuration for the specified resource.
     * @param xAmzTarget  (required)
     * @param updateApplicationLayerAutomaticResponseRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OptimisticLockException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidOperationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateApplicationLayerAutomaticResponseWithHttpInfo(String xAmzTarget, UpdateApplicationLayerAutomaticResponseRequest updateApplicationLayerAutomaticResponseRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateApplicationLayerAutomaticResponseValidateBeforeCall(xAmzTarget, updateApplicationLayerAutomaticResponseRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates an existing Shield Advanced automatic application layer DDoS mitigation configuration for the specified resource.
     * @param xAmzTarget  (required)
     * @param updateApplicationLayerAutomaticResponseRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OptimisticLockException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidOperationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateApplicationLayerAutomaticResponseAsync(String xAmzTarget, UpdateApplicationLayerAutomaticResponseRequest updateApplicationLayerAutomaticResponseRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateApplicationLayerAutomaticResponseValidateBeforeCall(xAmzTarget, updateApplicationLayerAutomaticResponseRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateEmergencyContactSettings
     * @param xAmzTarget  (required)
     * @param updateEmergencyContactSettingsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OptimisticLockException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateEmergencyContactSettingsCall(String xAmzTarget, UpdateEmergencyContactSettingsRequest updateEmergencyContactSettingsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateEmergencyContactSettingsRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSShield_20160616.UpdateEmergencyContactSettings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEmergencyContactSettingsValidateBeforeCall(String xAmzTarget, UpdateEmergencyContactSettingsRequest updateEmergencyContactSettingsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateEmergencyContactSettings(Async)");
        }

        // verify the required parameter 'updateEmergencyContactSettingsRequest' is set
        if (updateEmergencyContactSettingsRequest == null) {
            throw new ApiException("Missing the required parameter 'updateEmergencyContactSettingsRequest' when calling updateEmergencyContactSettings(Async)");
        }

        return updateEmergencyContactSettingsCall(xAmzTarget, updateEmergencyContactSettingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Updates the details of the list of email addresses and phone numbers that the Shield Response Team (SRT) can use to contact you if you have proactive engagement enabled, for escalations to the SRT and to initiate proactive customer support.
     * @param xAmzTarget  (required)
     * @param updateEmergencyContactSettingsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OptimisticLockException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public Object updateEmergencyContactSettings(String xAmzTarget, UpdateEmergencyContactSettingsRequest updateEmergencyContactSettingsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = updateEmergencyContactSettingsWithHttpInfo(xAmzTarget, updateEmergencyContactSettingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the details of the list of email addresses and phone numbers that the Shield Response Team (SRT) can use to contact you if you have proactive engagement enabled, for escalations to the SRT and to initiate proactive customer support.
     * @param xAmzTarget  (required)
     * @param updateEmergencyContactSettingsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OptimisticLockException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateEmergencyContactSettingsWithHttpInfo(String xAmzTarget, UpdateEmergencyContactSettingsRequest updateEmergencyContactSettingsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateEmergencyContactSettingsValidateBeforeCall(xAmzTarget, updateEmergencyContactSettingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the details of the list of email addresses and phone numbers that the Shield Response Team (SRT) can use to contact you if you have proactive engagement enabled, for escalations to the SRT and to initiate proactive customer support.
     * @param xAmzTarget  (required)
     * @param updateEmergencyContactSettingsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OptimisticLockException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateEmergencyContactSettingsAsync(String xAmzTarget, UpdateEmergencyContactSettingsRequest updateEmergencyContactSettingsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEmergencyContactSettingsValidateBeforeCall(xAmzTarget, updateEmergencyContactSettingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateProtectionGroup
     * @param xAmzTarget  (required)
     * @param updateProtectionGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OptimisticLockException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProtectionGroupCall(String xAmzTarget, UpdateProtectionGroupRequest updateProtectionGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateProtectionGroupRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSShield_20160616.UpdateProtectionGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProtectionGroupValidateBeforeCall(String xAmzTarget, UpdateProtectionGroupRequest updateProtectionGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateProtectionGroup(Async)");
        }

        // verify the required parameter 'updateProtectionGroupRequest' is set
        if (updateProtectionGroupRequest == null) {
            throw new ApiException("Missing the required parameter 'updateProtectionGroupRequest' when calling updateProtectionGroup(Async)");
        }

        return updateProtectionGroupCall(xAmzTarget, updateProtectionGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Updates an existing protection group. A protection group is a grouping of protected resources so they can be handled as a collective. This resource grouping improves the accuracy of detection and reduces false positives. 
     * @param xAmzTarget  (required)
     * @param updateProtectionGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OptimisticLockException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public Object updateProtectionGroup(String xAmzTarget, UpdateProtectionGroupRequest updateProtectionGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = updateProtectionGroupWithHttpInfo(xAmzTarget, updateProtectionGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates an existing protection group. A protection group is a grouping of protected resources so they can be handled as a collective. This resource grouping improves the accuracy of detection and reduces false positives. 
     * @param xAmzTarget  (required)
     * @param updateProtectionGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OptimisticLockException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateProtectionGroupWithHttpInfo(String xAmzTarget, UpdateProtectionGroupRequest updateProtectionGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateProtectionGroupValidateBeforeCall(xAmzTarget, updateProtectionGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates an existing protection group. A protection group is a grouping of protected resources so they can be handled as a collective. This resource grouping improves the accuracy of detection and reduces false positives. 
     * @param xAmzTarget  (required)
     * @param updateProtectionGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OptimisticLockException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProtectionGroupAsync(String xAmzTarget, UpdateProtectionGroupRequest updateProtectionGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateProtectionGroupValidateBeforeCall(xAmzTarget, updateProtectionGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSubscription
     * @param xAmzTarget  (required)
     * @param updateSubscriptionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LockedSubscriptionException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OptimisticLockException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSubscriptionCall(String xAmzTarget, UpdateSubscriptionRequest updateSubscriptionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateSubscriptionRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSShield_20160616.UpdateSubscription";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSubscriptionValidateBeforeCall(String xAmzTarget, UpdateSubscriptionRequest updateSubscriptionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateSubscription(Async)");
        }

        // verify the required parameter 'updateSubscriptionRequest' is set
        if (updateSubscriptionRequest == null) {
            throw new ApiException("Missing the required parameter 'updateSubscriptionRequest' when calling updateSubscription(Async)");
        }

        return updateSubscriptionCall(xAmzTarget, updateSubscriptionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Updates the details of an existing subscription. Only enter values for parameters you want to change. Empty parameters are not updated.&lt;/p&gt; &lt;note&gt; &lt;p&gt;For accounts that are members of an Organizations organization, Shield Advanced subscriptions are billed against the organization&#39;s payer account, regardless of whether the payer account itself is subscribed. &lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param updateSubscriptionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LockedSubscriptionException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OptimisticLockException </td><td>  -  </td></tr>
     </table>
     */
    public Object updateSubscription(String xAmzTarget, UpdateSubscriptionRequest updateSubscriptionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = updateSubscriptionWithHttpInfo(xAmzTarget, updateSubscriptionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Updates the details of an existing subscription. Only enter values for parameters you want to change. Empty parameters are not updated.&lt;/p&gt; &lt;note&gt; &lt;p&gt;For accounts that are members of an Organizations organization, Shield Advanced subscriptions are billed against the organization&#39;s payer account, regardless of whether the payer account itself is subscribed. &lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param updateSubscriptionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LockedSubscriptionException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OptimisticLockException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateSubscriptionWithHttpInfo(String xAmzTarget, UpdateSubscriptionRequest updateSubscriptionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateSubscriptionValidateBeforeCall(xAmzTarget, updateSubscriptionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Updates the details of an existing subscription. Only enter values for parameters you want to change. Empty parameters are not updated.&lt;/p&gt; &lt;note&gt; &lt;p&gt;For accounts that are members of an Organizations organization, Shield Advanced subscriptions are billed against the organization&#39;s payer account, regardless of whether the payer account itself is subscribed. &lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param updateSubscriptionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LockedSubscriptionException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OptimisticLockException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSubscriptionAsync(String xAmzTarget, UpdateSubscriptionRequest updateSubscriptionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSubscriptionValidateBeforeCall(xAmzTarget, updateSubscriptionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
