/*
 * AWS Shield
 * <fullname>Shield Advanced</fullname> <p>This is the <i>Shield Advanced API Reference</i>. This guide is for developers who need detailed information about the Shield Advanced API actions, data types, and errors. For detailed information about WAF and Shield Advanced features and an overview of how to use the WAF and Shield Advanced APIs, see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/\">WAF and Shield Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-06-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SubResourceType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The attack information for the specified SubResource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:57.716468-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SubResourceSummary {
  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private SubResourceType type;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ATTACK_VECTORS = "AttackVectors";
  @SerializedName(SERIALIZED_NAME_ATTACK_VECTORS)
  private List attackVectors;

  public static final String SERIALIZED_NAME_COUNTERS = "Counters";
  @SerializedName(SERIALIZED_NAME_COUNTERS)
  private List counters;

  public SubResourceSummary() {
  }

  public SubResourceSummary type(SubResourceType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public SubResourceType getType() {
    return type;
  }

  public void setType(SubResourceType type) {
    this.type = type;
  }


  public SubResourceSummary id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public SubResourceSummary attackVectors(List attackVectors) {
    this.attackVectors = attackVectors;
    return this;
  }

  /**
   * Get attackVectors
   * @return attackVectors
   */
  @javax.annotation.Nullable
  public List getAttackVectors() {
    return attackVectors;
  }

  public void setAttackVectors(List attackVectors) {
    this.attackVectors = attackVectors;
  }


  public SubResourceSummary counters(List counters) {
    this.counters = counters;
    return this;
  }

  /**
   * Get counters
   * @return counters
   */
  @javax.annotation.Nullable
  public List getCounters() {
    return counters;
  }

  public void setCounters(List counters) {
    this.counters = counters;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubResourceSummary subResourceSummary = (SubResourceSummary) o;
    return Objects.equals(this.type, subResourceSummary.type) &&
        Objects.equals(this.id, subResourceSummary.id) &&
        Objects.equals(this.attackVectors, subResourceSummary.attackVectors) &&
        Objects.equals(this.counters, subResourceSummary.counters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, id, attackVectors, counters);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubResourceSummary {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    attackVectors: ").append(toIndentedString(attackVectors)).append("\n");
    sb.append("    counters: ").append(toIndentedString(counters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Type");
    openapiFields.add("Id");
    openapiFields.add("AttackVectors");
    openapiFields.add("Counters");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SubResourceSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SubResourceSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SubResourceSummary is not found in the empty JSON string", SubResourceSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SubResourceSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SubResourceSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Type`
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) {
        SubResourceType.validateJsonElement(jsonObj.get("Type"));
      }
      // validate the optional field `Id`
      if (jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Id"));
      }
      // validate the optional field `AttackVectors`
      if (jsonObj.get("AttackVectors") != null && !jsonObj.get("AttackVectors").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("AttackVectors"));
      }
      // validate the optional field `Counters`
      if (jsonObj.get("Counters") != null && !jsonObj.get("Counters").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Counters"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SubResourceSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SubResourceSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SubResourceSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SubResourceSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<SubResourceSummary>() {
           @Override
           public void write(JsonWriter out, SubResourceSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SubResourceSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SubResourceSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SubResourceSummary
   * @throws IOException if the JSON string is invalid with respect to SubResourceSummary
   */
  public static SubResourceSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SubResourceSummary.class);
  }

  /**
   * Convert an instance of SubResourceSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

