/*
 * AWS Shield
 * <fullname>Shield Advanced</fullname> <p>This is the <i>Shield Advanced API Reference</i>. This guide is for developers who need detailed information about the Shield Advanced API actions, data types, and errors. For detailed information about WAF and Shield Advanced features and an overview of how to use the WAF and Shield Advanced APIs, see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/\">WAF and Shield Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-06-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AssociateProactiveEngagementDetailsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:57.716468-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AssociateProactiveEngagementDetailsRequest {
  public static final String SERIALIZED_NAME_EMERGENCY_CONTACT_LIST = "EmergencyContactList";
  @SerializedName(SERIALIZED_NAME_EMERGENCY_CONTACT_LIST)
  private List emergencyContactList;

  public AssociateProactiveEngagementDetailsRequest() {
  }

  public AssociateProactiveEngagementDetailsRequest emergencyContactList(List emergencyContactList) {
    this.emergencyContactList = emergencyContactList;
    return this;
  }

  /**
   * Get emergencyContactList
   * @return emergencyContactList
   */
  @javax.annotation.Nonnull
  public List getEmergencyContactList() {
    return emergencyContactList;
  }

  public void setEmergencyContactList(List emergencyContactList) {
    this.emergencyContactList = emergencyContactList;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssociateProactiveEngagementDetailsRequest associateProactiveEngagementDetailsRequest = (AssociateProactiveEngagementDetailsRequest) o;
    return Objects.equals(this.emergencyContactList, associateProactiveEngagementDetailsRequest.emergencyContactList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(emergencyContactList);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssociateProactiveEngagementDetailsRequest {\n");
    sb.append("    emergencyContactList: ").append(toIndentedString(emergencyContactList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("EmergencyContactList");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("EmergencyContactList");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AssociateProactiveEngagementDetailsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssociateProactiveEngagementDetailsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssociateProactiveEngagementDetailsRequest is not found in the empty JSON string", AssociateProactiveEngagementDetailsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AssociateProactiveEngagementDetailsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssociateProactiveEngagementDetailsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AssociateProactiveEngagementDetailsRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `EmergencyContactList`
      List.validateJsonElement(jsonObj.get("EmergencyContactList"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssociateProactiveEngagementDetailsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssociateProactiveEngagementDetailsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssociateProactiveEngagementDetailsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssociateProactiveEngagementDetailsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AssociateProactiveEngagementDetailsRequest>() {
           @Override
           public void write(JsonWriter out, AssociateProactiveEngagementDetailsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssociateProactiveEngagementDetailsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AssociateProactiveEngagementDetailsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AssociateProactiveEngagementDetailsRequest
   * @throws IOException if the JSON string is invalid with respect to AssociateProactiveEngagementDetailsRequest
   */
  public static AssociateProactiveEngagementDetailsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssociateProactiveEngagementDetailsRequest.class);
  }

  /**
   * Convert an instance of AssociateProactiveEngagementDetailsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

