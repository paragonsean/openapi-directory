/*
 * AWS Shield
 * <fullname>Shield Advanced</fullname> <p>This is the <i>Shield Advanced API Reference</i>. This guide is for developers who need detailed information about the Shield Advanced API actions, data types, and errors. For detailed information about WAF and Shield Advanced features and an overview of how to use the WAF and Shield Advanced APIs, see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/\">WAF and Shield Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-06-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The counter that describes a DDoS attack.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:57.716468-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SummarizedCounter {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_MAX = "Max";
  @SerializedName(SERIALIZED_NAME_MAX)
  private Double max;

  public static final String SERIALIZED_NAME_AVERAGE = "Average";
  @SerializedName(SERIALIZED_NAME_AVERAGE)
  private Double average;

  public static final String SERIALIZED_NAME_SUM = "Sum";
  @SerializedName(SERIALIZED_NAME_SUM)
  private Double sum;

  public static final String SERIALIZED_NAME_N = "N";
  @SerializedName(SERIALIZED_NAME_N)
  private Integer N;

  public static final String SERIALIZED_NAME_UNIT = "Unit";
  @SerializedName(SERIALIZED_NAME_UNIT)
  private String unit;

  public SummarizedCounter() {
  }

  public SummarizedCounter name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public SummarizedCounter max(Double max) {
    this.max = max;
    return this;
  }

  /**
   * Get max
   * @return max
   */
  @javax.annotation.Nullable
  public Double getMax() {
    return max;
  }

  public void setMax(Double max) {
    this.max = max;
  }


  public SummarizedCounter average(Double average) {
    this.average = average;
    return this;
  }

  /**
   * Get average
   * @return average
   */
  @javax.annotation.Nullable
  public Double getAverage() {
    return average;
  }

  public void setAverage(Double average) {
    this.average = average;
  }


  public SummarizedCounter sum(Double sum) {
    this.sum = sum;
    return this;
  }

  /**
   * Get sum
   * @return sum
   */
  @javax.annotation.Nullable
  public Double getSum() {
    return sum;
  }

  public void setSum(Double sum) {
    this.sum = sum;
  }


  public SummarizedCounter N(Integer N) {
    this.N = N;
    return this;
  }

  /**
   * Get N
   * @return N
   */
  @javax.annotation.Nullable
  public Integer getN() {
    return N;
  }

  public void setN(Integer N) {
    this.N = N;
  }


  public SummarizedCounter unit(String unit) {
    this.unit = unit;
    return this;
  }

  /**
   * Get unit
   * @return unit
   */
  @javax.annotation.Nullable
  public String getUnit() {
    return unit;
  }

  public void setUnit(String unit) {
    this.unit = unit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SummarizedCounter summarizedCounter = (SummarizedCounter) o;
    return Objects.equals(this.name, summarizedCounter.name) &&
        Objects.equals(this.max, summarizedCounter.max) &&
        Objects.equals(this.average, summarizedCounter.average) &&
        Objects.equals(this.sum, summarizedCounter.sum) &&
        Objects.equals(this.N, summarizedCounter.N) &&
        Objects.equals(this.unit, summarizedCounter.unit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, max, average, sum, N, unit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SummarizedCounter {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    max: ").append(toIndentedString(max)).append("\n");
    sb.append("    average: ").append(toIndentedString(average)).append("\n");
    sb.append("    sum: ").append(toIndentedString(sum)).append("\n");
    sb.append("    N: ").append(toIndentedString(N)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("Max");
    openapiFields.add("Average");
    openapiFields.add("Sum");
    openapiFields.add("N");
    openapiFields.add("Unit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SummarizedCounter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SummarizedCounter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SummarizedCounter is not found in the empty JSON string", SummarizedCounter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SummarizedCounter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SummarizedCounter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the optional field `Max`
      if (jsonObj.get("Max") != null && !jsonObj.get("Max").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("Max"));
      }
      // validate the optional field `Average`
      if (jsonObj.get("Average") != null && !jsonObj.get("Average").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("Average"));
      }
      // validate the optional field `Sum`
      if (jsonObj.get("Sum") != null && !jsonObj.get("Sum").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("Sum"));
      }
      // validate the optional field `N`
      if (jsonObj.get("N") != null && !jsonObj.get("N").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("N"));
      }
      // validate the optional field `Unit`
      if (jsonObj.get("Unit") != null && !jsonObj.get("Unit").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Unit"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SummarizedCounter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SummarizedCounter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SummarizedCounter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SummarizedCounter.class));

       return (TypeAdapter<T>) new TypeAdapter<SummarizedCounter>() {
           @Override
           public void write(JsonWriter out, SummarizedCounter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SummarizedCounter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SummarizedCounter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SummarizedCounter
   * @throws IOException if the JSON string is invalid with respect to SummarizedCounter
   */
  public static SummarizedCounter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SummarizedCounter.class);
  }

  /**
   * Convert an instance of SummarizedCounter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

