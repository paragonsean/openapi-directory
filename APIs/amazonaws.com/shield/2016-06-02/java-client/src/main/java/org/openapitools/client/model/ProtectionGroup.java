/*
 * AWS Shield
 * <fullname>Shield Advanced</fullname> <p>This is the <i>Shield Advanced API Reference</i>. This guide is for developers who need detailed information about the Shield Advanced API actions, data types, and errors. For detailed information about WAF and Shield Advanced features and an overview of how to use the WAF and Shield Advanced APIs, see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/\">WAF and Shield Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-06-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ProtectedResourceType;
import org.openapitools.client.model.ProtectionGroupAggregation;
import org.openapitools.client.model.ProtectionGroupPattern;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A grouping of protected resources that you and Shield Advanced can monitor as a collective. This resource grouping improves the accuracy of detection and reduces false positives. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:57.716468-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProtectionGroup {
  public static final String SERIALIZED_NAME_PROTECTION_GROUP_ID = "ProtectionGroupId";
  @SerializedName(SERIALIZED_NAME_PROTECTION_GROUP_ID)
  private String protectionGroupId;

  public static final String SERIALIZED_NAME_AGGREGATION = "Aggregation";
  @SerializedName(SERIALIZED_NAME_AGGREGATION)
  private ProtectionGroupAggregation aggregation;

  public static final String SERIALIZED_NAME_PATTERN = "Pattern";
  @SerializedName(SERIALIZED_NAME_PATTERN)
  private ProtectionGroupPattern pattern;

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "ResourceType";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  private ProtectedResourceType resourceType;

  public static final String SERIALIZED_NAME_MEMBERS = "Members";
  @SerializedName(SERIALIZED_NAME_MEMBERS)
  private List members;

  public static final String SERIALIZED_NAME_PROTECTION_GROUP_ARN = "ProtectionGroupArn";
  @SerializedName(SERIALIZED_NAME_PROTECTION_GROUP_ARN)
  private String protectionGroupArn;

  public ProtectionGroup() {
  }

  public ProtectionGroup protectionGroupId(String protectionGroupId) {
    this.protectionGroupId = protectionGroupId;
    return this;
  }

  /**
   * Get protectionGroupId
   * @return protectionGroupId
   */
  @javax.annotation.Nonnull
  public String getProtectionGroupId() {
    return protectionGroupId;
  }

  public void setProtectionGroupId(String protectionGroupId) {
    this.protectionGroupId = protectionGroupId;
  }


  public ProtectionGroup aggregation(ProtectionGroupAggregation aggregation) {
    this.aggregation = aggregation;
    return this;
  }

  /**
   * Get aggregation
   * @return aggregation
   */
  @javax.annotation.Nonnull
  public ProtectionGroupAggregation getAggregation() {
    return aggregation;
  }

  public void setAggregation(ProtectionGroupAggregation aggregation) {
    this.aggregation = aggregation;
  }


  public ProtectionGroup pattern(ProtectionGroupPattern pattern) {
    this.pattern = pattern;
    return this;
  }

  /**
   * Get pattern
   * @return pattern
   */
  @javax.annotation.Nonnull
  public ProtectionGroupPattern getPattern() {
    return pattern;
  }

  public void setPattern(ProtectionGroupPattern pattern) {
    this.pattern = pattern;
  }


  public ProtectionGroup resourceType(ProtectedResourceType resourceType) {
    this.resourceType = resourceType;
    return this;
  }

  /**
   * Get resourceType
   * @return resourceType
   */
  @javax.annotation.Nullable
  public ProtectedResourceType getResourceType() {
    return resourceType;
  }

  public void setResourceType(ProtectedResourceType resourceType) {
    this.resourceType = resourceType;
  }


  public ProtectionGroup members(List members) {
    this.members = members;
    return this;
  }

  /**
   * Get members
   * @return members
   */
  @javax.annotation.Nonnull
  public List getMembers() {
    return members;
  }

  public void setMembers(List members) {
    this.members = members;
  }


  public ProtectionGroup protectionGroupArn(String protectionGroupArn) {
    this.protectionGroupArn = protectionGroupArn;
    return this;
  }

  /**
   * Get protectionGroupArn
   * @return protectionGroupArn
   */
  @javax.annotation.Nullable
  public String getProtectionGroupArn() {
    return protectionGroupArn;
  }

  public void setProtectionGroupArn(String protectionGroupArn) {
    this.protectionGroupArn = protectionGroupArn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProtectionGroup protectionGroup = (ProtectionGroup) o;
    return Objects.equals(this.protectionGroupId, protectionGroup.protectionGroupId) &&
        Objects.equals(this.aggregation, protectionGroup.aggregation) &&
        Objects.equals(this.pattern, protectionGroup.pattern) &&
        Objects.equals(this.resourceType, protectionGroup.resourceType) &&
        Objects.equals(this.members, protectionGroup.members) &&
        Objects.equals(this.protectionGroupArn, protectionGroup.protectionGroupArn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(protectionGroupId, aggregation, pattern, resourceType, members, protectionGroupArn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProtectionGroup {\n");
    sb.append("    protectionGroupId: ").append(toIndentedString(protectionGroupId)).append("\n");
    sb.append("    aggregation: ").append(toIndentedString(aggregation)).append("\n");
    sb.append("    pattern: ").append(toIndentedString(pattern)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    members: ").append(toIndentedString(members)).append("\n");
    sb.append("    protectionGroupArn: ").append(toIndentedString(protectionGroupArn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ProtectionGroupId");
    openapiFields.add("Aggregation");
    openapiFields.add("Pattern");
    openapiFields.add("ResourceType");
    openapiFields.add("Members");
    openapiFields.add("ProtectionGroupArn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ProtectionGroupId");
    openapiRequiredFields.add("Aggregation");
    openapiRequiredFields.add("Pattern");
    openapiRequiredFields.add("Members");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProtectionGroup
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProtectionGroup.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProtectionGroup is not found in the empty JSON string", ProtectionGroup.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProtectionGroup.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProtectionGroup` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ProtectionGroup.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `ProtectionGroupId`
      String.validateJsonElement(jsonObj.get("ProtectionGroupId"));
      // validate the required field `Aggregation`
      ProtectionGroupAggregation.validateJsonElement(jsonObj.get("Aggregation"));
      // validate the required field `Pattern`
      ProtectionGroupPattern.validateJsonElement(jsonObj.get("Pattern"));
      // validate the optional field `ResourceType`
      if (jsonObj.get("ResourceType") != null && !jsonObj.get("ResourceType").isJsonNull()) {
        ProtectedResourceType.validateJsonElement(jsonObj.get("ResourceType"));
      }
      // validate the required field `Members`
      List.validateJsonElement(jsonObj.get("Members"));
      // validate the optional field `ProtectionGroupArn`
      if (jsonObj.get("ProtectionGroupArn") != null && !jsonObj.get("ProtectionGroupArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ProtectionGroupArn"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProtectionGroup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProtectionGroup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProtectionGroup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProtectionGroup.class));

       return (TypeAdapter<T>) new TypeAdapter<ProtectionGroup>() {
           @Override
           public void write(JsonWriter out, ProtectionGroup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProtectionGroup read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProtectionGroup given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProtectionGroup
   * @throws IOException if the JSON string is invalid with respect to ProtectionGroup
   */
  public static ProtectionGroup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProtectionGroup.class);
  }

  /**
   * Convert an instance of ProtectionGroup to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

