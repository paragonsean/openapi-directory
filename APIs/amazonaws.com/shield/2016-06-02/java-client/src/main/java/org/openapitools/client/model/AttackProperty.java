/*
 * AWS Shield
 * <fullname>Shield Advanced</fullname> <p>This is the <i>Shield Advanced API Reference</i>. This guide is for developers who need detailed information about the Shield Advanced API actions, data types, and errors. For detailed information about WAF and Shield Advanced features and an overview of how to use the WAF and Shield Advanced APIs, see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/\">WAF and Shield Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-06-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AttackLayer;
import org.openapitools.client.model.AttackPropertyIdentifier;
import org.openapitools.client.model.Unit;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details of a Shield event. This is provided as part of an &lt;a&gt;AttackDetail&lt;/a&gt;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:57.716468-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AttackProperty {
  public static final String SERIALIZED_NAME_ATTACK_LAYER = "AttackLayer";
  @SerializedName(SERIALIZED_NAME_ATTACK_LAYER)
  private AttackLayer attackLayer;

  public static final String SERIALIZED_NAME_ATTACK_PROPERTY_IDENTIFIER = "AttackPropertyIdentifier";
  @SerializedName(SERIALIZED_NAME_ATTACK_PROPERTY_IDENTIFIER)
  private AttackPropertyIdentifier attackPropertyIdentifier;

  public static final String SERIALIZED_NAME_TOP_CONTRIBUTORS = "TopContributors";
  @SerializedName(SERIALIZED_NAME_TOP_CONTRIBUTORS)
  private List topContributors;

  public static final String SERIALIZED_NAME_UNIT = "Unit";
  @SerializedName(SERIALIZED_NAME_UNIT)
  private Unit unit;

  public static final String SERIALIZED_NAME_TOTAL = "Total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Integer total;

  public AttackProperty() {
  }

  public AttackProperty attackLayer(AttackLayer attackLayer) {
    this.attackLayer = attackLayer;
    return this;
  }

  /**
   * Get attackLayer
   * @return attackLayer
   */
  @javax.annotation.Nullable
  public AttackLayer getAttackLayer() {
    return attackLayer;
  }

  public void setAttackLayer(AttackLayer attackLayer) {
    this.attackLayer = attackLayer;
  }


  public AttackProperty attackPropertyIdentifier(AttackPropertyIdentifier attackPropertyIdentifier) {
    this.attackPropertyIdentifier = attackPropertyIdentifier;
    return this;
  }

  /**
   * Get attackPropertyIdentifier
   * @return attackPropertyIdentifier
   */
  @javax.annotation.Nullable
  public AttackPropertyIdentifier getAttackPropertyIdentifier() {
    return attackPropertyIdentifier;
  }

  public void setAttackPropertyIdentifier(AttackPropertyIdentifier attackPropertyIdentifier) {
    this.attackPropertyIdentifier = attackPropertyIdentifier;
  }


  public AttackProperty topContributors(List topContributors) {
    this.topContributors = topContributors;
    return this;
  }

  /**
   * Get topContributors
   * @return topContributors
   */
  @javax.annotation.Nullable
  public List getTopContributors() {
    return topContributors;
  }

  public void setTopContributors(List topContributors) {
    this.topContributors = topContributors;
  }


  public AttackProperty unit(Unit unit) {
    this.unit = unit;
    return this;
  }

  /**
   * Get unit
   * @return unit
   */
  @javax.annotation.Nullable
  public Unit getUnit() {
    return unit;
  }

  public void setUnit(Unit unit) {
    this.unit = unit;
  }


  public AttackProperty total(Integer total) {
    this.total = total;
    return this;
  }

  /**
   * Get total
   * @return total
   */
  @javax.annotation.Nullable
  public Integer getTotal() {
    return total;
  }

  public void setTotal(Integer total) {
    this.total = total;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AttackProperty attackProperty = (AttackProperty) o;
    return Objects.equals(this.attackLayer, attackProperty.attackLayer) &&
        Objects.equals(this.attackPropertyIdentifier, attackProperty.attackPropertyIdentifier) &&
        Objects.equals(this.topContributors, attackProperty.topContributors) &&
        Objects.equals(this.unit, attackProperty.unit) &&
        Objects.equals(this.total, attackProperty.total);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attackLayer, attackPropertyIdentifier, topContributors, unit, total);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AttackProperty {\n");
    sb.append("    attackLayer: ").append(toIndentedString(attackLayer)).append("\n");
    sb.append("    attackPropertyIdentifier: ").append(toIndentedString(attackPropertyIdentifier)).append("\n");
    sb.append("    topContributors: ").append(toIndentedString(topContributors)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AttackLayer");
    openapiFields.add("AttackPropertyIdentifier");
    openapiFields.add("TopContributors");
    openapiFields.add("Unit");
    openapiFields.add("Total");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AttackProperty
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AttackProperty.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AttackProperty is not found in the empty JSON string", AttackProperty.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AttackProperty.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AttackProperty` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AttackLayer`
      if (jsonObj.get("AttackLayer") != null && !jsonObj.get("AttackLayer").isJsonNull()) {
        AttackLayer.validateJsonElement(jsonObj.get("AttackLayer"));
      }
      // validate the optional field `AttackPropertyIdentifier`
      if (jsonObj.get("AttackPropertyIdentifier") != null && !jsonObj.get("AttackPropertyIdentifier").isJsonNull()) {
        AttackPropertyIdentifier.validateJsonElement(jsonObj.get("AttackPropertyIdentifier"));
      }
      // validate the optional field `TopContributors`
      if (jsonObj.get("TopContributors") != null && !jsonObj.get("TopContributors").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("TopContributors"));
      }
      // validate the optional field `Unit`
      if (jsonObj.get("Unit") != null && !jsonObj.get("Unit").isJsonNull()) {
        Unit.validateJsonElement(jsonObj.get("Unit"));
      }
      // validate the optional field `Total`
      if (jsonObj.get("Total") != null && !jsonObj.get("Total").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Total"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AttackProperty.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AttackProperty' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AttackProperty> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AttackProperty.class));

       return (TypeAdapter<T>) new TypeAdapter<AttackProperty>() {
           @Override
           public void write(JsonWriter out, AttackProperty value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AttackProperty read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AttackProperty given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AttackProperty
   * @throws IOException if the JSON string is invalid with respect to AttackProperty
   */
  public static AttackProperty fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AttackProperty.class);
  }

  /**
   * Convert an instance of AttackProperty to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

