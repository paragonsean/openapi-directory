/*
 * AWS Shield
 * <fullname>Shield Advanced</fullname> <p>This is the <i>Shield Advanced API Reference</i>. This guide is for developers who need detailed information about the Shield Advanced API actions, data types, and errors. For detailed information about WAF and Shield Advanced features and an overview of how to use the WAF and Shield Advanced APIs, see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/\">WAF and Shield Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-06-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The details of a DDoS attack.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:57.716468-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AttackDetail {
  public static final String SERIALIZED_NAME_ATTACK_ID = "AttackId";
  @SerializedName(SERIALIZED_NAME_ATTACK_ID)
  private String attackId;

  public static final String SERIALIZED_NAME_RESOURCE_ARN = "ResourceArn";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ARN)
  private String resourceArn;

  public static final String SERIALIZED_NAME_SUB_RESOURCES = "SubResources";
  @SerializedName(SERIALIZED_NAME_SUB_RESOURCES)
  private List subResources;

  public static final String SERIALIZED_NAME_START_TIME = "StartTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_END_TIME = "EndTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_ATTACK_COUNTERS = "AttackCounters";
  @SerializedName(SERIALIZED_NAME_ATTACK_COUNTERS)
  private List attackCounters;

  public static final String SERIALIZED_NAME_ATTACK_PROPERTIES = "AttackProperties";
  @SerializedName(SERIALIZED_NAME_ATTACK_PROPERTIES)
  private List attackProperties;

  public static final String SERIALIZED_NAME_MITIGATIONS = "Mitigations";
  @SerializedName(SERIALIZED_NAME_MITIGATIONS)
  private List mitigations;

  public AttackDetail() {
  }

  public AttackDetail attackId(String attackId) {
    this.attackId = attackId;
    return this;
  }

  /**
   * Get attackId
   * @return attackId
   */
  @javax.annotation.Nullable
  public String getAttackId() {
    return attackId;
  }

  public void setAttackId(String attackId) {
    this.attackId = attackId;
  }


  public AttackDetail resourceArn(String resourceArn) {
    this.resourceArn = resourceArn;
    return this;
  }

  /**
   * Get resourceArn
   * @return resourceArn
   */
  @javax.annotation.Nullable
  public String getResourceArn() {
    return resourceArn;
  }

  public void setResourceArn(String resourceArn) {
    this.resourceArn = resourceArn;
  }


  public AttackDetail subResources(List subResources) {
    this.subResources = subResources;
    return this;
  }

  /**
   * Get subResources
   * @return subResources
   */
  @javax.annotation.Nullable
  public List getSubResources() {
    return subResources;
  }

  public void setSubResources(List subResources) {
    this.subResources = subResources;
  }


  public AttackDetail startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Get startTime
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public AttackDetail endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * Get endTime
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public AttackDetail attackCounters(List attackCounters) {
    this.attackCounters = attackCounters;
    return this;
  }

  /**
   * Get attackCounters
   * @return attackCounters
   */
  @javax.annotation.Nullable
  public List getAttackCounters() {
    return attackCounters;
  }

  public void setAttackCounters(List attackCounters) {
    this.attackCounters = attackCounters;
  }


  public AttackDetail attackProperties(List attackProperties) {
    this.attackProperties = attackProperties;
    return this;
  }

  /**
   * Get attackProperties
   * @return attackProperties
   */
  @javax.annotation.Nullable
  public List getAttackProperties() {
    return attackProperties;
  }

  public void setAttackProperties(List attackProperties) {
    this.attackProperties = attackProperties;
  }


  public AttackDetail mitigations(List mitigations) {
    this.mitigations = mitigations;
    return this;
  }

  /**
   * Get mitigations
   * @return mitigations
   */
  @javax.annotation.Nullable
  public List getMitigations() {
    return mitigations;
  }

  public void setMitigations(List mitigations) {
    this.mitigations = mitigations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AttackDetail attackDetail = (AttackDetail) o;
    return Objects.equals(this.attackId, attackDetail.attackId) &&
        Objects.equals(this.resourceArn, attackDetail.resourceArn) &&
        Objects.equals(this.subResources, attackDetail.subResources) &&
        Objects.equals(this.startTime, attackDetail.startTime) &&
        Objects.equals(this.endTime, attackDetail.endTime) &&
        Objects.equals(this.attackCounters, attackDetail.attackCounters) &&
        Objects.equals(this.attackProperties, attackDetail.attackProperties) &&
        Objects.equals(this.mitigations, attackDetail.mitigations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attackId, resourceArn, subResources, startTime, endTime, attackCounters, attackProperties, mitigations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AttackDetail {\n");
    sb.append("    attackId: ").append(toIndentedString(attackId)).append("\n");
    sb.append("    resourceArn: ").append(toIndentedString(resourceArn)).append("\n");
    sb.append("    subResources: ").append(toIndentedString(subResources)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    attackCounters: ").append(toIndentedString(attackCounters)).append("\n");
    sb.append("    attackProperties: ").append(toIndentedString(attackProperties)).append("\n");
    sb.append("    mitigations: ").append(toIndentedString(mitigations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AttackId");
    openapiFields.add("ResourceArn");
    openapiFields.add("SubResources");
    openapiFields.add("StartTime");
    openapiFields.add("EndTime");
    openapiFields.add("AttackCounters");
    openapiFields.add("AttackProperties");
    openapiFields.add("Mitigations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AttackDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AttackDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AttackDetail is not found in the empty JSON string", AttackDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AttackDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AttackDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AttackId`
      if (jsonObj.get("AttackId") != null && !jsonObj.get("AttackId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AttackId"));
      }
      // validate the optional field `ResourceArn`
      if (jsonObj.get("ResourceArn") != null && !jsonObj.get("ResourceArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ResourceArn"));
      }
      // validate the optional field `SubResources`
      if (jsonObj.get("SubResources") != null && !jsonObj.get("SubResources").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("SubResources"));
      }
      // validate the optional field `StartTime`
      if (jsonObj.get("StartTime") != null && !jsonObj.get("StartTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("StartTime"));
      }
      // validate the optional field `EndTime`
      if (jsonObj.get("EndTime") != null && !jsonObj.get("EndTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("EndTime"));
      }
      // validate the optional field `AttackCounters`
      if (jsonObj.get("AttackCounters") != null && !jsonObj.get("AttackCounters").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("AttackCounters"));
      }
      // validate the optional field `AttackProperties`
      if (jsonObj.get("AttackProperties") != null && !jsonObj.get("AttackProperties").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("AttackProperties"));
      }
      // validate the optional field `Mitigations`
      if (jsonObj.get("Mitigations") != null && !jsonObj.get("Mitigations").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Mitigations"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AttackDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AttackDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AttackDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AttackDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<AttackDetail>() {
           @Override
           public void write(JsonWriter out, AttackDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AttackDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AttackDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AttackDetail
   * @throws IOException if the JSON string is invalid with respect to AttackDetail
   */
  public static AttackDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AttackDetail.class);
  }

  /**
   * Convert an instance of AttackDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

