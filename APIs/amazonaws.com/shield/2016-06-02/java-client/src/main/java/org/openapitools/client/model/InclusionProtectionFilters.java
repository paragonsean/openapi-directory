/*
 * AWS Shield
 * <fullname>Shield Advanced</fullname> <p>This is the <i>Shield Advanced API Reference</i>. This guide is for developers who need detailed information about the Shield Advanced API actions, data types, and errors. For detailed information about WAF and Shield Advanced features and an overview of how to use the WAF and Shield Advanced APIs, see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/\">WAF and Shield Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-06-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Narrows the set of protections that the call retrieves. You can retrieve a single protection by providing its name or the ARN (Amazon Resource Name) of its protected resource. You can also retrieve all protections for a specific resource type. You can provide up to one criteria per filter type. Shield Advanced returns protections that exactly match all of the filter criteria that you provide.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:57.716468-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InclusionProtectionFilters {
  public static final String SERIALIZED_NAME_RESOURCE_ARNS = "ResourceArns";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ARNS)
  private List resourceArns;

  public static final String SERIALIZED_NAME_PROTECTION_NAMES = "ProtectionNames";
  @SerializedName(SERIALIZED_NAME_PROTECTION_NAMES)
  private List protectionNames;

  public static final String SERIALIZED_NAME_RESOURCE_TYPES = "ResourceTypes";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPES)
  private List resourceTypes;

  public InclusionProtectionFilters() {
  }

  public InclusionProtectionFilters resourceArns(List resourceArns) {
    this.resourceArns = resourceArns;
    return this;
  }

  /**
   * Get resourceArns
   * @return resourceArns
   */
  @javax.annotation.Nullable
  public List getResourceArns() {
    return resourceArns;
  }

  public void setResourceArns(List resourceArns) {
    this.resourceArns = resourceArns;
  }


  public InclusionProtectionFilters protectionNames(List protectionNames) {
    this.protectionNames = protectionNames;
    return this;
  }

  /**
   * Get protectionNames
   * @return protectionNames
   */
  @javax.annotation.Nullable
  public List getProtectionNames() {
    return protectionNames;
  }

  public void setProtectionNames(List protectionNames) {
    this.protectionNames = protectionNames;
  }


  public InclusionProtectionFilters resourceTypes(List resourceTypes) {
    this.resourceTypes = resourceTypes;
    return this;
  }

  /**
   * Get resourceTypes
   * @return resourceTypes
   */
  @javax.annotation.Nullable
  public List getResourceTypes() {
    return resourceTypes;
  }

  public void setResourceTypes(List resourceTypes) {
    this.resourceTypes = resourceTypes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InclusionProtectionFilters inclusionProtectionFilters = (InclusionProtectionFilters) o;
    return Objects.equals(this.resourceArns, inclusionProtectionFilters.resourceArns) &&
        Objects.equals(this.protectionNames, inclusionProtectionFilters.protectionNames) &&
        Objects.equals(this.resourceTypes, inclusionProtectionFilters.resourceTypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(resourceArns, protectionNames, resourceTypes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InclusionProtectionFilters {\n");
    sb.append("    resourceArns: ").append(toIndentedString(resourceArns)).append("\n");
    sb.append("    protectionNames: ").append(toIndentedString(protectionNames)).append("\n");
    sb.append("    resourceTypes: ").append(toIndentedString(resourceTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ResourceArns");
    openapiFields.add("ProtectionNames");
    openapiFields.add("ResourceTypes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InclusionProtectionFilters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InclusionProtectionFilters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InclusionProtectionFilters is not found in the empty JSON string", InclusionProtectionFilters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InclusionProtectionFilters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InclusionProtectionFilters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ResourceArns`
      if (jsonObj.get("ResourceArns") != null && !jsonObj.get("ResourceArns").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ResourceArns"));
      }
      // validate the optional field `ProtectionNames`
      if (jsonObj.get("ProtectionNames") != null && !jsonObj.get("ProtectionNames").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ProtectionNames"));
      }
      // validate the optional field `ResourceTypes`
      if (jsonObj.get("ResourceTypes") != null && !jsonObj.get("ResourceTypes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ResourceTypes"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InclusionProtectionFilters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InclusionProtectionFilters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InclusionProtectionFilters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InclusionProtectionFilters.class));

       return (TypeAdapter<T>) new TypeAdapter<InclusionProtectionFilters>() {
           @Override
           public void write(JsonWriter out, InclusionProtectionFilters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InclusionProtectionFilters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InclusionProtectionFilters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InclusionProtectionFilters
   * @throws IOException if the JSON string is invalid with respect to InclusionProtectionFilters
   */
  public static InclusionProtectionFilters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InclusionProtectionFilters.class);
  }

  /**
   * Convert an instance of InclusionProtectionFilters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

