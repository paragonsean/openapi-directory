/*
 * AWS Shield
 * <fullname>Shield Advanced</fullname> <p>This is the <i>Shield Advanced API Reference</i>. This guide is for developers who need detailed information about the Shield Advanced API actions, data types, and errors. For detailed information about WAF and Shield Advanced features and an overview of how to use the WAF and Shield Advanced APIs, see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/\">WAF and Shield Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-06-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AttackVolumeBitsPerSecond;
import org.openapitools.client.model.AttackVolumePacketsPerSecond;
import org.openapitools.client.model.AttackVolumeRequestsPerSecond;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about the volume of attacks during the time period, included in an &lt;a&gt;AttackStatisticsDataItem&lt;/a&gt;. If the accompanying &lt;code&gt;AttackCount&lt;/code&gt; in the statistics object is zero, this setting might be empty.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:57.716468-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AttackVolume {
  public static final String SERIALIZED_NAME_BITS_PER_SECOND = "BitsPerSecond";
  @SerializedName(SERIALIZED_NAME_BITS_PER_SECOND)
  private AttackVolumeBitsPerSecond bitsPerSecond;

  public static final String SERIALIZED_NAME_PACKETS_PER_SECOND = "PacketsPerSecond";
  @SerializedName(SERIALIZED_NAME_PACKETS_PER_SECOND)
  private AttackVolumePacketsPerSecond packetsPerSecond;

  public static final String SERIALIZED_NAME_REQUESTS_PER_SECOND = "RequestsPerSecond";
  @SerializedName(SERIALIZED_NAME_REQUESTS_PER_SECOND)
  private AttackVolumeRequestsPerSecond requestsPerSecond;

  public AttackVolume() {
  }

  public AttackVolume bitsPerSecond(AttackVolumeBitsPerSecond bitsPerSecond) {
    this.bitsPerSecond = bitsPerSecond;
    return this;
  }

  /**
   * Get bitsPerSecond
   * @return bitsPerSecond
   */
  @javax.annotation.Nullable
  public AttackVolumeBitsPerSecond getBitsPerSecond() {
    return bitsPerSecond;
  }

  public void setBitsPerSecond(AttackVolumeBitsPerSecond bitsPerSecond) {
    this.bitsPerSecond = bitsPerSecond;
  }


  public AttackVolume packetsPerSecond(AttackVolumePacketsPerSecond packetsPerSecond) {
    this.packetsPerSecond = packetsPerSecond;
    return this;
  }

  /**
   * Get packetsPerSecond
   * @return packetsPerSecond
   */
  @javax.annotation.Nullable
  public AttackVolumePacketsPerSecond getPacketsPerSecond() {
    return packetsPerSecond;
  }

  public void setPacketsPerSecond(AttackVolumePacketsPerSecond packetsPerSecond) {
    this.packetsPerSecond = packetsPerSecond;
  }


  public AttackVolume requestsPerSecond(AttackVolumeRequestsPerSecond requestsPerSecond) {
    this.requestsPerSecond = requestsPerSecond;
    return this;
  }

  /**
   * Get requestsPerSecond
   * @return requestsPerSecond
   */
  @javax.annotation.Nullable
  public AttackVolumeRequestsPerSecond getRequestsPerSecond() {
    return requestsPerSecond;
  }

  public void setRequestsPerSecond(AttackVolumeRequestsPerSecond requestsPerSecond) {
    this.requestsPerSecond = requestsPerSecond;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AttackVolume attackVolume = (AttackVolume) o;
    return Objects.equals(this.bitsPerSecond, attackVolume.bitsPerSecond) &&
        Objects.equals(this.packetsPerSecond, attackVolume.packetsPerSecond) &&
        Objects.equals(this.requestsPerSecond, attackVolume.requestsPerSecond);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bitsPerSecond, packetsPerSecond, requestsPerSecond);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AttackVolume {\n");
    sb.append("    bitsPerSecond: ").append(toIndentedString(bitsPerSecond)).append("\n");
    sb.append("    packetsPerSecond: ").append(toIndentedString(packetsPerSecond)).append("\n");
    sb.append("    requestsPerSecond: ").append(toIndentedString(requestsPerSecond)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BitsPerSecond");
    openapiFields.add("PacketsPerSecond");
    openapiFields.add("RequestsPerSecond");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AttackVolume
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AttackVolume.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AttackVolume is not found in the empty JSON string", AttackVolume.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AttackVolume.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AttackVolume` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `BitsPerSecond`
      if (jsonObj.get("BitsPerSecond") != null && !jsonObj.get("BitsPerSecond").isJsonNull()) {
        AttackVolumeBitsPerSecond.validateJsonElement(jsonObj.get("BitsPerSecond"));
      }
      // validate the optional field `PacketsPerSecond`
      if (jsonObj.get("PacketsPerSecond") != null && !jsonObj.get("PacketsPerSecond").isJsonNull()) {
        AttackVolumePacketsPerSecond.validateJsonElement(jsonObj.get("PacketsPerSecond"));
      }
      // validate the optional field `RequestsPerSecond`
      if (jsonObj.get("RequestsPerSecond") != null && !jsonObj.get("RequestsPerSecond").isJsonNull()) {
        AttackVolumeRequestsPerSecond.validateJsonElement(jsonObj.get("RequestsPerSecond"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AttackVolume.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AttackVolume' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AttackVolume> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AttackVolume.class));

       return (TypeAdapter<T>) new TypeAdapter<AttackVolume>() {
           @Override
           public void write(JsonWriter out, AttackVolume value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AttackVolume read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AttackVolume given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AttackVolume
   * @throws IOException if the JSON string is invalid with respect to AttackVolume
   */
  public static AttackVolume fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AttackVolume.class);
  }

  /**
   * Convert an instance of AttackVolume to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

