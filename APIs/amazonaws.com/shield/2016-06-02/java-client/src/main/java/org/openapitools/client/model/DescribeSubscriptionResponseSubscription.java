/*
 * AWS Shield
 * <fullname>Shield Advanced</fullname> <p>This is the <i>Shield Advanced API Reference</i>. This guide is for developers who need detailed information about the Shield Advanced API actions, data types, and errors. For detailed information about WAF and Shield Advanced features and an overview of how to use the WAF and Shield Advanced APIs, see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/\">WAF and Shield Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-06-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AutoRenew;
import org.openapitools.client.model.ProactiveEngagementStatus;
import org.openapitools.client.model.SubscriptionSubscriptionLimits;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeSubscriptionResponseSubscription
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:57.716468-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeSubscriptionResponseSubscription {
  public static final String SERIALIZED_NAME_START_TIME = "StartTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_END_TIME = "EndTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_TIME_COMMITMENT_IN_SECONDS = "TimeCommitmentInSeconds";
  @SerializedName(SERIALIZED_NAME_TIME_COMMITMENT_IN_SECONDS)
  private Integer timeCommitmentInSeconds;

  public static final String SERIALIZED_NAME_AUTO_RENEW = "AutoRenew";
  @SerializedName(SERIALIZED_NAME_AUTO_RENEW)
  private AutoRenew autoRenew;

  public static final String SERIALIZED_NAME_LIMITS = "Limits";
  @SerializedName(SERIALIZED_NAME_LIMITS)
  private List limits;

  public static final String SERIALIZED_NAME_PROACTIVE_ENGAGEMENT_STATUS = "ProactiveEngagementStatus";
  @SerializedName(SERIALIZED_NAME_PROACTIVE_ENGAGEMENT_STATUS)
  private ProactiveEngagementStatus proactiveEngagementStatus;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_LIMITS = "SubscriptionLimits";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_LIMITS)
  private SubscriptionSubscriptionLimits subscriptionLimits;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_ARN = "SubscriptionArn";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_ARN)
  private String subscriptionArn;

  public DescribeSubscriptionResponseSubscription() {
  }

  public DescribeSubscriptionResponseSubscription startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Get startTime
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public DescribeSubscriptionResponseSubscription endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * Get endTime
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public DescribeSubscriptionResponseSubscription timeCommitmentInSeconds(Integer timeCommitmentInSeconds) {
    this.timeCommitmentInSeconds = timeCommitmentInSeconds;
    return this;
  }

  /**
   * Get timeCommitmentInSeconds
   * @return timeCommitmentInSeconds
   */
  @javax.annotation.Nullable
  public Integer getTimeCommitmentInSeconds() {
    return timeCommitmentInSeconds;
  }

  public void setTimeCommitmentInSeconds(Integer timeCommitmentInSeconds) {
    this.timeCommitmentInSeconds = timeCommitmentInSeconds;
  }


  public DescribeSubscriptionResponseSubscription autoRenew(AutoRenew autoRenew) {
    this.autoRenew = autoRenew;
    return this;
  }

  /**
   * Get autoRenew
   * @return autoRenew
   */
  @javax.annotation.Nullable
  public AutoRenew getAutoRenew() {
    return autoRenew;
  }

  public void setAutoRenew(AutoRenew autoRenew) {
    this.autoRenew = autoRenew;
  }


  public DescribeSubscriptionResponseSubscription limits(List limits) {
    this.limits = limits;
    return this;
  }

  /**
   * Get limits
   * @return limits
   */
  @javax.annotation.Nullable
  public List getLimits() {
    return limits;
  }

  public void setLimits(List limits) {
    this.limits = limits;
  }


  public DescribeSubscriptionResponseSubscription proactiveEngagementStatus(ProactiveEngagementStatus proactiveEngagementStatus) {
    this.proactiveEngagementStatus = proactiveEngagementStatus;
    return this;
  }

  /**
   * Get proactiveEngagementStatus
   * @return proactiveEngagementStatus
   */
  @javax.annotation.Nullable
  public ProactiveEngagementStatus getProactiveEngagementStatus() {
    return proactiveEngagementStatus;
  }

  public void setProactiveEngagementStatus(ProactiveEngagementStatus proactiveEngagementStatus) {
    this.proactiveEngagementStatus = proactiveEngagementStatus;
  }


  public DescribeSubscriptionResponseSubscription subscriptionLimits(SubscriptionSubscriptionLimits subscriptionLimits) {
    this.subscriptionLimits = subscriptionLimits;
    return this;
  }

  /**
   * Get subscriptionLimits
   * @return subscriptionLimits
   */
  @javax.annotation.Nonnull
  public SubscriptionSubscriptionLimits getSubscriptionLimits() {
    return subscriptionLimits;
  }

  public void setSubscriptionLimits(SubscriptionSubscriptionLimits subscriptionLimits) {
    this.subscriptionLimits = subscriptionLimits;
  }


  public DescribeSubscriptionResponseSubscription subscriptionArn(String subscriptionArn) {
    this.subscriptionArn = subscriptionArn;
    return this;
  }

  /**
   * Get subscriptionArn
   * @return subscriptionArn
   */
  @javax.annotation.Nullable
  public String getSubscriptionArn() {
    return subscriptionArn;
  }

  public void setSubscriptionArn(String subscriptionArn) {
    this.subscriptionArn = subscriptionArn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeSubscriptionResponseSubscription describeSubscriptionResponseSubscription = (DescribeSubscriptionResponseSubscription) o;
    return Objects.equals(this.startTime, describeSubscriptionResponseSubscription.startTime) &&
        Objects.equals(this.endTime, describeSubscriptionResponseSubscription.endTime) &&
        Objects.equals(this.timeCommitmentInSeconds, describeSubscriptionResponseSubscription.timeCommitmentInSeconds) &&
        Objects.equals(this.autoRenew, describeSubscriptionResponseSubscription.autoRenew) &&
        Objects.equals(this.limits, describeSubscriptionResponseSubscription.limits) &&
        Objects.equals(this.proactiveEngagementStatus, describeSubscriptionResponseSubscription.proactiveEngagementStatus) &&
        Objects.equals(this.subscriptionLimits, describeSubscriptionResponseSubscription.subscriptionLimits) &&
        Objects.equals(this.subscriptionArn, describeSubscriptionResponseSubscription.subscriptionArn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(startTime, endTime, timeCommitmentInSeconds, autoRenew, limits, proactiveEngagementStatus, subscriptionLimits, subscriptionArn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeSubscriptionResponseSubscription {\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    timeCommitmentInSeconds: ").append(toIndentedString(timeCommitmentInSeconds)).append("\n");
    sb.append("    autoRenew: ").append(toIndentedString(autoRenew)).append("\n");
    sb.append("    limits: ").append(toIndentedString(limits)).append("\n");
    sb.append("    proactiveEngagementStatus: ").append(toIndentedString(proactiveEngagementStatus)).append("\n");
    sb.append("    subscriptionLimits: ").append(toIndentedString(subscriptionLimits)).append("\n");
    sb.append("    subscriptionArn: ").append(toIndentedString(subscriptionArn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("StartTime");
    openapiFields.add("EndTime");
    openapiFields.add("TimeCommitmentInSeconds");
    openapiFields.add("AutoRenew");
    openapiFields.add("Limits");
    openapiFields.add("ProactiveEngagementStatus");
    openapiFields.add("SubscriptionLimits");
    openapiFields.add("SubscriptionArn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("SubscriptionLimits");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeSubscriptionResponseSubscription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeSubscriptionResponseSubscription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeSubscriptionResponseSubscription is not found in the empty JSON string", DescribeSubscriptionResponseSubscription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeSubscriptionResponseSubscription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeSubscriptionResponseSubscription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DescribeSubscriptionResponseSubscription.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `StartTime`
      if (jsonObj.get("StartTime") != null && !jsonObj.get("StartTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("StartTime"));
      }
      // validate the optional field `EndTime`
      if (jsonObj.get("EndTime") != null && !jsonObj.get("EndTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("EndTime"));
      }
      // validate the optional field `TimeCommitmentInSeconds`
      if (jsonObj.get("TimeCommitmentInSeconds") != null && !jsonObj.get("TimeCommitmentInSeconds").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("TimeCommitmentInSeconds"));
      }
      // validate the optional field `AutoRenew`
      if (jsonObj.get("AutoRenew") != null && !jsonObj.get("AutoRenew").isJsonNull()) {
        AutoRenew.validateJsonElement(jsonObj.get("AutoRenew"));
      }
      // validate the optional field `Limits`
      if (jsonObj.get("Limits") != null && !jsonObj.get("Limits").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Limits"));
      }
      // validate the optional field `ProactiveEngagementStatus`
      if (jsonObj.get("ProactiveEngagementStatus") != null && !jsonObj.get("ProactiveEngagementStatus").isJsonNull()) {
        ProactiveEngagementStatus.validateJsonElement(jsonObj.get("ProactiveEngagementStatus"));
      }
      // validate the required field `SubscriptionLimits`
      SubscriptionSubscriptionLimits.validateJsonElement(jsonObj.get("SubscriptionLimits"));
      // validate the optional field `SubscriptionArn`
      if (jsonObj.get("SubscriptionArn") != null && !jsonObj.get("SubscriptionArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SubscriptionArn"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeSubscriptionResponseSubscription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeSubscriptionResponseSubscription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeSubscriptionResponseSubscription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeSubscriptionResponseSubscription.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeSubscriptionResponseSubscription>() {
           @Override
           public void write(JsonWriter out, DescribeSubscriptionResponseSubscription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeSubscriptionResponseSubscription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeSubscriptionResponseSubscription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeSubscriptionResponseSubscription
   * @throws IOException if the JSON string is invalid with respect to DescribeSubscriptionResponseSubscription
   */
  public static DescribeSubscriptionResponseSubscription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeSubscriptionResponseSubscription.class);
  }

  /**
   * Convert an instance of DescribeSubscriptionResponseSubscription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

