/**
 * AWS Shield
 * <fullname>Shield Advanced</fullname> <p>This is the <i>Shield Advanced API Reference</i>. This guide is for developers who need detailed information about the Shield Advanced API actions, data types, and errors. For detailed information about WAF and Shield Advanced features and an overview of how to use the WAF and Shield Advanced APIs, see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/\">WAF and Shield Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-06-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttackStatisticsDataItem_AttackVolume.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttackStatisticsDataItem_AttackVolume::OAIAttackStatisticsDataItem_AttackVolume(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttackStatisticsDataItem_AttackVolume::OAIAttackStatisticsDataItem_AttackVolume() {
    this->initializeModel();
}

OAIAttackStatisticsDataItem_AttackVolume::~OAIAttackStatisticsDataItem_AttackVolume() {}

void OAIAttackStatisticsDataItem_AttackVolume::initializeModel() {

    m_bits_per_second_isSet = false;
    m_bits_per_second_isValid = false;

    m_packets_per_second_isSet = false;
    m_packets_per_second_isValid = false;

    m_requests_per_second_isSet = false;
    m_requests_per_second_isValid = false;
}

void OAIAttackStatisticsDataItem_AttackVolume::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttackStatisticsDataItem_AttackVolume::fromJsonObject(QJsonObject json) {

    m_bits_per_second_isValid = ::OpenAPI::fromJsonValue(m_bits_per_second, json[QString("BitsPerSecond")]);
    m_bits_per_second_isSet = !json[QString("BitsPerSecond")].isNull() && m_bits_per_second_isValid;

    m_packets_per_second_isValid = ::OpenAPI::fromJsonValue(m_packets_per_second, json[QString("PacketsPerSecond")]);
    m_packets_per_second_isSet = !json[QString("PacketsPerSecond")].isNull() && m_packets_per_second_isValid;

    m_requests_per_second_isValid = ::OpenAPI::fromJsonValue(m_requests_per_second, json[QString("RequestsPerSecond")]);
    m_requests_per_second_isSet = !json[QString("RequestsPerSecond")].isNull() && m_requests_per_second_isValid;
}

QString OAIAttackStatisticsDataItem_AttackVolume::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttackStatisticsDataItem_AttackVolume::asJsonObject() const {
    QJsonObject obj;
    if (m_bits_per_second.isSet()) {
        obj.insert(QString("BitsPerSecond"), ::OpenAPI::toJsonValue(m_bits_per_second));
    }
    if (m_packets_per_second.isSet()) {
        obj.insert(QString("PacketsPerSecond"), ::OpenAPI::toJsonValue(m_packets_per_second));
    }
    if (m_requests_per_second.isSet()) {
        obj.insert(QString("RequestsPerSecond"), ::OpenAPI::toJsonValue(m_requests_per_second));
    }
    return obj;
}

OAIAttackVolume_BitsPerSecond OAIAttackStatisticsDataItem_AttackVolume::getBitsPerSecond() const {
    return m_bits_per_second;
}
void OAIAttackStatisticsDataItem_AttackVolume::setBitsPerSecond(const OAIAttackVolume_BitsPerSecond &bits_per_second) {
    m_bits_per_second = bits_per_second;
    m_bits_per_second_isSet = true;
}

bool OAIAttackStatisticsDataItem_AttackVolume::is_bits_per_second_Set() const{
    return m_bits_per_second_isSet;
}

bool OAIAttackStatisticsDataItem_AttackVolume::is_bits_per_second_Valid() const{
    return m_bits_per_second_isValid;
}

OAIAttackVolume_PacketsPerSecond OAIAttackStatisticsDataItem_AttackVolume::getPacketsPerSecond() const {
    return m_packets_per_second;
}
void OAIAttackStatisticsDataItem_AttackVolume::setPacketsPerSecond(const OAIAttackVolume_PacketsPerSecond &packets_per_second) {
    m_packets_per_second = packets_per_second;
    m_packets_per_second_isSet = true;
}

bool OAIAttackStatisticsDataItem_AttackVolume::is_packets_per_second_Set() const{
    return m_packets_per_second_isSet;
}

bool OAIAttackStatisticsDataItem_AttackVolume::is_packets_per_second_Valid() const{
    return m_packets_per_second_isValid;
}

OAIAttackVolume_RequestsPerSecond OAIAttackStatisticsDataItem_AttackVolume::getRequestsPerSecond() const {
    return m_requests_per_second;
}
void OAIAttackStatisticsDataItem_AttackVolume::setRequestsPerSecond(const OAIAttackVolume_RequestsPerSecond &requests_per_second) {
    m_requests_per_second = requests_per_second;
    m_requests_per_second_isSet = true;
}

bool OAIAttackStatisticsDataItem_AttackVolume::is_requests_per_second_Set() const{
    return m_requests_per_second_isSet;
}

bool OAIAttackStatisticsDataItem_AttackVolume::is_requests_per_second_Valid() const{
    return m_requests_per_second_isValid;
}

bool OAIAttackStatisticsDataItem_AttackVolume::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bits_per_second.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_packets_per_second.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_requests_per_second.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttackStatisticsDataItem_AttackVolume::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
