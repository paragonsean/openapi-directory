/**
 * AWS Shield
 * <fullname>Shield Advanced</fullname> <p>This is the <i>Shield Advanced API Reference</i>. This guide is for developers who need detailed information about the Shield Advanced API actions, data types, and errors. For detailed information about WAF and Shield Advanced features and an overview of how to use the WAF and Shield Advanced APIs, see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/\">WAF and Shield Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-06-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDisassociateDRTLogBucketRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDisassociateDRTLogBucketRequest::OAIDisassociateDRTLogBucketRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDisassociateDRTLogBucketRequest::OAIDisassociateDRTLogBucketRequest() {
    this->initializeModel();
}

OAIDisassociateDRTLogBucketRequest::~OAIDisassociateDRTLogBucketRequest() {}

void OAIDisassociateDRTLogBucketRequest::initializeModel() {

    m_log_bucket_isSet = false;
    m_log_bucket_isValid = false;
}

void OAIDisassociateDRTLogBucketRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDisassociateDRTLogBucketRequest::fromJsonObject(QJsonObject json) {

    m_log_bucket_isValid = ::OpenAPI::fromJsonValue(m_log_bucket, json[QString("LogBucket")]);
    m_log_bucket_isSet = !json[QString("LogBucket")].isNull() && m_log_bucket_isValid;
}

QString OAIDisassociateDRTLogBucketRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDisassociateDRTLogBucketRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_log_bucket_isSet) {
        obj.insert(QString("LogBucket"), ::OpenAPI::toJsonValue(m_log_bucket));
    }
    return obj;
}

QString OAIDisassociateDRTLogBucketRequest::getLogBucket() const {
    return m_log_bucket;
}
void OAIDisassociateDRTLogBucketRequest::setLogBucket(const QString &log_bucket) {
    m_log_bucket = log_bucket;
    m_log_bucket_isSet = true;
}

bool OAIDisassociateDRTLogBucketRequest::is_log_bucket_Set() const{
    return m_log_bucket_isSet;
}

bool OAIDisassociateDRTLogBucketRequest::is_log_bucket_Valid() const{
    return m_log_bucket_isValid;
}

bool OAIDisassociateDRTLogBucketRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_log_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDisassociateDRTLogBucketRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_log_bucket_isValid && true;
}

} // namespace OpenAPI
