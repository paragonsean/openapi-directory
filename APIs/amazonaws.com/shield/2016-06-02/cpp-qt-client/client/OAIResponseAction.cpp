/**
 * AWS Shield
 * <fullname>Shield Advanced</fullname> <p>This is the <i>Shield Advanced API Reference</i>. This guide is for developers who need detailed information about the Shield Advanced API actions, data types, and errors. For detailed information about WAF and Shield Advanced features and an overview of how to use the WAF and Shield Advanced APIs, see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/\">WAF and Shield Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-06-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResponseAction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResponseAction::OAIResponseAction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResponseAction::OAIResponseAction() {
    this->initializeModel();
}

OAIResponseAction::~OAIResponseAction() {}

void OAIResponseAction::initializeModel() {

    m_block_isSet = false;
    m_block_isValid = false;

    m_count_isSet = false;
    m_count_isValid = false;
}

void OAIResponseAction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResponseAction::fromJsonObject(QJsonObject json) {

    m_block_isValid = ::OpenAPI::fromJsonValue(m_block, json[QString("Block")]);
    m_block_isSet = !json[QString("Block")].isNull() && m_block_isValid;

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("Count")]);
    m_count_isSet = !json[QString("Count")].isNull() && m_count_isValid;
}

QString OAIResponseAction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResponseAction::asJsonObject() const {
    QJsonObject obj;
    if (m_block.isSet()) {
        obj.insert(QString("Block"), ::OpenAPI::toJsonValue(m_block));
    }
    if (m_count.isSet()) {
        obj.insert(QString("Count"), ::OpenAPI::toJsonValue(m_count));
    }
    return obj;
}

OAIObject OAIResponseAction::getBlock() const {
    return m_block;
}
void OAIResponseAction::setBlock(const OAIObject &block) {
    m_block = block;
    m_block_isSet = true;
}

bool OAIResponseAction::is_block_Set() const{
    return m_block_isSet;
}

bool OAIResponseAction::is_block_Valid() const{
    return m_block_isValid;
}

OAIObject OAIResponseAction::getCount() const {
    return m_count;
}
void OAIResponseAction::setCount(const OAIObject &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIResponseAction::is_count_Set() const{
    return m_count_isSet;
}

bool OAIResponseAction::is_count_Valid() const{
    return m_count_isValid;
}

bool OAIResponseAction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_block.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_count.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResponseAction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
