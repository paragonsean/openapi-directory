/**
 * AWS Shield
 * <fullname>Shield Advanced</fullname> <p>This is the <i>Shield Advanced API Reference</i>. This guide is for developers who need detailed information about the Shield Advanced API actions, data types, and errors. For detailed information about WAF and Shield Advanced features and an overview of how to use the WAF and Shield Advanced APIs, see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/\">WAF and Shield Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-06-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubResourceSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubResourceSummary::OAISubResourceSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubResourceSummary::OAISubResourceSummary() {
    this->initializeModel();
}

OAISubResourceSummary::~OAISubResourceSummary() {}

void OAISubResourceSummary::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_attack_vectors_isSet = false;
    m_attack_vectors_isValid = false;

    m_counters_isSet = false;
    m_counters_isValid = false;
}

void OAISubResourceSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubResourceSummary::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_attack_vectors_isValid = ::OpenAPI::fromJsonValue(m_attack_vectors, json[QString("AttackVectors")]);
    m_attack_vectors_isSet = !json[QString("AttackVectors")].isNull() && m_attack_vectors_isValid;

    m_counters_isValid = ::OpenAPI::fromJsonValue(m_counters, json[QString("Counters")]);
    m_counters_isSet = !json[QString("Counters")].isNull() && m_counters_isValid;
}

QString OAISubResourceSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubResourceSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_attack_vectors.isSet()) {
        obj.insert(QString("AttackVectors"), ::OpenAPI::toJsonValue(m_attack_vectors));
    }
    if (m_counters.isSet()) {
        obj.insert(QString("Counters"), ::OpenAPI::toJsonValue(m_counters));
    }
    return obj;
}

OAISubResourceType OAISubResourceSummary::getType() const {
    return m_type;
}
void OAISubResourceSummary::setType(const OAISubResourceType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISubResourceSummary::is_type_Set() const{
    return m_type_isSet;
}

bool OAISubResourceSummary::is_type_Valid() const{
    return m_type_isValid;
}

QString OAISubResourceSummary::getId() const {
    return m_id;
}
void OAISubResourceSummary::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISubResourceSummary::is_id_Set() const{
    return m_id_isSet;
}

bool OAISubResourceSummary::is_id_Valid() const{
    return m_id_isValid;
}

QList OAISubResourceSummary::getAttackVectors() const {
    return m_attack_vectors;
}
void OAISubResourceSummary::setAttackVectors(const QList &attack_vectors) {
    m_attack_vectors = attack_vectors;
    m_attack_vectors_isSet = true;
}

bool OAISubResourceSummary::is_attack_vectors_Set() const{
    return m_attack_vectors_isSet;
}

bool OAISubResourceSummary::is_attack_vectors_Valid() const{
    return m_attack_vectors_isValid;
}

QList OAISubResourceSummary::getCounters() const {
    return m_counters;
}
void OAISubResourceSummary::setCounters(const QList &counters) {
    m_counters = counters;
    m_counters_isSet = true;
}

bool OAISubResourceSummary::is_counters_Set() const{
    return m_counters_isSet;
}

bool OAISubResourceSummary::is_counters_Valid() const{
    return m_counters_isValid;
}

bool OAISubResourceSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attack_vectors.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_counters.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubResourceSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
