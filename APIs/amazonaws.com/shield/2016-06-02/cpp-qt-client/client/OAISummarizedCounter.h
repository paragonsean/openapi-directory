/**
 * AWS Shield
 * <fullname>Shield Advanced</fullname> <p>This is the <i>Shield Advanced API Reference</i>. This guide is for developers who need detailed information about the Shield Advanced API actions, data types, and errors. For detailed information about WAF and Shield Advanced features and an overview of how to use the WAF and Shield Advanced APIs, see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/\">WAF and Shield Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-06-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISummarizedCounter.h
 *
 * The counter that describes a DDoS attack.
 */

#ifndef OAISummarizedCounter_H
#define OAISummarizedCounter_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISummarizedCounter : public OAIObject {
public:
    OAISummarizedCounter();
    OAISummarizedCounter(QString json);
    ~OAISummarizedCounter() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    double getMax() const;
    void setMax(const double &max);
    bool is_max_Set() const;
    bool is_max_Valid() const;

    double getAverage() const;
    void setAverage(const double &average);
    bool is_average_Set() const;
    bool is_average_Valid() const;

    double getSum() const;
    void setSum(const double &sum);
    bool is_sum_Set() const;
    bool is_sum_Valid() const;

    qint32 getN() const;
    void setN(const qint32 &n);
    bool is_n_Set() const;
    bool is_n_Valid() const;

    QString getUnit() const;
    void setUnit(const QString &unit);
    bool is_unit_Set() const;
    bool is_unit_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    double m_max;
    bool m_max_isSet;
    bool m_max_isValid;

    double m_average;
    bool m_average_isSet;
    bool m_average_isValid;

    double m_sum;
    bool m_sum_isSet;
    bool m_sum_isValid;

    qint32 m_n;
    bool m_n_isSet;
    bool m_n_isValid;

    QString m_unit;
    bool m_unit_isSet;
    bool m_unit_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISummarizedCounter)

#endif // OAISummarizedCounter_H
