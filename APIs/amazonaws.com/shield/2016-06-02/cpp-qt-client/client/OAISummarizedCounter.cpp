/**
 * AWS Shield
 * <fullname>Shield Advanced</fullname> <p>This is the <i>Shield Advanced API Reference</i>. This guide is for developers who need detailed information about the Shield Advanced API actions, data types, and errors. For detailed information about WAF and Shield Advanced features and an overview of how to use the WAF and Shield Advanced APIs, see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/\">WAF and Shield Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-06-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISummarizedCounter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISummarizedCounter::OAISummarizedCounter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISummarizedCounter::OAISummarizedCounter() {
    this->initializeModel();
}

OAISummarizedCounter::~OAISummarizedCounter() {}

void OAISummarizedCounter::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_max_isSet = false;
    m_max_isValid = false;

    m_average_isSet = false;
    m_average_isValid = false;

    m_sum_isSet = false;
    m_sum_isValid = false;

    m_n_isSet = false;
    m_n_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;
}

void OAISummarizedCounter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISummarizedCounter::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_max_isValid = ::OpenAPI::fromJsonValue(m_max, json[QString("Max")]);
    m_max_isSet = !json[QString("Max")].isNull() && m_max_isValid;

    m_average_isValid = ::OpenAPI::fromJsonValue(m_average, json[QString("Average")]);
    m_average_isSet = !json[QString("Average")].isNull() && m_average_isValid;

    m_sum_isValid = ::OpenAPI::fromJsonValue(m_sum, json[QString("Sum")]);
    m_sum_isSet = !json[QString("Sum")].isNull() && m_sum_isValid;

    m_n_isValid = ::OpenAPI::fromJsonValue(m_n, json[QString("N")]);
    m_n_isSet = !json[QString("N")].isNull() && m_n_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("Unit")]);
    m_unit_isSet = !json[QString("Unit")].isNull() && m_unit_isValid;
}

QString OAISummarizedCounter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISummarizedCounter::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_max_isSet) {
        obj.insert(QString("Max"), ::OpenAPI::toJsonValue(m_max));
    }
    if (m_average_isSet) {
        obj.insert(QString("Average"), ::OpenAPI::toJsonValue(m_average));
    }
    if (m_sum_isSet) {
        obj.insert(QString("Sum"), ::OpenAPI::toJsonValue(m_sum));
    }
    if (m_n_isSet) {
        obj.insert(QString("N"), ::OpenAPI::toJsonValue(m_n));
    }
    if (m_unit_isSet) {
        obj.insert(QString("Unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    return obj;
}

QString OAISummarizedCounter::getName() const {
    return m_name;
}
void OAISummarizedCounter::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISummarizedCounter::is_name_Set() const{
    return m_name_isSet;
}

bool OAISummarizedCounter::is_name_Valid() const{
    return m_name_isValid;
}

double OAISummarizedCounter::getMax() const {
    return m_max;
}
void OAISummarizedCounter::setMax(const double &max) {
    m_max = max;
    m_max_isSet = true;
}

bool OAISummarizedCounter::is_max_Set() const{
    return m_max_isSet;
}

bool OAISummarizedCounter::is_max_Valid() const{
    return m_max_isValid;
}

double OAISummarizedCounter::getAverage() const {
    return m_average;
}
void OAISummarizedCounter::setAverage(const double &average) {
    m_average = average;
    m_average_isSet = true;
}

bool OAISummarizedCounter::is_average_Set() const{
    return m_average_isSet;
}

bool OAISummarizedCounter::is_average_Valid() const{
    return m_average_isValid;
}

double OAISummarizedCounter::getSum() const {
    return m_sum;
}
void OAISummarizedCounter::setSum(const double &sum) {
    m_sum = sum;
    m_sum_isSet = true;
}

bool OAISummarizedCounter::is_sum_Set() const{
    return m_sum_isSet;
}

bool OAISummarizedCounter::is_sum_Valid() const{
    return m_sum_isValid;
}

qint32 OAISummarizedCounter::getN() const {
    return m_n;
}
void OAISummarizedCounter::setN(const qint32 &n) {
    m_n = n;
    m_n_isSet = true;
}

bool OAISummarizedCounter::is_n_Set() const{
    return m_n_isSet;
}

bool OAISummarizedCounter::is_n_Valid() const{
    return m_n_isValid;
}

QString OAISummarizedCounter::getUnit() const {
    return m_unit;
}
void OAISummarizedCounter::setUnit(const QString &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAISummarizedCounter::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAISummarizedCounter::is_unit_Valid() const{
    return m_unit_isValid;
}

bool OAISummarizedCounter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_average_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_n_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISummarizedCounter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
