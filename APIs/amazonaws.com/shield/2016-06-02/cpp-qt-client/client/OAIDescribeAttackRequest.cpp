/**
 * AWS Shield
 * <fullname>Shield Advanced</fullname> <p>This is the <i>Shield Advanced API Reference</i>. This guide is for developers who need detailed information about the Shield Advanced API actions, data types, and errors. For detailed information about WAF and Shield Advanced features and an overview of how to use the WAF and Shield Advanced APIs, see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/\">WAF and Shield Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-06-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeAttackRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeAttackRequest::OAIDescribeAttackRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeAttackRequest::OAIDescribeAttackRequest() {
    this->initializeModel();
}

OAIDescribeAttackRequest::~OAIDescribeAttackRequest() {}

void OAIDescribeAttackRequest::initializeModel() {

    m_attack_id_isSet = false;
    m_attack_id_isValid = false;
}

void OAIDescribeAttackRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeAttackRequest::fromJsonObject(QJsonObject json) {

    m_attack_id_isValid = ::OpenAPI::fromJsonValue(m_attack_id, json[QString("AttackId")]);
    m_attack_id_isSet = !json[QString("AttackId")].isNull() && m_attack_id_isValid;
}

QString OAIDescribeAttackRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeAttackRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_attack_id_isSet) {
        obj.insert(QString("AttackId"), ::OpenAPI::toJsonValue(m_attack_id));
    }
    return obj;
}

QString OAIDescribeAttackRequest::getAttackId() const {
    return m_attack_id;
}
void OAIDescribeAttackRequest::setAttackId(const QString &attack_id) {
    m_attack_id = attack_id;
    m_attack_id_isSet = true;
}

bool OAIDescribeAttackRequest::is_attack_id_Set() const{
    return m_attack_id_isSet;
}

bool OAIDescribeAttackRequest::is_attack_id_Valid() const{
    return m_attack_id_isValid;
}

bool OAIDescribeAttackRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attack_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeAttackRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_attack_id_isValid && true;
}

} // namespace OpenAPI
