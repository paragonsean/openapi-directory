/**
 * AWS Shield
 * <fullname>Shield Advanced</fullname> <p>This is the <i>Shield Advanced API Reference</i>. This guide is for developers who need detailed information about the Shield Advanced API actions, data types, and errors. For detailed information about WAF and Shield Advanced features and an overview of how to use the WAF and Shield Advanced APIs, see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/\">WAF and Shield Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-06-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListAttacksRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListAttacksRequest::OAIListAttacksRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListAttacksRequest::OAIListAttacksRequest() {
    this->initializeModel();
}

OAIListAttacksRequest::~OAIListAttacksRequest() {}

void OAIListAttacksRequest::initializeModel() {

    m_resource_arns_isSet = false;
    m_resource_arns_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;
}

void OAIListAttacksRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListAttacksRequest::fromJsonObject(QJsonObject json) {

    m_resource_arns_isValid = ::OpenAPI::fromJsonValue(m_resource_arns, json[QString("ResourceArns")]);
    m_resource_arns_isSet = !json[QString("ResourceArns")].isNull() && m_resource_arns_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("EndTime")]);
    m_end_time_isSet = !json[QString("EndTime")].isNull() && m_end_time_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;
}

QString OAIListAttacksRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListAttacksRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_arns.isSet()) {
        obj.insert(QString("ResourceArns"), ::OpenAPI::toJsonValue(m_resource_arns));
    }
    if (m_start_time.isSet()) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_end_time.isSet()) {
        obj.insert(QString("EndTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    return obj;
}

QList OAIListAttacksRequest::getResourceArns() const {
    return m_resource_arns;
}
void OAIListAttacksRequest::setResourceArns(const QList &resource_arns) {
    m_resource_arns = resource_arns;
    m_resource_arns_isSet = true;
}

bool OAIListAttacksRequest::is_resource_arns_Set() const{
    return m_resource_arns_isSet;
}

bool OAIListAttacksRequest::is_resource_arns_Valid() const{
    return m_resource_arns_isValid;
}

OAIListAttacksRequest_StartTime OAIListAttacksRequest::getStartTime() const {
    return m_start_time;
}
void OAIListAttacksRequest::setStartTime(const OAIListAttacksRequest_StartTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIListAttacksRequest::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIListAttacksRequest::is_start_time_Valid() const{
    return m_start_time_isValid;
}

OAIListAttacksRequest_EndTime OAIListAttacksRequest::getEndTime() const {
    return m_end_time;
}
void OAIListAttacksRequest::setEndTime(const OAIListAttacksRequest_EndTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIListAttacksRequest::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIListAttacksRequest::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIListAttacksRequest::getNextToken() const {
    return m_next_token;
}
void OAIListAttacksRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListAttacksRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListAttacksRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIListAttacksRequest::getMaxResults() const {
    return m_max_results;
}
void OAIListAttacksRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListAttacksRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListAttacksRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

bool OAIListAttacksRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListAttacksRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
