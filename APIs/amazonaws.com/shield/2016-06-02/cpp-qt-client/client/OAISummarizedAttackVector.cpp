/**
 * AWS Shield
 * <fullname>Shield Advanced</fullname> <p>This is the <i>Shield Advanced API Reference</i>. This guide is for developers who need detailed information about the Shield Advanced API actions, data types, and errors. For detailed information about WAF and Shield Advanced features and an overview of how to use the WAF and Shield Advanced APIs, see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/\">WAF and Shield Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-06-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISummarizedAttackVector.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISummarizedAttackVector::OAISummarizedAttackVector(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISummarizedAttackVector::OAISummarizedAttackVector() {
    this->initializeModel();
}

OAISummarizedAttackVector::~OAISummarizedAttackVector() {}

void OAISummarizedAttackVector::initializeModel() {

    m_vector_type_isSet = false;
    m_vector_type_isValid = false;

    m_vector_counters_isSet = false;
    m_vector_counters_isValid = false;
}

void OAISummarizedAttackVector::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISummarizedAttackVector::fromJsonObject(QJsonObject json) {

    m_vector_type_isValid = ::OpenAPI::fromJsonValue(m_vector_type, json[QString("VectorType")]);
    m_vector_type_isSet = !json[QString("VectorType")].isNull() && m_vector_type_isValid;

    m_vector_counters_isValid = ::OpenAPI::fromJsonValue(m_vector_counters, json[QString("VectorCounters")]);
    m_vector_counters_isSet = !json[QString("VectorCounters")].isNull() && m_vector_counters_isValid;
}

QString OAISummarizedAttackVector::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISummarizedAttackVector::asJsonObject() const {
    QJsonObject obj;
    if (m_vector_type_isSet) {
        obj.insert(QString("VectorType"), ::OpenAPI::toJsonValue(m_vector_type));
    }
    if (m_vector_counters.isSet()) {
        obj.insert(QString("VectorCounters"), ::OpenAPI::toJsonValue(m_vector_counters));
    }
    return obj;
}

QString OAISummarizedAttackVector::getVectorType() const {
    return m_vector_type;
}
void OAISummarizedAttackVector::setVectorType(const QString &vector_type) {
    m_vector_type = vector_type;
    m_vector_type_isSet = true;
}

bool OAISummarizedAttackVector::is_vector_type_Set() const{
    return m_vector_type_isSet;
}

bool OAISummarizedAttackVector::is_vector_type_Valid() const{
    return m_vector_type_isValid;
}

QList OAISummarizedAttackVector::getVectorCounters() const {
    return m_vector_counters;
}
void OAISummarizedAttackVector::setVectorCounters(const QList &vector_counters) {
    m_vector_counters = vector_counters;
    m_vector_counters_isSet = true;
}

bool OAISummarizedAttackVector::is_vector_counters_Set() const{
    return m_vector_counters_isSet;
}

bool OAISummarizedAttackVector::is_vector_counters_Valid() const{
    return m_vector_counters_isValid;
}

bool OAISummarizedAttackVector::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_vector_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vector_counters.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISummarizedAttackVector::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_vector_type_isValid && true;
}

} // namespace OpenAPI
