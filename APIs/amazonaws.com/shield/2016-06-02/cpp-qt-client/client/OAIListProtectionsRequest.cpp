/**
 * AWS Shield
 * <fullname>Shield Advanced</fullname> <p>This is the <i>Shield Advanced API Reference</i>. This guide is for developers who need detailed information about the Shield Advanced API actions, data types, and errors. For detailed information about WAF and Shield Advanced features and an overview of how to use the WAF and Shield Advanced APIs, see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/\">WAF and Shield Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-06-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListProtectionsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListProtectionsRequest::OAIListProtectionsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListProtectionsRequest::OAIListProtectionsRequest() {
    this->initializeModel();
}

OAIListProtectionsRequest::~OAIListProtectionsRequest() {}

void OAIListProtectionsRequest::initializeModel() {

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_inclusion_filters_isSet = false;
    m_inclusion_filters_isValid = false;
}

void OAIListProtectionsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListProtectionsRequest::fromJsonObject(QJsonObject json) {

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;

    m_inclusion_filters_isValid = ::OpenAPI::fromJsonValue(m_inclusion_filters, json[QString("InclusionFilters")]);
    m_inclusion_filters_isSet = !json[QString("InclusionFilters")].isNull() && m_inclusion_filters_isValid;
}

QString OAIListProtectionsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListProtectionsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_inclusion_filters.isSet()) {
        obj.insert(QString("InclusionFilters"), ::OpenAPI::toJsonValue(m_inclusion_filters));
    }
    return obj;
}

QString OAIListProtectionsRequest::getNextToken() const {
    return m_next_token;
}
void OAIListProtectionsRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListProtectionsRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListProtectionsRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIListProtectionsRequest::getMaxResults() const {
    return m_max_results;
}
void OAIListProtectionsRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListProtectionsRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListProtectionsRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

OAIListProtectionsRequest_InclusionFilters OAIListProtectionsRequest::getInclusionFilters() const {
    return m_inclusion_filters;
}
void OAIListProtectionsRequest::setInclusionFilters(const OAIListProtectionsRequest_InclusionFilters &inclusion_filters) {
    m_inclusion_filters = inclusion_filters;
    m_inclusion_filters_isSet = true;
}

bool OAIListProtectionsRequest::is_inclusion_filters_Set() const{
    return m_inclusion_filters_isSet;
}

bool OAIListProtectionsRequest::is_inclusion_filters_Valid() const{
    return m_inclusion_filters_isValid;
}

bool OAIListProtectionsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inclusion_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListProtectionsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
