/**
 * AWS Shield
 * <fullname>Shield Advanced</fullname> <p>This is the <i>Shield Advanced API Reference</i>. This guide is for developers who need detailed information about the Shield Advanced API actions, data types, and errors. For detailed information about WAF and Shield Advanced features and an overview of how to use the WAF and Shield Advanced APIs, see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/\">WAF and Shield Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-06-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInclusionProtectionFilters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInclusionProtectionFilters::OAIInclusionProtectionFilters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInclusionProtectionFilters::OAIInclusionProtectionFilters() {
    this->initializeModel();
}

OAIInclusionProtectionFilters::~OAIInclusionProtectionFilters() {}

void OAIInclusionProtectionFilters::initializeModel() {

    m_resource_arns_isSet = false;
    m_resource_arns_isValid = false;

    m_protection_names_isSet = false;
    m_protection_names_isValid = false;

    m_resource_types_isSet = false;
    m_resource_types_isValid = false;
}

void OAIInclusionProtectionFilters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInclusionProtectionFilters::fromJsonObject(QJsonObject json) {

    m_resource_arns_isValid = ::OpenAPI::fromJsonValue(m_resource_arns, json[QString("ResourceArns")]);
    m_resource_arns_isSet = !json[QString("ResourceArns")].isNull() && m_resource_arns_isValid;

    m_protection_names_isValid = ::OpenAPI::fromJsonValue(m_protection_names, json[QString("ProtectionNames")]);
    m_protection_names_isSet = !json[QString("ProtectionNames")].isNull() && m_protection_names_isValid;

    m_resource_types_isValid = ::OpenAPI::fromJsonValue(m_resource_types, json[QString("ResourceTypes")]);
    m_resource_types_isSet = !json[QString("ResourceTypes")].isNull() && m_resource_types_isValid;
}

QString OAIInclusionProtectionFilters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInclusionProtectionFilters::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_arns.isSet()) {
        obj.insert(QString("ResourceArns"), ::OpenAPI::toJsonValue(m_resource_arns));
    }
    if (m_protection_names.isSet()) {
        obj.insert(QString("ProtectionNames"), ::OpenAPI::toJsonValue(m_protection_names));
    }
    if (m_resource_types.isSet()) {
        obj.insert(QString("ResourceTypes"), ::OpenAPI::toJsonValue(m_resource_types));
    }
    return obj;
}

QList OAIInclusionProtectionFilters::getResourceArns() const {
    return m_resource_arns;
}
void OAIInclusionProtectionFilters::setResourceArns(const QList &resource_arns) {
    m_resource_arns = resource_arns;
    m_resource_arns_isSet = true;
}

bool OAIInclusionProtectionFilters::is_resource_arns_Set() const{
    return m_resource_arns_isSet;
}

bool OAIInclusionProtectionFilters::is_resource_arns_Valid() const{
    return m_resource_arns_isValid;
}

QList OAIInclusionProtectionFilters::getProtectionNames() const {
    return m_protection_names;
}
void OAIInclusionProtectionFilters::setProtectionNames(const QList &protection_names) {
    m_protection_names = protection_names;
    m_protection_names_isSet = true;
}

bool OAIInclusionProtectionFilters::is_protection_names_Set() const{
    return m_protection_names_isSet;
}

bool OAIInclusionProtectionFilters::is_protection_names_Valid() const{
    return m_protection_names_isValid;
}

QList OAIInclusionProtectionFilters::getResourceTypes() const {
    return m_resource_types;
}
void OAIInclusionProtectionFilters::setResourceTypes(const QList &resource_types) {
    m_resource_types = resource_types;
    m_resource_types_isSet = true;
}

bool OAIInclusionProtectionFilters::is_resource_types_Set() const{
    return m_resource_types_isSet;
}

bool OAIInclusionProtectionFilters::is_resource_types_Valid() const{
    return m_resource_types_isValid;
}

bool OAIInclusionProtectionFilters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_protection_names.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_types.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInclusionProtectionFilters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
