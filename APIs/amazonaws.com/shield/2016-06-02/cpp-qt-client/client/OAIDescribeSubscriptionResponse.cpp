/**
 * AWS Shield
 * <fullname>Shield Advanced</fullname> <p>This is the <i>Shield Advanced API Reference</i>. This guide is for developers who need detailed information about the Shield Advanced API actions, data types, and errors. For detailed information about WAF and Shield Advanced features and an overview of how to use the WAF and Shield Advanced APIs, see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/\">WAF and Shield Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-06-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeSubscriptionResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeSubscriptionResponse::OAIDescribeSubscriptionResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeSubscriptionResponse::OAIDescribeSubscriptionResponse() {
    this->initializeModel();
}

OAIDescribeSubscriptionResponse::~OAIDescribeSubscriptionResponse() {}

void OAIDescribeSubscriptionResponse::initializeModel() {

    m_subscription_isSet = false;
    m_subscription_isValid = false;
}

void OAIDescribeSubscriptionResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeSubscriptionResponse::fromJsonObject(QJsonObject json) {

    m_subscription_isValid = ::OpenAPI::fromJsonValue(m_subscription, json[QString("Subscription")]);
    m_subscription_isSet = !json[QString("Subscription")].isNull() && m_subscription_isValid;
}

QString OAIDescribeSubscriptionResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeSubscriptionResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_subscription.isSet()) {
        obj.insert(QString("Subscription"), ::OpenAPI::toJsonValue(m_subscription));
    }
    return obj;
}

OAIDescribeSubscriptionResponse_Subscription OAIDescribeSubscriptionResponse::getSubscription() const {
    return m_subscription;
}
void OAIDescribeSubscriptionResponse::setSubscription(const OAIDescribeSubscriptionResponse_Subscription &subscription) {
    m_subscription = subscription;
    m_subscription_isSet = true;
}

bool OAIDescribeSubscriptionResponse::is_subscription_Set() const{
    return m_subscription_isSet;
}

bool OAIDescribeSubscriptionResponse::is_subscription_Valid() const{
    return m_subscription_isValid;
}

bool OAIDescribeSubscriptionResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_subscription.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeSubscriptionResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
