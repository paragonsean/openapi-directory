/**
 * AWS Shield
 * <fullname>Shield Advanced</fullname> <p>This is the <i>Shield Advanced API Reference</i>. This guide is for developers who need detailed information about the Shield Advanced API actions, data types, and errors. For detailed information about WAF and Shield Advanced features and an overview of how to use the WAF and Shield Advanced APIs, see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/\">WAF and Shield Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-06-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubResourceType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubResourceType::OAISubResourceType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubResourceType::OAISubResourceType() {
    this->initializeModel();
}

OAISubResourceType::~OAISubResourceType() {}

void OAISubResourceType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAISubResourceType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAISubResourceType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("IP", Qt::CaseInsensitive) == 0) {
        m_value = eOAISubResourceType::IP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("URL", Qt::CaseInsensitive) == 0) {
        m_value = eOAISubResourceType::URL;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAISubResourceType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAISubResourceType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAISubResourceType::IP:
            val = "IP";
            break;
        case eOAISubResourceType::URL:
            val = "URL";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAISubResourceType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAISubResourceType::eOAISubResourceType OAISubResourceType::getValue() const {
    return m_value;
}

void OAISubResourceType::setValue(const OAISubResourceType::eOAISubResourceType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAISubResourceType::isSet() const {
    
    return m_value_isSet;
}

bool OAISubResourceType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
