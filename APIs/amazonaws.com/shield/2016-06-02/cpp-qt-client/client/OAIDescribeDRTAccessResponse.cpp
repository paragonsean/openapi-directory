/**
 * AWS Shield
 * <fullname>Shield Advanced</fullname> <p>This is the <i>Shield Advanced API Reference</i>. This guide is for developers who need detailed information about the Shield Advanced API actions, data types, and errors. For detailed information about WAF and Shield Advanced features and an overview of how to use the WAF and Shield Advanced APIs, see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/\">WAF and Shield Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-06-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeDRTAccessResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeDRTAccessResponse::OAIDescribeDRTAccessResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeDRTAccessResponse::OAIDescribeDRTAccessResponse() {
    this->initializeModel();
}

OAIDescribeDRTAccessResponse::~OAIDescribeDRTAccessResponse() {}

void OAIDescribeDRTAccessResponse::initializeModel() {

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_log_bucket_list_isSet = false;
    m_log_bucket_list_isValid = false;
}

void OAIDescribeDRTAccessResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeDRTAccessResponse::fromJsonObject(QJsonObject json) {

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;

    m_log_bucket_list_isValid = ::OpenAPI::fromJsonValue(m_log_bucket_list, json[QString("LogBucketList")]);
    m_log_bucket_list_isSet = !json[QString("LogBucketList")].isNull() && m_log_bucket_list_isValid;
}

QString OAIDescribeDRTAccessResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeDRTAccessResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_log_bucket_list.isSet()) {
        obj.insert(QString("LogBucketList"), ::OpenAPI::toJsonValue(m_log_bucket_list));
    }
    return obj;
}

QString OAIDescribeDRTAccessResponse::getRoleArn() const {
    return m_role_arn;
}
void OAIDescribeDRTAccessResponse::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIDescribeDRTAccessResponse::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIDescribeDRTAccessResponse::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

QList OAIDescribeDRTAccessResponse::getLogBucketList() const {
    return m_log_bucket_list;
}
void OAIDescribeDRTAccessResponse::setLogBucketList(const QList &log_bucket_list) {
    m_log_bucket_list = log_bucket_list;
    m_log_bucket_list_isSet = true;
}

bool OAIDescribeDRTAccessResponse::is_log_bucket_list_Set() const{
    return m_log_bucket_list_isSet;
}

bool OAIDescribeDRTAccessResponse::is_log_bucket_list_Valid() const{
    return m_log_bucket_list_isValid;
}

bool OAIDescribeDRTAccessResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_bucket_list.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeDRTAccessResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
