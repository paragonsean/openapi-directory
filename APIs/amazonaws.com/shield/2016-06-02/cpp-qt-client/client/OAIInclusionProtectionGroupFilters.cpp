/**
 * AWS Shield
 * <fullname>Shield Advanced</fullname> <p>This is the <i>Shield Advanced API Reference</i>. This guide is for developers who need detailed information about the Shield Advanced API actions, data types, and errors. For detailed information about WAF and Shield Advanced features and an overview of how to use the WAF and Shield Advanced APIs, see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/\">WAF and Shield Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-06-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInclusionProtectionGroupFilters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInclusionProtectionGroupFilters::OAIInclusionProtectionGroupFilters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInclusionProtectionGroupFilters::OAIInclusionProtectionGroupFilters() {
    this->initializeModel();
}

OAIInclusionProtectionGroupFilters::~OAIInclusionProtectionGroupFilters() {}

void OAIInclusionProtectionGroupFilters::initializeModel() {

    m_protection_group_ids_isSet = false;
    m_protection_group_ids_isValid = false;

    m_patterns_isSet = false;
    m_patterns_isValid = false;

    m_resource_types_isSet = false;
    m_resource_types_isValid = false;

    m_aggregations_isSet = false;
    m_aggregations_isValid = false;
}

void OAIInclusionProtectionGroupFilters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInclusionProtectionGroupFilters::fromJsonObject(QJsonObject json) {

    m_protection_group_ids_isValid = ::OpenAPI::fromJsonValue(m_protection_group_ids, json[QString("ProtectionGroupIds")]);
    m_protection_group_ids_isSet = !json[QString("ProtectionGroupIds")].isNull() && m_protection_group_ids_isValid;

    m_patterns_isValid = ::OpenAPI::fromJsonValue(m_patterns, json[QString("Patterns")]);
    m_patterns_isSet = !json[QString("Patterns")].isNull() && m_patterns_isValid;

    m_resource_types_isValid = ::OpenAPI::fromJsonValue(m_resource_types, json[QString("ResourceTypes")]);
    m_resource_types_isSet = !json[QString("ResourceTypes")].isNull() && m_resource_types_isValid;

    m_aggregations_isValid = ::OpenAPI::fromJsonValue(m_aggregations, json[QString("Aggregations")]);
    m_aggregations_isSet = !json[QString("Aggregations")].isNull() && m_aggregations_isValid;
}

QString OAIInclusionProtectionGroupFilters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInclusionProtectionGroupFilters::asJsonObject() const {
    QJsonObject obj;
    if (m_protection_group_ids.isSet()) {
        obj.insert(QString("ProtectionGroupIds"), ::OpenAPI::toJsonValue(m_protection_group_ids));
    }
    if (m_patterns.isSet()) {
        obj.insert(QString("Patterns"), ::OpenAPI::toJsonValue(m_patterns));
    }
    if (m_resource_types.isSet()) {
        obj.insert(QString("ResourceTypes"), ::OpenAPI::toJsonValue(m_resource_types));
    }
    if (m_aggregations.isSet()) {
        obj.insert(QString("Aggregations"), ::OpenAPI::toJsonValue(m_aggregations));
    }
    return obj;
}

QList OAIInclusionProtectionGroupFilters::getProtectionGroupIds() const {
    return m_protection_group_ids;
}
void OAIInclusionProtectionGroupFilters::setProtectionGroupIds(const QList &protection_group_ids) {
    m_protection_group_ids = protection_group_ids;
    m_protection_group_ids_isSet = true;
}

bool OAIInclusionProtectionGroupFilters::is_protection_group_ids_Set() const{
    return m_protection_group_ids_isSet;
}

bool OAIInclusionProtectionGroupFilters::is_protection_group_ids_Valid() const{
    return m_protection_group_ids_isValid;
}

QList OAIInclusionProtectionGroupFilters::getPatterns() const {
    return m_patterns;
}
void OAIInclusionProtectionGroupFilters::setPatterns(const QList &patterns) {
    m_patterns = patterns;
    m_patterns_isSet = true;
}

bool OAIInclusionProtectionGroupFilters::is_patterns_Set() const{
    return m_patterns_isSet;
}

bool OAIInclusionProtectionGroupFilters::is_patterns_Valid() const{
    return m_patterns_isValid;
}

QList OAIInclusionProtectionGroupFilters::getResourceTypes() const {
    return m_resource_types;
}
void OAIInclusionProtectionGroupFilters::setResourceTypes(const QList &resource_types) {
    m_resource_types = resource_types;
    m_resource_types_isSet = true;
}

bool OAIInclusionProtectionGroupFilters::is_resource_types_Set() const{
    return m_resource_types_isSet;
}

bool OAIInclusionProtectionGroupFilters::is_resource_types_Valid() const{
    return m_resource_types_isValid;
}

QList OAIInclusionProtectionGroupFilters::getAggregations() const {
    return m_aggregations;
}
void OAIInclusionProtectionGroupFilters::setAggregations(const QList &aggregations) {
    m_aggregations = aggregations;
    m_aggregations_isSet = true;
}

bool OAIInclusionProtectionGroupFilters::is_aggregations_Set() const{
    return m_aggregations_isSet;
}

bool OAIInclusionProtectionGroupFilters::is_aggregations_Valid() const{
    return m_aggregations_isValid;
}

bool OAIInclusionProtectionGroupFilters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_protection_group_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_patterns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_aggregations.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInclusionProtectionGroupFilters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
