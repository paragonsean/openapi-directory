/**
 * AWS Shield
 * <fullname>Shield Advanced</fullname> <p>This is the <i>Shield Advanced API Reference</i>. This guide is for developers who need detailed information about the Shield Advanced API actions, data types, and errors. For detailed information about WAF and Shield Advanced features and an overview of how to use the WAF and Shield Advanced APIs, see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/\">WAF and Shield Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-06-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttackProperty.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttackProperty::OAIAttackProperty(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttackProperty::OAIAttackProperty() {
    this->initializeModel();
}

OAIAttackProperty::~OAIAttackProperty() {}

void OAIAttackProperty::initializeModel() {

    m_attack_layer_isSet = false;
    m_attack_layer_isValid = false;

    m_attack_property_identifier_isSet = false;
    m_attack_property_identifier_isValid = false;

    m_top_contributors_isSet = false;
    m_top_contributors_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;
}

void OAIAttackProperty::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttackProperty::fromJsonObject(QJsonObject json) {

    m_attack_layer_isValid = ::OpenAPI::fromJsonValue(m_attack_layer, json[QString("AttackLayer")]);
    m_attack_layer_isSet = !json[QString("AttackLayer")].isNull() && m_attack_layer_isValid;

    m_attack_property_identifier_isValid = ::OpenAPI::fromJsonValue(m_attack_property_identifier, json[QString("AttackPropertyIdentifier")]);
    m_attack_property_identifier_isSet = !json[QString("AttackPropertyIdentifier")].isNull() && m_attack_property_identifier_isValid;

    m_top_contributors_isValid = ::OpenAPI::fromJsonValue(m_top_contributors, json[QString("TopContributors")]);
    m_top_contributors_isSet = !json[QString("TopContributors")].isNull() && m_top_contributors_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("Unit")]);
    m_unit_isSet = !json[QString("Unit")].isNull() && m_unit_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("Total")]);
    m_total_isSet = !json[QString("Total")].isNull() && m_total_isValid;
}

QString OAIAttackProperty::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttackProperty::asJsonObject() const {
    QJsonObject obj;
    if (m_attack_layer.isSet()) {
        obj.insert(QString("AttackLayer"), ::OpenAPI::toJsonValue(m_attack_layer));
    }
    if (m_attack_property_identifier.isSet()) {
        obj.insert(QString("AttackPropertyIdentifier"), ::OpenAPI::toJsonValue(m_attack_property_identifier));
    }
    if (m_top_contributors.isSet()) {
        obj.insert(QString("TopContributors"), ::OpenAPI::toJsonValue(m_top_contributors));
    }
    if (m_unit.isSet()) {
        obj.insert(QString("Unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    if (m_total_isSet) {
        obj.insert(QString("Total"), ::OpenAPI::toJsonValue(m_total));
    }
    return obj;
}

OAIAttackLayer OAIAttackProperty::getAttackLayer() const {
    return m_attack_layer;
}
void OAIAttackProperty::setAttackLayer(const OAIAttackLayer &attack_layer) {
    m_attack_layer = attack_layer;
    m_attack_layer_isSet = true;
}

bool OAIAttackProperty::is_attack_layer_Set() const{
    return m_attack_layer_isSet;
}

bool OAIAttackProperty::is_attack_layer_Valid() const{
    return m_attack_layer_isValid;
}

OAIAttackPropertyIdentifier OAIAttackProperty::getAttackPropertyIdentifier() const {
    return m_attack_property_identifier;
}
void OAIAttackProperty::setAttackPropertyIdentifier(const OAIAttackPropertyIdentifier &attack_property_identifier) {
    m_attack_property_identifier = attack_property_identifier;
    m_attack_property_identifier_isSet = true;
}

bool OAIAttackProperty::is_attack_property_identifier_Set() const{
    return m_attack_property_identifier_isSet;
}

bool OAIAttackProperty::is_attack_property_identifier_Valid() const{
    return m_attack_property_identifier_isValid;
}

QList OAIAttackProperty::getTopContributors() const {
    return m_top_contributors;
}
void OAIAttackProperty::setTopContributors(const QList &top_contributors) {
    m_top_contributors = top_contributors;
    m_top_contributors_isSet = true;
}

bool OAIAttackProperty::is_top_contributors_Set() const{
    return m_top_contributors_isSet;
}

bool OAIAttackProperty::is_top_contributors_Valid() const{
    return m_top_contributors_isValid;
}

OAIUnit OAIAttackProperty::getUnit() const {
    return m_unit;
}
void OAIAttackProperty::setUnit(const OAIUnit &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAIAttackProperty::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAIAttackProperty::is_unit_Valid() const{
    return m_unit_isValid;
}

qint32 OAIAttackProperty::getTotal() const {
    return m_total;
}
void OAIAttackProperty::setTotal(const qint32 &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIAttackProperty::is_total_Set() const{
    return m_total_isSet;
}

bool OAIAttackProperty::is_total_Valid() const{
    return m_total_isValid;
}

bool OAIAttackProperty::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attack_layer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_attack_property_identifier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_contributors.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttackProperty::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
