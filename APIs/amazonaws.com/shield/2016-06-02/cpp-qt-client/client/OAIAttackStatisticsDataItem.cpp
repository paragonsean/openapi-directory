/**
 * AWS Shield
 * <fullname>Shield Advanced</fullname> <p>This is the <i>Shield Advanced API Reference</i>. This guide is for developers who need detailed information about the Shield Advanced API actions, data types, and errors. For detailed information about WAF and Shield Advanced features and an overview of how to use the WAF and Shield Advanced APIs, see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/\">WAF and Shield Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-06-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttackStatisticsDataItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttackStatisticsDataItem::OAIAttackStatisticsDataItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttackStatisticsDataItem::OAIAttackStatisticsDataItem() {
    this->initializeModel();
}

OAIAttackStatisticsDataItem::~OAIAttackStatisticsDataItem() {}

void OAIAttackStatisticsDataItem::initializeModel() {

    m_attack_volume_isSet = false;
    m_attack_volume_isValid = false;

    m_attack_count_isSet = false;
    m_attack_count_isValid = false;
}

void OAIAttackStatisticsDataItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttackStatisticsDataItem::fromJsonObject(QJsonObject json) {

    m_attack_volume_isValid = ::OpenAPI::fromJsonValue(m_attack_volume, json[QString("AttackVolume")]);
    m_attack_volume_isSet = !json[QString("AttackVolume")].isNull() && m_attack_volume_isValid;

    m_attack_count_isValid = ::OpenAPI::fromJsonValue(m_attack_count, json[QString("AttackCount")]);
    m_attack_count_isSet = !json[QString("AttackCount")].isNull() && m_attack_count_isValid;
}

QString OAIAttackStatisticsDataItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttackStatisticsDataItem::asJsonObject() const {
    QJsonObject obj;
    if (m_attack_volume.isSet()) {
        obj.insert(QString("AttackVolume"), ::OpenAPI::toJsonValue(m_attack_volume));
    }
    if (m_attack_count_isSet) {
        obj.insert(QString("AttackCount"), ::OpenAPI::toJsonValue(m_attack_count));
    }
    return obj;
}

OAIAttackStatisticsDataItem_AttackVolume OAIAttackStatisticsDataItem::getAttackVolume() const {
    return m_attack_volume;
}
void OAIAttackStatisticsDataItem::setAttackVolume(const OAIAttackStatisticsDataItem_AttackVolume &attack_volume) {
    m_attack_volume = attack_volume;
    m_attack_volume_isSet = true;
}

bool OAIAttackStatisticsDataItem::is_attack_volume_Set() const{
    return m_attack_volume_isSet;
}

bool OAIAttackStatisticsDataItem::is_attack_volume_Valid() const{
    return m_attack_volume_isValid;
}

qint32 OAIAttackStatisticsDataItem::getAttackCount() const {
    return m_attack_count;
}
void OAIAttackStatisticsDataItem::setAttackCount(const qint32 &attack_count) {
    m_attack_count = attack_count;
    m_attack_count_isSet = true;
}

bool OAIAttackStatisticsDataItem::is_attack_count_Set() const{
    return m_attack_count_isSet;
}

bool OAIAttackStatisticsDataItem::is_attack_count_Valid() const{
    return m_attack_count_isValid;
}

bool OAIAttackStatisticsDataItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attack_volume.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_attack_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttackStatisticsDataItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_attack_count_isValid && true;
}

} // namespace OpenAPI
