/**
 * AWS Shield
 * <fullname>Shield Advanced</fullname> <p>This is the <i>Shield Advanced API Reference</i>. This guide is for developers who need detailed information about the Shield Advanced API actions, data types, and errors. For detailed information about WAF and Shield Advanced features and an overview of how to use the WAF and Shield Advanced APIs, see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/\">WAF and Shield Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-06-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetSubscriptionStateResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetSubscriptionStateResponse::OAIGetSubscriptionStateResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetSubscriptionStateResponse::OAIGetSubscriptionStateResponse() {
    this->initializeModel();
}

OAIGetSubscriptionStateResponse::~OAIGetSubscriptionStateResponse() {}

void OAIGetSubscriptionStateResponse::initializeModel() {

    m_subscription_state_isSet = false;
    m_subscription_state_isValid = false;
}

void OAIGetSubscriptionStateResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetSubscriptionStateResponse::fromJsonObject(QJsonObject json) {

    m_subscription_state_isValid = ::OpenAPI::fromJsonValue(m_subscription_state, json[QString("SubscriptionState")]);
    m_subscription_state_isSet = !json[QString("SubscriptionState")].isNull() && m_subscription_state_isValid;
}

QString OAIGetSubscriptionStateResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetSubscriptionStateResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_subscription_state.isSet()) {
        obj.insert(QString("SubscriptionState"), ::OpenAPI::toJsonValue(m_subscription_state));
    }
    return obj;
}

OAISubscriptionState OAIGetSubscriptionStateResponse::getSubscriptionState() const {
    return m_subscription_state;
}
void OAIGetSubscriptionStateResponse::setSubscriptionState(const OAISubscriptionState &subscription_state) {
    m_subscription_state = subscription_state;
    m_subscription_state_isSet = true;
}

bool OAIGetSubscriptionStateResponse::is_subscription_state_Set() const{
    return m_subscription_state_isSet;
}

bool OAIGetSubscriptionStateResponse::is_subscription_state_Valid() const{
    return m_subscription_state_isValid;
}

bool OAIGetSubscriptionStateResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_subscription_state.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetSubscriptionStateResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_subscription_state_isValid && true;
}

} // namespace OpenAPI
