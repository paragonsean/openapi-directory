/**
 * AWS Shield
 * <fullname>Shield Advanced</fullname> <p>This is the <i>Shield Advanced API Reference</i>. This guide is for developers who need detailed information about the Shield Advanced API actions, data types, and errors. For detailed information about WAF and Shield Advanced features and an overview of how to use the WAF and Shield Advanced APIs, see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/\">WAF and Shield Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-06-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttackSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttackSummary::OAIAttackSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttackSummary::OAIAttackSummary() {
    this->initializeModel();
}

OAIAttackSummary::~OAIAttackSummary() {}

void OAIAttackSummary::initializeModel() {

    m_attack_id_isSet = false;
    m_attack_id_isValid = false;

    m_resource_arn_isSet = false;
    m_resource_arn_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_attack_vectors_isSet = false;
    m_attack_vectors_isValid = false;
}

void OAIAttackSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttackSummary::fromJsonObject(QJsonObject json) {

    m_attack_id_isValid = ::OpenAPI::fromJsonValue(m_attack_id, json[QString("AttackId")]);
    m_attack_id_isSet = !json[QString("AttackId")].isNull() && m_attack_id_isValid;

    m_resource_arn_isValid = ::OpenAPI::fromJsonValue(m_resource_arn, json[QString("ResourceArn")]);
    m_resource_arn_isSet = !json[QString("ResourceArn")].isNull() && m_resource_arn_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("EndTime")]);
    m_end_time_isSet = !json[QString("EndTime")].isNull() && m_end_time_isValid;

    m_attack_vectors_isValid = ::OpenAPI::fromJsonValue(m_attack_vectors, json[QString("AttackVectors")]);
    m_attack_vectors_isSet = !json[QString("AttackVectors")].isNull() && m_attack_vectors_isValid;
}

QString OAIAttackSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttackSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_attack_id_isSet) {
        obj.insert(QString("AttackId"), ::OpenAPI::toJsonValue(m_attack_id));
    }
    if (m_resource_arn_isSet) {
        obj.insert(QString("ResourceArn"), ::OpenAPI::toJsonValue(m_resource_arn));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("EndTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_attack_vectors.isSet()) {
        obj.insert(QString("AttackVectors"), ::OpenAPI::toJsonValue(m_attack_vectors));
    }
    return obj;
}

QString OAIAttackSummary::getAttackId() const {
    return m_attack_id;
}
void OAIAttackSummary::setAttackId(const QString &attack_id) {
    m_attack_id = attack_id;
    m_attack_id_isSet = true;
}

bool OAIAttackSummary::is_attack_id_Set() const{
    return m_attack_id_isSet;
}

bool OAIAttackSummary::is_attack_id_Valid() const{
    return m_attack_id_isValid;
}

QString OAIAttackSummary::getResourceArn() const {
    return m_resource_arn;
}
void OAIAttackSummary::setResourceArn(const QString &resource_arn) {
    m_resource_arn = resource_arn;
    m_resource_arn_isSet = true;
}

bool OAIAttackSummary::is_resource_arn_Set() const{
    return m_resource_arn_isSet;
}

bool OAIAttackSummary::is_resource_arn_Valid() const{
    return m_resource_arn_isValid;
}

QDateTime OAIAttackSummary::getStartTime() const {
    return m_start_time;
}
void OAIAttackSummary::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIAttackSummary::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIAttackSummary::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QDateTime OAIAttackSummary::getEndTime() const {
    return m_end_time;
}
void OAIAttackSummary::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIAttackSummary::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIAttackSummary::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QList OAIAttackSummary::getAttackVectors() const {
    return m_attack_vectors;
}
void OAIAttackSummary::setAttackVectors(const QList &attack_vectors) {
    m_attack_vectors = attack_vectors;
    m_attack_vectors_isSet = true;
}

bool OAIAttackSummary::is_attack_vectors_Set() const{
    return m_attack_vectors_isSet;
}

bool OAIAttackSummary::is_attack_vectors_Valid() const{
    return m_attack_vectors_isValid;
}

bool OAIAttackSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attack_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attack_vectors.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttackSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
