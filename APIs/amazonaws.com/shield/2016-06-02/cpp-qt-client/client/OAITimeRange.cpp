/**
 * AWS Shield
 * <fullname>Shield Advanced</fullname> <p>This is the <i>Shield Advanced API Reference</i>. This guide is for developers who need detailed information about the Shield Advanced API actions, data types, and errors. For detailed information about WAF and Shield Advanced features and an overview of how to use the WAF and Shield Advanced APIs, see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/\">WAF and Shield Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-06-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITimeRange.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITimeRange::OAITimeRange(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITimeRange::OAITimeRange() {
    this->initializeModel();
}

OAITimeRange::~OAITimeRange() {}

void OAITimeRange::initializeModel() {

    m_from_inclusive_isSet = false;
    m_from_inclusive_isValid = false;

    m_to_exclusive_isSet = false;
    m_to_exclusive_isValid = false;
}

void OAITimeRange::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITimeRange::fromJsonObject(QJsonObject json) {

    m_from_inclusive_isValid = ::OpenAPI::fromJsonValue(m_from_inclusive, json[QString("FromInclusive")]);
    m_from_inclusive_isSet = !json[QString("FromInclusive")].isNull() && m_from_inclusive_isValid;

    m_to_exclusive_isValid = ::OpenAPI::fromJsonValue(m_to_exclusive, json[QString("ToExclusive")]);
    m_to_exclusive_isSet = !json[QString("ToExclusive")].isNull() && m_to_exclusive_isValid;
}

QString OAITimeRange::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITimeRange::asJsonObject() const {
    QJsonObject obj;
    if (m_from_inclusive_isSet) {
        obj.insert(QString("FromInclusive"), ::OpenAPI::toJsonValue(m_from_inclusive));
    }
    if (m_to_exclusive_isSet) {
        obj.insert(QString("ToExclusive"), ::OpenAPI::toJsonValue(m_to_exclusive));
    }
    return obj;
}

QDateTime OAITimeRange::getFromInclusive() const {
    return m_from_inclusive;
}
void OAITimeRange::setFromInclusive(const QDateTime &from_inclusive) {
    m_from_inclusive = from_inclusive;
    m_from_inclusive_isSet = true;
}

bool OAITimeRange::is_from_inclusive_Set() const{
    return m_from_inclusive_isSet;
}

bool OAITimeRange::is_from_inclusive_Valid() const{
    return m_from_inclusive_isValid;
}

QDateTime OAITimeRange::getToExclusive() const {
    return m_to_exclusive;
}
void OAITimeRange::setToExclusive(const QDateTime &to_exclusive) {
    m_to_exclusive = to_exclusive;
    m_to_exclusive_isSet = true;
}

bool OAITimeRange::is_to_exclusive_Set() const{
    return m_to_exclusive_isSet;
}

bool OAITimeRange::is_to_exclusive_Valid() const{
    return m_to_exclusive_isValid;
}

bool OAITimeRange::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_from_inclusive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_exclusive_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITimeRange::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
