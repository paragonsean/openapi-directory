/**
 * AWS Shield
 * <fullname>Shield Advanced</fullname> <p>This is the <i>Shield Advanced API Reference</i>. This guide is for developers who need detailed information about the Shield Advanced API actions, data types, and errors. For detailed information about WAF and Shield Advanced features and an overview of how to use the WAF and Shield Advanced APIs, see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/\">WAF and Shield Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-06-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeProtectionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeProtectionRequest::OAIDescribeProtectionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeProtectionRequest::OAIDescribeProtectionRequest() {
    this->initializeModel();
}

OAIDescribeProtectionRequest::~OAIDescribeProtectionRequest() {}

void OAIDescribeProtectionRequest::initializeModel() {

    m_protection_id_isSet = false;
    m_protection_id_isValid = false;

    m_resource_arn_isSet = false;
    m_resource_arn_isValid = false;
}

void OAIDescribeProtectionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeProtectionRequest::fromJsonObject(QJsonObject json) {

    m_protection_id_isValid = ::OpenAPI::fromJsonValue(m_protection_id, json[QString("ProtectionId")]);
    m_protection_id_isSet = !json[QString("ProtectionId")].isNull() && m_protection_id_isValid;

    m_resource_arn_isValid = ::OpenAPI::fromJsonValue(m_resource_arn, json[QString("ResourceArn")]);
    m_resource_arn_isSet = !json[QString("ResourceArn")].isNull() && m_resource_arn_isValid;
}

QString OAIDescribeProtectionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeProtectionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_protection_id_isSet) {
        obj.insert(QString("ProtectionId"), ::OpenAPI::toJsonValue(m_protection_id));
    }
    if (m_resource_arn_isSet) {
        obj.insert(QString("ResourceArn"), ::OpenAPI::toJsonValue(m_resource_arn));
    }
    return obj;
}

QString OAIDescribeProtectionRequest::getProtectionId() const {
    return m_protection_id;
}
void OAIDescribeProtectionRequest::setProtectionId(const QString &protection_id) {
    m_protection_id = protection_id;
    m_protection_id_isSet = true;
}

bool OAIDescribeProtectionRequest::is_protection_id_Set() const{
    return m_protection_id_isSet;
}

bool OAIDescribeProtectionRequest::is_protection_id_Valid() const{
    return m_protection_id_isValid;
}

QString OAIDescribeProtectionRequest::getResourceArn() const {
    return m_resource_arn;
}
void OAIDescribeProtectionRequest::setResourceArn(const QString &resource_arn) {
    m_resource_arn = resource_arn;
    m_resource_arn_isSet = true;
}

bool OAIDescribeProtectionRequest::is_resource_arn_Set() const{
    return m_resource_arn_isSet;
}

bool OAIDescribeProtectionRequest::is_resource_arn_Valid() const{
    return m_resource_arn_isValid;
}

bool OAIDescribeProtectionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_protection_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeProtectionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
