/**
 * AWS Shield
 * <fullname>Shield Advanced</fullname> <p>This is the <i>Shield Advanced API Reference</i>. This guide is for developers who need detailed information about the Shield Advanced API actions, data types, and errors. For detailed information about WAF and Shield Advanced features and an overview of how to use the WAF and Shield Advanced APIs, see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/\">WAF and Shield Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-06-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeAttackResponse_Attack.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeAttackResponse_Attack::OAIDescribeAttackResponse_Attack(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeAttackResponse_Attack::OAIDescribeAttackResponse_Attack() {
    this->initializeModel();
}

OAIDescribeAttackResponse_Attack::~OAIDescribeAttackResponse_Attack() {}

void OAIDescribeAttackResponse_Attack::initializeModel() {

    m_attack_id_isSet = false;
    m_attack_id_isValid = false;

    m_resource_arn_isSet = false;
    m_resource_arn_isValid = false;

    m_sub_resources_isSet = false;
    m_sub_resources_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_attack_counters_isSet = false;
    m_attack_counters_isValid = false;

    m_attack_properties_isSet = false;
    m_attack_properties_isValid = false;

    m_mitigations_isSet = false;
    m_mitigations_isValid = false;
}

void OAIDescribeAttackResponse_Attack::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeAttackResponse_Attack::fromJsonObject(QJsonObject json) {

    m_attack_id_isValid = ::OpenAPI::fromJsonValue(m_attack_id, json[QString("AttackId")]);
    m_attack_id_isSet = !json[QString("AttackId")].isNull() && m_attack_id_isValid;

    m_resource_arn_isValid = ::OpenAPI::fromJsonValue(m_resource_arn, json[QString("ResourceArn")]);
    m_resource_arn_isSet = !json[QString("ResourceArn")].isNull() && m_resource_arn_isValid;

    m_sub_resources_isValid = ::OpenAPI::fromJsonValue(m_sub_resources, json[QString("SubResources")]);
    m_sub_resources_isSet = !json[QString("SubResources")].isNull() && m_sub_resources_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("EndTime")]);
    m_end_time_isSet = !json[QString("EndTime")].isNull() && m_end_time_isValid;

    m_attack_counters_isValid = ::OpenAPI::fromJsonValue(m_attack_counters, json[QString("AttackCounters")]);
    m_attack_counters_isSet = !json[QString("AttackCounters")].isNull() && m_attack_counters_isValid;

    m_attack_properties_isValid = ::OpenAPI::fromJsonValue(m_attack_properties, json[QString("AttackProperties")]);
    m_attack_properties_isSet = !json[QString("AttackProperties")].isNull() && m_attack_properties_isValid;

    m_mitigations_isValid = ::OpenAPI::fromJsonValue(m_mitigations, json[QString("Mitigations")]);
    m_mitigations_isSet = !json[QString("Mitigations")].isNull() && m_mitigations_isValid;
}

QString OAIDescribeAttackResponse_Attack::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeAttackResponse_Attack::asJsonObject() const {
    QJsonObject obj;
    if (m_attack_id_isSet) {
        obj.insert(QString("AttackId"), ::OpenAPI::toJsonValue(m_attack_id));
    }
    if (m_resource_arn_isSet) {
        obj.insert(QString("ResourceArn"), ::OpenAPI::toJsonValue(m_resource_arn));
    }
    if (m_sub_resources.isSet()) {
        obj.insert(QString("SubResources"), ::OpenAPI::toJsonValue(m_sub_resources));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("EndTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_attack_counters.isSet()) {
        obj.insert(QString("AttackCounters"), ::OpenAPI::toJsonValue(m_attack_counters));
    }
    if (m_attack_properties.isSet()) {
        obj.insert(QString("AttackProperties"), ::OpenAPI::toJsonValue(m_attack_properties));
    }
    if (m_mitigations.isSet()) {
        obj.insert(QString("Mitigations"), ::OpenAPI::toJsonValue(m_mitigations));
    }
    return obj;
}

QString OAIDescribeAttackResponse_Attack::getAttackId() const {
    return m_attack_id;
}
void OAIDescribeAttackResponse_Attack::setAttackId(const QString &attack_id) {
    m_attack_id = attack_id;
    m_attack_id_isSet = true;
}

bool OAIDescribeAttackResponse_Attack::is_attack_id_Set() const{
    return m_attack_id_isSet;
}

bool OAIDescribeAttackResponse_Attack::is_attack_id_Valid() const{
    return m_attack_id_isValid;
}

QString OAIDescribeAttackResponse_Attack::getResourceArn() const {
    return m_resource_arn;
}
void OAIDescribeAttackResponse_Attack::setResourceArn(const QString &resource_arn) {
    m_resource_arn = resource_arn;
    m_resource_arn_isSet = true;
}

bool OAIDescribeAttackResponse_Attack::is_resource_arn_Set() const{
    return m_resource_arn_isSet;
}

bool OAIDescribeAttackResponse_Attack::is_resource_arn_Valid() const{
    return m_resource_arn_isValid;
}

QList OAIDescribeAttackResponse_Attack::getSubResources() const {
    return m_sub_resources;
}
void OAIDescribeAttackResponse_Attack::setSubResources(const QList &sub_resources) {
    m_sub_resources = sub_resources;
    m_sub_resources_isSet = true;
}

bool OAIDescribeAttackResponse_Attack::is_sub_resources_Set() const{
    return m_sub_resources_isSet;
}

bool OAIDescribeAttackResponse_Attack::is_sub_resources_Valid() const{
    return m_sub_resources_isValid;
}

QDateTime OAIDescribeAttackResponse_Attack::getStartTime() const {
    return m_start_time;
}
void OAIDescribeAttackResponse_Attack::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIDescribeAttackResponse_Attack::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIDescribeAttackResponse_Attack::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QDateTime OAIDescribeAttackResponse_Attack::getEndTime() const {
    return m_end_time;
}
void OAIDescribeAttackResponse_Attack::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIDescribeAttackResponse_Attack::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIDescribeAttackResponse_Attack::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QList OAIDescribeAttackResponse_Attack::getAttackCounters() const {
    return m_attack_counters;
}
void OAIDescribeAttackResponse_Attack::setAttackCounters(const QList &attack_counters) {
    m_attack_counters = attack_counters;
    m_attack_counters_isSet = true;
}

bool OAIDescribeAttackResponse_Attack::is_attack_counters_Set() const{
    return m_attack_counters_isSet;
}

bool OAIDescribeAttackResponse_Attack::is_attack_counters_Valid() const{
    return m_attack_counters_isValid;
}

QList OAIDescribeAttackResponse_Attack::getAttackProperties() const {
    return m_attack_properties;
}
void OAIDescribeAttackResponse_Attack::setAttackProperties(const QList &attack_properties) {
    m_attack_properties = attack_properties;
    m_attack_properties_isSet = true;
}

bool OAIDescribeAttackResponse_Attack::is_attack_properties_Set() const{
    return m_attack_properties_isSet;
}

bool OAIDescribeAttackResponse_Attack::is_attack_properties_Valid() const{
    return m_attack_properties_isValid;
}

QList OAIDescribeAttackResponse_Attack::getMitigations() const {
    return m_mitigations;
}
void OAIDescribeAttackResponse_Attack::setMitigations(const QList &mitigations) {
    m_mitigations = mitigations;
    m_mitigations_isSet = true;
}

bool OAIDescribeAttackResponse_Attack::is_mitigations_Set() const{
    return m_mitigations_isSet;
}

bool OAIDescribeAttackResponse_Attack::is_mitigations_Valid() const{
    return m_mitigations_isValid;
}

bool OAIDescribeAttackResponse_Attack::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attack_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_resources.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attack_counters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_attack_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mitigations.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeAttackResponse_Attack::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
