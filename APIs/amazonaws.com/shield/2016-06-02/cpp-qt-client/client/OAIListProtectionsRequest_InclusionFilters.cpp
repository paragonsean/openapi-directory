/**
 * AWS Shield
 * <fullname>Shield Advanced</fullname> <p>This is the <i>Shield Advanced API Reference</i>. This guide is for developers who need detailed information about the Shield Advanced API actions, data types, and errors. For detailed information about WAF and Shield Advanced features and an overview of how to use the WAF and Shield Advanced APIs, see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/\">WAF and Shield Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-06-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListProtectionsRequest_InclusionFilters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListProtectionsRequest_InclusionFilters::OAIListProtectionsRequest_InclusionFilters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListProtectionsRequest_InclusionFilters::OAIListProtectionsRequest_InclusionFilters() {
    this->initializeModel();
}

OAIListProtectionsRequest_InclusionFilters::~OAIListProtectionsRequest_InclusionFilters() {}

void OAIListProtectionsRequest_InclusionFilters::initializeModel() {

    m_resource_arns_isSet = false;
    m_resource_arns_isValid = false;

    m_protection_names_isSet = false;
    m_protection_names_isValid = false;

    m_resource_types_isSet = false;
    m_resource_types_isValid = false;
}

void OAIListProtectionsRequest_InclusionFilters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListProtectionsRequest_InclusionFilters::fromJsonObject(QJsonObject json) {

    m_resource_arns_isValid = ::OpenAPI::fromJsonValue(m_resource_arns, json[QString("ResourceArns")]);
    m_resource_arns_isSet = !json[QString("ResourceArns")].isNull() && m_resource_arns_isValid;

    m_protection_names_isValid = ::OpenAPI::fromJsonValue(m_protection_names, json[QString("ProtectionNames")]);
    m_protection_names_isSet = !json[QString("ProtectionNames")].isNull() && m_protection_names_isValid;

    m_resource_types_isValid = ::OpenAPI::fromJsonValue(m_resource_types, json[QString("ResourceTypes")]);
    m_resource_types_isSet = !json[QString("ResourceTypes")].isNull() && m_resource_types_isValid;
}

QString OAIListProtectionsRequest_InclusionFilters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListProtectionsRequest_InclusionFilters::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_arns.isSet()) {
        obj.insert(QString("ResourceArns"), ::OpenAPI::toJsonValue(m_resource_arns));
    }
    if (m_protection_names.isSet()) {
        obj.insert(QString("ProtectionNames"), ::OpenAPI::toJsonValue(m_protection_names));
    }
    if (m_resource_types.isSet()) {
        obj.insert(QString("ResourceTypes"), ::OpenAPI::toJsonValue(m_resource_types));
    }
    return obj;
}

QList OAIListProtectionsRequest_InclusionFilters::getResourceArns() const {
    return m_resource_arns;
}
void OAIListProtectionsRequest_InclusionFilters::setResourceArns(const QList &resource_arns) {
    m_resource_arns = resource_arns;
    m_resource_arns_isSet = true;
}

bool OAIListProtectionsRequest_InclusionFilters::is_resource_arns_Set() const{
    return m_resource_arns_isSet;
}

bool OAIListProtectionsRequest_InclusionFilters::is_resource_arns_Valid() const{
    return m_resource_arns_isValid;
}

QList OAIListProtectionsRequest_InclusionFilters::getProtectionNames() const {
    return m_protection_names;
}
void OAIListProtectionsRequest_InclusionFilters::setProtectionNames(const QList &protection_names) {
    m_protection_names = protection_names;
    m_protection_names_isSet = true;
}

bool OAIListProtectionsRequest_InclusionFilters::is_protection_names_Set() const{
    return m_protection_names_isSet;
}

bool OAIListProtectionsRequest_InclusionFilters::is_protection_names_Valid() const{
    return m_protection_names_isValid;
}

QList OAIListProtectionsRequest_InclusionFilters::getResourceTypes() const {
    return m_resource_types;
}
void OAIListProtectionsRequest_InclusionFilters::setResourceTypes(const QList &resource_types) {
    m_resource_types = resource_types;
    m_resource_types_isSet = true;
}

bool OAIListProtectionsRequest_InclusionFilters::is_resource_types_Set() const{
    return m_resource_types_isSet;
}

bool OAIListProtectionsRequest_InclusionFilters::is_resource_types_Valid() const{
    return m_resource_types_isValid;
}

bool OAIListProtectionsRequest_InclusionFilters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_protection_names.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_types.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListProtectionsRequest_InclusionFilters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
