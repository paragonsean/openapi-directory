/**
 * AWS Shield
 * <fullname>Shield Advanced</fullname> <p>This is the <i>Shield Advanced API Reference</i>. This guide is for developers who need detailed information about the Shield Advanced API actions, data types, and errors. For detailed information about WAF and Shield Advanced features and an overview of how to use the WAF and Shield Advanced APIs, see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/\">WAF and Shield Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-06-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttackVectorDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttackVectorDescription::OAIAttackVectorDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttackVectorDescription::OAIAttackVectorDescription() {
    this->initializeModel();
}

OAIAttackVectorDescription::~OAIAttackVectorDescription() {}

void OAIAttackVectorDescription::initializeModel() {

    m_vector_type_isSet = false;
    m_vector_type_isValid = false;
}

void OAIAttackVectorDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttackVectorDescription::fromJsonObject(QJsonObject json) {

    m_vector_type_isValid = ::OpenAPI::fromJsonValue(m_vector_type, json[QString("VectorType")]);
    m_vector_type_isSet = !json[QString("VectorType")].isNull() && m_vector_type_isValid;
}

QString OAIAttackVectorDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttackVectorDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_vector_type_isSet) {
        obj.insert(QString("VectorType"), ::OpenAPI::toJsonValue(m_vector_type));
    }
    return obj;
}

QString OAIAttackVectorDescription::getVectorType() const {
    return m_vector_type;
}
void OAIAttackVectorDescription::setVectorType(const QString &vector_type) {
    m_vector_type = vector_type;
    m_vector_type_isSet = true;
}

bool OAIAttackVectorDescription::is_vector_type_Set() const{
    return m_vector_type_isSet;
}

bool OAIAttackVectorDescription::is_vector_type_Valid() const{
    return m_vector_type_isValid;
}

bool OAIAttackVectorDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_vector_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttackVectorDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_vector_type_isValid && true;
}

} // namespace OpenAPI
