/**
 * AWS Shield
 * <fullname>Shield Advanced</fullname> <p>This is the <i>Shield Advanced API Reference</i>. This guide is for developers who need detailed information about the Shield Advanced API actions, data types, and errors. For detailed information about WAF and Shield Advanced features and an overview of how to use the WAF and Shield Advanced APIs, see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/\">WAF and Shield Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-06-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeAttackResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeAttackResponse::OAIDescribeAttackResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeAttackResponse::OAIDescribeAttackResponse() {
    this->initializeModel();
}

OAIDescribeAttackResponse::~OAIDescribeAttackResponse() {}

void OAIDescribeAttackResponse::initializeModel() {

    m_attack_isSet = false;
    m_attack_isValid = false;
}

void OAIDescribeAttackResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeAttackResponse::fromJsonObject(QJsonObject json) {

    m_attack_isValid = ::OpenAPI::fromJsonValue(m_attack, json[QString("Attack")]);
    m_attack_isSet = !json[QString("Attack")].isNull() && m_attack_isValid;
}

QString OAIDescribeAttackResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeAttackResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_attack.isSet()) {
        obj.insert(QString("Attack"), ::OpenAPI::toJsonValue(m_attack));
    }
    return obj;
}

OAIDescribeAttackResponse_Attack OAIDescribeAttackResponse::getAttack() const {
    return m_attack;
}
void OAIDescribeAttackResponse::setAttack(const OAIDescribeAttackResponse_Attack &attack) {
    m_attack = attack;
    m_attack_isSet = true;
}

bool OAIDescribeAttackResponse::is_attack_Set() const{
    return m_attack_isSet;
}

bool OAIDescribeAttackResponse::is_attack_Valid() const{
    return m_attack_isValid;
}

bool OAIDescribeAttackResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attack.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeAttackResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
