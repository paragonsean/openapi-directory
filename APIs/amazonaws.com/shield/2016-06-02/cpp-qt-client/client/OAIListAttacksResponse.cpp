/**
 * AWS Shield
 * <fullname>Shield Advanced</fullname> <p>This is the <i>Shield Advanced API Reference</i>. This guide is for developers who need detailed information about the Shield Advanced API actions, data types, and errors. For detailed information about WAF and Shield Advanced features and an overview of how to use the WAF and Shield Advanced APIs, see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/\">WAF and Shield Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-06-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListAttacksResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListAttacksResponse::OAIListAttacksResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListAttacksResponse::OAIListAttacksResponse() {
    this->initializeModel();
}

OAIListAttacksResponse::~OAIListAttacksResponse() {}

void OAIListAttacksResponse::initializeModel() {

    m_attack_summaries_isSet = false;
    m_attack_summaries_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListAttacksResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListAttacksResponse::fromJsonObject(QJsonObject json) {

    m_attack_summaries_isValid = ::OpenAPI::fromJsonValue(m_attack_summaries, json[QString("AttackSummaries")]);
    m_attack_summaries_isSet = !json[QString("AttackSummaries")].isNull() && m_attack_summaries_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIListAttacksResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListAttacksResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_attack_summaries.isSet()) {
        obj.insert(QString("AttackSummaries"), ::OpenAPI::toJsonValue(m_attack_summaries));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListAttacksResponse::getAttackSummaries() const {
    return m_attack_summaries;
}
void OAIListAttacksResponse::setAttackSummaries(const QList &attack_summaries) {
    m_attack_summaries = attack_summaries;
    m_attack_summaries_isSet = true;
}

bool OAIListAttacksResponse::is_attack_summaries_Set() const{
    return m_attack_summaries_isSet;
}

bool OAIListAttacksResponse::is_attack_summaries_Valid() const{
    return m_attack_summaries_isValid;
}

QString OAIListAttacksResponse::getNextToken() const {
    return m_next_token;
}
void OAIListAttacksResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListAttacksResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListAttacksResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListAttacksResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attack_summaries.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListAttacksResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
