/**
 * Amazon Elasticsearch Service
 * <fullname>Amazon Elasticsearch Configuration Service</fullname> <p>Use the Amazon Elasticsearch Configuration API to create, configure, and manage Elasticsearch domains.</p> <p>For sample code that uses the Configuration API, see the <a href=\"https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-configuration-samples.html\">Amazon Elasticsearch Service Developer Guide</a>. The guide also contains <a href=\"https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-request-signing.html\">sample code for sending signed HTTP requests to the Elasticsearch APIs</a>.</p> <p>The endpoint for configuration service requests is region-specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#elasticsearch-service-regions\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2015-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonElasticsearchService);
  }
}(this, function(expect, AmazonElasticsearchService) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonElasticsearchService.ReservedElasticsearchInstanceOffering();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ReservedElasticsearchInstanceOffering', function() {
    it('should create an instance of ReservedElasticsearchInstanceOffering', function() {
      // uncomment below and update the code to test ReservedElasticsearchInstanceOffering
      //var instance = new AmazonElasticsearchService.ReservedElasticsearchInstanceOffering();
      //expect(instance).to.be.a(AmazonElasticsearchService.ReservedElasticsearchInstanceOffering);
    });

    it('should have the property reservedElasticsearchInstanceOfferingId (base name: "ReservedElasticsearchInstanceOfferingId")', function() {
      // uncomment below and update the code to test the property reservedElasticsearchInstanceOfferingId
      //var instance = new AmazonElasticsearchService.ReservedElasticsearchInstanceOffering();
      //expect(instance).to.be();
    });

    it('should have the property elasticsearchInstanceType (base name: "ElasticsearchInstanceType")', function() {
      // uncomment below and update the code to test the property elasticsearchInstanceType
      //var instance = new AmazonElasticsearchService.ReservedElasticsearchInstanceOffering();
      //expect(instance).to.be();
    });

    it('should have the property duration (base name: "Duration")', function() {
      // uncomment below and update the code to test the property duration
      //var instance = new AmazonElasticsearchService.ReservedElasticsearchInstanceOffering();
      //expect(instance).to.be();
    });

    it('should have the property fixedPrice (base name: "FixedPrice")', function() {
      // uncomment below and update the code to test the property fixedPrice
      //var instance = new AmazonElasticsearchService.ReservedElasticsearchInstanceOffering();
      //expect(instance).to.be();
    });

    it('should have the property usagePrice (base name: "UsagePrice")', function() {
      // uncomment below and update the code to test the property usagePrice
      //var instance = new AmazonElasticsearchService.ReservedElasticsearchInstanceOffering();
      //expect(instance).to.be();
    });

    it('should have the property currencyCode (base name: "CurrencyCode")', function() {
      // uncomment below and update the code to test the property currencyCode
      //var instance = new AmazonElasticsearchService.ReservedElasticsearchInstanceOffering();
      //expect(instance).to.be();
    });

    it('should have the property paymentOption (base name: "PaymentOption")', function() {
      // uncomment below and update the code to test the property paymentOption
      //var instance = new AmazonElasticsearchService.ReservedElasticsearchInstanceOffering();
      //expect(instance).to.be();
    });

    it('should have the property recurringCharges (base name: "RecurringCharges")', function() {
      // uncomment below and update the code to test the property recurringCharges
      //var instance = new AmazonElasticsearchService.ReservedElasticsearchInstanceOffering();
      //expect(instance).to.be();
    });

  });

}));
