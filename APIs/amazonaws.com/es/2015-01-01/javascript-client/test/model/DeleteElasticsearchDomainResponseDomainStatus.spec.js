/**
 * Amazon Elasticsearch Service
 * <fullname>Amazon Elasticsearch Configuration Service</fullname> <p>Use the Amazon Elasticsearch Configuration API to create, configure, and manage Elasticsearch domains.</p> <p>For sample code that uses the Configuration API, see the <a href=\"https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-configuration-samples.html\">Amazon Elasticsearch Service Developer Guide</a>. The guide also contains <a href=\"https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-request-signing.html\">sample code for sending signed HTTP requests to the Elasticsearch APIs</a>.</p> <p>The endpoint for configuration service requests is region-specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#elasticsearch-service-regions\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2015-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonElasticsearchService);
  }
}(this, function(expect, AmazonElasticsearchService) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonElasticsearchService.DeleteElasticsearchDomainResponseDomainStatus();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DeleteElasticsearchDomainResponseDomainStatus', function() {
    it('should create an instance of DeleteElasticsearchDomainResponseDomainStatus', function() {
      // uncomment below and update the code to test DeleteElasticsearchDomainResponseDomainStatus
      //var instance = new AmazonElasticsearchService.DeleteElasticsearchDomainResponseDomainStatus();
      //expect(instance).to.be.a(AmazonElasticsearchService.DeleteElasticsearchDomainResponseDomainStatus);
    });

    it('should have the property domainId (base name: "DomainId")', function() {
      // uncomment below and update the code to test the property domainId
      //var instance = new AmazonElasticsearchService.DeleteElasticsearchDomainResponseDomainStatus();
      //expect(instance).to.be();
    });

    it('should have the property domainName (base name: "DomainName")', function() {
      // uncomment below and update the code to test the property domainName
      //var instance = new AmazonElasticsearchService.DeleteElasticsearchDomainResponseDomainStatus();
      //expect(instance).to.be();
    });

    it('should have the property ARN (base name: "ARN")', function() {
      // uncomment below and update the code to test the property ARN
      //var instance = new AmazonElasticsearchService.DeleteElasticsearchDomainResponseDomainStatus();
      //expect(instance).to.be();
    });

    it('should have the property created (base name: "Created")', function() {
      // uncomment below and update the code to test the property created
      //var instance = new AmazonElasticsearchService.DeleteElasticsearchDomainResponseDomainStatus();
      //expect(instance).to.be();
    });

    it('should have the property deleted (base name: "Deleted")', function() {
      // uncomment below and update the code to test the property deleted
      //var instance = new AmazonElasticsearchService.DeleteElasticsearchDomainResponseDomainStatus();
      //expect(instance).to.be();
    });

    it('should have the property endpoint (base name: "Endpoint")', function() {
      // uncomment below and update the code to test the property endpoint
      //var instance = new AmazonElasticsearchService.DeleteElasticsearchDomainResponseDomainStatus();
      //expect(instance).to.be();
    });

    it('should have the property endpoints (base name: "Endpoints")', function() {
      // uncomment below and update the code to test the property endpoints
      //var instance = new AmazonElasticsearchService.DeleteElasticsearchDomainResponseDomainStatus();
      //expect(instance).to.be();
    });

    it('should have the property processing (base name: "Processing")', function() {
      // uncomment below and update the code to test the property processing
      //var instance = new AmazonElasticsearchService.DeleteElasticsearchDomainResponseDomainStatus();
      //expect(instance).to.be();
    });

    it('should have the property upgradeProcessing (base name: "UpgradeProcessing")', function() {
      // uncomment below and update the code to test the property upgradeProcessing
      //var instance = new AmazonElasticsearchService.DeleteElasticsearchDomainResponseDomainStatus();
      //expect(instance).to.be();
    });

    it('should have the property elasticsearchVersion (base name: "ElasticsearchVersion")', function() {
      // uncomment below and update the code to test the property elasticsearchVersion
      //var instance = new AmazonElasticsearchService.DeleteElasticsearchDomainResponseDomainStatus();
      //expect(instance).to.be();
    });

    it('should have the property elasticsearchClusterConfig (base name: "ElasticsearchClusterConfig")', function() {
      // uncomment below and update the code to test the property elasticsearchClusterConfig
      //var instance = new AmazonElasticsearchService.DeleteElasticsearchDomainResponseDomainStatus();
      //expect(instance).to.be();
    });

    it('should have the property eBSOptions (base name: "EBSOptions")', function() {
      // uncomment below and update the code to test the property eBSOptions
      //var instance = new AmazonElasticsearchService.DeleteElasticsearchDomainResponseDomainStatus();
      //expect(instance).to.be();
    });

    it('should have the property accessPolicies (base name: "AccessPolicies")', function() {
      // uncomment below and update the code to test the property accessPolicies
      //var instance = new AmazonElasticsearchService.DeleteElasticsearchDomainResponseDomainStatus();
      //expect(instance).to.be();
    });

    it('should have the property snapshotOptions (base name: "SnapshotOptions")', function() {
      // uncomment below and update the code to test the property snapshotOptions
      //var instance = new AmazonElasticsearchService.DeleteElasticsearchDomainResponseDomainStatus();
      //expect(instance).to.be();
    });

    it('should have the property vPCOptions (base name: "VPCOptions")', function() {
      // uncomment below and update the code to test the property vPCOptions
      //var instance = new AmazonElasticsearchService.DeleteElasticsearchDomainResponseDomainStatus();
      //expect(instance).to.be();
    });

    it('should have the property cognitoOptions (base name: "CognitoOptions")', function() {
      // uncomment below and update the code to test the property cognitoOptions
      //var instance = new AmazonElasticsearchService.DeleteElasticsearchDomainResponseDomainStatus();
      //expect(instance).to.be();
    });

    it('should have the property encryptionAtRestOptions (base name: "EncryptionAtRestOptions")', function() {
      // uncomment below and update the code to test the property encryptionAtRestOptions
      //var instance = new AmazonElasticsearchService.DeleteElasticsearchDomainResponseDomainStatus();
      //expect(instance).to.be();
    });

    it('should have the property nodeToNodeEncryptionOptions (base name: "NodeToNodeEncryptionOptions")', function() {
      // uncomment below and update the code to test the property nodeToNodeEncryptionOptions
      //var instance = new AmazonElasticsearchService.DeleteElasticsearchDomainResponseDomainStatus();
      //expect(instance).to.be();
    });

    it('should have the property advancedOptions (base name: "AdvancedOptions")', function() {
      // uncomment below and update the code to test the property advancedOptions
      //var instance = new AmazonElasticsearchService.DeleteElasticsearchDomainResponseDomainStatus();
      //expect(instance).to.be();
    });

    it('should have the property logPublishingOptions (base name: "LogPublishingOptions")', function() {
      // uncomment below and update the code to test the property logPublishingOptions
      //var instance = new AmazonElasticsearchService.DeleteElasticsearchDomainResponseDomainStatus();
      //expect(instance).to.be();
    });

    it('should have the property serviceSoftwareOptions (base name: "ServiceSoftwareOptions")', function() {
      // uncomment below and update the code to test the property serviceSoftwareOptions
      //var instance = new AmazonElasticsearchService.DeleteElasticsearchDomainResponseDomainStatus();
      //expect(instance).to.be();
    });

    it('should have the property domainEndpointOptions (base name: "DomainEndpointOptions")', function() {
      // uncomment below and update the code to test the property domainEndpointOptions
      //var instance = new AmazonElasticsearchService.DeleteElasticsearchDomainResponseDomainStatus();
      //expect(instance).to.be();
    });

    it('should have the property advancedSecurityOptions (base name: "AdvancedSecurityOptions")', function() {
      // uncomment below and update the code to test the property advancedSecurityOptions
      //var instance = new AmazonElasticsearchService.DeleteElasticsearchDomainResponseDomainStatus();
      //expect(instance).to.be();
    });

    it('should have the property autoTuneOptions (base name: "AutoTuneOptions")', function() {
      // uncomment below and update the code to test the property autoTuneOptions
      //var instance = new AmazonElasticsearchService.DeleteElasticsearchDomainResponseDomainStatus();
      //expect(instance).to.be();
    });

    it('should have the property changeProgressDetails (base name: "ChangeProgressDetails")', function() {
      // uncomment below and update the code to test the property changeProgressDetails
      //var instance = new AmazonElasticsearchService.DeleteElasticsearchDomainResponseDomainStatus();
      //expect(instance).to.be();
    });

  });

}));
