/**
 * Amazon Elasticsearch Service
 * <fullname>Amazon Elasticsearch Configuration Service</fullname> <p>Use the Amazon Elasticsearch Configuration API to create, configure, and manage Elasticsearch domains.</p> <p>For sample code that uses the Configuration API, see the <a href=\"https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-configuration-samples.html\">Amazon Elasticsearch Service Developer Guide</a>. The guide also contains <a href=\"https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-request-signing.html\">sample code for sending signed HTTP requests to the Elasticsearch APIs</a>.</p> <p>The endpoint for configuration service requests is region-specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#elasticsearch-service-regions\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2015-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonElasticsearchService);
  }
}(this, function(expect, AmazonElasticsearchService) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonElasticsearchService.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('acceptInboundCrossClusterSearchConnection', function() {
      it('should call acceptInboundCrossClusterSearchConnection successfully', function(done) {
        //uncomment below and update the code to test acceptInboundCrossClusterSearchConnection
        //instance.acceptInboundCrossClusterSearchConnection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addTags', function() {
      it('should call addTags successfully', function(done) {
        //uncomment below and update the code to test addTags
        //instance.addTags(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('associatePackage', function() {
      it('should call associatePackage successfully', function(done) {
        //uncomment below and update the code to test associatePackage
        //instance.associatePackage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('authorizeVpcEndpointAccess', function() {
      it('should call authorizeVpcEndpointAccess successfully', function(done) {
        //uncomment below and update the code to test authorizeVpcEndpointAccess
        //instance.authorizeVpcEndpointAccess(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cancelElasticsearchServiceSoftwareUpdate', function() {
      it('should call cancelElasticsearchServiceSoftwareUpdate successfully', function(done) {
        //uncomment below and update the code to test cancelElasticsearchServiceSoftwareUpdate
        //instance.cancelElasticsearchServiceSoftwareUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createElasticsearchDomain', function() {
      it('should call createElasticsearchDomain successfully', function(done) {
        //uncomment below and update the code to test createElasticsearchDomain
        //instance.createElasticsearchDomain(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createOutboundCrossClusterSearchConnection', function() {
      it('should call createOutboundCrossClusterSearchConnection successfully', function(done) {
        //uncomment below and update the code to test createOutboundCrossClusterSearchConnection
        //instance.createOutboundCrossClusterSearchConnection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createPackage', function() {
      it('should call createPackage successfully', function(done) {
        //uncomment below and update the code to test createPackage
        //instance.createPackage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createVpcEndpoint', function() {
      it('should call createVpcEndpoint successfully', function(done) {
        //uncomment below and update the code to test createVpcEndpoint
        //instance.createVpcEndpoint(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteElasticsearchDomain', function() {
      it('should call deleteElasticsearchDomain successfully', function(done) {
        //uncomment below and update the code to test deleteElasticsearchDomain
        //instance.deleteElasticsearchDomain(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteElasticsearchServiceRole', function() {
      it('should call deleteElasticsearchServiceRole successfully', function(done) {
        //uncomment below and update the code to test deleteElasticsearchServiceRole
        //instance.deleteElasticsearchServiceRole(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteInboundCrossClusterSearchConnection', function() {
      it('should call deleteInboundCrossClusterSearchConnection successfully', function(done) {
        //uncomment below and update the code to test deleteInboundCrossClusterSearchConnection
        //instance.deleteInboundCrossClusterSearchConnection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteOutboundCrossClusterSearchConnection', function() {
      it('should call deleteOutboundCrossClusterSearchConnection successfully', function(done) {
        //uncomment below and update the code to test deleteOutboundCrossClusterSearchConnection
        //instance.deleteOutboundCrossClusterSearchConnection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deletePackage', function() {
      it('should call deletePackage successfully', function(done) {
        //uncomment below and update the code to test deletePackage
        //instance.deletePackage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteVpcEndpoint', function() {
      it('should call deleteVpcEndpoint successfully', function(done) {
        //uncomment below and update the code to test deleteVpcEndpoint
        //instance.deleteVpcEndpoint(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeDomainAutoTunes', function() {
      it('should call describeDomainAutoTunes successfully', function(done) {
        //uncomment below and update the code to test describeDomainAutoTunes
        //instance.describeDomainAutoTunes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeDomainChangeProgress', function() {
      it('should call describeDomainChangeProgress successfully', function(done) {
        //uncomment below and update the code to test describeDomainChangeProgress
        //instance.describeDomainChangeProgress(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeElasticsearchDomain', function() {
      it('should call describeElasticsearchDomain successfully', function(done) {
        //uncomment below and update the code to test describeElasticsearchDomain
        //instance.describeElasticsearchDomain(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeElasticsearchDomainConfig', function() {
      it('should call describeElasticsearchDomainConfig successfully', function(done) {
        //uncomment below and update the code to test describeElasticsearchDomainConfig
        //instance.describeElasticsearchDomainConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeElasticsearchDomains', function() {
      it('should call describeElasticsearchDomains successfully', function(done) {
        //uncomment below and update the code to test describeElasticsearchDomains
        //instance.describeElasticsearchDomains(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeElasticsearchInstanceTypeLimits', function() {
      it('should call describeElasticsearchInstanceTypeLimits successfully', function(done) {
        //uncomment below and update the code to test describeElasticsearchInstanceTypeLimits
        //instance.describeElasticsearchInstanceTypeLimits(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeInboundCrossClusterSearchConnections', function() {
      it('should call describeInboundCrossClusterSearchConnections successfully', function(done) {
        //uncomment below and update the code to test describeInboundCrossClusterSearchConnections
        //instance.describeInboundCrossClusterSearchConnections(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeOutboundCrossClusterSearchConnections', function() {
      it('should call describeOutboundCrossClusterSearchConnections successfully', function(done) {
        //uncomment below and update the code to test describeOutboundCrossClusterSearchConnections
        //instance.describeOutboundCrossClusterSearchConnections(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describePackages', function() {
      it('should call describePackages successfully', function(done) {
        //uncomment below and update the code to test describePackages
        //instance.describePackages(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeReservedElasticsearchInstanceOfferings', function() {
      it('should call describeReservedElasticsearchInstanceOfferings successfully', function(done) {
        //uncomment below and update the code to test describeReservedElasticsearchInstanceOfferings
        //instance.describeReservedElasticsearchInstanceOfferings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeReservedElasticsearchInstances', function() {
      it('should call describeReservedElasticsearchInstances successfully', function(done) {
        //uncomment below and update the code to test describeReservedElasticsearchInstances
        //instance.describeReservedElasticsearchInstances(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeVpcEndpoints', function() {
      it('should call describeVpcEndpoints successfully', function(done) {
        //uncomment below and update the code to test describeVpcEndpoints
        //instance.describeVpcEndpoints(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dissociatePackage', function() {
      it('should call dissociatePackage successfully', function(done) {
        //uncomment below and update the code to test dissociatePackage
        //instance.dissociatePackage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCompatibleElasticsearchVersions', function() {
      it('should call getCompatibleElasticsearchVersions successfully', function(done) {
        //uncomment below and update the code to test getCompatibleElasticsearchVersions
        //instance.getCompatibleElasticsearchVersions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPackageVersionHistory', function() {
      it('should call getPackageVersionHistory successfully', function(done) {
        //uncomment below and update the code to test getPackageVersionHistory
        //instance.getPackageVersionHistory(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUpgradeHistory', function() {
      it('should call getUpgradeHistory successfully', function(done) {
        //uncomment below and update the code to test getUpgradeHistory
        //instance.getUpgradeHistory(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUpgradeStatus', function() {
      it('should call getUpgradeStatus successfully', function(done) {
        //uncomment below and update the code to test getUpgradeStatus
        //instance.getUpgradeStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listDomainNames', function() {
      it('should call listDomainNames successfully', function(done) {
        //uncomment below and update the code to test listDomainNames
        //instance.listDomainNames(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listDomainsForPackage', function() {
      it('should call listDomainsForPackage successfully', function(done) {
        //uncomment below and update the code to test listDomainsForPackage
        //instance.listDomainsForPackage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listElasticsearchInstanceTypes', function() {
      it('should call listElasticsearchInstanceTypes successfully', function(done) {
        //uncomment below and update the code to test listElasticsearchInstanceTypes
        //instance.listElasticsearchInstanceTypes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listElasticsearchVersions', function() {
      it('should call listElasticsearchVersions successfully', function(done) {
        //uncomment below and update the code to test listElasticsearchVersions
        //instance.listElasticsearchVersions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listPackagesForDomain', function() {
      it('should call listPackagesForDomain successfully', function(done) {
        //uncomment below and update the code to test listPackagesForDomain
        //instance.listPackagesForDomain(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTags', function() {
      it('should call listTags successfully', function(done) {
        //uncomment below and update the code to test listTags
        //instance.listTags(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listVpcEndpointAccess', function() {
      it('should call listVpcEndpointAccess successfully', function(done) {
        //uncomment below and update the code to test listVpcEndpointAccess
        //instance.listVpcEndpointAccess(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listVpcEndpoints', function() {
      it('should call listVpcEndpoints successfully', function(done) {
        //uncomment below and update the code to test listVpcEndpoints
        //instance.listVpcEndpoints(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listVpcEndpointsForDomain', function() {
      it('should call listVpcEndpointsForDomain successfully', function(done) {
        //uncomment below and update the code to test listVpcEndpointsForDomain
        //instance.listVpcEndpointsForDomain(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('purchaseReservedElasticsearchInstanceOffering', function() {
      it('should call purchaseReservedElasticsearchInstanceOffering successfully', function(done) {
        //uncomment below and update the code to test purchaseReservedElasticsearchInstanceOffering
        //instance.purchaseReservedElasticsearchInstanceOffering(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('rejectInboundCrossClusterSearchConnection', function() {
      it('should call rejectInboundCrossClusterSearchConnection successfully', function(done) {
        //uncomment below and update the code to test rejectInboundCrossClusterSearchConnection
        //instance.rejectInboundCrossClusterSearchConnection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeTags', function() {
      it('should call removeTags successfully', function(done) {
        //uncomment below and update the code to test removeTags
        //instance.removeTags(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('revokeVpcEndpointAccess', function() {
      it('should call revokeVpcEndpointAccess successfully', function(done) {
        //uncomment below and update the code to test revokeVpcEndpointAccess
        //instance.revokeVpcEndpointAccess(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startElasticsearchServiceSoftwareUpdate', function() {
      it('should call startElasticsearchServiceSoftwareUpdate successfully', function(done) {
        //uncomment below and update the code to test startElasticsearchServiceSoftwareUpdate
        //instance.startElasticsearchServiceSoftwareUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateElasticsearchDomainConfig', function() {
      it('should call updateElasticsearchDomainConfig successfully', function(done) {
        //uncomment below and update the code to test updateElasticsearchDomainConfig
        //instance.updateElasticsearchDomainConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updatePackage', function() {
      it('should call updatePackage successfully', function(done) {
        //uncomment below and update the code to test updatePackage
        //instance.updatePackage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateVpcEndpoint', function() {
      it('should call updateVpcEndpoint successfully', function(done) {
        //uncomment below and update the code to test updateVpcEndpoint
        //instance.updateVpcEndpoint(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('upgradeElasticsearchDomain', function() {
      it('should call upgradeElasticsearchDomain successfully', function(done) {
        //uncomment below and update the code to test upgradeElasticsearchDomain
        //instance.upgradeElasticsearchDomain(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
