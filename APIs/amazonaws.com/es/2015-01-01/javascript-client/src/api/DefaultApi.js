/**
 * Amazon Elasticsearch Service
 * <fullname>Amazon Elasticsearch Configuration Service</fullname> <p>Use the Amazon Elasticsearch Configuration API to create, configure, and manage Elasticsearch domains.</p> <p>For sample code that uses the Configuration API, see the <a href=\"https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-configuration-samples.html\">Amazon Elasticsearch Service Developer Guide</a>. The guide also contains <a href=\"https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-request-signing.html\">sample code for sending signed HTTP requests to the Elasticsearch APIs</a>.</p> <p>The endpoint for configuration service requests is region-specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#elasticsearch-service-regions\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2015-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AcceptInboundCrossClusterSearchConnectionResponse from '../model/AcceptInboundCrossClusterSearchConnectionResponse';
import AddTagsRequest from '../model/AddTagsRequest';
import AssociatePackageResponse from '../model/AssociatePackageResponse';
import AuthorizeVpcEndpointAccessRequest from '../model/AuthorizeVpcEndpointAccessRequest';
import AuthorizeVpcEndpointAccessResponse from '../model/AuthorizeVpcEndpointAccessResponse';
import CancelElasticsearchServiceSoftwareUpdateRequest from '../model/CancelElasticsearchServiceSoftwareUpdateRequest';
import CancelElasticsearchServiceSoftwareUpdateResponse from '../model/CancelElasticsearchServiceSoftwareUpdateResponse';
import CreateElasticsearchDomainRequest from '../model/CreateElasticsearchDomainRequest';
import CreateElasticsearchDomainResponse from '../model/CreateElasticsearchDomainResponse';
import CreateOutboundCrossClusterSearchConnectionRequest from '../model/CreateOutboundCrossClusterSearchConnectionRequest';
import CreateOutboundCrossClusterSearchConnectionResponse from '../model/CreateOutboundCrossClusterSearchConnectionResponse';
import CreatePackageRequest from '../model/CreatePackageRequest';
import CreatePackageResponse from '../model/CreatePackageResponse';
import CreateVpcEndpointRequest from '../model/CreateVpcEndpointRequest';
import CreateVpcEndpointResponse from '../model/CreateVpcEndpointResponse';
import DeleteElasticsearchDomainResponse from '../model/DeleteElasticsearchDomainResponse';
import DeleteInboundCrossClusterSearchConnectionResponse from '../model/DeleteInboundCrossClusterSearchConnectionResponse';
import DeleteOutboundCrossClusterSearchConnectionResponse from '../model/DeleteOutboundCrossClusterSearchConnectionResponse';
import DeletePackageResponse from '../model/DeletePackageResponse';
import DeleteVpcEndpointResponse from '../model/DeleteVpcEndpointResponse';
import DescribeDomainAutoTunesRequest from '../model/DescribeDomainAutoTunesRequest';
import DescribeDomainAutoTunesResponse from '../model/DescribeDomainAutoTunesResponse';
import DescribeDomainChangeProgressResponse from '../model/DescribeDomainChangeProgressResponse';
import DescribeElasticsearchDomainConfigResponse from '../model/DescribeElasticsearchDomainConfigResponse';
import DescribeElasticsearchDomainResponse from '../model/DescribeElasticsearchDomainResponse';
import DescribeElasticsearchDomainsRequest from '../model/DescribeElasticsearchDomainsRequest';
import DescribeElasticsearchDomainsResponse from '../model/DescribeElasticsearchDomainsResponse';
import DescribeElasticsearchInstanceTypeLimitsResponse from '../model/DescribeElasticsearchInstanceTypeLimitsResponse';
import DescribeInboundCrossClusterSearchConnectionsRequest from '../model/DescribeInboundCrossClusterSearchConnectionsRequest';
import DescribeInboundCrossClusterSearchConnectionsResponse from '../model/DescribeInboundCrossClusterSearchConnectionsResponse';
import DescribeOutboundCrossClusterSearchConnectionsRequest from '../model/DescribeOutboundCrossClusterSearchConnectionsRequest';
import DescribeOutboundCrossClusterSearchConnectionsResponse from '../model/DescribeOutboundCrossClusterSearchConnectionsResponse';
import DescribePackagesRequest from '../model/DescribePackagesRequest';
import DescribePackagesResponse from '../model/DescribePackagesResponse';
import DescribeReservedElasticsearchInstanceOfferingsResponse from '../model/DescribeReservedElasticsearchInstanceOfferingsResponse';
import DescribeReservedElasticsearchInstancesResponse from '../model/DescribeReservedElasticsearchInstancesResponse';
import DescribeVpcEndpointsRequest from '../model/DescribeVpcEndpointsRequest';
import DescribeVpcEndpointsResponse from '../model/DescribeVpcEndpointsResponse';
import DissociatePackageResponse from '../model/DissociatePackageResponse';
import GetCompatibleElasticsearchVersionsResponse from '../model/GetCompatibleElasticsearchVersionsResponse';
import GetPackageVersionHistoryResponse from '../model/GetPackageVersionHistoryResponse';
import GetUpgradeHistoryResponse from '../model/GetUpgradeHistoryResponse';
import GetUpgradeStatusResponse from '../model/GetUpgradeStatusResponse';
import ListDomainNamesResponse from '../model/ListDomainNamesResponse';
import ListDomainsForPackageResponse from '../model/ListDomainsForPackageResponse';
import ListElasticsearchInstanceTypesResponse from '../model/ListElasticsearchInstanceTypesResponse';
import ListElasticsearchVersionsResponse from '../model/ListElasticsearchVersionsResponse';
import ListPackagesForDomainResponse from '../model/ListPackagesForDomainResponse';
import ListTagsResponse from '../model/ListTagsResponse';
import ListVpcEndpointAccessResponse from '../model/ListVpcEndpointAccessResponse';
import ListVpcEndpointsForDomainResponse from '../model/ListVpcEndpointsForDomainResponse';
import ListVpcEndpointsResponse from '../model/ListVpcEndpointsResponse';
import PurchaseReservedElasticsearchInstanceOfferingRequest from '../model/PurchaseReservedElasticsearchInstanceOfferingRequest';
import PurchaseReservedElasticsearchInstanceOfferingResponse from '../model/PurchaseReservedElasticsearchInstanceOfferingResponse';
import RejectInboundCrossClusterSearchConnectionResponse from '../model/RejectInboundCrossClusterSearchConnectionResponse';
import RemoveTagsRequest from '../model/RemoveTagsRequest';
import RevokeVpcEndpointAccessRequest from '../model/RevokeVpcEndpointAccessRequest';
import StartElasticsearchServiceSoftwareUpdateResponse from '../model/StartElasticsearchServiceSoftwareUpdateResponse';
import UpdateElasticsearchDomainConfigRequest from '../model/UpdateElasticsearchDomainConfigRequest';
import UpdateElasticsearchDomainConfigResponse from '../model/UpdateElasticsearchDomainConfigResponse';
import UpdatePackageRequest from '../model/UpdatePackageRequest';
import UpdatePackageResponse from '../model/UpdatePackageResponse';
import UpdateVpcEndpointRequest from '../model/UpdateVpcEndpointRequest';
import UpdateVpcEndpointResponse from '../model/UpdateVpcEndpointResponse';
import UpgradeElasticsearchDomainRequest from '../model/UpgradeElasticsearchDomainRequest';
import UpgradeElasticsearchDomainResponse from '../model/UpgradeElasticsearchDomainResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 2015-01-01
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the acceptInboundCrossClusterSearchConnection operation.
     * @callback module:api/DefaultApi~acceptInboundCrossClusterSearchConnectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AcceptInboundCrossClusterSearchConnectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Allows the destination domain owner to accept an inbound cross-cluster search connection request.
     * @param {String} connectionId The id of the inbound connection that you want to accept.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~acceptInboundCrossClusterSearchConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AcceptInboundCrossClusterSearchConnectionResponse}
     */
    acceptInboundCrossClusterSearchConnection(connectionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'connectionId' is set
      if (connectionId === undefined || connectionId === null) {
        throw new Error("Missing the required parameter 'connectionId' when calling acceptInboundCrossClusterSearchConnection");
      }

      let pathParams = {
        'ConnectionId': connectionId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AcceptInboundCrossClusterSearchConnectionResponse;
      return this.apiClient.callApi(
        '/2015-01-01/es/ccs/inboundConnection/{ConnectionId}/accept', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addTags operation.
     * @callback module:api/DefaultApi~addTagsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attaches tags to an existing Elasticsearch domain. Tags are a set of case-sensitive key value pairs. An Elasticsearch domain may have up to 10 tags. See <a href=\"http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-managedomains.html#es-managedomains-awsresorcetagging\" target=\"_blank\"> Tagging Amazon Elasticsearch Service Domains for more information.</a>
     * @param {module:model/AddTagsRequest} addTagsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~addTagsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addTags(addTagsRequest, opts, callback) {
      opts = opts || {};
      let postBody = addTagsRequest;
      // verify the required parameter 'addTagsRequest' is set
      if (addTagsRequest === undefined || addTagsRequest === null) {
        throw new Error("Missing the required parameter 'addTagsRequest' when calling addTags");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/2015-01-01/tags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the associatePackage operation.
     * @callback module:api/DefaultApi~associatePackageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociatePackageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associates a package with an Amazon ES domain.
     * @param {String} packageID Internal ID of the package that you want to associate with a domain. Use <code>DescribePackages</code> to find this value.
     * @param {String} domainName Name of the domain that you want to associate the package with.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~associatePackageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociatePackageResponse}
     */
    associatePackage(packageID, domainName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageID' is set
      if (packageID === undefined || packageID === null) {
        throw new Error("Missing the required parameter 'packageID' when calling associatePackage");
      }
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling associatePackage");
      }

      let pathParams = {
        'PackageID': packageID,
        'DomainName': domainName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociatePackageResponse;
      return this.apiClient.callApi(
        '/2015-01-01/packages/associate/{PackageID}/{DomainName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authorizeVpcEndpointAccess operation.
     * @callback module:api/DefaultApi~authorizeVpcEndpointAccessCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthorizeVpcEndpointAccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provides access to an Amazon OpenSearch Service domain through the use of an interface VPC endpoint.
     * @param {String} domainName The name of the OpenSearch Service domain to provide access to.
     * @param {module:model/AuthorizeVpcEndpointAccessRequest} authorizeVpcEndpointAccessRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~authorizeVpcEndpointAccessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthorizeVpcEndpointAccessResponse}
     */
    authorizeVpcEndpointAccess(domainName, authorizeVpcEndpointAccessRequest, opts, callback) {
      opts = opts || {};
      let postBody = authorizeVpcEndpointAccessRequest;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling authorizeVpcEndpointAccess");
      }
      // verify the required parameter 'authorizeVpcEndpointAccessRequest' is set
      if (authorizeVpcEndpointAccessRequest === undefined || authorizeVpcEndpointAccessRequest === null) {
        throw new Error("Missing the required parameter 'authorizeVpcEndpointAccessRequest' when calling authorizeVpcEndpointAccess");
      }

      let pathParams = {
        'DomainName': domainName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthorizeVpcEndpointAccessResponse;
      return this.apiClient.callApi(
        '/2015-01-01/es/domain/{DomainName}/authorizeVpcEndpointAccess', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cancelElasticsearchServiceSoftwareUpdate operation.
     * @callback module:api/DefaultApi~cancelElasticsearchServiceSoftwareUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CancelElasticsearchServiceSoftwareUpdateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancels a scheduled service software update for an Amazon ES domain. You can only perform this operation before the <code>AutomatedUpdateDate</code> and when the <code>UpdateStatus</code> is in the <code>PENDING_UPDATE</code> state.
     * @param {module:model/CancelElasticsearchServiceSoftwareUpdateRequest} cancelElasticsearchServiceSoftwareUpdateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~cancelElasticsearchServiceSoftwareUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CancelElasticsearchServiceSoftwareUpdateResponse}
     */
    cancelElasticsearchServiceSoftwareUpdate(cancelElasticsearchServiceSoftwareUpdateRequest, opts, callback) {
      opts = opts || {};
      let postBody = cancelElasticsearchServiceSoftwareUpdateRequest;
      // verify the required parameter 'cancelElasticsearchServiceSoftwareUpdateRequest' is set
      if (cancelElasticsearchServiceSoftwareUpdateRequest === undefined || cancelElasticsearchServiceSoftwareUpdateRequest === null) {
        throw new Error("Missing the required parameter 'cancelElasticsearchServiceSoftwareUpdateRequest' when calling cancelElasticsearchServiceSoftwareUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CancelElasticsearchServiceSoftwareUpdateResponse;
      return this.apiClient.callApi(
        '/2015-01-01/es/serviceSoftwareUpdate/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createElasticsearchDomain operation.
     * @callback module:api/DefaultApi~createElasticsearchDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateElasticsearchDomainResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new Elasticsearch domain. For more information, see <a href=\"http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-createupdatedomains.html#es-createdomains\" target=\"_blank\">Creating Elasticsearch Domains</a> in the <i>Amazon Elasticsearch Service Developer Guide</i>.
     * @param {module:model/CreateElasticsearchDomainRequest} createElasticsearchDomainRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createElasticsearchDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateElasticsearchDomainResponse}
     */
    createElasticsearchDomain(createElasticsearchDomainRequest, opts, callback) {
      opts = opts || {};
      let postBody = createElasticsearchDomainRequest;
      // verify the required parameter 'createElasticsearchDomainRequest' is set
      if (createElasticsearchDomainRequest === undefined || createElasticsearchDomainRequest === null) {
        throw new Error("Missing the required parameter 'createElasticsearchDomainRequest' when calling createElasticsearchDomain");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateElasticsearchDomainResponse;
      return this.apiClient.callApi(
        '/2015-01-01/es/domain', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOutboundCrossClusterSearchConnection operation.
     * @callback module:api/DefaultApi~createOutboundCrossClusterSearchConnectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateOutboundCrossClusterSearchConnectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new cross-cluster search connection from a source domain to a destination domain.
     * @param {module:model/CreateOutboundCrossClusterSearchConnectionRequest} createOutboundCrossClusterSearchConnectionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createOutboundCrossClusterSearchConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateOutboundCrossClusterSearchConnectionResponse}
     */
    createOutboundCrossClusterSearchConnection(createOutboundCrossClusterSearchConnectionRequest, opts, callback) {
      opts = opts || {};
      let postBody = createOutboundCrossClusterSearchConnectionRequest;
      // verify the required parameter 'createOutboundCrossClusterSearchConnectionRequest' is set
      if (createOutboundCrossClusterSearchConnectionRequest === undefined || createOutboundCrossClusterSearchConnectionRequest === null) {
        throw new Error("Missing the required parameter 'createOutboundCrossClusterSearchConnectionRequest' when calling createOutboundCrossClusterSearchConnection");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateOutboundCrossClusterSearchConnectionResponse;
      return this.apiClient.callApi(
        '/2015-01-01/es/ccs/outboundConnection', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPackage operation.
     * @callback module:api/DefaultApi~createPackageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatePackageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a package for use with Amazon ES domains.
     * @param {module:model/CreatePackageRequest} createPackageRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createPackageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreatePackageResponse}
     */
    createPackage(createPackageRequest, opts, callback) {
      opts = opts || {};
      let postBody = createPackageRequest;
      // verify the required parameter 'createPackageRequest' is set
      if (createPackageRequest === undefined || createPackageRequest === null) {
        throw new Error("Missing the required parameter 'createPackageRequest' when calling createPackage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreatePackageResponse;
      return this.apiClient.callApi(
        '/2015-01-01/packages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createVpcEndpoint operation.
     * @callback module:api/DefaultApi~createVpcEndpointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateVpcEndpointResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an Amazon OpenSearch Service-managed VPC endpoint.
     * @param {module:model/CreateVpcEndpointRequest} createVpcEndpointRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createVpcEndpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateVpcEndpointResponse}
     */
    createVpcEndpoint(createVpcEndpointRequest, opts, callback) {
      opts = opts || {};
      let postBody = createVpcEndpointRequest;
      // verify the required parameter 'createVpcEndpointRequest' is set
      if (createVpcEndpointRequest === undefined || createVpcEndpointRequest === null) {
        throw new Error("Missing the required parameter 'createVpcEndpointRequest' when calling createVpcEndpoint");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateVpcEndpointResponse;
      return this.apiClient.callApi(
        '/2015-01-01/es/vpcEndpoints', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteElasticsearchDomain operation.
     * @callback module:api/DefaultApi~deleteElasticsearchDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteElasticsearchDomainResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Permanently deletes the specified Elasticsearch domain and all of its data. Once a domain is deleted, it cannot be recovered.
     * @param {String} domainName The name of the Elasticsearch domain that you want to permanently delete.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteElasticsearchDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteElasticsearchDomainResponse}
     */
    deleteElasticsearchDomain(domainName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling deleteElasticsearchDomain");
      }

      let pathParams = {
        'DomainName': domainName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteElasticsearchDomainResponse;
      return this.apiClient.callApi(
        '/2015-01-01/es/domain/{DomainName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteElasticsearchServiceRole operation.
     * @callback module:api/DefaultApi~deleteElasticsearchServiceRoleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the service-linked role that Elasticsearch Service uses to manage and maintain VPC domains. Role deletion will fail if any existing VPC domains use the role. You must delete any such Elasticsearch domains before deleting the role. See <a href=\"http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-vpc.html#es-enabling-slr\" target=\"_blank\">Deleting Elasticsearch Service Role</a> in <i>VPC Endpoints for Amazon Elasticsearch Service Domains</i>.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteElasticsearchServiceRoleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteElasticsearchServiceRole(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/2015-01-01/es/role', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteInboundCrossClusterSearchConnection operation.
     * @callback module:api/DefaultApi~deleteInboundCrossClusterSearchConnectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteInboundCrossClusterSearchConnectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Allows the destination domain owner to delete an existing inbound cross-cluster search connection.
     * @param {String} connectionId The id of the inbound connection that you want to permanently delete.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteInboundCrossClusterSearchConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteInboundCrossClusterSearchConnectionResponse}
     */
    deleteInboundCrossClusterSearchConnection(connectionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'connectionId' is set
      if (connectionId === undefined || connectionId === null) {
        throw new Error("Missing the required parameter 'connectionId' when calling deleteInboundCrossClusterSearchConnection");
      }

      let pathParams = {
        'ConnectionId': connectionId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteInboundCrossClusterSearchConnectionResponse;
      return this.apiClient.callApi(
        '/2015-01-01/es/ccs/inboundConnection/{ConnectionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOutboundCrossClusterSearchConnection operation.
     * @callback module:api/DefaultApi~deleteOutboundCrossClusterSearchConnectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteOutboundCrossClusterSearchConnectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Allows the source domain owner to delete an existing outbound cross-cluster search connection.
     * @param {String} connectionId The id of the outbound connection that you want to permanently delete.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteOutboundCrossClusterSearchConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteOutboundCrossClusterSearchConnectionResponse}
     */
    deleteOutboundCrossClusterSearchConnection(connectionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'connectionId' is set
      if (connectionId === undefined || connectionId === null) {
        throw new Error("Missing the required parameter 'connectionId' when calling deleteOutboundCrossClusterSearchConnection");
      }

      let pathParams = {
        'ConnectionId': connectionId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteOutboundCrossClusterSearchConnectionResponse;
      return this.apiClient.callApi(
        '/2015-01-01/es/ccs/outboundConnection/{ConnectionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePackage operation.
     * @callback module:api/DefaultApi~deletePackageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeletePackageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the package.
     * @param {String} packageID Internal ID of the package that you want to delete. Use <code>DescribePackages</code> to find this value.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deletePackageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeletePackageResponse}
     */
    deletePackage(packageID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageID' is set
      if (packageID === undefined || packageID === null) {
        throw new Error("Missing the required parameter 'packageID' when calling deletePackage");
      }

      let pathParams = {
        'PackageID': packageID
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeletePackageResponse;
      return this.apiClient.callApi(
        '/2015-01-01/packages/{PackageID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteVpcEndpoint operation.
     * @callback module:api/DefaultApi~deleteVpcEndpointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteVpcEndpointResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an Amazon OpenSearch Service-managed interface VPC endpoint.
     * @param {String} vpcEndpointId The unique identifier of the endpoint to be deleted.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteVpcEndpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteVpcEndpointResponse}
     */
    deleteVpcEndpoint(vpcEndpointId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'vpcEndpointId' is set
      if (vpcEndpointId === undefined || vpcEndpointId === null) {
        throw new Error("Missing the required parameter 'vpcEndpointId' when calling deleteVpcEndpoint");
      }

      let pathParams = {
        'VpcEndpointId': vpcEndpointId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteVpcEndpointResponse;
      return this.apiClient.callApi(
        '/2015-01-01/es/vpcEndpoints/{VpcEndpointId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeDomainAutoTunes operation.
     * @callback module:api/DefaultApi~describeDomainAutoTunesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeDomainAutoTunesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provides scheduled Auto-Tune action details for the Elasticsearch domain, such as Auto-Tune action type, description, severity, and scheduled date.
     * @param {String} domainName Specifies the domain name for which you want Auto-Tune action details.
     * @param {module:model/DescribeDomainAutoTunesRequest} describeDomainAutoTunesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~describeDomainAutoTunesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeDomainAutoTunesResponse}
     */
    describeDomainAutoTunes(domainName, describeDomainAutoTunesRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeDomainAutoTunesRequest;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling describeDomainAutoTunes");
      }
      // verify the required parameter 'describeDomainAutoTunesRequest' is set
      if (describeDomainAutoTunesRequest === undefined || describeDomainAutoTunesRequest === null) {
        throw new Error("Missing the required parameter 'describeDomainAutoTunesRequest' when calling describeDomainAutoTunes");
      }

      let pathParams = {
        'DomainName': domainName
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeDomainAutoTunesResponse;
      return this.apiClient.callApi(
        '/2015-01-01/es/domain/{DomainName}/autoTunes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeDomainChangeProgress operation.
     * @callback module:api/DefaultApi~describeDomainChangeProgressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeDomainChangeProgressResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about the current blue/green deployment happening on a domain, including a change ID, status, and progress stages.
     * @param {String} domainName The domain you want to get the progress information about.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [changeid] The specific change ID for which you want to get progress information. This is an optional parameter. If omitted, the service returns information about the most recent configuration change. 
     * @param {module:api/DefaultApi~describeDomainChangeProgressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeDomainChangeProgressResponse}
     */
    describeDomainChangeProgress(domainName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling describeDomainChangeProgress");
      }

      let pathParams = {
        'DomainName': domainName
      };
      let queryParams = {
        'changeid': opts['changeid']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeDomainChangeProgressResponse;
      return this.apiClient.callApi(
        '/2015-01-01/es/domain/{DomainName}/progress', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeElasticsearchDomain operation.
     * @callback module:api/DefaultApi~describeElasticsearchDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeElasticsearchDomainResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns domain configuration information about the specified Elasticsearch domain, including the domain ID, domain endpoint, and domain ARN.
     * @param {String} domainName The name of the Elasticsearch domain for which you want information.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeElasticsearchDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeElasticsearchDomainResponse}
     */
    describeElasticsearchDomain(domainName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling describeElasticsearchDomain");
      }

      let pathParams = {
        'DomainName': domainName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeElasticsearchDomainResponse;
      return this.apiClient.callApi(
        '/2015-01-01/es/domain/{DomainName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeElasticsearchDomainConfig operation.
     * @callback module:api/DefaultApi~describeElasticsearchDomainConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeElasticsearchDomainConfigResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provides cluster configuration information about the specified Elasticsearch domain, such as the state, creation date, update version, and update date for cluster options.
     * @param {String} domainName The Elasticsearch domain that you want to get information about.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeElasticsearchDomainConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeElasticsearchDomainConfigResponse}
     */
    describeElasticsearchDomainConfig(domainName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling describeElasticsearchDomainConfig");
      }

      let pathParams = {
        'DomainName': domainName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeElasticsearchDomainConfigResponse;
      return this.apiClient.callApi(
        '/2015-01-01/es/domain/{DomainName}/config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeElasticsearchDomains operation.
     * @callback module:api/DefaultApi~describeElasticsearchDomainsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeElasticsearchDomainsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns domain configuration information about the specified Elasticsearch domains, including the domain ID, domain endpoint, and domain ARN.
     * @param {module:model/DescribeElasticsearchDomainsRequest} describeElasticsearchDomainsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeElasticsearchDomainsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeElasticsearchDomainsResponse}
     */
    describeElasticsearchDomains(describeElasticsearchDomainsRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeElasticsearchDomainsRequest;
      // verify the required parameter 'describeElasticsearchDomainsRequest' is set
      if (describeElasticsearchDomainsRequest === undefined || describeElasticsearchDomainsRequest === null) {
        throw new Error("Missing the required parameter 'describeElasticsearchDomainsRequest' when calling describeElasticsearchDomains");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeElasticsearchDomainsResponse;
      return this.apiClient.callApi(
        '/2015-01-01/es/domain-info', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeElasticsearchInstanceTypeLimits operation.
     * @callback module:api/DefaultApi~describeElasticsearchInstanceTypeLimitsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeElasticsearchInstanceTypeLimitsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Describe Elasticsearch Limits for a given InstanceType and ElasticsearchVersion. When modifying existing Domain, specify the <code> <a>DomainName</a> </code> to know what Limits are supported for modifying. 
     * @param {module:model/String} instanceType  The instance type for an Elasticsearch cluster for which Elasticsearch <code> <a>Limits</a> </code> are needed. 
     * @param {String} elasticsearchVersion  Version of Elasticsearch for which <code> <a>Limits</a> </code> are needed. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [domainName]  DomainName represents the name of the Domain that we are trying to modify. This should be present only if we are querying for Elasticsearch <code> <a>Limits</a> </code> for existing domain. 
     * @param {module:api/DefaultApi~describeElasticsearchInstanceTypeLimitsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeElasticsearchInstanceTypeLimitsResponse}
     */
    describeElasticsearchInstanceTypeLimits(instanceType, elasticsearchVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceType' is set
      if (instanceType === undefined || instanceType === null) {
        throw new Error("Missing the required parameter 'instanceType' when calling describeElasticsearchInstanceTypeLimits");
      }
      // verify the required parameter 'elasticsearchVersion' is set
      if (elasticsearchVersion === undefined || elasticsearchVersion === null) {
        throw new Error("Missing the required parameter 'elasticsearchVersion' when calling describeElasticsearchInstanceTypeLimits");
      }

      let pathParams = {
        'InstanceType': instanceType,
        'ElasticsearchVersion': elasticsearchVersion
      };
      let queryParams = {
        'domainName': opts['domainName']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeElasticsearchInstanceTypeLimitsResponse;
      return this.apiClient.callApi(
        '/2015-01-01/es/instanceTypeLimits/{ElasticsearchVersion}/{InstanceType}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeInboundCrossClusterSearchConnections operation.
     * @callback module:api/DefaultApi~describeInboundCrossClusterSearchConnectionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeInboundCrossClusterSearchConnectionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the inbound cross-cluster search connections for a destination domain.
     * @param {module:model/DescribeInboundCrossClusterSearchConnectionsRequest} describeInboundCrossClusterSearchConnectionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~describeInboundCrossClusterSearchConnectionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeInboundCrossClusterSearchConnectionsResponse}
     */
    describeInboundCrossClusterSearchConnections(describeInboundCrossClusterSearchConnectionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeInboundCrossClusterSearchConnectionsRequest;
      // verify the required parameter 'describeInboundCrossClusterSearchConnectionsRequest' is set
      if (describeInboundCrossClusterSearchConnectionsRequest === undefined || describeInboundCrossClusterSearchConnectionsRequest === null) {
        throw new Error("Missing the required parameter 'describeInboundCrossClusterSearchConnectionsRequest' when calling describeInboundCrossClusterSearchConnections");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeInboundCrossClusterSearchConnectionsResponse;
      return this.apiClient.callApi(
        '/2015-01-01/es/ccs/inboundConnection/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeOutboundCrossClusterSearchConnections operation.
     * @callback module:api/DefaultApi~describeOutboundCrossClusterSearchConnectionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeOutboundCrossClusterSearchConnectionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the outbound cross-cluster search connections for a source domain.
     * @param {module:model/DescribeOutboundCrossClusterSearchConnectionsRequest} describeOutboundCrossClusterSearchConnectionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~describeOutboundCrossClusterSearchConnectionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeOutboundCrossClusterSearchConnectionsResponse}
     */
    describeOutboundCrossClusterSearchConnections(describeOutboundCrossClusterSearchConnectionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeOutboundCrossClusterSearchConnectionsRequest;
      // verify the required parameter 'describeOutboundCrossClusterSearchConnectionsRequest' is set
      if (describeOutboundCrossClusterSearchConnectionsRequest === undefined || describeOutboundCrossClusterSearchConnectionsRequest === null) {
        throw new Error("Missing the required parameter 'describeOutboundCrossClusterSearchConnectionsRequest' when calling describeOutboundCrossClusterSearchConnections");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeOutboundCrossClusterSearchConnectionsResponse;
      return this.apiClient.callApi(
        '/2015-01-01/es/ccs/outboundConnection/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describePackages operation.
     * @callback module:api/DefaultApi~describePackagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribePackagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes all packages available to Amazon ES. Includes options for filtering, limiting the number of results, and pagination.
     * @param {module:model/DescribePackagesRequest} describePackagesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~describePackagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribePackagesResponse}
     */
    describePackages(describePackagesRequest, opts, callback) {
      opts = opts || {};
      let postBody = describePackagesRequest;
      // verify the required parameter 'describePackagesRequest' is set
      if (describePackagesRequest === undefined || describePackagesRequest === null) {
        throw new Error("Missing the required parameter 'describePackagesRequest' when calling describePackages");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribePackagesResponse;
      return this.apiClient.callApi(
        '/2015-01-01/packages/describe', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeReservedElasticsearchInstanceOfferings operation.
     * @callback module:api/DefaultApi~describeReservedElasticsearchInstanceOfferingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeReservedElasticsearchInstanceOfferingsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists available reserved Elasticsearch instance offerings.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [offeringId] The offering identifier filter value. Use this parameter to show only the available offering that matches the specified reservation identifier.
     * @param {Number} [maxResults] Set this value to limit the number of results returned. If not specified, defaults to 100.
     * @param {String} [nextToken] NextToken should be sent in case if earlier API call produced result containing NextToken. It is used for pagination.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~describeReservedElasticsearchInstanceOfferingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeReservedElasticsearchInstanceOfferingsResponse}
     */
    describeReservedElasticsearchInstanceOfferings(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'offeringId': opts['offeringId'],
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeReservedElasticsearchInstanceOfferingsResponse;
      return this.apiClient.callApi(
        '/2015-01-01/es/reservedInstanceOfferings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeReservedElasticsearchInstances operation.
     * @callback module:api/DefaultApi~describeReservedElasticsearchInstancesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeReservedElasticsearchInstancesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about reserved Elasticsearch instances for this account.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [reservationId] The reserved instance identifier filter value. Use this parameter to show only the reservation that matches the specified reserved Elasticsearch instance ID.
     * @param {Number} [maxResults] Set this value to limit the number of results returned. If not specified, defaults to 100.
     * @param {String} [nextToken] NextToken should be sent in case if earlier API call produced result containing NextToken. It is used for pagination.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~describeReservedElasticsearchInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeReservedElasticsearchInstancesResponse}
     */
    describeReservedElasticsearchInstances(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'reservationId': opts['reservationId'],
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeReservedElasticsearchInstancesResponse;
      return this.apiClient.callApi(
        '/2015-01-01/es/reservedInstances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeVpcEndpoints operation.
     * @callback module:api/DefaultApi~describeVpcEndpointsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeVpcEndpointsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes one or more Amazon OpenSearch Service-managed VPC endpoints.
     * @param {module:model/DescribeVpcEndpointsRequest} describeVpcEndpointsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeVpcEndpointsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeVpcEndpointsResponse}
     */
    describeVpcEndpoints(describeVpcEndpointsRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeVpcEndpointsRequest;
      // verify the required parameter 'describeVpcEndpointsRequest' is set
      if (describeVpcEndpointsRequest === undefined || describeVpcEndpointsRequest === null) {
        throw new Error("Missing the required parameter 'describeVpcEndpointsRequest' when calling describeVpcEndpoints");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeVpcEndpointsResponse;
      return this.apiClient.callApi(
        '/2015-01-01/es/vpcEndpoints/describe', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dissociatePackage operation.
     * @callback module:api/DefaultApi~dissociatePackageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DissociatePackageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Dissociates a package from the Amazon ES domain.
     * @param {String} packageID Internal ID of the package that you want to associate with a domain. Use <code>DescribePackages</code> to find this value.
     * @param {String} domainName Name of the domain that you want to associate the package with.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~dissociatePackageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DissociatePackageResponse}
     */
    dissociatePackage(packageID, domainName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageID' is set
      if (packageID === undefined || packageID === null) {
        throw new Error("Missing the required parameter 'packageID' when calling dissociatePackage");
      }
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling dissociatePackage");
      }

      let pathParams = {
        'PackageID': packageID,
        'DomainName': domainName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DissociatePackageResponse;
      return this.apiClient.callApi(
        '/2015-01-01/packages/dissociate/{PackageID}/{DomainName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCompatibleElasticsearchVersions operation.
     * @callback module:api/DefaultApi~getCompatibleElasticsearchVersionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCompatibleElasticsearchVersionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Returns a list of upgrade compatible Elastisearch versions. You can optionally pass a <code> <a>DomainName</a> </code> to get all upgrade compatible Elasticsearch versions for that specific domain. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [domainName] 
     * @param {module:api/DefaultApi~getCompatibleElasticsearchVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCompatibleElasticsearchVersionsResponse}
     */
    getCompatibleElasticsearchVersions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'domainName': opts['domainName']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetCompatibleElasticsearchVersionsResponse;
      return this.apiClient.callApi(
        '/2015-01-01/es/compatibleVersions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPackageVersionHistory operation.
     * @callback module:api/DefaultApi~getPackageVersionHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPackageVersionHistoryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of versions of the package, along with their creation time and commit message.
     * @param {String} packageID Returns an audit history of versions of the package.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] Limits results to a maximum number of versions.
     * @param {String} [nextToken] Used for pagination. Only necessary if a previous API call includes a non-null NextToken value. If provided, returns results for the next page.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~getPackageVersionHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPackageVersionHistoryResponse}
     */
    getPackageVersionHistory(packageID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageID' is set
      if (packageID === undefined || packageID === null) {
        throw new Error("Missing the required parameter 'packageID' when calling getPackageVersionHistory");
      }

      let pathParams = {
        'PackageID': packageID
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetPackageVersionHistoryResponse;
      return this.apiClient.callApi(
        '/2015-01-01/packages/{PackageID}/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUpgradeHistory operation.
     * @callback module:api/DefaultApi~getUpgradeHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetUpgradeHistoryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the complete history of the last 10 upgrades that were performed on the domain.
     * @param {String} domainName 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] 
     * @param {String} [nextToken] 
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~getUpgradeHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetUpgradeHistoryResponse}
     */
    getUpgradeHistory(domainName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling getUpgradeHistory");
      }

      let pathParams = {
        'DomainName': domainName
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetUpgradeHistoryResponse;
      return this.apiClient.callApi(
        '/2015-01-01/es/upgradeDomain/{DomainName}/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUpgradeStatus operation.
     * @callback module:api/DefaultApi~getUpgradeStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetUpgradeStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the latest status of the last upgrade or upgrade eligibility check that was performed on the domain.
     * @param {String} domainName 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getUpgradeStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetUpgradeStatusResponse}
     */
    getUpgradeStatus(domainName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling getUpgradeStatus");
      }

      let pathParams = {
        'DomainName': domainName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetUpgradeStatusResponse;
      return this.apiClient.callApi(
        '/2015-01-01/es/upgradeDomain/{DomainName}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDomainNames operation.
     * @callback module:api/DefaultApi~listDomainNamesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDomainNamesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the name of all Elasticsearch domains owned by the current user's account. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/String} [engineType]  Optional parameter to filter the output by domain engine type. Acceptable values are 'Elasticsearch' and 'OpenSearch'. 
     * @param {module:api/DefaultApi~listDomainNamesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDomainNamesResponse}
     */
    listDomainNames(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'engineType': opts['engineType']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListDomainNamesResponse;
      return this.apiClient.callApi(
        '/2015-01-01/domain', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDomainsForPackage operation.
     * @callback module:api/DefaultApi~listDomainsForPackageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDomainsForPackageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all Amazon ES domains associated with the package.
     * @param {String} packageID The package for which to list domains.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] Limits results to a maximum number of domains.
     * @param {String} [nextToken] Used for pagination. Only necessary if a previous API call includes a non-null NextToken value. If provided, returns results for the next page.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listDomainsForPackageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDomainsForPackageResponse}
     */
    listDomainsForPackage(packageID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageID' is set
      if (packageID === undefined || packageID === null) {
        throw new Error("Missing the required parameter 'packageID' when calling listDomainsForPackage");
      }

      let pathParams = {
        'PackageID': packageID
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListDomainsForPackageResponse;
      return this.apiClient.callApi(
        '/2015-01-01/packages/{PackageID}/domains', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listElasticsearchInstanceTypes operation.
     * @callback module:api/DefaultApi~listElasticsearchInstanceTypesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListElasticsearchInstanceTypesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all Elasticsearch instance types that are supported for given ElasticsearchVersion
     * @param {String} elasticsearchVersion Version of Elasticsearch for which list of supported elasticsearch instance types are needed. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [domainName] DomainName represents the name of the Domain that we are trying to modify. This should be present only if we are querying for list of available Elasticsearch instance types when modifying existing domain. 
     * @param {Number} [maxResults]  Set this value to limit the number of results returned. Value provided must be greater than 30 else it wont be honored. 
     * @param {String} [nextToken] NextToken should be sent in case if earlier API call produced result containing NextToken. It is used for pagination. 
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listElasticsearchInstanceTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListElasticsearchInstanceTypesResponse}
     */
    listElasticsearchInstanceTypes(elasticsearchVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'elasticsearchVersion' is set
      if (elasticsearchVersion === undefined || elasticsearchVersion === null) {
        throw new Error("Missing the required parameter 'elasticsearchVersion' when calling listElasticsearchInstanceTypes");
      }

      let pathParams = {
        'ElasticsearchVersion': elasticsearchVersion
      };
      let queryParams = {
        'domainName': opts['domainName'],
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListElasticsearchInstanceTypesResponse;
      return this.apiClient.callApi(
        '/2015-01-01/es/instanceTypes/{ElasticsearchVersion}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listElasticsearchVersions operation.
     * @callback module:api/DefaultApi~listElasticsearchVersionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListElasticsearchVersionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all supported Elasticsearch versions
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults]  Set this value to limit the number of results returned. Value provided must be greater than 10 else it wont be honored. 
     * @param {String} [nextToken] 
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listElasticsearchVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListElasticsearchVersionsResponse}
     */
    listElasticsearchVersions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListElasticsearchVersionsResponse;
      return this.apiClient.callApi(
        '/2015-01-01/es/versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPackagesForDomain operation.
     * @callback module:api/DefaultApi~listPackagesForDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListPackagesForDomainResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all packages associated with the Amazon ES domain.
     * @param {String} domainName The name of the domain for which you want to list associated packages.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] Limits results to a maximum number of packages.
     * @param {String} [nextToken] Used for pagination. Only necessary if a previous API call includes a non-null NextToken value. If provided, returns results for the next page.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listPackagesForDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListPackagesForDomainResponse}
     */
    listPackagesForDomain(domainName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling listPackagesForDomain");
      }

      let pathParams = {
        'DomainName': domainName
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListPackagesForDomainResponse;
      return this.apiClient.callApi(
        '/2015-01-01/domain/{DomainName}/packages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTags operation.
     * @callback module:api/DefaultApi~listTagsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all tags for the given Elasticsearch domain.
     * @param {String} arn  Specify the <code>ARN</code> for the Elasticsearch domain to which the tags are attached that you want to view.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsResponse}
     */
    listTags(arn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'arn' is set
      if (arn === undefined || arn === null) {
        throw new Error("Missing the required parameter 'arn' when calling listTags");
      }

      let pathParams = {
      };
      let queryParams = {
        'arn': arn
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTagsResponse;
      return this.apiClient.callApi(
        '/2015-01-01/tags/#arn', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listVpcEndpointAccess operation.
     * @callback module:api/DefaultApi~listVpcEndpointAccessCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListVpcEndpointAccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about each principal that is allowed to access a given Amazon OpenSearch Service domain through the use of an interface VPC endpoint.
     * @param {String} domainName The name of the OpenSearch Service domain to retrieve access information for.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] Provides an identifier to allow retrieval of paginated results.
     * @param {module:api/DefaultApi~listVpcEndpointAccessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListVpcEndpointAccessResponse}
     */
    listVpcEndpointAccess(domainName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling listVpcEndpointAccess");
      }

      let pathParams = {
        'DomainName': domainName
      };
      let queryParams = {
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListVpcEndpointAccessResponse;
      return this.apiClient.callApi(
        '/2015-01-01/es/domain/{DomainName}/listVpcEndpointAccess', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listVpcEndpoints operation.
     * @callback module:api/DefaultApi~listVpcEndpointsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListVpcEndpointsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves all Amazon OpenSearch Service-managed VPC endpoints in the current account and Region.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] Identifier to allow retrieval of paginated results.
     * @param {module:api/DefaultApi~listVpcEndpointsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListVpcEndpointsResponse}
     */
    listVpcEndpoints(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListVpcEndpointsResponse;
      return this.apiClient.callApi(
        '/2015-01-01/es/vpcEndpoints', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listVpcEndpointsForDomain operation.
     * @callback module:api/DefaultApi~listVpcEndpointsForDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListVpcEndpointsForDomainResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves all Amazon OpenSearch Service-managed VPC endpoints associated with a particular domain.
     * @param {String} domainName Name of the ElasticSearch domain whose VPC endpoints are to be listed.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] Provides an identifier to allow retrieval of paginated results.
     * @param {module:api/DefaultApi~listVpcEndpointsForDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListVpcEndpointsForDomainResponse}
     */
    listVpcEndpointsForDomain(domainName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling listVpcEndpointsForDomain");
      }

      let pathParams = {
        'DomainName': domainName
      };
      let queryParams = {
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListVpcEndpointsForDomainResponse;
      return this.apiClient.callApi(
        '/2015-01-01/es/domain/{DomainName}/vpcEndpoints', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the purchaseReservedElasticsearchInstanceOffering operation.
     * @callback module:api/DefaultApi~purchaseReservedElasticsearchInstanceOfferingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PurchaseReservedElasticsearchInstanceOfferingResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Allows you to purchase reserved Elasticsearch instances.
     * @param {module:model/PurchaseReservedElasticsearchInstanceOfferingRequest} purchaseReservedElasticsearchInstanceOfferingRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~purchaseReservedElasticsearchInstanceOfferingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PurchaseReservedElasticsearchInstanceOfferingResponse}
     */
    purchaseReservedElasticsearchInstanceOffering(purchaseReservedElasticsearchInstanceOfferingRequest, opts, callback) {
      opts = opts || {};
      let postBody = purchaseReservedElasticsearchInstanceOfferingRequest;
      // verify the required parameter 'purchaseReservedElasticsearchInstanceOfferingRequest' is set
      if (purchaseReservedElasticsearchInstanceOfferingRequest === undefined || purchaseReservedElasticsearchInstanceOfferingRequest === null) {
        throw new Error("Missing the required parameter 'purchaseReservedElasticsearchInstanceOfferingRequest' when calling purchaseReservedElasticsearchInstanceOffering");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PurchaseReservedElasticsearchInstanceOfferingResponse;
      return this.apiClient.callApi(
        '/2015-01-01/es/purchaseReservedInstanceOffering', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rejectInboundCrossClusterSearchConnection operation.
     * @callback module:api/DefaultApi~rejectInboundCrossClusterSearchConnectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RejectInboundCrossClusterSearchConnectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Allows the destination domain owner to reject an inbound cross-cluster search connection request.
     * @param {String} connectionId The id of the inbound connection that you want to reject.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~rejectInboundCrossClusterSearchConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RejectInboundCrossClusterSearchConnectionResponse}
     */
    rejectInboundCrossClusterSearchConnection(connectionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'connectionId' is set
      if (connectionId === undefined || connectionId === null) {
        throw new Error("Missing the required parameter 'connectionId' when calling rejectInboundCrossClusterSearchConnection");
      }

      let pathParams = {
        'ConnectionId': connectionId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RejectInboundCrossClusterSearchConnectionResponse;
      return this.apiClient.callApi(
        '/2015-01-01/es/ccs/inboundConnection/{ConnectionId}/reject', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeTags operation.
     * @callback module:api/DefaultApi~removeTagsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the specified set of tags from the specified Elasticsearch domain.
     * @param {module:model/RemoveTagsRequest} removeTagsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~removeTagsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeTags(removeTagsRequest, opts, callback) {
      opts = opts || {};
      let postBody = removeTagsRequest;
      // verify the required parameter 'removeTagsRequest' is set
      if (removeTagsRequest === undefined || removeTagsRequest === null) {
        throw new Error("Missing the required parameter 'removeTagsRequest' when calling removeTags");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/2015-01-01/tags-removal', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the revokeVpcEndpointAccess operation.
     * @callback module:api/DefaultApi~revokeVpcEndpointAccessCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Revokes access to an Amazon OpenSearch Service domain that was provided through an interface VPC endpoint.
     * @param {String} domainName The name of the OpenSearch Service domain.
     * @param {module:model/RevokeVpcEndpointAccessRequest} revokeVpcEndpointAccessRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~revokeVpcEndpointAccessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    revokeVpcEndpointAccess(domainName, revokeVpcEndpointAccessRequest, opts, callback) {
      opts = opts || {};
      let postBody = revokeVpcEndpointAccessRequest;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling revokeVpcEndpointAccess");
      }
      // verify the required parameter 'revokeVpcEndpointAccessRequest' is set
      if (revokeVpcEndpointAccessRequest === undefined || revokeVpcEndpointAccessRequest === null) {
        throw new Error("Missing the required parameter 'revokeVpcEndpointAccessRequest' when calling revokeVpcEndpointAccess");
      }

      let pathParams = {
        'DomainName': domainName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/2015-01-01/es/domain/{DomainName}/revokeVpcEndpointAccess', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startElasticsearchServiceSoftwareUpdate operation.
     * @callback module:api/DefaultApi~startElasticsearchServiceSoftwareUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartElasticsearchServiceSoftwareUpdateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Schedules a service software update for an Amazon ES domain.
     * @param {module:model/CancelElasticsearchServiceSoftwareUpdateRequest} cancelElasticsearchServiceSoftwareUpdateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startElasticsearchServiceSoftwareUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartElasticsearchServiceSoftwareUpdateResponse}
     */
    startElasticsearchServiceSoftwareUpdate(cancelElasticsearchServiceSoftwareUpdateRequest, opts, callback) {
      opts = opts || {};
      let postBody = cancelElasticsearchServiceSoftwareUpdateRequest;
      // verify the required parameter 'cancelElasticsearchServiceSoftwareUpdateRequest' is set
      if (cancelElasticsearchServiceSoftwareUpdateRequest === undefined || cancelElasticsearchServiceSoftwareUpdateRequest === null) {
        throw new Error("Missing the required parameter 'cancelElasticsearchServiceSoftwareUpdateRequest' when calling startElasticsearchServiceSoftwareUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartElasticsearchServiceSoftwareUpdateResponse;
      return this.apiClient.callApi(
        '/2015-01-01/es/serviceSoftwareUpdate/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateElasticsearchDomainConfig operation.
     * @callback module:api/DefaultApi~updateElasticsearchDomainConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateElasticsearchDomainConfigResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies the cluster configuration of the specified Elasticsearch domain, setting as setting the instance type and the number of instances. 
     * @param {String} domainName The name of the Elasticsearch domain that you are updating. 
     * @param {module:model/UpdateElasticsearchDomainConfigRequest} updateElasticsearchDomainConfigRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateElasticsearchDomainConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateElasticsearchDomainConfigResponse}
     */
    updateElasticsearchDomainConfig(domainName, updateElasticsearchDomainConfigRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateElasticsearchDomainConfigRequest;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling updateElasticsearchDomainConfig");
      }
      // verify the required parameter 'updateElasticsearchDomainConfigRequest' is set
      if (updateElasticsearchDomainConfigRequest === undefined || updateElasticsearchDomainConfigRequest === null) {
        throw new Error("Missing the required parameter 'updateElasticsearchDomainConfigRequest' when calling updateElasticsearchDomainConfig");
      }

      let pathParams = {
        'DomainName': domainName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateElasticsearchDomainConfigResponse;
      return this.apiClient.callApi(
        '/2015-01-01/es/domain/{DomainName}/config', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePackage operation.
     * @callback module:api/DefaultApi~updatePackageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdatePackageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a package for use with Amazon ES domains.
     * @param {module:model/UpdatePackageRequest} updatePackageRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updatePackageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdatePackageResponse}
     */
    updatePackage(updatePackageRequest, opts, callback) {
      opts = opts || {};
      let postBody = updatePackageRequest;
      // verify the required parameter 'updatePackageRequest' is set
      if (updatePackageRequest === undefined || updatePackageRequest === null) {
        throw new Error("Missing the required parameter 'updatePackageRequest' when calling updatePackage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdatePackageResponse;
      return this.apiClient.callApi(
        '/2015-01-01/packages/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateVpcEndpoint operation.
     * @callback module:api/DefaultApi~updateVpcEndpointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateVpcEndpointResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies an Amazon OpenSearch Service-managed interface VPC endpoint.
     * @param {module:model/UpdateVpcEndpointRequest} updateVpcEndpointRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateVpcEndpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateVpcEndpointResponse}
     */
    updateVpcEndpoint(updateVpcEndpointRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateVpcEndpointRequest;
      // verify the required parameter 'updateVpcEndpointRequest' is set
      if (updateVpcEndpointRequest === undefined || updateVpcEndpointRequest === null) {
        throw new Error("Missing the required parameter 'updateVpcEndpointRequest' when calling updateVpcEndpoint");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateVpcEndpointResponse;
      return this.apiClient.callApi(
        '/2015-01-01/es/vpcEndpoints/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the upgradeElasticsearchDomain operation.
     * @callback module:api/DefaultApi~upgradeElasticsearchDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpgradeElasticsearchDomainResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Allows you to either upgrade your domain or perform an Upgrade eligibility check to a compatible Elasticsearch version.
     * @param {module:model/UpgradeElasticsearchDomainRequest} upgradeElasticsearchDomainRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~upgradeElasticsearchDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpgradeElasticsearchDomainResponse}
     */
    upgradeElasticsearchDomain(upgradeElasticsearchDomainRequest, opts, callback) {
      opts = opts || {};
      let postBody = upgradeElasticsearchDomainRequest;
      // verify the required parameter 'upgradeElasticsearchDomainRequest' is set
      if (upgradeElasticsearchDomainRequest === undefined || upgradeElasticsearchDomainRequest === null) {
        throw new Error("Missing the required parameter 'upgradeElasticsearchDomainRequest' when calling upgradeElasticsearchDomain");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpgradeElasticsearchDomainResponse;
      return this.apiClient.callApi(
        '/2015-01-01/es/upgradeDomain', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
