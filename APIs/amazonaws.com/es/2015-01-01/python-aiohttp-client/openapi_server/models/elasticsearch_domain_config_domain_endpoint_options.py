# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.domain_endpoint_options_status_options import DomainEndpointOptionsStatusOptions
from openapi_server.models.domain_endpoint_options_status_status import DomainEndpointOptionsStatusStatus
from openapi_server import util


class ElasticsearchDomainConfigDomainEndpointOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, options: DomainEndpointOptionsStatusOptions=None, status: DomainEndpointOptionsStatusStatus=None):
        """ElasticsearchDomainConfigDomainEndpointOptions - a model defined in OpenAPI

        :param options: The options of this ElasticsearchDomainConfigDomainEndpointOptions.
        :param status: The status of this ElasticsearchDomainConfigDomainEndpointOptions.
        """
        self.openapi_types = {
            'options': DomainEndpointOptionsStatusOptions,
            'status': DomainEndpointOptionsStatusStatus
        }

        self.attribute_map = {
            'options': 'Options',
            'status': 'Status'
        }

        self._options = options
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ElasticsearchDomainConfigDomainEndpointOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ElasticsearchDomainConfig_DomainEndpointOptions of this ElasticsearchDomainConfigDomainEndpointOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def options(self):
        """Gets the options of this ElasticsearchDomainConfigDomainEndpointOptions.


        :return: The options of this ElasticsearchDomainConfigDomainEndpointOptions.
        :rtype: DomainEndpointOptionsStatusOptions
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this ElasticsearchDomainConfigDomainEndpointOptions.


        :param options: The options of this ElasticsearchDomainConfigDomainEndpointOptions.
        :type options: DomainEndpointOptionsStatusOptions
        """
        if options is None:
            raise ValueError("Invalid value for `options`, must not be `None`")

        self._options = options

    @property
    def status(self):
        """Gets the status of this ElasticsearchDomainConfigDomainEndpointOptions.


        :return: The status of this ElasticsearchDomainConfigDomainEndpointOptions.
        :rtype: DomainEndpointOptionsStatusStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ElasticsearchDomainConfigDomainEndpointOptions.


        :param status: The status of this ElasticsearchDomainConfigDomainEndpointOptions.
        :type status: DomainEndpointOptionsStatusStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
