# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_outbound_cross_cluster_search_connection_request_destination_domain_info import CreateOutboundCrossClusterSearchConnectionRequestDestinationDomainInfo
from openapi_server.models.create_outbound_cross_cluster_search_connection_request_source_domain_info import CreateOutboundCrossClusterSearchConnectionRequestSourceDomainInfo
from openapi_server import util


class CreateOutboundCrossClusterSearchConnectionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, source_domain_info: CreateOutboundCrossClusterSearchConnectionRequestSourceDomainInfo=None, destination_domain_info: CreateOutboundCrossClusterSearchConnectionRequestDestinationDomainInfo=None, connection_alias: str=None):
        """CreateOutboundCrossClusterSearchConnectionRequest - a model defined in OpenAPI

        :param source_domain_info: The source_domain_info of this CreateOutboundCrossClusterSearchConnectionRequest.
        :param destination_domain_info: The destination_domain_info of this CreateOutboundCrossClusterSearchConnectionRequest.
        :param connection_alias: The connection_alias of this CreateOutboundCrossClusterSearchConnectionRequest.
        """
        self.openapi_types = {
            'source_domain_info': CreateOutboundCrossClusterSearchConnectionRequestSourceDomainInfo,
            'destination_domain_info': CreateOutboundCrossClusterSearchConnectionRequestDestinationDomainInfo,
            'connection_alias': str
        }

        self.attribute_map = {
            'source_domain_info': 'SourceDomainInfo',
            'destination_domain_info': 'DestinationDomainInfo',
            'connection_alias': 'ConnectionAlias'
        }

        self._source_domain_info = source_domain_info
        self._destination_domain_info = destination_domain_info
        self._connection_alias = connection_alias

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateOutboundCrossClusterSearchConnectionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateOutboundCrossClusterSearchConnection_request of this CreateOutboundCrossClusterSearchConnectionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def source_domain_info(self):
        """Gets the source_domain_info of this CreateOutboundCrossClusterSearchConnectionRequest.


        :return: The source_domain_info of this CreateOutboundCrossClusterSearchConnectionRequest.
        :rtype: CreateOutboundCrossClusterSearchConnectionRequestSourceDomainInfo
        """
        return self._source_domain_info

    @source_domain_info.setter
    def source_domain_info(self, source_domain_info):
        """Sets the source_domain_info of this CreateOutboundCrossClusterSearchConnectionRequest.


        :param source_domain_info: The source_domain_info of this CreateOutboundCrossClusterSearchConnectionRequest.
        :type source_domain_info: CreateOutboundCrossClusterSearchConnectionRequestSourceDomainInfo
        """
        if source_domain_info is None:
            raise ValueError("Invalid value for `source_domain_info`, must not be `None`")

        self._source_domain_info = source_domain_info

    @property
    def destination_domain_info(self):
        """Gets the destination_domain_info of this CreateOutboundCrossClusterSearchConnectionRequest.


        :return: The destination_domain_info of this CreateOutboundCrossClusterSearchConnectionRequest.
        :rtype: CreateOutboundCrossClusterSearchConnectionRequestDestinationDomainInfo
        """
        return self._destination_domain_info

    @destination_domain_info.setter
    def destination_domain_info(self, destination_domain_info):
        """Sets the destination_domain_info of this CreateOutboundCrossClusterSearchConnectionRequest.


        :param destination_domain_info: The destination_domain_info of this CreateOutboundCrossClusterSearchConnectionRequest.
        :type destination_domain_info: CreateOutboundCrossClusterSearchConnectionRequestDestinationDomainInfo
        """
        if destination_domain_info is None:
            raise ValueError("Invalid value for `destination_domain_info`, must not be `None`")

        self._destination_domain_info = destination_domain_info

    @property
    def connection_alias(self):
        """Gets the connection_alias of this CreateOutboundCrossClusterSearchConnectionRequest.

        Specifies the connection alias that will be used by the customer for this connection.

        :return: The connection_alias of this CreateOutboundCrossClusterSearchConnectionRequest.
        :rtype: str
        """
        return self._connection_alias

    @connection_alias.setter
    def connection_alias(self, connection_alias):
        """Sets the connection_alias of this CreateOutboundCrossClusterSearchConnectionRequest.

        Specifies the connection alias that will be used by the customer for this connection.

        :param connection_alias: The connection_alias of this CreateOutboundCrossClusterSearchConnectionRequest.
        :type connection_alias: str
        """
        if connection_alias is None:
            raise ValueError("Invalid value for `connection_alias`, must not be `None`")
        if connection_alias is not None and len(connection_alias) > 20:
            raise ValueError("Invalid value for `connection_alias`, length must be less than or equal to `20`")

        self._connection_alias = connection_alias
