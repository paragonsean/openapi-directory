# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class UpgradeElasticsearchDomainRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain_name: str=None, target_version: str=None, perform_check_only: bool=None):
        """UpgradeElasticsearchDomainRequest - a model defined in OpenAPI

        :param domain_name: The domain_name of this UpgradeElasticsearchDomainRequest.
        :param target_version: The target_version of this UpgradeElasticsearchDomainRequest.
        :param perform_check_only: The perform_check_only of this UpgradeElasticsearchDomainRequest.
        """
        self.openapi_types = {
            'domain_name': str,
            'target_version': str,
            'perform_check_only': bool
        }

        self.attribute_map = {
            'domain_name': 'DomainName',
            'target_version': 'TargetVersion',
            'perform_check_only': 'PerformCheckOnly'
        }

        self._domain_name = domain_name
        self._target_version = target_version
        self._perform_check_only = perform_check_only

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpgradeElasticsearchDomainRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpgradeElasticsearchDomain_request of this UpgradeElasticsearchDomainRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain_name(self):
        """Gets the domain_name of this UpgradeElasticsearchDomainRequest.

        The name of an Elasticsearch domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).

        :return: The domain_name of this UpgradeElasticsearchDomainRequest.
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this UpgradeElasticsearchDomainRequest.

        The name of an Elasticsearch domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).

        :param domain_name: The domain_name of this UpgradeElasticsearchDomainRequest.
        :type domain_name: str
        """
        if domain_name is None:
            raise ValueError("Invalid value for `domain_name`, must not be `None`")
        if domain_name is not None and len(domain_name) > 28:
            raise ValueError("Invalid value for `domain_name`, length must be less than or equal to `28`")
        if domain_name is not None and len(domain_name) < 3:
            raise ValueError("Invalid value for `domain_name`, length must be greater than or equal to `3`")
        if domain_name is not None and not re.search(r'[a-z][a-z0-9\-]+', domain_name):
            raise ValueError("Invalid value for `domain_name`, must be a follow pattern or equal to `/[a-z][a-z0-9\-]+/`")

        self._domain_name = domain_name

    @property
    def target_version(self):
        """Gets the target_version of this UpgradeElasticsearchDomainRequest.

        The version of Elasticsearch that you intend to upgrade the domain to.

        :return: The target_version of this UpgradeElasticsearchDomainRequest.
        :rtype: str
        """
        return self._target_version

    @target_version.setter
    def target_version(self, target_version):
        """Sets the target_version of this UpgradeElasticsearchDomainRequest.

        The version of Elasticsearch that you intend to upgrade the domain to.

        :param target_version: The target_version of this UpgradeElasticsearchDomainRequest.
        :type target_version: str
        """
        if target_version is None:
            raise ValueError("Invalid value for `target_version`, must not be `None`")
        if target_version is not None and not re.search(r'^[0-9]{1}\.[0-9]{1,2}$|^OpenSearch_[0-9]{1,2}\.[0-9]{1,2}$|^OS_[0-9]{1,2}\.[0-9]{1,2}$', target_version):
            raise ValueError("Invalid value for `target_version`, must be a follow pattern or equal to `/^[0-9]{1}\.[0-9]{1,2}$|^OpenSearch_[0-9]{1,2}\.[0-9]{1,2}$|^OS_[0-9]{1,2}\.[0-9]{1,2}$/`")

        self._target_version = target_version

    @property
    def perform_check_only(self):
        """Gets the perform_check_only of this UpgradeElasticsearchDomainRequest.

         This flag, when set to True, indicates that an Upgrade Eligibility Check needs to be performed. This will not actually perform the Upgrade. 

        :return: The perform_check_only of this UpgradeElasticsearchDomainRequest.
        :rtype: bool
        """
        return self._perform_check_only

    @perform_check_only.setter
    def perform_check_only(self, perform_check_only):
        """Sets the perform_check_only of this UpgradeElasticsearchDomainRequest.

         This flag, when set to True, indicates that an Upgrade Eligibility Check needs to be performed. This will not actually perform the Upgrade. 

        :param perform_check_only: The perform_check_only of this UpgradeElasticsearchDomainRequest.
        :type perform_check_only: bool
        """

        self._perform_check_only = perform_check_only
