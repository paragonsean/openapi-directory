# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CreateOutboundCrossClusterSearchConnectionResponseDestinationDomainInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, owner_id: str=None, domain_name: str=None, region: str=None):
        """CreateOutboundCrossClusterSearchConnectionResponseDestinationDomainInfo - a model defined in OpenAPI

        :param owner_id: The owner_id of this CreateOutboundCrossClusterSearchConnectionResponseDestinationDomainInfo.
        :param domain_name: The domain_name of this CreateOutboundCrossClusterSearchConnectionResponseDestinationDomainInfo.
        :param region: The region of this CreateOutboundCrossClusterSearchConnectionResponseDestinationDomainInfo.
        """
        self.openapi_types = {
            'owner_id': str,
            'domain_name': str,
            'region': str
        }

        self.attribute_map = {
            'owner_id': 'OwnerId',
            'domain_name': 'DomainName',
            'region': 'Region'
        }

        self._owner_id = owner_id
        self._domain_name = domain_name
        self._region = region

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateOutboundCrossClusterSearchConnectionResponseDestinationDomainInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateOutboundCrossClusterSearchConnectionResponse_DestinationDomainInfo of this CreateOutboundCrossClusterSearchConnectionResponseDestinationDomainInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def owner_id(self):
        """Gets the owner_id of this CreateOutboundCrossClusterSearchConnectionResponseDestinationDomainInfo.


        :return: The owner_id of this CreateOutboundCrossClusterSearchConnectionResponseDestinationDomainInfo.
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this CreateOutboundCrossClusterSearchConnectionResponseDestinationDomainInfo.


        :param owner_id: The owner_id of this CreateOutboundCrossClusterSearchConnectionResponseDestinationDomainInfo.
        :type owner_id: str
        """
        if owner_id is not None and len(owner_id) > 12:
            raise ValueError("Invalid value for `owner_id`, length must be less than or equal to `12`")
        if owner_id is not None and len(owner_id) < 12:
            raise ValueError("Invalid value for `owner_id`, length must be greater than or equal to `12`")

        self._owner_id = owner_id

    @property
    def domain_name(self):
        """Gets the domain_name of this CreateOutboundCrossClusterSearchConnectionResponseDestinationDomainInfo.

        The name of an Elasticsearch domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).

        :return: The domain_name of this CreateOutboundCrossClusterSearchConnectionResponseDestinationDomainInfo.
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this CreateOutboundCrossClusterSearchConnectionResponseDestinationDomainInfo.

        The name of an Elasticsearch domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).

        :param domain_name: The domain_name of this CreateOutboundCrossClusterSearchConnectionResponseDestinationDomainInfo.
        :type domain_name: str
        """
        if domain_name is None:
            raise ValueError("Invalid value for `domain_name`, must not be `None`")
        if domain_name is not None and len(domain_name) > 28:
            raise ValueError("Invalid value for `domain_name`, length must be less than or equal to `28`")
        if domain_name is not None and len(domain_name) < 3:
            raise ValueError("Invalid value for `domain_name`, length must be greater than or equal to `3`")
        if domain_name is not None and not re.search(r'[a-z][a-z0-9\-]+', domain_name):
            raise ValueError("Invalid value for `domain_name`, must be a follow pattern or equal to `/[a-z][a-z0-9\-]+/`")

        self._domain_name = domain_name

    @property
    def region(self):
        """Gets the region of this CreateOutboundCrossClusterSearchConnectionResponseDestinationDomainInfo.


        :return: The region of this CreateOutboundCrossClusterSearchConnectionResponseDestinationDomainInfo.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this CreateOutboundCrossClusterSearchConnectionResponseDestinationDomainInfo.


        :param region: The region of this CreateOutboundCrossClusterSearchConnectionResponseDestinationDomainInfo.
        :type region: str
        """

        self._region = region
