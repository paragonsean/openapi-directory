# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.authorize_vpc_endpoint_access_response_authorized_principal import AuthorizeVpcEndpointAccessResponseAuthorizedPrincipal
from openapi_server import util


class AuthorizeVpcEndpointAccessResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authorized_principal: AuthorizeVpcEndpointAccessResponseAuthorizedPrincipal=None):
        """AuthorizeVpcEndpointAccessResponse - a model defined in OpenAPI

        :param authorized_principal: The authorized_principal of this AuthorizeVpcEndpointAccessResponse.
        """
        self.openapi_types = {
            'authorized_principal': AuthorizeVpcEndpointAccessResponseAuthorizedPrincipal
        }

        self.attribute_map = {
            'authorized_principal': 'AuthorizedPrincipal'
        }

        self._authorized_principal = authorized_principal

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuthorizeVpcEndpointAccessResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuthorizeVpcEndpointAccessResponse of this AuthorizeVpcEndpointAccessResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authorized_principal(self):
        """Gets the authorized_principal of this AuthorizeVpcEndpointAccessResponse.


        :return: The authorized_principal of this AuthorizeVpcEndpointAccessResponse.
        :rtype: AuthorizeVpcEndpointAccessResponseAuthorizedPrincipal
        """
        return self._authorized_principal

    @authorized_principal.setter
    def authorized_principal(self, authorized_principal):
        """Sets the authorized_principal of this AuthorizeVpcEndpointAccessResponse.


        :param authorized_principal: The authorized_principal of this AuthorizeVpcEndpointAccessResponse.
        :type authorized_principal: AuthorizeVpcEndpointAccessResponseAuthorizedPrincipal
        """
        if authorized_principal is None:
            raise ValueError("Invalid value for `authorized_principal`, must not be `None`")

        self._authorized_principal = authorized_principal
