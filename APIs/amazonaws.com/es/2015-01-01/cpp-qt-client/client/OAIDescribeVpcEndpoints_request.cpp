/**
 * Amazon Elasticsearch Service
 * <fullname>Amazon Elasticsearch Configuration Service</fullname> <p>Use the Amazon Elasticsearch Configuration API to create, configure, and manage Elasticsearch domains.</p> <p>For sample code that uses the Configuration API, see the <a href=\"https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-configuration-samples.html\">Amazon Elasticsearch Service Developer Guide</a>. The guide also contains <a href=\"https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-request-signing.html\">sample code for sending signed HTTP requests to the Elasticsearch APIs</a>.</p> <p>The endpoint for configuration service requests is region-specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#elasticsearch-service-regions\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2015-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeVpcEndpoints_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeVpcEndpoints_request::OAIDescribeVpcEndpoints_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeVpcEndpoints_request::OAIDescribeVpcEndpoints_request() {
    this->initializeModel();
}

OAIDescribeVpcEndpoints_request::~OAIDescribeVpcEndpoints_request() {}

void OAIDescribeVpcEndpoints_request::initializeModel() {

    m_vpc_endpoint_ids_isSet = false;
    m_vpc_endpoint_ids_isValid = false;
}

void OAIDescribeVpcEndpoints_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeVpcEndpoints_request::fromJsonObject(QJsonObject json) {

    m_vpc_endpoint_ids_isValid = ::OpenAPI::fromJsonValue(m_vpc_endpoint_ids, json[QString("VpcEndpointIds")]);
    m_vpc_endpoint_ids_isSet = !json[QString("VpcEndpointIds")].isNull() && m_vpc_endpoint_ids_isValid;
}

QString OAIDescribeVpcEndpoints_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeVpcEndpoints_request::asJsonObject() const {
    QJsonObject obj;
    if (m_vpc_endpoint_ids.size() > 0) {
        obj.insert(QString("VpcEndpointIds"), ::OpenAPI::toJsonValue(m_vpc_endpoint_ids));
    }
    return obj;
}

QList<QString> OAIDescribeVpcEndpoints_request::getVpcEndpointIds() const {
    return m_vpc_endpoint_ids;
}
void OAIDescribeVpcEndpoints_request::setVpcEndpointIds(const QList<QString> &vpc_endpoint_ids) {
    m_vpc_endpoint_ids = vpc_endpoint_ids;
    m_vpc_endpoint_ids_isSet = true;
}

bool OAIDescribeVpcEndpoints_request::is_vpc_endpoint_ids_Set() const{
    return m_vpc_endpoint_ids_isSet;
}

bool OAIDescribeVpcEndpoints_request::is_vpc_endpoint_ids_Valid() const{
    return m_vpc_endpoint_ids_isValid;
}

bool OAIDescribeVpcEndpoints_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_vpc_endpoint_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeVpcEndpoints_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_vpc_endpoint_ids_isValid && true;
}

} // namespace OpenAPI
