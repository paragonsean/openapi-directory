/**
 * Amazon Elasticsearch Service
 * <fullname>Amazon Elasticsearch Configuration Service</fullname> <p>Use the Amazon Elasticsearch Configuration API to create, configure, and manage Elasticsearch domains.</p> <p>For sample code that uses the Configuration API, see the <a href=\"https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-configuration-samples.html\">Amazon Elasticsearch Service Developer Guide</a>. The guide also contains <a href=\"https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-request-signing.html\">sample code for sending signed HTTP requests to the Elasticsearch APIs</a>.</p> <p>The endpoint for configuration service requests is region-specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#elasticsearch-service-regions\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2015-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIReservedElasticsearchInstanceOffering.h
 *
 * Details of a reserved Elasticsearch instance offering.
 */

#ifndef OAIReservedElasticsearchInstanceOffering_H
#define OAIReservedElasticsearchInstanceOffering_H

#include <QJsonObject>

#include "OAIESPartitionInstanceType.h"
#include "OAIReservedElasticsearchInstancePaymentOption.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIReservedElasticsearchInstanceOffering : public OAIObject {
public:
    OAIReservedElasticsearchInstanceOffering();
    OAIReservedElasticsearchInstanceOffering(QString json);
    ~OAIReservedElasticsearchInstanceOffering() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getReservedElasticsearchInstanceOfferingId() const;
    void setReservedElasticsearchInstanceOfferingId(const QString &reserved_elasticsearch_instance_offering_id);
    bool is_reserved_elasticsearch_instance_offering_id_Set() const;
    bool is_reserved_elasticsearch_instance_offering_id_Valid() const;

    OAIESPartitionInstanceType getElasticsearchInstanceType() const;
    void setElasticsearchInstanceType(const OAIESPartitionInstanceType &elasticsearch_instance_type);
    bool is_elasticsearch_instance_type_Set() const;
    bool is_elasticsearch_instance_type_Valid() const;

    qint32 getDuration() const;
    void setDuration(const qint32 &duration);
    bool is_duration_Set() const;
    bool is_duration_Valid() const;

    double getFixedPrice() const;
    void setFixedPrice(const double &fixed_price);
    bool is_fixed_price_Set() const;
    bool is_fixed_price_Valid() const;

    double getUsagePrice() const;
    void setUsagePrice(const double &usage_price);
    bool is_usage_price_Set() const;
    bool is_usage_price_Valid() const;

    QString getCurrencyCode() const;
    void setCurrencyCode(const QString &currency_code);
    bool is_currency_code_Set() const;
    bool is_currency_code_Valid() const;

    OAIReservedElasticsearchInstancePaymentOption getPaymentOption() const;
    void setPaymentOption(const OAIReservedElasticsearchInstancePaymentOption &payment_option);
    bool is_payment_option_Set() const;
    bool is_payment_option_Valid() const;

    QList getRecurringCharges() const;
    void setRecurringCharges(const QList &recurring_charges);
    bool is_recurring_charges_Set() const;
    bool is_recurring_charges_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_reserved_elasticsearch_instance_offering_id;
    bool m_reserved_elasticsearch_instance_offering_id_isSet;
    bool m_reserved_elasticsearch_instance_offering_id_isValid;

    OAIESPartitionInstanceType m_elasticsearch_instance_type;
    bool m_elasticsearch_instance_type_isSet;
    bool m_elasticsearch_instance_type_isValid;

    qint32 m_duration;
    bool m_duration_isSet;
    bool m_duration_isValid;

    double m_fixed_price;
    bool m_fixed_price_isSet;
    bool m_fixed_price_isValid;

    double m_usage_price;
    bool m_usage_price_isSet;
    bool m_usage_price_isValid;

    QString m_currency_code;
    bool m_currency_code_isSet;
    bool m_currency_code_isValid;

    OAIReservedElasticsearchInstancePaymentOption m_payment_option;
    bool m_payment_option_isSet;
    bool m_payment_option_isValid;

    QList m_recurring_charges;
    bool m_recurring_charges_isSet;
    bool m_recurring_charges_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIReservedElasticsearchInstanceOffering)

#endif // OAIReservedElasticsearchInstanceOffering_H
