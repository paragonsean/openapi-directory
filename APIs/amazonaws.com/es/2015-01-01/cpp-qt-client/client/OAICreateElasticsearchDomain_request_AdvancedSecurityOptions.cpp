/**
 * Amazon Elasticsearch Service
 * <fullname>Amazon Elasticsearch Configuration Service</fullname> <p>Use the Amazon Elasticsearch Configuration API to create, configure, and manage Elasticsearch domains.</p> <p>For sample code that uses the Configuration API, see the <a href=\"https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-configuration-samples.html\">Amazon Elasticsearch Service Developer Guide</a>. The guide also contains <a href=\"https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-request-signing.html\">sample code for sending signed HTTP requests to the Elasticsearch APIs</a>.</p> <p>The endpoint for configuration service requests is region-specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#elasticsearch-service-regions\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2015-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateElasticsearchDomain_request_AdvancedSecurityOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateElasticsearchDomain_request_AdvancedSecurityOptions::OAICreateElasticsearchDomain_request_AdvancedSecurityOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateElasticsearchDomain_request_AdvancedSecurityOptions::OAICreateElasticsearchDomain_request_AdvancedSecurityOptions() {
    this->initializeModel();
}

OAICreateElasticsearchDomain_request_AdvancedSecurityOptions::~OAICreateElasticsearchDomain_request_AdvancedSecurityOptions() {}

void OAICreateElasticsearchDomain_request_AdvancedSecurityOptions::initializeModel() {

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_internal_user_database_enabled_isSet = false;
    m_internal_user_database_enabled_isValid = false;

    m_master_user_options_isSet = false;
    m_master_user_options_isValid = false;

    m_saml_options_isSet = false;
    m_saml_options_isValid = false;

    m_anonymous_auth_enabled_isSet = false;
    m_anonymous_auth_enabled_isValid = false;
}

void OAICreateElasticsearchDomain_request_AdvancedSecurityOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateElasticsearchDomain_request_AdvancedSecurityOptions::fromJsonObject(QJsonObject json) {

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("Enabled")]);
    m_enabled_isSet = !json[QString("Enabled")].isNull() && m_enabled_isValid;

    m_internal_user_database_enabled_isValid = ::OpenAPI::fromJsonValue(m_internal_user_database_enabled, json[QString("InternalUserDatabaseEnabled")]);
    m_internal_user_database_enabled_isSet = !json[QString("InternalUserDatabaseEnabled")].isNull() && m_internal_user_database_enabled_isValid;

    m_master_user_options_isValid = ::OpenAPI::fromJsonValue(m_master_user_options, json[QString("MasterUserOptions")]);
    m_master_user_options_isSet = !json[QString("MasterUserOptions")].isNull() && m_master_user_options_isValid;

    m_saml_options_isValid = ::OpenAPI::fromJsonValue(m_saml_options, json[QString("SAMLOptions")]);
    m_saml_options_isSet = !json[QString("SAMLOptions")].isNull() && m_saml_options_isValid;

    m_anonymous_auth_enabled_isValid = ::OpenAPI::fromJsonValue(m_anonymous_auth_enabled, json[QString("AnonymousAuthEnabled")]);
    m_anonymous_auth_enabled_isSet = !json[QString("AnonymousAuthEnabled")].isNull() && m_anonymous_auth_enabled_isValid;
}

QString OAICreateElasticsearchDomain_request_AdvancedSecurityOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateElasticsearchDomain_request_AdvancedSecurityOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_enabled_isSet) {
        obj.insert(QString("Enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_internal_user_database_enabled_isSet) {
        obj.insert(QString("InternalUserDatabaseEnabled"), ::OpenAPI::toJsonValue(m_internal_user_database_enabled));
    }
    if (m_master_user_options.isSet()) {
        obj.insert(QString("MasterUserOptions"), ::OpenAPI::toJsonValue(m_master_user_options));
    }
    if (m_saml_options.isSet()) {
        obj.insert(QString("SAMLOptions"), ::OpenAPI::toJsonValue(m_saml_options));
    }
    if (m_anonymous_auth_enabled_isSet) {
        obj.insert(QString("AnonymousAuthEnabled"), ::OpenAPI::toJsonValue(m_anonymous_auth_enabled));
    }
    return obj;
}

bool OAICreateElasticsearchDomain_request_AdvancedSecurityOptions::getEnabled() const {
    return m_enabled;
}
void OAICreateElasticsearchDomain_request_AdvancedSecurityOptions::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAICreateElasticsearchDomain_request_AdvancedSecurityOptions::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAICreateElasticsearchDomain_request_AdvancedSecurityOptions::is_enabled_Valid() const{
    return m_enabled_isValid;
}

bool OAICreateElasticsearchDomain_request_AdvancedSecurityOptions::getInternalUserDatabaseEnabled() const {
    return m_internal_user_database_enabled;
}
void OAICreateElasticsearchDomain_request_AdvancedSecurityOptions::setInternalUserDatabaseEnabled(const bool &internal_user_database_enabled) {
    m_internal_user_database_enabled = internal_user_database_enabled;
    m_internal_user_database_enabled_isSet = true;
}

bool OAICreateElasticsearchDomain_request_AdvancedSecurityOptions::is_internal_user_database_enabled_Set() const{
    return m_internal_user_database_enabled_isSet;
}

bool OAICreateElasticsearchDomain_request_AdvancedSecurityOptions::is_internal_user_database_enabled_Valid() const{
    return m_internal_user_database_enabled_isValid;
}

OAICreateElasticsearchDomain_request_AdvancedSecurityOptions_MasterUserOptions OAICreateElasticsearchDomain_request_AdvancedSecurityOptions::getMasterUserOptions() const {
    return m_master_user_options;
}
void OAICreateElasticsearchDomain_request_AdvancedSecurityOptions::setMasterUserOptions(const OAICreateElasticsearchDomain_request_AdvancedSecurityOptions_MasterUserOptions &master_user_options) {
    m_master_user_options = master_user_options;
    m_master_user_options_isSet = true;
}

bool OAICreateElasticsearchDomain_request_AdvancedSecurityOptions::is_master_user_options_Set() const{
    return m_master_user_options_isSet;
}

bool OAICreateElasticsearchDomain_request_AdvancedSecurityOptions::is_master_user_options_Valid() const{
    return m_master_user_options_isValid;
}

OAICreateElasticsearchDomain_request_AdvancedSecurityOptions_SAMLOptions OAICreateElasticsearchDomain_request_AdvancedSecurityOptions::getSamlOptions() const {
    return m_saml_options;
}
void OAICreateElasticsearchDomain_request_AdvancedSecurityOptions::setSamlOptions(const OAICreateElasticsearchDomain_request_AdvancedSecurityOptions_SAMLOptions &saml_options) {
    m_saml_options = saml_options;
    m_saml_options_isSet = true;
}

bool OAICreateElasticsearchDomain_request_AdvancedSecurityOptions::is_saml_options_Set() const{
    return m_saml_options_isSet;
}

bool OAICreateElasticsearchDomain_request_AdvancedSecurityOptions::is_saml_options_Valid() const{
    return m_saml_options_isValid;
}

bool OAICreateElasticsearchDomain_request_AdvancedSecurityOptions::getAnonymousAuthEnabled() const {
    return m_anonymous_auth_enabled;
}
void OAICreateElasticsearchDomain_request_AdvancedSecurityOptions::setAnonymousAuthEnabled(const bool &anonymous_auth_enabled) {
    m_anonymous_auth_enabled = anonymous_auth_enabled;
    m_anonymous_auth_enabled_isSet = true;
}

bool OAICreateElasticsearchDomain_request_AdvancedSecurityOptions::is_anonymous_auth_enabled_Set() const{
    return m_anonymous_auth_enabled_isSet;
}

bool OAICreateElasticsearchDomain_request_AdvancedSecurityOptions::is_anonymous_auth_enabled_Valid() const{
    return m_anonymous_auth_enabled_isValid;
}

bool OAICreateElasticsearchDomain_request_AdvancedSecurityOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_internal_user_database_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_master_user_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_saml_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_anonymous_auth_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateElasticsearchDomain_request_AdvancedSecurityOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
