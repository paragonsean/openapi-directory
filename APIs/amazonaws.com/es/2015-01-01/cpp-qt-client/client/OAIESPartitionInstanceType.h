/**
 * Amazon Elasticsearch Service
 * <fullname>Amazon Elasticsearch Configuration Service</fullname> <p>Use the Amazon Elasticsearch Configuration API to create, configure, and manage Elasticsearch domains.</p> <p>For sample code that uses the Configuration API, see the <a href=\"https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-configuration-samples.html\">Amazon Elasticsearch Service Developer Guide</a>. The guide also contains <a href=\"https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-request-signing.html\">sample code for sending signed HTTP requests to the Elasticsearch APIs</a>.</p> <p>The endpoint for configuration service requests is region-specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#elasticsearch-service-regions\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2015-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIESPartitionInstanceType.h
 *
 * 
 */

#ifndef OAIESPartitionInstanceType_H
#define OAIESPartitionInstanceType_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIESPartitionInstanceType : public OAIEnum {
public:
    OAIESPartitionInstanceType();
    OAIESPartitionInstanceType(QString json);
    ~OAIESPartitionInstanceType() override;

    QString asJson() const override;
    QJsonValue asJsonValue() const override;
    void fromJsonValue(QJsonValue json) override;
    void fromJson(QString jsonString) override;

    enum class eOAIESPartitionInstanceType {
        INVALID_VALUE_OPENAPI_GENERATED = 0,
        M3_MEDIUM_ELASTICSEARCH, 
        M3_LARGE_ELASTICSEARCH, 
        M3_XLARGE_ELASTICSEARCH, 
        M3_2XLARGE_ELASTICSEARCH, 
        M4_LARGE_ELASTICSEARCH, 
        M4_XLARGE_ELASTICSEARCH, 
        M4_2XLARGE_ELASTICSEARCH, 
        M4_4XLARGE_ELASTICSEARCH, 
        M4_10XLARGE_ELASTICSEARCH, 
        M5_LARGE_ELASTICSEARCH, 
        M5_XLARGE_ELASTICSEARCH, 
        M5_2XLARGE_ELASTICSEARCH, 
        M5_4XLARGE_ELASTICSEARCH, 
        M5_12XLARGE_ELASTICSEARCH, 
        R5_LARGE_ELASTICSEARCH, 
        R5_XLARGE_ELASTICSEARCH, 
        R5_2XLARGE_ELASTICSEARCH, 
        R5_4XLARGE_ELASTICSEARCH, 
        R5_12XLARGE_ELASTICSEARCH, 
        C5_LARGE_ELASTICSEARCH, 
        C5_XLARGE_ELASTICSEARCH, 
        C5_2XLARGE_ELASTICSEARCH, 
        C5_4XLARGE_ELASTICSEARCH, 
        C5_9XLARGE_ELASTICSEARCH, 
        C5_18XLARGE_ELASTICSEARCH, 
        ULTRAWARM1_MEDIUM_ELASTICSEARCH, 
        ULTRAWARM1_LARGE_ELASTICSEARCH, 
        T2_MICRO_ELASTICSEARCH, 
        T2_SMALL_ELASTICSEARCH, 
        T2_MEDIUM_ELASTICSEARCH, 
        R3_LARGE_ELASTICSEARCH, 
        R3_XLARGE_ELASTICSEARCH, 
        R3_2XLARGE_ELASTICSEARCH, 
        R3_4XLARGE_ELASTICSEARCH, 
        R3_8XLARGE_ELASTICSEARCH, 
        I2_XLARGE_ELASTICSEARCH, 
        I2_2XLARGE_ELASTICSEARCH, 
        D2_XLARGE_ELASTICSEARCH, 
        D2_2XLARGE_ELASTICSEARCH, 
        D2_4XLARGE_ELASTICSEARCH, 
        D2_8XLARGE_ELASTICSEARCH, 
        C4_LARGE_ELASTICSEARCH, 
        C4_XLARGE_ELASTICSEARCH, 
        C4_2XLARGE_ELASTICSEARCH, 
        C4_4XLARGE_ELASTICSEARCH, 
        C4_8XLARGE_ELASTICSEARCH, 
        R4_LARGE_ELASTICSEARCH, 
        R4_XLARGE_ELASTICSEARCH, 
        R4_2XLARGE_ELASTICSEARCH, 
        R4_4XLARGE_ELASTICSEARCH, 
        R4_8XLARGE_ELASTICSEARCH, 
        R4_16XLARGE_ELASTICSEARCH, 
        I3_LARGE_ELASTICSEARCH, 
        I3_XLARGE_ELASTICSEARCH, 
        I3_2XLARGE_ELASTICSEARCH, 
        I3_4XLARGE_ELASTICSEARCH, 
        I3_8XLARGE_ELASTICSEARCH, 
        I3_16XLARGE_ELASTICSEARCH
    };
    OAIESPartitionInstanceType::eOAIESPartitionInstanceType getValue() const;
    void setValue(const OAIESPartitionInstanceType::eOAIESPartitionInstanceType& value);
    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    eOAIESPartitionInstanceType m_value;
    bool m_value_isSet;
    bool m_value_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIESPartitionInstanceType)

#endif // OAIESPartitionInstanceType_H
