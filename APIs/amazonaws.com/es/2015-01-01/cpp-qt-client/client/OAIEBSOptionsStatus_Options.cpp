/**
 * Amazon Elasticsearch Service
 * <fullname>Amazon Elasticsearch Configuration Service</fullname> <p>Use the Amazon Elasticsearch Configuration API to create, configure, and manage Elasticsearch domains.</p> <p>For sample code that uses the Configuration API, see the <a href=\"https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-configuration-samples.html\">Amazon Elasticsearch Service Developer Guide</a>. The guide also contains <a href=\"https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-request-signing.html\">sample code for sending signed HTTP requests to the Elasticsearch APIs</a>.</p> <p>The endpoint for configuration service requests is region-specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#elasticsearch-service-regions\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2015-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEBSOptionsStatus_Options.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEBSOptionsStatus_Options::OAIEBSOptionsStatus_Options(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEBSOptionsStatus_Options::OAIEBSOptionsStatus_Options() {
    this->initializeModel();
}

OAIEBSOptionsStatus_Options::~OAIEBSOptionsStatus_Options() {}

void OAIEBSOptionsStatus_Options::initializeModel() {

    m_ebs_enabled_isSet = false;
    m_ebs_enabled_isValid = false;

    m_volume_type_isSet = false;
    m_volume_type_isValid = false;

    m_volume_size_isSet = false;
    m_volume_size_isValid = false;

    m_iops_isSet = false;
    m_iops_isValid = false;

    m_throughput_isSet = false;
    m_throughput_isValid = false;
}

void OAIEBSOptionsStatus_Options::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEBSOptionsStatus_Options::fromJsonObject(QJsonObject json) {

    m_ebs_enabled_isValid = ::OpenAPI::fromJsonValue(m_ebs_enabled, json[QString("EBSEnabled")]);
    m_ebs_enabled_isSet = !json[QString("EBSEnabled")].isNull() && m_ebs_enabled_isValid;

    m_volume_type_isValid = ::OpenAPI::fromJsonValue(m_volume_type, json[QString("VolumeType")]);
    m_volume_type_isSet = !json[QString("VolumeType")].isNull() && m_volume_type_isValid;

    m_volume_size_isValid = ::OpenAPI::fromJsonValue(m_volume_size, json[QString("VolumeSize")]);
    m_volume_size_isSet = !json[QString("VolumeSize")].isNull() && m_volume_size_isValid;

    m_iops_isValid = ::OpenAPI::fromJsonValue(m_iops, json[QString("Iops")]);
    m_iops_isSet = !json[QString("Iops")].isNull() && m_iops_isValid;

    m_throughput_isValid = ::OpenAPI::fromJsonValue(m_throughput, json[QString("Throughput")]);
    m_throughput_isSet = !json[QString("Throughput")].isNull() && m_throughput_isValid;
}

QString OAIEBSOptionsStatus_Options::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEBSOptionsStatus_Options::asJsonObject() const {
    QJsonObject obj;
    if (m_ebs_enabled_isSet) {
        obj.insert(QString("EBSEnabled"), ::OpenAPI::toJsonValue(m_ebs_enabled));
    }
    if (m_volume_type.isSet()) {
        obj.insert(QString("VolumeType"), ::OpenAPI::toJsonValue(m_volume_type));
    }
    if (m_volume_size_isSet) {
        obj.insert(QString("VolumeSize"), ::OpenAPI::toJsonValue(m_volume_size));
    }
    if (m_iops_isSet) {
        obj.insert(QString("Iops"), ::OpenAPI::toJsonValue(m_iops));
    }
    if (m_throughput_isSet) {
        obj.insert(QString("Throughput"), ::OpenAPI::toJsonValue(m_throughput));
    }
    return obj;
}

bool OAIEBSOptionsStatus_Options::getEbsEnabled() const {
    return m_ebs_enabled;
}
void OAIEBSOptionsStatus_Options::setEbsEnabled(const bool &ebs_enabled) {
    m_ebs_enabled = ebs_enabled;
    m_ebs_enabled_isSet = true;
}

bool OAIEBSOptionsStatus_Options::is_ebs_enabled_Set() const{
    return m_ebs_enabled_isSet;
}

bool OAIEBSOptionsStatus_Options::is_ebs_enabled_Valid() const{
    return m_ebs_enabled_isValid;
}

OAIVolumeType OAIEBSOptionsStatus_Options::getVolumeType() const {
    return m_volume_type;
}
void OAIEBSOptionsStatus_Options::setVolumeType(const OAIVolumeType &volume_type) {
    m_volume_type = volume_type;
    m_volume_type_isSet = true;
}

bool OAIEBSOptionsStatus_Options::is_volume_type_Set() const{
    return m_volume_type_isSet;
}

bool OAIEBSOptionsStatus_Options::is_volume_type_Valid() const{
    return m_volume_type_isValid;
}

qint32 OAIEBSOptionsStatus_Options::getVolumeSize() const {
    return m_volume_size;
}
void OAIEBSOptionsStatus_Options::setVolumeSize(const qint32 &volume_size) {
    m_volume_size = volume_size;
    m_volume_size_isSet = true;
}

bool OAIEBSOptionsStatus_Options::is_volume_size_Set() const{
    return m_volume_size_isSet;
}

bool OAIEBSOptionsStatus_Options::is_volume_size_Valid() const{
    return m_volume_size_isValid;
}

qint32 OAIEBSOptionsStatus_Options::getIops() const {
    return m_iops;
}
void OAIEBSOptionsStatus_Options::setIops(const qint32 &iops) {
    m_iops = iops;
    m_iops_isSet = true;
}

bool OAIEBSOptionsStatus_Options::is_iops_Set() const{
    return m_iops_isSet;
}

bool OAIEBSOptionsStatus_Options::is_iops_Valid() const{
    return m_iops_isValid;
}

qint32 OAIEBSOptionsStatus_Options::getThroughput() const {
    return m_throughput;
}
void OAIEBSOptionsStatus_Options::setThroughput(const qint32 &throughput) {
    m_throughput = throughput;
    m_throughput_isSet = true;
}

bool OAIEBSOptionsStatus_Options::is_throughput_Set() const{
    return m_throughput_isSet;
}

bool OAIEBSOptionsStatus_Options::is_throughput_Valid() const{
    return m_throughput_isValid;
}

bool OAIEBSOptionsStatus_Options::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ebs_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iops_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_throughput_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEBSOptionsStatus_Options::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
