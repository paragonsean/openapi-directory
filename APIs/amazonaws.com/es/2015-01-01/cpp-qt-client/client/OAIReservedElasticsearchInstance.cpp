/**
 * Amazon Elasticsearch Service
 * <fullname>Amazon Elasticsearch Configuration Service</fullname> <p>Use the Amazon Elasticsearch Configuration API to create, configure, and manage Elasticsearch domains.</p> <p>For sample code that uses the Configuration API, see the <a href=\"https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-configuration-samples.html\">Amazon Elasticsearch Service Developer Guide</a>. The guide also contains <a href=\"https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-request-signing.html\">sample code for sending signed HTTP requests to the Elasticsearch APIs</a>.</p> <p>The endpoint for configuration service requests is region-specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#elasticsearch-service-regions\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2015-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReservedElasticsearchInstance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReservedElasticsearchInstance::OAIReservedElasticsearchInstance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReservedElasticsearchInstance::OAIReservedElasticsearchInstance() {
    this->initializeModel();
}

OAIReservedElasticsearchInstance::~OAIReservedElasticsearchInstance() {}

void OAIReservedElasticsearchInstance::initializeModel() {

    m_reservation_name_isSet = false;
    m_reservation_name_isValid = false;

    m_reserved_elasticsearch_instance_id_isSet = false;
    m_reserved_elasticsearch_instance_id_isValid = false;

    m_reserved_elasticsearch_instance_offering_id_isSet = false;
    m_reserved_elasticsearch_instance_offering_id_isValid = false;

    m_elasticsearch_instance_type_isSet = false;
    m_elasticsearch_instance_type_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_fixed_price_isSet = false;
    m_fixed_price_isValid = false;

    m_usage_price_isSet = false;
    m_usage_price_isValid = false;

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_elasticsearch_instance_count_isSet = false;
    m_elasticsearch_instance_count_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_payment_option_isSet = false;
    m_payment_option_isValid = false;

    m_recurring_charges_isSet = false;
    m_recurring_charges_isValid = false;
}

void OAIReservedElasticsearchInstance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReservedElasticsearchInstance::fromJsonObject(QJsonObject json) {

    m_reservation_name_isValid = ::OpenAPI::fromJsonValue(m_reservation_name, json[QString("ReservationName")]);
    m_reservation_name_isSet = !json[QString("ReservationName")].isNull() && m_reservation_name_isValid;

    m_reserved_elasticsearch_instance_id_isValid = ::OpenAPI::fromJsonValue(m_reserved_elasticsearch_instance_id, json[QString("ReservedElasticsearchInstanceId")]);
    m_reserved_elasticsearch_instance_id_isSet = !json[QString("ReservedElasticsearchInstanceId")].isNull() && m_reserved_elasticsearch_instance_id_isValid;

    m_reserved_elasticsearch_instance_offering_id_isValid = ::OpenAPI::fromJsonValue(m_reserved_elasticsearch_instance_offering_id, json[QString("ReservedElasticsearchInstanceOfferingId")]);
    m_reserved_elasticsearch_instance_offering_id_isSet = !json[QString("ReservedElasticsearchInstanceOfferingId")].isNull() && m_reserved_elasticsearch_instance_offering_id_isValid;

    m_elasticsearch_instance_type_isValid = ::OpenAPI::fromJsonValue(m_elasticsearch_instance_type, json[QString("ElasticsearchInstanceType")]);
    m_elasticsearch_instance_type_isSet = !json[QString("ElasticsearchInstanceType")].isNull() && m_elasticsearch_instance_type_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("Duration")]);
    m_duration_isSet = !json[QString("Duration")].isNull() && m_duration_isValid;

    m_fixed_price_isValid = ::OpenAPI::fromJsonValue(m_fixed_price, json[QString("FixedPrice")]);
    m_fixed_price_isSet = !json[QString("FixedPrice")].isNull() && m_fixed_price_isValid;

    m_usage_price_isValid = ::OpenAPI::fromJsonValue(m_usage_price, json[QString("UsagePrice")]);
    m_usage_price_isSet = !json[QString("UsagePrice")].isNull() && m_usage_price_isValid;

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("CurrencyCode")]);
    m_currency_code_isSet = !json[QString("CurrencyCode")].isNull() && m_currency_code_isValid;

    m_elasticsearch_instance_count_isValid = ::OpenAPI::fromJsonValue(m_elasticsearch_instance_count, json[QString("ElasticsearchInstanceCount")]);
    m_elasticsearch_instance_count_isSet = !json[QString("ElasticsearchInstanceCount")].isNull() && m_elasticsearch_instance_count_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_payment_option_isValid = ::OpenAPI::fromJsonValue(m_payment_option, json[QString("PaymentOption")]);
    m_payment_option_isSet = !json[QString("PaymentOption")].isNull() && m_payment_option_isValid;

    m_recurring_charges_isValid = ::OpenAPI::fromJsonValue(m_recurring_charges, json[QString("RecurringCharges")]);
    m_recurring_charges_isSet = !json[QString("RecurringCharges")].isNull() && m_recurring_charges_isValid;
}

QString OAIReservedElasticsearchInstance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReservedElasticsearchInstance::asJsonObject() const {
    QJsonObject obj;
    if (m_reservation_name_isSet) {
        obj.insert(QString("ReservationName"), ::OpenAPI::toJsonValue(m_reservation_name));
    }
    if (m_reserved_elasticsearch_instance_id_isSet) {
        obj.insert(QString("ReservedElasticsearchInstanceId"), ::OpenAPI::toJsonValue(m_reserved_elasticsearch_instance_id));
    }
    if (m_reserved_elasticsearch_instance_offering_id_isSet) {
        obj.insert(QString("ReservedElasticsearchInstanceOfferingId"), ::OpenAPI::toJsonValue(m_reserved_elasticsearch_instance_offering_id));
    }
    if (m_elasticsearch_instance_type.isSet()) {
        obj.insert(QString("ElasticsearchInstanceType"), ::OpenAPI::toJsonValue(m_elasticsearch_instance_type));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_duration_isSet) {
        obj.insert(QString("Duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_fixed_price_isSet) {
        obj.insert(QString("FixedPrice"), ::OpenAPI::toJsonValue(m_fixed_price));
    }
    if (m_usage_price_isSet) {
        obj.insert(QString("UsagePrice"), ::OpenAPI::toJsonValue(m_usage_price));
    }
    if (m_currency_code_isSet) {
        obj.insert(QString("CurrencyCode"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_elasticsearch_instance_count_isSet) {
        obj.insert(QString("ElasticsearchInstanceCount"), ::OpenAPI::toJsonValue(m_elasticsearch_instance_count));
    }
    if (m_state_isSet) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_payment_option.isSet()) {
        obj.insert(QString("PaymentOption"), ::OpenAPI::toJsonValue(m_payment_option));
    }
    if (m_recurring_charges.isSet()) {
        obj.insert(QString("RecurringCharges"), ::OpenAPI::toJsonValue(m_recurring_charges));
    }
    return obj;
}

QString OAIReservedElasticsearchInstance::getReservationName() const {
    return m_reservation_name;
}
void OAIReservedElasticsearchInstance::setReservationName(const QString &reservation_name) {
    m_reservation_name = reservation_name;
    m_reservation_name_isSet = true;
}

bool OAIReservedElasticsearchInstance::is_reservation_name_Set() const{
    return m_reservation_name_isSet;
}

bool OAIReservedElasticsearchInstance::is_reservation_name_Valid() const{
    return m_reservation_name_isValid;
}

QString OAIReservedElasticsearchInstance::getReservedElasticsearchInstanceId() const {
    return m_reserved_elasticsearch_instance_id;
}
void OAIReservedElasticsearchInstance::setReservedElasticsearchInstanceId(const QString &reserved_elasticsearch_instance_id) {
    m_reserved_elasticsearch_instance_id = reserved_elasticsearch_instance_id;
    m_reserved_elasticsearch_instance_id_isSet = true;
}

bool OAIReservedElasticsearchInstance::is_reserved_elasticsearch_instance_id_Set() const{
    return m_reserved_elasticsearch_instance_id_isSet;
}

bool OAIReservedElasticsearchInstance::is_reserved_elasticsearch_instance_id_Valid() const{
    return m_reserved_elasticsearch_instance_id_isValid;
}

QString OAIReservedElasticsearchInstance::getReservedElasticsearchInstanceOfferingId() const {
    return m_reserved_elasticsearch_instance_offering_id;
}
void OAIReservedElasticsearchInstance::setReservedElasticsearchInstanceOfferingId(const QString &reserved_elasticsearch_instance_offering_id) {
    m_reserved_elasticsearch_instance_offering_id = reserved_elasticsearch_instance_offering_id;
    m_reserved_elasticsearch_instance_offering_id_isSet = true;
}

bool OAIReservedElasticsearchInstance::is_reserved_elasticsearch_instance_offering_id_Set() const{
    return m_reserved_elasticsearch_instance_offering_id_isSet;
}

bool OAIReservedElasticsearchInstance::is_reserved_elasticsearch_instance_offering_id_Valid() const{
    return m_reserved_elasticsearch_instance_offering_id_isValid;
}

OAIESPartitionInstanceType OAIReservedElasticsearchInstance::getElasticsearchInstanceType() const {
    return m_elasticsearch_instance_type;
}
void OAIReservedElasticsearchInstance::setElasticsearchInstanceType(const OAIESPartitionInstanceType &elasticsearch_instance_type) {
    m_elasticsearch_instance_type = elasticsearch_instance_type;
    m_elasticsearch_instance_type_isSet = true;
}

bool OAIReservedElasticsearchInstance::is_elasticsearch_instance_type_Set() const{
    return m_elasticsearch_instance_type_isSet;
}

bool OAIReservedElasticsearchInstance::is_elasticsearch_instance_type_Valid() const{
    return m_elasticsearch_instance_type_isValid;
}

QDateTime OAIReservedElasticsearchInstance::getStartTime() const {
    return m_start_time;
}
void OAIReservedElasticsearchInstance::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIReservedElasticsearchInstance::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIReservedElasticsearchInstance::is_start_time_Valid() const{
    return m_start_time_isValid;
}

qint32 OAIReservedElasticsearchInstance::getDuration() const {
    return m_duration;
}
void OAIReservedElasticsearchInstance::setDuration(const qint32 &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIReservedElasticsearchInstance::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIReservedElasticsearchInstance::is_duration_Valid() const{
    return m_duration_isValid;
}

double OAIReservedElasticsearchInstance::getFixedPrice() const {
    return m_fixed_price;
}
void OAIReservedElasticsearchInstance::setFixedPrice(const double &fixed_price) {
    m_fixed_price = fixed_price;
    m_fixed_price_isSet = true;
}

bool OAIReservedElasticsearchInstance::is_fixed_price_Set() const{
    return m_fixed_price_isSet;
}

bool OAIReservedElasticsearchInstance::is_fixed_price_Valid() const{
    return m_fixed_price_isValid;
}

double OAIReservedElasticsearchInstance::getUsagePrice() const {
    return m_usage_price;
}
void OAIReservedElasticsearchInstance::setUsagePrice(const double &usage_price) {
    m_usage_price = usage_price;
    m_usage_price_isSet = true;
}

bool OAIReservedElasticsearchInstance::is_usage_price_Set() const{
    return m_usage_price_isSet;
}

bool OAIReservedElasticsearchInstance::is_usage_price_Valid() const{
    return m_usage_price_isValid;
}

QString OAIReservedElasticsearchInstance::getCurrencyCode() const {
    return m_currency_code;
}
void OAIReservedElasticsearchInstance::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAIReservedElasticsearchInstance::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAIReservedElasticsearchInstance::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

qint32 OAIReservedElasticsearchInstance::getElasticsearchInstanceCount() const {
    return m_elasticsearch_instance_count;
}
void OAIReservedElasticsearchInstance::setElasticsearchInstanceCount(const qint32 &elasticsearch_instance_count) {
    m_elasticsearch_instance_count = elasticsearch_instance_count;
    m_elasticsearch_instance_count_isSet = true;
}

bool OAIReservedElasticsearchInstance::is_elasticsearch_instance_count_Set() const{
    return m_elasticsearch_instance_count_isSet;
}

bool OAIReservedElasticsearchInstance::is_elasticsearch_instance_count_Valid() const{
    return m_elasticsearch_instance_count_isValid;
}

QString OAIReservedElasticsearchInstance::getState() const {
    return m_state;
}
void OAIReservedElasticsearchInstance::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIReservedElasticsearchInstance::is_state_Set() const{
    return m_state_isSet;
}

bool OAIReservedElasticsearchInstance::is_state_Valid() const{
    return m_state_isValid;
}

OAIReservedElasticsearchInstancePaymentOption OAIReservedElasticsearchInstance::getPaymentOption() const {
    return m_payment_option;
}
void OAIReservedElasticsearchInstance::setPaymentOption(const OAIReservedElasticsearchInstancePaymentOption &payment_option) {
    m_payment_option = payment_option;
    m_payment_option_isSet = true;
}

bool OAIReservedElasticsearchInstance::is_payment_option_Set() const{
    return m_payment_option_isSet;
}

bool OAIReservedElasticsearchInstance::is_payment_option_Valid() const{
    return m_payment_option_isValid;
}

QList OAIReservedElasticsearchInstance::getRecurringCharges() const {
    return m_recurring_charges;
}
void OAIReservedElasticsearchInstance::setRecurringCharges(const QList &recurring_charges) {
    m_recurring_charges = recurring_charges;
    m_recurring_charges_isSet = true;
}

bool OAIReservedElasticsearchInstance::is_recurring_charges_Set() const{
    return m_recurring_charges_isSet;
}

bool OAIReservedElasticsearchInstance::is_recurring_charges_Valid() const{
    return m_recurring_charges_isValid;
}

bool OAIReservedElasticsearchInstance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_reservation_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reserved_elasticsearch_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reserved_elasticsearch_instance_offering_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_elasticsearch_instance_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fixed_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_elasticsearch_instance_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_option.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurring_charges.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReservedElasticsearchInstance::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
