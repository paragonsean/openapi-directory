/**
 * Amazon Elasticsearch Service
 * <fullname>Amazon Elasticsearch Configuration Service</fullname> <p>Use the Amazon Elasticsearch Configuration API to create, configure, and manage Elasticsearch domains.</p> <p>For sample code that uses the Configuration API, see the <a href=\"https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-configuration-samples.html\">Amazon Elasticsearch Service Developer Guide</a>. The guide also contains <a href=\"https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-request-signing.html\">sample code for sending signed HTTP requests to the Elasticsearch APIs</a>.</p> <p>The endpoint for configuration service requests is region-specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#elasticsearch-service-regions\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2015-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIElasticsearchDomainStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIElasticsearchDomainStatus::OAIElasticsearchDomainStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIElasticsearchDomainStatus::OAIElasticsearchDomainStatus() {
    this->initializeModel();
}

OAIElasticsearchDomainStatus::~OAIElasticsearchDomainStatus() {}

void OAIElasticsearchDomainStatus::initializeModel() {

    m_domain_id_isSet = false;
    m_domain_id_isValid = false;

    m_domain_name_isSet = false;
    m_domain_name_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_deleted_isSet = false;
    m_deleted_isValid = false;

    m_endpoint_isSet = false;
    m_endpoint_isValid = false;

    m_endpoints_isSet = false;
    m_endpoints_isValid = false;

    m_processing_isSet = false;
    m_processing_isValid = false;

    m_upgrade_processing_isSet = false;
    m_upgrade_processing_isValid = false;

    m_elasticsearch_version_isSet = false;
    m_elasticsearch_version_isValid = false;

    m_elasticsearch_cluster_config_isSet = false;
    m_elasticsearch_cluster_config_isValid = false;

    m_ebs_options_isSet = false;
    m_ebs_options_isValid = false;

    m_access_policies_isSet = false;
    m_access_policies_isValid = false;

    m_snapshot_options_isSet = false;
    m_snapshot_options_isValid = false;

    m_vpc_options_isSet = false;
    m_vpc_options_isValid = false;

    m_cognito_options_isSet = false;
    m_cognito_options_isValid = false;

    m_encryption_at_rest_options_isSet = false;
    m_encryption_at_rest_options_isValid = false;

    m_node_to_node_encryption_options_isSet = false;
    m_node_to_node_encryption_options_isValid = false;

    m_advanced_options_isSet = false;
    m_advanced_options_isValid = false;

    m_log_publishing_options_isSet = false;
    m_log_publishing_options_isValid = false;

    m_service_software_options_isSet = false;
    m_service_software_options_isValid = false;

    m_domain_endpoint_options_isSet = false;
    m_domain_endpoint_options_isValid = false;

    m_advanced_security_options_isSet = false;
    m_advanced_security_options_isValid = false;

    m_auto_tune_options_isSet = false;
    m_auto_tune_options_isValid = false;

    m_change_progress_details_isSet = false;
    m_change_progress_details_isValid = false;
}

void OAIElasticsearchDomainStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIElasticsearchDomainStatus::fromJsonObject(QJsonObject json) {

    m_domain_id_isValid = ::OpenAPI::fromJsonValue(m_domain_id, json[QString("DomainId")]);
    m_domain_id_isSet = !json[QString("DomainId")].isNull() && m_domain_id_isValid;

    m_domain_name_isValid = ::OpenAPI::fromJsonValue(m_domain_name, json[QString("DomainName")]);
    m_domain_name_isSet = !json[QString("DomainName")].isNull() && m_domain_name_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("ARN")]);
    m_arn_isSet = !json[QString("ARN")].isNull() && m_arn_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("Created")]);
    m_created_isSet = !json[QString("Created")].isNull() && m_created_isValid;

    m_deleted_isValid = ::OpenAPI::fromJsonValue(m_deleted, json[QString("Deleted")]);
    m_deleted_isSet = !json[QString("Deleted")].isNull() && m_deleted_isValid;

    m_endpoint_isValid = ::OpenAPI::fromJsonValue(m_endpoint, json[QString("Endpoint")]);
    m_endpoint_isSet = !json[QString("Endpoint")].isNull() && m_endpoint_isValid;

    m_endpoints_isValid = ::OpenAPI::fromJsonValue(m_endpoints, json[QString("Endpoints")]);
    m_endpoints_isSet = !json[QString("Endpoints")].isNull() && m_endpoints_isValid;

    m_processing_isValid = ::OpenAPI::fromJsonValue(m_processing, json[QString("Processing")]);
    m_processing_isSet = !json[QString("Processing")].isNull() && m_processing_isValid;

    m_upgrade_processing_isValid = ::OpenAPI::fromJsonValue(m_upgrade_processing, json[QString("UpgradeProcessing")]);
    m_upgrade_processing_isSet = !json[QString("UpgradeProcessing")].isNull() && m_upgrade_processing_isValid;

    m_elasticsearch_version_isValid = ::OpenAPI::fromJsonValue(m_elasticsearch_version, json[QString("ElasticsearchVersion")]);
    m_elasticsearch_version_isSet = !json[QString("ElasticsearchVersion")].isNull() && m_elasticsearch_version_isValid;

    m_elasticsearch_cluster_config_isValid = ::OpenAPI::fromJsonValue(m_elasticsearch_cluster_config, json[QString("ElasticsearchClusterConfig")]);
    m_elasticsearch_cluster_config_isSet = !json[QString("ElasticsearchClusterConfig")].isNull() && m_elasticsearch_cluster_config_isValid;

    m_ebs_options_isValid = ::OpenAPI::fromJsonValue(m_ebs_options, json[QString("EBSOptions")]);
    m_ebs_options_isSet = !json[QString("EBSOptions")].isNull() && m_ebs_options_isValid;

    m_access_policies_isValid = ::OpenAPI::fromJsonValue(m_access_policies, json[QString("AccessPolicies")]);
    m_access_policies_isSet = !json[QString("AccessPolicies")].isNull() && m_access_policies_isValid;

    m_snapshot_options_isValid = ::OpenAPI::fromJsonValue(m_snapshot_options, json[QString("SnapshotOptions")]);
    m_snapshot_options_isSet = !json[QString("SnapshotOptions")].isNull() && m_snapshot_options_isValid;

    m_vpc_options_isValid = ::OpenAPI::fromJsonValue(m_vpc_options, json[QString("VPCOptions")]);
    m_vpc_options_isSet = !json[QString("VPCOptions")].isNull() && m_vpc_options_isValid;

    m_cognito_options_isValid = ::OpenAPI::fromJsonValue(m_cognito_options, json[QString("CognitoOptions")]);
    m_cognito_options_isSet = !json[QString("CognitoOptions")].isNull() && m_cognito_options_isValid;

    m_encryption_at_rest_options_isValid = ::OpenAPI::fromJsonValue(m_encryption_at_rest_options, json[QString("EncryptionAtRestOptions")]);
    m_encryption_at_rest_options_isSet = !json[QString("EncryptionAtRestOptions")].isNull() && m_encryption_at_rest_options_isValid;

    m_node_to_node_encryption_options_isValid = ::OpenAPI::fromJsonValue(m_node_to_node_encryption_options, json[QString("NodeToNodeEncryptionOptions")]);
    m_node_to_node_encryption_options_isSet = !json[QString("NodeToNodeEncryptionOptions")].isNull() && m_node_to_node_encryption_options_isValid;

    m_advanced_options_isValid = ::OpenAPI::fromJsonValue(m_advanced_options, json[QString("AdvancedOptions")]);
    m_advanced_options_isSet = !json[QString("AdvancedOptions")].isNull() && m_advanced_options_isValid;

    m_log_publishing_options_isValid = ::OpenAPI::fromJsonValue(m_log_publishing_options, json[QString("LogPublishingOptions")]);
    m_log_publishing_options_isSet = !json[QString("LogPublishingOptions")].isNull() && m_log_publishing_options_isValid;

    m_service_software_options_isValid = ::OpenAPI::fromJsonValue(m_service_software_options, json[QString("ServiceSoftwareOptions")]);
    m_service_software_options_isSet = !json[QString("ServiceSoftwareOptions")].isNull() && m_service_software_options_isValid;

    m_domain_endpoint_options_isValid = ::OpenAPI::fromJsonValue(m_domain_endpoint_options, json[QString("DomainEndpointOptions")]);
    m_domain_endpoint_options_isSet = !json[QString("DomainEndpointOptions")].isNull() && m_domain_endpoint_options_isValid;

    m_advanced_security_options_isValid = ::OpenAPI::fromJsonValue(m_advanced_security_options, json[QString("AdvancedSecurityOptions")]);
    m_advanced_security_options_isSet = !json[QString("AdvancedSecurityOptions")].isNull() && m_advanced_security_options_isValid;

    m_auto_tune_options_isValid = ::OpenAPI::fromJsonValue(m_auto_tune_options, json[QString("AutoTuneOptions")]);
    m_auto_tune_options_isSet = !json[QString("AutoTuneOptions")].isNull() && m_auto_tune_options_isValid;

    m_change_progress_details_isValid = ::OpenAPI::fromJsonValue(m_change_progress_details, json[QString("ChangeProgressDetails")]);
    m_change_progress_details_isSet = !json[QString("ChangeProgressDetails")].isNull() && m_change_progress_details_isValid;
}

QString OAIElasticsearchDomainStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIElasticsearchDomainStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_id_isSet) {
        obj.insert(QString("DomainId"), ::OpenAPI::toJsonValue(m_domain_id));
    }
    if (m_domain_name_isSet) {
        obj.insert(QString("DomainName"), ::OpenAPI::toJsonValue(m_domain_name));
    }
    if (m_arn_isSet) {
        obj.insert(QString("ARN"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_created_isSet) {
        obj.insert(QString("Created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_deleted_isSet) {
        obj.insert(QString("Deleted"), ::OpenAPI::toJsonValue(m_deleted));
    }
    if (m_endpoint_isSet) {
        obj.insert(QString("Endpoint"), ::OpenAPI::toJsonValue(m_endpoint));
    }
    if (m_endpoints.isSet()) {
        obj.insert(QString("Endpoints"), ::OpenAPI::toJsonValue(m_endpoints));
    }
    if (m_processing_isSet) {
        obj.insert(QString("Processing"), ::OpenAPI::toJsonValue(m_processing));
    }
    if (m_upgrade_processing_isSet) {
        obj.insert(QString("UpgradeProcessing"), ::OpenAPI::toJsonValue(m_upgrade_processing));
    }
    if (m_elasticsearch_version_isSet) {
        obj.insert(QString("ElasticsearchVersion"), ::OpenAPI::toJsonValue(m_elasticsearch_version));
    }
    if (m_elasticsearch_cluster_config.isSet()) {
        obj.insert(QString("ElasticsearchClusterConfig"), ::OpenAPI::toJsonValue(m_elasticsearch_cluster_config));
    }
    if (m_ebs_options.isSet()) {
        obj.insert(QString("EBSOptions"), ::OpenAPI::toJsonValue(m_ebs_options));
    }
    if (m_access_policies_isSet) {
        obj.insert(QString("AccessPolicies"), ::OpenAPI::toJsonValue(m_access_policies));
    }
    if (m_snapshot_options.isSet()) {
        obj.insert(QString("SnapshotOptions"), ::OpenAPI::toJsonValue(m_snapshot_options));
    }
    if (m_vpc_options.isSet()) {
        obj.insert(QString("VPCOptions"), ::OpenAPI::toJsonValue(m_vpc_options));
    }
    if (m_cognito_options.isSet()) {
        obj.insert(QString("CognitoOptions"), ::OpenAPI::toJsonValue(m_cognito_options));
    }
    if (m_encryption_at_rest_options.isSet()) {
        obj.insert(QString("EncryptionAtRestOptions"), ::OpenAPI::toJsonValue(m_encryption_at_rest_options));
    }
    if (m_node_to_node_encryption_options.isSet()) {
        obj.insert(QString("NodeToNodeEncryptionOptions"), ::OpenAPI::toJsonValue(m_node_to_node_encryption_options));
    }
    if (m_advanced_options.isSet()) {
        obj.insert(QString("AdvancedOptions"), ::OpenAPI::toJsonValue(m_advanced_options));
    }
    if (m_log_publishing_options.isSet()) {
        obj.insert(QString("LogPublishingOptions"), ::OpenAPI::toJsonValue(m_log_publishing_options));
    }
    if (m_service_software_options.isSet()) {
        obj.insert(QString("ServiceSoftwareOptions"), ::OpenAPI::toJsonValue(m_service_software_options));
    }
    if (m_domain_endpoint_options.isSet()) {
        obj.insert(QString("DomainEndpointOptions"), ::OpenAPI::toJsonValue(m_domain_endpoint_options));
    }
    if (m_advanced_security_options.isSet()) {
        obj.insert(QString("AdvancedSecurityOptions"), ::OpenAPI::toJsonValue(m_advanced_security_options));
    }
    if (m_auto_tune_options.isSet()) {
        obj.insert(QString("AutoTuneOptions"), ::OpenAPI::toJsonValue(m_auto_tune_options));
    }
    if (m_change_progress_details.isSet()) {
        obj.insert(QString("ChangeProgressDetails"), ::OpenAPI::toJsonValue(m_change_progress_details));
    }
    return obj;
}

QString OAIElasticsearchDomainStatus::getDomainId() const {
    return m_domain_id;
}
void OAIElasticsearchDomainStatus::setDomainId(const QString &domain_id) {
    m_domain_id = domain_id;
    m_domain_id_isSet = true;
}

bool OAIElasticsearchDomainStatus::is_domain_id_Set() const{
    return m_domain_id_isSet;
}

bool OAIElasticsearchDomainStatus::is_domain_id_Valid() const{
    return m_domain_id_isValid;
}

QString OAIElasticsearchDomainStatus::getDomainName() const {
    return m_domain_name;
}
void OAIElasticsearchDomainStatus::setDomainName(const QString &domain_name) {
    m_domain_name = domain_name;
    m_domain_name_isSet = true;
}

bool OAIElasticsearchDomainStatus::is_domain_name_Set() const{
    return m_domain_name_isSet;
}

bool OAIElasticsearchDomainStatus::is_domain_name_Valid() const{
    return m_domain_name_isValid;
}

QString OAIElasticsearchDomainStatus::getArn() const {
    return m_arn;
}
void OAIElasticsearchDomainStatus::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIElasticsearchDomainStatus::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIElasticsearchDomainStatus::is_arn_Valid() const{
    return m_arn_isValid;
}

bool OAIElasticsearchDomainStatus::getCreated() const {
    return m_created;
}
void OAIElasticsearchDomainStatus::setCreated(const bool &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIElasticsearchDomainStatus::is_created_Set() const{
    return m_created_isSet;
}

bool OAIElasticsearchDomainStatus::is_created_Valid() const{
    return m_created_isValid;
}

bool OAIElasticsearchDomainStatus::getDeleted() const {
    return m_deleted;
}
void OAIElasticsearchDomainStatus::setDeleted(const bool &deleted) {
    m_deleted = deleted;
    m_deleted_isSet = true;
}

bool OAIElasticsearchDomainStatus::is_deleted_Set() const{
    return m_deleted_isSet;
}

bool OAIElasticsearchDomainStatus::is_deleted_Valid() const{
    return m_deleted_isValid;
}

QString OAIElasticsearchDomainStatus::getEndpoint() const {
    return m_endpoint;
}
void OAIElasticsearchDomainStatus::setEndpoint(const QString &endpoint) {
    m_endpoint = endpoint;
    m_endpoint_isSet = true;
}

bool OAIElasticsearchDomainStatus::is_endpoint_Set() const{
    return m_endpoint_isSet;
}

bool OAIElasticsearchDomainStatus::is_endpoint_Valid() const{
    return m_endpoint_isValid;
}

QMap OAIElasticsearchDomainStatus::getEndpoints() const {
    return m_endpoints;
}
void OAIElasticsearchDomainStatus::setEndpoints(const QMap &endpoints) {
    m_endpoints = endpoints;
    m_endpoints_isSet = true;
}

bool OAIElasticsearchDomainStatus::is_endpoints_Set() const{
    return m_endpoints_isSet;
}

bool OAIElasticsearchDomainStatus::is_endpoints_Valid() const{
    return m_endpoints_isValid;
}

bool OAIElasticsearchDomainStatus::getProcessing() const {
    return m_processing;
}
void OAIElasticsearchDomainStatus::setProcessing(const bool &processing) {
    m_processing = processing;
    m_processing_isSet = true;
}

bool OAIElasticsearchDomainStatus::is_processing_Set() const{
    return m_processing_isSet;
}

bool OAIElasticsearchDomainStatus::is_processing_Valid() const{
    return m_processing_isValid;
}

bool OAIElasticsearchDomainStatus::getUpgradeProcessing() const {
    return m_upgrade_processing;
}
void OAIElasticsearchDomainStatus::setUpgradeProcessing(const bool &upgrade_processing) {
    m_upgrade_processing = upgrade_processing;
    m_upgrade_processing_isSet = true;
}

bool OAIElasticsearchDomainStatus::is_upgrade_processing_Set() const{
    return m_upgrade_processing_isSet;
}

bool OAIElasticsearchDomainStatus::is_upgrade_processing_Valid() const{
    return m_upgrade_processing_isValid;
}

QString OAIElasticsearchDomainStatus::getElasticsearchVersion() const {
    return m_elasticsearch_version;
}
void OAIElasticsearchDomainStatus::setElasticsearchVersion(const QString &elasticsearch_version) {
    m_elasticsearch_version = elasticsearch_version;
    m_elasticsearch_version_isSet = true;
}

bool OAIElasticsearchDomainStatus::is_elasticsearch_version_Set() const{
    return m_elasticsearch_version_isSet;
}

bool OAIElasticsearchDomainStatus::is_elasticsearch_version_Valid() const{
    return m_elasticsearch_version_isValid;
}

OAIElasticsearchDomainStatus_ElasticsearchClusterConfig OAIElasticsearchDomainStatus::getElasticsearchClusterConfig() const {
    return m_elasticsearch_cluster_config;
}
void OAIElasticsearchDomainStatus::setElasticsearchClusterConfig(const OAIElasticsearchDomainStatus_ElasticsearchClusterConfig &elasticsearch_cluster_config) {
    m_elasticsearch_cluster_config = elasticsearch_cluster_config;
    m_elasticsearch_cluster_config_isSet = true;
}

bool OAIElasticsearchDomainStatus::is_elasticsearch_cluster_config_Set() const{
    return m_elasticsearch_cluster_config_isSet;
}

bool OAIElasticsearchDomainStatus::is_elasticsearch_cluster_config_Valid() const{
    return m_elasticsearch_cluster_config_isValid;
}

OAIElasticsearchDomainStatus_EBSOptions OAIElasticsearchDomainStatus::getEbsOptions() const {
    return m_ebs_options;
}
void OAIElasticsearchDomainStatus::setEbsOptions(const OAIElasticsearchDomainStatus_EBSOptions &ebs_options) {
    m_ebs_options = ebs_options;
    m_ebs_options_isSet = true;
}

bool OAIElasticsearchDomainStatus::is_ebs_options_Set() const{
    return m_ebs_options_isSet;
}

bool OAIElasticsearchDomainStatus::is_ebs_options_Valid() const{
    return m_ebs_options_isValid;
}

QString OAIElasticsearchDomainStatus::getAccessPolicies() const {
    return m_access_policies;
}
void OAIElasticsearchDomainStatus::setAccessPolicies(const QString &access_policies) {
    m_access_policies = access_policies;
    m_access_policies_isSet = true;
}

bool OAIElasticsearchDomainStatus::is_access_policies_Set() const{
    return m_access_policies_isSet;
}

bool OAIElasticsearchDomainStatus::is_access_policies_Valid() const{
    return m_access_policies_isValid;
}

OAIElasticsearchDomainStatus_SnapshotOptions OAIElasticsearchDomainStatus::getSnapshotOptions() const {
    return m_snapshot_options;
}
void OAIElasticsearchDomainStatus::setSnapshotOptions(const OAIElasticsearchDomainStatus_SnapshotOptions &snapshot_options) {
    m_snapshot_options = snapshot_options;
    m_snapshot_options_isSet = true;
}

bool OAIElasticsearchDomainStatus::is_snapshot_options_Set() const{
    return m_snapshot_options_isSet;
}

bool OAIElasticsearchDomainStatus::is_snapshot_options_Valid() const{
    return m_snapshot_options_isValid;
}

OAIElasticsearchDomainStatus_VPCOptions OAIElasticsearchDomainStatus::getVpcOptions() const {
    return m_vpc_options;
}
void OAIElasticsearchDomainStatus::setVpcOptions(const OAIElasticsearchDomainStatus_VPCOptions &vpc_options) {
    m_vpc_options = vpc_options;
    m_vpc_options_isSet = true;
}

bool OAIElasticsearchDomainStatus::is_vpc_options_Set() const{
    return m_vpc_options_isSet;
}

bool OAIElasticsearchDomainStatus::is_vpc_options_Valid() const{
    return m_vpc_options_isValid;
}

OAIElasticsearchDomainStatus_CognitoOptions OAIElasticsearchDomainStatus::getCognitoOptions() const {
    return m_cognito_options;
}
void OAIElasticsearchDomainStatus::setCognitoOptions(const OAIElasticsearchDomainStatus_CognitoOptions &cognito_options) {
    m_cognito_options = cognito_options;
    m_cognito_options_isSet = true;
}

bool OAIElasticsearchDomainStatus::is_cognito_options_Set() const{
    return m_cognito_options_isSet;
}

bool OAIElasticsearchDomainStatus::is_cognito_options_Valid() const{
    return m_cognito_options_isValid;
}

OAIElasticsearchDomainStatus_EncryptionAtRestOptions OAIElasticsearchDomainStatus::getEncryptionAtRestOptions() const {
    return m_encryption_at_rest_options;
}
void OAIElasticsearchDomainStatus::setEncryptionAtRestOptions(const OAIElasticsearchDomainStatus_EncryptionAtRestOptions &encryption_at_rest_options) {
    m_encryption_at_rest_options = encryption_at_rest_options;
    m_encryption_at_rest_options_isSet = true;
}

bool OAIElasticsearchDomainStatus::is_encryption_at_rest_options_Set() const{
    return m_encryption_at_rest_options_isSet;
}

bool OAIElasticsearchDomainStatus::is_encryption_at_rest_options_Valid() const{
    return m_encryption_at_rest_options_isValid;
}

OAIElasticsearchDomainStatus_NodeToNodeEncryptionOptions OAIElasticsearchDomainStatus::getNodeToNodeEncryptionOptions() const {
    return m_node_to_node_encryption_options;
}
void OAIElasticsearchDomainStatus::setNodeToNodeEncryptionOptions(const OAIElasticsearchDomainStatus_NodeToNodeEncryptionOptions &node_to_node_encryption_options) {
    m_node_to_node_encryption_options = node_to_node_encryption_options;
    m_node_to_node_encryption_options_isSet = true;
}

bool OAIElasticsearchDomainStatus::is_node_to_node_encryption_options_Set() const{
    return m_node_to_node_encryption_options_isSet;
}

bool OAIElasticsearchDomainStatus::is_node_to_node_encryption_options_Valid() const{
    return m_node_to_node_encryption_options_isValid;
}

QMap OAIElasticsearchDomainStatus::getAdvancedOptions() const {
    return m_advanced_options;
}
void OAIElasticsearchDomainStatus::setAdvancedOptions(const QMap &advanced_options) {
    m_advanced_options = advanced_options;
    m_advanced_options_isSet = true;
}

bool OAIElasticsearchDomainStatus::is_advanced_options_Set() const{
    return m_advanced_options_isSet;
}

bool OAIElasticsearchDomainStatus::is_advanced_options_Valid() const{
    return m_advanced_options_isValid;
}

QMap OAIElasticsearchDomainStatus::getLogPublishingOptions() const {
    return m_log_publishing_options;
}
void OAIElasticsearchDomainStatus::setLogPublishingOptions(const QMap &log_publishing_options) {
    m_log_publishing_options = log_publishing_options;
    m_log_publishing_options_isSet = true;
}

bool OAIElasticsearchDomainStatus::is_log_publishing_options_Set() const{
    return m_log_publishing_options_isSet;
}

bool OAIElasticsearchDomainStatus::is_log_publishing_options_Valid() const{
    return m_log_publishing_options_isValid;
}

OAIElasticsearchDomainStatus_ServiceSoftwareOptions OAIElasticsearchDomainStatus::getServiceSoftwareOptions() const {
    return m_service_software_options;
}
void OAIElasticsearchDomainStatus::setServiceSoftwareOptions(const OAIElasticsearchDomainStatus_ServiceSoftwareOptions &service_software_options) {
    m_service_software_options = service_software_options;
    m_service_software_options_isSet = true;
}

bool OAIElasticsearchDomainStatus::is_service_software_options_Set() const{
    return m_service_software_options_isSet;
}

bool OAIElasticsearchDomainStatus::is_service_software_options_Valid() const{
    return m_service_software_options_isValid;
}

OAIElasticsearchDomainStatus_DomainEndpointOptions OAIElasticsearchDomainStatus::getDomainEndpointOptions() const {
    return m_domain_endpoint_options;
}
void OAIElasticsearchDomainStatus::setDomainEndpointOptions(const OAIElasticsearchDomainStatus_DomainEndpointOptions &domain_endpoint_options) {
    m_domain_endpoint_options = domain_endpoint_options;
    m_domain_endpoint_options_isSet = true;
}

bool OAIElasticsearchDomainStatus::is_domain_endpoint_options_Set() const{
    return m_domain_endpoint_options_isSet;
}

bool OAIElasticsearchDomainStatus::is_domain_endpoint_options_Valid() const{
    return m_domain_endpoint_options_isValid;
}

OAIElasticsearchDomainStatus_AdvancedSecurityOptions OAIElasticsearchDomainStatus::getAdvancedSecurityOptions() const {
    return m_advanced_security_options;
}
void OAIElasticsearchDomainStatus::setAdvancedSecurityOptions(const OAIElasticsearchDomainStatus_AdvancedSecurityOptions &advanced_security_options) {
    m_advanced_security_options = advanced_security_options;
    m_advanced_security_options_isSet = true;
}

bool OAIElasticsearchDomainStatus::is_advanced_security_options_Set() const{
    return m_advanced_security_options_isSet;
}

bool OAIElasticsearchDomainStatus::is_advanced_security_options_Valid() const{
    return m_advanced_security_options_isValid;
}

OAIElasticsearchDomainStatus_AutoTuneOptions OAIElasticsearchDomainStatus::getAutoTuneOptions() const {
    return m_auto_tune_options;
}
void OAIElasticsearchDomainStatus::setAutoTuneOptions(const OAIElasticsearchDomainStatus_AutoTuneOptions &auto_tune_options) {
    m_auto_tune_options = auto_tune_options;
    m_auto_tune_options_isSet = true;
}

bool OAIElasticsearchDomainStatus::is_auto_tune_options_Set() const{
    return m_auto_tune_options_isSet;
}

bool OAIElasticsearchDomainStatus::is_auto_tune_options_Valid() const{
    return m_auto_tune_options_isValid;
}

OAIElasticsearchDomainStatus_ChangeProgressDetails OAIElasticsearchDomainStatus::getChangeProgressDetails() const {
    return m_change_progress_details;
}
void OAIElasticsearchDomainStatus::setChangeProgressDetails(const OAIElasticsearchDomainStatus_ChangeProgressDetails &change_progress_details) {
    m_change_progress_details = change_progress_details;
    m_change_progress_details_isSet = true;
}

bool OAIElasticsearchDomainStatus::is_change_progress_details_Set() const{
    return m_change_progress_details_isSet;
}

bool OAIElasticsearchDomainStatus::is_change_progress_details_Valid() const{
    return m_change_progress_details_isValid;
}

bool OAIElasticsearchDomainStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoints.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_processing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgrade_processing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_elasticsearch_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_elasticsearch_cluster_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ebs_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_policies_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cognito_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_at_rest_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_to_node_encryption_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_advanced_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_publishing_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_software_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_endpoint_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_advanced_security_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_tune_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_change_progress_details.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIElasticsearchDomainStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_domain_id_isValid && m_domain_name_isValid && m_arn_isValid && m_elasticsearch_cluster_config_isValid && true;
}

} // namespace OpenAPI
