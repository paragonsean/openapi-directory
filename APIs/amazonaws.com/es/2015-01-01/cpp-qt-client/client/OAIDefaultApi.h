/**
 * Amazon Elasticsearch Service
 * <fullname>Amazon Elasticsearch Configuration Service</fullname> <p>Use the Amazon Elasticsearch Configuration API to create, configure, and manage Elasticsearch domains.</p> <p>For sample code that uses the Configuration API, see the <a href=\"https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-configuration-samples.html\">Amazon Elasticsearch Service Developer Guide</a>. The guide also contains <a href=\"https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-request-signing.html\">sample code for sending signed HTTP requests to the Elasticsearch APIs</a>.</p> <p>The endpoint for configuration service requests is region-specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#elasticsearch-service-regions\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2015-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAcceptInboundCrossClusterSearchConnectionResponse.h"
#include "OAIAddTags_request.h"
#include "OAIAssociatePackageResponse.h"
#include "OAIAuthorizeVpcEndpointAccessResponse.h"
#include "OAIAuthorizeVpcEndpointAccess_request.h"
#include "OAICancelElasticsearchServiceSoftwareUpdateResponse.h"
#include "OAICancelElasticsearchServiceSoftwareUpdate_request.h"
#include "OAICreateElasticsearchDomainResponse.h"
#include "OAICreateElasticsearchDomain_request.h"
#include "OAICreateOutboundCrossClusterSearchConnectionResponse.h"
#include "OAICreateOutboundCrossClusterSearchConnection_request.h"
#include "OAICreatePackageResponse.h"
#include "OAICreatePackage_request.h"
#include "OAICreateVpcEndpointResponse.h"
#include "OAICreateVpcEndpoint_request.h"
#include "OAIDeleteElasticsearchDomainResponse.h"
#include "OAIDeleteInboundCrossClusterSearchConnectionResponse.h"
#include "OAIDeleteOutboundCrossClusterSearchConnectionResponse.h"
#include "OAIDeletePackageResponse.h"
#include "OAIDeleteVpcEndpointResponse.h"
#include "OAIDescribeDomainAutoTunesResponse.h"
#include "OAIDescribeDomainAutoTunes_request.h"
#include "OAIDescribeDomainChangeProgressResponse.h"
#include "OAIDescribeElasticsearchDomainConfigResponse.h"
#include "OAIDescribeElasticsearchDomainResponse.h"
#include "OAIDescribeElasticsearchDomainsResponse.h"
#include "OAIDescribeElasticsearchDomains_request.h"
#include "OAIDescribeElasticsearchInstanceTypeLimitsResponse.h"
#include "OAIDescribeInboundCrossClusterSearchConnectionsResponse.h"
#include "OAIDescribeInboundCrossClusterSearchConnections_request.h"
#include "OAIDescribeOutboundCrossClusterSearchConnectionsResponse.h"
#include "OAIDescribeOutboundCrossClusterSearchConnections_request.h"
#include "OAIDescribePackagesResponse.h"
#include "OAIDescribePackages_request.h"
#include "OAIDescribeReservedElasticsearchInstanceOfferingsResponse.h"
#include "OAIDescribeReservedElasticsearchInstancesResponse.h"
#include "OAIDescribeVpcEndpointsResponse.h"
#include "OAIDescribeVpcEndpoints_request.h"
#include "OAIDissociatePackageResponse.h"
#include "OAIGetCompatibleElasticsearchVersionsResponse.h"
#include "OAIGetPackageVersionHistoryResponse.h"
#include "OAIGetUpgradeHistoryResponse.h"
#include "OAIGetUpgradeStatusResponse.h"
#include "OAIListDomainNamesResponse.h"
#include "OAIListDomainsForPackageResponse.h"
#include "OAIListElasticsearchInstanceTypesResponse.h"
#include "OAIListElasticsearchVersionsResponse.h"
#include "OAIListPackagesForDomainResponse.h"
#include "OAIListTagsResponse.h"
#include "OAIListVpcEndpointAccessResponse.h"
#include "OAIListVpcEndpointsForDomainResponse.h"
#include "OAIListVpcEndpointsResponse.h"
#include "OAIObject.h"
#include "OAIPurchaseReservedElasticsearchInstanceOfferingResponse.h"
#include "OAIPurchaseReservedElasticsearchInstanceOffering_request.h"
#include "OAIRejectInboundCrossClusterSearchConnectionResponse.h"
#include "OAIRemoveTags_request.h"
#include "OAIRevokeVpcEndpointAccess_request.h"
#include "OAIStartElasticsearchServiceSoftwareUpdateResponse.h"
#include "OAIUpdateElasticsearchDomainConfigResponse.h"
#include "OAIUpdateElasticsearchDomainConfig_request.h"
#include "OAIUpdatePackageResponse.h"
#include "OAIUpdatePackage_request.h"
#include "OAIUpdateVpcEndpointResponse.h"
#include "OAIUpdateVpcEndpoint_request.h"
#include "OAIUpgradeElasticsearchDomainResponse.h"
#include "OAIUpgradeElasticsearchDomain_request.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  connection_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void acceptInboundCrossClusterSearchConnection(const QString &connection_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_add_tags_request OAIAddTags_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void addTags(const OAIAddTags_request &oai_add_tags_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  package_id QString [required]
    * @param[in]  domain_name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void associatePackage(const QString &package_id, const QString &domain_name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  domain_name QString [required]
    * @param[in]  oai_authorize_vpc_endpoint_access_request OAIAuthorizeVpcEndpointAccess_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void authorizeVpcEndpointAccess(const QString &domain_name, const OAIAuthorizeVpcEndpointAccess_request &oai_authorize_vpc_endpoint_access_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_cancel_elasticsearch_service_software_update_request OAICancelElasticsearchServiceSoftwareUpdate_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void cancelElasticsearchServiceSoftwareUpdate(const OAICancelElasticsearchServiceSoftwareUpdate_request &oai_cancel_elasticsearch_service_software_update_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_create_elasticsearch_domain_request OAICreateElasticsearchDomain_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createElasticsearchDomain(const OAICreateElasticsearchDomain_request &oai_create_elasticsearch_domain_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_create_outbound_cross_cluster_search_connection_request OAICreateOutboundCrossClusterSearchConnection_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createOutboundCrossClusterSearchConnection(const OAICreateOutboundCrossClusterSearchConnection_request &oai_create_outbound_cross_cluster_search_connection_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_create_package_request OAICreatePackage_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createPackage(const OAICreatePackage_request &oai_create_package_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_create_vpc_endpoint_request OAICreateVpcEndpoint_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createVpcEndpoint(const OAICreateVpcEndpoint_request &oai_create_vpc_endpoint_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  domain_name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteElasticsearchDomain(const QString &domain_name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteElasticsearchServiceRole(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  connection_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteInboundCrossClusterSearchConnection(const QString &connection_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  connection_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteOutboundCrossClusterSearchConnection(const QString &connection_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  package_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deletePackage(const QString &package_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  vpc_endpoint_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteVpcEndpoint(const QString &vpc_endpoint_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  domain_name QString [required]
    * @param[in]  oai_describe_domain_auto_tunes_request OAIDescribeDomainAutoTunes_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void describeDomainAutoTunes(const QString &domain_name, const OAIDescribeDomainAutoTunes_request &oai_describe_domain_auto_tunes_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  domain_name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  changeid QString [optional]
    */
    virtual void describeDomainChangeProgress(const QString &domain_name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &changeid = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  domain_name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeElasticsearchDomain(const QString &domain_name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  domain_name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeElasticsearchDomainConfig(const QString &domain_name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_describe_elasticsearch_domains_request OAIDescribeElasticsearchDomains_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeElasticsearchDomains(const OAIDescribeElasticsearchDomains_request &oai_describe_elasticsearch_domains_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  instance_type QString [required]
    * @param[in]  elasticsearch_version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  domain_name QString [optional]
    */
    virtual void describeElasticsearchInstanceTypeLimits(const QString &instance_type, const QString &elasticsearch_version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &domain_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_describe_inbound_cross_cluster_search_connections_request OAIDescribeInboundCrossClusterSearchConnections_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void describeInboundCrossClusterSearchConnections(const OAIDescribeInboundCrossClusterSearchConnections_request &oai_describe_inbound_cross_cluster_search_connections_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_describe_outbound_cross_cluster_search_connections_request OAIDescribeOutboundCrossClusterSearchConnections_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void describeOutboundCrossClusterSearchConnections(const OAIDescribeOutboundCrossClusterSearchConnections_request &oai_describe_outbound_cross_cluster_search_connections_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_describe_packages_request OAIDescribePackages_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void describePackages(const OAIDescribePackages_request &oai_describe_packages_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  offering_id QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results2 QString [optional]
    * @param[in]  next_token2 QString [optional]
    */
    virtual void describeReservedElasticsearchInstanceOfferings(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offering_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token2 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  reservation_id QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results2 QString [optional]
    * @param[in]  next_token2 QString [optional]
    */
    virtual void describeReservedElasticsearchInstances(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &reservation_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token2 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_describe_vpc_endpoints_request OAIDescribeVpcEndpoints_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeVpcEndpoints(const OAIDescribeVpcEndpoints_request &oai_describe_vpc_endpoints_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  package_id QString [required]
    * @param[in]  domain_name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void dissociatePackage(const QString &package_id, const QString &domain_name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  domain_name QString [optional]
    */
    virtual void getCompatibleElasticsearchVersions(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &domain_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  package_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results2 QString [optional]
    * @param[in]  next_token2 QString [optional]
    */
    virtual void getPackageVersionHistory(const QString &package_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token2 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  domain_name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results2 QString [optional]
    * @param[in]  next_token2 QString [optional]
    */
    virtual void getUpgradeHistory(const QString &domain_name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token2 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  domain_name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getUpgradeStatus(const QString &domain_name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  engine_type QString [optional]
    */
    virtual void listDomainNames(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &engine_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  package_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results2 QString [optional]
    * @param[in]  next_token2 QString [optional]
    */
    virtual void listDomainsForPackage(const QString &package_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token2 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  elasticsearch_version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  domain_name QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results2 QString [optional]
    * @param[in]  next_token2 QString [optional]
    */
    virtual void listElasticsearchInstanceTypes(const QString &elasticsearch_version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &domain_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token2 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results2 QString [optional]
    * @param[in]  next_token2 QString [optional]
    */
    virtual void listElasticsearchVersions(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token2 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  domain_name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results2 QString [optional]
    * @param[in]  next_token2 QString [optional]
    */
    virtual void listPackagesForDomain(const QString &domain_name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token2 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  arn QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void listTags(const QString &arn, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  domain_name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void listVpcEndpointAccess(const QString &domain_name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void listVpcEndpoints(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  domain_name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void listVpcEndpointsForDomain(const QString &domain_name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_purchase_reserved_elasticsearch_instance_offering_request OAIPurchaseReservedElasticsearchInstanceOffering_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void purchaseReservedElasticsearchInstanceOffering(const OAIPurchaseReservedElasticsearchInstanceOffering_request &oai_purchase_reserved_elasticsearch_instance_offering_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  connection_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void rejectInboundCrossClusterSearchConnection(const QString &connection_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_remove_tags_request OAIRemoveTags_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void removeTags(const OAIRemoveTags_request &oai_remove_tags_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  domain_name QString [required]
    * @param[in]  oai_revoke_vpc_endpoint_access_request OAIRevokeVpcEndpointAccess_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void revokeVpcEndpointAccess(const QString &domain_name, const OAIRevokeVpcEndpointAccess_request &oai_revoke_vpc_endpoint_access_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_cancel_elasticsearch_service_software_update_request OAICancelElasticsearchServiceSoftwareUpdate_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void startElasticsearchServiceSoftwareUpdate(const OAICancelElasticsearchServiceSoftwareUpdate_request &oai_cancel_elasticsearch_service_software_update_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  domain_name QString [required]
    * @param[in]  oai_update_elasticsearch_domain_config_request OAIUpdateElasticsearchDomainConfig_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateElasticsearchDomainConfig(const QString &domain_name, const OAIUpdateElasticsearchDomainConfig_request &oai_update_elasticsearch_domain_config_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_update_package_request OAIUpdatePackage_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updatePackage(const OAIUpdatePackage_request &oai_update_package_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_update_vpc_endpoint_request OAIUpdateVpcEndpoint_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateVpcEndpoint(const OAIUpdateVpcEndpoint_request &oai_update_vpc_endpoint_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_upgrade_elasticsearch_domain_request OAIUpgradeElasticsearchDomain_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void upgradeElasticsearchDomain(const OAIUpgradeElasticsearchDomain_request &oai_upgrade_elasticsearch_domain_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void acceptInboundCrossClusterSearchConnectionCallback(OAIHttpRequestWorker *worker);
    void addTagsCallback(OAIHttpRequestWorker *worker);
    void associatePackageCallback(OAIHttpRequestWorker *worker);
    void authorizeVpcEndpointAccessCallback(OAIHttpRequestWorker *worker);
    void cancelElasticsearchServiceSoftwareUpdateCallback(OAIHttpRequestWorker *worker);
    void createElasticsearchDomainCallback(OAIHttpRequestWorker *worker);
    void createOutboundCrossClusterSearchConnectionCallback(OAIHttpRequestWorker *worker);
    void createPackageCallback(OAIHttpRequestWorker *worker);
    void createVpcEndpointCallback(OAIHttpRequestWorker *worker);
    void deleteElasticsearchDomainCallback(OAIHttpRequestWorker *worker);
    void deleteElasticsearchServiceRoleCallback(OAIHttpRequestWorker *worker);
    void deleteInboundCrossClusterSearchConnectionCallback(OAIHttpRequestWorker *worker);
    void deleteOutboundCrossClusterSearchConnectionCallback(OAIHttpRequestWorker *worker);
    void deletePackageCallback(OAIHttpRequestWorker *worker);
    void deleteVpcEndpointCallback(OAIHttpRequestWorker *worker);
    void describeDomainAutoTunesCallback(OAIHttpRequestWorker *worker);
    void describeDomainChangeProgressCallback(OAIHttpRequestWorker *worker);
    void describeElasticsearchDomainCallback(OAIHttpRequestWorker *worker);
    void describeElasticsearchDomainConfigCallback(OAIHttpRequestWorker *worker);
    void describeElasticsearchDomainsCallback(OAIHttpRequestWorker *worker);
    void describeElasticsearchInstanceTypeLimitsCallback(OAIHttpRequestWorker *worker);
    void describeInboundCrossClusterSearchConnectionsCallback(OAIHttpRequestWorker *worker);
    void describeOutboundCrossClusterSearchConnectionsCallback(OAIHttpRequestWorker *worker);
    void describePackagesCallback(OAIHttpRequestWorker *worker);
    void describeReservedElasticsearchInstanceOfferingsCallback(OAIHttpRequestWorker *worker);
    void describeReservedElasticsearchInstancesCallback(OAIHttpRequestWorker *worker);
    void describeVpcEndpointsCallback(OAIHttpRequestWorker *worker);
    void dissociatePackageCallback(OAIHttpRequestWorker *worker);
    void getCompatibleElasticsearchVersionsCallback(OAIHttpRequestWorker *worker);
    void getPackageVersionHistoryCallback(OAIHttpRequestWorker *worker);
    void getUpgradeHistoryCallback(OAIHttpRequestWorker *worker);
    void getUpgradeStatusCallback(OAIHttpRequestWorker *worker);
    void listDomainNamesCallback(OAIHttpRequestWorker *worker);
    void listDomainsForPackageCallback(OAIHttpRequestWorker *worker);
    void listElasticsearchInstanceTypesCallback(OAIHttpRequestWorker *worker);
    void listElasticsearchVersionsCallback(OAIHttpRequestWorker *worker);
    void listPackagesForDomainCallback(OAIHttpRequestWorker *worker);
    void listTagsCallback(OAIHttpRequestWorker *worker);
    void listVpcEndpointAccessCallback(OAIHttpRequestWorker *worker);
    void listVpcEndpointsCallback(OAIHttpRequestWorker *worker);
    void listVpcEndpointsForDomainCallback(OAIHttpRequestWorker *worker);
    void purchaseReservedElasticsearchInstanceOfferingCallback(OAIHttpRequestWorker *worker);
    void rejectInboundCrossClusterSearchConnectionCallback(OAIHttpRequestWorker *worker);
    void removeTagsCallback(OAIHttpRequestWorker *worker);
    void revokeVpcEndpointAccessCallback(OAIHttpRequestWorker *worker);
    void startElasticsearchServiceSoftwareUpdateCallback(OAIHttpRequestWorker *worker);
    void updateElasticsearchDomainConfigCallback(OAIHttpRequestWorker *worker);
    void updatePackageCallback(OAIHttpRequestWorker *worker);
    void updateVpcEndpointCallback(OAIHttpRequestWorker *worker);
    void upgradeElasticsearchDomainCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void acceptInboundCrossClusterSearchConnectionSignal(OAIAcceptInboundCrossClusterSearchConnectionResponse summary);
    void addTagsSignal();
    void associatePackageSignal(OAIAssociatePackageResponse summary);
    void authorizeVpcEndpointAccessSignal(OAIAuthorizeVpcEndpointAccessResponse summary);
    void cancelElasticsearchServiceSoftwareUpdateSignal(OAICancelElasticsearchServiceSoftwareUpdateResponse summary);
    void createElasticsearchDomainSignal(OAICreateElasticsearchDomainResponse summary);
    void createOutboundCrossClusterSearchConnectionSignal(OAICreateOutboundCrossClusterSearchConnectionResponse summary);
    void createPackageSignal(OAICreatePackageResponse summary);
    void createVpcEndpointSignal(OAICreateVpcEndpointResponse summary);
    void deleteElasticsearchDomainSignal(OAIDeleteElasticsearchDomainResponse summary);
    void deleteElasticsearchServiceRoleSignal();
    void deleteInboundCrossClusterSearchConnectionSignal(OAIDeleteInboundCrossClusterSearchConnectionResponse summary);
    void deleteOutboundCrossClusterSearchConnectionSignal(OAIDeleteOutboundCrossClusterSearchConnectionResponse summary);
    void deletePackageSignal(OAIDeletePackageResponse summary);
    void deleteVpcEndpointSignal(OAIDeleteVpcEndpointResponse summary);
    void describeDomainAutoTunesSignal(OAIDescribeDomainAutoTunesResponse summary);
    void describeDomainChangeProgressSignal(OAIDescribeDomainChangeProgressResponse summary);
    void describeElasticsearchDomainSignal(OAIDescribeElasticsearchDomainResponse summary);
    void describeElasticsearchDomainConfigSignal(OAIDescribeElasticsearchDomainConfigResponse summary);
    void describeElasticsearchDomainsSignal(OAIDescribeElasticsearchDomainsResponse summary);
    void describeElasticsearchInstanceTypeLimitsSignal(OAIDescribeElasticsearchInstanceTypeLimitsResponse summary);
    void describeInboundCrossClusterSearchConnectionsSignal(OAIDescribeInboundCrossClusterSearchConnectionsResponse summary);
    void describeOutboundCrossClusterSearchConnectionsSignal(OAIDescribeOutboundCrossClusterSearchConnectionsResponse summary);
    void describePackagesSignal(OAIDescribePackagesResponse summary);
    void describeReservedElasticsearchInstanceOfferingsSignal(OAIDescribeReservedElasticsearchInstanceOfferingsResponse summary);
    void describeReservedElasticsearchInstancesSignal(OAIDescribeReservedElasticsearchInstancesResponse summary);
    void describeVpcEndpointsSignal(OAIDescribeVpcEndpointsResponse summary);
    void dissociatePackageSignal(OAIDissociatePackageResponse summary);
    void getCompatibleElasticsearchVersionsSignal(OAIGetCompatibleElasticsearchVersionsResponse summary);
    void getPackageVersionHistorySignal(OAIGetPackageVersionHistoryResponse summary);
    void getUpgradeHistorySignal(OAIGetUpgradeHistoryResponse summary);
    void getUpgradeStatusSignal(OAIGetUpgradeStatusResponse summary);
    void listDomainNamesSignal(OAIListDomainNamesResponse summary);
    void listDomainsForPackageSignal(OAIListDomainsForPackageResponse summary);
    void listElasticsearchInstanceTypesSignal(OAIListElasticsearchInstanceTypesResponse summary);
    void listElasticsearchVersionsSignal(OAIListElasticsearchVersionsResponse summary);
    void listPackagesForDomainSignal(OAIListPackagesForDomainResponse summary);
    void listTagsSignal(OAIListTagsResponse summary);
    void listVpcEndpointAccessSignal(OAIListVpcEndpointAccessResponse summary);
    void listVpcEndpointsSignal(OAIListVpcEndpointsResponse summary);
    void listVpcEndpointsForDomainSignal(OAIListVpcEndpointsForDomainResponse summary);
    void purchaseReservedElasticsearchInstanceOfferingSignal(OAIPurchaseReservedElasticsearchInstanceOfferingResponse summary);
    void rejectInboundCrossClusterSearchConnectionSignal(OAIRejectInboundCrossClusterSearchConnectionResponse summary);
    void removeTagsSignal();
    void revokeVpcEndpointAccessSignal(OAIObject summary);
    void startElasticsearchServiceSoftwareUpdateSignal(OAIStartElasticsearchServiceSoftwareUpdateResponse summary);
    void updateElasticsearchDomainConfigSignal(OAIUpdateElasticsearchDomainConfigResponse summary);
    void updatePackageSignal(OAIUpdatePackageResponse summary);
    void updateVpcEndpointSignal(OAIUpdateVpcEndpointResponse summary);
    void upgradeElasticsearchDomainSignal(OAIUpgradeElasticsearchDomainResponse summary);


    void acceptInboundCrossClusterSearchConnectionSignalFull(OAIHttpRequestWorker *worker, OAIAcceptInboundCrossClusterSearchConnectionResponse summary);
    void addTagsSignalFull(OAIHttpRequestWorker *worker);
    void associatePackageSignalFull(OAIHttpRequestWorker *worker, OAIAssociatePackageResponse summary);
    void authorizeVpcEndpointAccessSignalFull(OAIHttpRequestWorker *worker, OAIAuthorizeVpcEndpointAccessResponse summary);
    void cancelElasticsearchServiceSoftwareUpdateSignalFull(OAIHttpRequestWorker *worker, OAICancelElasticsearchServiceSoftwareUpdateResponse summary);
    void createElasticsearchDomainSignalFull(OAIHttpRequestWorker *worker, OAICreateElasticsearchDomainResponse summary);
    void createOutboundCrossClusterSearchConnectionSignalFull(OAIHttpRequestWorker *worker, OAICreateOutboundCrossClusterSearchConnectionResponse summary);
    void createPackageSignalFull(OAIHttpRequestWorker *worker, OAICreatePackageResponse summary);
    void createVpcEndpointSignalFull(OAIHttpRequestWorker *worker, OAICreateVpcEndpointResponse summary);
    void deleteElasticsearchDomainSignalFull(OAIHttpRequestWorker *worker, OAIDeleteElasticsearchDomainResponse summary);
    void deleteElasticsearchServiceRoleSignalFull(OAIHttpRequestWorker *worker);
    void deleteInboundCrossClusterSearchConnectionSignalFull(OAIHttpRequestWorker *worker, OAIDeleteInboundCrossClusterSearchConnectionResponse summary);
    void deleteOutboundCrossClusterSearchConnectionSignalFull(OAIHttpRequestWorker *worker, OAIDeleteOutboundCrossClusterSearchConnectionResponse summary);
    void deletePackageSignalFull(OAIHttpRequestWorker *worker, OAIDeletePackageResponse summary);
    void deleteVpcEndpointSignalFull(OAIHttpRequestWorker *worker, OAIDeleteVpcEndpointResponse summary);
    void describeDomainAutoTunesSignalFull(OAIHttpRequestWorker *worker, OAIDescribeDomainAutoTunesResponse summary);
    void describeDomainChangeProgressSignalFull(OAIHttpRequestWorker *worker, OAIDescribeDomainChangeProgressResponse summary);
    void describeElasticsearchDomainSignalFull(OAIHttpRequestWorker *worker, OAIDescribeElasticsearchDomainResponse summary);
    void describeElasticsearchDomainConfigSignalFull(OAIHttpRequestWorker *worker, OAIDescribeElasticsearchDomainConfigResponse summary);
    void describeElasticsearchDomainsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeElasticsearchDomainsResponse summary);
    void describeElasticsearchInstanceTypeLimitsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeElasticsearchInstanceTypeLimitsResponse summary);
    void describeInboundCrossClusterSearchConnectionsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeInboundCrossClusterSearchConnectionsResponse summary);
    void describeOutboundCrossClusterSearchConnectionsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeOutboundCrossClusterSearchConnectionsResponse summary);
    void describePackagesSignalFull(OAIHttpRequestWorker *worker, OAIDescribePackagesResponse summary);
    void describeReservedElasticsearchInstanceOfferingsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeReservedElasticsearchInstanceOfferingsResponse summary);
    void describeReservedElasticsearchInstancesSignalFull(OAIHttpRequestWorker *worker, OAIDescribeReservedElasticsearchInstancesResponse summary);
    void describeVpcEndpointsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeVpcEndpointsResponse summary);
    void dissociatePackageSignalFull(OAIHttpRequestWorker *worker, OAIDissociatePackageResponse summary);
    void getCompatibleElasticsearchVersionsSignalFull(OAIHttpRequestWorker *worker, OAIGetCompatibleElasticsearchVersionsResponse summary);
    void getPackageVersionHistorySignalFull(OAIHttpRequestWorker *worker, OAIGetPackageVersionHistoryResponse summary);
    void getUpgradeHistorySignalFull(OAIHttpRequestWorker *worker, OAIGetUpgradeHistoryResponse summary);
    void getUpgradeStatusSignalFull(OAIHttpRequestWorker *worker, OAIGetUpgradeStatusResponse summary);
    void listDomainNamesSignalFull(OAIHttpRequestWorker *worker, OAIListDomainNamesResponse summary);
    void listDomainsForPackageSignalFull(OAIHttpRequestWorker *worker, OAIListDomainsForPackageResponse summary);
    void listElasticsearchInstanceTypesSignalFull(OAIHttpRequestWorker *worker, OAIListElasticsearchInstanceTypesResponse summary);
    void listElasticsearchVersionsSignalFull(OAIHttpRequestWorker *worker, OAIListElasticsearchVersionsResponse summary);
    void listPackagesForDomainSignalFull(OAIHttpRequestWorker *worker, OAIListPackagesForDomainResponse summary);
    void listTagsSignalFull(OAIHttpRequestWorker *worker, OAIListTagsResponse summary);
    void listVpcEndpointAccessSignalFull(OAIHttpRequestWorker *worker, OAIListVpcEndpointAccessResponse summary);
    void listVpcEndpointsSignalFull(OAIHttpRequestWorker *worker, OAIListVpcEndpointsResponse summary);
    void listVpcEndpointsForDomainSignalFull(OAIHttpRequestWorker *worker, OAIListVpcEndpointsForDomainResponse summary);
    void purchaseReservedElasticsearchInstanceOfferingSignalFull(OAIHttpRequestWorker *worker, OAIPurchaseReservedElasticsearchInstanceOfferingResponse summary);
    void rejectInboundCrossClusterSearchConnectionSignalFull(OAIHttpRequestWorker *worker, OAIRejectInboundCrossClusterSearchConnectionResponse summary);
    void removeTagsSignalFull(OAIHttpRequestWorker *worker);
    void revokeVpcEndpointAccessSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void startElasticsearchServiceSoftwareUpdateSignalFull(OAIHttpRequestWorker *worker, OAIStartElasticsearchServiceSoftwareUpdateResponse summary);
    void updateElasticsearchDomainConfigSignalFull(OAIHttpRequestWorker *worker, OAIUpdateElasticsearchDomainConfigResponse summary);
    void updatePackageSignalFull(OAIHttpRequestWorker *worker, OAIUpdatePackageResponse summary);
    void updateVpcEndpointSignalFull(OAIHttpRequestWorker *worker, OAIUpdateVpcEndpointResponse summary);
    void upgradeElasticsearchDomainSignalFull(OAIHttpRequestWorker *worker, OAIUpgradeElasticsearchDomainResponse summary);

    Q_DECL_DEPRECATED_X("Use acceptInboundCrossClusterSearchConnectionSignalError() instead")
    void acceptInboundCrossClusterSearchConnectionSignalE(OAIAcceptInboundCrossClusterSearchConnectionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void acceptInboundCrossClusterSearchConnectionSignalError(OAIAcceptInboundCrossClusterSearchConnectionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addTagsSignalError() instead")
    void addTagsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addTagsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use associatePackageSignalError() instead")
    void associatePackageSignalE(OAIAssociatePackageResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void associatePackageSignalError(OAIAssociatePackageResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizeVpcEndpointAccessSignalError() instead")
    void authorizeVpcEndpointAccessSignalE(OAIAuthorizeVpcEndpointAccessResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizeVpcEndpointAccessSignalError(OAIAuthorizeVpcEndpointAccessResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cancelElasticsearchServiceSoftwareUpdateSignalError() instead")
    void cancelElasticsearchServiceSoftwareUpdateSignalE(OAICancelElasticsearchServiceSoftwareUpdateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelElasticsearchServiceSoftwareUpdateSignalError(OAICancelElasticsearchServiceSoftwareUpdateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createElasticsearchDomainSignalError() instead")
    void createElasticsearchDomainSignalE(OAICreateElasticsearchDomainResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createElasticsearchDomainSignalError(OAICreateElasticsearchDomainResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOutboundCrossClusterSearchConnectionSignalError() instead")
    void createOutboundCrossClusterSearchConnectionSignalE(OAICreateOutboundCrossClusterSearchConnectionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOutboundCrossClusterSearchConnectionSignalError(OAICreateOutboundCrossClusterSearchConnectionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPackageSignalError() instead")
    void createPackageSignalE(OAICreatePackageResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createPackageSignalError(OAICreatePackageResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createVpcEndpointSignalError() instead")
    void createVpcEndpointSignalE(OAICreateVpcEndpointResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createVpcEndpointSignalError(OAICreateVpcEndpointResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteElasticsearchDomainSignalError() instead")
    void deleteElasticsearchDomainSignalE(OAIDeleteElasticsearchDomainResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteElasticsearchDomainSignalError(OAIDeleteElasticsearchDomainResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteElasticsearchServiceRoleSignalError() instead")
    void deleteElasticsearchServiceRoleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteElasticsearchServiceRoleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteInboundCrossClusterSearchConnectionSignalError() instead")
    void deleteInboundCrossClusterSearchConnectionSignalE(OAIDeleteInboundCrossClusterSearchConnectionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteInboundCrossClusterSearchConnectionSignalError(OAIDeleteInboundCrossClusterSearchConnectionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOutboundCrossClusterSearchConnectionSignalError() instead")
    void deleteOutboundCrossClusterSearchConnectionSignalE(OAIDeleteOutboundCrossClusterSearchConnectionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOutboundCrossClusterSearchConnectionSignalError(OAIDeleteOutboundCrossClusterSearchConnectionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePackageSignalError() instead")
    void deletePackageSignalE(OAIDeletePackageResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePackageSignalError(OAIDeletePackageResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVpcEndpointSignalError() instead")
    void deleteVpcEndpointSignalE(OAIDeleteVpcEndpointResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVpcEndpointSignalError(OAIDeleteVpcEndpointResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeDomainAutoTunesSignalError() instead")
    void describeDomainAutoTunesSignalE(OAIDescribeDomainAutoTunesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeDomainAutoTunesSignalError(OAIDescribeDomainAutoTunesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeDomainChangeProgressSignalError() instead")
    void describeDomainChangeProgressSignalE(OAIDescribeDomainChangeProgressResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeDomainChangeProgressSignalError(OAIDescribeDomainChangeProgressResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeElasticsearchDomainSignalError() instead")
    void describeElasticsearchDomainSignalE(OAIDescribeElasticsearchDomainResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeElasticsearchDomainSignalError(OAIDescribeElasticsearchDomainResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeElasticsearchDomainConfigSignalError() instead")
    void describeElasticsearchDomainConfigSignalE(OAIDescribeElasticsearchDomainConfigResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeElasticsearchDomainConfigSignalError(OAIDescribeElasticsearchDomainConfigResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeElasticsearchDomainsSignalError() instead")
    void describeElasticsearchDomainsSignalE(OAIDescribeElasticsearchDomainsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeElasticsearchDomainsSignalError(OAIDescribeElasticsearchDomainsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeElasticsearchInstanceTypeLimitsSignalError() instead")
    void describeElasticsearchInstanceTypeLimitsSignalE(OAIDescribeElasticsearchInstanceTypeLimitsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeElasticsearchInstanceTypeLimitsSignalError(OAIDescribeElasticsearchInstanceTypeLimitsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeInboundCrossClusterSearchConnectionsSignalError() instead")
    void describeInboundCrossClusterSearchConnectionsSignalE(OAIDescribeInboundCrossClusterSearchConnectionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeInboundCrossClusterSearchConnectionsSignalError(OAIDescribeInboundCrossClusterSearchConnectionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeOutboundCrossClusterSearchConnectionsSignalError() instead")
    void describeOutboundCrossClusterSearchConnectionsSignalE(OAIDescribeOutboundCrossClusterSearchConnectionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeOutboundCrossClusterSearchConnectionsSignalError(OAIDescribeOutboundCrossClusterSearchConnectionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describePackagesSignalError() instead")
    void describePackagesSignalE(OAIDescribePackagesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describePackagesSignalError(OAIDescribePackagesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeReservedElasticsearchInstanceOfferingsSignalError() instead")
    void describeReservedElasticsearchInstanceOfferingsSignalE(OAIDescribeReservedElasticsearchInstanceOfferingsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeReservedElasticsearchInstanceOfferingsSignalError(OAIDescribeReservedElasticsearchInstanceOfferingsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeReservedElasticsearchInstancesSignalError() instead")
    void describeReservedElasticsearchInstancesSignalE(OAIDescribeReservedElasticsearchInstancesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeReservedElasticsearchInstancesSignalError(OAIDescribeReservedElasticsearchInstancesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeVpcEndpointsSignalError() instead")
    void describeVpcEndpointsSignalE(OAIDescribeVpcEndpointsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeVpcEndpointsSignalError(OAIDescribeVpcEndpointsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dissociatePackageSignalError() instead")
    void dissociatePackageSignalE(OAIDissociatePackageResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dissociatePackageSignalError(OAIDissociatePackageResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCompatibleElasticsearchVersionsSignalError() instead")
    void getCompatibleElasticsearchVersionsSignalE(OAIGetCompatibleElasticsearchVersionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCompatibleElasticsearchVersionsSignalError(OAIGetCompatibleElasticsearchVersionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPackageVersionHistorySignalError() instead")
    void getPackageVersionHistorySignalE(OAIGetPackageVersionHistoryResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPackageVersionHistorySignalError(OAIGetPackageVersionHistoryResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUpgradeHistorySignalError() instead")
    void getUpgradeHistorySignalE(OAIGetUpgradeHistoryResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUpgradeHistorySignalError(OAIGetUpgradeHistoryResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUpgradeStatusSignalError() instead")
    void getUpgradeStatusSignalE(OAIGetUpgradeStatusResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUpgradeStatusSignalError(OAIGetUpgradeStatusResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDomainNamesSignalError() instead")
    void listDomainNamesSignalE(OAIListDomainNamesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listDomainNamesSignalError(OAIListDomainNamesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDomainsForPackageSignalError() instead")
    void listDomainsForPackageSignalE(OAIListDomainsForPackageResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listDomainsForPackageSignalError(OAIListDomainsForPackageResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listElasticsearchInstanceTypesSignalError() instead")
    void listElasticsearchInstanceTypesSignalE(OAIListElasticsearchInstanceTypesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listElasticsearchInstanceTypesSignalError(OAIListElasticsearchInstanceTypesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listElasticsearchVersionsSignalError() instead")
    void listElasticsearchVersionsSignalE(OAIListElasticsearchVersionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listElasticsearchVersionsSignalError(OAIListElasticsearchVersionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPackagesForDomainSignalError() instead")
    void listPackagesForDomainSignalE(OAIListPackagesForDomainResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listPackagesForDomainSignalError(OAIListPackagesForDomainResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTagsSignalError() instead")
    void listTagsSignalE(OAIListTagsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listTagsSignalError(OAIListTagsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listVpcEndpointAccessSignalError() instead")
    void listVpcEndpointAccessSignalE(OAIListVpcEndpointAccessResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listVpcEndpointAccessSignalError(OAIListVpcEndpointAccessResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listVpcEndpointsSignalError() instead")
    void listVpcEndpointsSignalE(OAIListVpcEndpointsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listVpcEndpointsSignalError(OAIListVpcEndpointsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listVpcEndpointsForDomainSignalError() instead")
    void listVpcEndpointsForDomainSignalE(OAIListVpcEndpointsForDomainResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listVpcEndpointsForDomainSignalError(OAIListVpcEndpointsForDomainResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use purchaseReservedElasticsearchInstanceOfferingSignalError() instead")
    void purchaseReservedElasticsearchInstanceOfferingSignalE(OAIPurchaseReservedElasticsearchInstanceOfferingResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void purchaseReservedElasticsearchInstanceOfferingSignalError(OAIPurchaseReservedElasticsearchInstanceOfferingResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rejectInboundCrossClusterSearchConnectionSignalError() instead")
    void rejectInboundCrossClusterSearchConnectionSignalE(OAIRejectInboundCrossClusterSearchConnectionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void rejectInboundCrossClusterSearchConnectionSignalError(OAIRejectInboundCrossClusterSearchConnectionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeTagsSignalError() instead")
    void removeTagsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeTagsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use revokeVpcEndpointAccessSignalError() instead")
    void revokeVpcEndpointAccessSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void revokeVpcEndpointAccessSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startElasticsearchServiceSoftwareUpdateSignalError() instead")
    void startElasticsearchServiceSoftwareUpdateSignalE(OAIStartElasticsearchServiceSoftwareUpdateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void startElasticsearchServiceSoftwareUpdateSignalError(OAIStartElasticsearchServiceSoftwareUpdateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateElasticsearchDomainConfigSignalError() instead")
    void updateElasticsearchDomainConfigSignalE(OAIUpdateElasticsearchDomainConfigResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateElasticsearchDomainConfigSignalError(OAIUpdateElasticsearchDomainConfigResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePackageSignalError() instead")
    void updatePackageSignalE(OAIUpdatePackageResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePackageSignalError(OAIUpdatePackageResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateVpcEndpointSignalError() instead")
    void updateVpcEndpointSignalE(OAIUpdateVpcEndpointResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateVpcEndpointSignalError(OAIUpdateVpcEndpointResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use upgradeElasticsearchDomainSignalError() instead")
    void upgradeElasticsearchDomainSignalE(OAIUpgradeElasticsearchDomainResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void upgradeElasticsearchDomainSignalError(OAIUpgradeElasticsearchDomainResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use acceptInboundCrossClusterSearchConnectionSignalErrorFull() instead")
    void acceptInboundCrossClusterSearchConnectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void acceptInboundCrossClusterSearchConnectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addTagsSignalErrorFull() instead")
    void addTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use associatePackageSignalErrorFull() instead")
    void associatePackageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void associatePackageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizeVpcEndpointAccessSignalErrorFull() instead")
    void authorizeVpcEndpointAccessSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizeVpcEndpointAccessSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cancelElasticsearchServiceSoftwareUpdateSignalErrorFull() instead")
    void cancelElasticsearchServiceSoftwareUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelElasticsearchServiceSoftwareUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createElasticsearchDomainSignalErrorFull() instead")
    void createElasticsearchDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createElasticsearchDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOutboundCrossClusterSearchConnectionSignalErrorFull() instead")
    void createOutboundCrossClusterSearchConnectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOutboundCrossClusterSearchConnectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPackageSignalErrorFull() instead")
    void createPackageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createPackageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createVpcEndpointSignalErrorFull() instead")
    void createVpcEndpointSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createVpcEndpointSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteElasticsearchDomainSignalErrorFull() instead")
    void deleteElasticsearchDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteElasticsearchDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteElasticsearchServiceRoleSignalErrorFull() instead")
    void deleteElasticsearchServiceRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteElasticsearchServiceRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteInboundCrossClusterSearchConnectionSignalErrorFull() instead")
    void deleteInboundCrossClusterSearchConnectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteInboundCrossClusterSearchConnectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOutboundCrossClusterSearchConnectionSignalErrorFull() instead")
    void deleteOutboundCrossClusterSearchConnectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOutboundCrossClusterSearchConnectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePackageSignalErrorFull() instead")
    void deletePackageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePackageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVpcEndpointSignalErrorFull() instead")
    void deleteVpcEndpointSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVpcEndpointSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeDomainAutoTunesSignalErrorFull() instead")
    void describeDomainAutoTunesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeDomainAutoTunesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeDomainChangeProgressSignalErrorFull() instead")
    void describeDomainChangeProgressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeDomainChangeProgressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeElasticsearchDomainSignalErrorFull() instead")
    void describeElasticsearchDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeElasticsearchDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeElasticsearchDomainConfigSignalErrorFull() instead")
    void describeElasticsearchDomainConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeElasticsearchDomainConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeElasticsearchDomainsSignalErrorFull() instead")
    void describeElasticsearchDomainsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeElasticsearchDomainsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeElasticsearchInstanceTypeLimitsSignalErrorFull() instead")
    void describeElasticsearchInstanceTypeLimitsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeElasticsearchInstanceTypeLimitsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeInboundCrossClusterSearchConnectionsSignalErrorFull() instead")
    void describeInboundCrossClusterSearchConnectionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeInboundCrossClusterSearchConnectionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeOutboundCrossClusterSearchConnectionsSignalErrorFull() instead")
    void describeOutboundCrossClusterSearchConnectionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeOutboundCrossClusterSearchConnectionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describePackagesSignalErrorFull() instead")
    void describePackagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describePackagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeReservedElasticsearchInstanceOfferingsSignalErrorFull() instead")
    void describeReservedElasticsearchInstanceOfferingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeReservedElasticsearchInstanceOfferingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeReservedElasticsearchInstancesSignalErrorFull() instead")
    void describeReservedElasticsearchInstancesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeReservedElasticsearchInstancesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeVpcEndpointsSignalErrorFull() instead")
    void describeVpcEndpointsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeVpcEndpointsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dissociatePackageSignalErrorFull() instead")
    void dissociatePackageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dissociatePackageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCompatibleElasticsearchVersionsSignalErrorFull() instead")
    void getCompatibleElasticsearchVersionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCompatibleElasticsearchVersionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPackageVersionHistorySignalErrorFull() instead")
    void getPackageVersionHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPackageVersionHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUpgradeHistorySignalErrorFull() instead")
    void getUpgradeHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUpgradeHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUpgradeStatusSignalErrorFull() instead")
    void getUpgradeStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUpgradeStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDomainNamesSignalErrorFull() instead")
    void listDomainNamesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listDomainNamesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDomainsForPackageSignalErrorFull() instead")
    void listDomainsForPackageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listDomainsForPackageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listElasticsearchInstanceTypesSignalErrorFull() instead")
    void listElasticsearchInstanceTypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listElasticsearchInstanceTypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listElasticsearchVersionsSignalErrorFull() instead")
    void listElasticsearchVersionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listElasticsearchVersionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPackagesForDomainSignalErrorFull() instead")
    void listPackagesForDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listPackagesForDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTagsSignalErrorFull() instead")
    void listTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listVpcEndpointAccessSignalErrorFull() instead")
    void listVpcEndpointAccessSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listVpcEndpointAccessSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listVpcEndpointsSignalErrorFull() instead")
    void listVpcEndpointsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listVpcEndpointsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listVpcEndpointsForDomainSignalErrorFull() instead")
    void listVpcEndpointsForDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listVpcEndpointsForDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use purchaseReservedElasticsearchInstanceOfferingSignalErrorFull() instead")
    void purchaseReservedElasticsearchInstanceOfferingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void purchaseReservedElasticsearchInstanceOfferingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rejectInboundCrossClusterSearchConnectionSignalErrorFull() instead")
    void rejectInboundCrossClusterSearchConnectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rejectInboundCrossClusterSearchConnectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeTagsSignalErrorFull() instead")
    void removeTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use revokeVpcEndpointAccessSignalErrorFull() instead")
    void revokeVpcEndpointAccessSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void revokeVpcEndpointAccessSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startElasticsearchServiceSoftwareUpdateSignalErrorFull() instead")
    void startElasticsearchServiceSoftwareUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void startElasticsearchServiceSoftwareUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateElasticsearchDomainConfigSignalErrorFull() instead")
    void updateElasticsearchDomainConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateElasticsearchDomainConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePackageSignalErrorFull() instead")
    void updatePackageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePackageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateVpcEndpointSignalErrorFull() instead")
    void updateVpcEndpointSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateVpcEndpointSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use upgradeElasticsearchDomainSignalErrorFull() instead")
    void upgradeElasticsearchDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void upgradeElasticsearchDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
