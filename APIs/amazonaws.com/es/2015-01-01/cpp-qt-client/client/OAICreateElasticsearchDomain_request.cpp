/**
 * Amazon Elasticsearch Service
 * <fullname>Amazon Elasticsearch Configuration Service</fullname> <p>Use the Amazon Elasticsearch Configuration API to create, configure, and manage Elasticsearch domains.</p> <p>For sample code that uses the Configuration API, see the <a href=\"https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-configuration-samples.html\">Amazon Elasticsearch Service Developer Guide</a>. The guide also contains <a href=\"https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-request-signing.html\">sample code for sending signed HTTP requests to the Elasticsearch APIs</a>.</p> <p>The endpoint for configuration service requests is region-specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#elasticsearch-service-regions\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2015-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateElasticsearchDomain_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateElasticsearchDomain_request::OAICreateElasticsearchDomain_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateElasticsearchDomain_request::OAICreateElasticsearchDomain_request() {
    this->initializeModel();
}

OAICreateElasticsearchDomain_request::~OAICreateElasticsearchDomain_request() {}

void OAICreateElasticsearchDomain_request::initializeModel() {

    m_domain_name_isSet = false;
    m_domain_name_isValid = false;

    m_elasticsearch_version_isSet = false;
    m_elasticsearch_version_isValid = false;

    m_elasticsearch_cluster_config_isSet = false;
    m_elasticsearch_cluster_config_isValid = false;

    m_ebs_options_isSet = false;
    m_ebs_options_isValid = false;

    m_access_policies_isSet = false;
    m_access_policies_isValid = false;

    m_snapshot_options_isSet = false;
    m_snapshot_options_isValid = false;

    m_vpc_options_isSet = false;
    m_vpc_options_isValid = false;

    m_cognito_options_isSet = false;
    m_cognito_options_isValid = false;

    m_encryption_at_rest_options_isSet = false;
    m_encryption_at_rest_options_isValid = false;

    m_node_to_node_encryption_options_isSet = false;
    m_node_to_node_encryption_options_isValid = false;

    m_advanced_options_isSet = false;
    m_advanced_options_isValid = false;

    m_log_publishing_options_isSet = false;
    m_log_publishing_options_isValid = false;

    m_domain_endpoint_options_isSet = false;
    m_domain_endpoint_options_isValid = false;

    m_advanced_security_options_isSet = false;
    m_advanced_security_options_isValid = false;

    m_auto_tune_options_isSet = false;
    m_auto_tune_options_isValid = false;

    m_tag_list_isSet = false;
    m_tag_list_isValid = false;
}

void OAICreateElasticsearchDomain_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateElasticsearchDomain_request::fromJsonObject(QJsonObject json) {

    m_domain_name_isValid = ::OpenAPI::fromJsonValue(m_domain_name, json[QString("DomainName")]);
    m_domain_name_isSet = !json[QString("DomainName")].isNull() && m_domain_name_isValid;

    m_elasticsearch_version_isValid = ::OpenAPI::fromJsonValue(m_elasticsearch_version, json[QString("ElasticsearchVersion")]);
    m_elasticsearch_version_isSet = !json[QString("ElasticsearchVersion")].isNull() && m_elasticsearch_version_isValid;

    m_elasticsearch_cluster_config_isValid = ::OpenAPI::fromJsonValue(m_elasticsearch_cluster_config, json[QString("ElasticsearchClusterConfig")]);
    m_elasticsearch_cluster_config_isSet = !json[QString("ElasticsearchClusterConfig")].isNull() && m_elasticsearch_cluster_config_isValid;

    m_ebs_options_isValid = ::OpenAPI::fromJsonValue(m_ebs_options, json[QString("EBSOptions")]);
    m_ebs_options_isSet = !json[QString("EBSOptions")].isNull() && m_ebs_options_isValid;

    m_access_policies_isValid = ::OpenAPI::fromJsonValue(m_access_policies, json[QString("AccessPolicies")]);
    m_access_policies_isSet = !json[QString("AccessPolicies")].isNull() && m_access_policies_isValid;

    m_snapshot_options_isValid = ::OpenAPI::fromJsonValue(m_snapshot_options, json[QString("SnapshotOptions")]);
    m_snapshot_options_isSet = !json[QString("SnapshotOptions")].isNull() && m_snapshot_options_isValid;

    m_vpc_options_isValid = ::OpenAPI::fromJsonValue(m_vpc_options, json[QString("VPCOptions")]);
    m_vpc_options_isSet = !json[QString("VPCOptions")].isNull() && m_vpc_options_isValid;

    m_cognito_options_isValid = ::OpenAPI::fromJsonValue(m_cognito_options, json[QString("CognitoOptions")]);
    m_cognito_options_isSet = !json[QString("CognitoOptions")].isNull() && m_cognito_options_isValid;

    m_encryption_at_rest_options_isValid = ::OpenAPI::fromJsonValue(m_encryption_at_rest_options, json[QString("EncryptionAtRestOptions")]);
    m_encryption_at_rest_options_isSet = !json[QString("EncryptionAtRestOptions")].isNull() && m_encryption_at_rest_options_isValid;

    m_node_to_node_encryption_options_isValid = ::OpenAPI::fromJsonValue(m_node_to_node_encryption_options, json[QString("NodeToNodeEncryptionOptions")]);
    m_node_to_node_encryption_options_isSet = !json[QString("NodeToNodeEncryptionOptions")].isNull() && m_node_to_node_encryption_options_isValid;

    m_advanced_options_isValid = ::OpenAPI::fromJsonValue(m_advanced_options, json[QString("AdvancedOptions")]);
    m_advanced_options_isSet = !json[QString("AdvancedOptions")].isNull() && m_advanced_options_isValid;

    m_log_publishing_options_isValid = ::OpenAPI::fromJsonValue(m_log_publishing_options, json[QString("LogPublishingOptions")]);
    m_log_publishing_options_isSet = !json[QString("LogPublishingOptions")].isNull() && m_log_publishing_options_isValid;

    m_domain_endpoint_options_isValid = ::OpenAPI::fromJsonValue(m_domain_endpoint_options, json[QString("DomainEndpointOptions")]);
    m_domain_endpoint_options_isSet = !json[QString("DomainEndpointOptions")].isNull() && m_domain_endpoint_options_isValid;

    m_advanced_security_options_isValid = ::OpenAPI::fromJsonValue(m_advanced_security_options, json[QString("AdvancedSecurityOptions")]);
    m_advanced_security_options_isSet = !json[QString("AdvancedSecurityOptions")].isNull() && m_advanced_security_options_isValid;

    m_auto_tune_options_isValid = ::OpenAPI::fromJsonValue(m_auto_tune_options, json[QString("AutoTuneOptions")]);
    m_auto_tune_options_isSet = !json[QString("AutoTuneOptions")].isNull() && m_auto_tune_options_isValid;

    m_tag_list_isValid = ::OpenAPI::fromJsonValue(m_tag_list, json[QString("TagList")]);
    m_tag_list_isSet = !json[QString("TagList")].isNull() && m_tag_list_isValid;
}

QString OAICreateElasticsearchDomain_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateElasticsearchDomain_request::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_name_isSet) {
        obj.insert(QString("DomainName"), ::OpenAPI::toJsonValue(m_domain_name));
    }
    if (m_elasticsearch_version_isSet) {
        obj.insert(QString("ElasticsearchVersion"), ::OpenAPI::toJsonValue(m_elasticsearch_version));
    }
    if (m_elasticsearch_cluster_config.isSet()) {
        obj.insert(QString("ElasticsearchClusterConfig"), ::OpenAPI::toJsonValue(m_elasticsearch_cluster_config));
    }
    if (m_ebs_options.isSet()) {
        obj.insert(QString("EBSOptions"), ::OpenAPI::toJsonValue(m_ebs_options));
    }
    if (m_access_policies_isSet) {
        obj.insert(QString("AccessPolicies"), ::OpenAPI::toJsonValue(m_access_policies));
    }
    if (m_snapshot_options.isSet()) {
        obj.insert(QString("SnapshotOptions"), ::OpenAPI::toJsonValue(m_snapshot_options));
    }
    if (m_vpc_options.isSet()) {
        obj.insert(QString("VPCOptions"), ::OpenAPI::toJsonValue(m_vpc_options));
    }
    if (m_cognito_options.isSet()) {
        obj.insert(QString("CognitoOptions"), ::OpenAPI::toJsonValue(m_cognito_options));
    }
    if (m_encryption_at_rest_options.isSet()) {
        obj.insert(QString("EncryptionAtRestOptions"), ::OpenAPI::toJsonValue(m_encryption_at_rest_options));
    }
    if (m_node_to_node_encryption_options.isSet()) {
        obj.insert(QString("NodeToNodeEncryptionOptions"), ::OpenAPI::toJsonValue(m_node_to_node_encryption_options));
    }
    if (m_advanced_options.size() > 0) {
        obj.insert(QString("AdvancedOptions"), ::OpenAPI::toJsonValue(m_advanced_options));
    }
    if (m_log_publishing_options.size() > 0) {
        obj.insert(QString("LogPublishingOptions"), ::OpenAPI::toJsonValue(m_log_publishing_options));
    }
    if (m_domain_endpoint_options.isSet()) {
        obj.insert(QString("DomainEndpointOptions"), ::OpenAPI::toJsonValue(m_domain_endpoint_options));
    }
    if (m_advanced_security_options.isSet()) {
        obj.insert(QString("AdvancedSecurityOptions"), ::OpenAPI::toJsonValue(m_advanced_security_options));
    }
    if (m_auto_tune_options.isSet()) {
        obj.insert(QString("AutoTuneOptions"), ::OpenAPI::toJsonValue(m_auto_tune_options));
    }
    if (m_tag_list.size() > 0) {
        obj.insert(QString("TagList"), ::OpenAPI::toJsonValue(m_tag_list));
    }
    return obj;
}

QString OAICreateElasticsearchDomain_request::getDomainName() const {
    return m_domain_name;
}
void OAICreateElasticsearchDomain_request::setDomainName(const QString &domain_name) {
    m_domain_name = domain_name;
    m_domain_name_isSet = true;
}

bool OAICreateElasticsearchDomain_request::is_domain_name_Set() const{
    return m_domain_name_isSet;
}

bool OAICreateElasticsearchDomain_request::is_domain_name_Valid() const{
    return m_domain_name_isValid;
}

QString OAICreateElasticsearchDomain_request::getElasticsearchVersion() const {
    return m_elasticsearch_version;
}
void OAICreateElasticsearchDomain_request::setElasticsearchVersion(const QString &elasticsearch_version) {
    m_elasticsearch_version = elasticsearch_version;
    m_elasticsearch_version_isSet = true;
}

bool OAICreateElasticsearchDomain_request::is_elasticsearch_version_Set() const{
    return m_elasticsearch_version_isSet;
}

bool OAICreateElasticsearchDomain_request::is_elasticsearch_version_Valid() const{
    return m_elasticsearch_version_isValid;
}

OAICreateElasticsearchDomain_request_ElasticsearchClusterConfig OAICreateElasticsearchDomain_request::getElasticsearchClusterConfig() const {
    return m_elasticsearch_cluster_config;
}
void OAICreateElasticsearchDomain_request::setElasticsearchClusterConfig(const OAICreateElasticsearchDomain_request_ElasticsearchClusterConfig &elasticsearch_cluster_config) {
    m_elasticsearch_cluster_config = elasticsearch_cluster_config;
    m_elasticsearch_cluster_config_isSet = true;
}

bool OAICreateElasticsearchDomain_request::is_elasticsearch_cluster_config_Set() const{
    return m_elasticsearch_cluster_config_isSet;
}

bool OAICreateElasticsearchDomain_request::is_elasticsearch_cluster_config_Valid() const{
    return m_elasticsearch_cluster_config_isValid;
}

OAICreateElasticsearchDomain_request_EBSOptions OAICreateElasticsearchDomain_request::getEbsOptions() const {
    return m_ebs_options;
}
void OAICreateElasticsearchDomain_request::setEbsOptions(const OAICreateElasticsearchDomain_request_EBSOptions &ebs_options) {
    m_ebs_options = ebs_options;
    m_ebs_options_isSet = true;
}

bool OAICreateElasticsearchDomain_request::is_ebs_options_Set() const{
    return m_ebs_options_isSet;
}

bool OAICreateElasticsearchDomain_request::is_ebs_options_Valid() const{
    return m_ebs_options_isValid;
}

QString OAICreateElasticsearchDomain_request::getAccessPolicies() const {
    return m_access_policies;
}
void OAICreateElasticsearchDomain_request::setAccessPolicies(const QString &access_policies) {
    m_access_policies = access_policies;
    m_access_policies_isSet = true;
}

bool OAICreateElasticsearchDomain_request::is_access_policies_Set() const{
    return m_access_policies_isSet;
}

bool OAICreateElasticsearchDomain_request::is_access_policies_Valid() const{
    return m_access_policies_isValid;
}

OAICreateElasticsearchDomain_request_SnapshotOptions OAICreateElasticsearchDomain_request::getSnapshotOptions() const {
    return m_snapshot_options;
}
void OAICreateElasticsearchDomain_request::setSnapshotOptions(const OAICreateElasticsearchDomain_request_SnapshotOptions &snapshot_options) {
    m_snapshot_options = snapshot_options;
    m_snapshot_options_isSet = true;
}

bool OAICreateElasticsearchDomain_request::is_snapshot_options_Set() const{
    return m_snapshot_options_isSet;
}

bool OAICreateElasticsearchDomain_request::is_snapshot_options_Valid() const{
    return m_snapshot_options_isValid;
}

OAICreateElasticsearchDomain_request_VPCOptions OAICreateElasticsearchDomain_request::getVpcOptions() const {
    return m_vpc_options;
}
void OAICreateElasticsearchDomain_request::setVpcOptions(const OAICreateElasticsearchDomain_request_VPCOptions &vpc_options) {
    m_vpc_options = vpc_options;
    m_vpc_options_isSet = true;
}

bool OAICreateElasticsearchDomain_request::is_vpc_options_Set() const{
    return m_vpc_options_isSet;
}

bool OAICreateElasticsearchDomain_request::is_vpc_options_Valid() const{
    return m_vpc_options_isValid;
}

OAICreateElasticsearchDomain_request_CognitoOptions OAICreateElasticsearchDomain_request::getCognitoOptions() const {
    return m_cognito_options;
}
void OAICreateElasticsearchDomain_request::setCognitoOptions(const OAICreateElasticsearchDomain_request_CognitoOptions &cognito_options) {
    m_cognito_options = cognito_options;
    m_cognito_options_isSet = true;
}

bool OAICreateElasticsearchDomain_request::is_cognito_options_Set() const{
    return m_cognito_options_isSet;
}

bool OAICreateElasticsearchDomain_request::is_cognito_options_Valid() const{
    return m_cognito_options_isValid;
}

OAICreateElasticsearchDomain_request_EncryptionAtRestOptions OAICreateElasticsearchDomain_request::getEncryptionAtRestOptions() const {
    return m_encryption_at_rest_options;
}
void OAICreateElasticsearchDomain_request::setEncryptionAtRestOptions(const OAICreateElasticsearchDomain_request_EncryptionAtRestOptions &encryption_at_rest_options) {
    m_encryption_at_rest_options = encryption_at_rest_options;
    m_encryption_at_rest_options_isSet = true;
}

bool OAICreateElasticsearchDomain_request::is_encryption_at_rest_options_Set() const{
    return m_encryption_at_rest_options_isSet;
}

bool OAICreateElasticsearchDomain_request::is_encryption_at_rest_options_Valid() const{
    return m_encryption_at_rest_options_isValid;
}

OAICreateElasticsearchDomain_request_NodeToNodeEncryptionOptions OAICreateElasticsearchDomain_request::getNodeToNodeEncryptionOptions() const {
    return m_node_to_node_encryption_options;
}
void OAICreateElasticsearchDomain_request::setNodeToNodeEncryptionOptions(const OAICreateElasticsearchDomain_request_NodeToNodeEncryptionOptions &node_to_node_encryption_options) {
    m_node_to_node_encryption_options = node_to_node_encryption_options;
    m_node_to_node_encryption_options_isSet = true;
}

bool OAICreateElasticsearchDomain_request::is_node_to_node_encryption_options_Set() const{
    return m_node_to_node_encryption_options_isSet;
}

bool OAICreateElasticsearchDomain_request::is_node_to_node_encryption_options_Valid() const{
    return m_node_to_node_encryption_options_isValid;
}

QMap<QString, QString> OAICreateElasticsearchDomain_request::getAdvancedOptions() const {
    return m_advanced_options;
}
void OAICreateElasticsearchDomain_request::setAdvancedOptions(const QMap<QString, QString> &advanced_options) {
    m_advanced_options = advanced_options;
    m_advanced_options_isSet = true;
}

bool OAICreateElasticsearchDomain_request::is_advanced_options_Set() const{
    return m_advanced_options_isSet;
}

bool OAICreateElasticsearchDomain_request::is_advanced_options_Valid() const{
    return m_advanced_options_isValid;
}

QMap<QString, OAILogPublishingOption> OAICreateElasticsearchDomain_request::getLogPublishingOptions() const {
    return m_log_publishing_options;
}
void OAICreateElasticsearchDomain_request::setLogPublishingOptions(const QMap<QString, OAILogPublishingOption> &log_publishing_options) {
    m_log_publishing_options = log_publishing_options;
    m_log_publishing_options_isSet = true;
}

bool OAICreateElasticsearchDomain_request::is_log_publishing_options_Set() const{
    return m_log_publishing_options_isSet;
}

bool OAICreateElasticsearchDomain_request::is_log_publishing_options_Valid() const{
    return m_log_publishing_options_isValid;
}

OAICreateElasticsearchDomain_request_DomainEndpointOptions OAICreateElasticsearchDomain_request::getDomainEndpointOptions() const {
    return m_domain_endpoint_options;
}
void OAICreateElasticsearchDomain_request::setDomainEndpointOptions(const OAICreateElasticsearchDomain_request_DomainEndpointOptions &domain_endpoint_options) {
    m_domain_endpoint_options = domain_endpoint_options;
    m_domain_endpoint_options_isSet = true;
}

bool OAICreateElasticsearchDomain_request::is_domain_endpoint_options_Set() const{
    return m_domain_endpoint_options_isSet;
}

bool OAICreateElasticsearchDomain_request::is_domain_endpoint_options_Valid() const{
    return m_domain_endpoint_options_isValid;
}

OAICreateElasticsearchDomain_request_AdvancedSecurityOptions OAICreateElasticsearchDomain_request::getAdvancedSecurityOptions() const {
    return m_advanced_security_options;
}
void OAICreateElasticsearchDomain_request::setAdvancedSecurityOptions(const OAICreateElasticsearchDomain_request_AdvancedSecurityOptions &advanced_security_options) {
    m_advanced_security_options = advanced_security_options;
    m_advanced_security_options_isSet = true;
}

bool OAICreateElasticsearchDomain_request::is_advanced_security_options_Set() const{
    return m_advanced_security_options_isSet;
}

bool OAICreateElasticsearchDomain_request::is_advanced_security_options_Valid() const{
    return m_advanced_security_options_isValid;
}

OAICreateElasticsearchDomain_request_AutoTuneOptions OAICreateElasticsearchDomain_request::getAutoTuneOptions() const {
    return m_auto_tune_options;
}
void OAICreateElasticsearchDomain_request::setAutoTuneOptions(const OAICreateElasticsearchDomain_request_AutoTuneOptions &auto_tune_options) {
    m_auto_tune_options = auto_tune_options;
    m_auto_tune_options_isSet = true;
}

bool OAICreateElasticsearchDomain_request::is_auto_tune_options_Set() const{
    return m_auto_tune_options_isSet;
}

bool OAICreateElasticsearchDomain_request::is_auto_tune_options_Valid() const{
    return m_auto_tune_options_isValid;
}

QList<OAITag> OAICreateElasticsearchDomain_request::getTagList() const {
    return m_tag_list;
}
void OAICreateElasticsearchDomain_request::setTagList(const QList<OAITag> &tag_list) {
    m_tag_list = tag_list;
    m_tag_list_isSet = true;
}

bool OAICreateElasticsearchDomain_request::is_tag_list_Set() const{
    return m_tag_list_isSet;
}

bool OAICreateElasticsearchDomain_request::is_tag_list_Valid() const{
    return m_tag_list_isValid;
}

bool OAICreateElasticsearchDomain_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_elasticsearch_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_elasticsearch_cluster_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ebs_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_policies_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cognito_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_at_rest_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_to_node_encryption_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_advanced_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_publishing_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_endpoint_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_advanced_security_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_tune_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateElasticsearchDomain_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_domain_name_isValid && true;
}

} // namespace OpenAPI
