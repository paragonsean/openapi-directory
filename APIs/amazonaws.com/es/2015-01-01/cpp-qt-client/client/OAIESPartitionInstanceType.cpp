/**
 * Amazon Elasticsearch Service
 * <fullname>Amazon Elasticsearch Configuration Service</fullname> <p>Use the Amazon Elasticsearch Configuration API to create, configure, and manage Elasticsearch domains.</p> <p>For sample code that uses the Configuration API, see the <a href=\"https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-configuration-samples.html\">Amazon Elasticsearch Service Developer Guide</a>. The guide also contains <a href=\"https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-request-signing.html\">sample code for sending signed HTTP requests to the Elasticsearch APIs</a>.</p> <p>The endpoint for configuration service requests is region-specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#elasticsearch-service-regions\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2015-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIESPartitionInstanceType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIESPartitionInstanceType::OAIESPartitionInstanceType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIESPartitionInstanceType::OAIESPartitionInstanceType() {
    this->initializeModel();
}

OAIESPartitionInstanceType::~OAIESPartitionInstanceType() {}

void OAIESPartitionInstanceType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIESPartitionInstanceType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIESPartitionInstanceType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("m3.medium.elasticsearch", Qt::CaseInsensitive) == 0) {
        m_value = eOAIESPartitionInstanceType::M3_MEDIUM_ELASTICSEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("m3.large.elasticsearch", Qt::CaseInsensitive) == 0) {
        m_value = eOAIESPartitionInstanceType::M3_LARGE_ELASTICSEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("m3.xlarge.elasticsearch", Qt::CaseInsensitive) == 0) {
        m_value = eOAIESPartitionInstanceType::M3_XLARGE_ELASTICSEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("m3.2xlarge.elasticsearch", Qt::CaseInsensitive) == 0) {
        m_value = eOAIESPartitionInstanceType::M3_2XLARGE_ELASTICSEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("m4.large.elasticsearch", Qt::CaseInsensitive) == 0) {
        m_value = eOAIESPartitionInstanceType::M4_LARGE_ELASTICSEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("m4.xlarge.elasticsearch", Qt::CaseInsensitive) == 0) {
        m_value = eOAIESPartitionInstanceType::M4_XLARGE_ELASTICSEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("m4.2xlarge.elasticsearch", Qt::CaseInsensitive) == 0) {
        m_value = eOAIESPartitionInstanceType::M4_2XLARGE_ELASTICSEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("m4.4xlarge.elasticsearch", Qt::CaseInsensitive) == 0) {
        m_value = eOAIESPartitionInstanceType::M4_4XLARGE_ELASTICSEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("m4.10xlarge.elasticsearch", Qt::CaseInsensitive) == 0) {
        m_value = eOAIESPartitionInstanceType::M4_10XLARGE_ELASTICSEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("m5.large.elasticsearch", Qt::CaseInsensitive) == 0) {
        m_value = eOAIESPartitionInstanceType::M5_LARGE_ELASTICSEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("m5.xlarge.elasticsearch", Qt::CaseInsensitive) == 0) {
        m_value = eOAIESPartitionInstanceType::M5_XLARGE_ELASTICSEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("m5.2xlarge.elasticsearch", Qt::CaseInsensitive) == 0) {
        m_value = eOAIESPartitionInstanceType::M5_2XLARGE_ELASTICSEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("m5.4xlarge.elasticsearch", Qt::CaseInsensitive) == 0) {
        m_value = eOAIESPartitionInstanceType::M5_4XLARGE_ELASTICSEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("m5.12xlarge.elasticsearch", Qt::CaseInsensitive) == 0) {
        m_value = eOAIESPartitionInstanceType::M5_12XLARGE_ELASTICSEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("r5.large.elasticsearch", Qt::CaseInsensitive) == 0) {
        m_value = eOAIESPartitionInstanceType::R5_LARGE_ELASTICSEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("r5.xlarge.elasticsearch", Qt::CaseInsensitive) == 0) {
        m_value = eOAIESPartitionInstanceType::R5_XLARGE_ELASTICSEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("r5.2xlarge.elasticsearch", Qt::CaseInsensitive) == 0) {
        m_value = eOAIESPartitionInstanceType::R5_2XLARGE_ELASTICSEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("r5.4xlarge.elasticsearch", Qt::CaseInsensitive) == 0) {
        m_value = eOAIESPartitionInstanceType::R5_4XLARGE_ELASTICSEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("r5.12xlarge.elasticsearch", Qt::CaseInsensitive) == 0) {
        m_value = eOAIESPartitionInstanceType::R5_12XLARGE_ELASTICSEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("c5.large.elasticsearch", Qt::CaseInsensitive) == 0) {
        m_value = eOAIESPartitionInstanceType::C5_LARGE_ELASTICSEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("c5.xlarge.elasticsearch", Qt::CaseInsensitive) == 0) {
        m_value = eOAIESPartitionInstanceType::C5_XLARGE_ELASTICSEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("c5.2xlarge.elasticsearch", Qt::CaseInsensitive) == 0) {
        m_value = eOAIESPartitionInstanceType::C5_2XLARGE_ELASTICSEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("c5.4xlarge.elasticsearch", Qt::CaseInsensitive) == 0) {
        m_value = eOAIESPartitionInstanceType::C5_4XLARGE_ELASTICSEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("c5.9xlarge.elasticsearch", Qt::CaseInsensitive) == 0) {
        m_value = eOAIESPartitionInstanceType::C5_9XLARGE_ELASTICSEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("c5.18xlarge.elasticsearch", Qt::CaseInsensitive) == 0) {
        m_value = eOAIESPartitionInstanceType::C5_18XLARGE_ELASTICSEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ultrawarm1.medium.elasticsearch", Qt::CaseInsensitive) == 0) {
        m_value = eOAIESPartitionInstanceType::ULTRAWARM1_MEDIUM_ELASTICSEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ultrawarm1.large.elasticsearch", Qt::CaseInsensitive) == 0) {
        m_value = eOAIESPartitionInstanceType::ULTRAWARM1_LARGE_ELASTICSEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("t2.micro.elasticsearch", Qt::CaseInsensitive) == 0) {
        m_value = eOAIESPartitionInstanceType::T2_MICRO_ELASTICSEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("t2.small.elasticsearch", Qt::CaseInsensitive) == 0) {
        m_value = eOAIESPartitionInstanceType::T2_SMALL_ELASTICSEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("t2.medium.elasticsearch", Qt::CaseInsensitive) == 0) {
        m_value = eOAIESPartitionInstanceType::T2_MEDIUM_ELASTICSEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("r3.large.elasticsearch", Qt::CaseInsensitive) == 0) {
        m_value = eOAIESPartitionInstanceType::R3_LARGE_ELASTICSEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("r3.xlarge.elasticsearch", Qt::CaseInsensitive) == 0) {
        m_value = eOAIESPartitionInstanceType::R3_XLARGE_ELASTICSEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("r3.2xlarge.elasticsearch", Qt::CaseInsensitive) == 0) {
        m_value = eOAIESPartitionInstanceType::R3_2XLARGE_ELASTICSEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("r3.4xlarge.elasticsearch", Qt::CaseInsensitive) == 0) {
        m_value = eOAIESPartitionInstanceType::R3_4XLARGE_ELASTICSEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("r3.8xlarge.elasticsearch", Qt::CaseInsensitive) == 0) {
        m_value = eOAIESPartitionInstanceType::R3_8XLARGE_ELASTICSEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("i2.xlarge.elasticsearch", Qt::CaseInsensitive) == 0) {
        m_value = eOAIESPartitionInstanceType::I2_XLARGE_ELASTICSEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("i2.2xlarge.elasticsearch", Qt::CaseInsensitive) == 0) {
        m_value = eOAIESPartitionInstanceType::I2_2XLARGE_ELASTICSEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("d2.xlarge.elasticsearch", Qt::CaseInsensitive) == 0) {
        m_value = eOAIESPartitionInstanceType::D2_XLARGE_ELASTICSEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("d2.2xlarge.elasticsearch", Qt::CaseInsensitive) == 0) {
        m_value = eOAIESPartitionInstanceType::D2_2XLARGE_ELASTICSEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("d2.4xlarge.elasticsearch", Qt::CaseInsensitive) == 0) {
        m_value = eOAIESPartitionInstanceType::D2_4XLARGE_ELASTICSEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("d2.8xlarge.elasticsearch", Qt::CaseInsensitive) == 0) {
        m_value = eOAIESPartitionInstanceType::D2_8XLARGE_ELASTICSEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("c4.large.elasticsearch", Qt::CaseInsensitive) == 0) {
        m_value = eOAIESPartitionInstanceType::C4_LARGE_ELASTICSEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("c4.xlarge.elasticsearch", Qt::CaseInsensitive) == 0) {
        m_value = eOAIESPartitionInstanceType::C4_XLARGE_ELASTICSEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("c4.2xlarge.elasticsearch", Qt::CaseInsensitive) == 0) {
        m_value = eOAIESPartitionInstanceType::C4_2XLARGE_ELASTICSEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("c4.4xlarge.elasticsearch", Qt::CaseInsensitive) == 0) {
        m_value = eOAIESPartitionInstanceType::C4_4XLARGE_ELASTICSEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("c4.8xlarge.elasticsearch", Qt::CaseInsensitive) == 0) {
        m_value = eOAIESPartitionInstanceType::C4_8XLARGE_ELASTICSEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("r4.large.elasticsearch", Qt::CaseInsensitive) == 0) {
        m_value = eOAIESPartitionInstanceType::R4_LARGE_ELASTICSEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("r4.xlarge.elasticsearch", Qt::CaseInsensitive) == 0) {
        m_value = eOAIESPartitionInstanceType::R4_XLARGE_ELASTICSEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("r4.2xlarge.elasticsearch", Qt::CaseInsensitive) == 0) {
        m_value = eOAIESPartitionInstanceType::R4_2XLARGE_ELASTICSEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("r4.4xlarge.elasticsearch", Qt::CaseInsensitive) == 0) {
        m_value = eOAIESPartitionInstanceType::R4_4XLARGE_ELASTICSEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("r4.8xlarge.elasticsearch", Qt::CaseInsensitive) == 0) {
        m_value = eOAIESPartitionInstanceType::R4_8XLARGE_ELASTICSEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("r4.16xlarge.elasticsearch", Qt::CaseInsensitive) == 0) {
        m_value = eOAIESPartitionInstanceType::R4_16XLARGE_ELASTICSEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("i3.large.elasticsearch", Qt::CaseInsensitive) == 0) {
        m_value = eOAIESPartitionInstanceType::I3_LARGE_ELASTICSEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("i3.xlarge.elasticsearch", Qt::CaseInsensitive) == 0) {
        m_value = eOAIESPartitionInstanceType::I3_XLARGE_ELASTICSEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("i3.2xlarge.elasticsearch", Qt::CaseInsensitive) == 0) {
        m_value = eOAIESPartitionInstanceType::I3_2XLARGE_ELASTICSEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("i3.4xlarge.elasticsearch", Qt::CaseInsensitive) == 0) {
        m_value = eOAIESPartitionInstanceType::I3_4XLARGE_ELASTICSEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("i3.8xlarge.elasticsearch", Qt::CaseInsensitive) == 0) {
        m_value = eOAIESPartitionInstanceType::I3_8XLARGE_ELASTICSEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("i3.16xlarge.elasticsearch", Qt::CaseInsensitive) == 0) {
        m_value = eOAIESPartitionInstanceType::I3_16XLARGE_ELASTICSEARCH;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIESPartitionInstanceType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIESPartitionInstanceType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIESPartitionInstanceType::M3_MEDIUM_ELASTICSEARCH:
            val = "m3.medium.elasticsearch";
            break;
        case eOAIESPartitionInstanceType::M3_LARGE_ELASTICSEARCH:
            val = "m3.large.elasticsearch";
            break;
        case eOAIESPartitionInstanceType::M3_XLARGE_ELASTICSEARCH:
            val = "m3.xlarge.elasticsearch";
            break;
        case eOAIESPartitionInstanceType::M3_2XLARGE_ELASTICSEARCH:
            val = "m3.2xlarge.elasticsearch";
            break;
        case eOAIESPartitionInstanceType::M4_LARGE_ELASTICSEARCH:
            val = "m4.large.elasticsearch";
            break;
        case eOAIESPartitionInstanceType::M4_XLARGE_ELASTICSEARCH:
            val = "m4.xlarge.elasticsearch";
            break;
        case eOAIESPartitionInstanceType::M4_2XLARGE_ELASTICSEARCH:
            val = "m4.2xlarge.elasticsearch";
            break;
        case eOAIESPartitionInstanceType::M4_4XLARGE_ELASTICSEARCH:
            val = "m4.4xlarge.elasticsearch";
            break;
        case eOAIESPartitionInstanceType::M4_10XLARGE_ELASTICSEARCH:
            val = "m4.10xlarge.elasticsearch";
            break;
        case eOAIESPartitionInstanceType::M5_LARGE_ELASTICSEARCH:
            val = "m5.large.elasticsearch";
            break;
        case eOAIESPartitionInstanceType::M5_XLARGE_ELASTICSEARCH:
            val = "m5.xlarge.elasticsearch";
            break;
        case eOAIESPartitionInstanceType::M5_2XLARGE_ELASTICSEARCH:
            val = "m5.2xlarge.elasticsearch";
            break;
        case eOAIESPartitionInstanceType::M5_4XLARGE_ELASTICSEARCH:
            val = "m5.4xlarge.elasticsearch";
            break;
        case eOAIESPartitionInstanceType::M5_12XLARGE_ELASTICSEARCH:
            val = "m5.12xlarge.elasticsearch";
            break;
        case eOAIESPartitionInstanceType::R5_LARGE_ELASTICSEARCH:
            val = "r5.large.elasticsearch";
            break;
        case eOAIESPartitionInstanceType::R5_XLARGE_ELASTICSEARCH:
            val = "r5.xlarge.elasticsearch";
            break;
        case eOAIESPartitionInstanceType::R5_2XLARGE_ELASTICSEARCH:
            val = "r5.2xlarge.elasticsearch";
            break;
        case eOAIESPartitionInstanceType::R5_4XLARGE_ELASTICSEARCH:
            val = "r5.4xlarge.elasticsearch";
            break;
        case eOAIESPartitionInstanceType::R5_12XLARGE_ELASTICSEARCH:
            val = "r5.12xlarge.elasticsearch";
            break;
        case eOAIESPartitionInstanceType::C5_LARGE_ELASTICSEARCH:
            val = "c5.large.elasticsearch";
            break;
        case eOAIESPartitionInstanceType::C5_XLARGE_ELASTICSEARCH:
            val = "c5.xlarge.elasticsearch";
            break;
        case eOAIESPartitionInstanceType::C5_2XLARGE_ELASTICSEARCH:
            val = "c5.2xlarge.elasticsearch";
            break;
        case eOAIESPartitionInstanceType::C5_4XLARGE_ELASTICSEARCH:
            val = "c5.4xlarge.elasticsearch";
            break;
        case eOAIESPartitionInstanceType::C5_9XLARGE_ELASTICSEARCH:
            val = "c5.9xlarge.elasticsearch";
            break;
        case eOAIESPartitionInstanceType::C5_18XLARGE_ELASTICSEARCH:
            val = "c5.18xlarge.elasticsearch";
            break;
        case eOAIESPartitionInstanceType::ULTRAWARM1_MEDIUM_ELASTICSEARCH:
            val = "ultrawarm1.medium.elasticsearch";
            break;
        case eOAIESPartitionInstanceType::ULTRAWARM1_LARGE_ELASTICSEARCH:
            val = "ultrawarm1.large.elasticsearch";
            break;
        case eOAIESPartitionInstanceType::T2_MICRO_ELASTICSEARCH:
            val = "t2.micro.elasticsearch";
            break;
        case eOAIESPartitionInstanceType::T2_SMALL_ELASTICSEARCH:
            val = "t2.small.elasticsearch";
            break;
        case eOAIESPartitionInstanceType::T2_MEDIUM_ELASTICSEARCH:
            val = "t2.medium.elasticsearch";
            break;
        case eOAIESPartitionInstanceType::R3_LARGE_ELASTICSEARCH:
            val = "r3.large.elasticsearch";
            break;
        case eOAIESPartitionInstanceType::R3_XLARGE_ELASTICSEARCH:
            val = "r3.xlarge.elasticsearch";
            break;
        case eOAIESPartitionInstanceType::R3_2XLARGE_ELASTICSEARCH:
            val = "r3.2xlarge.elasticsearch";
            break;
        case eOAIESPartitionInstanceType::R3_4XLARGE_ELASTICSEARCH:
            val = "r3.4xlarge.elasticsearch";
            break;
        case eOAIESPartitionInstanceType::R3_8XLARGE_ELASTICSEARCH:
            val = "r3.8xlarge.elasticsearch";
            break;
        case eOAIESPartitionInstanceType::I2_XLARGE_ELASTICSEARCH:
            val = "i2.xlarge.elasticsearch";
            break;
        case eOAIESPartitionInstanceType::I2_2XLARGE_ELASTICSEARCH:
            val = "i2.2xlarge.elasticsearch";
            break;
        case eOAIESPartitionInstanceType::D2_XLARGE_ELASTICSEARCH:
            val = "d2.xlarge.elasticsearch";
            break;
        case eOAIESPartitionInstanceType::D2_2XLARGE_ELASTICSEARCH:
            val = "d2.2xlarge.elasticsearch";
            break;
        case eOAIESPartitionInstanceType::D2_4XLARGE_ELASTICSEARCH:
            val = "d2.4xlarge.elasticsearch";
            break;
        case eOAIESPartitionInstanceType::D2_8XLARGE_ELASTICSEARCH:
            val = "d2.8xlarge.elasticsearch";
            break;
        case eOAIESPartitionInstanceType::C4_LARGE_ELASTICSEARCH:
            val = "c4.large.elasticsearch";
            break;
        case eOAIESPartitionInstanceType::C4_XLARGE_ELASTICSEARCH:
            val = "c4.xlarge.elasticsearch";
            break;
        case eOAIESPartitionInstanceType::C4_2XLARGE_ELASTICSEARCH:
            val = "c4.2xlarge.elasticsearch";
            break;
        case eOAIESPartitionInstanceType::C4_4XLARGE_ELASTICSEARCH:
            val = "c4.4xlarge.elasticsearch";
            break;
        case eOAIESPartitionInstanceType::C4_8XLARGE_ELASTICSEARCH:
            val = "c4.8xlarge.elasticsearch";
            break;
        case eOAIESPartitionInstanceType::R4_LARGE_ELASTICSEARCH:
            val = "r4.large.elasticsearch";
            break;
        case eOAIESPartitionInstanceType::R4_XLARGE_ELASTICSEARCH:
            val = "r4.xlarge.elasticsearch";
            break;
        case eOAIESPartitionInstanceType::R4_2XLARGE_ELASTICSEARCH:
            val = "r4.2xlarge.elasticsearch";
            break;
        case eOAIESPartitionInstanceType::R4_4XLARGE_ELASTICSEARCH:
            val = "r4.4xlarge.elasticsearch";
            break;
        case eOAIESPartitionInstanceType::R4_8XLARGE_ELASTICSEARCH:
            val = "r4.8xlarge.elasticsearch";
            break;
        case eOAIESPartitionInstanceType::R4_16XLARGE_ELASTICSEARCH:
            val = "r4.16xlarge.elasticsearch";
            break;
        case eOAIESPartitionInstanceType::I3_LARGE_ELASTICSEARCH:
            val = "i3.large.elasticsearch";
            break;
        case eOAIESPartitionInstanceType::I3_XLARGE_ELASTICSEARCH:
            val = "i3.xlarge.elasticsearch";
            break;
        case eOAIESPartitionInstanceType::I3_2XLARGE_ELASTICSEARCH:
            val = "i3.2xlarge.elasticsearch";
            break;
        case eOAIESPartitionInstanceType::I3_4XLARGE_ELASTICSEARCH:
            val = "i3.4xlarge.elasticsearch";
            break;
        case eOAIESPartitionInstanceType::I3_8XLARGE_ELASTICSEARCH:
            val = "i3.8xlarge.elasticsearch";
            break;
        case eOAIESPartitionInstanceType::I3_16XLARGE_ELASTICSEARCH:
            val = "i3.16xlarge.elasticsearch";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIESPartitionInstanceType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIESPartitionInstanceType::eOAIESPartitionInstanceType OAIESPartitionInstanceType::getValue() const {
    return m_value;
}

void OAIESPartitionInstanceType::setValue(const OAIESPartitionInstanceType::eOAIESPartitionInstanceType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIESPartitionInstanceType::isSet() const {
    
    return m_value_isSet;
}

bool OAIESPartitionInstanceType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
