/**
 * Amazon Elasticsearch Service
 * <fullname>Amazon Elasticsearch Configuration Service</fullname> <p>Use the Amazon Elasticsearch Configuration API to create, configure, and manage Elasticsearch domains.</p> <p>For sample code that uses the Configuration API, see the <a href=\"https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-configuration-samples.html\">Amazon Elasticsearch Service Developer Guide</a>. The guide also contains <a href=\"https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-request-signing.html\">sample code for sending signed HTTP requests to the Elasticsearch APIs</a>.</p> <p>The endpoint for configuration service requests is region-specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#elasticsearch-service-regions\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2015-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeReservedElasticsearchInstancesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeReservedElasticsearchInstancesResponse::OAIDescribeReservedElasticsearchInstancesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeReservedElasticsearchInstancesResponse::OAIDescribeReservedElasticsearchInstancesResponse() {
    this->initializeModel();
}

OAIDescribeReservedElasticsearchInstancesResponse::~OAIDescribeReservedElasticsearchInstancesResponse() {}

void OAIDescribeReservedElasticsearchInstancesResponse::initializeModel() {

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_reserved_elasticsearch_instances_isSet = false;
    m_reserved_elasticsearch_instances_isValid = false;
}

void OAIDescribeReservedElasticsearchInstancesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeReservedElasticsearchInstancesResponse::fromJsonObject(QJsonObject json) {

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_reserved_elasticsearch_instances_isValid = ::OpenAPI::fromJsonValue(m_reserved_elasticsearch_instances, json[QString("ReservedElasticsearchInstances")]);
    m_reserved_elasticsearch_instances_isSet = !json[QString("ReservedElasticsearchInstances")].isNull() && m_reserved_elasticsearch_instances_isValid;
}

QString OAIDescribeReservedElasticsearchInstancesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeReservedElasticsearchInstancesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_reserved_elasticsearch_instances.isSet()) {
        obj.insert(QString("ReservedElasticsearchInstances"), ::OpenAPI::toJsonValue(m_reserved_elasticsearch_instances));
    }
    return obj;
}

QString OAIDescribeReservedElasticsearchInstancesResponse::getNextToken() const {
    return m_next_token;
}
void OAIDescribeReservedElasticsearchInstancesResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIDescribeReservedElasticsearchInstancesResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIDescribeReservedElasticsearchInstancesResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

QList OAIDescribeReservedElasticsearchInstancesResponse::getReservedElasticsearchInstances() const {
    return m_reserved_elasticsearch_instances;
}
void OAIDescribeReservedElasticsearchInstancesResponse::setReservedElasticsearchInstances(const QList &reserved_elasticsearch_instances) {
    m_reserved_elasticsearch_instances = reserved_elasticsearch_instances;
    m_reserved_elasticsearch_instances_isSet = true;
}

bool OAIDescribeReservedElasticsearchInstancesResponse::is_reserved_elasticsearch_instances_Set() const{
    return m_reserved_elasticsearch_instances_isSet;
}

bool OAIDescribeReservedElasticsearchInstancesResponse::is_reserved_elasticsearch_instances_Valid() const{
    return m_reserved_elasticsearch_instances_isValid;
}

bool OAIDescribeReservedElasticsearchInstancesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reserved_elasticsearch_instances.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeReservedElasticsearchInstancesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
