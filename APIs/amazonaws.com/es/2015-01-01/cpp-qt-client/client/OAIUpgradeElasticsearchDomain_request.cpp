/**
 * Amazon Elasticsearch Service
 * <fullname>Amazon Elasticsearch Configuration Service</fullname> <p>Use the Amazon Elasticsearch Configuration API to create, configure, and manage Elasticsearch domains.</p> <p>For sample code that uses the Configuration API, see the <a href=\"https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-configuration-samples.html\">Amazon Elasticsearch Service Developer Guide</a>. The guide also contains <a href=\"https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-request-signing.html\">sample code for sending signed HTTP requests to the Elasticsearch APIs</a>.</p> <p>The endpoint for configuration service requests is region-specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#elasticsearch-service-regions\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2015-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpgradeElasticsearchDomain_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpgradeElasticsearchDomain_request::OAIUpgradeElasticsearchDomain_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpgradeElasticsearchDomain_request::OAIUpgradeElasticsearchDomain_request() {
    this->initializeModel();
}

OAIUpgradeElasticsearchDomain_request::~OAIUpgradeElasticsearchDomain_request() {}

void OAIUpgradeElasticsearchDomain_request::initializeModel() {

    m_domain_name_isSet = false;
    m_domain_name_isValid = false;

    m_target_version_isSet = false;
    m_target_version_isValid = false;

    m_perform_check_only_isSet = false;
    m_perform_check_only_isValid = false;
}

void OAIUpgradeElasticsearchDomain_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpgradeElasticsearchDomain_request::fromJsonObject(QJsonObject json) {

    m_domain_name_isValid = ::OpenAPI::fromJsonValue(m_domain_name, json[QString("DomainName")]);
    m_domain_name_isSet = !json[QString("DomainName")].isNull() && m_domain_name_isValid;

    m_target_version_isValid = ::OpenAPI::fromJsonValue(m_target_version, json[QString("TargetVersion")]);
    m_target_version_isSet = !json[QString("TargetVersion")].isNull() && m_target_version_isValid;

    m_perform_check_only_isValid = ::OpenAPI::fromJsonValue(m_perform_check_only, json[QString("PerformCheckOnly")]);
    m_perform_check_only_isSet = !json[QString("PerformCheckOnly")].isNull() && m_perform_check_only_isValid;
}

QString OAIUpgradeElasticsearchDomain_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpgradeElasticsearchDomain_request::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_name_isSet) {
        obj.insert(QString("DomainName"), ::OpenAPI::toJsonValue(m_domain_name));
    }
    if (m_target_version_isSet) {
        obj.insert(QString("TargetVersion"), ::OpenAPI::toJsonValue(m_target_version));
    }
    if (m_perform_check_only_isSet) {
        obj.insert(QString("PerformCheckOnly"), ::OpenAPI::toJsonValue(m_perform_check_only));
    }
    return obj;
}

QString OAIUpgradeElasticsearchDomain_request::getDomainName() const {
    return m_domain_name;
}
void OAIUpgradeElasticsearchDomain_request::setDomainName(const QString &domain_name) {
    m_domain_name = domain_name;
    m_domain_name_isSet = true;
}

bool OAIUpgradeElasticsearchDomain_request::is_domain_name_Set() const{
    return m_domain_name_isSet;
}

bool OAIUpgradeElasticsearchDomain_request::is_domain_name_Valid() const{
    return m_domain_name_isValid;
}

QString OAIUpgradeElasticsearchDomain_request::getTargetVersion() const {
    return m_target_version;
}
void OAIUpgradeElasticsearchDomain_request::setTargetVersion(const QString &target_version) {
    m_target_version = target_version;
    m_target_version_isSet = true;
}

bool OAIUpgradeElasticsearchDomain_request::is_target_version_Set() const{
    return m_target_version_isSet;
}

bool OAIUpgradeElasticsearchDomain_request::is_target_version_Valid() const{
    return m_target_version_isValid;
}

bool OAIUpgradeElasticsearchDomain_request::isPerformCheckOnly() const {
    return m_perform_check_only;
}
void OAIUpgradeElasticsearchDomain_request::setPerformCheckOnly(const bool &perform_check_only) {
    m_perform_check_only = perform_check_only;
    m_perform_check_only_isSet = true;
}

bool OAIUpgradeElasticsearchDomain_request::is_perform_check_only_Set() const{
    return m_perform_check_only_isSet;
}

bool OAIUpgradeElasticsearchDomain_request::is_perform_check_only_Valid() const{
    return m_perform_check_only_isValid;
}

bool OAIUpgradeElasticsearchDomain_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_perform_check_only_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpgradeElasticsearchDomain_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_domain_name_isValid && m_target_version_isValid && true;
}

} // namespace OpenAPI
