/**
 * Amazon Elasticsearch Service
 * <fullname>Amazon Elasticsearch Configuration Service</fullname> <p>Use the Amazon Elasticsearch Configuration API to create, configure, and manage Elasticsearch domains.</p> <p>For sample code that uses the Configuration API, see the <a href=\"https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-configuration-samples.html\">Amazon Elasticsearch Service Developer Guide</a>. The guide also contains <a href=\"https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-request-signing.html\">sample code for sending signed HTTP requests to the Elasticsearch APIs</a>.</p> <p>The endpoint for configuration service requests is region-specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#elasticsearch-service-regions\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2015-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribePackagesFilterName.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribePackagesFilterName::OAIDescribePackagesFilterName(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribePackagesFilterName::OAIDescribePackagesFilterName() {
    this->initializeModel();
}

OAIDescribePackagesFilterName::~OAIDescribePackagesFilterName() {}

void OAIDescribePackagesFilterName::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIDescribePackagesFilterName::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIDescribePackagesFilterName::fromJson(QString jsonString) {
    
    if ( jsonString.compare("PackageID", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDescribePackagesFilterName::PACKAGEID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PackageName", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDescribePackagesFilterName::PACKAGENAME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PackageStatus", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDescribePackagesFilterName::PACKAGESTATUS;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIDescribePackagesFilterName::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIDescribePackagesFilterName::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIDescribePackagesFilterName::PACKAGEID:
            val = "PackageID";
            break;
        case eOAIDescribePackagesFilterName::PACKAGENAME:
            val = "PackageName";
            break;
        case eOAIDescribePackagesFilterName::PACKAGESTATUS:
            val = "PackageStatus";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIDescribePackagesFilterName::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIDescribePackagesFilterName::eOAIDescribePackagesFilterName OAIDescribePackagesFilterName::getValue() const {
    return m_value;
}

void OAIDescribePackagesFilterName::setValue(const OAIDescribePackagesFilterName::eOAIDescribePackagesFilterName& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIDescribePackagesFilterName::isSet() const {
    
    return m_value_isSet;
}

bool OAIDescribePackagesFilterName::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
