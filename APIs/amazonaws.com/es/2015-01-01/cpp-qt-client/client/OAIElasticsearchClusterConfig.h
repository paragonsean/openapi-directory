/**
 * Amazon Elasticsearch Service
 * <fullname>Amazon Elasticsearch Configuration Service</fullname> <p>Use the Amazon Elasticsearch Configuration API to create, configure, and manage Elasticsearch domains.</p> <p>For sample code that uses the Configuration API, see the <a href=\"https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-configuration-samples.html\">Amazon Elasticsearch Service Developer Guide</a>. The guide also contains <a href=\"https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-request-signing.html\">sample code for sending signed HTTP requests to the Elasticsearch APIs</a>.</p> <p>The endpoint for configuration service requests is region-specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#elasticsearch-service-regions\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2015-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIElasticsearchClusterConfig.h
 *
 * Specifies the configuration for the domain cluster, such as the type and number of instances.
 */

#ifndef OAIElasticsearchClusterConfig_H
#define OAIElasticsearchClusterConfig_H

#include <QJsonObject>

#include "OAICreateElasticsearchDomain_request_ElasticsearchClusterConfig_ColdStorageOptions.h"
#include "OAICreateElasticsearchDomain_request_ElasticsearchClusterConfig_ZoneAwarenessConfig.h"
#include "OAIESPartitionInstanceType.h"
#include "OAIESWarmPartitionInstanceType.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreateElasticsearchDomain_request_ElasticsearchClusterConfig_ZoneAwarenessConfig;
class OAICreateElasticsearchDomain_request_ElasticsearchClusterConfig_ColdStorageOptions;

class OAIElasticsearchClusterConfig : public OAIObject {
public:
    OAIElasticsearchClusterConfig();
    OAIElasticsearchClusterConfig(QString json);
    ~OAIElasticsearchClusterConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIESPartitionInstanceType getInstanceType() const;
    void setInstanceType(const OAIESPartitionInstanceType &instance_type);
    bool is_instance_type_Set() const;
    bool is_instance_type_Valid() const;

    qint32 getInstanceCount() const;
    void setInstanceCount(const qint32 &instance_count);
    bool is_instance_count_Set() const;
    bool is_instance_count_Valid() const;

    bool getDedicatedMasterEnabled() const;
    void setDedicatedMasterEnabled(const bool &dedicated_master_enabled);
    bool is_dedicated_master_enabled_Set() const;
    bool is_dedicated_master_enabled_Valid() const;

    bool getZoneAwarenessEnabled() const;
    void setZoneAwarenessEnabled(const bool &zone_awareness_enabled);
    bool is_zone_awareness_enabled_Set() const;
    bool is_zone_awareness_enabled_Valid() const;

    OAICreateElasticsearchDomain_request_ElasticsearchClusterConfig_ZoneAwarenessConfig getZoneAwarenessConfig() const;
    void setZoneAwarenessConfig(const OAICreateElasticsearchDomain_request_ElasticsearchClusterConfig_ZoneAwarenessConfig &zone_awareness_config);
    bool is_zone_awareness_config_Set() const;
    bool is_zone_awareness_config_Valid() const;

    OAIESPartitionInstanceType getDedicatedMasterType() const;
    void setDedicatedMasterType(const OAIESPartitionInstanceType &dedicated_master_type);
    bool is_dedicated_master_type_Set() const;
    bool is_dedicated_master_type_Valid() const;

    qint32 getDedicatedMasterCount() const;
    void setDedicatedMasterCount(const qint32 &dedicated_master_count);
    bool is_dedicated_master_count_Set() const;
    bool is_dedicated_master_count_Valid() const;

    bool getWarmEnabled() const;
    void setWarmEnabled(const bool &warm_enabled);
    bool is_warm_enabled_Set() const;
    bool is_warm_enabled_Valid() const;

    OAIESWarmPartitionInstanceType getWarmType() const;
    void setWarmType(const OAIESWarmPartitionInstanceType &warm_type);
    bool is_warm_type_Set() const;
    bool is_warm_type_Valid() const;

    qint32 getWarmCount() const;
    void setWarmCount(const qint32 &warm_count);
    bool is_warm_count_Set() const;
    bool is_warm_count_Valid() const;

    OAICreateElasticsearchDomain_request_ElasticsearchClusterConfig_ColdStorageOptions getColdStorageOptions() const;
    void setColdStorageOptions(const OAICreateElasticsearchDomain_request_ElasticsearchClusterConfig_ColdStorageOptions &cold_storage_options);
    bool is_cold_storage_options_Set() const;
    bool is_cold_storage_options_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIESPartitionInstanceType m_instance_type;
    bool m_instance_type_isSet;
    bool m_instance_type_isValid;

    qint32 m_instance_count;
    bool m_instance_count_isSet;
    bool m_instance_count_isValid;

    bool m_dedicated_master_enabled;
    bool m_dedicated_master_enabled_isSet;
    bool m_dedicated_master_enabled_isValid;

    bool m_zone_awareness_enabled;
    bool m_zone_awareness_enabled_isSet;
    bool m_zone_awareness_enabled_isValid;

    OAICreateElasticsearchDomain_request_ElasticsearchClusterConfig_ZoneAwarenessConfig m_zone_awareness_config;
    bool m_zone_awareness_config_isSet;
    bool m_zone_awareness_config_isValid;

    OAIESPartitionInstanceType m_dedicated_master_type;
    bool m_dedicated_master_type_isSet;
    bool m_dedicated_master_type_isValid;

    qint32 m_dedicated_master_count;
    bool m_dedicated_master_count_isSet;
    bool m_dedicated_master_count_isValid;

    bool m_warm_enabled;
    bool m_warm_enabled_isSet;
    bool m_warm_enabled_isValid;

    OAIESWarmPartitionInstanceType m_warm_type;
    bool m_warm_type_isSet;
    bool m_warm_type_isValid;

    qint32 m_warm_count;
    bool m_warm_count_isSet;
    bool m_warm_count_isValid;

    OAICreateElasticsearchDomain_request_ElasticsearchClusterConfig_ColdStorageOptions m_cold_storage_options;
    bool m_cold_storage_options_isSet;
    bool m_cold_storage_options_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIElasticsearchClusterConfig)

#endif // OAIElasticsearchClusterConfig_H
