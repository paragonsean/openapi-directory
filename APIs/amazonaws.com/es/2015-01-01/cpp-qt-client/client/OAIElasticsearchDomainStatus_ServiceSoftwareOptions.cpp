/**
 * Amazon Elasticsearch Service
 * <fullname>Amazon Elasticsearch Configuration Service</fullname> <p>Use the Amazon Elasticsearch Configuration API to create, configure, and manage Elasticsearch domains.</p> <p>For sample code that uses the Configuration API, see the <a href=\"https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-configuration-samples.html\">Amazon Elasticsearch Service Developer Guide</a>. The guide also contains <a href=\"https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-request-signing.html\">sample code for sending signed HTTP requests to the Elasticsearch APIs</a>.</p> <p>The endpoint for configuration service requests is region-specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#elasticsearch-service-regions\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2015-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIElasticsearchDomainStatus_ServiceSoftwareOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIElasticsearchDomainStatus_ServiceSoftwareOptions::OAIElasticsearchDomainStatus_ServiceSoftwareOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIElasticsearchDomainStatus_ServiceSoftwareOptions::OAIElasticsearchDomainStatus_ServiceSoftwareOptions() {
    this->initializeModel();
}

OAIElasticsearchDomainStatus_ServiceSoftwareOptions::~OAIElasticsearchDomainStatus_ServiceSoftwareOptions() {}

void OAIElasticsearchDomainStatus_ServiceSoftwareOptions::initializeModel() {

    m_current_version_isSet = false;
    m_current_version_isValid = false;

    m_new_version_isSet = false;
    m_new_version_isValid = false;

    m_update_available_isSet = false;
    m_update_available_isValid = false;

    m_cancellable_isSet = false;
    m_cancellable_isValid = false;

    m_update_status_isSet = false;
    m_update_status_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_automated_update_date_isSet = false;
    m_automated_update_date_isValid = false;

    m_optional_deployment_isSet = false;
    m_optional_deployment_isValid = false;
}

void OAIElasticsearchDomainStatus_ServiceSoftwareOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIElasticsearchDomainStatus_ServiceSoftwareOptions::fromJsonObject(QJsonObject json) {

    m_current_version_isValid = ::OpenAPI::fromJsonValue(m_current_version, json[QString("CurrentVersion")]);
    m_current_version_isSet = !json[QString("CurrentVersion")].isNull() && m_current_version_isValid;

    m_new_version_isValid = ::OpenAPI::fromJsonValue(m_new_version, json[QString("NewVersion")]);
    m_new_version_isSet = !json[QString("NewVersion")].isNull() && m_new_version_isValid;

    m_update_available_isValid = ::OpenAPI::fromJsonValue(m_update_available, json[QString("UpdateAvailable")]);
    m_update_available_isSet = !json[QString("UpdateAvailable")].isNull() && m_update_available_isValid;

    m_cancellable_isValid = ::OpenAPI::fromJsonValue(m_cancellable, json[QString("Cancellable")]);
    m_cancellable_isSet = !json[QString("Cancellable")].isNull() && m_cancellable_isValid;

    m_update_status_isValid = ::OpenAPI::fromJsonValue(m_update_status, json[QString("UpdateStatus")]);
    m_update_status_isSet = !json[QString("UpdateStatus")].isNull() && m_update_status_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_automated_update_date_isValid = ::OpenAPI::fromJsonValue(m_automated_update_date, json[QString("AutomatedUpdateDate")]);
    m_automated_update_date_isSet = !json[QString("AutomatedUpdateDate")].isNull() && m_automated_update_date_isValid;

    m_optional_deployment_isValid = ::OpenAPI::fromJsonValue(m_optional_deployment, json[QString("OptionalDeployment")]);
    m_optional_deployment_isSet = !json[QString("OptionalDeployment")].isNull() && m_optional_deployment_isValid;
}

QString OAIElasticsearchDomainStatus_ServiceSoftwareOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIElasticsearchDomainStatus_ServiceSoftwareOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_current_version_isSet) {
        obj.insert(QString("CurrentVersion"), ::OpenAPI::toJsonValue(m_current_version));
    }
    if (m_new_version_isSet) {
        obj.insert(QString("NewVersion"), ::OpenAPI::toJsonValue(m_new_version));
    }
    if (m_update_available_isSet) {
        obj.insert(QString("UpdateAvailable"), ::OpenAPI::toJsonValue(m_update_available));
    }
    if (m_cancellable_isSet) {
        obj.insert(QString("Cancellable"), ::OpenAPI::toJsonValue(m_cancellable));
    }
    if (m_update_status.isSet()) {
        obj.insert(QString("UpdateStatus"), ::OpenAPI::toJsonValue(m_update_status));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_automated_update_date_isSet) {
        obj.insert(QString("AutomatedUpdateDate"), ::OpenAPI::toJsonValue(m_automated_update_date));
    }
    if (m_optional_deployment_isSet) {
        obj.insert(QString("OptionalDeployment"), ::OpenAPI::toJsonValue(m_optional_deployment));
    }
    return obj;
}

QString OAIElasticsearchDomainStatus_ServiceSoftwareOptions::getCurrentVersion() const {
    return m_current_version;
}
void OAIElasticsearchDomainStatus_ServiceSoftwareOptions::setCurrentVersion(const QString &current_version) {
    m_current_version = current_version;
    m_current_version_isSet = true;
}

bool OAIElasticsearchDomainStatus_ServiceSoftwareOptions::is_current_version_Set() const{
    return m_current_version_isSet;
}

bool OAIElasticsearchDomainStatus_ServiceSoftwareOptions::is_current_version_Valid() const{
    return m_current_version_isValid;
}

QString OAIElasticsearchDomainStatus_ServiceSoftwareOptions::getNewVersion() const {
    return m_new_version;
}
void OAIElasticsearchDomainStatus_ServiceSoftwareOptions::setNewVersion(const QString &new_version) {
    m_new_version = new_version;
    m_new_version_isSet = true;
}

bool OAIElasticsearchDomainStatus_ServiceSoftwareOptions::is_new_version_Set() const{
    return m_new_version_isSet;
}

bool OAIElasticsearchDomainStatus_ServiceSoftwareOptions::is_new_version_Valid() const{
    return m_new_version_isValid;
}

bool OAIElasticsearchDomainStatus_ServiceSoftwareOptions::getUpdateAvailable() const {
    return m_update_available;
}
void OAIElasticsearchDomainStatus_ServiceSoftwareOptions::setUpdateAvailable(const bool &update_available) {
    m_update_available = update_available;
    m_update_available_isSet = true;
}

bool OAIElasticsearchDomainStatus_ServiceSoftwareOptions::is_update_available_Set() const{
    return m_update_available_isSet;
}

bool OAIElasticsearchDomainStatus_ServiceSoftwareOptions::is_update_available_Valid() const{
    return m_update_available_isValid;
}

bool OAIElasticsearchDomainStatus_ServiceSoftwareOptions::getCancellable() const {
    return m_cancellable;
}
void OAIElasticsearchDomainStatus_ServiceSoftwareOptions::setCancellable(const bool &cancellable) {
    m_cancellable = cancellable;
    m_cancellable_isSet = true;
}

bool OAIElasticsearchDomainStatus_ServiceSoftwareOptions::is_cancellable_Set() const{
    return m_cancellable_isSet;
}

bool OAIElasticsearchDomainStatus_ServiceSoftwareOptions::is_cancellable_Valid() const{
    return m_cancellable_isValid;
}

OAIDeploymentStatus OAIElasticsearchDomainStatus_ServiceSoftwareOptions::getUpdateStatus() const {
    return m_update_status;
}
void OAIElasticsearchDomainStatus_ServiceSoftwareOptions::setUpdateStatus(const OAIDeploymentStatus &update_status) {
    m_update_status = update_status;
    m_update_status_isSet = true;
}

bool OAIElasticsearchDomainStatus_ServiceSoftwareOptions::is_update_status_Set() const{
    return m_update_status_isSet;
}

bool OAIElasticsearchDomainStatus_ServiceSoftwareOptions::is_update_status_Valid() const{
    return m_update_status_isValid;
}

QString OAIElasticsearchDomainStatus_ServiceSoftwareOptions::getDescription() const {
    return m_description;
}
void OAIElasticsearchDomainStatus_ServiceSoftwareOptions::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIElasticsearchDomainStatus_ServiceSoftwareOptions::is_description_Set() const{
    return m_description_isSet;
}

bool OAIElasticsearchDomainStatus_ServiceSoftwareOptions::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAIElasticsearchDomainStatus_ServiceSoftwareOptions::getAutomatedUpdateDate() const {
    return m_automated_update_date;
}
void OAIElasticsearchDomainStatus_ServiceSoftwareOptions::setAutomatedUpdateDate(const QDateTime &automated_update_date) {
    m_automated_update_date = automated_update_date;
    m_automated_update_date_isSet = true;
}

bool OAIElasticsearchDomainStatus_ServiceSoftwareOptions::is_automated_update_date_Set() const{
    return m_automated_update_date_isSet;
}

bool OAIElasticsearchDomainStatus_ServiceSoftwareOptions::is_automated_update_date_Valid() const{
    return m_automated_update_date_isValid;
}

bool OAIElasticsearchDomainStatus_ServiceSoftwareOptions::getOptionalDeployment() const {
    return m_optional_deployment;
}
void OAIElasticsearchDomainStatus_ServiceSoftwareOptions::setOptionalDeployment(const bool &optional_deployment) {
    m_optional_deployment = optional_deployment;
    m_optional_deployment_isSet = true;
}

bool OAIElasticsearchDomainStatus_ServiceSoftwareOptions::is_optional_deployment_Set() const{
    return m_optional_deployment_isSet;
}

bool OAIElasticsearchDomainStatus_ServiceSoftwareOptions::is_optional_deployment_Valid() const{
    return m_optional_deployment_isValid;
}

bool OAIElasticsearchDomainStatus_ServiceSoftwareOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancellable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_automated_update_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_optional_deployment_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIElasticsearchDomainStatus_ServiceSoftwareOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
