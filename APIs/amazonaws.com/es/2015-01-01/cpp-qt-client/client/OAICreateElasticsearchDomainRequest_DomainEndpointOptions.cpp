/**
 * Amazon Elasticsearch Service
 * <fullname>Amazon Elasticsearch Configuration Service</fullname> <p>Use the Amazon Elasticsearch Configuration API to create, configure, and manage Elasticsearch domains.</p> <p>For sample code that uses the Configuration API, see the <a href=\"https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-configuration-samples.html\">Amazon Elasticsearch Service Developer Guide</a>. The guide also contains <a href=\"https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-request-signing.html\">sample code for sending signed HTTP requests to the Elasticsearch APIs</a>.</p> <p>The endpoint for configuration service requests is region-specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#elasticsearch-service-regions\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2015-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateElasticsearchDomainRequest_DomainEndpointOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateElasticsearchDomainRequest_DomainEndpointOptions::OAICreateElasticsearchDomainRequest_DomainEndpointOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateElasticsearchDomainRequest_DomainEndpointOptions::OAICreateElasticsearchDomainRequest_DomainEndpointOptions() {
    this->initializeModel();
}

OAICreateElasticsearchDomainRequest_DomainEndpointOptions::~OAICreateElasticsearchDomainRequest_DomainEndpointOptions() {}

void OAICreateElasticsearchDomainRequest_DomainEndpointOptions::initializeModel() {

    m_enforce_https_isSet = false;
    m_enforce_https_isValid = false;

    m_tls_security_policy_isSet = false;
    m_tls_security_policy_isValid = false;

    m_custom_endpoint_enabled_isSet = false;
    m_custom_endpoint_enabled_isValid = false;

    m_custom_endpoint_isSet = false;
    m_custom_endpoint_isValid = false;

    m_custom_endpoint_certificate_arn_isSet = false;
    m_custom_endpoint_certificate_arn_isValid = false;
}

void OAICreateElasticsearchDomainRequest_DomainEndpointOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateElasticsearchDomainRequest_DomainEndpointOptions::fromJsonObject(QJsonObject json) {

    m_enforce_https_isValid = ::OpenAPI::fromJsonValue(m_enforce_https, json[QString("EnforceHTTPS")]);
    m_enforce_https_isSet = !json[QString("EnforceHTTPS")].isNull() && m_enforce_https_isValid;

    m_tls_security_policy_isValid = ::OpenAPI::fromJsonValue(m_tls_security_policy, json[QString("TLSSecurityPolicy")]);
    m_tls_security_policy_isSet = !json[QString("TLSSecurityPolicy")].isNull() && m_tls_security_policy_isValid;

    m_custom_endpoint_enabled_isValid = ::OpenAPI::fromJsonValue(m_custom_endpoint_enabled, json[QString("CustomEndpointEnabled")]);
    m_custom_endpoint_enabled_isSet = !json[QString("CustomEndpointEnabled")].isNull() && m_custom_endpoint_enabled_isValid;

    m_custom_endpoint_isValid = ::OpenAPI::fromJsonValue(m_custom_endpoint, json[QString("CustomEndpoint")]);
    m_custom_endpoint_isSet = !json[QString("CustomEndpoint")].isNull() && m_custom_endpoint_isValid;

    m_custom_endpoint_certificate_arn_isValid = ::OpenAPI::fromJsonValue(m_custom_endpoint_certificate_arn, json[QString("CustomEndpointCertificateArn")]);
    m_custom_endpoint_certificate_arn_isSet = !json[QString("CustomEndpointCertificateArn")].isNull() && m_custom_endpoint_certificate_arn_isValid;
}

QString OAICreateElasticsearchDomainRequest_DomainEndpointOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateElasticsearchDomainRequest_DomainEndpointOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_enforce_https_isSet) {
        obj.insert(QString("EnforceHTTPS"), ::OpenAPI::toJsonValue(m_enforce_https));
    }
    if (m_tls_security_policy.isSet()) {
        obj.insert(QString("TLSSecurityPolicy"), ::OpenAPI::toJsonValue(m_tls_security_policy));
    }
    if (m_custom_endpoint_enabled_isSet) {
        obj.insert(QString("CustomEndpointEnabled"), ::OpenAPI::toJsonValue(m_custom_endpoint_enabled));
    }
    if (m_custom_endpoint_isSet) {
        obj.insert(QString("CustomEndpoint"), ::OpenAPI::toJsonValue(m_custom_endpoint));
    }
    if (m_custom_endpoint_certificate_arn_isSet) {
        obj.insert(QString("CustomEndpointCertificateArn"), ::OpenAPI::toJsonValue(m_custom_endpoint_certificate_arn));
    }
    return obj;
}

bool OAICreateElasticsearchDomainRequest_DomainEndpointOptions::getEnforceHttps() const {
    return m_enforce_https;
}
void OAICreateElasticsearchDomainRequest_DomainEndpointOptions::setEnforceHttps(const bool &enforce_https) {
    m_enforce_https = enforce_https;
    m_enforce_https_isSet = true;
}

bool OAICreateElasticsearchDomainRequest_DomainEndpointOptions::is_enforce_https_Set() const{
    return m_enforce_https_isSet;
}

bool OAICreateElasticsearchDomainRequest_DomainEndpointOptions::is_enforce_https_Valid() const{
    return m_enforce_https_isValid;
}

OAITLSSecurityPolicy OAICreateElasticsearchDomainRequest_DomainEndpointOptions::getTlsSecurityPolicy() const {
    return m_tls_security_policy;
}
void OAICreateElasticsearchDomainRequest_DomainEndpointOptions::setTlsSecurityPolicy(const OAITLSSecurityPolicy &tls_security_policy) {
    m_tls_security_policy = tls_security_policy;
    m_tls_security_policy_isSet = true;
}

bool OAICreateElasticsearchDomainRequest_DomainEndpointOptions::is_tls_security_policy_Set() const{
    return m_tls_security_policy_isSet;
}

bool OAICreateElasticsearchDomainRequest_DomainEndpointOptions::is_tls_security_policy_Valid() const{
    return m_tls_security_policy_isValid;
}

bool OAICreateElasticsearchDomainRequest_DomainEndpointOptions::getCustomEndpointEnabled() const {
    return m_custom_endpoint_enabled;
}
void OAICreateElasticsearchDomainRequest_DomainEndpointOptions::setCustomEndpointEnabled(const bool &custom_endpoint_enabled) {
    m_custom_endpoint_enabled = custom_endpoint_enabled;
    m_custom_endpoint_enabled_isSet = true;
}

bool OAICreateElasticsearchDomainRequest_DomainEndpointOptions::is_custom_endpoint_enabled_Set() const{
    return m_custom_endpoint_enabled_isSet;
}

bool OAICreateElasticsearchDomainRequest_DomainEndpointOptions::is_custom_endpoint_enabled_Valid() const{
    return m_custom_endpoint_enabled_isValid;
}

QString OAICreateElasticsearchDomainRequest_DomainEndpointOptions::getCustomEndpoint() const {
    return m_custom_endpoint;
}
void OAICreateElasticsearchDomainRequest_DomainEndpointOptions::setCustomEndpoint(const QString &custom_endpoint) {
    m_custom_endpoint = custom_endpoint;
    m_custom_endpoint_isSet = true;
}

bool OAICreateElasticsearchDomainRequest_DomainEndpointOptions::is_custom_endpoint_Set() const{
    return m_custom_endpoint_isSet;
}

bool OAICreateElasticsearchDomainRequest_DomainEndpointOptions::is_custom_endpoint_Valid() const{
    return m_custom_endpoint_isValid;
}

QString OAICreateElasticsearchDomainRequest_DomainEndpointOptions::getCustomEndpointCertificateArn() const {
    return m_custom_endpoint_certificate_arn;
}
void OAICreateElasticsearchDomainRequest_DomainEndpointOptions::setCustomEndpointCertificateArn(const QString &custom_endpoint_certificate_arn) {
    m_custom_endpoint_certificate_arn = custom_endpoint_certificate_arn;
    m_custom_endpoint_certificate_arn_isSet = true;
}

bool OAICreateElasticsearchDomainRequest_DomainEndpointOptions::is_custom_endpoint_certificate_arn_Set() const{
    return m_custom_endpoint_certificate_arn_isSet;
}

bool OAICreateElasticsearchDomainRequest_DomainEndpointOptions::is_custom_endpoint_certificate_arn_Valid() const{
    return m_custom_endpoint_certificate_arn_isValid;
}

bool OAICreateElasticsearchDomainRequest_DomainEndpointOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enforce_https_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tls_security_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_endpoint_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_endpoint_certificate_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateElasticsearchDomainRequest_DomainEndpointOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
