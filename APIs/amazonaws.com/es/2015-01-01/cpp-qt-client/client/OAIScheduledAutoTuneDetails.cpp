/**
 * Amazon Elasticsearch Service
 * <fullname>Amazon Elasticsearch Configuration Service</fullname> <p>Use the Amazon Elasticsearch Configuration API to create, configure, and manage Elasticsearch domains.</p> <p>For sample code that uses the Configuration API, see the <a href=\"https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-configuration-samples.html\">Amazon Elasticsearch Service Developer Guide</a>. The guide also contains <a href=\"https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-request-signing.html\">sample code for sending signed HTTP requests to the Elasticsearch APIs</a>.</p> <p>The endpoint for configuration service requests is region-specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#elasticsearch-service-regions\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2015-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScheduledAutoTuneDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScheduledAutoTuneDetails::OAIScheduledAutoTuneDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScheduledAutoTuneDetails::OAIScheduledAutoTuneDetails() {
    this->initializeModel();
}

OAIScheduledAutoTuneDetails::~OAIScheduledAutoTuneDetails() {}

void OAIScheduledAutoTuneDetails::initializeModel() {

    m_date_isSet = false;
    m_date_isValid = false;

    m_action_type_isSet = false;
    m_action_type_isValid = false;

    m_action_isSet = false;
    m_action_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;
}

void OAIScheduledAutoTuneDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScheduledAutoTuneDetails::fromJsonObject(QJsonObject json) {

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("Date")]);
    m_date_isSet = !json[QString("Date")].isNull() && m_date_isValid;

    m_action_type_isValid = ::OpenAPI::fromJsonValue(m_action_type, json[QString("ActionType")]);
    m_action_type_isSet = !json[QString("ActionType")].isNull() && m_action_type_isValid;

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("Action")]);
    m_action_isSet = !json[QString("Action")].isNull() && m_action_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("Severity")]);
    m_severity_isSet = !json[QString("Severity")].isNull() && m_severity_isValid;
}

QString OAIScheduledAutoTuneDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScheduledAutoTuneDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_date_isSet) {
        obj.insert(QString("Date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_action_type.isSet()) {
        obj.insert(QString("ActionType"), ::OpenAPI::toJsonValue(m_action_type));
    }
    if (m_action_isSet) {
        obj.insert(QString("Action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_severity.isSet()) {
        obj.insert(QString("Severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    return obj;
}

QDateTime OAIScheduledAutoTuneDetails::getDate() const {
    return m_date;
}
void OAIScheduledAutoTuneDetails::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIScheduledAutoTuneDetails::is_date_Set() const{
    return m_date_isSet;
}

bool OAIScheduledAutoTuneDetails::is_date_Valid() const{
    return m_date_isValid;
}

OAIScheduledAutoTuneActionType OAIScheduledAutoTuneDetails::getActionType() const {
    return m_action_type;
}
void OAIScheduledAutoTuneDetails::setActionType(const OAIScheduledAutoTuneActionType &action_type) {
    m_action_type = action_type;
    m_action_type_isSet = true;
}

bool OAIScheduledAutoTuneDetails::is_action_type_Set() const{
    return m_action_type_isSet;
}

bool OAIScheduledAutoTuneDetails::is_action_type_Valid() const{
    return m_action_type_isValid;
}

QString OAIScheduledAutoTuneDetails::getAction() const {
    return m_action;
}
void OAIScheduledAutoTuneDetails::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIScheduledAutoTuneDetails::is_action_Set() const{
    return m_action_isSet;
}

bool OAIScheduledAutoTuneDetails::is_action_Valid() const{
    return m_action_isValid;
}

OAIScheduledAutoTuneSeverityType OAIScheduledAutoTuneDetails::getSeverity() const {
    return m_severity;
}
void OAIScheduledAutoTuneDetails::setSeverity(const OAIScheduledAutoTuneSeverityType &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAIScheduledAutoTuneDetails::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAIScheduledAutoTuneDetails::is_severity_Valid() const{
    return m_severity_isValid;
}

bool OAIScheduledAutoTuneDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_action_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScheduledAutoTuneDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
