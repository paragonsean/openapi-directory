/**
 * Amazon Elasticsearch Service
 * <fullname>Amazon Elasticsearch Configuration Service</fullname> <p>Use the Amazon Elasticsearch Configuration API to create, configure, and manage Elasticsearch domains.</p> <p>For sample code that uses the Configuration API, see the <a href=\"https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-configuration-samples.html\">Amazon Elasticsearch Service Developer Guide</a>. The guide also contains <a href=\"https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-request-signing.html\">sample code for sending signed HTTP requests to the Elasticsearch APIs</a>.</p> <p>The endpoint for configuration service requests is region-specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#elasticsearch-service-regions\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2015-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPackageVersionHistory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPackageVersionHistory::OAIPackageVersionHistory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPackageVersionHistory::OAIPackageVersionHistory() {
    this->initializeModel();
}

OAIPackageVersionHistory::~OAIPackageVersionHistory() {}

void OAIPackageVersionHistory::initializeModel() {

    m_package_version_isSet = false;
    m_package_version_isValid = false;

    m_commit_message_isSet = false;
    m_commit_message_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;
}

void OAIPackageVersionHistory::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPackageVersionHistory::fromJsonObject(QJsonObject json) {

    m_package_version_isValid = ::OpenAPI::fromJsonValue(m_package_version, json[QString("PackageVersion")]);
    m_package_version_isSet = !json[QString("PackageVersion")].isNull() && m_package_version_isValid;

    m_commit_message_isValid = ::OpenAPI::fromJsonValue(m_commit_message, json[QString("CommitMessage")]);
    m_commit_message_isSet = !json[QString("CommitMessage")].isNull() && m_commit_message_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("CreatedAt")]);
    m_created_at_isSet = !json[QString("CreatedAt")].isNull() && m_created_at_isValid;
}

QString OAIPackageVersionHistory::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPackageVersionHistory::asJsonObject() const {
    QJsonObject obj;
    if (m_package_version_isSet) {
        obj.insert(QString("PackageVersion"), ::OpenAPI::toJsonValue(m_package_version));
    }
    if (m_commit_message_isSet) {
        obj.insert(QString("CommitMessage"), ::OpenAPI::toJsonValue(m_commit_message));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("CreatedAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    return obj;
}

QString OAIPackageVersionHistory::getPackageVersion() const {
    return m_package_version;
}
void OAIPackageVersionHistory::setPackageVersion(const QString &package_version) {
    m_package_version = package_version;
    m_package_version_isSet = true;
}

bool OAIPackageVersionHistory::is_package_version_Set() const{
    return m_package_version_isSet;
}

bool OAIPackageVersionHistory::is_package_version_Valid() const{
    return m_package_version_isValid;
}

QString OAIPackageVersionHistory::getCommitMessage() const {
    return m_commit_message;
}
void OAIPackageVersionHistory::setCommitMessage(const QString &commit_message) {
    m_commit_message = commit_message;
    m_commit_message_isSet = true;
}

bool OAIPackageVersionHistory::is_commit_message_Set() const{
    return m_commit_message_isSet;
}

bool OAIPackageVersionHistory::is_commit_message_Valid() const{
    return m_commit_message_isValid;
}

QDateTime OAIPackageVersionHistory::getCreatedAt() const {
    return m_created_at;
}
void OAIPackageVersionHistory::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIPackageVersionHistory::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIPackageVersionHistory::is_created_at_Valid() const{
    return m_created_at_isValid;
}

bool OAIPackageVersionHistory::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_package_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commit_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPackageVersionHistory::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
