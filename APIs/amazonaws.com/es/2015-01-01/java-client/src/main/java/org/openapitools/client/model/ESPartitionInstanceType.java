/*
 * Amazon Elasticsearch Service
 * <fullname>Amazon Elasticsearch Configuration Service</fullname> <p>Use the Amazon Elasticsearch Configuration API to create, configure, and manage Elasticsearch domains.</p> <p>For sample code that uses the Configuration API, see the <a href=\"https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-configuration-samples.html\">Amazon Elasticsearch Service Developer Guide</a>. The guide also contains <a href=\"https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-request-signing.html\">sample code for sending signed HTTP requests to the Elasticsearch APIs</a>.</p> <p>The endpoint for configuration service requests is region-specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#elasticsearch-service-regions\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2015-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets ESPartitionInstanceType
 */
@JsonAdapter(ESPartitionInstanceType.Adapter.class)
public enum ESPartitionInstanceType {
  
  M3_MEDIUM_ELASTICSEARCH("m3.medium.elasticsearch"),
  
  M3_LARGE_ELASTICSEARCH("m3.large.elasticsearch"),
  
  M3_XLARGE_ELASTICSEARCH("m3.xlarge.elasticsearch"),
  
  M3_2XLARGE_ELASTICSEARCH("m3.2xlarge.elasticsearch"),
  
  M4_LARGE_ELASTICSEARCH("m4.large.elasticsearch"),
  
  M4_XLARGE_ELASTICSEARCH("m4.xlarge.elasticsearch"),
  
  M4_2XLARGE_ELASTICSEARCH("m4.2xlarge.elasticsearch"),
  
  M4_4XLARGE_ELASTICSEARCH("m4.4xlarge.elasticsearch"),
  
  M4_10XLARGE_ELASTICSEARCH("m4.10xlarge.elasticsearch"),
  
  M5_LARGE_ELASTICSEARCH("m5.large.elasticsearch"),
  
  M5_XLARGE_ELASTICSEARCH("m5.xlarge.elasticsearch"),
  
  M5_2XLARGE_ELASTICSEARCH("m5.2xlarge.elasticsearch"),
  
  M5_4XLARGE_ELASTICSEARCH("m5.4xlarge.elasticsearch"),
  
  M5_12XLARGE_ELASTICSEARCH("m5.12xlarge.elasticsearch"),
  
  R5_LARGE_ELASTICSEARCH("r5.large.elasticsearch"),
  
  R5_XLARGE_ELASTICSEARCH("r5.xlarge.elasticsearch"),
  
  R5_2XLARGE_ELASTICSEARCH("r5.2xlarge.elasticsearch"),
  
  R5_4XLARGE_ELASTICSEARCH("r5.4xlarge.elasticsearch"),
  
  R5_12XLARGE_ELASTICSEARCH("r5.12xlarge.elasticsearch"),
  
  C5_LARGE_ELASTICSEARCH("c5.large.elasticsearch"),
  
  C5_XLARGE_ELASTICSEARCH("c5.xlarge.elasticsearch"),
  
  C5_2XLARGE_ELASTICSEARCH("c5.2xlarge.elasticsearch"),
  
  C5_4XLARGE_ELASTICSEARCH("c5.4xlarge.elasticsearch"),
  
  C5_9XLARGE_ELASTICSEARCH("c5.9xlarge.elasticsearch"),
  
  C5_18XLARGE_ELASTICSEARCH("c5.18xlarge.elasticsearch"),
  
  ULTRAWARM1_MEDIUM_ELASTICSEARCH("ultrawarm1.medium.elasticsearch"),
  
  ULTRAWARM1_LARGE_ELASTICSEARCH("ultrawarm1.large.elasticsearch"),
  
  T2_MICRO_ELASTICSEARCH("t2.micro.elasticsearch"),
  
  T2_SMALL_ELASTICSEARCH("t2.small.elasticsearch"),
  
  T2_MEDIUM_ELASTICSEARCH("t2.medium.elasticsearch"),
  
  R3_LARGE_ELASTICSEARCH("r3.large.elasticsearch"),
  
  R3_XLARGE_ELASTICSEARCH("r3.xlarge.elasticsearch"),
  
  R3_2XLARGE_ELASTICSEARCH("r3.2xlarge.elasticsearch"),
  
  R3_4XLARGE_ELASTICSEARCH("r3.4xlarge.elasticsearch"),
  
  R3_8XLARGE_ELASTICSEARCH("r3.8xlarge.elasticsearch"),
  
  I2_XLARGE_ELASTICSEARCH("i2.xlarge.elasticsearch"),
  
  I2_2XLARGE_ELASTICSEARCH("i2.2xlarge.elasticsearch"),
  
  D2_XLARGE_ELASTICSEARCH("d2.xlarge.elasticsearch"),
  
  D2_2XLARGE_ELASTICSEARCH("d2.2xlarge.elasticsearch"),
  
  D2_4XLARGE_ELASTICSEARCH("d2.4xlarge.elasticsearch"),
  
  D2_8XLARGE_ELASTICSEARCH("d2.8xlarge.elasticsearch"),
  
  C4_LARGE_ELASTICSEARCH("c4.large.elasticsearch"),
  
  C4_XLARGE_ELASTICSEARCH("c4.xlarge.elasticsearch"),
  
  C4_2XLARGE_ELASTICSEARCH("c4.2xlarge.elasticsearch"),
  
  C4_4XLARGE_ELASTICSEARCH("c4.4xlarge.elasticsearch"),
  
  C4_8XLARGE_ELASTICSEARCH("c4.8xlarge.elasticsearch"),
  
  R4_LARGE_ELASTICSEARCH("r4.large.elasticsearch"),
  
  R4_XLARGE_ELASTICSEARCH("r4.xlarge.elasticsearch"),
  
  R4_2XLARGE_ELASTICSEARCH("r4.2xlarge.elasticsearch"),
  
  R4_4XLARGE_ELASTICSEARCH("r4.4xlarge.elasticsearch"),
  
  R4_8XLARGE_ELASTICSEARCH("r4.8xlarge.elasticsearch"),
  
  R4_16XLARGE_ELASTICSEARCH("r4.16xlarge.elasticsearch"),
  
  I3_LARGE_ELASTICSEARCH("i3.large.elasticsearch"),
  
  I3_XLARGE_ELASTICSEARCH("i3.xlarge.elasticsearch"),
  
  I3_2XLARGE_ELASTICSEARCH("i3.2xlarge.elasticsearch"),
  
  I3_4XLARGE_ELASTICSEARCH("i3.4xlarge.elasticsearch"),
  
  I3_8XLARGE_ELASTICSEARCH("i3.8xlarge.elasticsearch"),
  
  I3_16XLARGE_ELASTICSEARCH("i3.16xlarge.elasticsearch");

  private String value;

  ESPartitionInstanceType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static ESPartitionInstanceType fromValue(String value) {
    for (ESPartitionInstanceType b : ESPartitionInstanceType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<ESPartitionInstanceType> {
    @Override
    public void write(final JsonWriter jsonWriter, final ESPartitionInstanceType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public ESPartitionInstanceType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return ESPartitionInstanceType.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    ESPartitionInstanceType.fromValue(value);
  }
}

