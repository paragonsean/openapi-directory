/*
 * Amazon Elasticsearch Service
 * <fullname>Amazon Elasticsearch Configuration Service</fullname> <p>Use the Amazon Elasticsearch Configuration API to create, configure, and manage Elasticsearch domains.</p> <p>For sample code that uses the Configuration API, see the <a href=\"https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-configuration-samples.html\">Amazon Elasticsearch Service Developer Guide</a>. The guide also contains <a href=\"https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-request-signing.html\">sample code for sending signed HTTP requests to the Elasticsearch APIs</a>.</p> <p>The endpoint for configuration service requests is region-specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#elasticsearch-service-regions\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2015-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ESPartitionInstanceType;
import org.openapitools.client.model.ReservedElasticsearchInstancePaymentOption;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details of a reserved Elasticsearch instance.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:55.471120-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReservedElasticsearchInstance {
  public static final String SERIALIZED_NAME_RESERVATION_NAME = "ReservationName";
  @SerializedName(SERIALIZED_NAME_RESERVATION_NAME)
  private String reservationName;

  public static final String SERIALIZED_NAME_RESERVED_ELASTICSEARCH_INSTANCE_ID = "ReservedElasticsearchInstanceId";
  @SerializedName(SERIALIZED_NAME_RESERVED_ELASTICSEARCH_INSTANCE_ID)
  private String reservedElasticsearchInstanceId;

  public static final String SERIALIZED_NAME_RESERVED_ELASTICSEARCH_INSTANCE_OFFERING_ID = "ReservedElasticsearchInstanceOfferingId";
  @SerializedName(SERIALIZED_NAME_RESERVED_ELASTICSEARCH_INSTANCE_OFFERING_ID)
  private String reservedElasticsearchInstanceOfferingId;

  public static final String SERIALIZED_NAME_ELASTICSEARCH_INSTANCE_TYPE = "ElasticsearchInstanceType";
  @SerializedName(SERIALIZED_NAME_ELASTICSEARCH_INSTANCE_TYPE)
  private ESPartitionInstanceType elasticsearchInstanceType;

  public static final String SERIALIZED_NAME_START_TIME = "StartTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_DURATION = "Duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private Integer duration;

  public static final String SERIALIZED_NAME_FIXED_PRICE = "FixedPrice";
  @SerializedName(SERIALIZED_NAME_FIXED_PRICE)
  private Double fixedPrice;

  public static final String SERIALIZED_NAME_USAGE_PRICE = "UsagePrice";
  @SerializedName(SERIALIZED_NAME_USAGE_PRICE)
  private Double usagePrice;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "CurrencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_ELASTICSEARCH_INSTANCE_COUNT = "ElasticsearchInstanceCount";
  @SerializedName(SERIALIZED_NAME_ELASTICSEARCH_INSTANCE_COUNT)
  private Integer elasticsearchInstanceCount;

  public static final String SERIALIZED_NAME_STATE = "State";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_PAYMENT_OPTION = "PaymentOption";
  @SerializedName(SERIALIZED_NAME_PAYMENT_OPTION)
  private ReservedElasticsearchInstancePaymentOption paymentOption;

  public static final String SERIALIZED_NAME_RECURRING_CHARGES = "RecurringCharges";
  @SerializedName(SERIALIZED_NAME_RECURRING_CHARGES)
  private List recurringCharges;

  public ReservedElasticsearchInstance() {
  }

  public ReservedElasticsearchInstance reservationName(String reservationName) {
    this.reservationName = reservationName;
    return this;
  }

  /**
   * Get reservationName
   * @return reservationName
   */
  @javax.annotation.Nullable
  public String getReservationName() {
    return reservationName;
  }

  public void setReservationName(String reservationName) {
    this.reservationName = reservationName;
  }


  public ReservedElasticsearchInstance reservedElasticsearchInstanceId(String reservedElasticsearchInstanceId) {
    this.reservedElasticsearchInstanceId = reservedElasticsearchInstanceId;
    return this;
  }

  /**
   * Get reservedElasticsearchInstanceId
   * @return reservedElasticsearchInstanceId
   */
  @javax.annotation.Nullable
  public String getReservedElasticsearchInstanceId() {
    return reservedElasticsearchInstanceId;
  }

  public void setReservedElasticsearchInstanceId(String reservedElasticsearchInstanceId) {
    this.reservedElasticsearchInstanceId = reservedElasticsearchInstanceId;
  }


  public ReservedElasticsearchInstance reservedElasticsearchInstanceOfferingId(String reservedElasticsearchInstanceOfferingId) {
    this.reservedElasticsearchInstanceOfferingId = reservedElasticsearchInstanceOfferingId;
    return this;
  }

  /**
   * Get reservedElasticsearchInstanceOfferingId
   * @return reservedElasticsearchInstanceOfferingId
   */
  @javax.annotation.Nullable
  public String getReservedElasticsearchInstanceOfferingId() {
    return reservedElasticsearchInstanceOfferingId;
  }

  public void setReservedElasticsearchInstanceOfferingId(String reservedElasticsearchInstanceOfferingId) {
    this.reservedElasticsearchInstanceOfferingId = reservedElasticsearchInstanceOfferingId;
  }


  public ReservedElasticsearchInstance elasticsearchInstanceType(ESPartitionInstanceType elasticsearchInstanceType) {
    this.elasticsearchInstanceType = elasticsearchInstanceType;
    return this;
  }

  /**
   * Get elasticsearchInstanceType
   * @return elasticsearchInstanceType
   */
  @javax.annotation.Nullable
  public ESPartitionInstanceType getElasticsearchInstanceType() {
    return elasticsearchInstanceType;
  }

  public void setElasticsearchInstanceType(ESPartitionInstanceType elasticsearchInstanceType) {
    this.elasticsearchInstanceType = elasticsearchInstanceType;
  }


  public ReservedElasticsearchInstance startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Get startTime
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public ReservedElasticsearchInstance duration(Integer duration) {
    this.duration = duration;
    return this;
  }

  /**
   * Get duration
   * @return duration
   */
  @javax.annotation.Nullable
  public Integer getDuration() {
    return duration;
  }

  public void setDuration(Integer duration) {
    this.duration = duration;
  }


  public ReservedElasticsearchInstance fixedPrice(Double fixedPrice) {
    this.fixedPrice = fixedPrice;
    return this;
  }

  /**
   * Get fixedPrice
   * @return fixedPrice
   */
  @javax.annotation.Nullable
  public Double getFixedPrice() {
    return fixedPrice;
  }

  public void setFixedPrice(Double fixedPrice) {
    this.fixedPrice = fixedPrice;
  }


  public ReservedElasticsearchInstance usagePrice(Double usagePrice) {
    this.usagePrice = usagePrice;
    return this;
  }

  /**
   * Get usagePrice
   * @return usagePrice
   */
  @javax.annotation.Nullable
  public Double getUsagePrice() {
    return usagePrice;
  }

  public void setUsagePrice(Double usagePrice) {
    this.usagePrice = usagePrice;
  }


  public ReservedElasticsearchInstance currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * Get currencyCode
   * @return currencyCode
   */
  @javax.annotation.Nullable
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public ReservedElasticsearchInstance elasticsearchInstanceCount(Integer elasticsearchInstanceCount) {
    this.elasticsearchInstanceCount = elasticsearchInstanceCount;
    return this;
  }

  /**
   * Get elasticsearchInstanceCount
   * @return elasticsearchInstanceCount
   */
  @javax.annotation.Nullable
  public Integer getElasticsearchInstanceCount() {
    return elasticsearchInstanceCount;
  }

  public void setElasticsearchInstanceCount(Integer elasticsearchInstanceCount) {
    this.elasticsearchInstanceCount = elasticsearchInstanceCount;
  }


  public ReservedElasticsearchInstance state(String state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public ReservedElasticsearchInstance paymentOption(ReservedElasticsearchInstancePaymentOption paymentOption) {
    this.paymentOption = paymentOption;
    return this;
  }

  /**
   * Get paymentOption
   * @return paymentOption
   */
  @javax.annotation.Nullable
  public ReservedElasticsearchInstancePaymentOption getPaymentOption() {
    return paymentOption;
  }

  public void setPaymentOption(ReservedElasticsearchInstancePaymentOption paymentOption) {
    this.paymentOption = paymentOption;
  }


  public ReservedElasticsearchInstance recurringCharges(List recurringCharges) {
    this.recurringCharges = recurringCharges;
    return this;
  }

  /**
   * Get recurringCharges
   * @return recurringCharges
   */
  @javax.annotation.Nullable
  public List getRecurringCharges() {
    return recurringCharges;
  }

  public void setRecurringCharges(List recurringCharges) {
    this.recurringCharges = recurringCharges;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReservedElasticsearchInstance reservedElasticsearchInstance = (ReservedElasticsearchInstance) o;
    return Objects.equals(this.reservationName, reservedElasticsearchInstance.reservationName) &&
        Objects.equals(this.reservedElasticsearchInstanceId, reservedElasticsearchInstance.reservedElasticsearchInstanceId) &&
        Objects.equals(this.reservedElasticsearchInstanceOfferingId, reservedElasticsearchInstance.reservedElasticsearchInstanceOfferingId) &&
        Objects.equals(this.elasticsearchInstanceType, reservedElasticsearchInstance.elasticsearchInstanceType) &&
        Objects.equals(this.startTime, reservedElasticsearchInstance.startTime) &&
        Objects.equals(this.duration, reservedElasticsearchInstance.duration) &&
        Objects.equals(this.fixedPrice, reservedElasticsearchInstance.fixedPrice) &&
        Objects.equals(this.usagePrice, reservedElasticsearchInstance.usagePrice) &&
        Objects.equals(this.currencyCode, reservedElasticsearchInstance.currencyCode) &&
        Objects.equals(this.elasticsearchInstanceCount, reservedElasticsearchInstance.elasticsearchInstanceCount) &&
        Objects.equals(this.state, reservedElasticsearchInstance.state) &&
        Objects.equals(this.paymentOption, reservedElasticsearchInstance.paymentOption) &&
        Objects.equals(this.recurringCharges, reservedElasticsearchInstance.recurringCharges);
  }

  @Override
  public int hashCode() {
    return Objects.hash(reservationName, reservedElasticsearchInstanceId, reservedElasticsearchInstanceOfferingId, elasticsearchInstanceType, startTime, duration, fixedPrice, usagePrice, currencyCode, elasticsearchInstanceCount, state, paymentOption, recurringCharges);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReservedElasticsearchInstance {\n");
    sb.append("    reservationName: ").append(toIndentedString(reservationName)).append("\n");
    sb.append("    reservedElasticsearchInstanceId: ").append(toIndentedString(reservedElasticsearchInstanceId)).append("\n");
    sb.append("    reservedElasticsearchInstanceOfferingId: ").append(toIndentedString(reservedElasticsearchInstanceOfferingId)).append("\n");
    sb.append("    elasticsearchInstanceType: ").append(toIndentedString(elasticsearchInstanceType)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    fixedPrice: ").append(toIndentedString(fixedPrice)).append("\n");
    sb.append("    usagePrice: ").append(toIndentedString(usagePrice)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    elasticsearchInstanceCount: ").append(toIndentedString(elasticsearchInstanceCount)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    paymentOption: ").append(toIndentedString(paymentOption)).append("\n");
    sb.append("    recurringCharges: ").append(toIndentedString(recurringCharges)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ReservationName");
    openapiFields.add("ReservedElasticsearchInstanceId");
    openapiFields.add("ReservedElasticsearchInstanceOfferingId");
    openapiFields.add("ElasticsearchInstanceType");
    openapiFields.add("StartTime");
    openapiFields.add("Duration");
    openapiFields.add("FixedPrice");
    openapiFields.add("UsagePrice");
    openapiFields.add("CurrencyCode");
    openapiFields.add("ElasticsearchInstanceCount");
    openapiFields.add("State");
    openapiFields.add("PaymentOption");
    openapiFields.add("RecurringCharges");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReservedElasticsearchInstance
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReservedElasticsearchInstance.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReservedElasticsearchInstance is not found in the empty JSON string", ReservedElasticsearchInstance.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReservedElasticsearchInstance.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReservedElasticsearchInstance` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ReservationName`
      if (jsonObj.get("ReservationName") != null && !jsonObj.get("ReservationName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ReservationName"));
      }
      // validate the optional field `ReservedElasticsearchInstanceId`
      if (jsonObj.get("ReservedElasticsearchInstanceId") != null && !jsonObj.get("ReservedElasticsearchInstanceId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ReservedElasticsearchInstanceId"));
      }
      // validate the optional field `ReservedElasticsearchInstanceOfferingId`
      if (jsonObj.get("ReservedElasticsearchInstanceOfferingId") != null && !jsonObj.get("ReservedElasticsearchInstanceOfferingId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ReservedElasticsearchInstanceOfferingId"));
      }
      // validate the optional field `ElasticsearchInstanceType`
      if (jsonObj.get("ElasticsearchInstanceType") != null && !jsonObj.get("ElasticsearchInstanceType").isJsonNull()) {
        ESPartitionInstanceType.validateJsonElement(jsonObj.get("ElasticsearchInstanceType"));
      }
      // validate the optional field `StartTime`
      if (jsonObj.get("StartTime") != null && !jsonObj.get("StartTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("StartTime"));
      }
      // validate the optional field `Duration`
      if (jsonObj.get("Duration") != null && !jsonObj.get("Duration").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Duration"));
      }
      // validate the optional field `FixedPrice`
      if (jsonObj.get("FixedPrice") != null && !jsonObj.get("FixedPrice").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("FixedPrice"));
      }
      // validate the optional field `UsagePrice`
      if (jsonObj.get("UsagePrice") != null && !jsonObj.get("UsagePrice").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("UsagePrice"));
      }
      // validate the optional field `CurrencyCode`
      if (jsonObj.get("CurrencyCode") != null && !jsonObj.get("CurrencyCode").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CurrencyCode"));
      }
      // validate the optional field `ElasticsearchInstanceCount`
      if (jsonObj.get("ElasticsearchInstanceCount") != null && !jsonObj.get("ElasticsearchInstanceCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ElasticsearchInstanceCount"));
      }
      // validate the optional field `State`
      if (jsonObj.get("State") != null && !jsonObj.get("State").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("State"));
      }
      // validate the optional field `PaymentOption`
      if (jsonObj.get("PaymentOption") != null && !jsonObj.get("PaymentOption").isJsonNull()) {
        ReservedElasticsearchInstancePaymentOption.validateJsonElement(jsonObj.get("PaymentOption"));
      }
      // validate the optional field `RecurringCharges`
      if (jsonObj.get("RecurringCharges") != null && !jsonObj.get("RecurringCharges").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("RecurringCharges"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReservedElasticsearchInstance.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReservedElasticsearchInstance' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReservedElasticsearchInstance> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReservedElasticsearchInstance.class));

       return (TypeAdapter<T>) new TypeAdapter<ReservedElasticsearchInstance>() {
           @Override
           public void write(JsonWriter out, ReservedElasticsearchInstance value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReservedElasticsearchInstance read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReservedElasticsearchInstance given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReservedElasticsearchInstance
   * @throws IOException if the JSON string is invalid with respect to ReservedElasticsearchInstance
   */
  public static ReservedElasticsearchInstance fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReservedElasticsearchInstance.class);
  }

  /**
   * Convert an instance of ReservedElasticsearchInstance to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

