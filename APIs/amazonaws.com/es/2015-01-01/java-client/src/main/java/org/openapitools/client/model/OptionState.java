/*
 * Amazon Elasticsearch Service
 * <fullname>Amazon Elasticsearch Configuration Service</fullname> <p>Use the Amazon Elasticsearch Configuration API to create, configure, and manage Elasticsearch domains.</p> <p>For sample code that uses the Configuration API, see the <a href=\"https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-configuration-samples.html\">Amazon Elasticsearch Service Developer Guide</a>. The guide also contains <a href=\"https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-request-signing.html\">sample code for sending signed HTTP requests to the Elasticsearch APIs</a>.</p> <p>The endpoint for configuration service requests is region-specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#elasticsearch-service-regions\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2015-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * &lt;p&gt;The state of a requested change. One of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Processing: The request change is still in-process.&lt;/li&gt; &lt;li&gt;Active: The request change is processed and deployed to the Elasticsearch domain.&lt;/li&gt; &lt;/ul&gt;
 */
@JsonAdapter(OptionState.Adapter.class)
public enum OptionState {
  
  REQUIRES_INDEX_DOCUMENTS("RequiresIndexDocuments"),
  
  PROCESSING("Processing"),
  
  ACTIVE("Active");

  private String value;

  OptionState(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static OptionState fromValue(String value) {
    for (OptionState b : OptionState.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<OptionState> {
    @Override
    public void write(final JsonWriter jsonWriter, final OptionState enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public OptionState read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return OptionState.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    OptionState.fromValue(value);
  }
}

