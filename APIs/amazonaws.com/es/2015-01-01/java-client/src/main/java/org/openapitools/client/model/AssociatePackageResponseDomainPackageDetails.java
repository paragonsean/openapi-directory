/*
 * Amazon Elasticsearch Service
 * <fullname>Amazon Elasticsearch Configuration Service</fullname> <p>Use the Amazon Elasticsearch Configuration API to create, configure, and manage Elasticsearch domains.</p> <p>For sample code that uses the Configuration API, see the <a href=\"https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-configuration-samples.html\">Amazon Elasticsearch Service Developer Guide</a>. The guide also contains <a href=\"https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-request-signing.html\">sample code for sending signed HTTP requests to the Elasticsearch APIs</a>.</p> <p>The endpoint for configuration service requests is region-specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#elasticsearch-service-regions\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2015-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.DomainPackageDetailsErrorDetails;
import org.openapitools.client.model.DomainPackageStatus;
import org.openapitools.client.model.PackageType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AssociatePackageResponseDomainPackageDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:55.471120-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AssociatePackageResponseDomainPackageDetails {
  public static final String SERIALIZED_NAME_PACKAGE_I_D = "PackageID";
  @SerializedName(SERIALIZED_NAME_PACKAGE_I_D)
  private String packageID;

  public static final String SERIALIZED_NAME_PACKAGE_NAME = "PackageName";
  @SerializedName(SERIALIZED_NAME_PACKAGE_NAME)
  private String packageName;

  public static final String SERIALIZED_NAME_PACKAGE_TYPE = "PackageType";
  @SerializedName(SERIALIZED_NAME_PACKAGE_TYPE)
  private PackageType packageType;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "LastUpdated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private OffsetDateTime lastUpdated;

  public static final String SERIALIZED_NAME_DOMAIN_NAME = "DomainName";
  @SerializedName(SERIALIZED_NAME_DOMAIN_NAME)
  private String domainName;

  public static final String SERIALIZED_NAME_DOMAIN_PACKAGE_STATUS = "DomainPackageStatus";
  @SerializedName(SERIALIZED_NAME_DOMAIN_PACKAGE_STATUS)
  private DomainPackageStatus domainPackageStatus;

  public static final String SERIALIZED_NAME_PACKAGE_VERSION = "PackageVersion";
  @SerializedName(SERIALIZED_NAME_PACKAGE_VERSION)
  private String packageVersion;

  public static final String SERIALIZED_NAME_REFERENCE_PATH = "ReferencePath";
  @SerializedName(SERIALIZED_NAME_REFERENCE_PATH)
  private String referencePath;

  public static final String SERIALIZED_NAME_ERROR_DETAILS = "ErrorDetails";
  @SerializedName(SERIALIZED_NAME_ERROR_DETAILS)
  private DomainPackageDetailsErrorDetails errorDetails;

  public AssociatePackageResponseDomainPackageDetails() {
  }

  public AssociatePackageResponseDomainPackageDetails packageID(String packageID) {
    this.packageID = packageID;
    return this;
  }

  /**
   * Get packageID
   * @return packageID
   */
  @javax.annotation.Nullable
  public String getPackageID() {
    return packageID;
  }

  public void setPackageID(String packageID) {
    this.packageID = packageID;
  }


  public AssociatePackageResponseDomainPackageDetails packageName(String packageName) {
    this.packageName = packageName;
    return this;
  }

  /**
   * Get packageName
   * @return packageName
   */
  @javax.annotation.Nullable
  public String getPackageName() {
    return packageName;
  }

  public void setPackageName(String packageName) {
    this.packageName = packageName;
  }


  public AssociatePackageResponseDomainPackageDetails packageType(PackageType packageType) {
    this.packageType = packageType;
    return this;
  }

  /**
   * Get packageType
   * @return packageType
   */
  @javax.annotation.Nullable
  public PackageType getPackageType() {
    return packageType;
  }

  public void setPackageType(PackageType packageType) {
    this.packageType = packageType;
  }


  public AssociatePackageResponseDomainPackageDetails lastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
    return this;
  }

  /**
   * Get lastUpdated
   * @return lastUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }

  public void setLastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
  }


  public AssociatePackageResponseDomainPackageDetails domainName(String domainName) {
    this.domainName = domainName;
    return this;
  }

  /**
   * Get domainName
   * @return domainName
   */
  @javax.annotation.Nullable
  public String getDomainName() {
    return domainName;
  }

  public void setDomainName(String domainName) {
    this.domainName = domainName;
  }


  public AssociatePackageResponseDomainPackageDetails domainPackageStatus(DomainPackageStatus domainPackageStatus) {
    this.domainPackageStatus = domainPackageStatus;
    return this;
  }

  /**
   * Get domainPackageStatus
   * @return domainPackageStatus
   */
  @javax.annotation.Nullable
  public DomainPackageStatus getDomainPackageStatus() {
    return domainPackageStatus;
  }

  public void setDomainPackageStatus(DomainPackageStatus domainPackageStatus) {
    this.domainPackageStatus = domainPackageStatus;
  }


  public AssociatePackageResponseDomainPackageDetails packageVersion(String packageVersion) {
    this.packageVersion = packageVersion;
    return this;
  }

  /**
   * Get packageVersion
   * @return packageVersion
   */
  @javax.annotation.Nullable
  public String getPackageVersion() {
    return packageVersion;
  }

  public void setPackageVersion(String packageVersion) {
    this.packageVersion = packageVersion;
  }


  public AssociatePackageResponseDomainPackageDetails referencePath(String referencePath) {
    this.referencePath = referencePath;
    return this;
  }

  /**
   * Get referencePath
   * @return referencePath
   */
  @javax.annotation.Nullable
  public String getReferencePath() {
    return referencePath;
  }

  public void setReferencePath(String referencePath) {
    this.referencePath = referencePath;
  }


  public AssociatePackageResponseDomainPackageDetails errorDetails(DomainPackageDetailsErrorDetails errorDetails) {
    this.errorDetails = errorDetails;
    return this;
  }

  /**
   * Get errorDetails
   * @return errorDetails
   */
  @javax.annotation.Nullable
  public DomainPackageDetailsErrorDetails getErrorDetails() {
    return errorDetails;
  }

  public void setErrorDetails(DomainPackageDetailsErrorDetails errorDetails) {
    this.errorDetails = errorDetails;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssociatePackageResponseDomainPackageDetails associatePackageResponseDomainPackageDetails = (AssociatePackageResponseDomainPackageDetails) o;
    return Objects.equals(this.packageID, associatePackageResponseDomainPackageDetails.packageID) &&
        Objects.equals(this.packageName, associatePackageResponseDomainPackageDetails.packageName) &&
        Objects.equals(this.packageType, associatePackageResponseDomainPackageDetails.packageType) &&
        Objects.equals(this.lastUpdated, associatePackageResponseDomainPackageDetails.lastUpdated) &&
        Objects.equals(this.domainName, associatePackageResponseDomainPackageDetails.domainName) &&
        Objects.equals(this.domainPackageStatus, associatePackageResponseDomainPackageDetails.domainPackageStatus) &&
        Objects.equals(this.packageVersion, associatePackageResponseDomainPackageDetails.packageVersion) &&
        Objects.equals(this.referencePath, associatePackageResponseDomainPackageDetails.referencePath) &&
        Objects.equals(this.errorDetails, associatePackageResponseDomainPackageDetails.errorDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(packageID, packageName, packageType, lastUpdated, domainName, domainPackageStatus, packageVersion, referencePath, errorDetails);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssociatePackageResponseDomainPackageDetails {\n");
    sb.append("    packageID: ").append(toIndentedString(packageID)).append("\n");
    sb.append("    packageName: ").append(toIndentedString(packageName)).append("\n");
    sb.append("    packageType: ").append(toIndentedString(packageType)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    domainName: ").append(toIndentedString(domainName)).append("\n");
    sb.append("    domainPackageStatus: ").append(toIndentedString(domainPackageStatus)).append("\n");
    sb.append("    packageVersion: ").append(toIndentedString(packageVersion)).append("\n");
    sb.append("    referencePath: ").append(toIndentedString(referencePath)).append("\n");
    sb.append("    errorDetails: ").append(toIndentedString(errorDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("PackageID");
    openapiFields.add("PackageName");
    openapiFields.add("PackageType");
    openapiFields.add("LastUpdated");
    openapiFields.add("DomainName");
    openapiFields.add("DomainPackageStatus");
    openapiFields.add("PackageVersion");
    openapiFields.add("ReferencePath");
    openapiFields.add("ErrorDetails");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AssociatePackageResponseDomainPackageDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssociatePackageResponseDomainPackageDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssociatePackageResponseDomainPackageDetails is not found in the empty JSON string", AssociatePackageResponseDomainPackageDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AssociatePackageResponseDomainPackageDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssociatePackageResponseDomainPackageDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `PackageID`
      if (jsonObj.get("PackageID") != null && !jsonObj.get("PackageID").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PackageID"));
      }
      // validate the optional field `PackageName`
      if (jsonObj.get("PackageName") != null && !jsonObj.get("PackageName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PackageName"));
      }
      // validate the optional field `PackageType`
      if (jsonObj.get("PackageType") != null && !jsonObj.get("PackageType").isJsonNull()) {
        PackageType.validateJsonElement(jsonObj.get("PackageType"));
      }
      // validate the optional field `LastUpdated`
      if (jsonObj.get("LastUpdated") != null && !jsonObj.get("LastUpdated").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastUpdated"));
      }
      // validate the optional field `DomainName`
      if (jsonObj.get("DomainName") != null && !jsonObj.get("DomainName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DomainName"));
      }
      // validate the optional field `DomainPackageStatus`
      if (jsonObj.get("DomainPackageStatus") != null && !jsonObj.get("DomainPackageStatus").isJsonNull()) {
        DomainPackageStatus.validateJsonElement(jsonObj.get("DomainPackageStatus"));
      }
      if ((jsonObj.get("PackageVersion") != null && !jsonObj.get("PackageVersion").isJsonNull()) && !jsonObj.get("PackageVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PackageVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PackageVersion").toString()));
      }
      // validate the optional field `ReferencePath`
      if (jsonObj.get("ReferencePath") != null && !jsonObj.get("ReferencePath").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ReferencePath"));
      }
      // validate the optional field `ErrorDetails`
      if (jsonObj.get("ErrorDetails") != null && !jsonObj.get("ErrorDetails").isJsonNull()) {
        DomainPackageDetailsErrorDetails.validateJsonElement(jsonObj.get("ErrorDetails"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssociatePackageResponseDomainPackageDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssociatePackageResponseDomainPackageDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssociatePackageResponseDomainPackageDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssociatePackageResponseDomainPackageDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<AssociatePackageResponseDomainPackageDetails>() {
           @Override
           public void write(JsonWriter out, AssociatePackageResponseDomainPackageDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssociatePackageResponseDomainPackageDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AssociatePackageResponseDomainPackageDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AssociatePackageResponseDomainPackageDetails
   * @throws IOException if the JSON string is invalid with respect to AssociatePackageResponseDomainPackageDetails
   */
  public static AssociatePackageResponseDomainPackageDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssociatePackageResponseDomainPackageDetails.class);
  }

  /**
   * Convert an instance of AssociatePackageResponseDomainPackageDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

