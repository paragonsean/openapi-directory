/*
 * Amazon Elasticsearch Service
 * <fullname>Amazon Elasticsearch Configuration Service</fullname> <p>Use the Amazon Elasticsearch Configuration API to create, configure, and manage Elasticsearch domains.</p> <p>For sample code that uses the Configuration API, see the <a href=\"https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-configuration-samples.html\">Amazon Elasticsearch Service Developer Guide</a>. The guide also contains <a href=\"https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-request-signing.html\">sample code for sending signed HTTP requests to the Elasticsearch APIs</a>.</p> <p>The endpoint for configuration service requests is region-specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#elasticsearch-service-regions\" target=\"_blank\">Regions and Endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2015-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AcceptInboundCrossClusterSearchConnectionResponse;
import org.openapitools.client.model.AddTagsRequest;
import org.openapitools.client.model.AssociatePackageResponse;
import org.openapitools.client.model.AuthorizeVpcEndpointAccessRequest;
import org.openapitools.client.model.AuthorizeVpcEndpointAccessResponse;
import org.openapitools.client.model.CancelElasticsearchServiceSoftwareUpdateRequest;
import org.openapitools.client.model.CancelElasticsearchServiceSoftwareUpdateResponse;
import org.openapitools.client.model.CreateElasticsearchDomainRequest;
import org.openapitools.client.model.CreateElasticsearchDomainResponse;
import org.openapitools.client.model.CreateOutboundCrossClusterSearchConnectionRequest;
import org.openapitools.client.model.CreateOutboundCrossClusterSearchConnectionResponse;
import org.openapitools.client.model.CreatePackageRequest;
import org.openapitools.client.model.CreatePackageResponse;
import org.openapitools.client.model.CreateVpcEndpointRequest;
import org.openapitools.client.model.CreateVpcEndpointResponse;
import org.openapitools.client.model.DeleteElasticsearchDomainResponse;
import org.openapitools.client.model.DeleteInboundCrossClusterSearchConnectionResponse;
import org.openapitools.client.model.DeleteOutboundCrossClusterSearchConnectionResponse;
import org.openapitools.client.model.DeletePackageResponse;
import org.openapitools.client.model.DeleteVpcEndpointResponse;
import org.openapitools.client.model.DescribeDomainAutoTunesRequest;
import org.openapitools.client.model.DescribeDomainAutoTunesResponse;
import org.openapitools.client.model.DescribeDomainChangeProgressResponse;
import org.openapitools.client.model.DescribeElasticsearchDomainConfigResponse;
import org.openapitools.client.model.DescribeElasticsearchDomainResponse;
import org.openapitools.client.model.DescribeElasticsearchDomainsRequest;
import org.openapitools.client.model.DescribeElasticsearchDomainsResponse;
import org.openapitools.client.model.DescribeElasticsearchInstanceTypeLimitsResponse;
import org.openapitools.client.model.DescribeInboundCrossClusterSearchConnectionsRequest;
import org.openapitools.client.model.DescribeInboundCrossClusterSearchConnectionsResponse;
import org.openapitools.client.model.DescribeOutboundCrossClusterSearchConnectionsRequest;
import org.openapitools.client.model.DescribeOutboundCrossClusterSearchConnectionsResponse;
import org.openapitools.client.model.DescribePackagesRequest;
import org.openapitools.client.model.DescribePackagesResponse;
import org.openapitools.client.model.DescribeReservedElasticsearchInstanceOfferingsResponse;
import org.openapitools.client.model.DescribeReservedElasticsearchInstancesResponse;
import org.openapitools.client.model.DescribeVpcEndpointsRequest;
import org.openapitools.client.model.DescribeVpcEndpointsResponse;
import org.openapitools.client.model.DissociatePackageResponse;
import org.openapitools.client.model.GetCompatibleElasticsearchVersionsResponse;
import org.openapitools.client.model.GetPackageVersionHistoryResponse;
import org.openapitools.client.model.GetUpgradeHistoryResponse;
import org.openapitools.client.model.GetUpgradeStatusResponse;
import org.openapitools.client.model.ListDomainNamesResponse;
import org.openapitools.client.model.ListDomainsForPackageResponse;
import org.openapitools.client.model.ListElasticsearchInstanceTypesResponse;
import org.openapitools.client.model.ListElasticsearchVersionsResponse;
import org.openapitools.client.model.ListPackagesForDomainResponse;
import org.openapitools.client.model.ListTagsResponse;
import org.openapitools.client.model.ListVpcEndpointAccessResponse;
import org.openapitools.client.model.ListVpcEndpointsForDomainResponse;
import org.openapitools.client.model.ListVpcEndpointsResponse;
import org.openapitools.client.model.PurchaseReservedElasticsearchInstanceOfferingRequest;
import org.openapitools.client.model.PurchaseReservedElasticsearchInstanceOfferingResponse;
import org.openapitools.client.model.RejectInboundCrossClusterSearchConnectionResponse;
import org.openapitools.client.model.RemoveTagsRequest;
import org.openapitools.client.model.RevokeVpcEndpointAccessRequest;
import org.openapitools.client.model.StartElasticsearchServiceSoftwareUpdateResponse;
import org.openapitools.client.model.UpdateElasticsearchDomainConfigRequest;
import org.openapitools.client.model.UpdateElasticsearchDomainConfigResponse;
import org.openapitools.client.model.UpdatePackageRequest;
import org.openapitools.client.model.UpdatePackageResponse;
import org.openapitools.client.model.UpdateVpcEndpointRequest;
import org.openapitools.client.model.UpdateVpcEndpointResponse;
import org.openapitools.client.model.UpgradeElasticsearchDomainRequest;
import org.openapitools.client.model.UpgradeElasticsearchDomainResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Allows the destination domain owner to accept an inbound cross-cluster search connection request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void acceptInboundCrossClusterSearchConnectionTest() throws ApiException {
        String connectionId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AcceptInboundCrossClusterSearchConnectionResponse response = api.acceptInboundCrossClusterSearchConnection(connectionId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Attaches tags to an existing Elasticsearch domain. Tags are a set of case-sensitive key value pairs. An Elasticsearch domain may have up to 10 tags. See &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-managedomains.html#es-managedomains-awsresorcetagging\&quot; target&#x3D;\&quot;_blank\&quot;&gt; Tagging Amazon Elasticsearch Service Domains for more information.&lt;/a&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addTagsTest() throws ApiException {
        AddTagsRequest addTagsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.addTags(addTagsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Associates a package with an Amazon ES domain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associatePackageTest() throws ApiException {
        String packageID = null;
        String domainName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AssociatePackageResponse response = api.associatePackage(packageID, domainName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Provides access to an Amazon OpenSearch Service domain through the use of an interface VPC endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authorizeVpcEndpointAccessTest() throws ApiException {
        String domainName = null;
        AuthorizeVpcEndpointAccessRequest authorizeVpcEndpointAccessRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AuthorizeVpcEndpointAccessResponse response = api.authorizeVpcEndpointAccess(domainName, authorizeVpcEndpointAccessRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Cancels a scheduled service software update for an Amazon ES domain. You can only perform this operation before the &lt;code&gt;AutomatedUpdateDate&lt;/code&gt; and when the &lt;code&gt;UpdateStatus&lt;/code&gt; is in the &lt;code&gt;PENDING_UPDATE&lt;/code&gt; state.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelElasticsearchServiceSoftwareUpdateTest() throws ApiException {
        CancelElasticsearchServiceSoftwareUpdateRequest cancelElasticsearchServiceSoftwareUpdateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CancelElasticsearchServiceSoftwareUpdateResponse response = api.cancelElasticsearchServiceSoftwareUpdate(cancelElasticsearchServiceSoftwareUpdateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new Elasticsearch domain. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-createupdatedomains.html#es-createdomains\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Creating Elasticsearch Domains&lt;/a&gt; in the &lt;i&gt;Amazon Elasticsearch Service Developer Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createElasticsearchDomainTest() throws ApiException {
        CreateElasticsearchDomainRequest createElasticsearchDomainRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateElasticsearchDomainResponse response = api.createElasticsearchDomain(createElasticsearchDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new cross-cluster search connection from a source domain to a destination domain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOutboundCrossClusterSearchConnectionTest() throws ApiException {
        CreateOutboundCrossClusterSearchConnectionRequest createOutboundCrossClusterSearchConnectionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateOutboundCrossClusterSearchConnectionResponse response = api.createOutboundCrossClusterSearchConnection(createOutboundCrossClusterSearchConnectionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Create a package for use with Amazon ES domains.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPackageTest() throws ApiException {
        CreatePackageRequest createPackageRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreatePackageResponse response = api.createPackage(createPackageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates an Amazon OpenSearch Service-managed VPC endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createVpcEndpointTest() throws ApiException {
        CreateVpcEndpointRequest createVpcEndpointRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateVpcEndpointResponse response = api.createVpcEndpoint(createVpcEndpointRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Permanently deletes the specified Elasticsearch domain and all of its data. Once a domain is deleted, it cannot be recovered.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteElasticsearchDomainTest() throws ApiException {
        String domainName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteElasticsearchDomainResponse response = api.deleteElasticsearchDomain(domainName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the service-linked role that Elasticsearch Service uses to manage and maintain VPC domains. Role deletion will fail if any existing VPC domains use the role. You must delete any such Elasticsearch domains before deleting the role. See &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-vpc.html#es-enabling-slr\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Deleting Elasticsearch Service Role&lt;/a&gt; in &lt;i&gt;VPC Endpoints for Amazon Elasticsearch Service Domains&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteElasticsearchServiceRoleTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteElasticsearchServiceRole(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Allows the destination domain owner to delete an existing inbound cross-cluster search connection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteInboundCrossClusterSearchConnectionTest() throws ApiException {
        String connectionId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteInboundCrossClusterSearchConnectionResponse response = api.deleteInboundCrossClusterSearchConnection(connectionId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Allows the source domain owner to delete an existing outbound cross-cluster search connection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOutboundCrossClusterSearchConnectionTest() throws ApiException {
        String connectionId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteOutboundCrossClusterSearchConnectionResponse response = api.deleteOutboundCrossClusterSearchConnection(connectionId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Delete the package.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePackageTest() throws ApiException {
        String packageID = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeletePackageResponse response = api.deletePackage(packageID, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an Amazon OpenSearch Service-managed interface VPC endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteVpcEndpointTest() throws ApiException {
        String vpcEndpointId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteVpcEndpointResponse response = api.deleteVpcEndpoint(vpcEndpointId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Provides scheduled Auto-Tune action details for the Elasticsearch domain, such as Auto-Tune action type, description, severity, and scheduled date.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeDomainAutoTunesTest() throws ApiException {
        String domainName = null;
        DescribeDomainAutoTunesRequest describeDomainAutoTunesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        DescribeDomainAutoTunesResponse response = api.describeDomainAutoTunes(domainName, describeDomainAutoTunesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns information about the current blue/green deployment happening on a domain, including a change ID, status, and progress stages.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeDomainChangeProgressTest() throws ApiException {
        String domainName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String changeid = null;
        DescribeDomainChangeProgressResponse response = api.describeDomainChangeProgress(domainName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, changeid);
        // TODO: test validations
    }

    /**
     * Returns domain configuration information about the specified Elasticsearch domain, including the domain ID, domain endpoint, and domain ARN.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeElasticsearchDomainTest() throws ApiException {
        String domainName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeElasticsearchDomainResponse response = api.describeElasticsearchDomain(domainName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Provides cluster configuration information about the specified Elasticsearch domain, such as the state, creation date, update version, and update date for cluster options.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeElasticsearchDomainConfigTest() throws ApiException {
        String domainName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeElasticsearchDomainConfigResponse response = api.describeElasticsearchDomainConfig(domainName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns domain configuration information about the specified Elasticsearch domains, including the domain ID, domain endpoint, and domain ARN.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeElasticsearchDomainsTest() throws ApiException {
        DescribeElasticsearchDomainsRequest describeElasticsearchDomainsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeElasticsearchDomainsResponse response = api.describeElasticsearchDomains(describeElasticsearchDomainsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Describe Elasticsearch Limits for a given InstanceType and ElasticsearchVersion. When modifying existing Domain, specify the &lt;code&gt; &lt;a&gt;DomainName&lt;/a&gt; &lt;/code&gt; to know what Limits are supported for modifying. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeElasticsearchInstanceTypeLimitsTest() throws ApiException {
        String instanceType = null;
        String elasticsearchVersion = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String domainName = null;
        DescribeElasticsearchInstanceTypeLimitsResponse response = api.describeElasticsearchInstanceTypeLimits(instanceType, elasticsearchVersion, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, domainName);
        // TODO: test validations
    }

    /**
     * Lists all the inbound cross-cluster search connections for a destination domain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeInboundCrossClusterSearchConnectionsTest() throws ApiException {
        DescribeInboundCrossClusterSearchConnectionsRequest describeInboundCrossClusterSearchConnectionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        DescribeInboundCrossClusterSearchConnectionsResponse response = api.describeInboundCrossClusterSearchConnections(describeInboundCrossClusterSearchConnectionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists all the outbound cross-cluster search connections for a source domain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeOutboundCrossClusterSearchConnectionsTest() throws ApiException {
        DescribeOutboundCrossClusterSearchConnectionsRequest describeOutboundCrossClusterSearchConnectionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        DescribeOutboundCrossClusterSearchConnectionsResponse response = api.describeOutboundCrossClusterSearchConnections(describeOutboundCrossClusterSearchConnectionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Describes all packages available to Amazon ES. Includes options for filtering, limiting the number of results, and pagination.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describePackagesTest() throws ApiException {
        DescribePackagesRequest describePackagesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        DescribePackagesResponse response = api.describePackages(describePackagesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists available reserved Elasticsearch instance offerings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeReservedElasticsearchInstanceOfferingsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String offeringId = null;
        Integer maxResults = null;
        String nextToken = null;
        String maxResults2 = null;
        String nextToken2 = null;
        DescribeReservedElasticsearchInstanceOfferingsResponse response = api.describeReservedElasticsearchInstanceOfferings(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, offeringId, maxResults, nextToken, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Returns information about reserved Elasticsearch instances for this account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeReservedElasticsearchInstancesTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String reservationId = null;
        Integer maxResults = null;
        String nextToken = null;
        String maxResults2 = null;
        String nextToken2 = null;
        DescribeReservedElasticsearchInstancesResponse response = api.describeReservedElasticsearchInstances(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, reservationId, maxResults, nextToken, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Describes one or more Amazon OpenSearch Service-managed VPC endpoints.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeVpcEndpointsTest() throws ApiException {
        DescribeVpcEndpointsRequest describeVpcEndpointsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeVpcEndpointsResponse response = api.describeVpcEndpoints(describeVpcEndpointsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Dissociates a package from the Amazon ES domain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dissociatePackageTest() throws ApiException {
        String packageID = null;
        String domainName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DissociatePackageResponse response = api.dissociatePackage(packageID, domainName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Returns a list of upgrade compatible Elastisearch versions. You can optionally pass a &lt;code&gt; &lt;a&gt;DomainName&lt;/a&gt; &lt;/code&gt; to get all upgrade compatible Elasticsearch versions for that specific domain. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCompatibleElasticsearchVersionsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String domainName = null;
        GetCompatibleElasticsearchVersionsResponse response = api.getCompatibleElasticsearchVersions(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, domainName);
        // TODO: test validations
    }

    /**
     * Returns a list of versions of the package, along with their creation time and commit message.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPackageVersionHistoryTest() throws ApiException {
        String packageID = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String maxResults2 = null;
        String nextToken2 = null;
        GetPackageVersionHistoryResponse response = api.getPackageVersionHistory(packageID, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Retrieves the complete history of the last 10 upgrades that were performed on the domain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUpgradeHistoryTest() throws ApiException {
        String domainName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String maxResults2 = null;
        String nextToken2 = null;
        GetUpgradeHistoryResponse response = api.getUpgradeHistory(domainName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Retrieves the latest status of the last upgrade or upgrade eligibility check that was performed on the domain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUpgradeStatusTest() throws ApiException {
        String domainName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetUpgradeStatusResponse response = api.getUpgradeStatus(domainName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns the name of all Elasticsearch domains owned by the current user&#39;s account. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDomainNamesTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String engineType = null;
        ListDomainNamesResponse response = api.listDomainNames(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, engineType);
        // TODO: test validations
    }

    /**
     * Lists all Amazon ES domains associated with the package.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDomainsForPackageTest() throws ApiException {
        String packageID = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListDomainsForPackageResponse response = api.listDomainsForPackage(packageID, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * List all Elasticsearch instance types that are supported for given ElasticsearchVersion
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listElasticsearchInstanceTypesTest() throws ApiException {
        String elasticsearchVersion = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String domainName = null;
        Integer maxResults = null;
        String nextToken = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListElasticsearchInstanceTypesResponse response = api.listElasticsearchInstanceTypes(elasticsearchVersion, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, domainName, maxResults, nextToken, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * List all supported Elasticsearch versions
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listElasticsearchVersionsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListElasticsearchVersionsResponse response = api.listElasticsearchVersions(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Lists all packages associated with the Amazon ES domain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPackagesForDomainTest() throws ApiException {
        String domainName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListPackagesForDomainResponse response = api.listPackagesForDomain(domainName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Returns all tags for the given Elasticsearch domain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsTest() throws ApiException {
        String arn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsResponse response = api.listTags(arn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves information about each principal that is allowed to access a given Amazon OpenSearch Service domain through the use of an interface VPC endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listVpcEndpointAccessTest() throws ApiException {
        String domainName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        ListVpcEndpointAccessResponse response = api.listVpcEndpointAccess(domainName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves all Amazon OpenSearch Service-managed VPC endpoints in the current account and Region.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listVpcEndpointsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        ListVpcEndpointsResponse response = api.listVpcEndpoints(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves all Amazon OpenSearch Service-managed VPC endpoints associated with a particular domain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listVpcEndpointsForDomainTest() throws ApiException {
        String domainName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        ListVpcEndpointsForDomainResponse response = api.listVpcEndpointsForDomain(domainName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        // TODO: test validations
    }

    /**
     * Allows you to purchase reserved Elasticsearch instances.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void purchaseReservedElasticsearchInstanceOfferingTest() throws ApiException {
        PurchaseReservedElasticsearchInstanceOfferingRequest purchaseReservedElasticsearchInstanceOfferingRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PurchaseReservedElasticsearchInstanceOfferingResponse response = api.purchaseReservedElasticsearchInstanceOffering(purchaseReservedElasticsearchInstanceOfferingRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Allows the destination domain owner to reject an inbound cross-cluster search connection request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rejectInboundCrossClusterSearchConnectionTest() throws ApiException {
        String connectionId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RejectInboundCrossClusterSearchConnectionResponse response = api.rejectInboundCrossClusterSearchConnection(connectionId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes the specified set of tags from the specified Elasticsearch domain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeTagsTest() throws ApiException {
        RemoveTagsRequest removeTagsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.removeTags(removeTagsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Revokes access to an Amazon OpenSearch Service domain that was provided through an interface VPC endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void revokeVpcEndpointAccessTest() throws ApiException {
        String domainName = null;
        RevokeVpcEndpointAccessRequest revokeVpcEndpointAccessRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.revokeVpcEndpointAccess(domainName, revokeVpcEndpointAccessRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Schedules a service software update for an Amazon ES domain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startElasticsearchServiceSoftwareUpdateTest() throws ApiException {
        CancelElasticsearchServiceSoftwareUpdateRequest cancelElasticsearchServiceSoftwareUpdateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartElasticsearchServiceSoftwareUpdateResponse response = api.startElasticsearchServiceSoftwareUpdate(cancelElasticsearchServiceSoftwareUpdateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Modifies the cluster configuration of the specified Elasticsearch domain, setting as setting the instance type and the number of instances. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateElasticsearchDomainConfigTest() throws ApiException {
        String domainName = null;
        UpdateElasticsearchDomainConfigRequest updateElasticsearchDomainConfigRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateElasticsearchDomainConfigResponse response = api.updateElasticsearchDomainConfig(domainName, updateElasticsearchDomainConfigRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a package for use with Amazon ES domains.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePackageTest() throws ApiException {
        UpdatePackageRequest updatePackageRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdatePackageResponse response = api.updatePackage(updatePackageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Modifies an Amazon OpenSearch Service-managed interface VPC endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateVpcEndpointTest() throws ApiException {
        UpdateVpcEndpointRequest updateVpcEndpointRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateVpcEndpointResponse response = api.updateVpcEndpoint(updateVpcEndpointRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Allows you to either upgrade your domain or perform an Upgrade eligibility check to a compatible Elasticsearch version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void upgradeElasticsearchDomainTest() throws ApiException {
        UpgradeElasticsearchDomainRequest upgradeElasticsearchDomainRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpgradeElasticsearchDomainResponse response = api.upgradeElasticsearchDomain(upgradeElasticsearchDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
