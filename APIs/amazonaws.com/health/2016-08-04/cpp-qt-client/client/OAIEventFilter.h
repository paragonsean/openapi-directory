/**
 * AWS Health APIs and Notifications
 * <fullname>Health</fullname> <p>The Health API provides access to the Health information that appears in the <a href=\"https://health.aws.amazon.com/health/home\">Health Dashboard</a>. You can use the API operations to get information about events that might affect your Amazon Web Services and resources.</p> <p>You must have a Business, Enterprise On-Ramp, or Enterprise Support plan from <a href=\"http://aws.amazon.com/premiumsupport/\">Amazon Web Services Support</a> to use the Health API. If you call the Health API from an Amazon Web Services account that doesn't have a Business, Enterprise On-Ramp, or Enterprise Support plan, you receive a <code>SubscriptionRequiredException</code> error.</p> <p>For API access, you need an access key ID and a secret access key. Use temporary credentials instead of long-term access keys when possible. Temporary credentials include an access key ID, a secret access key, and a security token that indicates when the credentials expire. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-access-keys-best-practices.html\">Best practices for managing Amazon Web Services access keys</a> in the <i>Amazon Web Services General Reference</i>.</p> <p>You can use the Health endpoint health.us-east-1.amazonaws.com (HTTPS) to call the Health API operations. Health supports a multi-Region application architecture and has two regional endpoints in an active-passive configuration. You can use the high availability endpoint example to determine which Amazon Web Services Region is active, so that you can get the latest information from the API. For more information, see <a href=\"https://docs.aws.amazon.com/health/latest/ug/health-api.html\">Accessing the Health API</a> in the <i>Health User Guide</i>.</p> <p>For authentication of requests, Health uses the <a href=\"https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\">Signature Version 4 Signing Process</a>.</p> <p>If your Amazon Web Services account is part of Organizations, you can use the Health organizational view feature. This feature provides a centralized view of Health events across all accounts in your organization. You can aggregate Health events in real time to identify accounts in your organization that are affected by an operational event or get notified of security vulnerabilities. Use the organizational view API operations to enable this feature and return event information. For more information, see <a href=\"https://docs.aws.amazon.com/health/latest/ug/aggregate-events.html\">Aggregating Health events</a> in the <i>Health User Guide</i>.</p> <note> <p>When you use the Health API operations to return Health events, see the following recommendations:</p> <ul> <li> <p>Use the <a href=\"https://docs.aws.amazon.com/health/latest/APIReference/API_Event.html#AWSHealth-Type-Event-eventScopeCode\">eventScopeCode</a> parameter to specify whether to return Health events that are public or account-specific.</p> </li> <li> <p>Use pagination to view all events from the response. For example, if you call the <code>DescribeEventsForOrganization</code> operation to get all events in your organization, you might receive several page results. Specify the <code>nextToken</code> in the next request to return more results.</p> </li> </ul> </note>
 *
 * The version of the OpenAPI document: 2016-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEventFilter.h
 *
 * The values to use to filter results from the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/health/latest/APIReference/API_DescribeEvents.html\&quot;&gt;DescribeEvents&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/health/latest/APIReference/API_DescribeEventAggregates.html\&quot;&gt;DescribeEventAggregates&lt;/a&gt; operations.
 */

#ifndef OAIEventFilter_H
#define OAIEventFilter_H

#include <QJsonObject>

#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIEventFilter : public OAIObject {
public:
    OAIEventFilter();
    OAIEventFilter(QString json);
    ~OAIEventFilter() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList getEventArns() const;
    void setEventArns(const QList &event_arns);
    bool is_event_arns_Set() const;
    bool is_event_arns_Valid() const;

    QList getEventTypeCodes() const;
    void setEventTypeCodes(const QList &event_type_codes);
    bool is_event_type_codes_Set() const;
    bool is_event_type_codes_Valid() const;

    QList getServices() const;
    void setServices(const QList &services);
    bool is_services_Set() const;
    bool is_services_Valid() const;

    QList getRegions() const;
    void setRegions(const QList &regions);
    bool is_regions_Set() const;
    bool is_regions_Valid() const;

    QList getAvailabilityZones() const;
    void setAvailabilityZones(const QList &availability_zones);
    bool is_availability_zones_Set() const;
    bool is_availability_zones_Valid() const;

    QList getStartTimes() const;
    void setStartTimes(const QList &start_times);
    bool is_start_times_Set() const;
    bool is_start_times_Valid() const;

    QList getEndTimes() const;
    void setEndTimes(const QList &end_times);
    bool is_end_times_Set() const;
    bool is_end_times_Valid() const;

    QList getLastUpdatedTimes() const;
    void setLastUpdatedTimes(const QList &last_updated_times);
    bool is_last_updated_times_Set() const;
    bool is_last_updated_times_Valid() const;

    QList getEntityArns() const;
    void setEntityArns(const QList &entity_arns);
    bool is_entity_arns_Set() const;
    bool is_entity_arns_Valid() const;

    QList getEntityValues() const;
    void setEntityValues(const QList &entity_values);
    bool is_entity_values_Set() const;
    bool is_entity_values_Valid() const;

    QList getEventTypeCategories() const;
    void setEventTypeCategories(const QList &event_type_categories);
    bool is_event_type_categories_Set() const;
    bool is_event_type_categories_Valid() const;

    QList getTags() const;
    void setTags(const QList &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    QList getEventStatusCodes() const;
    void setEventStatusCodes(const QList &event_status_codes);
    bool is_event_status_codes_Set() const;
    bool is_event_status_codes_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList m_event_arns;
    bool m_event_arns_isSet;
    bool m_event_arns_isValid;

    QList m_event_type_codes;
    bool m_event_type_codes_isSet;
    bool m_event_type_codes_isValid;

    QList m_services;
    bool m_services_isSet;
    bool m_services_isValid;

    QList m_regions;
    bool m_regions_isSet;
    bool m_regions_isValid;

    QList m_availability_zones;
    bool m_availability_zones_isSet;
    bool m_availability_zones_isValid;

    QList m_start_times;
    bool m_start_times_isSet;
    bool m_start_times_isValid;

    QList m_end_times;
    bool m_end_times_isSet;
    bool m_end_times_isValid;

    QList m_last_updated_times;
    bool m_last_updated_times_isSet;
    bool m_last_updated_times_isValid;

    QList m_entity_arns;
    bool m_entity_arns_isSet;
    bool m_entity_arns_isValid;

    QList m_entity_values;
    bool m_entity_values_isSet;
    bool m_entity_values_isValid;

    QList m_event_type_categories;
    bool m_event_type_categories_isSet;
    bool m_event_type_categories_isValid;

    QList m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    QList m_event_status_codes;
    bool m_event_status_codes_isSet;
    bool m_event_status_codes_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEventFilter)

#endif // OAIEventFilter_H
