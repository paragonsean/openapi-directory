/**
 * AWS Health APIs and Notifications
 * <fullname>Health</fullname> <p>The Health API provides access to the Health information that appears in the <a href=\"https://health.aws.amazon.com/health/home\">Health Dashboard</a>. You can use the API operations to get information about events that might affect your Amazon Web Services and resources.</p> <p>You must have a Business, Enterprise On-Ramp, or Enterprise Support plan from <a href=\"http://aws.amazon.com/premiumsupport/\">Amazon Web Services Support</a> to use the Health API. If you call the Health API from an Amazon Web Services account that doesn't have a Business, Enterprise On-Ramp, or Enterprise Support plan, you receive a <code>SubscriptionRequiredException</code> error.</p> <p>For API access, you need an access key ID and a secret access key. Use temporary credentials instead of long-term access keys when possible. Temporary credentials include an access key ID, a secret access key, and a security token that indicates when the credentials expire. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-access-keys-best-practices.html\">Best practices for managing Amazon Web Services access keys</a> in the <i>Amazon Web Services General Reference</i>.</p> <p>You can use the Health endpoint health.us-east-1.amazonaws.com (HTTPS) to call the Health API operations. Health supports a multi-Region application architecture and has two regional endpoints in an active-passive configuration. You can use the high availability endpoint example to determine which Amazon Web Services Region is active, so that you can get the latest information from the API. For more information, see <a href=\"https://docs.aws.amazon.com/health/latest/ug/health-api.html\">Accessing the Health API</a> in the <i>Health User Guide</i>.</p> <p>For authentication of requests, Health uses the <a href=\"https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\">Signature Version 4 Signing Process</a>.</p> <p>If your Amazon Web Services account is part of Organizations, you can use the Health organizational view feature. This feature provides a centralized view of Health events across all accounts in your organization. You can aggregate Health events in real time to identify accounts in your organization that are affected by an operational event or get notified of security vulnerabilities. Use the organizational view API operations to enable this feature and return event information. For more information, see <a href=\"https://docs.aws.amazon.com/health/latest/ug/aggregate-events.html\">Aggregating Health events</a> in the <i>Health User Guide</i>.</p> <note> <p>When you use the Health API operations to return Health events, see the following recommendations:</p> <ul> <li> <p>Use the <a href=\"https://docs.aws.amazon.com/health/latest/APIReference/API_Event.html#AWSHealth-Type-Event-eventScopeCode\">eventScopeCode</a> parameter to specify whether to return Health events that are public or account-specific.</p> </li> <li> <p>Use pagination to view all events from the response. For example, if you call the <code>DescribeEventsForOrganization</code> operation to get all events in your organization, you might receive several page results. Specify the <code>nextToken</code> in the next request to return more results.</p> </li> </ul> </note>
 *
 * The version of the OpenAPI document: 2016-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAffectedEntity.h
 *
 * Information about an entity that is affected by a Health event.
 */

#ifndef OAIAffectedEntity_H
#define OAIAffectedEntity_H

#include <QJsonObject>

#include "OAIEntityStatusCode.h"
#include <QDateTime>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAffectedEntity : public OAIObject {
public:
    OAIAffectedEntity();
    OAIAffectedEntity(QString json);
    ~OAIAffectedEntity() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getEntityArn() const;
    void setEntityArn(const QString &entity_arn);
    bool is_entity_arn_Set() const;
    bool is_entity_arn_Valid() const;

    QString getEventArn() const;
    void setEventArn(const QString &event_arn);
    bool is_event_arn_Set() const;
    bool is_event_arn_Valid() const;

    QString getEntityValue() const;
    void setEntityValue(const QString &entity_value);
    bool is_entity_value_Set() const;
    bool is_entity_value_Valid() const;

    QString getEntityUrl() const;
    void setEntityUrl(const QString &entity_url);
    bool is_entity_url_Set() const;
    bool is_entity_url_Valid() const;

    QString getAwsAccountId() const;
    void setAwsAccountId(const QString &aws_account_id);
    bool is_aws_account_id_Set() const;
    bool is_aws_account_id_Valid() const;

    QDateTime getLastUpdatedTime() const;
    void setLastUpdatedTime(const QDateTime &last_updated_time);
    bool is_last_updated_time_Set() const;
    bool is_last_updated_time_Valid() const;

    OAIEntityStatusCode getStatusCode() const;
    void setStatusCode(const OAIEntityStatusCode &status_code);
    bool is_status_code_Set() const;
    bool is_status_code_Valid() const;

    QMap getTags() const;
    void setTags(const QMap &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_entity_arn;
    bool m_entity_arn_isSet;
    bool m_entity_arn_isValid;

    QString m_event_arn;
    bool m_event_arn_isSet;
    bool m_event_arn_isValid;

    QString m_entity_value;
    bool m_entity_value_isSet;
    bool m_entity_value_isValid;

    QString m_entity_url;
    bool m_entity_url_isSet;
    bool m_entity_url_isValid;

    QString m_aws_account_id;
    bool m_aws_account_id_isSet;
    bool m_aws_account_id_isValid;

    QDateTime m_last_updated_time;
    bool m_last_updated_time_isSet;
    bool m_last_updated_time_isValid;

    OAIEntityStatusCode m_status_code;
    bool m_status_code_isSet;
    bool m_status_code_isValid;

    QMap m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAffectedEntity)

#endif // OAIAffectedEntity_H
