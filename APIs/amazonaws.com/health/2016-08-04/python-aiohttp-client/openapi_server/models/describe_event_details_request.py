# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DescribeEventDetailsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_arns: List=None, locale: str=None):
        """DescribeEventDetailsRequest - a model defined in OpenAPI

        :param event_arns: The event_arns of this DescribeEventDetailsRequest.
        :param locale: The locale of this DescribeEventDetailsRequest.
        """
        self.openapi_types = {
            'event_arns': List,
            'locale': str
        }

        self.attribute_map = {
            'event_arns': 'eventArns',
            'locale': 'locale'
        }

        self._event_arns = event_arns
        self._locale = locale

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeEventDetailsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeEventDetailsRequest of this DescribeEventDetailsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_arns(self):
        """Gets the event_arns of this DescribeEventDetailsRequest.


        :return: The event_arns of this DescribeEventDetailsRequest.
        :rtype: List
        """
        return self._event_arns

    @event_arns.setter
    def event_arns(self, event_arns):
        """Sets the event_arns of this DescribeEventDetailsRequest.


        :param event_arns: The event_arns of this DescribeEventDetailsRequest.
        :type event_arns: List
        """
        if event_arns is None:
            raise ValueError("Invalid value for `event_arns`, must not be `None`")

        self._event_arns = event_arns

    @property
    def locale(self):
        """Gets the locale of this DescribeEventDetailsRequest.


        :return: The locale of this DescribeEventDetailsRequest.
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this DescribeEventDetailsRequest.


        :param locale: The locale of this DescribeEventDetailsRequest.
        :type locale: str
        """

        self._locale = locale
