# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.describe_event_aggregates_request_filter import DescribeEventAggregatesRequestFilter
from openapi_server.models.event_aggregate_field import EventAggregateField
from openapi_server import util


class DescribeEventAggregatesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filter: DescribeEventAggregatesRequestFilter=None, aggregate_field: EventAggregateField=None, max_results: int=None, next_token: str=None):
        """DescribeEventAggregatesRequest - a model defined in OpenAPI

        :param filter: The filter of this DescribeEventAggregatesRequest.
        :param aggregate_field: The aggregate_field of this DescribeEventAggregatesRequest.
        :param max_results: The max_results of this DescribeEventAggregatesRequest.
        :param next_token: The next_token of this DescribeEventAggregatesRequest.
        """
        self.openapi_types = {
            'filter': DescribeEventAggregatesRequestFilter,
            'aggregate_field': EventAggregateField,
            'max_results': int,
            'next_token': str
        }

        self.attribute_map = {
            'filter': 'filter',
            'aggregate_field': 'aggregateField',
            'max_results': 'maxResults',
            'next_token': 'nextToken'
        }

        self._filter = filter
        self._aggregate_field = aggregate_field
        self._max_results = max_results
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeEventAggregatesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeEventAggregatesRequest of this DescribeEventAggregatesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filter(self):
        """Gets the filter of this DescribeEventAggregatesRequest.


        :return: The filter of this DescribeEventAggregatesRequest.
        :rtype: DescribeEventAggregatesRequestFilter
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this DescribeEventAggregatesRequest.


        :param filter: The filter of this DescribeEventAggregatesRequest.
        :type filter: DescribeEventAggregatesRequestFilter
        """

        self._filter = filter

    @property
    def aggregate_field(self):
        """Gets the aggregate_field of this DescribeEventAggregatesRequest.


        :return: The aggregate_field of this DescribeEventAggregatesRequest.
        :rtype: EventAggregateField
        """
        return self._aggregate_field

    @aggregate_field.setter
    def aggregate_field(self, aggregate_field):
        """Sets the aggregate_field of this DescribeEventAggregatesRequest.


        :param aggregate_field: The aggregate_field of this DescribeEventAggregatesRequest.
        :type aggregate_field: EventAggregateField
        """
        if aggregate_field is None:
            raise ValueError("Invalid value for `aggregate_field`, must not be `None`")

        self._aggregate_field = aggregate_field

    @property
    def max_results(self):
        """Gets the max_results of this DescribeEventAggregatesRequest.


        :return: The max_results of this DescribeEventAggregatesRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this DescribeEventAggregatesRequest.


        :param max_results: The max_results of this DescribeEventAggregatesRequest.
        :type max_results: int
        """

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this DescribeEventAggregatesRequest.


        :return: The next_token of this DescribeEventAggregatesRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this DescribeEventAggregatesRequest.


        :param next_token: The next_token of this DescribeEventAggregatesRequest.
        :type next_token: str
        """

        self._next_token = next_token
