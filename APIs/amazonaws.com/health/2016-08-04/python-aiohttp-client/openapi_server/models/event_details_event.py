# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.event_scope_code import EventScopeCode
from openapi_server.models.event_status_code import EventStatusCode
from openapi_server.models.event_type_category import EventTypeCategory
from openapi_server import util


class EventDetailsEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arn: str=None, service: str=None, event_type_code: str=None, event_type_category: EventTypeCategory=None, region: str=None, availability_zone: str=None, start_time: datetime=None, end_time: datetime=None, last_updated_time: datetime=None, status_code: EventStatusCode=None, event_scope_code: EventScopeCode=None):
        """EventDetailsEvent - a model defined in OpenAPI

        :param arn: The arn of this EventDetailsEvent.
        :param service: The service of this EventDetailsEvent.
        :param event_type_code: The event_type_code of this EventDetailsEvent.
        :param event_type_category: The event_type_category of this EventDetailsEvent.
        :param region: The region of this EventDetailsEvent.
        :param availability_zone: The availability_zone of this EventDetailsEvent.
        :param start_time: The start_time of this EventDetailsEvent.
        :param end_time: The end_time of this EventDetailsEvent.
        :param last_updated_time: The last_updated_time of this EventDetailsEvent.
        :param status_code: The status_code of this EventDetailsEvent.
        :param event_scope_code: The event_scope_code of this EventDetailsEvent.
        """
        self.openapi_types = {
            'arn': str,
            'service': str,
            'event_type_code': str,
            'event_type_category': EventTypeCategory,
            'region': str,
            'availability_zone': str,
            'start_time': datetime,
            'end_time': datetime,
            'last_updated_time': datetime,
            'status_code': EventStatusCode,
            'event_scope_code': EventScopeCode
        }

        self.attribute_map = {
            'arn': 'arn',
            'service': 'service',
            'event_type_code': 'eventTypeCode',
            'event_type_category': 'eventTypeCategory',
            'region': 'region',
            'availability_zone': 'availabilityZone',
            'start_time': 'startTime',
            'end_time': 'endTime',
            'last_updated_time': 'lastUpdatedTime',
            'status_code': 'statusCode',
            'event_scope_code': 'eventScopeCode'
        }

        self._arn = arn
        self._service = service
        self._event_type_code = event_type_code
        self._event_type_category = event_type_category
        self._region = region
        self._availability_zone = availability_zone
        self._start_time = start_time
        self._end_time = end_time
        self._last_updated_time = last_updated_time
        self._status_code = status_code
        self._event_scope_code = event_scope_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventDetailsEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventDetails_event of this EventDetailsEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arn(self):
        """Gets the arn of this EventDetailsEvent.


        :return: The arn of this EventDetailsEvent.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this EventDetailsEvent.


        :param arn: The arn of this EventDetailsEvent.
        :type arn: str
        """

        self._arn = arn

    @property
    def service(self):
        """Gets the service of this EventDetailsEvent.


        :return: The service of this EventDetailsEvent.
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this EventDetailsEvent.


        :param service: The service of this EventDetailsEvent.
        :type service: str
        """

        self._service = service

    @property
    def event_type_code(self):
        """Gets the event_type_code of this EventDetailsEvent.


        :return: The event_type_code of this EventDetailsEvent.
        :rtype: str
        """
        return self._event_type_code

    @event_type_code.setter
    def event_type_code(self, event_type_code):
        """Sets the event_type_code of this EventDetailsEvent.


        :param event_type_code: The event_type_code of this EventDetailsEvent.
        :type event_type_code: str
        """

        self._event_type_code = event_type_code

    @property
    def event_type_category(self):
        """Gets the event_type_category of this EventDetailsEvent.


        :return: The event_type_category of this EventDetailsEvent.
        :rtype: EventTypeCategory
        """
        return self._event_type_category

    @event_type_category.setter
    def event_type_category(self, event_type_category):
        """Sets the event_type_category of this EventDetailsEvent.


        :param event_type_category: The event_type_category of this EventDetailsEvent.
        :type event_type_category: EventTypeCategory
        """

        self._event_type_category = event_type_category

    @property
    def region(self):
        """Gets the region of this EventDetailsEvent.


        :return: The region of this EventDetailsEvent.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this EventDetailsEvent.


        :param region: The region of this EventDetailsEvent.
        :type region: str
        """

        self._region = region

    @property
    def availability_zone(self):
        """Gets the availability_zone of this EventDetailsEvent.


        :return: The availability_zone of this EventDetailsEvent.
        :rtype: str
        """
        return self._availability_zone

    @availability_zone.setter
    def availability_zone(self, availability_zone):
        """Sets the availability_zone of this EventDetailsEvent.


        :param availability_zone: The availability_zone of this EventDetailsEvent.
        :type availability_zone: str
        """

        self._availability_zone = availability_zone

    @property
    def start_time(self):
        """Gets the start_time of this EventDetailsEvent.


        :return: The start_time of this EventDetailsEvent.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this EventDetailsEvent.


        :param start_time: The start_time of this EventDetailsEvent.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this EventDetailsEvent.


        :return: The end_time of this EventDetailsEvent.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this EventDetailsEvent.


        :param end_time: The end_time of this EventDetailsEvent.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def last_updated_time(self):
        """Gets the last_updated_time of this EventDetailsEvent.


        :return: The last_updated_time of this EventDetailsEvent.
        :rtype: datetime
        """
        return self._last_updated_time

    @last_updated_time.setter
    def last_updated_time(self, last_updated_time):
        """Sets the last_updated_time of this EventDetailsEvent.


        :param last_updated_time: The last_updated_time of this EventDetailsEvent.
        :type last_updated_time: datetime
        """

        self._last_updated_time = last_updated_time

    @property
    def status_code(self):
        """Gets the status_code of this EventDetailsEvent.


        :return: The status_code of this EventDetailsEvent.
        :rtype: EventStatusCode
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this EventDetailsEvent.


        :param status_code: The status_code of this EventDetailsEvent.
        :type status_code: EventStatusCode
        """

        self._status_code = status_code

    @property
    def event_scope_code(self):
        """Gets the event_scope_code of this EventDetailsEvent.


        :return: The event_scope_code of this EventDetailsEvent.
        :rtype: EventScopeCode
        """
        return self._event_scope_code

    @event_scope_code.setter
    def event_scope_code(self, event_scope_code):
        """Sets the event_scope_code of this EventDetailsEvent.


        :param event_scope_code: The event_scope_code of this EventDetailsEvent.
        :type event_scope_code: EventScopeCode
        """

        self._event_scope_code = event_scope_code
