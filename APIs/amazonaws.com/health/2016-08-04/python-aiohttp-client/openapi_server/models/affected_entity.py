# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.entity_status_code import EntityStatusCode
from openapi_server import util


class AffectedEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, entity_arn: str=None, event_arn: str=None, entity_value: str=None, entity_url: str=None, aws_account_id: str=None, last_updated_time: datetime=None, status_code: EntityStatusCode=None, tags: Dict=None):
        """AffectedEntity - a model defined in OpenAPI

        :param entity_arn: The entity_arn of this AffectedEntity.
        :param event_arn: The event_arn of this AffectedEntity.
        :param entity_value: The entity_value of this AffectedEntity.
        :param entity_url: The entity_url of this AffectedEntity.
        :param aws_account_id: The aws_account_id of this AffectedEntity.
        :param last_updated_time: The last_updated_time of this AffectedEntity.
        :param status_code: The status_code of this AffectedEntity.
        :param tags: The tags of this AffectedEntity.
        """
        self.openapi_types = {
            'entity_arn': str,
            'event_arn': str,
            'entity_value': str,
            'entity_url': str,
            'aws_account_id': str,
            'last_updated_time': datetime,
            'status_code': EntityStatusCode,
            'tags': Dict
        }

        self.attribute_map = {
            'entity_arn': 'entityArn',
            'event_arn': 'eventArn',
            'entity_value': 'entityValue',
            'entity_url': 'entityUrl',
            'aws_account_id': 'awsAccountId',
            'last_updated_time': 'lastUpdatedTime',
            'status_code': 'statusCode',
            'tags': 'tags'
        }

        self._entity_arn = entity_arn
        self._event_arn = event_arn
        self._entity_value = entity_value
        self._entity_url = entity_url
        self._aws_account_id = aws_account_id
        self._last_updated_time = last_updated_time
        self._status_code = status_code
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AffectedEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AffectedEntity of this AffectedEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entity_arn(self):
        """Gets the entity_arn of this AffectedEntity.


        :return: The entity_arn of this AffectedEntity.
        :rtype: str
        """
        return self._entity_arn

    @entity_arn.setter
    def entity_arn(self, entity_arn):
        """Sets the entity_arn of this AffectedEntity.


        :param entity_arn: The entity_arn of this AffectedEntity.
        :type entity_arn: str
        """

        self._entity_arn = entity_arn

    @property
    def event_arn(self):
        """Gets the event_arn of this AffectedEntity.


        :return: The event_arn of this AffectedEntity.
        :rtype: str
        """
        return self._event_arn

    @event_arn.setter
    def event_arn(self, event_arn):
        """Sets the event_arn of this AffectedEntity.


        :param event_arn: The event_arn of this AffectedEntity.
        :type event_arn: str
        """

        self._event_arn = event_arn

    @property
    def entity_value(self):
        """Gets the entity_value of this AffectedEntity.


        :return: The entity_value of this AffectedEntity.
        :rtype: str
        """
        return self._entity_value

    @entity_value.setter
    def entity_value(self, entity_value):
        """Sets the entity_value of this AffectedEntity.


        :param entity_value: The entity_value of this AffectedEntity.
        :type entity_value: str
        """

        self._entity_value = entity_value

    @property
    def entity_url(self):
        """Gets the entity_url of this AffectedEntity.


        :return: The entity_url of this AffectedEntity.
        :rtype: str
        """
        return self._entity_url

    @entity_url.setter
    def entity_url(self, entity_url):
        """Sets the entity_url of this AffectedEntity.


        :param entity_url: The entity_url of this AffectedEntity.
        :type entity_url: str
        """

        self._entity_url = entity_url

    @property
    def aws_account_id(self):
        """Gets the aws_account_id of this AffectedEntity.


        :return: The aws_account_id of this AffectedEntity.
        :rtype: str
        """
        return self._aws_account_id

    @aws_account_id.setter
    def aws_account_id(self, aws_account_id):
        """Sets the aws_account_id of this AffectedEntity.


        :param aws_account_id: The aws_account_id of this AffectedEntity.
        :type aws_account_id: str
        """

        self._aws_account_id = aws_account_id

    @property
    def last_updated_time(self):
        """Gets the last_updated_time of this AffectedEntity.


        :return: The last_updated_time of this AffectedEntity.
        :rtype: datetime
        """
        return self._last_updated_time

    @last_updated_time.setter
    def last_updated_time(self, last_updated_time):
        """Sets the last_updated_time of this AffectedEntity.


        :param last_updated_time: The last_updated_time of this AffectedEntity.
        :type last_updated_time: datetime
        """

        self._last_updated_time = last_updated_time

    @property
    def status_code(self):
        """Gets the status_code of this AffectedEntity.


        :return: The status_code of this AffectedEntity.
        :rtype: EntityStatusCode
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this AffectedEntity.


        :param status_code: The status_code of this AffectedEntity.
        :type status_code: EntityStatusCode
        """

        self._status_code = status_code

    @property
    def tags(self):
        """Gets the tags of this AffectedEntity.


        :return: The tags of this AffectedEntity.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this AffectedEntity.


        :param tags: The tags of this AffectedEntity.
        :type tags: Dict
        """

        self._tags = tags
