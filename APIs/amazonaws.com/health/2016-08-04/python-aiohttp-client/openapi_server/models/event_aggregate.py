# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EventAggregate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aggregate_value: str=None, count: int=None):
        """EventAggregate - a model defined in OpenAPI

        :param aggregate_value: The aggregate_value of this EventAggregate.
        :param count: The count of this EventAggregate.
        """
        self.openapi_types = {
            'aggregate_value': str,
            'count': int
        }

        self.attribute_map = {
            'aggregate_value': 'aggregateValue',
            'count': 'count'
        }

        self._aggregate_value = aggregate_value
        self._count = count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventAggregate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventAggregate of this EventAggregate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggregate_value(self):
        """Gets the aggregate_value of this EventAggregate.


        :return: The aggregate_value of this EventAggregate.
        :rtype: str
        """
        return self._aggregate_value

    @aggregate_value.setter
    def aggregate_value(self, aggregate_value):
        """Sets the aggregate_value of this EventAggregate.


        :param aggregate_value: The aggregate_value of this EventAggregate.
        :type aggregate_value: str
        """

        self._aggregate_value = aggregate_value

    @property
    def count(self):
        """Gets the count of this EventAggregate.


        :return: The count of this EventAggregate.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this EventAggregate.


        :param count: The count of this EventAggregate.
        :type count: int
        """

        self._count = count
