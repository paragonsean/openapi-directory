/*
 * AWS Health APIs and Notifications
 * <fullname>Health</fullname> <p>The Health API provides access to the Health information that appears in the <a href=\"https://health.aws.amazon.com/health/home\">Health Dashboard</a>. You can use the API operations to get information about events that might affect your Amazon Web Services and resources.</p> <p>You must have a Business, Enterprise On-Ramp, or Enterprise Support plan from <a href=\"http://aws.amazon.com/premiumsupport/\">Amazon Web Services Support</a> to use the Health API. If you call the Health API from an Amazon Web Services account that doesn't have a Business, Enterprise On-Ramp, or Enterprise Support plan, you receive a <code>SubscriptionRequiredException</code> error.</p> <p>For API access, you need an access key ID and a secret access key. Use temporary credentials instead of long-term access keys when possible. Temporary credentials include an access key ID, a secret access key, and a security token that indicates when the credentials expire. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-access-keys-best-practices.html\">Best practices for managing Amazon Web Services access keys</a> in the <i>Amazon Web Services General Reference</i>.</p> <p>You can use the Health endpoint health.us-east-1.amazonaws.com (HTTPS) to call the Health API operations. Health supports a multi-Region application architecture and has two regional endpoints in an active-passive configuration. You can use the high availability endpoint example to determine which Amazon Web Services Region is active, so that you can get the latest information from the API. For more information, see <a href=\"https://docs.aws.amazon.com/health/latest/ug/health-api.html\">Accessing the Health API</a> in the <i>Health User Guide</i>.</p> <p>For authentication of requests, Health uses the <a href=\"https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\">Signature Version 4 Signing Process</a>.</p> <p>If your Amazon Web Services account is part of Organizations, you can use the Health organizational view feature. This feature provides a centralized view of Health events across all accounts in your organization. You can aggregate Health events in real time to identify accounts in your organization that are affected by an operational event or get notified of security vulnerabilities. Use the organizational view API operations to enable this feature and return event information. For more information, see <a href=\"https://docs.aws.amazon.com/health/latest/ug/aggregate-events.html\">Aggregating Health events</a> in the <i>Health User Guide</i>.</p> <note> <p>When you use the Health API operations to return Health events, see the following recommendations:</p> <ul> <li> <p>Use the <a href=\"https://docs.aws.amazon.com/health/latest/APIReference/API_Event.html#AWSHealth-Type-Event-eventScopeCode\">eventScopeCode</a> parameter to specify whether to return Health events that are public or account-specific.</p> </li> <li> <p>Use pagination to view all events from the response. For example, if you call the <code>DescribeEventsForOrganization</code> operation to get all events in your organization, you might receive several page results. Specify the <code>nextToken</code> in the next request to return more results.</p> </li> </ul> </note>
 *
 * The version of the OpenAPI document: 2016-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.EventScopeCode;
import org.openapitools.client.model.EventStatusCode;
import org.openapitools.client.model.EventTypeCategory;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Summary information about an event, returned by the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/health/latest/APIReference/API_DescribeEventsForOrganization.html\&quot;&gt;DescribeEventsForOrganization&lt;/a&gt; operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:54.945838-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OrganizationEvent {
  public static final String SERIALIZED_NAME_ARN = "arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_SERVICE = "service";
  @SerializedName(SERIALIZED_NAME_SERVICE)
  private String service;

  public static final String SERIALIZED_NAME_EVENT_TYPE_CODE = "eventTypeCode";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE_CODE)
  private String eventTypeCode;

  public static final String SERIALIZED_NAME_EVENT_TYPE_CATEGORY = "eventTypeCategory";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE_CATEGORY)
  private EventTypeCategory eventTypeCategory;

  public static final String SERIALIZED_NAME_EVENT_SCOPE_CODE = "eventScopeCode";
  @SerializedName(SERIALIZED_NAME_EVENT_SCOPE_CODE)
  private EventScopeCode eventScopeCode;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_LAST_UPDATED_TIME = "lastUpdatedTime";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_TIME)
  private OffsetDateTime lastUpdatedTime;

  public static final String SERIALIZED_NAME_STATUS_CODE = "statusCode";
  @SerializedName(SERIALIZED_NAME_STATUS_CODE)
  private EventStatusCode statusCode;

  public OrganizationEvent() {
  }

  public OrganizationEvent arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public OrganizationEvent service(String service) {
    this.service = service;
    return this;
  }

  /**
   * Get service
   * @return service
   */
  @javax.annotation.Nullable
  public String getService() {
    return service;
  }

  public void setService(String service) {
    this.service = service;
  }


  public OrganizationEvent eventTypeCode(String eventTypeCode) {
    this.eventTypeCode = eventTypeCode;
    return this;
  }

  /**
   * Get eventTypeCode
   * @return eventTypeCode
   */
  @javax.annotation.Nullable
  public String getEventTypeCode() {
    return eventTypeCode;
  }

  public void setEventTypeCode(String eventTypeCode) {
    this.eventTypeCode = eventTypeCode;
  }


  public OrganizationEvent eventTypeCategory(EventTypeCategory eventTypeCategory) {
    this.eventTypeCategory = eventTypeCategory;
    return this;
  }

  /**
   * Get eventTypeCategory
   * @return eventTypeCategory
   */
  @javax.annotation.Nullable
  public EventTypeCategory getEventTypeCategory() {
    return eventTypeCategory;
  }

  public void setEventTypeCategory(EventTypeCategory eventTypeCategory) {
    this.eventTypeCategory = eventTypeCategory;
  }


  public OrganizationEvent eventScopeCode(EventScopeCode eventScopeCode) {
    this.eventScopeCode = eventScopeCode;
    return this;
  }

  /**
   * Get eventScopeCode
   * @return eventScopeCode
   */
  @javax.annotation.Nullable
  public EventScopeCode getEventScopeCode() {
    return eventScopeCode;
  }

  public void setEventScopeCode(EventScopeCode eventScopeCode) {
    this.eventScopeCode = eventScopeCode;
  }


  public OrganizationEvent region(String region) {
    this.region = region;
    return this;
  }

  /**
   * Get region
   * @return region
   */
  @javax.annotation.Nullable
  public String getRegion() {
    return region;
  }

  public void setRegion(String region) {
    this.region = region;
  }


  public OrganizationEvent startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Get startTime
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public OrganizationEvent endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * Get endTime
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public OrganizationEvent lastUpdatedTime(OffsetDateTime lastUpdatedTime) {
    this.lastUpdatedTime = lastUpdatedTime;
    return this;
  }

  /**
   * Get lastUpdatedTime
   * @return lastUpdatedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdatedTime() {
    return lastUpdatedTime;
  }

  public void setLastUpdatedTime(OffsetDateTime lastUpdatedTime) {
    this.lastUpdatedTime = lastUpdatedTime;
  }


  public OrganizationEvent statusCode(EventStatusCode statusCode) {
    this.statusCode = statusCode;
    return this;
  }

  /**
   * Get statusCode
   * @return statusCode
   */
  @javax.annotation.Nullable
  public EventStatusCode getStatusCode() {
    return statusCode;
  }

  public void setStatusCode(EventStatusCode statusCode) {
    this.statusCode = statusCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrganizationEvent organizationEvent = (OrganizationEvent) o;
    return Objects.equals(this.arn, organizationEvent.arn) &&
        Objects.equals(this.service, organizationEvent.service) &&
        Objects.equals(this.eventTypeCode, organizationEvent.eventTypeCode) &&
        Objects.equals(this.eventTypeCategory, organizationEvent.eventTypeCategory) &&
        Objects.equals(this.eventScopeCode, organizationEvent.eventScopeCode) &&
        Objects.equals(this.region, organizationEvent.region) &&
        Objects.equals(this.startTime, organizationEvent.startTime) &&
        Objects.equals(this.endTime, organizationEvent.endTime) &&
        Objects.equals(this.lastUpdatedTime, organizationEvent.lastUpdatedTime) &&
        Objects.equals(this.statusCode, organizationEvent.statusCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arn, service, eventTypeCode, eventTypeCategory, eventScopeCode, region, startTime, endTime, lastUpdatedTime, statusCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrganizationEvent {\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    service: ").append(toIndentedString(service)).append("\n");
    sb.append("    eventTypeCode: ").append(toIndentedString(eventTypeCode)).append("\n");
    sb.append("    eventTypeCategory: ").append(toIndentedString(eventTypeCategory)).append("\n");
    sb.append("    eventScopeCode: ").append(toIndentedString(eventScopeCode)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    lastUpdatedTime: ").append(toIndentedString(lastUpdatedTime)).append("\n");
    sb.append("    statusCode: ").append(toIndentedString(statusCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arn");
    openapiFields.add("service");
    openapiFields.add("eventTypeCode");
    openapiFields.add("eventTypeCategory");
    openapiFields.add("eventScopeCode");
    openapiFields.add("region");
    openapiFields.add("startTime");
    openapiFields.add("endTime");
    openapiFields.add("lastUpdatedTime");
    openapiFields.add("statusCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrganizationEvent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrganizationEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrganizationEvent is not found in the empty JSON string", OrganizationEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrganizationEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrganizationEvent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `arn`
      if (jsonObj.get("arn") != null && !jsonObj.get("arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("arn"));
      }
      // validate the optional field `service`
      if (jsonObj.get("service") != null && !jsonObj.get("service").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("service"));
      }
      // validate the optional field `eventTypeCode`
      if (jsonObj.get("eventTypeCode") != null && !jsonObj.get("eventTypeCode").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("eventTypeCode"));
      }
      // validate the optional field `eventTypeCategory`
      if (jsonObj.get("eventTypeCategory") != null && !jsonObj.get("eventTypeCategory").isJsonNull()) {
        EventTypeCategory.validateJsonElement(jsonObj.get("eventTypeCategory"));
      }
      // validate the optional field `eventScopeCode`
      if (jsonObj.get("eventScopeCode") != null && !jsonObj.get("eventScopeCode").isJsonNull()) {
        EventScopeCode.validateJsonElement(jsonObj.get("eventScopeCode"));
      }
      // validate the optional field `region`
      if (jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("region"));
      }
      // validate the optional field `startTime`
      if (jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("startTime"));
      }
      // validate the optional field `endTime`
      if (jsonObj.get("endTime") != null && !jsonObj.get("endTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("endTime"));
      }
      // validate the optional field `lastUpdatedTime`
      if (jsonObj.get("lastUpdatedTime") != null && !jsonObj.get("lastUpdatedTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("lastUpdatedTime"));
      }
      // validate the optional field `statusCode`
      if (jsonObj.get("statusCode") != null && !jsonObj.get("statusCode").isJsonNull()) {
        EventStatusCode.validateJsonElement(jsonObj.get("statusCode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrganizationEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrganizationEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrganizationEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrganizationEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<OrganizationEvent>() {
           @Override
           public void write(JsonWriter out, OrganizationEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrganizationEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrganizationEvent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrganizationEvent
   * @throws IOException if the JSON string is invalid with respect to OrganizationEvent
   */
  public static OrganizationEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrganizationEvent.class);
  }

  /**
   * Convert an instance of OrganizationEvent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

