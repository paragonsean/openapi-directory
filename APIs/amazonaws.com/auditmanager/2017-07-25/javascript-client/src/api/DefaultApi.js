/**
 * AWS Audit Manager
 * <p>Welcome to the Audit Manager API reference. This guide is for developers who need detailed information about the Audit Manager API operations, data types, and errors. </p> <p>Audit Manager is a service that provides automated evidence collection so that you can continually audit your Amazon Web Services usage. You can use it to assess the effectiveness of your controls, manage risk, and simplify compliance.</p> <p>Audit Manager provides prebuilt frameworks that structure and automate assessments for a given compliance standard. Frameworks include a prebuilt collection of controls with descriptions and testing procedures. These controls are grouped according to the requirements of the specified compliance standard or regulation. You can also customize frameworks and controls to support internal audits with specific requirements. </p> <p>Use the following links to get started with the Audit Manager API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Audit Manager API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Audit Manager data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Audit Manager, we recommend that you review the <a href=\"https://docs.aws.amazon.com/audit-manager/latest/userguide/what-is.html\"> Audit Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AssociateAssessmentReportEvidenceFolderRequest from '../model/AssociateAssessmentReportEvidenceFolderRequest';
import BatchAssociateAssessmentReportEvidenceRequest from '../model/BatchAssociateAssessmentReportEvidenceRequest';
import BatchAssociateAssessmentReportEvidenceResponse from '../model/BatchAssociateAssessmentReportEvidenceResponse';
import BatchCreateDelegationByAssessmentRequest from '../model/BatchCreateDelegationByAssessmentRequest';
import BatchCreateDelegationByAssessmentResponse from '../model/BatchCreateDelegationByAssessmentResponse';
import BatchDeleteDelegationByAssessmentRequest from '../model/BatchDeleteDelegationByAssessmentRequest';
import BatchDeleteDelegationByAssessmentResponse from '../model/BatchDeleteDelegationByAssessmentResponse';
import BatchDisassociateAssessmentReportEvidenceResponse from '../model/BatchDisassociateAssessmentReportEvidenceResponse';
import BatchImportEvidenceToAssessmentControlRequest from '../model/BatchImportEvidenceToAssessmentControlRequest';
import BatchImportEvidenceToAssessmentControlResponse from '../model/BatchImportEvidenceToAssessmentControlResponse';
import CreateAssessmentFrameworkRequest from '../model/CreateAssessmentFrameworkRequest';
import CreateAssessmentFrameworkResponse from '../model/CreateAssessmentFrameworkResponse';
import CreateAssessmentReportRequest from '../model/CreateAssessmentReportRequest';
import CreateAssessmentReportResponse from '../model/CreateAssessmentReportResponse';
import CreateAssessmentRequest from '../model/CreateAssessmentRequest';
import CreateAssessmentResponse from '../model/CreateAssessmentResponse';
import CreateControlRequest from '../model/CreateControlRequest';
import CreateControlResponse from '../model/CreateControlResponse';
import DeregisterAccountResponse from '../model/DeregisterAccountResponse';
import DeregisterOrganizationAdminAccountRequest from '../model/DeregisterOrganizationAdminAccountRequest';
import DisassociateAssessmentReportEvidenceFolderRequest from '../model/DisassociateAssessmentReportEvidenceFolderRequest';
import GetAccountStatusResponse from '../model/GetAccountStatusResponse';
import GetAssessmentFrameworkResponse from '../model/GetAssessmentFrameworkResponse';
import GetAssessmentReportUrlResponse from '../model/GetAssessmentReportUrlResponse';
import GetAssessmentResponse from '../model/GetAssessmentResponse';
import GetChangeLogsResponse from '../model/GetChangeLogsResponse';
import GetControlResponse from '../model/GetControlResponse';
import GetDelegationsResponse from '../model/GetDelegationsResponse';
import GetEvidenceByEvidenceFolderResponse from '../model/GetEvidenceByEvidenceFolderResponse';
import GetEvidenceFileUploadUrlResponse from '../model/GetEvidenceFileUploadUrlResponse';
import GetEvidenceFolderResponse from '../model/GetEvidenceFolderResponse';
import GetEvidenceFoldersByAssessmentControlResponse from '../model/GetEvidenceFoldersByAssessmentControlResponse';
import GetEvidenceFoldersByAssessmentResponse from '../model/GetEvidenceFoldersByAssessmentResponse';
import GetEvidenceResponse from '../model/GetEvidenceResponse';
import GetInsightsByAssessmentResponse from '../model/GetInsightsByAssessmentResponse';
import GetInsightsResponse from '../model/GetInsightsResponse';
import GetOrganizationAdminAccountResponse from '../model/GetOrganizationAdminAccountResponse';
import GetServicesInScopeResponse from '../model/GetServicesInScopeResponse';
import GetSettingsResponse from '../model/GetSettingsResponse';
import ListAssessmentControlInsightsByControlDomainResponse from '../model/ListAssessmentControlInsightsByControlDomainResponse';
import ListAssessmentFrameworkShareRequestsResponse from '../model/ListAssessmentFrameworkShareRequestsResponse';
import ListAssessmentFrameworksResponse from '../model/ListAssessmentFrameworksResponse';
import ListAssessmentReportsResponse from '../model/ListAssessmentReportsResponse';
import ListAssessmentsResponse from '../model/ListAssessmentsResponse';
import ListControlDomainInsightsByAssessmentResponse from '../model/ListControlDomainInsightsByAssessmentResponse';
import ListControlDomainInsightsResponse from '../model/ListControlDomainInsightsResponse';
import ListControlInsightsByControlDomainResponse from '../model/ListControlInsightsByControlDomainResponse';
import ListControlsResponse from '../model/ListControlsResponse';
import ListKeywordsForDataSourceResponse from '../model/ListKeywordsForDataSourceResponse';
import ListNotificationsResponse from '../model/ListNotificationsResponse';
import ListTagsForResourceResponse from '../model/ListTagsForResourceResponse';
import RegisterAccountRequest from '../model/RegisterAccountRequest';
import RegisterAccountResponse from '../model/RegisterAccountResponse';
import RegisterOrganizationAdminAccountRequest from '../model/RegisterOrganizationAdminAccountRequest';
import RegisterOrganizationAdminAccountResponse from '../model/RegisterOrganizationAdminAccountResponse';
import StartAssessmentFrameworkShareRequest from '../model/StartAssessmentFrameworkShareRequest';
import StartAssessmentFrameworkShareResponse from '../model/StartAssessmentFrameworkShareResponse';
import TagResourceRequest from '../model/TagResourceRequest';
import UpdateAssessmentControlRequest from '../model/UpdateAssessmentControlRequest';
import UpdateAssessmentControlResponse from '../model/UpdateAssessmentControlResponse';
import UpdateAssessmentControlSetStatusRequest from '../model/UpdateAssessmentControlSetStatusRequest';
import UpdateAssessmentControlSetStatusResponse from '../model/UpdateAssessmentControlSetStatusResponse';
import UpdateAssessmentFrameworkRequest from '../model/UpdateAssessmentFrameworkRequest';
import UpdateAssessmentFrameworkResponse from '../model/UpdateAssessmentFrameworkResponse';
import UpdateAssessmentFrameworkShareRequest from '../model/UpdateAssessmentFrameworkShareRequest';
import UpdateAssessmentFrameworkShareResponse from '../model/UpdateAssessmentFrameworkShareResponse';
import UpdateAssessmentRequest from '../model/UpdateAssessmentRequest';
import UpdateAssessmentResponse from '../model/UpdateAssessmentResponse';
import UpdateAssessmentStatusRequest from '../model/UpdateAssessmentStatusRequest';
import UpdateAssessmentStatusResponse from '../model/UpdateAssessmentStatusResponse';
import UpdateControlRequest from '../model/UpdateControlRequest';
import UpdateControlResponse from '../model/UpdateControlResponse';
import UpdateSettingsRequest from '../model/UpdateSettingsRequest';
import UpdateSettingsResponse from '../model/UpdateSettingsResponse';
import ValidateAssessmentReportIntegrityRequest from '../model/ValidateAssessmentReportIntegrityRequest';
import ValidateAssessmentReportIntegrityResponse from '../model/ValidateAssessmentReportIntegrityResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 2017-07-25
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the associateAssessmentReportEvidenceFolder operation.
     * @callback module:api/DefaultApi~associateAssessmentReportEvidenceFolderCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Associates an evidence folder to an assessment report in an Audit Manager assessment. 
     * @param {String} assessmentId  The identifier for the assessment. 
     * @param {module:model/AssociateAssessmentReportEvidenceFolderRequest} associateAssessmentReportEvidenceFolderRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~associateAssessmentReportEvidenceFolderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    associateAssessmentReportEvidenceFolder(assessmentId, associateAssessmentReportEvidenceFolderRequest, opts, callback) {
      opts = opts || {};
      let postBody = associateAssessmentReportEvidenceFolderRequest;
      // verify the required parameter 'assessmentId' is set
      if (assessmentId === undefined || assessmentId === null) {
        throw new Error("Missing the required parameter 'assessmentId' when calling associateAssessmentReportEvidenceFolder");
      }
      // verify the required parameter 'associateAssessmentReportEvidenceFolderRequest' is set
      if (associateAssessmentReportEvidenceFolderRequest === undefined || associateAssessmentReportEvidenceFolderRequest === null) {
        throw new Error("Missing the required parameter 'associateAssessmentReportEvidenceFolderRequest' when calling associateAssessmentReportEvidenceFolder");
      }

      let pathParams = {
        'assessmentId': assessmentId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/assessments/{assessmentId}/associateToAssessmentReport', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchAssociateAssessmentReportEvidence operation.
     * @callback module:api/DefaultApi~batchAssociateAssessmentReportEvidenceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchAssociateAssessmentReportEvidenceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Associates a list of evidence to an assessment report in an Audit Manager assessment. 
     * @param {String} assessmentId  The identifier for the assessment. 
     * @param {module:model/BatchAssociateAssessmentReportEvidenceRequest} batchAssociateAssessmentReportEvidenceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchAssociateAssessmentReportEvidenceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchAssociateAssessmentReportEvidenceResponse}
     */
    batchAssociateAssessmentReportEvidence(assessmentId, batchAssociateAssessmentReportEvidenceRequest, opts, callback) {
      opts = opts || {};
      let postBody = batchAssociateAssessmentReportEvidenceRequest;
      // verify the required parameter 'assessmentId' is set
      if (assessmentId === undefined || assessmentId === null) {
        throw new Error("Missing the required parameter 'assessmentId' when calling batchAssociateAssessmentReportEvidence");
      }
      // verify the required parameter 'batchAssociateAssessmentReportEvidenceRequest' is set
      if (batchAssociateAssessmentReportEvidenceRequest === undefined || batchAssociateAssessmentReportEvidenceRequest === null) {
        throw new Error("Missing the required parameter 'batchAssociateAssessmentReportEvidenceRequest' when calling batchAssociateAssessmentReportEvidence");
      }

      let pathParams = {
        'assessmentId': assessmentId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchAssociateAssessmentReportEvidenceResponse;
      return this.apiClient.callApi(
        '/assessments/{assessmentId}/batchAssociateToAssessmentReport', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchCreateDelegationByAssessment operation.
     * @callback module:api/DefaultApi~batchCreateDelegationByAssessmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchCreateDelegationByAssessmentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Creates a batch of delegations for an assessment in Audit Manager. 
     * @param {String} assessmentId  The identifier for the assessment. 
     * @param {module:model/BatchCreateDelegationByAssessmentRequest} batchCreateDelegationByAssessmentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchCreateDelegationByAssessmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchCreateDelegationByAssessmentResponse}
     */
    batchCreateDelegationByAssessment(assessmentId, batchCreateDelegationByAssessmentRequest, opts, callback) {
      opts = opts || {};
      let postBody = batchCreateDelegationByAssessmentRequest;
      // verify the required parameter 'assessmentId' is set
      if (assessmentId === undefined || assessmentId === null) {
        throw new Error("Missing the required parameter 'assessmentId' when calling batchCreateDelegationByAssessment");
      }
      // verify the required parameter 'batchCreateDelegationByAssessmentRequest' is set
      if (batchCreateDelegationByAssessmentRequest === undefined || batchCreateDelegationByAssessmentRequest === null) {
        throw new Error("Missing the required parameter 'batchCreateDelegationByAssessmentRequest' when calling batchCreateDelegationByAssessment");
      }

      let pathParams = {
        'assessmentId': assessmentId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchCreateDelegationByAssessmentResponse;
      return this.apiClient.callApi(
        '/assessments/{assessmentId}/delegations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchDeleteDelegationByAssessment operation.
     * @callback module:api/DefaultApi~batchDeleteDelegationByAssessmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchDeleteDelegationByAssessmentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Deletes a batch of delegations for an assessment in Audit Manager. 
     * @param {String} assessmentId  The identifier for the assessment. 
     * @param {module:model/BatchDeleteDelegationByAssessmentRequest} batchDeleteDelegationByAssessmentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchDeleteDelegationByAssessmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchDeleteDelegationByAssessmentResponse}
     */
    batchDeleteDelegationByAssessment(assessmentId, batchDeleteDelegationByAssessmentRequest, opts, callback) {
      opts = opts || {};
      let postBody = batchDeleteDelegationByAssessmentRequest;
      // verify the required parameter 'assessmentId' is set
      if (assessmentId === undefined || assessmentId === null) {
        throw new Error("Missing the required parameter 'assessmentId' when calling batchDeleteDelegationByAssessment");
      }
      // verify the required parameter 'batchDeleteDelegationByAssessmentRequest' is set
      if (batchDeleteDelegationByAssessmentRequest === undefined || batchDeleteDelegationByAssessmentRequest === null) {
        throw new Error("Missing the required parameter 'batchDeleteDelegationByAssessmentRequest' when calling batchDeleteDelegationByAssessment");
      }

      let pathParams = {
        'assessmentId': assessmentId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchDeleteDelegationByAssessmentResponse;
      return this.apiClient.callApi(
        '/assessments/{assessmentId}/delegations', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchDisassociateAssessmentReportEvidence operation.
     * @callback module:api/DefaultApi~batchDisassociateAssessmentReportEvidenceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchDisassociateAssessmentReportEvidenceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Disassociates a list of evidence from an assessment report in Audit Manager. 
     * @param {String} assessmentId  The identifier for the assessment. 
     * @param {module:model/BatchAssociateAssessmentReportEvidenceRequest} batchAssociateAssessmentReportEvidenceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchDisassociateAssessmentReportEvidenceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchDisassociateAssessmentReportEvidenceResponse}
     */
    batchDisassociateAssessmentReportEvidence(assessmentId, batchAssociateAssessmentReportEvidenceRequest, opts, callback) {
      opts = opts || {};
      let postBody = batchAssociateAssessmentReportEvidenceRequest;
      // verify the required parameter 'assessmentId' is set
      if (assessmentId === undefined || assessmentId === null) {
        throw new Error("Missing the required parameter 'assessmentId' when calling batchDisassociateAssessmentReportEvidence");
      }
      // verify the required parameter 'batchAssociateAssessmentReportEvidenceRequest' is set
      if (batchAssociateAssessmentReportEvidenceRequest === undefined || batchAssociateAssessmentReportEvidenceRequest === null) {
        throw new Error("Missing the required parameter 'batchAssociateAssessmentReportEvidenceRequest' when calling batchDisassociateAssessmentReportEvidence");
      }

      let pathParams = {
        'assessmentId': assessmentId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchDisassociateAssessmentReportEvidenceResponse;
      return this.apiClient.callApi(
        '/assessments/{assessmentId}/batchDisassociateFromAssessmentReport', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchImportEvidenceToAssessmentControl operation.
     * @callback module:api/DefaultApi~batchImportEvidenceToAssessmentControlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchImportEvidenceToAssessmentControlResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Adds one or more pieces of evidence to a control in an Audit Manager assessment. </p> <p>You can import manual evidence from any S3 bucket by specifying the S3 URI of the object. You can also upload a file from your browser, or enter plain text in response to a risk assessment question. </p> <p>The following restrictions apply to this action:</p> <ul> <li> <p> <code>manualEvidence</code> can be only one of the following: <code>evidenceFileName</code>, <code>s3ResourcePath</code>, or <code>textResponse</code> </p> </li> <li> <p>Maximum size of an individual evidence file: 100 MB</p> </li> <li> <p>Number of daily manual evidence uploads per control: 100</p> </li> <li> <p>Supported file formats: See <a href=\"https://docs.aws.amazon.com/audit-manager/latest/userguide/upload-evidence.html#supported-manual-evidence-files\">Supported file types for manual evidence</a> in the <i>Audit Manager User Guide</i> </p> </li> </ul> <p>For more information about Audit Manager service restrictions, see <a href=\"https://docs.aws.amazon.com/audit-manager/latest/userguide/service-quotas.html\">Quotas and restrictions for Audit Manager</a>.</p>
     * @param {String} assessmentId  The identifier for the assessment. 
     * @param {String} controlSetId  The identifier for the control set. 
     * @param {String} controlId  The identifier for the control. 
     * @param {module:model/BatchImportEvidenceToAssessmentControlRequest} batchImportEvidenceToAssessmentControlRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchImportEvidenceToAssessmentControlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchImportEvidenceToAssessmentControlResponse}
     */
    batchImportEvidenceToAssessmentControl(assessmentId, controlSetId, controlId, batchImportEvidenceToAssessmentControlRequest, opts, callback) {
      opts = opts || {};
      let postBody = batchImportEvidenceToAssessmentControlRequest;
      // verify the required parameter 'assessmentId' is set
      if (assessmentId === undefined || assessmentId === null) {
        throw new Error("Missing the required parameter 'assessmentId' when calling batchImportEvidenceToAssessmentControl");
      }
      // verify the required parameter 'controlSetId' is set
      if (controlSetId === undefined || controlSetId === null) {
        throw new Error("Missing the required parameter 'controlSetId' when calling batchImportEvidenceToAssessmentControl");
      }
      // verify the required parameter 'controlId' is set
      if (controlId === undefined || controlId === null) {
        throw new Error("Missing the required parameter 'controlId' when calling batchImportEvidenceToAssessmentControl");
      }
      // verify the required parameter 'batchImportEvidenceToAssessmentControlRequest' is set
      if (batchImportEvidenceToAssessmentControlRequest === undefined || batchImportEvidenceToAssessmentControlRequest === null) {
        throw new Error("Missing the required parameter 'batchImportEvidenceToAssessmentControlRequest' when calling batchImportEvidenceToAssessmentControl");
      }

      let pathParams = {
        'assessmentId': assessmentId,
        'controlSetId': controlSetId,
        'controlId': controlId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchImportEvidenceToAssessmentControlResponse;
      return this.apiClient.callApi(
        '/assessments/{assessmentId}/controlSets/{controlSetId}/controls/{controlId}/evidence', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAssessment operation.
     * @callback module:api/DefaultApi~createAssessmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAssessmentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Creates an assessment in Audit Manager. 
     * @param {module:model/CreateAssessmentRequest} createAssessmentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createAssessmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAssessmentResponse}
     */
    createAssessment(createAssessmentRequest, opts, callback) {
      opts = opts || {};
      let postBody = createAssessmentRequest;
      // verify the required parameter 'createAssessmentRequest' is set
      if (createAssessmentRequest === undefined || createAssessmentRequest === null) {
        throw new Error("Missing the required parameter 'createAssessmentRequest' when calling createAssessment");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAssessmentResponse;
      return this.apiClient.callApi(
        '/assessments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAssessmentFramework operation.
     * @callback module:api/DefaultApi~createAssessmentFrameworkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAssessmentFrameworkResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Creates a custom framework in Audit Manager. 
     * @param {module:model/CreateAssessmentFrameworkRequest} createAssessmentFrameworkRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createAssessmentFrameworkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAssessmentFrameworkResponse}
     */
    createAssessmentFramework(createAssessmentFrameworkRequest, opts, callback) {
      opts = opts || {};
      let postBody = createAssessmentFrameworkRequest;
      // verify the required parameter 'createAssessmentFrameworkRequest' is set
      if (createAssessmentFrameworkRequest === undefined || createAssessmentFrameworkRequest === null) {
        throw new Error("Missing the required parameter 'createAssessmentFrameworkRequest' when calling createAssessmentFramework");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAssessmentFrameworkResponse;
      return this.apiClient.callApi(
        '/assessmentFrameworks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAssessmentReport operation.
     * @callback module:api/DefaultApi~createAssessmentReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAssessmentReportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Creates an assessment report for the specified assessment. 
     * @param {String} assessmentId  The identifier for the assessment. 
     * @param {module:model/CreateAssessmentReportRequest} createAssessmentReportRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createAssessmentReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAssessmentReportResponse}
     */
    createAssessmentReport(assessmentId, createAssessmentReportRequest, opts, callback) {
      opts = opts || {};
      let postBody = createAssessmentReportRequest;
      // verify the required parameter 'assessmentId' is set
      if (assessmentId === undefined || assessmentId === null) {
        throw new Error("Missing the required parameter 'assessmentId' when calling createAssessmentReport");
      }
      // verify the required parameter 'createAssessmentReportRequest' is set
      if (createAssessmentReportRequest === undefined || createAssessmentReportRequest === null) {
        throw new Error("Missing the required parameter 'createAssessmentReportRequest' when calling createAssessmentReport");
      }

      let pathParams = {
        'assessmentId': assessmentId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAssessmentReportResponse;
      return this.apiClient.callApi(
        '/assessments/{assessmentId}/reports', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createControl operation.
     * @callback module:api/DefaultApi~createControlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateControlResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Creates a new custom control in Audit Manager. 
     * @param {module:model/CreateControlRequest} createControlRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createControlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateControlResponse}
     */
    createControl(createControlRequest, opts, callback) {
      opts = opts || {};
      let postBody = createControlRequest;
      // verify the required parameter 'createControlRequest' is set
      if (createControlRequest === undefined || createControlRequest === null) {
        throw new Error("Missing the required parameter 'createControlRequest' when calling createControl");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateControlResponse;
      return this.apiClient.callApi(
        '/controls', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAssessment operation.
     * @callback module:api/DefaultApi~deleteAssessmentCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Deletes an assessment in Audit Manager. 
     * @param {String} assessmentId  The identifier for the assessment. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteAssessmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteAssessment(assessmentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'assessmentId' is set
      if (assessmentId === undefined || assessmentId === null) {
        throw new Error("Missing the required parameter 'assessmentId' when calling deleteAssessment");
      }

      let pathParams = {
        'assessmentId': assessmentId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/assessments/{assessmentId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAssessmentFramework operation.
     * @callback module:api/DefaultApi~deleteAssessmentFrameworkCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Deletes a custom framework in Audit Manager. 
     * @param {String} frameworkId  The identifier for the custom framework. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteAssessmentFrameworkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteAssessmentFramework(frameworkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'frameworkId' is set
      if (frameworkId === undefined || frameworkId === null) {
        throw new Error("Missing the required parameter 'frameworkId' when calling deleteAssessmentFramework");
      }

      let pathParams = {
        'frameworkId': frameworkId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/assessmentFrameworks/{frameworkId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAssessmentFrameworkShare operation.
     * @callback module:api/DefaultApi~deleteAssessmentFrameworkShareCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Deletes a share request for a custom framework in Audit Manager. 
     * @param {String} requestId The unique identifier for the share request to be deleted.
     * @param {module:model/String} requestType Specifies whether the share request is a sent request or a received request.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteAssessmentFrameworkShareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteAssessmentFrameworkShare(requestId, requestType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling deleteAssessmentFrameworkShare");
      }
      // verify the required parameter 'requestType' is set
      if (requestType === undefined || requestType === null) {
        throw new Error("Missing the required parameter 'requestType' when calling deleteAssessmentFrameworkShare");
      }

      let pathParams = {
        'requestId': requestId
      };
      let queryParams = {
        'requestType': requestType
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/assessmentFrameworkShareRequests/{requestId}#requestType', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAssessmentReport operation.
     * @callback module:api/DefaultApi~deleteAssessmentReportCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes an assessment report in Audit Manager. </p> <p>When you run the <code>DeleteAssessmentReport</code> operation, Audit Manager attempts to delete the following data:</p> <ol> <li> <p>The specified assessment report that’s stored in your S3 bucket</p> </li> <li> <p>The associated metadata that’s stored in Audit Manager</p> </li> </ol> <p>If Audit Manager can’t access the assessment report in your S3 bucket, the report isn’t deleted. In this event, the <code>DeleteAssessmentReport</code> operation doesn’t fail. Instead, it proceeds to delete the associated metadata only. You must then delete the assessment report from the S3 bucket yourself. </p> <p>This scenario happens when Audit Manager receives a <code>403 (Forbidden)</code> or <code>404 (Not Found)</code> error from Amazon S3. To avoid this, make sure that your S3 bucket is available, and that you configured the correct permissions for Audit Manager to delete resources in your S3 bucket. For an example permissions policy that you can use, see <a href=\"https://docs.aws.amazon.com/audit-manager/latest/userguide/security_iam_id-based-policy-examples.html#full-administrator-access-assessment-report-destination\">Assessment report destination permissions</a> in the <i>Audit Manager User Guide</i>. For information about the issues that could cause a <code>403 (Forbidden)</code> or <code>404 (Not Found</code>) error from Amazon S3, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/ErrorResponses.html#ErrorCodeList\">List of Error Codes</a> in the <i>Amazon Simple Storage Service API Reference</i>. </p>
     * @param {String} assessmentId  The unique identifier for the assessment. 
     * @param {String} assessmentReportId  The unique identifier for the assessment report. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteAssessmentReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteAssessmentReport(assessmentId, assessmentReportId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'assessmentId' is set
      if (assessmentId === undefined || assessmentId === null) {
        throw new Error("Missing the required parameter 'assessmentId' when calling deleteAssessmentReport");
      }
      // verify the required parameter 'assessmentReportId' is set
      if (assessmentReportId === undefined || assessmentReportId === null) {
        throw new Error("Missing the required parameter 'assessmentReportId' when calling deleteAssessmentReport");
      }

      let pathParams = {
        'assessmentId': assessmentId,
        'assessmentReportId': assessmentReportId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/assessments/{assessmentId}/reports/{assessmentReportId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteControl operation.
     * @callback module:api/DefaultApi~deleteControlCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p> Deletes a custom control in Audit Manager. </p> <important> <p>When you invoke this operation, the custom control is deleted from any frameworks or assessments that it’s currently part of. As a result, Audit Manager will stop collecting evidence for that custom control in all of your assessments. This includes assessments that you previously created before you deleted the custom control.</p> </important>
     * @param {String} controlId  The unique identifier for the control. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteControlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteControl(controlId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'controlId' is set
      if (controlId === undefined || controlId === null) {
        throw new Error("Missing the required parameter 'controlId' when calling deleteControl");
      }

      let pathParams = {
        'controlId': controlId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/controls/{controlId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deregisterAccount operation.
     * @callback module:api/DefaultApi~deregisterAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeregisterAccountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p> Deregisters an account in Audit Manager. </p> <note> <p>Before you deregister, you can use the <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_UpdateSettings.html\">UpdateSettings</a> API operation to set your preferred data retention policy. By default, Audit Manager retains your data. If you want to delete your data, you can use the <code>DeregistrationPolicy</code> attribute to request the deletion of your data. </p> <p>For more information about data retention, see <a href=\"https://docs.aws.amazon.com/audit-manager/latest/userguide/data-protection.html\">Data Protection</a> in the <i>Audit Manager User Guide</i>. </p> </note>
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deregisterAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeregisterAccountResponse}
     */
    deregisterAccount(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeregisterAccountResponse;
      return this.apiClient.callApi(
        '/account/deregisterAccount', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deregisterOrganizationAdminAccount operation.
     * @callback module:api/DefaultApi~deregisterOrganizationAdminAccountCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Removes the specified Amazon Web Services account as a delegated administrator for Audit Manager. </p> <p>When you remove a delegated administrator from your Audit Manager settings, you continue to have access to the evidence that you previously collected under that account. This is also the case when you deregister a delegated administrator from Organizations. However, Audit Manager stops collecting and attaching evidence to that delegated administrator account moving forward.</p> <important> <p>Keep in mind the following cleanup task if you use evidence finder:</p> <p>Before you use your management account to remove a delegated administrator, make sure that the current delegated administrator account signs in to Audit Manager and disables evidence finder first. Disabling evidence finder automatically deletes the event data store that was created in their account when they enabled evidence finder. If this task isn’t completed, the event data store remains in their account. In this case, we recommend that the original delegated administrator goes to CloudTrail Lake and manually <a href=\"https://docs.aws.amazon.com/awscloudtrail/latest/userguide/query-eds-disable-termination.html\">deletes the event data store</a>.</p> <p>This cleanup task is necessary to ensure that you don't end up with multiple event data stores. Audit Manager ignores an unused event data store after you remove or change a delegated administrator account. However, the unused event data store continues to incur storage costs from CloudTrail Lake if you don't delete it.</p> </important> <p>When you deregister a delegated administrator account for Audit Manager, the data for that account isn’t deleted. If you want to delete resource data for a delegated administrator account, you must perform that task separately before you deregister the account. Either, you can do this in the Audit Manager console. Or, you can use one of the delete API operations that are provided by Audit Manager. </p> <p>To delete your Audit Manager resource data, see the following instructions: </p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_DeleteAssessment.html\">DeleteAssessment</a> (see also: <a href=\"https://docs.aws.amazon.com/audit-manager/latest/userguide/delete-assessment.html\">Deleting an assessment</a> in the <i>Audit Manager User Guide</i>)</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_DeleteAssessmentFramework.html\">DeleteAssessmentFramework</a> (see also: <a href=\"https://docs.aws.amazon.com/audit-manager/latest/userguide/delete-custom-framework.html\">Deleting a custom framework</a> in the <i>Audit Manager User Guide</i>)</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_DeleteAssessmentFrameworkShare.html\">DeleteAssessmentFrameworkShare</a> (see also: <a href=\"https://docs.aws.amazon.com/audit-manager/latest/userguide/deleting-shared-framework-requests.html\">Deleting a share request</a> in the <i>Audit Manager User Guide</i>)</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_DeleteAssessmentReport.html\">DeleteAssessmentReport</a> (see also: <a href=\"https://docs.aws.amazon.com/audit-manager/latest/userguide/generate-assessment-report.html#delete-assessment-report-steps\">Deleting an assessment report</a> in the <i>Audit Manager User Guide</i>)</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_DeleteControl.html\">DeleteControl</a> (see also: <a href=\"https://docs.aws.amazon.com/audit-manager/latest/userguide/delete-controls.html\">Deleting a custom control</a> in the <i>Audit Manager User Guide</i>)</p> </li> </ul> <p>At this time, Audit Manager doesn't provide an option to delete evidence for a specific delegated administrator. Instead, when your management account deregisters Audit Manager, we perform a cleanup for the current delegated administrator account at the time of deregistration.</p>
     * @param {module:model/DeregisterOrganizationAdminAccountRequest} deregisterOrganizationAdminAccountRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deregisterOrganizationAdminAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deregisterOrganizationAdminAccount(deregisterOrganizationAdminAccountRequest, opts, callback) {
      opts = opts || {};
      let postBody = deregisterOrganizationAdminAccountRequest;
      // verify the required parameter 'deregisterOrganizationAdminAccountRequest' is set
      if (deregisterOrganizationAdminAccountRequest === undefined || deregisterOrganizationAdminAccountRequest === null) {
        throw new Error("Missing the required parameter 'deregisterOrganizationAdminAccountRequest' when calling deregisterOrganizationAdminAccount");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/account/deregisterOrganizationAdminAccount', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disassociateAssessmentReportEvidenceFolder operation.
     * @callback module:api/DefaultApi~disassociateAssessmentReportEvidenceFolderCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Disassociates an evidence folder from the specified assessment report in Audit Manager. 
     * @param {String} assessmentId  The unique identifier for the assessment. 
     * @param {module:model/DisassociateAssessmentReportEvidenceFolderRequest} disassociateAssessmentReportEvidenceFolderRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~disassociateAssessmentReportEvidenceFolderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    disassociateAssessmentReportEvidenceFolder(assessmentId, disassociateAssessmentReportEvidenceFolderRequest, opts, callback) {
      opts = opts || {};
      let postBody = disassociateAssessmentReportEvidenceFolderRequest;
      // verify the required parameter 'assessmentId' is set
      if (assessmentId === undefined || assessmentId === null) {
        throw new Error("Missing the required parameter 'assessmentId' when calling disassociateAssessmentReportEvidenceFolder");
      }
      // verify the required parameter 'disassociateAssessmentReportEvidenceFolderRequest' is set
      if (disassociateAssessmentReportEvidenceFolderRequest === undefined || disassociateAssessmentReportEvidenceFolderRequest === null) {
        throw new Error("Missing the required parameter 'disassociateAssessmentReportEvidenceFolderRequest' when calling disassociateAssessmentReportEvidenceFolder");
      }

      let pathParams = {
        'assessmentId': assessmentId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/assessments/{assessmentId}/disassociateFromAssessmentReport', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccountStatus operation.
     * @callback module:api/DefaultApi~getAccountStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAccountStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Gets the registration status of an account in Audit Manager. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getAccountStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAccountStatusResponse}
     */
    getAccountStatus(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAccountStatusResponse;
      return this.apiClient.callApi(
        '/account/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAssessment operation.
     * @callback module:api/DefaultApi~getAssessmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAssessmentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a specified assessment. 
     * @param {String} assessmentId The unique identifier for the assessment. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getAssessmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAssessmentResponse}
     */
    getAssessment(assessmentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'assessmentId' is set
      if (assessmentId === undefined || assessmentId === null) {
        throw new Error("Missing the required parameter 'assessmentId' when calling getAssessment");
      }

      let pathParams = {
        'assessmentId': assessmentId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAssessmentResponse;
      return this.apiClient.callApi(
        '/assessments/{assessmentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAssessmentFramework operation.
     * @callback module:api/DefaultApi~getAssessmentFrameworkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAssessmentFrameworkResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a specified framework.
     * @param {String} frameworkId  The identifier for the framework. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getAssessmentFrameworkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAssessmentFrameworkResponse}
     */
    getAssessmentFramework(frameworkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'frameworkId' is set
      if (frameworkId === undefined || frameworkId === null) {
        throw new Error("Missing the required parameter 'frameworkId' when calling getAssessmentFramework");
      }

      let pathParams = {
        'frameworkId': frameworkId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAssessmentFrameworkResponse;
      return this.apiClient.callApi(
        '/assessmentFrameworks/{frameworkId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAssessmentReportUrl operation.
     * @callback module:api/DefaultApi~getAssessmentReportUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAssessmentReportUrlResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Gets the URL of an assessment report in Audit Manager. 
     * @param {String} assessmentReportId  The unique identifier for the assessment report. 
     * @param {String} assessmentId  The unique identifier for the assessment. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getAssessmentReportUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAssessmentReportUrlResponse}
     */
    getAssessmentReportUrl(assessmentReportId, assessmentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'assessmentReportId' is set
      if (assessmentReportId === undefined || assessmentReportId === null) {
        throw new Error("Missing the required parameter 'assessmentReportId' when calling getAssessmentReportUrl");
      }
      // verify the required parameter 'assessmentId' is set
      if (assessmentId === undefined || assessmentId === null) {
        throw new Error("Missing the required parameter 'assessmentId' when calling getAssessmentReportUrl");
      }

      let pathParams = {
        'assessmentReportId': assessmentReportId,
        'assessmentId': assessmentId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAssessmentReportUrlResponse;
      return this.apiClient.callApi(
        '/assessments/{assessmentId}/reports/{assessmentReportId}/url', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChangeLogs operation.
     * @callback module:api/DefaultApi~getChangeLogsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetChangeLogsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Gets a list of changelogs from Audit Manager. 
     * @param {String} assessmentId The unique identifier for the assessment. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [controlSetId]  The unique identifier for the control set. 
     * @param {String} [controlId]  The unique identifier for the control. 
     * @param {String} [nextToken]  The pagination token that's used to fetch the next set of results. 
     * @param {Number} [maxResults] Represents the maximum number of results on a page or for an API request call. 
     * @param {module:api/DefaultApi~getChangeLogsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetChangeLogsResponse}
     */
    getChangeLogs(assessmentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'assessmentId' is set
      if (assessmentId === undefined || assessmentId === null) {
        throw new Error("Missing the required parameter 'assessmentId' when calling getChangeLogs");
      }

      let pathParams = {
        'assessmentId': assessmentId
      };
      let queryParams = {
        'controlSetId': opts['controlSetId'],
        'controlId': opts['controlId'],
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetChangeLogsResponse;
      return this.apiClient.callApi(
        '/assessments/{assessmentId}/changelogs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getControl operation.
     * @callback module:api/DefaultApi~getControlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetControlResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Gets information about a specified control.
     * @param {String} controlId  The identifier for the control. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getControlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetControlResponse}
     */
    getControl(controlId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'controlId' is set
      if (controlId === undefined || controlId === null) {
        throw new Error("Missing the required parameter 'controlId' when calling getControl");
      }

      let pathParams = {
        'controlId': controlId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetControlResponse;
      return this.apiClient.callApi(
        '/controls/{controlId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDelegations operation.
     * @callback module:api/DefaultApi~getDelegationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDelegationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Gets a list of delegations from an audit owner to a delegate. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken]  The pagination token that's used to fetch the next set of results. 
     * @param {Number} [maxResults]  Represents the maximum number of results on a page or for an API request call. 
     * @param {module:api/DefaultApi~getDelegationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDelegationsResponse}
     */
    getDelegations(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDelegationsResponse;
      return this.apiClient.callApi(
        '/delegations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEvidence operation.
     * @callback module:api/DefaultApi~getEvidenceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetEvidenceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Gets information about a specified evidence item.
     * @param {String} assessmentId  The unique identifier for the assessment. 
     * @param {String} controlSetId  The unique identifier for the control set. 
     * @param {String} evidenceFolderId  The unique identifier for the folder that the evidence is stored in. 
     * @param {String} evidenceId  The unique identifier for the evidence. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getEvidenceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetEvidenceResponse}
     */
    getEvidence(assessmentId, controlSetId, evidenceFolderId, evidenceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'assessmentId' is set
      if (assessmentId === undefined || assessmentId === null) {
        throw new Error("Missing the required parameter 'assessmentId' when calling getEvidence");
      }
      // verify the required parameter 'controlSetId' is set
      if (controlSetId === undefined || controlSetId === null) {
        throw new Error("Missing the required parameter 'controlSetId' when calling getEvidence");
      }
      // verify the required parameter 'evidenceFolderId' is set
      if (evidenceFolderId === undefined || evidenceFolderId === null) {
        throw new Error("Missing the required parameter 'evidenceFolderId' when calling getEvidence");
      }
      // verify the required parameter 'evidenceId' is set
      if (evidenceId === undefined || evidenceId === null) {
        throw new Error("Missing the required parameter 'evidenceId' when calling getEvidence");
      }

      let pathParams = {
        'assessmentId': assessmentId,
        'controlSetId': controlSetId,
        'evidenceFolderId': evidenceFolderId,
        'evidenceId': evidenceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetEvidenceResponse;
      return this.apiClient.callApi(
        '/assessments/{assessmentId}/controlSets/{controlSetId}/evidenceFolders/{evidenceFolderId}/evidence/{evidenceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEvidenceByEvidenceFolder operation.
     * @callback module:api/DefaultApi~getEvidenceByEvidenceFolderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetEvidenceByEvidenceFolderResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Gets all evidence from a specified evidence folder in Audit Manager. 
     * @param {String} assessmentId  The identifier for the assessment. 
     * @param {String} controlSetId  The identifier for the control set. 
     * @param {String} evidenceFolderId  The unique identifier for the folder that the evidence is stored in. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken]  The pagination token that's used to fetch the next set of results. 
     * @param {Number} [maxResults]  Represents the maximum number of results on a page or for an API request call. 
     * @param {module:api/DefaultApi~getEvidenceByEvidenceFolderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetEvidenceByEvidenceFolderResponse}
     */
    getEvidenceByEvidenceFolder(assessmentId, controlSetId, evidenceFolderId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'assessmentId' is set
      if (assessmentId === undefined || assessmentId === null) {
        throw new Error("Missing the required parameter 'assessmentId' when calling getEvidenceByEvidenceFolder");
      }
      // verify the required parameter 'controlSetId' is set
      if (controlSetId === undefined || controlSetId === null) {
        throw new Error("Missing the required parameter 'controlSetId' when calling getEvidenceByEvidenceFolder");
      }
      // verify the required parameter 'evidenceFolderId' is set
      if (evidenceFolderId === undefined || evidenceFolderId === null) {
        throw new Error("Missing the required parameter 'evidenceFolderId' when calling getEvidenceByEvidenceFolder");
      }

      let pathParams = {
        'assessmentId': assessmentId,
        'controlSetId': controlSetId,
        'evidenceFolderId': evidenceFolderId
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetEvidenceByEvidenceFolderResponse;
      return this.apiClient.callApi(
        '/assessments/{assessmentId}/controlSets/{controlSetId}/evidenceFolders/{evidenceFolderId}/evidence', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEvidenceFileUploadUrl operation.
     * @callback module:api/DefaultApi~getEvidenceFileUploadUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetEvidenceFileUploadUrlResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a presigned Amazon S3 URL that can be used to upload a file as manual evidence. For instructions on how to use this operation, see <a href=\"https://docs.aws.amazon.com/audit-manager/latest/userguide/upload-evidence.html#how-to-upload-manual-evidence-files\">Upload a file from your browser </a> in the <i>Audit Manager User Guide</i>.</p> <p>The following restrictions apply to this operation:</p> <ul> <li> <p>Maximum size of an individual evidence file: 100 MB</p> </li> <li> <p>Number of daily manual evidence uploads per control: 100</p> </li> <li> <p>Supported file formats: See <a href=\"https://docs.aws.amazon.com/audit-manager/latest/userguide/upload-evidence.html#supported-manual-evidence-files\">Supported file types for manual evidence</a> in the <i>Audit Manager User Guide</i> </p> </li> </ul> <p>For more information about Audit Manager service restrictions, see <a href=\"https://docs.aws.amazon.com/audit-manager/latest/userguide/service-quotas.html\">Quotas and restrictions for Audit Manager</a>.</p>
     * @param {String} fileName The file that you want to upload. For a list of supported file formats, see <a href=\"https://docs.aws.amazon.com/audit-manager/latest/userguide/upload-evidence.html#supported-manual-evidence-files\">Supported file types for manual evidence</a> in the <i>Audit Manager User Guide</i>.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getEvidenceFileUploadUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetEvidenceFileUploadUrlResponse}
     */
    getEvidenceFileUploadUrl(fileName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling getEvidenceFileUploadUrl");
      }

      let pathParams = {
      };
      let queryParams = {
        'fileName': fileName
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetEvidenceFileUploadUrlResponse;
      return this.apiClient.callApi(
        '/evidenceFileUploadUrl#fileName', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEvidenceFolder operation.
     * @callback module:api/DefaultApi~getEvidenceFolderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetEvidenceFolderResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Gets an evidence folder from a specified assessment in Audit Manager. 
     * @param {String} assessmentId  The unique identifier for the assessment. 
     * @param {String} controlSetId  The unique identifier for the control set. 
     * @param {String} evidenceFolderId  The unique identifier for the folder that the evidence is stored in. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getEvidenceFolderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetEvidenceFolderResponse}
     */
    getEvidenceFolder(assessmentId, controlSetId, evidenceFolderId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'assessmentId' is set
      if (assessmentId === undefined || assessmentId === null) {
        throw new Error("Missing the required parameter 'assessmentId' when calling getEvidenceFolder");
      }
      // verify the required parameter 'controlSetId' is set
      if (controlSetId === undefined || controlSetId === null) {
        throw new Error("Missing the required parameter 'controlSetId' when calling getEvidenceFolder");
      }
      // verify the required parameter 'evidenceFolderId' is set
      if (evidenceFolderId === undefined || evidenceFolderId === null) {
        throw new Error("Missing the required parameter 'evidenceFolderId' when calling getEvidenceFolder");
      }

      let pathParams = {
        'assessmentId': assessmentId,
        'controlSetId': controlSetId,
        'evidenceFolderId': evidenceFolderId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetEvidenceFolderResponse;
      return this.apiClient.callApi(
        '/assessments/{assessmentId}/controlSets/{controlSetId}/evidenceFolders/{evidenceFolderId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEvidenceFoldersByAssessment operation.
     * @callback module:api/DefaultApi~getEvidenceFoldersByAssessmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetEvidenceFoldersByAssessmentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Gets the evidence folders from a specified assessment in Audit Manager. 
     * @param {String} assessmentId  The unique identifier for the assessment. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken]  The pagination token that's used to fetch the next set of results. 
     * @param {Number} [maxResults]  Represents the maximum number of results on a page or for an API request call. 
     * @param {module:api/DefaultApi~getEvidenceFoldersByAssessmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetEvidenceFoldersByAssessmentResponse}
     */
    getEvidenceFoldersByAssessment(assessmentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'assessmentId' is set
      if (assessmentId === undefined || assessmentId === null) {
        throw new Error("Missing the required parameter 'assessmentId' when calling getEvidenceFoldersByAssessment");
      }

      let pathParams = {
        'assessmentId': assessmentId
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetEvidenceFoldersByAssessmentResponse;
      return this.apiClient.callApi(
        '/assessments/{assessmentId}/evidenceFolders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEvidenceFoldersByAssessmentControl operation.
     * @callback module:api/DefaultApi~getEvidenceFoldersByAssessmentControlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetEvidenceFoldersByAssessmentControlResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Gets a list of evidence folders that are associated with a specified control in an Audit Manager assessment. 
     * @param {String} assessmentId  The identifier for the assessment. 
     * @param {String} controlSetId  The identifier for the control set. 
     * @param {String} controlId  The identifier for the control. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken]  The pagination token that's used to fetch the next set of results. 
     * @param {Number} [maxResults]  Represents the maximum number of results on a page or for an API request call. 
     * @param {module:api/DefaultApi~getEvidenceFoldersByAssessmentControlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetEvidenceFoldersByAssessmentControlResponse}
     */
    getEvidenceFoldersByAssessmentControl(assessmentId, controlSetId, controlId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'assessmentId' is set
      if (assessmentId === undefined || assessmentId === null) {
        throw new Error("Missing the required parameter 'assessmentId' when calling getEvidenceFoldersByAssessmentControl");
      }
      // verify the required parameter 'controlSetId' is set
      if (controlSetId === undefined || controlSetId === null) {
        throw new Error("Missing the required parameter 'controlSetId' when calling getEvidenceFoldersByAssessmentControl");
      }
      // verify the required parameter 'controlId' is set
      if (controlId === undefined || controlId === null) {
        throw new Error("Missing the required parameter 'controlId' when calling getEvidenceFoldersByAssessmentControl");
      }

      let pathParams = {
        'assessmentId': assessmentId,
        'controlSetId': controlSetId,
        'controlId': controlId
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetEvidenceFoldersByAssessmentControlResponse;
      return this.apiClient.callApi(
        '/assessments/{assessmentId}/evidenceFolders-by-assessment-control/{controlSetId}/{controlId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInsights operation.
     * @callback module:api/DefaultApi~getInsightsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetInsightsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the latest analytics data for all your current active assessments. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getInsightsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetInsightsResponse}
     */
    getInsights(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetInsightsResponse;
      return this.apiClient.callApi(
        '/insights', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInsightsByAssessment operation.
     * @callback module:api/DefaultApi~getInsightsByAssessmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetInsightsByAssessmentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the latest analytics data for a specific active assessment. 
     * @param {String} assessmentId The unique identifier for the assessment. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getInsightsByAssessmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetInsightsByAssessmentResponse}
     */
    getInsightsByAssessment(assessmentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'assessmentId' is set
      if (assessmentId === undefined || assessmentId === null) {
        throw new Error("Missing the required parameter 'assessmentId' when calling getInsightsByAssessment");
      }

      let pathParams = {
        'assessmentId': assessmentId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetInsightsByAssessmentResponse;
      return this.apiClient.callApi(
        '/insights/assessments/{assessmentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationAdminAccount operation.
     * @callback module:api/DefaultApi~getOrganizationAdminAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrganizationAdminAccountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Gets the name of the delegated Amazon Web Services administrator account for a specified organization. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getOrganizationAdminAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrganizationAdminAccountResponse}
     */
    getOrganizationAdminAccount(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetOrganizationAdminAccountResponse;
      return this.apiClient.callApi(
        '/account/organizationAdminAccount', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getServicesInScope operation.
     * @callback module:api/DefaultApi~getServicesInScopeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetServicesInScopeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of all of the Amazon Web Services that you can choose to include in your assessment. When you <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_CreateAssessment.html\">create an assessment</a>, specify which of these services you want to include to narrow the assessment's <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Scope.html\">scope</a>.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getServicesInScopeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetServicesInScopeResponse}
     */
    getServicesInScope(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetServicesInScopeResponse;
      return this.apiClient.callApi(
        '/services', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSettings operation.
     * @callback module:api/DefaultApi~getSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSettingsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Gets the settings for a specified Amazon Web Services account. 
     * @param {module:model/String} attribute  The list of setting attribute enum values. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSettingsResponse}
     */
    getSettings(attribute, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'attribute' is set
      if (attribute === undefined || attribute === null) {
        throw new Error("Missing the required parameter 'attribute' when calling getSettings");
      }

      let pathParams = {
        'attribute': attribute
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSettingsResponse;
      return this.apiClient.callApi(
        '/settings/{attribute}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAssessmentControlInsightsByControlDomain operation.
     * @callback module:api/DefaultApi~listAssessmentControlInsightsByControlDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAssessmentControlInsightsByControlDomainResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Lists the latest analytics data for controls within a specific control domain and a specific active assessment.</p> <note> <p>Control insights are listed only if the control belongs to the control domain and assessment that was specified. Moreover, the control must have collected evidence on the <code>lastUpdated</code> date of <code>controlInsightsByAssessment</code>. If neither of these conditions are met, no data is listed for that control. </p> </note>
     * @param {String} controlDomainId The unique identifier for the control domain. 
     * @param {String} assessmentId The unique identifier for the active assessment. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The pagination token that's used to fetch the next set of results. 
     * @param {Number} [maxResults] Represents the maximum number of results on a page or for an API request call. 
     * @param {module:api/DefaultApi~listAssessmentControlInsightsByControlDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAssessmentControlInsightsByControlDomainResponse}
     */
    listAssessmentControlInsightsByControlDomain(controlDomainId, assessmentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'controlDomainId' is set
      if (controlDomainId === undefined || controlDomainId === null) {
        throw new Error("Missing the required parameter 'controlDomainId' when calling listAssessmentControlInsightsByControlDomain");
      }
      // verify the required parameter 'assessmentId' is set
      if (assessmentId === undefined || assessmentId === null) {
        throw new Error("Missing the required parameter 'assessmentId' when calling listAssessmentControlInsightsByControlDomain");
      }

      let pathParams = {
      };
      let queryParams = {
        'controlDomainId': controlDomainId,
        'assessmentId': assessmentId,
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListAssessmentControlInsightsByControlDomainResponse;
      return this.apiClient.callApi(
        '/insights/controls-by-assessment#controlDomainId&assessmentId', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAssessmentFrameworkShareRequests operation.
     * @callback module:api/DefaultApi~listAssessmentFrameworkShareRequestsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAssessmentFrameworkShareRequestsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Returns a list of sent or received share requests for custom frameworks in Audit Manager. 
     * @param {module:model/String} requestType  Specifies whether the share request is a sent request or a received request.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken]  The pagination token that's used to fetch the next set of results. 
     * @param {Number} [maxResults]  Represents the maximum number of results on a page or for an API request call. 
     * @param {module:api/DefaultApi~listAssessmentFrameworkShareRequestsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAssessmentFrameworkShareRequestsResponse}
     */
    listAssessmentFrameworkShareRequests(requestType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'requestType' is set
      if (requestType === undefined || requestType === null) {
        throw new Error("Missing the required parameter 'requestType' when calling listAssessmentFrameworkShareRequests");
      }

      let pathParams = {
      };
      let queryParams = {
        'requestType': requestType,
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListAssessmentFrameworkShareRequestsResponse;
      return this.apiClient.callApi(
        '/assessmentFrameworkShareRequests#requestType', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAssessmentFrameworks operation.
     * @callback module:api/DefaultApi~listAssessmentFrameworksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAssessmentFrameworksResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Returns a list of the frameworks that are available in the Audit Manager framework library. 
     * @param {module:model/String} frameworkType  The type of framework, such as a standard framework or a custom framework. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken]  The pagination token that's used to fetch the next set of results. 
     * @param {Number} [maxResults]  Represents the maximum number of results on a page or for an API request call. 
     * @param {module:api/DefaultApi~listAssessmentFrameworksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAssessmentFrameworksResponse}
     */
    listAssessmentFrameworks(frameworkType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'frameworkType' is set
      if (frameworkType === undefined || frameworkType === null) {
        throw new Error("Missing the required parameter 'frameworkType' when calling listAssessmentFrameworks");
      }

      let pathParams = {
      };
      let queryParams = {
        'frameworkType': frameworkType,
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListAssessmentFrameworksResponse;
      return this.apiClient.callApi(
        '/assessmentFrameworks#frameworkType', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAssessmentReports operation.
     * @callback module:api/DefaultApi~listAssessmentReportsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAssessmentReportsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Returns a list of assessment reports created in Audit Manager. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken]  The pagination token that's used to fetch the next set of results. 
     * @param {Number} [maxResults]  Represents the maximum number of results on a page or for an API request call. 
     * @param {module:api/DefaultApi~listAssessmentReportsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAssessmentReportsResponse}
     */
    listAssessmentReports(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListAssessmentReportsResponse;
      return this.apiClient.callApi(
        '/assessmentReports', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAssessments operation.
     * @callback module:api/DefaultApi~listAssessmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAssessmentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Returns a list of current and past assessments from Audit Manager. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/String} [status]  The current status of the assessment.
     * @param {String} [nextToken]  The pagination token that's used to fetch the next set of results. 
     * @param {Number} [maxResults]  Represents the maximum number of results on a page or for an API request call. 
     * @param {module:api/DefaultApi~listAssessmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAssessmentsResponse}
     */
    listAssessments(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'status': opts['status'],
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListAssessmentsResponse;
      return this.apiClient.callApi(
        '/assessments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listControlDomainInsights operation.
     * @callback module:api/DefaultApi~listControlDomainInsightsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListControlDomainInsightsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Lists the latest analytics data for control domains across all of your active assessments. </p> <note> <p>A control domain is listed only if at least one of the controls within that domain collected evidence on the <code>lastUpdated</code> date of <code>controlDomainInsights</code>. If this condition isn’t met, no data is listed for that control domain.</p> </note>
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The pagination token that's used to fetch the next set of results. 
     * @param {Number} [maxResults] Represents the maximum number of results on a page or for an API request call. 
     * @param {module:api/DefaultApi~listControlDomainInsightsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListControlDomainInsightsResponse}
     */
    listControlDomainInsights(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListControlDomainInsightsResponse;
      return this.apiClient.callApi(
        '/insights/control-domains', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listControlDomainInsightsByAssessment operation.
     * @callback module:api/DefaultApi~listControlDomainInsightsByAssessmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListControlDomainInsightsByAssessmentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Lists analytics data for control domains within a specified active assessment.</p> <note> <p>A control domain is listed only if at least one of the controls within that domain collected evidence on the <code>lastUpdated</code> date of <code>controlDomainInsights</code>. If this condition isn’t met, no data is listed for that domain.</p> </note>
     * @param {String} assessmentId The unique identifier for the active assessment. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The pagination token that's used to fetch the next set of results. 
     * @param {Number} [maxResults] Represents the maximum number of results on a page or for an API request call. 
     * @param {module:api/DefaultApi~listControlDomainInsightsByAssessmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListControlDomainInsightsByAssessmentResponse}
     */
    listControlDomainInsightsByAssessment(assessmentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'assessmentId' is set
      if (assessmentId === undefined || assessmentId === null) {
        throw new Error("Missing the required parameter 'assessmentId' when calling listControlDomainInsightsByAssessment");
      }

      let pathParams = {
      };
      let queryParams = {
        'assessmentId': assessmentId,
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListControlDomainInsightsByAssessmentResponse;
      return this.apiClient.callApi(
        '/insights/control-domains-by-assessment#assessmentId', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listControlInsightsByControlDomain operation.
     * @callback module:api/DefaultApi~listControlInsightsByControlDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListControlInsightsByControlDomainResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Lists the latest analytics data for controls within a specific control domain across all active assessments.</p> <note> <p>Control insights are listed only if the control belongs to the control domain that was specified and the control collected evidence on the <code>lastUpdated</code> date of <code>controlInsightsMetadata</code>. If neither of these conditions are met, no data is listed for that control. </p> </note>
     * @param {String} controlDomainId The unique identifier for the control domain. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The pagination token that's used to fetch the next set of results. 
     * @param {Number} [maxResults] Represents the maximum number of results on a page or for an API request call. 
     * @param {module:api/DefaultApi~listControlInsightsByControlDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListControlInsightsByControlDomainResponse}
     */
    listControlInsightsByControlDomain(controlDomainId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'controlDomainId' is set
      if (controlDomainId === undefined || controlDomainId === null) {
        throw new Error("Missing the required parameter 'controlDomainId' when calling listControlInsightsByControlDomain");
      }

      let pathParams = {
      };
      let queryParams = {
        'controlDomainId': controlDomainId,
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListControlInsightsByControlDomainResponse;
      return this.apiClient.callApi(
        '/insights/controls#controlDomainId', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listControls operation.
     * @callback module:api/DefaultApi~listControlsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListControlsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Returns a list of controls from Audit Manager. 
     * @param {module:model/String} controlType  The type of control, such as a standard control or a custom control. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken]  The pagination token that's used to fetch the next set of results. 
     * @param {Number} [maxResults]  Represents the maximum number of results on a page or for an API request call. 
     * @param {module:api/DefaultApi~listControlsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListControlsResponse}
     */
    listControls(controlType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'controlType' is set
      if (controlType === undefined || controlType === null) {
        throw new Error("Missing the required parameter 'controlType' when calling listControls");
      }

      let pathParams = {
      };
      let queryParams = {
        'controlType': controlType,
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListControlsResponse;
      return this.apiClient.callApi(
        '/controls#controlType', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listKeywordsForDataSource operation.
     * @callback module:api/DefaultApi~listKeywordsForDataSourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListKeywordsForDataSourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Returns a list of keywords that are pre-mapped to the specified control data source. 
     * @param {module:model/String} source  The control mapping data source that the keywords apply to. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken]  The pagination token that's used to fetch the next set of results. 
     * @param {Number} [maxResults]  Represents the maximum number of results on a page or for an API request call. 
     * @param {module:api/DefaultApi~listKeywordsForDataSourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListKeywordsForDataSourceResponse}
     */
    listKeywordsForDataSource(source, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling listKeywordsForDataSource");
      }

      let pathParams = {
      };
      let queryParams = {
        'source': source,
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListKeywordsForDataSourceResponse;
      return this.apiClient.callApi(
        '/dataSourceKeywords#source', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listNotifications operation.
     * @callback module:api/DefaultApi~listNotificationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListNotificationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Returns a list of all Audit Manager notifications. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken]  The pagination token that's used to fetch the next set of results. 
     * @param {Number} [maxResults]  Represents the maximum number of results on a page or for an API request call. 
     * @param {module:api/DefaultApi~listNotificationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListNotificationsResponse}
     */
    listNotifications(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListNotificationsResponse;
      return this.apiClient.callApi(
        '/notifications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Returns a list of tags for the specified resource in Audit Manager. 
     * @param {String} resourceArn  The Amazon Resource Name (ARN) of the resource. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceResponse}
     */
    listTagsForResource(resourceArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling listTagsForResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceResponse;
      return this.apiClient.callApi(
        '/tags/{resourceArn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registerAccount operation.
     * @callback module:api/DefaultApi~registerAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RegisterAccountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Enables Audit Manager for the specified Amazon Web Services account. 
     * @param {module:model/RegisterAccountRequest} registerAccountRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~registerAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RegisterAccountResponse}
     */
    registerAccount(registerAccountRequest, opts, callback) {
      opts = opts || {};
      let postBody = registerAccountRequest;
      // verify the required parameter 'registerAccountRequest' is set
      if (registerAccountRequest === undefined || registerAccountRequest === null) {
        throw new Error("Missing the required parameter 'registerAccountRequest' when calling registerAccount");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RegisterAccountResponse;
      return this.apiClient.callApi(
        '/account/registerAccount', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registerOrganizationAdminAccount operation.
     * @callback module:api/DefaultApi~registerOrganizationAdminAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RegisterOrganizationAdminAccountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Enables an Amazon Web Services account within the organization as the delegated administrator for Audit Manager. 
     * @param {module:model/RegisterOrganizationAdminAccountRequest} registerOrganizationAdminAccountRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~registerOrganizationAdminAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RegisterOrganizationAdminAccountResponse}
     */
    registerOrganizationAdminAccount(registerOrganizationAdminAccountRequest, opts, callback) {
      opts = opts || {};
      let postBody = registerOrganizationAdminAccountRequest;
      // verify the required parameter 'registerOrganizationAdminAccountRequest' is set
      if (registerOrganizationAdminAccountRequest === undefined || registerOrganizationAdminAccountRequest === null) {
        throw new Error("Missing the required parameter 'registerOrganizationAdminAccountRequest' when calling registerOrganizationAdminAccount");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RegisterOrganizationAdminAccountResponse;
      return this.apiClient.callApi(
        '/account/registerOrganizationAdminAccount', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startAssessmentFrameworkShare operation.
     * @callback module:api/DefaultApi~startAssessmentFrameworkShareCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartAssessmentFrameworkShareResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p> Creates a share request for a custom framework in Audit Manager. </p> <p>The share request specifies a recipient and notifies them that a custom framework is available. Recipients have 120 days to accept or decline the request. If no action is taken, the share request expires.</p> <p>When you create a share request, Audit Manager stores a snapshot of your custom framework in the US East (N. Virginia) Amazon Web Services Region. Audit Manager also stores a backup of the same snapshot in the US West (Oregon) Amazon Web Services Region.</p> <p>Audit Manager deletes the snapshot and the backup snapshot when one of the following events occurs:</p> <ul> <li> <p>The sender revokes the share request.</p> </li> <li> <p>The recipient declines the share request.</p> </li> <li> <p>The recipient encounters an error and doesn't successfully accept the share request.</p> </li> <li> <p>The share request expires before the recipient responds to the request.</p> </li> </ul> <p>When a sender <a href=\"https://docs.aws.amazon.com/audit-manager/latest/userguide/framework-sharing.html#framework-sharing-resend\">resends a share request</a>, the snapshot is replaced with an updated version that corresponds with the latest version of the custom framework. </p> <p>When a recipient accepts a share request, the snapshot is replicated into their Amazon Web Services account under the Amazon Web Services Region that was specified in the share request. </p> <important> <p>When you invoke the <code>StartAssessmentFrameworkShare</code> API, you are about to share a custom framework with another Amazon Web Services account. You may not share a custom framework that is derived from a standard framework if the standard framework is designated as not eligible for sharing by Amazon Web Services, unless you have obtained permission to do so from the owner of the standard framework. To learn more about which standard frameworks are eligible for sharing, see <a href=\"https://docs.aws.amazon.com/audit-manager/latest/userguide/share-custom-framework-concepts-and-terminology.html#eligibility\">Framework sharing eligibility</a> in the <i>Audit Manager User Guide</i>.</p> </important>
     * @param {String} frameworkId  The unique identifier for the custom framework to be shared. 
     * @param {module:model/StartAssessmentFrameworkShareRequest} startAssessmentFrameworkShareRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startAssessmentFrameworkShareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartAssessmentFrameworkShareResponse}
     */
    startAssessmentFrameworkShare(frameworkId, startAssessmentFrameworkShareRequest, opts, callback) {
      opts = opts || {};
      let postBody = startAssessmentFrameworkShareRequest;
      // verify the required parameter 'frameworkId' is set
      if (frameworkId === undefined || frameworkId === null) {
        throw new Error("Missing the required parameter 'frameworkId' when calling startAssessmentFrameworkShare");
      }
      // verify the required parameter 'startAssessmentFrameworkShareRequest' is set
      if (startAssessmentFrameworkShareRequest === undefined || startAssessmentFrameworkShareRequest === null) {
        throw new Error("Missing the required parameter 'startAssessmentFrameworkShareRequest' when calling startAssessmentFrameworkShare");
      }

      let pathParams = {
        'frameworkId': frameworkId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartAssessmentFrameworkShareResponse;
      return this.apiClient.callApi(
        '/assessmentFrameworks/{frameworkId}/shareRequests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Tags the specified resource in Audit Manager. 
     * @param {String} resourceArn  The Amazon Resource Name (ARN) of the resource. 
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    tagResource(resourceArn, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/tags/{resourceArn}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Removes a tag from a resource in Audit Manager. 
     * @param {String} resourceArn  The Amazon Resource Name (ARN) of the specified resource. 
     * @param {Array.<String>} tagKeys  The name or key of the tag. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    untagResource(resourceArn, tagKeys, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling untagResource");
      }
      // verify the required parameter 'tagKeys' is set
      if (tagKeys === undefined || tagKeys === null) {
        throw new Error("Missing the required parameter 'tagKeys' when calling untagResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
        'tagKeys': this.apiClient.buildCollectionParam(tagKeys, 'multi')
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/tags/{resourceArn}#tagKeys', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAssessment operation.
     * @callback module:api/DefaultApi~updateAssessmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateAssessmentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Edits an Audit Manager assessment. 
     * @param {String} assessmentId  The unique identifier for the assessment. 
     * @param {module:model/UpdateAssessmentRequest} updateAssessmentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateAssessmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateAssessmentResponse}
     */
    updateAssessment(assessmentId, updateAssessmentRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateAssessmentRequest;
      // verify the required parameter 'assessmentId' is set
      if (assessmentId === undefined || assessmentId === null) {
        throw new Error("Missing the required parameter 'assessmentId' when calling updateAssessment");
      }
      // verify the required parameter 'updateAssessmentRequest' is set
      if (updateAssessmentRequest === undefined || updateAssessmentRequest === null) {
        throw new Error("Missing the required parameter 'updateAssessmentRequest' when calling updateAssessment");
      }

      let pathParams = {
        'assessmentId': assessmentId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateAssessmentResponse;
      return this.apiClient.callApi(
        '/assessments/{assessmentId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAssessmentControl operation.
     * @callback module:api/DefaultApi~updateAssessmentControlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateAssessmentControlResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Updates a control within an assessment in Audit Manager. 
     * @param {String} assessmentId  The unique identifier for the assessment. 
     * @param {String} controlSetId  The unique identifier for the control set. 
     * @param {String} controlId  The unique identifier for the control. 
     * @param {module:model/UpdateAssessmentControlRequest} updateAssessmentControlRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateAssessmentControlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateAssessmentControlResponse}
     */
    updateAssessmentControl(assessmentId, controlSetId, controlId, updateAssessmentControlRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateAssessmentControlRequest;
      // verify the required parameter 'assessmentId' is set
      if (assessmentId === undefined || assessmentId === null) {
        throw new Error("Missing the required parameter 'assessmentId' when calling updateAssessmentControl");
      }
      // verify the required parameter 'controlSetId' is set
      if (controlSetId === undefined || controlSetId === null) {
        throw new Error("Missing the required parameter 'controlSetId' when calling updateAssessmentControl");
      }
      // verify the required parameter 'controlId' is set
      if (controlId === undefined || controlId === null) {
        throw new Error("Missing the required parameter 'controlId' when calling updateAssessmentControl");
      }
      // verify the required parameter 'updateAssessmentControlRequest' is set
      if (updateAssessmentControlRequest === undefined || updateAssessmentControlRequest === null) {
        throw new Error("Missing the required parameter 'updateAssessmentControlRequest' when calling updateAssessmentControl");
      }

      let pathParams = {
        'assessmentId': assessmentId,
        'controlSetId': controlSetId,
        'controlId': controlId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateAssessmentControlResponse;
      return this.apiClient.callApi(
        '/assessments/{assessmentId}/controlSets/{controlSetId}/controls/{controlId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAssessmentControlSetStatus operation.
     * @callback module:api/DefaultApi~updateAssessmentControlSetStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateAssessmentControlSetStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Updates the status of a control set in an Audit Manager assessment. 
     * @param {String} assessmentId  The unique identifier for the assessment. 
     * @param {String} controlSetId  The unique identifier for the control set. 
     * @param {module:model/UpdateAssessmentControlSetStatusRequest} updateAssessmentControlSetStatusRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateAssessmentControlSetStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateAssessmentControlSetStatusResponse}
     */
    updateAssessmentControlSetStatus(assessmentId, controlSetId, updateAssessmentControlSetStatusRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateAssessmentControlSetStatusRequest;
      // verify the required parameter 'assessmentId' is set
      if (assessmentId === undefined || assessmentId === null) {
        throw new Error("Missing the required parameter 'assessmentId' when calling updateAssessmentControlSetStatus");
      }
      // verify the required parameter 'controlSetId' is set
      if (controlSetId === undefined || controlSetId === null) {
        throw new Error("Missing the required parameter 'controlSetId' when calling updateAssessmentControlSetStatus");
      }
      // verify the required parameter 'updateAssessmentControlSetStatusRequest' is set
      if (updateAssessmentControlSetStatusRequest === undefined || updateAssessmentControlSetStatusRequest === null) {
        throw new Error("Missing the required parameter 'updateAssessmentControlSetStatusRequest' when calling updateAssessmentControlSetStatus");
      }

      let pathParams = {
        'assessmentId': assessmentId,
        'controlSetId': controlSetId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateAssessmentControlSetStatusResponse;
      return this.apiClient.callApi(
        '/assessments/{assessmentId}/controlSets/{controlSetId}/status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAssessmentFramework operation.
     * @callback module:api/DefaultApi~updateAssessmentFrameworkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateAssessmentFrameworkResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Updates a custom framework in Audit Manager. 
     * @param {String} frameworkId  The unique identifier for the framework. 
     * @param {module:model/UpdateAssessmentFrameworkRequest} updateAssessmentFrameworkRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateAssessmentFrameworkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateAssessmentFrameworkResponse}
     */
    updateAssessmentFramework(frameworkId, updateAssessmentFrameworkRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateAssessmentFrameworkRequest;
      // verify the required parameter 'frameworkId' is set
      if (frameworkId === undefined || frameworkId === null) {
        throw new Error("Missing the required parameter 'frameworkId' when calling updateAssessmentFramework");
      }
      // verify the required parameter 'updateAssessmentFrameworkRequest' is set
      if (updateAssessmentFrameworkRequest === undefined || updateAssessmentFrameworkRequest === null) {
        throw new Error("Missing the required parameter 'updateAssessmentFrameworkRequest' when calling updateAssessmentFramework");
      }

      let pathParams = {
        'frameworkId': frameworkId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateAssessmentFrameworkResponse;
      return this.apiClient.callApi(
        '/assessmentFrameworks/{frameworkId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAssessmentFrameworkShare operation.
     * @callback module:api/DefaultApi~updateAssessmentFrameworkShareCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateAssessmentFrameworkShareResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Updates a share request for a custom framework in Audit Manager. 
     * @param {String} requestId  The unique identifier for the share request. 
     * @param {module:model/UpdateAssessmentFrameworkShareRequest} updateAssessmentFrameworkShareRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateAssessmentFrameworkShareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateAssessmentFrameworkShareResponse}
     */
    updateAssessmentFrameworkShare(requestId, updateAssessmentFrameworkShareRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateAssessmentFrameworkShareRequest;
      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling updateAssessmentFrameworkShare");
      }
      // verify the required parameter 'updateAssessmentFrameworkShareRequest' is set
      if (updateAssessmentFrameworkShareRequest === undefined || updateAssessmentFrameworkShareRequest === null) {
        throw new Error("Missing the required parameter 'updateAssessmentFrameworkShareRequest' when calling updateAssessmentFrameworkShare");
      }

      let pathParams = {
        'requestId': requestId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateAssessmentFrameworkShareResponse;
      return this.apiClient.callApi(
        '/assessmentFrameworkShareRequests/{requestId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAssessmentStatus operation.
     * @callback module:api/DefaultApi~updateAssessmentStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateAssessmentStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Updates the status of an assessment in Audit Manager. 
     * @param {String} assessmentId  The unique identifier for the assessment. 
     * @param {module:model/UpdateAssessmentStatusRequest} updateAssessmentStatusRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateAssessmentStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateAssessmentStatusResponse}
     */
    updateAssessmentStatus(assessmentId, updateAssessmentStatusRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateAssessmentStatusRequest;
      // verify the required parameter 'assessmentId' is set
      if (assessmentId === undefined || assessmentId === null) {
        throw new Error("Missing the required parameter 'assessmentId' when calling updateAssessmentStatus");
      }
      // verify the required parameter 'updateAssessmentStatusRequest' is set
      if (updateAssessmentStatusRequest === undefined || updateAssessmentStatusRequest === null) {
        throw new Error("Missing the required parameter 'updateAssessmentStatusRequest' when calling updateAssessmentStatus");
      }

      let pathParams = {
        'assessmentId': assessmentId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateAssessmentStatusResponse;
      return this.apiClient.callApi(
        '/assessments/{assessmentId}/status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateControl operation.
     * @callback module:api/DefaultApi~updateControlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateControlResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Updates a custom control in Audit Manager. 
     * @param {String} controlId  The identifier for the control. 
     * @param {module:model/UpdateControlRequest} updateControlRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateControlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateControlResponse}
     */
    updateControl(controlId, updateControlRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateControlRequest;
      // verify the required parameter 'controlId' is set
      if (controlId === undefined || controlId === null) {
        throw new Error("Missing the required parameter 'controlId' when calling updateControl");
      }
      // verify the required parameter 'updateControlRequest' is set
      if (updateControlRequest === undefined || updateControlRequest === null) {
        throw new Error("Missing the required parameter 'updateControlRequest' when calling updateControl");
      }

      let pathParams = {
        'controlId': controlId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateControlResponse;
      return this.apiClient.callApi(
        '/controls/{controlId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSettings operation.
     * @callback module:api/DefaultApi~updateSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateSettingsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Updates Audit Manager settings for the current account. 
     * @param {module:model/UpdateSettingsRequest} updateSettingsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateSettingsResponse}
     */
    updateSettings(updateSettingsRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateSettingsRequest;
      // verify the required parameter 'updateSettingsRequest' is set
      if (updateSettingsRequest === undefined || updateSettingsRequest === null) {
        throw new Error("Missing the required parameter 'updateSettingsRequest' when calling updateSettings");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateSettingsResponse;
      return this.apiClient.callApi(
        '/settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the validateAssessmentReportIntegrity operation.
     * @callback module:api/DefaultApi~validateAssessmentReportIntegrityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ValidateAssessmentReportIntegrityResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Validates the integrity of an assessment report in Audit Manager. 
     * @param {module:model/ValidateAssessmentReportIntegrityRequest} validateAssessmentReportIntegrityRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~validateAssessmentReportIntegrityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ValidateAssessmentReportIntegrityResponse}
     */
    validateAssessmentReportIntegrity(validateAssessmentReportIntegrityRequest, opts, callback) {
      opts = opts || {};
      let postBody = validateAssessmentReportIntegrityRequest;
      // verify the required parameter 'validateAssessmentReportIntegrityRequest' is set
      if (validateAssessmentReportIntegrityRequest === undefined || validateAssessmentReportIntegrityRequest === null) {
        throw new Error("Missing the required parameter 'validateAssessmentReportIntegrityRequest' when calling validateAssessmentReportIntegrity");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ValidateAssessmentReportIntegrityResponse;
      return this.apiClient.callApi(
        '/assessmentReports/integrity', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
