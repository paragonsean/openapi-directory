/*
 * AWS Audit Manager
 * <p>Welcome to the Audit Manager API reference. This guide is for developers who need detailed information about the Audit Manager API operations, data types, and errors. </p> <p>Audit Manager is a service that provides automated evidence collection so that you can continually audit your Amazon Web Services usage. You can use it to assess the effectiveness of your controls, manage risk, and simplify compliance.</p> <p>Audit Manager provides prebuilt frameworks that structure and automate assessments for a given compliance standard. Frameworks include a prebuilt collection of controls with descriptions and testing procedures. These controls are grouped according to the requirements of the specified compliance standard or regulation. You can also customize frameworks and controls to support internal audits with specific requirements. </p> <p>Use the following links to get started with the Audit Manager API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Audit Manager API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Audit Manager data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Audit Manager, we recommend that you review the <a href=\"https://docs.aws.amazon.com/audit-manager/latest/userguide/what-is.html\"> Audit Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;A summary of the latest analytics data for a specific active assessment.&lt;/p&gt; &lt;p&gt;This summary is a snapshot of the data that was collected on the &lt;code&gt;lastUpdated&lt;/code&gt; date. It’s important to understand that the totals in &lt;code&gt;InsightsByAssessment&lt;/code&gt; are daily counts based on this date — they aren’t a total sum to date. &lt;/p&gt; &lt;p&gt;The &lt;code&gt;InsightsByAssessment&lt;/code&gt; data is eventually consistent. This means that when you read data from &lt;code&gt;InsightsByAssessment&lt;/code&gt;, the response might not instantly reflect the results of a recently completed write or update operation. If you repeat your read request after a few hours, the response returns the latest data.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If you delete an assessment or change its status to inactive, &lt;code&gt;InsightsByAssessment&lt;/code&gt; includes data for that assessment as follows.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Inactive assessments&lt;/b&gt; - If Audit Manager collected evidence for your assessment before you changed it inactive, that evidence is included in the &lt;code&gt;InsightsByAssessment&lt;/code&gt; counts for that day.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Deleted assessments&lt;/b&gt; - If Audit Manager collected evidence for your assessment before you deleted it, that evidence isn&#39;t included in the &lt;code&gt;InsightsByAssessment&lt;/code&gt; counts for that day.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:17.469617-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InsightsByAssessment {
  public static final String SERIALIZED_NAME_NONCOMPLIANT_EVIDENCE_COUNT = "noncompliantEvidenceCount";
  @SerializedName(SERIALIZED_NAME_NONCOMPLIANT_EVIDENCE_COUNT)
  private Integer noncompliantEvidenceCount;

  public static final String SERIALIZED_NAME_COMPLIANT_EVIDENCE_COUNT = "compliantEvidenceCount";
  @SerializedName(SERIALIZED_NAME_COMPLIANT_EVIDENCE_COUNT)
  private Integer compliantEvidenceCount;

  public static final String SERIALIZED_NAME_INCONCLUSIVE_EVIDENCE_COUNT = "inconclusiveEvidenceCount";
  @SerializedName(SERIALIZED_NAME_INCONCLUSIVE_EVIDENCE_COUNT)
  private Integer inconclusiveEvidenceCount;

  public static final String SERIALIZED_NAME_ASSESSMENT_CONTROLS_COUNT_BY_NONCOMPLIANT_EVIDENCE = "assessmentControlsCountByNoncompliantEvidence";
  @SerializedName(SERIALIZED_NAME_ASSESSMENT_CONTROLS_COUNT_BY_NONCOMPLIANT_EVIDENCE)
  private Integer assessmentControlsCountByNoncompliantEvidence;

  public static final String SERIALIZED_NAME_TOTAL_ASSESSMENT_CONTROLS_COUNT = "totalAssessmentControlsCount";
  @SerializedName(SERIALIZED_NAME_TOTAL_ASSESSMENT_CONTROLS_COUNT)
  private Integer totalAssessmentControlsCount;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "lastUpdated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private OffsetDateTime lastUpdated;

  public InsightsByAssessment() {
  }

  public InsightsByAssessment noncompliantEvidenceCount(Integer noncompliantEvidenceCount) {
    this.noncompliantEvidenceCount = noncompliantEvidenceCount;
    return this;
  }

  /**
   * Get noncompliantEvidenceCount
   * @return noncompliantEvidenceCount
   */
  @javax.annotation.Nullable
  public Integer getNoncompliantEvidenceCount() {
    return noncompliantEvidenceCount;
  }

  public void setNoncompliantEvidenceCount(Integer noncompliantEvidenceCount) {
    this.noncompliantEvidenceCount = noncompliantEvidenceCount;
  }


  public InsightsByAssessment compliantEvidenceCount(Integer compliantEvidenceCount) {
    this.compliantEvidenceCount = compliantEvidenceCount;
    return this;
  }

  /**
   * Get compliantEvidenceCount
   * @return compliantEvidenceCount
   */
  @javax.annotation.Nullable
  public Integer getCompliantEvidenceCount() {
    return compliantEvidenceCount;
  }

  public void setCompliantEvidenceCount(Integer compliantEvidenceCount) {
    this.compliantEvidenceCount = compliantEvidenceCount;
  }


  public InsightsByAssessment inconclusiveEvidenceCount(Integer inconclusiveEvidenceCount) {
    this.inconclusiveEvidenceCount = inconclusiveEvidenceCount;
    return this;
  }

  /**
   * Get inconclusiveEvidenceCount
   * @return inconclusiveEvidenceCount
   */
  @javax.annotation.Nullable
  public Integer getInconclusiveEvidenceCount() {
    return inconclusiveEvidenceCount;
  }

  public void setInconclusiveEvidenceCount(Integer inconclusiveEvidenceCount) {
    this.inconclusiveEvidenceCount = inconclusiveEvidenceCount;
  }


  public InsightsByAssessment assessmentControlsCountByNoncompliantEvidence(Integer assessmentControlsCountByNoncompliantEvidence) {
    this.assessmentControlsCountByNoncompliantEvidence = assessmentControlsCountByNoncompliantEvidence;
    return this;
  }

  /**
   * Get assessmentControlsCountByNoncompliantEvidence
   * @return assessmentControlsCountByNoncompliantEvidence
   */
  @javax.annotation.Nullable
  public Integer getAssessmentControlsCountByNoncompliantEvidence() {
    return assessmentControlsCountByNoncompliantEvidence;
  }

  public void setAssessmentControlsCountByNoncompliantEvidence(Integer assessmentControlsCountByNoncompliantEvidence) {
    this.assessmentControlsCountByNoncompliantEvidence = assessmentControlsCountByNoncompliantEvidence;
  }


  public InsightsByAssessment totalAssessmentControlsCount(Integer totalAssessmentControlsCount) {
    this.totalAssessmentControlsCount = totalAssessmentControlsCount;
    return this;
  }

  /**
   * Get totalAssessmentControlsCount
   * @return totalAssessmentControlsCount
   */
  @javax.annotation.Nullable
  public Integer getTotalAssessmentControlsCount() {
    return totalAssessmentControlsCount;
  }

  public void setTotalAssessmentControlsCount(Integer totalAssessmentControlsCount) {
    this.totalAssessmentControlsCount = totalAssessmentControlsCount;
  }


  public InsightsByAssessment lastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
    return this;
  }

  /**
   * Get lastUpdated
   * @return lastUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }

  public void setLastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InsightsByAssessment insightsByAssessment = (InsightsByAssessment) o;
    return Objects.equals(this.noncompliantEvidenceCount, insightsByAssessment.noncompliantEvidenceCount) &&
        Objects.equals(this.compliantEvidenceCount, insightsByAssessment.compliantEvidenceCount) &&
        Objects.equals(this.inconclusiveEvidenceCount, insightsByAssessment.inconclusiveEvidenceCount) &&
        Objects.equals(this.assessmentControlsCountByNoncompliantEvidence, insightsByAssessment.assessmentControlsCountByNoncompliantEvidence) &&
        Objects.equals(this.totalAssessmentControlsCount, insightsByAssessment.totalAssessmentControlsCount) &&
        Objects.equals(this.lastUpdated, insightsByAssessment.lastUpdated);
  }

  @Override
  public int hashCode() {
    return Objects.hash(noncompliantEvidenceCount, compliantEvidenceCount, inconclusiveEvidenceCount, assessmentControlsCountByNoncompliantEvidence, totalAssessmentControlsCount, lastUpdated);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InsightsByAssessment {\n");
    sb.append("    noncompliantEvidenceCount: ").append(toIndentedString(noncompliantEvidenceCount)).append("\n");
    sb.append("    compliantEvidenceCount: ").append(toIndentedString(compliantEvidenceCount)).append("\n");
    sb.append("    inconclusiveEvidenceCount: ").append(toIndentedString(inconclusiveEvidenceCount)).append("\n");
    sb.append("    assessmentControlsCountByNoncompliantEvidence: ").append(toIndentedString(assessmentControlsCountByNoncompliantEvidence)).append("\n");
    sb.append("    totalAssessmentControlsCount: ").append(toIndentedString(totalAssessmentControlsCount)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("noncompliantEvidenceCount");
    openapiFields.add("compliantEvidenceCount");
    openapiFields.add("inconclusiveEvidenceCount");
    openapiFields.add("assessmentControlsCountByNoncompliantEvidence");
    openapiFields.add("totalAssessmentControlsCount");
    openapiFields.add("lastUpdated");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InsightsByAssessment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InsightsByAssessment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InsightsByAssessment is not found in the empty JSON string", InsightsByAssessment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InsightsByAssessment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InsightsByAssessment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `noncompliantEvidenceCount`
      if (jsonObj.get("noncompliantEvidenceCount") != null && !jsonObj.get("noncompliantEvidenceCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("noncompliantEvidenceCount"));
      }
      // validate the optional field `compliantEvidenceCount`
      if (jsonObj.get("compliantEvidenceCount") != null && !jsonObj.get("compliantEvidenceCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("compliantEvidenceCount"));
      }
      // validate the optional field `inconclusiveEvidenceCount`
      if (jsonObj.get("inconclusiveEvidenceCount") != null && !jsonObj.get("inconclusiveEvidenceCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("inconclusiveEvidenceCount"));
      }
      // validate the optional field `assessmentControlsCountByNoncompliantEvidence`
      if (jsonObj.get("assessmentControlsCountByNoncompliantEvidence") != null && !jsonObj.get("assessmentControlsCountByNoncompliantEvidence").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("assessmentControlsCountByNoncompliantEvidence"));
      }
      // validate the optional field `totalAssessmentControlsCount`
      if (jsonObj.get("totalAssessmentControlsCount") != null && !jsonObj.get("totalAssessmentControlsCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("totalAssessmentControlsCount"));
      }
      // validate the optional field `lastUpdated`
      if (jsonObj.get("lastUpdated") != null && !jsonObj.get("lastUpdated").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("lastUpdated"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InsightsByAssessment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InsightsByAssessment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InsightsByAssessment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InsightsByAssessment.class));

       return (TypeAdapter<T>) new TypeAdapter<InsightsByAssessment>() {
           @Override
           public void write(JsonWriter out, InsightsByAssessment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InsightsByAssessment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InsightsByAssessment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InsightsByAssessment
   * @throws IOException if the JSON string is invalid with respect to InsightsByAssessment
   */
  public static InsightsByAssessment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InsightsByAssessment.class);
  }

  /**
   * Convert an instance of InsightsByAssessment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

