/*
 * AWS Audit Manager
 * <p>Welcome to the Audit Manager API reference. This guide is for developers who need detailed information about the Audit Manager API operations, data types, and errors. </p> <p>Audit Manager is a service that provides automated evidence collection so that you can continually audit your Amazon Web Services usage. You can use it to assess the effectiveness of your controls, manage risk, and simplify compliance.</p> <p>Audit Manager provides prebuilt frameworks that structure and automate assessments for a given compliance standard. Frameworks include a prebuilt collection of controls with descriptions and testing procedures. These controls are grouped according to the requirements of the specified compliance standard or regulation. You can also customize frameworks and controls to support internal audits with specific requirements. </p> <p>Use the following links to get started with the Audit Manager API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Audit Manager API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Audit Manager data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Audit Manager, we recommend that you review the <a href=\"https://docs.aws.amazon.com/audit-manager/latest/userguide/what-is.html\"> Audit Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.CreateAssessmentRequestAssessmentReportsDestination;
import org.openapitools.client.model.CreateAssessmentRequestScope;
import org.openapitools.client.model.Role;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateAssessmentRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:17.469617-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateAssessmentRequest {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ASSESSMENT_REPORTS_DESTINATION = "assessmentReportsDestination";
  @SerializedName(SERIALIZED_NAME_ASSESSMENT_REPORTS_DESTINATION)
  private CreateAssessmentRequestAssessmentReportsDestination assessmentReportsDestination;

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private CreateAssessmentRequestScope scope;

  public static final String SERIALIZED_NAME_ROLES = "roles";
  @SerializedName(SERIALIZED_NAME_ROLES)
  private List<Role> roles = new ArrayList<>();

  public static final String SERIALIZED_NAME_FRAMEWORK_ID = "frameworkId";
  @SerializedName(SERIALIZED_NAME_FRAMEWORK_ID)
  private String frameworkId;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public CreateAssessmentRequest() {
  }

  public CreateAssessmentRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   *  The name of the assessment to be created. 
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateAssessmentRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   *  The optional description of the assessment to be created. 
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateAssessmentRequest assessmentReportsDestination(CreateAssessmentRequestAssessmentReportsDestination assessmentReportsDestination) {
    this.assessmentReportsDestination = assessmentReportsDestination;
    return this;
  }

  /**
   * Get assessmentReportsDestination
   * @return assessmentReportsDestination
   */
  @javax.annotation.Nonnull
  public CreateAssessmentRequestAssessmentReportsDestination getAssessmentReportsDestination() {
    return assessmentReportsDestination;
  }

  public void setAssessmentReportsDestination(CreateAssessmentRequestAssessmentReportsDestination assessmentReportsDestination) {
    this.assessmentReportsDestination = assessmentReportsDestination;
  }


  public CreateAssessmentRequest scope(CreateAssessmentRequestScope scope) {
    this.scope = scope;
    return this;
  }

  /**
   * Get scope
   * @return scope
   */
  @javax.annotation.Nonnull
  public CreateAssessmentRequestScope getScope() {
    return scope;
  }

  public void setScope(CreateAssessmentRequestScope scope) {
    this.scope = scope;
  }


  public CreateAssessmentRequest roles(List<Role> roles) {
    this.roles = roles;
    return this;
  }

  public CreateAssessmentRequest addRolesItem(Role rolesItem) {
    if (this.roles == null) {
      this.roles = new ArrayList<>();
    }
    this.roles.add(rolesItem);
    return this;
  }

  /**
   *  The list of roles for the assessment. 
   * @return roles
   */
  @javax.annotation.Nonnull
  public List<Role> getRoles() {
    return roles;
  }

  public void setRoles(List<Role> roles) {
    this.roles = roles;
  }


  public CreateAssessmentRequest frameworkId(String frameworkId) {
    this.frameworkId = frameworkId;
    return this;
  }

  /**
   *  The identifier for the framework that the assessment will be created from. 
   * @return frameworkId
   */
  @javax.annotation.Nonnull
  public String getFrameworkId() {
    return frameworkId;
  }

  public void setFrameworkId(String frameworkId) {
    this.frameworkId = frameworkId;
  }


  public CreateAssessmentRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateAssessmentRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   *  The tags that are associated with the assessment. 
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateAssessmentRequest createAssessmentRequest = (CreateAssessmentRequest) o;
    return Objects.equals(this.name, createAssessmentRequest.name) &&
        Objects.equals(this.description, createAssessmentRequest.description) &&
        Objects.equals(this.assessmentReportsDestination, createAssessmentRequest.assessmentReportsDestination) &&
        Objects.equals(this.scope, createAssessmentRequest.scope) &&
        Objects.equals(this.roles, createAssessmentRequest.roles) &&
        Objects.equals(this.frameworkId, createAssessmentRequest.frameworkId) &&
        Objects.equals(this.tags, createAssessmentRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, description, assessmentReportsDestination, scope, roles, frameworkId, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateAssessmentRequest {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    assessmentReportsDestination: ").append(toIndentedString(assessmentReportsDestination)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    roles: ").append(toIndentedString(roles)).append("\n");
    sb.append("    frameworkId: ").append(toIndentedString(frameworkId)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("assessmentReportsDestination");
    openapiFields.add("scope");
    openapiFields.add("roles");
    openapiFields.add("frameworkId");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("assessmentReportsDestination");
    openapiRequiredFields.add("scope");
    openapiRequiredFields.add("roles");
    openapiRequiredFields.add("frameworkId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateAssessmentRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateAssessmentRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateAssessmentRequest is not found in the empty JSON string", CreateAssessmentRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateAssessmentRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateAssessmentRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateAssessmentRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the required field `assessmentReportsDestination`
      CreateAssessmentRequestAssessmentReportsDestination.validateJsonElement(jsonObj.get("assessmentReportsDestination"));
      // validate the required field `scope`
      CreateAssessmentRequestScope.validateJsonElement(jsonObj.get("scope"));
      // ensure the json data is an array
      if (!jsonObj.get("roles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `roles` to be an array in the JSON string but got `%s`", jsonObj.get("roles").toString()));
      }

      JsonArray jsonArrayroles = jsonObj.getAsJsonArray("roles");
      // validate the required field `roles` (array)
      for (int i = 0; i < jsonArrayroles.size(); i++) {
        Role.validateJsonElement(jsonArrayroles.get(i));
      };
      if (!jsonObj.get("frameworkId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `frameworkId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("frameworkId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateAssessmentRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateAssessmentRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateAssessmentRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateAssessmentRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateAssessmentRequest>() {
           @Override
           public void write(JsonWriter out, CreateAssessmentRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateAssessmentRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateAssessmentRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateAssessmentRequest
   * @throws IOException if the JSON string is invalid with respect to CreateAssessmentRequest
   */
  public static CreateAssessmentRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateAssessmentRequest.class);
  }

  /**
   * Convert an instance of CreateAssessmentRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

