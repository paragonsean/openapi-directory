/*
 * AWS Audit Manager
 * <p>Welcome to the Audit Manager API reference. This guide is for developers who need detailed information about the Audit Manager API operations, data types, and errors. </p> <p>Audit Manager is a service that provides automated evidence collection so that you can continually audit your Amazon Web Services usage. You can use it to assess the effectiveness of your controls, manage risk, and simplify compliance.</p> <p>Audit Manager provides prebuilt frameworks that structure and automate assessments for a given compliance standard. Frameworks include a prebuilt collection of controls with descriptions and testing procedures. These controls are grouped according to the requirements of the specified compliance standard or regulation. You can also customize frameworks and controls to support internal audits with specific requirements. </p> <p>Use the following links to get started with the Audit Manager API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Audit Manager API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Audit Manager data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Audit Manager, we recommend that you review the <a href=\"https://docs.aws.amazon.com/audit-manager/latest/userguide/what-is.html\"> Audit Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ControlResponse;
import org.openapitools.client.model.ControlStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 *  The control entity that represents a standard control or a custom control in an Audit Manager assessment. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:17.469617-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AssessmentControl {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private ControlStatus status;

  public static final String SERIALIZED_NAME_RESPONSE = "response";
  @SerializedName(SERIALIZED_NAME_RESPONSE)
  private ControlResponse response;

  public static final String SERIALIZED_NAME_COMMENTS = "comments";
  @SerializedName(SERIALIZED_NAME_COMMENTS)
  private List comments;

  public static final String SERIALIZED_NAME_EVIDENCE_SOURCES = "evidenceSources";
  @SerializedName(SERIALIZED_NAME_EVIDENCE_SOURCES)
  private List evidenceSources;

  public static final String SERIALIZED_NAME_EVIDENCE_COUNT = "evidenceCount";
  @SerializedName(SERIALIZED_NAME_EVIDENCE_COUNT)
  private Integer evidenceCount;

  public static final String SERIALIZED_NAME_ASSESSMENT_REPORT_EVIDENCE_COUNT = "assessmentReportEvidenceCount";
  @SerializedName(SERIALIZED_NAME_ASSESSMENT_REPORT_EVIDENCE_COUNT)
  private Integer assessmentReportEvidenceCount;

  public AssessmentControl() {
  }

  public AssessmentControl id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public AssessmentControl name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public AssessmentControl description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public AssessmentControl status(ControlStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public ControlStatus getStatus() {
    return status;
  }

  public void setStatus(ControlStatus status) {
    this.status = status;
  }


  public AssessmentControl response(ControlResponse response) {
    this.response = response;
    return this;
  }

  /**
   * Get response
   * @return response
   */
  @javax.annotation.Nullable
  public ControlResponse getResponse() {
    return response;
  }

  public void setResponse(ControlResponse response) {
    this.response = response;
  }


  public AssessmentControl comments(List comments) {
    this.comments = comments;
    return this;
  }

  /**
   * Get comments
   * @return comments
   */
  @javax.annotation.Nullable
  public List getComments() {
    return comments;
  }

  public void setComments(List comments) {
    this.comments = comments;
  }


  public AssessmentControl evidenceSources(List evidenceSources) {
    this.evidenceSources = evidenceSources;
    return this;
  }

  /**
   * Get evidenceSources
   * @return evidenceSources
   */
  @javax.annotation.Nullable
  public List getEvidenceSources() {
    return evidenceSources;
  }

  public void setEvidenceSources(List evidenceSources) {
    this.evidenceSources = evidenceSources;
  }


  public AssessmentControl evidenceCount(Integer evidenceCount) {
    this.evidenceCount = evidenceCount;
    return this;
  }

  /**
   * Get evidenceCount
   * @return evidenceCount
   */
  @javax.annotation.Nullable
  public Integer getEvidenceCount() {
    return evidenceCount;
  }

  public void setEvidenceCount(Integer evidenceCount) {
    this.evidenceCount = evidenceCount;
  }


  public AssessmentControl assessmentReportEvidenceCount(Integer assessmentReportEvidenceCount) {
    this.assessmentReportEvidenceCount = assessmentReportEvidenceCount;
    return this;
  }

  /**
   * Get assessmentReportEvidenceCount
   * @return assessmentReportEvidenceCount
   */
  @javax.annotation.Nullable
  public Integer getAssessmentReportEvidenceCount() {
    return assessmentReportEvidenceCount;
  }

  public void setAssessmentReportEvidenceCount(Integer assessmentReportEvidenceCount) {
    this.assessmentReportEvidenceCount = assessmentReportEvidenceCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssessmentControl assessmentControl = (AssessmentControl) o;
    return Objects.equals(this.id, assessmentControl.id) &&
        Objects.equals(this.name, assessmentControl.name) &&
        Objects.equals(this.description, assessmentControl.description) &&
        Objects.equals(this.status, assessmentControl.status) &&
        Objects.equals(this.response, assessmentControl.response) &&
        Objects.equals(this.comments, assessmentControl.comments) &&
        Objects.equals(this.evidenceSources, assessmentControl.evidenceSources) &&
        Objects.equals(this.evidenceCount, assessmentControl.evidenceCount) &&
        Objects.equals(this.assessmentReportEvidenceCount, assessmentControl.assessmentReportEvidenceCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, description, status, response, comments, evidenceSources, evidenceCount, assessmentReportEvidenceCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssessmentControl {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    response: ").append(toIndentedString(response)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    evidenceSources: ").append(toIndentedString(evidenceSources)).append("\n");
    sb.append("    evidenceCount: ").append(toIndentedString(evidenceCount)).append("\n");
    sb.append("    assessmentReportEvidenceCount: ").append(toIndentedString(assessmentReportEvidenceCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("status");
    openapiFields.add("response");
    openapiFields.add("comments");
    openapiFields.add("evidenceSources");
    openapiFields.add("evidenceCount");
    openapiFields.add("assessmentReportEvidenceCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AssessmentControl
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssessmentControl.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssessmentControl is not found in the empty JSON string", AssessmentControl.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AssessmentControl.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssessmentControl` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `id`
      if (jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("id"));
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("name"));
      }
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("description"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        ControlStatus.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `response`
      if (jsonObj.get("response") != null && !jsonObj.get("response").isJsonNull()) {
        ControlResponse.validateJsonElement(jsonObj.get("response"));
      }
      // validate the optional field `comments`
      if (jsonObj.get("comments") != null && !jsonObj.get("comments").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("comments"));
      }
      // validate the optional field `evidenceSources`
      if (jsonObj.get("evidenceSources") != null && !jsonObj.get("evidenceSources").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("evidenceSources"));
      }
      // validate the optional field `evidenceCount`
      if (jsonObj.get("evidenceCount") != null && !jsonObj.get("evidenceCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("evidenceCount"));
      }
      // validate the optional field `assessmentReportEvidenceCount`
      if (jsonObj.get("assessmentReportEvidenceCount") != null && !jsonObj.get("assessmentReportEvidenceCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("assessmentReportEvidenceCount"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssessmentControl.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssessmentControl' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssessmentControl> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssessmentControl.class));

       return (TypeAdapter<T>) new TypeAdapter<AssessmentControl>() {
           @Override
           public void write(JsonWriter out, AssessmentControl value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssessmentControl read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AssessmentControl given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AssessmentControl
   * @throws IOException if the JSON string is invalid with respect to AssessmentControl
   */
  public static AssessmentControl fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssessmentControl.class);
  }

  /**
   * Convert an instance of AssessmentControl to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

