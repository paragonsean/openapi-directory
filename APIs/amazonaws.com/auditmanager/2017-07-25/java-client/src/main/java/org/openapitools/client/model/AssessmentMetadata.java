/*
 * AWS Audit Manager
 * <p>Welcome to the Audit Manager API reference. This guide is for developers who need detailed information about the Audit Manager API operations, data types, and errors. </p> <p>Audit Manager is a service that provides automated evidence collection so that you can continually audit your Amazon Web Services usage. You can use it to assess the effectiveness of your controls, manage risk, and simplify compliance.</p> <p>Audit Manager provides prebuilt frameworks that structure and automate assessments for a given compliance standard. Frameworks include a prebuilt collection of controls with descriptions and testing procedures. These controls are grouped according to the requirements of the specified compliance standard or regulation. You can also customize frameworks and controls to support internal audits with specific requirements. </p> <p>Use the following links to get started with the Audit Manager API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Audit Manager API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Audit Manager data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Audit Manager, we recommend that you review the <a href=\"https://docs.aws.amazon.com/audit-manager/latest/userguide/what-is.html\"> Audit Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AssessmentMetadataAssessmentReportsDestination;
import org.openapitools.client.model.AssessmentMetadataScope;
import org.openapitools.client.model.AssessmentStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AssessmentMetadata
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:17.469617-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AssessmentMetadata {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_COMPLIANCE_TYPE = "complianceType";
  @SerializedName(SERIALIZED_NAME_COMPLIANCE_TYPE)
  private String complianceType;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private AssessmentStatus status;

  public static final String SERIALIZED_NAME_ASSESSMENT_REPORTS_DESTINATION = "assessmentReportsDestination";
  @SerializedName(SERIALIZED_NAME_ASSESSMENT_REPORTS_DESTINATION)
  private AssessmentMetadataAssessmentReportsDestination assessmentReportsDestination;

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private AssessmentMetadataScope scope;

  public static final String SERIALIZED_NAME_ROLES = "roles";
  @SerializedName(SERIALIZED_NAME_ROLES)
  private List roles;

  public static final String SERIALIZED_NAME_DELEGATIONS = "delegations";
  @SerializedName(SERIALIZED_NAME_DELEGATIONS)
  private List delegations;

  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "lastUpdated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private OffsetDateTime lastUpdated;

  public AssessmentMetadata() {
  }

  public AssessmentMetadata name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public AssessmentMetadata id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public AssessmentMetadata description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public AssessmentMetadata complianceType(String complianceType) {
    this.complianceType = complianceType;
    return this;
  }

  /**
   * Get complianceType
   * @return complianceType
   */
  @javax.annotation.Nullable
  public String getComplianceType() {
    return complianceType;
  }

  public void setComplianceType(String complianceType) {
    this.complianceType = complianceType;
  }


  public AssessmentMetadata status(AssessmentStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public AssessmentStatus getStatus() {
    return status;
  }

  public void setStatus(AssessmentStatus status) {
    this.status = status;
  }


  public AssessmentMetadata assessmentReportsDestination(AssessmentMetadataAssessmentReportsDestination assessmentReportsDestination) {
    this.assessmentReportsDestination = assessmentReportsDestination;
    return this;
  }

  /**
   * Get assessmentReportsDestination
   * @return assessmentReportsDestination
   */
  @javax.annotation.Nullable
  public AssessmentMetadataAssessmentReportsDestination getAssessmentReportsDestination() {
    return assessmentReportsDestination;
  }

  public void setAssessmentReportsDestination(AssessmentMetadataAssessmentReportsDestination assessmentReportsDestination) {
    this.assessmentReportsDestination = assessmentReportsDestination;
  }


  public AssessmentMetadata scope(AssessmentMetadataScope scope) {
    this.scope = scope;
    return this;
  }

  /**
   * Get scope
   * @return scope
   */
  @javax.annotation.Nullable
  public AssessmentMetadataScope getScope() {
    return scope;
  }

  public void setScope(AssessmentMetadataScope scope) {
    this.scope = scope;
  }


  public AssessmentMetadata roles(List roles) {
    this.roles = roles;
    return this;
  }

  /**
   * Get roles
   * @return roles
   */
  @javax.annotation.Nullable
  public List getRoles() {
    return roles;
  }

  public void setRoles(List roles) {
    this.roles = roles;
  }


  public AssessmentMetadata delegations(List delegations) {
    this.delegations = delegations;
    return this;
  }

  /**
   * Get delegations
   * @return delegations
   */
  @javax.annotation.Nullable
  public List getDelegations() {
    return delegations;
  }

  public void setDelegations(List delegations) {
    this.delegations = delegations;
  }


  public AssessmentMetadata creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Get creationTime
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public AssessmentMetadata lastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
    return this;
  }

  /**
   * Get lastUpdated
   * @return lastUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }

  public void setLastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssessmentMetadata assessmentMetadata = (AssessmentMetadata) o;
    return Objects.equals(this.name, assessmentMetadata.name) &&
        Objects.equals(this.id, assessmentMetadata.id) &&
        Objects.equals(this.description, assessmentMetadata.description) &&
        Objects.equals(this.complianceType, assessmentMetadata.complianceType) &&
        Objects.equals(this.status, assessmentMetadata.status) &&
        Objects.equals(this.assessmentReportsDestination, assessmentMetadata.assessmentReportsDestination) &&
        Objects.equals(this.scope, assessmentMetadata.scope) &&
        Objects.equals(this.roles, assessmentMetadata.roles) &&
        Objects.equals(this.delegations, assessmentMetadata.delegations) &&
        Objects.equals(this.creationTime, assessmentMetadata.creationTime) &&
        Objects.equals(this.lastUpdated, assessmentMetadata.lastUpdated);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, id, description, complianceType, status, assessmentReportsDestination, scope, roles, delegations, creationTime, lastUpdated);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssessmentMetadata {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    complianceType: ").append(toIndentedString(complianceType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    assessmentReportsDestination: ").append(toIndentedString(assessmentReportsDestination)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    roles: ").append(toIndentedString(roles)).append("\n");
    sb.append("    delegations: ").append(toIndentedString(delegations)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("id");
    openapiFields.add("description");
    openapiFields.add("complianceType");
    openapiFields.add("status");
    openapiFields.add("assessmentReportsDestination");
    openapiFields.add("scope");
    openapiFields.add("roles");
    openapiFields.add("delegations");
    openapiFields.add("creationTime");
    openapiFields.add("lastUpdated");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AssessmentMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssessmentMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssessmentMetadata is not found in the empty JSON string", AssessmentMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AssessmentMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssessmentMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("name"));
      }
      // validate the optional field `id`
      if (jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("id"));
      }
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("description"));
      }
      // validate the optional field `complianceType`
      if (jsonObj.get("complianceType") != null && !jsonObj.get("complianceType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("complianceType"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        AssessmentStatus.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `assessmentReportsDestination`
      if (jsonObj.get("assessmentReportsDestination") != null && !jsonObj.get("assessmentReportsDestination").isJsonNull()) {
        AssessmentMetadataAssessmentReportsDestination.validateJsonElement(jsonObj.get("assessmentReportsDestination"));
      }
      // validate the optional field `scope`
      if (jsonObj.get("scope") != null && !jsonObj.get("scope").isJsonNull()) {
        AssessmentMetadataScope.validateJsonElement(jsonObj.get("scope"));
      }
      // validate the optional field `roles`
      if (jsonObj.get("roles") != null && !jsonObj.get("roles").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("roles"));
      }
      // validate the optional field `delegations`
      if (jsonObj.get("delegations") != null && !jsonObj.get("delegations").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("delegations"));
      }
      // validate the optional field `creationTime`
      if (jsonObj.get("creationTime") != null && !jsonObj.get("creationTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("creationTime"));
      }
      // validate the optional field `lastUpdated`
      if (jsonObj.get("lastUpdated") != null && !jsonObj.get("lastUpdated").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("lastUpdated"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssessmentMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssessmentMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssessmentMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssessmentMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<AssessmentMetadata>() {
           @Override
           public void write(JsonWriter out, AssessmentMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssessmentMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AssessmentMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AssessmentMetadata
   * @throws IOException if the JSON string is invalid with respect to AssessmentMetadata
   */
  public static AssessmentMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssessmentMetadata.class);
  }

  /**
   * Convert an instance of AssessmentMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

