/*
 * AWS Audit Manager
 * <p>Welcome to the Audit Manager API reference. This guide is for developers who need detailed information about the Audit Manager API operations, data types, and errors. </p> <p>Audit Manager is a service that provides automated evidence collection so that you can continually audit your Amazon Web Services usage. You can use it to assess the effectiveness of your controls, manage risk, and simplify compliance.</p> <p>Audit Manager provides prebuilt frameworks that structure and automate assessments for a given compliance standard. Frameworks include a prebuilt collection of controls with descriptions and testing procedures. These controls are grouped according to the requirements of the specified compliance standard or regulation. You can also customize frameworks and controls to support internal audits with specific requirements. </p> <p>Use the following links to get started with the Audit Manager API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Audit Manager API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Audit Manager data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Audit Manager, we recommend that you review the <a href=\"https://docs.aws.amazon.com/audit-manager/latest/userguide/what-is.html\"> Audit Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SourceFrequency;
import org.openapitools.client.model.SourceKeyword;
import org.openapitools.client.model.SourceSetUpOption;
import org.openapitools.client.model.SourceType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 *  The data source that determines where Audit Manager collects evidence from for the control. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:17.469617-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ControlMappingSource {
  public static final String SERIALIZED_NAME_SOURCE_ID = "sourceId";
  @SerializedName(SERIALIZED_NAME_SOURCE_ID)
  private String sourceId;

  public static final String SERIALIZED_NAME_SOURCE_NAME = "sourceName";
  @SerializedName(SERIALIZED_NAME_SOURCE_NAME)
  private String sourceName;

  public static final String SERIALIZED_NAME_SOURCE_DESCRIPTION = "sourceDescription";
  @SerializedName(SERIALIZED_NAME_SOURCE_DESCRIPTION)
  private String sourceDescription;

  public static final String SERIALIZED_NAME_SOURCE_SET_UP_OPTION = "sourceSetUpOption";
  @SerializedName(SERIALIZED_NAME_SOURCE_SET_UP_OPTION)
  private SourceSetUpOption sourceSetUpOption;

  public static final String SERIALIZED_NAME_SOURCE_TYPE = "sourceType";
  @SerializedName(SERIALIZED_NAME_SOURCE_TYPE)
  private SourceType sourceType;

  public static final String SERIALIZED_NAME_SOURCE_KEYWORD = "sourceKeyword";
  @SerializedName(SERIALIZED_NAME_SOURCE_KEYWORD)
  private SourceKeyword sourceKeyword;

  public static final String SERIALIZED_NAME_SOURCE_FREQUENCY = "sourceFrequency";
  @SerializedName(SERIALIZED_NAME_SOURCE_FREQUENCY)
  private SourceFrequency sourceFrequency;

  public static final String SERIALIZED_NAME_TROUBLESHOOTING_TEXT = "troubleshootingText";
  @SerializedName(SERIALIZED_NAME_TROUBLESHOOTING_TEXT)
  private String troubleshootingText;

  public ControlMappingSource() {
  }

  public ControlMappingSource sourceId(String sourceId) {
    this.sourceId = sourceId;
    return this;
  }

  /**
   * Get sourceId
   * @return sourceId
   */
  @javax.annotation.Nullable
  public String getSourceId() {
    return sourceId;
  }

  public void setSourceId(String sourceId) {
    this.sourceId = sourceId;
  }


  public ControlMappingSource sourceName(String sourceName) {
    this.sourceName = sourceName;
    return this;
  }

  /**
   * Get sourceName
   * @return sourceName
   */
  @javax.annotation.Nullable
  public String getSourceName() {
    return sourceName;
  }

  public void setSourceName(String sourceName) {
    this.sourceName = sourceName;
  }


  public ControlMappingSource sourceDescription(String sourceDescription) {
    this.sourceDescription = sourceDescription;
    return this;
  }

  /**
   * Get sourceDescription
   * @return sourceDescription
   */
  @javax.annotation.Nullable
  public String getSourceDescription() {
    return sourceDescription;
  }

  public void setSourceDescription(String sourceDescription) {
    this.sourceDescription = sourceDescription;
  }


  public ControlMappingSource sourceSetUpOption(SourceSetUpOption sourceSetUpOption) {
    this.sourceSetUpOption = sourceSetUpOption;
    return this;
  }

  /**
   * Get sourceSetUpOption
   * @return sourceSetUpOption
   */
  @javax.annotation.Nullable
  public SourceSetUpOption getSourceSetUpOption() {
    return sourceSetUpOption;
  }

  public void setSourceSetUpOption(SourceSetUpOption sourceSetUpOption) {
    this.sourceSetUpOption = sourceSetUpOption;
  }


  public ControlMappingSource sourceType(SourceType sourceType) {
    this.sourceType = sourceType;
    return this;
  }

  /**
   * Get sourceType
   * @return sourceType
   */
  @javax.annotation.Nullable
  public SourceType getSourceType() {
    return sourceType;
  }

  public void setSourceType(SourceType sourceType) {
    this.sourceType = sourceType;
  }


  public ControlMappingSource sourceKeyword(SourceKeyword sourceKeyword) {
    this.sourceKeyword = sourceKeyword;
    return this;
  }

  /**
   * Get sourceKeyword
   * @return sourceKeyword
   */
  @javax.annotation.Nullable
  public SourceKeyword getSourceKeyword() {
    return sourceKeyword;
  }

  public void setSourceKeyword(SourceKeyword sourceKeyword) {
    this.sourceKeyword = sourceKeyword;
  }


  public ControlMappingSource sourceFrequency(SourceFrequency sourceFrequency) {
    this.sourceFrequency = sourceFrequency;
    return this;
  }

  /**
   * Get sourceFrequency
   * @return sourceFrequency
   */
  @javax.annotation.Nullable
  public SourceFrequency getSourceFrequency() {
    return sourceFrequency;
  }

  public void setSourceFrequency(SourceFrequency sourceFrequency) {
    this.sourceFrequency = sourceFrequency;
  }


  public ControlMappingSource troubleshootingText(String troubleshootingText) {
    this.troubleshootingText = troubleshootingText;
    return this;
  }

  /**
   * Get troubleshootingText
   * @return troubleshootingText
   */
  @javax.annotation.Nullable
  public String getTroubleshootingText() {
    return troubleshootingText;
  }

  public void setTroubleshootingText(String troubleshootingText) {
    this.troubleshootingText = troubleshootingText;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ControlMappingSource controlMappingSource = (ControlMappingSource) o;
    return Objects.equals(this.sourceId, controlMappingSource.sourceId) &&
        Objects.equals(this.sourceName, controlMappingSource.sourceName) &&
        Objects.equals(this.sourceDescription, controlMappingSource.sourceDescription) &&
        Objects.equals(this.sourceSetUpOption, controlMappingSource.sourceSetUpOption) &&
        Objects.equals(this.sourceType, controlMappingSource.sourceType) &&
        Objects.equals(this.sourceKeyword, controlMappingSource.sourceKeyword) &&
        Objects.equals(this.sourceFrequency, controlMappingSource.sourceFrequency) &&
        Objects.equals(this.troubleshootingText, controlMappingSource.troubleshootingText);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sourceId, sourceName, sourceDescription, sourceSetUpOption, sourceType, sourceKeyword, sourceFrequency, troubleshootingText);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ControlMappingSource {\n");
    sb.append("    sourceId: ").append(toIndentedString(sourceId)).append("\n");
    sb.append("    sourceName: ").append(toIndentedString(sourceName)).append("\n");
    sb.append("    sourceDescription: ").append(toIndentedString(sourceDescription)).append("\n");
    sb.append("    sourceSetUpOption: ").append(toIndentedString(sourceSetUpOption)).append("\n");
    sb.append("    sourceType: ").append(toIndentedString(sourceType)).append("\n");
    sb.append("    sourceKeyword: ").append(toIndentedString(sourceKeyword)).append("\n");
    sb.append("    sourceFrequency: ").append(toIndentedString(sourceFrequency)).append("\n");
    sb.append("    troubleshootingText: ").append(toIndentedString(troubleshootingText)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("sourceId");
    openapiFields.add("sourceName");
    openapiFields.add("sourceDescription");
    openapiFields.add("sourceSetUpOption");
    openapiFields.add("sourceType");
    openapiFields.add("sourceKeyword");
    openapiFields.add("sourceFrequency");
    openapiFields.add("troubleshootingText");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ControlMappingSource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ControlMappingSource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ControlMappingSource is not found in the empty JSON string", ControlMappingSource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ControlMappingSource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ControlMappingSource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `sourceId`
      if (jsonObj.get("sourceId") != null && !jsonObj.get("sourceId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("sourceId"));
      }
      // validate the optional field `sourceName`
      if (jsonObj.get("sourceName") != null && !jsonObj.get("sourceName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("sourceName"));
      }
      // validate the optional field `sourceDescription`
      if (jsonObj.get("sourceDescription") != null && !jsonObj.get("sourceDescription").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("sourceDescription"));
      }
      // validate the optional field `sourceSetUpOption`
      if (jsonObj.get("sourceSetUpOption") != null && !jsonObj.get("sourceSetUpOption").isJsonNull()) {
        SourceSetUpOption.validateJsonElement(jsonObj.get("sourceSetUpOption"));
      }
      // validate the optional field `sourceType`
      if (jsonObj.get("sourceType") != null && !jsonObj.get("sourceType").isJsonNull()) {
        SourceType.validateJsonElement(jsonObj.get("sourceType"));
      }
      // validate the optional field `sourceKeyword`
      if (jsonObj.get("sourceKeyword") != null && !jsonObj.get("sourceKeyword").isJsonNull()) {
        SourceKeyword.validateJsonElement(jsonObj.get("sourceKeyword"));
      }
      // validate the optional field `sourceFrequency`
      if (jsonObj.get("sourceFrequency") != null && !jsonObj.get("sourceFrequency").isJsonNull()) {
        SourceFrequency.validateJsonElement(jsonObj.get("sourceFrequency"));
      }
      // validate the optional field `troubleshootingText`
      if (jsonObj.get("troubleshootingText") != null && !jsonObj.get("troubleshootingText").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("troubleshootingText"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ControlMappingSource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ControlMappingSource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ControlMappingSource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ControlMappingSource.class));

       return (TypeAdapter<T>) new TypeAdapter<ControlMappingSource>() {
           @Override
           public void write(JsonWriter out, ControlMappingSource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ControlMappingSource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ControlMappingSource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ControlMappingSource
   * @throws IOException if the JSON string is invalid with respect to ControlMappingSource
   */
  public static ControlMappingSource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ControlMappingSource.class);
  }

  /**
   * Convert an instance of ControlMappingSource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

