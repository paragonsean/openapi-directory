/*
 * AWS Audit Manager
 * <p>Welcome to the Audit Manager API reference. This guide is for developers who need detailed information about the Audit Manager API operations, data types, and errors. </p> <p>Audit Manager is a service that provides automated evidence collection so that you can continually audit your Amazon Web Services usage. You can use it to assess the effectiveness of your controls, manage risk, and simplify compliance.</p> <p>Audit Manager provides prebuilt frameworks that structure and automate assessments for a given compliance standard. Frameworks include a prebuilt collection of controls with descriptions and testing procedures. These controls are grouped according to the requirements of the specified compliance standard or regulation. You can also customize frameworks and controls to support internal audits with specific requirements. </p> <p>Use the following links to get started with the Audit Manager API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Audit Manager API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Audit Manager data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Audit Manager, we recommend that you review the <a href=\"https://docs.aws.amazon.com/audit-manager/latest/userguide/what-is.html\"> Audit Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ControlMappingSource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateControlRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:17.469617-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateControlRequest {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_TESTING_INFORMATION = "testingInformation";
  @SerializedName(SERIALIZED_NAME_TESTING_INFORMATION)
  private String testingInformation;

  public static final String SERIALIZED_NAME_ACTION_PLAN_TITLE = "actionPlanTitle";
  @SerializedName(SERIALIZED_NAME_ACTION_PLAN_TITLE)
  private String actionPlanTitle;

  public static final String SERIALIZED_NAME_ACTION_PLAN_INSTRUCTIONS = "actionPlanInstructions";
  @SerializedName(SERIALIZED_NAME_ACTION_PLAN_INSTRUCTIONS)
  private String actionPlanInstructions;

  public static final String SERIALIZED_NAME_CONTROL_MAPPING_SOURCES = "controlMappingSources";
  @SerializedName(SERIALIZED_NAME_CONTROL_MAPPING_SOURCES)
  private List<ControlMappingSource> controlMappingSources = new ArrayList<>();

  public UpdateControlRequest() {
  }

  public UpdateControlRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   *  The name of the updated control. 
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public UpdateControlRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   *  The optional description of the control. 
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public UpdateControlRequest testingInformation(String testingInformation) {
    this.testingInformation = testingInformation;
    return this;
  }

  /**
   *  The steps that you should follow to determine if the control is met. 
   * @return testingInformation
   */
  @javax.annotation.Nullable
  public String getTestingInformation() {
    return testingInformation;
  }

  public void setTestingInformation(String testingInformation) {
    this.testingInformation = testingInformation;
  }


  public UpdateControlRequest actionPlanTitle(String actionPlanTitle) {
    this.actionPlanTitle = actionPlanTitle;
    return this;
  }

  /**
   *  The title of the action plan for remediating the control. 
   * @return actionPlanTitle
   */
  @javax.annotation.Nullable
  public String getActionPlanTitle() {
    return actionPlanTitle;
  }

  public void setActionPlanTitle(String actionPlanTitle) {
    this.actionPlanTitle = actionPlanTitle;
  }


  public UpdateControlRequest actionPlanInstructions(String actionPlanInstructions) {
    this.actionPlanInstructions = actionPlanInstructions;
    return this;
  }

  /**
   *  The recommended actions to carry out if the control isn&#39;t fulfilled. 
   * @return actionPlanInstructions
   */
  @javax.annotation.Nullable
  public String getActionPlanInstructions() {
    return actionPlanInstructions;
  }

  public void setActionPlanInstructions(String actionPlanInstructions) {
    this.actionPlanInstructions = actionPlanInstructions;
  }


  public UpdateControlRequest controlMappingSources(List<ControlMappingSource> controlMappingSources) {
    this.controlMappingSources = controlMappingSources;
    return this;
  }

  public UpdateControlRequest addControlMappingSourcesItem(ControlMappingSource controlMappingSourcesItem) {
    if (this.controlMappingSources == null) {
      this.controlMappingSources = new ArrayList<>();
    }
    this.controlMappingSources.add(controlMappingSourcesItem);
    return this;
  }

  /**
   *  The data mapping sources for the control. 
   * @return controlMappingSources
   */
  @javax.annotation.Nonnull
  public List<ControlMappingSource> getControlMappingSources() {
    return controlMappingSources;
  }

  public void setControlMappingSources(List<ControlMappingSource> controlMappingSources) {
    this.controlMappingSources = controlMappingSources;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateControlRequest updateControlRequest = (UpdateControlRequest) o;
    return Objects.equals(this.name, updateControlRequest.name) &&
        Objects.equals(this.description, updateControlRequest.description) &&
        Objects.equals(this.testingInformation, updateControlRequest.testingInformation) &&
        Objects.equals(this.actionPlanTitle, updateControlRequest.actionPlanTitle) &&
        Objects.equals(this.actionPlanInstructions, updateControlRequest.actionPlanInstructions) &&
        Objects.equals(this.controlMappingSources, updateControlRequest.controlMappingSources);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, description, testingInformation, actionPlanTitle, actionPlanInstructions, controlMappingSources);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateControlRequest {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    testingInformation: ").append(toIndentedString(testingInformation)).append("\n");
    sb.append("    actionPlanTitle: ").append(toIndentedString(actionPlanTitle)).append("\n");
    sb.append("    actionPlanInstructions: ").append(toIndentedString(actionPlanInstructions)).append("\n");
    sb.append("    controlMappingSources: ").append(toIndentedString(controlMappingSources)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("testingInformation");
    openapiFields.add("actionPlanTitle");
    openapiFields.add("actionPlanInstructions");
    openapiFields.add("controlMappingSources");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("controlMappingSources");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateControlRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateControlRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateControlRequest is not found in the empty JSON string", UpdateControlRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateControlRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateControlRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateControlRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("testingInformation") != null && !jsonObj.get("testingInformation").isJsonNull()) && !jsonObj.get("testingInformation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `testingInformation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("testingInformation").toString()));
      }
      if ((jsonObj.get("actionPlanTitle") != null && !jsonObj.get("actionPlanTitle").isJsonNull()) && !jsonObj.get("actionPlanTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `actionPlanTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("actionPlanTitle").toString()));
      }
      if ((jsonObj.get("actionPlanInstructions") != null && !jsonObj.get("actionPlanInstructions").isJsonNull()) && !jsonObj.get("actionPlanInstructions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `actionPlanInstructions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("actionPlanInstructions").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("controlMappingSources").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `controlMappingSources` to be an array in the JSON string but got `%s`", jsonObj.get("controlMappingSources").toString()));
      }

      JsonArray jsonArraycontrolMappingSources = jsonObj.getAsJsonArray("controlMappingSources");
      // validate the required field `controlMappingSources` (array)
      for (int i = 0; i < jsonArraycontrolMappingSources.size(); i++) {
        ControlMappingSource.validateJsonElement(jsonArraycontrolMappingSources.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateControlRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateControlRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateControlRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateControlRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateControlRequest>() {
           @Override
           public void write(JsonWriter out, UpdateControlRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateControlRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateControlRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateControlRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateControlRequest
   */
  public static UpdateControlRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateControlRequest.class);
  }

  /**
   * Convert an instance of UpdateControlRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

