/*
 * AWS Audit Manager
 * <p>Welcome to the Audit Manager API reference. This guide is for developers who need detailed information about the Audit Manager API operations, data types, and errors. </p> <p>Audit Manager is a service that provides automated evidence collection so that you can continually audit your Amazon Web Services usage. You can use it to assess the effectiveness of your controls, manage risk, and simplify compliance.</p> <p>Audit Manager provides prebuilt frameworks that structure and automate assessments for a given compliance standard. Frameworks include a prebuilt collection of controls with descriptions and testing procedures. These controls are grouped according to the requirements of the specified compliance standard or regulation. You can also customize frameworks and controls to support internal audits with specific requirements. </p> <p>Use the following links to get started with the Audit Manager API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Audit Manager API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Audit Manager data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Audit Manager, we recommend that you review the <a href=\"https://docs.aws.amazon.com/audit-manager/latest/userguide/what-is.html\"> Audit Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateAssessmentRequestAssessmentReportsDestination;
import org.openapitools.client.model.CreateAssessmentRequestScope;
import org.openapitools.client.model.Role;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateAssessmentRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:17.469617-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateAssessmentRequest {
  public static final String SERIALIZED_NAME_ASSESSMENT_NAME = "assessmentName";
  @SerializedName(SERIALIZED_NAME_ASSESSMENT_NAME)
  private String assessmentName;

  public static final String SERIALIZED_NAME_ASSESSMENT_DESCRIPTION = "assessmentDescription";
  @SerializedName(SERIALIZED_NAME_ASSESSMENT_DESCRIPTION)
  private String assessmentDescription;

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private CreateAssessmentRequestScope scope;

  public static final String SERIALIZED_NAME_ASSESSMENT_REPORTS_DESTINATION = "assessmentReportsDestination";
  @SerializedName(SERIALIZED_NAME_ASSESSMENT_REPORTS_DESTINATION)
  private CreateAssessmentRequestAssessmentReportsDestination assessmentReportsDestination;

  public static final String SERIALIZED_NAME_ROLES = "roles";
  @SerializedName(SERIALIZED_NAME_ROLES)
  private List<Role> roles = new ArrayList<>();

  public UpdateAssessmentRequest() {
  }

  public UpdateAssessmentRequest assessmentName(String assessmentName) {
    this.assessmentName = assessmentName;
    return this;
  }

  /**
   *  The name of the assessment to be updated. 
   * @return assessmentName
   */
  @javax.annotation.Nullable
  public String getAssessmentName() {
    return assessmentName;
  }

  public void setAssessmentName(String assessmentName) {
    this.assessmentName = assessmentName;
  }


  public UpdateAssessmentRequest assessmentDescription(String assessmentDescription) {
    this.assessmentDescription = assessmentDescription;
    return this;
  }

  /**
   *  The description of the assessment. 
   * @return assessmentDescription
   */
  @javax.annotation.Nullable
  public String getAssessmentDescription() {
    return assessmentDescription;
  }

  public void setAssessmentDescription(String assessmentDescription) {
    this.assessmentDescription = assessmentDescription;
  }


  public UpdateAssessmentRequest scope(CreateAssessmentRequestScope scope) {
    this.scope = scope;
    return this;
  }

  /**
   * Get scope
   * @return scope
   */
  @javax.annotation.Nonnull
  public CreateAssessmentRequestScope getScope() {
    return scope;
  }

  public void setScope(CreateAssessmentRequestScope scope) {
    this.scope = scope;
  }


  public UpdateAssessmentRequest assessmentReportsDestination(CreateAssessmentRequestAssessmentReportsDestination assessmentReportsDestination) {
    this.assessmentReportsDestination = assessmentReportsDestination;
    return this;
  }

  /**
   * Get assessmentReportsDestination
   * @return assessmentReportsDestination
   */
  @javax.annotation.Nullable
  public CreateAssessmentRequestAssessmentReportsDestination getAssessmentReportsDestination() {
    return assessmentReportsDestination;
  }

  public void setAssessmentReportsDestination(CreateAssessmentRequestAssessmentReportsDestination assessmentReportsDestination) {
    this.assessmentReportsDestination = assessmentReportsDestination;
  }


  public UpdateAssessmentRequest roles(List<Role> roles) {
    this.roles = roles;
    return this;
  }

  public UpdateAssessmentRequest addRolesItem(Role rolesItem) {
    if (this.roles == null) {
      this.roles = new ArrayList<>();
    }
    this.roles.add(rolesItem);
    return this;
  }

  /**
   *  The list of roles for the assessment. 
   * @return roles
   */
  @javax.annotation.Nullable
  public List<Role> getRoles() {
    return roles;
  }

  public void setRoles(List<Role> roles) {
    this.roles = roles;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateAssessmentRequest updateAssessmentRequest = (UpdateAssessmentRequest) o;
    return Objects.equals(this.assessmentName, updateAssessmentRequest.assessmentName) &&
        Objects.equals(this.assessmentDescription, updateAssessmentRequest.assessmentDescription) &&
        Objects.equals(this.scope, updateAssessmentRequest.scope) &&
        Objects.equals(this.assessmentReportsDestination, updateAssessmentRequest.assessmentReportsDestination) &&
        Objects.equals(this.roles, updateAssessmentRequest.roles);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assessmentName, assessmentDescription, scope, assessmentReportsDestination, roles);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateAssessmentRequest {\n");
    sb.append("    assessmentName: ").append(toIndentedString(assessmentName)).append("\n");
    sb.append("    assessmentDescription: ").append(toIndentedString(assessmentDescription)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    assessmentReportsDestination: ").append(toIndentedString(assessmentReportsDestination)).append("\n");
    sb.append("    roles: ").append(toIndentedString(roles)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assessmentName");
    openapiFields.add("assessmentDescription");
    openapiFields.add("scope");
    openapiFields.add("assessmentReportsDestination");
    openapiFields.add("roles");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("scope");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateAssessmentRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateAssessmentRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateAssessmentRequest is not found in the empty JSON string", UpdateAssessmentRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateAssessmentRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateAssessmentRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateAssessmentRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("assessmentName") != null && !jsonObj.get("assessmentName").isJsonNull()) && !jsonObj.get("assessmentName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assessmentName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assessmentName").toString()));
      }
      if ((jsonObj.get("assessmentDescription") != null && !jsonObj.get("assessmentDescription").isJsonNull()) && !jsonObj.get("assessmentDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assessmentDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assessmentDescription").toString()));
      }
      // validate the required field `scope`
      CreateAssessmentRequestScope.validateJsonElement(jsonObj.get("scope"));
      // validate the optional field `assessmentReportsDestination`
      if (jsonObj.get("assessmentReportsDestination") != null && !jsonObj.get("assessmentReportsDestination").isJsonNull()) {
        CreateAssessmentRequestAssessmentReportsDestination.validateJsonElement(jsonObj.get("assessmentReportsDestination"));
      }
      if (jsonObj.get("roles") != null && !jsonObj.get("roles").isJsonNull()) {
        JsonArray jsonArrayroles = jsonObj.getAsJsonArray("roles");
        if (jsonArrayroles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("roles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `roles` to be an array in the JSON string but got `%s`", jsonObj.get("roles").toString()));
          }

          // validate the optional field `roles` (array)
          for (int i = 0; i < jsonArrayroles.size(); i++) {
            Role.validateJsonElement(jsonArrayroles.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateAssessmentRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateAssessmentRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateAssessmentRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateAssessmentRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateAssessmentRequest>() {
           @Override
           public void write(JsonWriter out, UpdateAssessmentRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateAssessmentRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateAssessmentRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateAssessmentRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateAssessmentRequest
   */
  public static UpdateAssessmentRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateAssessmentRequest.class);
  }

  /**
   * Convert an instance of UpdateAssessmentRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

