/*
 * AWS Audit Manager
 * <p>Welcome to the Audit Manager API reference. This guide is for developers who need detailed information about the Audit Manager API operations, data types, and errors. </p> <p>Audit Manager is a service that provides automated evidence collection so that you can continually audit your Amazon Web Services usage. You can use it to assess the effectiveness of your controls, manage risk, and simplify compliance.</p> <p>Audit Manager provides prebuilt frameworks that structure and automate assessments for a given compliance standard. Frameworks include a prebuilt collection of controls with descriptions and testing procedures. These controls are grouped according to the requirements of the specified compliance standard or regulation. You can also customize frameworks and controls to support internal audits with specific requirements. </p> <p>Use the following links to get started with the Audit Manager API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Audit Manager API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Audit Manager data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Audit Manager, we recommend that you review the <a href=\"https://docs.aws.amazon.com/audit-manager/latest/userguide/what-is.html\"> Audit Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AssociateAssessmentReportEvidenceFolderRequest;
import org.openapitools.client.model.BatchAssociateAssessmentReportEvidenceRequest;
import org.openapitools.client.model.BatchAssociateAssessmentReportEvidenceResponse;
import org.openapitools.client.model.BatchCreateDelegationByAssessmentRequest;
import org.openapitools.client.model.BatchCreateDelegationByAssessmentResponse;
import org.openapitools.client.model.BatchDeleteDelegationByAssessmentRequest;
import org.openapitools.client.model.BatchDeleteDelegationByAssessmentResponse;
import org.openapitools.client.model.BatchDisassociateAssessmentReportEvidenceResponse;
import org.openapitools.client.model.BatchImportEvidenceToAssessmentControlRequest;
import org.openapitools.client.model.BatchImportEvidenceToAssessmentControlResponse;
import org.openapitools.client.model.CreateAssessmentFrameworkRequest;
import org.openapitools.client.model.CreateAssessmentFrameworkResponse;
import org.openapitools.client.model.CreateAssessmentReportRequest;
import org.openapitools.client.model.CreateAssessmentReportResponse;
import org.openapitools.client.model.CreateAssessmentRequest;
import org.openapitools.client.model.CreateAssessmentResponse;
import org.openapitools.client.model.CreateControlRequest;
import org.openapitools.client.model.CreateControlResponse;
import org.openapitools.client.model.DeregisterAccountResponse;
import org.openapitools.client.model.DeregisterOrganizationAdminAccountRequest;
import org.openapitools.client.model.DisassociateAssessmentReportEvidenceFolderRequest;
import org.openapitools.client.model.GetAccountStatusResponse;
import org.openapitools.client.model.GetAssessmentFrameworkResponse;
import org.openapitools.client.model.GetAssessmentReportUrlResponse;
import org.openapitools.client.model.GetAssessmentResponse;
import org.openapitools.client.model.GetChangeLogsResponse;
import org.openapitools.client.model.GetControlResponse;
import org.openapitools.client.model.GetDelegationsResponse;
import org.openapitools.client.model.GetEvidenceByEvidenceFolderResponse;
import org.openapitools.client.model.GetEvidenceFileUploadUrlResponse;
import org.openapitools.client.model.GetEvidenceFolderResponse;
import org.openapitools.client.model.GetEvidenceFoldersByAssessmentControlResponse;
import org.openapitools.client.model.GetEvidenceFoldersByAssessmentResponse;
import org.openapitools.client.model.GetEvidenceResponse;
import org.openapitools.client.model.GetInsightsByAssessmentResponse;
import org.openapitools.client.model.GetInsightsResponse;
import org.openapitools.client.model.GetOrganizationAdminAccountResponse;
import org.openapitools.client.model.GetServicesInScopeResponse;
import org.openapitools.client.model.GetSettingsResponse;
import org.openapitools.client.model.ListAssessmentControlInsightsByControlDomainResponse;
import org.openapitools.client.model.ListAssessmentFrameworkShareRequestsResponse;
import org.openapitools.client.model.ListAssessmentFrameworksResponse;
import org.openapitools.client.model.ListAssessmentReportsResponse;
import org.openapitools.client.model.ListAssessmentsResponse;
import org.openapitools.client.model.ListControlDomainInsightsByAssessmentResponse;
import org.openapitools.client.model.ListControlDomainInsightsResponse;
import org.openapitools.client.model.ListControlInsightsByControlDomainResponse;
import org.openapitools.client.model.ListControlsResponse;
import org.openapitools.client.model.ListKeywordsForDataSourceResponse;
import org.openapitools.client.model.ListNotificationsResponse;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.RegisterAccountRequest;
import org.openapitools.client.model.RegisterAccountResponse;
import org.openapitools.client.model.RegisterOrganizationAdminAccountRequest;
import org.openapitools.client.model.RegisterOrganizationAdminAccountResponse;
import org.openapitools.client.model.StartAssessmentFrameworkShareRequest;
import org.openapitools.client.model.StartAssessmentFrameworkShareResponse;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UpdateAssessmentControlRequest;
import org.openapitools.client.model.UpdateAssessmentControlResponse;
import org.openapitools.client.model.UpdateAssessmentControlSetStatusRequest;
import org.openapitools.client.model.UpdateAssessmentControlSetStatusResponse;
import org.openapitools.client.model.UpdateAssessmentFrameworkRequest;
import org.openapitools.client.model.UpdateAssessmentFrameworkResponse;
import org.openapitools.client.model.UpdateAssessmentFrameworkShareRequest;
import org.openapitools.client.model.UpdateAssessmentFrameworkShareResponse;
import org.openapitools.client.model.UpdateAssessmentRequest;
import org.openapitools.client.model.UpdateAssessmentResponse;
import org.openapitools.client.model.UpdateAssessmentStatusRequest;
import org.openapitools.client.model.UpdateAssessmentStatusResponse;
import org.openapitools.client.model.UpdateControlRequest;
import org.openapitools.client.model.UpdateControlResponse;
import org.openapitools.client.model.UpdateSettingsRequest;
import org.openapitools.client.model.UpdateSettingsResponse;
import org.openapitools.client.model.ValidateAssessmentReportIntegrityRequest;
import org.openapitools.client.model.ValidateAssessmentReportIntegrityResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     *  Associates an evidence folder to an assessment report in an Audit Manager assessment. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associateAssessmentReportEvidenceFolderTest() throws ApiException {
        String assessmentId = null;
        AssociateAssessmentReportEvidenceFolderRequest associateAssessmentReportEvidenceFolderRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.associateAssessmentReportEvidenceFolder(assessmentId, associateAssessmentReportEvidenceFolderRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Associates a list of evidence to an assessment report in an Audit Manager assessment. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchAssociateAssessmentReportEvidenceTest() throws ApiException {
        String assessmentId = null;
        BatchAssociateAssessmentReportEvidenceRequest batchAssociateAssessmentReportEvidenceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchAssociateAssessmentReportEvidenceResponse response = api.batchAssociateAssessmentReportEvidence(assessmentId, batchAssociateAssessmentReportEvidenceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Creates a batch of delegations for an assessment in Audit Manager. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchCreateDelegationByAssessmentTest() throws ApiException {
        String assessmentId = null;
        BatchCreateDelegationByAssessmentRequest batchCreateDelegationByAssessmentRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchCreateDelegationByAssessmentResponse response = api.batchCreateDelegationByAssessment(assessmentId, batchCreateDelegationByAssessmentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Deletes a batch of delegations for an assessment in Audit Manager. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchDeleteDelegationByAssessmentTest() throws ApiException {
        String assessmentId = null;
        BatchDeleteDelegationByAssessmentRequest batchDeleteDelegationByAssessmentRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchDeleteDelegationByAssessmentResponse response = api.batchDeleteDelegationByAssessment(assessmentId, batchDeleteDelegationByAssessmentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Disassociates a list of evidence from an assessment report in Audit Manager. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchDisassociateAssessmentReportEvidenceTest() throws ApiException {
        String assessmentId = null;
        BatchAssociateAssessmentReportEvidenceRequest batchAssociateAssessmentReportEvidenceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchDisassociateAssessmentReportEvidenceResponse response = api.batchDisassociateAssessmentReportEvidence(assessmentId, batchAssociateAssessmentReportEvidenceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Adds one or more pieces of evidence to a control in an Audit Manager assessment. &lt;/p&gt; &lt;p&gt;You can import manual evidence from any S3 bucket by specifying the S3 URI of the object. You can also upload a file from your browser, or enter plain text in response to a risk assessment question. &lt;/p&gt; &lt;p&gt;The following restrictions apply to this action:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;manualEvidence&lt;/code&gt; can be only one of the following: &lt;code&gt;evidenceFileName&lt;/code&gt;, &lt;code&gt;s3ResourcePath&lt;/code&gt;, or &lt;code&gt;textResponse&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Maximum size of an individual evidence file: 100 MB&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Number of daily manual evidence uploads per control: 100&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Supported file formats: See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/audit-manager/latest/userguide/upload-evidence.html#supported-manual-evidence-files\&quot;&gt;Supported file types for manual evidence&lt;/a&gt; in the &lt;i&gt;Audit Manager User Guide&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information about Audit Manager service restrictions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/audit-manager/latest/userguide/service-quotas.html\&quot;&gt;Quotas and restrictions for Audit Manager&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchImportEvidenceToAssessmentControlTest() throws ApiException {
        String assessmentId = null;
        String controlSetId = null;
        String controlId = null;
        BatchImportEvidenceToAssessmentControlRequest batchImportEvidenceToAssessmentControlRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchImportEvidenceToAssessmentControlResponse response = api.batchImportEvidenceToAssessmentControl(assessmentId, controlSetId, controlId, batchImportEvidenceToAssessmentControlRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Creates an assessment in Audit Manager. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAssessmentTest() throws ApiException {
        CreateAssessmentRequest createAssessmentRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateAssessmentResponse response = api.createAssessment(createAssessmentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Creates a custom framework in Audit Manager. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAssessmentFrameworkTest() throws ApiException {
        CreateAssessmentFrameworkRequest createAssessmentFrameworkRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateAssessmentFrameworkResponse response = api.createAssessmentFramework(createAssessmentFrameworkRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Creates an assessment report for the specified assessment. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAssessmentReportTest() throws ApiException {
        String assessmentId = null;
        CreateAssessmentReportRequest createAssessmentReportRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateAssessmentReportResponse response = api.createAssessmentReport(assessmentId, createAssessmentReportRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Creates a new custom control in Audit Manager. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createControlTest() throws ApiException {
        CreateControlRequest createControlRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateControlResponse response = api.createControl(createControlRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Deletes an assessment in Audit Manager. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAssessmentTest() throws ApiException {
        String assessmentId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteAssessment(assessmentId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Deletes a custom framework in Audit Manager. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAssessmentFrameworkTest() throws ApiException {
        String frameworkId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteAssessmentFramework(frameworkId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Deletes a share request for a custom framework in Audit Manager. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAssessmentFrameworkShareTest() throws ApiException {
        String requestId = null;
        String requestType = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteAssessmentFrameworkShare(requestId, requestType, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes an assessment report in Audit Manager. &lt;/p&gt; &lt;p&gt;When you run the &lt;code&gt;DeleteAssessmentReport&lt;/code&gt; operation, Audit Manager attempts to delete the following data:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;The specified assessment report that’s stored in your S3 bucket&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The associated metadata that’s stored in Audit Manager&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;If Audit Manager can’t access the assessment report in your S3 bucket, the report isn’t deleted. In this event, the &lt;code&gt;DeleteAssessmentReport&lt;/code&gt; operation doesn’t fail. Instead, it proceeds to delete the associated metadata only. You must then delete the assessment report from the S3 bucket yourself. &lt;/p&gt; &lt;p&gt;This scenario happens when Audit Manager receives a &lt;code&gt;403 (Forbidden)&lt;/code&gt; or &lt;code&gt;404 (Not Found)&lt;/code&gt; error from Amazon S3. To avoid this, make sure that your S3 bucket is available, and that you configured the correct permissions for Audit Manager to delete resources in your S3 bucket. For an example permissions policy that you can use, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/audit-manager/latest/userguide/security_iam_id-based-policy-examples.html#full-administrator-access-assessment-report-destination\&quot;&gt;Assessment report destination permissions&lt;/a&gt; in the &lt;i&gt;Audit Manager User Guide&lt;/i&gt;. For information about the issues that could cause a &lt;code&gt;403 (Forbidden)&lt;/code&gt; or &lt;code&gt;404 (Not Found&lt;/code&gt;) error from Amazon S3, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonS3/latest/API/ErrorResponses.html#ErrorCodeList\&quot;&gt;List of Error Codes&lt;/a&gt; in the &lt;i&gt;Amazon Simple Storage Service API Reference&lt;/i&gt;. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAssessmentReportTest() throws ApiException {
        String assessmentId = null;
        String assessmentReportId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteAssessmentReport(assessmentId, assessmentReportId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt; Deletes a custom control in Audit Manager. &lt;/p&gt; &lt;important&gt; &lt;p&gt;When you invoke this operation, the custom control is deleted from any frameworks or assessments that it’s currently part of. As a result, Audit Manager will stop collecting evidence for that custom control in all of your assessments. This includes assessments that you previously created before you deleted the custom control.&lt;/p&gt; &lt;/important&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteControlTest() throws ApiException {
        String controlId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteControl(controlId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt; Deregisters an account in Audit Manager. &lt;/p&gt; &lt;note&gt; &lt;p&gt;Before you deregister, you can use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_UpdateSettings.html\&quot;&gt;UpdateSettings&lt;/a&gt; API operation to set your preferred data retention policy. By default, Audit Manager retains your data. If you want to delete your data, you can use the &lt;code&gt;DeregistrationPolicy&lt;/code&gt; attribute to request the deletion of your data. &lt;/p&gt; &lt;p&gt;For more information about data retention, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/audit-manager/latest/userguide/data-protection.html\&quot;&gt;Data Protection&lt;/a&gt; in the &lt;i&gt;Audit Manager User Guide&lt;/i&gt;. &lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deregisterAccountTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeregisterAccountResponse response = api.deregisterAccount(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Removes the specified Amazon Web Services account as a delegated administrator for Audit Manager. &lt;/p&gt; &lt;p&gt;When you remove a delegated administrator from your Audit Manager settings, you continue to have access to the evidence that you previously collected under that account. This is also the case when you deregister a delegated administrator from Organizations. However, Audit Manager stops collecting and attaching evidence to that delegated administrator account moving forward.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Keep in mind the following cleanup task if you use evidence finder:&lt;/p&gt; &lt;p&gt;Before you use your management account to remove a delegated administrator, make sure that the current delegated administrator account signs in to Audit Manager and disables evidence finder first. Disabling evidence finder automatically deletes the event data store that was created in their account when they enabled evidence finder. If this task isn’t completed, the event data store remains in their account. In this case, we recommend that the original delegated administrator goes to CloudTrail Lake and manually &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awscloudtrail/latest/userguide/query-eds-disable-termination.html\&quot;&gt;deletes the event data store&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;This cleanup task is necessary to ensure that you don&#39;t end up with multiple event data stores. Audit Manager ignores an unused event data store after you remove or change a delegated administrator account. However, the unused event data store continues to incur storage costs from CloudTrail Lake if you don&#39;t delete it.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;When you deregister a delegated administrator account for Audit Manager, the data for that account isn’t deleted. If you want to delete resource data for a delegated administrator account, you must perform that task separately before you deregister the account. Either, you can do this in the Audit Manager console. Or, you can use one of the delete API operations that are provided by Audit Manager. &lt;/p&gt; &lt;p&gt;To delete your Audit Manager resource data, see the following instructions: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_DeleteAssessment.html\&quot;&gt;DeleteAssessment&lt;/a&gt; (see also: &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/audit-manager/latest/userguide/delete-assessment.html\&quot;&gt;Deleting an assessment&lt;/a&gt; in the &lt;i&gt;Audit Manager User Guide&lt;/i&gt;)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_DeleteAssessmentFramework.html\&quot;&gt;DeleteAssessmentFramework&lt;/a&gt; (see also: &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/audit-manager/latest/userguide/delete-custom-framework.html\&quot;&gt;Deleting a custom framework&lt;/a&gt; in the &lt;i&gt;Audit Manager User Guide&lt;/i&gt;)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_DeleteAssessmentFrameworkShare.html\&quot;&gt;DeleteAssessmentFrameworkShare&lt;/a&gt; (see also: &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/audit-manager/latest/userguide/deleting-shared-framework-requests.html\&quot;&gt;Deleting a share request&lt;/a&gt; in the &lt;i&gt;Audit Manager User Guide&lt;/i&gt;)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_DeleteAssessmentReport.html\&quot;&gt;DeleteAssessmentReport&lt;/a&gt; (see also: &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/audit-manager/latest/userguide/generate-assessment-report.html#delete-assessment-report-steps\&quot;&gt;Deleting an assessment report&lt;/a&gt; in the &lt;i&gt;Audit Manager User Guide&lt;/i&gt;)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_DeleteControl.html\&quot;&gt;DeleteControl&lt;/a&gt; (see also: &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/audit-manager/latest/userguide/delete-controls.html\&quot;&gt;Deleting a custom control&lt;/a&gt; in the &lt;i&gt;Audit Manager User Guide&lt;/i&gt;)&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;At this time, Audit Manager doesn&#39;t provide an option to delete evidence for a specific delegated administrator. Instead, when your management account deregisters Audit Manager, we perform a cleanup for the current delegated administrator account at the time of deregistration.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deregisterOrganizationAdminAccountTest() throws ApiException {
        DeregisterOrganizationAdminAccountRequest deregisterOrganizationAdminAccountRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deregisterOrganizationAdminAccount(deregisterOrganizationAdminAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Disassociates an evidence folder from the specified assessment report in Audit Manager. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociateAssessmentReportEvidenceFolderTest() throws ApiException {
        String assessmentId = null;
        DisassociateAssessmentReportEvidenceFolderRequest disassociateAssessmentReportEvidenceFolderRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.disassociateAssessmentReportEvidenceFolder(assessmentId, disassociateAssessmentReportEvidenceFolderRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Gets the registration status of an account in Audit Manager. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAccountStatusTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetAccountStatusResponse response = api.getAccountStatus(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about a specified assessment. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAssessmentTest() throws ApiException {
        String assessmentId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetAssessmentResponse response = api.getAssessment(assessmentId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about a specified framework.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAssessmentFrameworkTest() throws ApiException {
        String frameworkId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetAssessmentFrameworkResponse response = api.getAssessmentFramework(frameworkId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Gets the URL of an assessment report in Audit Manager. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAssessmentReportUrlTest() throws ApiException {
        String assessmentReportId = null;
        String assessmentId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetAssessmentReportUrlResponse response = api.getAssessmentReportUrl(assessmentReportId, assessmentId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Gets a list of changelogs from Audit Manager. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChangeLogsTest() throws ApiException {
        String assessmentId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String controlSetId = null;
        String controlId = null;
        String nextToken = null;
        Integer maxResults = null;
        GetChangeLogsResponse response = api.getChangeLogs(assessmentId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, controlSetId, controlId, nextToken, maxResults);
        // TODO: test validations
    }

    /**
     *  Gets information about a specified control.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getControlTest() throws ApiException {
        String controlId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetControlResponse response = api.getControl(controlId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Gets a list of delegations from an audit owner to a delegate. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDelegationsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        GetDelegationsResponse response = api.getDelegations(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults);
        // TODO: test validations
    }

    /**
     *  Gets information about a specified evidence item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEvidenceTest() throws ApiException {
        String assessmentId = null;
        String controlSetId = null;
        String evidenceFolderId = null;
        String evidenceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetEvidenceResponse response = api.getEvidence(assessmentId, controlSetId, evidenceFolderId, evidenceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Gets all evidence from a specified evidence folder in Audit Manager. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEvidenceByEvidenceFolderTest() throws ApiException {
        String assessmentId = null;
        String controlSetId = null;
        String evidenceFolderId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        GetEvidenceByEvidenceFolderResponse response = api.getEvidenceByEvidenceFolder(assessmentId, controlSetId, evidenceFolderId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a presigned Amazon S3 URL that can be used to upload a file as manual evidence. For instructions on how to use this operation, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/audit-manager/latest/userguide/upload-evidence.html#how-to-upload-manual-evidence-files\&quot;&gt;Upload a file from your browser &lt;/a&gt; in the &lt;i&gt;Audit Manager User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;The following restrictions apply to this operation:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Maximum size of an individual evidence file: 100 MB&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Number of daily manual evidence uploads per control: 100&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Supported file formats: See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/audit-manager/latest/userguide/upload-evidence.html#supported-manual-evidence-files\&quot;&gt;Supported file types for manual evidence&lt;/a&gt; in the &lt;i&gt;Audit Manager User Guide&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information about Audit Manager service restrictions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/audit-manager/latest/userguide/service-quotas.html\&quot;&gt;Quotas and restrictions for Audit Manager&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEvidenceFileUploadUrlTest() throws ApiException {
        String fileName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetEvidenceFileUploadUrlResponse response = api.getEvidenceFileUploadUrl(fileName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Gets an evidence folder from a specified assessment in Audit Manager. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEvidenceFolderTest() throws ApiException {
        String assessmentId = null;
        String controlSetId = null;
        String evidenceFolderId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetEvidenceFolderResponse response = api.getEvidenceFolder(assessmentId, controlSetId, evidenceFolderId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Gets the evidence folders from a specified assessment in Audit Manager. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEvidenceFoldersByAssessmentTest() throws ApiException {
        String assessmentId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        GetEvidenceFoldersByAssessmentResponse response = api.getEvidenceFoldersByAssessment(assessmentId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults);
        // TODO: test validations
    }

    /**
     *  Gets a list of evidence folders that are associated with a specified control in an Audit Manager assessment. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEvidenceFoldersByAssessmentControlTest() throws ApiException {
        String assessmentId = null;
        String controlSetId = null;
        String controlId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        GetEvidenceFoldersByAssessmentControlResponse response = api.getEvidenceFoldersByAssessmentControl(assessmentId, controlSetId, controlId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults);
        // TODO: test validations
    }

    /**
     * Gets the latest analytics data for all your current active assessments. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInsightsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetInsightsResponse response = api.getInsights(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets the latest analytics data for a specific active assessment. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInsightsByAssessmentTest() throws ApiException {
        String assessmentId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetInsightsByAssessmentResponse response = api.getInsightsByAssessment(assessmentId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Gets the name of the delegated Amazon Web Services administrator account for a specified organization. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationAdminAccountTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetOrganizationAdminAccountResponse response = api.getOrganizationAdminAccount(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets a list of all of the Amazon Web Services that you can choose to include in your assessment. When you &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_CreateAssessment.html\&quot;&gt;create an assessment&lt;/a&gt;, specify which of these services you want to include to narrow the assessment&#39;s &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Scope.html\&quot;&gt;scope&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getServicesInScopeTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetServicesInScopeResponse response = api.getServicesInScope(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Gets the settings for a specified Amazon Web Services account. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSettingsTest() throws ApiException {
        String attribute = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetSettingsResponse response = api.getSettings(attribute, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists the latest analytics data for controls within a specific control domain and a specific active assessment.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Control insights are listed only if the control belongs to the control domain and assessment that was specified. Moreover, the control must have collected evidence on the &lt;code&gt;lastUpdated&lt;/code&gt; date of &lt;code&gt;controlInsightsByAssessment&lt;/code&gt;. If neither of these conditions are met, no data is listed for that control. &lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAssessmentControlInsightsByControlDomainTest() throws ApiException {
        String controlDomainId = null;
        String assessmentId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        ListAssessmentControlInsightsByControlDomainResponse response = api.listAssessmentControlInsightsByControlDomain(controlDomainId, assessmentId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults);
        // TODO: test validations
    }

    /**
     *  Returns a list of sent or received share requests for custom frameworks in Audit Manager. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAssessmentFrameworkShareRequestsTest() throws ApiException {
        String requestType = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        ListAssessmentFrameworkShareRequestsResponse response = api.listAssessmentFrameworkShareRequests(requestType, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults);
        // TODO: test validations
    }

    /**
     *  Returns a list of the frameworks that are available in the Audit Manager framework library. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAssessmentFrameworksTest() throws ApiException {
        String frameworkType = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        ListAssessmentFrameworksResponse response = api.listAssessmentFrameworks(frameworkType, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults);
        // TODO: test validations
    }

    /**
     *  Returns a list of assessment reports created in Audit Manager. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAssessmentReportsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        ListAssessmentReportsResponse response = api.listAssessmentReports(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults);
        // TODO: test validations
    }

    /**
     *  Returns a list of current and past assessments from Audit Manager. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAssessmentsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String status = null;
        String nextToken = null;
        Integer maxResults = null;
        ListAssessmentsResponse response = api.listAssessments(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, status, nextToken, maxResults);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists the latest analytics data for control domains across all of your active assessments. &lt;/p&gt; &lt;note&gt; &lt;p&gt;A control domain is listed only if at least one of the controls within that domain collected evidence on the &lt;code&gt;lastUpdated&lt;/code&gt; date of &lt;code&gt;controlDomainInsights&lt;/code&gt;. If this condition isn’t met, no data is listed for that control domain.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listControlDomainInsightsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        ListControlDomainInsightsResponse response = api.listControlDomainInsights(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists analytics data for control domains within a specified active assessment.&lt;/p&gt; &lt;note&gt; &lt;p&gt;A control domain is listed only if at least one of the controls within that domain collected evidence on the &lt;code&gt;lastUpdated&lt;/code&gt; date of &lt;code&gt;controlDomainInsights&lt;/code&gt;. If this condition isn’t met, no data is listed for that domain.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listControlDomainInsightsByAssessmentTest() throws ApiException {
        String assessmentId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        ListControlDomainInsightsByAssessmentResponse response = api.listControlDomainInsightsByAssessment(assessmentId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists the latest analytics data for controls within a specific control domain across all active assessments.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Control insights are listed only if the control belongs to the control domain that was specified and the control collected evidence on the &lt;code&gt;lastUpdated&lt;/code&gt; date of &lt;code&gt;controlInsightsMetadata&lt;/code&gt;. If neither of these conditions are met, no data is listed for that control. &lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listControlInsightsByControlDomainTest() throws ApiException {
        String controlDomainId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        ListControlInsightsByControlDomainResponse response = api.listControlInsightsByControlDomain(controlDomainId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults);
        // TODO: test validations
    }

    /**
     *  Returns a list of controls from Audit Manager. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listControlsTest() throws ApiException {
        String controlType = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        ListControlsResponse response = api.listControls(controlType, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults);
        // TODO: test validations
    }

    /**
     *  Returns a list of keywords that are pre-mapped to the specified control data source. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listKeywordsForDataSourceTest() throws ApiException {
        String source = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        ListKeywordsForDataSourceResponse response = api.listKeywordsForDataSource(source, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults);
        // TODO: test validations
    }

    /**
     *  Returns a list of all Audit Manager notifications. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listNotificationsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        ListNotificationsResponse response = api.listNotifications(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults);
        // TODO: test validations
    }

    /**
     *  Returns a list of tags for the specified resource in Audit Manager. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String resourceArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceResponse response = api.listTagsForResource(resourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Enables Audit Manager for the specified Amazon Web Services account. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registerAccountTest() throws ApiException {
        RegisterAccountRequest registerAccountRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RegisterAccountResponse response = api.registerAccount(registerAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Enables an Amazon Web Services account within the organization as the delegated administrator for Audit Manager. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registerOrganizationAdminAccountTest() throws ApiException {
        RegisterOrganizationAdminAccountRequest registerOrganizationAdminAccountRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RegisterOrganizationAdminAccountResponse response = api.registerOrganizationAdminAccount(registerOrganizationAdminAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt; Creates a share request for a custom framework in Audit Manager. &lt;/p&gt; &lt;p&gt;The share request specifies a recipient and notifies them that a custom framework is available. Recipients have 120 days to accept or decline the request. If no action is taken, the share request expires.&lt;/p&gt; &lt;p&gt;When you create a share request, Audit Manager stores a snapshot of your custom framework in the US East (N. Virginia) Amazon Web Services Region. Audit Manager also stores a backup of the same snapshot in the US West (Oregon) Amazon Web Services Region.&lt;/p&gt; &lt;p&gt;Audit Manager deletes the snapshot and the backup snapshot when one of the following events occurs:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The sender revokes the share request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The recipient declines the share request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The recipient encounters an error and doesn&#39;t successfully accept the share request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The share request expires before the recipient responds to the request.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;When a sender &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/audit-manager/latest/userguide/framework-sharing.html#framework-sharing-resend\&quot;&gt;resends a share request&lt;/a&gt;, the snapshot is replaced with an updated version that corresponds with the latest version of the custom framework. &lt;/p&gt; &lt;p&gt;When a recipient accepts a share request, the snapshot is replicated into their Amazon Web Services account under the Amazon Web Services Region that was specified in the share request. &lt;/p&gt; &lt;important&gt; &lt;p&gt;When you invoke the &lt;code&gt;StartAssessmentFrameworkShare&lt;/code&gt; API, you are about to share a custom framework with another Amazon Web Services account. You may not share a custom framework that is derived from a standard framework if the standard framework is designated as not eligible for sharing by Amazon Web Services, unless you have obtained permission to do so from the owner of the standard framework. To learn more about which standard frameworks are eligible for sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/audit-manager/latest/userguide/share-custom-framework-concepts-and-terminology.html#eligibility\&quot;&gt;Framework sharing eligibility&lt;/a&gt; in the &lt;i&gt;Audit Manager User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startAssessmentFrameworkShareTest() throws ApiException {
        String frameworkId = null;
        StartAssessmentFrameworkShareRequest startAssessmentFrameworkShareRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartAssessmentFrameworkShareResponse response = api.startAssessmentFrameworkShare(frameworkId, startAssessmentFrameworkShareRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Tags the specified resource in Audit Manager. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String resourceArn = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.tagResource(resourceArn, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Removes a tag from a resource in Audit Manager. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String resourceArn = null;
        List<String> tagKeys = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.untagResource(resourceArn, tagKeys, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Edits an Audit Manager assessment. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAssessmentTest() throws ApiException {
        String assessmentId = null;
        UpdateAssessmentRequest updateAssessmentRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateAssessmentResponse response = api.updateAssessment(assessmentId, updateAssessmentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Updates a control within an assessment in Audit Manager. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAssessmentControlTest() throws ApiException {
        String assessmentId = null;
        String controlSetId = null;
        String controlId = null;
        UpdateAssessmentControlRequest updateAssessmentControlRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateAssessmentControlResponse response = api.updateAssessmentControl(assessmentId, controlSetId, controlId, updateAssessmentControlRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Updates the status of a control set in an Audit Manager assessment. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAssessmentControlSetStatusTest() throws ApiException {
        String assessmentId = null;
        String controlSetId = null;
        UpdateAssessmentControlSetStatusRequest updateAssessmentControlSetStatusRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateAssessmentControlSetStatusResponse response = api.updateAssessmentControlSetStatus(assessmentId, controlSetId, updateAssessmentControlSetStatusRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Updates a custom framework in Audit Manager. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAssessmentFrameworkTest() throws ApiException {
        String frameworkId = null;
        UpdateAssessmentFrameworkRequest updateAssessmentFrameworkRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateAssessmentFrameworkResponse response = api.updateAssessmentFramework(frameworkId, updateAssessmentFrameworkRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Updates a share request for a custom framework in Audit Manager. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAssessmentFrameworkShareTest() throws ApiException {
        String requestId = null;
        UpdateAssessmentFrameworkShareRequest updateAssessmentFrameworkShareRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateAssessmentFrameworkShareResponse response = api.updateAssessmentFrameworkShare(requestId, updateAssessmentFrameworkShareRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Updates the status of an assessment in Audit Manager. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAssessmentStatusTest() throws ApiException {
        String assessmentId = null;
        UpdateAssessmentStatusRequest updateAssessmentStatusRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateAssessmentStatusResponse response = api.updateAssessmentStatus(assessmentId, updateAssessmentStatusRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Updates a custom control in Audit Manager. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateControlTest() throws ApiException {
        String controlId = null;
        UpdateControlRequest updateControlRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateControlResponse response = api.updateControl(controlId, updateControlRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Updates Audit Manager settings for the current account. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSettingsTest() throws ApiException {
        UpdateSettingsRequest updateSettingsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateSettingsResponse response = api.updateSettings(updateSettingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Validates the integrity of an assessment report in Audit Manager. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void validateAssessmentReportIntegrityTest() throws ApiException {
        ValidateAssessmentReportIntegrityRequest validateAssessmentReportIntegrityRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ValidateAssessmentReportIntegrityResponse response = api.validateAssessmentReportIntegrity(validateAssessmentReportIntegrityRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
