# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.control_domain_insights_evidence_insights import ControlDomainInsightsEvidenceInsights
from openapi_server import util


class ControlDomainInsights(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, id: str=None, controls_count_by_noncompliant_evidence: int=None, total_controls_count: int=None, evidence_insights: ControlDomainInsightsEvidenceInsights=None, last_updated: datetime=None):
        """ControlDomainInsights - a model defined in OpenAPI

        :param name: The name of this ControlDomainInsights.
        :param id: The id of this ControlDomainInsights.
        :param controls_count_by_noncompliant_evidence: The controls_count_by_noncompliant_evidence of this ControlDomainInsights.
        :param total_controls_count: The total_controls_count of this ControlDomainInsights.
        :param evidence_insights: The evidence_insights of this ControlDomainInsights.
        :param last_updated: The last_updated of this ControlDomainInsights.
        """
        self.openapi_types = {
            'name': str,
            'id': str,
            'controls_count_by_noncompliant_evidence': int,
            'total_controls_count': int,
            'evidence_insights': ControlDomainInsightsEvidenceInsights,
            'last_updated': datetime
        }

        self.attribute_map = {
            'name': 'name',
            'id': 'id',
            'controls_count_by_noncompliant_evidence': 'controlsCountByNoncompliantEvidence',
            'total_controls_count': 'totalControlsCount',
            'evidence_insights': 'evidenceInsights',
            'last_updated': 'lastUpdated'
        }

        self._name = name
        self._id = id
        self._controls_count_by_noncompliant_evidence = controls_count_by_noncompliant_evidence
        self._total_controls_count = total_controls_count
        self._evidence_insights = evidence_insights
        self._last_updated = last_updated

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ControlDomainInsights':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ControlDomainInsights of this ControlDomainInsights.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this ControlDomainInsights.


        :return: The name of this ControlDomainInsights.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ControlDomainInsights.


        :param name: The name of this ControlDomainInsights.
        :type name: str
        """

        self._name = name

    @property
    def id(self):
        """Gets the id of this ControlDomainInsights.


        :return: The id of this ControlDomainInsights.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ControlDomainInsights.


        :param id: The id of this ControlDomainInsights.
        :type id: str
        """

        self._id = id

    @property
    def controls_count_by_noncompliant_evidence(self):
        """Gets the controls_count_by_noncompliant_evidence of this ControlDomainInsights.


        :return: The controls_count_by_noncompliant_evidence of this ControlDomainInsights.
        :rtype: int
        """
        return self._controls_count_by_noncompliant_evidence

    @controls_count_by_noncompliant_evidence.setter
    def controls_count_by_noncompliant_evidence(self, controls_count_by_noncompliant_evidence):
        """Sets the controls_count_by_noncompliant_evidence of this ControlDomainInsights.


        :param controls_count_by_noncompliant_evidence: The controls_count_by_noncompliant_evidence of this ControlDomainInsights.
        :type controls_count_by_noncompliant_evidence: int
        """

        self._controls_count_by_noncompliant_evidence = controls_count_by_noncompliant_evidence

    @property
    def total_controls_count(self):
        """Gets the total_controls_count of this ControlDomainInsights.


        :return: The total_controls_count of this ControlDomainInsights.
        :rtype: int
        """
        return self._total_controls_count

    @total_controls_count.setter
    def total_controls_count(self, total_controls_count):
        """Sets the total_controls_count of this ControlDomainInsights.


        :param total_controls_count: The total_controls_count of this ControlDomainInsights.
        :type total_controls_count: int
        """

        self._total_controls_count = total_controls_count

    @property
    def evidence_insights(self):
        """Gets the evidence_insights of this ControlDomainInsights.


        :return: The evidence_insights of this ControlDomainInsights.
        :rtype: ControlDomainInsightsEvidenceInsights
        """
        return self._evidence_insights

    @evidence_insights.setter
    def evidence_insights(self, evidence_insights):
        """Sets the evidence_insights of this ControlDomainInsights.


        :param evidence_insights: The evidence_insights of this ControlDomainInsights.
        :type evidence_insights: ControlDomainInsightsEvidenceInsights
        """

        self._evidence_insights = evidence_insights

    @property
    def last_updated(self):
        """Gets the last_updated of this ControlDomainInsights.


        :return: The last_updated of this ControlDomainInsights.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this ControlDomainInsights.


        :param last_updated: The last_updated of this ControlDomainInsights.
        :type last_updated: datetime
        """

        self._last_updated = last_updated
