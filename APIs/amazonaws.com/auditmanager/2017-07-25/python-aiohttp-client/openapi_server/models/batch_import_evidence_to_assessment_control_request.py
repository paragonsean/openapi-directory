# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.manual_evidence import ManualEvidence
from openapi_server import util


class BatchImportEvidenceToAssessmentControlRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, manual_evidence: List[ManualEvidence]=None):
        """BatchImportEvidenceToAssessmentControlRequest - a model defined in OpenAPI

        :param manual_evidence: The manual_evidence of this BatchImportEvidenceToAssessmentControlRequest.
        """
        self.openapi_types = {
            'manual_evidence': List[ManualEvidence]
        }

        self.attribute_map = {
            'manual_evidence': 'manualEvidence'
        }

        self._manual_evidence = manual_evidence

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchImportEvidenceToAssessmentControlRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchImportEvidenceToAssessmentControl_request of this BatchImportEvidenceToAssessmentControlRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def manual_evidence(self):
        """Gets the manual_evidence of this BatchImportEvidenceToAssessmentControlRequest.

         The list of manual evidence objects. 

        :return: The manual_evidence of this BatchImportEvidenceToAssessmentControlRequest.
        :rtype: List[ManualEvidence]
        """
        return self._manual_evidence

    @manual_evidence.setter
    def manual_evidence(self, manual_evidence):
        """Sets the manual_evidence of this BatchImportEvidenceToAssessmentControlRequest.

         The list of manual evidence objects. 

        :param manual_evidence: The manual_evidence of this BatchImportEvidenceToAssessmentControlRequest.
        :type manual_evidence: List[ManualEvidence]
        """
        if manual_evidence is None:
            raise ValueError("Invalid value for `manual_evidence`, must not be `None`")
        if manual_evidence is not None and len(manual_evidence) > 50:
            raise ValueError("Invalid value for `manual_evidence`, number of items must be less than or equal to `50`")
        if manual_evidence is not None and len(manual_evidence) < 1:
            raise ValueError("Invalid value for `manual_evidence`, number of items must be greater than or equal to `1`")

        self._manual_evidence = manual_evidence
