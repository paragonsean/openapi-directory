# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.assessment_aws_account import AssessmentAwsAccount
from openapi_server.models.assessment_framework import AssessmentFramework
from openapi_server.models.assessment_metadata import AssessmentMetadata
from openapi_server import util


class Assessment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arn: str=None, aws_account: AssessmentAwsAccount=None, metadata: AssessmentMetadata=None, framework: AssessmentFramework=None, tags: Dict=None):
        """Assessment - a model defined in OpenAPI

        :param arn: The arn of this Assessment.
        :param aws_account: The aws_account of this Assessment.
        :param metadata: The metadata of this Assessment.
        :param framework: The framework of this Assessment.
        :param tags: The tags of this Assessment.
        """
        self.openapi_types = {
            'arn': str,
            'aws_account': AssessmentAwsAccount,
            'metadata': AssessmentMetadata,
            'framework': AssessmentFramework,
            'tags': Dict
        }

        self.attribute_map = {
            'arn': 'arn',
            'aws_account': 'awsAccount',
            'metadata': 'metadata',
            'framework': 'framework',
            'tags': 'tags'
        }

        self._arn = arn
        self._aws_account = aws_account
        self._metadata = metadata
        self._framework = framework
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Assessment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Assessment of this Assessment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arn(self):
        """Gets the arn of this Assessment.


        :return: The arn of this Assessment.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this Assessment.


        :param arn: The arn of this Assessment.
        :type arn: str
        """

        self._arn = arn

    @property
    def aws_account(self):
        """Gets the aws_account of this Assessment.


        :return: The aws_account of this Assessment.
        :rtype: AssessmentAwsAccount
        """
        return self._aws_account

    @aws_account.setter
    def aws_account(self, aws_account):
        """Sets the aws_account of this Assessment.


        :param aws_account: The aws_account of this Assessment.
        :type aws_account: AssessmentAwsAccount
        """

        self._aws_account = aws_account

    @property
    def metadata(self):
        """Gets the metadata of this Assessment.


        :return: The metadata of this Assessment.
        :rtype: AssessmentMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Assessment.


        :param metadata: The metadata of this Assessment.
        :type metadata: AssessmentMetadata
        """

        self._metadata = metadata

    @property
    def framework(self):
        """Gets the framework of this Assessment.


        :return: The framework of this Assessment.
        :rtype: AssessmentFramework
        """
        return self._framework

    @framework.setter
    def framework(self, framework):
        """Sets the framework of this Assessment.


        :param framework: The framework of this Assessment.
        :type framework: AssessmentFramework
        """

        self._framework = framework

    @property
    def tags(self):
        """Gets the tags of this Assessment.


        :return: The tags of this Assessment.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Assessment.


        :param tags: The tags of this Assessment.
        :type tags: Dict
        """

        self._tags = tags
