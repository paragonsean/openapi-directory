# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.control_mapping_source import ControlMappingSource
import re
from openapi_server import util


class UpdateControlRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, description: str=None, testing_information: str=None, action_plan_title: str=None, action_plan_instructions: str=None, control_mapping_sources: List[ControlMappingSource]=None):
        """UpdateControlRequest - a model defined in OpenAPI

        :param name: The name of this UpdateControlRequest.
        :param description: The description of this UpdateControlRequest.
        :param testing_information: The testing_information of this UpdateControlRequest.
        :param action_plan_title: The action_plan_title of this UpdateControlRequest.
        :param action_plan_instructions: The action_plan_instructions of this UpdateControlRequest.
        :param control_mapping_sources: The control_mapping_sources of this UpdateControlRequest.
        """
        self.openapi_types = {
            'name': str,
            'description': str,
            'testing_information': str,
            'action_plan_title': str,
            'action_plan_instructions': str,
            'control_mapping_sources': List[ControlMappingSource]
        }

        self.attribute_map = {
            'name': 'name',
            'description': 'description',
            'testing_information': 'testingInformation',
            'action_plan_title': 'actionPlanTitle',
            'action_plan_instructions': 'actionPlanInstructions',
            'control_mapping_sources': 'controlMappingSources'
        }

        self._name = name
        self._description = description
        self._testing_information = testing_information
        self._action_plan_title = action_plan_title
        self._action_plan_instructions = action_plan_instructions
        self._control_mapping_sources = control_mapping_sources

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateControlRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateControl_request of this UpdateControlRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this UpdateControlRequest.

         The name of the updated control. 

        :return: The name of this UpdateControlRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateControlRequest.

         The name of the updated control. 

        :param name: The name of this UpdateControlRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 300:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `300`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")
        if name is not None and not re.search(r'^[^\\]*$', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^[^\\]*$/`")

        self._name = name

    @property
    def description(self):
        """Gets the description of this UpdateControlRequest.

         The optional description of the control. 

        :return: The description of this UpdateControlRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateControlRequest.

         The optional description of the control. 

        :param description: The description of this UpdateControlRequest.
        :type description: str
        """
        if description is not None and len(description) > 1000:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1000`")
        if description is not None and not re.search(r'^[\w\W\s\S]*$', description):
            raise ValueError("Invalid value for `description`, must be a follow pattern or equal to `/^[\w\W\s\S]*$/`")

        self._description = description

    @property
    def testing_information(self):
        """Gets the testing_information of this UpdateControlRequest.

         The steps that you should follow to determine if the control is met. 

        :return: The testing_information of this UpdateControlRequest.
        :rtype: str
        """
        return self._testing_information

    @testing_information.setter
    def testing_information(self, testing_information):
        """Sets the testing_information of this UpdateControlRequest.

         The steps that you should follow to determine if the control is met. 

        :param testing_information: The testing_information of this UpdateControlRequest.
        :type testing_information: str
        """
        if testing_information is not None and len(testing_information) > 1000:
            raise ValueError("Invalid value for `testing_information`, length must be less than or equal to `1000`")
        if testing_information is not None and not re.search(r'^[\w\W\s\S]*$', testing_information):
            raise ValueError("Invalid value for `testing_information`, must be a follow pattern or equal to `/^[\w\W\s\S]*$/`")

        self._testing_information = testing_information

    @property
    def action_plan_title(self):
        """Gets the action_plan_title of this UpdateControlRequest.

         The title of the action plan for remediating the control. 

        :return: The action_plan_title of this UpdateControlRequest.
        :rtype: str
        """
        return self._action_plan_title

    @action_plan_title.setter
    def action_plan_title(self, action_plan_title):
        """Sets the action_plan_title of this UpdateControlRequest.

         The title of the action plan for remediating the control. 

        :param action_plan_title: The action_plan_title of this UpdateControlRequest.
        :type action_plan_title: str
        """
        if action_plan_title is not None and len(action_plan_title) > 300:
            raise ValueError("Invalid value for `action_plan_title`, length must be less than or equal to `300`")
        if action_plan_title is not None and not re.search(r'^[\w\W\s\S]*$', action_plan_title):
            raise ValueError("Invalid value for `action_plan_title`, must be a follow pattern or equal to `/^[\w\W\s\S]*$/`")

        self._action_plan_title = action_plan_title

    @property
    def action_plan_instructions(self):
        """Gets the action_plan_instructions of this UpdateControlRequest.

         The recommended actions to carry out if the control isn't fulfilled. 

        :return: The action_plan_instructions of this UpdateControlRequest.
        :rtype: str
        """
        return self._action_plan_instructions

    @action_plan_instructions.setter
    def action_plan_instructions(self, action_plan_instructions):
        """Sets the action_plan_instructions of this UpdateControlRequest.

         The recommended actions to carry out if the control isn't fulfilled. 

        :param action_plan_instructions: The action_plan_instructions of this UpdateControlRequest.
        :type action_plan_instructions: str
        """
        if action_plan_instructions is not None and len(action_plan_instructions) > 1000:
            raise ValueError("Invalid value for `action_plan_instructions`, length must be less than or equal to `1000`")
        if action_plan_instructions is not None and not re.search(r'^[\w\W\s\S]*$', action_plan_instructions):
            raise ValueError("Invalid value for `action_plan_instructions`, must be a follow pattern or equal to `/^[\w\W\s\S]*$/`")

        self._action_plan_instructions = action_plan_instructions

    @property
    def control_mapping_sources(self):
        """Gets the control_mapping_sources of this UpdateControlRequest.

         The data mapping sources for the control. 

        :return: The control_mapping_sources of this UpdateControlRequest.
        :rtype: List[ControlMappingSource]
        """
        return self._control_mapping_sources

    @control_mapping_sources.setter
    def control_mapping_sources(self, control_mapping_sources):
        """Sets the control_mapping_sources of this UpdateControlRequest.

         The data mapping sources for the control. 

        :param control_mapping_sources: The control_mapping_sources of this UpdateControlRequest.
        :type control_mapping_sources: List[ControlMappingSource]
        """
        if control_mapping_sources is None:
            raise ValueError("Invalid value for `control_mapping_sources`, must not be `None`")
        if control_mapping_sources is not None and len(control_mapping_sources) < 1:
            raise ValueError("Invalid value for `control_mapping_sources`, number of items must be greater than or equal to `1`")

        self._control_mapping_sources = control_mapping_sources
