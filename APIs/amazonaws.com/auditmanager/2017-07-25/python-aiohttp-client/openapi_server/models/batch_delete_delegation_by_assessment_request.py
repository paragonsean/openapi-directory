# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BatchDeleteDelegationByAssessmentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, delegation_ids: List[str]=None):
        """BatchDeleteDelegationByAssessmentRequest - a model defined in OpenAPI

        :param delegation_ids: The delegation_ids of this BatchDeleteDelegationByAssessmentRequest.
        """
        self.openapi_types = {
            'delegation_ids': List[str]
        }

        self.attribute_map = {
            'delegation_ids': 'delegationIds'
        }

        self._delegation_ids = delegation_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchDeleteDelegationByAssessmentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchDeleteDelegationByAssessment_request of this BatchDeleteDelegationByAssessmentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def delegation_ids(self):
        """Gets the delegation_ids of this BatchDeleteDelegationByAssessmentRequest.

         The identifiers for the delegations. 

        :return: The delegation_ids of this BatchDeleteDelegationByAssessmentRequest.
        :rtype: List[str]
        """
        return self._delegation_ids

    @delegation_ids.setter
    def delegation_ids(self, delegation_ids):
        """Sets the delegation_ids of this BatchDeleteDelegationByAssessmentRequest.

         The identifiers for the delegations. 

        :param delegation_ids: The delegation_ids of this BatchDeleteDelegationByAssessmentRequest.
        :type delegation_ids: List[str]
        """
        if delegation_ids is None:
            raise ValueError("Invalid value for `delegation_ids`, must not be `None`")
        if delegation_ids is not None and len(delegation_ids) > 50:
            raise ValueError("Invalid value for `delegation_ids`, number of items must be less than or equal to `50`")
        if delegation_ids is not None and len(delegation_ids) < 1:
            raise ValueError("Invalid value for `delegation_ids`, number of items must be greater than or equal to `1`")

        self._delegation_ids = delegation_ids
