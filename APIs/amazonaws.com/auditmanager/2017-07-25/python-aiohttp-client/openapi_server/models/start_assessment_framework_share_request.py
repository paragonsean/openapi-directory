# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class StartAssessmentFrameworkShareRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destination_account: str=None, destination_region: str=None, comment: str=None):
        """StartAssessmentFrameworkShareRequest - a model defined in OpenAPI

        :param destination_account: The destination_account of this StartAssessmentFrameworkShareRequest.
        :param destination_region: The destination_region of this StartAssessmentFrameworkShareRequest.
        :param comment: The comment of this StartAssessmentFrameworkShareRequest.
        """
        self.openapi_types = {
            'destination_account': str,
            'destination_region': str,
            'comment': str
        }

        self.attribute_map = {
            'destination_account': 'destinationAccount',
            'destination_region': 'destinationRegion',
            'comment': 'comment'
        }

        self._destination_account = destination_account
        self._destination_region = destination_region
        self._comment = comment

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartAssessmentFrameworkShareRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartAssessmentFrameworkShare_request of this StartAssessmentFrameworkShareRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destination_account(self):
        """Gets the destination_account of this StartAssessmentFrameworkShareRequest.

         The Amazon Web Services account of the recipient. 

        :return: The destination_account of this StartAssessmentFrameworkShareRequest.
        :rtype: str
        """
        return self._destination_account

    @destination_account.setter
    def destination_account(self, destination_account):
        """Sets the destination_account of this StartAssessmentFrameworkShareRequest.

         The Amazon Web Services account of the recipient. 

        :param destination_account: The destination_account of this StartAssessmentFrameworkShareRequest.
        :type destination_account: str
        """
        if destination_account is None:
            raise ValueError("Invalid value for `destination_account`, must not be `None`")
        if destination_account is not None and len(destination_account) > 12:
            raise ValueError("Invalid value for `destination_account`, length must be less than or equal to `12`")
        if destination_account is not None and len(destination_account) < 12:
            raise ValueError("Invalid value for `destination_account`, length must be greater than or equal to `12`")
        if destination_account is not None and not re.search(r'^[0-9]{12}$', destination_account):
            raise ValueError("Invalid value for `destination_account`, must be a follow pattern or equal to `/^[0-9]{12}$/`")

        self._destination_account = destination_account

    @property
    def destination_region(self):
        """Gets the destination_region of this StartAssessmentFrameworkShareRequest.

         The Amazon Web Services Region of the recipient. 

        :return: The destination_region of this StartAssessmentFrameworkShareRequest.
        :rtype: str
        """
        return self._destination_region

    @destination_region.setter
    def destination_region(self, destination_region):
        """Sets the destination_region of this StartAssessmentFrameworkShareRequest.

         The Amazon Web Services Region of the recipient. 

        :param destination_region: The destination_region of this StartAssessmentFrameworkShareRequest.
        :type destination_region: str
        """
        if destination_region is None:
            raise ValueError("Invalid value for `destination_region`, must not be `None`")
        if destination_region is not None and not re.search(r'^[a-z]{2}-[a-z]+-[0-9]{1}$', destination_region):
            raise ValueError("Invalid value for `destination_region`, must be a follow pattern or equal to `/^[a-z]{2}-[a-z]+-[0-9]{1}$/`")

        self._destination_region = destination_region

    @property
    def comment(self):
        """Gets the comment of this StartAssessmentFrameworkShareRequest.

         An optional comment from the sender about the share request. 

        :return: The comment of this StartAssessmentFrameworkShareRequest.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this StartAssessmentFrameworkShareRequest.

         An optional comment from the sender about the share request. 

        :param comment: The comment of this StartAssessmentFrameworkShareRequest.
        :type comment: str
        """
        if comment is not None and len(comment) > 500:
            raise ValueError("Invalid value for `comment`, length must be less than or equal to `500`")
        if comment is not None and not re.search(r'^[\w\W\s\S]*$', comment):
            raise ValueError("Invalid value for `comment`, must be a follow pattern or equal to `/^[\w\W\s\S]*$/`")

        self._comment = comment
