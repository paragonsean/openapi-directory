# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_assessment_framework_control_set import CreateAssessmentFrameworkControlSet
import re
from openapi_server import util


class CreateAssessmentFrameworkRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, description: str=None, compliance_type: str=None, control_sets: List[CreateAssessmentFrameworkControlSet]=None, tags: Dict[str, str]=None):
        """CreateAssessmentFrameworkRequest - a model defined in OpenAPI

        :param name: The name of this CreateAssessmentFrameworkRequest.
        :param description: The description of this CreateAssessmentFrameworkRequest.
        :param compliance_type: The compliance_type of this CreateAssessmentFrameworkRequest.
        :param control_sets: The control_sets of this CreateAssessmentFrameworkRequest.
        :param tags: The tags of this CreateAssessmentFrameworkRequest.
        """
        self.openapi_types = {
            'name': str,
            'description': str,
            'compliance_type': str,
            'control_sets': List[CreateAssessmentFrameworkControlSet],
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'name': 'name',
            'description': 'description',
            'compliance_type': 'complianceType',
            'control_sets': 'controlSets',
            'tags': 'tags'
        }

        self._name = name
        self._description = description
        self._compliance_type = compliance_type
        self._control_sets = control_sets
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateAssessmentFrameworkRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateAssessmentFramework_request of this CreateAssessmentFrameworkRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateAssessmentFrameworkRequest.

         The name of the new custom framework. 

        :return: The name of this CreateAssessmentFrameworkRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateAssessmentFrameworkRequest.

         The name of the new custom framework. 

        :param name: The name of this CreateAssessmentFrameworkRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 300:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `300`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")
        if name is not None and not re.search(r'^[^\\]*$', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^[^\\]*$/`")

        self._name = name

    @property
    def description(self):
        """Gets the description of this CreateAssessmentFrameworkRequest.

         An optional description for the new custom framework. 

        :return: The description of this CreateAssessmentFrameworkRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateAssessmentFrameworkRequest.

         An optional description for the new custom framework. 

        :param description: The description of this CreateAssessmentFrameworkRequest.
        :type description: str
        """
        if description is not None and len(description) > 1000:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1000`")
        if description is not None and len(description) < 1:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")
        if description is not None and not re.search(r'^[\w\W\s\S]*$', description):
            raise ValueError("Invalid value for `description`, must be a follow pattern or equal to `/^[\w\W\s\S]*$/`")

        self._description = description

    @property
    def compliance_type(self):
        """Gets the compliance_type of this CreateAssessmentFrameworkRequest.

         The compliance type that the new custom framework supports, such as CIS or HIPAA. 

        :return: The compliance_type of this CreateAssessmentFrameworkRequest.
        :rtype: str
        """
        return self._compliance_type

    @compliance_type.setter
    def compliance_type(self, compliance_type):
        """Sets the compliance_type of this CreateAssessmentFrameworkRequest.

         The compliance type that the new custom framework supports, such as CIS or HIPAA. 

        :param compliance_type: The compliance_type of this CreateAssessmentFrameworkRequest.
        :type compliance_type: str
        """
        if compliance_type is not None and len(compliance_type) > 100:
            raise ValueError("Invalid value for `compliance_type`, length must be less than or equal to `100`")
        if compliance_type is not None and not re.search(r'^[\w\W\s\S]*$', compliance_type):
            raise ValueError("Invalid value for `compliance_type`, must be a follow pattern or equal to `/^[\w\W\s\S]*$/`")

        self._compliance_type = compliance_type

    @property
    def control_sets(self):
        """Gets the control_sets of this CreateAssessmentFrameworkRequest.

         The control sets that are associated with the framework. 

        :return: The control_sets of this CreateAssessmentFrameworkRequest.
        :rtype: List[CreateAssessmentFrameworkControlSet]
        """
        return self._control_sets

    @control_sets.setter
    def control_sets(self, control_sets):
        """Sets the control_sets of this CreateAssessmentFrameworkRequest.

         The control sets that are associated with the framework. 

        :param control_sets: The control_sets of this CreateAssessmentFrameworkRequest.
        :type control_sets: List[CreateAssessmentFrameworkControlSet]
        """
        if control_sets is None:
            raise ValueError("Invalid value for `control_sets`, must not be `None`")
        if control_sets is not None and len(control_sets) < 1:
            raise ValueError("Invalid value for `control_sets`, number of items must be greater than or equal to `1`")

        self._control_sets = control_sets

    @property
    def tags(self):
        """Gets the tags of this CreateAssessmentFrameworkRequest.

         The tags that are associated with the framework. 

        :return: The tags of this CreateAssessmentFrameworkRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateAssessmentFrameworkRequest.

         The tags that are associated with the framework. 

        :param tags: The tags of this CreateAssessmentFrameworkRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags
