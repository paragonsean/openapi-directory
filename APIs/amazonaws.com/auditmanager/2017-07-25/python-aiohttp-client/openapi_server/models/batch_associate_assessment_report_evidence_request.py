# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class BatchAssociateAssessmentReportEvidenceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, evidence_folder_id: str=None, evidence_ids: List[str]=None):
        """BatchAssociateAssessmentReportEvidenceRequest - a model defined in OpenAPI

        :param evidence_folder_id: The evidence_folder_id of this BatchAssociateAssessmentReportEvidenceRequest.
        :param evidence_ids: The evidence_ids of this BatchAssociateAssessmentReportEvidenceRequest.
        """
        self.openapi_types = {
            'evidence_folder_id': str,
            'evidence_ids': List[str]
        }

        self.attribute_map = {
            'evidence_folder_id': 'evidenceFolderId',
            'evidence_ids': 'evidenceIds'
        }

        self._evidence_folder_id = evidence_folder_id
        self._evidence_ids = evidence_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchAssociateAssessmentReportEvidenceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchAssociateAssessmentReportEvidence_request of this BatchAssociateAssessmentReportEvidenceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def evidence_folder_id(self):
        """Gets the evidence_folder_id of this BatchAssociateAssessmentReportEvidenceRequest.

         The identifier for the folder that the evidence is stored in. 

        :return: The evidence_folder_id of this BatchAssociateAssessmentReportEvidenceRequest.
        :rtype: str
        """
        return self._evidence_folder_id

    @evidence_folder_id.setter
    def evidence_folder_id(self, evidence_folder_id):
        """Sets the evidence_folder_id of this BatchAssociateAssessmentReportEvidenceRequest.

         The identifier for the folder that the evidence is stored in. 

        :param evidence_folder_id: The evidence_folder_id of this BatchAssociateAssessmentReportEvidenceRequest.
        :type evidence_folder_id: str
        """
        if evidence_folder_id is None:
            raise ValueError("Invalid value for `evidence_folder_id`, must not be `None`")
        if evidence_folder_id is not None and len(evidence_folder_id) > 36:
            raise ValueError("Invalid value for `evidence_folder_id`, length must be less than or equal to `36`")
        if evidence_folder_id is not None and len(evidence_folder_id) < 36:
            raise ValueError("Invalid value for `evidence_folder_id`, length must be greater than or equal to `36`")
        if evidence_folder_id is not None and not re.search(r'^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$', evidence_folder_id):
            raise ValueError("Invalid value for `evidence_folder_id`, must be a follow pattern or equal to `/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/`")

        self._evidence_folder_id = evidence_folder_id

    @property
    def evidence_ids(self):
        """Gets the evidence_ids of this BatchAssociateAssessmentReportEvidenceRequest.

         The list of evidence identifiers. 

        :return: The evidence_ids of this BatchAssociateAssessmentReportEvidenceRequest.
        :rtype: List[str]
        """
        return self._evidence_ids

    @evidence_ids.setter
    def evidence_ids(self, evidence_ids):
        """Sets the evidence_ids of this BatchAssociateAssessmentReportEvidenceRequest.

         The list of evidence identifiers. 

        :param evidence_ids: The evidence_ids of this BatchAssociateAssessmentReportEvidenceRequest.
        :type evidence_ids: List[str]
        """
        if evidence_ids is None:
            raise ValueError("Invalid value for `evidence_ids`, must not be `None`")
        if evidence_ids is not None and len(evidence_ids) > 50:
            raise ValueError("Invalid value for `evidence_ids`, number of items must be less than or equal to `50`")
        if evidence_ids is not None and len(evidence_ids) < 0:
            raise ValueError("Invalid value for `evidence_ids`, number of items must be greater than or equal to `0`")

        self._evidence_ids = evidence_ids
