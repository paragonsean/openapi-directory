# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CreateAssessmentReportRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, description: str=None, query_statement: str=None):
        """CreateAssessmentReportRequest - a model defined in OpenAPI

        :param name: The name of this CreateAssessmentReportRequest.
        :param description: The description of this CreateAssessmentReportRequest.
        :param query_statement: The query_statement of this CreateAssessmentReportRequest.
        """
        self.openapi_types = {
            'name': str,
            'description': str,
            'query_statement': str
        }

        self.attribute_map = {
            'name': 'name',
            'description': 'description',
            'query_statement': 'queryStatement'
        }

        self._name = name
        self._description = description
        self._query_statement = query_statement

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateAssessmentReportRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateAssessmentReport_request of this CreateAssessmentReportRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateAssessmentReportRequest.

         The name of the new assessment report. 

        :return: The name of this CreateAssessmentReportRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateAssessmentReportRequest.

         The name of the new assessment report. 

        :param name: The name of this CreateAssessmentReportRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 300:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `300`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")
        if name is not None and not re.search(r'^[a-zA-Z0-9-_\.]+$', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^[a-zA-Z0-9-_\.]+$/`")

        self._name = name

    @property
    def description(self):
        """Gets the description of this CreateAssessmentReportRequest.

         The description of the assessment report. 

        :return: The description of this CreateAssessmentReportRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateAssessmentReportRequest.

         The description of the assessment report. 

        :param description: The description of this CreateAssessmentReportRequest.
        :type description: str
        """
        if description is not None and len(description) > 1000:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1000`")
        if description is not None and not re.search(r'^[\w\W\s\S]*$', description):
            raise ValueError("Invalid value for `description`, must be a follow pattern or equal to `/^[\w\W\s\S]*$/`")

        self._description = description

    @property
    def query_statement(self):
        """Gets the query_statement of this CreateAssessmentReportRequest.

        <p>A SQL statement that represents an evidence finder query.</p> <p>Provide this parameter when you want to generate an assessment report from the results of an evidence finder search query. When you use this parameter, Audit Manager generates a one-time report using only the evidence from the query output. This report does not include any assessment evidence that was manually <a href=\"https://docs.aws.amazon.com/audit-manager/latest/userguide/generate-assessment-report.html#generate-assessment-report-include-evidence\">added to a report using the console</a>, or <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_BatchAssociateAssessmentReportEvidence.html\">associated with a report using the API</a>. </p> <p>To use this parameter, the <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_EvidenceFinderEnablement.html#auditmanager-Type-EvidenceFinderEnablement-enablementStatus\">enablementStatus</a> of evidence finder must be <code>ENABLED</code>. </p> <p> For examples and help resolving <code>queryStatement</code> validation exceptions, see <a href=\"https://docs.aws.amazon.com/audit-manager/latest/userguide/evidence-finder-issues.html#querystatement-exceptions\">Troubleshooting evidence finder issues</a> in the <i>Audit Manager User Guide.</i> </p>

        :return: The query_statement of this CreateAssessmentReportRequest.
        :rtype: str
        """
        return self._query_statement

    @query_statement.setter
    def query_statement(self, query_statement):
        """Sets the query_statement of this CreateAssessmentReportRequest.

        <p>A SQL statement that represents an evidence finder query.</p> <p>Provide this parameter when you want to generate an assessment report from the results of an evidence finder search query. When you use this parameter, Audit Manager generates a one-time report using only the evidence from the query output. This report does not include any assessment evidence that was manually <a href=\"https://docs.aws.amazon.com/audit-manager/latest/userguide/generate-assessment-report.html#generate-assessment-report-include-evidence\">added to a report using the console</a>, or <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_BatchAssociateAssessmentReportEvidence.html\">associated with a report using the API</a>. </p> <p>To use this parameter, the <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_EvidenceFinderEnablement.html#auditmanager-Type-EvidenceFinderEnablement-enablementStatus\">enablementStatus</a> of evidence finder must be <code>ENABLED</code>. </p> <p> For examples and help resolving <code>queryStatement</code> validation exceptions, see <a href=\"https://docs.aws.amazon.com/audit-manager/latest/userguide/evidence-finder-issues.html#querystatement-exceptions\">Troubleshooting evidence finder issues</a> in the <i>Audit Manager User Guide.</i> </p>

        :param query_statement: The query_statement of this CreateAssessmentReportRequest.
        :type query_statement: str
        """
        if query_statement is not None and len(query_statement) > 10000:
            raise ValueError("Invalid value for `query_statement`, length must be less than or equal to `10000`")
        if query_statement is not None and len(query_statement) < 1:
            raise ValueError("Invalid value for `query_statement`, length must be greater than or equal to `1`")
        if query_statement is not None and not re.search(r'\(\?s\).*', query_statement):
            raise ValueError("Invalid value for `query_statement`, must be a follow pattern or equal to `/\(\?s\).*/`")

        self._query_statement = query_statement
