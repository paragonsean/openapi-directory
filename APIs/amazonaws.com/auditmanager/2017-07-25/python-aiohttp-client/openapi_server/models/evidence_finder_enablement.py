# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.evidence_finder_backfill_status import EvidenceFinderBackfillStatus
from openapi_server.models.evidence_finder_enablement_status import EvidenceFinderEnablementStatus
from openapi_server import util


class EvidenceFinderEnablement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_data_store_arn: str=None, enablement_status: EvidenceFinderEnablementStatus=None, backfill_status: EvidenceFinderBackfillStatus=None, error: str=None):
        """EvidenceFinderEnablement - a model defined in OpenAPI

        :param event_data_store_arn: The event_data_store_arn of this EvidenceFinderEnablement.
        :param enablement_status: The enablement_status of this EvidenceFinderEnablement.
        :param backfill_status: The backfill_status of this EvidenceFinderEnablement.
        :param error: The error of this EvidenceFinderEnablement.
        """
        self.openapi_types = {
            'event_data_store_arn': str,
            'enablement_status': EvidenceFinderEnablementStatus,
            'backfill_status': EvidenceFinderBackfillStatus,
            'error': str
        }

        self.attribute_map = {
            'event_data_store_arn': 'eventDataStoreArn',
            'enablement_status': 'enablementStatus',
            'backfill_status': 'backfillStatus',
            'error': 'error'
        }

        self._event_data_store_arn = event_data_store_arn
        self._enablement_status = enablement_status
        self._backfill_status = backfill_status
        self._error = error

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EvidenceFinderEnablement':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EvidenceFinderEnablement of this EvidenceFinderEnablement.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_data_store_arn(self):
        """Gets the event_data_store_arn of this EvidenceFinderEnablement.


        :return: The event_data_store_arn of this EvidenceFinderEnablement.
        :rtype: str
        """
        return self._event_data_store_arn

    @event_data_store_arn.setter
    def event_data_store_arn(self, event_data_store_arn):
        """Sets the event_data_store_arn of this EvidenceFinderEnablement.


        :param event_data_store_arn: The event_data_store_arn of this EvidenceFinderEnablement.
        :type event_data_store_arn: str
        """

        self._event_data_store_arn = event_data_store_arn

    @property
    def enablement_status(self):
        """Gets the enablement_status of this EvidenceFinderEnablement.


        :return: The enablement_status of this EvidenceFinderEnablement.
        :rtype: EvidenceFinderEnablementStatus
        """
        return self._enablement_status

    @enablement_status.setter
    def enablement_status(self, enablement_status):
        """Sets the enablement_status of this EvidenceFinderEnablement.


        :param enablement_status: The enablement_status of this EvidenceFinderEnablement.
        :type enablement_status: EvidenceFinderEnablementStatus
        """

        self._enablement_status = enablement_status

    @property
    def backfill_status(self):
        """Gets the backfill_status of this EvidenceFinderEnablement.


        :return: The backfill_status of this EvidenceFinderEnablement.
        :rtype: EvidenceFinderBackfillStatus
        """
        return self._backfill_status

    @backfill_status.setter
    def backfill_status(self, backfill_status):
        """Sets the backfill_status of this EvidenceFinderEnablement.


        :param backfill_status: The backfill_status of this EvidenceFinderEnablement.
        :type backfill_status: EvidenceFinderBackfillStatus
        """

        self._backfill_status = backfill_status

    @property
    def error(self):
        """Gets the error of this EvidenceFinderEnablement.


        :return: The error of this EvidenceFinderEnablement.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this EvidenceFinderEnablement.


        :param error: The error of this EvidenceFinderEnablement.
        :type error: str
        """

        self._error = error
