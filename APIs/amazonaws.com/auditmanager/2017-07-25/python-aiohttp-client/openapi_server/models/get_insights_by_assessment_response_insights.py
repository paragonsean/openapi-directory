# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetInsightsByAssessmentResponseInsights(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, noncompliant_evidence_count: int=None, compliant_evidence_count: int=None, inconclusive_evidence_count: int=None, assessment_controls_count_by_noncompliant_evidence: int=None, total_assessment_controls_count: int=None, last_updated: datetime=None):
        """GetInsightsByAssessmentResponseInsights - a model defined in OpenAPI

        :param noncompliant_evidence_count: The noncompliant_evidence_count of this GetInsightsByAssessmentResponseInsights.
        :param compliant_evidence_count: The compliant_evidence_count of this GetInsightsByAssessmentResponseInsights.
        :param inconclusive_evidence_count: The inconclusive_evidence_count of this GetInsightsByAssessmentResponseInsights.
        :param assessment_controls_count_by_noncompliant_evidence: The assessment_controls_count_by_noncompliant_evidence of this GetInsightsByAssessmentResponseInsights.
        :param total_assessment_controls_count: The total_assessment_controls_count of this GetInsightsByAssessmentResponseInsights.
        :param last_updated: The last_updated of this GetInsightsByAssessmentResponseInsights.
        """
        self.openapi_types = {
            'noncompliant_evidence_count': int,
            'compliant_evidence_count': int,
            'inconclusive_evidence_count': int,
            'assessment_controls_count_by_noncompliant_evidence': int,
            'total_assessment_controls_count': int,
            'last_updated': datetime
        }

        self.attribute_map = {
            'noncompliant_evidence_count': 'noncompliantEvidenceCount',
            'compliant_evidence_count': 'compliantEvidenceCount',
            'inconclusive_evidence_count': 'inconclusiveEvidenceCount',
            'assessment_controls_count_by_noncompliant_evidence': 'assessmentControlsCountByNoncompliantEvidence',
            'total_assessment_controls_count': 'totalAssessmentControlsCount',
            'last_updated': 'lastUpdated'
        }

        self._noncompliant_evidence_count = noncompliant_evidence_count
        self._compliant_evidence_count = compliant_evidence_count
        self._inconclusive_evidence_count = inconclusive_evidence_count
        self._assessment_controls_count_by_noncompliant_evidence = assessment_controls_count_by_noncompliant_evidence
        self._total_assessment_controls_count = total_assessment_controls_count
        self._last_updated = last_updated

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetInsightsByAssessmentResponseInsights':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetInsightsByAssessmentResponse_insights of this GetInsightsByAssessmentResponseInsights.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def noncompliant_evidence_count(self):
        """Gets the noncompliant_evidence_count of this GetInsightsByAssessmentResponseInsights.


        :return: The noncompliant_evidence_count of this GetInsightsByAssessmentResponseInsights.
        :rtype: int
        """
        return self._noncompliant_evidence_count

    @noncompliant_evidence_count.setter
    def noncompliant_evidence_count(self, noncompliant_evidence_count):
        """Sets the noncompliant_evidence_count of this GetInsightsByAssessmentResponseInsights.


        :param noncompliant_evidence_count: The noncompliant_evidence_count of this GetInsightsByAssessmentResponseInsights.
        :type noncompliant_evidence_count: int
        """

        self._noncompliant_evidence_count = noncompliant_evidence_count

    @property
    def compliant_evidence_count(self):
        """Gets the compliant_evidence_count of this GetInsightsByAssessmentResponseInsights.


        :return: The compliant_evidence_count of this GetInsightsByAssessmentResponseInsights.
        :rtype: int
        """
        return self._compliant_evidence_count

    @compliant_evidence_count.setter
    def compliant_evidence_count(self, compliant_evidence_count):
        """Sets the compliant_evidence_count of this GetInsightsByAssessmentResponseInsights.


        :param compliant_evidence_count: The compliant_evidence_count of this GetInsightsByAssessmentResponseInsights.
        :type compliant_evidence_count: int
        """

        self._compliant_evidence_count = compliant_evidence_count

    @property
    def inconclusive_evidence_count(self):
        """Gets the inconclusive_evidence_count of this GetInsightsByAssessmentResponseInsights.


        :return: The inconclusive_evidence_count of this GetInsightsByAssessmentResponseInsights.
        :rtype: int
        """
        return self._inconclusive_evidence_count

    @inconclusive_evidence_count.setter
    def inconclusive_evidence_count(self, inconclusive_evidence_count):
        """Sets the inconclusive_evidence_count of this GetInsightsByAssessmentResponseInsights.


        :param inconclusive_evidence_count: The inconclusive_evidence_count of this GetInsightsByAssessmentResponseInsights.
        :type inconclusive_evidence_count: int
        """

        self._inconclusive_evidence_count = inconclusive_evidence_count

    @property
    def assessment_controls_count_by_noncompliant_evidence(self):
        """Gets the assessment_controls_count_by_noncompliant_evidence of this GetInsightsByAssessmentResponseInsights.


        :return: The assessment_controls_count_by_noncompliant_evidence of this GetInsightsByAssessmentResponseInsights.
        :rtype: int
        """
        return self._assessment_controls_count_by_noncompliant_evidence

    @assessment_controls_count_by_noncompliant_evidence.setter
    def assessment_controls_count_by_noncompliant_evidence(self, assessment_controls_count_by_noncompliant_evidence):
        """Sets the assessment_controls_count_by_noncompliant_evidence of this GetInsightsByAssessmentResponseInsights.


        :param assessment_controls_count_by_noncompliant_evidence: The assessment_controls_count_by_noncompliant_evidence of this GetInsightsByAssessmentResponseInsights.
        :type assessment_controls_count_by_noncompliant_evidence: int
        """

        self._assessment_controls_count_by_noncompliant_evidence = assessment_controls_count_by_noncompliant_evidence

    @property
    def total_assessment_controls_count(self):
        """Gets the total_assessment_controls_count of this GetInsightsByAssessmentResponseInsights.


        :return: The total_assessment_controls_count of this GetInsightsByAssessmentResponseInsights.
        :rtype: int
        """
        return self._total_assessment_controls_count

    @total_assessment_controls_count.setter
    def total_assessment_controls_count(self, total_assessment_controls_count):
        """Sets the total_assessment_controls_count of this GetInsightsByAssessmentResponseInsights.


        :param total_assessment_controls_count: The total_assessment_controls_count of this GetInsightsByAssessmentResponseInsights.
        :type total_assessment_controls_count: int
        """

        self._total_assessment_controls_count = total_assessment_controls_count

    @property
    def last_updated(self):
        """Gets the last_updated of this GetInsightsByAssessmentResponseInsights.


        :return: The last_updated of this GetInsightsByAssessmentResponseInsights.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this GetInsightsByAssessmentResponseInsights.


        :param last_updated: The last_updated of this GetInsightsByAssessmentResponseInsights.
        :type last_updated: datetime
        """

        self._last_updated = last_updated
