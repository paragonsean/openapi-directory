# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class RegisterAccountRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, kms_key: str=None, delegated_admin_account: str=None):
        """RegisterAccountRequest - a model defined in OpenAPI

        :param kms_key: The kms_key of this RegisterAccountRequest.
        :param delegated_admin_account: The delegated_admin_account of this RegisterAccountRequest.
        """
        self.openapi_types = {
            'kms_key': str,
            'delegated_admin_account': str
        }

        self.attribute_map = {
            'kms_key': 'kmsKey',
            'delegated_admin_account': 'delegatedAdminAccount'
        }

        self._kms_key = kms_key
        self._delegated_admin_account = delegated_admin_account

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegisterAccountRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegisterAccount_request of this RegisterAccountRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def kms_key(self):
        """Gets the kms_key of this RegisterAccountRequest.

         The KMS key details. 

        :return: The kms_key of this RegisterAccountRequest.
        :rtype: str
        """
        return self._kms_key

    @kms_key.setter
    def kms_key(self, kms_key):
        """Sets the kms_key of this RegisterAccountRequest.

         The KMS key details. 

        :param kms_key: The kms_key of this RegisterAccountRequest.
        :type kms_key: str
        """
        if kms_key is not None and len(kms_key) > 2048:
            raise ValueError("Invalid value for `kms_key`, length must be less than or equal to `2048`")
        if kms_key is not None and len(kms_key) < 7:
            raise ValueError("Invalid value for `kms_key`, length must be greater than or equal to `7`")
        if kms_key is not None and not re.search(r'^arn:.*:kms:.*|DEFAULT', kms_key):
            raise ValueError("Invalid value for `kms_key`, must be a follow pattern or equal to `/^arn:.*:kms:.*|DEFAULT/`")

        self._kms_key = kms_key

    @property
    def delegated_admin_account(self):
        """Gets the delegated_admin_account of this RegisterAccountRequest.

         The delegated administrator account for Audit Manager. 

        :return: The delegated_admin_account of this RegisterAccountRequest.
        :rtype: str
        """
        return self._delegated_admin_account

    @delegated_admin_account.setter
    def delegated_admin_account(self, delegated_admin_account):
        """Sets the delegated_admin_account of this RegisterAccountRequest.

         The delegated administrator account for Audit Manager. 

        :param delegated_admin_account: The delegated_admin_account of this RegisterAccountRequest.
        :type delegated_admin_account: str
        """
        if delegated_admin_account is not None and len(delegated_admin_account) > 12:
            raise ValueError("Invalid value for `delegated_admin_account`, length must be less than or equal to `12`")
        if delegated_admin_account is not None and len(delegated_admin_account) < 12:
            raise ValueError("Invalid value for `delegated_admin_account`, length must be greater than or equal to `12`")
        if delegated_admin_account is not None and not re.search(r'^[0-9]{12}$', delegated_admin_account):
            raise ValueError("Invalid value for `delegated_admin_account`, must be a follow pattern or equal to `/^[0-9]{12}$/`")

        self._delegated_admin_account = delegated_admin_account
