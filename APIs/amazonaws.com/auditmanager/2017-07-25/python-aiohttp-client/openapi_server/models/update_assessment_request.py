# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_assessment_request_assessment_reports_destination import CreateAssessmentRequestAssessmentReportsDestination
from openapi_server.models.create_assessment_request_scope import CreateAssessmentRequestScope
from openapi_server.models.role import Role
import re
from openapi_server import util


class UpdateAssessmentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assessment_name: str=None, assessment_description: str=None, scope: CreateAssessmentRequestScope=None, assessment_reports_destination: CreateAssessmentRequestAssessmentReportsDestination=None, roles: List[Role]=None):
        """UpdateAssessmentRequest - a model defined in OpenAPI

        :param assessment_name: The assessment_name of this UpdateAssessmentRequest.
        :param assessment_description: The assessment_description of this UpdateAssessmentRequest.
        :param scope: The scope of this UpdateAssessmentRequest.
        :param assessment_reports_destination: The assessment_reports_destination of this UpdateAssessmentRequest.
        :param roles: The roles of this UpdateAssessmentRequest.
        """
        self.openapi_types = {
            'assessment_name': str,
            'assessment_description': str,
            'scope': CreateAssessmentRequestScope,
            'assessment_reports_destination': CreateAssessmentRequestAssessmentReportsDestination,
            'roles': List[Role]
        }

        self.attribute_map = {
            'assessment_name': 'assessmentName',
            'assessment_description': 'assessmentDescription',
            'scope': 'scope',
            'assessment_reports_destination': 'assessmentReportsDestination',
            'roles': 'roles'
        }

        self._assessment_name = assessment_name
        self._assessment_description = assessment_description
        self._scope = scope
        self._assessment_reports_destination = assessment_reports_destination
        self._roles = roles

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateAssessmentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateAssessment_request of this UpdateAssessmentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assessment_name(self):
        """Gets the assessment_name of this UpdateAssessmentRequest.

         The name of the assessment to be updated. 

        :return: The assessment_name of this UpdateAssessmentRequest.
        :rtype: str
        """
        return self._assessment_name

    @assessment_name.setter
    def assessment_name(self, assessment_name):
        """Sets the assessment_name of this UpdateAssessmentRequest.

         The name of the assessment to be updated. 

        :param assessment_name: The assessment_name of this UpdateAssessmentRequest.
        :type assessment_name: str
        """
        if assessment_name is not None and len(assessment_name) > 300:
            raise ValueError("Invalid value for `assessment_name`, length must be less than or equal to `300`")
        if assessment_name is not None and len(assessment_name) < 1:
            raise ValueError("Invalid value for `assessment_name`, length must be greater than or equal to `1`")
        if assessment_name is not None and not re.search(r'^[^\\]*$', assessment_name):
            raise ValueError("Invalid value for `assessment_name`, must be a follow pattern or equal to `/^[^\\]*$/`")

        self._assessment_name = assessment_name

    @property
    def assessment_description(self):
        """Gets the assessment_description of this UpdateAssessmentRequest.

         The description of the assessment. 

        :return: The assessment_description of this UpdateAssessmentRequest.
        :rtype: str
        """
        return self._assessment_description

    @assessment_description.setter
    def assessment_description(self, assessment_description):
        """Sets the assessment_description of this UpdateAssessmentRequest.

         The description of the assessment. 

        :param assessment_description: The assessment_description of this UpdateAssessmentRequest.
        :type assessment_description: str
        """
        if assessment_description is not None and len(assessment_description) > 1000:
            raise ValueError("Invalid value for `assessment_description`, length must be less than or equal to `1000`")
        if assessment_description is not None and not re.search(r'^[\w\W\s\S]*$', assessment_description):
            raise ValueError("Invalid value for `assessment_description`, must be a follow pattern or equal to `/^[\w\W\s\S]*$/`")

        self._assessment_description = assessment_description

    @property
    def scope(self):
        """Gets the scope of this UpdateAssessmentRequest.


        :return: The scope of this UpdateAssessmentRequest.
        :rtype: CreateAssessmentRequestScope
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this UpdateAssessmentRequest.


        :param scope: The scope of this UpdateAssessmentRequest.
        :type scope: CreateAssessmentRequestScope
        """
        if scope is None:
            raise ValueError("Invalid value for `scope`, must not be `None`")

        self._scope = scope

    @property
    def assessment_reports_destination(self):
        """Gets the assessment_reports_destination of this UpdateAssessmentRequest.


        :return: The assessment_reports_destination of this UpdateAssessmentRequest.
        :rtype: CreateAssessmentRequestAssessmentReportsDestination
        """
        return self._assessment_reports_destination

    @assessment_reports_destination.setter
    def assessment_reports_destination(self, assessment_reports_destination):
        """Sets the assessment_reports_destination of this UpdateAssessmentRequest.


        :param assessment_reports_destination: The assessment_reports_destination of this UpdateAssessmentRequest.
        :type assessment_reports_destination: CreateAssessmentRequestAssessmentReportsDestination
        """

        self._assessment_reports_destination = assessment_reports_destination

    @property
    def roles(self):
        """Gets the roles of this UpdateAssessmentRequest.

         The list of roles for the assessment. 

        :return: The roles of this UpdateAssessmentRequest.
        :rtype: List[Role]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this UpdateAssessmentRequest.

         The list of roles for the assessment. 

        :param roles: The roles of this UpdateAssessmentRequest.
        :type roles: List[Role]
        """

        self._roles = roles
