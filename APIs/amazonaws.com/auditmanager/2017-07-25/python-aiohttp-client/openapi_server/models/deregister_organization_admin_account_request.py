# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class DeregisterOrganizationAdminAccountRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, admin_account_id: str=None):
        """DeregisterOrganizationAdminAccountRequest - a model defined in OpenAPI

        :param admin_account_id: The admin_account_id of this DeregisterOrganizationAdminAccountRequest.
        """
        self.openapi_types = {
            'admin_account_id': str
        }

        self.attribute_map = {
            'admin_account_id': 'adminAccountId'
        }

        self._admin_account_id = admin_account_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeregisterOrganizationAdminAccountRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeregisterOrganizationAdminAccount_request of this DeregisterOrganizationAdminAccountRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def admin_account_id(self):
        """Gets the admin_account_id of this DeregisterOrganizationAdminAccountRequest.

         The identifier for the administrator account. 

        :return: The admin_account_id of this DeregisterOrganizationAdminAccountRequest.
        :rtype: str
        """
        return self._admin_account_id

    @admin_account_id.setter
    def admin_account_id(self, admin_account_id):
        """Sets the admin_account_id of this DeregisterOrganizationAdminAccountRequest.

         The identifier for the administrator account. 

        :param admin_account_id: The admin_account_id of this DeregisterOrganizationAdminAccountRequest.
        :type admin_account_id: str
        """
        if admin_account_id is not None and len(admin_account_id) > 12:
            raise ValueError("Invalid value for `admin_account_id`, length must be less than or equal to `12`")
        if admin_account_id is not None and len(admin_account_id) < 12:
            raise ValueError("Invalid value for `admin_account_id`, length must be greater than or equal to `12`")
        if admin_account_id is not None and not re.search(r'^[0-9]{12}$', admin_account_id):
            raise ValueError("Invalid value for `admin_account_id`, must be a follow pattern or equal to `/^[0-9]{12}$/`")

        self._admin_account_id = admin_account_id
