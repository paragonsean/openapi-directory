# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.control_set_status import ControlSetStatus
from openapi_server import util


class UpdateAssessmentControlSetStatusResponseControlSet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, description: str=None, status: ControlSetStatus=None, roles: List=None, controls: List=None, delegations: List=None, system_evidence_count: int=None, manual_evidence_count: int=None):
        """UpdateAssessmentControlSetStatusResponseControlSet - a model defined in OpenAPI

        :param id: The id of this UpdateAssessmentControlSetStatusResponseControlSet.
        :param description: The description of this UpdateAssessmentControlSetStatusResponseControlSet.
        :param status: The status of this UpdateAssessmentControlSetStatusResponseControlSet.
        :param roles: The roles of this UpdateAssessmentControlSetStatusResponseControlSet.
        :param controls: The controls of this UpdateAssessmentControlSetStatusResponseControlSet.
        :param delegations: The delegations of this UpdateAssessmentControlSetStatusResponseControlSet.
        :param system_evidence_count: The system_evidence_count of this UpdateAssessmentControlSetStatusResponseControlSet.
        :param manual_evidence_count: The manual_evidence_count of this UpdateAssessmentControlSetStatusResponseControlSet.
        """
        self.openapi_types = {
            'id': str,
            'description': str,
            'status': ControlSetStatus,
            'roles': List,
            'controls': List,
            'delegations': List,
            'system_evidence_count': int,
            'manual_evidence_count': int
        }

        self.attribute_map = {
            'id': 'id',
            'description': 'description',
            'status': 'status',
            'roles': 'roles',
            'controls': 'controls',
            'delegations': 'delegations',
            'system_evidence_count': 'systemEvidenceCount',
            'manual_evidence_count': 'manualEvidenceCount'
        }

        self._id = id
        self._description = description
        self._status = status
        self._roles = roles
        self._controls = controls
        self._delegations = delegations
        self._system_evidence_count = system_evidence_count
        self._manual_evidence_count = manual_evidence_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateAssessmentControlSetStatusResponseControlSet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateAssessmentControlSetStatusResponse_controlSet of this UpdateAssessmentControlSetStatusResponseControlSet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this UpdateAssessmentControlSetStatusResponseControlSet.


        :return: The id of this UpdateAssessmentControlSetStatusResponseControlSet.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UpdateAssessmentControlSetStatusResponseControlSet.


        :param id: The id of this UpdateAssessmentControlSetStatusResponseControlSet.
        :type id: str
        """

        self._id = id

    @property
    def description(self):
        """Gets the description of this UpdateAssessmentControlSetStatusResponseControlSet.


        :return: The description of this UpdateAssessmentControlSetStatusResponseControlSet.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateAssessmentControlSetStatusResponseControlSet.


        :param description: The description of this UpdateAssessmentControlSetStatusResponseControlSet.
        :type description: str
        """

        self._description = description

    @property
    def status(self):
        """Gets the status of this UpdateAssessmentControlSetStatusResponseControlSet.


        :return: The status of this UpdateAssessmentControlSetStatusResponseControlSet.
        :rtype: ControlSetStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this UpdateAssessmentControlSetStatusResponseControlSet.


        :param status: The status of this UpdateAssessmentControlSetStatusResponseControlSet.
        :type status: ControlSetStatus
        """

        self._status = status

    @property
    def roles(self):
        """Gets the roles of this UpdateAssessmentControlSetStatusResponseControlSet.


        :return: The roles of this UpdateAssessmentControlSetStatusResponseControlSet.
        :rtype: List
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this UpdateAssessmentControlSetStatusResponseControlSet.


        :param roles: The roles of this UpdateAssessmentControlSetStatusResponseControlSet.
        :type roles: List
        """

        self._roles = roles

    @property
    def controls(self):
        """Gets the controls of this UpdateAssessmentControlSetStatusResponseControlSet.


        :return: The controls of this UpdateAssessmentControlSetStatusResponseControlSet.
        :rtype: List
        """
        return self._controls

    @controls.setter
    def controls(self, controls):
        """Sets the controls of this UpdateAssessmentControlSetStatusResponseControlSet.


        :param controls: The controls of this UpdateAssessmentControlSetStatusResponseControlSet.
        :type controls: List
        """

        self._controls = controls

    @property
    def delegations(self):
        """Gets the delegations of this UpdateAssessmentControlSetStatusResponseControlSet.


        :return: The delegations of this UpdateAssessmentControlSetStatusResponseControlSet.
        :rtype: List
        """
        return self._delegations

    @delegations.setter
    def delegations(self, delegations):
        """Sets the delegations of this UpdateAssessmentControlSetStatusResponseControlSet.


        :param delegations: The delegations of this UpdateAssessmentControlSetStatusResponseControlSet.
        :type delegations: List
        """

        self._delegations = delegations

    @property
    def system_evidence_count(self):
        """Gets the system_evidence_count of this UpdateAssessmentControlSetStatusResponseControlSet.


        :return: The system_evidence_count of this UpdateAssessmentControlSetStatusResponseControlSet.
        :rtype: int
        """
        return self._system_evidence_count

    @system_evidence_count.setter
    def system_evidence_count(self, system_evidence_count):
        """Sets the system_evidence_count of this UpdateAssessmentControlSetStatusResponseControlSet.


        :param system_evidence_count: The system_evidence_count of this UpdateAssessmentControlSetStatusResponseControlSet.
        :type system_evidence_count: int
        """

        self._system_evidence_count = system_evidence_count

    @property
    def manual_evidence_count(self):
        """Gets the manual_evidence_count of this UpdateAssessmentControlSetStatusResponseControlSet.


        :return: The manual_evidence_count of this UpdateAssessmentControlSetStatusResponseControlSet.
        :rtype: int
        """
        return self._manual_evidence_count

    @manual_evidence_count.setter
    def manual_evidence_count(self, manual_evidence_count):
        """Sets the manual_evidence_count of this UpdateAssessmentControlSetStatusResponseControlSet.


        :param manual_evidence_count: The manual_evidence_count of this UpdateAssessmentControlSetStatusResponseControlSet.
        :type manual_evidence_count: int
        """

        self._manual_evidence_count = manual_evidence_count
