# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.assessment_metadata_assessment_reports_destination import AssessmentMetadataAssessmentReportsDestination
from openapi_server.models.assessment_metadata_scope import AssessmentMetadataScope
from openapi_server.models.assessment_status import AssessmentStatus
from openapi_server import util


class AssessmentMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, id: str=None, description: str=None, compliance_type: str=None, status: AssessmentStatus=None, assessment_reports_destination: AssessmentMetadataAssessmentReportsDestination=None, scope: AssessmentMetadataScope=None, roles: List=None, delegations: List=None, creation_time: datetime=None, last_updated: datetime=None):
        """AssessmentMetadata - a model defined in OpenAPI

        :param name: The name of this AssessmentMetadata.
        :param id: The id of this AssessmentMetadata.
        :param description: The description of this AssessmentMetadata.
        :param compliance_type: The compliance_type of this AssessmentMetadata.
        :param status: The status of this AssessmentMetadata.
        :param assessment_reports_destination: The assessment_reports_destination of this AssessmentMetadata.
        :param scope: The scope of this AssessmentMetadata.
        :param roles: The roles of this AssessmentMetadata.
        :param delegations: The delegations of this AssessmentMetadata.
        :param creation_time: The creation_time of this AssessmentMetadata.
        :param last_updated: The last_updated of this AssessmentMetadata.
        """
        self.openapi_types = {
            'name': str,
            'id': str,
            'description': str,
            'compliance_type': str,
            'status': AssessmentStatus,
            'assessment_reports_destination': AssessmentMetadataAssessmentReportsDestination,
            'scope': AssessmentMetadataScope,
            'roles': List,
            'delegations': List,
            'creation_time': datetime,
            'last_updated': datetime
        }

        self.attribute_map = {
            'name': 'name',
            'id': 'id',
            'description': 'description',
            'compliance_type': 'complianceType',
            'status': 'status',
            'assessment_reports_destination': 'assessmentReportsDestination',
            'scope': 'scope',
            'roles': 'roles',
            'delegations': 'delegations',
            'creation_time': 'creationTime',
            'last_updated': 'lastUpdated'
        }

        self._name = name
        self._id = id
        self._description = description
        self._compliance_type = compliance_type
        self._status = status
        self._assessment_reports_destination = assessment_reports_destination
        self._scope = scope
        self._roles = roles
        self._delegations = delegations
        self._creation_time = creation_time
        self._last_updated = last_updated

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssessmentMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Assessment_metadata of this AssessmentMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this AssessmentMetadata.


        :return: The name of this AssessmentMetadata.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AssessmentMetadata.


        :param name: The name of this AssessmentMetadata.
        :type name: str
        """

        self._name = name

    @property
    def id(self):
        """Gets the id of this AssessmentMetadata.


        :return: The id of this AssessmentMetadata.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AssessmentMetadata.


        :param id: The id of this AssessmentMetadata.
        :type id: str
        """

        self._id = id

    @property
    def description(self):
        """Gets the description of this AssessmentMetadata.


        :return: The description of this AssessmentMetadata.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AssessmentMetadata.


        :param description: The description of this AssessmentMetadata.
        :type description: str
        """

        self._description = description

    @property
    def compliance_type(self):
        """Gets the compliance_type of this AssessmentMetadata.


        :return: The compliance_type of this AssessmentMetadata.
        :rtype: str
        """
        return self._compliance_type

    @compliance_type.setter
    def compliance_type(self, compliance_type):
        """Sets the compliance_type of this AssessmentMetadata.


        :param compliance_type: The compliance_type of this AssessmentMetadata.
        :type compliance_type: str
        """

        self._compliance_type = compliance_type

    @property
    def status(self):
        """Gets the status of this AssessmentMetadata.


        :return: The status of this AssessmentMetadata.
        :rtype: AssessmentStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AssessmentMetadata.


        :param status: The status of this AssessmentMetadata.
        :type status: AssessmentStatus
        """

        self._status = status

    @property
    def assessment_reports_destination(self):
        """Gets the assessment_reports_destination of this AssessmentMetadata.


        :return: The assessment_reports_destination of this AssessmentMetadata.
        :rtype: AssessmentMetadataAssessmentReportsDestination
        """
        return self._assessment_reports_destination

    @assessment_reports_destination.setter
    def assessment_reports_destination(self, assessment_reports_destination):
        """Sets the assessment_reports_destination of this AssessmentMetadata.


        :param assessment_reports_destination: The assessment_reports_destination of this AssessmentMetadata.
        :type assessment_reports_destination: AssessmentMetadataAssessmentReportsDestination
        """

        self._assessment_reports_destination = assessment_reports_destination

    @property
    def scope(self):
        """Gets the scope of this AssessmentMetadata.


        :return: The scope of this AssessmentMetadata.
        :rtype: AssessmentMetadataScope
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this AssessmentMetadata.


        :param scope: The scope of this AssessmentMetadata.
        :type scope: AssessmentMetadataScope
        """

        self._scope = scope

    @property
    def roles(self):
        """Gets the roles of this AssessmentMetadata.


        :return: The roles of this AssessmentMetadata.
        :rtype: List
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this AssessmentMetadata.


        :param roles: The roles of this AssessmentMetadata.
        :type roles: List
        """

        self._roles = roles

    @property
    def delegations(self):
        """Gets the delegations of this AssessmentMetadata.


        :return: The delegations of this AssessmentMetadata.
        :rtype: List
        """
        return self._delegations

    @delegations.setter
    def delegations(self, delegations):
        """Sets the delegations of this AssessmentMetadata.


        :param delegations: The delegations of this AssessmentMetadata.
        :type delegations: List
        """

        self._delegations = delegations

    @property
    def creation_time(self):
        """Gets the creation_time of this AssessmentMetadata.


        :return: The creation_time of this AssessmentMetadata.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this AssessmentMetadata.


        :param creation_time: The creation_time of this AssessmentMetadata.
        :type creation_time: datetime
        """

        self._creation_time = creation_time

    @property
    def last_updated(self):
        """Gets the last_updated of this AssessmentMetadata.


        :return: The last_updated of this AssessmentMetadata.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this AssessmentMetadata.


        :param last_updated: The last_updated of this AssessmentMetadata.
        :type last_updated: datetime
        """

        self._last_updated = last_updated
