# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_assessment_request_assessment_reports_destination import CreateAssessmentRequestAssessmentReportsDestination
from openapi_server.models.create_assessment_request_scope import CreateAssessmentRequestScope
from openapi_server.models.role import Role
import re
from openapi_server import util


class CreateAssessmentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, description: str=None, assessment_reports_destination: CreateAssessmentRequestAssessmentReportsDestination=None, scope: CreateAssessmentRequestScope=None, roles: List[Role]=None, framework_id: str=None, tags: Dict[str, str]=None):
        """CreateAssessmentRequest - a model defined in OpenAPI

        :param name: The name of this CreateAssessmentRequest.
        :param description: The description of this CreateAssessmentRequest.
        :param assessment_reports_destination: The assessment_reports_destination of this CreateAssessmentRequest.
        :param scope: The scope of this CreateAssessmentRequest.
        :param roles: The roles of this CreateAssessmentRequest.
        :param framework_id: The framework_id of this CreateAssessmentRequest.
        :param tags: The tags of this CreateAssessmentRequest.
        """
        self.openapi_types = {
            'name': str,
            'description': str,
            'assessment_reports_destination': CreateAssessmentRequestAssessmentReportsDestination,
            'scope': CreateAssessmentRequestScope,
            'roles': List[Role],
            'framework_id': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'name': 'name',
            'description': 'description',
            'assessment_reports_destination': 'assessmentReportsDestination',
            'scope': 'scope',
            'roles': 'roles',
            'framework_id': 'frameworkId',
            'tags': 'tags'
        }

        self._name = name
        self._description = description
        self._assessment_reports_destination = assessment_reports_destination
        self._scope = scope
        self._roles = roles
        self._framework_id = framework_id
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateAssessmentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateAssessment_request of this CreateAssessmentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateAssessmentRequest.

         The name of the assessment to be created. 

        :return: The name of this CreateAssessmentRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateAssessmentRequest.

         The name of the assessment to be created. 

        :param name: The name of this CreateAssessmentRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 300:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `300`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")
        if name is not None and not re.search(r'^[^\\]*$', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^[^\\]*$/`")

        self._name = name

    @property
    def description(self):
        """Gets the description of this CreateAssessmentRequest.

         The optional description of the assessment to be created. 

        :return: The description of this CreateAssessmentRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateAssessmentRequest.

         The optional description of the assessment to be created. 

        :param description: The description of this CreateAssessmentRequest.
        :type description: str
        """
        if description is not None and len(description) > 1000:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1000`")
        if description is not None and not re.search(r'^[\w\W\s\S]*$', description):
            raise ValueError("Invalid value for `description`, must be a follow pattern or equal to `/^[\w\W\s\S]*$/`")

        self._description = description

    @property
    def assessment_reports_destination(self):
        """Gets the assessment_reports_destination of this CreateAssessmentRequest.


        :return: The assessment_reports_destination of this CreateAssessmentRequest.
        :rtype: CreateAssessmentRequestAssessmentReportsDestination
        """
        return self._assessment_reports_destination

    @assessment_reports_destination.setter
    def assessment_reports_destination(self, assessment_reports_destination):
        """Sets the assessment_reports_destination of this CreateAssessmentRequest.


        :param assessment_reports_destination: The assessment_reports_destination of this CreateAssessmentRequest.
        :type assessment_reports_destination: CreateAssessmentRequestAssessmentReportsDestination
        """
        if assessment_reports_destination is None:
            raise ValueError("Invalid value for `assessment_reports_destination`, must not be `None`")

        self._assessment_reports_destination = assessment_reports_destination

    @property
    def scope(self):
        """Gets the scope of this CreateAssessmentRequest.


        :return: The scope of this CreateAssessmentRequest.
        :rtype: CreateAssessmentRequestScope
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this CreateAssessmentRequest.


        :param scope: The scope of this CreateAssessmentRequest.
        :type scope: CreateAssessmentRequestScope
        """
        if scope is None:
            raise ValueError("Invalid value for `scope`, must not be `None`")

        self._scope = scope

    @property
    def roles(self):
        """Gets the roles of this CreateAssessmentRequest.

         The list of roles for the assessment. 

        :return: The roles of this CreateAssessmentRequest.
        :rtype: List[Role]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this CreateAssessmentRequest.

         The list of roles for the assessment. 

        :param roles: The roles of this CreateAssessmentRequest.
        :type roles: List[Role]
        """
        if roles is None:
            raise ValueError("Invalid value for `roles`, must not be `None`")

        self._roles = roles

    @property
    def framework_id(self):
        """Gets the framework_id of this CreateAssessmentRequest.

         The identifier for the framework that the assessment will be created from. 

        :return: The framework_id of this CreateAssessmentRequest.
        :rtype: str
        """
        return self._framework_id

    @framework_id.setter
    def framework_id(self, framework_id):
        """Sets the framework_id of this CreateAssessmentRequest.

         The identifier for the framework that the assessment will be created from. 

        :param framework_id: The framework_id of this CreateAssessmentRequest.
        :type framework_id: str
        """
        if framework_id is None:
            raise ValueError("Invalid value for `framework_id`, must not be `None`")
        if framework_id is not None and len(framework_id) > 36:
            raise ValueError("Invalid value for `framework_id`, length must be less than or equal to `36`")
        if framework_id is not None and len(framework_id) < 36:
            raise ValueError("Invalid value for `framework_id`, length must be greater than or equal to `36`")
        if framework_id is not None and not re.search(r'^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$', framework_id):
            raise ValueError("Invalid value for `framework_id`, must be a follow pattern or equal to `/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/`")

        self._framework_id = framework_id

    @property
    def tags(self):
        """Gets the tags of this CreateAssessmentRequest.

         The tags that are associated with the assessment. 

        :return: The tags of this CreateAssessmentRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateAssessmentRequest.

         The tags that are associated with the assessment. 

        :param tags: The tags of this CreateAssessmentRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags
