# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class UpdateAssessmentControlSetStatusRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, status: str=None, comment: str=None):
        """UpdateAssessmentControlSetStatusRequest - a model defined in OpenAPI

        :param status: The status of this UpdateAssessmentControlSetStatusRequest.
        :param comment: The comment of this UpdateAssessmentControlSetStatusRequest.
        """
        self.openapi_types = {
            'status': str,
            'comment': str
        }

        self.attribute_map = {
            'status': 'status',
            'comment': 'comment'
        }

        self._status = status
        self._comment = comment

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateAssessmentControlSetStatusRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateAssessmentControlSetStatus_request of this UpdateAssessmentControlSetStatusRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self):
        """Gets the status of this UpdateAssessmentControlSetStatusRequest.

         The status of the control set that's being updated. 

        :return: The status of this UpdateAssessmentControlSetStatusRequest.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this UpdateAssessmentControlSetStatusRequest.

         The status of the control set that's being updated. 

        :param status: The status of this UpdateAssessmentControlSetStatusRequest.
        :type status: str
        """
        allowed_values = ["ACTIVE", "UNDER_REVIEW", "REVIEWED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def comment(self):
        """Gets the comment of this UpdateAssessmentControlSetStatusRequest.

         The comment that's related to the status update. 

        :return: The comment of this UpdateAssessmentControlSetStatusRequest.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this UpdateAssessmentControlSetStatusRequest.

         The comment that's related to the status update. 

        :param comment: The comment of this UpdateAssessmentControlSetStatusRequest.
        :type comment: str
        """
        if comment is None:
            raise ValueError("Invalid value for `comment`, must not be `None`")
        if comment is not None and len(comment) > 350:
            raise ValueError("Invalid value for `comment`, length must be less than or equal to `350`")
        if comment is not None and not re.search(r'^[\w\W\s\S]*$', comment):
            raise ValueError("Invalid value for `comment`, must be a follow pattern or equal to `/^[\w\W\s\S]*$/`")

        self._comment = comment
