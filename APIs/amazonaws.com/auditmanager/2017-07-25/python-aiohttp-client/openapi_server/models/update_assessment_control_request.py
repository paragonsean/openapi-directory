# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class UpdateAssessmentControlRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, control_status: str=None, comment_body: str=None):
        """UpdateAssessmentControlRequest - a model defined in OpenAPI

        :param control_status: The control_status of this UpdateAssessmentControlRequest.
        :param comment_body: The comment_body of this UpdateAssessmentControlRequest.
        """
        self.openapi_types = {
            'control_status': str,
            'comment_body': str
        }

        self.attribute_map = {
            'control_status': 'controlStatus',
            'comment_body': 'commentBody'
        }

        self._control_status = control_status
        self._comment_body = comment_body

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateAssessmentControlRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateAssessmentControl_request of this UpdateAssessmentControlRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def control_status(self):
        """Gets the control_status of this UpdateAssessmentControlRequest.

         The status of the control. 

        :return: The control_status of this UpdateAssessmentControlRequest.
        :rtype: str
        """
        return self._control_status

    @control_status.setter
    def control_status(self, control_status):
        """Sets the control_status of this UpdateAssessmentControlRequest.

         The status of the control. 

        :param control_status: The control_status of this UpdateAssessmentControlRequest.
        :type control_status: str
        """
        allowed_values = ["UNDER_REVIEW", "REVIEWED", "INACTIVE"]  # noqa: E501
        if control_status not in allowed_values:
            raise ValueError(
                "Invalid value for `control_status` ({0}), must be one of {1}"
                .format(control_status, allowed_values)
            )

        self._control_status = control_status

    @property
    def comment_body(self):
        """Gets the comment_body of this UpdateAssessmentControlRequest.

         The comment body text for the control. 

        :return: The comment_body of this UpdateAssessmentControlRequest.
        :rtype: str
        """
        return self._comment_body

    @comment_body.setter
    def comment_body(self, comment_body):
        """Sets the comment_body of this UpdateAssessmentControlRequest.

         The comment body text for the control. 

        :param comment_body: The comment_body of this UpdateAssessmentControlRequest.
        :type comment_body: str
        """
        if comment_body is not None and len(comment_body) > 500:
            raise ValueError("Invalid value for `comment_body`, length must be less than or equal to `500`")
        if comment_body is not None and not re.search(r'^[\w\W\s\S]*$', comment_body):
            raise ValueError("Invalid value for `comment_body`, must be a follow pattern or equal to `/^[\w\W\s\S]*$/`")

        self._comment_body = comment_body
