# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class ValidateAssessmentReportIntegrityRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, s3_relative_path: str=None):
        """ValidateAssessmentReportIntegrityRequest - a model defined in OpenAPI

        :param s3_relative_path: The s3_relative_path of this ValidateAssessmentReportIntegrityRequest.
        """
        self.openapi_types = {
            's3_relative_path': str
        }

        self.attribute_map = {
            's3_relative_path': 's3RelativePath'
        }

        self._s3_relative_path = s3_relative_path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ValidateAssessmentReportIntegrityRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ValidateAssessmentReportIntegrity_request of this ValidateAssessmentReportIntegrityRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def s3_relative_path(self):
        """Gets the s3_relative_path of this ValidateAssessmentReportIntegrityRequest.

         The relative path of the Amazon S3 bucket that the assessment report is stored in. 

        :return: The s3_relative_path of this ValidateAssessmentReportIntegrityRequest.
        :rtype: str
        """
        return self._s3_relative_path

    @s3_relative_path.setter
    def s3_relative_path(self, s3_relative_path):
        """Sets the s3_relative_path of this ValidateAssessmentReportIntegrityRequest.

         The relative path of the Amazon S3 bucket that the assessment report is stored in. 

        :param s3_relative_path: The s3_relative_path of this ValidateAssessmentReportIntegrityRequest.
        :type s3_relative_path: str
        """
        if s3_relative_path is None:
            raise ValueError("Invalid value for `s3_relative_path`, must not be `None`")
        if s3_relative_path is not None and len(s3_relative_path) > 1024:
            raise ValueError("Invalid value for `s3_relative_path`, length must be less than or equal to `1024`")
        if s3_relative_path is not None and len(s3_relative_path) < 1:
            raise ValueError("Invalid value for `s3_relative_path`, length must be greater than or equal to `1`")
        if s3_relative_path is not None and not re.search(r'^(S|s)3:\/\/[a-zA-Z0-9\-\.\(\)\\'\*\_\!\/]+$', s3_relative_path):
            raise ValueError("Invalid value for `s3_relative_path`, must be a follow pattern or equal to `/^(S|s)3:\/\/[a-zA-Z0-9\-\.\(\)\'\*\_\!\/]+$/`")

        self._s3_relative_path = s3_relative_path
