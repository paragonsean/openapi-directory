# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.framework_metadata import FrameworkMetadata
from openapi_server import util


class AssessmentFramework(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, arn: str=None, metadata: FrameworkMetadata=None, control_sets: List=None):
        """AssessmentFramework - a model defined in OpenAPI

        :param id: The id of this AssessmentFramework.
        :param arn: The arn of this AssessmentFramework.
        :param metadata: The metadata of this AssessmentFramework.
        :param control_sets: The control_sets of this AssessmentFramework.
        """
        self.openapi_types = {
            'id': str,
            'arn': str,
            'metadata': FrameworkMetadata,
            'control_sets': List
        }

        self.attribute_map = {
            'id': 'id',
            'arn': 'arn',
            'metadata': 'metadata',
            'control_sets': 'controlSets'
        }

        self._id = id
        self._arn = arn
        self._metadata = metadata
        self._control_sets = control_sets

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssessmentFramework':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Assessment_framework of this AssessmentFramework.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this AssessmentFramework.


        :return: The id of this AssessmentFramework.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AssessmentFramework.


        :param id: The id of this AssessmentFramework.
        :type id: str
        """

        self._id = id

    @property
    def arn(self):
        """Gets the arn of this AssessmentFramework.


        :return: The arn of this AssessmentFramework.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this AssessmentFramework.


        :param arn: The arn of this AssessmentFramework.
        :type arn: str
        """

        self._arn = arn

    @property
    def metadata(self):
        """Gets the metadata of this AssessmentFramework.


        :return: The metadata of this AssessmentFramework.
        :rtype: FrameworkMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this AssessmentFramework.


        :param metadata: The metadata of this AssessmentFramework.
        :type metadata: FrameworkMetadata
        """

        self._metadata = metadata

    @property
    def control_sets(self):
        """Gets the control_sets of this AssessmentFramework.


        :return: The control_sets of this AssessmentFramework.
        :rtype: List
        """
        return self._control_sets

    @control_sets.setter
    def control_sets(self, control_sets):
        """Sets the control_sets of this AssessmentFramework.


        :param control_sets: The control_sets of this AssessmentFramework.
        :type control_sets: List
        """

        self._control_sets = control_sets
