/**
 * AWS Audit Manager
 * <p>Welcome to the Audit Manager API reference. This guide is for developers who need detailed information about the Audit Manager API operations, data types, and errors. </p> <p>Audit Manager is a service that provides automated evidence collection so that you can continually audit your Amazon Web Services usage. You can use it to assess the effectiveness of your controls, manage risk, and simplify compliance.</p> <p>Audit Manager provides prebuilt frameworks that structure and automate assessments for a given compliance standard. Frameworks include a prebuilt collection of controls with descriptions and testing procedures. These controls are grouped according to the requirements of the specified compliance standard or regulation. You can also customize frameworks and controls to support internal audits with specific requirements. </p> <p>Use the following links to get started with the Audit Manager API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Audit Manager API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Audit Manager data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Audit Manager, we recommend that you review the <a href=\"https://docs.aws.amazon.com/audit-manager/latest/userguide/what-is.html\"> Audit Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateControlResponse_control.h
 *
 * 
 */

#ifndef OAICreateControlResponse_control_H
#define OAICreateControlResponse_control_H

#include <QJsonObject>

#include "OAIControlType.h"
#include <QDateTime>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICreateControlResponse_control : public OAIObject {
public:
    OAICreateControlResponse_control();
    OAICreateControlResponse_control(QString json);
    ~OAICreateControlResponse_control() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getArn() const;
    void setArn(const QString &arn);
    bool is_arn_Set() const;
    bool is_arn_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    OAIControlType getType() const;
    void setType(const OAIControlType &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getTestingInformation() const;
    void setTestingInformation(const QString &testing_information);
    bool is_testing_information_Set() const;
    bool is_testing_information_Valid() const;

    QString getActionPlanTitle() const;
    void setActionPlanTitle(const QString &action_plan_title);
    bool is_action_plan_title_Set() const;
    bool is_action_plan_title_Valid() const;

    QString getActionPlanInstructions() const;
    void setActionPlanInstructions(const QString &action_plan_instructions);
    bool is_action_plan_instructions_Set() const;
    bool is_action_plan_instructions_Valid() const;

    QString getControlSources() const;
    void setControlSources(const QString &control_sources);
    bool is_control_sources_Set() const;
    bool is_control_sources_Valid() const;

    QList getControlMappingSources() const;
    void setControlMappingSources(const QList &control_mapping_sources);
    bool is_control_mapping_sources_Set() const;
    bool is_control_mapping_sources_Valid() const;

    QDateTime getCreatedAt() const;
    void setCreatedAt(const QDateTime &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    QDateTime getLastUpdatedAt() const;
    void setLastUpdatedAt(const QDateTime &last_updated_at);
    bool is_last_updated_at_Set() const;
    bool is_last_updated_at_Valid() const;

    QString getCreatedBy() const;
    void setCreatedBy(const QString &created_by);
    bool is_created_by_Set() const;
    bool is_created_by_Valid() const;

    QString getLastUpdatedBy() const;
    void setLastUpdatedBy(const QString &last_updated_by);
    bool is_last_updated_by_Set() const;
    bool is_last_updated_by_Valid() const;

    QMap getTags() const;
    void setTags(const QMap &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_arn;
    bool m_arn_isSet;
    bool m_arn_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    OAIControlType m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_testing_information;
    bool m_testing_information_isSet;
    bool m_testing_information_isValid;

    QString m_action_plan_title;
    bool m_action_plan_title_isSet;
    bool m_action_plan_title_isValid;

    QString m_action_plan_instructions;
    bool m_action_plan_instructions_isSet;
    bool m_action_plan_instructions_isValid;

    QString m_control_sources;
    bool m_control_sources_isSet;
    bool m_control_sources_isValid;

    QList m_control_mapping_sources;
    bool m_control_mapping_sources_isSet;
    bool m_control_mapping_sources_isValid;

    QDateTime m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    QDateTime m_last_updated_at;
    bool m_last_updated_at_isSet;
    bool m_last_updated_at_isValid;

    QString m_created_by;
    bool m_created_by_isSet;
    bool m_created_by_isValid;

    QString m_last_updated_by;
    bool m_last_updated_by_isSet;
    bool m_last_updated_by_isValid;

    QMap m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateControlResponse_control)

#endif // OAICreateControlResponse_control_H
