/**
 * AWS Audit Manager
 * <p>Welcome to the Audit Manager API reference. This guide is for developers who need detailed information about the Audit Manager API operations, data types, and errors. </p> <p>Audit Manager is a service that provides automated evidence collection so that you can continually audit your Amazon Web Services usage. You can use it to assess the effectiveness of your controls, manage risk, and simplify compliance.</p> <p>Audit Manager provides prebuilt frameworks that structure and automate assessments for a given compliance standard. Frameworks include a prebuilt collection of controls with descriptions and testing procedures. These controls are grouped according to the requirements of the specified compliance standard or regulation. You can also customize frameworks and controls to support internal audits with specific requirements. </p> <p>Use the following links to get started with the Audit Manager API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Audit Manager API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Audit Manager data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Audit Manager, we recommend that you review the <a href=\"https://docs.aws.amazon.com/audit-manager/latest/userguide/what-is.html\"> Audit Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateAssessmentRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateAssessmentRequest::OAIUpdateAssessmentRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateAssessmentRequest::OAIUpdateAssessmentRequest() {
    this->initializeModel();
}

OAIUpdateAssessmentRequest::~OAIUpdateAssessmentRequest() {}

void OAIUpdateAssessmentRequest::initializeModel() {

    m_assessment_name_isSet = false;
    m_assessment_name_isValid = false;

    m_assessment_description_isSet = false;
    m_assessment_description_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;

    m_assessment_reports_destination_isSet = false;
    m_assessment_reports_destination_isValid = false;

    m_roles_isSet = false;
    m_roles_isValid = false;
}

void OAIUpdateAssessmentRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateAssessmentRequest::fromJsonObject(QJsonObject json) {

    m_assessment_name_isValid = ::OpenAPI::fromJsonValue(m_assessment_name, json[QString("assessmentName")]);
    m_assessment_name_isSet = !json[QString("assessmentName")].isNull() && m_assessment_name_isValid;

    m_assessment_description_isValid = ::OpenAPI::fromJsonValue(m_assessment_description, json[QString("assessmentDescription")]);
    m_assessment_description_isSet = !json[QString("assessmentDescription")].isNull() && m_assessment_description_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;

    m_assessment_reports_destination_isValid = ::OpenAPI::fromJsonValue(m_assessment_reports_destination, json[QString("assessmentReportsDestination")]);
    m_assessment_reports_destination_isSet = !json[QString("assessmentReportsDestination")].isNull() && m_assessment_reports_destination_isValid;

    m_roles_isValid = ::OpenAPI::fromJsonValue(m_roles, json[QString("roles")]);
    m_roles_isSet = !json[QString("roles")].isNull() && m_roles_isValid;
}

QString OAIUpdateAssessmentRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateAssessmentRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_assessment_name_isSet) {
        obj.insert(QString("assessmentName"), ::OpenAPI::toJsonValue(m_assessment_name));
    }
    if (m_assessment_description_isSet) {
        obj.insert(QString("assessmentDescription"), ::OpenAPI::toJsonValue(m_assessment_description));
    }
    if (m_scope.isSet()) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    if (m_assessment_reports_destination.isSet()) {
        obj.insert(QString("assessmentReportsDestination"), ::OpenAPI::toJsonValue(m_assessment_reports_destination));
    }
    if (m_roles.isSet()) {
        obj.insert(QString("roles"), ::OpenAPI::toJsonValue(m_roles));
    }
    return obj;
}

QString OAIUpdateAssessmentRequest::getAssessmentName() const {
    return m_assessment_name;
}
void OAIUpdateAssessmentRequest::setAssessmentName(const QString &assessment_name) {
    m_assessment_name = assessment_name;
    m_assessment_name_isSet = true;
}

bool OAIUpdateAssessmentRequest::is_assessment_name_Set() const{
    return m_assessment_name_isSet;
}

bool OAIUpdateAssessmentRequest::is_assessment_name_Valid() const{
    return m_assessment_name_isValid;
}

QString OAIUpdateAssessmentRequest::getAssessmentDescription() const {
    return m_assessment_description;
}
void OAIUpdateAssessmentRequest::setAssessmentDescription(const QString &assessment_description) {
    m_assessment_description = assessment_description;
    m_assessment_description_isSet = true;
}

bool OAIUpdateAssessmentRequest::is_assessment_description_Set() const{
    return m_assessment_description_isSet;
}

bool OAIUpdateAssessmentRequest::is_assessment_description_Valid() const{
    return m_assessment_description_isValid;
}

OAIUpdateAssessmentRequest_scope OAIUpdateAssessmentRequest::getScope() const {
    return m_scope;
}
void OAIUpdateAssessmentRequest::setScope(const OAIUpdateAssessmentRequest_scope &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAIUpdateAssessmentRequest::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAIUpdateAssessmentRequest::is_scope_Valid() const{
    return m_scope_isValid;
}

OAIUpdateAssessmentRequest_assessmentReportsDestination OAIUpdateAssessmentRequest::getAssessmentReportsDestination() const {
    return m_assessment_reports_destination;
}
void OAIUpdateAssessmentRequest::setAssessmentReportsDestination(const OAIUpdateAssessmentRequest_assessmentReportsDestination &assessment_reports_destination) {
    m_assessment_reports_destination = assessment_reports_destination;
    m_assessment_reports_destination_isSet = true;
}

bool OAIUpdateAssessmentRequest::is_assessment_reports_destination_Set() const{
    return m_assessment_reports_destination_isSet;
}

bool OAIUpdateAssessmentRequest::is_assessment_reports_destination_Valid() const{
    return m_assessment_reports_destination_isValid;
}

QList OAIUpdateAssessmentRequest::getRoles() const {
    return m_roles;
}
void OAIUpdateAssessmentRequest::setRoles(const QList &roles) {
    m_roles = roles;
    m_roles_isSet = true;
}

bool OAIUpdateAssessmentRequest::is_roles_Set() const{
    return m_roles_isSet;
}

bool OAIUpdateAssessmentRequest::is_roles_Valid() const{
    return m_roles_isValid;
}

bool OAIUpdateAssessmentRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assessment_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assessment_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_assessment_reports_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_roles.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateAssessmentRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_scope_isValid && true;
}

} // namespace OpenAPI
