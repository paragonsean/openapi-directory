/**
 * AWS Audit Manager
 * <p>Welcome to the Audit Manager API reference. This guide is for developers who need detailed information about the Audit Manager API operations, data types, and errors. </p> <p>Audit Manager is a service that provides automated evidence collection so that you can continually audit your Amazon Web Services usage. You can use it to assess the effectiveness of your controls, manage risk, and simplify compliance.</p> <p>Audit Manager provides prebuilt frameworks that structure and automate assessments for a given compliance standard. Frameworks include a prebuilt collection of controls with descriptions and testing procedures. These controls are grouped according to the requirements of the specified compliance standard or regulation. You can also customize frameworks and controls to support internal audits with specific requirements. </p> <p>Use the following links to get started with the Audit Manager API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Audit Manager API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Audit Manager data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Audit Manager, we recommend that you review the <a href=\"https://docs.aws.amazon.com/audit-manager/latest/userguide/what-is.html\"> Audit Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateSettings_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateSettings_request::OAIUpdateSettings_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateSettings_request::OAIUpdateSettings_request() {
    this->initializeModel();
}

OAIUpdateSettings_request::~OAIUpdateSettings_request() {}

void OAIUpdateSettings_request::initializeModel() {

    m_sns_topic_isSet = false;
    m_sns_topic_isValid = false;

    m_default_assessment_reports_destination_isSet = false;
    m_default_assessment_reports_destination_isValid = false;

    m_default_process_owners_isSet = false;
    m_default_process_owners_isValid = false;

    m_kms_key_isSet = false;
    m_kms_key_isValid = false;

    m_evidence_finder_enabled_isSet = false;
    m_evidence_finder_enabled_isValid = false;

    m_deregistration_policy_isSet = false;
    m_deregistration_policy_isValid = false;

    m_default_export_destination_isSet = false;
    m_default_export_destination_isValid = false;
}

void OAIUpdateSettings_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateSettings_request::fromJsonObject(QJsonObject json) {

    m_sns_topic_isValid = ::OpenAPI::fromJsonValue(m_sns_topic, json[QString("snsTopic")]);
    m_sns_topic_isSet = !json[QString("snsTopic")].isNull() && m_sns_topic_isValid;

    m_default_assessment_reports_destination_isValid = ::OpenAPI::fromJsonValue(m_default_assessment_reports_destination, json[QString("defaultAssessmentReportsDestination")]);
    m_default_assessment_reports_destination_isSet = !json[QString("defaultAssessmentReportsDestination")].isNull() && m_default_assessment_reports_destination_isValid;

    m_default_process_owners_isValid = ::OpenAPI::fromJsonValue(m_default_process_owners, json[QString("defaultProcessOwners")]);
    m_default_process_owners_isSet = !json[QString("defaultProcessOwners")].isNull() && m_default_process_owners_isValid;

    m_kms_key_isValid = ::OpenAPI::fromJsonValue(m_kms_key, json[QString("kmsKey")]);
    m_kms_key_isSet = !json[QString("kmsKey")].isNull() && m_kms_key_isValid;

    m_evidence_finder_enabled_isValid = ::OpenAPI::fromJsonValue(m_evidence_finder_enabled, json[QString("evidenceFinderEnabled")]);
    m_evidence_finder_enabled_isSet = !json[QString("evidenceFinderEnabled")].isNull() && m_evidence_finder_enabled_isValid;

    m_deregistration_policy_isValid = ::OpenAPI::fromJsonValue(m_deregistration_policy, json[QString("deregistrationPolicy")]);
    m_deregistration_policy_isSet = !json[QString("deregistrationPolicy")].isNull() && m_deregistration_policy_isValid;

    m_default_export_destination_isValid = ::OpenAPI::fromJsonValue(m_default_export_destination, json[QString("defaultExportDestination")]);
    m_default_export_destination_isSet = !json[QString("defaultExportDestination")].isNull() && m_default_export_destination_isValid;
}

QString OAIUpdateSettings_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateSettings_request::asJsonObject() const {
    QJsonObject obj;
    if (m_sns_topic_isSet) {
        obj.insert(QString("snsTopic"), ::OpenAPI::toJsonValue(m_sns_topic));
    }
    if (m_default_assessment_reports_destination.isSet()) {
        obj.insert(QString("defaultAssessmentReportsDestination"), ::OpenAPI::toJsonValue(m_default_assessment_reports_destination));
    }
    if (m_default_process_owners.size() > 0) {
        obj.insert(QString("defaultProcessOwners"), ::OpenAPI::toJsonValue(m_default_process_owners));
    }
    if (m_kms_key_isSet) {
        obj.insert(QString("kmsKey"), ::OpenAPI::toJsonValue(m_kms_key));
    }
    if (m_evidence_finder_enabled_isSet) {
        obj.insert(QString("evidenceFinderEnabled"), ::OpenAPI::toJsonValue(m_evidence_finder_enabled));
    }
    if (m_deregistration_policy.isSet()) {
        obj.insert(QString("deregistrationPolicy"), ::OpenAPI::toJsonValue(m_deregistration_policy));
    }
    if (m_default_export_destination.isSet()) {
        obj.insert(QString("defaultExportDestination"), ::OpenAPI::toJsonValue(m_default_export_destination));
    }
    return obj;
}

QString OAIUpdateSettings_request::getSnsTopic() const {
    return m_sns_topic;
}
void OAIUpdateSettings_request::setSnsTopic(const QString &sns_topic) {
    m_sns_topic = sns_topic;
    m_sns_topic_isSet = true;
}

bool OAIUpdateSettings_request::is_sns_topic_Set() const{
    return m_sns_topic_isSet;
}

bool OAIUpdateSettings_request::is_sns_topic_Valid() const{
    return m_sns_topic_isValid;
}

OAICreateAssessment_request_assessmentReportsDestination OAIUpdateSettings_request::getDefaultAssessmentReportsDestination() const {
    return m_default_assessment_reports_destination;
}
void OAIUpdateSettings_request::setDefaultAssessmentReportsDestination(const OAICreateAssessment_request_assessmentReportsDestination &default_assessment_reports_destination) {
    m_default_assessment_reports_destination = default_assessment_reports_destination;
    m_default_assessment_reports_destination_isSet = true;
}

bool OAIUpdateSettings_request::is_default_assessment_reports_destination_Set() const{
    return m_default_assessment_reports_destination_isSet;
}

bool OAIUpdateSettings_request::is_default_assessment_reports_destination_Valid() const{
    return m_default_assessment_reports_destination_isValid;
}

QList<OAIRole> OAIUpdateSettings_request::getDefaultProcessOwners() const {
    return m_default_process_owners;
}
void OAIUpdateSettings_request::setDefaultProcessOwners(const QList<OAIRole> &default_process_owners) {
    m_default_process_owners = default_process_owners;
    m_default_process_owners_isSet = true;
}

bool OAIUpdateSettings_request::is_default_process_owners_Set() const{
    return m_default_process_owners_isSet;
}

bool OAIUpdateSettings_request::is_default_process_owners_Valid() const{
    return m_default_process_owners_isValid;
}

QString OAIUpdateSettings_request::getKmsKey() const {
    return m_kms_key;
}
void OAIUpdateSettings_request::setKmsKey(const QString &kms_key) {
    m_kms_key = kms_key;
    m_kms_key_isSet = true;
}

bool OAIUpdateSettings_request::is_kms_key_Set() const{
    return m_kms_key_isSet;
}

bool OAIUpdateSettings_request::is_kms_key_Valid() const{
    return m_kms_key_isValid;
}

bool OAIUpdateSettings_request::isEvidenceFinderEnabled() const {
    return m_evidence_finder_enabled;
}
void OAIUpdateSettings_request::setEvidenceFinderEnabled(const bool &evidence_finder_enabled) {
    m_evidence_finder_enabled = evidence_finder_enabled;
    m_evidence_finder_enabled_isSet = true;
}

bool OAIUpdateSettings_request::is_evidence_finder_enabled_Set() const{
    return m_evidence_finder_enabled_isSet;
}

bool OAIUpdateSettings_request::is_evidence_finder_enabled_Valid() const{
    return m_evidence_finder_enabled_isValid;
}

OAIUpdateSettings_request_deregistrationPolicy OAIUpdateSettings_request::getDeregistrationPolicy() const {
    return m_deregistration_policy;
}
void OAIUpdateSettings_request::setDeregistrationPolicy(const OAIUpdateSettings_request_deregistrationPolicy &deregistration_policy) {
    m_deregistration_policy = deregistration_policy;
    m_deregistration_policy_isSet = true;
}

bool OAIUpdateSettings_request::is_deregistration_policy_Set() const{
    return m_deregistration_policy_isSet;
}

bool OAIUpdateSettings_request::is_deregistration_policy_Valid() const{
    return m_deregistration_policy_isValid;
}

OAIUpdateSettings_request_defaultExportDestination OAIUpdateSettings_request::getDefaultExportDestination() const {
    return m_default_export_destination;
}
void OAIUpdateSettings_request::setDefaultExportDestination(const OAIUpdateSettings_request_defaultExportDestination &default_export_destination) {
    m_default_export_destination = default_export_destination;
    m_default_export_destination_isSet = true;
}

bool OAIUpdateSettings_request::is_default_export_destination_Set() const{
    return m_default_export_destination_isSet;
}

bool OAIUpdateSettings_request::is_default_export_destination_Valid() const{
    return m_default_export_destination_isValid;
}

bool OAIUpdateSettings_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sns_topic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_assessment_reports_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_process_owners.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evidence_finder_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deregistration_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_export_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateSettings_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
