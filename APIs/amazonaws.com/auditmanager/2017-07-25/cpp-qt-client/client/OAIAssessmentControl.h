/**
 * AWS Audit Manager
 * <p>Welcome to the Audit Manager API reference. This guide is for developers who need detailed information about the Audit Manager API operations, data types, and errors. </p> <p>Audit Manager is a service that provides automated evidence collection so that you can continually audit your Amazon Web Services usage. You can use it to assess the effectiveness of your controls, manage risk, and simplify compliance.</p> <p>Audit Manager provides prebuilt frameworks that structure and automate assessments for a given compliance standard. Frameworks include a prebuilt collection of controls with descriptions and testing procedures. These controls are grouped according to the requirements of the specified compliance standard or regulation. You can also customize frameworks and controls to support internal audits with specific requirements. </p> <p>Use the following links to get started with the Audit Manager API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Audit Manager API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Audit Manager data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Audit Manager, we recommend that you review the <a href=\"https://docs.aws.amazon.com/audit-manager/latest/userguide/what-is.html\"> Audit Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAssessmentControl.h
 *
 *  The control entity that represents a standard control or a custom control in an Audit Manager assessment. 
 */

#ifndef OAIAssessmentControl_H
#define OAIAssessmentControl_H

#include <QJsonObject>

#include "OAIControlResponse.h"
#include "OAIControlStatus.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAssessmentControl : public OAIObject {
public:
    OAIAssessmentControl();
    OAIAssessmentControl(QString json);
    ~OAIAssessmentControl() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    OAIControlStatus getStatus() const;
    void setStatus(const OAIControlStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    OAIControlResponse getResponse() const;
    void setResponse(const OAIControlResponse &response);
    bool is_response_Set() const;
    bool is_response_Valid() const;

    QList getComments() const;
    void setComments(const QList &comments);
    bool is_comments_Set() const;
    bool is_comments_Valid() const;

    QList getEvidenceSources() const;
    void setEvidenceSources(const QList &evidence_sources);
    bool is_evidence_sources_Set() const;
    bool is_evidence_sources_Valid() const;

    qint32 getEvidenceCount() const;
    void setEvidenceCount(const qint32 &evidence_count);
    bool is_evidence_count_Set() const;
    bool is_evidence_count_Valid() const;

    qint32 getAssessmentReportEvidenceCount() const;
    void setAssessmentReportEvidenceCount(const qint32 &assessment_report_evidence_count);
    bool is_assessment_report_evidence_count_Set() const;
    bool is_assessment_report_evidence_count_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    OAIControlStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    OAIControlResponse m_response;
    bool m_response_isSet;
    bool m_response_isValid;

    QList m_comments;
    bool m_comments_isSet;
    bool m_comments_isValid;

    QList m_evidence_sources;
    bool m_evidence_sources_isSet;
    bool m_evidence_sources_isValid;

    qint32 m_evidence_count;
    bool m_evidence_count_isSet;
    bool m_evidence_count_isValid;

    qint32 m_assessment_report_evidence_count;
    bool m_assessment_report_evidence_count_isSet;
    bool m_assessment_report_evidence_count_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAssessmentControl)

#endif // OAIAssessmentControl_H
