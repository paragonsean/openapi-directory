/**
 * AWS Audit Manager
 * <p>Welcome to the Audit Manager API reference. This guide is for developers who need detailed information about the Audit Manager API operations, data types, and errors. </p> <p>Audit Manager is a service that provides automated evidence collection so that you can continually audit your Amazon Web Services usage. You can use it to assess the effectiveness of your controls, manage risk, and simplify compliance.</p> <p>Audit Manager provides prebuilt frameworks that structure and automate assessments for a given compliance standard. Frameworks include a prebuilt collection of controls with descriptions and testing procedures. These controls are grouped according to the requirements of the specified compliance standard or regulation. You can also customize frameworks and controls to support internal audits with specific requirements. </p> <p>Use the following links to get started with the Audit Manager API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Audit Manager API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Audit Manager data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Audit Manager, we recommend that you review the <a href=\"https://docs.aws.amazon.com/audit-manager/latest/userguide/what-is.html\"> Audit Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetEvidenceFolderResponse_evidenceFolder.h
 *
 * 
 */

#ifndef OAIGetEvidenceFolderResponse_evidenceFolder_H
#define OAIGetEvidenceFolderResponse_evidenceFolder_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGetEvidenceFolderResponse_evidenceFolder : public OAIObject {
public:
    OAIGetEvidenceFolderResponse_evidenceFolder();
    OAIGetEvidenceFolderResponse_evidenceFolder(QString json);
    ~OAIGetEvidenceFolderResponse_evidenceFolder() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QDateTime getDate() const;
    void setDate(const QDateTime &date);
    bool is_date_Set() const;
    bool is_date_Valid() const;

    QString getAssessmentId() const;
    void setAssessmentId(const QString &assessment_id);
    bool is_assessment_id_Set() const;
    bool is_assessment_id_Valid() const;

    QString getControlSetId() const;
    void setControlSetId(const QString &control_set_id);
    bool is_control_set_id_Set() const;
    bool is_control_set_id_Valid() const;

    QString getControlId() const;
    void setControlId(const QString &control_id);
    bool is_control_id_Set() const;
    bool is_control_id_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getDataSource() const;
    void setDataSource(const QString &data_source);
    bool is_data_source_Set() const;
    bool is_data_source_Valid() const;

    QString getAuthor() const;
    void setAuthor(const QString &author);
    bool is_author_Set() const;
    bool is_author_Valid() const;

    qint32 getTotalEvidence() const;
    void setTotalEvidence(const qint32 &total_evidence);
    bool is_total_evidence_Set() const;
    bool is_total_evidence_Valid() const;

    qint32 getAssessmentReportSelectionCount() const;
    void setAssessmentReportSelectionCount(const qint32 &assessment_report_selection_count);
    bool is_assessment_report_selection_count_Set() const;
    bool is_assessment_report_selection_count_Valid() const;

    QString getControlName() const;
    void setControlName(const QString &control_name);
    bool is_control_name_Set() const;
    bool is_control_name_Valid() const;

    qint32 getEvidenceResourcesIncludedCount() const;
    void setEvidenceResourcesIncludedCount(const qint32 &evidence_resources_included_count);
    bool is_evidence_resources_included_count_Set() const;
    bool is_evidence_resources_included_count_Valid() const;

    qint32 getEvidenceByTypeConfigurationDataCount() const;
    void setEvidenceByTypeConfigurationDataCount(const qint32 &evidence_by_type_configuration_data_count);
    bool is_evidence_by_type_configuration_data_count_Set() const;
    bool is_evidence_by_type_configuration_data_count_Valid() const;

    qint32 getEvidenceByTypeManualCount() const;
    void setEvidenceByTypeManualCount(const qint32 &evidence_by_type_manual_count);
    bool is_evidence_by_type_manual_count_Set() const;
    bool is_evidence_by_type_manual_count_Valid() const;

    qint32 getEvidenceByTypeComplianceCheckCount() const;
    void setEvidenceByTypeComplianceCheckCount(const qint32 &evidence_by_type_compliance_check_count);
    bool is_evidence_by_type_compliance_check_count_Set() const;
    bool is_evidence_by_type_compliance_check_count_Valid() const;

    qint32 getEvidenceByTypeComplianceCheckIssuesCount() const;
    void setEvidenceByTypeComplianceCheckIssuesCount(const qint32 &evidence_by_type_compliance_check_issues_count);
    bool is_evidence_by_type_compliance_check_issues_count_Set() const;
    bool is_evidence_by_type_compliance_check_issues_count_Valid() const;

    qint32 getEvidenceByTypeUserActivityCount() const;
    void setEvidenceByTypeUserActivityCount(const qint32 &evidence_by_type_user_activity_count);
    bool is_evidence_by_type_user_activity_count_Set() const;
    bool is_evidence_by_type_user_activity_count_Valid() const;

    qint32 getEvidenceAwsServiceSourceCount() const;
    void setEvidenceAwsServiceSourceCount(const qint32 &evidence_aws_service_source_count);
    bool is_evidence_aws_service_source_count_Set() const;
    bool is_evidence_aws_service_source_count_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QDateTime m_date;
    bool m_date_isSet;
    bool m_date_isValid;

    QString m_assessment_id;
    bool m_assessment_id_isSet;
    bool m_assessment_id_isValid;

    QString m_control_set_id;
    bool m_control_set_id_isSet;
    bool m_control_set_id_isValid;

    QString m_control_id;
    bool m_control_id_isSet;
    bool m_control_id_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_data_source;
    bool m_data_source_isSet;
    bool m_data_source_isValid;

    QString m_author;
    bool m_author_isSet;
    bool m_author_isValid;

    qint32 m_total_evidence;
    bool m_total_evidence_isSet;
    bool m_total_evidence_isValid;

    qint32 m_assessment_report_selection_count;
    bool m_assessment_report_selection_count_isSet;
    bool m_assessment_report_selection_count_isValid;

    QString m_control_name;
    bool m_control_name_isSet;
    bool m_control_name_isValid;

    qint32 m_evidence_resources_included_count;
    bool m_evidence_resources_included_count_isSet;
    bool m_evidence_resources_included_count_isValid;

    qint32 m_evidence_by_type_configuration_data_count;
    bool m_evidence_by_type_configuration_data_count_isSet;
    bool m_evidence_by_type_configuration_data_count_isValid;

    qint32 m_evidence_by_type_manual_count;
    bool m_evidence_by_type_manual_count_isSet;
    bool m_evidence_by_type_manual_count_isValid;

    qint32 m_evidence_by_type_compliance_check_count;
    bool m_evidence_by_type_compliance_check_count_isSet;
    bool m_evidence_by_type_compliance_check_count_isValid;

    qint32 m_evidence_by_type_compliance_check_issues_count;
    bool m_evidence_by_type_compliance_check_issues_count_isSet;
    bool m_evidence_by_type_compliance_check_issues_count_isValid;

    qint32 m_evidence_by_type_user_activity_count;
    bool m_evidence_by_type_user_activity_count_isSet;
    bool m_evidence_by_type_user_activity_count_isValid;

    qint32 m_evidence_aws_service_source_count;
    bool m_evidence_aws_service_source_count_isSet;
    bool m_evidence_aws_service_source_count_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetEvidenceFolderResponse_evidenceFolder)

#endif // OAIGetEvidenceFolderResponse_evidenceFolder_H
