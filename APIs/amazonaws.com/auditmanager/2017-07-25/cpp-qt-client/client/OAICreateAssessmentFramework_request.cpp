/**
 * AWS Audit Manager
 * <p>Welcome to the Audit Manager API reference. This guide is for developers who need detailed information about the Audit Manager API operations, data types, and errors. </p> <p>Audit Manager is a service that provides automated evidence collection so that you can continually audit your Amazon Web Services usage. You can use it to assess the effectiveness of your controls, manage risk, and simplify compliance.</p> <p>Audit Manager provides prebuilt frameworks that structure and automate assessments for a given compliance standard. Frameworks include a prebuilt collection of controls with descriptions and testing procedures. These controls are grouped according to the requirements of the specified compliance standard or regulation. You can also customize frameworks and controls to support internal audits with specific requirements. </p> <p>Use the following links to get started with the Audit Manager API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Audit Manager API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Audit Manager data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Audit Manager, we recommend that you review the <a href=\"https://docs.aws.amazon.com/audit-manager/latest/userguide/what-is.html\"> Audit Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateAssessmentFramework_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateAssessmentFramework_request::OAICreateAssessmentFramework_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateAssessmentFramework_request::OAICreateAssessmentFramework_request() {
    this->initializeModel();
}

OAICreateAssessmentFramework_request::~OAICreateAssessmentFramework_request() {}

void OAICreateAssessmentFramework_request::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_compliance_type_isSet = false;
    m_compliance_type_isValid = false;

    m_control_sets_isSet = false;
    m_control_sets_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateAssessmentFramework_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateAssessmentFramework_request::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_compliance_type_isValid = ::OpenAPI::fromJsonValue(m_compliance_type, json[QString("complianceType")]);
    m_compliance_type_isSet = !json[QString("complianceType")].isNull() && m_compliance_type_isValid;

    m_control_sets_isValid = ::OpenAPI::fromJsonValue(m_control_sets, json[QString("controlSets")]);
    m_control_sets_isSet = !json[QString("controlSets")].isNull() && m_control_sets_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateAssessmentFramework_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateAssessmentFramework_request::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_compliance_type_isSet) {
        obj.insert(QString("complianceType"), ::OpenAPI::toJsonValue(m_compliance_type));
    }
    if (m_control_sets.size() > 0) {
        obj.insert(QString("controlSets"), ::OpenAPI::toJsonValue(m_control_sets));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateAssessmentFramework_request::getName() const {
    return m_name;
}
void OAICreateAssessmentFramework_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateAssessmentFramework_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateAssessmentFramework_request::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateAssessmentFramework_request::getDescription() const {
    return m_description;
}
void OAICreateAssessmentFramework_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateAssessmentFramework_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateAssessmentFramework_request::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICreateAssessmentFramework_request::getComplianceType() const {
    return m_compliance_type;
}
void OAICreateAssessmentFramework_request::setComplianceType(const QString &compliance_type) {
    m_compliance_type = compliance_type;
    m_compliance_type_isSet = true;
}

bool OAICreateAssessmentFramework_request::is_compliance_type_Set() const{
    return m_compliance_type_isSet;
}

bool OAICreateAssessmentFramework_request::is_compliance_type_Valid() const{
    return m_compliance_type_isValid;
}

QList<OAICreateAssessmentFrameworkControlSet> OAICreateAssessmentFramework_request::getControlSets() const {
    return m_control_sets;
}
void OAICreateAssessmentFramework_request::setControlSets(const QList<OAICreateAssessmentFrameworkControlSet> &control_sets) {
    m_control_sets = control_sets;
    m_control_sets_isSet = true;
}

bool OAICreateAssessmentFramework_request::is_control_sets_Set() const{
    return m_control_sets_isSet;
}

bool OAICreateAssessmentFramework_request::is_control_sets_Valid() const{
    return m_control_sets_isValid;
}

QMap<QString, QString> OAICreateAssessmentFramework_request::getTags() const {
    return m_tags;
}
void OAICreateAssessmentFramework_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateAssessmentFramework_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateAssessmentFramework_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateAssessmentFramework_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compliance_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_control_sets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateAssessmentFramework_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_control_sets_isValid && true;
}

} // namespace OpenAPI
