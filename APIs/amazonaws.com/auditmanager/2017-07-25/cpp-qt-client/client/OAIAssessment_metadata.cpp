/**
 * AWS Audit Manager
 * <p>Welcome to the Audit Manager API reference. This guide is for developers who need detailed information about the Audit Manager API operations, data types, and errors. </p> <p>Audit Manager is a service that provides automated evidence collection so that you can continually audit your Amazon Web Services usage. You can use it to assess the effectiveness of your controls, manage risk, and simplify compliance.</p> <p>Audit Manager provides prebuilt frameworks that structure and automate assessments for a given compliance standard. Frameworks include a prebuilt collection of controls with descriptions and testing procedures. These controls are grouped according to the requirements of the specified compliance standard or regulation. You can also customize frameworks and controls to support internal audits with specific requirements. </p> <p>Use the following links to get started with the Audit Manager API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Audit Manager API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Audit Manager data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Audit Manager, we recommend that you review the <a href=\"https://docs.aws.amazon.com/audit-manager/latest/userguide/what-is.html\"> Audit Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssessment_metadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssessment_metadata::OAIAssessment_metadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssessment_metadata::OAIAssessment_metadata() {
    this->initializeModel();
}

OAIAssessment_metadata::~OAIAssessment_metadata() {}

void OAIAssessment_metadata::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_compliance_type_isSet = false;
    m_compliance_type_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_assessment_reports_destination_isSet = false;
    m_assessment_reports_destination_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;

    m_roles_isSet = false;
    m_roles_isValid = false;

    m_delegations_isSet = false;
    m_delegations_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;
}

void OAIAssessment_metadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssessment_metadata::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_compliance_type_isValid = ::OpenAPI::fromJsonValue(m_compliance_type, json[QString("complianceType")]);
    m_compliance_type_isSet = !json[QString("complianceType")].isNull() && m_compliance_type_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_assessment_reports_destination_isValid = ::OpenAPI::fromJsonValue(m_assessment_reports_destination, json[QString("assessmentReportsDestination")]);
    m_assessment_reports_destination_isSet = !json[QString("assessmentReportsDestination")].isNull() && m_assessment_reports_destination_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;

    m_roles_isValid = ::OpenAPI::fromJsonValue(m_roles, json[QString("roles")]);
    m_roles_isSet = !json[QString("roles")].isNull() && m_roles_isValid;

    m_delegations_isValid = ::OpenAPI::fromJsonValue(m_delegations, json[QString("delegations")]);
    m_delegations_isSet = !json[QString("delegations")].isNull() && m_delegations_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("lastUpdated")]);
    m_last_updated_isSet = !json[QString("lastUpdated")].isNull() && m_last_updated_isValid;
}

QString OAIAssessment_metadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssessment_metadata::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_compliance_type_isSet) {
        obj.insert(QString("complianceType"), ::OpenAPI::toJsonValue(m_compliance_type));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_assessment_reports_destination.isSet()) {
        obj.insert(QString("assessmentReportsDestination"), ::OpenAPI::toJsonValue(m_assessment_reports_destination));
    }
    if (m_scope.isSet()) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    if (m_roles.isSet()) {
        obj.insert(QString("roles"), ::OpenAPI::toJsonValue(m_roles));
    }
    if (m_delegations.isSet()) {
        obj.insert(QString("delegations"), ::OpenAPI::toJsonValue(m_delegations));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("lastUpdated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    return obj;
}

QString OAIAssessment_metadata::getName() const {
    return m_name;
}
void OAIAssessment_metadata::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAssessment_metadata::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAssessment_metadata::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAssessment_metadata::getId() const {
    return m_id;
}
void OAIAssessment_metadata::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAssessment_metadata::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAssessment_metadata::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAssessment_metadata::getDescription() const {
    return m_description;
}
void OAIAssessment_metadata::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAssessment_metadata::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAssessment_metadata::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIAssessment_metadata::getComplianceType() const {
    return m_compliance_type;
}
void OAIAssessment_metadata::setComplianceType(const QString &compliance_type) {
    m_compliance_type = compliance_type;
    m_compliance_type_isSet = true;
}

bool OAIAssessment_metadata::is_compliance_type_Set() const{
    return m_compliance_type_isSet;
}

bool OAIAssessment_metadata::is_compliance_type_Valid() const{
    return m_compliance_type_isValid;
}

OAIAssessmentStatus OAIAssessment_metadata::getStatus() const {
    return m_status;
}
void OAIAssessment_metadata::setStatus(const OAIAssessmentStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAssessment_metadata::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAssessment_metadata::is_status_Valid() const{
    return m_status_isValid;
}

OAIAssessmentMetadata_assessmentReportsDestination OAIAssessment_metadata::getAssessmentReportsDestination() const {
    return m_assessment_reports_destination;
}
void OAIAssessment_metadata::setAssessmentReportsDestination(const OAIAssessmentMetadata_assessmentReportsDestination &assessment_reports_destination) {
    m_assessment_reports_destination = assessment_reports_destination;
    m_assessment_reports_destination_isSet = true;
}

bool OAIAssessment_metadata::is_assessment_reports_destination_Set() const{
    return m_assessment_reports_destination_isSet;
}

bool OAIAssessment_metadata::is_assessment_reports_destination_Valid() const{
    return m_assessment_reports_destination_isValid;
}

OAIAssessmentMetadata_scope OAIAssessment_metadata::getScope() const {
    return m_scope;
}
void OAIAssessment_metadata::setScope(const OAIAssessmentMetadata_scope &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAIAssessment_metadata::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAIAssessment_metadata::is_scope_Valid() const{
    return m_scope_isValid;
}

QList OAIAssessment_metadata::getRoles() const {
    return m_roles;
}
void OAIAssessment_metadata::setRoles(const QList &roles) {
    m_roles = roles;
    m_roles_isSet = true;
}

bool OAIAssessment_metadata::is_roles_Set() const{
    return m_roles_isSet;
}

bool OAIAssessment_metadata::is_roles_Valid() const{
    return m_roles_isValid;
}

QList OAIAssessment_metadata::getDelegations() const {
    return m_delegations;
}
void OAIAssessment_metadata::setDelegations(const QList &delegations) {
    m_delegations = delegations;
    m_delegations_isSet = true;
}

bool OAIAssessment_metadata::is_delegations_Set() const{
    return m_delegations_isSet;
}

bool OAIAssessment_metadata::is_delegations_Valid() const{
    return m_delegations_isValid;
}

QDateTime OAIAssessment_metadata::getCreationTime() const {
    return m_creation_time;
}
void OAIAssessment_metadata::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIAssessment_metadata::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIAssessment_metadata::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAIAssessment_metadata::getLastUpdated() const {
    return m_last_updated;
}
void OAIAssessment_metadata::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIAssessment_metadata::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIAssessment_metadata::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

bool OAIAssessment_metadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compliance_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_assessment_reports_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_roles.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delegations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssessment_metadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
