/**
 * AWS Audit Manager
 * <p>Welcome to the Audit Manager API reference. This guide is for developers who need detailed information about the Audit Manager API operations, data types, and errors. </p> <p>Audit Manager is a service that provides automated evidence collection so that you can continually audit your Amazon Web Services usage. You can use it to assess the effectiveness of your controls, manage risk, and simplify compliance.</p> <p>Audit Manager provides prebuilt frameworks that structure and automate assessments for a given compliance standard. Frameworks include a prebuilt collection of controls with descriptions and testing procedures. These controls are grouped according to the requirements of the specified compliance standard or regulation. You can also customize frameworks and controls to support internal audits with specific requirements. </p> <p>Use the following links to get started with the Audit Manager API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Audit Manager API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Audit Manager data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Audit Manager, we recommend that you review the <a href=\"https://docs.aws.amazon.com/audit-manager/latest/userguide/what-is.html\"> Audit Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssessmentControlSet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssessmentControlSet::OAIAssessmentControlSet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssessmentControlSet::OAIAssessmentControlSet() {
    this->initializeModel();
}

OAIAssessmentControlSet::~OAIAssessmentControlSet() {}

void OAIAssessmentControlSet::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_roles_isSet = false;
    m_roles_isValid = false;

    m_controls_isSet = false;
    m_controls_isValid = false;

    m_delegations_isSet = false;
    m_delegations_isValid = false;

    m_system_evidence_count_isSet = false;
    m_system_evidence_count_isValid = false;

    m_manual_evidence_count_isSet = false;
    m_manual_evidence_count_isValid = false;
}

void OAIAssessmentControlSet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssessmentControlSet::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_roles_isValid = ::OpenAPI::fromJsonValue(m_roles, json[QString("roles")]);
    m_roles_isSet = !json[QString("roles")].isNull() && m_roles_isValid;

    m_controls_isValid = ::OpenAPI::fromJsonValue(m_controls, json[QString("controls")]);
    m_controls_isSet = !json[QString("controls")].isNull() && m_controls_isValid;

    m_delegations_isValid = ::OpenAPI::fromJsonValue(m_delegations, json[QString("delegations")]);
    m_delegations_isSet = !json[QString("delegations")].isNull() && m_delegations_isValid;

    m_system_evidence_count_isValid = ::OpenAPI::fromJsonValue(m_system_evidence_count, json[QString("systemEvidenceCount")]);
    m_system_evidence_count_isSet = !json[QString("systemEvidenceCount")].isNull() && m_system_evidence_count_isValid;

    m_manual_evidence_count_isValid = ::OpenAPI::fromJsonValue(m_manual_evidence_count, json[QString("manualEvidenceCount")]);
    m_manual_evidence_count_isSet = !json[QString("manualEvidenceCount")].isNull() && m_manual_evidence_count_isValid;
}

QString OAIAssessmentControlSet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssessmentControlSet::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_roles.isSet()) {
        obj.insert(QString("roles"), ::OpenAPI::toJsonValue(m_roles));
    }
    if (m_controls.isSet()) {
        obj.insert(QString("controls"), ::OpenAPI::toJsonValue(m_controls));
    }
    if (m_delegations.isSet()) {
        obj.insert(QString("delegations"), ::OpenAPI::toJsonValue(m_delegations));
    }
    if (m_system_evidence_count_isSet) {
        obj.insert(QString("systemEvidenceCount"), ::OpenAPI::toJsonValue(m_system_evidence_count));
    }
    if (m_manual_evidence_count_isSet) {
        obj.insert(QString("manualEvidenceCount"), ::OpenAPI::toJsonValue(m_manual_evidence_count));
    }
    return obj;
}

QString OAIAssessmentControlSet::getId() const {
    return m_id;
}
void OAIAssessmentControlSet::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAssessmentControlSet::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAssessmentControlSet::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAssessmentControlSet::getDescription() const {
    return m_description;
}
void OAIAssessmentControlSet::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAssessmentControlSet::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAssessmentControlSet::is_description_Valid() const{
    return m_description_isValid;
}

OAIControlSetStatus OAIAssessmentControlSet::getStatus() const {
    return m_status;
}
void OAIAssessmentControlSet::setStatus(const OAIControlSetStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAssessmentControlSet::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAssessmentControlSet::is_status_Valid() const{
    return m_status_isValid;
}

QList OAIAssessmentControlSet::getRoles() const {
    return m_roles;
}
void OAIAssessmentControlSet::setRoles(const QList &roles) {
    m_roles = roles;
    m_roles_isSet = true;
}

bool OAIAssessmentControlSet::is_roles_Set() const{
    return m_roles_isSet;
}

bool OAIAssessmentControlSet::is_roles_Valid() const{
    return m_roles_isValid;
}

QList OAIAssessmentControlSet::getControls() const {
    return m_controls;
}
void OAIAssessmentControlSet::setControls(const QList &controls) {
    m_controls = controls;
    m_controls_isSet = true;
}

bool OAIAssessmentControlSet::is_controls_Set() const{
    return m_controls_isSet;
}

bool OAIAssessmentControlSet::is_controls_Valid() const{
    return m_controls_isValid;
}

QList OAIAssessmentControlSet::getDelegations() const {
    return m_delegations;
}
void OAIAssessmentControlSet::setDelegations(const QList &delegations) {
    m_delegations = delegations;
    m_delegations_isSet = true;
}

bool OAIAssessmentControlSet::is_delegations_Set() const{
    return m_delegations_isSet;
}

bool OAIAssessmentControlSet::is_delegations_Valid() const{
    return m_delegations_isValid;
}

qint32 OAIAssessmentControlSet::getSystemEvidenceCount() const {
    return m_system_evidence_count;
}
void OAIAssessmentControlSet::setSystemEvidenceCount(const qint32 &system_evidence_count) {
    m_system_evidence_count = system_evidence_count;
    m_system_evidence_count_isSet = true;
}

bool OAIAssessmentControlSet::is_system_evidence_count_Set() const{
    return m_system_evidence_count_isSet;
}

bool OAIAssessmentControlSet::is_system_evidence_count_Valid() const{
    return m_system_evidence_count_isValid;
}

qint32 OAIAssessmentControlSet::getManualEvidenceCount() const {
    return m_manual_evidence_count;
}
void OAIAssessmentControlSet::setManualEvidenceCount(const qint32 &manual_evidence_count) {
    m_manual_evidence_count = manual_evidence_count;
    m_manual_evidence_count_isSet = true;
}

bool OAIAssessmentControlSet::is_manual_evidence_count_Set() const{
    return m_manual_evidence_count_isSet;
}

bool OAIAssessmentControlSet::is_manual_evidence_count_Valid() const{
    return m_manual_evidence_count_isValid;
}

bool OAIAssessmentControlSet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_roles.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_controls.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delegations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_evidence_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manual_evidence_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssessmentControlSet::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
