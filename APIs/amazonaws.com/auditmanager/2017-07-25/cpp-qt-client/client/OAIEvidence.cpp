/**
 * AWS Audit Manager
 * <p>Welcome to the Audit Manager API reference. This guide is for developers who need detailed information about the Audit Manager API operations, data types, and errors. </p> <p>Audit Manager is a service that provides automated evidence collection so that you can continually audit your Amazon Web Services usage. You can use it to assess the effectiveness of your controls, manage risk, and simplify compliance.</p> <p>Audit Manager provides prebuilt frameworks that structure and automate assessments for a given compliance standard. Frameworks include a prebuilt collection of controls with descriptions and testing procedures. These controls are grouped according to the requirements of the specified compliance standard or regulation. You can also customize frameworks and controls to support internal audits with specific requirements. </p> <p>Use the following links to get started with the Audit Manager API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Audit Manager API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Audit Manager data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Audit Manager, we recommend that you review the <a href=\"https://docs.aws.amazon.com/audit-manager/latest/userguide/what-is.html\"> Audit Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvidence.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvidence::OAIEvidence(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvidence::OAIEvidence() {
    this->initializeModel();
}

OAIEvidence::~OAIEvidence() {}

void OAIEvidence::initializeModel() {

    m_data_source_isSet = false;
    m_data_source_isValid = false;

    m_evidence_aws_account_id_isSet = false;
    m_evidence_aws_account_id_isValid = false;

    m_time_isSet = false;
    m_time_isValid = false;

    m_event_source_isSet = false;
    m_event_source_isValid = false;

    m_event_name_isSet = false;
    m_event_name_isValid = false;

    m_evidence_by_type_isSet = false;
    m_evidence_by_type_isValid = false;

    m_resources_included_isSet = false;
    m_resources_included_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_iam_id_isSet = false;
    m_iam_id_isValid = false;

    m_compliance_check_isSet = false;
    m_compliance_check_isValid = false;

    m_aws_organization_isSet = false;
    m_aws_organization_isValid = false;

    m_aws_account_id_isSet = false;
    m_aws_account_id_isValid = false;

    m_evidence_folder_id_isSet = false;
    m_evidence_folder_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_assessment_report_selection_isSet = false;
    m_assessment_report_selection_isValid = false;
}

void OAIEvidence::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvidence::fromJsonObject(QJsonObject json) {

    m_data_source_isValid = ::OpenAPI::fromJsonValue(m_data_source, json[QString("dataSource")]);
    m_data_source_isSet = !json[QString("dataSource")].isNull() && m_data_source_isValid;

    m_evidence_aws_account_id_isValid = ::OpenAPI::fromJsonValue(m_evidence_aws_account_id, json[QString("evidenceAwsAccountId")]);
    m_evidence_aws_account_id_isSet = !json[QString("evidenceAwsAccountId")].isNull() && m_evidence_aws_account_id_isValid;

    m_time_isValid = ::OpenAPI::fromJsonValue(m_time, json[QString("time")]);
    m_time_isSet = !json[QString("time")].isNull() && m_time_isValid;

    m_event_source_isValid = ::OpenAPI::fromJsonValue(m_event_source, json[QString("eventSource")]);
    m_event_source_isSet = !json[QString("eventSource")].isNull() && m_event_source_isValid;

    m_event_name_isValid = ::OpenAPI::fromJsonValue(m_event_name, json[QString("eventName")]);
    m_event_name_isSet = !json[QString("eventName")].isNull() && m_event_name_isValid;

    m_evidence_by_type_isValid = ::OpenAPI::fromJsonValue(m_evidence_by_type, json[QString("evidenceByType")]);
    m_evidence_by_type_isSet = !json[QString("evidenceByType")].isNull() && m_evidence_by_type_isValid;

    m_resources_included_isValid = ::OpenAPI::fromJsonValue(m_resources_included, json[QString("resourcesIncluded")]);
    m_resources_included_isSet = !json[QString("resourcesIncluded")].isNull() && m_resources_included_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_iam_id_isValid = ::OpenAPI::fromJsonValue(m_iam_id, json[QString("iamId")]);
    m_iam_id_isSet = !json[QString("iamId")].isNull() && m_iam_id_isValid;

    m_compliance_check_isValid = ::OpenAPI::fromJsonValue(m_compliance_check, json[QString("complianceCheck")]);
    m_compliance_check_isSet = !json[QString("complianceCheck")].isNull() && m_compliance_check_isValid;

    m_aws_organization_isValid = ::OpenAPI::fromJsonValue(m_aws_organization, json[QString("awsOrganization")]);
    m_aws_organization_isSet = !json[QString("awsOrganization")].isNull() && m_aws_organization_isValid;

    m_aws_account_id_isValid = ::OpenAPI::fromJsonValue(m_aws_account_id, json[QString("awsAccountId")]);
    m_aws_account_id_isSet = !json[QString("awsAccountId")].isNull() && m_aws_account_id_isValid;

    m_evidence_folder_id_isValid = ::OpenAPI::fromJsonValue(m_evidence_folder_id, json[QString("evidenceFolderId")]);
    m_evidence_folder_id_isSet = !json[QString("evidenceFolderId")].isNull() && m_evidence_folder_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_assessment_report_selection_isValid = ::OpenAPI::fromJsonValue(m_assessment_report_selection, json[QString("assessmentReportSelection")]);
    m_assessment_report_selection_isSet = !json[QString("assessmentReportSelection")].isNull() && m_assessment_report_selection_isValid;
}

QString OAIEvidence::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvidence::asJsonObject() const {
    QJsonObject obj;
    if (m_data_source_isSet) {
        obj.insert(QString("dataSource"), ::OpenAPI::toJsonValue(m_data_source));
    }
    if (m_evidence_aws_account_id_isSet) {
        obj.insert(QString("evidenceAwsAccountId"), ::OpenAPI::toJsonValue(m_evidence_aws_account_id));
    }
    if (m_time_isSet) {
        obj.insert(QString("time"), ::OpenAPI::toJsonValue(m_time));
    }
    if (m_event_source_isSet) {
        obj.insert(QString("eventSource"), ::OpenAPI::toJsonValue(m_event_source));
    }
    if (m_event_name_isSet) {
        obj.insert(QString("eventName"), ::OpenAPI::toJsonValue(m_event_name));
    }
    if (m_evidence_by_type_isSet) {
        obj.insert(QString("evidenceByType"), ::OpenAPI::toJsonValue(m_evidence_by_type));
    }
    if (m_resources_included.isSet()) {
        obj.insert(QString("resourcesIncluded"), ::OpenAPI::toJsonValue(m_resources_included));
    }
    if (m_attributes.isSet()) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_iam_id_isSet) {
        obj.insert(QString("iamId"), ::OpenAPI::toJsonValue(m_iam_id));
    }
    if (m_compliance_check_isSet) {
        obj.insert(QString("complianceCheck"), ::OpenAPI::toJsonValue(m_compliance_check));
    }
    if (m_aws_organization_isSet) {
        obj.insert(QString("awsOrganization"), ::OpenAPI::toJsonValue(m_aws_organization));
    }
    if (m_aws_account_id_isSet) {
        obj.insert(QString("awsAccountId"), ::OpenAPI::toJsonValue(m_aws_account_id));
    }
    if (m_evidence_folder_id_isSet) {
        obj.insert(QString("evidenceFolderId"), ::OpenAPI::toJsonValue(m_evidence_folder_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_assessment_report_selection_isSet) {
        obj.insert(QString("assessmentReportSelection"), ::OpenAPI::toJsonValue(m_assessment_report_selection));
    }
    return obj;
}

QString OAIEvidence::getDataSource() const {
    return m_data_source;
}
void OAIEvidence::setDataSource(const QString &data_source) {
    m_data_source = data_source;
    m_data_source_isSet = true;
}

bool OAIEvidence::is_data_source_Set() const{
    return m_data_source_isSet;
}

bool OAIEvidence::is_data_source_Valid() const{
    return m_data_source_isValid;
}

QString OAIEvidence::getEvidenceAwsAccountId() const {
    return m_evidence_aws_account_id;
}
void OAIEvidence::setEvidenceAwsAccountId(const QString &evidence_aws_account_id) {
    m_evidence_aws_account_id = evidence_aws_account_id;
    m_evidence_aws_account_id_isSet = true;
}

bool OAIEvidence::is_evidence_aws_account_id_Set() const{
    return m_evidence_aws_account_id_isSet;
}

bool OAIEvidence::is_evidence_aws_account_id_Valid() const{
    return m_evidence_aws_account_id_isValid;
}

QDateTime OAIEvidence::getTime() const {
    return m_time;
}
void OAIEvidence::setTime(const QDateTime &time) {
    m_time = time;
    m_time_isSet = true;
}

bool OAIEvidence::is_time_Set() const{
    return m_time_isSet;
}

bool OAIEvidence::is_time_Valid() const{
    return m_time_isValid;
}

QString OAIEvidence::getEventSource() const {
    return m_event_source;
}
void OAIEvidence::setEventSource(const QString &event_source) {
    m_event_source = event_source;
    m_event_source_isSet = true;
}

bool OAIEvidence::is_event_source_Set() const{
    return m_event_source_isSet;
}

bool OAIEvidence::is_event_source_Valid() const{
    return m_event_source_isValid;
}

QString OAIEvidence::getEventName() const {
    return m_event_name;
}
void OAIEvidence::setEventName(const QString &event_name) {
    m_event_name = event_name;
    m_event_name_isSet = true;
}

bool OAIEvidence::is_event_name_Set() const{
    return m_event_name_isSet;
}

bool OAIEvidence::is_event_name_Valid() const{
    return m_event_name_isValid;
}

QString OAIEvidence::getEvidenceByType() const {
    return m_evidence_by_type;
}
void OAIEvidence::setEvidenceByType(const QString &evidence_by_type) {
    m_evidence_by_type = evidence_by_type;
    m_evidence_by_type_isSet = true;
}

bool OAIEvidence::is_evidence_by_type_Set() const{
    return m_evidence_by_type_isSet;
}

bool OAIEvidence::is_evidence_by_type_Valid() const{
    return m_evidence_by_type_isValid;
}

QList OAIEvidence::getResourcesIncluded() const {
    return m_resources_included;
}
void OAIEvidence::setResourcesIncluded(const QList &resources_included) {
    m_resources_included = resources_included;
    m_resources_included_isSet = true;
}

bool OAIEvidence::is_resources_included_Set() const{
    return m_resources_included_isSet;
}

bool OAIEvidence::is_resources_included_Valid() const{
    return m_resources_included_isValid;
}

QMap OAIEvidence::getAttributes() const {
    return m_attributes;
}
void OAIEvidence::setAttributes(const QMap &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIEvidence::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIEvidence::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QString OAIEvidence::getIamId() const {
    return m_iam_id;
}
void OAIEvidence::setIamId(const QString &iam_id) {
    m_iam_id = iam_id;
    m_iam_id_isSet = true;
}

bool OAIEvidence::is_iam_id_Set() const{
    return m_iam_id_isSet;
}

bool OAIEvidence::is_iam_id_Valid() const{
    return m_iam_id_isValid;
}

QString OAIEvidence::getComplianceCheck() const {
    return m_compliance_check;
}
void OAIEvidence::setComplianceCheck(const QString &compliance_check) {
    m_compliance_check = compliance_check;
    m_compliance_check_isSet = true;
}

bool OAIEvidence::is_compliance_check_Set() const{
    return m_compliance_check_isSet;
}

bool OAIEvidence::is_compliance_check_Valid() const{
    return m_compliance_check_isValid;
}

QString OAIEvidence::getAwsOrganization() const {
    return m_aws_organization;
}
void OAIEvidence::setAwsOrganization(const QString &aws_organization) {
    m_aws_organization = aws_organization;
    m_aws_organization_isSet = true;
}

bool OAIEvidence::is_aws_organization_Set() const{
    return m_aws_organization_isSet;
}

bool OAIEvidence::is_aws_organization_Valid() const{
    return m_aws_organization_isValid;
}

QString OAIEvidence::getAwsAccountId() const {
    return m_aws_account_id;
}
void OAIEvidence::setAwsAccountId(const QString &aws_account_id) {
    m_aws_account_id = aws_account_id;
    m_aws_account_id_isSet = true;
}

bool OAIEvidence::is_aws_account_id_Set() const{
    return m_aws_account_id_isSet;
}

bool OAIEvidence::is_aws_account_id_Valid() const{
    return m_aws_account_id_isValid;
}

QString OAIEvidence::getEvidenceFolderId() const {
    return m_evidence_folder_id;
}
void OAIEvidence::setEvidenceFolderId(const QString &evidence_folder_id) {
    m_evidence_folder_id = evidence_folder_id;
    m_evidence_folder_id_isSet = true;
}

bool OAIEvidence::is_evidence_folder_id_Set() const{
    return m_evidence_folder_id_isSet;
}

bool OAIEvidence::is_evidence_folder_id_Valid() const{
    return m_evidence_folder_id_isValid;
}

QString OAIEvidence::getId() const {
    return m_id;
}
void OAIEvidence::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIEvidence::is_id_Set() const{
    return m_id_isSet;
}

bool OAIEvidence::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIEvidence::getAssessmentReportSelection() const {
    return m_assessment_report_selection;
}
void OAIEvidence::setAssessmentReportSelection(const QString &assessment_report_selection) {
    m_assessment_report_selection = assessment_report_selection;
    m_assessment_report_selection_isSet = true;
}

bool OAIEvidence::is_assessment_report_selection_Set() const{
    return m_assessment_report_selection_isSet;
}

bool OAIEvidence::is_assessment_report_selection_Valid() const{
    return m_assessment_report_selection_isValid;
}

bool OAIEvidence::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evidence_aws_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evidence_by_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resources_included.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_iam_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compliance_check_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aws_organization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aws_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evidence_folder_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assessment_report_selection_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvidence::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
