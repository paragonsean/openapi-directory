/**
 * AWS Audit Manager
 * <p>Welcome to the Audit Manager API reference. This guide is for developers who need detailed information about the Audit Manager API operations, data types, and errors. </p> <p>Audit Manager is a service that provides automated evidence collection so that you can continually audit your Amazon Web Services usage. You can use it to assess the effectiveness of your controls, manage risk, and simplify compliance.</p> <p>Audit Manager provides prebuilt frameworks that structure and automate assessments for a given compliance standard. Frameworks include a prebuilt collection of controls with descriptions and testing procedures. These controls are grouped according to the requirements of the specified compliance standard or regulation. You can also customize frameworks and controls to support internal audits with specific requirements. </p> <p>Use the following links to get started with the Audit Manager API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Audit Manager API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Audit Manager data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Audit Manager, we recommend that you review the <a href=\"https://docs.aws.amazon.com/audit-manager/latest/userguide/what-is.html\"> Audit Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssessment_framework.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssessment_framework::OAIAssessment_framework(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssessment_framework::OAIAssessment_framework() {
    this->initializeModel();
}

OAIAssessment_framework::~OAIAssessment_framework() {}

void OAIAssessment_framework::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_control_sets_isSet = false;
    m_control_sets_isValid = false;
}

void OAIAssessment_framework::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssessment_framework::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_control_sets_isValid = ::OpenAPI::fromJsonValue(m_control_sets, json[QString("controlSets")]);
    m_control_sets_isSet = !json[QString("controlSets")].isNull() && m_control_sets_isValid;
}

QString OAIAssessment_framework::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssessment_framework::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_control_sets.isSet()) {
        obj.insert(QString("controlSets"), ::OpenAPI::toJsonValue(m_control_sets));
    }
    return obj;
}

QString OAIAssessment_framework::getId() const {
    return m_id;
}
void OAIAssessment_framework::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAssessment_framework::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAssessment_framework::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAssessment_framework::getArn() const {
    return m_arn;
}
void OAIAssessment_framework::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIAssessment_framework::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIAssessment_framework::is_arn_Valid() const{
    return m_arn_isValid;
}

OAIFrameworkMetadata OAIAssessment_framework::getMetadata() const {
    return m_metadata;
}
void OAIAssessment_framework::setMetadata(const OAIFrameworkMetadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIAssessment_framework::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIAssessment_framework::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QList OAIAssessment_framework::getControlSets() const {
    return m_control_sets;
}
void OAIAssessment_framework::setControlSets(const QList &control_sets) {
    m_control_sets = control_sets;
    m_control_sets_isSet = true;
}

bool OAIAssessment_framework::is_control_sets_Set() const{
    return m_control_sets_isSet;
}

bool OAIAssessment_framework::is_control_sets_Valid() const{
    return m_control_sets_isValid;
}

bool OAIAssessment_framework::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_control_sets.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssessment_framework::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
