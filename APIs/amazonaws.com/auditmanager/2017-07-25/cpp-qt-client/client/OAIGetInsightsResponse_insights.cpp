/**
 * AWS Audit Manager
 * <p>Welcome to the Audit Manager API reference. This guide is for developers who need detailed information about the Audit Manager API operations, data types, and errors. </p> <p>Audit Manager is a service that provides automated evidence collection so that you can continually audit your Amazon Web Services usage. You can use it to assess the effectiveness of your controls, manage risk, and simplify compliance.</p> <p>Audit Manager provides prebuilt frameworks that structure and automate assessments for a given compliance standard. Frameworks include a prebuilt collection of controls with descriptions and testing procedures. These controls are grouped according to the requirements of the specified compliance standard or regulation. You can also customize frameworks and controls to support internal audits with specific requirements. </p> <p>Use the following links to get started with the Audit Manager API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Audit Manager API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Audit Manager data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Audit Manager, we recommend that you review the <a href=\"https://docs.aws.amazon.com/audit-manager/latest/userguide/what-is.html\"> Audit Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetInsightsResponse_insights.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetInsightsResponse_insights::OAIGetInsightsResponse_insights(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetInsightsResponse_insights::OAIGetInsightsResponse_insights() {
    this->initializeModel();
}

OAIGetInsightsResponse_insights::~OAIGetInsightsResponse_insights() {}

void OAIGetInsightsResponse_insights::initializeModel() {

    m_active_assessments_count_isSet = false;
    m_active_assessments_count_isValid = false;

    m_noncompliant_evidence_count_isSet = false;
    m_noncompliant_evidence_count_isValid = false;

    m_compliant_evidence_count_isSet = false;
    m_compliant_evidence_count_isValid = false;

    m_inconclusive_evidence_count_isSet = false;
    m_inconclusive_evidence_count_isValid = false;

    m_assessment_controls_count_by_noncompliant_evidence_isSet = false;
    m_assessment_controls_count_by_noncompliant_evidence_isValid = false;

    m_total_assessment_controls_count_isSet = false;
    m_total_assessment_controls_count_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;
}

void OAIGetInsightsResponse_insights::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetInsightsResponse_insights::fromJsonObject(QJsonObject json) {

    m_active_assessments_count_isValid = ::OpenAPI::fromJsonValue(m_active_assessments_count, json[QString("activeAssessmentsCount")]);
    m_active_assessments_count_isSet = !json[QString("activeAssessmentsCount")].isNull() && m_active_assessments_count_isValid;

    m_noncompliant_evidence_count_isValid = ::OpenAPI::fromJsonValue(m_noncompliant_evidence_count, json[QString("noncompliantEvidenceCount")]);
    m_noncompliant_evidence_count_isSet = !json[QString("noncompliantEvidenceCount")].isNull() && m_noncompliant_evidence_count_isValid;

    m_compliant_evidence_count_isValid = ::OpenAPI::fromJsonValue(m_compliant_evidence_count, json[QString("compliantEvidenceCount")]);
    m_compliant_evidence_count_isSet = !json[QString("compliantEvidenceCount")].isNull() && m_compliant_evidence_count_isValid;

    m_inconclusive_evidence_count_isValid = ::OpenAPI::fromJsonValue(m_inconclusive_evidence_count, json[QString("inconclusiveEvidenceCount")]);
    m_inconclusive_evidence_count_isSet = !json[QString("inconclusiveEvidenceCount")].isNull() && m_inconclusive_evidence_count_isValid;

    m_assessment_controls_count_by_noncompliant_evidence_isValid = ::OpenAPI::fromJsonValue(m_assessment_controls_count_by_noncompliant_evidence, json[QString("assessmentControlsCountByNoncompliantEvidence")]);
    m_assessment_controls_count_by_noncompliant_evidence_isSet = !json[QString("assessmentControlsCountByNoncompliantEvidence")].isNull() && m_assessment_controls_count_by_noncompliant_evidence_isValid;

    m_total_assessment_controls_count_isValid = ::OpenAPI::fromJsonValue(m_total_assessment_controls_count, json[QString("totalAssessmentControlsCount")]);
    m_total_assessment_controls_count_isSet = !json[QString("totalAssessmentControlsCount")].isNull() && m_total_assessment_controls_count_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("lastUpdated")]);
    m_last_updated_isSet = !json[QString("lastUpdated")].isNull() && m_last_updated_isValid;
}

QString OAIGetInsightsResponse_insights::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetInsightsResponse_insights::asJsonObject() const {
    QJsonObject obj;
    if (m_active_assessments_count_isSet) {
        obj.insert(QString("activeAssessmentsCount"), ::OpenAPI::toJsonValue(m_active_assessments_count));
    }
    if (m_noncompliant_evidence_count_isSet) {
        obj.insert(QString("noncompliantEvidenceCount"), ::OpenAPI::toJsonValue(m_noncompliant_evidence_count));
    }
    if (m_compliant_evidence_count_isSet) {
        obj.insert(QString("compliantEvidenceCount"), ::OpenAPI::toJsonValue(m_compliant_evidence_count));
    }
    if (m_inconclusive_evidence_count_isSet) {
        obj.insert(QString("inconclusiveEvidenceCount"), ::OpenAPI::toJsonValue(m_inconclusive_evidence_count));
    }
    if (m_assessment_controls_count_by_noncompliant_evidence_isSet) {
        obj.insert(QString("assessmentControlsCountByNoncompliantEvidence"), ::OpenAPI::toJsonValue(m_assessment_controls_count_by_noncompliant_evidence));
    }
    if (m_total_assessment_controls_count_isSet) {
        obj.insert(QString("totalAssessmentControlsCount"), ::OpenAPI::toJsonValue(m_total_assessment_controls_count));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("lastUpdated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    return obj;
}

qint32 OAIGetInsightsResponse_insights::getActiveAssessmentsCount() const {
    return m_active_assessments_count;
}
void OAIGetInsightsResponse_insights::setActiveAssessmentsCount(const qint32 &active_assessments_count) {
    m_active_assessments_count = active_assessments_count;
    m_active_assessments_count_isSet = true;
}

bool OAIGetInsightsResponse_insights::is_active_assessments_count_Set() const{
    return m_active_assessments_count_isSet;
}

bool OAIGetInsightsResponse_insights::is_active_assessments_count_Valid() const{
    return m_active_assessments_count_isValid;
}

qint32 OAIGetInsightsResponse_insights::getNoncompliantEvidenceCount() const {
    return m_noncompliant_evidence_count;
}
void OAIGetInsightsResponse_insights::setNoncompliantEvidenceCount(const qint32 &noncompliant_evidence_count) {
    m_noncompliant_evidence_count = noncompliant_evidence_count;
    m_noncompliant_evidence_count_isSet = true;
}

bool OAIGetInsightsResponse_insights::is_noncompliant_evidence_count_Set() const{
    return m_noncompliant_evidence_count_isSet;
}

bool OAIGetInsightsResponse_insights::is_noncompliant_evidence_count_Valid() const{
    return m_noncompliant_evidence_count_isValid;
}

qint32 OAIGetInsightsResponse_insights::getCompliantEvidenceCount() const {
    return m_compliant_evidence_count;
}
void OAIGetInsightsResponse_insights::setCompliantEvidenceCount(const qint32 &compliant_evidence_count) {
    m_compliant_evidence_count = compliant_evidence_count;
    m_compliant_evidence_count_isSet = true;
}

bool OAIGetInsightsResponse_insights::is_compliant_evidence_count_Set() const{
    return m_compliant_evidence_count_isSet;
}

bool OAIGetInsightsResponse_insights::is_compliant_evidence_count_Valid() const{
    return m_compliant_evidence_count_isValid;
}

qint32 OAIGetInsightsResponse_insights::getInconclusiveEvidenceCount() const {
    return m_inconclusive_evidence_count;
}
void OAIGetInsightsResponse_insights::setInconclusiveEvidenceCount(const qint32 &inconclusive_evidence_count) {
    m_inconclusive_evidence_count = inconclusive_evidence_count;
    m_inconclusive_evidence_count_isSet = true;
}

bool OAIGetInsightsResponse_insights::is_inconclusive_evidence_count_Set() const{
    return m_inconclusive_evidence_count_isSet;
}

bool OAIGetInsightsResponse_insights::is_inconclusive_evidence_count_Valid() const{
    return m_inconclusive_evidence_count_isValid;
}

qint32 OAIGetInsightsResponse_insights::getAssessmentControlsCountByNoncompliantEvidence() const {
    return m_assessment_controls_count_by_noncompliant_evidence;
}
void OAIGetInsightsResponse_insights::setAssessmentControlsCountByNoncompliantEvidence(const qint32 &assessment_controls_count_by_noncompliant_evidence) {
    m_assessment_controls_count_by_noncompliant_evidence = assessment_controls_count_by_noncompliant_evidence;
    m_assessment_controls_count_by_noncompliant_evidence_isSet = true;
}

bool OAIGetInsightsResponse_insights::is_assessment_controls_count_by_noncompliant_evidence_Set() const{
    return m_assessment_controls_count_by_noncompliant_evidence_isSet;
}

bool OAIGetInsightsResponse_insights::is_assessment_controls_count_by_noncompliant_evidence_Valid() const{
    return m_assessment_controls_count_by_noncompliant_evidence_isValid;
}

qint32 OAIGetInsightsResponse_insights::getTotalAssessmentControlsCount() const {
    return m_total_assessment_controls_count;
}
void OAIGetInsightsResponse_insights::setTotalAssessmentControlsCount(const qint32 &total_assessment_controls_count) {
    m_total_assessment_controls_count = total_assessment_controls_count;
    m_total_assessment_controls_count_isSet = true;
}

bool OAIGetInsightsResponse_insights::is_total_assessment_controls_count_Set() const{
    return m_total_assessment_controls_count_isSet;
}

bool OAIGetInsightsResponse_insights::is_total_assessment_controls_count_Valid() const{
    return m_total_assessment_controls_count_isValid;
}

QDateTime OAIGetInsightsResponse_insights::getLastUpdated() const {
    return m_last_updated;
}
void OAIGetInsightsResponse_insights::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIGetInsightsResponse_insights::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIGetInsightsResponse_insights::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

bool OAIGetInsightsResponse_insights::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_assessments_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_noncompliant_evidence_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compliant_evidence_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inconclusive_evidence_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assessment_controls_count_by_noncompliant_evidence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_assessment_controls_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetInsightsResponse_insights::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
