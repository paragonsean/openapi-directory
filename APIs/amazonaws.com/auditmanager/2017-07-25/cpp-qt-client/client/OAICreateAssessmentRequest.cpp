/**
 * AWS Audit Manager
 * <p>Welcome to the Audit Manager API reference. This guide is for developers who need detailed information about the Audit Manager API operations, data types, and errors. </p> <p>Audit Manager is a service that provides automated evidence collection so that you can continually audit your Amazon Web Services usage. You can use it to assess the effectiveness of your controls, manage risk, and simplify compliance.</p> <p>Audit Manager provides prebuilt frameworks that structure and automate assessments for a given compliance standard. Frameworks include a prebuilt collection of controls with descriptions and testing procedures. These controls are grouped according to the requirements of the specified compliance standard or regulation. You can also customize frameworks and controls to support internal audits with specific requirements. </p> <p>Use the following links to get started with the Audit Manager API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Audit Manager API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Audit Manager data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Audit Manager, we recommend that you review the <a href=\"https://docs.aws.amazon.com/audit-manager/latest/userguide/what-is.html\"> Audit Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateAssessmentRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateAssessmentRequest::OAICreateAssessmentRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateAssessmentRequest::OAICreateAssessmentRequest() {
    this->initializeModel();
}

OAICreateAssessmentRequest::~OAICreateAssessmentRequest() {}

void OAICreateAssessmentRequest::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_assessment_reports_destination_isSet = false;
    m_assessment_reports_destination_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;

    m_roles_isSet = false;
    m_roles_isValid = false;

    m_framework_id_isSet = false;
    m_framework_id_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateAssessmentRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateAssessmentRequest::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_assessment_reports_destination_isValid = ::OpenAPI::fromJsonValue(m_assessment_reports_destination, json[QString("assessmentReportsDestination")]);
    m_assessment_reports_destination_isSet = !json[QString("assessmentReportsDestination")].isNull() && m_assessment_reports_destination_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;

    m_roles_isValid = ::OpenAPI::fromJsonValue(m_roles, json[QString("roles")]);
    m_roles_isSet = !json[QString("roles")].isNull() && m_roles_isValid;

    m_framework_id_isValid = ::OpenAPI::fromJsonValue(m_framework_id, json[QString("frameworkId")]);
    m_framework_id_isSet = !json[QString("frameworkId")].isNull() && m_framework_id_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateAssessmentRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateAssessmentRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_assessment_reports_destination.isSet()) {
        obj.insert(QString("assessmentReportsDestination"), ::OpenAPI::toJsonValue(m_assessment_reports_destination));
    }
    if (m_scope.isSet()) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    if (m_roles.isSet()) {
        obj.insert(QString("roles"), ::OpenAPI::toJsonValue(m_roles));
    }
    if (m_framework_id_isSet) {
        obj.insert(QString("frameworkId"), ::OpenAPI::toJsonValue(m_framework_id));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateAssessmentRequest::getName() const {
    return m_name;
}
void OAICreateAssessmentRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateAssessmentRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateAssessmentRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateAssessmentRequest::getDescription() const {
    return m_description;
}
void OAICreateAssessmentRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateAssessmentRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateAssessmentRequest::is_description_Valid() const{
    return m_description_isValid;
}

OAICreateAssessmentRequest_assessmentReportsDestination OAICreateAssessmentRequest::getAssessmentReportsDestination() const {
    return m_assessment_reports_destination;
}
void OAICreateAssessmentRequest::setAssessmentReportsDestination(const OAICreateAssessmentRequest_assessmentReportsDestination &assessment_reports_destination) {
    m_assessment_reports_destination = assessment_reports_destination;
    m_assessment_reports_destination_isSet = true;
}

bool OAICreateAssessmentRequest::is_assessment_reports_destination_Set() const{
    return m_assessment_reports_destination_isSet;
}

bool OAICreateAssessmentRequest::is_assessment_reports_destination_Valid() const{
    return m_assessment_reports_destination_isValid;
}

OAIScope OAICreateAssessmentRequest::getScope() const {
    return m_scope;
}
void OAICreateAssessmentRequest::setScope(const OAIScope &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAICreateAssessmentRequest::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAICreateAssessmentRequest::is_scope_Valid() const{
    return m_scope_isValid;
}

QList OAICreateAssessmentRequest::getRoles() const {
    return m_roles;
}
void OAICreateAssessmentRequest::setRoles(const QList &roles) {
    m_roles = roles;
    m_roles_isSet = true;
}

bool OAICreateAssessmentRequest::is_roles_Set() const{
    return m_roles_isSet;
}

bool OAICreateAssessmentRequest::is_roles_Valid() const{
    return m_roles_isValid;
}

QString OAICreateAssessmentRequest::getFrameworkId() const {
    return m_framework_id;
}
void OAICreateAssessmentRequest::setFrameworkId(const QString &framework_id) {
    m_framework_id = framework_id;
    m_framework_id_isSet = true;
}

bool OAICreateAssessmentRequest::is_framework_id_Set() const{
    return m_framework_id_isSet;
}

bool OAICreateAssessmentRequest::is_framework_id_Valid() const{
    return m_framework_id_isValid;
}

QMap OAICreateAssessmentRequest::getTags() const {
    return m_tags;
}
void OAICreateAssessmentRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateAssessmentRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateAssessmentRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateAssessmentRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assessment_reports_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_roles.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_framework_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateAssessmentRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_assessment_reports_destination_isValid && m_scope_isValid && m_roles_isValid && m_framework_id_isValid && true;
}

} // namespace OpenAPI
