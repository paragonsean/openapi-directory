/**
 * AWS Audit Manager
 * <p>Welcome to the Audit Manager API reference. This guide is for developers who need detailed information about the Audit Manager API operations, data types, and errors. </p> <p>Audit Manager is a service that provides automated evidence collection so that you can continually audit your Amazon Web Services usage. You can use it to assess the effectiveness of your controls, manage risk, and simplify compliance.</p> <p>Audit Manager provides prebuilt frameworks that structure and automate assessments for a given compliance standard. Frameworks include a prebuilt collection of controls with descriptions and testing procedures. These controls are grouped according to the requirements of the specified compliance standard or regulation. You can also customize frameworks and controls to support internal audits with specific requirements. </p> <p>Use the following links to get started with the Audit Manager API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Audit Manager API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Audit Manager data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Audit Manager, we recommend that you review the <a href=\"https://docs.aws.amazon.com/audit-manager/latest/userguide/what-is.html\"> Audit Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIControlMappingSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIControlMappingSource::OAIControlMappingSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIControlMappingSource::OAIControlMappingSource() {
    this->initializeModel();
}

OAIControlMappingSource::~OAIControlMappingSource() {}

void OAIControlMappingSource::initializeModel() {

    m_source_id_isSet = false;
    m_source_id_isValid = false;

    m_source_name_isSet = false;
    m_source_name_isValid = false;

    m_source_description_isSet = false;
    m_source_description_isValid = false;

    m_source_set_up_option_isSet = false;
    m_source_set_up_option_isValid = false;

    m_source_type_isSet = false;
    m_source_type_isValid = false;

    m_source_keyword_isSet = false;
    m_source_keyword_isValid = false;

    m_source_frequency_isSet = false;
    m_source_frequency_isValid = false;

    m_troubleshooting_text_isSet = false;
    m_troubleshooting_text_isValid = false;
}

void OAIControlMappingSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIControlMappingSource::fromJsonObject(QJsonObject json) {

    m_source_id_isValid = ::OpenAPI::fromJsonValue(m_source_id, json[QString("sourceId")]);
    m_source_id_isSet = !json[QString("sourceId")].isNull() && m_source_id_isValid;

    m_source_name_isValid = ::OpenAPI::fromJsonValue(m_source_name, json[QString("sourceName")]);
    m_source_name_isSet = !json[QString("sourceName")].isNull() && m_source_name_isValid;

    m_source_description_isValid = ::OpenAPI::fromJsonValue(m_source_description, json[QString("sourceDescription")]);
    m_source_description_isSet = !json[QString("sourceDescription")].isNull() && m_source_description_isValid;

    m_source_set_up_option_isValid = ::OpenAPI::fromJsonValue(m_source_set_up_option, json[QString("sourceSetUpOption")]);
    m_source_set_up_option_isSet = !json[QString("sourceSetUpOption")].isNull() && m_source_set_up_option_isValid;

    m_source_type_isValid = ::OpenAPI::fromJsonValue(m_source_type, json[QString("sourceType")]);
    m_source_type_isSet = !json[QString("sourceType")].isNull() && m_source_type_isValid;

    m_source_keyword_isValid = ::OpenAPI::fromJsonValue(m_source_keyword, json[QString("sourceKeyword")]);
    m_source_keyword_isSet = !json[QString("sourceKeyword")].isNull() && m_source_keyword_isValid;

    m_source_frequency_isValid = ::OpenAPI::fromJsonValue(m_source_frequency, json[QString("sourceFrequency")]);
    m_source_frequency_isSet = !json[QString("sourceFrequency")].isNull() && m_source_frequency_isValid;

    m_troubleshooting_text_isValid = ::OpenAPI::fromJsonValue(m_troubleshooting_text, json[QString("troubleshootingText")]);
    m_troubleshooting_text_isSet = !json[QString("troubleshootingText")].isNull() && m_troubleshooting_text_isValid;
}

QString OAIControlMappingSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIControlMappingSource::asJsonObject() const {
    QJsonObject obj;
    if (m_source_id_isSet) {
        obj.insert(QString("sourceId"), ::OpenAPI::toJsonValue(m_source_id));
    }
    if (m_source_name_isSet) {
        obj.insert(QString("sourceName"), ::OpenAPI::toJsonValue(m_source_name));
    }
    if (m_source_description_isSet) {
        obj.insert(QString("sourceDescription"), ::OpenAPI::toJsonValue(m_source_description));
    }
    if (m_source_set_up_option.isSet()) {
        obj.insert(QString("sourceSetUpOption"), ::OpenAPI::toJsonValue(m_source_set_up_option));
    }
    if (m_source_type.isSet()) {
        obj.insert(QString("sourceType"), ::OpenAPI::toJsonValue(m_source_type));
    }
    if (m_source_keyword.isSet()) {
        obj.insert(QString("sourceKeyword"), ::OpenAPI::toJsonValue(m_source_keyword));
    }
    if (m_source_frequency.isSet()) {
        obj.insert(QString("sourceFrequency"), ::OpenAPI::toJsonValue(m_source_frequency));
    }
    if (m_troubleshooting_text_isSet) {
        obj.insert(QString("troubleshootingText"), ::OpenAPI::toJsonValue(m_troubleshooting_text));
    }
    return obj;
}

QString OAIControlMappingSource::getSourceId() const {
    return m_source_id;
}
void OAIControlMappingSource::setSourceId(const QString &source_id) {
    m_source_id = source_id;
    m_source_id_isSet = true;
}

bool OAIControlMappingSource::is_source_id_Set() const{
    return m_source_id_isSet;
}

bool OAIControlMappingSource::is_source_id_Valid() const{
    return m_source_id_isValid;
}

QString OAIControlMappingSource::getSourceName() const {
    return m_source_name;
}
void OAIControlMappingSource::setSourceName(const QString &source_name) {
    m_source_name = source_name;
    m_source_name_isSet = true;
}

bool OAIControlMappingSource::is_source_name_Set() const{
    return m_source_name_isSet;
}

bool OAIControlMappingSource::is_source_name_Valid() const{
    return m_source_name_isValid;
}

QString OAIControlMappingSource::getSourceDescription() const {
    return m_source_description;
}
void OAIControlMappingSource::setSourceDescription(const QString &source_description) {
    m_source_description = source_description;
    m_source_description_isSet = true;
}

bool OAIControlMappingSource::is_source_description_Set() const{
    return m_source_description_isSet;
}

bool OAIControlMappingSource::is_source_description_Valid() const{
    return m_source_description_isValid;
}

OAISourceSetUpOption OAIControlMappingSource::getSourceSetUpOption() const {
    return m_source_set_up_option;
}
void OAIControlMappingSource::setSourceSetUpOption(const OAISourceSetUpOption &source_set_up_option) {
    m_source_set_up_option = source_set_up_option;
    m_source_set_up_option_isSet = true;
}

bool OAIControlMappingSource::is_source_set_up_option_Set() const{
    return m_source_set_up_option_isSet;
}

bool OAIControlMappingSource::is_source_set_up_option_Valid() const{
    return m_source_set_up_option_isValid;
}

OAISourceType OAIControlMappingSource::getSourceType() const {
    return m_source_type;
}
void OAIControlMappingSource::setSourceType(const OAISourceType &source_type) {
    m_source_type = source_type;
    m_source_type_isSet = true;
}

bool OAIControlMappingSource::is_source_type_Set() const{
    return m_source_type_isSet;
}

bool OAIControlMappingSource::is_source_type_Valid() const{
    return m_source_type_isValid;
}

OAISourceKeyword OAIControlMappingSource::getSourceKeyword() const {
    return m_source_keyword;
}
void OAIControlMappingSource::setSourceKeyword(const OAISourceKeyword &source_keyword) {
    m_source_keyword = source_keyword;
    m_source_keyword_isSet = true;
}

bool OAIControlMappingSource::is_source_keyword_Set() const{
    return m_source_keyword_isSet;
}

bool OAIControlMappingSource::is_source_keyword_Valid() const{
    return m_source_keyword_isValid;
}

OAISourceFrequency OAIControlMappingSource::getSourceFrequency() const {
    return m_source_frequency;
}
void OAIControlMappingSource::setSourceFrequency(const OAISourceFrequency &source_frequency) {
    m_source_frequency = source_frequency;
    m_source_frequency_isSet = true;
}

bool OAIControlMappingSource::is_source_frequency_Set() const{
    return m_source_frequency_isSet;
}

bool OAIControlMappingSource::is_source_frequency_Valid() const{
    return m_source_frequency_isValid;
}

QString OAIControlMappingSource::getTroubleshootingText() const {
    return m_troubleshooting_text;
}
void OAIControlMappingSource::setTroubleshootingText(const QString &troubleshooting_text) {
    m_troubleshooting_text = troubleshooting_text;
    m_troubleshooting_text_isSet = true;
}

bool OAIControlMappingSource::is_troubleshooting_text_Set() const{
    return m_troubleshooting_text_isSet;
}

bool OAIControlMappingSource::is_troubleshooting_text_Valid() const{
    return m_troubleshooting_text_isValid;
}

bool OAIControlMappingSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_set_up_option.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_keyword.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_frequency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_troubleshooting_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIControlMappingSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
