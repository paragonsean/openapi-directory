/**
 * AWS Audit Manager
 * <p>Welcome to the Audit Manager API reference. This guide is for developers who need detailed information about the Audit Manager API operations, data types, and errors. </p> <p>Audit Manager is a service that provides automated evidence collection so that you can continually audit your Amazon Web Services usage. You can use it to assess the effectiveness of your controls, manage risk, and simplify compliance.</p> <p>Audit Manager provides prebuilt frameworks that structure and automate assessments for a given compliance standard. Frameworks include a prebuilt collection of controls with descriptions and testing procedures. These controls are grouped according to the requirements of the specified compliance standard or regulation. You can also customize frameworks and controls to support internal audits with specific requirements. </p> <p>Use the following links to get started with the Audit Manager API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Audit Manager API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Audit Manager data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Audit Manager, we recommend that you review the <a href=\"https://docs.aws.amazon.com/audit-manager/latest/userguide/what-is.html\"> Audit Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateAssessmentStatusResponse_assessment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateAssessmentStatusResponse_assessment::OAIUpdateAssessmentStatusResponse_assessment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateAssessmentStatusResponse_assessment::OAIUpdateAssessmentStatusResponse_assessment() {
    this->initializeModel();
}

OAIUpdateAssessmentStatusResponse_assessment::~OAIUpdateAssessmentStatusResponse_assessment() {}

void OAIUpdateAssessmentStatusResponse_assessment::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_aws_account_isSet = false;
    m_aws_account_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_framework_isSet = false;
    m_framework_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIUpdateAssessmentStatusResponse_assessment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateAssessmentStatusResponse_assessment::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_aws_account_isValid = ::OpenAPI::fromJsonValue(m_aws_account, json[QString("awsAccount")]);
    m_aws_account_isSet = !json[QString("awsAccount")].isNull() && m_aws_account_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_framework_isValid = ::OpenAPI::fromJsonValue(m_framework, json[QString("framework")]);
    m_framework_isSet = !json[QString("framework")].isNull() && m_framework_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIUpdateAssessmentStatusResponse_assessment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateAssessmentStatusResponse_assessment::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_aws_account.isSet()) {
        obj.insert(QString("awsAccount"), ::OpenAPI::toJsonValue(m_aws_account));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_framework.isSet()) {
        obj.insert(QString("framework"), ::OpenAPI::toJsonValue(m_framework));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIUpdateAssessmentStatusResponse_assessment::getArn() const {
    return m_arn;
}
void OAIUpdateAssessmentStatusResponse_assessment::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIUpdateAssessmentStatusResponse_assessment::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIUpdateAssessmentStatusResponse_assessment::is_arn_Valid() const{
    return m_arn_isValid;
}

OAIAssessment_awsAccount OAIUpdateAssessmentStatusResponse_assessment::getAwsAccount() const {
    return m_aws_account;
}
void OAIUpdateAssessmentStatusResponse_assessment::setAwsAccount(const OAIAssessment_awsAccount &aws_account) {
    m_aws_account = aws_account;
    m_aws_account_isSet = true;
}

bool OAIUpdateAssessmentStatusResponse_assessment::is_aws_account_Set() const{
    return m_aws_account_isSet;
}

bool OAIUpdateAssessmentStatusResponse_assessment::is_aws_account_Valid() const{
    return m_aws_account_isValid;
}

OAIAssessment_metadata OAIUpdateAssessmentStatusResponse_assessment::getMetadata() const {
    return m_metadata;
}
void OAIUpdateAssessmentStatusResponse_assessment::setMetadata(const OAIAssessment_metadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIUpdateAssessmentStatusResponse_assessment::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIUpdateAssessmentStatusResponse_assessment::is_metadata_Valid() const{
    return m_metadata_isValid;
}

OAIAssessment_framework OAIUpdateAssessmentStatusResponse_assessment::getFramework() const {
    return m_framework;
}
void OAIUpdateAssessmentStatusResponse_assessment::setFramework(const OAIAssessment_framework &framework) {
    m_framework = framework;
    m_framework_isSet = true;
}

bool OAIUpdateAssessmentStatusResponse_assessment::is_framework_Set() const{
    return m_framework_isSet;
}

bool OAIUpdateAssessmentStatusResponse_assessment::is_framework_Valid() const{
    return m_framework_isValid;
}

QMap OAIUpdateAssessmentStatusResponse_assessment::getTags() const {
    return m_tags;
}
void OAIUpdateAssessmentStatusResponse_assessment::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIUpdateAssessmentStatusResponse_assessment::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIUpdateAssessmentStatusResponse_assessment::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIUpdateAssessmentStatusResponse_assessment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aws_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_framework.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateAssessmentStatusResponse_assessment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
