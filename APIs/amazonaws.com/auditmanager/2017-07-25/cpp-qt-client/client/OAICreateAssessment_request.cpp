/**
 * AWS Audit Manager
 * <p>Welcome to the Audit Manager API reference. This guide is for developers who need detailed information about the Audit Manager API operations, data types, and errors. </p> <p>Audit Manager is a service that provides automated evidence collection so that you can continually audit your Amazon Web Services usage. You can use it to assess the effectiveness of your controls, manage risk, and simplify compliance.</p> <p>Audit Manager provides prebuilt frameworks that structure and automate assessments for a given compliance standard. Frameworks include a prebuilt collection of controls with descriptions and testing procedures. These controls are grouped according to the requirements of the specified compliance standard or regulation. You can also customize frameworks and controls to support internal audits with specific requirements. </p> <p>Use the following links to get started with the Audit Manager API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Audit Manager API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Audit Manager data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Audit Manager, we recommend that you review the <a href=\"https://docs.aws.amazon.com/audit-manager/latest/userguide/what-is.html\"> Audit Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateAssessment_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateAssessment_request::OAICreateAssessment_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateAssessment_request::OAICreateAssessment_request() {
    this->initializeModel();
}

OAICreateAssessment_request::~OAICreateAssessment_request() {}

void OAICreateAssessment_request::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_assessment_reports_destination_isSet = false;
    m_assessment_reports_destination_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;

    m_roles_isSet = false;
    m_roles_isValid = false;

    m_framework_id_isSet = false;
    m_framework_id_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateAssessment_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateAssessment_request::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_assessment_reports_destination_isValid = ::OpenAPI::fromJsonValue(m_assessment_reports_destination, json[QString("assessmentReportsDestination")]);
    m_assessment_reports_destination_isSet = !json[QString("assessmentReportsDestination")].isNull() && m_assessment_reports_destination_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;

    m_roles_isValid = ::OpenAPI::fromJsonValue(m_roles, json[QString("roles")]);
    m_roles_isSet = !json[QString("roles")].isNull() && m_roles_isValid;

    m_framework_id_isValid = ::OpenAPI::fromJsonValue(m_framework_id, json[QString("frameworkId")]);
    m_framework_id_isSet = !json[QString("frameworkId")].isNull() && m_framework_id_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateAssessment_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateAssessment_request::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_assessment_reports_destination.isSet()) {
        obj.insert(QString("assessmentReportsDestination"), ::OpenAPI::toJsonValue(m_assessment_reports_destination));
    }
    if (m_scope.isSet()) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    if (m_roles.size() > 0) {
        obj.insert(QString("roles"), ::OpenAPI::toJsonValue(m_roles));
    }
    if (m_framework_id_isSet) {
        obj.insert(QString("frameworkId"), ::OpenAPI::toJsonValue(m_framework_id));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateAssessment_request::getName() const {
    return m_name;
}
void OAICreateAssessment_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateAssessment_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateAssessment_request::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateAssessment_request::getDescription() const {
    return m_description;
}
void OAICreateAssessment_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateAssessment_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateAssessment_request::is_description_Valid() const{
    return m_description_isValid;
}

OAICreateAssessment_request_assessmentReportsDestination OAICreateAssessment_request::getAssessmentReportsDestination() const {
    return m_assessment_reports_destination;
}
void OAICreateAssessment_request::setAssessmentReportsDestination(const OAICreateAssessment_request_assessmentReportsDestination &assessment_reports_destination) {
    m_assessment_reports_destination = assessment_reports_destination;
    m_assessment_reports_destination_isSet = true;
}

bool OAICreateAssessment_request::is_assessment_reports_destination_Set() const{
    return m_assessment_reports_destination_isSet;
}

bool OAICreateAssessment_request::is_assessment_reports_destination_Valid() const{
    return m_assessment_reports_destination_isValid;
}

OAICreateAssessment_request_scope OAICreateAssessment_request::getScope() const {
    return m_scope;
}
void OAICreateAssessment_request::setScope(const OAICreateAssessment_request_scope &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAICreateAssessment_request::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAICreateAssessment_request::is_scope_Valid() const{
    return m_scope_isValid;
}

QList<OAIRole> OAICreateAssessment_request::getRoles() const {
    return m_roles;
}
void OAICreateAssessment_request::setRoles(const QList<OAIRole> &roles) {
    m_roles = roles;
    m_roles_isSet = true;
}

bool OAICreateAssessment_request::is_roles_Set() const{
    return m_roles_isSet;
}

bool OAICreateAssessment_request::is_roles_Valid() const{
    return m_roles_isValid;
}

QString OAICreateAssessment_request::getFrameworkId() const {
    return m_framework_id;
}
void OAICreateAssessment_request::setFrameworkId(const QString &framework_id) {
    m_framework_id = framework_id;
    m_framework_id_isSet = true;
}

bool OAICreateAssessment_request::is_framework_id_Set() const{
    return m_framework_id_isSet;
}

bool OAICreateAssessment_request::is_framework_id_Valid() const{
    return m_framework_id_isValid;
}

QMap<QString, QString> OAICreateAssessment_request::getTags() const {
    return m_tags;
}
void OAICreateAssessment_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateAssessment_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateAssessment_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateAssessment_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assessment_reports_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_roles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_framework_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateAssessment_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_assessment_reports_destination_isValid && m_scope_isValid && m_roles_isValid && m_framework_id_isValid && true;
}

} // namespace OpenAPI
