/**
 * AWS Audit Manager
 * <p>Welcome to the Audit Manager API reference. This guide is for developers who need detailed information about the Audit Manager API operations, data types, and errors. </p> <p>Audit Manager is a service that provides automated evidence collection so that you can continually audit your Amazon Web Services usage. You can use it to assess the effectiveness of your controls, manage risk, and simplify compliance.</p> <p>Audit Manager provides prebuilt frameworks that structure and automate assessments for a given compliance standard. Frameworks include a prebuilt collection of controls with descriptions and testing procedures. These controls are grouped according to the requirements of the specified compliance standard or regulation. You can also customize frameworks and controls to support internal audits with specific requirements. </p> <p>Use the following links to get started with the Audit Manager API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Audit Manager API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Audit Manager data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Audit Manager, we recommend that you review the <a href=\"https://docs.aws.amazon.com/audit-manager/latest/userguide/what-is.html\"> Audit Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetAssessmentFrameworkResponse_framework.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetAssessmentFrameworkResponse_framework::OAIGetAssessmentFrameworkResponse_framework(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetAssessmentFrameworkResponse_framework::OAIGetAssessmentFrameworkResponse_framework() {
    this->initializeModel();
}

OAIGetAssessmentFrameworkResponse_framework::~OAIGetAssessmentFrameworkResponse_framework() {}

void OAIGetAssessmentFrameworkResponse_framework::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_compliance_type_isSet = false;
    m_compliance_type_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_logo_isSet = false;
    m_logo_isValid = false;

    m_control_sources_isSet = false;
    m_control_sources_isValid = false;

    m_control_sets_isSet = false;
    m_control_sets_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_last_updated_at_isSet = false;
    m_last_updated_at_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_last_updated_by_isSet = false;
    m_last_updated_by_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIGetAssessmentFrameworkResponse_framework::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetAssessmentFrameworkResponse_framework::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_compliance_type_isValid = ::OpenAPI::fromJsonValue(m_compliance_type, json[QString("complianceType")]);
    m_compliance_type_isSet = !json[QString("complianceType")].isNull() && m_compliance_type_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_logo_isValid = ::OpenAPI::fromJsonValue(m_logo, json[QString("logo")]);
    m_logo_isSet = !json[QString("logo")].isNull() && m_logo_isValid;

    m_control_sources_isValid = ::OpenAPI::fromJsonValue(m_control_sources, json[QString("controlSources")]);
    m_control_sources_isSet = !json[QString("controlSources")].isNull() && m_control_sources_isValid;

    m_control_sets_isValid = ::OpenAPI::fromJsonValue(m_control_sets, json[QString("controlSets")]);
    m_control_sets_isSet = !json[QString("controlSets")].isNull() && m_control_sets_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_last_updated_at_isValid = ::OpenAPI::fromJsonValue(m_last_updated_at, json[QString("lastUpdatedAt")]);
    m_last_updated_at_isSet = !json[QString("lastUpdatedAt")].isNull() && m_last_updated_at_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;

    m_last_updated_by_isValid = ::OpenAPI::fromJsonValue(m_last_updated_by, json[QString("lastUpdatedBy")]);
    m_last_updated_by_isSet = !json[QString("lastUpdatedBy")].isNull() && m_last_updated_by_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIGetAssessmentFrameworkResponse_framework::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetAssessmentFrameworkResponse_framework::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_compliance_type_isSet) {
        obj.insert(QString("complianceType"), ::OpenAPI::toJsonValue(m_compliance_type));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_logo_isSet) {
        obj.insert(QString("logo"), ::OpenAPI::toJsonValue(m_logo));
    }
    if (m_control_sources_isSet) {
        obj.insert(QString("controlSources"), ::OpenAPI::toJsonValue(m_control_sources));
    }
    if (m_control_sets.isSet()) {
        obj.insert(QString("controlSets"), ::OpenAPI::toJsonValue(m_control_sets));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_last_updated_at_isSet) {
        obj.insert(QString("lastUpdatedAt"), ::OpenAPI::toJsonValue(m_last_updated_at));
    }
    if (m_created_by_isSet) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_last_updated_by_isSet) {
        obj.insert(QString("lastUpdatedBy"), ::OpenAPI::toJsonValue(m_last_updated_by));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIGetAssessmentFrameworkResponse_framework::getArn() const {
    return m_arn;
}
void OAIGetAssessmentFrameworkResponse_framework::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIGetAssessmentFrameworkResponse_framework::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIGetAssessmentFrameworkResponse_framework::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIGetAssessmentFrameworkResponse_framework::getId() const {
    return m_id;
}
void OAIGetAssessmentFrameworkResponse_framework::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGetAssessmentFrameworkResponse_framework::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGetAssessmentFrameworkResponse_framework::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIGetAssessmentFrameworkResponse_framework::getName() const {
    return m_name;
}
void OAIGetAssessmentFrameworkResponse_framework::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetAssessmentFrameworkResponse_framework::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetAssessmentFrameworkResponse_framework::is_name_Valid() const{
    return m_name_isValid;
}

OAIFrameworkType OAIGetAssessmentFrameworkResponse_framework::getType() const {
    return m_type;
}
void OAIGetAssessmentFrameworkResponse_framework::setType(const OAIFrameworkType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGetAssessmentFrameworkResponse_framework::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGetAssessmentFrameworkResponse_framework::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIGetAssessmentFrameworkResponse_framework::getComplianceType() const {
    return m_compliance_type;
}
void OAIGetAssessmentFrameworkResponse_framework::setComplianceType(const QString &compliance_type) {
    m_compliance_type = compliance_type;
    m_compliance_type_isSet = true;
}

bool OAIGetAssessmentFrameworkResponse_framework::is_compliance_type_Set() const{
    return m_compliance_type_isSet;
}

bool OAIGetAssessmentFrameworkResponse_framework::is_compliance_type_Valid() const{
    return m_compliance_type_isValid;
}

QString OAIGetAssessmentFrameworkResponse_framework::getDescription() const {
    return m_description;
}
void OAIGetAssessmentFrameworkResponse_framework::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGetAssessmentFrameworkResponse_framework::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGetAssessmentFrameworkResponse_framework::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIGetAssessmentFrameworkResponse_framework::getLogo() const {
    return m_logo;
}
void OAIGetAssessmentFrameworkResponse_framework::setLogo(const QString &logo) {
    m_logo = logo;
    m_logo_isSet = true;
}

bool OAIGetAssessmentFrameworkResponse_framework::is_logo_Set() const{
    return m_logo_isSet;
}

bool OAIGetAssessmentFrameworkResponse_framework::is_logo_Valid() const{
    return m_logo_isValid;
}

QString OAIGetAssessmentFrameworkResponse_framework::getControlSources() const {
    return m_control_sources;
}
void OAIGetAssessmentFrameworkResponse_framework::setControlSources(const QString &control_sources) {
    m_control_sources = control_sources;
    m_control_sources_isSet = true;
}

bool OAIGetAssessmentFrameworkResponse_framework::is_control_sources_Set() const{
    return m_control_sources_isSet;
}

bool OAIGetAssessmentFrameworkResponse_framework::is_control_sources_Valid() const{
    return m_control_sources_isValid;
}

QList OAIGetAssessmentFrameworkResponse_framework::getControlSets() const {
    return m_control_sets;
}
void OAIGetAssessmentFrameworkResponse_framework::setControlSets(const QList &control_sets) {
    m_control_sets = control_sets;
    m_control_sets_isSet = true;
}

bool OAIGetAssessmentFrameworkResponse_framework::is_control_sets_Set() const{
    return m_control_sets_isSet;
}

bool OAIGetAssessmentFrameworkResponse_framework::is_control_sets_Valid() const{
    return m_control_sets_isValid;
}

QDateTime OAIGetAssessmentFrameworkResponse_framework::getCreatedAt() const {
    return m_created_at;
}
void OAIGetAssessmentFrameworkResponse_framework::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIGetAssessmentFrameworkResponse_framework::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIGetAssessmentFrameworkResponse_framework::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAIGetAssessmentFrameworkResponse_framework::getLastUpdatedAt() const {
    return m_last_updated_at;
}
void OAIGetAssessmentFrameworkResponse_framework::setLastUpdatedAt(const QDateTime &last_updated_at) {
    m_last_updated_at = last_updated_at;
    m_last_updated_at_isSet = true;
}

bool OAIGetAssessmentFrameworkResponse_framework::is_last_updated_at_Set() const{
    return m_last_updated_at_isSet;
}

bool OAIGetAssessmentFrameworkResponse_framework::is_last_updated_at_Valid() const{
    return m_last_updated_at_isValid;
}

QString OAIGetAssessmentFrameworkResponse_framework::getCreatedBy() const {
    return m_created_by;
}
void OAIGetAssessmentFrameworkResponse_framework::setCreatedBy(const QString &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIGetAssessmentFrameworkResponse_framework::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIGetAssessmentFrameworkResponse_framework::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QString OAIGetAssessmentFrameworkResponse_framework::getLastUpdatedBy() const {
    return m_last_updated_by;
}
void OAIGetAssessmentFrameworkResponse_framework::setLastUpdatedBy(const QString &last_updated_by) {
    m_last_updated_by = last_updated_by;
    m_last_updated_by_isSet = true;
}

bool OAIGetAssessmentFrameworkResponse_framework::is_last_updated_by_Set() const{
    return m_last_updated_by_isSet;
}

bool OAIGetAssessmentFrameworkResponse_framework::is_last_updated_by_Valid() const{
    return m_last_updated_by_isValid;
}

QMap OAIGetAssessmentFrameworkResponse_framework::getTags() const {
    return m_tags;
}
void OAIGetAssessmentFrameworkResponse_framework::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIGetAssessmentFrameworkResponse_framework::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIGetAssessmentFrameworkResponse_framework::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIGetAssessmentFrameworkResponse_framework::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_compliance_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_control_sources_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_control_sets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetAssessmentFrameworkResponse_framework::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
