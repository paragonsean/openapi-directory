/**
 * AWS Audit Manager
 * <p>Welcome to the Audit Manager API reference. This guide is for developers who need detailed information about the Audit Manager API operations, data types, and errors. </p> <p>Audit Manager is a service that provides automated evidence collection so that you can continually audit your Amazon Web Services usage. You can use it to assess the effectiveness of your controls, manage risk, and simplify compliance.</p> <p>Audit Manager provides prebuilt frameworks that structure and automate assessments for a given compliance standard. Frameworks include a prebuilt collection of controls with descriptions and testing procedures. These controls are grouped according to the requirements of the specified compliance standard or regulation. You can also customize frameworks and controls to support internal audits with specific requirements. </p> <p>Use the following links to get started with the Audit Manager API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Audit Manager API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Audit Manager data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Audit Manager, we recommend that you review the <a href=\"https://docs.aws.amazon.com/audit-manager/latest/userguide/what-is.html\"> Audit Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEvidenceFinderEnablement.h
 *
 * The settings object that specifies whether evidence finder is enabled. This object also describes the related event data store, and the backfill status for populating the event data store with evidence data.
 */

#ifndef OAIEvidenceFinderEnablement_H
#define OAIEvidenceFinderEnablement_H

#include <QJsonObject>

#include "OAIEvidenceFinderBackfillStatus.h"
#include "OAIEvidenceFinderEnablementStatus.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIEvidenceFinderEnablement : public OAIObject {
public:
    OAIEvidenceFinderEnablement();
    OAIEvidenceFinderEnablement(QString json);
    ~OAIEvidenceFinderEnablement() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getEventDataStoreArn() const;
    void setEventDataStoreArn(const QString &event_data_store_arn);
    bool is_event_data_store_arn_Set() const;
    bool is_event_data_store_arn_Valid() const;

    OAIEvidenceFinderEnablementStatus getEnablementStatus() const;
    void setEnablementStatus(const OAIEvidenceFinderEnablementStatus &enablement_status);
    bool is_enablement_status_Set() const;
    bool is_enablement_status_Valid() const;

    OAIEvidenceFinderBackfillStatus getBackfillStatus() const;
    void setBackfillStatus(const OAIEvidenceFinderBackfillStatus &backfill_status);
    bool is_backfill_status_Set() const;
    bool is_backfill_status_Valid() const;

    QString getError() const;
    void setError(const QString &error);
    bool is_error_Set() const;
    bool is_error_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_event_data_store_arn;
    bool m_event_data_store_arn_isSet;
    bool m_event_data_store_arn_isValid;

    OAIEvidenceFinderEnablementStatus m_enablement_status;
    bool m_enablement_status_isSet;
    bool m_enablement_status_isValid;

    OAIEvidenceFinderBackfillStatus m_backfill_status;
    bool m_backfill_status_isSet;
    bool m_backfill_status_isValid;

    QString m_error;
    bool m_error_isSet;
    bool m_error_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEvidenceFinderEnablement)

#endif // OAIEvidenceFinderEnablement_H
