/**
 * AWS Audit Manager
 * <p>Welcome to the Audit Manager API reference. This guide is for developers who need detailed information about the Audit Manager API operations, data types, and errors. </p> <p>Audit Manager is a service that provides automated evidence collection so that you can continually audit your Amazon Web Services usage. You can use it to assess the effectiveness of your controls, manage risk, and simplify compliance.</p> <p>Audit Manager provides prebuilt frameworks that structure and automate assessments for a given compliance standard. Frameworks include a prebuilt collection of controls with descriptions and testing procedures. These controls are grouped according to the requirements of the specified compliance standard or regulation. You can also customize frameworks and controls to support internal audits with specific requirements. </p> <p>Use the following links to get started with the Audit Manager API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Audit Manager API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Audit Manager data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Audit Manager, we recommend that you review the <a href=\"https://docs.aws.amazon.com/audit-manager/latest/userguide/what-is.html\"> Audit Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssessmentFrameworkMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssessmentFrameworkMetadata::OAIAssessmentFrameworkMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssessmentFrameworkMetadata::OAIAssessmentFrameworkMetadata() {
    this->initializeModel();
}

OAIAssessmentFrameworkMetadata::~OAIAssessmentFrameworkMetadata() {}

void OAIAssessmentFrameworkMetadata::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_logo_isSet = false;
    m_logo_isValid = false;

    m_compliance_type_isSet = false;
    m_compliance_type_isValid = false;

    m_controls_count_isSet = false;
    m_controls_count_isValid = false;

    m_control_sets_count_isSet = false;
    m_control_sets_count_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_last_updated_at_isSet = false;
    m_last_updated_at_isValid = false;
}

void OAIAssessmentFrameworkMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssessmentFrameworkMetadata::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_logo_isValid = ::OpenAPI::fromJsonValue(m_logo, json[QString("logo")]);
    m_logo_isSet = !json[QString("logo")].isNull() && m_logo_isValid;

    m_compliance_type_isValid = ::OpenAPI::fromJsonValue(m_compliance_type, json[QString("complianceType")]);
    m_compliance_type_isSet = !json[QString("complianceType")].isNull() && m_compliance_type_isValid;

    m_controls_count_isValid = ::OpenAPI::fromJsonValue(m_controls_count, json[QString("controlsCount")]);
    m_controls_count_isSet = !json[QString("controlsCount")].isNull() && m_controls_count_isValid;

    m_control_sets_count_isValid = ::OpenAPI::fromJsonValue(m_control_sets_count, json[QString("controlSetsCount")]);
    m_control_sets_count_isSet = !json[QString("controlSetsCount")].isNull() && m_control_sets_count_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_last_updated_at_isValid = ::OpenAPI::fromJsonValue(m_last_updated_at, json[QString("lastUpdatedAt")]);
    m_last_updated_at_isSet = !json[QString("lastUpdatedAt")].isNull() && m_last_updated_at_isValid;
}

QString OAIAssessmentFrameworkMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssessmentFrameworkMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_logo_isSet) {
        obj.insert(QString("logo"), ::OpenAPI::toJsonValue(m_logo));
    }
    if (m_compliance_type_isSet) {
        obj.insert(QString("complianceType"), ::OpenAPI::toJsonValue(m_compliance_type));
    }
    if (m_controls_count_isSet) {
        obj.insert(QString("controlsCount"), ::OpenAPI::toJsonValue(m_controls_count));
    }
    if (m_control_sets_count_isSet) {
        obj.insert(QString("controlSetsCount"), ::OpenAPI::toJsonValue(m_control_sets_count));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_last_updated_at_isSet) {
        obj.insert(QString("lastUpdatedAt"), ::OpenAPI::toJsonValue(m_last_updated_at));
    }
    return obj;
}

QString OAIAssessmentFrameworkMetadata::getArn() const {
    return m_arn;
}
void OAIAssessmentFrameworkMetadata::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIAssessmentFrameworkMetadata::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIAssessmentFrameworkMetadata::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIAssessmentFrameworkMetadata::getId() const {
    return m_id;
}
void OAIAssessmentFrameworkMetadata::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAssessmentFrameworkMetadata::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAssessmentFrameworkMetadata::is_id_Valid() const{
    return m_id_isValid;
}

OAIFrameworkType OAIAssessmentFrameworkMetadata::getType() const {
    return m_type;
}
void OAIAssessmentFrameworkMetadata::setType(const OAIFrameworkType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAssessmentFrameworkMetadata::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAssessmentFrameworkMetadata::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIAssessmentFrameworkMetadata::getName() const {
    return m_name;
}
void OAIAssessmentFrameworkMetadata::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAssessmentFrameworkMetadata::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAssessmentFrameworkMetadata::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAssessmentFrameworkMetadata::getDescription() const {
    return m_description;
}
void OAIAssessmentFrameworkMetadata::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAssessmentFrameworkMetadata::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAssessmentFrameworkMetadata::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIAssessmentFrameworkMetadata::getLogo() const {
    return m_logo;
}
void OAIAssessmentFrameworkMetadata::setLogo(const QString &logo) {
    m_logo = logo;
    m_logo_isSet = true;
}

bool OAIAssessmentFrameworkMetadata::is_logo_Set() const{
    return m_logo_isSet;
}

bool OAIAssessmentFrameworkMetadata::is_logo_Valid() const{
    return m_logo_isValid;
}

QString OAIAssessmentFrameworkMetadata::getComplianceType() const {
    return m_compliance_type;
}
void OAIAssessmentFrameworkMetadata::setComplianceType(const QString &compliance_type) {
    m_compliance_type = compliance_type;
    m_compliance_type_isSet = true;
}

bool OAIAssessmentFrameworkMetadata::is_compliance_type_Set() const{
    return m_compliance_type_isSet;
}

bool OAIAssessmentFrameworkMetadata::is_compliance_type_Valid() const{
    return m_compliance_type_isValid;
}

qint32 OAIAssessmentFrameworkMetadata::getControlsCount() const {
    return m_controls_count;
}
void OAIAssessmentFrameworkMetadata::setControlsCount(const qint32 &controls_count) {
    m_controls_count = controls_count;
    m_controls_count_isSet = true;
}

bool OAIAssessmentFrameworkMetadata::is_controls_count_Set() const{
    return m_controls_count_isSet;
}

bool OAIAssessmentFrameworkMetadata::is_controls_count_Valid() const{
    return m_controls_count_isValid;
}

qint32 OAIAssessmentFrameworkMetadata::getControlSetsCount() const {
    return m_control_sets_count;
}
void OAIAssessmentFrameworkMetadata::setControlSetsCount(const qint32 &control_sets_count) {
    m_control_sets_count = control_sets_count;
    m_control_sets_count_isSet = true;
}

bool OAIAssessmentFrameworkMetadata::is_control_sets_count_Set() const{
    return m_control_sets_count_isSet;
}

bool OAIAssessmentFrameworkMetadata::is_control_sets_count_Valid() const{
    return m_control_sets_count_isValid;
}

QDateTime OAIAssessmentFrameworkMetadata::getCreatedAt() const {
    return m_created_at;
}
void OAIAssessmentFrameworkMetadata::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIAssessmentFrameworkMetadata::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIAssessmentFrameworkMetadata::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAIAssessmentFrameworkMetadata::getLastUpdatedAt() const {
    return m_last_updated_at;
}
void OAIAssessmentFrameworkMetadata::setLastUpdatedAt(const QDateTime &last_updated_at) {
    m_last_updated_at = last_updated_at;
    m_last_updated_at_isSet = true;
}

bool OAIAssessmentFrameworkMetadata::is_last_updated_at_Set() const{
    return m_last_updated_at_isSet;
}

bool OAIAssessmentFrameworkMetadata::is_last_updated_at_Valid() const{
    return m_last_updated_at_isValid;
}

bool OAIAssessmentFrameworkMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compliance_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_controls_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_control_sets_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssessmentFrameworkMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
