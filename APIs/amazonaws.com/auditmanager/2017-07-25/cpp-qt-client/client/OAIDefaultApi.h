/**
 * AWS Audit Manager
 * <p>Welcome to the Audit Manager API reference. This guide is for developers who need detailed information about the Audit Manager API operations, data types, and errors. </p> <p>Audit Manager is a service that provides automated evidence collection so that you can continually audit your Amazon Web Services usage. You can use it to assess the effectiveness of your controls, manage risk, and simplify compliance.</p> <p>Audit Manager provides prebuilt frameworks that structure and automate assessments for a given compliance standard. Frameworks include a prebuilt collection of controls with descriptions and testing procedures. These controls are grouped according to the requirements of the specified compliance standard or regulation. You can also customize frameworks and controls to support internal audits with specific requirements. </p> <p>Use the following links to get started with the Audit Manager API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Audit Manager API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Audit Manager data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Audit Manager, we recommend that you review the <a href=\"https://docs.aws.amazon.com/audit-manager/latest/userguide/what-is.html\"> Audit Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAssociateAssessmentReportEvidenceFolder_request.h"
#include "OAIBatchAssociateAssessmentReportEvidenceResponse.h"
#include "OAIBatchAssociateAssessmentReportEvidence_request.h"
#include "OAIBatchCreateDelegationByAssessmentResponse.h"
#include "OAIBatchCreateDelegationByAssessment_request.h"
#include "OAIBatchDeleteDelegationByAssessmentResponse.h"
#include "OAIBatchDeleteDelegationByAssessment_request.h"
#include "OAIBatchDisassociateAssessmentReportEvidenceResponse.h"
#include "OAIBatchImportEvidenceToAssessmentControlResponse.h"
#include "OAIBatchImportEvidenceToAssessmentControl_request.h"
#include "OAICreateAssessmentFrameworkResponse.h"
#include "OAICreateAssessmentFramework_request.h"
#include "OAICreateAssessmentReportResponse.h"
#include "OAICreateAssessmentReport_request.h"
#include "OAICreateAssessmentResponse.h"
#include "OAICreateAssessment_request.h"
#include "OAICreateControlResponse.h"
#include "OAICreateControl_request.h"
#include "OAIDeregisterAccountResponse.h"
#include "OAIDeregisterOrganizationAdminAccount_request.h"
#include "OAIDisassociateAssessmentReportEvidenceFolder_request.h"
#include "OAIGetAccountStatusResponse.h"
#include "OAIGetAssessmentFrameworkResponse.h"
#include "OAIGetAssessmentReportUrlResponse.h"
#include "OAIGetAssessmentResponse.h"
#include "OAIGetChangeLogsResponse.h"
#include "OAIGetControlResponse.h"
#include "OAIGetDelegationsResponse.h"
#include "OAIGetEvidenceByEvidenceFolderResponse.h"
#include "OAIGetEvidenceFileUploadUrlResponse.h"
#include "OAIGetEvidenceFolderResponse.h"
#include "OAIGetEvidenceFoldersByAssessmentControlResponse.h"
#include "OAIGetEvidenceFoldersByAssessmentResponse.h"
#include "OAIGetEvidenceResponse.h"
#include "OAIGetInsightsByAssessmentResponse.h"
#include "OAIGetInsightsResponse.h"
#include "OAIGetOrganizationAdminAccountResponse.h"
#include "OAIGetServicesInScopeResponse.h"
#include "OAIGetSettingsResponse.h"
#include "OAIListAssessmentControlInsightsByControlDomainResponse.h"
#include "OAIListAssessmentFrameworkShareRequestsResponse.h"
#include "OAIListAssessmentFrameworksResponse.h"
#include "OAIListAssessmentReportsResponse.h"
#include "OAIListAssessmentsResponse.h"
#include "OAIListControlDomainInsightsByAssessmentResponse.h"
#include "OAIListControlDomainInsightsResponse.h"
#include "OAIListControlInsightsByControlDomainResponse.h"
#include "OAIListControlsResponse.h"
#include "OAIListKeywordsForDataSourceResponse.h"
#include "OAIListNotificationsResponse.h"
#include "OAIListTagsForResourceResponse.h"
#include "OAIObject.h"
#include "OAIRegisterAccountResponse.h"
#include "OAIRegisterAccount_request.h"
#include "OAIRegisterOrganizationAdminAccountResponse.h"
#include "OAIRegisterOrganizationAdminAccount_request.h"
#include "OAIStartAssessmentFrameworkShareResponse.h"
#include "OAIStartAssessmentFrameworkShare_request.h"
#include "OAITagResource_request.h"
#include "OAIUpdateAssessmentControlResponse.h"
#include "OAIUpdateAssessmentControlSetStatusResponse.h"
#include "OAIUpdateAssessmentControlSetStatus_request.h"
#include "OAIUpdateAssessmentControl_request.h"
#include "OAIUpdateAssessmentFrameworkResponse.h"
#include "OAIUpdateAssessmentFrameworkShareResponse.h"
#include "OAIUpdateAssessmentFrameworkShare_request.h"
#include "OAIUpdateAssessmentFramework_request.h"
#include "OAIUpdateAssessmentResponse.h"
#include "OAIUpdateAssessmentStatusResponse.h"
#include "OAIUpdateAssessmentStatus_request.h"
#include "OAIUpdateAssessment_request.h"
#include "OAIUpdateControlResponse.h"
#include "OAIUpdateControl_request.h"
#include "OAIUpdateSettingsResponse.h"
#include "OAIUpdateSettings_request.h"
#include "OAIValidateAssessmentReportIntegrityResponse.h"
#include "OAIValidateAssessmentReportIntegrity_request.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  assessment_id QString [required]
    * @param[in]  oai_associate_assessment_report_evidence_folder_request OAIAssociateAssessmentReportEvidenceFolder_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void associateAssessmentReportEvidenceFolder(const QString &assessment_id, const OAIAssociateAssessmentReportEvidenceFolder_request &oai_associate_assessment_report_evidence_folder_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  assessment_id QString [required]
    * @param[in]  oai_batch_associate_assessment_report_evidence_request OAIBatchAssociateAssessmentReportEvidence_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void batchAssociateAssessmentReportEvidence(const QString &assessment_id, const OAIBatchAssociateAssessmentReportEvidence_request &oai_batch_associate_assessment_report_evidence_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  assessment_id QString [required]
    * @param[in]  oai_batch_create_delegation_by_assessment_request OAIBatchCreateDelegationByAssessment_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void batchCreateDelegationByAssessment(const QString &assessment_id, const OAIBatchCreateDelegationByAssessment_request &oai_batch_create_delegation_by_assessment_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  assessment_id QString [required]
    * @param[in]  oai_batch_delete_delegation_by_assessment_request OAIBatchDeleteDelegationByAssessment_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void batchDeleteDelegationByAssessment(const QString &assessment_id, const OAIBatchDeleteDelegationByAssessment_request &oai_batch_delete_delegation_by_assessment_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  assessment_id QString [required]
    * @param[in]  oai_batch_associate_assessment_report_evidence_request OAIBatchAssociateAssessmentReportEvidence_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void batchDisassociateAssessmentReportEvidence(const QString &assessment_id, const OAIBatchAssociateAssessmentReportEvidence_request &oai_batch_associate_assessment_report_evidence_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  assessment_id QString [required]
    * @param[in]  control_set_id QString [required]
    * @param[in]  control_id QString [required]
    * @param[in]  oai_batch_import_evidence_to_assessment_control_request OAIBatchImportEvidenceToAssessmentControl_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void batchImportEvidenceToAssessmentControl(const QString &assessment_id, const QString &control_set_id, const QString &control_id, const OAIBatchImportEvidenceToAssessmentControl_request &oai_batch_import_evidence_to_assessment_control_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_create_assessment_request OAICreateAssessment_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createAssessment(const OAICreateAssessment_request &oai_create_assessment_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_create_assessment_framework_request OAICreateAssessmentFramework_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createAssessmentFramework(const OAICreateAssessmentFramework_request &oai_create_assessment_framework_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  assessment_id QString [required]
    * @param[in]  oai_create_assessment_report_request OAICreateAssessmentReport_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createAssessmentReport(const QString &assessment_id, const OAICreateAssessmentReport_request &oai_create_assessment_report_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_create_control_request OAICreateControl_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createControl(const OAICreateControl_request &oai_create_control_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  assessment_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteAssessment(const QString &assessment_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  framework_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteAssessmentFramework(const QString &framework_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  request_id QString [required]
    * @param[in]  request_type QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteAssessmentFrameworkShare(const QString &request_id, const QString &request_type, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  assessment_id QString [required]
    * @param[in]  assessment_report_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteAssessmentReport(const QString &assessment_id, const QString &assessment_report_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  control_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteControl(const QString &control_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deregisterAccount(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_deregister_organization_admin_account_request OAIDeregisterOrganizationAdminAccount_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deregisterOrganizationAdminAccount(const OAIDeregisterOrganizationAdminAccount_request &oai_deregister_organization_admin_account_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  assessment_id QString [required]
    * @param[in]  oai_disassociate_assessment_report_evidence_folder_request OAIDisassociateAssessmentReportEvidenceFolder_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void disassociateAssessmentReportEvidenceFolder(const QString &assessment_id, const OAIDisassociateAssessmentReportEvidenceFolder_request &oai_disassociate_assessment_report_evidence_folder_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getAccountStatus(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  assessment_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getAssessment(const QString &assessment_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  framework_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getAssessmentFramework(const QString &framework_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  assessment_report_id QString [required]
    * @param[in]  assessment_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getAssessmentReportUrl(const QString &assessment_report_id, const QString &assessment_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  assessment_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  control_set_id QString [optional]
    * @param[in]  control_id QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results qint32 [optional]
    */
    virtual void getChangeLogs(const QString &assessment_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &control_set_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &control_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  control_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getControl(const QString &control_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results qint32 [optional]
    */
    virtual void getDelegations(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  assessment_id QString [required]
    * @param[in]  control_set_id QString [required]
    * @param[in]  evidence_folder_id QString [required]
    * @param[in]  evidence_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getEvidence(const QString &assessment_id, const QString &control_set_id, const QString &evidence_folder_id, const QString &evidence_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  assessment_id QString [required]
    * @param[in]  control_set_id QString [required]
    * @param[in]  evidence_folder_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results qint32 [optional]
    */
    virtual void getEvidenceByEvidenceFolder(const QString &assessment_id, const QString &control_set_id, const QString &evidence_folder_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  file_name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getEvidenceFileUploadUrl(const QString &file_name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  assessment_id QString [required]
    * @param[in]  control_set_id QString [required]
    * @param[in]  evidence_folder_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getEvidenceFolder(const QString &assessment_id, const QString &control_set_id, const QString &evidence_folder_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  assessment_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results qint32 [optional]
    */
    virtual void getEvidenceFoldersByAssessment(const QString &assessment_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  assessment_id QString [required]
    * @param[in]  control_set_id QString [required]
    * @param[in]  control_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results qint32 [optional]
    */
    virtual void getEvidenceFoldersByAssessmentControl(const QString &assessment_id, const QString &control_set_id, const QString &control_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getInsights(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  assessment_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getInsightsByAssessment(const QString &assessment_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getOrganizationAdminAccount(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getServicesInScope(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  attribute QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getSettings(const QString &attribute, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  control_domain_id QString [required]
    * @param[in]  assessment_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results qint32 [optional]
    */
    virtual void listAssessmentControlInsightsByControlDomain(const QString &control_domain_id, const QString &assessment_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  request_type QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results qint32 [optional]
    */
    virtual void listAssessmentFrameworkShareRequests(const QString &request_type, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  framework_type QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results qint32 [optional]
    */
    virtual void listAssessmentFrameworks(const QString &framework_type, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results qint32 [optional]
    */
    virtual void listAssessmentReports(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results qint32 [optional]
    */
    virtual void listAssessments(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results qint32 [optional]
    */
    virtual void listControlDomainInsights(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  assessment_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results qint32 [optional]
    */
    virtual void listControlDomainInsightsByAssessment(const QString &assessment_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  control_domain_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results qint32 [optional]
    */
    virtual void listControlInsightsByControlDomain(const QString &control_domain_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  control_type QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results qint32 [optional]
    */
    virtual void listControls(const QString &control_type, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  source QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results qint32 [optional]
    */
    virtual void listKeywordsForDataSource(const QString &source, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results qint32 [optional]
    */
    virtual void listNotifications(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  resource_arn QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void listTagsForResource(const QString &resource_arn, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_register_account_request OAIRegisterAccount_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void registerAccount(const OAIRegisterAccount_request &oai_register_account_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_register_organization_admin_account_request OAIRegisterOrganizationAdminAccount_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void registerOrganizationAdminAccount(const OAIRegisterOrganizationAdminAccount_request &oai_register_organization_admin_account_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  framework_id QString [required]
    * @param[in]  oai_start_assessment_framework_share_request OAIStartAssessmentFrameworkShare_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void startAssessmentFrameworkShare(const QString &framework_id, const OAIStartAssessmentFrameworkShare_request &oai_start_assessment_framework_share_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_arn QString [required]
    * @param[in]  oai_tag_resource_request OAITagResource_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void tagResource(const QString &resource_arn, const OAITagResource_request &oai_tag_resource_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_arn QString [required]
    * @param[in]  tag_keys QList<QString> [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void untagResource(const QString &resource_arn, const QList<QString> &tag_keys, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  assessment_id QString [required]
    * @param[in]  oai_update_assessment_request OAIUpdateAssessment_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateAssessment(const QString &assessment_id, const OAIUpdateAssessment_request &oai_update_assessment_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  assessment_id QString [required]
    * @param[in]  control_set_id QString [required]
    * @param[in]  control_id QString [required]
    * @param[in]  oai_update_assessment_control_request OAIUpdateAssessmentControl_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateAssessmentControl(const QString &assessment_id, const QString &control_set_id, const QString &control_id, const OAIUpdateAssessmentControl_request &oai_update_assessment_control_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  assessment_id QString [required]
    * @param[in]  control_set_id QString [required]
    * @param[in]  oai_update_assessment_control_set_status_request OAIUpdateAssessmentControlSetStatus_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateAssessmentControlSetStatus(const QString &assessment_id, const QString &control_set_id, const OAIUpdateAssessmentControlSetStatus_request &oai_update_assessment_control_set_status_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  framework_id QString [required]
    * @param[in]  oai_update_assessment_framework_request OAIUpdateAssessmentFramework_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateAssessmentFramework(const QString &framework_id, const OAIUpdateAssessmentFramework_request &oai_update_assessment_framework_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  request_id QString [required]
    * @param[in]  oai_update_assessment_framework_share_request OAIUpdateAssessmentFrameworkShare_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateAssessmentFrameworkShare(const QString &request_id, const OAIUpdateAssessmentFrameworkShare_request &oai_update_assessment_framework_share_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  assessment_id QString [required]
    * @param[in]  oai_update_assessment_status_request OAIUpdateAssessmentStatus_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateAssessmentStatus(const QString &assessment_id, const OAIUpdateAssessmentStatus_request &oai_update_assessment_status_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  control_id QString [required]
    * @param[in]  oai_update_control_request OAIUpdateControl_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateControl(const QString &control_id, const OAIUpdateControl_request &oai_update_control_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_update_settings_request OAIUpdateSettings_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateSettings(const OAIUpdateSettings_request &oai_update_settings_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_validate_assessment_report_integrity_request OAIValidateAssessmentReportIntegrity_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void validateAssessmentReportIntegrity(const OAIValidateAssessmentReportIntegrity_request &oai_validate_assessment_report_integrity_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void associateAssessmentReportEvidenceFolderCallback(OAIHttpRequestWorker *worker);
    void batchAssociateAssessmentReportEvidenceCallback(OAIHttpRequestWorker *worker);
    void batchCreateDelegationByAssessmentCallback(OAIHttpRequestWorker *worker);
    void batchDeleteDelegationByAssessmentCallback(OAIHttpRequestWorker *worker);
    void batchDisassociateAssessmentReportEvidenceCallback(OAIHttpRequestWorker *worker);
    void batchImportEvidenceToAssessmentControlCallback(OAIHttpRequestWorker *worker);
    void createAssessmentCallback(OAIHttpRequestWorker *worker);
    void createAssessmentFrameworkCallback(OAIHttpRequestWorker *worker);
    void createAssessmentReportCallback(OAIHttpRequestWorker *worker);
    void createControlCallback(OAIHttpRequestWorker *worker);
    void deleteAssessmentCallback(OAIHttpRequestWorker *worker);
    void deleteAssessmentFrameworkCallback(OAIHttpRequestWorker *worker);
    void deleteAssessmentFrameworkShareCallback(OAIHttpRequestWorker *worker);
    void deleteAssessmentReportCallback(OAIHttpRequestWorker *worker);
    void deleteControlCallback(OAIHttpRequestWorker *worker);
    void deregisterAccountCallback(OAIHttpRequestWorker *worker);
    void deregisterOrganizationAdminAccountCallback(OAIHttpRequestWorker *worker);
    void disassociateAssessmentReportEvidenceFolderCallback(OAIHttpRequestWorker *worker);
    void getAccountStatusCallback(OAIHttpRequestWorker *worker);
    void getAssessmentCallback(OAIHttpRequestWorker *worker);
    void getAssessmentFrameworkCallback(OAIHttpRequestWorker *worker);
    void getAssessmentReportUrlCallback(OAIHttpRequestWorker *worker);
    void getChangeLogsCallback(OAIHttpRequestWorker *worker);
    void getControlCallback(OAIHttpRequestWorker *worker);
    void getDelegationsCallback(OAIHttpRequestWorker *worker);
    void getEvidenceCallback(OAIHttpRequestWorker *worker);
    void getEvidenceByEvidenceFolderCallback(OAIHttpRequestWorker *worker);
    void getEvidenceFileUploadUrlCallback(OAIHttpRequestWorker *worker);
    void getEvidenceFolderCallback(OAIHttpRequestWorker *worker);
    void getEvidenceFoldersByAssessmentCallback(OAIHttpRequestWorker *worker);
    void getEvidenceFoldersByAssessmentControlCallback(OAIHttpRequestWorker *worker);
    void getInsightsCallback(OAIHttpRequestWorker *worker);
    void getInsightsByAssessmentCallback(OAIHttpRequestWorker *worker);
    void getOrganizationAdminAccountCallback(OAIHttpRequestWorker *worker);
    void getServicesInScopeCallback(OAIHttpRequestWorker *worker);
    void getSettingsCallback(OAIHttpRequestWorker *worker);
    void listAssessmentControlInsightsByControlDomainCallback(OAIHttpRequestWorker *worker);
    void listAssessmentFrameworkShareRequestsCallback(OAIHttpRequestWorker *worker);
    void listAssessmentFrameworksCallback(OAIHttpRequestWorker *worker);
    void listAssessmentReportsCallback(OAIHttpRequestWorker *worker);
    void listAssessmentsCallback(OAIHttpRequestWorker *worker);
    void listControlDomainInsightsCallback(OAIHttpRequestWorker *worker);
    void listControlDomainInsightsByAssessmentCallback(OAIHttpRequestWorker *worker);
    void listControlInsightsByControlDomainCallback(OAIHttpRequestWorker *worker);
    void listControlsCallback(OAIHttpRequestWorker *worker);
    void listKeywordsForDataSourceCallback(OAIHttpRequestWorker *worker);
    void listNotificationsCallback(OAIHttpRequestWorker *worker);
    void listTagsForResourceCallback(OAIHttpRequestWorker *worker);
    void registerAccountCallback(OAIHttpRequestWorker *worker);
    void registerOrganizationAdminAccountCallback(OAIHttpRequestWorker *worker);
    void startAssessmentFrameworkShareCallback(OAIHttpRequestWorker *worker);
    void tagResourceCallback(OAIHttpRequestWorker *worker);
    void untagResourceCallback(OAIHttpRequestWorker *worker);
    void updateAssessmentCallback(OAIHttpRequestWorker *worker);
    void updateAssessmentControlCallback(OAIHttpRequestWorker *worker);
    void updateAssessmentControlSetStatusCallback(OAIHttpRequestWorker *worker);
    void updateAssessmentFrameworkCallback(OAIHttpRequestWorker *worker);
    void updateAssessmentFrameworkShareCallback(OAIHttpRequestWorker *worker);
    void updateAssessmentStatusCallback(OAIHttpRequestWorker *worker);
    void updateControlCallback(OAIHttpRequestWorker *worker);
    void updateSettingsCallback(OAIHttpRequestWorker *worker);
    void validateAssessmentReportIntegrityCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void associateAssessmentReportEvidenceFolderSignal(OAIObject summary);
    void batchAssociateAssessmentReportEvidenceSignal(OAIBatchAssociateAssessmentReportEvidenceResponse summary);
    void batchCreateDelegationByAssessmentSignal(OAIBatchCreateDelegationByAssessmentResponse summary);
    void batchDeleteDelegationByAssessmentSignal(OAIBatchDeleteDelegationByAssessmentResponse summary);
    void batchDisassociateAssessmentReportEvidenceSignal(OAIBatchDisassociateAssessmentReportEvidenceResponse summary);
    void batchImportEvidenceToAssessmentControlSignal(OAIBatchImportEvidenceToAssessmentControlResponse summary);
    void createAssessmentSignal(OAICreateAssessmentResponse summary);
    void createAssessmentFrameworkSignal(OAICreateAssessmentFrameworkResponse summary);
    void createAssessmentReportSignal(OAICreateAssessmentReportResponse summary);
    void createControlSignal(OAICreateControlResponse summary);
    void deleteAssessmentSignal(OAIObject summary);
    void deleteAssessmentFrameworkSignal(OAIObject summary);
    void deleteAssessmentFrameworkShareSignal(OAIObject summary);
    void deleteAssessmentReportSignal(OAIObject summary);
    void deleteControlSignal(OAIObject summary);
    void deregisterAccountSignal(OAIDeregisterAccountResponse summary);
    void deregisterOrganizationAdminAccountSignal(OAIObject summary);
    void disassociateAssessmentReportEvidenceFolderSignal(OAIObject summary);
    void getAccountStatusSignal(OAIGetAccountStatusResponse summary);
    void getAssessmentSignal(OAIGetAssessmentResponse summary);
    void getAssessmentFrameworkSignal(OAIGetAssessmentFrameworkResponse summary);
    void getAssessmentReportUrlSignal(OAIGetAssessmentReportUrlResponse summary);
    void getChangeLogsSignal(OAIGetChangeLogsResponse summary);
    void getControlSignal(OAIGetControlResponse summary);
    void getDelegationsSignal(OAIGetDelegationsResponse summary);
    void getEvidenceSignal(OAIGetEvidenceResponse summary);
    void getEvidenceByEvidenceFolderSignal(OAIGetEvidenceByEvidenceFolderResponse summary);
    void getEvidenceFileUploadUrlSignal(OAIGetEvidenceFileUploadUrlResponse summary);
    void getEvidenceFolderSignal(OAIGetEvidenceFolderResponse summary);
    void getEvidenceFoldersByAssessmentSignal(OAIGetEvidenceFoldersByAssessmentResponse summary);
    void getEvidenceFoldersByAssessmentControlSignal(OAIGetEvidenceFoldersByAssessmentControlResponse summary);
    void getInsightsSignal(OAIGetInsightsResponse summary);
    void getInsightsByAssessmentSignal(OAIGetInsightsByAssessmentResponse summary);
    void getOrganizationAdminAccountSignal(OAIGetOrganizationAdminAccountResponse summary);
    void getServicesInScopeSignal(OAIGetServicesInScopeResponse summary);
    void getSettingsSignal(OAIGetSettingsResponse summary);
    void listAssessmentControlInsightsByControlDomainSignal(OAIListAssessmentControlInsightsByControlDomainResponse summary);
    void listAssessmentFrameworkShareRequestsSignal(OAIListAssessmentFrameworkShareRequestsResponse summary);
    void listAssessmentFrameworksSignal(OAIListAssessmentFrameworksResponse summary);
    void listAssessmentReportsSignal(OAIListAssessmentReportsResponse summary);
    void listAssessmentsSignal(OAIListAssessmentsResponse summary);
    void listControlDomainInsightsSignal(OAIListControlDomainInsightsResponse summary);
    void listControlDomainInsightsByAssessmentSignal(OAIListControlDomainInsightsByAssessmentResponse summary);
    void listControlInsightsByControlDomainSignal(OAIListControlInsightsByControlDomainResponse summary);
    void listControlsSignal(OAIListControlsResponse summary);
    void listKeywordsForDataSourceSignal(OAIListKeywordsForDataSourceResponse summary);
    void listNotificationsSignal(OAIListNotificationsResponse summary);
    void listTagsForResourceSignal(OAIListTagsForResourceResponse summary);
    void registerAccountSignal(OAIRegisterAccountResponse summary);
    void registerOrganizationAdminAccountSignal(OAIRegisterOrganizationAdminAccountResponse summary);
    void startAssessmentFrameworkShareSignal(OAIStartAssessmentFrameworkShareResponse summary);
    void tagResourceSignal(OAIObject summary);
    void untagResourceSignal(OAIObject summary);
    void updateAssessmentSignal(OAIUpdateAssessmentResponse summary);
    void updateAssessmentControlSignal(OAIUpdateAssessmentControlResponse summary);
    void updateAssessmentControlSetStatusSignal(OAIUpdateAssessmentControlSetStatusResponse summary);
    void updateAssessmentFrameworkSignal(OAIUpdateAssessmentFrameworkResponse summary);
    void updateAssessmentFrameworkShareSignal(OAIUpdateAssessmentFrameworkShareResponse summary);
    void updateAssessmentStatusSignal(OAIUpdateAssessmentStatusResponse summary);
    void updateControlSignal(OAIUpdateControlResponse summary);
    void updateSettingsSignal(OAIUpdateSettingsResponse summary);
    void validateAssessmentReportIntegritySignal(OAIValidateAssessmentReportIntegrityResponse summary);


    void associateAssessmentReportEvidenceFolderSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void batchAssociateAssessmentReportEvidenceSignalFull(OAIHttpRequestWorker *worker, OAIBatchAssociateAssessmentReportEvidenceResponse summary);
    void batchCreateDelegationByAssessmentSignalFull(OAIHttpRequestWorker *worker, OAIBatchCreateDelegationByAssessmentResponse summary);
    void batchDeleteDelegationByAssessmentSignalFull(OAIHttpRequestWorker *worker, OAIBatchDeleteDelegationByAssessmentResponse summary);
    void batchDisassociateAssessmentReportEvidenceSignalFull(OAIHttpRequestWorker *worker, OAIBatchDisassociateAssessmentReportEvidenceResponse summary);
    void batchImportEvidenceToAssessmentControlSignalFull(OAIHttpRequestWorker *worker, OAIBatchImportEvidenceToAssessmentControlResponse summary);
    void createAssessmentSignalFull(OAIHttpRequestWorker *worker, OAICreateAssessmentResponse summary);
    void createAssessmentFrameworkSignalFull(OAIHttpRequestWorker *worker, OAICreateAssessmentFrameworkResponse summary);
    void createAssessmentReportSignalFull(OAIHttpRequestWorker *worker, OAICreateAssessmentReportResponse summary);
    void createControlSignalFull(OAIHttpRequestWorker *worker, OAICreateControlResponse summary);
    void deleteAssessmentSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void deleteAssessmentFrameworkSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void deleteAssessmentFrameworkShareSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void deleteAssessmentReportSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void deleteControlSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void deregisterAccountSignalFull(OAIHttpRequestWorker *worker, OAIDeregisterAccountResponse summary);
    void deregisterOrganizationAdminAccountSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void disassociateAssessmentReportEvidenceFolderSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getAccountStatusSignalFull(OAIHttpRequestWorker *worker, OAIGetAccountStatusResponse summary);
    void getAssessmentSignalFull(OAIHttpRequestWorker *worker, OAIGetAssessmentResponse summary);
    void getAssessmentFrameworkSignalFull(OAIHttpRequestWorker *worker, OAIGetAssessmentFrameworkResponse summary);
    void getAssessmentReportUrlSignalFull(OAIHttpRequestWorker *worker, OAIGetAssessmentReportUrlResponse summary);
    void getChangeLogsSignalFull(OAIHttpRequestWorker *worker, OAIGetChangeLogsResponse summary);
    void getControlSignalFull(OAIHttpRequestWorker *worker, OAIGetControlResponse summary);
    void getDelegationsSignalFull(OAIHttpRequestWorker *worker, OAIGetDelegationsResponse summary);
    void getEvidenceSignalFull(OAIHttpRequestWorker *worker, OAIGetEvidenceResponse summary);
    void getEvidenceByEvidenceFolderSignalFull(OAIHttpRequestWorker *worker, OAIGetEvidenceByEvidenceFolderResponse summary);
    void getEvidenceFileUploadUrlSignalFull(OAIHttpRequestWorker *worker, OAIGetEvidenceFileUploadUrlResponse summary);
    void getEvidenceFolderSignalFull(OAIHttpRequestWorker *worker, OAIGetEvidenceFolderResponse summary);
    void getEvidenceFoldersByAssessmentSignalFull(OAIHttpRequestWorker *worker, OAIGetEvidenceFoldersByAssessmentResponse summary);
    void getEvidenceFoldersByAssessmentControlSignalFull(OAIHttpRequestWorker *worker, OAIGetEvidenceFoldersByAssessmentControlResponse summary);
    void getInsightsSignalFull(OAIHttpRequestWorker *worker, OAIGetInsightsResponse summary);
    void getInsightsByAssessmentSignalFull(OAIHttpRequestWorker *worker, OAIGetInsightsByAssessmentResponse summary);
    void getOrganizationAdminAccountSignalFull(OAIHttpRequestWorker *worker, OAIGetOrganizationAdminAccountResponse summary);
    void getServicesInScopeSignalFull(OAIHttpRequestWorker *worker, OAIGetServicesInScopeResponse summary);
    void getSettingsSignalFull(OAIHttpRequestWorker *worker, OAIGetSettingsResponse summary);
    void listAssessmentControlInsightsByControlDomainSignalFull(OAIHttpRequestWorker *worker, OAIListAssessmentControlInsightsByControlDomainResponse summary);
    void listAssessmentFrameworkShareRequestsSignalFull(OAIHttpRequestWorker *worker, OAIListAssessmentFrameworkShareRequestsResponse summary);
    void listAssessmentFrameworksSignalFull(OAIHttpRequestWorker *worker, OAIListAssessmentFrameworksResponse summary);
    void listAssessmentReportsSignalFull(OAIHttpRequestWorker *worker, OAIListAssessmentReportsResponse summary);
    void listAssessmentsSignalFull(OAIHttpRequestWorker *worker, OAIListAssessmentsResponse summary);
    void listControlDomainInsightsSignalFull(OAIHttpRequestWorker *worker, OAIListControlDomainInsightsResponse summary);
    void listControlDomainInsightsByAssessmentSignalFull(OAIHttpRequestWorker *worker, OAIListControlDomainInsightsByAssessmentResponse summary);
    void listControlInsightsByControlDomainSignalFull(OAIHttpRequestWorker *worker, OAIListControlInsightsByControlDomainResponse summary);
    void listControlsSignalFull(OAIHttpRequestWorker *worker, OAIListControlsResponse summary);
    void listKeywordsForDataSourceSignalFull(OAIHttpRequestWorker *worker, OAIListKeywordsForDataSourceResponse summary);
    void listNotificationsSignalFull(OAIHttpRequestWorker *worker, OAIListNotificationsResponse summary);
    void listTagsForResourceSignalFull(OAIHttpRequestWorker *worker, OAIListTagsForResourceResponse summary);
    void registerAccountSignalFull(OAIHttpRequestWorker *worker, OAIRegisterAccountResponse summary);
    void registerOrganizationAdminAccountSignalFull(OAIHttpRequestWorker *worker, OAIRegisterOrganizationAdminAccountResponse summary);
    void startAssessmentFrameworkShareSignalFull(OAIHttpRequestWorker *worker, OAIStartAssessmentFrameworkShareResponse summary);
    void tagResourceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void untagResourceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateAssessmentSignalFull(OAIHttpRequestWorker *worker, OAIUpdateAssessmentResponse summary);
    void updateAssessmentControlSignalFull(OAIHttpRequestWorker *worker, OAIUpdateAssessmentControlResponse summary);
    void updateAssessmentControlSetStatusSignalFull(OAIHttpRequestWorker *worker, OAIUpdateAssessmentControlSetStatusResponse summary);
    void updateAssessmentFrameworkSignalFull(OAIHttpRequestWorker *worker, OAIUpdateAssessmentFrameworkResponse summary);
    void updateAssessmentFrameworkShareSignalFull(OAIHttpRequestWorker *worker, OAIUpdateAssessmentFrameworkShareResponse summary);
    void updateAssessmentStatusSignalFull(OAIHttpRequestWorker *worker, OAIUpdateAssessmentStatusResponse summary);
    void updateControlSignalFull(OAIHttpRequestWorker *worker, OAIUpdateControlResponse summary);
    void updateSettingsSignalFull(OAIHttpRequestWorker *worker, OAIUpdateSettingsResponse summary);
    void validateAssessmentReportIntegritySignalFull(OAIHttpRequestWorker *worker, OAIValidateAssessmentReportIntegrityResponse summary);

    Q_DECL_DEPRECATED_X("Use associateAssessmentReportEvidenceFolderSignalError() instead")
    void associateAssessmentReportEvidenceFolderSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void associateAssessmentReportEvidenceFolderSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use batchAssociateAssessmentReportEvidenceSignalError() instead")
    void batchAssociateAssessmentReportEvidenceSignalE(OAIBatchAssociateAssessmentReportEvidenceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void batchAssociateAssessmentReportEvidenceSignalError(OAIBatchAssociateAssessmentReportEvidenceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use batchCreateDelegationByAssessmentSignalError() instead")
    void batchCreateDelegationByAssessmentSignalE(OAIBatchCreateDelegationByAssessmentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void batchCreateDelegationByAssessmentSignalError(OAIBatchCreateDelegationByAssessmentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use batchDeleteDelegationByAssessmentSignalError() instead")
    void batchDeleteDelegationByAssessmentSignalE(OAIBatchDeleteDelegationByAssessmentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void batchDeleteDelegationByAssessmentSignalError(OAIBatchDeleteDelegationByAssessmentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use batchDisassociateAssessmentReportEvidenceSignalError() instead")
    void batchDisassociateAssessmentReportEvidenceSignalE(OAIBatchDisassociateAssessmentReportEvidenceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void batchDisassociateAssessmentReportEvidenceSignalError(OAIBatchDisassociateAssessmentReportEvidenceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use batchImportEvidenceToAssessmentControlSignalError() instead")
    void batchImportEvidenceToAssessmentControlSignalE(OAIBatchImportEvidenceToAssessmentControlResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void batchImportEvidenceToAssessmentControlSignalError(OAIBatchImportEvidenceToAssessmentControlResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAssessmentSignalError() instead")
    void createAssessmentSignalE(OAICreateAssessmentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAssessmentSignalError(OAICreateAssessmentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAssessmentFrameworkSignalError() instead")
    void createAssessmentFrameworkSignalE(OAICreateAssessmentFrameworkResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAssessmentFrameworkSignalError(OAICreateAssessmentFrameworkResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAssessmentReportSignalError() instead")
    void createAssessmentReportSignalE(OAICreateAssessmentReportResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAssessmentReportSignalError(OAICreateAssessmentReportResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createControlSignalError() instead")
    void createControlSignalE(OAICreateControlResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createControlSignalError(OAICreateControlResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAssessmentSignalError() instead")
    void deleteAssessmentSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAssessmentSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAssessmentFrameworkSignalError() instead")
    void deleteAssessmentFrameworkSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAssessmentFrameworkSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAssessmentFrameworkShareSignalError() instead")
    void deleteAssessmentFrameworkShareSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAssessmentFrameworkShareSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAssessmentReportSignalError() instead")
    void deleteAssessmentReportSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAssessmentReportSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteControlSignalError() instead")
    void deleteControlSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteControlSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deregisterAccountSignalError() instead")
    void deregisterAccountSignalE(OAIDeregisterAccountResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deregisterAccountSignalError(OAIDeregisterAccountResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deregisterOrganizationAdminAccountSignalError() instead")
    void deregisterOrganizationAdminAccountSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deregisterOrganizationAdminAccountSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disassociateAssessmentReportEvidenceFolderSignalError() instead")
    void disassociateAssessmentReportEvidenceFolderSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void disassociateAssessmentReportEvidenceFolderSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccountStatusSignalError() instead")
    void getAccountStatusSignalE(OAIGetAccountStatusResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccountStatusSignalError(OAIGetAccountStatusResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAssessmentSignalError() instead")
    void getAssessmentSignalE(OAIGetAssessmentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAssessmentSignalError(OAIGetAssessmentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAssessmentFrameworkSignalError() instead")
    void getAssessmentFrameworkSignalE(OAIGetAssessmentFrameworkResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAssessmentFrameworkSignalError(OAIGetAssessmentFrameworkResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAssessmentReportUrlSignalError() instead")
    void getAssessmentReportUrlSignalE(OAIGetAssessmentReportUrlResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAssessmentReportUrlSignalError(OAIGetAssessmentReportUrlResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChangeLogsSignalError() instead")
    void getChangeLogsSignalE(OAIGetChangeLogsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getChangeLogsSignalError(OAIGetChangeLogsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getControlSignalError() instead")
    void getControlSignalE(OAIGetControlResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getControlSignalError(OAIGetControlResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDelegationsSignalError() instead")
    void getDelegationsSignalE(OAIGetDelegationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDelegationsSignalError(OAIGetDelegationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEvidenceSignalError() instead")
    void getEvidenceSignalE(OAIGetEvidenceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEvidenceSignalError(OAIGetEvidenceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEvidenceByEvidenceFolderSignalError() instead")
    void getEvidenceByEvidenceFolderSignalE(OAIGetEvidenceByEvidenceFolderResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEvidenceByEvidenceFolderSignalError(OAIGetEvidenceByEvidenceFolderResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEvidenceFileUploadUrlSignalError() instead")
    void getEvidenceFileUploadUrlSignalE(OAIGetEvidenceFileUploadUrlResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEvidenceFileUploadUrlSignalError(OAIGetEvidenceFileUploadUrlResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEvidenceFolderSignalError() instead")
    void getEvidenceFolderSignalE(OAIGetEvidenceFolderResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEvidenceFolderSignalError(OAIGetEvidenceFolderResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEvidenceFoldersByAssessmentSignalError() instead")
    void getEvidenceFoldersByAssessmentSignalE(OAIGetEvidenceFoldersByAssessmentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEvidenceFoldersByAssessmentSignalError(OAIGetEvidenceFoldersByAssessmentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEvidenceFoldersByAssessmentControlSignalError() instead")
    void getEvidenceFoldersByAssessmentControlSignalE(OAIGetEvidenceFoldersByAssessmentControlResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEvidenceFoldersByAssessmentControlSignalError(OAIGetEvidenceFoldersByAssessmentControlResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInsightsSignalError() instead")
    void getInsightsSignalE(OAIGetInsightsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getInsightsSignalError(OAIGetInsightsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInsightsByAssessmentSignalError() instead")
    void getInsightsByAssessmentSignalE(OAIGetInsightsByAssessmentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getInsightsByAssessmentSignalError(OAIGetInsightsByAssessmentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAdminAccountSignalError() instead")
    void getOrganizationAdminAccountSignalE(OAIGetOrganizationAdminAccountResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAdminAccountSignalError(OAIGetOrganizationAdminAccountResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getServicesInScopeSignalError() instead")
    void getServicesInScopeSignalE(OAIGetServicesInScopeResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getServicesInScopeSignalError(OAIGetServicesInScopeResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSettingsSignalError() instead")
    void getSettingsSignalE(OAIGetSettingsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSettingsSignalError(OAIGetSettingsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAssessmentControlInsightsByControlDomainSignalError() instead")
    void listAssessmentControlInsightsByControlDomainSignalE(OAIListAssessmentControlInsightsByControlDomainResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAssessmentControlInsightsByControlDomainSignalError(OAIListAssessmentControlInsightsByControlDomainResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAssessmentFrameworkShareRequestsSignalError() instead")
    void listAssessmentFrameworkShareRequestsSignalE(OAIListAssessmentFrameworkShareRequestsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAssessmentFrameworkShareRequestsSignalError(OAIListAssessmentFrameworkShareRequestsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAssessmentFrameworksSignalError() instead")
    void listAssessmentFrameworksSignalE(OAIListAssessmentFrameworksResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAssessmentFrameworksSignalError(OAIListAssessmentFrameworksResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAssessmentReportsSignalError() instead")
    void listAssessmentReportsSignalE(OAIListAssessmentReportsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAssessmentReportsSignalError(OAIListAssessmentReportsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAssessmentsSignalError() instead")
    void listAssessmentsSignalE(OAIListAssessmentsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAssessmentsSignalError(OAIListAssessmentsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listControlDomainInsightsSignalError() instead")
    void listControlDomainInsightsSignalE(OAIListControlDomainInsightsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listControlDomainInsightsSignalError(OAIListControlDomainInsightsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listControlDomainInsightsByAssessmentSignalError() instead")
    void listControlDomainInsightsByAssessmentSignalE(OAIListControlDomainInsightsByAssessmentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listControlDomainInsightsByAssessmentSignalError(OAIListControlDomainInsightsByAssessmentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listControlInsightsByControlDomainSignalError() instead")
    void listControlInsightsByControlDomainSignalE(OAIListControlInsightsByControlDomainResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listControlInsightsByControlDomainSignalError(OAIListControlInsightsByControlDomainResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listControlsSignalError() instead")
    void listControlsSignalE(OAIListControlsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listControlsSignalError(OAIListControlsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listKeywordsForDataSourceSignalError() instead")
    void listKeywordsForDataSourceSignalE(OAIListKeywordsForDataSourceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listKeywordsForDataSourceSignalError(OAIListKeywordsForDataSourceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listNotificationsSignalError() instead")
    void listNotificationsSignalE(OAIListNotificationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listNotificationsSignalError(OAIListNotificationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTagsForResourceSignalError() instead")
    void listTagsForResourceSignalE(OAIListTagsForResourceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listTagsForResourceSignalError(OAIListTagsForResourceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registerAccountSignalError() instead")
    void registerAccountSignalE(OAIRegisterAccountResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void registerAccountSignalError(OAIRegisterAccountResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registerOrganizationAdminAccountSignalError() instead")
    void registerOrganizationAdminAccountSignalE(OAIRegisterOrganizationAdminAccountResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void registerOrganizationAdminAccountSignalError(OAIRegisterOrganizationAdminAccountResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startAssessmentFrameworkShareSignalError() instead")
    void startAssessmentFrameworkShareSignalE(OAIStartAssessmentFrameworkShareResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void startAssessmentFrameworkShareSignalError(OAIStartAssessmentFrameworkShareResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagResourceSignalError() instead")
    void tagResourceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tagResourceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use untagResourceSignalError() instead")
    void untagResourceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void untagResourceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAssessmentSignalError() instead")
    void updateAssessmentSignalE(OAIUpdateAssessmentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAssessmentSignalError(OAIUpdateAssessmentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAssessmentControlSignalError() instead")
    void updateAssessmentControlSignalE(OAIUpdateAssessmentControlResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAssessmentControlSignalError(OAIUpdateAssessmentControlResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAssessmentControlSetStatusSignalError() instead")
    void updateAssessmentControlSetStatusSignalE(OAIUpdateAssessmentControlSetStatusResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAssessmentControlSetStatusSignalError(OAIUpdateAssessmentControlSetStatusResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAssessmentFrameworkSignalError() instead")
    void updateAssessmentFrameworkSignalE(OAIUpdateAssessmentFrameworkResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAssessmentFrameworkSignalError(OAIUpdateAssessmentFrameworkResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAssessmentFrameworkShareSignalError() instead")
    void updateAssessmentFrameworkShareSignalE(OAIUpdateAssessmentFrameworkShareResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAssessmentFrameworkShareSignalError(OAIUpdateAssessmentFrameworkShareResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAssessmentStatusSignalError() instead")
    void updateAssessmentStatusSignalE(OAIUpdateAssessmentStatusResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAssessmentStatusSignalError(OAIUpdateAssessmentStatusResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateControlSignalError() instead")
    void updateControlSignalE(OAIUpdateControlResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateControlSignalError(OAIUpdateControlResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSettingsSignalError() instead")
    void updateSettingsSignalE(OAIUpdateSettingsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSettingsSignalError(OAIUpdateSettingsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use validateAssessmentReportIntegritySignalError() instead")
    void validateAssessmentReportIntegritySignalE(OAIValidateAssessmentReportIntegrityResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void validateAssessmentReportIntegritySignalError(OAIValidateAssessmentReportIntegrityResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use associateAssessmentReportEvidenceFolderSignalErrorFull() instead")
    void associateAssessmentReportEvidenceFolderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void associateAssessmentReportEvidenceFolderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use batchAssociateAssessmentReportEvidenceSignalErrorFull() instead")
    void batchAssociateAssessmentReportEvidenceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void batchAssociateAssessmentReportEvidenceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use batchCreateDelegationByAssessmentSignalErrorFull() instead")
    void batchCreateDelegationByAssessmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void batchCreateDelegationByAssessmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use batchDeleteDelegationByAssessmentSignalErrorFull() instead")
    void batchDeleteDelegationByAssessmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void batchDeleteDelegationByAssessmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use batchDisassociateAssessmentReportEvidenceSignalErrorFull() instead")
    void batchDisassociateAssessmentReportEvidenceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void batchDisassociateAssessmentReportEvidenceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use batchImportEvidenceToAssessmentControlSignalErrorFull() instead")
    void batchImportEvidenceToAssessmentControlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void batchImportEvidenceToAssessmentControlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAssessmentSignalErrorFull() instead")
    void createAssessmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAssessmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAssessmentFrameworkSignalErrorFull() instead")
    void createAssessmentFrameworkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAssessmentFrameworkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAssessmentReportSignalErrorFull() instead")
    void createAssessmentReportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAssessmentReportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createControlSignalErrorFull() instead")
    void createControlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createControlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAssessmentSignalErrorFull() instead")
    void deleteAssessmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAssessmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAssessmentFrameworkSignalErrorFull() instead")
    void deleteAssessmentFrameworkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAssessmentFrameworkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAssessmentFrameworkShareSignalErrorFull() instead")
    void deleteAssessmentFrameworkShareSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAssessmentFrameworkShareSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAssessmentReportSignalErrorFull() instead")
    void deleteAssessmentReportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAssessmentReportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteControlSignalErrorFull() instead")
    void deleteControlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteControlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deregisterAccountSignalErrorFull() instead")
    void deregisterAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deregisterAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deregisterOrganizationAdminAccountSignalErrorFull() instead")
    void deregisterOrganizationAdminAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deregisterOrganizationAdminAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disassociateAssessmentReportEvidenceFolderSignalErrorFull() instead")
    void disassociateAssessmentReportEvidenceFolderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disassociateAssessmentReportEvidenceFolderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccountStatusSignalErrorFull() instead")
    void getAccountStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccountStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAssessmentSignalErrorFull() instead")
    void getAssessmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAssessmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAssessmentFrameworkSignalErrorFull() instead")
    void getAssessmentFrameworkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAssessmentFrameworkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAssessmentReportUrlSignalErrorFull() instead")
    void getAssessmentReportUrlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAssessmentReportUrlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChangeLogsSignalErrorFull() instead")
    void getChangeLogsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getChangeLogsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getControlSignalErrorFull() instead")
    void getControlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getControlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDelegationsSignalErrorFull() instead")
    void getDelegationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDelegationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEvidenceSignalErrorFull() instead")
    void getEvidenceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEvidenceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEvidenceByEvidenceFolderSignalErrorFull() instead")
    void getEvidenceByEvidenceFolderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEvidenceByEvidenceFolderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEvidenceFileUploadUrlSignalErrorFull() instead")
    void getEvidenceFileUploadUrlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEvidenceFileUploadUrlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEvidenceFolderSignalErrorFull() instead")
    void getEvidenceFolderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEvidenceFolderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEvidenceFoldersByAssessmentSignalErrorFull() instead")
    void getEvidenceFoldersByAssessmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEvidenceFoldersByAssessmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEvidenceFoldersByAssessmentControlSignalErrorFull() instead")
    void getEvidenceFoldersByAssessmentControlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEvidenceFoldersByAssessmentControlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInsightsSignalErrorFull() instead")
    void getInsightsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getInsightsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInsightsByAssessmentSignalErrorFull() instead")
    void getInsightsByAssessmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getInsightsByAssessmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationAdminAccountSignalErrorFull() instead")
    void getOrganizationAdminAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationAdminAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getServicesInScopeSignalErrorFull() instead")
    void getServicesInScopeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getServicesInScopeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSettingsSignalErrorFull() instead")
    void getSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAssessmentControlInsightsByControlDomainSignalErrorFull() instead")
    void listAssessmentControlInsightsByControlDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAssessmentControlInsightsByControlDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAssessmentFrameworkShareRequestsSignalErrorFull() instead")
    void listAssessmentFrameworkShareRequestsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAssessmentFrameworkShareRequestsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAssessmentFrameworksSignalErrorFull() instead")
    void listAssessmentFrameworksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAssessmentFrameworksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAssessmentReportsSignalErrorFull() instead")
    void listAssessmentReportsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAssessmentReportsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAssessmentsSignalErrorFull() instead")
    void listAssessmentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAssessmentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listControlDomainInsightsSignalErrorFull() instead")
    void listControlDomainInsightsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listControlDomainInsightsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listControlDomainInsightsByAssessmentSignalErrorFull() instead")
    void listControlDomainInsightsByAssessmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listControlDomainInsightsByAssessmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listControlInsightsByControlDomainSignalErrorFull() instead")
    void listControlInsightsByControlDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listControlInsightsByControlDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listControlsSignalErrorFull() instead")
    void listControlsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listControlsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listKeywordsForDataSourceSignalErrorFull() instead")
    void listKeywordsForDataSourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listKeywordsForDataSourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listNotificationsSignalErrorFull() instead")
    void listNotificationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listNotificationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTagsForResourceSignalErrorFull() instead")
    void listTagsForResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTagsForResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registerAccountSignalErrorFull() instead")
    void registerAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registerAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registerOrganizationAdminAccountSignalErrorFull() instead")
    void registerOrganizationAdminAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registerOrganizationAdminAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startAssessmentFrameworkShareSignalErrorFull() instead")
    void startAssessmentFrameworkShareSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void startAssessmentFrameworkShareSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagResourceSignalErrorFull() instead")
    void tagResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tagResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use untagResourceSignalErrorFull() instead")
    void untagResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void untagResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAssessmentSignalErrorFull() instead")
    void updateAssessmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAssessmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAssessmentControlSignalErrorFull() instead")
    void updateAssessmentControlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAssessmentControlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAssessmentControlSetStatusSignalErrorFull() instead")
    void updateAssessmentControlSetStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAssessmentControlSetStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAssessmentFrameworkSignalErrorFull() instead")
    void updateAssessmentFrameworkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAssessmentFrameworkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAssessmentFrameworkShareSignalErrorFull() instead")
    void updateAssessmentFrameworkShareSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAssessmentFrameworkShareSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAssessmentStatusSignalErrorFull() instead")
    void updateAssessmentStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAssessmentStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateControlSignalErrorFull() instead")
    void updateControlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateControlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSettingsSignalErrorFull() instead")
    void updateSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use validateAssessmentReportIntegritySignalErrorFull() instead")
    void validateAssessmentReportIntegritySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void validateAssessmentReportIntegritySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
