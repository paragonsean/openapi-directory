/**
 * AWS Audit Manager
 * <p>Welcome to the Audit Manager API reference. This guide is for developers who need detailed information about the Audit Manager API operations, data types, and errors. </p> <p>Audit Manager is a service that provides automated evidence collection so that you can continually audit your Amazon Web Services usage. You can use it to assess the effectiveness of your controls, manage risk, and simplify compliance.</p> <p>Audit Manager provides prebuilt frameworks that structure and automate assessments for a given compliance standard. Frameworks include a prebuilt collection of controls with descriptions and testing procedures. These controls are grouped according to the requirements of the specified compliance standard or regulation. You can also customize frameworks and controls to support internal audits with specific requirements. </p> <p>Use the following links to get started with the Audit Manager API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Audit Manager API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Audit Manager data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Audit Manager, we recommend that you review the <a href=\"https://docs.aws.amazon.com/audit-manager/latest/userguide/what-is.html\"> Audit Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAssessmentFrameworkShareRequest.h
 *
 *  Represents a share request for a custom framework in Audit Manager. 
 */

#ifndef OAIAssessmentFrameworkShareRequest_H
#define OAIAssessmentFrameworkShareRequest_H

#include <QJsonObject>

#include "OAIShareRequestStatus.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAssessmentFrameworkShareRequest : public OAIObject {
public:
    OAIAssessmentFrameworkShareRequest();
    OAIAssessmentFrameworkShareRequest(QString json);
    ~OAIAssessmentFrameworkShareRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getFrameworkId() const;
    void setFrameworkId(const QString &framework_id);
    bool is_framework_id_Set() const;
    bool is_framework_id_Valid() const;

    QString getFrameworkName() const;
    void setFrameworkName(const QString &framework_name);
    bool is_framework_name_Set() const;
    bool is_framework_name_Valid() const;

    QString getFrameworkDescription() const;
    void setFrameworkDescription(const QString &framework_description);
    bool is_framework_description_Set() const;
    bool is_framework_description_Valid() const;

    OAIShareRequestStatus getStatus() const;
    void setStatus(const OAIShareRequestStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getSourceAccount() const;
    void setSourceAccount(const QString &source_account);
    bool is_source_account_Set() const;
    bool is_source_account_Valid() const;

    QString getDestinationAccount() const;
    void setDestinationAccount(const QString &destination_account);
    bool is_destination_account_Set() const;
    bool is_destination_account_Valid() const;

    QString getDestinationRegion() const;
    void setDestinationRegion(const QString &destination_region);
    bool is_destination_region_Set() const;
    bool is_destination_region_Valid() const;

    QDateTime getExpirationTime() const;
    void setExpirationTime(const QDateTime &expiration_time);
    bool is_expiration_time_Set() const;
    bool is_expiration_time_Valid() const;

    QDateTime getCreationTime() const;
    void setCreationTime(const QDateTime &creation_time);
    bool is_creation_time_Set() const;
    bool is_creation_time_Valid() const;

    QDateTime getLastUpdated() const;
    void setLastUpdated(const QDateTime &last_updated);
    bool is_last_updated_Set() const;
    bool is_last_updated_Valid() const;

    QString getComment() const;
    void setComment(const QString &comment);
    bool is_comment_Set() const;
    bool is_comment_Valid() const;

    qint32 getStandardControlsCount() const;
    void setStandardControlsCount(const qint32 &standard_controls_count);
    bool is_standard_controls_count_Set() const;
    bool is_standard_controls_count_Valid() const;

    qint32 getCustomControlsCount() const;
    void setCustomControlsCount(const qint32 &custom_controls_count);
    bool is_custom_controls_count_Set() const;
    bool is_custom_controls_count_Valid() const;

    QString getComplianceType() const;
    void setComplianceType(const QString &compliance_type);
    bool is_compliance_type_Set() const;
    bool is_compliance_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_framework_id;
    bool m_framework_id_isSet;
    bool m_framework_id_isValid;

    QString m_framework_name;
    bool m_framework_name_isSet;
    bool m_framework_name_isValid;

    QString m_framework_description;
    bool m_framework_description_isSet;
    bool m_framework_description_isValid;

    OAIShareRequestStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_source_account;
    bool m_source_account_isSet;
    bool m_source_account_isValid;

    QString m_destination_account;
    bool m_destination_account_isSet;
    bool m_destination_account_isValid;

    QString m_destination_region;
    bool m_destination_region_isSet;
    bool m_destination_region_isValid;

    QDateTime m_expiration_time;
    bool m_expiration_time_isSet;
    bool m_expiration_time_isValid;

    QDateTime m_creation_time;
    bool m_creation_time_isSet;
    bool m_creation_time_isValid;

    QDateTime m_last_updated;
    bool m_last_updated_isSet;
    bool m_last_updated_isValid;

    QString m_comment;
    bool m_comment_isSet;
    bool m_comment_isValid;

    qint32 m_standard_controls_count;
    bool m_standard_controls_count_isSet;
    bool m_standard_controls_count_isValid;

    qint32 m_custom_controls_count;
    bool m_custom_controls_count_isSet;
    bool m_custom_controls_count_isValid;

    QString m_compliance_type;
    bool m_compliance_type_isSet;
    bool m_compliance_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAssessmentFrameworkShareRequest)

#endif // OAIAssessmentFrameworkShareRequest_H
