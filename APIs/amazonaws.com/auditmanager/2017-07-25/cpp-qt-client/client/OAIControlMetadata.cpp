/**
 * AWS Audit Manager
 * <p>Welcome to the Audit Manager API reference. This guide is for developers who need detailed information about the Audit Manager API operations, data types, and errors. </p> <p>Audit Manager is a service that provides automated evidence collection so that you can continually audit your Amazon Web Services usage. You can use it to assess the effectiveness of your controls, manage risk, and simplify compliance.</p> <p>Audit Manager provides prebuilt frameworks that structure and automate assessments for a given compliance standard. Frameworks include a prebuilt collection of controls with descriptions and testing procedures. These controls are grouped according to the requirements of the specified compliance standard or regulation. You can also customize frameworks and controls to support internal audits with specific requirements. </p> <p>Use the following links to get started with the Audit Manager API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Audit Manager API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Audit Manager data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Audit Manager, we recommend that you review the <a href=\"https://docs.aws.amazon.com/audit-manager/latest/userguide/what-is.html\"> Audit Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIControlMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIControlMetadata::OAIControlMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIControlMetadata::OAIControlMetadata() {
    this->initializeModel();
}

OAIControlMetadata::~OAIControlMetadata() {}

void OAIControlMetadata::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_control_sources_isSet = false;
    m_control_sources_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_last_updated_at_isSet = false;
    m_last_updated_at_isValid = false;
}

void OAIControlMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIControlMetadata::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_control_sources_isValid = ::OpenAPI::fromJsonValue(m_control_sources, json[QString("controlSources")]);
    m_control_sources_isSet = !json[QString("controlSources")].isNull() && m_control_sources_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_last_updated_at_isValid = ::OpenAPI::fromJsonValue(m_last_updated_at, json[QString("lastUpdatedAt")]);
    m_last_updated_at_isSet = !json[QString("lastUpdatedAt")].isNull() && m_last_updated_at_isValid;
}

QString OAIControlMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIControlMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_control_sources_isSet) {
        obj.insert(QString("controlSources"), ::OpenAPI::toJsonValue(m_control_sources));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_last_updated_at_isSet) {
        obj.insert(QString("lastUpdatedAt"), ::OpenAPI::toJsonValue(m_last_updated_at));
    }
    return obj;
}

QString OAIControlMetadata::getArn() const {
    return m_arn;
}
void OAIControlMetadata::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIControlMetadata::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIControlMetadata::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIControlMetadata::getId() const {
    return m_id;
}
void OAIControlMetadata::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIControlMetadata::is_id_Set() const{
    return m_id_isSet;
}

bool OAIControlMetadata::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIControlMetadata::getName() const {
    return m_name;
}
void OAIControlMetadata::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIControlMetadata::is_name_Set() const{
    return m_name_isSet;
}

bool OAIControlMetadata::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIControlMetadata::getControlSources() const {
    return m_control_sources;
}
void OAIControlMetadata::setControlSources(const QString &control_sources) {
    m_control_sources = control_sources;
    m_control_sources_isSet = true;
}

bool OAIControlMetadata::is_control_sources_Set() const{
    return m_control_sources_isSet;
}

bool OAIControlMetadata::is_control_sources_Valid() const{
    return m_control_sources_isValid;
}

QDateTime OAIControlMetadata::getCreatedAt() const {
    return m_created_at;
}
void OAIControlMetadata::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIControlMetadata::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIControlMetadata::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAIControlMetadata::getLastUpdatedAt() const {
    return m_last_updated_at;
}
void OAIControlMetadata::setLastUpdatedAt(const QDateTime &last_updated_at) {
    m_last_updated_at = last_updated_at;
    m_last_updated_at_isSet = true;
}

bool OAIControlMetadata::is_last_updated_at_Set() const{
    return m_last_updated_at_isSet;
}

bool OAIControlMetadata::is_last_updated_at_Valid() const{
    return m_last_updated_at_isValid;
}

bool OAIControlMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_control_sources_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIControlMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
