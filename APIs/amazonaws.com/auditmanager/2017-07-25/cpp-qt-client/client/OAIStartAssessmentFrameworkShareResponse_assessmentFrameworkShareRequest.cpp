/**
 * AWS Audit Manager
 * <p>Welcome to the Audit Manager API reference. This guide is for developers who need detailed information about the Audit Manager API operations, data types, and errors. </p> <p>Audit Manager is a service that provides automated evidence collection so that you can continually audit your Amazon Web Services usage. You can use it to assess the effectiveness of your controls, manage risk, and simplify compliance.</p> <p>Audit Manager provides prebuilt frameworks that structure and automate assessments for a given compliance standard. Frameworks include a prebuilt collection of controls with descriptions and testing procedures. These controls are grouped according to the requirements of the specified compliance standard or regulation. You can also customize frameworks and controls to support internal audits with specific requirements. </p> <p>Use the following links to get started with the Audit Manager API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Audit Manager API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Audit Manager data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Audit Manager, we recommend that you review the <a href=\"https://docs.aws.amazon.com/audit-manager/latest/userguide/what-is.html\"> Audit Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest() {
    this->initializeModel();
}

OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::~OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest() {}

void OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_framework_id_isSet = false;
    m_framework_id_isValid = false;

    m_framework_name_isSet = false;
    m_framework_name_isValid = false;

    m_framework_description_isSet = false;
    m_framework_description_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_source_account_isSet = false;
    m_source_account_isValid = false;

    m_destination_account_isSet = false;
    m_destination_account_isValid = false;

    m_destination_region_isSet = false;
    m_destination_region_isValid = false;

    m_expiration_time_isSet = false;
    m_expiration_time_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_standard_controls_count_isSet = false;
    m_standard_controls_count_isValid = false;

    m_custom_controls_count_isSet = false;
    m_custom_controls_count_isValid = false;

    m_compliance_type_isSet = false;
    m_compliance_type_isValid = false;
}

void OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_framework_id_isValid = ::OpenAPI::fromJsonValue(m_framework_id, json[QString("frameworkId")]);
    m_framework_id_isSet = !json[QString("frameworkId")].isNull() && m_framework_id_isValid;

    m_framework_name_isValid = ::OpenAPI::fromJsonValue(m_framework_name, json[QString("frameworkName")]);
    m_framework_name_isSet = !json[QString("frameworkName")].isNull() && m_framework_name_isValid;

    m_framework_description_isValid = ::OpenAPI::fromJsonValue(m_framework_description, json[QString("frameworkDescription")]);
    m_framework_description_isSet = !json[QString("frameworkDescription")].isNull() && m_framework_description_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_source_account_isValid = ::OpenAPI::fromJsonValue(m_source_account, json[QString("sourceAccount")]);
    m_source_account_isSet = !json[QString("sourceAccount")].isNull() && m_source_account_isValid;

    m_destination_account_isValid = ::OpenAPI::fromJsonValue(m_destination_account, json[QString("destinationAccount")]);
    m_destination_account_isSet = !json[QString("destinationAccount")].isNull() && m_destination_account_isValid;

    m_destination_region_isValid = ::OpenAPI::fromJsonValue(m_destination_region, json[QString("destinationRegion")]);
    m_destination_region_isSet = !json[QString("destinationRegion")].isNull() && m_destination_region_isValid;

    m_expiration_time_isValid = ::OpenAPI::fromJsonValue(m_expiration_time, json[QString("expirationTime")]);
    m_expiration_time_isSet = !json[QString("expirationTime")].isNull() && m_expiration_time_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("lastUpdated")]);
    m_last_updated_isSet = !json[QString("lastUpdated")].isNull() && m_last_updated_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_standard_controls_count_isValid = ::OpenAPI::fromJsonValue(m_standard_controls_count, json[QString("standardControlsCount")]);
    m_standard_controls_count_isSet = !json[QString("standardControlsCount")].isNull() && m_standard_controls_count_isValid;

    m_custom_controls_count_isValid = ::OpenAPI::fromJsonValue(m_custom_controls_count, json[QString("customControlsCount")]);
    m_custom_controls_count_isSet = !json[QString("customControlsCount")].isNull() && m_custom_controls_count_isValid;

    m_compliance_type_isValid = ::OpenAPI::fromJsonValue(m_compliance_type, json[QString("complianceType")]);
    m_compliance_type_isSet = !json[QString("complianceType")].isNull() && m_compliance_type_isValid;
}

QString OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_framework_id_isSet) {
        obj.insert(QString("frameworkId"), ::OpenAPI::toJsonValue(m_framework_id));
    }
    if (m_framework_name_isSet) {
        obj.insert(QString("frameworkName"), ::OpenAPI::toJsonValue(m_framework_name));
    }
    if (m_framework_description_isSet) {
        obj.insert(QString("frameworkDescription"), ::OpenAPI::toJsonValue(m_framework_description));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_source_account_isSet) {
        obj.insert(QString("sourceAccount"), ::OpenAPI::toJsonValue(m_source_account));
    }
    if (m_destination_account_isSet) {
        obj.insert(QString("destinationAccount"), ::OpenAPI::toJsonValue(m_destination_account));
    }
    if (m_destination_region_isSet) {
        obj.insert(QString("destinationRegion"), ::OpenAPI::toJsonValue(m_destination_region));
    }
    if (m_expiration_time_isSet) {
        obj.insert(QString("expirationTime"), ::OpenAPI::toJsonValue(m_expiration_time));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("lastUpdated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_standard_controls_count_isSet) {
        obj.insert(QString("standardControlsCount"), ::OpenAPI::toJsonValue(m_standard_controls_count));
    }
    if (m_custom_controls_count_isSet) {
        obj.insert(QString("customControlsCount"), ::OpenAPI::toJsonValue(m_custom_controls_count));
    }
    if (m_compliance_type_isSet) {
        obj.insert(QString("complianceType"), ::OpenAPI::toJsonValue(m_compliance_type));
    }
    return obj;
}

QString OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::getId() const {
    return m_id;
}
void OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::is_id_Set() const{
    return m_id_isSet;
}

bool OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::getFrameworkId() const {
    return m_framework_id;
}
void OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::setFrameworkId(const QString &framework_id) {
    m_framework_id = framework_id;
    m_framework_id_isSet = true;
}

bool OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::is_framework_id_Set() const{
    return m_framework_id_isSet;
}

bool OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::is_framework_id_Valid() const{
    return m_framework_id_isValid;
}

QString OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::getFrameworkName() const {
    return m_framework_name;
}
void OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::setFrameworkName(const QString &framework_name) {
    m_framework_name = framework_name;
    m_framework_name_isSet = true;
}

bool OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::is_framework_name_Set() const{
    return m_framework_name_isSet;
}

bool OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::is_framework_name_Valid() const{
    return m_framework_name_isValid;
}

QString OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::getFrameworkDescription() const {
    return m_framework_description;
}
void OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::setFrameworkDescription(const QString &framework_description) {
    m_framework_description = framework_description;
    m_framework_description_isSet = true;
}

bool OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::is_framework_description_Set() const{
    return m_framework_description_isSet;
}

bool OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::is_framework_description_Valid() const{
    return m_framework_description_isValid;
}

OAIShareRequestStatus OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::getStatus() const {
    return m_status;
}
void OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::setStatus(const OAIShareRequestStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::is_status_Set() const{
    return m_status_isSet;
}

bool OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::getSourceAccount() const {
    return m_source_account;
}
void OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::setSourceAccount(const QString &source_account) {
    m_source_account = source_account;
    m_source_account_isSet = true;
}

bool OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::is_source_account_Set() const{
    return m_source_account_isSet;
}

bool OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::is_source_account_Valid() const{
    return m_source_account_isValid;
}

QString OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::getDestinationAccount() const {
    return m_destination_account;
}
void OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::setDestinationAccount(const QString &destination_account) {
    m_destination_account = destination_account;
    m_destination_account_isSet = true;
}

bool OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::is_destination_account_Set() const{
    return m_destination_account_isSet;
}

bool OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::is_destination_account_Valid() const{
    return m_destination_account_isValid;
}

QString OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::getDestinationRegion() const {
    return m_destination_region;
}
void OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::setDestinationRegion(const QString &destination_region) {
    m_destination_region = destination_region;
    m_destination_region_isSet = true;
}

bool OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::is_destination_region_Set() const{
    return m_destination_region_isSet;
}

bool OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::is_destination_region_Valid() const{
    return m_destination_region_isValid;
}

QDateTime OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::getExpirationTime() const {
    return m_expiration_time;
}
void OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::setExpirationTime(const QDateTime &expiration_time) {
    m_expiration_time = expiration_time;
    m_expiration_time_isSet = true;
}

bool OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::is_expiration_time_Set() const{
    return m_expiration_time_isSet;
}

bool OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::is_expiration_time_Valid() const{
    return m_expiration_time_isValid;
}

QDateTime OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::getCreationTime() const {
    return m_creation_time;
}
void OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::getLastUpdated() const {
    return m_last_updated;
}
void OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QString OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::getComment() const {
    return m_comment;
}
void OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::is_comment_Valid() const{
    return m_comment_isValid;
}

qint32 OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::getStandardControlsCount() const {
    return m_standard_controls_count;
}
void OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::setStandardControlsCount(const qint32 &standard_controls_count) {
    m_standard_controls_count = standard_controls_count;
    m_standard_controls_count_isSet = true;
}

bool OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::is_standard_controls_count_Set() const{
    return m_standard_controls_count_isSet;
}

bool OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::is_standard_controls_count_Valid() const{
    return m_standard_controls_count_isValid;
}

qint32 OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::getCustomControlsCount() const {
    return m_custom_controls_count;
}
void OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::setCustomControlsCount(const qint32 &custom_controls_count) {
    m_custom_controls_count = custom_controls_count;
    m_custom_controls_count_isSet = true;
}

bool OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::is_custom_controls_count_Set() const{
    return m_custom_controls_count_isSet;
}

bool OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::is_custom_controls_count_Valid() const{
    return m_custom_controls_count_isValid;
}

QString OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::getComplianceType() const {
    return m_compliance_type;
}
void OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::setComplianceType(const QString &compliance_type) {
    m_compliance_type = compliance_type;
    m_compliance_type_isSet = true;
}

bool OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::is_compliance_type_Set() const{
    return m_compliance_type_isSet;
}

bool OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::is_compliance_type_Valid() const{
    return m_compliance_type_isValid;
}

bool OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_framework_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_framework_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_framework_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_standard_controls_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_controls_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compliance_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartAssessmentFrameworkShareResponse_assessmentFrameworkShareRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
