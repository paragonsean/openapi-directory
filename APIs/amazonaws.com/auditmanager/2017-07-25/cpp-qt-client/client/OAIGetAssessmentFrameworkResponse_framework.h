/**
 * AWS Audit Manager
 * <p>Welcome to the Audit Manager API reference. This guide is for developers who need detailed information about the Audit Manager API operations, data types, and errors. </p> <p>Audit Manager is a service that provides automated evidence collection so that you can continually audit your Amazon Web Services usage. You can use it to assess the effectiveness of your controls, manage risk, and simplify compliance.</p> <p>Audit Manager provides prebuilt frameworks that structure and automate assessments for a given compliance standard. Frameworks include a prebuilt collection of controls with descriptions and testing procedures. These controls are grouped according to the requirements of the specified compliance standard or regulation. You can also customize frameworks and controls to support internal audits with specific requirements. </p> <p>Use the following links to get started with the Audit Manager API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Audit Manager API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Audit Manager data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Audit Manager, we recommend that you review the <a href=\"https://docs.aws.amazon.com/audit-manager/latest/userguide/what-is.html\"> Audit Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetAssessmentFrameworkResponse_framework.h
 *
 * 
 */

#ifndef OAIGetAssessmentFrameworkResponse_framework_H
#define OAIGetAssessmentFrameworkResponse_framework_H

#include <QJsonObject>

#include "OAIFrameworkType.h"
#include <QDateTime>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGetAssessmentFrameworkResponse_framework : public OAIObject {
public:
    OAIGetAssessmentFrameworkResponse_framework();
    OAIGetAssessmentFrameworkResponse_framework(QString json);
    ~OAIGetAssessmentFrameworkResponse_framework() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getArn() const;
    void setArn(const QString &arn);
    bool is_arn_Set() const;
    bool is_arn_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAIFrameworkType getType() const;
    void setType(const OAIFrameworkType &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getComplianceType() const;
    void setComplianceType(const QString &compliance_type);
    bool is_compliance_type_Set() const;
    bool is_compliance_type_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getLogo() const;
    void setLogo(const QString &logo);
    bool is_logo_Set() const;
    bool is_logo_Valid() const;

    QString getControlSources() const;
    void setControlSources(const QString &control_sources);
    bool is_control_sources_Set() const;
    bool is_control_sources_Valid() const;

    QList getControlSets() const;
    void setControlSets(const QList &control_sets);
    bool is_control_sets_Set() const;
    bool is_control_sets_Valid() const;

    QDateTime getCreatedAt() const;
    void setCreatedAt(const QDateTime &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    QDateTime getLastUpdatedAt() const;
    void setLastUpdatedAt(const QDateTime &last_updated_at);
    bool is_last_updated_at_Set() const;
    bool is_last_updated_at_Valid() const;

    QString getCreatedBy() const;
    void setCreatedBy(const QString &created_by);
    bool is_created_by_Set() const;
    bool is_created_by_Valid() const;

    QString getLastUpdatedBy() const;
    void setLastUpdatedBy(const QString &last_updated_by);
    bool is_last_updated_by_Set() const;
    bool is_last_updated_by_Valid() const;

    QMap getTags() const;
    void setTags(const QMap &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_arn;
    bool m_arn_isSet;
    bool m_arn_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAIFrameworkType m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_compliance_type;
    bool m_compliance_type_isSet;
    bool m_compliance_type_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_logo;
    bool m_logo_isSet;
    bool m_logo_isValid;

    QString m_control_sources;
    bool m_control_sources_isSet;
    bool m_control_sources_isValid;

    QList m_control_sets;
    bool m_control_sets_isSet;
    bool m_control_sets_isValid;

    QDateTime m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    QDateTime m_last_updated_at;
    bool m_last_updated_at_isSet;
    bool m_last_updated_at_isValid;

    QString m_created_by;
    bool m_created_by_isSet;
    bool m_created_by_isValid;

    QString m_last_updated_by;
    bool m_last_updated_by_isSet;
    bool m_last_updated_by_isValid;

    QMap m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetAssessmentFrameworkResponse_framework)

#endif // OAIGetAssessmentFrameworkResponse_framework_H
