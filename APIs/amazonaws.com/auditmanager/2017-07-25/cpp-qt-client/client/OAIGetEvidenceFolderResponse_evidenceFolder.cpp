/**
 * AWS Audit Manager
 * <p>Welcome to the Audit Manager API reference. This guide is for developers who need detailed information about the Audit Manager API operations, data types, and errors. </p> <p>Audit Manager is a service that provides automated evidence collection so that you can continually audit your Amazon Web Services usage. You can use it to assess the effectiveness of your controls, manage risk, and simplify compliance.</p> <p>Audit Manager provides prebuilt frameworks that structure and automate assessments for a given compliance standard. Frameworks include a prebuilt collection of controls with descriptions and testing procedures. These controls are grouped according to the requirements of the specified compliance standard or regulation. You can also customize frameworks and controls to support internal audits with specific requirements. </p> <p>Use the following links to get started with the Audit Manager API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Audit Manager API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Audit Manager data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Audit Manager, we recommend that you review the <a href=\"https://docs.aws.amazon.com/audit-manager/latest/userguide/what-is.html\"> Audit Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetEvidenceFolderResponse_evidenceFolder.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetEvidenceFolderResponse_evidenceFolder::OAIGetEvidenceFolderResponse_evidenceFolder(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetEvidenceFolderResponse_evidenceFolder::OAIGetEvidenceFolderResponse_evidenceFolder() {
    this->initializeModel();
}

OAIGetEvidenceFolderResponse_evidenceFolder::~OAIGetEvidenceFolderResponse_evidenceFolder() {}

void OAIGetEvidenceFolderResponse_evidenceFolder::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_assessment_id_isSet = false;
    m_assessment_id_isValid = false;

    m_control_set_id_isSet = false;
    m_control_set_id_isValid = false;

    m_control_id_isSet = false;
    m_control_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_data_source_isSet = false;
    m_data_source_isValid = false;

    m_author_isSet = false;
    m_author_isValid = false;

    m_total_evidence_isSet = false;
    m_total_evidence_isValid = false;

    m_assessment_report_selection_count_isSet = false;
    m_assessment_report_selection_count_isValid = false;

    m_control_name_isSet = false;
    m_control_name_isValid = false;

    m_evidence_resources_included_count_isSet = false;
    m_evidence_resources_included_count_isValid = false;

    m_evidence_by_type_configuration_data_count_isSet = false;
    m_evidence_by_type_configuration_data_count_isValid = false;

    m_evidence_by_type_manual_count_isSet = false;
    m_evidence_by_type_manual_count_isValid = false;

    m_evidence_by_type_compliance_check_count_isSet = false;
    m_evidence_by_type_compliance_check_count_isValid = false;

    m_evidence_by_type_compliance_check_issues_count_isSet = false;
    m_evidence_by_type_compliance_check_issues_count_isValid = false;

    m_evidence_by_type_user_activity_count_isSet = false;
    m_evidence_by_type_user_activity_count_isValid = false;

    m_evidence_aws_service_source_count_isSet = false;
    m_evidence_aws_service_source_count_isValid = false;
}

void OAIGetEvidenceFolderResponse_evidenceFolder::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetEvidenceFolderResponse_evidenceFolder::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_assessment_id_isValid = ::OpenAPI::fromJsonValue(m_assessment_id, json[QString("assessmentId")]);
    m_assessment_id_isSet = !json[QString("assessmentId")].isNull() && m_assessment_id_isValid;

    m_control_set_id_isValid = ::OpenAPI::fromJsonValue(m_control_set_id, json[QString("controlSetId")]);
    m_control_set_id_isSet = !json[QString("controlSetId")].isNull() && m_control_set_id_isValid;

    m_control_id_isValid = ::OpenAPI::fromJsonValue(m_control_id, json[QString("controlId")]);
    m_control_id_isSet = !json[QString("controlId")].isNull() && m_control_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_data_source_isValid = ::OpenAPI::fromJsonValue(m_data_source, json[QString("dataSource")]);
    m_data_source_isSet = !json[QString("dataSource")].isNull() && m_data_source_isValid;

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_total_evidence_isValid = ::OpenAPI::fromJsonValue(m_total_evidence, json[QString("totalEvidence")]);
    m_total_evidence_isSet = !json[QString("totalEvidence")].isNull() && m_total_evidence_isValid;

    m_assessment_report_selection_count_isValid = ::OpenAPI::fromJsonValue(m_assessment_report_selection_count, json[QString("assessmentReportSelectionCount")]);
    m_assessment_report_selection_count_isSet = !json[QString("assessmentReportSelectionCount")].isNull() && m_assessment_report_selection_count_isValid;

    m_control_name_isValid = ::OpenAPI::fromJsonValue(m_control_name, json[QString("controlName")]);
    m_control_name_isSet = !json[QString("controlName")].isNull() && m_control_name_isValid;

    m_evidence_resources_included_count_isValid = ::OpenAPI::fromJsonValue(m_evidence_resources_included_count, json[QString("evidenceResourcesIncludedCount")]);
    m_evidence_resources_included_count_isSet = !json[QString("evidenceResourcesIncludedCount")].isNull() && m_evidence_resources_included_count_isValid;

    m_evidence_by_type_configuration_data_count_isValid = ::OpenAPI::fromJsonValue(m_evidence_by_type_configuration_data_count, json[QString("evidenceByTypeConfigurationDataCount")]);
    m_evidence_by_type_configuration_data_count_isSet = !json[QString("evidenceByTypeConfigurationDataCount")].isNull() && m_evidence_by_type_configuration_data_count_isValid;

    m_evidence_by_type_manual_count_isValid = ::OpenAPI::fromJsonValue(m_evidence_by_type_manual_count, json[QString("evidenceByTypeManualCount")]);
    m_evidence_by_type_manual_count_isSet = !json[QString("evidenceByTypeManualCount")].isNull() && m_evidence_by_type_manual_count_isValid;

    m_evidence_by_type_compliance_check_count_isValid = ::OpenAPI::fromJsonValue(m_evidence_by_type_compliance_check_count, json[QString("evidenceByTypeComplianceCheckCount")]);
    m_evidence_by_type_compliance_check_count_isSet = !json[QString("evidenceByTypeComplianceCheckCount")].isNull() && m_evidence_by_type_compliance_check_count_isValid;

    m_evidence_by_type_compliance_check_issues_count_isValid = ::OpenAPI::fromJsonValue(m_evidence_by_type_compliance_check_issues_count, json[QString("evidenceByTypeComplianceCheckIssuesCount")]);
    m_evidence_by_type_compliance_check_issues_count_isSet = !json[QString("evidenceByTypeComplianceCheckIssuesCount")].isNull() && m_evidence_by_type_compliance_check_issues_count_isValid;

    m_evidence_by_type_user_activity_count_isValid = ::OpenAPI::fromJsonValue(m_evidence_by_type_user_activity_count, json[QString("evidenceByTypeUserActivityCount")]);
    m_evidence_by_type_user_activity_count_isSet = !json[QString("evidenceByTypeUserActivityCount")].isNull() && m_evidence_by_type_user_activity_count_isValid;

    m_evidence_aws_service_source_count_isValid = ::OpenAPI::fromJsonValue(m_evidence_aws_service_source_count, json[QString("evidenceAwsServiceSourceCount")]);
    m_evidence_aws_service_source_count_isSet = !json[QString("evidenceAwsServiceSourceCount")].isNull() && m_evidence_aws_service_source_count_isValid;
}

QString OAIGetEvidenceFolderResponse_evidenceFolder::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetEvidenceFolderResponse_evidenceFolder::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_assessment_id_isSet) {
        obj.insert(QString("assessmentId"), ::OpenAPI::toJsonValue(m_assessment_id));
    }
    if (m_control_set_id_isSet) {
        obj.insert(QString("controlSetId"), ::OpenAPI::toJsonValue(m_control_set_id));
    }
    if (m_control_id_isSet) {
        obj.insert(QString("controlId"), ::OpenAPI::toJsonValue(m_control_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_data_source_isSet) {
        obj.insert(QString("dataSource"), ::OpenAPI::toJsonValue(m_data_source));
    }
    if (m_author_isSet) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_total_evidence_isSet) {
        obj.insert(QString("totalEvidence"), ::OpenAPI::toJsonValue(m_total_evidence));
    }
    if (m_assessment_report_selection_count_isSet) {
        obj.insert(QString("assessmentReportSelectionCount"), ::OpenAPI::toJsonValue(m_assessment_report_selection_count));
    }
    if (m_control_name_isSet) {
        obj.insert(QString("controlName"), ::OpenAPI::toJsonValue(m_control_name));
    }
    if (m_evidence_resources_included_count_isSet) {
        obj.insert(QString("evidenceResourcesIncludedCount"), ::OpenAPI::toJsonValue(m_evidence_resources_included_count));
    }
    if (m_evidence_by_type_configuration_data_count_isSet) {
        obj.insert(QString("evidenceByTypeConfigurationDataCount"), ::OpenAPI::toJsonValue(m_evidence_by_type_configuration_data_count));
    }
    if (m_evidence_by_type_manual_count_isSet) {
        obj.insert(QString("evidenceByTypeManualCount"), ::OpenAPI::toJsonValue(m_evidence_by_type_manual_count));
    }
    if (m_evidence_by_type_compliance_check_count_isSet) {
        obj.insert(QString("evidenceByTypeComplianceCheckCount"), ::OpenAPI::toJsonValue(m_evidence_by_type_compliance_check_count));
    }
    if (m_evidence_by_type_compliance_check_issues_count_isSet) {
        obj.insert(QString("evidenceByTypeComplianceCheckIssuesCount"), ::OpenAPI::toJsonValue(m_evidence_by_type_compliance_check_issues_count));
    }
    if (m_evidence_by_type_user_activity_count_isSet) {
        obj.insert(QString("evidenceByTypeUserActivityCount"), ::OpenAPI::toJsonValue(m_evidence_by_type_user_activity_count));
    }
    if (m_evidence_aws_service_source_count_isSet) {
        obj.insert(QString("evidenceAwsServiceSourceCount"), ::OpenAPI::toJsonValue(m_evidence_aws_service_source_count));
    }
    return obj;
}

QString OAIGetEvidenceFolderResponse_evidenceFolder::getName() const {
    return m_name;
}
void OAIGetEvidenceFolderResponse_evidenceFolder::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetEvidenceFolderResponse_evidenceFolder::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetEvidenceFolderResponse_evidenceFolder::is_name_Valid() const{
    return m_name_isValid;
}

QDateTime OAIGetEvidenceFolderResponse_evidenceFolder::getDate() const {
    return m_date;
}
void OAIGetEvidenceFolderResponse_evidenceFolder::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIGetEvidenceFolderResponse_evidenceFolder::is_date_Set() const{
    return m_date_isSet;
}

bool OAIGetEvidenceFolderResponse_evidenceFolder::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIGetEvidenceFolderResponse_evidenceFolder::getAssessmentId() const {
    return m_assessment_id;
}
void OAIGetEvidenceFolderResponse_evidenceFolder::setAssessmentId(const QString &assessment_id) {
    m_assessment_id = assessment_id;
    m_assessment_id_isSet = true;
}

bool OAIGetEvidenceFolderResponse_evidenceFolder::is_assessment_id_Set() const{
    return m_assessment_id_isSet;
}

bool OAIGetEvidenceFolderResponse_evidenceFolder::is_assessment_id_Valid() const{
    return m_assessment_id_isValid;
}

QString OAIGetEvidenceFolderResponse_evidenceFolder::getControlSetId() const {
    return m_control_set_id;
}
void OAIGetEvidenceFolderResponse_evidenceFolder::setControlSetId(const QString &control_set_id) {
    m_control_set_id = control_set_id;
    m_control_set_id_isSet = true;
}

bool OAIGetEvidenceFolderResponse_evidenceFolder::is_control_set_id_Set() const{
    return m_control_set_id_isSet;
}

bool OAIGetEvidenceFolderResponse_evidenceFolder::is_control_set_id_Valid() const{
    return m_control_set_id_isValid;
}

QString OAIGetEvidenceFolderResponse_evidenceFolder::getControlId() const {
    return m_control_id;
}
void OAIGetEvidenceFolderResponse_evidenceFolder::setControlId(const QString &control_id) {
    m_control_id = control_id;
    m_control_id_isSet = true;
}

bool OAIGetEvidenceFolderResponse_evidenceFolder::is_control_id_Set() const{
    return m_control_id_isSet;
}

bool OAIGetEvidenceFolderResponse_evidenceFolder::is_control_id_Valid() const{
    return m_control_id_isValid;
}

QString OAIGetEvidenceFolderResponse_evidenceFolder::getId() const {
    return m_id;
}
void OAIGetEvidenceFolderResponse_evidenceFolder::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGetEvidenceFolderResponse_evidenceFolder::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGetEvidenceFolderResponse_evidenceFolder::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIGetEvidenceFolderResponse_evidenceFolder::getDataSource() const {
    return m_data_source;
}
void OAIGetEvidenceFolderResponse_evidenceFolder::setDataSource(const QString &data_source) {
    m_data_source = data_source;
    m_data_source_isSet = true;
}

bool OAIGetEvidenceFolderResponse_evidenceFolder::is_data_source_Set() const{
    return m_data_source_isSet;
}

bool OAIGetEvidenceFolderResponse_evidenceFolder::is_data_source_Valid() const{
    return m_data_source_isValid;
}

QString OAIGetEvidenceFolderResponse_evidenceFolder::getAuthor() const {
    return m_author;
}
void OAIGetEvidenceFolderResponse_evidenceFolder::setAuthor(const QString &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAIGetEvidenceFolderResponse_evidenceFolder::is_author_Set() const{
    return m_author_isSet;
}

bool OAIGetEvidenceFolderResponse_evidenceFolder::is_author_Valid() const{
    return m_author_isValid;
}

qint32 OAIGetEvidenceFolderResponse_evidenceFolder::getTotalEvidence() const {
    return m_total_evidence;
}
void OAIGetEvidenceFolderResponse_evidenceFolder::setTotalEvidence(const qint32 &total_evidence) {
    m_total_evidence = total_evidence;
    m_total_evidence_isSet = true;
}

bool OAIGetEvidenceFolderResponse_evidenceFolder::is_total_evidence_Set() const{
    return m_total_evidence_isSet;
}

bool OAIGetEvidenceFolderResponse_evidenceFolder::is_total_evidence_Valid() const{
    return m_total_evidence_isValid;
}

qint32 OAIGetEvidenceFolderResponse_evidenceFolder::getAssessmentReportSelectionCount() const {
    return m_assessment_report_selection_count;
}
void OAIGetEvidenceFolderResponse_evidenceFolder::setAssessmentReportSelectionCount(const qint32 &assessment_report_selection_count) {
    m_assessment_report_selection_count = assessment_report_selection_count;
    m_assessment_report_selection_count_isSet = true;
}

bool OAIGetEvidenceFolderResponse_evidenceFolder::is_assessment_report_selection_count_Set() const{
    return m_assessment_report_selection_count_isSet;
}

bool OAIGetEvidenceFolderResponse_evidenceFolder::is_assessment_report_selection_count_Valid() const{
    return m_assessment_report_selection_count_isValid;
}

QString OAIGetEvidenceFolderResponse_evidenceFolder::getControlName() const {
    return m_control_name;
}
void OAIGetEvidenceFolderResponse_evidenceFolder::setControlName(const QString &control_name) {
    m_control_name = control_name;
    m_control_name_isSet = true;
}

bool OAIGetEvidenceFolderResponse_evidenceFolder::is_control_name_Set() const{
    return m_control_name_isSet;
}

bool OAIGetEvidenceFolderResponse_evidenceFolder::is_control_name_Valid() const{
    return m_control_name_isValid;
}

qint32 OAIGetEvidenceFolderResponse_evidenceFolder::getEvidenceResourcesIncludedCount() const {
    return m_evidence_resources_included_count;
}
void OAIGetEvidenceFolderResponse_evidenceFolder::setEvidenceResourcesIncludedCount(const qint32 &evidence_resources_included_count) {
    m_evidence_resources_included_count = evidence_resources_included_count;
    m_evidence_resources_included_count_isSet = true;
}

bool OAIGetEvidenceFolderResponse_evidenceFolder::is_evidence_resources_included_count_Set() const{
    return m_evidence_resources_included_count_isSet;
}

bool OAIGetEvidenceFolderResponse_evidenceFolder::is_evidence_resources_included_count_Valid() const{
    return m_evidence_resources_included_count_isValid;
}

qint32 OAIGetEvidenceFolderResponse_evidenceFolder::getEvidenceByTypeConfigurationDataCount() const {
    return m_evidence_by_type_configuration_data_count;
}
void OAIGetEvidenceFolderResponse_evidenceFolder::setEvidenceByTypeConfigurationDataCount(const qint32 &evidence_by_type_configuration_data_count) {
    m_evidence_by_type_configuration_data_count = evidence_by_type_configuration_data_count;
    m_evidence_by_type_configuration_data_count_isSet = true;
}

bool OAIGetEvidenceFolderResponse_evidenceFolder::is_evidence_by_type_configuration_data_count_Set() const{
    return m_evidence_by_type_configuration_data_count_isSet;
}

bool OAIGetEvidenceFolderResponse_evidenceFolder::is_evidence_by_type_configuration_data_count_Valid() const{
    return m_evidence_by_type_configuration_data_count_isValid;
}

qint32 OAIGetEvidenceFolderResponse_evidenceFolder::getEvidenceByTypeManualCount() const {
    return m_evidence_by_type_manual_count;
}
void OAIGetEvidenceFolderResponse_evidenceFolder::setEvidenceByTypeManualCount(const qint32 &evidence_by_type_manual_count) {
    m_evidence_by_type_manual_count = evidence_by_type_manual_count;
    m_evidence_by_type_manual_count_isSet = true;
}

bool OAIGetEvidenceFolderResponse_evidenceFolder::is_evidence_by_type_manual_count_Set() const{
    return m_evidence_by_type_manual_count_isSet;
}

bool OAIGetEvidenceFolderResponse_evidenceFolder::is_evidence_by_type_manual_count_Valid() const{
    return m_evidence_by_type_manual_count_isValid;
}

qint32 OAIGetEvidenceFolderResponse_evidenceFolder::getEvidenceByTypeComplianceCheckCount() const {
    return m_evidence_by_type_compliance_check_count;
}
void OAIGetEvidenceFolderResponse_evidenceFolder::setEvidenceByTypeComplianceCheckCount(const qint32 &evidence_by_type_compliance_check_count) {
    m_evidence_by_type_compliance_check_count = evidence_by_type_compliance_check_count;
    m_evidence_by_type_compliance_check_count_isSet = true;
}

bool OAIGetEvidenceFolderResponse_evidenceFolder::is_evidence_by_type_compliance_check_count_Set() const{
    return m_evidence_by_type_compliance_check_count_isSet;
}

bool OAIGetEvidenceFolderResponse_evidenceFolder::is_evidence_by_type_compliance_check_count_Valid() const{
    return m_evidence_by_type_compliance_check_count_isValid;
}

qint32 OAIGetEvidenceFolderResponse_evidenceFolder::getEvidenceByTypeComplianceCheckIssuesCount() const {
    return m_evidence_by_type_compliance_check_issues_count;
}
void OAIGetEvidenceFolderResponse_evidenceFolder::setEvidenceByTypeComplianceCheckIssuesCount(const qint32 &evidence_by_type_compliance_check_issues_count) {
    m_evidence_by_type_compliance_check_issues_count = evidence_by_type_compliance_check_issues_count;
    m_evidence_by_type_compliance_check_issues_count_isSet = true;
}

bool OAIGetEvidenceFolderResponse_evidenceFolder::is_evidence_by_type_compliance_check_issues_count_Set() const{
    return m_evidence_by_type_compliance_check_issues_count_isSet;
}

bool OAIGetEvidenceFolderResponse_evidenceFolder::is_evidence_by_type_compliance_check_issues_count_Valid() const{
    return m_evidence_by_type_compliance_check_issues_count_isValid;
}

qint32 OAIGetEvidenceFolderResponse_evidenceFolder::getEvidenceByTypeUserActivityCount() const {
    return m_evidence_by_type_user_activity_count;
}
void OAIGetEvidenceFolderResponse_evidenceFolder::setEvidenceByTypeUserActivityCount(const qint32 &evidence_by_type_user_activity_count) {
    m_evidence_by_type_user_activity_count = evidence_by_type_user_activity_count;
    m_evidence_by_type_user_activity_count_isSet = true;
}

bool OAIGetEvidenceFolderResponse_evidenceFolder::is_evidence_by_type_user_activity_count_Set() const{
    return m_evidence_by_type_user_activity_count_isSet;
}

bool OAIGetEvidenceFolderResponse_evidenceFolder::is_evidence_by_type_user_activity_count_Valid() const{
    return m_evidence_by_type_user_activity_count_isValid;
}

qint32 OAIGetEvidenceFolderResponse_evidenceFolder::getEvidenceAwsServiceSourceCount() const {
    return m_evidence_aws_service_source_count;
}
void OAIGetEvidenceFolderResponse_evidenceFolder::setEvidenceAwsServiceSourceCount(const qint32 &evidence_aws_service_source_count) {
    m_evidence_aws_service_source_count = evidence_aws_service_source_count;
    m_evidence_aws_service_source_count_isSet = true;
}

bool OAIGetEvidenceFolderResponse_evidenceFolder::is_evidence_aws_service_source_count_Set() const{
    return m_evidence_aws_service_source_count_isSet;
}

bool OAIGetEvidenceFolderResponse_evidenceFolder::is_evidence_aws_service_source_count_Valid() const{
    return m_evidence_aws_service_source_count_isValid;
}

bool OAIGetEvidenceFolderResponse_evidenceFolder::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assessment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_control_set_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_control_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_author_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_evidence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assessment_report_selection_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_control_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evidence_resources_included_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evidence_by_type_configuration_data_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evidence_by_type_manual_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evidence_by_type_compliance_check_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evidence_by_type_compliance_check_issues_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evidence_by_type_user_activity_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evidence_aws_service_source_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetEvidenceFolderResponse_evidenceFolder::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
