/**
 * AWS Audit Manager
 * <p>Welcome to the Audit Manager API reference. This guide is for developers who need detailed information about the Audit Manager API operations, data types, and errors. </p> <p>Audit Manager is a service that provides automated evidence collection so that you can continually audit your Amazon Web Services usage. You can use it to assess the effectiveness of your controls, manage risk, and simplify compliance.</p> <p>Audit Manager provides prebuilt frameworks that structure and automate assessments for a given compliance standard. Frameworks include a prebuilt collection of controls with descriptions and testing procedures. These controls are grouped according to the requirements of the specified compliance standard or regulation. You can also customize frameworks and controls to support internal audits with specific requirements. </p> <p>Use the following links to get started with the Audit Manager API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Audit Manager API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Audit Manager data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Audit Manager, we recommend that you review the <a href=\"https://docs.aws.amazon.com/audit-manager/latest/userguide/what-is.html\"> Audit Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIInsightsByAssessment.h
 *
 * &lt;p&gt;A summary of the latest analytics data for a specific active assessment.&lt;/p&gt; &lt;p&gt;This summary is a snapshot of the data that was collected on the &lt;code&gt;lastUpdated&lt;/code&gt; date. It’s important to understand that the totals in &lt;code&gt;InsightsByAssessment&lt;/code&gt; are daily counts based on this date — they aren’t a total sum to date. &lt;/p&gt; &lt;p&gt;The &lt;code&gt;InsightsByAssessment&lt;/code&gt; data is eventually consistent. This means that when you read data from &lt;code&gt;InsightsByAssessment&lt;/code&gt;, the response might not instantly reflect the results of a recently completed write or update operation. If you repeat your read request after a few hours, the response returns the latest data.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If you delete an assessment or change its status to inactive, &lt;code&gt;InsightsByAssessment&lt;/code&gt; includes data for that assessment as follows.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Inactive assessments&lt;/b&gt; - If Audit Manager collected evidence for your assessment before you changed it inactive, that evidence is included in the &lt;code&gt;InsightsByAssessment&lt;/code&gt; counts for that day.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Deleted assessments&lt;/b&gt; - If Audit Manager collected evidence for your assessment before you deleted it, that evidence isn&#39;t included in the &lt;code&gt;InsightsByAssessment&lt;/code&gt; counts for that day.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
 */

#ifndef OAIInsightsByAssessment_H
#define OAIInsightsByAssessment_H

#include <QJsonObject>

#include <QDateTime>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIInsightsByAssessment : public OAIObject {
public:
    OAIInsightsByAssessment();
    OAIInsightsByAssessment(QString json);
    ~OAIInsightsByAssessment() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getNoncompliantEvidenceCount() const;
    void setNoncompliantEvidenceCount(const qint32 &noncompliant_evidence_count);
    bool is_noncompliant_evidence_count_Set() const;
    bool is_noncompliant_evidence_count_Valid() const;

    qint32 getCompliantEvidenceCount() const;
    void setCompliantEvidenceCount(const qint32 &compliant_evidence_count);
    bool is_compliant_evidence_count_Set() const;
    bool is_compliant_evidence_count_Valid() const;

    qint32 getInconclusiveEvidenceCount() const;
    void setInconclusiveEvidenceCount(const qint32 &inconclusive_evidence_count);
    bool is_inconclusive_evidence_count_Set() const;
    bool is_inconclusive_evidence_count_Valid() const;

    qint32 getAssessmentControlsCountByNoncompliantEvidence() const;
    void setAssessmentControlsCountByNoncompliantEvidence(const qint32 &assessment_controls_count_by_noncompliant_evidence);
    bool is_assessment_controls_count_by_noncompliant_evidence_Set() const;
    bool is_assessment_controls_count_by_noncompliant_evidence_Valid() const;

    qint32 getTotalAssessmentControlsCount() const;
    void setTotalAssessmentControlsCount(const qint32 &total_assessment_controls_count);
    bool is_total_assessment_controls_count_Set() const;
    bool is_total_assessment_controls_count_Valid() const;

    QDateTime getLastUpdated() const;
    void setLastUpdated(const QDateTime &last_updated);
    bool is_last_updated_Set() const;
    bool is_last_updated_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_noncompliant_evidence_count;
    bool m_noncompliant_evidence_count_isSet;
    bool m_noncompliant_evidence_count_isValid;

    qint32 m_compliant_evidence_count;
    bool m_compliant_evidence_count_isSet;
    bool m_compliant_evidence_count_isValid;

    qint32 m_inconclusive_evidence_count;
    bool m_inconclusive_evidence_count_isSet;
    bool m_inconclusive_evidence_count_isValid;

    qint32 m_assessment_controls_count_by_noncompliant_evidence;
    bool m_assessment_controls_count_by_noncompliant_evidence_isSet;
    bool m_assessment_controls_count_by_noncompliant_evidence_isValid;

    qint32 m_total_assessment_controls_count;
    bool m_total_assessment_controls_count_isSet;
    bool m_total_assessment_controls_count_isValid;

    QDateTime m_last_updated;
    bool m_last_updated_isSet;
    bool m_last_updated_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIInsightsByAssessment)

#endif // OAIInsightsByAssessment_H
