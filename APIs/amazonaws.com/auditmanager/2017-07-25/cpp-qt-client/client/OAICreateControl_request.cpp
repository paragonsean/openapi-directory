/**
 * AWS Audit Manager
 * <p>Welcome to the Audit Manager API reference. This guide is for developers who need detailed information about the Audit Manager API operations, data types, and errors. </p> <p>Audit Manager is a service that provides automated evidence collection so that you can continually audit your Amazon Web Services usage. You can use it to assess the effectiveness of your controls, manage risk, and simplify compliance.</p> <p>Audit Manager provides prebuilt frameworks that structure and automate assessments for a given compliance standard. Frameworks include a prebuilt collection of controls with descriptions and testing procedures. These controls are grouped according to the requirements of the specified compliance standard or regulation. You can also customize frameworks and controls to support internal audits with specific requirements. </p> <p>Use the following links to get started with the Audit Manager API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Audit Manager API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Audit Manager data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Audit Manager, we recommend that you review the <a href=\"https://docs.aws.amazon.com/audit-manager/latest/userguide/what-is.html\"> Audit Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateControl_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateControl_request::OAICreateControl_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateControl_request::OAICreateControl_request() {
    this->initializeModel();
}

OAICreateControl_request::~OAICreateControl_request() {}

void OAICreateControl_request::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_testing_information_isSet = false;
    m_testing_information_isValid = false;

    m_action_plan_title_isSet = false;
    m_action_plan_title_isValid = false;

    m_action_plan_instructions_isSet = false;
    m_action_plan_instructions_isValid = false;

    m_control_mapping_sources_isSet = false;
    m_control_mapping_sources_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateControl_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateControl_request::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_testing_information_isValid = ::OpenAPI::fromJsonValue(m_testing_information, json[QString("testingInformation")]);
    m_testing_information_isSet = !json[QString("testingInformation")].isNull() && m_testing_information_isValid;

    m_action_plan_title_isValid = ::OpenAPI::fromJsonValue(m_action_plan_title, json[QString("actionPlanTitle")]);
    m_action_plan_title_isSet = !json[QString("actionPlanTitle")].isNull() && m_action_plan_title_isValid;

    m_action_plan_instructions_isValid = ::OpenAPI::fromJsonValue(m_action_plan_instructions, json[QString("actionPlanInstructions")]);
    m_action_plan_instructions_isSet = !json[QString("actionPlanInstructions")].isNull() && m_action_plan_instructions_isValid;

    m_control_mapping_sources_isValid = ::OpenAPI::fromJsonValue(m_control_mapping_sources, json[QString("controlMappingSources")]);
    m_control_mapping_sources_isSet = !json[QString("controlMappingSources")].isNull() && m_control_mapping_sources_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateControl_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateControl_request::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_testing_information_isSet) {
        obj.insert(QString("testingInformation"), ::OpenAPI::toJsonValue(m_testing_information));
    }
    if (m_action_plan_title_isSet) {
        obj.insert(QString("actionPlanTitle"), ::OpenAPI::toJsonValue(m_action_plan_title));
    }
    if (m_action_plan_instructions_isSet) {
        obj.insert(QString("actionPlanInstructions"), ::OpenAPI::toJsonValue(m_action_plan_instructions));
    }
    if (m_control_mapping_sources.size() > 0) {
        obj.insert(QString("controlMappingSources"), ::OpenAPI::toJsonValue(m_control_mapping_sources));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateControl_request::getName() const {
    return m_name;
}
void OAICreateControl_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateControl_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateControl_request::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateControl_request::getDescription() const {
    return m_description;
}
void OAICreateControl_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateControl_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateControl_request::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICreateControl_request::getTestingInformation() const {
    return m_testing_information;
}
void OAICreateControl_request::setTestingInformation(const QString &testing_information) {
    m_testing_information = testing_information;
    m_testing_information_isSet = true;
}

bool OAICreateControl_request::is_testing_information_Set() const{
    return m_testing_information_isSet;
}

bool OAICreateControl_request::is_testing_information_Valid() const{
    return m_testing_information_isValid;
}

QString OAICreateControl_request::getActionPlanTitle() const {
    return m_action_plan_title;
}
void OAICreateControl_request::setActionPlanTitle(const QString &action_plan_title) {
    m_action_plan_title = action_plan_title;
    m_action_plan_title_isSet = true;
}

bool OAICreateControl_request::is_action_plan_title_Set() const{
    return m_action_plan_title_isSet;
}

bool OAICreateControl_request::is_action_plan_title_Valid() const{
    return m_action_plan_title_isValid;
}

QString OAICreateControl_request::getActionPlanInstructions() const {
    return m_action_plan_instructions;
}
void OAICreateControl_request::setActionPlanInstructions(const QString &action_plan_instructions) {
    m_action_plan_instructions = action_plan_instructions;
    m_action_plan_instructions_isSet = true;
}

bool OAICreateControl_request::is_action_plan_instructions_Set() const{
    return m_action_plan_instructions_isSet;
}

bool OAICreateControl_request::is_action_plan_instructions_Valid() const{
    return m_action_plan_instructions_isValid;
}

QList<OAICreateControlMappingSource> OAICreateControl_request::getControlMappingSources() const {
    return m_control_mapping_sources;
}
void OAICreateControl_request::setControlMappingSources(const QList<OAICreateControlMappingSource> &control_mapping_sources) {
    m_control_mapping_sources = control_mapping_sources;
    m_control_mapping_sources_isSet = true;
}

bool OAICreateControl_request::is_control_mapping_sources_Set() const{
    return m_control_mapping_sources_isSet;
}

bool OAICreateControl_request::is_control_mapping_sources_Valid() const{
    return m_control_mapping_sources_isValid;
}

QMap<QString, QString> OAICreateControl_request::getTags() const {
    return m_tags;
}
void OAICreateControl_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateControl_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateControl_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateControl_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_testing_information_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_action_plan_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_action_plan_instructions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_control_mapping_sources.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateControl_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_control_mapping_sources_isValid && true;
}

} // namespace OpenAPI
