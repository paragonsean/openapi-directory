/**
 * AWS Audit Manager
 * <p>Welcome to the Audit Manager API reference. This guide is for developers who need detailed information about the Audit Manager API operations, data types, and errors. </p> <p>Audit Manager is a service that provides automated evidence collection so that you can continually audit your Amazon Web Services usage. You can use it to assess the effectiveness of your controls, manage risk, and simplify compliance.</p> <p>Audit Manager provides prebuilt frameworks that structure and automate assessments for a given compliance standard. Frameworks include a prebuilt collection of controls with descriptions and testing procedures. These controls are grouped according to the requirements of the specified compliance standard or regulation. You can also customize frameworks and controls to support internal audits with specific requirements. </p> <p>Use the following links to get started with the Audit Manager API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Audit Manager API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Audit Manager data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Audit Manager, we recommend that you review the <a href=\"https://docs.aws.amazon.com/audit-manager/latest/userguide/what-is.html\"> Audit Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIControl.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIControl::OAIControl(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIControl::OAIControl() {
    this->initializeModel();
}

OAIControl::~OAIControl() {}

void OAIControl::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_testing_information_isSet = false;
    m_testing_information_isValid = false;

    m_action_plan_title_isSet = false;
    m_action_plan_title_isValid = false;

    m_action_plan_instructions_isSet = false;
    m_action_plan_instructions_isValid = false;

    m_control_sources_isSet = false;
    m_control_sources_isValid = false;

    m_control_mapping_sources_isSet = false;
    m_control_mapping_sources_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_last_updated_at_isSet = false;
    m_last_updated_at_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_last_updated_by_isSet = false;
    m_last_updated_by_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIControl::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIControl::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_testing_information_isValid = ::OpenAPI::fromJsonValue(m_testing_information, json[QString("testingInformation")]);
    m_testing_information_isSet = !json[QString("testingInformation")].isNull() && m_testing_information_isValid;

    m_action_plan_title_isValid = ::OpenAPI::fromJsonValue(m_action_plan_title, json[QString("actionPlanTitle")]);
    m_action_plan_title_isSet = !json[QString("actionPlanTitle")].isNull() && m_action_plan_title_isValid;

    m_action_plan_instructions_isValid = ::OpenAPI::fromJsonValue(m_action_plan_instructions, json[QString("actionPlanInstructions")]);
    m_action_plan_instructions_isSet = !json[QString("actionPlanInstructions")].isNull() && m_action_plan_instructions_isValid;

    m_control_sources_isValid = ::OpenAPI::fromJsonValue(m_control_sources, json[QString("controlSources")]);
    m_control_sources_isSet = !json[QString("controlSources")].isNull() && m_control_sources_isValid;

    m_control_mapping_sources_isValid = ::OpenAPI::fromJsonValue(m_control_mapping_sources, json[QString("controlMappingSources")]);
    m_control_mapping_sources_isSet = !json[QString("controlMappingSources")].isNull() && m_control_mapping_sources_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_last_updated_at_isValid = ::OpenAPI::fromJsonValue(m_last_updated_at, json[QString("lastUpdatedAt")]);
    m_last_updated_at_isSet = !json[QString("lastUpdatedAt")].isNull() && m_last_updated_at_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;

    m_last_updated_by_isValid = ::OpenAPI::fromJsonValue(m_last_updated_by, json[QString("lastUpdatedBy")]);
    m_last_updated_by_isSet = !json[QString("lastUpdatedBy")].isNull() && m_last_updated_by_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIControl::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIControl::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_testing_information_isSet) {
        obj.insert(QString("testingInformation"), ::OpenAPI::toJsonValue(m_testing_information));
    }
    if (m_action_plan_title_isSet) {
        obj.insert(QString("actionPlanTitle"), ::OpenAPI::toJsonValue(m_action_plan_title));
    }
    if (m_action_plan_instructions_isSet) {
        obj.insert(QString("actionPlanInstructions"), ::OpenAPI::toJsonValue(m_action_plan_instructions));
    }
    if (m_control_sources_isSet) {
        obj.insert(QString("controlSources"), ::OpenAPI::toJsonValue(m_control_sources));
    }
    if (m_control_mapping_sources.isSet()) {
        obj.insert(QString("controlMappingSources"), ::OpenAPI::toJsonValue(m_control_mapping_sources));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_last_updated_at_isSet) {
        obj.insert(QString("lastUpdatedAt"), ::OpenAPI::toJsonValue(m_last_updated_at));
    }
    if (m_created_by_isSet) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_last_updated_by_isSet) {
        obj.insert(QString("lastUpdatedBy"), ::OpenAPI::toJsonValue(m_last_updated_by));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIControl::getArn() const {
    return m_arn;
}
void OAIControl::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIControl::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIControl::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIControl::getId() const {
    return m_id;
}
void OAIControl::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIControl::is_id_Set() const{
    return m_id_isSet;
}

bool OAIControl::is_id_Valid() const{
    return m_id_isValid;
}

OAIControlType OAIControl::getType() const {
    return m_type;
}
void OAIControl::setType(const OAIControlType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIControl::is_type_Set() const{
    return m_type_isSet;
}

bool OAIControl::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIControl::getName() const {
    return m_name;
}
void OAIControl::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIControl::is_name_Set() const{
    return m_name_isSet;
}

bool OAIControl::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIControl::getDescription() const {
    return m_description;
}
void OAIControl::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIControl::is_description_Set() const{
    return m_description_isSet;
}

bool OAIControl::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIControl::getTestingInformation() const {
    return m_testing_information;
}
void OAIControl::setTestingInformation(const QString &testing_information) {
    m_testing_information = testing_information;
    m_testing_information_isSet = true;
}

bool OAIControl::is_testing_information_Set() const{
    return m_testing_information_isSet;
}

bool OAIControl::is_testing_information_Valid() const{
    return m_testing_information_isValid;
}

QString OAIControl::getActionPlanTitle() const {
    return m_action_plan_title;
}
void OAIControl::setActionPlanTitle(const QString &action_plan_title) {
    m_action_plan_title = action_plan_title;
    m_action_plan_title_isSet = true;
}

bool OAIControl::is_action_plan_title_Set() const{
    return m_action_plan_title_isSet;
}

bool OAIControl::is_action_plan_title_Valid() const{
    return m_action_plan_title_isValid;
}

QString OAIControl::getActionPlanInstructions() const {
    return m_action_plan_instructions;
}
void OAIControl::setActionPlanInstructions(const QString &action_plan_instructions) {
    m_action_plan_instructions = action_plan_instructions;
    m_action_plan_instructions_isSet = true;
}

bool OAIControl::is_action_plan_instructions_Set() const{
    return m_action_plan_instructions_isSet;
}

bool OAIControl::is_action_plan_instructions_Valid() const{
    return m_action_plan_instructions_isValid;
}

QString OAIControl::getControlSources() const {
    return m_control_sources;
}
void OAIControl::setControlSources(const QString &control_sources) {
    m_control_sources = control_sources;
    m_control_sources_isSet = true;
}

bool OAIControl::is_control_sources_Set() const{
    return m_control_sources_isSet;
}

bool OAIControl::is_control_sources_Valid() const{
    return m_control_sources_isValid;
}

QList OAIControl::getControlMappingSources() const {
    return m_control_mapping_sources;
}
void OAIControl::setControlMappingSources(const QList &control_mapping_sources) {
    m_control_mapping_sources = control_mapping_sources;
    m_control_mapping_sources_isSet = true;
}

bool OAIControl::is_control_mapping_sources_Set() const{
    return m_control_mapping_sources_isSet;
}

bool OAIControl::is_control_mapping_sources_Valid() const{
    return m_control_mapping_sources_isValid;
}

QDateTime OAIControl::getCreatedAt() const {
    return m_created_at;
}
void OAIControl::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIControl::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIControl::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAIControl::getLastUpdatedAt() const {
    return m_last_updated_at;
}
void OAIControl::setLastUpdatedAt(const QDateTime &last_updated_at) {
    m_last_updated_at = last_updated_at;
    m_last_updated_at_isSet = true;
}

bool OAIControl::is_last_updated_at_Set() const{
    return m_last_updated_at_isSet;
}

bool OAIControl::is_last_updated_at_Valid() const{
    return m_last_updated_at_isValid;
}

QString OAIControl::getCreatedBy() const {
    return m_created_by;
}
void OAIControl::setCreatedBy(const QString &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIControl::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIControl::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QString OAIControl::getLastUpdatedBy() const {
    return m_last_updated_by;
}
void OAIControl::setLastUpdatedBy(const QString &last_updated_by) {
    m_last_updated_by = last_updated_by;
    m_last_updated_by_isSet = true;
}

bool OAIControl::is_last_updated_by_Set() const{
    return m_last_updated_by_isSet;
}

bool OAIControl::is_last_updated_by_Valid() const{
    return m_last_updated_by_isValid;
}

QMap OAIControl::getTags() const {
    return m_tags;
}
void OAIControl::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIControl::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIControl::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIControl::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_testing_information_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_action_plan_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_action_plan_instructions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_control_sources_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_control_mapping_sources.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIControl::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
