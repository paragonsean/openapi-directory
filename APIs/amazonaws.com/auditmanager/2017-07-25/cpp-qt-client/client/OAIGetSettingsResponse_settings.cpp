/**
 * AWS Audit Manager
 * <p>Welcome to the Audit Manager API reference. This guide is for developers who need detailed information about the Audit Manager API operations, data types, and errors. </p> <p>Audit Manager is a service that provides automated evidence collection so that you can continually audit your Amazon Web Services usage. You can use it to assess the effectiveness of your controls, manage risk, and simplify compliance.</p> <p>Audit Manager provides prebuilt frameworks that structure and automate assessments for a given compliance standard. Frameworks include a prebuilt collection of controls with descriptions and testing procedures. These controls are grouped according to the requirements of the specified compliance standard or regulation. You can also customize frameworks and controls to support internal audits with specific requirements. </p> <p>Use the following links to get started with the Audit Manager API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Audit Manager API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Audit Manager data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Audit Manager, we recommend that you review the <a href=\"https://docs.aws.amazon.com/audit-manager/latest/userguide/what-is.html\"> Audit Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetSettingsResponse_settings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetSettingsResponse_settings::OAIGetSettingsResponse_settings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetSettingsResponse_settings::OAIGetSettingsResponse_settings() {
    this->initializeModel();
}

OAIGetSettingsResponse_settings::~OAIGetSettingsResponse_settings() {}

void OAIGetSettingsResponse_settings::initializeModel() {

    m_is_aws_org_enabled_isSet = false;
    m_is_aws_org_enabled_isValid = false;

    m_sns_topic_isSet = false;
    m_sns_topic_isValid = false;

    m_default_assessment_reports_destination_isSet = false;
    m_default_assessment_reports_destination_isValid = false;

    m_default_process_owners_isSet = false;
    m_default_process_owners_isValid = false;

    m_kms_key_isSet = false;
    m_kms_key_isValid = false;

    m_evidence_finder_enablement_isSet = false;
    m_evidence_finder_enablement_isValid = false;

    m_deregistration_policy_isSet = false;
    m_deregistration_policy_isValid = false;

    m_default_export_destination_isSet = false;
    m_default_export_destination_isValid = false;
}

void OAIGetSettingsResponse_settings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetSettingsResponse_settings::fromJsonObject(QJsonObject json) {

    m_is_aws_org_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_aws_org_enabled, json[QString("isAwsOrgEnabled")]);
    m_is_aws_org_enabled_isSet = !json[QString("isAwsOrgEnabled")].isNull() && m_is_aws_org_enabled_isValid;

    m_sns_topic_isValid = ::OpenAPI::fromJsonValue(m_sns_topic, json[QString("snsTopic")]);
    m_sns_topic_isSet = !json[QString("snsTopic")].isNull() && m_sns_topic_isValid;

    m_default_assessment_reports_destination_isValid = ::OpenAPI::fromJsonValue(m_default_assessment_reports_destination, json[QString("defaultAssessmentReportsDestination")]);
    m_default_assessment_reports_destination_isSet = !json[QString("defaultAssessmentReportsDestination")].isNull() && m_default_assessment_reports_destination_isValid;

    m_default_process_owners_isValid = ::OpenAPI::fromJsonValue(m_default_process_owners, json[QString("defaultProcessOwners")]);
    m_default_process_owners_isSet = !json[QString("defaultProcessOwners")].isNull() && m_default_process_owners_isValid;

    m_kms_key_isValid = ::OpenAPI::fromJsonValue(m_kms_key, json[QString("kmsKey")]);
    m_kms_key_isSet = !json[QString("kmsKey")].isNull() && m_kms_key_isValid;

    m_evidence_finder_enablement_isValid = ::OpenAPI::fromJsonValue(m_evidence_finder_enablement, json[QString("evidenceFinderEnablement")]);
    m_evidence_finder_enablement_isSet = !json[QString("evidenceFinderEnablement")].isNull() && m_evidence_finder_enablement_isValid;

    m_deregistration_policy_isValid = ::OpenAPI::fromJsonValue(m_deregistration_policy, json[QString("deregistrationPolicy")]);
    m_deregistration_policy_isSet = !json[QString("deregistrationPolicy")].isNull() && m_deregistration_policy_isValid;

    m_default_export_destination_isValid = ::OpenAPI::fromJsonValue(m_default_export_destination, json[QString("defaultExportDestination")]);
    m_default_export_destination_isSet = !json[QString("defaultExportDestination")].isNull() && m_default_export_destination_isValid;
}

QString OAIGetSettingsResponse_settings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetSettingsResponse_settings::asJsonObject() const {
    QJsonObject obj;
    if (m_is_aws_org_enabled_isSet) {
        obj.insert(QString("isAwsOrgEnabled"), ::OpenAPI::toJsonValue(m_is_aws_org_enabled));
    }
    if (m_sns_topic_isSet) {
        obj.insert(QString("snsTopic"), ::OpenAPI::toJsonValue(m_sns_topic));
    }
    if (m_default_assessment_reports_destination.isSet()) {
        obj.insert(QString("defaultAssessmentReportsDestination"), ::OpenAPI::toJsonValue(m_default_assessment_reports_destination));
    }
    if (m_default_process_owners.isSet()) {
        obj.insert(QString("defaultProcessOwners"), ::OpenAPI::toJsonValue(m_default_process_owners));
    }
    if (m_kms_key_isSet) {
        obj.insert(QString("kmsKey"), ::OpenAPI::toJsonValue(m_kms_key));
    }
    if (m_evidence_finder_enablement.isSet()) {
        obj.insert(QString("evidenceFinderEnablement"), ::OpenAPI::toJsonValue(m_evidence_finder_enablement));
    }
    if (m_deregistration_policy.isSet()) {
        obj.insert(QString("deregistrationPolicy"), ::OpenAPI::toJsonValue(m_deregistration_policy));
    }
    if (m_default_export_destination.isSet()) {
        obj.insert(QString("defaultExportDestination"), ::OpenAPI::toJsonValue(m_default_export_destination));
    }
    return obj;
}

bool OAIGetSettingsResponse_settings::getIsAwsOrgEnabled() const {
    return m_is_aws_org_enabled;
}
void OAIGetSettingsResponse_settings::setIsAwsOrgEnabled(const bool &is_aws_org_enabled) {
    m_is_aws_org_enabled = is_aws_org_enabled;
    m_is_aws_org_enabled_isSet = true;
}

bool OAIGetSettingsResponse_settings::is_is_aws_org_enabled_Set() const{
    return m_is_aws_org_enabled_isSet;
}

bool OAIGetSettingsResponse_settings::is_is_aws_org_enabled_Valid() const{
    return m_is_aws_org_enabled_isValid;
}

QString OAIGetSettingsResponse_settings::getSnsTopic() const {
    return m_sns_topic;
}
void OAIGetSettingsResponse_settings::setSnsTopic(const QString &sns_topic) {
    m_sns_topic = sns_topic;
    m_sns_topic_isSet = true;
}

bool OAIGetSettingsResponse_settings::is_sns_topic_Set() const{
    return m_sns_topic_isSet;
}

bool OAIGetSettingsResponse_settings::is_sns_topic_Valid() const{
    return m_sns_topic_isValid;
}

OAISettings_defaultAssessmentReportsDestination OAIGetSettingsResponse_settings::getDefaultAssessmentReportsDestination() const {
    return m_default_assessment_reports_destination;
}
void OAIGetSettingsResponse_settings::setDefaultAssessmentReportsDestination(const OAISettings_defaultAssessmentReportsDestination &default_assessment_reports_destination) {
    m_default_assessment_reports_destination = default_assessment_reports_destination;
    m_default_assessment_reports_destination_isSet = true;
}

bool OAIGetSettingsResponse_settings::is_default_assessment_reports_destination_Set() const{
    return m_default_assessment_reports_destination_isSet;
}

bool OAIGetSettingsResponse_settings::is_default_assessment_reports_destination_Valid() const{
    return m_default_assessment_reports_destination_isValid;
}

QList OAIGetSettingsResponse_settings::getDefaultProcessOwners() const {
    return m_default_process_owners;
}
void OAIGetSettingsResponse_settings::setDefaultProcessOwners(const QList &default_process_owners) {
    m_default_process_owners = default_process_owners;
    m_default_process_owners_isSet = true;
}

bool OAIGetSettingsResponse_settings::is_default_process_owners_Set() const{
    return m_default_process_owners_isSet;
}

bool OAIGetSettingsResponse_settings::is_default_process_owners_Valid() const{
    return m_default_process_owners_isValid;
}

QString OAIGetSettingsResponse_settings::getKmsKey() const {
    return m_kms_key;
}
void OAIGetSettingsResponse_settings::setKmsKey(const QString &kms_key) {
    m_kms_key = kms_key;
    m_kms_key_isSet = true;
}

bool OAIGetSettingsResponse_settings::is_kms_key_Set() const{
    return m_kms_key_isSet;
}

bool OAIGetSettingsResponse_settings::is_kms_key_Valid() const{
    return m_kms_key_isValid;
}

OAISettings_evidenceFinderEnablement OAIGetSettingsResponse_settings::getEvidenceFinderEnablement() const {
    return m_evidence_finder_enablement;
}
void OAIGetSettingsResponse_settings::setEvidenceFinderEnablement(const OAISettings_evidenceFinderEnablement &evidence_finder_enablement) {
    m_evidence_finder_enablement = evidence_finder_enablement;
    m_evidence_finder_enablement_isSet = true;
}

bool OAIGetSettingsResponse_settings::is_evidence_finder_enablement_Set() const{
    return m_evidence_finder_enablement_isSet;
}

bool OAIGetSettingsResponse_settings::is_evidence_finder_enablement_Valid() const{
    return m_evidence_finder_enablement_isValid;
}

OAISettings_deregistrationPolicy OAIGetSettingsResponse_settings::getDeregistrationPolicy() const {
    return m_deregistration_policy;
}
void OAIGetSettingsResponse_settings::setDeregistrationPolicy(const OAISettings_deregistrationPolicy &deregistration_policy) {
    m_deregistration_policy = deregistration_policy;
    m_deregistration_policy_isSet = true;
}

bool OAIGetSettingsResponse_settings::is_deregistration_policy_Set() const{
    return m_deregistration_policy_isSet;
}

bool OAIGetSettingsResponse_settings::is_deregistration_policy_Valid() const{
    return m_deregistration_policy_isValid;
}

OAISettings_defaultExportDestination OAIGetSettingsResponse_settings::getDefaultExportDestination() const {
    return m_default_export_destination;
}
void OAIGetSettingsResponse_settings::setDefaultExportDestination(const OAISettings_defaultExportDestination &default_export_destination) {
    m_default_export_destination = default_export_destination;
    m_default_export_destination_isSet = true;
}

bool OAIGetSettingsResponse_settings::is_default_export_destination_Set() const{
    return m_default_export_destination_isSet;
}

bool OAIGetSettingsResponse_settings::is_default_export_destination_Valid() const{
    return m_default_export_destination_isValid;
}

bool OAIGetSettingsResponse_settings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_aws_org_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sns_topic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_assessment_reports_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_process_owners.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evidence_finder_enablement.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deregistration_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_export_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetSettingsResponse_settings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
