/**
 * AWS Audit Manager
 * <p>Welcome to the Audit Manager API reference. This guide is for developers who need detailed information about the Audit Manager API operations, data types, and errors. </p> <p>Audit Manager is a service that provides automated evidence collection so that you can continually audit your Amazon Web Services usage. You can use it to assess the effectiveness of your controls, manage risk, and simplify compliance.</p> <p>Audit Manager provides prebuilt frameworks that structure and automate assessments for a given compliance standard. Frameworks include a prebuilt collection of controls with descriptions and testing procedures. These controls are grouped according to the requirements of the specified compliance standard or regulation. You can also customize frameworks and controls to support internal audits with specific requirements. </p> <p>Use the following links to get started with the Audit Manager API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Audit Manager API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Audit Manager data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Audit Manager, we recommend that you review the <a href=\"https://docs.aws.amazon.com/audit-manager/latest/userguide/what-is.html\"> Audit Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateAssessmentControlResponse_control.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateAssessmentControlResponse_control::OAIUpdateAssessmentControlResponse_control(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateAssessmentControlResponse_control::OAIUpdateAssessmentControlResponse_control() {
    this->initializeModel();
}

OAIUpdateAssessmentControlResponse_control::~OAIUpdateAssessmentControlResponse_control() {}

void OAIUpdateAssessmentControlResponse_control::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_response_isSet = false;
    m_response_isValid = false;

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_evidence_sources_isSet = false;
    m_evidence_sources_isValid = false;

    m_evidence_count_isSet = false;
    m_evidence_count_isValid = false;

    m_assessment_report_evidence_count_isSet = false;
    m_assessment_report_evidence_count_isValid = false;
}

void OAIUpdateAssessmentControlResponse_control::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateAssessmentControlResponse_control::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_response_isValid = ::OpenAPI::fromJsonValue(m_response, json[QString("response")]);
    m_response_isSet = !json[QString("response")].isNull() && m_response_isValid;

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_evidence_sources_isValid = ::OpenAPI::fromJsonValue(m_evidence_sources, json[QString("evidenceSources")]);
    m_evidence_sources_isSet = !json[QString("evidenceSources")].isNull() && m_evidence_sources_isValid;

    m_evidence_count_isValid = ::OpenAPI::fromJsonValue(m_evidence_count, json[QString("evidenceCount")]);
    m_evidence_count_isSet = !json[QString("evidenceCount")].isNull() && m_evidence_count_isValid;

    m_assessment_report_evidence_count_isValid = ::OpenAPI::fromJsonValue(m_assessment_report_evidence_count, json[QString("assessmentReportEvidenceCount")]);
    m_assessment_report_evidence_count_isSet = !json[QString("assessmentReportEvidenceCount")].isNull() && m_assessment_report_evidence_count_isValid;
}

QString OAIUpdateAssessmentControlResponse_control::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateAssessmentControlResponse_control::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_response.isSet()) {
        obj.insert(QString("response"), ::OpenAPI::toJsonValue(m_response));
    }
    if (m_comments.isSet()) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_evidence_sources.isSet()) {
        obj.insert(QString("evidenceSources"), ::OpenAPI::toJsonValue(m_evidence_sources));
    }
    if (m_evidence_count_isSet) {
        obj.insert(QString("evidenceCount"), ::OpenAPI::toJsonValue(m_evidence_count));
    }
    if (m_assessment_report_evidence_count_isSet) {
        obj.insert(QString("assessmentReportEvidenceCount"), ::OpenAPI::toJsonValue(m_assessment_report_evidence_count));
    }
    return obj;
}

QString OAIUpdateAssessmentControlResponse_control::getId() const {
    return m_id;
}
void OAIUpdateAssessmentControlResponse_control::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUpdateAssessmentControlResponse_control::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUpdateAssessmentControlResponse_control::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIUpdateAssessmentControlResponse_control::getName() const {
    return m_name;
}
void OAIUpdateAssessmentControlResponse_control::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdateAssessmentControlResponse_control::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateAssessmentControlResponse_control::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUpdateAssessmentControlResponse_control::getDescription() const {
    return m_description;
}
void OAIUpdateAssessmentControlResponse_control::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpdateAssessmentControlResponse_control::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdateAssessmentControlResponse_control::is_description_Valid() const{
    return m_description_isValid;
}

OAIControlStatus OAIUpdateAssessmentControlResponse_control::getStatus() const {
    return m_status;
}
void OAIUpdateAssessmentControlResponse_control::setStatus(const OAIControlStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIUpdateAssessmentControlResponse_control::is_status_Set() const{
    return m_status_isSet;
}

bool OAIUpdateAssessmentControlResponse_control::is_status_Valid() const{
    return m_status_isValid;
}

OAIControlResponse OAIUpdateAssessmentControlResponse_control::getResponse() const {
    return m_response;
}
void OAIUpdateAssessmentControlResponse_control::setResponse(const OAIControlResponse &response) {
    m_response = response;
    m_response_isSet = true;
}

bool OAIUpdateAssessmentControlResponse_control::is_response_Set() const{
    return m_response_isSet;
}

bool OAIUpdateAssessmentControlResponse_control::is_response_Valid() const{
    return m_response_isValid;
}

QList OAIUpdateAssessmentControlResponse_control::getComments() const {
    return m_comments;
}
void OAIUpdateAssessmentControlResponse_control::setComments(const QList &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAIUpdateAssessmentControlResponse_control::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAIUpdateAssessmentControlResponse_control::is_comments_Valid() const{
    return m_comments_isValid;
}

QList OAIUpdateAssessmentControlResponse_control::getEvidenceSources() const {
    return m_evidence_sources;
}
void OAIUpdateAssessmentControlResponse_control::setEvidenceSources(const QList &evidence_sources) {
    m_evidence_sources = evidence_sources;
    m_evidence_sources_isSet = true;
}

bool OAIUpdateAssessmentControlResponse_control::is_evidence_sources_Set() const{
    return m_evidence_sources_isSet;
}

bool OAIUpdateAssessmentControlResponse_control::is_evidence_sources_Valid() const{
    return m_evidence_sources_isValid;
}

qint32 OAIUpdateAssessmentControlResponse_control::getEvidenceCount() const {
    return m_evidence_count;
}
void OAIUpdateAssessmentControlResponse_control::setEvidenceCount(const qint32 &evidence_count) {
    m_evidence_count = evidence_count;
    m_evidence_count_isSet = true;
}

bool OAIUpdateAssessmentControlResponse_control::is_evidence_count_Set() const{
    return m_evidence_count_isSet;
}

bool OAIUpdateAssessmentControlResponse_control::is_evidence_count_Valid() const{
    return m_evidence_count_isValid;
}

qint32 OAIUpdateAssessmentControlResponse_control::getAssessmentReportEvidenceCount() const {
    return m_assessment_report_evidence_count;
}
void OAIUpdateAssessmentControlResponse_control::setAssessmentReportEvidenceCount(const qint32 &assessment_report_evidence_count) {
    m_assessment_report_evidence_count = assessment_report_evidence_count;
    m_assessment_report_evidence_count_isSet = true;
}

bool OAIUpdateAssessmentControlResponse_control::is_assessment_report_evidence_count_Set() const{
    return m_assessment_report_evidence_count_isSet;
}

bool OAIUpdateAssessmentControlResponse_control::is_assessment_report_evidence_count_Valid() const{
    return m_assessment_report_evidence_count_isValid;
}

bool OAIUpdateAssessmentControlResponse_control::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_response.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_comments.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_evidence_sources.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_evidence_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assessment_report_evidence_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateAssessmentControlResponse_control::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
