/**
 * AWS Audit Manager
 * <p>Welcome to the Audit Manager API reference. This guide is for developers who need detailed information about the Audit Manager API operations, data types, and errors. </p> <p>Audit Manager is a service that provides automated evidence collection so that you can continually audit your Amazon Web Services usage. You can use it to assess the effectiveness of your controls, manage risk, and simplify compliance.</p> <p>Audit Manager provides prebuilt frameworks that structure and automate assessments for a given compliance standard. Frameworks include a prebuilt collection of controls with descriptions and testing procedures. These controls are grouped according to the requirements of the specified compliance standard or regulation. You can also customize frameworks and controls to support internal audits with specific requirements. </p> <p>Use the following links to get started with the Audit Manager API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Audit Manager API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Audit Manager data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Audit Manager, we recommend that you review the <a href=\"https://docs.aws.amazon.com/audit-manager/latest/userguide/what-is.html\"> Audit Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIControlDomainInsights.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIControlDomainInsights::OAIControlDomainInsights(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIControlDomainInsights::OAIControlDomainInsights() {
    this->initializeModel();
}

OAIControlDomainInsights::~OAIControlDomainInsights() {}

void OAIControlDomainInsights::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_controls_count_by_noncompliant_evidence_isSet = false;
    m_controls_count_by_noncompliant_evidence_isValid = false;

    m_total_controls_count_isSet = false;
    m_total_controls_count_isValid = false;

    m_evidence_insights_isSet = false;
    m_evidence_insights_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;
}

void OAIControlDomainInsights::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIControlDomainInsights::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_controls_count_by_noncompliant_evidence_isValid = ::OpenAPI::fromJsonValue(m_controls_count_by_noncompliant_evidence, json[QString("controlsCountByNoncompliantEvidence")]);
    m_controls_count_by_noncompliant_evidence_isSet = !json[QString("controlsCountByNoncompliantEvidence")].isNull() && m_controls_count_by_noncompliant_evidence_isValid;

    m_total_controls_count_isValid = ::OpenAPI::fromJsonValue(m_total_controls_count, json[QString("totalControlsCount")]);
    m_total_controls_count_isSet = !json[QString("totalControlsCount")].isNull() && m_total_controls_count_isValid;

    m_evidence_insights_isValid = ::OpenAPI::fromJsonValue(m_evidence_insights, json[QString("evidenceInsights")]);
    m_evidence_insights_isSet = !json[QString("evidenceInsights")].isNull() && m_evidence_insights_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("lastUpdated")]);
    m_last_updated_isSet = !json[QString("lastUpdated")].isNull() && m_last_updated_isValid;
}

QString OAIControlDomainInsights::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIControlDomainInsights::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_controls_count_by_noncompliant_evidence_isSet) {
        obj.insert(QString("controlsCountByNoncompliantEvidence"), ::OpenAPI::toJsonValue(m_controls_count_by_noncompliant_evidence));
    }
    if (m_total_controls_count_isSet) {
        obj.insert(QString("totalControlsCount"), ::OpenAPI::toJsonValue(m_total_controls_count));
    }
    if (m_evidence_insights.isSet()) {
        obj.insert(QString("evidenceInsights"), ::OpenAPI::toJsonValue(m_evidence_insights));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("lastUpdated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    return obj;
}

QString OAIControlDomainInsights::getName() const {
    return m_name;
}
void OAIControlDomainInsights::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIControlDomainInsights::is_name_Set() const{
    return m_name_isSet;
}

bool OAIControlDomainInsights::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIControlDomainInsights::getId() const {
    return m_id;
}
void OAIControlDomainInsights::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIControlDomainInsights::is_id_Set() const{
    return m_id_isSet;
}

bool OAIControlDomainInsights::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIControlDomainInsights::getControlsCountByNoncompliantEvidence() const {
    return m_controls_count_by_noncompliant_evidence;
}
void OAIControlDomainInsights::setControlsCountByNoncompliantEvidence(const qint32 &controls_count_by_noncompliant_evidence) {
    m_controls_count_by_noncompliant_evidence = controls_count_by_noncompliant_evidence;
    m_controls_count_by_noncompliant_evidence_isSet = true;
}

bool OAIControlDomainInsights::is_controls_count_by_noncompliant_evidence_Set() const{
    return m_controls_count_by_noncompliant_evidence_isSet;
}

bool OAIControlDomainInsights::is_controls_count_by_noncompliant_evidence_Valid() const{
    return m_controls_count_by_noncompliant_evidence_isValid;
}

qint32 OAIControlDomainInsights::getTotalControlsCount() const {
    return m_total_controls_count;
}
void OAIControlDomainInsights::setTotalControlsCount(const qint32 &total_controls_count) {
    m_total_controls_count = total_controls_count;
    m_total_controls_count_isSet = true;
}

bool OAIControlDomainInsights::is_total_controls_count_Set() const{
    return m_total_controls_count_isSet;
}

bool OAIControlDomainInsights::is_total_controls_count_Valid() const{
    return m_total_controls_count_isValid;
}

OAIControlDomainInsights_evidenceInsights OAIControlDomainInsights::getEvidenceInsights() const {
    return m_evidence_insights;
}
void OAIControlDomainInsights::setEvidenceInsights(const OAIControlDomainInsights_evidenceInsights &evidence_insights) {
    m_evidence_insights = evidence_insights;
    m_evidence_insights_isSet = true;
}

bool OAIControlDomainInsights::is_evidence_insights_Set() const{
    return m_evidence_insights_isSet;
}

bool OAIControlDomainInsights::is_evidence_insights_Valid() const{
    return m_evidence_insights_isValid;
}

QDateTime OAIControlDomainInsights::getLastUpdated() const {
    return m_last_updated;
}
void OAIControlDomainInsights::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIControlDomainInsights::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIControlDomainInsights::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

bool OAIControlDomainInsights::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_controls_count_by_noncompliant_evidence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_controls_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evidence_insights.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIControlDomainInsights::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
