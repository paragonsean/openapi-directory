/**
 * AWS Audit Manager
 * <p>Welcome to the Audit Manager API reference. This guide is for developers who need detailed information about the Audit Manager API operations, data types, and errors. </p> <p>Audit Manager is a service that provides automated evidence collection so that you can continually audit your Amazon Web Services usage. You can use it to assess the effectiveness of your controls, manage risk, and simplify compliance.</p> <p>Audit Manager provides prebuilt frameworks that structure and automate assessments for a given compliance standard. Frameworks include a prebuilt collection of controls with descriptions and testing procedures. These controls are grouped according to the requirements of the specified compliance standard or regulation. You can also customize frameworks and controls to support internal audits with specific requirements. </p> <p>Use the following links to get started with the Audit Manager API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Audit Manager API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Audit Manager data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Audit Manager, we recommend that you review the <a href=\"https://docs.aws.amazon.com/audit-manager/latest/userguide/what-is.html\"> Audit Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUpdateAssessmentControlSetStatusResponse_controlSet.h
 *
 * 
 */

#ifndef OAIUpdateAssessmentControlSetStatusResponse_controlSet_H
#define OAIUpdateAssessmentControlSetStatusResponse_controlSet_H

#include <QJsonObject>

#include "OAIControlSetStatus.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIUpdateAssessmentControlSetStatusResponse_controlSet : public OAIObject {
public:
    OAIUpdateAssessmentControlSetStatusResponse_controlSet();
    OAIUpdateAssessmentControlSetStatusResponse_controlSet(QString json);
    ~OAIUpdateAssessmentControlSetStatusResponse_controlSet() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    OAIControlSetStatus getStatus() const;
    void setStatus(const OAIControlSetStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QList getRoles() const;
    void setRoles(const QList &roles);
    bool is_roles_Set() const;
    bool is_roles_Valid() const;

    QList getControls() const;
    void setControls(const QList &controls);
    bool is_controls_Set() const;
    bool is_controls_Valid() const;

    QList getDelegations() const;
    void setDelegations(const QList &delegations);
    bool is_delegations_Set() const;
    bool is_delegations_Valid() const;

    qint32 getSystemEvidenceCount() const;
    void setSystemEvidenceCount(const qint32 &system_evidence_count);
    bool is_system_evidence_count_Set() const;
    bool is_system_evidence_count_Valid() const;

    qint32 getManualEvidenceCount() const;
    void setManualEvidenceCount(const qint32 &manual_evidence_count);
    bool is_manual_evidence_count_Set() const;
    bool is_manual_evidence_count_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    OAIControlSetStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QList m_roles;
    bool m_roles_isSet;
    bool m_roles_isValid;

    QList m_controls;
    bool m_controls_isSet;
    bool m_controls_isValid;

    QList m_delegations;
    bool m_delegations_isSet;
    bool m_delegations_isValid;

    qint32 m_system_evidence_count;
    bool m_system_evidence_count_isSet;
    bool m_system_evidence_count_isValid;

    qint32 m_manual_evidence_count;
    bool m_manual_evidence_count_isSet;
    bool m_manual_evidence_count_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUpdateAssessmentControlSetStatusResponse_controlSet)

#endif // OAIUpdateAssessmentControlSetStatusResponse_controlSet_H
