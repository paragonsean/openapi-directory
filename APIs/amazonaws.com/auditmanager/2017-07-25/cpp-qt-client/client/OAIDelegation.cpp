/**
 * AWS Audit Manager
 * <p>Welcome to the Audit Manager API reference. This guide is for developers who need detailed information about the Audit Manager API operations, data types, and errors. </p> <p>Audit Manager is a service that provides automated evidence collection so that you can continually audit your Amazon Web Services usage. You can use it to assess the effectiveness of your controls, manage risk, and simplify compliance.</p> <p>Audit Manager provides prebuilt frameworks that structure and automate assessments for a given compliance standard. Frameworks include a prebuilt collection of controls with descriptions and testing procedures. These controls are grouped according to the requirements of the specified compliance standard or regulation. You can also customize frameworks and controls to support internal audits with specific requirements. </p> <p>Use the following links to get started with the Audit Manager API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Audit Manager API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Audit Manager data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Audit Manager, we recommend that you review the <a href=\"https://docs.aws.amazon.com/audit-manager/latest/userguide/what-is.html\"> Audit Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDelegation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDelegation::OAIDelegation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDelegation::OAIDelegation() {
    this->initializeModel();
}

OAIDelegation::~OAIDelegation() {}

void OAIDelegation::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_assessment_name_isSet = false;
    m_assessment_name_isValid = false;

    m_assessment_id_isSet = false;
    m_assessment_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_role_type_isSet = false;
    m_role_type_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_control_set_id_isSet = false;
    m_control_set_id_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;
}

void OAIDelegation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDelegation::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_assessment_name_isValid = ::OpenAPI::fromJsonValue(m_assessment_name, json[QString("assessmentName")]);
    m_assessment_name_isSet = !json[QString("assessmentName")].isNull() && m_assessment_name_isValid;

    m_assessment_id_isValid = ::OpenAPI::fromJsonValue(m_assessment_id, json[QString("assessmentId")]);
    m_assessment_id_isSet = !json[QString("assessmentId")].isNull() && m_assessment_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("roleArn")]);
    m_role_arn_isSet = !json[QString("roleArn")].isNull() && m_role_arn_isValid;

    m_role_type_isValid = ::OpenAPI::fromJsonValue(m_role_type, json[QString("roleType")]);
    m_role_type_isSet = !json[QString("roleType")].isNull() && m_role_type_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("lastUpdated")]);
    m_last_updated_isSet = !json[QString("lastUpdated")].isNull() && m_last_updated_isValid;

    m_control_set_id_isValid = ::OpenAPI::fromJsonValue(m_control_set_id, json[QString("controlSetId")]);
    m_control_set_id_isSet = !json[QString("controlSetId")].isNull() && m_control_set_id_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;
}

QString OAIDelegation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDelegation::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_assessment_name_isSet) {
        obj.insert(QString("assessmentName"), ::OpenAPI::toJsonValue(m_assessment_name));
    }
    if (m_assessment_id_isSet) {
        obj.insert(QString("assessmentId"), ::OpenAPI::toJsonValue(m_assessment_id));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("roleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_role_type.isSet()) {
        obj.insert(QString("roleType"), ::OpenAPI::toJsonValue(m_role_type));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("lastUpdated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_control_set_id_isSet) {
        obj.insert(QString("controlSetId"), ::OpenAPI::toJsonValue(m_control_set_id));
    }
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_created_by_isSet) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    return obj;
}

QString OAIDelegation::getId() const {
    return m_id;
}
void OAIDelegation::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDelegation::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDelegation::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIDelegation::getAssessmentName() const {
    return m_assessment_name;
}
void OAIDelegation::setAssessmentName(const QString &assessment_name) {
    m_assessment_name = assessment_name;
    m_assessment_name_isSet = true;
}

bool OAIDelegation::is_assessment_name_Set() const{
    return m_assessment_name_isSet;
}

bool OAIDelegation::is_assessment_name_Valid() const{
    return m_assessment_name_isValid;
}

QString OAIDelegation::getAssessmentId() const {
    return m_assessment_id;
}
void OAIDelegation::setAssessmentId(const QString &assessment_id) {
    m_assessment_id = assessment_id;
    m_assessment_id_isSet = true;
}

bool OAIDelegation::is_assessment_id_Set() const{
    return m_assessment_id_isSet;
}

bool OAIDelegation::is_assessment_id_Valid() const{
    return m_assessment_id_isValid;
}

OAIDelegationStatus OAIDelegation::getStatus() const {
    return m_status;
}
void OAIDelegation::setStatus(const OAIDelegationStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDelegation::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDelegation::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDelegation::getRoleArn() const {
    return m_role_arn;
}
void OAIDelegation::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIDelegation::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIDelegation::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

OAIRoleType OAIDelegation::getRoleType() const {
    return m_role_type;
}
void OAIDelegation::setRoleType(const OAIRoleType &role_type) {
    m_role_type = role_type;
    m_role_type_isSet = true;
}

bool OAIDelegation::is_role_type_Set() const{
    return m_role_type_isSet;
}

bool OAIDelegation::is_role_type_Valid() const{
    return m_role_type_isValid;
}

QDateTime OAIDelegation::getCreationTime() const {
    return m_creation_time;
}
void OAIDelegation::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIDelegation::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIDelegation::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAIDelegation::getLastUpdated() const {
    return m_last_updated;
}
void OAIDelegation::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIDelegation::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIDelegation::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QString OAIDelegation::getControlSetId() const {
    return m_control_set_id;
}
void OAIDelegation::setControlSetId(const QString &control_set_id) {
    m_control_set_id = control_set_id;
    m_control_set_id_isSet = true;
}

bool OAIDelegation::is_control_set_id_Set() const{
    return m_control_set_id_isSet;
}

bool OAIDelegation::is_control_set_id_Valid() const{
    return m_control_set_id_isValid;
}

QString OAIDelegation::getComment() const {
    return m_comment;
}
void OAIDelegation::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIDelegation::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIDelegation::is_comment_Valid() const{
    return m_comment_isValid;
}

QString OAIDelegation::getCreatedBy() const {
    return m_created_by;
}
void OAIDelegation::setCreatedBy(const QString &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIDelegation::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIDelegation::is_created_by_Valid() const{
    return m_created_by_isValid;
}

bool OAIDelegation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assessment_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assessment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_control_set_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDelegation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
