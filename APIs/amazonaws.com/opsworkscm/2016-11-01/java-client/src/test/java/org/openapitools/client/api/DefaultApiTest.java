/*
 * AWS OpsWorks CM
 * <fullname>AWS OpsWorks CM</fullname> <p>AWS OpsWorks for configuration management (CM) is a service that runs and manages configuration management servers. You can use AWS OpsWorks CM to create and manage AWS OpsWorks for Chef Automate and AWS OpsWorks for Puppet Enterprise servers, and add or remove nodes for the servers to manage.</p> <p> <b>Glossary of terms</b> </p> <ul> <li> <p> <b>Server</b>: A configuration management server that can be highly-available. The configuration management server runs on an Amazon Elastic Compute Cloud (EC2) instance, and may use various other AWS services, such as Amazon Relational Database Service (RDS) and Elastic Load Balancing. A server is a generic abstraction over the configuration manager that you want to use, much like Amazon RDS. In AWS OpsWorks CM, you do not start or stop servers. After you create servers, they continue to run until they are deleted.</p> </li> <li> <p> <b>Engine</b>: The engine is the specific configuration manager that you want to use. Valid values in this release include <code>ChefAutomate</code> and <code>Puppet</code>.</p> </li> <li> <p> <b>Backup</b>: This is an application-level backup of the data that the configuration manager stores. AWS OpsWorks CM creates an S3 bucket for backups when you launch the first server. A backup maintains a snapshot of a server's configuration-related attributes at the time the backup starts.</p> </li> <li> <p> <b>Events</b>: Events are always related to a server. Events are written during server creation, when health checks run, when backups are created, when system maintenance is performed, etc. When you delete a server, the server's events are also deleted.</p> </li> <li> <p> <b>Account attributes</b>: Every account has attributes that are assigned in the AWS OpsWorks CM database. These attributes store information about configuration limits (servers, backups, etc.) and your customer account. </p> </li> </ul> <p> <b>Endpoints</b> </p> <p>AWS OpsWorks CM supports the following endpoints, all HTTPS. You must connect to one of the following endpoints. Your servers can only be accessed or managed within the endpoint in which they are created.</p> <ul> <li> <p>opsworks-cm.us-east-1.amazonaws.com</p> </li> <li> <p>opsworks-cm.us-east-2.amazonaws.com</p> </li> <li> <p>opsworks-cm.us-west-1.amazonaws.com</p> </li> <li> <p>opsworks-cm.us-west-2.amazonaws.com</p> </li> <li> <p>opsworks-cm.ap-northeast-1.amazonaws.com</p> </li> <li> <p>opsworks-cm.ap-southeast-1.amazonaws.com</p> </li> <li> <p>opsworks-cm.ap-southeast-2.amazonaws.com</p> </li> <li> <p>opsworks-cm.eu-central-1.amazonaws.com</p> </li> <li> <p>opsworks-cm.eu-west-1.amazonaws.com</p> </li> </ul> <p>For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/opsworks-service.html\">AWS OpsWorks endpoints and quotas</a> in the AWS General Reference.</p> <p> <b>Throttling limits</b> </p> <p>All API operations allow for five requests per second with a burst of 10 requests per second.</p>
 *
 * The version of the OpenAPI document: 2016-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AssociateNodeRequest;
import org.openapitools.client.model.AssociateNodeResponse;
import org.openapitools.client.model.CreateBackupRequest;
import org.openapitools.client.model.CreateBackupResponse;
import org.openapitools.client.model.CreateServerRequest;
import org.openapitools.client.model.CreateServerResponse;
import org.openapitools.client.model.DeleteBackupRequest;
import org.openapitools.client.model.DeleteServerRequest;
import org.openapitools.client.model.DescribeAccountAttributesResponse;
import org.openapitools.client.model.DescribeBackupsRequest;
import org.openapitools.client.model.DescribeBackupsResponse;
import org.openapitools.client.model.DescribeEventsRequest;
import org.openapitools.client.model.DescribeEventsResponse;
import org.openapitools.client.model.DescribeNodeAssociationStatusRequest;
import org.openapitools.client.model.DescribeNodeAssociationStatusResponse;
import org.openapitools.client.model.DescribeServersRequest;
import org.openapitools.client.model.DescribeServersResponse;
import org.openapitools.client.model.DisassociateNodeRequest;
import org.openapitools.client.model.DisassociateNodeResponse;
import org.openapitools.client.model.ExportServerEngineAttributeRequest;
import org.openapitools.client.model.ExportServerEngineAttributeResponse;
import org.openapitools.client.model.ListTagsForResourceRequest;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.RestoreServerRequest;
import org.openapitools.client.model.RestoreServerResponse;
import org.openapitools.client.model.StartMaintenanceRequest;
import org.openapitools.client.model.StartMaintenanceResponse;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UntagResourceRequest;
import org.openapitools.client.model.UpdateServerEngineAttributesRequest;
import org.openapitools.client.model.UpdateServerEngineAttributesResponse;
import org.openapitools.client.model.UpdateServerRequest;
import org.openapitools.client.model.UpdateServerResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * &lt;p&gt; Associates a new node with the server. For more information about how to disassociate a node, see &lt;a&gt;DisassociateNode&lt;/a&gt;.&lt;/p&gt; &lt;p&gt; On a Chef server: This command is an alternative to &lt;code&gt;knife bootstrap&lt;/code&gt;.&lt;/p&gt; &lt;p&gt; Example (Chef): &lt;code&gt;aws opsworks-cm associate-node --server-name &lt;i&gt;MyServer&lt;/i&gt; --node-name &lt;i&gt;MyManagedNode&lt;/i&gt; --engine-attributes \&quot;Name&#x3D;&lt;i&gt;CHEF_ORGANIZATION&lt;/i&gt;,Value&#x3D;default\&quot; \&quot;Name&#x3D;&lt;i&gt;CHEF_NODE_PUBLIC_KEY&lt;/i&gt;,Value&#x3D;&lt;i&gt;public-key-pem&lt;/i&gt;\&quot;&lt;/code&gt; &lt;/p&gt; &lt;p&gt; On a Puppet server, this command is an alternative to the &lt;code&gt;puppet cert sign&lt;/code&gt; command that signs a Puppet node CSR. &lt;/p&gt; &lt;p&gt; Example (Puppet): &lt;code&gt;aws opsworks-cm associate-node --server-name &lt;i&gt;MyServer&lt;/i&gt; --node-name &lt;i&gt;MyManagedNode&lt;/i&gt; --engine-attributes \&quot;Name&#x3D;&lt;i&gt;PUPPET_NODE_CSR&lt;/i&gt;,Value&#x3D;&lt;i&gt;csr-pem&lt;/i&gt;\&quot;&lt;/code&gt; &lt;/p&gt; &lt;p&gt; A node can can only be associated with servers that are in a &lt;code&gt;HEALTHY&lt;/code&gt; state. Otherwise, an &lt;code&gt;InvalidStateException&lt;/code&gt; is thrown. A &lt;code&gt;ResourceNotFoundException&lt;/code&gt; is thrown when the server does not exist. A &lt;code&gt;ValidationException&lt;/code&gt; is raised when parameters of the request are not valid. The AssociateNode API call can be integrated into Auto Scaling configurations, AWS Cloudformation templates, or the user data of a server&#39;s instance. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associateNodeTest() throws ApiException {
        String xAmzTarget = null;
        AssociateNodeRequest associateNodeRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AssociateNodeResponse response = api.associateNode(xAmzTarget, associateNodeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt; Creates an application-level backup of a server. While the server is in the &lt;code&gt;BACKING_UP&lt;/code&gt; state, the server cannot be changed, and no additional backup can be created. &lt;/p&gt; &lt;p&gt; Backups can be created for servers in &lt;code&gt;RUNNING&lt;/code&gt;, &lt;code&gt;HEALTHY&lt;/code&gt;, and &lt;code&gt;UNHEALTHY&lt;/code&gt; states. By default, you can create a maximum of 50 manual backups. &lt;/p&gt; &lt;p&gt; This operation is asynchronous. &lt;/p&gt; &lt;p&gt; A &lt;code&gt;LimitExceededException&lt;/code&gt; is thrown when the maximum number of manual backups is reached. An &lt;code&gt;InvalidStateException&lt;/code&gt; is thrown when the server is not in any of the following states: RUNNING, HEALTHY, or UNHEALTHY. A &lt;code&gt;ResourceNotFoundException&lt;/code&gt; is thrown when the server is not found. A &lt;code&gt;ValidationException&lt;/code&gt; is thrown when parameters of the request are not valid. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createBackupTest() throws ApiException {
        String xAmzTarget = null;
        CreateBackupRequest createBackupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateBackupResponse response = api.createBackup(xAmzTarget, createBackupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt; Creates and immedately starts a new server. The server is ready to use when it is in the &lt;code&gt;HEALTHY&lt;/code&gt; state. By default, you can create a maximum of 10 servers. &lt;/p&gt; &lt;p&gt; This operation is asynchronous. &lt;/p&gt; &lt;p&gt; A &lt;code&gt;LimitExceededException&lt;/code&gt; is thrown when you have created the maximum number of servers (10). A &lt;code&gt;ResourceAlreadyExistsException&lt;/code&gt; is thrown when a server with the same name already exists in the account. A &lt;code&gt;ResourceNotFoundException&lt;/code&gt; is thrown when you specify a backup ID that is not valid or is for a backup that does not exist. A &lt;code&gt;ValidationException&lt;/code&gt; is thrown when parameters of the request are not valid. &lt;/p&gt; &lt;p&gt; If you do not specify a security group by adding the &lt;code&gt;SecurityGroupIds&lt;/code&gt; parameter, AWS OpsWorks creates a new security group. &lt;/p&gt; &lt;p&gt; &lt;i&gt;Chef Automate:&lt;/i&gt; The default security group opens the Chef server to the world on TCP port 443. If a KeyName is present, AWS OpsWorks enables SSH access. SSH is also open to the world on TCP port 22. &lt;/p&gt; &lt;p&gt; &lt;i&gt;Puppet Enterprise:&lt;/i&gt; The default security group opens TCP ports 22, 443, 4433, 8140, 8142, 8143, and 8170. If a KeyName is present, AWS OpsWorks enables SSH access. SSH is also open to the world on TCP port 22. &lt;/p&gt; &lt;p&gt;By default, your server is accessible from any IP address. We recommend that you update your security group rules to allow access from known IP addresses and address ranges only. To edit security group rules, open Security Groups in the navigation pane of the EC2 management console. &lt;/p&gt; &lt;p&gt;To specify your own domain for a server, and provide your own self-signed or CA-signed certificate and private key, specify values for &lt;code&gt;CustomDomain&lt;/code&gt;, &lt;code&gt;CustomCertificate&lt;/code&gt;, and &lt;code&gt;CustomPrivateKey&lt;/code&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createServerTest() throws ApiException {
        String xAmzTarget = null;
        CreateServerRequest createServerRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateServerResponse response = api.createServer(xAmzTarget, createServerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt; Deletes a backup. You can delete both manual and automated backups. This operation is asynchronous. &lt;/p&gt; &lt;p&gt; An &lt;code&gt;InvalidStateException&lt;/code&gt; is thrown when a backup deletion is already in progress. A &lt;code&gt;ResourceNotFoundException&lt;/code&gt; is thrown when the backup does not exist. A &lt;code&gt;ValidationException&lt;/code&gt; is thrown when parameters of the request are not valid. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteBackupTest() throws ApiException {
        String xAmzTarget = null;
        DeleteBackupRequest deleteBackupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteBackup(xAmzTarget, deleteBackupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt; Deletes the server and the underlying AWS CloudFormation stacks (including the server&#39;s EC2 instance). When you run this command, the server state is updated to &lt;code&gt;DELETING&lt;/code&gt;. After the server is deleted, it is no longer returned by &lt;code&gt;DescribeServer&lt;/code&gt; requests. If the AWS CloudFormation stack cannot be deleted, the server cannot be deleted. &lt;/p&gt; &lt;p&gt; This operation is asynchronous. &lt;/p&gt; &lt;p&gt; An &lt;code&gt;InvalidStateException&lt;/code&gt; is thrown when a server deletion is already in progress. A &lt;code&gt;ResourceNotFoundException&lt;/code&gt; is thrown when the server does not exist. A &lt;code&gt;ValidationException&lt;/code&gt; is raised when parameters of the request are not valid. &lt;/p&gt; &lt;p&gt; &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteServerTest() throws ApiException {
        String xAmzTarget = null;
        DeleteServerRequest deleteServerRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteServer(xAmzTarget, deleteServerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt; Describes your OpsWorks-CM account attributes. &lt;/p&gt; &lt;p&gt; This operation is synchronous. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeAccountAttributesTest() throws ApiException {
        String xAmzTarget = null;
        Object body = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeAccountAttributesResponse response = api.describeAccountAttributes(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt; Describes backups. The results are ordered by time, with newest backups first. If you do not specify a BackupId or ServerName, the command returns all backups. &lt;/p&gt; &lt;p&gt; This operation is synchronous. &lt;/p&gt; &lt;p&gt; A &lt;code&gt;ResourceNotFoundException&lt;/code&gt; is thrown when the backup does not exist. A &lt;code&gt;ValidationException&lt;/code&gt; is raised when parameters of the request are not valid. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeBackupsTest() throws ApiException {
        String xAmzTarget = null;
        DescribeBackupsRequest describeBackupsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        DescribeBackupsResponse response = api.describeBackups(xAmzTarget, describeBackupsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt; Describes events for a specified server. Results are ordered by time, with newest events first. &lt;/p&gt; &lt;p&gt; This operation is synchronous. &lt;/p&gt; &lt;p&gt; A &lt;code&gt;ResourceNotFoundException&lt;/code&gt; is thrown when the server does not exist. A &lt;code&gt;ValidationException&lt;/code&gt; is raised when parameters of the request are not valid. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeEventsTest() throws ApiException {
        String xAmzTarget = null;
        DescribeEventsRequest describeEventsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        DescribeEventsResponse response = api.describeEvents(xAmzTarget, describeEventsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt; Returns the current status of an existing association or disassociation request. &lt;/p&gt; &lt;p&gt; A &lt;code&gt;ResourceNotFoundException&lt;/code&gt; is thrown when no recent association or disassociation request with the specified token is found, or when the server does not exist. A &lt;code&gt;ValidationException&lt;/code&gt; is raised when parameters of the request are not valid. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeNodeAssociationStatusTest() throws ApiException {
        String xAmzTarget = null;
        DescribeNodeAssociationStatusRequest describeNodeAssociationStatusRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeNodeAssociationStatusResponse response = api.describeNodeAssociationStatus(xAmzTarget, describeNodeAssociationStatusRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt; Lists all configuration management servers that are identified with your account. Only the stored results from Amazon DynamoDB are returned. AWS OpsWorks CM does not query other services. &lt;/p&gt; &lt;p&gt; This operation is synchronous. &lt;/p&gt; &lt;p&gt; A &lt;code&gt;ResourceNotFoundException&lt;/code&gt; is thrown when the server does not exist. A &lt;code&gt;ValidationException&lt;/code&gt; is raised when parameters of the request are not valid. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeServersTest() throws ApiException {
        String xAmzTarget = null;
        DescribeServersRequest describeServersRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        DescribeServersResponse response = api.describeServers(xAmzTarget, describeServersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt; Disassociates a node from an AWS OpsWorks CM server, and removes the node from the server&#39;s managed nodes. After a node is disassociated, the node key pair is no longer valid for accessing the configuration manager&#39;s API. For more information about how to associate a node, see &lt;a&gt;AssociateNode&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;A node can can only be disassociated from a server that is in a &lt;code&gt;HEALTHY&lt;/code&gt; state. Otherwise, an &lt;code&gt;InvalidStateException&lt;/code&gt; is thrown. A &lt;code&gt;ResourceNotFoundException&lt;/code&gt; is thrown when the server does not exist. A &lt;code&gt;ValidationException&lt;/code&gt; is raised when parameters of the request are not valid. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociateNodeTest() throws ApiException {
        String xAmzTarget = null;
        DisassociateNodeRequest disassociateNodeRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DisassociateNodeResponse response = api.disassociateNode(xAmzTarget, disassociateNodeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt; Exports a specified server engine attribute as a base64-encoded string. For example, you can export user data that you can use in EC2 to associate nodes with a server. &lt;/p&gt; &lt;p&gt; This operation is synchronous. &lt;/p&gt; &lt;p&gt; A &lt;code&gt;ValidationException&lt;/code&gt; is raised when parameters of the request are not valid. A &lt;code&gt;ResourceNotFoundException&lt;/code&gt; is thrown when the server does not exist. An &lt;code&gt;InvalidStateException&lt;/code&gt; is thrown when the server is in any of the following states: CREATING, TERMINATED, FAILED or DELETING. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void exportServerEngineAttributeTest() throws ApiException {
        String xAmzTarget = null;
        ExportServerEngineAttributeRequest exportServerEngineAttributeRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ExportServerEngineAttributeResponse response = api.exportServerEngineAttribute(xAmzTarget, exportServerEngineAttributeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns a list of tags that are applied to the specified AWS OpsWorks for Chef Automate or AWS OpsWorks for Puppet Enterprise servers or backups.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String xAmzTarget = null;
        ListTagsForResourceRequest listTagsForResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListTagsForResourceResponse response = api.listTagsForResource(xAmzTarget, listTagsForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt; Restores a backup to a server that is in a &lt;code&gt;CONNECTION_LOST&lt;/code&gt;, &lt;code&gt;HEALTHY&lt;/code&gt;, &lt;code&gt;RUNNING&lt;/code&gt;, &lt;code&gt;UNHEALTHY&lt;/code&gt;, or &lt;code&gt;TERMINATED&lt;/code&gt; state. When you run RestoreServer, the server&#39;s EC2 instance is deleted, and a new EC2 instance is configured. RestoreServer maintains the existing server endpoint, so configuration management of the server&#39;s client devices (nodes) should continue to work. &lt;/p&gt; &lt;p&gt;Restoring from a backup is performed by creating a new EC2 instance. If restoration is successful, and the server is in a &lt;code&gt;HEALTHY&lt;/code&gt; state, AWS OpsWorks CM switches traffic over to the new instance. After restoration is finished, the old EC2 instance is maintained in a &lt;code&gt;Running&lt;/code&gt; or &lt;code&gt;Stopped&lt;/code&gt; state, but is eventually terminated.&lt;/p&gt; &lt;p&gt; This operation is asynchronous. &lt;/p&gt; &lt;p&gt; An &lt;code&gt;InvalidStateException&lt;/code&gt; is thrown when the server is not in a valid state. A &lt;code&gt;ResourceNotFoundException&lt;/code&gt; is thrown when the server does not exist. A &lt;code&gt;ValidationException&lt;/code&gt; is raised when parameters of the request are not valid. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void restoreServerTest() throws ApiException {
        String xAmzTarget = null;
        RestoreServerRequest restoreServerRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RestoreServerResponse response = api.restoreServer(xAmzTarget, restoreServerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt; Manually starts server maintenance. This command can be useful if an earlier maintenance attempt failed, and the underlying cause of maintenance failure has been resolved. The server is in an &lt;code&gt;UNDER_MAINTENANCE&lt;/code&gt; state while maintenance is in progress. &lt;/p&gt; &lt;p&gt; Maintenance can only be started on servers in &lt;code&gt;HEALTHY&lt;/code&gt; and &lt;code&gt;UNHEALTHY&lt;/code&gt; states. Otherwise, an &lt;code&gt;InvalidStateException&lt;/code&gt; is thrown. A &lt;code&gt;ResourceNotFoundException&lt;/code&gt; is thrown when the server does not exist. A &lt;code&gt;ValidationException&lt;/code&gt; is raised when parameters of the request are not valid. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startMaintenanceTest() throws ApiException {
        String xAmzTarget = null;
        StartMaintenanceRequest startMaintenanceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartMaintenanceResponse response = api.startMaintenance(xAmzTarget, startMaintenanceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Applies tags to an AWS OpsWorks for Chef Automate or AWS OpsWorks for Puppet Enterprise server, or to server backups.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String xAmzTarget = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.tagResource(xAmzTarget, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes specified tags from an AWS OpsWorks-CM server or backup.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String xAmzTarget = null;
        UntagResourceRequest untagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.untagResource(xAmzTarget, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt; Updates settings for a server. &lt;/p&gt; &lt;p&gt; This operation is synchronous. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateServerTest() throws ApiException {
        String xAmzTarget = null;
        UpdateServerRequest updateServerRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateServerResponse response = api.updateServer(xAmzTarget, updateServerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt; Updates engine-specific attributes on a specified server. The server enters the &lt;code&gt;MODIFYING&lt;/code&gt; state when this operation is in progress. Only one update can occur at a time. You can use this command to reset a Chef server&#39;s public key (&lt;code&gt;CHEF_PIVOTAL_KEY&lt;/code&gt;) or a Puppet server&#39;s admin password (&lt;code&gt;PUPPET_ADMIN_PASSWORD&lt;/code&gt;). &lt;/p&gt; &lt;p&gt; This operation is asynchronous. &lt;/p&gt; &lt;p&gt; This operation can only be called for servers in &lt;code&gt;HEALTHY&lt;/code&gt; or &lt;code&gt;UNHEALTHY&lt;/code&gt; states. Otherwise, an &lt;code&gt;InvalidStateException&lt;/code&gt; is raised. A &lt;code&gt;ResourceNotFoundException&lt;/code&gt; is thrown when the server does not exist. A &lt;code&gt;ValidationException&lt;/code&gt; is raised when parameters of the request are not valid. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateServerEngineAttributesTest() throws ApiException {
        String xAmzTarget = null;
        UpdateServerEngineAttributesRequest updateServerEngineAttributesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateServerEngineAttributesResponse response = api.updateServerEngineAttributes(xAmzTarget, updateServerEngineAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
