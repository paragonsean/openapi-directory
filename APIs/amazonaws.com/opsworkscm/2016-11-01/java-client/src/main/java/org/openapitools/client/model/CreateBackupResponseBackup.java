/*
 * AWS OpsWorks CM
 * <fullname>AWS OpsWorks CM</fullname> <p>AWS OpsWorks for configuration management (CM) is a service that runs and manages configuration management servers. You can use AWS OpsWorks CM to create and manage AWS OpsWorks for Chef Automate and AWS OpsWorks for Puppet Enterprise servers, and add or remove nodes for the servers to manage.</p> <p> <b>Glossary of terms</b> </p> <ul> <li> <p> <b>Server</b>: A configuration management server that can be highly-available. The configuration management server runs on an Amazon Elastic Compute Cloud (EC2) instance, and may use various other AWS services, such as Amazon Relational Database Service (RDS) and Elastic Load Balancing. A server is a generic abstraction over the configuration manager that you want to use, much like Amazon RDS. In AWS OpsWorks CM, you do not start or stop servers. After you create servers, they continue to run until they are deleted.</p> </li> <li> <p> <b>Engine</b>: The engine is the specific configuration manager that you want to use. Valid values in this release include <code>ChefAutomate</code> and <code>Puppet</code>.</p> </li> <li> <p> <b>Backup</b>: This is an application-level backup of the data that the configuration manager stores. AWS OpsWorks CM creates an S3 bucket for backups when you launch the first server. A backup maintains a snapshot of a server's configuration-related attributes at the time the backup starts.</p> </li> <li> <p> <b>Events</b>: Events are always related to a server. Events are written during server creation, when health checks run, when backups are created, when system maintenance is performed, etc. When you delete a server, the server's events are also deleted.</p> </li> <li> <p> <b>Account attributes</b>: Every account has attributes that are assigned in the AWS OpsWorks CM database. These attributes store information about configuration limits (servers, backups, etc.) and your customer account. </p> </li> </ul> <p> <b>Endpoints</b> </p> <p>AWS OpsWorks CM supports the following endpoints, all HTTPS. You must connect to one of the following endpoints. Your servers can only be accessed or managed within the endpoint in which they are created.</p> <ul> <li> <p>opsworks-cm.us-east-1.amazonaws.com</p> </li> <li> <p>opsworks-cm.us-east-2.amazonaws.com</p> </li> <li> <p>opsworks-cm.us-west-1.amazonaws.com</p> </li> <li> <p>opsworks-cm.us-west-2.amazonaws.com</p> </li> <li> <p>opsworks-cm.ap-northeast-1.amazonaws.com</p> </li> <li> <p>opsworks-cm.ap-southeast-1.amazonaws.com</p> </li> <li> <p>opsworks-cm.ap-southeast-2.amazonaws.com</p> </li> <li> <p>opsworks-cm.eu-central-1.amazonaws.com</p> </li> <li> <p>opsworks-cm.eu-west-1.amazonaws.com</p> </li> </ul> <p>For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/opsworks-service.html\">AWS OpsWorks endpoints and quotas</a> in the AWS General Reference.</p> <p> <b>Throttling limits</b> </p> <p>All API operations allow for five requests per second with a burst of 10 requests per second.</p>
 *
 * The version of the OpenAPI document: 2016-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BackupStatus;
import org.openapitools.client.model.BackupType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateBackupResponseBackup
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:58.761463-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateBackupResponseBackup {
  public static final String SERIALIZED_NAME_BACKUP_ARN = "BackupArn";
  @SerializedName(SERIALIZED_NAME_BACKUP_ARN)
  private String backupArn;

  public static final String SERIALIZED_NAME_BACKUP_ID = "BackupId";
  @SerializedName(SERIALIZED_NAME_BACKUP_ID)
  private String backupId;

  public static final String SERIALIZED_NAME_BACKUP_TYPE = "BackupType";
  @SerializedName(SERIALIZED_NAME_BACKUP_TYPE)
  private BackupType backupType;

  public static final String SERIALIZED_NAME_CREATED_AT = "CreatedAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ENGINE = "Engine";
  @SerializedName(SERIALIZED_NAME_ENGINE)
  private String engine;

  public static final String SERIALIZED_NAME_ENGINE_MODEL = "EngineModel";
  @SerializedName(SERIALIZED_NAME_ENGINE_MODEL)
  private String engineModel;

  public static final String SERIALIZED_NAME_ENGINE_VERSION = "EngineVersion";
  @SerializedName(SERIALIZED_NAME_ENGINE_VERSION)
  private String engineVersion;

  public static final String SERIALIZED_NAME_INSTANCE_PROFILE_ARN = "InstanceProfileArn";
  @SerializedName(SERIALIZED_NAME_INSTANCE_PROFILE_ARN)
  private String instanceProfileArn;

  public static final String SERIALIZED_NAME_INSTANCE_TYPE = "InstanceType";
  @SerializedName(SERIALIZED_NAME_INSTANCE_TYPE)
  private String instanceType;

  public static final String SERIALIZED_NAME_KEY_PAIR = "KeyPair";
  @SerializedName(SERIALIZED_NAME_KEY_PAIR)
  private String keyPair;

  public static final String SERIALIZED_NAME_PREFERRED_BACKUP_WINDOW = "PreferredBackupWindow";
  @SerializedName(SERIALIZED_NAME_PREFERRED_BACKUP_WINDOW)
  private String preferredBackupWindow;

  public static final String SERIALIZED_NAME_PREFERRED_MAINTENANCE_WINDOW = "PreferredMaintenanceWindow";
  @SerializedName(SERIALIZED_NAME_PREFERRED_MAINTENANCE_WINDOW)
  private String preferredMaintenanceWindow;

  public static final String SERIALIZED_NAME_S3_DATA_SIZE = "S3DataSize";
  @SerializedName(SERIALIZED_NAME_S3_DATA_SIZE)
  private Integer s3DataSize;

  public static final String SERIALIZED_NAME_S3_DATA_URL = "S3DataUrl";
  @SerializedName(SERIALIZED_NAME_S3_DATA_URL)
  private String s3DataUrl;

  public static final String SERIALIZED_NAME_S3_LOG_URL = "S3LogUrl";
  @SerializedName(SERIALIZED_NAME_S3_LOG_URL)
  private String s3LogUrl;

  public static final String SERIALIZED_NAME_SECURITY_GROUP_IDS = "SecurityGroupIds";
  @SerializedName(SERIALIZED_NAME_SECURITY_GROUP_IDS)
  private List securityGroupIds;

  public static final String SERIALIZED_NAME_SERVER_NAME = "ServerName";
  @SerializedName(SERIALIZED_NAME_SERVER_NAME)
  private String serverName;

  public static final String SERIALIZED_NAME_SERVICE_ROLE_ARN = "ServiceRoleArn";
  @SerializedName(SERIALIZED_NAME_SERVICE_ROLE_ARN)
  private String serviceRoleArn;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private BackupStatus status;

  public static final String SERIALIZED_NAME_STATUS_DESCRIPTION = "StatusDescription";
  @SerializedName(SERIALIZED_NAME_STATUS_DESCRIPTION)
  private String statusDescription;

  public static final String SERIALIZED_NAME_SUBNET_IDS = "SubnetIds";
  @SerializedName(SERIALIZED_NAME_SUBNET_IDS)
  private List subnetIds;

  public static final String SERIALIZED_NAME_TOOLS_VERSION = "ToolsVersion";
  @SerializedName(SERIALIZED_NAME_TOOLS_VERSION)
  private String toolsVersion;

  public static final String SERIALIZED_NAME_USER_ARN = "UserArn";
  @SerializedName(SERIALIZED_NAME_USER_ARN)
  private String userArn;

  public CreateBackupResponseBackup() {
  }

  public CreateBackupResponseBackup backupArn(String backupArn) {
    this.backupArn = backupArn;
    return this;
  }

  /**
   * Get backupArn
   * @return backupArn
   */
  @javax.annotation.Nullable
  public String getBackupArn() {
    return backupArn;
  }

  public void setBackupArn(String backupArn) {
    this.backupArn = backupArn;
  }


  public CreateBackupResponseBackup backupId(String backupId) {
    this.backupId = backupId;
    return this;
  }

  /**
   * Get backupId
   * @return backupId
   */
  @javax.annotation.Nullable
  public String getBackupId() {
    return backupId;
  }

  public void setBackupId(String backupId) {
    this.backupId = backupId;
  }


  public CreateBackupResponseBackup backupType(BackupType backupType) {
    this.backupType = backupType;
    return this;
  }

  /**
   * Get backupType
   * @return backupType
   */
  @javax.annotation.Nullable
  public BackupType getBackupType() {
    return backupType;
  }

  public void setBackupType(BackupType backupType) {
    this.backupType = backupType;
  }


  public CreateBackupResponseBackup createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public CreateBackupResponseBackup description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateBackupResponseBackup engine(String engine) {
    this.engine = engine;
    return this;
  }

  /**
   * Get engine
   * @return engine
   */
  @javax.annotation.Nullable
  public String getEngine() {
    return engine;
  }

  public void setEngine(String engine) {
    this.engine = engine;
  }


  public CreateBackupResponseBackup engineModel(String engineModel) {
    this.engineModel = engineModel;
    return this;
  }

  /**
   * Get engineModel
   * @return engineModel
   */
  @javax.annotation.Nullable
  public String getEngineModel() {
    return engineModel;
  }

  public void setEngineModel(String engineModel) {
    this.engineModel = engineModel;
  }


  public CreateBackupResponseBackup engineVersion(String engineVersion) {
    this.engineVersion = engineVersion;
    return this;
  }

  /**
   * Get engineVersion
   * @return engineVersion
   */
  @javax.annotation.Nullable
  public String getEngineVersion() {
    return engineVersion;
  }

  public void setEngineVersion(String engineVersion) {
    this.engineVersion = engineVersion;
  }


  public CreateBackupResponseBackup instanceProfileArn(String instanceProfileArn) {
    this.instanceProfileArn = instanceProfileArn;
    return this;
  }

  /**
   * Get instanceProfileArn
   * @return instanceProfileArn
   */
  @javax.annotation.Nullable
  public String getInstanceProfileArn() {
    return instanceProfileArn;
  }

  public void setInstanceProfileArn(String instanceProfileArn) {
    this.instanceProfileArn = instanceProfileArn;
  }


  public CreateBackupResponseBackup instanceType(String instanceType) {
    this.instanceType = instanceType;
    return this;
  }

  /**
   * Get instanceType
   * @return instanceType
   */
  @javax.annotation.Nullable
  public String getInstanceType() {
    return instanceType;
  }

  public void setInstanceType(String instanceType) {
    this.instanceType = instanceType;
  }


  public CreateBackupResponseBackup keyPair(String keyPair) {
    this.keyPair = keyPair;
    return this;
  }

  /**
   * Get keyPair
   * @return keyPair
   */
  @javax.annotation.Nullable
  public String getKeyPair() {
    return keyPair;
  }

  public void setKeyPair(String keyPair) {
    this.keyPair = keyPair;
  }


  public CreateBackupResponseBackup preferredBackupWindow(String preferredBackupWindow) {
    this.preferredBackupWindow = preferredBackupWindow;
    return this;
  }

  /**
   * Get preferredBackupWindow
   * @return preferredBackupWindow
   */
  @javax.annotation.Nullable
  public String getPreferredBackupWindow() {
    return preferredBackupWindow;
  }

  public void setPreferredBackupWindow(String preferredBackupWindow) {
    this.preferredBackupWindow = preferredBackupWindow;
  }


  public CreateBackupResponseBackup preferredMaintenanceWindow(String preferredMaintenanceWindow) {
    this.preferredMaintenanceWindow = preferredMaintenanceWindow;
    return this;
  }

  /**
   * Get preferredMaintenanceWindow
   * @return preferredMaintenanceWindow
   */
  @javax.annotation.Nullable
  public String getPreferredMaintenanceWindow() {
    return preferredMaintenanceWindow;
  }

  public void setPreferredMaintenanceWindow(String preferredMaintenanceWindow) {
    this.preferredMaintenanceWindow = preferredMaintenanceWindow;
  }


  public CreateBackupResponseBackup s3DataSize(Integer s3DataSize) {
    this.s3DataSize = s3DataSize;
    return this;
  }

  /**
   * Get s3DataSize
   * @return s3DataSize
   */
  @javax.annotation.Nullable
  public Integer getS3DataSize() {
    return s3DataSize;
  }

  public void setS3DataSize(Integer s3DataSize) {
    this.s3DataSize = s3DataSize;
  }


  public CreateBackupResponseBackup s3DataUrl(String s3DataUrl) {
    this.s3DataUrl = s3DataUrl;
    return this;
  }

  /**
   * Get s3DataUrl
   * @return s3DataUrl
   */
  @javax.annotation.Nullable
  public String getS3DataUrl() {
    return s3DataUrl;
  }

  public void setS3DataUrl(String s3DataUrl) {
    this.s3DataUrl = s3DataUrl;
  }


  public CreateBackupResponseBackup s3LogUrl(String s3LogUrl) {
    this.s3LogUrl = s3LogUrl;
    return this;
  }

  /**
   * Get s3LogUrl
   * @return s3LogUrl
   */
  @javax.annotation.Nullable
  public String getS3LogUrl() {
    return s3LogUrl;
  }

  public void setS3LogUrl(String s3LogUrl) {
    this.s3LogUrl = s3LogUrl;
  }


  public CreateBackupResponseBackup securityGroupIds(List securityGroupIds) {
    this.securityGroupIds = securityGroupIds;
    return this;
  }

  /**
   * Get securityGroupIds
   * @return securityGroupIds
   */
  @javax.annotation.Nullable
  public List getSecurityGroupIds() {
    return securityGroupIds;
  }

  public void setSecurityGroupIds(List securityGroupIds) {
    this.securityGroupIds = securityGroupIds;
  }


  public CreateBackupResponseBackup serverName(String serverName) {
    this.serverName = serverName;
    return this;
  }

  /**
   * Get serverName
   * @return serverName
   */
  @javax.annotation.Nullable
  public String getServerName() {
    return serverName;
  }

  public void setServerName(String serverName) {
    this.serverName = serverName;
  }


  public CreateBackupResponseBackup serviceRoleArn(String serviceRoleArn) {
    this.serviceRoleArn = serviceRoleArn;
    return this;
  }

  /**
   * Get serviceRoleArn
   * @return serviceRoleArn
   */
  @javax.annotation.Nullable
  public String getServiceRoleArn() {
    return serviceRoleArn;
  }

  public void setServiceRoleArn(String serviceRoleArn) {
    this.serviceRoleArn = serviceRoleArn;
  }


  public CreateBackupResponseBackup status(BackupStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public BackupStatus getStatus() {
    return status;
  }

  public void setStatus(BackupStatus status) {
    this.status = status;
  }


  public CreateBackupResponseBackup statusDescription(String statusDescription) {
    this.statusDescription = statusDescription;
    return this;
  }

  /**
   * Get statusDescription
   * @return statusDescription
   */
  @javax.annotation.Nullable
  public String getStatusDescription() {
    return statusDescription;
  }

  public void setStatusDescription(String statusDescription) {
    this.statusDescription = statusDescription;
  }


  public CreateBackupResponseBackup subnetIds(List subnetIds) {
    this.subnetIds = subnetIds;
    return this;
  }

  /**
   * Get subnetIds
   * @return subnetIds
   */
  @javax.annotation.Nullable
  public List getSubnetIds() {
    return subnetIds;
  }

  public void setSubnetIds(List subnetIds) {
    this.subnetIds = subnetIds;
  }


  public CreateBackupResponseBackup toolsVersion(String toolsVersion) {
    this.toolsVersion = toolsVersion;
    return this;
  }

  /**
   * Get toolsVersion
   * @return toolsVersion
   */
  @javax.annotation.Nullable
  public String getToolsVersion() {
    return toolsVersion;
  }

  public void setToolsVersion(String toolsVersion) {
    this.toolsVersion = toolsVersion;
  }


  public CreateBackupResponseBackup userArn(String userArn) {
    this.userArn = userArn;
    return this;
  }

  /**
   * Get userArn
   * @return userArn
   */
  @javax.annotation.Nullable
  public String getUserArn() {
    return userArn;
  }

  public void setUserArn(String userArn) {
    this.userArn = userArn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateBackupResponseBackup createBackupResponseBackup = (CreateBackupResponseBackup) o;
    return Objects.equals(this.backupArn, createBackupResponseBackup.backupArn) &&
        Objects.equals(this.backupId, createBackupResponseBackup.backupId) &&
        Objects.equals(this.backupType, createBackupResponseBackup.backupType) &&
        Objects.equals(this.createdAt, createBackupResponseBackup.createdAt) &&
        Objects.equals(this.description, createBackupResponseBackup.description) &&
        Objects.equals(this.engine, createBackupResponseBackup.engine) &&
        Objects.equals(this.engineModel, createBackupResponseBackup.engineModel) &&
        Objects.equals(this.engineVersion, createBackupResponseBackup.engineVersion) &&
        Objects.equals(this.instanceProfileArn, createBackupResponseBackup.instanceProfileArn) &&
        Objects.equals(this.instanceType, createBackupResponseBackup.instanceType) &&
        Objects.equals(this.keyPair, createBackupResponseBackup.keyPair) &&
        Objects.equals(this.preferredBackupWindow, createBackupResponseBackup.preferredBackupWindow) &&
        Objects.equals(this.preferredMaintenanceWindow, createBackupResponseBackup.preferredMaintenanceWindow) &&
        Objects.equals(this.s3DataSize, createBackupResponseBackup.s3DataSize) &&
        Objects.equals(this.s3DataUrl, createBackupResponseBackup.s3DataUrl) &&
        Objects.equals(this.s3LogUrl, createBackupResponseBackup.s3LogUrl) &&
        Objects.equals(this.securityGroupIds, createBackupResponseBackup.securityGroupIds) &&
        Objects.equals(this.serverName, createBackupResponseBackup.serverName) &&
        Objects.equals(this.serviceRoleArn, createBackupResponseBackup.serviceRoleArn) &&
        Objects.equals(this.status, createBackupResponseBackup.status) &&
        Objects.equals(this.statusDescription, createBackupResponseBackup.statusDescription) &&
        Objects.equals(this.subnetIds, createBackupResponseBackup.subnetIds) &&
        Objects.equals(this.toolsVersion, createBackupResponseBackup.toolsVersion) &&
        Objects.equals(this.userArn, createBackupResponseBackup.userArn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backupArn, backupId, backupType, createdAt, description, engine, engineModel, engineVersion, instanceProfileArn, instanceType, keyPair, preferredBackupWindow, preferredMaintenanceWindow, s3DataSize, s3DataUrl, s3LogUrl, securityGroupIds, serverName, serviceRoleArn, status, statusDescription, subnetIds, toolsVersion, userArn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateBackupResponseBackup {\n");
    sb.append("    backupArn: ").append(toIndentedString(backupArn)).append("\n");
    sb.append("    backupId: ").append(toIndentedString(backupId)).append("\n");
    sb.append("    backupType: ").append(toIndentedString(backupType)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    engine: ").append(toIndentedString(engine)).append("\n");
    sb.append("    engineModel: ").append(toIndentedString(engineModel)).append("\n");
    sb.append("    engineVersion: ").append(toIndentedString(engineVersion)).append("\n");
    sb.append("    instanceProfileArn: ").append(toIndentedString(instanceProfileArn)).append("\n");
    sb.append("    instanceType: ").append(toIndentedString(instanceType)).append("\n");
    sb.append("    keyPair: ").append(toIndentedString(keyPair)).append("\n");
    sb.append("    preferredBackupWindow: ").append(toIndentedString(preferredBackupWindow)).append("\n");
    sb.append("    preferredMaintenanceWindow: ").append(toIndentedString(preferredMaintenanceWindow)).append("\n");
    sb.append("    s3DataSize: ").append(toIndentedString(s3DataSize)).append("\n");
    sb.append("    s3DataUrl: ").append(toIndentedString(s3DataUrl)).append("\n");
    sb.append("    s3LogUrl: ").append(toIndentedString(s3LogUrl)).append("\n");
    sb.append("    securityGroupIds: ").append(toIndentedString(securityGroupIds)).append("\n");
    sb.append("    serverName: ").append(toIndentedString(serverName)).append("\n");
    sb.append("    serviceRoleArn: ").append(toIndentedString(serviceRoleArn)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusDescription: ").append(toIndentedString(statusDescription)).append("\n");
    sb.append("    subnetIds: ").append(toIndentedString(subnetIds)).append("\n");
    sb.append("    toolsVersion: ").append(toIndentedString(toolsVersion)).append("\n");
    sb.append("    userArn: ").append(toIndentedString(userArn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BackupArn");
    openapiFields.add("BackupId");
    openapiFields.add("BackupType");
    openapiFields.add("CreatedAt");
    openapiFields.add("Description");
    openapiFields.add("Engine");
    openapiFields.add("EngineModel");
    openapiFields.add("EngineVersion");
    openapiFields.add("InstanceProfileArn");
    openapiFields.add("InstanceType");
    openapiFields.add("KeyPair");
    openapiFields.add("PreferredBackupWindow");
    openapiFields.add("PreferredMaintenanceWindow");
    openapiFields.add("S3DataSize");
    openapiFields.add("S3DataUrl");
    openapiFields.add("S3LogUrl");
    openapiFields.add("SecurityGroupIds");
    openapiFields.add("ServerName");
    openapiFields.add("ServiceRoleArn");
    openapiFields.add("Status");
    openapiFields.add("StatusDescription");
    openapiFields.add("SubnetIds");
    openapiFields.add("ToolsVersion");
    openapiFields.add("UserArn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateBackupResponseBackup
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateBackupResponseBackup.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateBackupResponseBackup is not found in the empty JSON string", CreateBackupResponseBackup.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateBackupResponseBackup.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateBackupResponseBackup` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `BackupArn`
      if (jsonObj.get("BackupArn") != null && !jsonObj.get("BackupArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("BackupArn"));
      }
      // validate the optional field `BackupId`
      if (jsonObj.get("BackupId") != null && !jsonObj.get("BackupId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("BackupId"));
      }
      // validate the optional field `BackupType`
      if (jsonObj.get("BackupType") != null && !jsonObj.get("BackupType").isJsonNull()) {
        BackupType.validateJsonElement(jsonObj.get("BackupType"));
      }
      // validate the optional field `CreatedAt`
      if (jsonObj.get("CreatedAt") != null && !jsonObj.get("CreatedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreatedAt"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `Engine`
      if (jsonObj.get("Engine") != null && !jsonObj.get("Engine").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Engine"));
      }
      // validate the optional field `EngineModel`
      if (jsonObj.get("EngineModel") != null && !jsonObj.get("EngineModel").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EngineModel"));
      }
      // validate the optional field `EngineVersion`
      if (jsonObj.get("EngineVersion") != null && !jsonObj.get("EngineVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EngineVersion"));
      }
      // validate the optional field `InstanceProfileArn`
      if (jsonObj.get("InstanceProfileArn") != null && !jsonObj.get("InstanceProfileArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("InstanceProfileArn"));
      }
      // validate the optional field `InstanceType`
      if (jsonObj.get("InstanceType") != null && !jsonObj.get("InstanceType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("InstanceType"));
      }
      // validate the optional field `KeyPair`
      if (jsonObj.get("KeyPair") != null && !jsonObj.get("KeyPair").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("KeyPair"));
      }
      // validate the optional field `PreferredBackupWindow`
      if (jsonObj.get("PreferredBackupWindow") != null && !jsonObj.get("PreferredBackupWindow").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PreferredBackupWindow"));
      }
      // validate the optional field `PreferredMaintenanceWindow`
      if (jsonObj.get("PreferredMaintenanceWindow") != null && !jsonObj.get("PreferredMaintenanceWindow").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PreferredMaintenanceWindow"));
      }
      // validate the optional field `S3DataSize`
      if (jsonObj.get("S3DataSize") != null && !jsonObj.get("S3DataSize").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("S3DataSize"));
      }
      // validate the optional field `S3DataUrl`
      if (jsonObj.get("S3DataUrl") != null && !jsonObj.get("S3DataUrl").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("S3DataUrl"));
      }
      // validate the optional field `S3LogUrl`
      if (jsonObj.get("S3LogUrl") != null && !jsonObj.get("S3LogUrl").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("S3LogUrl"));
      }
      // validate the optional field `SecurityGroupIds`
      if (jsonObj.get("SecurityGroupIds") != null && !jsonObj.get("SecurityGroupIds").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("SecurityGroupIds"));
      }
      // validate the optional field `ServerName`
      if (jsonObj.get("ServerName") != null && !jsonObj.get("ServerName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ServerName"));
      }
      // validate the optional field `ServiceRoleArn`
      if (jsonObj.get("ServiceRoleArn") != null && !jsonObj.get("ServiceRoleArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ServiceRoleArn"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        BackupStatus.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `StatusDescription`
      if (jsonObj.get("StatusDescription") != null && !jsonObj.get("StatusDescription").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StatusDescription"));
      }
      // validate the optional field `SubnetIds`
      if (jsonObj.get("SubnetIds") != null && !jsonObj.get("SubnetIds").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("SubnetIds"));
      }
      // validate the optional field `ToolsVersion`
      if (jsonObj.get("ToolsVersion") != null && !jsonObj.get("ToolsVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ToolsVersion"));
      }
      // validate the optional field `UserArn`
      if (jsonObj.get("UserArn") != null && !jsonObj.get("UserArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("UserArn"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateBackupResponseBackup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateBackupResponseBackup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateBackupResponseBackup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateBackupResponseBackup.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateBackupResponseBackup>() {
           @Override
           public void write(JsonWriter out, CreateBackupResponseBackup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateBackupResponseBackup read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateBackupResponseBackup given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateBackupResponseBackup
   * @throws IOException if the JSON string is invalid with respect to CreateBackupResponseBackup
   */
  public static CreateBackupResponseBackup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateBackupResponseBackup.class);
  }

  /**
   * Convert an instance of CreateBackupResponseBackup to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

