/**
 * AWS OpsWorks CM
 * <fullname>AWS OpsWorks CM</fullname> <p>AWS OpsWorks for configuration management (CM) is a service that runs and manages configuration management servers. You can use AWS OpsWorks CM to create and manage AWS OpsWorks for Chef Automate and AWS OpsWorks for Puppet Enterprise servers, and add or remove nodes for the servers to manage.</p> <p> <b>Glossary of terms</b> </p> <ul> <li> <p> <b>Server</b>: A configuration management server that can be highly-available. The configuration management server runs on an Amazon Elastic Compute Cloud (EC2) instance, and may use various other AWS services, such as Amazon Relational Database Service (RDS) and Elastic Load Balancing. A server is a generic abstraction over the configuration manager that you want to use, much like Amazon RDS. In AWS OpsWorks CM, you do not start or stop servers. After you create servers, they continue to run until they are deleted.</p> </li> <li> <p> <b>Engine</b>: The engine is the specific configuration manager that you want to use. Valid values in this release include <code>ChefAutomate</code> and <code>Puppet</code>.</p> </li> <li> <p> <b>Backup</b>: This is an application-level backup of the data that the configuration manager stores. AWS OpsWorks CM creates an S3 bucket for backups when you launch the first server. A backup maintains a snapshot of a server's configuration-related attributes at the time the backup starts.</p> </li> <li> <p> <b>Events</b>: Events are always related to a server. Events are written during server creation, when health checks run, when backups are created, when system maintenance is performed, etc. When you delete a server, the server's events are also deleted.</p> </li> <li> <p> <b>Account attributes</b>: Every account has attributes that are assigned in the AWS OpsWorks CM database. These attributes store information about configuration limits (servers, backups, etc.) and your customer account. </p> </li> </ul> <p> <b>Endpoints</b> </p> <p>AWS OpsWorks CM supports the following endpoints, all HTTPS. You must connect to one of the following endpoints. Your servers can only be accessed or managed within the endpoint in which they are created.</p> <ul> <li> <p>opsworks-cm.us-east-1.amazonaws.com</p> </li> <li> <p>opsworks-cm.us-east-2.amazonaws.com</p> </li> <li> <p>opsworks-cm.us-west-1.amazonaws.com</p> </li> <li> <p>opsworks-cm.us-west-2.amazonaws.com</p> </li> <li> <p>opsworks-cm.ap-northeast-1.amazonaws.com</p> </li> <li> <p>opsworks-cm.ap-southeast-1.amazonaws.com</p> </li> <li> <p>opsworks-cm.ap-southeast-2.amazonaws.com</p> </li> <li> <p>opsworks-cm.eu-central-1.amazonaws.com</p> </li> <li> <p>opsworks-cm.eu-west-1.amazonaws.com</p> </li> </ul> <p>For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/opsworks-service.html\">AWS OpsWorks endpoints and quotas</a> in the AWS General Reference.</p> <p> <b>Throttling limits</b> </p> <p>All API operations allow for five requests per second with a burst of 10 requests per second.</p>
 *
 * The version of the OpenAPI document: 2016-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsOpsWorksCm);
  }
}(this, function(expect, AwsOpsWorksCm) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsOpsWorksCm.CreateServerResponseServer();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CreateServerResponseServer', function() {
    it('should create an instance of CreateServerResponseServer', function() {
      // uncomment below and update the code to test CreateServerResponseServer
      //var instance = new AwsOpsWorksCm.CreateServerResponseServer();
      //expect(instance).to.be.a(AwsOpsWorksCm.CreateServerResponseServer);
    });

    it('should have the property associatePublicIpAddress (base name: "AssociatePublicIpAddress")', function() {
      // uncomment below and update the code to test the property associatePublicIpAddress
      //var instance = new AwsOpsWorksCm.CreateServerResponseServer();
      //expect(instance).to.be();
    });

    it('should have the property backupRetentionCount (base name: "BackupRetentionCount")', function() {
      // uncomment below and update the code to test the property backupRetentionCount
      //var instance = new AwsOpsWorksCm.CreateServerResponseServer();
      //expect(instance).to.be();
    });

    it('should have the property serverName (base name: "ServerName")', function() {
      // uncomment below and update the code to test the property serverName
      //var instance = new AwsOpsWorksCm.CreateServerResponseServer();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "CreatedAt")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new AwsOpsWorksCm.CreateServerResponseServer();
      //expect(instance).to.be();
    });

    it('should have the property cloudFormationStackArn (base name: "CloudFormationStackArn")', function() {
      // uncomment below and update the code to test the property cloudFormationStackArn
      //var instance = new AwsOpsWorksCm.CreateServerResponseServer();
      //expect(instance).to.be();
    });

    it('should have the property customDomain (base name: "CustomDomain")', function() {
      // uncomment below and update the code to test the property customDomain
      //var instance = new AwsOpsWorksCm.CreateServerResponseServer();
      //expect(instance).to.be();
    });

    it('should have the property disableAutomatedBackup (base name: "DisableAutomatedBackup")', function() {
      // uncomment below and update the code to test the property disableAutomatedBackup
      //var instance = new AwsOpsWorksCm.CreateServerResponseServer();
      //expect(instance).to.be();
    });

    it('should have the property endpoint (base name: "Endpoint")', function() {
      // uncomment below and update the code to test the property endpoint
      //var instance = new AwsOpsWorksCm.CreateServerResponseServer();
      //expect(instance).to.be();
    });

    it('should have the property engine (base name: "Engine")', function() {
      // uncomment below and update the code to test the property engine
      //var instance = new AwsOpsWorksCm.CreateServerResponseServer();
      //expect(instance).to.be();
    });

    it('should have the property engineModel (base name: "EngineModel")', function() {
      // uncomment below and update the code to test the property engineModel
      //var instance = new AwsOpsWorksCm.CreateServerResponseServer();
      //expect(instance).to.be();
    });

    it('should have the property engineAttributes (base name: "EngineAttributes")', function() {
      // uncomment below and update the code to test the property engineAttributes
      //var instance = new AwsOpsWorksCm.CreateServerResponseServer();
      //expect(instance).to.be();
    });

    it('should have the property engineVersion (base name: "EngineVersion")', function() {
      // uncomment below and update the code to test the property engineVersion
      //var instance = new AwsOpsWorksCm.CreateServerResponseServer();
      //expect(instance).to.be();
    });

    it('should have the property instanceProfileArn (base name: "InstanceProfileArn")', function() {
      // uncomment below and update the code to test the property instanceProfileArn
      //var instance = new AwsOpsWorksCm.CreateServerResponseServer();
      //expect(instance).to.be();
    });

    it('should have the property instanceType (base name: "InstanceType")', function() {
      // uncomment below and update the code to test the property instanceType
      //var instance = new AwsOpsWorksCm.CreateServerResponseServer();
      //expect(instance).to.be();
    });

    it('should have the property keyPair (base name: "KeyPair")', function() {
      // uncomment below and update the code to test the property keyPair
      //var instance = new AwsOpsWorksCm.CreateServerResponseServer();
      //expect(instance).to.be();
    });

    it('should have the property maintenanceStatus (base name: "MaintenanceStatus")', function() {
      // uncomment below and update the code to test the property maintenanceStatus
      //var instance = new AwsOpsWorksCm.CreateServerResponseServer();
      //expect(instance).to.be();
    });

    it('should have the property preferredMaintenanceWindow (base name: "PreferredMaintenanceWindow")', function() {
      // uncomment below and update the code to test the property preferredMaintenanceWindow
      //var instance = new AwsOpsWorksCm.CreateServerResponseServer();
      //expect(instance).to.be();
    });

    it('should have the property preferredBackupWindow (base name: "PreferredBackupWindow")', function() {
      // uncomment below and update the code to test the property preferredBackupWindow
      //var instance = new AwsOpsWorksCm.CreateServerResponseServer();
      //expect(instance).to.be();
    });

    it('should have the property securityGroupIds (base name: "SecurityGroupIds")', function() {
      // uncomment below and update the code to test the property securityGroupIds
      //var instance = new AwsOpsWorksCm.CreateServerResponseServer();
      //expect(instance).to.be();
    });

    it('should have the property serviceRoleArn (base name: "ServiceRoleArn")', function() {
      // uncomment below and update the code to test the property serviceRoleArn
      //var instance = new AwsOpsWorksCm.CreateServerResponseServer();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "Status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new AwsOpsWorksCm.CreateServerResponseServer();
      //expect(instance).to.be();
    });

    it('should have the property statusReason (base name: "StatusReason")', function() {
      // uncomment below and update the code to test the property statusReason
      //var instance = new AwsOpsWorksCm.CreateServerResponseServer();
      //expect(instance).to.be();
    });

    it('should have the property subnetIds (base name: "SubnetIds")', function() {
      // uncomment below and update the code to test the property subnetIds
      //var instance = new AwsOpsWorksCm.CreateServerResponseServer();
      //expect(instance).to.be();
    });

    it('should have the property serverArn (base name: "ServerArn")', function() {
      // uncomment below and update the code to test the property serverArn
      //var instance = new AwsOpsWorksCm.CreateServerResponseServer();
      //expect(instance).to.be();
    });

  });

}));
