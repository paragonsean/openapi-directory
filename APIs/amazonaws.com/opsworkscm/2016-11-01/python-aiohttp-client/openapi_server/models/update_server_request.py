# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class UpdateServerRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, disable_automated_backup: bool=None, backup_retention_count: int=None, server_name: str=None, preferred_maintenance_window: str=None, preferred_backup_window: str=None):
        """UpdateServerRequest - a model defined in OpenAPI

        :param disable_automated_backup: The disable_automated_backup of this UpdateServerRequest.
        :param backup_retention_count: The backup_retention_count of this UpdateServerRequest.
        :param server_name: The server_name of this UpdateServerRequest.
        :param preferred_maintenance_window: The preferred_maintenance_window of this UpdateServerRequest.
        :param preferred_backup_window: The preferred_backup_window of this UpdateServerRequest.
        """
        self.openapi_types = {
            'disable_automated_backup': bool,
            'backup_retention_count': int,
            'server_name': str,
            'preferred_maintenance_window': str,
            'preferred_backup_window': str
        }

        self.attribute_map = {
            'disable_automated_backup': 'DisableAutomatedBackup',
            'backup_retention_count': 'BackupRetentionCount',
            'server_name': 'ServerName',
            'preferred_maintenance_window': 'PreferredMaintenanceWindow',
            'preferred_backup_window': 'PreferredBackupWindow'
        }

        self._disable_automated_backup = disable_automated_backup
        self._backup_retention_count = backup_retention_count
        self._server_name = server_name
        self._preferred_maintenance_window = preferred_maintenance_window
        self._preferred_backup_window = preferred_backup_window

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateServerRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateServerRequest of this UpdateServerRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def disable_automated_backup(self):
        """Gets the disable_automated_backup of this UpdateServerRequest.


        :return: The disable_automated_backup of this UpdateServerRequest.
        :rtype: bool
        """
        return self._disable_automated_backup

    @disable_automated_backup.setter
    def disable_automated_backup(self, disable_automated_backup):
        """Sets the disable_automated_backup of this UpdateServerRequest.


        :param disable_automated_backup: The disable_automated_backup of this UpdateServerRequest.
        :type disable_automated_backup: bool
        """

        self._disable_automated_backup = disable_automated_backup

    @property
    def backup_retention_count(self):
        """Gets the backup_retention_count of this UpdateServerRequest.


        :return: The backup_retention_count of this UpdateServerRequest.
        :rtype: int
        """
        return self._backup_retention_count

    @backup_retention_count.setter
    def backup_retention_count(self, backup_retention_count):
        """Sets the backup_retention_count of this UpdateServerRequest.


        :param backup_retention_count: The backup_retention_count of this UpdateServerRequest.
        :type backup_retention_count: int
        """

        self._backup_retention_count = backup_retention_count

    @property
    def server_name(self):
        """Gets the server_name of this UpdateServerRequest.


        :return: The server_name of this UpdateServerRequest.
        :rtype: str
        """
        return self._server_name

    @server_name.setter
    def server_name(self, server_name):
        """Sets the server_name of this UpdateServerRequest.


        :param server_name: The server_name of this UpdateServerRequest.
        :type server_name: str
        """
        if server_name is None:
            raise ValueError("Invalid value for `server_name`, must not be `None`")

        self._server_name = server_name

    @property
    def preferred_maintenance_window(self):
        """Gets the preferred_maintenance_window of this UpdateServerRequest.

        <p> <code>DDD:HH:MM</code> (weekly start time) or <code>HH:MM</code> (daily start time). </p> <p> Time windows always use coordinated universal time (UTC). Valid strings for day of week (<code>DDD</code>) are: <code>Mon</code>, <code>Tue</code>, <code>Wed</code>, <code>Thr</code>, <code>Fri</code>, <code>Sat</code>, or <code>Sun</code>.</p>

        :return: The preferred_maintenance_window of this UpdateServerRequest.
        :rtype: str
        """
        return self._preferred_maintenance_window

    @preferred_maintenance_window.setter
    def preferred_maintenance_window(self, preferred_maintenance_window):
        """Sets the preferred_maintenance_window of this UpdateServerRequest.

        <p> <code>DDD:HH:MM</code> (weekly start time) or <code>HH:MM</code> (daily start time). </p> <p> Time windows always use coordinated universal time (UTC). Valid strings for day of week (<code>DDD</code>) are: <code>Mon</code>, <code>Tue</code>, <code>Wed</code>, <code>Thr</code>, <code>Fri</code>, <code>Sat</code>, or <code>Sun</code>.</p>

        :param preferred_maintenance_window: The preferred_maintenance_window of this UpdateServerRequest.
        :type preferred_maintenance_window: str
        """
        if preferred_maintenance_window is not None and len(preferred_maintenance_window) > 10000:
            raise ValueError("Invalid value for `preferred_maintenance_window`, length must be less than or equal to `10000`")
        if preferred_maintenance_window is not None and not re.search(r'^((Mon|Tue|Wed|Thu|Fri|Sat|Sun):)?([0-1][0-9]|2[0-3]):[0-5][0-9]$', preferred_maintenance_window):
            raise ValueError("Invalid value for `preferred_maintenance_window`, must be a follow pattern or equal to `/^((Mon|Tue|Wed|Thu|Fri|Sat|Sun):)?([0-1][0-9]|2[0-3]):[0-5][0-9]$/`")

        self._preferred_maintenance_window = preferred_maintenance_window

    @property
    def preferred_backup_window(self):
        """Gets the preferred_backup_window of this UpdateServerRequest.

        <p> <code>DDD:HH:MM</code> (weekly start time) or <code>HH:MM</code> (daily start time). </p> <p> Time windows always use coordinated universal time (UTC). Valid strings for day of week (<code>DDD</code>) are: <code>Mon</code>, <code>Tue</code>, <code>Wed</code>, <code>Thr</code>, <code>Fri</code>, <code>Sat</code>, or <code>Sun</code>.</p>

        :return: The preferred_backup_window of this UpdateServerRequest.
        :rtype: str
        """
        return self._preferred_backup_window

    @preferred_backup_window.setter
    def preferred_backup_window(self, preferred_backup_window):
        """Sets the preferred_backup_window of this UpdateServerRequest.

        <p> <code>DDD:HH:MM</code> (weekly start time) or <code>HH:MM</code> (daily start time). </p> <p> Time windows always use coordinated universal time (UTC). Valid strings for day of week (<code>DDD</code>) are: <code>Mon</code>, <code>Tue</code>, <code>Wed</code>, <code>Thr</code>, <code>Fri</code>, <code>Sat</code>, or <code>Sun</code>.</p>

        :param preferred_backup_window: The preferred_backup_window of this UpdateServerRequest.
        :type preferred_backup_window: str
        """
        if preferred_backup_window is not None and len(preferred_backup_window) > 10000:
            raise ValueError("Invalid value for `preferred_backup_window`, length must be less than or equal to `10000`")
        if preferred_backup_window is not None and not re.search(r'^((Mon|Tue|Wed|Thu|Fri|Sat|Sun):)?([0-1][0-9]|2[0-3]):[0-5][0-9]$', preferred_backup_window):
            raise ValueError("Invalid value for `preferred_backup_window`, must be a follow pattern or equal to `/^((Mon|Tue|Wed|Thu|Fri|Sat|Sun):)?([0-1][0-9]|2[0-3]):[0-5][0-9]$/`")

        self._preferred_backup_window = preferred_backup_window
