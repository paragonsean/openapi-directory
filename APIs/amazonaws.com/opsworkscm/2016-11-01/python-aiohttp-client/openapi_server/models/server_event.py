# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ServerEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, server_name: str=None, message: str=None, log_url: str=None):
        """ServerEvent - a model defined in OpenAPI

        :param created_at: The created_at of this ServerEvent.
        :param server_name: The server_name of this ServerEvent.
        :param message: The message of this ServerEvent.
        :param log_url: The log_url of this ServerEvent.
        """
        self.openapi_types = {
            'created_at': datetime,
            'server_name': str,
            'message': str,
            'log_url': str
        }

        self.attribute_map = {
            'created_at': 'CreatedAt',
            'server_name': 'ServerName',
            'message': 'Message',
            'log_url': 'LogUrl'
        }

        self._created_at = created_at
        self._server_name = server_name
        self._message = message
        self._log_url = log_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServerEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServerEvent of this ServerEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this ServerEvent.


        :return: The created_at of this ServerEvent.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ServerEvent.


        :param created_at: The created_at of this ServerEvent.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def server_name(self):
        """Gets the server_name of this ServerEvent.


        :return: The server_name of this ServerEvent.
        :rtype: str
        """
        return self._server_name

    @server_name.setter
    def server_name(self, server_name):
        """Sets the server_name of this ServerEvent.


        :param server_name: The server_name of this ServerEvent.
        :type server_name: str
        """

        self._server_name = server_name

    @property
    def message(self):
        """Gets the message of this ServerEvent.


        :return: The message of this ServerEvent.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ServerEvent.


        :param message: The message of this ServerEvent.
        :type message: str
        """

        self._message = message

    @property
    def log_url(self):
        """Gets the log_url of this ServerEvent.


        :return: The log_url of this ServerEvent.
        :rtype: str
        """
        return self._log_url

    @log_url.setter
    def log_url(self, log_url):
        """Sets the log_url of this ServerEvent.


        :param log_url: The log_url of this ServerEvent.
        :type log_url: str
        """

        self._log_url = log_url
