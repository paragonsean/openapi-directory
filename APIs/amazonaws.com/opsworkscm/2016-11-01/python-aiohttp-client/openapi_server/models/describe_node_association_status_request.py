# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DescribeNodeAssociationStatusRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, node_association_status_token: str=None, server_name: str=None):
        """DescribeNodeAssociationStatusRequest - a model defined in OpenAPI

        :param node_association_status_token: The node_association_status_token of this DescribeNodeAssociationStatusRequest.
        :param server_name: The server_name of this DescribeNodeAssociationStatusRequest.
        """
        self.openapi_types = {
            'node_association_status_token': str,
            'server_name': str
        }

        self.attribute_map = {
            'node_association_status_token': 'NodeAssociationStatusToken',
            'server_name': 'ServerName'
        }

        self._node_association_status_token = node_association_status_token
        self._server_name = server_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeNodeAssociationStatusRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeNodeAssociationStatusRequest of this DescribeNodeAssociationStatusRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def node_association_status_token(self):
        """Gets the node_association_status_token of this DescribeNodeAssociationStatusRequest.


        :return: The node_association_status_token of this DescribeNodeAssociationStatusRequest.
        :rtype: str
        """
        return self._node_association_status_token

    @node_association_status_token.setter
    def node_association_status_token(self, node_association_status_token):
        """Sets the node_association_status_token of this DescribeNodeAssociationStatusRequest.


        :param node_association_status_token: The node_association_status_token of this DescribeNodeAssociationStatusRequest.
        :type node_association_status_token: str
        """
        if node_association_status_token is None:
            raise ValueError("Invalid value for `node_association_status_token`, must not be `None`")

        self._node_association_status_token = node_association_status_token

    @property
    def server_name(self):
        """Gets the server_name of this DescribeNodeAssociationStatusRequest.


        :return: The server_name of this DescribeNodeAssociationStatusRequest.
        :rtype: str
        """
        return self._server_name

    @server_name.setter
    def server_name(self, server_name):
        """Sets the server_name of this DescribeNodeAssociationStatusRequest.


        :param server_name: The server_name of this DescribeNodeAssociationStatusRequest.
        :type server_name: str
        """
        if server_name is None:
            raise ValueError("Invalid value for `server_name`, must not be `None`")

        self._server_name = server_name
