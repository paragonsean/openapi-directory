/**
 * AWS OpsWorks CM
 * <fullname>AWS OpsWorks CM</fullname> <p>AWS OpsWorks for configuration management (CM) is a service that runs and manages configuration management servers. You can use AWS OpsWorks CM to create and manage AWS OpsWorks for Chef Automate and AWS OpsWorks for Puppet Enterprise servers, and add or remove nodes for the servers to manage.</p> <p> <b>Glossary of terms</b> </p> <ul> <li> <p> <b>Server</b>: A configuration management server that can be highly-available. The configuration management server runs on an Amazon Elastic Compute Cloud (EC2) instance, and may use various other AWS services, such as Amazon Relational Database Service (RDS) and Elastic Load Balancing. A server is a generic abstraction over the configuration manager that you want to use, much like Amazon RDS. In AWS OpsWorks CM, you do not start or stop servers. After you create servers, they continue to run until they are deleted.</p> </li> <li> <p> <b>Engine</b>: The engine is the specific configuration manager that you want to use. Valid values in this release include <code>ChefAutomate</code> and <code>Puppet</code>.</p> </li> <li> <p> <b>Backup</b>: This is an application-level backup of the data that the configuration manager stores. AWS OpsWorks CM creates an S3 bucket for backups when you launch the first server. A backup maintains a snapshot of a server's configuration-related attributes at the time the backup starts.</p> </li> <li> <p> <b>Events</b>: Events are always related to a server. Events are written during server creation, when health checks run, when backups are created, when system maintenance is performed, etc. When you delete a server, the server's events are also deleted.</p> </li> <li> <p> <b>Account attributes</b>: Every account has attributes that are assigned in the AWS OpsWorks CM database. These attributes store information about configuration limits (servers, backups, etc.) and your customer account. </p> </li> </ul> <p> <b>Endpoints</b> </p> <p>AWS OpsWorks CM supports the following endpoints, all HTTPS. You must connect to one of the following endpoints. Your servers can only be accessed or managed within the endpoint in which they are created.</p> <ul> <li> <p>opsworks-cm.us-east-1.amazonaws.com</p> </li> <li> <p>opsworks-cm.us-east-2.amazonaws.com</p> </li> <li> <p>opsworks-cm.us-west-1.amazonaws.com</p> </li> <li> <p>opsworks-cm.us-west-2.amazonaws.com</p> </li> <li> <p>opsworks-cm.ap-northeast-1.amazonaws.com</p> </li> <li> <p>opsworks-cm.ap-southeast-1.amazonaws.com</p> </li> <li> <p>opsworks-cm.ap-southeast-2.amazonaws.com</p> </li> <li> <p>opsworks-cm.eu-central-1.amazonaws.com</p> </li> <li> <p>opsworks-cm.eu-west-1.amazonaws.com</p> </li> </ul> <p>For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/opsworks-service.html\">AWS OpsWorks endpoints and quotas</a> in the AWS General Reference.</p> <p> <b>Throttling limits</b> </p> <p>All API operations allow for five requests per second with a burst of 10 requests per second.</p>
 *
 * The version of the OpenAPI document: 2016-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartMaintenanceResponse_Server.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartMaintenanceResponse_Server::OAIStartMaintenanceResponse_Server(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartMaintenanceResponse_Server::OAIStartMaintenanceResponse_Server() {
    this->initializeModel();
}

OAIStartMaintenanceResponse_Server::~OAIStartMaintenanceResponse_Server() {}

void OAIStartMaintenanceResponse_Server::initializeModel() {

    m_associate_public_ip_address_isSet = false;
    m_associate_public_ip_address_isValid = false;

    m_backup_retention_count_isSet = false;
    m_backup_retention_count_isValid = false;

    m_server_name_isSet = false;
    m_server_name_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_cloud_formation_stack_arn_isSet = false;
    m_cloud_formation_stack_arn_isValid = false;

    m_custom_domain_isSet = false;
    m_custom_domain_isValid = false;

    m_disable_automated_backup_isSet = false;
    m_disable_automated_backup_isValid = false;

    m_endpoint_isSet = false;
    m_endpoint_isValid = false;

    m_engine_isSet = false;
    m_engine_isValid = false;

    m_engine_model_isSet = false;
    m_engine_model_isValid = false;

    m_engine_attributes_isSet = false;
    m_engine_attributes_isValid = false;

    m_engine_version_isSet = false;
    m_engine_version_isValid = false;

    m_instance_profile_arn_isSet = false;
    m_instance_profile_arn_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;

    m_key_pair_isSet = false;
    m_key_pair_isValid = false;

    m_maintenance_status_isSet = false;
    m_maintenance_status_isValid = false;

    m_preferred_maintenance_window_isSet = false;
    m_preferred_maintenance_window_isValid = false;

    m_preferred_backup_window_isSet = false;
    m_preferred_backup_window_isValid = false;

    m_security_group_ids_isSet = false;
    m_security_group_ids_isValid = false;

    m_service_role_arn_isSet = false;
    m_service_role_arn_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_reason_isSet = false;
    m_status_reason_isValid = false;

    m_subnet_ids_isSet = false;
    m_subnet_ids_isValid = false;

    m_server_arn_isSet = false;
    m_server_arn_isValid = false;
}

void OAIStartMaintenanceResponse_Server::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartMaintenanceResponse_Server::fromJsonObject(QJsonObject json) {

    m_associate_public_ip_address_isValid = ::OpenAPI::fromJsonValue(m_associate_public_ip_address, json[QString("AssociatePublicIpAddress")]);
    m_associate_public_ip_address_isSet = !json[QString("AssociatePublicIpAddress")].isNull() && m_associate_public_ip_address_isValid;

    m_backup_retention_count_isValid = ::OpenAPI::fromJsonValue(m_backup_retention_count, json[QString("BackupRetentionCount")]);
    m_backup_retention_count_isSet = !json[QString("BackupRetentionCount")].isNull() && m_backup_retention_count_isValid;

    m_server_name_isValid = ::OpenAPI::fromJsonValue(m_server_name, json[QString("ServerName")]);
    m_server_name_isSet = !json[QString("ServerName")].isNull() && m_server_name_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("CreatedAt")]);
    m_created_at_isSet = !json[QString("CreatedAt")].isNull() && m_created_at_isValid;

    m_cloud_formation_stack_arn_isValid = ::OpenAPI::fromJsonValue(m_cloud_formation_stack_arn, json[QString("CloudFormationStackArn")]);
    m_cloud_formation_stack_arn_isSet = !json[QString("CloudFormationStackArn")].isNull() && m_cloud_formation_stack_arn_isValid;

    m_custom_domain_isValid = ::OpenAPI::fromJsonValue(m_custom_domain, json[QString("CustomDomain")]);
    m_custom_domain_isSet = !json[QString("CustomDomain")].isNull() && m_custom_domain_isValid;

    m_disable_automated_backup_isValid = ::OpenAPI::fromJsonValue(m_disable_automated_backup, json[QString("DisableAutomatedBackup")]);
    m_disable_automated_backup_isSet = !json[QString("DisableAutomatedBackup")].isNull() && m_disable_automated_backup_isValid;

    m_endpoint_isValid = ::OpenAPI::fromJsonValue(m_endpoint, json[QString("Endpoint")]);
    m_endpoint_isSet = !json[QString("Endpoint")].isNull() && m_endpoint_isValid;

    m_engine_isValid = ::OpenAPI::fromJsonValue(m_engine, json[QString("Engine")]);
    m_engine_isSet = !json[QString("Engine")].isNull() && m_engine_isValid;

    m_engine_model_isValid = ::OpenAPI::fromJsonValue(m_engine_model, json[QString("EngineModel")]);
    m_engine_model_isSet = !json[QString("EngineModel")].isNull() && m_engine_model_isValid;

    m_engine_attributes_isValid = ::OpenAPI::fromJsonValue(m_engine_attributes, json[QString("EngineAttributes")]);
    m_engine_attributes_isSet = !json[QString("EngineAttributes")].isNull() && m_engine_attributes_isValid;

    m_engine_version_isValid = ::OpenAPI::fromJsonValue(m_engine_version, json[QString("EngineVersion")]);
    m_engine_version_isSet = !json[QString("EngineVersion")].isNull() && m_engine_version_isValid;

    m_instance_profile_arn_isValid = ::OpenAPI::fromJsonValue(m_instance_profile_arn, json[QString("InstanceProfileArn")]);
    m_instance_profile_arn_isSet = !json[QString("InstanceProfileArn")].isNull() && m_instance_profile_arn_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("InstanceType")]);
    m_instance_type_isSet = !json[QString("InstanceType")].isNull() && m_instance_type_isValid;

    m_key_pair_isValid = ::OpenAPI::fromJsonValue(m_key_pair, json[QString("KeyPair")]);
    m_key_pair_isSet = !json[QString("KeyPair")].isNull() && m_key_pair_isValid;

    m_maintenance_status_isValid = ::OpenAPI::fromJsonValue(m_maintenance_status, json[QString("MaintenanceStatus")]);
    m_maintenance_status_isSet = !json[QString("MaintenanceStatus")].isNull() && m_maintenance_status_isValid;

    m_preferred_maintenance_window_isValid = ::OpenAPI::fromJsonValue(m_preferred_maintenance_window, json[QString("PreferredMaintenanceWindow")]);
    m_preferred_maintenance_window_isSet = !json[QString("PreferredMaintenanceWindow")].isNull() && m_preferred_maintenance_window_isValid;

    m_preferred_backup_window_isValid = ::OpenAPI::fromJsonValue(m_preferred_backup_window, json[QString("PreferredBackupWindow")]);
    m_preferred_backup_window_isSet = !json[QString("PreferredBackupWindow")].isNull() && m_preferred_backup_window_isValid;

    m_security_group_ids_isValid = ::OpenAPI::fromJsonValue(m_security_group_ids, json[QString("SecurityGroupIds")]);
    m_security_group_ids_isSet = !json[QString("SecurityGroupIds")].isNull() && m_security_group_ids_isValid;

    m_service_role_arn_isValid = ::OpenAPI::fromJsonValue(m_service_role_arn, json[QString("ServiceRoleArn")]);
    m_service_role_arn_isSet = !json[QString("ServiceRoleArn")].isNull() && m_service_role_arn_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_status_reason_isValid = ::OpenAPI::fromJsonValue(m_status_reason, json[QString("StatusReason")]);
    m_status_reason_isSet = !json[QString("StatusReason")].isNull() && m_status_reason_isValid;

    m_subnet_ids_isValid = ::OpenAPI::fromJsonValue(m_subnet_ids, json[QString("SubnetIds")]);
    m_subnet_ids_isSet = !json[QString("SubnetIds")].isNull() && m_subnet_ids_isValid;

    m_server_arn_isValid = ::OpenAPI::fromJsonValue(m_server_arn, json[QString("ServerArn")]);
    m_server_arn_isSet = !json[QString("ServerArn")].isNull() && m_server_arn_isValid;
}

QString OAIStartMaintenanceResponse_Server::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartMaintenanceResponse_Server::asJsonObject() const {
    QJsonObject obj;
    if (m_associate_public_ip_address_isSet) {
        obj.insert(QString("AssociatePublicIpAddress"), ::OpenAPI::toJsonValue(m_associate_public_ip_address));
    }
    if (m_backup_retention_count_isSet) {
        obj.insert(QString("BackupRetentionCount"), ::OpenAPI::toJsonValue(m_backup_retention_count));
    }
    if (m_server_name_isSet) {
        obj.insert(QString("ServerName"), ::OpenAPI::toJsonValue(m_server_name));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("CreatedAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_cloud_formation_stack_arn_isSet) {
        obj.insert(QString("CloudFormationStackArn"), ::OpenAPI::toJsonValue(m_cloud_formation_stack_arn));
    }
    if (m_custom_domain_isSet) {
        obj.insert(QString("CustomDomain"), ::OpenAPI::toJsonValue(m_custom_domain));
    }
    if (m_disable_automated_backup_isSet) {
        obj.insert(QString("DisableAutomatedBackup"), ::OpenAPI::toJsonValue(m_disable_automated_backup));
    }
    if (m_endpoint_isSet) {
        obj.insert(QString("Endpoint"), ::OpenAPI::toJsonValue(m_endpoint));
    }
    if (m_engine_isSet) {
        obj.insert(QString("Engine"), ::OpenAPI::toJsonValue(m_engine));
    }
    if (m_engine_model_isSet) {
        obj.insert(QString("EngineModel"), ::OpenAPI::toJsonValue(m_engine_model));
    }
    if (m_engine_attributes.isSet()) {
        obj.insert(QString("EngineAttributes"), ::OpenAPI::toJsonValue(m_engine_attributes));
    }
    if (m_engine_version_isSet) {
        obj.insert(QString("EngineVersion"), ::OpenAPI::toJsonValue(m_engine_version));
    }
    if (m_instance_profile_arn_isSet) {
        obj.insert(QString("InstanceProfileArn"), ::OpenAPI::toJsonValue(m_instance_profile_arn));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("InstanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    if (m_key_pair_isSet) {
        obj.insert(QString("KeyPair"), ::OpenAPI::toJsonValue(m_key_pair));
    }
    if (m_maintenance_status.isSet()) {
        obj.insert(QString("MaintenanceStatus"), ::OpenAPI::toJsonValue(m_maintenance_status));
    }
    if (m_preferred_maintenance_window_isSet) {
        obj.insert(QString("PreferredMaintenanceWindow"), ::OpenAPI::toJsonValue(m_preferred_maintenance_window));
    }
    if (m_preferred_backup_window_isSet) {
        obj.insert(QString("PreferredBackupWindow"), ::OpenAPI::toJsonValue(m_preferred_backup_window));
    }
    if (m_security_group_ids.isSet()) {
        obj.insert(QString("SecurityGroupIds"), ::OpenAPI::toJsonValue(m_security_group_ids));
    }
    if (m_service_role_arn_isSet) {
        obj.insert(QString("ServiceRoleArn"), ::OpenAPI::toJsonValue(m_service_role_arn));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_reason_isSet) {
        obj.insert(QString("StatusReason"), ::OpenAPI::toJsonValue(m_status_reason));
    }
    if (m_subnet_ids.isSet()) {
        obj.insert(QString("SubnetIds"), ::OpenAPI::toJsonValue(m_subnet_ids));
    }
    if (m_server_arn_isSet) {
        obj.insert(QString("ServerArn"), ::OpenAPI::toJsonValue(m_server_arn));
    }
    return obj;
}

bool OAIStartMaintenanceResponse_Server::getAssociatePublicIpAddress() const {
    return m_associate_public_ip_address;
}
void OAIStartMaintenanceResponse_Server::setAssociatePublicIpAddress(const bool &associate_public_ip_address) {
    m_associate_public_ip_address = associate_public_ip_address;
    m_associate_public_ip_address_isSet = true;
}

bool OAIStartMaintenanceResponse_Server::is_associate_public_ip_address_Set() const{
    return m_associate_public_ip_address_isSet;
}

bool OAIStartMaintenanceResponse_Server::is_associate_public_ip_address_Valid() const{
    return m_associate_public_ip_address_isValid;
}

qint32 OAIStartMaintenanceResponse_Server::getBackupRetentionCount() const {
    return m_backup_retention_count;
}
void OAIStartMaintenanceResponse_Server::setBackupRetentionCount(const qint32 &backup_retention_count) {
    m_backup_retention_count = backup_retention_count;
    m_backup_retention_count_isSet = true;
}

bool OAIStartMaintenanceResponse_Server::is_backup_retention_count_Set() const{
    return m_backup_retention_count_isSet;
}

bool OAIStartMaintenanceResponse_Server::is_backup_retention_count_Valid() const{
    return m_backup_retention_count_isValid;
}

QString OAIStartMaintenanceResponse_Server::getServerName() const {
    return m_server_name;
}
void OAIStartMaintenanceResponse_Server::setServerName(const QString &server_name) {
    m_server_name = server_name;
    m_server_name_isSet = true;
}

bool OAIStartMaintenanceResponse_Server::is_server_name_Set() const{
    return m_server_name_isSet;
}

bool OAIStartMaintenanceResponse_Server::is_server_name_Valid() const{
    return m_server_name_isValid;
}

QDateTime OAIStartMaintenanceResponse_Server::getCreatedAt() const {
    return m_created_at;
}
void OAIStartMaintenanceResponse_Server::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIStartMaintenanceResponse_Server::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIStartMaintenanceResponse_Server::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIStartMaintenanceResponse_Server::getCloudFormationStackArn() const {
    return m_cloud_formation_stack_arn;
}
void OAIStartMaintenanceResponse_Server::setCloudFormationStackArn(const QString &cloud_formation_stack_arn) {
    m_cloud_formation_stack_arn = cloud_formation_stack_arn;
    m_cloud_formation_stack_arn_isSet = true;
}

bool OAIStartMaintenanceResponse_Server::is_cloud_formation_stack_arn_Set() const{
    return m_cloud_formation_stack_arn_isSet;
}

bool OAIStartMaintenanceResponse_Server::is_cloud_formation_stack_arn_Valid() const{
    return m_cloud_formation_stack_arn_isValid;
}

QString OAIStartMaintenanceResponse_Server::getCustomDomain() const {
    return m_custom_domain;
}
void OAIStartMaintenanceResponse_Server::setCustomDomain(const QString &custom_domain) {
    m_custom_domain = custom_domain;
    m_custom_domain_isSet = true;
}

bool OAIStartMaintenanceResponse_Server::is_custom_domain_Set() const{
    return m_custom_domain_isSet;
}

bool OAIStartMaintenanceResponse_Server::is_custom_domain_Valid() const{
    return m_custom_domain_isValid;
}

bool OAIStartMaintenanceResponse_Server::getDisableAutomatedBackup() const {
    return m_disable_automated_backup;
}
void OAIStartMaintenanceResponse_Server::setDisableAutomatedBackup(const bool &disable_automated_backup) {
    m_disable_automated_backup = disable_automated_backup;
    m_disable_automated_backup_isSet = true;
}

bool OAIStartMaintenanceResponse_Server::is_disable_automated_backup_Set() const{
    return m_disable_automated_backup_isSet;
}

bool OAIStartMaintenanceResponse_Server::is_disable_automated_backup_Valid() const{
    return m_disable_automated_backup_isValid;
}

QString OAIStartMaintenanceResponse_Server::getEndpoint() const {
    return m_endpoint;
}
void OAIStartMaintenanceResponse_Server::setEndpoint(const QString &endpoint) {
    m_endpoint = endpoint;
    m_endpoint_isSet = true;
}

bool OAIStartMaintenanceResponse_Server::is_endpoint_Set() const{
    return m_endpoint_isSet;
}

bool OAIStartMaintenanceResponse_Server::is_endpoint_Valid() const{
    return m_endpoint_isValid;
}

QString OAIStartMaintenanceResponse_Server::getEngine() const {
    return m_engine;
}
void OAIStartMaintenanceResponse_Server::setEngine(const QString &engine) {
    m_engine = engine;
    m_engine_isSet = true;
}

bool OAIStartMaintenanceResponse_Server::is_engine_Set() const{
    return m_engine_isSet;
}

bool OAIStartMaintenanceResponse_Server::is_engine_Valid() const{
    return m_engine_isValid;
}

QString OAIStartMaintenanceResponse_Server::getEngineModel() const {
    return m_engine_model;
}
void OAIStartMaintenanceResponse_Server::setEngineModel(const QString &engine_model) {
    m_engine_model = engine_model;
    m_engine_model_isSet = true;
}

bool OAIStartMaintenanceResponse_Server::is_engine_model_Set() const{
    return m_engine_model_isSet;
}

bool OAIStartMaintenanceResponse_Server::is_engine_model_Valid() const{
    return m_engine_model_isValid;
}

QList OAIStartMaintenanceResponse_Server::getEngineAttributes() const {
    return m_engine_attributes;
}
void OAIStartMaintenanceResponse_Server::setEngineAttributes(const QList &engine_attributes) {
    m_engine_attributes = engine_attributes;
    m_engine_attributes_isSet = true;
}

bool OAIStartMaintenanceResponse_Server::is_engine_attributes_Set() const{
    return m_engine_attributes_isSet;
}

bool OAIStartMaintenanceResponse_Server::is_engine_attributes_Valid() const{
    return m_engine_attributes_isValid;
}

QString OAIStartMaintenanceResponse_Server::getEngineVersion() const {
    return m_engine_version;
}
void OAIStartMaintenanceResponse_Server::setEngineVersion(const QString &engine_version) {
    m_engine_version = engine_version;
    m_engine_version_isSet = true;
}

bool OAIStartMaintenanceResponse_Server::is_engine_version_Set() const{
    return m_engine_version_isSet;
}

bool OAIStartMaintenanceResponse_Server::is_engine_version_Valid() const{
    return m_engine_version_isValid;
}

QString OAIStartMaintenanceResponse_Server::getInstanceProfileArn() const {
    return m_instance_profile_arn;
}
void OAIStartMaintenanceResponse_Server::setInstanceProfileArn(const QString &instance_profile_arn) {
    m_instance_profile_arn = instance_profile_arn;
    m_instance_profile_arn_isSet = true;
}

bool OAIStartMaintenanceResponse_Server::is_instance_profile_arn_Set() const{
    return m_instance_profile_arn_isSet;
}

bool OAIStartMaintenanceResponse_Server::is_instance_profile_arn_Valid() const{
    return m_instance_profile_arn_isValid;
}

QString OAIStartMaintenanceResponse_Server::getInstanceType() const {
    return m_instance_type;
}
void OAIStartMaintenanceResponse_Server::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIStartMaintenanceResponse_Server::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIStartMaintenanceResponse_Server::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

QString OAIStartMaintenanceResponse_Server::getKeyPair() const {
    return m_key_pair;
}
void OAIStartMaintenanceResponse_Server::setKeyPair(const QString &key_pair) {
    m_key_pair = key_pair;
    m_key_pair_isSet = true;
}

bool OAIStartMaintenanceResponse_Server::is_key_pair_Set() const{
    return m_key_pair_isSet;
}

bool OAIStartMaintenanceResponse_Server::is_key_pair_Valid() const{
    return m_key_pair_isValid;
}

OAIMaintenanceStatus OAIStartMaintenanceResponse_Server::getMaintenanceStatus() const {
    return m_maintenance_status;
}
void OAIStartMaintenanceResponse_Server::setMaintenanceStatus(const OAIMaintenanceStatus &maintenance_status) {
    m_maintenance_status = maintenance_status;
    m_maintenance_status_isSet = true;
}

bool OAIStartMaintenanceResponse_Server::is_maintenance_status_Set() const{
    return m_maintenance_status_isSet;
}

bool OAIStartMaintenanceResponse_Server::is_maintenance_status_Valid() const{
    return m_maintenance_status_isValid;
}

QString OAIStartMaintenanceResponse_Server::getPreferredMaintenanceWindow() const {
    return m_preferred_maintenance_window;
}
void OAIStartMaintenanceResponse_Server::setPreferredMaintenanceWindow(const QString &preferred_maintenance_window) {
    m_preferred_maintenance_window = preferred_maintenance_window;
    m_preferred_maintenance_window_isSet = true;
}

bool OAIStartMaintenanceResponse_Server::is_preferred_maintenance_window_Set() const{
    return m_preferred_maintenance_window_isSet;
}

bool OAIStartMaintenanceResponse_Server::is_preferred_maintenance_window_Valid() const{
    return m_preferred_maintenance_window_isValid;
}

QString OAIStartMaintenanceResponse_Server::getPreferredBackupWindow() const {
    return m_preferred_backup_window;
}
void OAIStartMaintenanceResponse_Server::setPreferredBackupWindow(const QString &preferred_backup_window) {
    m_preferred_backup_window = preferred_backup_window;
    m_preferred_backup_window_isSet = true;
}

bool OAIStartMaintenanceResponse_Server::is_preferred_backup_window_Set() const{
    return m_preferred_backup_window_isSet;
}

bool OAIStartMaintenanceResponse_Server::is_preferred_backup_window_Valid() const{
    return m_preferred_backup_window_isValid;
}

QList OAIStartMaintenanceResponse_Server::getSecurityGroupIds() const {
    return m_security_group_ids;
}
void OAIStartMaintenanceResponse_Server::setSecurityGroupIds(const QList &security_group_ids) {
    m_security_group_ids = security_group_ids;
    m_security_group_ids_isSet = true;
}

bool OAIStartMaintenanceResponse_Server::is_security_group_ids_Set() const{
    return m_security_group_ids_isSet;
}

bool OAIStartMaintenanceResponse_Server::is_security_group_ids_Valid() const{
    return m_security_group_ids_isValid;
}

QString OAIStartMaintenanceResponse_Server::getServiceRoleArn() const {
    return m_service_role_arn;
}
void OAIStartMaintenanceResponse_Server::setServiceRoleArn(const QString &service_role_arn) {
    m_service_role_arn = service_role_arn;
    m_service_role_arn_isSet = true;
}

bool OAIStartMaintenanceResponse_Server::is_service_role_arn_Set() const{
    return m_service_role_arn_isSet;
}

bool OAIStartMaintenanceResponse_Server::is_service_role_arn_Valid() const{
    return m_service_role_arn_isValid;
}

OAIServerStatus OAIStartMaintenanceResponse_Server::getStatus() const {
    return m_status;
}
void OAIStartMaintenanceResponse_Server::setStatus(const OAIServerStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIStartMaintenanceResponse_Server::is_status_Set() const{
    return m_status_isSet;
}

bool OAIStartMaintenanceResponse_Server::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIStartMaintenanceResponse_Server::getStatusReason() const {
    return m_status_reason;
}
void OAIStartMaintenanceResponse_Server::setStatusReason(const QString &status_reason) {
    m_status_reason = status_reason;
    m_status_reason_isSet = true;
}

bool OAIStartMaintenanceResponse_Server::is_status_reason_Set() const{
    return m_status_reason_isSet;
}

bool OAIStartMaintenanceResponse_Server::is_status_reason_Valid() const{
    return m_status_reason_isValid;
}

QList OAIStartMaintenanceResponse_Server::getSubnetIds() const {
    return m_subnet_ids;
}
void OAIStartMaintenanceResponse_Server::setSubnetIds(const QList &subnet_ids) {
    m_subnet_ids = subnet_ids;
    m_subnet_ids_isSet = true;
}

bool OAIStartMaintenanceResponse_Server::is_subnet_ids_Set() const{
    return m_subnet_ids_isSet;
}

bool OAIStartMaintenanceResponse_Server::is_subnet_ids_Valid() const{
    return m_subnet_ids_isValid;
}

QString OAIStartMaintenanceResponse_Server::getServerArn() const {
    return m_server_arn;
}
void OAIStartMaintenanceResponse_Server::setServerArn(const QString &server_arn) {
    m_server_arn = server_arn;
    m_server_arn_isSet = true;
}

bool OAIStartMaintenanceResponse_Server::is_server_arn_Set() const{
    return m_server_arn_isSet;
}

bool OAIStartMaintenanceResponse_Server::is_server_arn_Valid() const{
    return m_server_arn_isValid;
}

bool OAIStartMaintenanceResponse_Server::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_associate_public_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_retention_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloud_formation_stack_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_automated_backup_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_profile_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_pair_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maintenance_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_maintenance_window_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_backup_window_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_group_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartMaintenanceResponse_Server::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
