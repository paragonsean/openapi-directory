/**
 * AWS OpsWorks CM
 * <fullname>AWS OpsWorks CM</fullname> <p>AWS OpsWorks for configuration management (CM) is a service that runs and manages configuration management servers. You can use AWS OpsWorks CM to create and manage AWS OpsWorks for Chef Automate and AWS OpsWorks for Puppet Enterprise servers, and add or remove nodes for the servers to manage.</p> <p> <b>Glossary of terms</b> </p> <ul> <li> <p> <b>Server</b>: A configuration management server that can be highly-available. The configuration management server runs on an Amazon Elastic Compute Cloud (EC2) instance, and may use various other AWS services, such as Amazon Relational Database Service (RDS) and Elastic Load Balancing. A server is a generic abstraction over the configuration manager that you want to use, much like Amazon RDS. In AWS OpsWorks CM, you do not start or stop servers. After you create servers, they continue to run until they are deleted.</p> </li> <li> <p> <b>Engine</b>: The engine is the specific configuration manager that you want to use. Valid values in this release include <code>ChefAutomate</code> and <code>Puppet</code>.</p> </li> <li> <p> <b>Backup</b>: This is an application-level backup of the data that the configuration manager stores. AWS OpsWorks CM creates an S3 bucket for backups when you launch the first server. A backup maintains a snapshot of a server's configuration-related attributes at the time the backup starts.</p> </li> <li> <p> <b>Events</b>: Events are always related to a server. Events are written during server creation, when health checks run, when backups are created, when system maintenance is performed, etc. When you delete a server, the server's events are also deleted.</p> </li> <li> <p> <b>Account attributes</b>: Every account has attributes that are assigned in the AWS OpsWorks CM database. These attributes store information about configuration limits (servers, backups, etc.) and your customer account. </p> </li> </ul> <p> <b>Endpoints</b> </p> <p>AWS OpsWorks CM supports the following endpoints, all HTTPS. You must connect to one of the following endpoints. Your servers can only be accessed or managed within the endpoint in which they are created.</p> <ul> <li> <p>opsworks-cm.us-east-1.amazonaws.com</p> </li> <li> <p>opsworks-cm.us-east-2.amazonaws.com</p> </li> <li> <p>opsworks-cm.us-west-1.amazonaws.com</p> </li> <li> <p>opsworks-cm.us-west-2.amazonaws.com</p> </li> <li> <p>opsworks-cm.ap-northeast-1.amazonaws.com</p> </li> <li> <p>opsworks-cm.ap-southeast-1.amazonaws.com</p> </li> <li> <p>opsworks-cm.ap-southeast-2.amazonaws.com</p> </li> <li> <p>opsworks-cm.eu-central-1.amazonaws.com</p> </li> <li> <p>opsworks-cm.eu-west-1.amazonaws.com</p> </li> </ul> <p>For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/opsworks-service.html\">AWS OpsWorks endpoints and quotas</a> in the AWS General Reference.</p> <p> <b>Throttling limits</b> </p> <p>All API operations allow for five requests per second with a burst of 10 requests per second.</p>
 *
 * The version of the OpenAPI document: 2016-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUpdateServerResponse_Server.h
 *
 * 
 */

#ifndef OAIUpdateServerResponse_Server_H
#define OAIUpdateServerResponse_Server_H

#include <QJsonObject>

#include "OAIMaintenanceStatus.h"
#include "OAIServerStatus.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIUpdateServerResponse_Server : public OAIObject {
public:
    OAIUpdateServerResponse_Server();
    OAIUpdateServerResponse_Server(QString json);
    ~OAIUpdateServerResponse_Server() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool getAssociatePublicIpAddress() const;
    void setAssociatePublicIpAddress(const bool &associate_public_ip_address);
    bool is_associate_public_ip_address_Set() const;
    bool is_associate_public_ip_address_Valid() const;

    qint32 getBackupRetentionCount() const;
    void setBackupRetentionCount(const qint32 &backup_retention_count);
    bool is_backup_retention_count_Set() const;
    bool is_backup_retention_count_Valid() const;

    QString getServerName() const;
    void setServerName(const QString &server_name);
    bool is_server_name_Set() const;
    bool is_server_name_Valid() const;

    QDateTime getCreatedAt() const;
    void setCreatedAt(const QDateTime &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    QString getCloudFormationStackArn() const;
    void setCloudFormationStackArn(const QString &cloud_formation_stack_arn);
    bool is_cloud_formation_stack_arn_Set() const;
    bool is_cloud_formation_stack_arn_Valid() const;

    QString getCustomDomain() const;
    void setCustomDomain(const QString &custom_domain);
    bool is_custom_domain_Set() const;
    bool is_custom_domain_Valid() const;

    bool getDisableAutomatedBackup() const;
    void setDisableAutomatedBackup(const bool &disable_automated_backup);
    bool is_disable_automated_backup_Set() const;
    bool is_disable_automated_backup_Valid() const;

    QString getEndpoint() const;
    void setEndpoint(const QString &endpoint);
    bool is_endpoint_Set() const;
    bool is_endpoint_Valid() const;

    QString getEngine() const;
    void setEngine(const QString &engine);
    bool is_engine_Set() const;
    bool is_engine_Valid() const;

    QString getEngineModel() const;
    void setEngineModel(const QString &engine_model);
    bool is_engine_model_Set() const;
    bool is_engine_model_Valid() const;

    QList getEngineAttributes() const;
    void setEngineAttributes(const QList &engine_attributes);
    bool is_engine_attributes_Set() const;
    bool is_engine_attributes_Valid() const;

    QString getEngineVersion() const;
    void setEngineVersion(const QString &engine_version);
    bool is_engine_version_Set() const;
    bool is_engine_version_Valid() const;

    QString getInstanceProfileArn() const;
    void setInstanceProfileArn(const QString &instance_profile_arn);
    bool is_instance_profile_arn_Set() const;
    bool is_instance_profile_arn_Valid() const;

    QString getInstanceType() const;
    void setInstanceType(const QString &instance_type);
    bool is_instance_type_Set() const;
    bool is_instance_type_Valid() const;

    QString getKeyPair() const;
    void setKeyPair(const QString &key_pair);
    bool is_key_pair_Set() const;
    bool is_key_pair_Valid() const;

    OAIMaintenanceStatus getMaintenanceStatus() const;
    void setMaintenanceStatus(const OAIMaintenanceStatus &maintenance_status);
    bool is_maintenance_status_Set() const;
    bool is_maintenance_status_Valid() const;

    QString getPreferredMaintenanceWindow() const;
    void setPreferredMaintenanceWindow(const QString &preferred_maintenance_window);
    bool is_preferred_maintenance_window_Set() const;
    bool is_preferred_maintenance_window_Valid() const;

    QString getPreferredBackupWindow() const;
    void setPreferredBackupWindow(const QString &preferred_backup_window);
    bool is_preferred_backup_window_Set() const;
    bool is_preferred_backup_window_Valid() const;

    QList getSecurityGroupIds() const;
    void setSecurityGroupIds(const QList &security_group_ids);
    bool is_security_group_ids_Set() const;
    bool is_security_group_ids_Valid() const;

    QString getServiceRoleArn() const;
    void setServiceRoleArn(const QString &service_role_arn);
    bool is_service_role_arn_Set() const;
    bool is_service_role_arn_Valid() const;

    OAIServerStatus getStatus() const;
    void setStatus(const OAIServerStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getStatusReason() const;
    void setStatusReason(const QString &status_reason);
    bool is_status_reason_Set() const;
    bool is_status_reason_Valid() const;

    QList getSubnetIds() const;
    void setSubnetIds(const QList &subnet_ids);
    bool is_subnet_ids_Set() const;
    bool is_subnet_ids_Valid() const;

    QString getServerArn() const;
    void setServerArn(const QString &server_arn);
    bool is_server_arn_Set() const;
    bool is_server_arn_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_associate_public_ip_address;
    bool m_associate_public_ip_address_isSet;
    bool m_associate_public_ip_address_isValid;

    qint32 m_backup_retention_count;
    bool m_backup_retention_count_isSet;
    bool m_backup_retention_count_isValid;

    QString m_server_name;
    bool m_server_name_isSet;
    bool m_server_name_isValid;

    QDateTime m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    QString m_cloud_formation_stack_arn;
    bool m_cloud_formation_stack_arn_isSet;
    bool m_cloud_formation_stack_arn_isValid;

    QString m_custom_domain;
    bool m_custom_domain_isSet;
    bool m_custom_domain_isValid;

    bool m_disable_automated_backup;
    bool m_disable_automated_backup_isSet;
    bool m_disable_automated_backup_isValid;

    QString m_endpoint;
    bool m_endpoint_isSet;
    bool m_endpoint_isValid;

    QString m_engine;
    bool m_engine_isSet;
    bool m_engine_isValid;

    QString m_engine_model;
    bool m_engine_model_isSet;
    bool m_engine_model_isValid;

    QList m_engine_attributes;
    bool m_engine_attributes_isSet;
    bool m_engine_attributes_isValid;

    QString m_engine_version;
    bool m_engine_version_isSet;
    bool m_engine_version_isValid;

    QString m_instance_profile_arn;
    bool m_instance_profile_arn_isSet;
    bool m_instance_profile_arn_isValid;

    QString m_instance_type;
    bool m_instance_type_isSet;
    bool m_instance_type_isValid;

    QString m_key_pair;
    bool m_key_pair_isSet;
    bool m_key_pair_isValid;

    OAIMaintenanceStatus m_maintenance_status;
    bool m_maintenance_status_isSet;
    bool m_maintenance_status_isValid;

    QString m_preferred_maintenance_window;
    bool m_preferred_maintenance_window_isSet;
    bool m_preferred_maintenance_window_isValid;

    QString m_preferred_backup_window;
    bool m_preferred_backup_window_isSet;
    bool m_preferred_backup_window_isValid;

    QList m_security_group_ids;
    bool m_security_group_ids_isSet;
    bool m_security_group_ids_isValid;

    QString m_service_role_arn;
    bool m_service_role_arn_isSet;
    bool m_service_role_arn_isValid;

    OAIServerStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_status_reason;
    bool m_status_reason_isSet;
    bool m_status_reason_isValid;

    QList m_subnet_ids;
    bool m_subnet_ids_isSet;
    bool m_subnet_ids_isValid;

    QString m_server_arn;
    bool m_server_arn_isSet;
    bool m_server_arn_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUpdateServerResponse_Server)

#endif // OAIUpdateServerResponse_Server_H
