/**
 * AWS OpsWorks CM
 * <fullname>AWS OpsWorks CM</fullname> <p>AWS OpsWorks for configuration management (CM) is a service that runs and manages configuration management servers. You can use AWS OpsWorks CM to create and manage AWS OpsWorks for Chef Automate and AWS OpsWorks for Puppet Enterprise servers, and add or remove nodes for the servers to manage.</p> <p> <b>Glossary of terms</b> </p> <ul> <li> <p> <b>Server</b>: A configuration management server that can be highly-available. The configuration management server runs on an Amazon Elastic Compute Cloud (EC2) instance, and may use various other AWS services, such as Amazon Relational Database Service (RDS) and Elastic Load Balancing. A server is a generic abstraction over the configuration manager that you want to use, much like Amazon RDS. In AWS OpsWorks CM, you do not start or stop servers. After you create servers, they continue to run until they are deleted.</p> </li> <li> <p> <b>Engine</b>: The engine is the specific configuration manager that you want to use. Valid values in this release include <code>ChefAutomate</code> and <code>Puppet</code>.</p> </li> <li> <p> <b>Backup</b>: This is an application-level backup of the data that the configuration manager stores. AWS OpsWorks CM creates an S3 bucket for backups when you launch the first server. A backup maintains a snapshot of a server's configuration-related attributes at the time the backup starts.</p> </li> <li> <p> <b>Events</b>: Events are always related to a server. Events are written during server creation, when health checks run, when backups are created, when system maintenance is performed, etc. When you delete a server, the server's events are also deleted.</p> </li> <li> <p> <b>Account attributes</b>: Every account has attributes that are assigned in the AWS OpsWorks CM database. These attributes store information about configuration limits (servers, backups, etc.) and your customer account. </p> </li> </ul> <p> <b>Endpoints</b> </p> <p>AWS OpsWorks CM supports the following endpoints, all HTTPS. You must connect to one of the following endpoints. Your servers can only be accessed or managed within the endpoint in which they are created.</p> <ul> <li> <p>opsworks-cm.us-east-1.amazonaws.com</p> </li> <li> <p>opsworks-cm.us-east-2.amazonaws.com</p> </li> <li> <p>opsworks-cm.us-west-1.amazonaws.com</p> </li> <li> <p>opsworks-cm.us-west-2.amazonaws.com</p> </li> <li> <p>opsworks-cm.ap-northeast-1.amazonaws.com</p> </li> <li> <p>opsworks-cm.ap-southeast-1.amazonaws.com</p> </li> <li> <p>opsworks-cm.ap-southeast-2.amazonaws.com</p> </li> <li> <p>opsworks-cm.eu-central-1.amazonaws.com</p> </li> <li> <p>opsworks-cm.eu-west-1.amazonaws.com</p> </li> </ul> <p>For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/opsworks-service.html\">AWS OpsWorks endpoints and quotas</a> in the AWS General Reference.</p> <p> <b>Throttling limits</b> </p> <p>All API operations allow for five requests per second with a burst of 10 requests per second.</p>
 *
 * The version of the OpenAPI document: 2016-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBackup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBackup::OAIBackup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBackup::OAIBackup() {
    this->initializeModel();
}

OAIBackup::~OAIBackup() {}

void OAIBackup::initializeModel() {

    m_backup_arn_isSet = false;
    m_backup_arn_isValid = false;

    m_backup_id_isSet = false;
    m_backup_id_isValid = false;

    m_backup_type_isSet = false;
    m_backup_type_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_engine_isSet = false;
    m_engine_isValid = false;

    m_engine_model_isSet = false;
    m_engine_model_isValid = false;

    m_engine_version_isSet = false;
    m_engine_version_isValid = false;

    m_instance_profile_arn_isSet = false;
    m_instance_profile_arn_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;

    m_key_pair_isSet = false;
    m_key_pair_isValid = false;

    m_preferred_backup_window_isSet = false;
    m_preferred_backup_window_isValid = false;

    m_preferred_maintenance_window_isSet = false;
    m_preferred_maintenance_window_isValid = false;

    m_s3_data_size_isSet = false;
    m_s3_data_size_isValid = false;

    m_s3_data_url_isSet = false;
    m_s3_data_url_isValid = false;

    m_s3_log_url_isSet = false;
    m_s3_log_url_isValid = false;

    m_security_group_ids_isSet = false;
    m_security_group_ids_isValid = false;

    m_server_name_isSet = false;
    m_server_name_isValid = false;

    m_service_role_arn_isSet = false;
    m_service_role_arn_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_description_isSet = false;
    m_status_description_isValid = false;

    m_subnet_ids_isSet = false;
    m_subnet_ids_isValid = false;

    m_tools_version_isSet = false;
    m_tools_version_isValid = false;

    m_user_arn_isSet = false;
    m_user_arn_isValid = false;
}

void OAIBackup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBackup::fromJsonObject(QJsonObject json) {

    m_backup_arn_isValid = ::OpenAPI::fromJsonValue(m_backup_arn, json[QString("BackupArn")]);
    m_backup_arn_isSet = !json[QString("BackupArn")].isNull() && m_backup_arn_isValid;

    m_backup_id_isValid = ::OpenAPI::fromJsonValue(m_backup_id, json[QString("BackupId")]);
    m_backup_id_isSet = !json[QString("BackupId")].isNull() && m_backup_id_isValid;

    m_backup_type_isValid = ::OpenAPI::fromJsonValue(m_backup_type, json[QString("BackupType")]);
    m_backup_type_isSet = !json[QString("BackupType")].isNull() && m_backup_type_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("CreatedAt")]);
    m_created_at_isSet = !json[QString("CreatedAt")].isNull() && m_created_at_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_engine_isValid = ::OpenAPI::fromJsonValue(m_engine, json[QString("Engine")]);
    m_engine_isSet = !json[QString("Engine")].isNull() && m_engine_isValid;

    m_engine_model_isValid = ::OpenAPI::fromJsonValue(m_engine_model, json[QString("EngineModel")]);
    m_engine_model_isSet = !json[QString("EngineModel")].isNull() && m_engine_model_isValid;

    m_engine_version_isValid = ::OpenAPI::fromJsonValue(m_engine_version, json[QString("EngineVersion")]);
    m_engine_version_isSet = !json[QString("EngineVersion")].isNull() && m_engine_version_isValid;

    m_instance_profile_arn_isValid = ::OpenAPI::fromJsonValue(m_instance_profile_arn, json[QString("InstanceProfileArn")]);
    m_instance_profile_arn_isSet = !json[QString("InstanceProfileArn")].isNull() && m_instance_profile_arn_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("InstanceType")]);
    m_instance_type_isSet = !json[QString("InstanceType")].isNull() && m_instance_type_isValid;

    m_key_pair_isValid = ::OpenAPI::fromJsonValue(m_key_pair, json[QString("KeyPair")]);
    m_key_pair_isSet = !json[QString("KeyPair")].isNull() && m_key_pair_isValid;

    m_preferred_backup_window_isValid = ::OpenAPI::fromJsonValue(m_preferred_backup_window, json[QString("PreferredBackupWindow")]);
    m_preferred_backup_window_isSet = !json[QString("PreferredBackupWindow")].isNull() && m_preferred_backup_window_isValid;

    m_preferred_maintenance_window_isValid = ::OpenAPI::fromJsonValue(m_preferred_maintenance_window, json[QString("PreferredMaintenanceWindow")]);
    m_preferred_maintenance_window_isSet = !json[QString("PreferredMaintenanceWindow")].isNull() && m_preferred_maintenance_window_isValid;

    m_s3_data_size_isValid = ::OpenAPI::fromJsonValue(m_s3_data_size, json[QString("S3DataSize")]);
    m_s3_data_size_isSet = !json[QString("S3DataSize")].isNull() && m_s3_data_size_isValid;

    m_s3_data_url_isValid = ::OpenAPI::fromJsonValue(m_s3_data_url, json[QString("S3DataUrl")]);
    m_s3_data_url_isSet = !json[QString("S3DataUrl")].isNull() && m_s3_data_url_isValid;

    m_s3_log_url_isValid = ::OpenAPI::fromJsonValue(m_s3_log_url, json[QString("S3LogUrl")]);
    m_s3_log_url_isSet = !json[QString("S3LogUrl")].isNull() && m_s3_log_url_isValid;

    m_security_group_ids_isValid = ::OpenAPI::fromJsonValue(m_security_group_ids, json[QString("SecurityGroupIds")]);
    m_security_group_ids_isSet = !json[QString("SecurityGroupIds")].isNull() && m_security_group_ids_isValid;

    m_server_name_isValid = ::OpenAPI::fromJsonValue(m_server_name, json[QString("ServerName")]);
    m_server_name_isSet = !json[QString("ServerName")].isNull() && m_server_name_isValid;

    m_service_role_arn_isValid = ::OpenAPI::fromJsonValue(m_service_role_arn, json[QString("ServiceRoleArn")]);
    m_service_role_arn_isSet = !json[QString("ServiceRoleArn")].isNull() && m_service_role_arn_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_status_description_isValid = ::OpenAPI::fromJsonValue(m_status_description, json[QString("StatusDescription")]);
    m_status_description_isSet = !json[QString("StatusDescription")].isNull() && m_status_description_isValid;

    m_subnet_ids_isValid = ::OpenAPI::fromJsonValue(m_subnet_ids, json[QString("SubnetIds")]);
    m_subnet_ids_isSet = !json[QString("SubnetIds")].isNull() && m_subnet_ids_isValid;

    m_tools_version_isValid = ::OpenAPI::fromJsonValue(m_tools_version, json[QString("ToolsVersion")]);
    m_tools_version_isSet = !json[QString("ToolsVersion")].isNull() && m_tools_version_isValid;

    m_user_arn_isValid = ::OpenAPI::fromJsonValue(m_user_arn, json[QString("UserArn")]);
    m_user_arn_isSet = !json[QString("UserArn")].isNull() && m_user_arn_isValid;
}

QString OAIBackup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBackup::asJsonObject() const {
    QJsonObject obj;
    if (m_backup_arn_isSet) {
        obj.insert(QString("BackupArn"), ::OpenAPI::toJsonValue(m_backup_arn));
    }
    if (m_backup_id_isSet) {
        obj.insert(QString("BackupId"), ::OpenAPI::toJsonValue(m_backup_id));
    }
    if (m_backup_type.isSet()) {
        obj.insert(QString("BackupType"), ::OpenAPI::toJsonValue(m_backup_type));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("CreatedAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_engine_isSet) {
        obj.insert(QString("Engine"), ::OpenAPI::toJsonValue(m_engine));
    }
    if (m_engine_model_isSet) {
        obj.insert(QString("EngineModel"), ::OpenAPI::toJsonValue(m_engine_model));
    }
    if (m_engine_version_isSet) {
        obj.insert(QString("EngineVersion"), ::OpenAPI::toJsonValue(m_engine_version));
    }
    if (m_instance_profile_arn_isSet) {
        obj.insert(QString("InstanceProfileArn"), ::OpenAPI::toJsonValue(m_instance_profile_arn));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("InstanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    if (m_key_pair_isSet) {
        obj.insert(QString("KeyPair"), ::OpenAPI::toJsonValue(m_key_pair));
    }
    if (m_preferred_backup_window_isSet) {
        obj.insert(QString("PreferredBackupWindow"), ::OpenAPI::toJsonValue(m_preferred_backup_window));
    }
    if (m_preferred_maintenance_window_isSet) {
        obj.insert(QString("PreferredMaintenanceWindow"), ::OpenAPI::toJsonValue(m_preferred_maintenance_window));
    }
    if (m_s3_data_size_isSet) {
        obj.insert(QString("S3DataSize"), ::OpenAPI::toJsonValue(m_s3_data_size));
    }
    if (m_s3_data_url_isSet) {
        obj.insert(QString("S3DataUrl"), ::OpenAPI::toJsonValue(m_s3_data_url));
    }
    if (m_s3_log_url_isSet) {
        obj.insert(QString("S3LogUrl"), ::OpenAPI::toJsonValue(m_s3_log_url));
    }
    if (m_security_group_ids.isSet()) {
        obj.insert(QString("SecurityGroupIds"), ::OpenAPI::toJsonValue(m_security_group_ids));
    }
    if (m_server_name_isSet) {
        obj.insert(QString("ServerName"), ::OpenAPI::toJsonValue(m_server_name));
    }
    if (m_service_role_arn_isSet) {
        obj.insert(QString("ServiceRoleArn"), ::OpenAPI::toJsonValue(m_service_role_arn));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_description_isSet) {
        obj.insert(QString("StatusDescription"), ::OpenAPI::toJsonValue(m_status_description));
    }
    if (m_subnet_ids.isSet()) {
        obj.insert(QString("SubnetIds"), ::OpenAPI::toJsonValue(m_subnet_ids));
    }
    if (m_tools_version_isSet) {
        obj.insert(QString("ToolsVersion"), ::OpenAPI::toJsonValue(m_tools_version));
    }
    if (m_user_arn_isSet) {
        obj.insert(QString("UserArn"), ::OpenAPI::toJsonValue(m_user_arn));
    }
    return obj;
}

QString OAIBackup::getBackupArn() const {
    return m_backup_arn;
}
void OAIBackup::setBackupArn(const QString &backup_arn) {
    m_backup_arn = backup_arn;
    m_backup_arn_isSet = true;
}

bool OAIBackup::is_backup_arn_Set() const{
    return m_backup_arn_isSet;
}

bool OAIBackup::is_backup_arn_Valid() const{
    return m_backup_arn_isValid;
}

QString OAIBackup::getBackupId() const {
    return m_backup_id;
}
void OAIBackup::setBackupId(const QString &backup_id) {
    m_backup_id = backup_id;
    m_backup_id_isSet = true;
}

bool OAIBackup::is_backup_id_Set() const{
    return m_backup_id_isSet;
}

bool OAIBackup::is_backup_id_Valid() const{
    return m_backup_id_isValid;
}

OAIBackupType OAIBackup::getBackupType() const {
    return m_backup_type;
}
void OAIBackup::setBackupType(const OAIBackupType &backup_type) {
    m_backup_type = backup_type;
    m_backup_type_isSet = true;
}

bool OAIBackup::is_backup_type_Set() const{
    return m_backup_type_isSet;
}

bool OAIBackup::is_backup_type_Valid() const{
    return m_backup_type_isValid;
}

QDateTime OAIBackup::getCreatedAt() const {
    return m_created_at;
}
void OAIBackup::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIBackup::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIBackup::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIBackup::getDescription() const {
    return m_description;
}
void OAIBackup::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIBackup::is_description_Set() const{
    return m_description_isSet;
}

bool OAIBackup::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIBackup::getEngine() const {
    return m_engine;
}
void OAIBackup::setEngine(const QString &engine) {
    m_engine = engine;
    m_engine_isSet = true;
}

bool OAIBackup::is_engine_Set() const{
    return m_engine_isSet;
}

bool OAIBackup::is_engine_Valid() const{
    return m_engine_isValid;
}

QString OAIBackup::getEngineModel() const {
    return m_engine_model;
}
void OAIBackup::setEngineModel(const QString &engine_model) {
    m_engine_model = engine_model;
    m_engine_model_isSet = true;
}

bool OAIBackup::is_engine_model_Set() const{
    return m_engine_model_isSet;
}

bool OAIBackup::is_engine_model_Valid() const{
    return m_engine_model_isValid;
}

QString OAIBackup::getEngineVersion() const {
    return m_engine_version;
}
void OAIBackup::setEngineVersion(const QString &engine_version) {
    m_engine_version = engine_version;
    m_engine_version_isSet = true;
}

bool OAIBackup::is_engine_version_Set() const{
    return m_engine_version_isSet;
}

bool OAIBackup::is_engine_version_Valid() const{
    return m_engine_version_isValid;
}

QString OAIBackup::getInstanceProfileArn() const {
    return m_instance_profile_arn;
}
void OAIBackup::setInstanceProfileArn(const QString &instance_profile_arn) {
    m_instance_profile_arn = instance_profile_arn;
    m_instance_profile_arn_isSet = true;
}

bool OAIBackup::is_instance_profile_arn_Set() const{
    return m_instance_profile_arn_isSet;
}

bool OAIBackup::is_instance_profile_arn_Valid() const{
    return m_instance_profile_arn_isValid;
}

QString OAIBackup::getInstanceType() const {
    return m_instance_type;
}
void OAIBackup::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIBackup::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIBackup::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

QString OAIBackup::getKeyPair() const {
    return m_key_pair;
}
void OAIBackup::setKeyPair(const QString &key_pair) {
    m_key_pair = key_pair;
    m_key_pair_isSet = true;
}

bool OAIBackup::is_key_pair_Set() const{
    return m_key_pair_isSet;
}

bool OAIBackup::is_key_pair_Valid() const{
    return m_key_pair_isValid;
}

QString OAIBackup::getPreferredBackupWindow() const {
    return m_preferred_backup_window;
}
void OAIBackup::setPreferredBackupWindow(const QString &preferred_backup_window) {
    m_preferred_backup_window = preferred_backup_window;
    m_preferred_backup_window_isSet = true;
}

bool OAIBackup::is_preferred_backup_window_Set() const{
    return m_preferred_backup_window_isSet;
}

bool OAIBackup::is_preferred_backup_window_Valid() const{
    return m_preferred_backup_window_isValid;
}

QString OAIBackup::getPreferredMaintenanceWindow() const {
    return m_preferred_maintenance_window;
}
void OAIBackup::setPreferredMaintenanceWindow(const QString &preferred_maintenance_window) {
    m_preferred_maintenance_window = preferred_maintenance_window;
    m_preferred_maintenance_window_isSet = true;
}

bool OAIBackup::is_preferred_maintenance_window_Set() const{
    return m_preferred_maintenance_window_isSet;
}

bool OAIBackup::is_preferred_maintenance_window_Valid() const{
    return m_preferred_maintenance_window_isValid;
}

qint32 OAIBackup::getS3DataSize() const {
    return m_s3_data_size;
}
void OAIBackup::setS3DataSize(const qint32 &s3_data_size) {
    m_s3_data_size = s3_data_size;
    m_s3_data_size_isSet = true;
}

bool OAIBackup::is_s3_data_size_Set() const{
    return m_s3_data_size_isSet;
}

bool OAIBackup::is_s3_data_size_Valid() const{
    return m_s3_data_size_isValid;
}

QString OAIBackup::getS3DataUrl() const {
    return m_s3_data_url;
}
void OAIBackup::setS3DataUrl(const QString &s3_data_url) {
    m_s3_data_url = s3_data_url;
    m_s3_data_url_isSet = true;
}

bool OAIBackup::is_s3_data_url_Set() const{
    return m_s3_data_url_isSet;
}

bool OAIBackup::is_s3_data_url_Valid() const{
    return m_s3_data_url_isValid;
}

QString OAIBackup::getS3LogUrl() const {
    return m_s3_log_url;
}
void OAIBackup::setS3LogUrl(const QString &s3_log_url) {
    m_s3_log_url = s3_log_url;
    m_s3_log_url_isSet = true;
}

bool OAIBackup::is_s3_log_url_Set() const{
    return m_s3_log_url_isSet;
}

bool OAIBackup::is_s3_log_url_Valid() const{
    return m_s3_log_url_isValid;
}

QList OAIBackup::getSecurityGroupIds() const {
    return m_security_group_ids;
}
void OAIBackup::setSecurityGroupIds(const QList &security_group_ids) {
    m_security_group_ids = security_group_ids;
    m_security_group_ids_isSet = true;
}

bool OAIBackup::is_security_group_ids_Set() const{
    return m_security_group_ids_isSet;
}

bool OAIBackup::is_security_group_ids_Valid() const{
    return m_security_group_ids_isValid;
}

QString OAIBackup::getServerName() const {
    return m_server_name;
}
void OAIBackup::setServerName(const QString &server_name) {
    m_server_name = server_name;
    m_server_name_isSet = true;
}

bool OAIBackup::is_server_name_Set() const{
    return m_server_name_isSet;
}

bool OAIBackup::is_server_name_Valid() const{
    return m_server_name_isValid;
}

QString OAIBackup::getServiceRoleArn() const {
    return m_service_role_arn;
}
void OAIBackup::setServiceRoleArn(const QString &service_role_arn) {
    m_service_role_arn = service_role_arn;
    m_service_role_arn_isSet = true;
}

bool OAIBackup::is_service_role_arn_Set() const{
    return m_service_role_arn_isSet;
}

bool OAIBackup::is_service_role_arn_Valid() const{
    return m_service_role_arn_isValid;
}

OAIBackupStatus OAIBackup::getStatus() const {
    return m_status;
}
void OAIBackup::setStatus(const OAIBackupStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIBackup::is_status_Set() const{
    return m_status_isSet;
}

bool OAIBackup::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIBackup::getStatusDescription() const {
    return m_status_description;
}
void OAIBackup::setStatusDescription(const QString &status_description) {
    m_status_description = status_description;
    m_status_description_isSet = true;
}

bool OAIBackup::is_status_description_Set() const{
    return m_status_description_isSet;
}

bool OAIBackup::is_status_description_Valid() const{
    return m_status_description_isValid;
}

QList OAIBackup::getSubnetIds() const {
    return m_subnet_ids;
}
void OAIBackup::setSubnetIds(const QList &subnet_ids) {
    m_subnet_ids = subnet_ids;
    m_subnet_ids_isSet = true;
}

bool OAIBackup::is_subnet_ids_Set() const{
    return m_subnet_ids_isSet;
}

bool OAIBackup::is_subnet_ids_Valid() const{
    return m_subnet_ids_isValid;
}

QString OAIBackup::getToolsVersion() const {
    return m_tools_version;
}
void OAIBackup::setToolsVersion(const QString &tools_version) {
    m_tools_version = tools_version;
    m_tools_version_isSet = true;
}

bool OAIBackup::is_tools_version_Set() const{
    return m_tools_version_isSet;
}

bool OAIBackup::is_tools_version_Valid() const{
    return m_tools_version_isValid;
}

QString OAIBackup::getUserArn() const {
    return m_user_arn;
}
void OAIBackup::setUserArn(const QString &user_arn) {
    m_user_arn = user_arn;
    m_user_arn_isSet = true;
}

bool OAIBackup::is_user_arn_Set() const{
    return m_user_arn_isSet;
}

bool OAIBackup::is_user_arn_Valid() const{
    return m_user_arn_isValid;
}

bool OAIBackup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backup_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_profile_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_pair_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_backup_window_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_maintenance_window_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_data_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_data_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_log_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_group_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tools_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBackup::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
