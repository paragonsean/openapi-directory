/**
 * Amazon Pinpoint SMS Voice V2
 * <p>Welcome to the <i>Amazon Pinpoint SMS and Voice, version 2 API Reference</i>. This guide provides information about Amazon Pinpoint SMS and Voice, version 2 API resources, including supported HTTP methods, parameters, and schemas.</p> <p>Amazon Pinpoint is an Amazon Web Services service that you can use to engage with your recipients across multiple messaging channels. The Amazon Pinpoint SMS and Voice, version 2 API provides programmatic access to options that are unique to the SMS and voice channels and supplements the resources provided by the Amazon Pinpoint API.</p> <p>If you're new to Amazon Pinpoint, it's also helpful to review the <a href=\"https://docs.aws.amazon.com/pinpoint/latest/developerguide/welcome.html\"> Amazon Pinpoint Developer Guide</a>. The <i>Amazon Pinpoint Developer Guide</i> provides tutorials, code samples, and procedures that demonstrate how to use Amazon Pinpoint features programmatically and how to integrate Amazon Pinpoint functionality into mobile apps and other types of applications. The guide also provides key information, such as Amazon Pinpoint integration with other Amazon Web Services services, and the quotas that apply to use of the service.</p>
 *
 * The version of the OpenAPI document: 2022-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonPinpointSmsVoiceV2);
  }
}(this, function(expect, AmazonPinpointSmsVoiceV2) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonPinpointSmsVoiceV2.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('associateOriginationIdentity', function() {
      it('should call associateOriginationIdentity successfully', function(done) {
        //uncomment below and update the code to test associateOriginationIdentity
        //instance.associateOriginationIdentity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createConfigurationSet', function() {
      it('should call createConfigurationSet successfully', function(done) {
        //uncomment below and update the code to test createConfigurationSet
        //instance.createConfigurationSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createEventDestination', function() {
      it('should call createEventDestination successfully', function(done) {
        //uncomment below and update the code to test createEventDestination
        //instance.createEventDestination(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createOptOutList', function() {
      it('should call createOptOutList successfully', function(done) {
        //uncomment below and update the code to test createOptOutList
        //instance.createOptOutList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createPool', function() {
      it('should call createPool successfully', function(done) {
        //uncomment below and update the code to test createPool
        //instance.createPool(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteConfigurationSet', function() {
      it('should call deleteConfigurationSet successfully', function(done) {
        //uncomment below and update the code to test deleteConfigurationSet
        //instance.deleteConfigurationSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteDefaultMessageType', function() {
      it('should call deleteDefaultMessageType successfully', function(done) {
        //uncomment below and update the code to test deleteDefaultMessageType
        //instance.deleteDefaultMessageType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteDefaultSenderId', function() {
      it('should call deleteDefaultSenderId successfully', function(done) {
        //uncomment below and update the code to test deleteDefaultSenderId
        //instance.deleteDefaultSenderId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteEventDestination', function() {
      it('should call deleteEventDestination successfully', function(done) {
        //uncomment below and update the code to test deleteEventDestination
        //instance.deleteEventDestination(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteKeyword', function() {
      it('should call deleteKeyword successfully', function(done) {
        //uncomment below and update the code to test deleteKeyword
        //instance.deleteKeyword(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteOptOutList', function() {
      it('should call deleteOptOutList successfully', function(done) {
        //uncomment below and update the code to test deleteOptOutList
        //instance.deleteOptOutList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteOptedOutNumber', function() {
      it('should call deleteOptedOutNumber successfully', function(done) {
        //uncomment below and update the code to test deleteOptedOutNumber
        //instance.deleteOptedOutNumber(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deletePool', function() {
      it('should call deletePool successfully', function(done) {
        //uncomment below and update the code to test deletePool
        //instance.deletePool(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteTextMessageSpendLimitOverride', function() {
      it('should call deleteTextMessageSpendLimitOverride successfully', function(done) {
        //uncomment below and update the code to test deleteTextMessageSpendLimitOverride
        //instance.deleteTextMessageSpendLimitOverride(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteVoiceMessageSpendLimitOverride', function() {
      it('should call deleteVoiceMessageSpendLimitOverride successfully', function(done) {
        //uncomment below and update the code to test deleteVoiceMessageSpendLimitOverride
        //instance.deleteVoiceMessageSpendLimitOverride(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeAccountAttributes', function() {
      it('should call describeAccountAttributes successfully', function(done) {
        //uncomment below and update the code to test describeAccountAttributes
        //instance.describeAccountAttributes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeAccountLimits', function() {
      it('should call describeAccountLimits successfully', function(done) {
        //uncomment below and update the code to test describeAccountLimits
        //instance.describeAccountLimits(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeConfigurationSets', function() {
      it('should call describeConfigurationSets successfully', function(done) {
        //uncomment below and update the code to test describeConfigurationSets
        //instance.describeConfigurationSets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeKeywords', function() {
      it('should call describeKeywords successfully', function(done) {
        //uncomment below and update the code to test describeKeywords
        //instance.describeKeywords(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeOptOutLists', function() {
      it('should call describeOptOutLists successfully', function(done) {
        //uncomment below and update the code to test describeOptOutLists
        //instance.describeOptOutLists(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeOptedOutNumbers', function() {
      it('should call describeOptedOutNumbers successfully', function(done) {
        //uncomment below and update the code to test describeOptedOutNumbers
        //instance.describeOptedOutNumbers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describePhoneNumbers', function() {
      it('should call describePhoneNumbers successfully', function(done) {
        //uncomment below and update the code to test describePhoneNumbers
        //instance.describePhoneNumbers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describePools', function() {
      it('should call describePools successfully', function(done) {
        //uncomment below and update the code to test describePools
        //instance.describePools(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeSenderIds', function() {
      it('should call describeSenderIds successfully', function(done) {
        //uncomment below and update the code to test describeSenderIds
        //instance.describeSenderIds(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeSpendLimits', function() {
      it('should call describeSpendLimits successfully', function(done) {
        //uncomment below and update the code to test describeSpendLimits
        //instance.describeSpendLimits(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disassociateOriginationIdentity', function() {
      it('should call disassociateOriginationIdentity successfully', function(done) {
        //uncomment below and update the code to test disassociateOriginationIdentity
        //instance.disassociateOriginationIdentity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listPoolOriginationIdentities', function() {
      it('should call listPoolOriginationIdentities successfully', function(done) {
        //uncomment below and update the code to test listPoolOriginationIdentities
        //instance.listPoolOriginationIdentities(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putKeyword', function() {
      it('should call putKeyword successfully', function(done) {
        //uncomment below and update the code to test putKeyword
        //instance.putKeyword(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putOptedOutNumber', function() {
      it('should call putOptedOutNumber successfully', function(done) {
        //uncomment below and update the code to test putOptedOutNumber
        //instance.putOptedOutNumber(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('releasePhoneNumber', function() {
      it('should call releasePhoneNumber successfully', function(done) {
        //uncomment below and update the code to test releasePhoneNumber
        //instance.releasePhoneNumber(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('requestPhoneNumber', function() {
      it('should call requestPhoneNumber successfully', function(done) {
        //uncomment below and update the code to test requestPhoneNumber
        //instance.requestPhoneNumber(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sendTextMessage', function() {
      it('should call sendTextMessage successfully', function(done) {
        //uncomment below and update the code to test sendTextMessage
        //instance.sendTextMessage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sendVoiceMessage', function() {
      it('should call sendVoiceMessage successfully', function(done) {
        //uncomment below and update the code to test sendVoiceMessage
        //instance.sendVoiceMessage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setDefaultMessageType', function() {
      it('should call setDefaultMessageType successfully', function(done) {
        //uncomment below and update the code to test setDefaultMessageType
        //instance.setDefaultMessageType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setDefaultSenderId', function() {
      it('should call setDefaultSenderId successfully', function(done) {
        //uncomment below and update the code to test setDefaultSenderId
        //instance.setDefaultSenderId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setTextMessageSpendLimitOverride', function() {
      it('should call setTextMessageSpendLimitOverride successfully', function(done) {
        //uncomment below and update the code to test setTextMessageSpendLimitOverride
        //instance.setTextMessageSpendLimitOverride(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setVoiceMessageSpendLimitOverride', function() {
      it('should call setVoiceMessageSpendLimitOverride successfully', function(done) {
        //uncomment below and update the code to test setVoiceMessageSpendLimitOverride
        //instance.setVoiceMessageSpendLimitOverride(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateEventDestination', function() {
      it('should call updateEventDestination successfully', function(done) {
        //uncomment below and update the code to test updateEventDestination
        //instance.updateEventDestination(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updatePhoneNumber', function() {
      it('should call updatePhoneNumber successfully', function(done) {
        //uncomment below and update the code to test updatePhoneNumber
        //instance.updatePhoneNumber(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updatePool', function() {
      it('should call updatePool successfully', function(done) {
        //uncomment below and update the code to test updatePool
        //instance.updatePool(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
