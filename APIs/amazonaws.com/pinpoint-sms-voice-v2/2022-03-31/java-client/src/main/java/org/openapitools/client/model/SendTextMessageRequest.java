/*
 * Amazon Pinpoint SMS Voice V2
 * <p>Welcome to the <i>Amazon Pinpoint SMS and Voice, version 2 API Reference</i>. This guide provides information about Amazon Pinpoint SMS and Voice, version 2 API resources, including supported HTTP methods, parameters, and schemas.</p> <p>Amazon Pinpoint is an Amazon Web Services service that you can use to engage with your recipients across multiple messaging channels. The Amazon Pinpoint SMS and Voice, version 2 API provides programmatic access to options that are unique to the SMS and voice channels and supplements the resources provided by the Amazon Pinpoint API.</p> <p>If you're new to Amazon Pinpoint, it's also helpful to review the <a href=\"https://docs.aws.amazon.com/pinpoint/latest/developerguide/welcome.html\"> Amazon Pinpoint Developer Guide</a>. The <i>Amazon Pinpoint Developer Guide</i> provides tutorials, code samples, and procedures that demonstrate how to use Amazon Pinpoint features programmatically and how to integrate Amazon Pinpoint functionality into mobile apps and other types of applications. The guide also provides key information, such as Amazon Pinpoint integration with other Amazon Web Services services, and the quotas that apply to use of the service.</p>
 *
 * The version of the OpenAPI document: 2022-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.MessageType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SendTextMessageRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:26:46.409198-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SendTextMessageRequest {
  public static final String SERIALIZED_NAME_DESTINATION_PHONE_NUMBER = "DestinationPhoneNumber";
  @SerializedName(SERIALIZED_NAME_DESTINATION_PHONE_NUMBER)
  private String destinationPhoneNumber;

  public static final String SERIALIZED_NAME_ORIGINATION_IDENTITY = "OriginationIdentity";
  @SerializedName(SERIALIZED_NAME_ORIGINATION_IDENTITY)
  private String originationIdentity;

  public static final String SERIALIZED_NAME_MESSAGE_BODY = "MessageBody";
  @SerializedName(SERIALIZED_NAME_MESSAGE_BODY)
  private String messageBody;

  public static final String SERIALIZED_NAME_MESSAGE_TYPE = "MessageType";
  @SerializedName(SERIALIZED_NAME_MESSAGE_TYPE)
  private MessageType messageType;

  public static final String SERIALIZED_NAME_KEYWORD = "Keyword";
  @SerializedName(SERIALIZED_NAME_KEYWORD)
  private String keyword;

  public static final String SERIALIZED_NAME_CONFIGURATION_SET_NAME = "ConfigurationSetName";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION_SET_NAME)
  private String configurationSetName;

  public static final String SERIALIZED_NAME_MAX_PRICE = "MaxPrice";
  @SerializedName(SERIALIZED_NAME_MAX_PRICE)
  private String maxPrice;

  public static final String SERIALIZED_NAME_TIME_TO_LIVE = "TimeToLive";
  @SerializedName(SERIALIZED_NAME_TIME_TO_LIVE)
  private Integer timeToLive;

  public static final String SERIALIZED_NAME_CONTEXT = "Context";
  @SerializedName(SERIALIZED_NAME_CONTEXT)
  private Map context;

  public static final String SERIALIZED_NAME_DESTINATION_COUNTRY_PARAMETERS = "DestinationCountryParameters";
  @SerializedName(SERIALIZED_NAME_DESTINATION_COUNTRY_PARAMETERS)
  private Map destinationCountryParameters;

  public static final String SERIALIZED_NAME_DRY_RUN = "DryRun";
  @SerializedName(SERIALIZED_NAME_DRY_RUN)
  private Boolean dryRun;

  public SendTextMessageRequest() {
  }

  public SendTextMessageRequest destinationPhoneNumber(String destinationPhoneNumber) {
    this.destinationPhoneNumber = destinationPhoneNumber;
    return this;
  }

  /**
   * Get destinationPhoneNumber
   * @return destinationPhoneNumber
   */
  @javax.annotation.Nonnull
  public String getDestinationPhoneNumber() {
    return destinationPhoneNumber;
  }

  public void setDestinationPhoneNumber(String destinationPhoneNumber) {
    this.destinationPhoneNumber = destinationPhoneNumber;
  }


  public SendTextMessageRequest originationIdentity(String originationIdentity) {
    this.originationIdentity = originationIdentity;
    return this;
  }

  /**
   * Get originationIdentity
   * @return originationIdentity
   */
  @javax.annotation.Nullable
  public String getOriginationIdentity() {
    return originationIdentity;
  }

  public void setOriginationIdentity(String originationIdentity) {
    this.originationIdentity = originationIdentity;
  }


  public SendTextMessageRequest messageBody(String messageBody) {
    this.messageBody = messageBody;
    return this;
  }

  /**
   * Get messageBody
   * @return messageBody
   */
  @javax.annotation.Nullable
  public String getMessageBody() {
    return messageBody;
  }

  public void setMessageBody(String messageBody) {
    this.messageBody = messageBody;
  }


  public SendTextMessageRequest messageType(MessageType messageType) {
    this.messageType = messageType;
    return this;
  }

  /**
   * Get messageType
   * @return messageType
   */
  @javax.annotation.Nullable
  public MessageType getMessageType() {
    return messageType;
  }

  public void setMessageType(MessageType messageType) {
    this.messageType = messageType;
  }


  public SendTextMessageRequest keyword(String keyword) {
    this.keyword = keyword;
    return this;
  }

  /**
   * Get keyword
   * @return keyword
   */
  @javax.annotation.Nullable
  public String getKeyword() {
    return keyword;
  }

  public void setKeyword(String keyword) {
    this.keyword = keyword;
  }


  public SendTextMessageRequest configurationSetName(String configurationSetName) {
    this.configurationSetName = configurationSetName;
    return this;
  }

  /**
   * Get configurationSetName
   * @return configurationSetName
   */
  @javax.annotation.Nullable
  public String getConfigurationSetName() {
    return configurationSetName;
  }

  public void setConfigurationSetName(String configurationSetName) {
    this.configurationSetName = configurationSetName;
  }


  public SendTextMessageRequest maxPrice(String maxPrice) {
    this.maxPrice = maxPrice;
    return this;
  }

  /**
   * Get maxPrice
   * @return maxPrice
   */
  @javax.annotation.Nullable
  public String getMaxPrice() {
    return maxPrice;
  }

  public void setMaxPrice(String maxPrice) {
    this.maxPrice = maxPrice;
  }


  public SendTextMessageRequest timeToLive(Integer timeToLive) {
    this.timeToLive = timeToLive;
    return this;
  }

  /**
   * Get timeToLive
   * @return timeToLive
   */
  @javax.annotation.Nullable
  public Integer getTimeToLive() {
    return timeToLive;
  }

  public void setTimeToLive(Integer timeToLive) {
    this.timeToLive = timeToLive;
  }


  public SendTextMessageRequest context(Map context) {
    this.context = context;
    return this;
  }

  /**
   * Get context
   * @return context
   */
  @javax.annotation.Nullable
  public Map getContext() {
    return context;
  }

  public void setContext(Map context) {
    this.context = context;
  }


  public SendTextMessageRequest destinationCountryParameters(Map destinationCountryParameters) {
    this.destinationCountryParameters = destinationCountryParameters;
    return this;
  }

  /**
   * Get destinationCountryParameters
   * @return destinationCountryParameters
   */
  @javax.annotation.Nullable
  public Map getDestinationCountryParameters() {
    return destinationCountryParameters;
  }

  public void setDestinationCountryParameters(Map destinationCountryParameters) {
    this.destinationCountryParameters = destinationCountryParameters;
  }


  public SendTextMessageRequest dryRun(Boolean dryRun) {
    this.dryRun = dryRun;
    return this;
  }

  /**
   * Get dryRun
   * @return dryRun
   */
  @javax.annotation.Nullable
  public Boolean getDryRun() {
    return dryRun;
  }

  public void setDryRun(Boolean dryRun) {
    this.dryRun = dryRun;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SendTextMessageRequest sendTextMessageRequest = (SendTextMessageRequest) o;
    return Objects.equals(this.destinationPhoneNumber, sendTextMessageRequest.destinationPhoneNumber) &&
        Objects.equals(this.originationIdentity, sendTextMessageRequest.originationIdentity) &&
        Objects.equals(this.messageBody, sendTextMessageRequest.messageBody) &&
        Objects.equals(this.messageType, sendTextMessageRequest.messageType) &&
        Objects.equals(this.keyword, sendTextMessageRequest.keyword) &&
        Objects.equals(this.configurationSetName, sendTextMessageRequest.configurationSetName) &&
        Objects.equals(this.maxPrice, sendTextMessageRequest.maxPrice) &&
        Objects.equals(this.timeToLive, sendTextMessageRequest.timeToLive) &&
        Objects.equals(this.context, sendTextMessageRequest.context) &&
        Objects.equals(this.destinationCountryParameters, sendTextMessageRequest.destinationCountryParameters) &&
        Objects.equals(this.dryRun, sendTextMessageRequest.dryRun);
  }

  @Override
  public int hashCode() {
    return Objects.hash(destinationPhoneNumber, originationIdentity, messageBody, messageType, keyword, configurationSetName, maxPrice, timeToLive, context, destinationCountryParameters, dryRun);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SendTextMessageRequest {\n");
    sb.append("    destinationPhoneNumber: ").append(toIndentedString(destinationPhoneNumber)).append("\n");
    sb.append("    originationIdentity: ").append(toIndentedString(originationIdentity)).append("\n");
    sb.append("    messageBody: ").append(toIndentedString(messageBody)).append("\n");
    sb.append("    messageType: ").append(toIndentedString(messageType)).append("\n");
    sb.append("    keyword: ").append(toIndentedString(keyword)).append("\n");
    sb.append("    configurationSetName: ").append(toIndentedString(configurationSetName)).append("\n");
    sb.append("    maxPrice: ").append(toIndentedString(maxPrice)).append("\n");
    sb.append("    timeToLive: ").append(toIndentedString(timeToLive)).append("\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    destinationCountryParameters: ").append(toIndentedString(destinationCountryParameters)).append("\n");
    sb.append("    dryRun: ").append(toIndentedString(dryRun)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DestinationPhoneNumber");
    openapiFields.add("OriginationIdentity");
    openapiFields.add("MessageBody");
    openapiFields.add("MessageType");
    openapiFields.add("Keyword");
    openapiFields.add("ConfigurationSetName");
    openapiFields.add("MaxPrice");
    openapiFields.add("TimeToLive");
    openapiFields.add("Context");
    openapiFields.add("DestinationCountryParameters");
    openapiFields.add("DryRun");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DestinationPhoneNumber");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SendTextMessageRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SendTextMessageRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SendTextMessageRequest is not found in the empty JSON string", SendTextMessageRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SendTextMessageRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SendTextMessageRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SendTextMessageRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `DestinationPhoneNumber`
      String.validateJsonElement(jsonObj.get("DestinationPhoneNumber"));
      // validate the optional field `OriginationIdentity`
      if (jsonObj.get("OriginationIdentity") != null && !jsonObj.get("OriginationIdentity").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OriginationIdentity"));
      }
      // validate the optional field `MessageBody`
      if (jsonObj.get("MessageBody") != null && !jsonObj.get("MessageBody").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MessageBody"));
      }
      // validate the optional field `MessageType`
      if (jsonObj.get("MessageType") != null && !jsonObj.get("MessageType").isJsonNull()) {
        MessageType.validateJsonElement(jsonObj.get("MessageType"));
      }
      // validate the optional field `Keyword`
      if (jsonObj.get("Keyword") != null && !jsonObj.get("Keyword").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Keyword"));
      }
      // validate the optional field `ConfigurationSetName`
      if (jsonObj.get("ConfigurationSetName") != null && !jsonObj.get("ConfigurationSetName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ConfigurationSetName"));
      }
      // validate the optional field `MaxPrice`
      if (jsonObj.get("MaxPrice") != null && !jsonObj.get("MaxPrice").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MaxPrice"));
      }
      // validate the optional field `TimeToLive`
      if (jsonObj.get("TimeToLive") != null && !jsonObj.get("TimeToLive").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("TimeToLive"));
      }
      // validate the optional field `Context`
      if (jsonObj.get("Context") != null && !jsonObj.get("Context").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("Context"));
      }
      // validate the optional field `DestinationCountryParameters`
      if (jsonObj.get("DestinationCountryParameters") != null && !jsonObj.get("DestinationCountryParameters").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("DestinationCountryParameters"));
      }
      // validate the optional field `DryRun`
      if (jsonObj.get("DryRun") != null && !jsonObj.get("DryRun").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("DryRun"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SendTextMessageRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SendTextMessageRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SendTextMessageRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SendTextMessageRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SendTextMessageRequest>() {
           @Override
           public void write(JsonWriter out, SendTextMessageRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SendTextMessageRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SendTextMessageRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SendTextMessageRequest
   * @throws IOException if the JSON string is invalid with respect to SendTextMessageRequest
   */
  public static SendTextMessageRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SendTextMessageRequest.class);
  }

  /**
   * Convert an instance of SendTextMessageRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

