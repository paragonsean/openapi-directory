/*
 * Amazon Pinpoint SMS Voice V2
 * <p>Welcome to the <i>Amazon Pinpoint SMS and Voice, version 2 API Reference</i>. This guide provides information about Amazon Pinpoint SMS and Voice, version 2 API resources, including supported HTTP methods, parameters, and schemas.</p> <p>Amazon Pinpoint is an Amazon Web Services service that you can use to engage with your recipients across multiple messaging channels. The Amazon Pinpoint SMS and Voice, version 2 API provides programmatic access to options that are unique to the SMS and voice channels and supplements the resources provided by the Amazon Pinpoint API.</p> <p>If you're new to Amazon Pinpoint, it's also helpful to review the <a href=\"https://docs.aws.amazon.com/pinpoint/latest/developerguide/welcome.html\"> Amazon Pinpoint Developer Guide</a>. The <i>Amazon Pinpoint Developer Guide</i> provides tutorials, code samples, and procedures that demonstrate how to use Amazon Pinpoint features programmatically and how to integrate Amazon Pinpoint functionality into mobile apps and other types of applications. The guide also provides key information, such as Amazon Pinpoint integration with other Amazon Web Services services, and the quotas that apply to use of the service.</p>
 *
 * The version of the OpenAPI document: 2022-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SpendLimitName;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the current Amazon Pinpoint monthly spend limits for sending voice and text messages. For more information on increasing your monthly spend limit, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/pinpoint/latest/userguide/channels-sms-awssupport-spend-threshold.html\&quot;&gt; Requesting increases to your monthly SMS spending quota for Amazon Pinpoint &lt;/a&gt; in the &lt;i&gt;Amazon Pinpoint User Guide&lt;/i&gt;. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:26:46.409198-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SpendLimit {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private SpendLimitName name;

  public static final String SERIALIZED_NAME_ENFORCED_LIMIT = "EnforcedLimit";
  @SerializedName(SERIALIZED_NAME_ENFORCED_LIMIT)
  private Integer enforcedLimit;

  public static final String SERIALIZED_NAME_MAX_LIMIT = "MaxLimit";
  @SerializedName(SERIALIZED_NAME_MAX_LIMIT)
  private Integer maxLimit;

  public static final String SERIALIZED_NAME_OVERRIDDEN = "Overridden";
  @SerializedName(SERIALIZED_NAME_OVERRIDDEN)
  private Boolean overridden;

  public SpendLimit() {
  }

  public SpendLimit name(SpendLimitName name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public SpendLimitName getName() {
    return name;
  }

  public void setName(SpendLimitName name) {
    this.name = name;
  }


  public SpendLimit enforcedLimit(Integer enforcedLimit) {
    this.enforcedLimit = enforcedLimit;
    return this;
  }

  /**
   * Get enforcedLimit
   * @return enforcedLimit
   */
  @javax.annotation.Nonnull
  public Integer getEnforcedLimit() {
    return enforcedLimit;
  }

  public void setEnforcedLimit(Integer enforcedLimit) {
    this.enforcedLimit = enforcedLimit;
  }


  public SpendLimit maxLimit(Integer maxLimit) {
    this.maxLimit = maxLimit;
    return this;
  }

  /**
   * Get maxLimit
   * @return maxLimit
   */
  @javax.annotation.Nonnull
  public Integer getMaxLimit() {
    return maxLimit;
  }

  public void setMaxLimit(Integer maxLimit) {
    this.maxLimit = maxLimit;
  }


  public SpendLimit overridden(Boolean overridden) {
    this.overridden = overridden;
    return this;
  }

  /**
   * Get overridden
   * @return overridden
   */
  @javax.annotation.Nonnull
  public Boolean getOverridden() {
    return overridden;
  }

  public void setOverridden(Boolean overridden) {
    this.overridden = overridden;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SpendLimit spendLimit = (SpendLimit) o;
    return Objects.equals(this.name, spendLimit.name) &&
        Objects.equals(this.enforcedLimit, spendLimit.enforcedLimit) &&
        Objects.equals(this.maxLimit, spendLimit.maxLimit) &&
        Objects.equals(this.overridden, spendLimit.overridden);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, enforcedLimit, maxLimit, overridden);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SpendLimit {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    enforcedLimit: ").append(toIndentedString(enforcedLimit)).append("\n");
    sb.append("    maxLimit: ").append(toIndentedString(maxLimit)).append("\n");
    sb.append("    overridden: ").append(toIndentedString(overridden)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("EnforcedLimit");
    openapiFields.add("MaxLimit");
    openapiFields.add("Overridden");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Name");
    openapiRequiredFields.add("EnforcedLimit");
    openapiRequiredFields.add("MaxLimit");
    openapiRequiredFields.add("Overridden");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SpendLimit
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SpendLimit.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SpendLimit is not found in the empty JSON string", SpendLimit.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SpendLimit.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SpendLimit` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SpendLimit.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Name`
      SpendLimitName.validateJsonElement(jsonObj.get("Name"));
      // validate the required field `EnforcedLimit`
      Integer.validateJsonElement(jsonObj.get("EnforcedLimit"));
      // validate the required field `MaxLimit`
      Integer.validateJsonElement(jsonObj.get("MaxLimit"));
      // validate the required field `Overridden`
      Boolean.validateJsonElement(jsonObj.get("Overridden"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SpendLimit.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SpendLimit' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SpendLimit> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SpendLimit.class));

       return (TypeAdapter<T>) new TypeAdapter<SpendLimit>() {
           @Override
           public void write(JsonWriter out, SpendLimit value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SpendLimit read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SpendLimit given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SpendLimit
   * @throws IOException if the JSON string is invalid with respect to SpendLimit
   */
  public static SpendLimit fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SpendLimit.class);
  }

  /**
   * Convert an instance of SpendLimit to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

