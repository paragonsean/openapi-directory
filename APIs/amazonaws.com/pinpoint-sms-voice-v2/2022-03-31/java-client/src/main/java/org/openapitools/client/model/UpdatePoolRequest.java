/*
 * Amazon Pinpoint SMS Voice V2
 * <p>Welcome to the <i>Amazon Pinpoint SMS and Voice, version 2 API Reference</i>. This guide provides information about Amazon Pinpoint SMS and Voice, version 2 API resources, including supported HTTP methods, parameters, and schemas.</p> <p>Amazon Pinpoint is an Amazon Web Services service that you can use to engage with your recipients across multiple messaging channels. The Amazon Pinpoint SMS and Voice, version 2 API provides programmatic access to options that are unique to the SMS and voice channels and supplements the resources provided by the Amazon Pinpoint API.</p> <p>If you're new to Amazon Pinpoint, it's also helpful to review the <a href=\"https://docs.aws.amazon.com/pinpoint/latest/developerguide/welcome.html\"> Amazon Pinpoint Developer Guide</a>. The <i>Amazon Pinpoint Developer Guide</i> provides tutorials, code samples, and procedures that demonstrate how to use Amazon Pinpoint features programmatically and how to integrate Amazon Pinpoint functionality into mobile apps and other types of applications. The guide also provides key information, such as Amazon Pinpoint integration with other Amazon Web Services services, and the quotas that apply to use of the service.</p>
 *
 * The version of the OpenAPI document: 2022-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdatePoolRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:26:46.409198-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdatePoolRequest {
  public static final String SERIALIZED_NAME_POOL_ID = "PoolId";
  @SerializedName(SERIALIZED_NAME_POOL_ID)
  private String poolId;

  public static final String SERIALIZED_NAME_TWO_WAY_ENABLED = "TwoWayEnabled";
  @SerializedName(SERIALIZED_NAME_TWO_WAY_ENABLED)
  private Boolean twoWayEnabled;

  public static final String SERIALIZED_NAME_TWO_WAY_CHANNEL_ARN = "TwoWayChannelArn";
  @SerializedName(SERIALIZED_NAME_TWO_WAY_CHANNEL_ARN)
  private String twoWayChannelArn;

  public static final String SERIALIZED_NAME_SELF_MANAGED_OPT_OUTS_ENABLED = "SelfManagedOptOutsEnabled";
  @SerializedName(SERIALIZED_NAME_SELF_MANAGED_OPT_OUTS_ENABLED)
  private Boolean selfManagedOptOutsEnabled;

  public static final String SERIALIZED_NAME_OPT_OUT_LIST_NAME = "OptOutListName";
  @SerializedName(SERIALIZED_NAME_OPT_OUT_LIST_NAME)
  private String optOutListName;

  public static final String SERIALIZED_NAME_SHARED_ROUTES_ENABLED = "SharedRoutesEnabled";
  @SerializedName(SERIALIZED_NAME_SHARED_ROUTES_ENABLED)
  private Boolean sharedRoutesEnabled;

  public static final String SERIALIZED_NAME_DELETION_PROTECTION_ENABLED = "DeletionProtectionEnabled";
  @SerializedName(SERIALIZED_NAME_DELETION_PROTECTION_ENABLED)
  private Boolean deletionProtectionEnabled;

  public UpdatePoolRequest() {
  }

  public UpdatePoolRequest poolId(String poolId) {
    this.poolId = poolId;
    return this;
  }

  /**
   * Get poolId
   * @return poolId
   */
  @javax.annotation.Nonnull
  public String getPoolId() {
    return poolId;
  }

  public void setPoolId(String poolId) {
    this.poolId = poolId;
  }


  public UpdatePoolRequest twoWayEnabled(Boolean twoWayEnabled) {
    this.twoWayEnabled = twoWayEnabled;
    return this;
  }

  /**
   * Get twoWayEnabled
   * @return twoWayEnabled
   */
  @javax.annotation.Nullable
  public Boolean getTwoWayEnabled() {
    return twoWayEnabled;
  }

  public void setTwoWayEnabled(Boolean twoWayEnabled) {
    this.twoWayEnabled = twoWayEnabled;
  }


  public UpdatePoolRequest twoWayChannelArn(String twoWayChannelArn) {
    this.twoWayChannelArn = twoWayChannelArn;
    return this;
  }

  /**
   * Get twoWayChannelArn
   * @return twoWayChannelArn
   */
  @javax.annotation.Nullable
  public String getTwoWayChannelArn() {
    return twoWayChannelArn;
  }

  public void setTwoWayChannelArn(String twoWayChannelArn) {
    this.twoWayChannelArn = twoWayChannelArn;
  }


  public UpdatePoolRequest selfManagedOptOutsEnabled(Boolean selfManagedOptOutsEnabled) {
    this.selfManagedOptOutsEnabled = selfManagedOptOutsEnabled;
    return this;
  }

  /**
   * Get selfManagedOptOutsEnabled
   * @return selfManagedOptOutsEnabled
   */
  @javax.annotation.Nullable
  public Boolean getSelfManagedOptOutsEnabled() {
    return selfManagedOptOutsEnabled;
  }

  public void setSelfManagedOptOutsEnabled(Boolean selfManagedOptOutsEnabled) {
    this.selfManagedOptOutsEnabled = selfManagedOptOutsEnabled;
  }


  public UpdatePoolRequest optOutListName(String optOutListName) {
    this.optOutListName = optOutListName;
    return this;
  }

  /**
   * Get optOutListName
   * @return optOutListName
   */
  @javax.annotation.Nullable
  public String getOptOutListName() {
    return optOutListName;
  }

  public void setOptOutListName(String optOutListName) {
    this.optOutListName = optOutListName;
  }


  public UpdatePoolRequest sharedRoutesEnabled(Boolean sharedRoutesEnabled) {
    this.sharedRoutesEnabled = sharedRoutesEnabled;
    return this;
  }

  /**
   * Get sharedRoutesEnabled
   * @return sharedRoutesEnabled
   */
  @javax.annotation.Nullable
  public Boolean getSharedRoutesEnabled() {
    return sharedRoutesEnabled;
  }

  public void setSharedRoutesEnabled(Boolean sharedRoutesEnabled) {
    this.sharedRoutesEnabled = sharedRoutesEnabled;
  }


  public UpdatePoolRequest deletionProtectionEnabled(Boolean deletionProtectionEnabled) {
    this.deletionProtectionEnabled = deletionProtectionEnabled;
    return this;
  }

  /**
   * Get deletionProtectionEnabled
   * @return deletionProtectionEnabled
   */
  @javax.annotation.Nullable
  public Boolean getDeletionProtectionEnabled() {
    return deletionProtectionEnabled;
  }

  public void setDeletionProtectionEnabled(Boolean deletionProtectionEnabled) {
    this.deletionProtectionEnabled = deletionProtectionEnabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdatePoolRequest updatePoolRequest = (UpdatePoolRequest) o;
    return Objects.equals(this.poolId, updatePoolRequest.poolId) &&
        Objects.equals(this.twoWayEnabled, updatePoolRequest.twoWayEnabled) &&
        Objects.equals(this.twoWayChannelArn, updatePoolRequest.twoWayChannelArn) &&
        Objects.equals(this.selfManagedOptOutsEnabled, updatePoolRequest.selfManagedOptOutsEnabled) &&
        Objects.equals(this.optOutListName, updatePoolRequest.optOutListName) &&
        Objects.equals(this.sharedRoutesEnabled, updatePoolRequest.sharedRoutesEnabled) &&
        Objects.equals(this.deletionProtectionEnabled, updatePoolRequest.deletionProtectionEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(poolId, twoWayEnabled, twoWayChannelArn, selfManagedOptOutsEnabled, optOutListName, sharedRoutesEnabled, deletionProtectionEnabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdatePoolRequest {\n");
    sb.append("    poolId: ").append(toIndentedString(poolId)).append("\n");
    sb.append("    twoWayEnabled: ").append(toIndentedString(twoWayEnabled)).append("\n");
    sb.append("    twoWayChannelArn: ").append(toIndentedString(twoWayChannelArn)).append("\n");
    sb.append("    selfManagedOptOutsEnabled: ").append(toIndentedString(selfManagedOptOutsEnabled)).append("\n");
    sb.append("    optOutListName: ").append(toIndentedString(optOutListName)).append("\n");
    sb.append("    sharedRoutesEnabled: ").append(toIndentedString(sharedRoutesEnabled)).append("\n");
    sb.append("    deletionProtectionEnabled: ").append(toIndentedString(deletionProtectionEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("PoolId");
    openapiFields.add("TwoWayEnabled");
    openapiFields.add("TwoWayChannelArn");
    openapiFields.add("SelfManagedOptOutsEnabled");
    openapiFields.add("OptOutListName");
    openapiFields.add("SharedRoutesEnabled");
    openapiFields.add("DeletionProtectionEnabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("PoolId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdatePoolRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdatePoolRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdatePoolRequest is not found in the empty JSON string", UpdatePoolRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdatePoolRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdatePoolRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdatePoolRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `PoolId`
      String.validateJsonElement(jsonObj.get("PoolId"));
      // validate the optional field `TwoWayEnabled`
      if (jsonObj.get("TwoWayEnabled") != null && !jsonObj.get("TwoWayEnabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("TwoWayEnabled"));
      }
      // validate the optional field `TwoWayChannelArn`
      if (jsonObj.get("TwoWayChannelArn") != null && !jsonObj.get("TwoWayChannelArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TwoWayChannelArn"));
      }
      // validate the optional field `SelfManagedOptOutsEnabled`
      if (jsonObj.get("SelfManagedOptOutsEnabled") != null && !jsonObj.get("SelfManagedOptOutsEnabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("SelfManagedOptOutsEnabled"));
      }
      // validate the optional field `OptOutListName`
      if (jsonObj.get("OptOutListName") != null && !jsonObj.get("OptOutListName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OptOutListName"));
      }
      // validate the optional field `SharedRoutesEnabled`
      if (jsonObj.get("SharedRoutesEnabled") != null && !jsonObj.get("SharedRoutesEnabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("SharedRoutesEnabled"));
      }
      // validate the optional field `DeletionProtectionEnabled`
      if (jsonObj.get("DeletionProtectionEnabled") != null && !jsonObj.get("DeletionProtectionEnabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("DeletionProtectionEnabled"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdatePoolRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdatePoolRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdatePoolRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdatePoolRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdatePoolRequest>() {
           @Override
           public void write(JsonWriter out, UpdatePoolRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdatePoolRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdatePoolRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdatePoolRequest
   * @throws IOException if the JSON string is invalid with respect to UpdatePoolRequest
   */
  public static UpdatePoolRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdatePoolRequest.class);
  }

  /**
   * Convert an instance of UpdatePoolRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

