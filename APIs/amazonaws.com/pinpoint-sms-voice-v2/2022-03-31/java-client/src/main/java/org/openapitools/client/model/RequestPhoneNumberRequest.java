/*
 * Amazon Pinpoint SMS Voice V2
 * <p>Welcome to the <i>Amazon Pinpoint SMS and Voice, version 2 API Reference</i>. This guide provides information about Amazon Pinpoint SMS and Voice, version 2 API resources, including supported HTTP methods, parameters, and schemas.</p> <p>Amazon Pinpoint is an Amazon Web Services service that you can use to engage with your recipients across multiple messaging channels. The Amazon Pinpoint SMS and Voice, version 2 API provides programmatic access to options that are unique to the SMS and voice channels and supplements the resources provided by the Amazon Pinpoint API.</p> <p>If you're new to Amazon Pinpoint, it's also helpful to review the <a href=\"https://docs.aws.amazon.com/pinpoint/latest/developerguide/welcome.html\"> Amazon Pinpoint Developer Guide</a>. The <i>Amazon Pinpoint Developer Guide</i> provides tutorials, code samples, and procedures that demonstrate how to use Amazon Pinpoint features programmatically and how to integrate Amazon Pinpoint functionality into mobile apps and other types of applications. The guide also provides key information, such as Amazon Pinpoint integration with other Amazon Web Services services, and the quotas that apply to use of the service.</p>
 *
 * The version of the OpenAPI document: 2022-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MessageType;
import org.openapitools.client.model.RequestableNumberType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RequestPhoneNumberRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:26:46.409198-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RequestPhoneNumberRequest {
  public static final String SERIALIZED_NAME_ISO_COUNTRY_CODE = "IsoCountryCode";
  @SerializedName(SERIALIZED_NAME_ISO_COUNTRY_CODE)
  private String isoCountryCode;

  public static final String SERIALIZED_NAME_MESSAGE_TYPE = "MessageType";
  @SerializedName(SERIALIZED_NAME_MESSAGE_TYPE)
  private MessageType messageType;

  public static final String SERIALIZED_NAME_NUMBER_CAPABILITIES = "NumberCapabilities";
  @SerializedName(SERIALIZED_NAME_NUMBER_CAPABILITIES)
  private List numberCapabilities;

  public static final String SERIALIZED_NAME_NUMBER_TYPE = "NumberType";
  @SerializedName(SERIALIZED_NAME_NUMBER_TYPE)
  private RequestableNumberType numberType;

  public static final String SERIALIZED_NAME_OPT_OUT_LIST_NAME = "OptOutListName";
  @SerializedName(SERIALIZED_NAME_OPT_OUT_LIST_NAME)
  private String optOutListName;

  public static final String SERIALIZED_NAME_POOL_ID = "PoolId";
  @SerializedName(SERIALIZED_NAME_POOL_ID)
  private String poolId;

  public static final String SERIALIZED_NAME_REGISTRATION_ID = "RegistrationId";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_ID)
  private String registrationId;

  public static final String SERIALIZED_NAME_DELETION_PROTECTION_ENABLED = "DeletionProtectionEnabled";
  @SerializedName(SERIALIZED_NAME_DELETION_PROTECTION_ENABLED)
  private Boolean deletionProtectionEnabled;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "ClientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  public RequestPhoneNumberRequest() {
  }

  public RequestPhoneNumberRequest isoCountryCode(String isoCountryCode) {
    this.isoCountryCode = isoCountryCode;
    return this;
  }

  /**
   * Get isoCountryCode
   * @return isoCountryCode
   */
  @javax.annotation.Nonnull
  public String getIsoCountryCode() {
    return isoCountryCode;
  }

  public void setIsoCountryCode(String isoCountryCode) {
    this.isoCountryCode = isoCountryCode;
  }


  public RequestPhoneNumberRequest messageType(MessageType messageType) {
    this.messageType = messageType;
    return this;
  }

  /**
   * Get messageType
   * @return messageType
   */
  @javax.annotation.Nonnull
  public MessageType getMessageType() {
    return messageType;
  }

  public void setMessageType(MessageType messageType) {
    this.messageType = messageType;
  }


  public RequestPhoneNumberRequest numberCapabilities(List numberCapabilities) {
    this.numberCapabilities = numberCapabilities;
    return this;
  }

  /**
   * Get numberCapabilities
   * @return numberCapabilities
   */
  @javax.annotation.Nonnull
  public List getNumberCapabilities() {
    return numberCapabilities;
  }

  public void setNumberCapabilities(List numberCapabilities) {
    this.numberCapabilities = numberCapabilities;
  }


  public RequestPhoneNumberRequest numberType(RequestableNumberType numberType) {
    this.numberType = numberType;
    return this;
  }

  /**
   * Get numberType
   * @return numberType
   */
  @javax.annotation.Nonnull
  public RequestableNumberType getNumberType() {
    return numberType;
  }

  public void setNumberType(RequestableNumberType numberType) {
    this.numberType = numberType;
  }


  public RequestPhoneNumberRequest optOutListName(String optOutListName) {
    this.optOutListName = optOutListName;
    return this;
  }

  /**
   * Get optOutListName
   * @return optOutListName
   */
  @javax.annotation.Nullable
  public String getOptOutListName() {
    return optOutListName;
  }

  public void setOptOutListName(String optOutListName) {
    this.optOutListName = optOutListName;
  }


  public RequestPhoneNumberRequest poolId(String poolId) {
    this.poolId = poolId;
    return this;
  }

  /**
   * Get poolId
   * @return poolId
   */
  @javax.annotation.Nullable
  public String getPoolId() {
    return poolId;
  }

  public void setPoolId(String poolId) {
    this.poolId = poolId;
  }


  public RequestPhoneNumberRequest registrationId(String registrationId) {
    this.registrationId = registrationId;
    return this;
  }

  /**
   * Get registrationId
   * @return registrationId
   */
  @javax.annotation.Nullable
  public String getRegistrationId() {
    return registrationId;
  }

  public void setRegistrationId(String registrationId) {
    this.registrationId = registrationId;
  }


  public RequestPhoneNumberRequest deletionProtectionEnabled(Boolean deletionProtectionEnabled) {
    this.deletionProtectionEnabled = deletionProtectionEnabled;
    return this;
  }

  /**
   * Get deletionProtectionEnabled
   * @return deletionProtectionEnabled
   */
  @javax.annotation.Nullable
  public Boolean getDeletionProtectionEnabled() {
    return deletionProtectionEnabled;
  }

  public void setDeletionProtectionEnabled(Boolean deletionProtectionEnabled) {
    this.deletionProtectionEnabled = deletionProtectionEnabled;
  }


  public RequestPhoneNumberRequest tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }


  public RequestPhoneNumberRequest clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * Get clientToken
   * @return clientToken
   */
  @javax.annotation.Nullable
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RequestPhoneNumberRequest requestPhoneNumberRequest = (RequestPhoneNumberRequest) o;
    return Objects.equals(this.isoCountryCode, requestPhoneNumberRequest.isoCountryCode) &&
        Objects.equals(this.messageType, requestPhoneNumberRequest.messageType) &&
        Objects.equals(this.numberCapabilities, requestPhoneNumberRequest.numberCapabilities) &&
        Objects.equals(this.numberType, requestPhoneNumberRequest.numberType) &&
        Objects.equals(this.optOutListName, requestPhoneNumberRequest.optOutListName) &&
        Objects.equals(this.poolId, requestPhoneNumberRequest.poolId) &&
        Objects.equals(this.registrationId, requestPhoneNumberRequest.registrationId) &&
        Objects.equals(this.deletionProtectionEnabled, requestPhoneNumberRequest.deletionProtectionEnabled) &&
        Objects.equals(this.tags, requestPhoneNumberRequest.tags) &&
        Objects.equals(this.clientToken, requestPhoneNumberRequest.clientToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isoCountryCode, messageType, numberCapabilities, numberType, optOutListName, poolId, registrationId, deletionProtectionEnabled, tags, clientToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RequestPhoneNumberRequest {\n");
    sb.append("    isoCountryCode: ").append(toIndentedString(isoCountryCode)).append("\n");
    sb.append("    messageType: ").append(toIndentedString(messageType)).append("\n");
    sb.append("    numberCapabilities: ").append(toIndentedString(numberCapabilities)).append("\n");
    sb.append("    numberType: ").append(toIndentedString(numberType)).append("\n");
    sb.append("    optOutListName: ").append(toIndentedString(optOutListName)).append("\n");
    sb.append("    poolId: ").append(toIndentedString(poolId)).append("\n");
    sb.append("    registrationId: ").append(toIndentedString(registrationId)).append("\n");
    sb.append("    deletionProtectionEnabled: ").append(toIndentedString(deletionProtectionEnabled)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("IsoCountryCode");
    openapiFields.add("MessageType");
    openapiFields.add("NumberCapabilities");
    openapiFields.add("NumberType");
    openapiFields.add("OptOutListName");
    openapiFields.add("PoolId");
    openapiFields.add("RegistrationId");
    openapiFields.add("DeletionProtectionEnabled");
    openapiFields.add("Tags");
    openapiFields.add("ClientToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("IsoCountryCode");
    openapiRequiredFields.add("MessageType");
    openapiRequiredFields.add("NumberCapabilities");
    openapiRequiredFields.add("NumberType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RequestPhoneNumberRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RequestPhoneNumberRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RequestPhoneNumberRequest is not found in the empty JSON string", RequestPhoneNumberRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RequestPhoneNumberRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RequestPhoneNumberRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RequestPhoneNumberRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `IsoCountryCode`
      String.validateJsonElement(jsonObj.get("IsoCountryCode"));
      // validate the required field `MessageType`
      MessageType.validateJsonElement(jsonObj.get("MessageType"));
      // validate the required field `NumberCapabilities`
      List.validateJsonElement(jsonObj.get("NumberCapabilities"));
      // validate the required field `NumberType`
      RequestableNumberType.validateJsonElement(jsonObj.get("NumberType"));
      // validate the optional field `OptOutListName`
      if (jsonObj.get("OptOutListName") != null && !jsonObj.get("OptOutListName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OptOutListName"));
      }
      // validate the optional field `PoolId`
      if (jsonObj.get("PoolId") != null && !jsonObj.get("PoolId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PoolId"));
      }
      // validate the optional field `RegistrationId`
      if (jsonObj.get("RegistrationId") != null && !jsonObj.get("RegistrationId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RegistrationId"));
      }
      // validate the optional field `DeletionProtectionEnabled`
      if (jsonObj.get("DeletionProtectionEnabled") != null && !jsonObj.get("DeletionProtectionEnabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("DeletionProtectionEnabled"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Tags"));
      }
      // validate the optional field `ClientToken`
      if (jsonObj.get("ClientToken") != null && !jsonObj.get("ClientToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ClientToken"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RequestPhoneNumberRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RequestPhoneNumberRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RequestPhoneNumberRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RequestPhoneNumberRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<RequestPhoneNumberRequest>() {
           @Override
           public void write(JsonWriter out, RequestPhoneNumberRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RequestPhoneNumberRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RequestPhoneNumberRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RequestPhoneNumberRequest
   * @throws IOException if the JSON string is invalid with respect to RequestPhoneNumberRequest
   */
  public static RequestPhoneNumberRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RequestPhoneNumberRequest.class);
  }

  /**
   * Convert an instance of RequestPhoneNumberRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

