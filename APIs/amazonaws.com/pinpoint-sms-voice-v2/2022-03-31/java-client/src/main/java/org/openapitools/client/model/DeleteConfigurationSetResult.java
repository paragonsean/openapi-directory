/*
 * Amazon Pinpoint SMS Voice V2
 * <p>Welcome to the <i>Amazon Pinpoint SMS and Voice, version 2 API Reference</i>. This guide provides information about Amazon Pinpoint SMS and Voice, version 2 API resources, including supported HTTP methods, parameters, and schemas.</p> <p>Amazon Pinpoint is an Amazon Web Services service that you can use to engage with your recipients across multiple messaging channels. The Amazon Pinpoint SMS and Voice, version 2 API provides programmatic access to options that are unique to the SMS and voice channels and supplements the resources provided by the Amazon Pinpoint API.</p> <p>If you're new to Amazon Pinpoint, it's also helpful to review the <a href=\"https://docs.aws.amazon.com/pinpoint/latest/developerguide/welcome.html\"> Amazon Pinpoint Developer Guide</a>. The <i>Amazon Pinpoint Developer Guide</i> provides tutorials, code samples, and procedures that demonstrate how to use Amazon Pinpoint features programmatically and how to integrate Amazon Pinpoint functionality into mobile apps and other types of applications. The guide also provides key information, such as Amazon Pinpoint integration with other Amazon Web Services services, and the quotas that apply to use of the service.</p>
 *
 * The version of the OpenAPI document: 2022-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MessageType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DeleteConfigurationSetResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:26:46.409198-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeleteConfigurationSetResult {
  public static final String SERIALIZED_NAME_CONFIGURATION_SET_ARN = "ConfigurationSetArn";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION_SET_ARN)
  private String configurationSetArn;

  public static final String SERIALIZED_NAME_CONFIGURATION_SET_NAME = "ConfigurationSetName";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION_SET_NAME)
  private String configurationSetName;

  public static final String SERIALIZED_NAME_EVENT_DESTINATIONS = "EventDestinations";
  @SerializedName(SERIALIZED_NAME_EVENT_DESTINATIONS)
  private List eventDestinations;

  public static final String SERIALIZED_NAME_DEFAULT_MESSAGE_TYPE = "DefaultMessageType";
  @SerializedName(SERIALIZED_NAME_DEFAULT_MESSAGE_TYPE)
  private MessageType defaultMessageType;

  public static final String SERIALIZED_NAME_DEFAULT_SENDER_ID = "DefaultSenderId";
  @SerializedName(SERIALIZED_NAME_DEFAULT_SENDER_ID)
  private String defaultSenderId;

  public static final String SERIALIZED_NAME_CREATED_TIMESTAMP = "CreatedTimestamp";
  @SerializedName(SERIALIZED_NAME_CREATED_TIMESTAMP)
  private OffsetDateTime createdTimestamp;

  public DeleteConfigurationSetResult() {
  }

  public DeleteConfigurationSetResult configurationSetArn(String configurationSetArn) {
    this.configurationSetArn = configurationSetArn;
    return this;
  }

  /**
   * Get configurationSetArn
   * @return configurationSetArn
   */
  @javax.annotation.Nullable
  public String getConfigurationSetArn() {
    return configurationSetArn;
  }

  public void setConfigurationSetArn(String configurationSetArn) {
    this.configurationSetArn = configurationSetArn;
  }


  public DeleteConfigurationSetResult configurationSetName(String configurationSetName) {
    this.configurationSetName = configurationSetName;
    return this;
  }

  /**
   * Get configurationSetName
   * @return configurationSetName
   */
  @javax.annotation.Nullable
  public String getConfigurationSetName() {
    return configurationSetName;
  }

  public void setConfigurationSetName(String configurationSetName) {
    this.configurationSetName = configurationSetName;
  }


  public DeleteConfigurationSetResult eventDestinations(List eventDestinations) {
    this.eventDestinations = eventDestinations;
    return this;
  }

  /**
   * Get eventDestinations
   * @return eventDestinations
   */
  @javax.annotation.Nullable
  public List getEventDestinations() {
    return eventDestinations;
  }

  public void setEventDestinations(List eventDestinations) {
    this.eventDestinations = eventDestinations;
  }


  public DeleteConfigurationSetResult defaultMessageType(MessageType defaultMessageType) {
    this.defaultMessageType = defaultMessageType;
    return this;
  }

  /**
   * Get defaultMessageType
   * @return defaultMessageType
   */
  @javax.annotation.Nullable
  public MessageType getDefaultMessageType() {
    return defaultMessageType;
  }

  public void setDefaultMessageType(MessageType defaultMessageType) {
    this.defaultMessageType = defaultMessageType;
  }


  public DeleteConfigurationSetResult defaultSenderId(String defaultSenderId) {
    this.defaultSenderId = defaultSenderId;
    return this;
  }

  /**
   * Get defaultSenderId
   * @return defaultSenderId
   */
  @javax.annotation.Nullable
  public String getDefaultSenderId() {
    return defaultSenderId;
  }

  public void setDefaultSenderId(String defaultSenderId) {
    this.defaultSenderId = defaultSenderId;
  }


  public DeleteConfigurationSetResult createdTimestamp(OffsetDateTime createdTimestamp) {
    this.createdTimestamp = createdTimestamp;
    return this;
  }

  /**
   * Get createdTimestamp
   * @return createdTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedTimestamp() {
    return createdTimestamp;
  }

  public void setCreatedTimestamp(OffsetDateTime createdTimestamp) {
    this.createdTimestamp = createdTimestamp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeleteConfigurationSetResult deleteConfigurationSetResult = (DeleteConfigurationSetResult) o;
    return Objects.equals(this.configurationSetArn, deleteConfigurationSetResult.configurationSetArn) &&
        Objects.equals(this.configurationSetName, deleteConfigurationSetResult.configurationSetName) &&
        Objects.equals(this.eventDestinations, deleteConfigurationSetResult.eventDestinations) &&
        Objects.equals(this.defaultMessageType, deleteConfigurationSetResult.defaultMessageType) &&
        Objects.equals(this.defaultSenderId, deleteConfigurationSetResult.defaultSenderId) &&
        Objects.equals(this.createdTimestamp, deleteConfigurationSetResult.createdTimestamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(configurationSetArn, configurationSetName, eventDestinations, defaultMessageType, defaultSenderId, createdTimestamp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeleteConfigurationSetResult {\n");
    sb.append("    configurationSetArn: ").append(toIndentedString(configurationSetArn)).append("\n");
    sb.append("    configurationSetName: ").append(toIndentedString(configurationSetName)).append("\n");
    sb.append("    eventDestinations: ").append(toIndentedString(eventDestinations)).append("\n");
    sb.append("    defaultMessageType: ").append(toIndentedString(defaultMessageType)).append("\n");
    sb.append("    defaultSenderId: ").append(toIndentedString(defaultSenderId)).append("\n");
    sb.append("    createdTimestamp: ").append(toIndentedString(createdTimestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ConfigurationSetArn");
    openapiFields.add("ConfigurationSetName");
    openapiFields.add("EventDestinations");
    openapiFields.add("DefaultMessageType");
    openapiFields.add("DefaultSenderId");
    openapiFields.add("CreatedTimestamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeleteConfigurationSetResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeleteConfigurationSetResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeleteConfigurationSetResult is not found in the empty JSON string", DeleteConfigurationSetResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeleteConfigurationSetResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeleteConfigurationSetResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ConfigurationSetArn`
      if (jsonObj.get("ConfigurationSetArn") != null && !jsonObj.get("ConfigurationSetArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ConfigurationSetArn"));
      }
      // validate the optional field `ConfigurationSetName`
      if (jsonObj.get("ConfigurationSetName") != null && !jsonObj.get("ConfigurationSetName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ConfigurationSetName"));
      }
      // validate the optional field `EventDestinations`
      if (jsonObj.get("EventDestinations") != null && !jsonObj.get("EventDestinations").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("EventDestinations"));
      }
      // validate the optional field `DefaultMessageType`
      if (jsonObj.get("DefaultMessageType") != null && !jsonObj.get("DefaultMessageType").isJsonNull()) {
        MessageType.validateJsonElement(jsonObj.get("DefaultMessageType"));
      }
      // validate the optional field `DefaultSenderId`
      if (jsonObj.get("DefaultSenderId") != null && !jsonObj.get("DefaultSenderId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DefaultSenderId"));
      }
      // validate the optional field `CreatedTimestamp`
      if (jsonObj.get("CreatedTimestamp") != null && !jsonObj.get("CreatedTimestamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreatedTimestamp"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeleteConfigurationSetResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeleteConfigurationSetResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeleteConfigurationSetResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeleteConfigurationSetResult.class));

       return (TypeAdapter<T>) new TypeAdapter<DeleteConfigurationSetResult>() {
           @Override
           public void write(JsonWriter out, DeleteConfigurationSetResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeleteConfigurationSetResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeleteConfigurationSetResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeleteConfigurationSetResult
   * @throws IOException if the JSON string is invalid with respect to DeleteConfigurationSetResult
   */
  public static DeleteConfigurationSetResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeleteConfigurationSetResult.class);
  }

  /**
   * Convert an instance of DeleteConfigurationSetResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

