/*
 * Amazon Pinpoint SMS Voice V2
 * <p>Welcome to the <i>Amazon Pinpoint SMS and Voice, version 2 API Reference</i>. This guide provides information about Amazon Pinpoint SMS and Voice, version 2 API resources, including supported HTTP methods, parameters, and schemas.</p> <p>Amazon Pinpoint is an Amazon Web Services service that you can use to engage with your recipients across multiple messaging channels. The Amazon Pinpoint SMS and Voice, version 2 API provides programmatic access to options that are unique to the SMS and voice channels and supplements the resources provided by the Amazon Pinpoint API.</p> <p>If you're new to Amazon Pinpoint, it's also helpful to review the <a href=\"https://docs.aws.amazon.com/pinpoint/latest/developerguide/welcome.html\"> Amazon Pinpoint Developer Guide</a>. The <i>Amazon Pinpoint Developer Guide</i> provides tutorials, code samples, and procedures that demonstrate how to use Amazon Pinpoint features programmatically and how to integrate Amazon Pinpoint functionality into mobile apps and other types of applications. The guide also provides key information, such as Amazon Pinpoint integration with other Amazon Web Services services, and the quotas that apply to use of the service.</p>
 *
 * The version of the OpenAPI document: 2022-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DisassociateOriginationIdentityResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:26:46.409198-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DisassociateOriginationIdentityResult {
  public static final String SERIALIZED_NAME_POOL_ARN = "PoolArn";
  @SerializedName(SERIALIZED_NAME_POOL_ARN)
  private String poolArn;

  public static final String SERIALIZED_NAME_POOL_ID = "PoolId";
  @SerializedName(SERIALIZED_NAME_POOL_ID)
  private String poolId;

  public static final String SERIALIZED_NAME_ORIGINATION_IDENTITY_ARN = "OriginationIdentityArn";
  @SerializedName(SERIALIZED_NAME_ORIGINATION_IDENTITY_ARN)
  private String originationIdentityArn;

  public static final String SERIALIZED_NAME_ORIGINATION_IDENTITY = "OriginationIdentity";
  @SerializedName(SERIALIZED_NAME_ORIGINATION_IDENTITY)
  private String originationIdentity;

  public static final String SERIALIZED_NAME_ISO_COUNTRY_CODE = "IsoCountryCode";
  @SerializedName(SERIALIZED_NAME_ISO_COUNTRY_CODE)
  private String isoCountryCode;

  public DisassociateOriginationIdentityResult() {
  }

  public DisassociateOriginationIdentityResult poolArn(String poolArn) {
    this.poolArn = poolArn;
    return this;
  }

  /**
   * Get poolArn
   * @return poolArn
   */
  @javax.annotation.Nullable
  public String getPoolArn() {
    return poolArn;
  }

  public void setPoolArn(String poolArn) {
    this.poolArn = poolArn;
  }


  public DisassociateOriginationIdentityResult poolId(String poolId) {
    this.poolId = poolId;
    return this;
  }

  /**
   * Get poolId
   * @return poolId
   */
  @javax.annotation.Nullable
  public String getPoolId() {
    return poolId;
  }

  public void setPoolId(String poolId) {
    this.poolId = poolId;
  }


  public DisassociateOriginationIdentityResult originationIdentityArn(String originationIdentityArn) {
    this.originationIdentityArn = originationIdentityArn;
    return this;
  }

  /**
   * Get originationIdentityArn
   * @return originationIdentityArn
   */
  @javax.annotation.Nullable
  public String getOriginationIdentityArn() {
    return originationIdentityArn;
  }

  public void setOriginationIdentityArn(String originationIdentityArn) {
    this.originationIdentityArn = originationIdentityArn;
  }


  public DisassociateOriginationIdentityResult originationIdentity(String originationIdentity) {
    this.originationIdentity = originationIdentity;
    return this;
  }

  /**
   * Get originationIdentity
   * @return originationIdentity
   */
  @javax.annotation.Nullable
  public String getOriginationIdentity() {
    return originationIdentity;
  }

  public void setOriginationIdentity(String originationIdentity) {
    this.originationIdentity = originationIdentity;
  }


  public DisassociateOriginationIdentityResult isoCountryCode(String isoCountryCode) {
    this.isoCountryCode = isoCountryCode;
    return this;
  }

  /**
   * Get isoCountryCode
   * @return isoCountryCode
   */
  @javax.annotation.Nullable
  public String getIsoCountryCode() {
    return isoCountryCode;
  }

  public void setIsoCountryCode(String isoCountryCode) {
    this.isoCountryCode = isoCountryCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DisassociateOriginationIdentityResult disassociateOriginationIdentityResult = (DisassociateOriginationIdentityResult) o;
    return Objects.equals(this.poolArn, disassociateOriginationIdentityResult.poolArn) &&
        Objects.equals(this.poolId, disassociateOriginationIdentityResult.poolId) &&
        Objects.equals(this.originationIdentityArn, disassociateOriginationIdentityResult.originationIdentityArn) &&
        Objects.equals(this.originationIdentity, disassociateOriginationIdentityResult.originationIdentity) &&
        Objects.equals(this.isoCountryCode, disassociateOriginationIdentityResult.isoCountryCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(poolArn, poolId, originationIdentityArn, originationIdentity, isoCountryCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DisassociateOriginationIdentityResult {\n");
    sb.append("    poolArn: ").append(toIndentedString(poolArn)).append("\n");
    sb.append("    poolId: ").append(toIndentedString(poolId)).append("\n");
    sb.append("    originationIdentityArn: ").append(toIndentedString(originationIdentityArn)).append("\n");
    sb.append("    originationIdentity: ").append(toIndentedString(originationIdentity)).append("\n");
    sb.append("    isoCountryCode: ").append(toIndentedString(isoCountryCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("PoolArn");
    openapiFields.add("PoolId");
    openapiFields.add("OriginationIdentityArn");
    openapiFields.add("OriginationIdentity");
    openapiFields.add("IsoCountryCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DisassociateOriginationIdentityResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DisassociateOriginationIdentityResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DisassociateOriginationIdentityResult is not found in the empty JSON string", DisassociateOriginationIdentityResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DisassociateOriginationIdentityResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DisassociateOriginationIdentityResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `PoolArn`
      if (jsonObj.get("PoolArn") != null && !jsonObj.get("PoolArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PoolArn"));
      }
      // validate the optional field `PoolId`
      if (jsonObj.get("PoolId") != null && !jsonObj.get("PoolId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PoolId"));
      }
      // validate the optional field `OriginationIdentityArn`
      if (jsonObj.get("OriginationIdentityArn") != null && !jsonObj.get("OriginationIdentityArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OriginationIdentityArn"));
      }
      // validate the optional field `OriginationIdentity`
      if (jsonObj.get("OriginationIdentity") != null && !jsonObj.get("OriginationIdentity").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OriginationIdentity"));
      }
      // validate the optional field `IsoCountryCode`
      if (jsonObj.get("IsoCountryCode") != null && !jsonObj.get("IsoCountryCode").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("IsoCountryCode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DisassociateOriginationIdentityResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DisassociateOriginationIdentityResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DisassociateOriginationIdentityResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DisassociateOriginationIdentityResult.class));

       return (TypeAdapter<T>) new TypeAdapter<DisassociateOriginationIdentityResult>() {
           @Override
           public void write(JsonWriter out, DisassociateOriginationIdentityResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DisassociateOriginationIdentityResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DisassociateOriginationIdentityResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DisassociateOriginationIdentityResult
   * @throws IOException if the JSON string is invalid with respect to DisassociateOriginationIdentityResult
   */
  public static DisassociateOriginationIdentityResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DisassociateOriginationIdentityResult.class);
  }

  /**
   * Convert an instance of DisassociateOriginationIdentityResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

