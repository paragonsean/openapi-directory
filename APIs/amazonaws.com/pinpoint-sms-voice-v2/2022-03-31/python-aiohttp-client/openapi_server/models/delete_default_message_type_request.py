# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeleteDefaultMessageTypeRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configuration_set_name: str=None):
        """DeleteDefaultMessageTypeRequest - a model defined in OpenAPI

        :param configuration_set_name: The configuration_set_name of this DeleteDefaultMessageTypeRequest.
        """
        self.openapi_types = {
            'configuration_set_name': str
        }

        self.attribute_map = {
            'configuration_set_name': 'ConfigurationSetName'
        }

        self._configuration_set_name = configuration_set_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeleteDefaultMessageTypeRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeleteDefaultMessageTypeRequest of this DeleteDefaultMessageTypeRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configuration_set_name(self):
        """Gets the configuration_set_name of this DeleteDefaultMessageTypeRequest.


        :return: The configuration_set_name of this DeleteDefaultMessageTypeRequest.
        :rtype: str
        """
        return self._configuration_set_name

    @configuration_set_name.setter
    def configuration_set_name(self, configuration_set_name):
        """Sets the configuration_set_name of this DeleteDefaultMessageTypeRequest.


        :param configuration_set_name: The configuration_set_name of this DeleteDefaultMessageTypeRequest.
        :type configuration_set_name: str
        """
        if configuration_set_name is None:
            raise ValueError("Invalid value for `configuration_set_name`, must not be `None`")

        self._configuration_set_name = configuration_set_name
