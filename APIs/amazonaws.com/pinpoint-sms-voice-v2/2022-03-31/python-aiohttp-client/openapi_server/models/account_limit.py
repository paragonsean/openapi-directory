# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account_limit_name import AccountLimitName
from openapi_server import util


class AccountLimit(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: AccountLimitName=None, used: int=None, max: int=None):
        """AccountLimit - a model defined in OpenAPI

        :param name: The name of this AccountLimit.
        :param used: The used of this AccountLimit.
        :param max: The max of this AccountLimit.
        """
        self.openapi_types = {
            'name': AccountLimitName,
            'used': int,
            'max': int
        }

        self.attribute_map = {
            'name': 'Name',
            'used': 'Used',
            'max': 'Max'
        }

        self._name = name
        self._used = used
        self._max = max

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountLimit':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountLimit of this AccountLimit.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this AccountLimit.


        :return: The name of this AccountLimit.
        :rtype: AccountLimitName
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AccountLimit.


        :param name: The name of this AccountLimit.
        :type name: AccountLimitName
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def used(self):
        """Gets the used of this AccountLimit.


        :return: The used of this AccountLimit.
        :rtype: int
        """
        return self._used

    @used.setter
    def used(self, used):
        """Sets the used of this AccountLimit.


        :param used: The used of this AccountLimit.
        :type used: int
        """
        if used is None:
            raise ValueError("Invalid value for `used`, must not be `None`")

        self._used = used

    @property
    def max(self):
        """Gets the max of this AccountLimit.


        :return: The max of this AccountLimit.
        :rtype: int
        """
        return self._max

    @max.setter
    def max(self, max):
        """Sets the max of this AccountLimit.


        :param max: The max of this AccountLimit.
        :type max: int
        """
        if max is None:
            raise ValueError("Invalid value for `max`, must not be `None`")

        self._max = max
