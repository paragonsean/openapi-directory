# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EventType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    ALL = 'ALL'
    TEXT_ALL = 'TEXT_ALL'
    TEXT_SENT = 'TEXT_SENT'
    TEXT_PENDING = 'TEXT_PENDING'
    TEXT_QUEUED = 'TEXT_QUEUED'
    TEXT_SUCCESSFUL = 'TEXT_SUCCESSFUL'
    TEXT_DELIVERED = 'TEXT_DELIVERED'
    TEXT_INVALID = 'TEXT_INVALID'
    TEXT_INVALID_MESSAGE = 'TEXT_INVALID_MESSAGE'
    TEXT_UNREACHABLE = 'TEXT_UNREACHABLE'
    TEXT_CARRIER_UNREACHABLE = 'TEXT_CARRIER_UNREACHABLE'
    TEXT_BLOCKED = 'TEXT_BLOCKED'
    TEXT_CARRIER_BLOCKED = 'TEXT_CARRIER_BLOCKED'
    TEXT_SPAM = 'TEXT_SPAM'
    TEXT_UNKNOWN = 'TEXT_UNKNOWN'
    TEXT_TTL_EXPIRED = 'TEXT_TTL_EXPIRED'
    VOICE_ALL = 'VOICE_ALL'
    VOICE_INITIATED = 'VOICE_INITIATED'
    VOICE_RINGING = 'VOICE_RINGING'
    VOICE_ANSWERED = 'VOICE_ANSWERED'
    VOICE_COMPLETED = 'VOICE_COMPLETED'
    VOICE_BUSY = 'VOICE_BUSY'
    VOICE_NO_ANSWER = 'VOICE_NO_ANSWER'
    VOICE_FAILED = 'VOICE_FAILED'
    VOICE_TTL_EXPIRED = 'VOICE_TTL_EXPIRED'

    def __init__(self):
        """EventType - a model defined in OpenAPI

        """
        self.openapi_types = {
        }

        self.attribute_map = {
        }

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventType of this EventType.
        """
        return util.deserialize_model(dikt, cls)
