# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OriginationIdentityMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, origination_identity_arn: str=None, origination_identity: str=None, iso_country_code: str=None, number_capabilities: List=None):
        """OriginationIdentityMetadata - a model defined in OpenAPI

        :param origination_identity_arn: The origination_identity_arn of this OriginationIdentityMetadata.
        :param origination_identity: The origination_identity of this OriginationIdentityMetadata.
        :param iso_country_code: The iso_country_code of this OriginationIdentityMetadata.
        :param number_capabilities: The number_capabilities of this OriginationIdentityMetadata.
        """
        self.openapi_types = {
            'origination_identity_arn': str,
            'origination_identity': str,
            'iso_country_code': str,
            'number_capabilities': List
        }

        self.attribute_map = {
            'origination_identity_arn': 'OriginationIdentityArn',
            'origination_identity': 'OriginationIdentity',
            'iso_country_code': 'IsoCountryCode',
            'number_capabilities': 'NumberCapabilities'
        }

        self._origination_identity_arn = origination_identity_arn
        self._origination_identity = origination_identity
        self._iso_country_code = iso_country_code
        self._number_capabilities = number_capabilities

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OriginationIdentityMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OriginationIdentityMetadata of this OriginationIdentityMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def origination_identity_arn(self):
        """Gets the origination_identity_arn of this OriginationIdentityMetadata.


        :return: The origination_identity_arn of this OriginationIdentityMetadata.
        :rtype: str
        """
        return self._origination_identity_arn

    @origination_identity_arn.setter
    def origination_identity_arn(self, origination_identity_arn):
        """Sets the origination_identity_arn of this OriginationIdentityMetadata.


        :param origination_identity_arn: The origination_identity_arn of this OriginationIdentityMetadata.
        :type origination_identity_arn: str
        """
        if origination_identity_arn is None:
            raise ValueError("Invalid value for `origination_identity_arn`, must not be `None`")

        self._origination_identity_arn = origination_identity_arn

    @property
    def origination_identity(self):
        """Gets the origination_identity of this OriginationIdentityMetadata.


        :return: The origination_identity of this OriginationIdentityMetadata.
        :rtype: str
        """
        return self._origination_identity

    @origination_identity.setter
    def origination_identity(self, origination_identity):
        """Sets the origination_identity of this OriginationIdentityMetadata.


        :param origination_identity: The origination_identity of this OriginationIdentityMetadata.
        :type origination_identity: str
        """
        if origination_identity is None:
            raise ValueError("Invalid value for `origination_identity`, must not be `None`")

        self._origination_identity = origination_identity

    @property
    def iso_country_code(self):
        """Gets the iso_country_code of this OriginationIdentityMetadata.


        :return: The iso_country_code of this OriginationIdentityMetadata.
        :rtype: str
        """
        return self._iso_country_code

    @iso_country_code.setter
    def iso_country_code(self, iso_country_code):
        """Sets the iso_country_code of this OriginationIdentityMetadata.


        :param iso_country_code: The iso_country_code of this OriginationIdentityMetadata.
        :type iso_country_code: str
        """
        if iso_country_code is None:
            raise ValueError("Invalid value for `iso_country_code`, must not be `None`")

        self._iso_country_code = iso_country_code

    @property
    def number_capabilities(self):
        """Gets the number_capabilities of this OriginationIdentityMetadata.


        :return: The number_capabilities of this OriginationIdentityMetadata.
        :rtype: List
        """
        return self._number_capabilities

    @number_capabilities.setter
    def number_capabilities(self, number_capabilities):
        """Sets the number_capabilities of this OriginationIdentityMetadata.


        :param number_capabilities: The number_capabilities of this OriginationIdentityMetadata.
        :type number_capabilities: List
        """
        if number_capabilities is None:
            raise ValueError("Invalid value for `number_capabilities`, must not be `None`")

        self._number_capabilities = number_capabilities
