# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SenderIdInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sender_id_arn: str=None, sender_id: str=None, iso_country_code: str=None, message_types: List=None, monthly_leasing_price: str=None):
        """SenderIdInformation - a model defined in OpenAPI

        :param sender_id_arn: The sender_id_arn of this SenderIdInformation.
        :param sender_id: The sender_id of this SenderIdInformation.
        :param iso_country_code: The iso_country_code of this SenderIdInformation.
        :param message_types: The message_types of this SenderIdInformation.
        :param monthly_leasing_price: The monthly_leasing_price of this SenderIdInformation.
        """
        self.openapi_types = {
            'sender_id_arn': str,
            'sender_id': str,
            'iso_country_code': str,
            'message_types': List,
            'monthly_leasing_price': str
        }

        self.attribute_map = {
            'sender_id_arn': 'SenderIdArn',
            'sender_id': 'SenderId',
            'iso_country_code': 'IsoCountryCode',
            'message_types': 'MessageTypes',
            'monthly_leasing_price': 'MonthlyLeasingPrice'
        }

        self._sender_id_arn = sender_id_arn
        self._sender_id = sender_id
        self._iso_country_code = iso_country_code
        self._message_types = message_types
        self._monthly_leasing_price = monthly_leasing_price

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SenderIdInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SenderIdInformation of this SenderIdInformation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sender_id_arn(self):
        """Gets the sender_id_arn of this SenderIdInformation.


        :return: The sender_id_arn of this SenderIdInformation.
        :rtype: str
        """
        return self._sender_id_arn

    @sender_id_arn.setter
    def sender_id_arn(self, sender_id_arn):
        """Sets the sender_id_arn of this SenderIdInformation.


        :param sender_id_arn: The sender_id_arn of this SenderIdInformation.
        :type sender_id_arn: str
        """
        if sender_id_arn is None:
            raise ValueError("Invalid value for `sender_id_arn`, must not be `None`")

        self._sender_id_arn = sender_id_arn

    @property
    def sender_id(self):
        """Gets the sender_id of this SenderIdInformation.


        :return: The sender_id of this SenderIdInformation.
        :rtype: str
        """
        return self._sender_id

    @sender_id.setter
    def sender_id(self, sender_id):
        """Sets the sender_id of this SenderIdInformation.


        :param sender_id: The sender_id of this SenderIdInformation.
        :type sender_id: str
        """
        if sender_id is None:
            raise ValueError("Invalid value for `sender_id`, must not be `None`")

        self._sender_id = sender_id

    @property
    def iso_country_code(self):
        """Gets the iso_country_code of this SenderIdInformation.


        :return: The iso_country_code of this SenderIdInformation.
        :rtype: str
        """
        return self._iso_country_code

    @iso_country_code.setter
    def iso_country_code(self, iso_country_code):
        """Sets the iso_country_code of this SenderIdInformation.


        :param iso_country_code: The iso_country_code of this SenderIdInformation.
        :type iso_country_code: str
        """
        if iso_country_code is None:
            raise ValueError("Invalid value for `iso_country_code`, must not be `None`")

        self._iso_country_code = iso_country_code

    @property
    def message_types(self):
        """Gets the message_types of this SenderIdInformation.


        :return: The message_types of this SenderIdInformation.
        :rtype: List
        """
        return self._message_types

    @message_types.setter
    def message_types(self, message_types):
        """Sets the message_types of this SenderIdInformation.


        :param message_types: The message_types of this SenderIdInformation.
        :type message_types: List
        """
        if message_types is None:
            raise ValueError("Invalid value for `message_types`, must not be `None`")

        self._message_types = message_types

    @property
    def monthly_leasing_price(self):
        """Gets the monthly_leasing_price of this SenderIdInformation.


        :return: The monthly_leasing_price of this SenderIdInformation.
        :rtype: str
        """
        return self._monthly_leasing_price

    @monthly_leasing_price.setter
    def monthly_leasing_price(self, monthly_leasing_price):
        """Sets the monthly_leasing_price of this SenderIdInformation.


        :param monthly_leasing_price: The monthly_leasing_price of this SenderIdInformation.
        :type monthly_leasing_price: str
        """
        if monthly_leasing_price is None:
            raise ValueError("Invalid value for `monthly_leasing_price`, must not be `None`")

        self._monthly_leasing_price = monthly_leasing_price
