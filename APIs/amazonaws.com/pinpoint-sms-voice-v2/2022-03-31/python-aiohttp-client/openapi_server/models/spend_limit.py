# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.spend_limit_name import SpendLimitName
from openapi_server import util


class SpendLimit(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: SpendLimitName=None, enforced_limit: int=None, max_limit: int=None, overridden: bool=None):
        """SpendLimit - a model defined in OpenAPI

        :param name: The name of this SpendLimit.
        :param enforced_limit: The enforced_limit of this SpendLimit.
        :param max_limit: The max_limit of this SpendLimit.
        :param overridden: The overridden of this SpendLimit.
        """
        self.openapi_types = {
            'name': SpendLimitName,
            'enforced_limit': int,
            'max_limit': int,
            'overridden': bool
        }

        self.attribute_map = {
            'name': 'Name',
            'enforced_limit': 'EnforcedLimit',
            'max_limit': 'MaxLimit',
            'overridden': 'Overridden'
        }

        self._name = name
        self._enforced_limit = enforced_limit
        self._max_limit = max_limit
        self._overridden = overridden

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SpendLimit':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SpendLimit of this SpendLimit.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this SpendLimit.


        :return: The name of this SpendLimit.
        :rtype: SpendLimitName
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SpendLimit.


        :param name: The name of this SpendLimit.
        :type name: SpendLimitName
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def enforced_limit(self):
        """Gets the enforced_limit of this SpendLimit.


        :return: The enforced_limit of this SpendLimit.
        :rtype: int
        """
        return self._enforced_limit

    @enforced_limit.setter
    def enforced_limit(self, enforced_limit):
        """Sets the enforced_limit of this SpendLimit.


        :param enforced_limit: The enforced_limit of this SpendLimit.
        :type enforced_limit: int
        """
        if enforced_limit is None:
            raise ValueError("Invalid value for `enforced_limit`, must not be `None`")

        self._enforced_limit = enforced_limit

    @property
    def max_limit(self):
        """Gets the max_limit of this SpendLimit.


        :return: The max_limit of this SpendLimit.
        :rtype: int
        """
        return self._max_limit

    @max_limit.setter
    def max_limit(self, max_limit):
        """Sets the max_limit of this SpendLimit.


        :param max_limit: The max_limit of this SpendLimit.
        :type max_limit: int
        """
        if max_limit is None:
            raise ValueError("Invalid value for `max_limit`, must not be `None`")

        self._max_limit = max_limit

    @property
    def overridden(self):
        """Gets the overridden of this SpendLimit.


        :return: The overridden of this SpendLimit.
        :rtype: bool
        """
        return self._overridden

    @overridden.setter
    def overridden(self, overridden):
        """Sets the overridden of this SpendLimit.


        :param overridden: The overridden of this SpendLimit.
        :type overridden: bool
        """
        if overridden is None:
            raise ValueError("Invalid value for `overridden`, must not be `None`")

        self._overridden = overridden
