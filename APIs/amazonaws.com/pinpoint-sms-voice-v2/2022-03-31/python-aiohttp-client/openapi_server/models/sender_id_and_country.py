# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SenderIdAndCountry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sender_id: str=None, iso_country_code: str=None):
        """SenderIdAndCountry - a model defined in OpenAPI

        :param sender_id: The sender_id of this SenderIdAndCountry.
        :param iso_country_code: The iso_country_code of this SenderIdAndCountry.
        """
        self.openapi_types = {
            'sender_id': str,
            'iso_country_code': str
        }

        self.attribute_map = {
            'sender_id': 'SenderId',
            'iso_country_code': 'IsoCountryCode'
        }

        self._sender_id = sender_id
        self._iso_country_code = iso_country_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SenderIdAndCountry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SenderIdAndCountry of this SenderIdAndCountry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sender_id(self):
        """Gets the sender_id of this SenderIdAndCountry.


        :return: The sender_id of this SenderIdAndCountry.
        :rtype: str
        """
        return self._sender_id

    @sender_id.setter
    def sender_id(self, sender_id):
        """Sets the sender_id of this SenderIdAndCountry.


        :param sender_id: The sender_id of this SenderIdAndCountry.
        :type sender_id: str
        """
        if sender_id is None:
            raise ValueError("Invalid value for `sender_id`, must not be `None`")

        self._sender_id = sender_id

    @property
    def iso_country_code(self):
        """Gets the iso_country_code of this SenderIdAndCountry.


        :return: The iso_country_code of this SenderIdAndCountry.
        :rtype: str
        """
        return self._iso_country_code

    @iso_country_code.setter
    def iso_country_code(self, iso_country_code):
        """Sets the iso_country_code of this SenderIdAndCountry.


        :param iso_country_code: The iso_country_code of this SenderIdAndCountry.
        :type iso_country_code: str
        """
        if iso_country_code is None:
            raise ValueError("Invalid value for `iso_country_code`, must not be `None`")

        self._iso_country_code = iso_country_code
