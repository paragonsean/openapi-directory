# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.message_type import MessageType
from openapi_server import util


class ConfigurationSetInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configuration_set_arn: str=None, configuration_set_name: str=None, event_destinations: List=None, default_message_type: MessageType=None, default_sender_id: str=None, created_timestamp: datetime=None):
        """ConfigurationSetInformation - a model defined in OpenAPI

        :param configuration_set_arn: The configuration_set_arn of this ConfigurationSetInformation.
        :param configuration_set_name: The configuration_set_name of this ConfigurationSetInformation.
        :param event_destinations: The event_destinations of this ConfigurationSetInformation.
        :param default_message_type: The default_message_type of this ConfigurationSetInformation.
        :param default_sender_id: The default_sender_id of this ConfigurationSetInformation.
        :param created_timestamp: The created_timestamp of this ConfigurationSetInformation.
        """
        self.openapi_types = {
            'configuration_set_arn': str,
            'configuration_set_name': str,
            'event_destinations': List,
            'default_message_type': MessageType,
            'default_sender_id': str,
            'created_timestamp': datetime
        }

        self.attribute_map = {
            'configuration_set_arn': 'ConfigurationSetArn',
            'configuration_set_name': 'ConfigurationSetName',
            'event_destinations': 'EventDestinations',
            'default_message_type': 'DefaultMessageType',
            'default_sender_id': 'DefaultSenderId',
            'created_timestamp': 'CreatedTimestamp'
        }

        self._configuration_set_arn = configuration_set_arn
        self._configuration_set_name = configuration_set_name
        self._event_destinations = event_destinations
        self._default_message_type = default_message_type
        self._default_sender_id = default_sender_id
        self._created_timestamp = created_timestamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConfigurationSetInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConfigurationSetInformation of this ConfigurationSetInformation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configuration_set_arn(self):
        """Gets the configuration_set_arn of this ConfigurationSetInformation.


        :return: The configuration_set_arn of this ConfigurationSetInformation.
        :rtype: str
        """
        return self._configuration_set_arn

    @configuration_set_arn.setter
    def configuration_set_arn(self, configuration_set_arn):
        """Sets the configuration_set_arn of this ConfigurationSetInformation.


        :param configuration_set_arn: The configuration_set_arn of this ConfigurationSetInformation.
        :type configuration_set_arn: str
        """
        if configuration_set_arn is None:
            raise ValueError("Invalid value for `configuration_set_arn`, must not be `None`")

        self._configuration_set_arn = configuration_set_arn

    @property
    def configuration_set_name(self):
        """Gets the configuration_set_name of this ConfigurationSetInformation.


        :return: The configuration_set_name of this ConfigurationSetInformation.
        :rtype: str
        """
        return self._configuration_set_name

    @configuration_set_name.setter
    def configuration_set_name(self, configuration_set_name):
        """Sets the configuration_set_name of this ConfigurationSetInformation.


        :param configuration_set_name: The configuration_set_name of this ConfigurationSetInformation.
        :type configuration_set_name: str
        """
        if configuration_set_name is None:
            raise ValueError("Invalid value for `configuration_set_name`, must not be `None`")

        self._configuration_set_name = configuration_set_name

    @property
    def event_destinations(self):
        """Gets the event_destinations of this ConfigurationSetInformation.


        :return: The event_destinations of this ConfigurationSetInformation.
        :rtype: List
        """
        return self._event_destinations

    @event_destinations.setter
    def event_destinations(self, event_destinations):
        """Sets the event_destinations of this ConfigurationSetInformation.


        :param event_destinations: The event_destinations of this ConfigurationSetInformation.
        :type event_destinations: List
        """
        if event_destinations is None:
            raise ValueError("Invalid value for `event_destinations`, must not be `None`")

        self._event_destinations = event_destinations

    @property
    def default_message_type(self):
        """Gets the default_message_type of this ConfigurationSetInformation.


        :return: The default_message_type of this ConfigurationSetInformation.
        :rtype: MessageType
        """
        return self._default_message_type

    @default_message_type.setter
    def default_message_type(self, default_message_type):
        """Sets the default_message_type of this ConfigurationSetInformation.


        :param default_message_type: The default_message_type of this ConfigurationSetInformation.
        :type default_message_type: MessageType
        """

        self._default_message_type = default_message_type

    @property
    def default_sender_id(self):
        """Gets the default_sender_id of this ConfigurationSetInformation.


        :return: The default_sender_id of this ConfigurationSetInformation.
        :rtype: str
        """
        return self._default_sender_id

    @default_sender_id.setter
    def default_sender_id(self, default_sender_id):
        """Sets the default_sender_id of this ConfigurationSetInformation.


        :param default_sender_id: The default_sender_id of this ConfigurationSetInformation.
        :type default_sender_id: str
        """

        self._default_sender_id = default_sender_id

    @property
    def created_timestamp(self):
        """Gets the created_timestamp of this ConfigurationSetInformation.


        :return: The created_timestamp of this ConfigurationSetInformation.
        :rtype: datetime
        """
        return self._created_timestamp

    @created_timestamp.setter
    def created_timestamp(self, created_timestamp):
        """Sets the created_timestamp of this ConfigurationSetInformation.


        :param created_timestamp: The created_timestamp of this ConfigurationSetInformation.
        :type created_timestamp: datetime
        """
        if created_timestamp is None:
            raise ValueError("Invalid value for `created_timestamp`, must not be `None`")

        self._created_timestamp = created_timestamp
