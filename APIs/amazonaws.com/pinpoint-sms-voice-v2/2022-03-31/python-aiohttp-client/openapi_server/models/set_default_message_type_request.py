# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.message_type import MessageType
from openapi_server import util


class SetDefaultMessageTypeRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configuration_set_name: str=None, message_type: MessageType=None):
        """SetDefaultMessageTypeRequest - a model defined in OpenAPI

        :param configuration_set_name: The configuration_set_name of this SetDefaultMessageTypeRequest.
        :param message_type: The message_type of this SetDefaultMessageTypeRequest.
        """
        self.openapi_types = {
            'configuration_set_name': str,
            'message_type': MessageType
        }

        self.attribute_map = {
            'configuration_set_name': 'ConfigurationSetName',
            'message_type': 'MessageType'
        }

        self._configuration_set_name = configuration_set_name
        self._message_type = message_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SetDefaultMessageTypeRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SetDefaultMessageTypeRequest of this SetDefaultMessageTypeRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configuration_set_name(self):
        """Gets the configuration_set_name of this SetDefaultMessageTypeRequest.


        :return: The configuration_set_name of this SetDefaultMessageTypeRequest.
        :rtype: str
        """
        return self._configuration_set_name

    @configuration_set_name.setter
    def configuration_set_name(self, configuration_set_name):
        """Sets the configuration_set_name of this SetDefaultMessageTypeRequest.


        :param configuration_set_name: The configuration_set_name of this SetDefaultMessageTypeRequest.
        :type configuration_set_name: str
        """
        if configuration_set_name is None:
            raise ValueError("Invalid value for `configuration_set_name`, must not be `None`")

        self._configuration_set_name = configuration_set_name

    @property
    def message_type(self):
        """Gets the message_type of this SetDefaultMessageTypeRequest.


        :return: The message_type of this SetDefaultMessageTypeRequest.
        :rtype: MessageType
        """
        return self._message_type

    @message_type.setter
    def message_type(self, message_type):
        """Sets the message_type of this SetDefaultMessageTypeRequest.


        :param message_type: The message_type of this SetDefaultMessageTypeRequest.
        :type message_type: MessageType
        """
        if message_type is None:
            raise ValueError("Invalid value for `message_type`, must not be `None`")

        self._message_type = message_type
