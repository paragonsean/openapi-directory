# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.message_type import MessageType
from openapi_server import util


class SendTextMessageRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destination_phone_number: str=None, origination_identity: str=None, message_body: str=None, message_type: MessageType=None, keyword: str=None, configuration_set_name: str=None, max_price: str=None, time_to_live: int=None, context: Dict=None, destination_country_parameters: Dict=None, dry_run: bool=None):
        """SendTextMessageRequest - a model defined in OpenAPI

        :param destination_phone_number: The destination_phone_number of this SendTextMessageRequest.
        :param origination_identity: The origination_identity of this SendTextMessageRequest.
        :param message_body: The message_body of this SendTextMessageRequest.
        :param message_type: The message_type of this SendTextMessageRequest.
        :param keyword: The keyword of this SendTextMessageRequest.
        :param configuration_set_name: The configuration_set_name of this SendTextMessageRequest.
        :param max_price: The max_price of this SendTextMessageRequest.
        :param time_to_live: The time_to_live of this SendTextMessageRequest.
        :param context: The context of this SendTextMessageRequest.
        :param destination_country_parameters: The destination_country_parameters of this SendTextMessageRequest.
        :param dry_run: The dry_run of this SendTextMessageRequest.
        """
        self.openapi_types = {
            'destination_phone_number': str,
            'origination_identity': str,
            'message_body': str,
            'message_type': MessageType,
            'keyword': str,
            'configuration_set_name': str,
            'max_price': str,
            'time_to_live': int,
            'context': Dict,
            'destination_country_parameters': Dict,
            'dry_run': bool
        }

        self.attribute_map = {
            'destination_phone_number': 'DestinationPhoneNumber',
            'origination_identity': 'OriginationIdentity',
            'message_body': 'MessageBody',
            'message_type': 'MessageType',
            'keyword': 'Keyword',
            'configuration_set_name': 'ConfigurationSetName',
            'max_price': 'MaxPrice',
            'time_to_live': 'TimeToLive',
            'context': 'Context',
            'destination_country_parameters': 'DestinationCountryParameters',
            'dry_run': 'DryRun'
        }

        self._destination_phone_number = destination_phone_number
        self._origination_identity = origination_identity
        self._message_body = message_body
        self._message_type = message_type
        self._keyword = keyword
        self._configuration_set_name = configuration_set_name
        self._max_price = max_price
        self._time_to_live = time_to_live
        self._context = context
        self._destination_country_parameters = destination_country_parameters
        self._dry_run = dry_run

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SendTextMessageRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SendTextMessageRequest of this SendTextMessageRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destination_phone_number(self):
        """Gets the destination_phone_number of this SendTextMessageRequest.


        :return: The destination_phone_number of this SendTextMessageRequest.
        :rtype: str
        """
        return self._destination_phone_number

    @destination_phone_number.setter
    def destination_phone_number(self, destination_phone_number):
        """Sets the destination_phone_number of this SendTextMessageRequest.


        :param destination_phone_number: The destination_phone_number of this SendTextMessageRequest.
        :type destination_phone_number: str
        """
        if destination_phone_number is None:
            raise ValueError("Invalid value for `destination_phone_number`, must not be `None`")

        self._destination_phone_number = destination_phone_number

    @property
    def origination_identity(self):
        """Gets the origination_identity of this SendTextMessageRequest.


        :return: The origination_identity of this SendTextMessageRequest.
        :rtype: str
        """
        return self._origination_identity

    @origination_identity.setter
    def origination_identity(self, origination_identity):
        """Sets the origination_identity of this SendTextMessageRequest.


        :param origination_identity: The origination_identity of this SendTextMessageRequest.
        :type origination_identity: str
        """

        self._origination_identity = origination_identity

    @property
    def message_body(self):
        """Gets the message_body of this SendTextMessageRequest.


        :return: The message_body of this SendTextMessageRequest.
        :rtype: str
        """
        return self._message_body

    @message_body.setter
    def message_body(self, message_body):
        """Sets the message_body of this SendTextMessageRequest.


        :param message_body: The message_body of this SendTextMessageRequest.
        :type message_body: str
        """

        self._message_body = message_body

    @property
    def message_type(self):
        """Gets the message_type of this SendTextMessageRequest.


        :return: The message_type of this SendTextMessageRequest.
        :rtype: MessageType
        """
        return self._message_type

    @message_type.setter
    def message_type(self, message_type):
        """Sets the message_type of this SendTextMessageRequest.


        :param message_type: The message_type of this SendTextMessageRequest.
        :type message_type: MessageType
        """

        self._message_type = message_type

    @property
    def keyword(self):
        """Gets the keyword of this SendTextMessageRequest.


        :return: The keyword of this SendTextMessageRequest.
        :rtype: str
        """
        return self._keyword

    @keyword.setter
    def keyword(self, keyword):
        """Sets the keyword of this SendTextMessageRequest.


        :param keyword: The keyword of this SendTextMessageRequest.
        :type keyword: str
        """

        self._keyword = keyword

    @property
    def configuration_set_name(self):
        """Gets the configuration_set_name of this SendTextMessageRequest.


        :return: The configuration_set_name of this SendTextMessageRequest.
        :rtype: str
        """
        return self._configuration_set_name

    @configuration_set_name.setter
    def configuration_set_name(self, configuration_set_name):
        """Sets the configuration_set_name of this SendTextMessageRequest.


        :param configuration_set_name: The configuration_set_name of this SendTextMessageRequest.
        :type configuration_set_name: str
        """

        self._configuration_set_name = configuration_set_name

    @property
    def max_price(self):
        """Gets the max_price of this SendTextMessageRequest.


        :return: The max_price of this SendTextMessageRequest.
        :rtype: str
        """
        return self._max_price

    @max_price.setter
    def max_price(self, max_price):
        """Sets the max_price of this SendTextMessageRequest.


        :param max_price: The max_price of this SendTextMessageRequest.
        :type max_price: str
        """

        self._max_price = max_price

    @property
    def time_to_live(self):
        """Gets the time_to_live of this SendTextMessageRequest.


        :return: The time_to_live of this SendTextMessageRequest.
        :rtype: int
        """
        return self._time_to_live

    @time_to_live.setter
    def time_to_live(self, time_to_live):
        """Sets the time_to_live of this SendTextMessageRequest.


        :param time_to_live: The time_to_live of this SendTextMessageRequest.
        :type time_to_live: int
        """

        self._time_to_live = time_to_live

    @property
    def context(self):
        """Gets the context of this SendTextMessageRequest.


        :return: The context of this SendTextMessageRequest.
        :rtype: Dict
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this SendTextMessageRequest.


        :param context: The context of this SendTextMessageRequest.
        :type context: Dict
        """

        self._context = context

    @property
    def destination_country_parameters(self):
        """Gets the destination_country_parameters of this SendTextMessageRequest.


        :return: The destination_country_parameters of this SendTextMessageRequest.
        :rtype: Dict
        """
        return self._destination_country_parameters

    @destination_country_parameters.setter
    def destination_country_parameters(self, destination_country_parameters):
        """Sets the destination_country_parameters of this SendTextMessageRequest.


        :param destination_country_parameters: The destination_country_parameters of this SendTextMessageRequest.
        :type destination_country_parameters: Dict
        """

        self._destination_country_parameters = destination_country_parameters

    @property
    def dry_run(self):
        """Gets the dry_run of this SendTextMessageRequest.


        :return: The dry_run of this SendTextMessageRequest.
        :rtype: bool
        """
        return self._dry_run

    @dry_run.setter
    def dry_run(self, dry_run):
        """Sets the dry_run of this SendTextMessageRequest.


        :param dry_run: The dry_run of this SendTextMessageRequest.
        :type dry_run: bool
        """

        self._dry_run = dry_run
