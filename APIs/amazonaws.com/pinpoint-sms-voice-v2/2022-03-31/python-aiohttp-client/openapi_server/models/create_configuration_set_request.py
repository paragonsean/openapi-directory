# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateConfigurationSetRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configuration_set_name: str=None, tags: List=None, client_token: str=None):
        """CreateConfigurationSetRequest - a model defined in OpenAPI

        :param configuration_set_name: The configuration_set_name of this CreateConfigurationSetRequest.
        :param tags: The tags of this CreateConfigurationSetRequest.
        :param client_token: The client_token of this CreateConfigurationSetRequest.
        """
        self.openapi_types = {
            'configuration_set_name': str,
            'tags': List,
            'client_token': str
        }

        self.attribute_map = {
            'configuration_set_name': 'ConfigurationSetName',
            'tags': 'Tags',
            'client_token': 'ClientToken'
        }

        self._configuration_set_name = configuration_set_name
        self._tags = tags
        self._client_token = client_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateConfigurationSetRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateConfigurationSetRequest of this CreateConfigurationSetRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configuration_set_name(self):
        """Gets the configuration_set_name of this CreateConfigurationSetRequest.


        :return: The configuration_set_name of this CreateConfigurationSetRequest.
        :rtype: str
        """
        return self._configuration_set_name

    @configuration_set_name.setter
    def configuration_set_name(self, configuration_set_name):
        """Sets the configuration_set_name of this CreateConfigurationSetRequest.


        :param configuration_set_name: The configuration_set_name of this CreateConfigurationSetRequest.
        :type configuration_set_name: str
        """
        if configuration_set_name is None:
            raise ValueError("Invalid value for `configuration_set_name`, must not be `None`")

        self._configuration_set_name = configuration_set_name

    @property
    def tags(self):
        """Gets the tags of this CreateConfigurationSetRequest.


        :return: The tags of this CreateConfigurationSetRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateConfigurationSetRequest.


        :param tags: The tags of this CreateConfigurationSetRequest.
        :type tags: List
        """

        self._tags = tags

    @property
    def client_token(self):
        """Gets the client_token of this CreateConfigurationSetRequest.


        :return: The client_token of this CreateConfigurationSetRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateConfigurationSetRequest.


        :param client_token: The client_token of this CreateConfigurationSetRequest.
        :type client_token: str
        """

        self._client_token = client_token
