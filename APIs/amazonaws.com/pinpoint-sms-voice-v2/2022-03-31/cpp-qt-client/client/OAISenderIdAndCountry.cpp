/**
 * Amazon Pinpoint SMS Voice V2
 * <p>Welcome to the <i>Amazon Pinpoint SMS and Voice, version 2 API Reference</i>. This guide provides information about Amazon Pinpoint SMS and Voice, version 2 API resources, including supported HTTP methods, parameters, and schemas.</p> <p>Amazon Pinpoint is an Amazon Web Services service that you can use to engage with your recipients across multiple messaging channels. The Amazon Pinpoint SMS and Voice, version 2 API provides programmatic access to options that are unique to the SMS and voice channels and supplements the resources provided by the Amazon Pinpoint API.</p> <p>If you're new to Amazon Pinpoint, it's also helpful to review the <a href=\"https://docs.aws.amazon.com/pinpoint/latest/developerguide/welcome.html\"> Amazon Pinpoint Developer Guide</a>. The <i>Amazon Pinpoint Developer Guide</i> provides tutorials, code samples, and procedures that demonstrate how to use Amazon Pinpoint features programmatically and how to integrate Amazon Pinpoint functionality into mobile apps and other types of applications. The guide also provides key information, such as Amazon Pinpoint integration with other Amazon Web Services services, and the quotas that apply to use of the service.</p>
 *
 * The version of the OpenAPI document: 2022-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISenderIdAndCountry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISenderIdAndCountry::OAISenderIdAndCountry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISenderIdAndCountry::OAISenderIdAndCountry() {
    this->initializeModel();
}

OAISenderIdAndCountry::~OAISenderIdAndCountry() {}

void OAISenderIdAndCountry::initializeModel() {

    m_sender_id_isSet = false;
    m_sender_id_isValid = false;

    m_iso_country_code_isSet = false;
    m_iso_country_code_isValid = false;
}

void OAISenderIdAndCountry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISenderIdAndCountry::fromJsonObject(QJsonObject json) {

    m_sender_id_isValid = ::OpenAPI::fromJsonValue(m_sender_id, json[QString("SenderId")]);
    m_sender_id_isSet = !json[QString("SenderId")].isNull() && m_sender_id_isValid;

    m_iso_country_code_isValid = ::OpenAPI::fromJsonValue(m_iso_country_code, json[QString("IsoCountryCode")]);
    m_iso_country_code_isSet = !json[QString("IsoCountryCode")].isNull() && m_iso_country_code_isValid;
}

QString OAISenderIdAndCountry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISenderIdAndCountry::asJsonObject() const {
    QJsonObject obj;
    if (m_sender_id_isSet) {
        obj.insert(QString("SenderId"), ::OpenAPI::toJsonValue(m_sender_id));
    }
    if (m_iso_country_code_isSet) {
        obj.insert(QString("IsoCountryCode"), ::OpenAPI::toJsonValue(m_iso_country_code));
    }
    return obj;
}

QString OAISenderIdAndCountry::getSenderId() const {
    return m_sender_id;
}
void OAISenderIdAndCountry::setSenderId(const QString &sender_id) {
    m_sender_id = sender_id;
    m_sender_id_isSet = true;
}

bool OAISenderIdAndCountry::is_sender_id_Set() const{
    return m_sender_id_isSet;
}

bool OAISenderIdAndCountry::is_sender_id_Valid() const{
    return m_sender_id_isValid;
}

QString OAISenderIdAndCountry::getIsoCountryCode() const {
    return m_iso_country_code;
}
void OAISenderIdAndCountry::setIsoCountryCode(const QString &iso_country_code) {
    m_iso_country_code = iso_country_code;
    m_iso_country_code_isSet = true;
}

bool OAISenderIdAndCountry::is_iso_country_code_Set() const{
    return m_iso_country_code_isSet;
}

bool OAISenderIdAndCountry::is_iso_country_code_Valid() const{
    return m_iso_country_code_isValid;
}

bool OAISenderIdAndCountry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sender_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iso_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISenderIdAndCountry::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_sender_id_isValid && m_iso_country_code_isValid && true;
}

} // namespace OpenAPI
