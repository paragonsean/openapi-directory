/**
 * Amazon Pinpoint SMS Voice V2
 * <p>Welcome to the <i>Amazon Pinpoint SMS and Voice, version 2 API Reference</i>. This guide provides information about Amazon Pinpoint SMS and Voice, version 2 API resources, including supported HTTP methods, parameters, and schemas.</p> <p>Amazon Pinpoint is an Amazon Web Services service that you can use to engage with your recipients across multiple messaging channels. The Amazon Pinpoint SMS and Voice, version 2 API provides programmatic access to options that are unique to the SMS and voice channels and supplements the resources provided by the Amazon Pinpoint API.</p> <p>If you're new to Amazon Pinpoint, it's also helpful to review the <a href=\"https://docs.aws.amazon.com/pinpoint/latest/developerguide/welcome.html\"> Amazon Pinpoint Developer Guide</a>. The <i>Amazon Pinpoint Developer Guide</i> provides tutorials, code samples, and procedures that demonstrate how to use Amazon Pinpoint features programmatically and how to integrate Amazon Pinpoint functionality into mobile apps and other types of applications. The guide also provides key information, such as Amazon Pinpoint integration with other Amazon Web Services services, and the quotas that apply to use of the service.</p>
 *
 * The version of the OpenAPI document: 2022-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISpendLimit.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISpendLimit::OAISpendLimit(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISpendLimit::OAISpendLimit() {
    this->initializeModel();
}

OAISpendLimit::~OAISpendLimit() {}

void OAISpendLimit::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_enforced_limit_isSet = false;
    m_enforced_limit_isValid = false;

    m_max_limit_isSet = false;
    m_max_limit_isValid = false;

    m_overridden_isSet = false;
    m_overridden_isValid = false;
}

void OAISpendLimit::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISpendLimit::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_enforced_limit_isValid = ::OpenAPI::fromJsonValue(m_enforced_limit, json[QString("EnforcedLimit")]);
    m_enforced_limit_isSet = !json[QString("EnforcedLimit")].isNull() && m_enforced_limit_isValid;

    m_max_limit_isValid = ::OpenAPI::fromJsonValue(m_max_limit, json[QString("MaxLimit")]);
    m_max_limit_isSet = !json[QString("MaxLimit")].isNull() && m_max_limit_isValid;

    m_overridden_isValid = ::OpenAPI::fromJsonValue(m_overridden, json[QString("Overridden")]);
    m_overridden_isSet = !json[QString("Overridden")].isNull() && m_overridden_isValid;
}

QString OAISpendLimit::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISpendLimit::asJsonObject() const {
    QJsonObject obj;
    if (m_name.isSet()) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_enforced_limit_isSet) {
        obj.insert(QString("EnforcedLimit"), ::OpenAPI::toJsonValue(m_enforced_limit));
    }
    if (m_max_limit_isSet) {
        obj.insert(QString("MaxLimit"), ::OpenAPI::toJsonValue(m_max_limit));
    }
    if (m_overridden_isSet) {
        obj.insert(QString("Overridden"), ::OpenAPI::toJsonValue(m_overridden));
    }
    return obj;
}

OAISpendLimitName OAISpendLimit::getName() const {
    return m_name;
}
void OAISpendLimit::setName(const OAISpendLimitName &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISpendLimit::is_name_Set() const{
    return m_name_isSet;
}

bool OAISpendLimit::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAISpendLimit::getEnforcedLimit() const {
    return m_enforced_limit;
}
void OAISpendLimit::setEnforcedLimit(const qint32 &enforced_limit) {
    m_enforced_limit = enforced_limit;
    m_enforced_limit_isSet = true;
}

bool OAISpendLimit::is_enforced_limit_Set() const{
    return m_enforced_limit_isSet;
}

bool OAISpendLimit::is_enforced_limit_Valid() const{
    return m_enforced_limit_isValid;
}

qint32 OAISpendLimit::getMaxLimit() const {
    return m_max_limit;
}
void OAISpendLimit::setMaxLimit(const qint32 &max_limit) {
    m_max_limit = max_limit;
    m_max_limit_isSet = true;
}

bool OAISpendLimit::is_max_limit_Set() const{
    return m_max_limit_isSet;
}

bool OAISpendLimit::is_max_limit_Valid() const{
    return m_max_limit_isValid;
}

bool OAISpendLimit::getOverridden() const {
    return m_overridden;
}
void OAISpendLimit::setOverridden(const bool &overridden) {
    m_overridden = overridden;
    m_overridden_isSet = true;
}

bool OAISpendLimit::is_overridden_Set() const{
    return m_overridden_isSet;
}

bool OAISpendLimit::is_overridden_Valid() const{
    return m_overridden_isValid;
}

bool OAISpendLimit::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enforced_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overridden_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISpendLimit::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_enforced_limit_isValid && m_max_limit_isValid && m_overridden_isValid && true;
}

} // namespace OpenAPI
