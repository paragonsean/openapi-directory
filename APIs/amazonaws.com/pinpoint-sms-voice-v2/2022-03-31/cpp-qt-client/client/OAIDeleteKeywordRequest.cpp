/**
 * Amazon Pinpoint SMS Voice V2
 * <p>Welcome to the <i>Amazon Pinpoint SMS and Voice, version 2 API Reference</i>. This guide provides information about Amazon Pinpoint SMS and Voice, version 2 API resources, including supported HTTP methods, parameters, and schemas.</p> <p>Amazon Pinpoint is an Amazon Web Services service that you can use to engage with your recipients across multiple messaging channels. The Amazon Pinpoint SMS and Voice, version 2 API provides programmatic access to options that are unique to the SMS and voice channels and supplements the resources provided by the Amazon Pinpoint API.</p> <p>If you're new to Amazon Pinpoint, it's also helpful to review the <a href=\"https://docs.aws.amazon.com/pinpoint/latest/developerguide/welcome.html\"> Amazon Pinpoint Developer Guide</a>. The <i>Amazon Pinpoint Developer Guide</i> provides tutorials, code samples, and procedures that demonstrate how to use Amazon Pinpoint features programmatically and how to integrate Amazon Pinpoint functionality into mobile apps and other types of applications. The guide also provides key information, such as Amazon Pinpoint integration with other Amazon Web Services services, and the quotas that apply to use of the service.</p>
 *
 * The version of the OpenAPI document: 2022-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteKeywordRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteKeywordRequest::OAIDeleteKeywordRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteKeywordRequest::OAIDeleteKeywordRequest() {
    this->initializeModel();
}

OAIDeleteKeywordRequest::~OAIDeleteKeywordRequest() {}

void OAIDeleteKeywordRequest::initializeModel() {

    m_origination_identity_isSet = false;
    m_origination_identity_isValid = false;

    m_keyword_isSet = false;
    m_keyword_isValid = false;
}

void OAIDeleteKeywordRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteKeywordRequest::fromJsonObject(QJsonObject json) {

    m_origination_identity_isValid = ::OpenAPI::fromJsonValue(m_origination_identity, json[QString("OriginationIdentity")]);
    m_origination_identity_isSet = !json[QString("OriginationIdentity")].isNull() && m_origination_identity_isValid;

    m_keyword_isValid = ::OpenAPI::fromJsonValue(m_keyword, json[QString("Keyword")]);
    m_keyword_isSet = !json[QString("Keyword")].isNull() && m_keyword_isValid;
}

QString OAIDeleteKeywordRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteKeywordRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_origination_identity_isSet) {
        obj.insert(QString("OriginationIdentity"), ::OpenAPI::toJsonValue(m_origination_identity));
    }
    if (m_keyword_isSet) {
        obj.insert(QString("Keyword"), ::OpenAPI::toJsonValue(m_keyword));
    }
    return obj;
}

QString OAIDeleteKeywordRequest::getOriginationIdentity() const {
    return m_origination_identity;
}
void OAIDeleteKeywordRequest::setOriginationIdentity(const QString &origination_identity) {
    m_origination_identity = origination_identity;
    m_origination_identity_isSet = true;
}

bool OAIDeleteKeywordRequest::is_origination_identity_Set() const{
    return m_origination_identity_isSet;
}

bool OAIDeleteKeywordRequest::is_origination_identity_Valid() const{
    return m_origination_identity_isValid;
}

QString OAIDeleteKeywordRequest::getKeyword() const {
    return m_keyword;
}
void OAIDeleteKeywordRequest::setKeyword(const QString &keyword) {
    m_keyword = keyword;
    m_keyword_isSet = true;
}

bool OAIDeleteKeywordRequest::is_keyword_Set() const{
    return m_keyword_isSet;
}

bool OAIDeleteKeywordRequest::is_keyword_Valid() const{
    return m_keyword_isValid;
}

bool OAIDeleteKeywordRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_origination_identity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keyword_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteKeywordRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_origination_identity_isValid && m_keyword_isValid && true;
}

} // namespace OpenAPI
