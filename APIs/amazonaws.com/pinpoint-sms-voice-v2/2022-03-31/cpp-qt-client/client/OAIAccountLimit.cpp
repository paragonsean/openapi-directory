/**
 * Amazon Pinpoint SMS Voice V2
 * <p>Welcome to the <i>Amazon Pinpoint SMS and Voice, version 2 API Reference</i>. This guide provides information about Amazon Pinpoint SMS and Voice, version 2 API resources, including supported HTTP methods, parameters, and schemas.</p> <p>Amazon Pinpoint is an Amazon Web Services service that you can use to engage with your recipients across multiple messaging channels. The Amazon Pinpoint SMS and Voice, version 2 API provides programmatic access to options that are unique to the SMS and voice channels and supplements the resources provided by the Amazon Pinpoint API.</p> <p>If you're new to Amazon Pinpoint, it's also helpful to review the <a href=\"https://docs.aws.amazon.com/pinpoint/latest/developerguide/welcome.html\"> Amazon Pinpoint Developer Guide</a>. The <i>Amazon Pinpoint Developer Guide</i> provides tutorials, code samples, and procedures that demonstrate how to use Amazon Pinpoint features programmatically and how to integrate Amazon Pinpoint functionality into mobile apps and other types of applications. The guide also provides key information, such as Amazon Pinpoint integration with other Amazon Web Services services, and the quotas that apply to use of the service.</p>
 *
 * The version of the OpenAPI document: 2022-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountLimit.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountLimit::OAIAccountLimit(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountLimit::OAIAccountLimit() {
    this->initializeModel();
}

OAIAccountLimit::~OAIAccountLimit() {}

void OAIAccountLimit::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_used_isSet = false;
    m_used_isValid = false;

    m_max_isSet = false;
    m_max_isValid = false;
}

void OAIAccountLimit::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountLimit::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_used_isValid = ::OpenAPI::fromJsonValue(m_used, json[QString("Used")]);
    m_used_isSet = !json[QString("Used")].isNull() && m_used_isValid;

    m_max_isValid = ::OpenAPI::fromJsonValue(m_max, json[QString("Max")]);
    m_max_isSet = !json[QString("Max")].isNull() && m_max_isValid;
}

QString OAIAccountLimit::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountLimit::asJsonObject() const {
    QJsonObject obj;
    if (m_name.isSet()) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_used_isSet) {
        obj.insert(QString("Used"), ::OpenAPI::toJsonValue(m_used));
    }
    if (m_max_isSet) {
        obj.insert(QString("Max"), ::OpenAPI::toJsonValue(m_max));
    }
    return obj;
}

OAIAccountLimitName OAIAccountLimit::getName() const {
    return m_name;
}
void OAIAccountLimit::setName(const OAIAccountLimitName &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAccountLimit::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAccountLimit::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIAccountLimit::getUsed() const {
    return m_used;
}
void OAIAccountLimit::setUsed(const qint32 &used) {
    m_used = used;
    m_used_isSet = true;
}

bool OAIAccountLimit::is_used_Set() const{
    return m_used_isSet;
}

bool OAIAccountLimit::is_used_Valid() const{
    return m_used_isValid;
}

qint32 OAIAccountLimit::getMax() const {
    return m_max;
}
void OAIAccountLimit::setMax(const qint32 &max) {
    m_max = max;
    m_max_isSet = true;
}

bool OAIAccountLimit::is_max_Set() const{
    return m_max_isSet;
}

bool OAIAccountLimit::is_max_Valid() const{
    return m_max_isValid;
}

bool OAIAccountLimit::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_used_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountLimit::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_used_isValid && m_max_isValid && true;
}

} // namespace OpenAPI
