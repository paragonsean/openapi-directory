/**
 * Amazon Pinpoint SMS Voice V2
 * <p>Welcome to the <i>Amazon Pinpoint SMS and Voice, version 2 API Reference</i>. This guide provides information about Amazon Pinpoint SMS and Voice, version 2 API resources, including supported HTTP methods, parameters, and schemas.</p> <p>Amazon Pinpoint is an Amazon Web Services service that you can use to engage with your recipients across multiple messaging channels. The Amazon Pinpoint SMS and Voice, version 2 API provides programmatic access to options that are unique to the SMS and voice channels and supplements the resources provided by the Amazon Pinpoint API.</p> <p>If you're new to Amazon Pinpoint, it's also helpful to review the <a href=\"https://docs.aws.amazon.com/pinpoint/latest/developerguide/welcome.html\"> Amazon Pinpoint Developer Guide</a>. The <i>Amazon Pinpoint Developer Guide</i> provides tutorials, code samples, and procedures that demonstrate how to use Amazon Pinpoint features programmatically and how to integrate Amazon Pinpoint functionality into mobile apps and other types of applications. The guide also provides key information, such as Amazon Pinpoint integration with other Amazon Web Services services, and the quotas that apply to use of the service.</p>
 *
 * The version of the OpenAPI document: 2022-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfigurationSetInformation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfigurationSetInformation::OAIConfigurationSetInformation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfigurationSetInformation::OAIConfigurationSetInformation() {
    this->initializeModel();
}

OAIConfigurationSetInformation::~OAIConfigurationSetInformation() {}

void OAIConfigurationSetInformation::initializeModel() {

    m_configuration_set_arn_isSet = false;
    m_configuration_set_arn_isValid = false;

    m_configuration_set_name_isSet = false;
    m_configuration_set_name_isValid = false;

    m_event_destinations_isSet = false;
    m_event_destinations_isValid = false;

    m_default_message_type_isSet = false;
    m_default_message_type_isValid = false;

    m_default_sender_id_isSet = false;
    m_default_sender_id_isValid = false;

    m_created_timestamp_isSet = false;
    m_created_timestamp_isValid = false;
}

void OAIConfigurationSetInformation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfigurationSetInformation::fromJsonObject(QJsonObject json) {

    m_configuration_set_arn_isValid = ::OpenAPI::fromJsonValue(m_configuration_set_arn, json[QString("ConfigurationSetArn")]);
    m_configuration_set_arn_isSet = !json[QString("ConfigurationSetArn")].isNull() && m_configuration_set_arn_isValid;

    m_configuration_set_name_isValid = ::OpenAPI::fromJsonValue(m_configuration_set_name, json[QString("ConfigurationSetName")]);
    m_configuration_set_name_isSet = !json[QString("ConfigurationSetName")].isNull() && m_configuration_set_name_isValid;

    m_event_destinations_isValid = ::OpenAPI::fromJsonValue(m_event_destinations, json[QString("EventDestinations")]);
    m_event_destinations_isSet = !json[QString("EventDestinations")].isNull() && m_event_destinations_isValid;

    m_default_message_type_isValid = ::OpenAPI::fromJsonValue(m_default_message_type, json[QString("DefaultMessageType")]);
    m_default_message_type_isSet = !json[QString("DefaultMessageType")].isNull() && m_default_message_type_isValid;

    m_default_sender_id_isValid = ::OpenAPI::fromJsonValue(m_default_sender_id, json[QString("DefaultSenderId")]);
    m_default_sender_id_isSet = !json[QString("DefaultSenderId")].isNull() && m_default_sender_id_isValid;

    m_created_timestamp_isValid = ::OpenAPI::fromJsonValue(m_created_timestamp, json[QString("CreatedTimestamp")]);
    m_created_timestamp_isSet = !json[QString("CreatedTimestamp")].isNull() && m_created_timestamp_isValid;
}

QString OAIConfigurationSetInformation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfigurationSetInformation::asJsonObject() const {
    QJsonObject obj;
    if (m_configuration_set_arn_isSet) {
        obj.insert(QString("ConfigurationSetArn"), ::OpenAPI::toJsonValue(m_configuration_set_arn));
    }
    if (m_configuration_set_name_isSet) {
        obj.insert(QString("ConfigurationSetName"), ::OpenAPI::toJsonValue(m_configuration_set_name));
    }
    if (m_event_destinations.isSet()) {
        obj.insert(QString("EventDestinations"), ::OpenAPI::toJsonValue(m_event_destinations));
    }
    if (m_default_message_type.isSet()) {
        obj.insert(QString("DefaultMessageType"), ::OpenAPI::toJsonValue(m_default_message_type));
    }
    if (m_default_sender_id_isSet) {
        obj.insert(QString("DefaultSenderId"), ::OpenAPI::toJsonValue(m_default_sender_id));
    }
    if (m_created_timestamp_isSet) {
        obj.insert(QString("CreatedTimestamp"), ::OpenAPI::toJsonValue(m_created_timestamp));
    }
    return obj;
}

QString OAIConfigurationSetInformation::getConfigurationSetArn() const {
    return m_configuration_set_arn;
}
void OAIConfigurationSetInformation::setConfigurationSetArn(const QString &configuration_set_arn) {
    m_configuration_set_arn = configuration_set_arn;
    m_configuration_set_arn_isSet = true;
}

bool OAIConfigurationSetInformation::is_configuration_set_arn_Set() const{
    return m_configuration_set_arn_isSet;
}

bool OAIConfigurationSetInformation::is_configuration_set_arn_Valid() const{
    return m_configuration_set_arn_isValid;
}

QString OAIConfigurationSetInformation::getConfigurationSetName() const {
    return m_configuration_set_name;
}
void OAIConfigurationSetInformation::setConfigurationSetName(const QString &configuration_set_name) {
    m_configuration_set_name = configuration_set_name;
    m_configuration_set_name_isSet = true;
}

bool OAIConfigurationSetInformation::is_configuration_set_name_Set() const{
    return m_configuration_set_name_isSet;
}

bool OAIConfigurationSetInformation::is_configuration_set_name_Valid() const{
    return m_configuration_set_name_isValid;
}

QList OAIConfigurationSetInformation::getEventDestinations() const {
    return m_event_destinations;
}
void OAIConfigurationSetInformation::setEventDestinations(const QList &event_destinations) {
    m_event_destinations = event_destinations;
    m_event_destinations_isSet = true;
}

bool OAIConfigurationSetInformation::is_event_destinations_Set() const{
    return m_event_destinations_isSet;
}

bool OAIConfigurationSetInformation::is_event_destinations_Valid() const{
    return m_event_destinations_isValid;
}

OAIMessageType OAIConfigurationSetInformation::getDefaultMessageType() const {
    return m_default_message_type;
}
void OAIConfigurationSetInformation::setDefaultMessageType(const OAIMessageType &default_message_type) {
    m_default_message_type = default_message_type;
    m_default_message_type_isSet = true;
}

bool OAIConfigurationSetInformation::is_default_message_type_Set() const{
    return m_default_message_type_isSet;
}

bool OAIConfigurationSetInformation::is_default_message_type_Valid() const{
    return m_default_message_type_isValid;
}

QString OAIConfigurationSetInformation::getDefaultSenderId() const {
    return m_default_sender_id;
}
void OAIConfigurationSetInformation::setDefaultSenderId(const QString &default_sender_id) {
    m_default_sender_id = default_sender_id;
    m_default_sender_id_isSet = true;
}

bool OAIConfigurationSetInformation::is_default_sender_id_Set() const{
    return m_default_sender_id_isSet;
}

bool OAIConfigurationSetInformation::is_default_sender_id_Valid() const{
    return m_default_sender_id_isValid;
}

QDateTime OAIConfigurationSetInformation::getCreatedTimestamp() const {
    return m_created_timestamp;
}
void OAIConfigurationSetInformation::setCreatedTimestamp(const QDateTime &created_timestamp) {
    m_created_timestamp = created_timestamp;
    m_created_timestamp_isSet = true;
}

bool OAIConfigurationSetInformation::is_created_timestamp_Set() const{
    return m_created_timestamp_isSet;
}

bool OAIConfigurationSetInformation::is_created_timestamp_Valid() const{
    return m_created_timestamp_isValid;
}

bool OAIConfigurationSetInformation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_configuration_set_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration_set_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_destinations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_message_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_sender_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfigurationSetInformation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_configuration_set_arn_isValid && m_configuration_set_name_isValid && m_event_destinations_isValid && m_created_timestamp_isValid && true;
}

} // namespace OpenAPI
