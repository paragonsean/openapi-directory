/**
 * Amazon Pinpoint SMS Voice V2
 * <p>Welcome to the <i>Amazon Pinpoint SMS and Voice, version 2 API Reference</i>. This guide provides information about Amazon Pinpoint SMS and Voice, version 2 API resources, including supported HTTP methods, parameters, and schemas.</p> <p>Amazon Pinpoint is an Amazon Web Services service that you can use to engage with your recipients across multiple messaging channels. The Amazon Pinpoint SMS and Voice, version 2 API provides programmatic access to options that are unique to the SMS and voice channels and supplements the resources provided by the Amazon Pinpoint API.</p> <p>If you're new to Amazon Pinpoint, it's also helpful to review the <a href=\"https://docs.aws.amazon.com/pinpoint/latest/developerguide/welcome.html\"> Amazon Pinpoint Developer Guide</a>. The <i>Amazon Pinpoint Developer Guide</i> provides tutorials, code samples, and procedures that demonstrate how to use Amazon Pinpoint features programmatically and how to integrate Amazon Pinpoint functionality into mobile apps and other types of applications. The guide also provides key information, such as Amazon Pinpoint integration with other Amazon Web Services services, and the quotas that apply to use of the service.</p>
 *
 * The version of the OpenAPI document: 2022-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISendTextMessageRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISendTextMessageRequest::OAISendTextMessageRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISendTextMessageRequest::OAISendTextMessageRequest() {
    this->initializeModel();
}

OAISendTextMessageRequest::~OAISendTextMessageRequest() {}

void OAISendTextMessageRequest::initializeModel() {

    m_destination_phone_number_isSet = false;
    m_destination_phone_number_isValid = false;

    m_origination_identity_isSet = false;
    m_origination_identity_isValid = false;

    m_message_body_isSet = false;
    m_message_body_isValid = false;

    m_message_type_isSet = false;
    m_message_type_isValid = false;

    m_keyword_isSet = false;
    m_keyword_isValid = false;

    m_configuration_set_name_isSet = false;
    m_configuration_set_name_isValid = false;

    m_max_price_isSet = false;
    m_max_price_isValid = false;

    m_time_to_live_isSet = false;
    m_time_to_live_isValid = false;

    m_context_isSet = false;
    m_context_isValid = false;

    m_destination_country_parameters_isSet = false;
    m_destination_country_parameters_isValid = false;

    m_dry_run_isSet = false;
    m_dry_run_isValid = false;
}

void OAISendTextMessageRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISendTextMessageRequest::fromJsonObject(QJsonObject json) {

    m_destination_phone_number_isValid = ::OpenAPI::fromJsonValue(m_destination_phone_number, json[QString("DestinationPhoneNumber")]);
    m_destination_phone_number_isSet = !json[QString("DestinationPhoneNumber")].isNull() && m_destination_phone_number_isValid;

    m_origination_identity_isValid = ::OpenAPI::fromJsonValue(m_origination_identity, json[QString("OriginationIdentity")]);
    m_origination_identity_isSet = !json[QString("OriginationIdentity")].isNull() && m_origination_identity_isValid;

    m_message_body_isValid = ::OpenAPI::fromJsonValue(m_message_body, json[QString("MessageBody")]);
    m_message_body_isSet = !json[QString("MessageBody")].isNull() && m_message_body_isValid;

    m_message_type_isValid = ::OpenAPI::fromJsonValue(m_message_type, json[QString("MessageType")]);
    m_message_type_isSet = !json[QString("MessageType")].isNull() && m_message_type_isValid;

    m_keyword_isValid = ::OpenAPI::fromJsonValue(m_keyword, json[QString("Keyword")]);
    m_keyword_isSet = !json[QString("Keyword")].isNull() && m_keyword_isValid;

    m_configuration_set_name_isValid = ::OpenAPI::fromJsonValue(m_configuration_set_name, json[QString("ConfigurationSetName")]);
    m_configuration_set_name_isSet = !json[QString("ConfigurationSetName")].isNull() && m_configuration_set_name_isValid;

    m_max_price_isValid = ::OpenAPI::fromJsonValue(m_max_price, json[QString("MaxPrice")]);
    m_max_price_isSet = !json[QString("MaxPrice")].isNull() && m_max_price_isValid;

    m_time_to_live_isValid = ::OpenAPI::fromJsonValue(m_time_to_live, json[QString("TimeToLive")]);
    m_time_to_live_isSet = !json[QString("TimeToLive")].isNull() && m_time_to_live_isValid;

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("Context")]);
    m_context_isSet = !json[QString("Context")].isNull() && m_context_isValid;

    m_destination_country_parameters_isValid = ::OpenAPI::fromJsonValue(m_destination_country_parameters, json[QString("DestinationCountryParameters")]);
    m_destination_country_parameters_isSet = !json[QString("DestinationCountryParameters")].isNull() && m_destination_country_parameters_isValid;

    m_dry_run_isValid = ::OpenAPI::fromJsonValue(m_dry_run, json[QString("DryRun")]);
    m_dry_run_isSet = !json[QString("DryRun")].isNull() && m_dry_run_isValid;
}

QString OAISendTextMessageRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISendTextMessageRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_destination_phone_number_isSet) {
        obj.insert(QString("DestinationPhoneNumber"), ::OpenAPI::toJsonValue(m_destination_phone_number));
    }
    if (m_origination_identity_isSet) {
        obj.insert(QString("OriginationIdentity"), ::OpenAPI::toJsonValue(m_origination_identity));
    }
    if (m_message_body_isSet) {
        obj.insert(QString("MessageBody"), ::OpenAPI::toJsonValue(m_message_body));
    }
    if (m_message_type.isSet()) {
        obj.insert(QString("MessageType"), ::OpenAPI::toJsonValue(m_message_type));
    }
    if (m_keyword_isSet) {
        obj.insert(QString("Keyword"), ::OpenAPI::toJsonValue(m_keyword));
    }
    if (m_configuration_set_name_isSet) {
        obj.insert(QString("ConfigurationSetName"), ::OpenAPI::toJsonValue(m_configuration_set_name));
    }
    if (m_max_price_isSet) {
        obj.insert(QString("MaxPrice"), ::OpenAPI::toJsonValue(m_max_price));
    }
    if (m_time_to_live_isSet) {
        obj.insert(QString("TimeToLive"), ::OpenAPI::toJsonValue(m_time_to_live));
    }
    if (m_context.isSet()) {
        obj.insert(QString("Context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_destination_country_parameters.isSet()) {
        obj.insert(QString("DestinationCountryParameters"), ::OpenAPI::toJsonValue(m_destination_country_parameters));
    }
    if (m_dry_run_isSet) {
        obj.insert(QString("DryRun"), ::OpenAPI::toJsonValue(m_dry_run));
    }
    return obj;
}

QString OAISendTextMessageRequest::getDestinationPhoneNumber() const {
    return m_destination_phone_number;
}
void OAISendTextMessageRequest::setDestinationPhoneNumber(const QString &destination_phone_number) {
    m_destination_phone_number = destination_phone_number;
    m_destination_phone_number_isSet = true;
}

bool OAISendTextMessageRequest::is_destination_phone_number_Set() const{
    return m_destination_phone_number_isSet;
}

bool OAISendTextMessageRequest::is_destination_phone_number_Valid() const{
    return m_destination_phone_number_isValid;
}

QString OAISendTextMessageRequest::getOriginationIdentity() const {
    return m_origination_identity;
}
void OAISendTextMessageRequest::setOriginationIdentity(const QString &origination_identity) {
    m_origination_identity = origination_identity;
    m_origination_identity_isSet = true;
}

bool OAISendTextMessageRequest::is_origination_identity_Set() const{
    return m_origination_identity_isSet;
}

bool OAISendTextMessageRequest::is_origination_identity_Valid() const{
    return m_origination_identity_isValid;
}

QString OAISendTextMessageRequest::getMessageBody() const {
    return m_message_body;
}
void OAISendTextMessageRequest::setMessageBody(const QString &message_body) {
    m_message_body = message_body;
    m_message_body_isSet = true;
}

bool OAISendTextMessageRequest::is_message_body_Set() const{
    return m_message_body_isSet;
}

bool OAISendTextMessageRequest::is_message_body_Valid() const{
    return m_message_body_isValid;
}

OAIMessageType OAISendTextMessageRequest::getMessageType() const {
    return m_message_type;
}
void OAISendTextMessageRequest::setMessageType(const OAIMessageType &message_type) {
    m_message_type = message_type;
    m_message_type_isSet = true;
}

bool OAISendTextMessageRequest::is_message_type_Set() const{
    return m_message_type_isSet;
}

bool OAISendTextMessageRequest::is_message_type_Valid() const{
    return m_message_type_isValid;
}

QString OAISendTextMessageRequest::getKeyword() const {
    return m_keyword;
}
void OAISendTextMessageRequest::setKeyword(const QString &keyword) {
    m_keyword = keyword;
    m_keyword_isSet = true;
}

bool OAISendTextMessageRequest::is_keyword_Set() const{
    return m_keyword_isSet;
}

bool OAISendTextMessageRequest::is_keyword_Valid() const{
    return m_keyword_isValid;
}

QString OAISendTextMessageRequest::getConfigurationSetName() const {
    return m_configuration_set_name;
}
void OAISendTextMessageRequest::setConfigurationSetName(const QString &configuration_set_name) {
    m_configuration_set_name = configuration_set_name;
    m_configuration_set_name_isSet = true;
}

bool OAISendTextMessageRequest::is_configuration_set_name_Set() const{
    return m_configuration_set_name_isSet;
}

bool OAISendTextMessageRequest::is_configuration_set_name_Valid() const{
    return m_configuration_set_name_isValid;
}

QString OAISendTextMessageRequest::getMaxPrice() const {
    return m_max_price;
}
void OAISendTextMessageRequest::setMaxPrice(const QString &max_price) {
    m_max_price = max_price;
    m_max_price_isSet = true;
}

bool OAISendTextMessageRequest::is_max_price_Set() const{
    return m_max_price_isSet;
}

bool OAISendTextMessageRequest::is_max_price_Valid() const{
    return m_max_price_isValid;
}

qint32 OAISendTextMessageRequest::getTimeToLive() const {
    return m_time_to_live;
}
void OAISendTextMessageRequest::setTimeToLive(const qint32 &time_to_live) {
    m_time_to_live = time_to_live;
    m_time_to_live_isSet = true;
}

bool OAISendTextMessageRequest::is_time_to_live_Set() const{
    return m_time_to_live_isSet;
}

bool OAISendTextMessageRequest::is_time_to_live_Valid() const{
    return m_time_to_live_isValid;
}

QMap OAISendTextMessageRequest::getContext() const {
    return m_context;
}
void OAISendTextMessageRequest::setContext(const QMap &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAISendTextMessageRequest::is_context_Set() const{
    return m_context_isSet;
}

bool OAISendTextMessageRequest::is_context_Valid() const{
    return m_context_isValid;
}

QMap OAISendTextMessageRequest::getDestinationCountryParameters() const {
    return m_destination_country_parameters;
}
void OAISendTextMessageRequest::setDestinationCountryParameters(const QMap &destination_country_parameters) {
    m_destination_country_parameters = destination_country_parameters;
    m_destination_country_parameters_isSet = true;
}

bool OAISendTextMessageRequest::is_destination_country_parameters_Set() const{
    return m_destination_country_parameters_isSet;
}

bool OAISendTextMessageRequest::is_destination_country_parameters_Valid() const{
    return m_destination_country_parameters_isValid;
}

bool OAISendTextMessageRequest::getDryRun() const {
    return m_dry_run;
}
void OAISendTextMessageRequest::setDryRun(const bool &dry_run) {
    m_dry_run = dry_run;
    m_dry_run_isSet = true;
}

bool OAISendTextMessageRequest::is_dry_run_Set() const{
    return m_dry_run_isSet;
}

bool OAISendTextMessageRequest::is_dry_run_Valid() const{
    return m_dry_run_isValid;
}

bool OAISendTextMessageRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destination_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origination_identity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_keyword_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration_set_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_to_live_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_country_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dry_run_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISendTextMessageRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_destination_phone_number_isValid && true;
}

} // namespace OpenAPI
