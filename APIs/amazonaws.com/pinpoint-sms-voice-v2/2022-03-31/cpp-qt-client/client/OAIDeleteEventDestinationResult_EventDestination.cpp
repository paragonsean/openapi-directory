/**
 * Amazon Pinpoint SMS Voice V2
 * <p>Welcome to the <i>Amazon Pinpoint SMS and Voice, version 2 API Reference</i>. This guide provides information about Amazon Pinpoint SMS and Voice, version 2 API resources, including supported HTTP methods, parameters, and schemas.</p> <p>Amazon Pinpoint is an Amazon Web Services service that you can use to engage with your recipients across multiple messaging channels. The Amazon Pinpoint SMS and Voice, version 2 API provides programmatic access to options that are unique to the SMS and voice channels and supplements the resources provided by the Amazon Pinpoint API.</p> <p>If you're new to Amazon Pinpoint, it's also helpful to review the <a href=\"https://docs.aws.amazon.com/pinpoint/latest/developerguide/welcome.html\"> Amazon Pinpoint Developer Guide</a>. The <i>Amazon Pinpoint Developer Guide</i> provides tutorials, code samples, and procedures that demonstrate how to use Amazon Pinpoint features programmatically and how to integrate Amazon Pinpoint functionality into mobile apps and other types of applications. The guide also provides key information, such as Amazon Pinpoint integration with other Amazon Web Services services, and the quotas that apply to use of the service.</p>
 *
 * The version of the OpenAPI document: 2022-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteEventDestinationResult_EventDestination.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteEventDestinationResult_EventDestination::OAIDeleteEventDestinationResult_EventDestination(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteEventDestinationResult_EventDestination::OAIDeleteEventDestinationResult_EventDestination() {
    this->initializeModel();
}

OAIDeleteEventDestinationResult_EventDestination::~OAIDeleteEventDestinationResult_EventDestination() {}

void OAIDeleteEventDestinationResult_EventDestination::initializeModel() {

    m_event_destination_name_isSet = false;
    m_event_destination_name_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_matching_event_types_isSet = false;
    m_matching_event_types_isValid = false;

    m_cloud_watch_logs_destination_isSet = false;
    m_cloud_watch_logs_destination_isValid = false;

    m_kinesis_firehose_destination_isSet = false;
    m_kinesis_firehose_destination_isValid = false;

    m_sns_destination_isSet = false;
    m_sns_destination_isValid = false;
}

void OAIDeleteEventDestinationResult_EventDestination::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteEventDestinationResult_EventDestination::fromJsonObject(QJsonObject json) {

    m_event_destination_name_isValid = ::OpenAPI::fromJsonValue(m_event_destination_name, json[QString("EventDestinationName")]);
    m_event_destination_name_isSet = !json[QString("EventDestinationName")].isNull() && m_event_destination_name_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("Enabled")]);
    m_enabled_isSet = !json[QString("Enabled")].isNull() && m_enabled_isValid;

    m_matching_event_types_isValid = ::OpenAPI::fromJsonValue(m_matching_event_types, json[QString("MatchingEventTypes")]);
    m_matching_event_types_isSet = !json[QString("MatchingEventTypes")].isNull() && m_matching_event_types_isValid;

    m_cloud_watch_logs_destination_isValid = ::OpenAPI::fromJsonValue(m_cloud_watch_logs_destination, json[QString("CloudWatchLogsDestination")]);
    m_cloud_watch_logs_destination_isSet = !json[QString("CloudWatchLogsDestination")].isNull() && m_cloud_watch_logs_destination_isValid;

    m_kinesis_firehose_destination_isValid = ::OpenAPI::fromJsonValue(m_kinesis_firehose_destination, json[QString("KinesisFirehoseDestination")]);
    m_kinesis_firehose_destination_isSet = !json[QString("KinesisFirehoseDestination")].isNull() && m_kinesis_firehose_destination_isValid;

    m_sns_destination_isValid = ::OpenAPI::fromJsonValue(m_sns_destination, json[QString("SnsDestination")]);
    m_sns_destination_isSet = !json[QString("SnsDestination")].isNull() && m_sns_destination_isValid;
}

QString OAIDeleteEventDestinationResult_EventDestination::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteEventDestinationResult_EventDestination::asJsonObject() const {
    QJsonObject obj;
    if (m_event_destination_name_isSet) {
        obj.insert(QString("EventDestinationName"), ::OpenAPI::toJsonValue(m_event_destination_name));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("Enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_matching_event_types.isSet()) {
        obj.insert(QString("MatchingEventTypes"), ::OpenAPI::toJsonValue(m_matching_event_types));
    }
    if (m_cloud_watch_logs_destination.isSet()) {
        obj.insert(QString("CloudWatchLogsDestination"), ::OpenAPI::toJsonValue(m_cloud_watch_logs_destination));
    }
    if (m_kinesis_firehose_destination.isSet()) {
        obj.insert(QString("KinesisFirehoseDestination"), ::OpenAPI::toJsonValue(m_kinesis_firehose_destination));
    }
    if (m_sns_destination.isSet()) {
        obj.insert(QString("SnsDestination"), ::OpenAPI::toJsonValue(m_sns_destination));
    }
    return obj;
}

QString OAIDeleteEventDestinationResult_EventDestination::getEventDestinationName() const {
    return m_event_destination_name;
}
void OAIDeleteEventDestinationResult_EventDestination::setEventDestinationName(const QString &event_destination_name) {
    m_event_destination_name = event_destination_name;
    m_event_destination_name_isSet = true;
}

bool OAIDeleteEventDestinationResult_EventDestination::is_event_destination_name_Set() const{
    return m_event_destination_name_isSet;
}

bool OAIDeleteEventDestinationResult_EventDestination::is_event_destination_name_Valid() const{
    return m_event_destination_name_isValid;
}

bool OAIDeleteEventDestinationResult_EventDestination::getEnabled() const {
    return m_enabled;
}
void OAIDeleteEventDestinationResult_EventDestination::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIDeleteEventDestinationResult_EventDestination::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIDeleteEventDestinationResult_EventDestination::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QList OAIDeleteEventDestinationResult_EventDestination::getMatchingEventTypes() const {
    return m_matching_event_types;
}
void OAIDeleteEventDestinationResult_EventDestination::setMatchingEventTypes(const QList &matching_event_types) {
    m_matching_event_types = matching_event_types;
    m_matching_event_types_isSet = true;
}

bool OAIDeleteEventDestinationResult_EventDestination::is_matching_event_types_Set() const{
    return m_matching_event_types_isSet;
}

bool OAIDeleteEventDestinationResult_EventDestination::is_matching_event_types_Valid() const{
    return m_matching_event_types_isValid;
}

OAIEventDestination_CloudWatchLogsDestination OAIDeleteEventDestinationResult_EventDestination::getCloudWatchLogsDestination() const {
    return m_cloud_watch_logs_destination;
}
void OAIDeleteEventDestinationResult_EventDestination::setCloudWatchLogsDestination(const OAIEventDestination_CloudWatchLogsDestination &cloud_watch_logs_destination) {
    m_cloud_watch_logs_destination = cloud_watch_logs_destination;
    m_cloud_watch_logs_destination_isSet = true;
}

bool OAIDeleteEventDestinationResult_EventDestination::is_cloud_watch_logs_destination_Set() const{
    return m_cloud_watch_logs_destination_isSet;
}

bool OAIDeleteEventDestinationResult_EventDestination::is_cloud_watch_logs_destination_Valid() const{
    return m_cloud_watch_logs_destination_isValid;
}

OAICreateEventDestinationRequest_KinesisFirehoseDestination OAIDeleteEventDestinationResult_EventDestination::getKinesisFirehoseDestination() const {
    return m_kinesis_firehose_destination;
}
void OAIDeleteEventDestinationResult_EventDestination::setKinesisFirehoseDestination(const OAICreateEventDestinationRequest_KinesisFirehoseDestination &kinesis_firehose_destination) {
    m_kinesis_firehose_destination = kinesis_firehose_destination;
    m_kinesis_firehose_destination_isSet = true;
}

bool OAIDeleteEventDestinationResult_EventDestination::is_kinesis_firehose_destination_Set() const{
    return m_kinesis_firehose_destination_isSet;
}

bool OAIDeleteEventDestinationResult_EventDestination::is_kinesis_firehose_destination_Valid() const{
    return m_kinesis_firehose_destination_isValid;
}

OAIEventDestination_SnsDestination OAIDeleteEventDestinationResult_EventDestination::getSnsDestination() const {
    return m_sns_destination;
}
void OAIDeleteEventDestinationResult_EventDestination::setSnsDestination(const OAIEventDestination_SnsDestination &sns_destination) {
    m_sns_destination = sns_destination;
    m_sns_destination_isSet = true;
}

bool OAIDeleteEventDestinationResult_EventDestination::is_sns_destination_Set() const{
    return m_sns_destination_isSet;
}

bool OAIDeleteEventDestinationResult_EventDestination::is_sns_destination_Valid() const{
    return m_sns_destination_isValid;
}

bool OAIDeleteEventDestinationResult_EventDestination::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_event_destination_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_matching_event_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloud_watch_logs_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kinesis_firehose_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sns_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteEventDestinationResult_EventDestination::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_event_destination_name_isValid && m_enabled_isValid && m_matching_event_types_isValid && true;
}

} // namespace OpenAPI
