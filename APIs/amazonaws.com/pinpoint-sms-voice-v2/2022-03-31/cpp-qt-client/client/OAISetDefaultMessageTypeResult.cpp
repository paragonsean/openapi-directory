/**
 * Amazon Pinpoint SMS Voice V2
 * <p>Welcome to the <i>Amazon Pinpoint SMS and Voice, version 2 API Reference</i>. This guide provides information about Amazon Pinpoint SMS and Voice, version 2 API resources, including supported HTTP methods, parameters, and schemas.</p> <p>Amazon Pinpoint is an Amazon Web Services service that you can use to engage with your recipients across multiple messaging channels. The Amazon Pinpoint SMS and Voice, version 2 API provides programmatic access to options that are unique to the SMS and voice channels and supplements the resources provided by the Amazon Pinpoint API.</p> <p>If you're new to Amazon Pinpoint, it's also helpful to review the <a href=\"https://docs.aws.amazon.com/pinpoint/latest/developerguide/welcome.html\"> Amazon Pinpoint Developer Guide</a>. The <i>Amazon Pinpoint Developer Guide</i> provides tutorials, code samples, and procedures that demonstrate how to use Amazon Pinpoint features programmatically and how to integrate Amazon Pinpoint functionality into mobile apps and other types of applications. The guide also provides key information, such as Amazon Pinpoint integration with other Amazon Web Services services, and the quotas that apply to use of the service.</p>
 *
 * The version of the OpenAPI document: 2022-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISetDefaultMessageTypeResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISetDefaultMessageTypeResult::OAISetDefaultMessageTypeResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISetDefaultMessageTypeResult::OAISetDefaultMessageTypeResult() {
    this->initializeModel();
}

OAISetDefaultMessageTypeResult::~OAISetDefaultMessageTypeResult() {}

void OAISetDefaultMessageTypeResult::initializeModel() {

    m_configuration_set_arn_isSet = false;
    m_configuration_set_arn_isValid = false;

    m_configuration_set_name_isSet = false;
    m_configuration_set_name_isValid = false;

    m_message_type_isSet = false;
    m_message_type_isValid = false;
}

void OAISetDefaultMessageTypeResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISetDefaultMessageTypeResult::fromJsonObject(QJsonObject json) {

    m_configuration_set_arn_isValid = ::OpenAPI::fromJsonValue(m_configuration_set_arn, json[QString("ConfigurationSetArn")]);
    m_configuration_set_arn_isSet = !json[QString("ConfigurationSetArn")].isNull() && m_configuration_set_arn_isValid;

    m_configuration_set_name_isValid = ::OpenAPI::fromJsonValue(m_configuration_set_name, json[QString("ConfigurationSetName")]);
    m_configuration_set_name_isSet = !json[QString("ConfigurationSetName")].isNull() && m_configuration_set_name_isValid;

    m_message_type_isValid = ::OpenAPI::fromJsonValue(m_message_type, json[QString("MessageType")]);
    m_message_type_isSet = !json[QString("MessageType")].isNull() && m_message_type_isValid;
}

QString OAISetDefaultMessageTypeResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISetDefaultMessageTypeResult::asJsonObject() const {
    QJsonObject obj;
    if (m_configuration_set_arn_isSet) {
        obj.insert(QString("ConfigurationSetArn"), ::OpenAPI::toJsonValue(m_configuration_set_arn));
    }
    if (m_configuration_set_name_isSet) {
        obj.insert(QString("ConfigurationSetName"), ::OpenAPI::toJsonValue(m_configuration_set_name));
    }
    if (m_message_type.isSet()) {
        obj.insert(QString("MessageType"), ::OpenAPI::toJsonValue(m_message_type));
    }
    return obj;
}

QString OAISetDefaultMessageTypeResult::getConfigurationSetArn() const {
    return m_configuration_set_arn;
}
void OAISetDefaultMessageTypeResult::setConfigurationSetArn(const QString &configuration_set_arn) {
    m_configuration_set_arn = configuration_set_arn;
    m_configuration_set_arn_isSet = true;
}

bool OAISetDefaultMessageTypeResult::is_configuration_set_arn_Set() const{
    return m_configuration_set_arn_isSet;
}

bool OAISetDefaultMessageTypeResult::is_configuration_set_arn_Valid() const{
    return m_configuration_set_arn_isValid;
}

QString OAISetDefaultMessageTypeResult::getConfigurationSetName() const {
    return m_configuration_set_name;
}
void OAISetDefaultMessageTypeResult::setConfigurationSetName(const QString &configuration_set_name) {
    m_configuration_set_name = configuration_set_name;
    m_configuration_set_name_isSet = true;
}

bool OAISetDefaultMessageTypeResult::is_configuration_set_name_Set() const{
    return m_configuration_set_name_isSet;
}

bool OAISetDefaultMessageTypeResult::is_configuration_set_name_Valid() const{
    return m_configuration_set_name_isValid;
}

OAIMessageType OAISetDefaultMessageTypeResult::getMessageType() const {
    return m_message_type;
}
void OAISetDefaultMessageTypeResult::setMessageType(const OAIMessageType &message_type) {
    m_message_type = message_type;
    m_message_type_isSet = true;
}

bool OAISetDefaultMessageTypeResult::is_message_type_Set() const{
    return m_message_type_isSet;
}

bool OAISetDefaultMessageTypeResult::is_message_type_Valid() const{
    return m_message_type_isValid;
}

bool OAISetDefaultMessageTypeResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_configuration_set_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration_set_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISetDefaultMessageTypeResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
