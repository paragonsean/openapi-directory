/**
 * Amazon Pinpoint SMS Voice V2
 * <p>Welcome to the <i>Amazon Pinpoint SMS and Voice, version 2 API Reference</i>. This guide provides information about Amazon Pinpoint SMS and Voice, version 2 API resources, including supported HTTP methods, parameters, and schemas.</p> <p>Amazon Pinpoint is an Amazon Web Services service that you can use to engage with your recipients across multiple messaging channels. The Amazon Pinpoint SMS and Voice, version 2 API provides programmatic access to options that are unique to the SMS and voice channels and supplements the resources provided by the Amazon Pinpoint API.</p> <p>If you're new to Amazon Pinpoint, it's also helpful to review the <a href=\"https://docs.aws.amazon.com/pinpoint/latest/developerguide/welcome.html\"> Amazon Pinpoint Developer Guide</a>. The <i>Amazon Pinpoint Developer Guide</i> provides tutorials, code samples, and procedures that demonstrate how to use Amazon Pinpoint features programmatically and how to integrate Amazon Pinpoint functionality into mobile apps and other types of applications. The guide also provides key information, such as Amazon Pinpoint integration with other Amazon Web Services services, and the quotas that apply to use of the service.</p>
 *
 * The version of the OpenAPI document: 2022-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISendVoiceMessageRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISendVoiceMessageRequest::OAISendVoiceMessageRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISendVoiceMessageRequest::OAISendVoiceMessageRequest() {
    this->initializeModel();
}

OAISendVoiceMessageRequest::~OAISendVoiceMessageRequest() {}

void OAISendVoiceMessageRequest::initializeModel() {

    m_destination_phone_number_isSet = false;
    m_destination_phone_number_isValid = false;

    m_origination_identity_isSet = false;
    m_origination_identity_isValid = false;

    m_message_body_isSet = false;
    m_message_body_isValid = false;

    m_message_body_text_type_isSet = false;
    m_message_body_text_type_isValid = false;

    m_voice_id_isSet = false;
    m_voice_id_isValid = false;

    m_configuration_set_name_isSet = false;
    m_configuration_set_name_isValid = false;

    m_max_price_per_minute_isSet = false;
    m_max_price_per_minute_isValid = false;

    m_time_to_live_isSet = false;
    m_time_to_live_isValid = false;

    m_context_isSet = false;
    m_context_isValid = false;

    m_dry_run_isSet = false;
    m_dry_run_isValid = false;
}

void OAISendVoiceMessageRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISendVoiceMessageRequest::fromJsonObject(QJsonObject json) {

    m_destination_phone_number_isValid = ::OpenAPI::fromJsonValue(m_destination_phone_number, json[QString("DestinationPhoneNumber")]);
    m_destination_phone_number_isSet = !json[QString("DestinationPhoneNumber")].isNull() && m_destination_phone_number_isValid;

    m_origination_identity_isValid = ::OpenAPI::fromJsonValue(m_origination_identity, json[QString("OriginationIdentity")]);
    m_origination_identity_isSet = !json[QString("OriginationIdentity")].isNull() && m_origination_identity_isValid;

    m_message_body_isValid = ::OpenAPI::fromJsonValue(m_message_body, json[QString("MessageBody")]);
    m_message_body_isSet = !json[QString("MessageBody")].isNull() && m_message_body_isValid;

    m_message_body_text_type_isValid = ::OpenAPI::fromJsonValue(m_message_body_text_type, json[QString("MessageBodyTextType")]);
    m_message_body_text_type_isSet = !json[QString("MessageBodyTextType")].isNull() && m_message_body_text_type_isValid;

    m_voice_id_isValid = ::OpenAPI::fromJsonValue(m_voice_id, json[QString("VoiceId")]);
    m_voice_id_isSet = !json[QString("VoiceId")].isNull() && m_voice_id_isValid;

    m_configuration_set_name_isValid = ::OpenAPI::fromJsonValue(m_configuration_set_name, json[QString("ConfigurationSetName")]);
    m_configuration_set_name_isSet = !json[QString("ConfigurationSetName")].isNull() && m_configuration_set_name_isValid;

    m_max_price_per_minute_isValid = ::OpenAPI::fromJsonValue(m_max_price_per_minute, json[QString("MaxPricePerMinute")]);
    m_max_price_per_minute_isSet = !json[QString("MaxPricePerMinute")].isNull() && m_max_price_per_minute_isValid;

    m_time_to_live_isValid = ::OpenAPI::fromJsonValue(m_time_to_live, json[QString("TimeToLive")]);
    m_time_to_live_isSet = !json[QString("TimeToLive")].isNull() && m_time_to_live_isValid;

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("Context")]);
    m_context_isSet = !json[QString("Context")].isNull() && m_context_isValid;

    m_dry_run_isValid = ::OpenAPI::fromJsonValue(m_dry_run, json[QString("DryRun")]);
    m_dry_run_isSet = !json[QString("DryRun")].isNull() && m_dry_run_isValid;
}

QString OAISendVoiceMessageRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISendVoiceMessageRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_destination_phone_number_isSet) {
        obj.insert(QString("DestinationPhoneNumber"), ::OpenAPI::toJsonValue(m_destination_phone_number));
    }
    if (m_origination_identity_isSet) {
        obj.insert(QString("OriginationIdentity"), ::OpenAPI::toJsonValue(m_origination_identity));
    }
    if (m_message_body_isSet) {
        obj.insert(QString("MessageBody"), ::OpenAPI::toJsonValue(m_message_body));
    }
    if (m_message_body_text_type.isSet()) {
        obj.insert(QString("MessageBodyTextType"), ::OpenAPI::toJsonValue(m_message_body_text_type));
    }
    if (m_voice_id.isSet()) {
        obj.insert(QString("VoiceId"), ::OpenAPI::toJsonValue(m_voice_id));
    }
    if (m_configuration_set_name_isSet) {
        obj.insert(QString("ConfigurationSetName"), ::OpenAPI::toJsonValue(m_configuration_set_name));
    }
    if (m_max_price_per_minute_isSet) {
        obj.insert(QString("MaxPricePerMinute"), ::OpenAPI::toJsonValue(m_max_price_per_minute));
    }
    if (m_time_to_live_isSet) {
        obj.insert(QString("TimeToLive"), ::OpenAPI::toJsonValue(m_time_to_live));
    }
    if (m_context.isSet()) {
        obj.insert(QString("Context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_dry_run_isSet) {
        obj.insert(QString("DryRun"), ::OpenAPI::toJsonValue(m_dry_run));
    }
    return obj;
}

QString OAISendVoiceMessageRequest::getDestinationPhoneNumber() const {
    return m_destination_phone_number;
}
void OAISendVoiceMessageRequest::setDestinationPhoneNumber(const QString &destination_phone_number) {
    m_destination_phone_number = destination_phone_number;
    m_destination_phone_number_isSet = true;
}

bool OAISendVoiceMessageRequest::is_destination_phone_number_Set() const{
    return m_destination_phone_number_isSet;
}

bool OAISendVoiceMessageRequest::is_destination_phone_number_Valid() const{
    return m_destination_phone_number_isValid;
}

QString OAISendVoiceMessageRequest::getOriginationIdentity() const {
    return m_origination_identity;
}
void OAISendVoiceMessageRequest::setOriginationIdentity(const QString &origination_identity) {
    m_origination_identity = origination_identity;
    m_origination_identity_isSet = true;
}

bool OAISendVoiceMessageRequest::is_origination_identity_Set() const{
    return m_origination_identity_isSet;
}

bool OAISendVoiceMessageRequest::is_origination_identity_Valid() const{
    return m_origination_identity_isValid;
}

QString OAISendVoiceMessageRequest::getMessageBody() const {
    return m_message_body;
}
void OAISendVoiceMessageRequest::setMessageBody(const QString &message_body) {
    m_message_body = message_body;
    m_message_body_isSet = true;
}

bool OAISendVoiceMessageRequest::is_message_body_Set() const{
    return m_message_body_isSet;
}

bool OAISendVoiceMessageRequest::is_message_body_Valid() const{
    return m_message_body_isValid;
}

OAIVoiceMessageBodyTextType OAISendVoiceMessageRequest::getMessageBodyTextType() const {
    return m_message_body_text_type;
}
void OAISendVoiceMessageRequest::setMessageBodyTextType(const OAIVoiceMessageBodyTextType &message_body_text_type) {
    m_message_body_text_type = message_body_text_type;
    m_message_body_text_type_isSet = true;
}

bool OAISendVoiceMessageRequest::is_message_body_text_type_Set() const{
    return m_message_body_text_type_isSet;
}

bool OAISendVoiceMessageRequest::is_message_body_text_type_Valid() const{
    return m_message_body_text_type_isValid;
}

OAIVoiceId OAISendVoiceMessageRequest::getVoiceId() const {
    return m_voice_id;
}
void OAISendVoiceMessageRequest::setVoiceId(const OAIVoiceId &voice_id) {
    m_voice_id = voice_id;
    m_voice_id_isSet = true;
}

bool OAISendVoiceMessageRequest::is_voice_id_Set() const{
    return m_voice_id_isSet;
}

bool OAISendVoiceMessageRequest::is_voice_id_Valid() const{
    return m_voice_id_isValid;
}

QString OAISendVoiceMessageRequest::getConfigurationSetName() const {
    return m_configuration_set_name;
}
void OAISendVoiceMessageRequest::setConfigurationSetName(const QString &configuration_set_name) {
    m_configuration_set_name = configuration_set_name;
    m_configuration_set_name_isSet = true;
}

bool OAISendVoiceMessageRequest::is_configuration_set_name_Set() const{
    return m_configuration_set_name_isSet;
}

bool OAISendVoiceMessageRequest::is_configuration_set_name_Valid() const{
    return m_configuration_set_name_isValid;
}

QString OAISendVoiceMessageRequest::getMaxPricePerMinute() const {
    return m_max_price_per_minute;
}
void OAISendVoiceMessageRequest::setMaxPricePerMinute(const QString &max_price_per_minute) {
    m_max_price_per_minute = max_price_per_minute;
    m_max_price_per_minute_isSet = true;
}

bool OAISendVoiceMessageRequest::is_max_price_per_minute_Set() const{
    return m_max_price_per_minute_isSet;
}

bool OAISendVoiceMessageRequest::is_max_price_per_minute_Valid() const{
    return m_max_price_per_minute_isValid;
}

qint32 OAISendVoiceMessageRequest::getTimeToLive() const {
    return m_time_to_live;
}
void OAISendVoiceMessageRequest::setTimeToLive(const qint32 &time_to_live) {
    m_time_to_live = time_to_live;
    m_time_to_live_isSet = true;
}

bool OAISendVoiceMessageRequest::is_time_to_live_Set() const{
    return m_time_to_live_isSet;
}

bool OAISendVoiceMessageRequest::is_time_to_live_Valid() const{
    return m_time_to_live_isValid;
}

QMap OAISendVoiceMessageRequest::getContext() const {
    return m_context;
}
void OAISendVoiceMessageRequest::setContext(const QMap &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAISendVoiceMessageRequest::is_context_Set() const{
    return m_context_isSet;
}

bool OAISendVoiceMessageRequest::is_context_Valid() const{
    return m_context_isValid;
}

bool OAISendVoiceMessageRequest::getDryRun() const {
    return m_dry_run;
}
void OAISendVoiceMessageRequest::setDryRun(const bool &dry_run) {
    m_dry_run = dry_run;
    m_dry_run_isSet = true;
}

bool OAISendVoiceMessageRequest::is_dry_run_Set() const{
    return m_dry_run_isSet;
}

bool OAISendVoiceMessageRequest::is_dry_run_Valid() const{
    return m_dry_run_isValid;
}

bool OAISendVoiceMessageRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destination_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origination_identity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_body_text_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_voice_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration_set_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_price_per_minute_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_to_live_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dry_run_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISendVoiceMessageRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_destination_phone_number_isValid && m_origination_identity_isValid && true;
}

} // namespace OpenAPI
