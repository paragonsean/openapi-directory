/**
 * Amazon Pinpoint SMS Voice V2
 * <p>Welcome to the <i>Amazon Pinpoint SMS and Voice, version 2 API Reference</i>. This guide provides information about Amazon Pinpoint SMS and Voice, version 2 API resources, including supported HTTP methods, parameters, and schemas.</p> <p>Amazon Pinpoint is an Amazon Web Services service that you can use to engage with your recipients across multiple messaging channels. The Amazon Pinpoint SMS and Voice, version 2 API provides programmatic access to options that are unique to the SMS and voice channels and supplements the resources provided by the Amazon Pinpoint API.</p> <p>If you're new to Amazon Pinpoint, it's also helpful to review the <a href=\"https://docs.aws.amazon.com/pinpoint/latest/developerguide/welcome.html\"> Amazon Pinpoint Developer Guide</a>. The <i>Amazon Pinpoint Developer Guide</i> provides tutorials, code samples, and procedures that demonstrate how to use Amazon Pinpoint features programmatically and how to integrate Amazon Pinpoint functionality into mobile apps and other types of applications. The guide also provides key information, such as Amazon Pinpoint integration with other Amazon Web Services services, and the quotas that apply to use of the service.</p>
 *
 * The version of the OpenAPI document: 2022-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRequestPhoneNumberRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRequestPhoneNumberRequest::OAIRequestPhoneNumberRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRequestPhoneNumberRequest::OAIRequestPhoneNumberRequest() {
    this->initializeModel();
}

OAIRequestPhoneNumberRequest::~OAIRequestPhoneNumberRequest() {}

void OAIRequestPhoneNumberRequest::initializeModel() {

    m_iso_country_code_isSet = false;
    m_iso_country_code_isValid = false;

    m_message_type_isSet = false;
    m_message_type_isValid = false;

    m_number_capabilities_isSet = false;
    m_number_capabilities_isValid = false;

    m_number_type_isSet = false;
    m_number_type_isValid = false;

    m_opt_out_list_name_isSet = false;
    m_opt_out_list_name_isValid = false;

    m_pool_id_isSet = false;
    m_pool_id_isValid = false;

    m_registration_id_isSet = false;
    m_registration_id_isValid = false;

    m_deletion_protection_enabled_isSet = false;
    m_deletion_protection_enabled_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;
}

void OAIRequestPhoneNumberRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRequestPhoneNumberRequest::fromJsonObject(QJsonObject json) {

    m_iso_country_code_isValid = ::OpenAPI::fromJsonValue(m_iso_country_code, json[QString("IsoCountryCode")]);
    m_iso_country_code_isSet = !json[QString("IsoCountryCode")].isNull() && m_iso_country_code_isValid;

    m_message_type_isValid = ::OpenAPI::fromJsonValue(m_message_type, json[QString("MessageType")]);
    m_message_type_isSet = !json[QString("MessageType")].isNull() && m_message_type_isValid;

    m_number_capabilities_isValid = ::OpenAPI::fromJsonValue(m_number_capabilities, json[QString("NumberCapabilities")]);
    m_number_capabilities_isSet = !json[QString("NumberCapabilities")].isNull() && m_number_capabilities_isValid;

    m_number_type_isValid = ::OpenAPI::fromJsonValue(m_number_type, json[QString("NumberType")]);
    m_number_type_isSet = !json[QString("NumberType")].isNull() && m_number_type_isValid;

    m_opt_out_list_name_isValid = ::OpenAPI::fromJsonValue(m_opt_out_list_name, json[QString("OptOutListName")]);
    m_opt_out_list_name_isSet = !json[QString("OptOutListName")].isNull() && m_opt_out_list_name_isValid;

    m_pool_id_isValid = ::OpenAPI::fromJsonValue(m_pool_id, json[QString("PoolId")]);
    m_pool_id_isSet = !json[QString("PoolId")].isNull() && m_pool_id_isValid;

    m_registration_id_isValid = ::OpenAPI::fromJsonValue(m_registration_id, json[QString("RegistrationId")]);
    m_registration_id_isSet = !json[QString("RegistrationId")].isNull() && m_registration_id_isValid;

    m_deletion_protection_enabled_isValid = ::OpenAPI::fromJsonValue(m_deletion_protection_enabled, json[QString("DeletionProtectionEnabled")]);
    m_deletion_protection_enabled_isSet = !json[QString("DeletionProtectionEnabled")].isNull() && m_deletion_protection_enabled_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("ClientToken")]);
    m_client_token_isSet = !json[QString("ClientToken")].isNull() && m_client_token_isValid;
}

QString OAIRequestPhoneNumberRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRequestPhoneNumberRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_iso_country_code_isSet) {
        obj.insert(QString("IsoCountryCode"), ::OpenAPI::toJsonValue(m_iso_country_code));
    }
    if (m_message_type.isSet()) {
        obj.insert(QString("MessageType"), ::OpenAPI::toJsonValue(m_message_type));
    }
    if (m_number_capabilities.isSet()) {
        obj.insert(QString("NumberCapabilities"), ::OpenAPI::toJsonValue(m_number_capabilities));
    }
    if (m_number_type.isSet()) {
        obj.insert(QString("NumberType"), ::OpenAPI::toJsonValue(m_number_type));
    }
    if (m_opt_out_list_name_isSet) {
        obj.insert(QString("OptOutListName"), ::OpenAPI::toJsonValue(m_opt_out_list_name));
    }
    if (m_pool_id_isSet) {
        obj.insert(QString("PoolId"), ::OpenAPI::toJsonValue(m_pool_id));
    }
    if (m_registration_id_isSet) {
        obj.insert(QString("RegistrationId"), ::OpenAPI::toJsonValue(m_registration_id));
    }
    if (m_deletion_protection_enabled_isSet) {
        obj.insert(QString("DeletionProtectionEnabled"), ::OpenAPI::toJsonValue(m_deletion_protection_enabled));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("ClientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    return obj;
}

QString OAIRequestPhoneNumberRequest::getIsoCountryCode() const {
    return m_iso_country_code;
}
void OAIRequestPhoneNumberRequest::setIsoCountryCode(const QString &iso_country_code) {
    m_iso_country_code = iso_country_code;
    m_iso_country_code_isSet = true;
}

bool OAIRequestPhoneNumberRequest::is_iso_country_code_Set() const{
    return m_iso_country_code_isSet;
}

bool OAIRequestPhoneNumberRequest::is_iso_country_code_Valid() const{
    return m_iso_country_code_isValid;
}

OAIMessageType OAIRequestPhoneNumberRequest::getMessageType() const {
    return m_message_type;
}
void OAIRequestPhoneNumberRequest::setMessageType(const OAIMessageType &message_type) {
    m_message_type = message_type;
    m_message_type_isSet = true;
}

bool OAIRequestPhoneNumberRequest::is_message_type_Set() const{
    return m_message_type_isSet;
}

bool OAIRequestPhoneNumberRequest::is_message_type_Valid() const{
    return m_message_type_isValid;
}

QList OAIRequestPhoneNumberRequest::getNumberCapabilities() const {
    return m_number_capabilities;
}
void OAIRequestPhoneNumberRequest::setNumberCapabilities(const QList &number_capabilities) {
    m_number_capabilities = number_capabilities;
    m_number_capabilities_isSet = true;
}

bool OAIRequestPhoneNumberRequest::is_number_capabilities_Set() const{
    return m_number_capabilities_isSet;
}

bool OAIRequestPhoneNumberRequest::is_number_capabilities_Valid() const{
    return m_number_capabilities_isValid;
}

OAIRequestableNumberType OAIRequestPhoneNumberRequest::getNumberType() const {
    return m_number_type;
}
void OAIRequestPhoneNumberRequest::setNumberType(const OAIRequestableNumberType &number_type) {
    m_number_type = number_type;
    m_number_type_isSet = true;
}

bool OAIRequestPhoneNumberRequest::is_number_type_Set() const{
    return m_number_type_isSet;
}

bool OAIRequestPhoneNumberRequest::is_number_type_Valid() const{
    return m_number_type_isValid;
}

QString OAIRequestPhoneNumberRequest::getOptOutListName() const {
    return m_opt_out_list_name;
}
void OAIRequestPhoneNumberRequest::setOptOutListName(const QString &opt_out_list_name) {
    m_opt_out_list_name = opt_out_list_name;
    m_opt_out_list_name_isSet = true;
}

bool OAIRequestPhoneNumberRequest::is_opt_out_list_name_Set() const{
    return m_opt_out_list_name_isSet;
}

bool OAIRequestPhoneNumberRequest::is_opt_out_list_name_Valid() const{
    return m_opt_out_list_name_isValid;
}

QString OAIRequestPhoneNumberRequest::getPoolId() const {
    return m_pool_id;
}
void OAIRequestPhoneNumberRequest::setPoolId(const QString &pool_id) {
    m_pool_id = pool_id;
    m_pool_id_isSet = true;
}

bool OAIRequestPhoneNumberRequest::is_pool_id_Set() const{
    return m_pool_id_isSet;
}

bool OAIRequestPhoneNumberRequest::is_pool_id_Valid() const{
    return m_pool_id_isValid;
}

QString OAIRequestPhoneNumberRequest::getRegistrationId() const {
    return m_registration_id;
}
void OAIRequestPhoneNumberRequest::setRegistrationId(const QString &registration_id) {
    m_registration_id = registration_id;
    m_registration_id_isSet = true;
}

bool OAIRequestPhoneNumberRequest::is_registration_id_Set() const{
    return m_registration_id_isSet;
}

bool OAIRequestPhoneNumberRequest::is_registration_id_Valid() const{
    return m_registration_id_isValid;
}

bool OAIRequestPhoneNumberRequest::getDeletionProtectionEnabled() const {
    return m_deletion_protection_enabled;
}
void OAIRequestPhoneNumberRequest::setDeletionProtectionEnabled(const bool &deletion_protection_enabled) {
    m_deletion_protection_enabled = deletion_protection_enabled;
    m_deletion_protection_enabled_isSet = true;
}

bool OAIRequestPhoneNumberRequest::is_deletion_protection_enabled_Set() const{
    return m_deletion_protection_enabled_isSet;
}

bool OAIRequestPhoneNumberRequest::is_deletion_protection_enabled_Valid() const{
    return m_deletion_protection_enabled_isValid;
}

QList OAIRequestPhoneNumberRequest::getTags() const {
    return m_tags;
}
void OAIRequestPhoneNumberRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIRequestPhoneNumberRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIRequestPhoneNumberRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIRequestPhoneNumberRequest::getClientToken() const {
    return m_client_token;
}
void OAIRequestPhoneNumberRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAIRequestPhoneNumberRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAIRequestPhoneNumberRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

bool OAIRequestPhoneNumberRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_iso_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_capabilities.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_opt_out_list_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pool_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deletion_protection_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRequestPhoneNumberRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_iso_country_code_isValid && m_message_type_isValid && m_number_capabilities_isValid && m_number_type_isValid && true;
}

} // namespace OpenAPI
