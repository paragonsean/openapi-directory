/**
 * Amazon Pinpoint SMS Voice V2
 * <p>Welcome to the <i>Amazon Pinpoint SMS and Voice, version 2 API Reference</i>. This guide provides information about Amazon Pinpoint SMS and Voice, version 2 API resources, including supported HTTP methods, parameters, and schemas.</p> <p>Amazon Pinpoint is an Amazon Web Services service that you can use to engage with your recipients across multiple messaging channels. The Amazon Pinpoint SMS and Voice, version 2 API provides programmatic access to options that are unique to the SMS and voice channels and supplements the resources provided by the Amazon Pinpoint API.</p> <p>If you're new to Amazon Pinpoint, it's also helpful to review the <a href=\"https://docs.aws.amazon.com/pinpoint/latest/developerguide/welcome.html\"> Amazon Pinpoint Developer Guide</a>. The <i>Amazon Pinpoint Developer Guide</i> provides tutorials, code samples, and procedures that demonstrate how to use Amazon Pinpoint features programmatically and how to integrate Amazon Pinpoint functionality into mobile apps and other types of applications. The guide also provides key information, such as Amazon Pinpoint integration with other Amazon Web Services services, and the quotas that apply to use of the service.</p>
 *
 * The version of the OpenAPI document: 2022-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreatePoolRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreatePoolRequest::OAICreatePoolRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreatePoolRequest::OAICreatePoolRequest() {
    this->initializeModel();
}

OAICreatePoolRequest::~OAICreatePoolRequest() {}

void OAICreatePoolRequest::initializeModel() {

    m_origination_identity_isSet = false;
    m_origination_identity_isValid = false;

    m_iso_country_code_isSet = false;
    m_iso_country_code_isValid = false;

    m_message_type_isSet = false;
    m_message_type_isValid = false;

    m_deletion_protection_enabled_isSet = false;
    m_deletion_protection_enabled_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;
}

void OAICreatePoolRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreatePoolRequest::fromJsonObject(QJsonObject json) {

    m_origination_identity_isValid = ::OpenAPI::fromJsonValue(m_origination_identity, json[QString("OriginationIdentity")]);
    m_origination_identity_isSet = !json[QString("OriginationIdentity")].isNull() && m_origination_identity_isValid;

    m_iso_country_code_isValid = ::OpenAPI::fromJsonValue(m_iso_country_code, json[QString("IsoCountryCode")]);
    m_iso_country_code_isSet = !json[QString("IsoCountryCode")].isNull() && m_iso_country_code_isValid;

    m_message_type_isValid = ::OpenAPI::fromJsonValue(m_message_type, json[QString("MessageType")]);
    m_message_type_isSet = !json[QString("MessageType")].isNull() && m_message_type_isValid;

    m_deletion_protection_enabled_isValid = ::OpenAPI::fromJsonValue(m_deletion_protection_enabled, json[QString("DeletionProtectionEnabled")]);
    m_deletion_protection_enabled_isSet = !json[QString("DeletionProtectionEnabled")].isNull() && m_deletion_protection_enabled_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("ClientToken")]);
    m_client_token_isSet = !json[QString("ClientToken")].isNull() && m_client_token_isValid;
}

QString OAICreatePoolRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreatePoolRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_origination_identity_isSet) {
        obj.insert(QString("OriginationIdentity"), ::OpenAPI::toJsonValue(m_origination_identity));
    }
    if (m_iso_country_code_isSet) {
        obj.insert(QString("IsoCountryCode"), ::OpenAPI::toJsonValue(m_iso_country_code));
    }
    if (m_message_type.isSet()) {
        obj.insert(QString("MessageType"), ::OpenAPI::toJsonValue(m_message_type));
    }
    if (m_deletion_protection_enabled_isSet) {
        obj.insert(QString("DeletionProtectionEnabled"), ::OpenAPI::toJsonValue(m_deletion_protection_enabled));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("ClientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    return obj;
}

QString OAICreatePoolRequest::getOriginationIdentity() const {
    return m_origination_identity;
}
void OAICreatePoolRequest::setOriginationIdentity(const QString &origination_identity) {
    m_origination_identity = origination_identity;
    m_origination_identity_isSet = true;
}

bool OAICreatePoolRequest::is_origination_identity_Set() const{
    return m_origination_identity_isSet;
}

bool OAICreatePoolRequest::is_origination_identity_Valid() const{
    return m_origination_identity_isValid;
}

QString OAICreatePoolRequest::getIsoCountryCode() const {
    return m_iso_country_code;
}
void OAICreatePoolRequest::setIsoCountryCode(const QString &iso_country_code) {
    m_iso_country_code = iso_country_code;
    m_iso_country_code_isSet = true;
}

bool OAICreatePoolRequest::is_iso_country_code_Set() const{
    return m_iso_country_code_isSet;
}

bool OAICreatePoolRequest::is_iso_country_code_Valid() const{
    return m_iso_country_code_isValid;
}

OAIMessageType OAICreatePoolRequest::getMessageType() const {
    return m_message_type;
}
void OAICreatePoolRequest::setMessageType(const OAIMessageType &message_type) {
    m_message_type = message_type;
    m_message_type_isSet = true;
}

bool OAICreatePoolRequest::is_message_type_Set() const{
    return m_message_type_isSet;
}

bool OAICreatePoolRequest::is_message_type_Valid() const{
    return m_message_type_isValid;
}

bool OAICreatePoolRequest::getDeletionProtectionEnabled() const {
    return m_deletion_protection_enabled;
}
void OAICreatePoolRequest::setDeletionProtectionEnabled(const bool &deletion_protection_enabled) {
    m_deletion_protection_enabled = deletion_protection_enabled;
    m_deletion_protection_enabled_isSet = true;
}

bool OAICreatePoolRequest::is_deletion_protection_enabled_Set() const{
    return m_deletion_protection_enabled_isSet;
}

bool OAICreatePoolRequest::is_deletion_protection_enabled_Valid() const{
    return m_deletion_protection_enabled_isValid;
}

QList OAICreatePoolRequest::getTags() const {
    return m_tags;
}
void OAICreatePoolRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreatePoolRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreatePoolRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAICreatePoolRequest::getClientToken() const {
    return m_client_token;
}
void OAICreatePoolRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreatePoolRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreatePoolRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

bool OAICreatePoolRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_origination_identity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iso_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deletion_protection_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreatePoolRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_origination_identity_isValid && m_iso_country_code_isValid && m_message_type_isValid && true;
}

} // namespace OpenAPI
