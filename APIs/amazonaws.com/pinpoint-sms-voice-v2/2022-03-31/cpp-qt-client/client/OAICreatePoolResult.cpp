/**
 * Amazon Pinpoint SMS Voice V2
 * <p>Welcome to the <i>Amazon Pinpoint SMS and Voice, version 2 API Reference</i>. This guide provides information about Amazon Pinpoint SMS and Voice, version 2 API resources, including supported HTTP methods, parameters, and schemas.</p> <p>Amazon Pinpoint is an Amazon Web Services service that you can use to engage with your recipients across multiple messaging channels. The Amazon Pinpoint SMS and Voice, version 2 API provides programmatic access to options that are unique to the SMS and voice channels and supplements the resources provided by the Amazon Pinpoint API.</p> <p>If you're new to Amazon Pinpoint, it's also helpful to review the <a href=\"https://docs.aws.amazon.com/pinpoint/latest/developerguide/welcome.html\"> Amazon Pinpoint Developer Guide</a>. The <i>Amazon Pinpoint Developer Guide</i> provides tutorials, code samples, and procedures that demonstrate how to use Amazon Pinpoint features programmatically and how to integrate Amazon Pinpoint functionality into mobile apps and other types of applications. The guide also provides key information, such as Amazon Pinpoint integration with other Amazon Web Services services, and the quotas that apply to use of the service.</p>
 *
 * The version of the OpenAPI document: 2022-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreatePoolResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreatePoolResult::OAICreatePoolResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreatePoolResult::OAICreatePoolResult() {
    this->initializeModel();
}

OAICreatePoolResult::~OAICreatePoolResult() {}

void OAICreatePoolResult::initializeModel() {

    m_pool_arn_isSet = false;
    m_pool_arn_isValid = false;

    m_pool_id_isSet = false;
    m_pool_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_message_type_isSet = false;
    m_message_type_isValid = false;

    m_two_way_enabled_isSet = false;
    m_two_way_enabled_isValid = false;

    m_two_way_channel_arn_isSet = false;
    m_two_way_channel_arn_isValid = false;

    m_self_managed_opt_outs_enabled_isSet = false;
    m_self_managed_opt_outs_enabled_isValid = false;

    m_opt_out_list_name_isSet = false;
    m_opt_out_list_name_isValid = false;

    m_shared_routes_enabled_isSet = false;
    m_shared_routes_enabled_isValid = false;

    m_deletion_protection_enabled_isSet = false;
    m_deletion_protection_enabled_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_created_timestamp_isSet = false;
    m_created_timestamp_isValid = false;
}

void OAICreatePoolResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreatePoolResult::fromJsonObject(QJsonObject json) {

    m_pool_arn_isValid = ::OpenAPI::fromJsonValue(m_pool_arn, json[QString("PoolArn")]);
    m_pool_arn_isSet = !json[QString("PoolArn")].isNull() && m_pool_arn_isValid;

    m_pool_id_isValid = ::OpenAPI::fromJsonValue(m_pool_id, json[QString("PoolId")]);
    m_pool_id_isSet = !json[QString("PoolId")].isNull() && m_pool_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_message_type_isValid = ::OpenAPI::fromJsonValue(m_message_type, json[QString("MessageType")]);
    m_message_type_isSet = !json[QString("MessageType")].isNull() && m_message_type_isValid;

    m_two_way_enabled_isValid = ::OpenAPI::fromJsonValue(m_two_way_enabled, json[QString("TwoWayEnabled")]);
    m_two_way_enabled_isSet = !json[QString("TwoWayEnabled")].isNull() && m_two_way_enabled_isValid;

    m_two_way_channel_arn_isValid = ::OpenAPI::fromJsonValue(m_two_way_channel_arn, json[QString("TwoWayChannelArn")]);
    m_two_way_channel_arn_isSet = !json[QString("TwoWayChannelArn")].isNull() && m_two_way_channel_arn_isValid;

    m_self_managed_opt_outs_enabled_isValid = ::OpenAPI::fromJsonValue(m_self_managed_opt_outs_enabled, json[QString("SelfManagedOptOutsEnabled")]);
    m_self_managed_opt_outs_enabled_isSet = !json[QString("SelfManagedOptOutsEnabled")].isNull() && m_self_managed_opt_outs_enabled_isValid;

    m_opt_out_list_name_isValid = ::OpenAPI::fromJsonValue(m_opt_out_list_name, json[QString("OptOutListName")]);
    m_opt_out_list_name_isSet = !json[QString("OptOutListName")].isNull() && m_opt_out_list_name_isValid;

    m_shared_routes_enabled_isValid = ::OpenAPI::fromJsonValue(m_shared_routes_enabled, json[QString("SharedRoutesEnabled")]);
    m_shared_routes_enabled_isSet = !json[QString("SharedRoutesEnabled")].isNull() && m_shared_routes_enabled_isValid;

    m_deletion_protection_enabled_isValid = ::OpenAPI::fromJsonValue(m_deletion_protection_enabled, json[QString("DeletionProtectionEnabled")]);
    m_deletion_protection_enabled_isSet = !json[QString("DeletionProtectionEnabled")].isNull() && m_deletion_protection_enabled_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_created_timestamp_isValid = ::OpenAPI::fromJsonValue(m_created_timestamp, json[QString("CreatedTimestamp")]);
    m_created_timestamp_isSet = !json[QString("CreatedTimestamp")].isNull() && m_created_timestamp_isValid;
}

QString OAICreatePoolResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreatePoolResult::asJsonObject() const {
    QJsonObject obj;
    if (m_pool_arn_isSet) {
        obj.insert(QString("PoolArn"), ::OpenAPI::toJsonValue(m_pool_arn));
    }
    if (m_pool_id_isSet) {
        obj.insert(QString("PoolId"), ::OpenAPI::toJsonValue(m_pool_id));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_message_type.isSet()) {
        obj.insert(QString("MessageType"), ::OpenAPI::toJsonValue(m_message_type));
    }
    if (m_two_way_enabled_isSet) {
        obj.insert(QString("TwoWayEnabled"), ::OpenAPI::toJsonValue(m_two_way_enabled));
    }
    if (m_two_way_channel_arn_isSet) {
        obj.insert(QString("TwoWayChannelArn"), ::OpenAPI::toJsonValue(m_two_way_channel_arn));
    }
    if (m_self_managed_opt_outs_enabled_isSet) {
        obj.insert(QString("SelfManagedOptOutsEnabled"), ::OpenAPI::toJsonValue(m_self_managed_opt_outs_enabled));
    }
    if (m_opt_out_list_name_isSet) {
        obj.insert(QString("OptOutListName"), ::OpenAPI::toJsonValue(m_opt_out_list_name));
    }
    if (m_shared_routes_enabled_isSet) {
        obj.insert(QString("SharedRoutesEnabled"), ::OpenAPI::toJsonValue(m_shared_routes_enabled));
    }
    if (m_deletion_protection_enabled_isSet) {
        obj.insert(QString("DeletionProtectionEnabled"), ::OpenAPI::toJsonValue(m_deletion_protection_enabled));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_created_timestamp_isSet) {
        obj.insert(QString("CreatedTimestamp"), ::OpenAPI::toJsonValue(m_created_timestamp));
    }
    return obj;
}

QString OAICreatePoolResult::getPoolArn() const {
    return m_pool_arn;
}
void OAICreatePoolResult::setPoolArn(const QString &pool_arn) {
    m_pool_arn = pool_arn;
    m_pool_arn_isSet = true;
}

bool OAICreatePoolResult::is_pool_arn_Set() const{
    return m_pool_arn_isSet;
}

bool OAICreatePoolResult::is_pool_arn_Valid() const{
    return m_pool_arn_isValid;
}

QString OAICreatePoolResult::getPoolId() const {
    return m_pool_id;
}
void OAICreatePoolResult::setPoolId(const QString &pool_id) {
    m_pool_id = pool_id;
    m_pool_id_isSet = true;
}

bool OAICreatePoolResult::is_pool_id_Set() const{
    return m_pool_id_isSet;
}

bool OAICreatePoolResult::is_pool_id_Valid() const{
    return m_pool_id_isValid;
}

OAIPoolStatus OAICreatePoolResult::getStatus() const {
    return m_status;
}
void OAICreatePoolResult::setStatus(const OAIPoolStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICreatePoolResult::is_status_Set() const{
    return m_status_isSet;
}

bool OAICreatePoolResult::is_status_Valid() const{
    return m_status_isValid;
}

OAIMessageType OAICreatePoolResult::getMessageType() const {
    return m_message_type;
}
void OAICreatePoolResult::setMessageType(const OAIMessageType &message_type) {
    m_message_type = message_type;
    m_message_type_isSet = true;
}

bool OAICreatePoolResult::is_message_type_Set() const{
    return m_message_type_isSet;
}

bool OAICreatePoolResult::is_message_type_Valid() const{
    return m_message_type_isValid;
}

bool OAICreatePoolResult::getTwoWayEnabled() const {
    return m_two_way_enabled;
}
void OAICreatePoolResult::setTwoWayEnabled(const bool &two_way_enabled) {
    m_two_way_enabled = two_way_enabled;
    m_two_way_enabled_isSet = true;
}

bool OAICreatePoolResult::is_two_way_enabled_Set() const{
    return m_two_way_enabled_isSet;
}

bool OAICreatePoolResult::is_two_way_enabled_Valid() const{
    return m_two_way_enabled_isValid;
}

QString OAICreatePoolResult::getTwoWayChannelArn() const {
    return m_two_way_channel_arn;
}
void OAICreatePoolResult::setTwoWayChannelArn(const QString &two_way_channel_arn) {
    m_two_way_channel_arn = two_way_channel_arn;
    m_two_way_channel_arn_isSet = true;
}

bool OAICreatePoolResult::is_two_way_channel_arn_Set() const{
    return m_two_way_channel_arn_isSet;
}

bool OAICreatePoolResult::is_two_way_channel_arn_Valid() const{
    return m_two_way_channel_arn_isValid;
}

bool OAICreatePoolResult::getSelfManagedOptOutsEnabled() const {
    return m_self_managed_opt_outs_enabled;
}
void OAICreatePoolResult::setSelfManagedOptOutsEnabled(const bool &self_managed_opt_outs_enabled) {
    m_self_managed_opt_outs_enabled = self_managed_opt_outs_enabled;
    m_self_managed_opt_outs_enabled_isSet = true;
}

bool OAICreatePoolResult::is_self_managed_opt_outs_enabled_Set() const{
    return m_self_managed_opt_outs_enabled_isSet;
}

bool OAICreatePoolResult::is_self_managed_opt_outs_enabled_Valid() const{
    return m_self_managed_opt_outs_enabled_isValid;
}

QString OAICreatePoolResult::getOptOutListName() const {
    return m_opt_out_list_name;
}
void OAICreatePoolResult::setOptOutListName(const QString &opt_out_list_name) {
    m_opt_out_list_name = opt_out_list_name;
    m_opt_out_list_name_isSet = true;
}

bool OAICreatePoolResult::is_opt_out_list_name_Set() const{
    return m_opt_out_list_name_isSet;
}

bool OAICreatePoolResult::is_opt_out_list_name_Valid() const{
    return m_opt_out_list_name_isValid;
}

bool OAICreatePoolResult::getSharedRoutesEnabled() const {
    return m_shared_routes_enabled;
}
void OAICreatePoolResult::setSharedRoutesEnabled(const bool &shared_routes_enabled) {
    m_shared_routes_enabled = shared_routes_enabled;
    m_shared_routes_enabled_isSet = true;
}

bool OAICreatePoolResult::is_shared_routes_enabled_Set() const{
    return m_shared_routes_enabled_isSet;
}

bool OAICreatePoolResult::is_shared_routes_enabled_Valid() const{
    return m_shared_routes_enabled_isValid;
}

bool OAICreatePoolResult::getDeletionProtectionEnabled() const {
    return m_deletion_protection_enabled;
}
void OAICreatePoolResult::setDeletionProtectionEnabled(const bool &deletion_protection_enabled) {
    m_deletion_protection_enabled = deletion_protection_enabled;
    m_deletion_protection_enabled_isSet = true;
}

bool OAICreatePoolResult::is_deletion_protection_enabled_Set() const{
    return m_deletion_protection_enabled_isSet;
}

bool OAICreatePoolResult::is_deletion_protection_enabled_Valid() const{
    return m_deletion_protection_enabled_isValid;
}

QList OAICreatePoolResult::getTags() const {
    return m_tags;
}
void OAICreatePoolResult::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreatePoolResult::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreatePoolResult::is_tags_Valid() const{
    return m_tags_isValid;
}

QDateTime OAICreatePoolResult::getCreatedTimestamp() const {
    return m_created_timestamp;
}
void OAICreatePoolResult::setCreatedTimestamp(const QDateTime &created_timestamp) {
    m_created_timestamp = created_timestamp;
    m_created_timestamp_isSet = true;
}

bool OAICreatePoolResult::is_created_timestamp_Set() const{
    return m_created_timestamp_isSet;
}

bool OAICreatePoolResult::is_created_timestamp_Valid() const{
    return m_created_timestamp_isValid;
}

bool OAICreatePoolResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pool_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pool_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_two_way_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_two_way_channel_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_managed_opt_outs_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opt_out_list_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared_routes_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deletion_protection_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreatePoolResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
