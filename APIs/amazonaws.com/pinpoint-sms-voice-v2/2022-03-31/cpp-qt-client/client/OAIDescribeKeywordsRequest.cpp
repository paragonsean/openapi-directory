/**
 * Amazon Pinpoint SMS Voice V2
 * <p>Welcome to the <i>Amazon Pinpoint SMS and Voice, version 2 API Reference</i>. This guide provides information about Amazon Pinpoint SMS and Voice, version 2 API resources, including supported HTTP methods, parameters, and schemas.</p> <p>Amazon Pinpoint is an Amazon Web Services service that you can use to engage with your recipients across multiple messaging channels. The Amazon Pinpoint SMS and Voice, version 2 API provides programmatic access to options that are unique to the SMS and voice channels and supplements the resources provided by the Amazon Pinpoint API.</p> <p>If you're new to Amazon Pinpoint, it's also helpful to review the <a href=\"https://docs.aws.amazon.com/pinpoint/latest/developerguide/welcome.html\"> Amazon Pinpoint Developer Guide</a>. The <i>Amazon Pinpoint Developer Guide</i> provides tutorials, code samples, and procedures that demonstrate how to use Amazon Pinpoint features programmatically and how to integrate Amazon Pinpoint functionality into mobile apps and other types of applications. The guide also provides key information, such as Amazon Pinpoint integration with other Amazon Web Services services, and the quotas that apply to use of the service.</p>
 *
 * The version of the OpenAPI document: 2022-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeKeywordsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeKeywordsRequest::OAIDescribeKeywordsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeKeywordsRequest::OAIDescribeKeywordsRequest() {
    this->initializeModel();
}

OAIDescribeKeywordsRequest::~OAIDescribeKeywordsRequest() {}

void OAIDescribeKeywordsRequest::initializeModel() {

    m_origination_identity_isSet = false;
    m_origination_identity_isValid = false;

    m_keywords_isSet = false;
    m_keywords_isValid = false;

    m_filters_isSet = false;
    m_filters_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;
}

void OAIDescribeKeywordsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeKeywordsRequest::fromJsonObject(QJsonObject json) {

    m_origination_identity_isValid = ::OpenAPI::fromJsonValue(m_origination_identity, json[QString("OriginationIdentity")]);
    m_origination_identity_isSet = !json[QString("OriginationIdentity")].isNull() && m_origination_identity_isValid;

    m_keywords_isValid = ::OpenAPI::fromJsonValue(m_keywords, json[QString("Keywords")]);
    m_keywords_isSet = !json[QString("Keywords")].isNull() && m_keywords_isValid;

    m_filters_isValid = ::OpenAPI::fromJsonValue(m_filters, json[QString("Filters")]);
    m_filters_isSet = !json[QString("Filters")].isNull() && m_filters_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;
}

QString OAIDescribeKeywordsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeKeywordsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_origination_identity_isSet) {
        obj.insert(QString("OriginationIdentity"), ::OpenAPI::toJsonValue(m_origination_identity));
    }
    if (m_keywords.isSet()) {
        obj.insert(QString("Keywords"), ::OpenAPI::toJsonValue(m_keywords));
    }
    if (m_filters.isSet()) {
        obj.insert(QString("Filters"), ::OpenAPI::toJsonValue(m_filters));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    return obj;
}

QString OAIDescribeKeywordsRequest::getOriginationIdentity() const {
    return m_origination_identity;
}
void OAIDescribeKeywordsRequest::setOriginationIdentity(const QString &origination_identity) {
    m_origination_identity = origination_identity;
    m_origination_identity_isSet = true;
}

bool OAIDescribeKeywordsRequest::is_origination_identity_Set() const{
    return m_origination_identity_isSet;
}

bool OAIDescribeKeywordsRequest::is_origination_identity_Valid() const{
    return m_origination_identity_isValid;
}

QList OAIDescribeKeywordsRequest::getKeywords() const {
    return m_keywords;
}
void OAIDescribeKeywordsRequest::setKeywords(const QList &keywords) {
    m_keywords = keywords;
    m_keywords_isSet = true;
}

bool OAIDescribeKeywordsRequest::is_keywords_Set() const{
    return m_keywords_isSet;
}

bool OAIDescribeKeywordsRequest::is_keywords_Valid() const{
    return m_keywords_isValid;
}

QList OAIDescribeKeywordsRequest::getFilters() const {
    return m_filters;
}
void OAIDescribeKeywordsRequest::setFilters(const QList &filters) {
    m_filters = filters;
    m_filters_isSet = true;
}

bool OAIDescribeKeywordsRequest::is_filters_Set() const{
    return m_filters_isSet;
}

bool OAIDescribeKeywordsRequest::is_filters_Valid() const{
    return m_filters_isValid;
}

QString OAIDescribeKeywordsRequest::getNextToken() const {
    return m_next_token;
}
void OAIDescribeKeywordsRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIDescribeKeywordsRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIDescribeKeywordsRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIDescribeKeywordsRequest::getMaxResults() const {
    return m_max_results;
}
void OAIDescribeKeywordsRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIDescribeKeywordsRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIDescribeKeywordsRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

bool OAIDescribeKeywordsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_origination_identity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keywords.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeKeywordsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_origination_identity_isValid && true;
}

} // namespace OpenAPI
