/**
 * Amazon Pinpoint SMS Voice V2
 * <p>Welcome to the <i>Amazon Pinpoint SMS and Voice, version 2 API Reference</i>. This guide provides information about Amazon Pinpoint SMS and Voice, version 2 API resources, including supported HTTP methods, parameters, and schemas.</p> <p>Amazon Pinpoint is an Amazon Web Services service that you can use to engage with your recipients across multiple messaging channels. The Amazon Pinpoint SMS and Voice, version 2 API provides programmatic access to options that are unique to the SMS and voice channels and supplements the resources provided by the Amazon Pinpoint API.</p> <p>If you're new to Amazon Pinpoint, it's also helpful to review the <a href=\"https://docs.aws.amazon.com/pinpoint/latest/developerguide/welcome.html\"> Amazon Pinpoint Developer Guide</a>. The <i>Amazon Pinpoint Developer Guide</i> provides tutorials, code samples, and procedures that demonstrate how to use Amazon Pinpoint features programmatically and how to integrate Amazon Pinpoint functionality into mobile apps and other types of applications. The guide also provides key information, such as Amazon Pinpoint integration with other Amazon Web Services services, and the quotas that apply to use of the service.</p>
 *
 * The version of the OpenAPI document: 2022-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKeywordInformation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKeywordInformation::OAIKeywordInformation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKeywordInformation::OAIKeywordInformation() {
    this->initializeModel();
}

OAIKeywordInformation::~OAIKeywordInformation() {}

void OAIKeywordInformation::initializeModel() {

    m_keyword_isSet = false;
    m_keyword_isValid = false;

    m_keyword_message_isSet = false;
    m_keyword_message_isValid = false;

    m_keyword_action_isSet = false;
    m_keyword_action_isValid = false;
}

void OAIKeywordInformation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKeywordInformation::fromJsonObject(QJsonObject json) {

    m_keyword_isValid = ::OpenAPI::fromJsonValue(m_keyword, json[QString("Keyword")]);
    m_keyword_isSet = !json[QString("Keyword")].isNull() && m_keyword_isValid;

    m_keyword_message_isValid = ::OpenAPI::fromJsonValue(m_keyword_message, json[QString("KeywordMessage")]);
    m_keyword_message_isSet = !json[QString("KeywordMessage")].isNull() && m_keyword_message_isValid;

    m_keyword_action_isValid = ::OpenAPI::fromJsonValue(m_keyword_action, json[QString("KeywordAction")]);
    m_keyword_action_isSet = !json[QString("KeywordAction")].isNull() && m_keyword_action_isValid;
}

QString OAIKeywordInformation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKeywordInformation::asJsonObject() const {
    QJsonObject obj;
    if (m_keyword_isSet) {
        obj.insert(QString("Keyword"), ::OpenAPI::toJsonValue(m_keyword));
    }
    if (m_keyword_message_isSet) {
        obj.insert(QString("KeywordMessage"), ::OpenAPI::toJsonValue(m_keyword_message));
    }
    if (m_keyword_action.isSet()) {
        obj.insert(QString("KeywordAction"), ::OpenAPI::toJsonValue(m_keyword_action));
    }
    return obj;
}

QString OAIKeywordInformation::getKeyword() const {
    return m_keyword;
}
void OAIKeywordInformation::setKeyword(const QString &keyword) {
    m_keyword = keyword;
    m_keyword_isSet = true;
}

bool OAIKeywordInformation::is_keyword_Set() const{
    return m_keyword_isSet;
}

bool OAIKeywordInformation::is_keyword_Valid() const{
    return m_keyword_isValid;
}

QString OAIKeywordInformation::getKeywordMessage() const {
    return m_keyword_message;
}
void OAIKeywordInformation::setKeywordMessage(const QString &keyword_message) {
    m_keyword_message = keyword_message;
    m_keyword_message_isSet = true;
}

bool OAIKeywordInformation::is_keyword_message_Set() const{
    return m_keyword_message_isSet;
}

bool OAIKeywordInformation::is_keyword_message_Valid() const{
    return m_keyword_message_isValid;
}

OAIKeywordAction OAIKeywordInformation::getKeywordAction() const {
    return m_keyword_action;
}
void OAIKeywordInformation::setKeywordAction(const OAIKeywordAction &keyword_action) {
    m_keyword_action = keyword_action;
    m_keyword_action_isSet = true;
}

bool OAIKeywordInformation::is_keyword_action_Set() const{
    return m_keyword_action_isSet;
}

bool OAIKeywordInformation::is_keyword_action_Valid() const{
    return m_keyword_action_isValid;
}

bool OAIKeywordInformation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_keyword_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keyword_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keyword_action.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKeywordInformation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_keyword_isValid && m_keyword_message_isValid && m_keyword_action_isValid && true;
}

} // namespace OpenAPI
