# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class ListEnabledControlsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_results: int=None, next_token: str=None, target_identifier: str=None):
        """ListEnabledControlsRequest - a model defined in OpenAPI

        :param max_results: The max_results of this ListEnabledControlsRequest.
        :param next_token: The next_token of this ListEnabledControlsRequest.
        :param target_identifier: The target_identifier of this ListEnabledControlsRequest.
        """
        self.openapi_types = {
            'max_results': int,
            'next_token': str,
            'target_identifier': str
        }

        self.attribute_map = {
            'max_results': 'maxResults',
            'next_token': 'nextToken',
            'target_identifier': 'targetIdentifier'
        }

        self._max_results = max_results
        self._next_token = next_token
        self._target_identifier = target_identifier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListEnabledControlsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListEnabledControls_request of this ListEnabledControlsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_results(self):
        """Gets the max_results of this ListEnabledControlsRequest.

        How many results to return per API call.

        :return: The max_results of this ListEnabledControlsRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListEnabledControlsRequest.

        How many results to return per API call.

        :param max_results: The max_results of this ListEnabledControlsRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 100:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `100`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this ListEnabledControlsRequest.

        The token to continue the list from a previous API call with the same parameters.

        :return: The next_token of this ListEnabledControlsRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListEnabledControlsRequest.

        The token to continue the list from a previous API call with the same parameters.

        :param next_token: The next_token of this ListEnabledControlsRequest.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def target_identifier(self):
        """Gets the target_identifier of this ListEnabledControlsRequest.

        The ARN of the organizational unit.

        :return: The target_identifier of this ListEnabledControlsRequest.
        :rtype: str
        """
        return self._target_identifier

    @target_identifier.setter
    def target_identifier(self, target_identifier):
        """Sets the target_identifier of this ListEnabledControlsRequest.

        The ARN of the organizational unit.

        :param target_identifier: The target_identifier of this ListEnabledControlsRequest.
        :type target_identifier: str
        """
        if target_identifier is None:
            raise ValueError("Invalid value for `target_identifier`, must not be `None`")
        if target_identifier is not None and len(target_identifier) > 2048:
            raise ValueError("Invalid value for `target_identifier`, length must be less than or equal to `2048`")
        if target_identifier is not None and len(target_identifier) < 20:
            raise ValueError("Invalid value for `target_identifier`, length must be greater than or equal to `20`")
        if target_identifier is not None and not re.search(r'^arn:aws[0-9a-zA-Z_\-:\/]+$', target_identifier):
            raise ValueError("Invalid value for `target_identifier`, must be a follow pattern or equal to `/^arn:aws[0-9a-zA-Z_\-:\/]+$/`")

        self._target_identifier = target_identifier
