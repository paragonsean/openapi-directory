# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class DisableControlRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, control_identifier: str=None, target_identifier: str=None):
        """DisableControlRequest - a model defined in OpenAPI

        :param control_identifier: The control_identifier of this DisableControlRequest.
        :param target_identifier: The target_identifier of this DisableControlRequest.
        """
        self.openapi_types = {
            'control_identifier': str,
            'target_identifier': str
        }

        self.attribute_map = {
            'control_identifier': 'controlIdentifier',
            'target_identifier': 'targetIdentifier'
        }

        self._control_identifier = control_identifier
        self._target_identifier = target_identifier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DisableControlRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DisableControl_request of this DisableControlRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def control_identifier(self):
        """Gets the control_identifier of this DisableControlRequest.

        The ARN of the control. Only <b>Strongly recommended</b> and <b>Elective</b> controls are permitted, with the exception of the <b>Region deny</b> guardrail.

        :return: The control_identifier of this DisableControlRequest.
        :rtype: str
        """
        return self._control_identifier

    @control_identifier.setter
    def control_identifier(self, control_identifier):
        """Sets the control_identifier of this DisableControlRequest.

        The ARN of the control. Only <b>Strongly recommended</b> and <b>Elective</b> controls are permitted, with the exception of the <b>Region deny</b> guardrail.

        :param control_identifier: The control_identifier of this DisableControlRequest.
        :type control_identifier: str
        """
        if control_identifier is None:
            raise ValueError("Invalid value for `control_identifier`, must not be `None`")
        if control_identifier is not None and len(control_identifier) > 2048:
            raise ValueError("Invalid value for `control_identifier`, length must be less than or equal to `2048`")
        if control_identifier is not None and len(control_identifier) < 20:
            raise ValueError("Invalid value for `control_identifier`, length must be greater than or equal to `20`")
        if control_identifier is not None and not re.search(r'^arn:aws[0-9a-zA-Z_\-:\/]+$', control_identifier):
            raise ValueError("Invalid value for `control_identifier`, must be a follow pattern or equal to `/^arn:aws[0-9a-zA-Z_\-:\/]+$/`")

        self._control_identifier = control_identifier

    @property
    def target_identifier(self):
        """Gets the target_identifier of this DisableControlRequest.

        The ARN of the organizational unit.

        :return: The target_identifier of this DisableControlRequest.
        :rtype: str
        """
        return self._target_identifier

    @target_identifier.setter
    def target_identifier(self, target_identifier):
        """Sets the target_identifier of this DisableControlRequest.

        The ARN of the organizational unit.

        :param target_identifier: The target_identifier of this DisableControlRequest.
        :type target_identifier: str
        """
        if target_identifier is None:
            raise ValueError("Invalid value for `target_identifier`, must not be `None`")
        if target_identifier is not None and len(target_identifier) > 2048:
            raise ValueError("Invalid value for `target_identifier`, length must be less than or equal to `2048`")
        if target_identifier is not None and len(target_identifier) < 20:
            raise ValueError("Invalid value for `target_identifier`, length must be greater than or equal to `20`")
        if target_identifier is not None and not re.search(r'^arn:aws[0-9a-zA-Z_\-:\/]+$', target_identifier):
            raise ValueError("Invalid value for `target_identifier`, must be a follow pattern or equal to `/^arn:aws[0-9a-zA-Z_\-:\/]+$/`")

        self._target_identifier = target_identifier
