# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListEnabledControlsOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled_controls: List=None, next_token: str=None):
        """ListEnabledControlsOutput - a model defined in OpenAPI

        :param enabled_controls: The enabled_controls of this ListEnabledControlsOutput.
        :param next_token: The next_token of this ListEnabledControlsOutput.
        """
        self.openapi_types = {
            'enabled_controls': List,
            'next_token': str
        }

        self.attribute_map = {
            'enabled_controls': 'enabledControls',
            'next_token': 'nextToken'
        }

        self._enabled_controls = enabled_controls
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListEnabledControlsOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListEnabledControlsOutput of this ListEnabledControlsOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled_controls(self):
        """Gets the enabled_controls of this ListEnabledControlsOutput.


        :return: The enabled_controls of this ListEnabledControlsOutput.
        :rtype: List
        """
        return self._enabled_controls

    @enabled_controls.setter
    def enabled_controls(self, enabled_controls):
        """Sets the enabled_controls of this ListEnabledControlsOutput.


        :param enabled_controls: The enabled_controls of this ListEnabledControlsOutput.
        :type enabled_controls: List
        """
        if enabled_controls is None:
            raise ValueError("Invalid value for `enabled_controls`, must not be `None`")

        self._enabled_controls = enabled_controls

    @property
    def next_token(self):
        """Gets the next_token of this ListEnabledControlsOutput.


        :return: The next_token of this ListEnabledControlsOutput.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListEnabledControlsOutput.


        :param next_token: The next_token of this ListEnabledControlsOutput.
        :type next_token: str
        """

        self._next_token = next_token
