# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EnableControlInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, control_identifier: str=None, target_identifier: str=None):
        """EnableControlInput - a model defined in OpenAPI

        :param control_identifier: The control_identifier of this EnableControlInput.
        :param target_identifier: The target_identifier of this EnableControlInput.
        """
        self.openapi_types = {
            'control_identifier': str,
            'target_identifier': str
        }

        self.attribute_map = {
            'control_identifier': 'controlIdentifier',
            'target_identifier': 'targetIdentifier'
        }

        self._control_identifier = control_identifier
        self._target_identifier = target_identifier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnableControlInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EnableControlInput of this EnableControlInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def control_identifier(self):
        """Gets the control_identifier of this EnableControlInput.


        :return: The control_identifier of this EnableControlInput.
        :rtype: str
        """
        return self._control_identifier

    @control_identifier.setter
    def control_identifier(self, control_identifier):
        """Sets the control_identifier of this EnableControlInput.


        :param control_identifier: The control_identifier of this EnableControlInput.
        :type control_identifier: str
        """
        if control_identifier is None:
            raise ValueError("Invalid value for `control_identifier`, must not be `None`")

        self._control_identifier = control_identifier

    @property
    def target_identifier(self):
        """Gets the target_identifier of this EnableControlInput.


        :return: The target_identifier of this EnableControlInput.
        :rtype: str
        """
        return self._target_identifier

    @target_identifier.setter
    def target_identifier(self, target_identifier):
        """Sets the target_identifier of this EnableControlInput.


        :param target_identifier: The target_identifier of this EnableControlInput.
        :type target_identifier: str
        """
        if target_identifier is None:
            raise ValueError("Invalid value for `target_identifier`, must not be `None`")

        self._target_identifier = target_identifier
