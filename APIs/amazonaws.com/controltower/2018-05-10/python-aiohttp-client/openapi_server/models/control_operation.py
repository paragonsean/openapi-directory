# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.control_operation_status import ControlOperationStatus
from openapi_server.models.control_operation_type import ControlOperationType
from openapi_server import util


class ControlOperation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_time: datetime=None, operation_type: ControlOperationType=None, start_time: datetime=None, status: ControlOperationStatus=None, status_message: str=None):
        """ControlOperation - a model defined in OpenAPI

        :param end_time: The end_time of this ControlOperation.
        :param operation_type: The operation_type of this ControlOperation.
        :param start_time: The start_time of this ControlOperation.
        :param status: The status of this ControlOperation.
        :param status_message: The status_message of this ControlOperation.
        """
        self.openapi_types = {
            'end_time': datetime,
            'operation_type': ControlOperationType,
            'start_time': datetime,
            'status': ControlOperationStatus,
            'status_message': str
        }

        self.attribute_map = {
            'end_time': 'endTime',
            'operation_type': 'operationType',
            'start_time': 'startTime',
            'status': 'status',
            'status_message': 'statusMessage'
        }

        self._end_time = end_time
        self._operation_type = operation_type
        self._start_time = start_time
        self._status = status
        self._status_message = status_message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ControlOperation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ControlOperation of this ControlOperation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_time(self):
        """Gets the end_time of this ControlOperation.


        :return: The end_time of this ControlOperation.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this ControlOperation.


        :param end_time: The end_time of this ControlOperation.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def operation_type(self):
        """Gets the operation_type of this ControlOperation.


        :return: The operation_type of this ControlOperation.
        :rtype: ControlOperationType
        """
        return self._operation_type

    @operation_type.setter
    def operation_type(self, operation_type):
        """Sets the operation_type of this ControlOperation.


        :param operation_type: The operation_type of this ControlOperation.
        :type operation_type: ControlOperationType
        """

        self._operation_type = operation_type

    @property
    def start_time(self):
        """Gets the start_time of this ControlOperation.


        :return: The start_time of this ControlOperation.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this ControlOperation.


        :param start_time: The start_time of this ControlOperation.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this ControlOperation.


        :return: The status of this ControlOperation.
        :rtype: ControlOperationStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ControlOperation.


        :param status: The status of this ControlOperation.
        :type status: ControlOperationStatus
        """

        self._status = status

    @property
    def status_message(self):
        """Gets the status_message of this ControlOperation.


        :return: The status_message of this ControlOperation.
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this ControlOperation.


        :param status_message: The status_message of this ControlOperation.
        :type status_message: str
        """

        self._status_message = status_message
