/*
 * AWS Migration Hub Refactor Spaces
 * <p><fullname>Amazon Web Services Migration Hub Refactor Spaces</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Amazon Web Services Migration Hub Refactor Spaces (Refactor Spaces). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the Amazon Web Services SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"https://aws.amazon.com/tools/#SDKs\">Amazon Web Services SDKs</a>.</p> <p>To share Refactor Spaces environments with other Amazon Web Services accounts or with Organizations and their OUs, use Resource Access Manager's <code>CreateResourceShare</code> API. See <a href=\"https://docs.aws.amazon.com/ram/latest/APIReference/API_CreateResourceShare.html\">CreateResourceShare</a> in the <i>Amazon Web Services RAM API Reference</i>.</p></p>
 *
 * The version of the OpenAPI document: 2021-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.CreateRouteRequestDefaultRoute;
import org.openapitools.client.model.CreateRouteRequestUriPathRoute;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateRouteRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:02.463365-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateRouteRequest {
  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "ClientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  public static final String SERIALIZED_NAME_DEFAULT_ROUTE = "DefaultRoute";
  @SerializedName(SERIALIZED_NAME_DEFAULT_ROUTE)
  private CreateRouteRequestDefaultRoute defaultRoute;

  /**
   * The route type of the route. &lt;code&gt;DEFAULT&lt;/code&gt; indicates that all traffic that does not match another route is forwarded to the default route. Applications must have a default route before any other routes can be created. &lt;code&gt;URI_PATH&lt;/code&gt; indicates a route that is based on a URI path.
   */
  @JsonAdapter(RouteTypeEnum.Adapter.class)
  public enum RouteTypeEnum {
    DEFAULT("DEFAULT"),
    
    URI_PATH("URI_PATH");

    private String value;

    RouteTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RouteTypeEnum fromValue(String value) {
      for (RouteTypeEnum b : RouteTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RouteTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RouteTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RouteTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RouteTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RouteTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ROUTE_TYPE = "RouteType";
  @SerializedName(SERIALIZED_NAME_ROUTE_TYPE)
  private RouteTypeEnum routeType;

  public static final String SERIALIZED_NAME_SERVICE_IDENTIFIER = "ServiceIdentifier";
  @SerializedName(SERIALIZED_NAME_SERVICE_IDENTIFIER)
  private String serviceIdentifier;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public static final String SERIALIZED_NAME_URI_PATH_ROUTE = "UriPathRoute";
  @SerializedName(SERIALIZED_NAME_URI_PATH_ROUTE)
  private CreateRouteRequestUriPathRoute uriPathRoute;

  public CreateRouteRequest() {
  }

  public CreateRouteRequest clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
   * @return clientToken
   */
  @javax.annotation.Nullable
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }


  public CreateRouteRequest defaultRoute(CreateRouteRequestDefaultRoute defaultRoute) {
    this.defaultRoute = defaultRoute;
    return this;
  }

  /**
   * Get defaultRoute
   * @return defaultRoute
   */
  @javax.annotation.Nullable
  public CreateRouteRequestDefaultRoute getDefaultRoute() {
    return defaultRoute;
  }

  public void setDefaultRoute(CreateRouteRequestDefaultRoute defaultRoute) {
    this.defaultRoute = defaultRoute;
  }


  public CreateRouteRequest routeType(RouteTypeEnum routeType) {
    this.routeType = routeType;
    return this;
  }

  /**
   * The route type of the route. &lt;code&gt;DEFAULT&lt;/code&gt; indicates that all traffic that does not match another route is forwarded to the default route. Applications must have a default route before any other routes can be created. &lt;code&gt;URI_PATH&lt;/code&gt; indicates a route that is based on a URI path.
   * @return routeType
   */
  @javax.annotation.Nonnull
  public RouteTypeEnum getRouteType() {
    return routeType;
  }

  public void setRouteType(RouteTypeEnum routeType) {
    this.routeType = routeType;
  }


  public CreateRouteRequest serviceIdentifier(String serviceIdentifier) {
    this.serviceIdentifier = serviceIdentifier;
    return this;
  }

  /**
   * The ID of the service in which the route is created. Traffic that matches this route is forwarded to this service.
   * @return serviceIdentifier
   */
  @javax.annotation.Nonnull
  public String getServiceIdentifier() {
    return serviceIdentifier;
  }

  public void setServiceIdentifier(String serviceIdentifier) {
    this.serviceIdentifier = serviceIdentifier;
  }


  public CreateRouteRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateRouteRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * A collection of up to 50 unique tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }


  public CreateRouteRequest uriPathRoute(CreateRouteRequestUriPathRoute uriPathRoute) {
    this.uriPathRoute = uriPathRoute;
    return this;
  }

  /**
   * Get uriPathRoute
   * @return uriPathRoute
   */
  @javax.annotation.Nullable
  public CreateRouteRequestUriPathRoute getUriPathRoute() {
    return uriPathRoute;
  }

  public void setUriPathRoute(CreateRouteRequestUriPathRoute uriPathRoute) {
    this.uriPathRoute = uriPathRoute;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateRouteRequest createRouteRequest = (CreateRouteRequest) o;
    return Objects.equals(this.clientToken, createRouteRequest.clientToken) &&
        Objects.equals(this.defaultRoute, createRouteRequest.defaultRoute) &&
        Objects.equals(this.routeType, createRouteRequest.routeType) &&
        Objects.equals(this.serviceIdentifier, createRouteRequest.serviceIdentifier) &&
        Objects.equals(this.tags, createRouteRequest.tags) &&
        Objects.equals(this.uriPathRoute, createRouteRequest.uriPathRoute);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientToken, defaultRoute, routeType, serviceIdentifier, tags, uriPathRoute);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateRouteRequest {\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("    defaultRoute: ").append(toIndentedString(defaultRoute)).append("\n");
    sb.append("    routeType: ").append(toIndentedString(routeType)).append("\n");
    sb.append("    serviceIdentifier: ").append(toIndentedString(serviceIdentifier)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    uriPathRoute: ").append(toIndentedString(uriPathRoute)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ClientToken");
    openapiFields.add("DefaultRoute");
    openapiFields.add("RouteType");
    openapiFields.add("ServiceIdentifier");
    openapiFields.add("Tags");
    openapiFields.add("UriPathRoute");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("RouteType");
    openapiRequiredFields.add("ServiceIdentifier");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateRouteRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateRouteRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateRouteRequest is not found in the empty JSON string", CreateRouteRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateRouteRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateRouteRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateRouteRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ClientToken") != null && !jsonObj.get("ClientToken").isJsonNull()) && !jsonObj.get("ClientToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ClientToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ClientToken").toString()));
      }
      // validate the optional field `DefaultRoute`
      if (jsonObj.get("DefaultRoute") != null && !jsonObj.get("DefaultRoute").isJsonNull()) {
        CreateRouteRequestDefaultRoute.validateJsonElement(jsonObj.get("DefaultRoute"));
      }
      if (!jsonObj.get("RouteType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RouteType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RouteType").toString()));
      }
      // validate the required field `RouteType`
      RouteTypeEnum.validateJsonElement(jsonObj.get("RouteType"));
      if (!jsonObj.get("ServiceIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ServiceIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ServiceIdentifier").toString()));
      }
      // validate the optional field `UriPathRoute`
      if (jsonObj.get("UriPathRoute") != null && !jsonObj.get("UriPathRoute").isJsonNull()) {
        CreateRouteRequestUriPathRoute.validateJsonElement(jsonObj.get("UriPathRoute"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateRouteRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateRouteRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateRouteRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateRouteRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateRouteRequest>() {
           @Override
           public void write(JsonWriter out, CreateRouteRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateRouteRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateRouteRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateRouteRequest
   * @throws IOException if the JSON string is invalid with respect to CreateRouteRequest
   */
  public static CreateRouteRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateRouteRequest.class);
  }

  /**
   * Convert an instance of CreateRouteRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

