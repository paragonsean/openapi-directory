/*
 * AWS Migration Hub Refactor Spaces
 * <p><fullname>Amazon Web Services Migration Hub Refactor Spaces</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Amazon Web Services Migration Hub Refactor Spaces (Refactor Spaces). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the Amazon Web Services SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"https://aws.amazon.com/tools/#SDKs\">Amazon Web Services SDKs</a>.</p> <p>To share Refactor Spaces environments with other Amazon Web Services accounts or with Organizations and their OUs, use Resource Access Manager's <code>CreateResourceShare</code> API. See <a href=\"https://docs.aws.amazon.com/ram/latest/APIReference/API_CreateResourceShare.html\">CreateResourceShare</a> in the <i>Amazon Web Services RAM API Reference</i>.</p></p>
 *
 * The version of the OpenAPI document: 2021-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RouteActivationState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The configuration for the URI path route type. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:02.463365-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UriPathRouteInput {
  public static final String SERIALIZED_NAME_ACTIVATION_STATE = "ActivationState";
  @SerializedName(SERIALIZED_NAME_ACTIVATION_STATE)
  private RouteActivationState activationState;

  public static final String SERIALIZED_NAME_APPEND_SOURCE_PATH = "AppendSourcePath";
  @SerializedName(SERIALIZED_NAME_APPEND_SOURCE_PATH)
  private Boolean appendSourcePath;

  public static final String SERIALIZED_NAME_INCLUDE_CHILD_PATHS = "IncludeChildPaths";
  @SerializedName(SERIALIZED_NAME_INCLUDE_CHILD_PATHS)
  private Boolean includeChildPaths;

  public static final String SERIALIZED_NAME_METHODS = "Methods";
  @SerializedName(SERIALIZED_NAME_METHODS)
  private List methods;

  public static final String SERIALIZED_NAME_SOURCE_PATH = "SourcePath";
  @SerializedName(SERIALIZED_NAME_SOURCE_PATH)
  private String sourcePath;

  public UriPathRouteInput() {
  }

  public UriPathRouteInput activationState(RouteActivationState activationState) {
    this.activationState = activationState;
    return this;
  }

  /**
   * Get activationState
   * @return activationState
   */
  @javax.annotation.Nonnull
  public RouteActivationState getActivationState() {
    return activationState;
  }

  public void setActivationState(RouteActivationState activationState) {
    this.activationState = activationState;
  }


  public UriPathRouteInput appendSourcePath(Boolean appendSourcePath) {
    this.appendSourcePath = appendSourcePath;
    return this;
  }

  /**
   * Get appendSourcePath
   * @return appendSourcePath
   */
  @javax.annotation.Nullable
  public Boolean getAppendSourcePath() {
    return appendSourcePath;
  }

  public void setAppendSourcePath(Boolean appendSourcePath) {
    this.appendSourcePath = appendSourcePath;
  }


  public UriPathRouteInput includeChildPaths(Boolean includeChildPaths) {
    this.includeChildPaths = includeChildPaths;
    return this;
  }

  /**
   * Get includeChildPaths
   * @return includeChildPaths
   */
  @javax.annotation.Nullable
  public Boolean getIncludeChildPaths() {
    return includeChildPaths;
  }

  public void setIncludeChildPaths(Boolean includeChildPaths) {
    this.includeChildPaths = includeChildPaths;
  }


  public UriPathRouteInput methods(List methods) {
    this.methods = methods;
    return this;
  }

  /**
   * Get methods
   * @return methods
   */
  @javax.annotation.Nullable
  public List getMethods() {
    return methods;
  }

  public void setMethods(List methods) {
    this.methods = methods;
  }


  public UriPathRouteInput sourcePath(String sourcePath) {
    this.sourcePath = sourcePath;
    return this;
  }

  /**
   * Get sourcePath
   * @return sourcePath
   */
  @javax.annotation.Nonnull
  public String getSourcePath() {
    return sourcePath;
  }

  public void setSourcePath(String sourcePath) {
    this.sourcePath = sourcePath;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UriPathRouteInput uriPathRouteInput = (UriPathRouteInput) o;
    return Objects.equals(this.activationState, uriPathRouteInput.activationState) &&
        Objects.equals(this.appendSourcePath, uriPathRouteInput.appendSourcePath) &&
        Objects.equals(this.includeChildPaths, uriPathRouteInput.includeChildPaths) &&
        Objects.equals(this.methods, uriPathRouteInput.methods) &&
        Objects.equals(this.sourcePath, uriPathRouteInput.sourcePath);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activationState, appendSourcePath, includeChildPaths, methods, sourcePath);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UriPathRouteInput {\n");
    sb.append("    activationState: ").append(toIndentedString(activationState)).append("\n");
    sb.append("    appendSourcePath: ").append(toIndentedString(appendSourcePath)).append("\n");
    sb.append("    includeChildPaths: ").append(toIndentedString(includeChildPaths)).append("\n");
    sb.append("    methods: ").append(toIndentedString(methods)).append("\n");
    sb.append("    sourcePath: ").append(toIndentedString(sourcePath)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ActivationState");
    openapiFields.add("AppendSourcePath");
    openapiFields.add("IncludeChildPaths");
    openapiFields.add("Methods");
    openapiFields.add("SourcePath");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ActivationState");
    openapiRequiredFields.add("SourcePath");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UriPathRouteInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UriPathRouteInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UriPathRouteInput is not found in the empty JSON string", UriPathRouteInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UriPathRouteInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UriPathRouteInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UriPathRouteInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `ActivationState`
      RouteActivationState.validateJsonElement(jsonObj.get("ActivationState"));
      // validate the optional field `AppendSourcePath`
      if (jsonObj.get("AppendSourcePath") != null && !jsonObj.get("AppendSourcePath").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("AppendSourcePath"));
      }
      // validate the optional field `IncludeChildPaths`
      if (jsonObj.get("IncludeChildPaths") != null && !jsonObj.get("IncludeChildPaths").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("IncludeChildPaths"));
      }
      // validate the optional field `Methods`
      if (jsonObj.get("Methods") != null && !jsonObj.get("Methods").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Methods"));
      }
      // validate the required field `SourcePath`
      String.validateJsonElement(jsonObj.get("SourcePath"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UriPathRouteInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UriPathRouteInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UriPathRouteInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UriPathRouteInput.class));

       return (TypeAdapter<T>) new TypeAdapter<UriPathRouteInput>() {
           @Override
           public void write(JsonWriter out, UriPathRouteInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UriPathRouteInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UriPathRouteInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UriPathRouteInput
   * @throws IOException if the JSON string is invalid with respect to UriPathRouteInput
   */
  public static UriPathRouteInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UriPathRouteInput.class);
  }

  /**
   * Convert an instance of UriPathRouteInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

