/*
 * AWS Migration Hub Refactor Spaces
 * <p><fullname>Amazon Web Services Migration Hub Refactor Spaces</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Amazon Web Services Migration Hub Refactor Spaces (Refactor Spaces). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the Amazon Web Services SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"https://aws.amazon.com/tools/#SDKs\">Amazon Web Services SDKs</a>.</p> <p>To share Refactor Spaces environments with other Amazon Web Services accounts or with Organizations and their OUs, use Resource Access Manager's <code>CreateResourceShare</code> API. See <a href=\"https://docs.aws.amazon.com/ram/latest/APIReference/API_CreateResourceShare.html\">CreateResourceShare</a> in the <i>Amazon Web Services RAM API Reference</i>.</p></p>
 *
 * The version of the OpenAPI document: 2021-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateEnvironmentRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:02.463365-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateEnvironmentRequest {
  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "ClientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * The network fabric type of the environment.
   */
  @JsonAdapter(NetworkFabricTypeEnum.Adapter.class)
  public enum NetworkFabricTypeEnum {
    TRANSIT_GATEWAY("TRANSIT_GATEWAY"),
    
    NONE("NONE");

    private String value;

    NetworkFabricTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NetworkFabricTypeEnum fromValue(String value) {
      for (NetworkFabricTypeEnum b : NetworkFabricTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NetworkFabricTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NetworkFabricTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NetworkFabricTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NetworkFabricTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NetworkFabricTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NETWORK_FABRIC_TYPE = "NetworkFabricType";
  @SerializedName(SERIALIZED_NAME_NETWORK_FABRIC_TYPE)
  private NetworkFabricTypeEnum networkFabricType;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public CreateEnvironmentRequest() {
  }

  public CreateEnvironmentRequest clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
   * @return clientToken
   */
  @javax.annotation.Nullable
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }


  public CreateEnvironmentRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the environment.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateEnvironmentRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the environment.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateEnvironmentRequest networkFabricType(NetworkFabricTypeEnum networkFabricType) {
    this.networkFabricType = networkFabricType;
    return this;
  }

  /**
   * The network fabric type of the environment.
   * @return networkFabricType
   */
  @javax.annotation.Nonnull
  public NetworkFabricTypeEnum getNetworkFabricType() {
    return networkFabricType;
  }

  public void setNetworkFabricType(NetworkFabricTypeEnum networkFabricType) {
    this.networkFabricType = networkFabricType;
  }


  public CreateEnvironmentRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateEnvironmentRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * A collection of up to 50 unique tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateEnvironmentRequest createEnvironmentRequest = (CreateEnvironmentRequest) o;
    return Objects.equals(this.clientToken, createEnvironmentRequest.clientToken) &&
        Objects.equals(this.description, createEnvironmentRequest.description) &&
        Objects.equals(this.name, createEnvironmentRequest.name) &&
        Objects.equals(this.networkFabricType, createEnvironmentRequest.networkFabricType) &&
        Objects.equals(this.tags, createEnvironmentRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientToken, description, name, networkFabricType, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateEnvironmentRequest {\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    networkFabricType: ").append(toIndentedString(networkFabricType)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ClientToken");
    openapiFields.add("Description");
    openapiFields.add("Name");
    openapiFields.add("NetworkFabricType");
    openapiFields.add("Tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Name");
    openapiRequiredFields.add("NetworkFabricType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateEnvironmentRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateEnvironmentRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateEnvironmentRequest is not found in the empty JSON string", CreateEnvironmentRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateEnvironmentRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateEnvironmentRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateEnvironmentRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ClientToken") != null && !jsonObj.get("ClientToken").isJsonNull()) && !jsonObj.get("ClientToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ClientToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ClientToken").toString()));
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if (!jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if (!jsonObj.get("NetworkFabricType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NetworkFabricType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NetworkFabricType").toString()));
      }
      // validate the required field `NetworkFabricType`
      NetworkFabricTypeEnum.validateJsonElement(jsonObj.get("NetworkFabricType"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateEnvironmentRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateEnvironmentRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateEnvironmentRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateEnvironmentRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateEnvironmentRequest>() {
           @Override
           public void write(JsonWriter out, CreateEnvironmentRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateEnvironmentRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateEnvironmentRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateEnvironmentRequest
   * @throws IOException if the JSON string is invalid with respect to CreateEnvironmentRequest
   */
  public static CreateEnvironmentRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateEnvironmentRequest.class);
  }

  /**
   * Convert an instance of CreateEnvironmentRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

