/*
 * AWS Migration Hub Refactor Spaces
 * <p><fullname>Amazon Web Services Migration Hub Refactor Spaces</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Amazon Web Services Migration Hub Refactor Spaces (Refactor Spaces). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the Amazon Web Services SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"https://aws.amazon.com/tools/#SDKs\">Amazon Web Services SDKs</a>.</p> <p>To share Refactor Spaces environments with other Amazon Web Services accounts or with Organizations and their OUs, use Resource Access Manager's <code>CreateResourceShare</code> API. See <a href=\"https://docs.aws.amazon.com/ram/latest/APIReference/API_CreateResourceShare.html\">CreateResourceShare</a> in the <i>Amazon Web Services RAM API Reference</i>.</p></p>
 *
 * The version of the OpenAPI document: 2021-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.CreateRouteResponseUriPathRoute;
import org.openapitools.client.model.RouteState;
import org.openapitools.client.model.RouteType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateRouteResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:02.463365-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateRouteResponse {
  public static final String SERIALIZED_NAME_APPLICATION_ID = "ApplicationId";
  @SerializedName(SERIALIZED_NAME_APPLICATION_ID)
  private String applicationId;

  public static final String SERIALIZED_NAME_ARN = "Arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_CREATED_BY_ACCOUNT_ID = "CreatedByAccountId";
  @SerializedName(SERIALIZED_NAME_CREATED_BY_ACCOUNT_ID)
  private String createdByAccountId;

  public static final String SERIALIZED_NAME_CREATED_TIME = "CreatedTime";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME)
  private OffsetDateTime createdTime;

  public static final String SERIALIZED_NAME_LAST_UPDATED_TIME = "LastUpdatedTime";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_TIME)
  private OffsetDateTime lastUpdatedTime;

  public static final String SERIALIZED_NAME_OWNER_ACCOUNT_ID = "OwnerAccountId";
  @SerializedName(SERIALIZED_NAME_OWNER_ACCOUNT_ID)
  private String ownerAccountId;

  public static final String SERIALIZED_NAME_ROUTE_ID = "RouteId";
  @SerializedName(SERIALIZED_NAME_ROUTE_ID)
  private String routeId;

  public static final String SERIALIZED_NAME_ROUTE_TYPE = "RouteType";
  @SerializedName(SERIALIZED_NAME_ROUTE_TYPE)
  private RouteType routeType;

  public static final String SERIALIZED_NAME_SERVICE_ID = "ServiceId";
  @SerializedName(SERIALIZED_NAME_SERVICE_ID)
  private String serviceId;

  public static final String SERIALIZED_NAME_STATE = "State";
  @SerializedName(SERIALIZED_NAME_STATE)
  private RouteState state;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public static final String SERIALIZED_NAME_URI_PATH_ROUTE = "UriPathRoute";
  @SerializedName(SERIALIZED_NAME_URI_PATH_ROUTE)
  private CreateRouteResponseUriPathRoute uriPathRoute;

  public CreateRouteResponse() {
  }

  public CreateRouteResponse applicationId(String applicationId) {
    this.applicationId = applicationId;
    return this;
  }

  /**
   * Get applicationId
   * @return applicationId
   */
  @javax.annotation.Nullable
  public String getApplicationId() {
    return applicationId;
  }

  public void setApplicationId(String applicationId) {
    this.applicationId = applicationId;
  }


  public CreateRouteResponse arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public CreateRouteResponse createdByAccountId(String createdByAccountId) {
    this.createdByAccountId = createdByAccountId;
    return this;
  }

  /**
   * Get createdByAccountId
   * @return createdByAccountId
   */
  @javax.annotation.Nullable
  public String getCreatedByAccountId() {
    return createdByAccountId;
  }

  public void setCreatedByAccountId(String createdByAccountId) {
    this.createdByAccountId = createdByAccountId;
  }


  public CreateRouteResponse createdTime(OffsetDateTime createdTime) {
    this.createdTime = createdTime;
    return this;
  }

  /**
   * Get createdTime
   * @return createdTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedTime() {
    return createdTime;
  }

  public void setCreatedTime(OffsetDateTime createdTime) {
    this.createdTime = createdTime;
  }


  public CreateRouteResponse lastUpdatedTime(OffsetDateTime lastUpdatedTime) {
    this.lastUpdatedTime = lastUpdatedTime;
    return this;
  }

  /**
   * Get lastUpdatedTime
   * @return lastUpdatedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdatedTime() {
    return lastUpdatedTime;
  }

  public void setLastUpdatedTime(OffsetDateTime lastUpdatedTime) {
    this.lastUpdatedTime = lastUpdatedTime;
  }


  public CreateRouteResponse ownerAccountId(String ownerAccountId) {
    this.ownerAccountId = ownerAccountId;
    return this;
  }

  /**
   * Get ownerAccountId
   * @return ownerAccountId
   */
  @javax.annotation.Nullable
  public String getOwnerAccountId() {
    return ownerAccountId;
  }

  public void setOwnerAccountId(String ownerAccountId) {
    this.ownerAccountId = ownerAccountId;
  }


  public CreateRouteResponse routeId(String routeId) {
    this.routeId = routeId;
    return this;
  }

  /**
   * Get routeId
   * @return routeId
   */
  @javax.annotation.Nullable
  public String getRouteId() {
    return routeId;
  }

  public void setRouteId(String routeId) {
    this.routeId = routeId;
  }


  public CreateRouteResponse routeType(RouteType routeType) {
    this.routeType = routeType;
    return this;
  }

  /**
   * Get routeType
   * @return routeType
   */
  @javax.annotation.Nullable
  public RouteType getRouteType() {
    return routeType;
  }

  public void setRouteType(RouteType routeType) {
    this.routeType = routeType;
  }


  public CreateRouteResponse serviceId(String serviceId) {
    this.serviceId = serviceId;
    return this;
  }

  /**
   * Get serviceId
   * @return serviceId
   */
  @javax.annotation.Nullable
  public String getServiceId() {
    return serviceId;
  }

  public void setServiceId(String serviceId) {
    this.serviceId = serviceId;
  }


  public CreateRouteResponse state(RouteState state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public RouteState getState() {
    return state;
  }

  public void setState(RouteState state) {
    this.state = state;
  }


  public CreateRouteResponse tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }


  public CreateRouteResponse uriPathRoute(CreateRouteResponseUriPathRoute uriPathRoute) {
    this.uriPathRoute = uriPathRoute;
    return this;
  }

  /**
   * Get uriPathRoute
   * @return uriPathRoute
   */
  @javax.annotation.Nullable
  public CreateRouteResponseUriPathRoute getUriPathRoute() {
    return uriPathRoute;
  }

  public void setUriPathRoute(CreateRouteResponseUriPathRoute uriPathRoute) {
    this.uriPathRoute = uriPathRoute;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateRouteResponse createRouteResponse = (CreateRouteResponse) o;
    return Objects.equals(this.applicationId, createRouteResponse.applicationId) &&
        Objects.equals(this.arn, createRouteResponse.arn) &&
        Objects.equals(this.createdByAccountId, createRouteResponse.createdByAccountId) &&
        Objects.equals(this.createdTime, createRouteResponse.createdTime) &&
        Objects.equals(this.lastUpdatedTime, createRouteResponse.lastUpdatedTime) &&
        Objects.equals(this.ownerAccountId, createRouteResponse.ownerAccountId) &&
        Objects.equals(this.routeId, createRouteResponse.routeId) &&
        Objects.equals(this.routeType, createRouteResponse.routeType) &&
        Objects.equals(this.serviceId, createRouteResponse.serviceId) &&
        Objects.equals(this.state, createRouteResponse.state) &&
        Objects.equals(this.tags, createRouteResponse.tags) &&
        Objects.equals(this.uriPathRoute, createRouteResponse.uriPathRoute);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationId, arn, createdByAccountId, createdTime, lastUpdatedTime, ownerAccountId, routeId, routeType, serviceId, state, tags, uriPathRoute);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateRouteResponse {\n");
    sb.append("    applicationId: ").append(toIndentedString(applicationId)).append("\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    createdByAccountId: ").append(toIndentedString(createdByAccountId)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    lastUpdatedTime: ").append(toIndentedString(lastUpdatedTime)).append("\n");
    sb.append("    ownerAccountId: ").append(toIndentedString(ownerAccountId)).append("\n");
    sb.append("    routeId: ").append(toIndentedString(routeId)).append("\n");
    sb.append("    routeType: ").append(toIndentedString(routeType)).append("\n");
    sb.append("    serviceId: ").append(toIndentedString(serviceId)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    uriPathRoute: ").append(toIndentedString(uriPathRoute)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ApplicationId");
    openapiFields.add("Arn");
    openapiFields.add("CreatedByAccountId");
    openapiFields.add("CreatedTime");
    openapiFields.add("LastUpdatedTime");
    openapiFields.add("OwnerAccountId");
    openapiFields.add("RouteId");
    openapiFields.add("RouteType");
    openapiFields.add("ServiceId");
    openapiFields.add("State");
    openapiFields.add("Tags");
    openapiFields.add("UriPathRoute");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateRouteResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateRouteResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateRouteResponse is not found in the empty JSON string", CreateRouteResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateRouteResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateRouteResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ApplicationId`
      if (jsonObj.get("ApplicationId") != null && !jsonObj.get("ApplicationId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ApplicationId"));
      }
      // validate the optional field `Arn`
      if (jsonObj.get("Arn") != null && !jsonObj.get("Arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Arn"));
      }
      // validate the optional field `CreatedByAccountId`
      if (jsonObj.get("CreatedByAccountId") != null && !jsonObj.get("CreatedByAccountId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CreatedByAccountId"));
      }
      // validate the optional field `CreatedTime`
      if (jsonObj.get("CreatedTime") != null && !jsonObj.get("CreatedTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreatedTime"));
      }
      // validate the optional field `LastUpdatedTime`
      if (jsonObj.get("LastUpdatedTime") != null && !jsonObj.get("LastUpdatedTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastUpdatedTime"));
      }
      // validate the optional field `OwnerAccountId`
      if (jsonObj.get("OwnerAccountId") != null && !jsonObj.get("OwnerAccountId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OwnerAccountId"));
      }
      // validate the optional field `RouteId`
      if (jsonObj.get("RouteId") != null && !jsonObj.get("RouteId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RouteId"));
      }
      // validate the optional field `RouteType`
      if (jsonObj.get("RouteType") != null && !jsonObj.get("RouteType").isJsonNull()) {
        RouteType.validateJsonElement(jsonObj.get("RouteType"));
      }
      // validate the optional field `ServiceId`
      if (jsonObj.get("ServiceId") != null && !jsonObj.get("ServiceId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ServiceId"));
      }
      // validate the optional field `State`
      if (jsonObj.get("State") != null && !jsonObj.get("State").isJsonNull()) {
        RouteState.validateJsonElement(jsonObj.get("State"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("Tags"));
      }
      // validate the optional field `UriPathRoute`
      if (jsonObj.get("UriPathRoute") != null && !jsonObj.get("UriPathRoute").isJsonNull()) {
        CreateRouteResponseUriPathRoute.validateJsonElement(jsonObj.get("UriPathRoute"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateRouteResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateRouteResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateRouteResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateRouteResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateRouteResponse>() {
           @Override
           public void write(JsonWriter out, CreateRouteResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateRouteResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateRouteResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateRouteResponse
   * @throws IOException if the JSON string is invalid with respect to CreateRouteResponse
   */
  public static CreateRouteResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateRouteResponse.class);
  }

  /**
   * Convert an instance of CreateRouteResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

