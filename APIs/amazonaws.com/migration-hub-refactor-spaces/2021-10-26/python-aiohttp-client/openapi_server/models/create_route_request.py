# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_route_request_default_route import CreateRouteRequestDefaultRoute
from openapi_server.models.create_route_request_uri_path_route import CreateRouteRequestUriPathRoute
import re
from openapi_server import util


class CreateRouteRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_token: str=None, default_route: CreateRouteRequestDefaultRoute=None, route_type: str=None, service_identifier: str=None, tags: Dict[str, str]=None, uri_path_route: CreateRouteRequestUriPathRoute=None):
        """CreateRouteRequest - a model defined in OpenAPI

        :param client_token: The client_token of this CreateRouteRequest.
        :param default_route: The default_route of this CreateRouteRequest.
        :param route_type: The route_type of this CreateRouteRequest.
        :param service_identifier: The service_identifier of this CreateRouteRequest.
        :param tags: The tags of this CreateRouteRequest.
        :param uri_path_route: The uri_path_route of this CreateRouteRequest.
        """
        self.openapi_types = {
            'client_token': str,
            'default_route': CreateRouteRequestDefaultRoute,
            'route_type': str,
            'service_identifier': str,
            'tags': Dict[str, str],
            'uri_path_route': CreateRouteRequestUriPathRoute
        }

        self.attribute_map = {
            'client_token': 'ClientToken',
            'default_route': 'DefaultRoute',
            'route_type': 'RouteType',
            'service_identifier': 'ServiceIdentifier',
            'tags': 'Tags',
            'uri_path_route': 'UriPathRoute'
        }

        self._client_token = client_token
        self._default_route = default_route
        self._route_type = route_type
        self._service_identifier = service_identifier
        self._tags = tags
        self._uri_path_route = uri_path_route

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateRouteRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateRoute_request of this CreateRouteRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_token(self):
        """Gets the client_token of this CreateRouteRequest.

        A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

        :return: The client_token of this CreateRouteRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateRouteRequest.

        A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

        :param client_token: The client_token of this CreateRouteRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 64:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `64`")
        if client_token is not None and len(client_token) < 1:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `1`")
        if client_token is not None and not re.search(r'^[\x20-\x7E]{1,64}$', client_token):
            raise ValueError("Invalid value for `client_token`, must be a follow pattern or equal to `/^[\x20-\x7E]{1,64}$/`")

        self._client_token = client_token

    @property
    def default_route(self):
        """Gets the default_route of this CreateRouteRequest.


        :return: The default_route of this CreateRouteRequest.
        :rtype: CreateRouteRequestDefaultRoute
        """
        return self._default_route

    @default_route.setter
    def default_route(self, default_route):
        """Sets the default_route of this CreateRouteRequest.


        :param default_route: The default_route of this CreateRouteRequest.
        :type default_route: CreateRouteRequestDefaultRoute
        """

        self._default_route = default_route

    @property
    def route_type(self):
        """Gets the route_type of this CreateRouteRequest.

        The route type of the route. <code>DEFAULT</code> indicates that all traffic that does not match another route is forwarded to the default route. Applications must have a default route before any other routes can be created. <code>URI_PATH</code> indicates a route that is based on a URI path.

        :return: The route_type of this CreateRouteRequest.
        :rtype: str
        """
        return self._route_type

    @route_type.setter
    def route_type(self, route_type):
        """Sets the route_type of this CreateRouteRequest.

        The route type of the route. <code>DEFAULT</code> indicates that all traffic that does not match another route is forwarded to the default route. Applications must have a default route before any other routes can be created. <code>URI_PATH</code> indicates a route that is based on a URI path.

        :param route_type: The route_type of this CreateRouteRequest.
        :type route_type: str
        """
        allowed_values = ["DEFAULT", "URI_PATH"]  # noqa: E501
        if route_type not in allowed_values:
            raise ValueError(
                "Invalid value for `route_type` ({0}), must be one of {1}"
                .format(route_type, allowed_values)
            )

        self._route_type = route_type

    @property
    def service_identifier(self):
        """Gets the service_identifier of this CreateRouteRequest.

        The ID of the service in which the route is created. Traffic that matches this route is forwarded to this service.

        :return: The service_identifier of this CreateRouteRequest.
        :rtype: str
        """
        return self._service_identifier

    @service_identifier.setter
    def service_identifier(self, service_identifier):
        """Sets the service_identifier of this CreateRouteRequest.

        The ID of the service in which the route is created. Traffic that matches this route is forwarded to this service.

        :param service_identifier: The service_identifier of this CreateRouteRequest.
        :type service_identifier: str
        """
        if service_identifier is None:
            raise ValueError("Invalid value for `service_identifier`, must not be `None`")
        if service_identifier is not None and len(service_identifier) > 14:
            raise ValueError("Invalid value for `service_identifier`, length must be less than or equal to `14`")
        if service_identifier is not None and len(service_identifier) < 14:
            raise ValueError("Invalid value for `service_identifier`, length must be greater than or equal to `14`")
        if service_identifier is not None and not re.search(r'^svc-[0-9A-Za-z]{10}$', service_identifier):
            raise ValueError("Invalid value for `service_identifier`, must be a follow pattern or equal to `/^svc-[0-9A-Za-z]{10}$/`")

        self._service_identifier = service_identifier

    @property
    def tags(self):
        """Gets the tags of this CreateRouteRequest.

        A collection of up to 50 unique tags

        :return: The tags of this CreateRouteRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateRouteRequest.

        A collection of up to 50 unique tags

        :param tags: The tags of this CreateRouteRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags

    @property
    def uri_path_route(self):
        """Gets the uri_path_route of this CreateRouteRequest.


        :return: The uri_path_route of this CreateRouteRequest.
        :rtype: CreateRouteRequestUriPathRoute
        """
        return self._uri_path_route

    @uri_path_route.setter
    def uri_path_route(self, uri_path_route):
        """Sets the uri_path_route of this CreateRouteRequest.


        :param uri_path_route: The uri_path_route of this CreateRouteRequest.
        :type uri_path_route: CreateRouteRequestUriPathRoute
        """

        self._uri_path_route = uri_path_route
