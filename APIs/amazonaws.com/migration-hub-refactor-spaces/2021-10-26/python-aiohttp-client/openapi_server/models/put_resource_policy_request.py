# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class PutResourcePolicyRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, policy: str=None, resource_arn: str=None):
        """PutResourcePolicyRequest - a model defined in OpenAPI

        :param policy: The policy of this PutResourcePolicyRequest.
        :param resource_arn: The resource_arn of this PutResourcePolicyRequest.
        """
        self.openapi_types = {
            'policy': str,
            'resource_arn': str
        }

        self.attribute_map = {
            'policy': 'Policy',
            'resource_arn': 'ResourceArn'
        }

        self._policy = policy
        self._resource_arn = resource_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutResourcePolicyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutResourcePolicy_request of this PutResourcePolicyRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def policy(self):
        """Gets the policy of this PutResourcePolicyRequest.

        A JSON-formatted string for an Amazon Web Services resource-based policy. 

        :return: The policy of this PutResourcePolicyRequest.
        :rtype: str
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this PutResourcePolicyRequest.

        A JSON-formatted string for an Amazon Web Services resource-based policy. 

        :param policy: The policy of this PutResourcePolicyRequest.
        :type policy: str
        """
        if policy is None:
            raise ValueError("Invalid value for `policy`, must not be `None`")
        if policy is not None and len(policy) > 300000:
            raise ValueError("Invalid value for `policy`, length must be less than or equal to `300000`")
        if policy is not None and len(policy) < 1:
            raise ValueError("Invalid value for `policy`, length must be greater than or equal to `1`")
        if policy is not None and not re.search(r'^.*\S.*$', policy):
            raise ValueError("Invalid value for `policy`, must be a follow pattern or equal to `/^.*\S.*$/`")

        self._policy = policy

    @property
    def resource_arn(self):
        """Gets the resource_arn of this PutResourcePolicyRequest.

        The Amazon Resource Name (ARN) of the resource to which the policy is being attached. 

        :return: The resource_arn of this PutResourcePolicyRequest.
        :rtype: str
        """
        return self._resource_arn

    @resource_arn.setter
    def resource_arn(self, resource_arn):
        """Sets the resource_arn of this PutResourcePolicyRequest.

        The Amazon Resource Name (ARN) of the resource to which the policy is being attached. 

        :param resource_arn: The resource_arn of this PutResourcePolicyRequest.
        :type resource_arn: str
        """
        if resource_arn is None:
            raise ValueError("Invalid value for `resource_arn`, must not be `None`")
        if resource_arn is not None and len(resource_arn) > 2048:
            raise ValueError("Invalid value for `resource_arn`, length must be less than or equal to `2048`")
        if resource_arn is not None and len(resource_arn) < 20:
            raise ValueError("Invalid value for `resource_arn`, length must be greater than or equal to `20`")
        if resource_arn is not None and not re.search(r'^arn:aws:refactor-spaces:[a-zA-Z0-9\-]+:\w{12}:[a-zA-Z_0-9+=,.@\-_\/]+$', resource_arn):
            raise ValueError("Invalid value for `resource_arn`, must be a follow pattern or equal to `/^arn:aws:refactor-spaces:[a-zA-Z0-9\-]+:\w{12}:[a-zA-Z_0-9+=,.@\-_\/]+$/`")

        self._resource_arn = resource_arn
