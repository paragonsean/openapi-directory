# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CreateEnvironmentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_token: str=None, description: str=None, name: str=None, network_fabric_type: str=None, tags: Dict[str, str]=None):
        """CreateEnvironmentRequest - a model defined in OpenAPI

        :param client_token: The client_token of this CreateEnvironmentRequest.
        :param description: The description of this CreateEnvironmentRequest.
        :param name: The name of this CreateEnvironmentRequest.
        :param network_fabric_type: The network_fabric_type of this CreateEnvironmentRequest.
        :param tags: The tags of this CreateEnvironmentRequest.
        """
        self.openapi_types = {
            'client_token': str,
            'description': str,
            'name': str,
            'network_fabric_type': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'client_token': 'ClientToken',
            'description': 'Description',
            'name': 'Name',
            'network_fabric_type': 'NetworkFabricType',
            'tags': 'Tags'
        }

        self._client_token = client_token
        self._description = description
        self._name = name
        self._network_fabric_type = network_fabric_type
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateEnvironmentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateEnvironment_request of this CreateEnvironmentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_token(self):
        """Gets the client_token of this CreateEnvironmentRequest.

        A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

        :return: The client_token of this CreateEnvironmentRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateEnvironmentRequest.

        A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

        :param client_token: The client_token of this CreateEnvironmentRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 64:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `64`")
        if client_token is not None and len(client_token) < 1:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `1`")
        if client_token is not None and not re.search(r'^[\x20-\x7E]{1,64}$', client_token):
            raise ValueError("Invalid value for `client_token`, must be a follow pattern or equal to `/^[\x20-\x7E]{1,64}$/`")

        self._client_token = client_token

    @property
    def description(self):
        """Gets the description of this CreateEnvironmentRequest.

        The description of the environment.

        :return: The description of this CreateEnvironmentRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateEnvironmentRequest.

        The description of the environment.

        :param description: The description of this CreateEnvironmentRequest.
        :type description: str
        """
        if description is not None and len(description) > 256:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `256`")
        if description is not None and len(description) < 1:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")
        if description is not None and not re.search(r'^[a-zA-Z0-9-_\s\.\!\*\#\@\\']+$', description):
            raise ValueError("Invalid value for `description`, must be a follow pattern or equal to `/^[a-zA-Z0-9-_\s\.\!\*\#\@\']+$/`")

        self._description = description

    @property
    def name(self):
        """Gets the name of this CreateEnvironmentRequest.

        The name of the environment.

        :return: The name of this CreateEnvironmentRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateEnvironmentRequest.

        The name of the environment.

        :param name: The name of this CreateEnvironmentRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 63:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `63`")
        if name is not None and len(name) < 3:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `3`")
        if name is not None and not re.search(r'^(?!env-)[a-zA-Z0-9]+[a-zA-Z0-9-_ ]+$', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^(?!env-)[a-zA-Z0-9]+[a-zA-Z0-9-_ ]+$/`")

        self._name = name

    @property
    def network_fabric_type(self):
        """Gets the network_fabric_type of this CreateEnvironmentRequest.

        The network fabric type of the environment.

        :return: The network_fabric_type of this CreateEnvironmentRequest.
        :rtype: str
        """
        return self._network_fabric_type

    @network_fabric_type.setter
    def network_fabric_type(self, network_fabric_type):
        """Sets the network_fabric_type of this CreateEnvironmentRequest.

        The network fabric type of the environment.

        :param network_fabric_type: The network_fabric_type of this CreateEnvironmentRequest.
        :type network_fabric_type: str
        """
        allowed_values = ["TRANSIT_GATEWAY", "NONE"]  # noqa: E501
        if network_fabric_type not in allowed_values:
            raise ValueError(
                "Invalid value for `network_fabric_type` ({0}), must be one of {1}"
                .format(network_fabric_type, allowed_values)
            )

        self._network_fabric_type = network_fabric_type

    @property
    def tags(self):
        """Gets the tags of this CreateEnvironmentRequest.

        A collection of up to 50 unique tags

        :return: The tags of this CreateEnvironmentRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateEnvironmentRequest.

        A collection of up to 50 unique tags

        :param tags: The tags of this CreateEnvironmentRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags
