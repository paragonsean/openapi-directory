# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateRouteRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activation_state: str=None):
        """UpdateRouteRequest - a model defined in OpenAPI

        :param activation_state: The activation_state of this UpdateRouteRequest.
        """
        self.openapi_types = {
            'activation_state': str
        }

        self.attribute_map = {
            'activation_state': 'ActivationState'
        }

        self._activation_state = activation_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateRouteRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateRoute_request of this UpdateRouteRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activation_state(self):
        """Gets the activation_state of this UpdateRouteRequest.

         If set to <code>ACTIVE</code>, traffic is forwarded to this route’s service after the route is updated. 

        :return: The activation_state of this UpdateRouteRequest.
        :rtype: str
        """
        return self._activation_state

    @activation_state.setter
    def activation_state(self, activation_state):
        """Sets the activation_state of this UpdateRouteRequest.

         If set to <code>ACTIVE</code>, traffic is forwarded to this route’s service after the route is updated. 

        :param activation_state: The activation_state of this UpdateRouteRequest.
        :type activation_state: str
        """
        allowed_values = ["ACTIVE", "INACTIVE"]  # noqa: E501
        if activation_state not in allowed_values:
            raise ValueError(
                "Invalid value for `activation_state` ({0}), must be one of {1}"
                .format(activation_state, allowed_values)
            )

        self._activation_state = activation_state
