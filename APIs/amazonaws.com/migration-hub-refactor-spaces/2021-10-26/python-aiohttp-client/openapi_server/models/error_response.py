# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error_code import ErrorCode
from openapi_server.models.error_resource_type import ErrorResourceType
from openapi_server import util


class ErrorResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, additional_details: Dict=None, code: ErrorCode=None, message: str=None, resource_identifier: str=None, resource_type: ErrorResourceType=None):
        """ErrorResponse - a model defined in OpenAPI

        :param account_id: The account_id of this ErrorResponse.
        :param additional_details: The additional_details of this ErrorResponse.
        :param code: The code of this ErrorResponse.
        :param message: The message of this ErrorResponse.
        :param resource_identifier: The resource_identifier of this ErrorResponse.
        :param resource_type: The resource_type of this ErrorResponse.
        """
        self.openapi_types = {
            'account_id': str,
            'additional_details': Dict,
            'code': ErrorCode,
            'message': str,
            'resource_identifier': str,
            'resource_type': ErrorResourceType
        }

        self.attribute_map = {
            'account_id': 'AccountId',
            'additional_details': 'AdditionalDetails',
            'code': 'Code',
            'message': 'Message',
            'resource_identifier': 'ResourceIdentifier',
            'resource_type': 'ResourceType'
        }

        self._account_id = account_id
        self._additional_details = additional_details
        self._code = code
        self._message = message
        self._resource_identifier = resource_identifier
        self._resource_type = resource_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ErrorResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ErrorResponse of this ErrorResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this ErrorResponse.


        :return: The account_id of this ErrorResponse.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this ErrorResponse.


        :param account_id: The account_id of this ErrorResponse.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def additional_details(self):
        """Gets the additional_details of this ErrorResponse.


        :return: The additional_details of this ErrorResponse.
        :rtype: Dict
        """
        return self._additional_details

    @additional_details.setter
    def additional_details(self, additional_details):
        """Sets the additional_details of this ErrorResponse.


        :param additional_details: The additional_details of this ErrorResponse.
        :type additional_details: Dict
        """

        self._additional_details = additional_details

    @property
    def code(self):
        """Gets the code of this ErrorResponse.


        :return: The code of this ErrorResponse.
        :rtype: ErrorCode
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ErrorResponse.


        :param code: The code of this ErrorResponse.
        :type code: ErrorCode
        """

        self._code = code

    @property
    def message(self):
        """Gets the message of this ErrorResponse.


        :return: The message of this ErrorResponse.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ErrorResponse.


        :param message: The message of this ErrorResponse.
        :type message: str
        """

        self._message = message

    @property
    def resource_identifier(self):
        """Gets the resource_identifier of this ErrorResponse.


        :return: The resource_identifier of this ErrorResponse.
        :rtype: str
        """
        return self._resource_identifier

    @resource_identifier.setter
    def resource_identifier(self, resource_identifier):
        """Sets the resource_identifier of this ErrorResponse.


        :param resource_identifier: The resource_identifier of this ErrorResponse.
        :type resource_identifier: str
        """

        self._resource_identifier = resource_identifier

    @property
    def resource_type(self):
        """Gets the resource_type of this ErrorResponse.


        :return: The resource_type of this ErrorResponse.
        :rtype: ErrorResourceType
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this ErrorResponse.


        :param resource_type: The resource_type of this ErrorResponse.
        :type resource_type: ErrorResourceType
        """

        self._resource_type = resource_type
