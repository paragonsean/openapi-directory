# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_service_request_lambda_endpoint import CreateServiceRequestLambdaEndpoint
from openapi_server.models.create_service_request_url_endpoint import CreateServiceRequestUrlEndpoint
import re
from openapi_server import util


class CreateServiceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_token: str=None, description: str=None, endpoint_type: str=None, lambda_endpoint: CreateServiceRequestLambdaEndpoint=None, name: str=None, tags: Dict[str, str]=None, url_endpoint: CreateServiceRequestUrlEndpoint=None, vpc_id: str=None):
        """CreateServiceRequest - a model defined in OpenAPI

        :param client_token: The client_token of this CreateServiceRequest.
        :param description: The description of this CreateServiceRequest.
        :param endpoint_type: The endpoint_type of this CreateServiceRequest.
        :param lambda_endpoint: The lambda_endpoint of this CreateServiceRequest.
        :param name: The name of this CreateServiceRequest.
        :param tags: The tags of this CreateServiceRequest.
        :param url_endpoint: The url_endpoint of this CreateServiceRequest.
        :param vpc_id: The vpc_id of this CreateServiceRequest.
        """
        self.openapi_types = {
            'client_token': str,
            'description': str,
            'endpoint_type': str,
            'lambda_endpoint': CreateServiceRequestLambdaEndpoint,
            'name': str,
            'tags': Dict[str, str],
            'url_endpoint': CreateServiceRequestUrlEndpoint,
            'vpc_id': str
        }

        self.attribute_map = {
            'client_token': 'ClientToken',
            'description': 'Description',
            'endpoint_type': 'EndpointType',
            'lambda_endpoint': 'LambdaEndpoint',
            'name': 'Name',
            'tags': 'Tags',
            'url_endpoint': 'UrlEndpoint',
            'vpc_id': 'VpcId'
        }

        self._client_token = client_token
        self._description = description
        self._endpoint_type = endpoint_type
        self._lambda_endpoint = lambda_endpoint
        self._name = name
        self._tags = tags
        self._url_endpoint = url_endpoint
        self._vpc_id = vpc_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateServiceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateService_request of this CreateServiceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_token(self):
        """Gets the client_token of this CreateServiceRequest.

        A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

        :return: The client_token of this CreateServiceRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateServiceRequest.

        A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

        :param client_token: The client_token of this CreateServiceRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 64:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `64`")
        if client_token is not None and len(client_token) < 1:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `1`")
        if client_token is not None and not re.search(r'^[\x20-\x7E]{1,64}$', client_token):
            raise ValueError("Invalid value for `client_token`, must be a follow pattern or equal to `/^[\x20-\x7E]{1,64}$/`")

        self._client_token = client_token

    @property
    def description(self):
        """Gets the description of this CreateServiceRequest.

        The description of the service.

        :return: The description of this CreateServiceRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateServiceRequest.

        The description of the service.

        :param description: The description of this CreateServiceRequest.
        :type description: str
        """
        if description is not None and len(description) > 256:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `256`")
        if description is not None and len(description) < 1:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")
        if description is not None and not re.search(r'^[a-zA-Z0-9-_\s\.\!\*\#\@\\']+$', description):
            raise ValueError("Invalid value for `description`, must be a follow pattern or equal to `/^[a-zA-Z0-9-_\s\.\!\*\#\@\']+$/`")

        self._description = description

    @property
    def endpoint_type(self):
        """Gets the endpoint_type of this CreateServiceRequest.

        The type of endpoint to use for the service. The type can be a URL in a VPC or an Lambda function.

        :return: The endpoint_type of this CreateServiceRequest.
        :rtype: str
        """
        return self._endpoint_type

    @endpoint_type.setter
    def endpoint_type(self, endpoint_type):
        """Sets the endpoint_type of this CreateServiceRequest.

        The type of endpoint to use for the service. The type can be a URL in a VPC or an Lambda function.

        :param endpoint_type: The endpoint_type of this CreateServiceRequest.
        :type endpoint_type: str
        """
        allowed_values = ["LAMBDA", "URL"]  # noqa: E501
        if endpoint_type not in allowed_values:
            raise ValueError(
                "Invalid value for `endpoint_type` ({0}), must be one of {1}"
                .format(endpoint_type, allowed_values)
            )

        self._endpoint_type = endpoint_type

    @property
    def lambda_endpoint(self):
        """Gets the lambda_endpoint of this CreateServiceRequest.


        :return: The lambda_endpoint of this CreateServiceRequest.
        :rtype: CreateServiceRequestLambdaEndpoint
        """
        return self._lambda_endpoint

    @lambda_endpoint.setter
    def lambda_endpoint(self, lambda_endpoint):
        """Sets the lambda_endpoint of this CreateServiceRequest.


        :param lambda_endpoint: The lambda_endpoint of this CreateServiceRequest.
        :type lambda_endpoint: CreateServiceRequestLambdaEndpoint
        """

        self._lambda_endpoint = lambda_endpoint

    @property
    def name(self):
        """Gets the name of this CreateServiceRequest.

        The name of the service.

        :return: The name of this CreateServiceRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateServiceRequest.

        The name of the service.

        :param name: The name of this CreateServiceRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 63:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `63`")
        if name is not None and len(name) < 3:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `3`")
        if name is not None and not re.search(r'^(?!svc-)[a-zA-Z0-9]+[a-zA-Z0-9-_ ]+$', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^(?!svc-)[a-zA-Z0-9]+[a-zA-Z0-9-_ ]+$/`")

        self._name = name

    @property
    def tags(self):
        """Gets the tags of this CreateServiceRequest.

        A collection of up to 50 unique tags

        :return: The tags of this CreateServiceRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateServiceRequest.

        A collection of up to 50 unique tags

        :param tags: The tags of this CreateServiceRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags

    @property
    def url_endpoint(self):
        """Gets the url_endpoint of this CreateServiceRequest.


        :return: The url_endpoint of this CreateServiceRequest.
        :rtype: CreateServiceRequestUrlEndpoint
        """
        return self._url_endpoint

    @url_endpoint.setter
    def url_endpoint(self, url_endpoint):
        """Sets the url_endpoint of this CreateServiceRequest.


        :param url_endpoint: The url_endpoint of this CreateServiceRequest.
        :type url_endpoint: CreateServiceRequestUrlEndpoint
        """

        self._url_endpoint = url_endpoint

    @property
    def vpc_id(self):
        """Gets the vpc_id of this CreateServiceRequest.

        The ID of the VPC.

        :return: The vpc_id of this CreateServiceRequest.
        :rtype: str
        """
        return self._vpc_id

    @vpc_id.setter
    def vpc_id(self, vpc_id):
        """Sets the vpc_id of this CreateServiceRequest.

        The ID of the VPC.

        :param vpc_id: The vpc_id of this CreateServiceRequest.
        :type vpc_id: str
        """
        if vpc_id is not None and len(vpc_id) > 21:
            raise ValueError("Invalid value for `vpc_id`, length must be less than or equal to `21`")
        if vpc_id is not None and len(vpc_id) < 12:
            raise ValueError("Invalid value for `vpc_id`, length must be greater than or equal to `12`")
        if vpc_id is not None and not re.search(r'^vpc-[-a-f0-9]{8}([-a-f0-9]{9})?$', vpc_id):
            raise ValueError("Invalid value for `vpc_id`, must be a follow pattern or equal to `/^vpc-[-a-f0-9]{8}([-a-f0-9]{9})?$/`")

        self._vpc_id = vpc_id
