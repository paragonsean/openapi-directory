# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UrlEndpointInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, health_url: str=None, url: str=None):
        """UrlEndpointInput - a model defined in OpenAPI

        :param health_url: The health_url of this UrlEndpointInput.
        :param url: The url of this UrlEndpointInput.
        """
        self.openapi_types = {
            'health_url': str,
            'url': str
        }

        self.attribute_map = {
            'health_url': 'HealthUrl',
            'url': 'Url'
        }

        self._health_url = health_url
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UrlEndpointInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UrlEndpointInput of this UrlEndpointInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def health_url(self):
        """Gets the health_url of this UrlEndpointInput.


        :return: The health_url of this UrlEndpointInput.
        :rtype: str
        """
        return self._health_url

    @health_url.setter
    def health_url(self, health_url):
        """Sets the health_url of this UrlEndpointInput.


        :param health_url: The health_url of this UrlEndpointInput.
        :type health_url: str
        """

        self._health_url = health_url

    @property
    def url(self):
        """Gets the url of this UrlEndpointInput.


        :return: The url of this UrlEndpointInput.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this UrlEndpointInput.


        :param url: The url of this UrlEndpointInput.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
