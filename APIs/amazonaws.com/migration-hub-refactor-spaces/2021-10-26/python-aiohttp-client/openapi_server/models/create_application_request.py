# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_application_request_api_gateway_proxy import CreateApplicationRequestApiGatewayProxy
import re
from openapi_server import util


class CreateApplicationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_gateway_proxy: CreateApplicationRequestApiGatewayProxy=None, client_token: str=None, name: str=None, proxy_type: str=None, tags: Dict[str, str]=None, vpc_id: str=None):
        """CreateApplicationRequest - a model defined in OpenAPI

        :param api_gateway_proxy: The api_gateway_proxy of this CreateApplicationRequest.
        :param client_token: The client_token of this CreateApplicationRequest.
        :param name: The name of this CreateApplicationRequest.
        :param proxy_type: The proxy_type of this CreateApplicationRequest.
        :param tags: The tags of this CreateApplicationRequest.
        :param vpc_id: The vpc_id of this CreateApplicationRequest.
        """
        self.openapi_types = {
            'api_gateway_proxy': CreateApplicationRequestApiGatewayProxy,
            'client_token': str,
            'name': str,
            'proxy_type': str,
            'tags': Dict[str, str],
            'vpc_id': str
        }

        self.attribute_map = {
            'api_gateway_proxy': 'ApiGatewayProxy',
            'client_token': 'ClientToken',
            'name': 'Name',
            'proxy_type': 'ProxyType',
            'tags': 'Tags',
            'vpc_id': 'VpcId'
        }

        self._api_gateway_proxy = api_gateway_proxy
        self._client_token = client_token
        self._name = name
        self._proxy_type = proxy_type
        self._tags = tags
        self._vpc_id = vpc_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateApplicationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateApplication_request of this CreateApplicationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_gateway_proxy(self):
        """Gets the api_gateway_proxy of this CreateApplicationRequest.


        :return: The api_gateway_proxy of this CreateApplicationRequest.
        :rtype: CreateApplicationRequestApiGatewayProxy
        """
        return self._api_gateway_proxy

    @api_gateway_proxy.setter
    def api_gateway_proxy(self, api_gateway_proxy):
        """Sets the api_gateway_proxy of this CreateApplicationRequest.


        :param api_gateway_proxy: The api_gateway_proxy of this CreateApplicationRequest.
        :type api_gateway_proxy: CreateApplicationRequestApiGatewayProxy
        """

        self._api_gateway_proxy = api_gateway_proxy

    @property
    def client_token(self):
        """Gets the client_token of this CreateApplicationRequest.

        A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

        :return: The client_token of this CreateApplicationRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateApplicationRequest.

        A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

        :param client_token: The client_token of this CreateApplicationRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 64:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `64`")
        if client_token is not None and len(client_token) < 1:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `1`")
        if client_token is not None and not re.search(r'^[\x20-\x7E]{1,64}$', client_token):
            raise ValueError("Invalid value for `client_token`, must be a follow pattern or equal to `/^[\x20-\x7E]{1,64}$/`")

        self._client_token = client_token

    @property
    def name(self):
        """Gets the name of this CreateApplicationRequest.

        The name to use for the application. 

        :return: The name of this CreateApplicationRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateApplicationRequest.

        The name to use for the application. 

        :param name: The name of this CreateApplicationRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 63:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `63`")
        if name is not None and len(name) < 3:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `3`")
        if name is not None and not re.search(r'^(?!app-)[a-zA-Z0-9]+[a-zA-Z0-9-_ ]+$', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^(?!app-)[a-zA-Z0-9]+[a-zA-Z0-9-_ ]+$/`")

        self._name = name

    @property
    def proxy_type(self):
        """Gets the proxy_type of this CreateApplicationRequest.

        The proxy type of the proxy created within the application. 

        :return: The proxy_type of this CreateApplicationRequest.
        :rtype: str
        """
        return self._proxy_type

    @proxy_type.setter
    def proxy_type(self, proxy_type):
        """Sets the proxy_type of this CreateApplicationRequest.

        The proxy type of the proxy created within the application. 

        :param proxy_type: The proxy_type of this CreateApplicationRequest.
        :type proxy_type: str
        """
        allowed_values = ["API_GATEWAY"]  # noqa: E501
        if proxy_type not in allowed_values:
            raise ValueError(
                "Invalid value for `proxy_type` ({0}), must be one of {1}"
                .format(proxy_type, allowed_values)
            )

        self._proxy_type = proxy_type

    @property
    def tags(self):
        """Gets the tags of this CreateApplicationRequest.

        A collection of up to 50 unique tags

        :return: The tags of this CreateApplicationRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateApplicationRequest.

        A collection of up to 50 unique tags

        :param tags: The tags of this CreateApplicationRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags

    @property
    def vpc_id(self):
        """Gets the vpc_id of this CreateApplicationRequest.

        The ID of the virtual private cloud (VPC).

        :return: The vpc_id of this CreateApplicationRequest.
        :rtype: str
        """
        return self._vpc_id

    @vpc_id.setter
    def vpc_id(self, vpc_id):
        """Sets the vpc_id of this CreateApplicationRequest.

        The ID of the virtual private cloud (VPC).

        :param vpc_id: The vpc_id of this CreateApplicationRequest.
        :type vpc_id: str
        """
        if vpc_id is None:
            raise ValueError("Invalid value for `vpc_id`, must not be `None`")
        if vpc_id is not None and len(vpc_id) > 21:
            raise ValueError("Invalid value for `vpc_id`, length must be less than or equal to `21`")
        if vpc_id is not None and len(vpc_id) < 12:
            raise ValueError("Invalid value for `vpc_id`, length must be greater than or equal to `12`")
        if vpc_id is not None and not re.search(r'^vpc-[-a-f0-9]{8}([-a-f0-9]{9})?$', vpc_id):
            raise ValueError("Invalid value for `vpc_id`, must be a follow pattern or equal to `/^vpc-[-a-f0-9]{8}([-a-f0-9]{9})?$/`")

        self._vpc_id = vpc_id
