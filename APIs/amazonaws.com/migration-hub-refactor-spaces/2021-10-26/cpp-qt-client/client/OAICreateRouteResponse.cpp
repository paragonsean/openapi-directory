/**
 * AWS Migration Hub Refactor Spaces
 * <p><fullname>Amazon Web Services Migration Hub Refactor Spaces</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Amazon Web Services Migration Hub Refactor Spaces (Refactor Spaces). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the Amazon Web Services SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"https://aws.amazon.com/tools/#SDKs\">Amazon Web Services SDKs</a>.</p> <p>To share Refactor Spaces environments with other Amazon Web Services accounts or with Organizations and their OUs, use Resource Access Manager's <code>CreateResourceShare</code> API. See <a href=\"https://docs.aws.amazon.com/ram/latest/APIReference/API_CreateResourceShare.html\">CreateResourceShare</a> in the <i>Amazon Web Services RAM API Reference</i>.</p></p>
 *
 * The version of the OpenAPI document: 2021-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateRouteResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateRouteResponse::OAICreateRouteResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateRouteResponse::OAICreateRouteResponse() {
    this->initializeModel();
}

OAICreateRouteResponse::~OAICreateRouteResponse() {}

void OAICreateRouteResponse::initializeModel() {

    m_application_id_isSet = false;
    m_application_id_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_created_by_account_id_isSet = false;
    m_created_by_account_id_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_last_updated_time_isSet = false;
    m_last_updated_time_isValid = false;

    m_owner_account_id_isSet = false;
    m_owner_account_id_isValid = false;

    m_route_id_isSet = false;
    m_route_id_isValid = false;

    m_route_type_isSet = false;
    m_route_type_isValid = false;

    m_service_id_isSet = false;
    m_service_id_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_uri_path_route_isSet = false;
    m_uri_path_route_isValid = false;
}

void OAICreateRouteResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateRouteResponse::fromJsonObject(QJsonObject json) {

    m_application_id_isValid = ::OpenAPI::fromJsonValue(m_application_id, json[QString("ApplicationId")]);
    m_application_id_isSet = !json[QString("ApplicationId")].isNull() && m_application_id_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_created_by_account_id_isValid = ::OpenAPI::fromJsonValue(m_created_by_account_id, json[QString("CreatedByAccountId")]);
    m_created_by_account_id_isSet = !json[QString("CreatedByAccountId")].isNull() && m_created_by_account_id_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("CreatedTime")]);
    m_created_time_isSet = !json[QString("CreatedTime")].isNull() && m_created_time_isValid;

    m_last_updated_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time, json[QString("LastUpdatedTime")]);
    m_last_updated_time_isSet = !json[QString("LastUpdatedTime")].isNull() && m_last_updated_time_isValid;

    m_owner_account_id_isValid = ::OpenAPI::fromJsonValue(m_owner_account_id, json[QString("OwnerAccountId")]);
    m_owner_account_id_isSet = !json[QString("OwnerAccountId")].isNull() && m_owner_account_id_isValid;

    m_route_id_isValid = ::OpenAPI::fromJsonValue(m_route_id, json[QString("RouteId")]);
    m_route_id_isSet = !json[QString("RouteId")].isNull() && m_route_id_isValid;

    m_route_type_isValid = ::OpenAPI::fromJsonValue(m_route_type, json[QString("RouteType")]);
    m_route_type_isSet = !json[QString("RouteType")].isNull() && m_route_type_isValid;

    m_service_id_isValid = ::OpenAPI::fromJsonValue(m_service_id, json[QString("ServiceId")]);
    m_service_id_isSet = !json[QString("ServiceId")].isNull() && m_service_id_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_uri_path_route_isValid = ::OpenAPI::fromJsonValue(m_uri_path_route, json[QString("UriPathRoute")]);
    m_uri_path_route_isSet = !json[QString("UriPathRoute")].isNull() && m_uri_path_route_isValid;
}

QString OAICreateRouteResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateRouteResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_application_id_isSet) {
        obj.insert(QString("ApplicationId"), ::OpenAPI::toJsonValue(m_application_id));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_created_by_account_id_isSet) {
        obj.insert(QString("CreatedByAccountId"), ::OpenAPI::toJsonValue(m_created_by_account_id));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("CreatedTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_last_updated_time_isSet) {
        obj.insert(QString("LastUpdatedTime"), ::OpenAPI::toJsonValue(m_last_updated_time));
    }
    if (m_owner_account_id_isSet) {
        obj.insert(QString("OwnerAccountId"), ::OpenAPI::toJsonValue(m_owner_account_id));
    }
    if (m_route_id_isSet) {
        obj.insert(QString("RouteId"), ::OpenAPI::toJsonValue(m_route_id));
    }
    if (m_route_type.isSet()) {
        obj.insert(QString("RouteType"), ::OpenAPI::toJsonValue(m_route_type));
    }
    if (m_service_id_isSet) {
        obj.insert(QString("ServiceId"), ::OpenAPI::toJsonValue(m_service_id));
    }
    if (m_state.isSet()) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_uri_path_route.isSet()) {
        obj.insert(QString("UriPathRoute"), ::OpenAPI::toJsonValue(m_uri_path_route));
    }
    return obj;
}

QString OAICreateRouteResponse::getApplicationId() const {
    return m_application_id;
}
void OAICreateRouteResponse::setApplicationId(const QString &application_id) {
    m_application_id = application_id;
    m_application_id_isSet = true;
}

bool OAICreateRouteResponse::is_application_id_Set() const{
    return m_application_id_isSet;
}

bool OAICreateRouteResponse::is_application_id_Valid() const{
    return m_application_id_isValid;
}

QString OAICreateRouteResponse::getArn() const {
    return m_arn;
}
void OAICreateRouteResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAICreateRouteResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAICreateRouteResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAICreateRouteResponse::getCreatedByAccountId() const {
    return m_created_by_account_id;
}
void OAICreateRouteResponse::setCreatedByAccountId(const QString &created_by_account_id) {
    m_created_by_account_id = created_by_account_id;
    m_created_by_account_id_isSet = true;
}

bool OAICreateRouteResponse::is_created_by_account_id_Set() const{
    return m_created_by_account_id_isSet;
}

bool OAICreateRouteResponse::is_created_by_account_id_Valid() const{
    return m_created_by_account_id_isValid;
}

QDateTime OAICreateRouteResponse::getCreatedTime() const {
    return m_created_time;
}
void OAICreateRouteResponse::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAICreateRouteResponse::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAICreateRouteResponse::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QDateTime OAICreateRouteResponse::getLastUpdatedTime() const {
    return m_last_updated_time;
}
void OAICreateRouteResponse::setLastUpdatedTime(const QDateTime &last_updated_time) {
    m_last_updated_time = last_updated_time;
    m_last_updated_time_isSet = true;
}

bool OAICreateRouteResponse::is_last_updated_time_Set() const{
    return m_last_updated_time_isSet;
}

bool OAICreateRouteResponse::is_last_updated_time_Valid() const{
    return m_last_updated_time_isValid;
}

QString OAICreateRouteResponse::getOwnerAccountId() const {
    return m_owner_account_id;
}
void OAICreateRouteResponse::setOwnerAccountId(const QString &owner_account_id) {
    m_owner_account_id = owner_account_id;
    m_owner_account_id_isSet = true;
}

bool OAICreateRouteResponse::is_owner_account_id_Set() const{
    return m_owner_account_id_isSet;
}

bool OAICreateRouteResponse::is_owner_account_id_Valid() const{
    return m_owner_account_id_isValid;
}

QString OAICreateRouteResponse::getRouteId() const {
    return m_route_id;
}
void OAICreateRouteResponse::setRouteId(const QString &route_id) {
    m_route_id = route_id;
    m_route_id_isSet = true;
}

bool OAICreateRouteResponse::is_route_id_Set() const{
    return m_route_id_isSet;
}

bool OAICreateRouteResponse::is_route_id_Valid() const{
    return m_route_id_isValid;
}

OAIRouteType OAICreateRouteResponse::getRouteType() const {
    return m_route_type;
}
void OAICreateRouteResponse::setRouteType(const OAIRouteType &route_type) {
    m_route_type = route_type;
    m_route_type_isSet = true;
}

bool OAICreateRouteResponse::is_route_type_Set() const{
    return m_route_type_isSet;
}

bool OAICreateRouteResponse::is_route_type_Valid() const{
    return m_route_type_isValid;
}

QString OAICreateRouteResponse::getServiceId() const {
    return m_service_id;
}
void OAICreateRouteResponse::setServiceId(const QString &service_id) {
    m_service_id = service_id;
    m_service_id_isSet = true;
}

bool OAICreateRouteResponse::is_service_id_Set() const{
    return m_service_id_isSet;
}

bool OAICreateRouteResponse::is_service_id_Valid() const{
    return m_service_id_isValid;
}

OAIRouteState OAICreateRouteResponse::getState() const {
    return m_state;
}
void OAICreateRouteResponse::setState(const OAIRouteState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAICreateRouteResponse::is_state_Set() const{
    return m_state_isSet;
}

bool OAICreateRouteResponse::is_state_Valid() const{
    return m_state_isValid;
}

QMap OAICreateRouteResponse::getTags() const {
    return m_tags;
}
void OAICreateRouteResponse::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateRouteResponse::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateRouteResponse::is_tags_Valid() const{
    return m_tags_isValid;
}

OAICreateRouteResponse_UriPathRoute OAICreateRouteResponse::getUriPathRoute() const {
    return m_uri_path_route;
}
void OAICreateRouteResponse::setUriPathRoute(const OAICreateRouteResponse_UriPathRoute &uri_path_route) {
    m_uri_path_route = uri_path_route;
    m_uri_path_route_isSet = true;
}

bool OAICreateRouteResponse::is_uri_path_route_Set() const{
    return m_uri_path_route_isSet;
}

bool OAICreateRouteResponse::is_uri_path_route_Valid() const{
    return m_uri_path_route_isValid;
}

bool OAICreateRouteResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_route_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_route_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_path_route.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateRouteResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
