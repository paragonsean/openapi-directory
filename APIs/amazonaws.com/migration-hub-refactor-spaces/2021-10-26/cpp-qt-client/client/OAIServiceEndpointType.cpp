/**
 * AWS Migration Hub Refactor Spaces
 * <p><fullname>Amazon Web Services Migration Hub Refactor Spaces</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Amazon Web Services Migration Hub Refactor Spaces (Refactor Spaces). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the Amazon Web Services SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"https://aws.amazon.com/tools/#SDKs\">Amazon Web Services SDKs</a>.</p> <p>To share Refactor Spaces environments with other Amazon Web Services accounts or with Organizations and their OUs, use Resource Access Manager's <code>CreateResourceShare</code> API. See <a href=\"https://docs.aws.amazon.com/ram/latest/APIReference/API_CreateResourceShare.html\">CreateResourceShare</a> in the <i>Amazon Web Services RAM API Reference</i>.</p></p>
 *
 * The version of the OpenAPI document: 2021-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceEndpointType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceEndpointType::OAIServiceEndpointType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceEndpointType::OAIServiceEndpointType() {
    this->initializeModel();
}

OAIServiceEndpointType::~OAIServiceEndpointType() {}

void OAIServiceEndpointType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIServiceEndpointType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIServiceEndpointType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("LAMBDA", Qt::CaseInsensitive) == 0) {
        m_value = eOAIServiceEndpointType::LAMBDA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("URL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIServiceEndpointType::URL;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIServiceEndpointType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIServiceEndpointType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIServiceEndpointType::LAMBDA:
            val = "LAMBDA";
            break;
        case eOAIServiceEndpointType::URL:
            val = "URL";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIServiceEndpointType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIServiceEndpointType::eOAIServiceEndpointType OAIServiceEndpointType::getValue() const {
    return m_value;
}

void OAIServiceEndpointType::setValue(const OAIServiceEndpointType::eOAIServiceEndpointType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIServiceEndpointType::isSet() const {
    
    return m_value_isSet;
}

bool OAIServiceEndpointType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
