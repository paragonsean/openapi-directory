/**
 * AWS Migration Hub Refactor Spaces
 * <p><fullname>Amazon Web Services Migration Hub Refactor Spaces</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Amazon Web Services Migration Hub Refactor Spaces (Refactor Spaces). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the Amazon Web Services SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"https://aws.amazon.com/tools/#SDKs\">Amazon Web Services SDKs</a>.</p> <p>To share Refactor Spaces environments with other Amazon Web Services accounts or with Organizations and their OUs, use Resource Access Manager's <code>CreateResourceShare</code> API. See <a href=\"https://docs.aws.amazon.com/ram/latest/APIReference/API_CreateResourceShare.html\">CreateResourceShare</a> in the <i>Amazon Web Services RAM API Reference</i>.</p></p>
 *
 * The version of the OpenAPI document: 2021-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetRouteResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetRouteResponse::OAIGetRouteResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetRouteResponse::OAIGetRouteResponse() {
    this->initializeModel();
}

OAIGetRouteResponse::~OAIGetRouteResponse() {}

void OAIGetRouteResponse::initializeModel() {

    m_append_source_path_isSet = false;
    m_append_source_path_isValid = false;

    m_application_id_isSet = false;
    m_application_id_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_created_by_account_id_isSet = false;
    m_created_by_account_id_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_environment_id_isSet = false;
    m_environment_id_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_include_child_paths_isSet = false;
    m_include_child_paths_isValid = false;

    m_last_updated_time_isSet = false;
    m_last_updated_time_isValid = false;

    m_methods_isSet = false;
    m_methods_isValid = false;

    m_owner_account_id_isSet = false;
    m_owner_account_id_isValid = false;

    m_path_resource_to_id_isSet = false;
    m_path_resource_to_id_isValid = false;

    m_route_id_isSet = false;
    m_route_id_isValid = false;

    m_route_type_isSet = false;
    m_route_type_isValid = false;

    m_service_id_isSet = false;
    m_service_id_isValid = false;

    m_source_path_isSet = false;
    m_source_path_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIGetRouteResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetRouteResponse::fromJsonObject(QJsonObject json) {

    m_append_source_path_isValid = ::OpenAPI::fromJsonValue(m_append_source_path, json[QString("AppendSourcePath")]);
    m_append_source_path_isSet = !json[QString("AppendSourcePath")].isNull() && m_append_source_path_isValid;

    m_application_id_isValid = ::OpenAPI::fromJsonValue(m_application_id, json[QString("ApplicationId")]);
    m_application_id_isSet = !json[QString("ApplicationId")].isNull() && m_application_id_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_created_by_account_id_isValid = ::OpenAPI::fromJsonValue(m_created_by_account_id, json[QString("CreatedByAccountId")]);
    m_created_by_account_id_isSet = !json[QString("CreatedByAccountId")].isNull() && m_created_by_account_id_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("CreatedTime")]);
    m_created_time_isSet = !json[QString("CreatedTime")].isNull() && m_created_time_isValid;

    m_environment_id_isValid = ::OpenAPI::fromJsonValue(m_environment_id, json[QString("EnvironmentId")]);
    m_environment_id_isSet = !json[QString("EnvironmentId")].isNull() && m_environment_id_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("Error")]);
    m_error_isSet = !json[QString("Error")].isNull() && m_error_isValid;

    m_include_child_paths_isValid = ::OpenAPI::fromJsonValue(m_include_child_paths, json[QString("IncludeChildPaths")]);
    m_include_child_paths_isSet = !json[QString("IncludeChildPaths")].isNull() && m_include_child_paths_isValid;

    m_last_updated_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time, json[QString("LastUpdatedTime")]);
    m_last_updated_time_isSet = !json[QString("LastUpdatedTime")].isNull() && m_last_updated_time_isValid;

    m_methods_isValid = ::OpenAPI::fromJsonValue(m_methods, json[QString("Methods")]);
    m_methods_isSet = !json[QString("Methods")].isNull() && m_methods_isValid;

    m_owner_account_id_isValid = ::OpenAPI::fromJsonValue(m_owner_account_id, json[QString("OwnerAccountId")]);
    m_owner_account_id_isSet = !json[QString("OwnerAccountId")].isNull() && m_owner_account_id_isValid;

    m_path_resource_to_id_isValid = ::OpenAPI::fromJsonValue(m_path_resource_to_id, json[QString("PathResourceToId")]);
    m_path_resource_to_id_isSet = !json[QString("PathResourceToId")].isNull() && m_path_resource_to_id_isValid;

    m_route_id_isValid = ::OpenAPI::fromJsonValue(m_route_id, json[QString("RouteId")]);
    m_route_id_isSet = !json[QString("RouteId")].isNull() && m_route_id_isValid;

    m_route_type_isValid = ::OpenAPI::fromJsonValue(m_route_type, json[QString("RouteType")]);
    m_route_type_isSet = !json[QString("RouteType")].isNull() && m_route_type_isValid;

    m_service_id_isValid = ::OpenAPI::fromJsonValue(m_service_id, json[QString("ServiceId")]);
    m_service_id_isSet = !json[QString("ServiceId")].isNull() && m_service_id_isValid;

    m_source_path_isValid = ::OpenAPI::fromJsonValue(m_source_path, json[QString("SourcePath")]);
    m_source_path_isSet = !json[QString("SourcePath")].isNull() && m_source_path_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIGetRouteResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetRouteResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_append_source_path_isSet) {
        obj.insert(QString("AppendSourcePath"), ::OpenAPI::toJsonValue(m_append_source_path));
    }
    if (m_application_id_isSet) {
        obj.insert(QString("ApplicationId"), ::OpenAPI::toJsonValue(m_application_id));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_created_by_account_id_isSet) {
        obj.insert(QString("CreatedByAccountId"), ::OpenAPI::toJsonValue(m_created_by_account_id));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("CreatedTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_environment_id_isSet) {
        obj.insert(QString("EnvironmentId"), ::OpenAPI::toJsonValue(m_environment_id));
    }
    if (m_error.isSet()) {
        obj.insert(QString("Error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_include_child_paths_isSet) {
        obj.insert(QString("IncludeChildPaths"), ::OpenAPI::toJsonValue(m_include_child_paths));
    }
    if (m_last_updated_time_isSet) {
        obj.insert(QString("LastUpdatedTime"), ::OpenAPI::toJsonValue(m_last_updated_time));
    }
    if (m_methods.isSet()) {
        obj.insert(QString("Methods"), ::OpenAPI::toJsonValue(m_methods));
    }
    if (m_owner_account_id_isSet) {
        obj.insert(QString("OwnerAccountId"), ::OpenAPI::toJsonValue(m_owner_account_id));
    }
    if (m_path_resource_to_id.isSet()) {
        obj.insert(QString("PathResourceToId"), ::OpenAPI::toJsonValue(m_path_resource_to_id));
    }
    if (m_route_id_isSet) {
        obj.insert(QString("RouteId"), ::OpenAPI::toJsonValue(m_route_id));
    }
    if (m_route_type.isSet()) {
        obj.insert(QString("RouteType"), ::OpenAPI::toJsonValue(m_route_type));
    }
    if (m_service_id_isSet) {
        obj.insert(QString("ServiceId"), ::OpenAPI::toJsonValue(m_service_id));
    }
    if (m_source_path_isSet) {
        obj.insert(QString("SourcePath"), ::OpenAPI::toJsonValue(m_source_path));
    }
    if (m_state.isSet()) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

bool OAIGetRouteResponse::getAppendSourcePath() const {
    return m_append_source_path;
}
void OAIGetRouteResponse::setAppendSourcePath(const bool &append_source_path) {
    m_append_source_path = append_source_path;
    m_append_source_path_isSet = true;
}

bool OAIGetRouteResponse::is_append_source_path_Set() const{
    return m_append_source_path_isSet;
}

bool OAIGetRouteResponse::is_append_source_path_Valid() const{
    return m_append_source_path_isValid;
}

QString OAIGetRouteResponse::getApplicationId() const {
    return m_application_id;
}
void OAIGetRouteResponse::setApplicationId(const QString &application_id) {
    m_application_id = application_id;
    m_application_id_isSet = true;
}

bool OAIGetRouteResponse::is_application_id_Set() const{
    return m_application_id_isSet;
}

bool OAIGetRouteResponse::is_application_id_Valid() const{
    return m_application_id_isValid;
}

QString OAIGetRouteResponse::getArn() const {
    return m_arn;
}
void OAIGetRouteResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIGetRouteResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIGetRouteResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIGetRouteResponse::getCreatedByAccountId() const {
    return m_created_by_account_id;
}
void OAIGetRouteResponse::setCreatedByAccountId(const QString &created_by_account_id) {
    m_created_by_account_id = created_by_account_id;
    m_created_by_account_id_isSet = true;
}

bool OAIGetRouteResponse::is_created_by_account_id_Set() const{
    return m_created_by_account_id_isSet;
}

bool OAIGetRouteResponse::is_created_by_account_id_Valid() const{
    return m_created_by_account_id_isValid;
}

QDateTime OAIGetRouteResponse::getCreatedTime() const {
    return m_created_time;
}
void OAIGetRouteResponse::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIGetRouteResponse::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIGetRouteResponse::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QString OAIGetRouteResponse::getEnvironmentId() const {
    return m_environment_id;
}
void OAIGetRouteResponse::setEnvironmentId(const QString &environment_id) {
    m_environment_id = environment_id;
    m_environment_id_isSet = true;
}

bool OAIGetRouteResponse::is_environment_id_Set() const{
    return m_environment_id_isSet;
}

bool OAIGetRouteResponse::is_environment_id_Valid() const{
    return m_environment_id_isValid;
}

OAIGetRouteResponse_Error OAIGetRouteResponse::getError() const {
    return m_error;
}
void OAIGetRouteResponse::setError(const OAIGetRouteResponse_Error &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIGetRouteResponse::is_error_Set() const{
    return m_error_isSet;
}

bool OAIGetRouteResponse::is_error_Valid() const{
    return m_error_isValid;
}

bool OAIGetRouteResponse::getIncludeChildPaths() const {
    return m_include_child_paths;
}
void OAIGetRouteResponse::setIncludeChildPaths(const bool &include_child_paths) {
    m_include_child_paths = include_child_paths;
    m_include_child_paths_isSet = true;
}

bool OAIGetRouteResponse::is_include_child_paths_Set() const{
    return m_include_child_paths_isSet;
}

bool OAIGetRouteResponse::is_include_child_paths_Valid() const{
    return m_include_child_paths_isValid;
}

QDateTime OAIGetRouteResponse::getLastUpdatedTime() const {
    return m_last_updated_time;
}
void OAIGetRouteResponse::setLastUpdatedTime(const QDateTime &last_updated_time) {
    m_last_updated_time = last_updated_time;
    m_last_updated_time_isSet = true;
}

bool OAIGetRouteResponse::is_last_updated_time_Set() const{
    return m_last_updated_time_isSet;
}

bool OAIGetRouteResponse::is_last_updated_time_Valid() const{
    return m_last_updated_time_isValid;
}

QList OAIGetRouteResponse::getMethods() const {
    return m_methods;
}
void OAIGetRouteResponse::setMethods(const QList &methods) {
    m_methods = methods;
    m_methods_isSet = true;
}

bool OAIGetRouteResponse::is_methods_Set() const{
    return m_methods_isSet;
}

bool OAIGetRouteResponse::is_methods_Valid() const{
    return m_methods_isValid;
}

QString OAIGetRouteResponse::getOwnerAccountId() const {
    return m_owner_account_id;
}
void OAIGetRouteResponse::setOwnerAccountId(const QString &owner_account_id) {
    m_owner_account_id = owner_account_id;
    m_owner_account_id_isSet = true;
}

bool OAIGetRouteResponse::is_owner_account_id_Set() const{
    return m_owner_account_id_isSet;
}

bool OAIGetRouteResponse::is_owner_account_id_Valid() const{
    return m_owner_account_id_isValid;
}

QMap OAIGetRouteResponse::getPathResourceToId() const {
    return m_path_resource_to_id;
}
void OAIGetRouteResponse::setPathResourceToId(const QMap &path_resource_to_id) {
    m_path_resource_to_id = path_resource_to_id;
    m_path_resource_to_id_isSet = true;
}

bool OAIGetRouteResponse::is_path_resource_to_id_Set() const{
    return m_path_resource_to_id_isSet;
}

bool OAIGetRouteResponse::is_path_resource_to_id_Valid() const{
    return m_path_resource_to_id_isValid;
}

QString OAIGetRouteResponse::getRouteId() const {
    return m_route_id;
}
void OAIGetRouteResponse::setRouteId(const QString &route_id) {
    m_route_id = route_id;
    m_route_id_isSet = true;
}

bool OAIGetRouteResponse::is_route_id_Set() const{
    return m_route_id_isSet;
}

bool OAIGetRouteResponse::is_route_id_Valid() const{
    return m_route_id_isValid;
}

OAIRouteType OAIGetRouteResponse::getRouteType() const {
    return m_route_type;
}
void OAIGetRouteResponse::setRouteType(const OAIRouteType &route_type) {
    m_route_type = route_type;
    m_route_type_isSet = true;
}

bool OAIGetRouteResponse::is_route_type_Set() const{
    return m_route_type_isSet;
}

bool OAIGetRouteResponse::is_route_type_Valid() const{
    return m_route_type_isValid;
}

QString OAIGetRouteResponse::getServiceId() const {
    return m_service_id;
}
void OAIGetRouteResponse::setServiceId(const QString &service_id) {
    m_service_id = service_id;
    m_service_id_isSet = true;
}

bool OAIGetRouteResponse::is_service_id_Set() const{
    return m_service_id_isSet;
}

bool OAIGetRouteResponse::is_service_id_Valid() const{
    return m_service_id_isValid;
}

QString OAIGetRouteResponse::getSourcePath() const {
    return m_source_path;
}
void OAIGetRouteResponse::setSourcePath(const QString &source_path) {
    m_source_path = source_path;
    m_source_path_isSet = true;
}

bool OAIGetRouteResponse::is_source_path_Set() const{
    return m_source_path_isSet;
}

bool OAIGetRouteResponse::is_source_path_Valid() const{
    return m_source_path_isValid;
}

OAIRouteState OAIGetRouteResponse::getState() const {
    return m_state;
}
void OAIGetRouteResponse::setState(const OAIRouteState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIGetRouteResponse::is_state_Set() const{
    return m_state_isSet;
}

bool OAIGetRouteResponse::is_state_Valid() const{
    return m_state_isValid;
}

QMap OAIGetRouteResponse::getTags() const {
    return m_tags;
}
void OAIGetRouteResponse::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIGetRouteResponse::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIGetRouteResponse::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIGetRouteResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_append_source_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_child_paths_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_methods.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_resource_to_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_route_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_route_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetRouteResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
