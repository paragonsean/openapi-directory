/**
 * AWS Migration Hub Refactor Spaces
 * <p><fullname>Amazon Web Services Migration Hub Refactor Spaces</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Amazon Web Services Migration Hub Refactor Spaces (Refactor Spaces). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the Amazon Web Services SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"https://aws.amazon.com/tools/#SDKs\">Amazon Web Services SDKs</a>.</p> <p>To share Refactor Spaces environments with other Amazon Web Services accounts or with Organizations and their OUs, use Resource Access Manager's <code>CreateResourceShare</code> API. See <a href=\"https://docs.aws.amazon.com/ram/latest/APIReference/API_CreateResourceShare.html\">CreateResourceShare</a> in the <i>Amazon Web Services RAM API Reference</i>.</p></p>
 *
 * The version of the OpenAPI document: 2021-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateRouteResponse_UriPathRoute.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateRouteResponse_UriPathRoute::OAICreateRouteResponse_UriPathRoute(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateRouteResponse_UriPathRoute::OAICreateRouteResponse_UriPathRoute() {
    this->initializeModel();
}

OAICreateRouteResponse_UriPathRoute::~OAICreateRouteResponse_UriPathRoute() {}

void OAICreateRouteResponse_UriPathRoute::initializeModel() {

    m_activation_state_isSet = false;
    m_activation_state_isValid = false;

    m_append_source_path_isSet = false;
    m_append_source_path_isValid = false;

    m_include_child_paths_isSet = false;
    m_include_child_paths_isValid = false;

    m_methods_isSet = false;
    m_methods_isValid = false;

    m_source_path_isSet = false;
    m_source_path_isValid = false;
}

void OAICreateRouteResponse_UriPathRoute::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateRouteResponse_UriPathRoute::fromJsonObject(QJsonObject json) {

    m_activation_state_isValid = ::OpenAPI::fromJsonValue(m_activation_state, json[QString("ActivationState")]);
    m_activation_state_isSet = !json[QString("ActivationState")].isNull() && m_activation_state_isValid;

    m_append_source_path_isValid = ::OpenAPI::fromJsonValue(m_append_source_path, json[QString("AppendSourcePath")]);
    m_append_source_path_isSet = !json[QString("AppendSourcePath")].isNull() && m_append_source_path_isValid;

    m_include_child_paths_isValid = ::OpenAPI::fromJsonValue(m_include_child_paths, json[QString("IncludeChildPaths")]);
    m_include_child_paths_isSet = !json[QString("IncludeChildPaths")].isNull() && m_include_child_paths_isValid;

    m_methods_isValid = ::OpenAPI::fromJsonValue(m_methods, json[QString("Methods")]);
    m_methods_isSet = !json[QString("Methods")].isNull() && m_methods_isValid;

    m_source_path_isValid = ::OpenAPI::fromJsonValue(m_source_path, json[QString("SourcePath")]);
    m_source_path_isSet = !json[QString("SourcePath")].isNull() && m_source_path_isValid;
}

QString OAICreateRouteResponse_UriPathRoute::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateRouteResponse_UriPathRoute::asJsonObject() const {
    QJsonObject obj;
    if (m_activation_state.isSet()) {
        obj.insert(QString("ActivationState"), ::OpenAPI::toJsonValue(m_activation_state));
    }
    if (m_append_source_path_isSet) {
        obj.insert(QString("AppendSourcePath"), ::OpenAPI::toJsonValue(m_append_source_path));
    }
    if (m_include_child_paths_isSet) {
        obj.insert(QString("IncludeChildPaths"), ::OpenAPI::toJsonValue(m_include_child_paths));
    }
    if (m_methods.isSet()) {
        obj.insert(QString("Methods"), ::OpenAPI::toJsonValue(m_methods));
    }
    if (m_source_path_isSet) {
        obj.insert(QString("SourcePath"), ::OpenAPI::toJsonValue(m_source_path));
    }
    return obj;
}

OAIRouteActivationState OAICreateRouteResponse_UriPathRoute::getActivationState() const {
    return m_activation_state;
}
void OAICreateRouteResponse_UriPathRoute::setActivationState(const OAIRouteActivationState &activation_state) {
    m_activation_state = activation_state;
    m_activation_state_isSet = true;
}

bool OAICreateRouteResponse_UriPathRoute::is_activation_state_Set() const{
    return m_activation_state_isSet;
}

bool OAICreateRouteResponse_UriPathRoute::is_activation_state_Valid() const{
    return m_activation_state_isValid;
}

bool OAICreateRouteResponse_UriPathRoute::getAppendSourcePath() const {
    return m_append_source_path;
}
void OAICreateRouteResponse_UriPathRoute::setAppendSourcePath(const bool &append_source_path) {
    m_append_source_path = append_source_path;
    m_append_source_path_isSet = true;
}

bool OAICreateRouteResponse_UriPathRoute::is_append_source_path_Set() const{
    return m_append_source_path_isSet;
}

bool OAICreateRouteResponse_UriPathRoute::is_append_source_path_Valid() const{
    return m_append_source_path_isValid;
}

bool OAICreateRouteResponse_UriPathRoute::getIncludeChildPaths() const {
    return m_include_child_paths;
}
void OAICreateRouteResponse_UriPathRoute::setIncludeChildPaths(const bool &include_child_paths) {
    m_include_child_paths = include_child_paths;
    m_include_child_paths_isSet = true;
}

bool OAICreateRouteResponse_UriPathRoute::is_include_child_paths_Set() const{
    return m_include_child_paths_isSet;
}

bool OAICreateRouteResponse_UriPathRoute::is_include_child_paths_Valid() const{
    return m_include_child_paths_isValid;
}

QList OAICreateRouteResponse_UriPathRoute::getMethods() const {
    return m_methods;
}
void OAICreateRouteResponse_UriPathRoute::setMethods(const QList &methods) {
    m_methods = methods;
    m_methods_isSet = true;
}

bool OAICreateRouteResponse_UriPathRoute::is_methods_Set() const{
    return m_methods_isSet;
}

bool OAICreateRouteResponse_UriPathRoute::is_methods_Valid() const{
    return m_methods_isValid;
}

QString OAICreateRouteResponse_UriPathRoute::getSourcePath() const {
    return m_source_path;
}
void OAICreateRouteResponse_UriPathRoute::setSourcePath(const QString &source_path) {
    m_source_path = source_path;
    m_source_path_isSet = true;
}

bool OAICreateRouteResponse_UriPathRoute::is_source_path_Set() const{
    return m_source_path_isSet;
}

bool OAICreateRouteResponse_UriPathRoute::is_source_path_Valid() const{
    return m_source_path_isValid;
}

bool OAICreateRouteResponse_UriPathRoute::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activation_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_append_source_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_child_paths_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_methods.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_path_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateRouteResponse_UriPathRoute::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_activation_state_isValid && m_source_path_isValid && true;
}

} // namespace OpenAPI
