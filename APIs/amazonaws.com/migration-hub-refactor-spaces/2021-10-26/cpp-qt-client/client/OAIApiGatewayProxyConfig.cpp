/**
 * AWS Migration Hub Refactor Spaces
 * <p><fullname>Amazon Web Services Migration Hub Refactor Spaces</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Amazon Web Services Migration Hub Refactor Spaces (Refactor Spaces). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the Amazon Web Services SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"https://aws.amazon.com/tools/#SDKs\">Amazon Web Services SDKs</a>.</p> <p>To share Refactor Spaces environments with other Amazon Web Services accounts or with Organizations and their OUs, use Resource Access Manager's <code>CreateResourceShare</code> API. See <a href=\"https://docs.aws.amazon.com/ram/latest/APIReference/API_CreateResourceShare.html\">CreateResourceShare</a> in the <i>Amazon Web Services RAM API Reference</i>.</p></p>
 *
 * The version of the OpenAPI document: 2021-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApiGatewayProxyConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApiGatewayProxyConfig::OAIApiGatewayProxyConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApiGatewayProxyConfig::OAIApiGatewayProxyConfig() {
    this->initializeModel();
}

OAIApiGatewayProxyConfig::~OAIApiGatewayProxyConfig() {}

void OAIApiGatewayProxyConfig::initializeModel() {

    m_api_gateway_id_isSet = false;
    m_api_gateway_id_isValid = false;

    m_endpoint_type_isSet = false;
    m_endpoint_type_isValid = false;

    m_nlb_arn_isSet = false;
    m_nlb_arn_isValid = false;

    m_nlb_name_isSet = false;
    m_nlb_name_isValid = false;

    m_proxy_url_isSet = false;
    m_proxy_url_isValid = false;

    m_stage_name_isSet = false;
    m_stage_name_isValid = false;

    m_vpc_link_id_isSet = false;
    m_vpc_link_id_isValid = false;
}

void OAIApiGatewayProxyConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApiGatewayProxyConfig::fromJsonObject(QJsonObject json) {

    m_api_gateway_id_isValid = ::OpenAPI::fromJsonValue(m_api_gateway_id, json[QString("ApiGatewayId")]);
    m_api_gateway_id_isSet = !json[QString("ApiGatewayId")].isNull() && m_api_gateway_id_isValid;

    m_endpoint_type_isValid = ::OpenAPI::fromJsonValue(m_endpoint_type, json[QString("EndpointType")]);
    m_endpoint_type_isSet = !json[QString("EndpointType")].isNull() && m_endpoint_type_isValid;

    m_nlb_arn_isValid = ::OpenAPI::fromJsonValue(m_nlb_arn, json[QString("NlbArn")]);
    m_nlb_arn_isSet = !json[QString("NlbArn")].isNull() && m_nlb_arn_isValid;

    m_nlb_name_isValid = ::OpenAPI::fromJsonValue(m_nlb_name, json[QString("NlbName")]);
    m_nlb_name_isSet = !json[QString("NlbName")].isNull() && m_nlb_name_isValid;

    m_proxy_url_isValid = ::OpenAPI::fromJsonValue(m_proxy_url, json[QString("ProxyUrl")]);
    m_proxy_url_isSet = !json[QString("ProxyUrl")].isNull() && m_proxy_url_isValid;

    m_stage_name_isValid = ::OpenAPI::fromJsonValue(m_stage_name, json[QString("StageName")]);
    m_stage_name_isSet = !json[QString("StageName")].isNull() && m_stage_name_isValid;

    m_vpc_link_id_isValid = ::OpenAPI::fromJsonValue(m_vpc_link_id, json[QString("VpcLinkId")]);
    m_vpc_link_id_isSet = !json[QString("VpcLinkId")].isNull() && m_vpc_link_id_isValid;
}

QString OAIApiGatewayProxyConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApiGatewayProxyConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_api_gateway_id_isSet) {
        obj.insert(QString("ApiGatewayId"), ::OpenAPI::toJsonValue(m_api_gateway_id));
    }
    if (m_endpoint_type.isSet()) {
        obj.insert(QString("EndpointType"), ::OpenAPI::toJsonValue(m_endpoint_type));
    }
    if (m_nlb_arn_isSet) {
        obj.insert(QString("NlbArn"), ::OpenAPI::toJsonValue(m_nlb_arn));
    }
    if (m_nlb_name_isSet) {
        obj.insert(QString("NlbName"), ::OpenAPI::toJsonValue(m_nlb_name));
    }
    if (m_proxy_url_isSet) {
        obj.insert(QString("ProxyUrl"), ::OpenAPI::toJsonValue(m_proxy_url));
    }
    if (m_stage_name_isSet) {
        obj.insert(QString("StageName"), ::OpenAPI::toJsonValue(m_stage_name));
    }
    if (m_vpc_link_id_isSet) {
        obj.insert(QString("VpcLinkId"), ::OpenAPI::toJsonValue(m_vpc_link_id));
    }
    return obj;
}

QString OAIApiGatewayProxyConfig::getApiGatewayId() const {
    return m_api_gateway_id;
}
void OAIApiGatewayProxyConfig::setApiGatewayId(const QString &api_gateway_id) {
    m_api_gateway_id = api_gateway_id;
    m_api_gateway_id_isSet = true;
}

bool OAIApiGatewayProxyConfig::is_api_gateway_id_Set() const{
    return m_api_gateway_id_isSet;
}

bool OAIApiGatewayProxyConfig::is_api_gateway_id_Valid() const{
    return m_api_gateway_id_isValid;
}

OAIApiGatewayEndpointType OAIApiGatewayProxyConfig::getEndpointType() const {
    return m_endpoint_type;
}
void OAIApiGatewayProxyConfig::setEndpointType(const OAIApiGatewayEndpointType &endpoint_type) {
    m_endpoint_type = endpoint_type;
    m_endpoint_type_isSet = true;
}

bool OAIApiGatewayProxyConfig::is_endpoint_type_Set() const{
    return m_endpoint_type_isSet;
}

bool OAIApiGatewayProxyConfig::is_endpoint_type_Valid() const{
    return m_endpoint_type_isValid;
}

QString OAIApiGatewayProxyConfig::getNlbArn() const {
    return m_nlb_arn;
}
void OAIApiGatewayProxyConfig::setNlbArn(const QString &nlb_arn) {
    m_nlb_arn = nlb_arn;
    m_nlb_arn_isSet = true;
}

bool OAIApiGatewayProxyConfig::is_nlb_arn_Set() const{
    return m_nlb_arn_isSet;
}

bool OAIApiGatewayProxyConfig::is_nlb_arn_Valid() const{
    return m_nlb_arn_isValid;
}

QString OAIApiGatewayProxyConfig::getNlbName() const {
    return m_nlb_name;
}
void OAIApiGatewayProxyConfig::setNlbName(const QString &nlb_name) {
    m_nlb_name = nlb_name;
    m_nlb_name_isSet = true;
}

bool OAIApiGatewayProxyConfig::is_nlb_name_Set() const{
    return m_nlb_name_isSet;
}

bool OAIApiGatewayProxyConfig::is_nlb_name_Valid() const{
    return m_nlb_name_isValid;
}

QString OAIApiGatewayProxyConfig::getProxyUrl() const {
    return m_proxy_url;
}
void OAIApiGatewayProxyConfig::setProxyUrl(const QString &proxy_url) {
    m_proxy_url = proxy_url;
    m_proxy_url_isSet = true;
}

bool OAIApiGatewayProxyConfig::is_proxy_url_Set() const{
    return m_proxy_url_isSet;
}

bool OAIApiGatewayProxyConfig::is_proxy_url_Valid() const{
    return m_proxy_url_isValid;
}

QString OAIApiGatewayProxyConfig::getStageName() const {
    return m_stage_name;
}
void OAIApiGatewayProxyConfig::setStageName(const QString &stage_name) {
    m_stage_name = stage_name;
    m_stage_name_isSet = true;
}

bool OAIApiGatewayProxyConfig::is_stage_name_Set() const{
    return m_stage_name_isSet;
}

bool OAIApiGatewayProxyConfig::is_stage_name_Valid() const{
    return m_stage_name_isValid;
}

QString OAIApiGatewayProxyConfig::getVpcLinkId() const {
    return m_vpc_link_id;
}
void OAIApiGatewayProxyConfig::setVpcLinkId(const QString &vpc_link_id) {
    m_vpc_link_id = vpc_link_id;
    m_vpc_link_id_isSet = true;
}

bool OAIApiGatewayProxyConfig::is_vpc_link_id_Set() const{
    return m_vpc_link_id_isSet;
}

bool OAIApiGatewayProxyConfig::is_vpc_link_id_Valid() const{
    return m_vpc_link_id_isValid;
}

bool OAIApiGatewayProxyConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_gateway_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_nlb_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nlb_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proxy_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stage_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_link_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApiGatewayProxyConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
