/**
 * AWS Migration Hub Refactor Spaces
 * <p><fullname>Amazon Web Services Migration Hub Refactor Spaces</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Amazon Web Services Migration Hub Refactor Spaces (Refactor Spaces). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the Amazon Web Services SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"https://aws.amazon.com/tools/#SDKs\">Amazon Web Services SDKs</a>.</p> <p>To share Refactor Spaces environments with other Amazon Web Services accounts or with Organizations and their OUs, use Resource Access Manager's <code>CreateResourceShare</code> API. See <a href=\"https://docs.aws.amazon.com/ram/latest/APIReference/API_CreateResourceShare.html\">CreateResourceShare</a> in the <i>Amazon Web Services RAM API Reference</i>.</p></p>
 *
 * The version of the OpenAPI document: 2021-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteRouteResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteRouteResponse::OAIDeleteRouteResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteRouteResponse::OAIDeleteRouteResponse() {
    this->initializeModel();
}

OAIDeleteRouteResponse::~OAIDeleteRouteResponse() {}

void OAIDeleteRouteResponse::initializeModel() {

    m_application_id_isSet = false;
    m_application_id_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_last_updated_time_isSet = false;
    m_last_updated_time_isValid = false;

    m_route_id_isSet = false;
    m_route_id_isValid = false;

    m_service_id_isSet = false;
    m_service_id_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIDeleteRouteResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteRouteResponse::fromJsonObject(QJsonObject json) {

    m_application_id_isValid = ::OpenAPI::fromJsonValue(m_application_id, json[QString("ApplicationId")]);
    m_application_id_isSet = !json[QString("ApplicationId")].isNull() && m_application_id_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_last_updated_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time, json[QString("LastUpdatedTime")]);
    m_last_updated_time_isSet = !json[QString("LastUpdatedTime")].isNull() && m_last_updated_time_isValid;

    m_route_id_isValid = ::OpenAPI::fromJsonValue(m_route_id, json[QString("RouteId")]);
    m_route_id_isSet = !json[QString("RouteId")].isNull() && m_route_id_isValid;

    m_service_id_isValid = ::OpenAPI::fromJsonValue(m_service_id, json[QString("ServiceId")]);
    m_service_id_isSet = !json[QString("ServiceId")].isNull() && m_service_id_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;
}

QString OAIDeleteRouteResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteRouteResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_application_id_isSet) {
        obj.insert(QString("ApplicationId"), ::OpenAPI::toJsonValue(m_application_id));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_last_updated_time_isSet) {
        obj.insert(QString("LastUpdatedTime"), ::OpenAPI::toJsonValue(m_last_updated_time));
    }
    if (m_route_id_isSet) {
        obj.insert(QString("RouteId"), ::OpenAPI::toJsonValue(m_route_id));
    }
    if (m_service_id_isSet) {
        obj.insert(QString("ServiceId"), ::OpenAPI::toJsonValue(m_service_id));
    }
    if (m_state.isSet()) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIDeleteRouteResponse::getApplicationId() const {
    return m_application_id;
}
void OAIDeleteRouteResponse::setApplicationId(const QString &application_id) {
    m_application_id = application_id;
    m_application_id_isSet = true;
}

bool OAIDeleteRouteResponse::is_application_id_Set() const{
    return m_application_id_isSet;
}

bool OAIDeleteRouteResponse::is_application_id_Valid() const{
    return m_application_id_isValid;
}

QString OAIDeleteRouteResponse::getArn() const {
    return m_arn;
}
void OAIDeleteRouteResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIDeleteRouteResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIDeleteRouteResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

QDateTime OAIDeleteRouteResponse::getLastUpdatedTime() const {
    return m_last_updated_time;
}
void OAIDeleteRouteResponse::setLastUpdatedTime(const QDateTime &last_updated_time) {
    m_last_updated_time = last_updated_time;
    m_last_updated_time_isSet = true;
}

bool OAIDeleteRouteResponse::is_last_updated_time_Set() const{
    return m_last_updated_time_isSet;
}

bool OAIDeleteRouteResponse::is_last_updated_time_Valid() const{
    return m_last_updated_time_isValid;
}

QString OAIDeleteRouteResponse::getRouteId() const {
    return m_route_id;
}
void OAIDeleteRouteResponse::setRouteId(const QString &route_id) {
    m_route_id = route_id;
    m_route_id_isSet = true;
}

bool OAIDeleteRouteResponse::is_route_id_Set() const{
    return m_route_id_isSet;
}

bool OAIDeleteRouteResponse::is_route_id_Valid() const{
    return m_route_id_isValid;
}

QString OAIDeleteRouteResponse::getServiceId() const {
    return m_service_id;
}
void OAIDeleteRouteResponse::setServiceId(const QString &service_id) {
    m_service_id = service_id;
    m_service_id_isSet = true;
}

bool OAIDeleteRouteResponse::is_service_id_Set() const{
    return m_service_id_isSet;
}

bool OAIDeleteRouteResponse::is_service_id_Valid() const{
    return m_service_id_isValid;
}

OAIRouteState OAIDeleteRouteResponse::getState() const {
    return m_state;
}
void OAIDeleteRouteResponse::setState(const OAIRouteState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIDeleteRouteResponse::is_state_Set() const{
    return m_state_isSet;
}

bool OAIDeleteRouteResponse::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIDeleteRouteResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_route_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteRouteResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
