/**
 * AWS Migration Hub Refactor Spaces
 * <p><fullname>Amazon Web Services Migration Hub Refactor Spaces</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Amazon Web Services Migration Hub Refactor Spaces (Refactor Spaces). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the Amazon Web Services SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"https://aws.amazon.com/tools/#SDKs\">Amazon Web Services SDKs</a>.</p> <p>To share Refactor Spaces environments with other Amazon Web Services accounts or with Organizations and their OUs, use Resource Access Manager's <code>CreateResourceShare</code> API. See <a href=\"https://docs.aws.amazon.com/ram/latest/APIReference/API_CreateResourceShare.html\">CreateResourceShare</a> in the <i>Amazon Web Services RAM API Reference</i>.</p></p>
 *
 * The version of the OpenAPI document: 2021-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateEnvironment_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateEnvironment_request::OAICreateEnvironment_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateEnvironment_request::OAICreateEnvironment_request() {
    this->initializeModel();
}

OAICreateEnvironment_request::~OAICreateEnvironment_request() {}

void OAICreateEnvironment_request::initializeModel() {

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_network_fabric_type_isSet = false;
    m_network_fabric_type_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateEnvironment_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateEnvironment_request::fromJsonObject(QJsonObject json) {

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("ClientToken")]);
    m_client_token_isSet = !json[QString("ClientToken")].isNull() && m_client_token_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_network_fabric_type_isValid = ::OpenAPI::fromJsonValue(m_network_fabric_type, json[QString("NetworkFabricType")]);
    m_network_fabric_type_isSet = !json[QString("NetworkFabricType")].isNull() && m_network_fabric_type_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateEnvironment_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateEnvironment_request::asJsonObject() const {
    QJsonObject obj;
    if (m_client_token_isSet) {
        obj.insert(QString("ClientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_network_fabric_type_isSet) {
        obj.insert(QString("NetworkFabricType"), ::OpenAPI::toJsonValue(m_network_fabric_type));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateEnvironment_request::getClientToken() const {
    return m_client_token;
}
void OAICreateEnvironment_request::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateEnvironment_request::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateEnvironment_request::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QString OAICreateEnvironment_request::getDescription() const {
    return m_description;
}
void OAICreateEnvironment_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateEnvironment_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateEnvironment_request::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICreateEnvironment_request::getName() const {
    return m_name;
}
void OAICreateEnvironment_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateEnvironment_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateEnvironment_request::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateEnvironment_request::getNetworkFabricType() const {
    return m_network_fabric_type;
}
void OAICreateEnvironment_request::setNetworkFabricType(const QString &network_fabric_type) {
    m_network_fabric_type = network_fabric_type;
    m_network_fabric_type_isSet = true;
}

bool OAICreateEnvironment_request::is_network_fabric_type_Set() const{
    return m_network_fabric_type_isSet;
}

bool OAICreateEnvironment_request::is_network_fabric_type_Valid() const{
    return m_network_fabric_type_isValid;
}

QMap<QString, QString> OAICreateEnvironment_request::getTags() const {
    return m_tags;
}
void OAICreateEnvironment_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateEnvironment_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateEnvironment_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateEnvironment_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_fabric_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateEnvironment_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_network_fabric_type_isValid && true;
}

} // namespace OpenAPI
