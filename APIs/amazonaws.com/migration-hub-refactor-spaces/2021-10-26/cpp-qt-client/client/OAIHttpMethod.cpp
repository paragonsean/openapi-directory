/**
 * AWS Migration Hub Refactor Spaces
 * <p><fullname>Amazon Web Services Migration Hub Refactor Spaces</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Amazon Web Services Migration Hub Refactor Spaces (Refactor Spaces). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the Amazon Web Services SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"https://aws.amazon.com/tools/#SDKs\">Amazon Web Services SDKs</a>.</p> <p>To share Refactor Spaces environments with other Amazon Web Services accounts or with Organizations and their OUs, use Resource Access Manager's <code>CreateResourceShare</code> API. See <a href=\"https://docs.aws.amazon.com/ram/latest/APIReference/API_CreateResourceShare.html\">CreateResourceShare</a> in the <i>Amazon Web Services RAM API Reference</i>.</p></p>
 *
 * The version of the OpenAPI document: 2021-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHttpMethod.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHttpMethod::OAIHttpMethod(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHttpMethod::OAIHttpMethod() {
    this->initializeModel();
}

OAIHttpMethod::~OAIHttpMethod() {}

void OAIHttpMethod::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIHttpMethod::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIHttpMethod::fromJson(QString jsonString) {
    
    if ( jsonString.compare("DELETE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIHttpMethod::DELETE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GET", Qt::CaseInsensitive) == 0) {
        m_value = eOAIHttpMethod::GET;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HEAD", Qt::CaseInsensitive) == 0) {
        m_value = eOAIHttpMethod::HEAD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OPTIONS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIHttpMethod::OPTIONS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PATCH", Qt::CaseInsensitive) == 0) {
        m_value = eOAIHttpMethod::PATCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("POST", Qt::CaseInsensitive) == 0) {
        m_value = eOAIHttpMethod::POST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PUT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIHttpMethod::PUT;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIHttpMethod::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIHttpMethod::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIHttpMethod::DELETE:
            val = "DELETE";
            break;
        case eOAIHttpMethod::GET:
            val = "GET";
            break;
        case eOAIHttpMethod::HEAD:
            val = "HEAD";
            break;
        case eOAIHttpMethod::OPTIONS:
            val = "OPTIONS";
            break;
        case eOAIHttpMethod::PATCH:
            val = "PATCH";
            break;
        case eOAIHttpMethod::POST:
            val = "POST";
            break;
        case eOAIHttpMethod::PUT:
            val = "PUT";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIHttpMethod::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIHttpMethod::eOAIHttpMethod OAIHttpMethod::getValue() const {
    return m_value;
}

void OAIHttpMethod::setValue(const OAIHttpMethod::eOAIHttpMethod& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIHttpMethod::isSet() const {
    
    return m_value_isSet;
}

bool OAIHttpMethod::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
