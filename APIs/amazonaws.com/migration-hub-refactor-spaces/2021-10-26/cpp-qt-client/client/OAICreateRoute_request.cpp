/**
 * AWS Migration Hub Refactor Spaces
 * <p><fullname>Amazon Web Services Migration Hub Refactor Spaces</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Amazon Web Services Migration Hub Refactor Spaces (Refactor Spaces). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the Amazon Web Services SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"https://aws.amazon.com/tools/#SDKs\">Amazon Web Services SDKs</a>.</p> <p>To share Refactor Spaces environments with other Amazon Web Services accounts or with Organizations and their OUs, use Resource Access Manager's <code>CreateResourceShare</code> API. See <a href=\"https://docs.aws.amazon.com/ram/latest/APIReference/API_CreateResourceShare.html\">CreateResourceShare</a> in the <i>Amazon Web Services RAM API Reference</i>.</p></p>
 *
 * The version of the OpenAPI document: 2021-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateRoute_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateRoute_request::OAICreateRoute_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateRoute_request::OAICreateRoute_request() {
    this->initializeModel();
}

OAICreateRoute_request::~OAICreateRoute_request() {}

void OAICreateRoute_request::initializeModel() {

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_default_route_isSet = false;
    m_default_route_isValid = false;

    m_route_type_isSet = false;
    m_route_type_isValid = false;

    m_service_identifier_isSet = false;
    m_service_identifier_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_uri_path_route_isSet = false;
    m_uri_path_route_isValid = false;
}

void OAICreateRoute_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateRoute_request::fromJsonObject(QJsonObject json) {

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("ClientToken")]);
    m_client_token_isSet = !json[QString("ClientToken")].isNull() && m_client_token_isValid;

    m_default_route_isValid = ::OpenAPI::fromJsonValue(m_default_route, json[QString("DefaultRoute")]);
    m_default_route_isSet = !json[QString("DefaultRoute")].isNull() && m_default_route_isValid;

    m_route_type_isValid = ::OpenAPI::fromJsonValue(m_route_type, json[QString("RouteType")]);
    m_route_type_isSet = !json[QString("RouteType")].isNull() && m_route_type_isValid;

    m_service_identifier_isValid = ::OpenAPI::fromJsonValue(m_service_identifier, json[QString("ServiceIdentifier")]);
    m_service_identifier_isSet = !json[QString("ServiceIdentifier")].isNull() && m_service_identifier_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_uri_path_route_isValid = ::OpenAPI::fromJsonValue(m_uri_path_route, json[QString("UriPathRoute")]);
    m_uri_path_route_isSet = !json[QString("UriPathRoute")].isNull() && m_uri_path_route_isValid;
}

QString OAICreateRoute_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateRoute_request::asJsonObject() const {
    QJsonObject obj;
    if (m_client_token_isSet) {
        obj.insert(QString("ClientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_default_route.isSet()) {
        obj.insert(QString("DefaultRoute"), ::OpenAPI::toJsonValue(m_default_route));
    }
    if (m_route_type_isSet) {
        obj.insert(QString("RouteType"), ::OpenAPI::toJsonValue(m_route_type));
    }
    if (m_service_identifier_isSet) {
        obj.insert(QString("ServiceIdentifier"), ::OpenAPI::toJsonValue(m_service_identifier));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_uri_path_route.isSet()) {
        obj.insert(QString("UriPathRoute"), ::OpenAPI::toJsonValue(m_uri_path_route));
    }
    return obj;
}

QString OAICreateRoute_request::getClientToken() const {
    return m_client_token;
}
void OAICreateRoute_request::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateRoute_request::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateRoute_request::is_client_token_Valid() const{
    return m_client_token_isValid;
}

OAICreateRoute_request_DefaultRoute OAICreateRoute_request::getDefaultRoute() const {
    return m_default_route;
}
void OAICreateRoute_request::setDefaultRoute(const OAICreateRoute_request_DefaultRoute &default_route) {
    m_default_route = default_route;
    m_default_route_isSet = true;
}

bool OAICreateRoute_request::is_default_route_Set() const{
    return m_default_route_isSet;
}

bool OAICreateRoute_request::is_default_route_Valid() const{
    return m_default_route_isValid;
}

QString OAICreateRoute_request::getRouteType() const {
    return m_route_type;
}
void OAICreateRoute_request::setRouteType(const QString &route_type) {
    m_route_type = route_type;
    m_route_type_isSet = true;
}

bool OAICreateRoute_request::is_route_type_Set() const{
    return m_route_type_isSet;
}

bool OAICreateRoute_request::is_route_type_Valid() const{
    return m_route_type_isValid;
}

QString OAICreateRoute_request::getServiceIdentifier() const {
    return m_service_identifier;
}
void OAICreateRoute_request::setServiceIdentifier(const QString &service_identifier) {
    m_service_identifier = service_identifier;
    m_service_identifier_isSet = true;
}

bool OAICreateRoute_request::is_service_identifier_Set() const{
    return m_service_identifier_isSet;
}

bool OAICreateRoute_request::is_service_identifier_Valid() const{
    return m_service_identifier_isValid;
}

QMap<QString, QString> OAICreateRoute_request::getTags() const {
    return m_tags;
}
void OAICreateRoute_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateRoute_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateRoute_request::is_tags_Valid() const{
    return m_tags_isValid;
}

OAICreateRoute_request_UriPathRoute OAICreateRoute_request::getUriPathRoute() const {
    return m_uri_path_route;
}
void OAICreateRoute_request::setUriPathRoute(const OAICreateRoute_request_UriPathRoute &uri_path_route) {
    m_uri_path_route = uri_path_route;
    m_uri_path_route_isSet = true;
}

bool OAICreateRoute_request::is_uri_path_route_Set() const{
    return m_uri_path_route_isSet;
}

bool OAICreateRoute_request::is_uri_path_route_Valid() const{
    return m_uri_path_route_isValid;
}

bool OAICreateRoute_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_route.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_route_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_path_route.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateRoute_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_route_type_isValid && m_service_identifier_isValid && true;
}

} // namespace OpenAPI
