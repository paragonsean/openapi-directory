/**
 * AWS Migration Hub Refactor Spaces
 * <p><fullname>Amazon Web Services Migration Hub Refactor Spaces</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Amazon Web Services Migration Hub Refactor Spaces (Refactor Spaces). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the Amazon Web Services SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"https://aws.amazon.com/tools/#SDKs\">Amazon Web Services SDKs</a>.</p> <p>To share Refactor Spaces environments with other Amazon Web Services accounts or with Organizations and their OUs, use Resource Access Manager's <code>CreateResourceShare</code> API. See <a href=\"https://docs.aws.amazon.com/ram/latest/APIReference/API_CreateResourceShare.html\">CreateResourceShare</a> in the <i>Amazon Web Services RAM API Reference</i>.</p></p>
 *
 * The version of the OpenAPI document: 2021-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateService_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateService_request::OAICreateService_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateService_request::OAICreateService_request() {
    this->initializeModel();
}

OAICreateService_request::~OAICreateService_request() {}

void OAICreateService_request::initializeModel() {

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_endpoint_type_isSet = false;
    m_endpoint_type_isValid = false;

    m_lambda_endpoint_isSet = false;
    m_lambda_endpoint_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_url_endpoint_isSet = false;
    m_url_endpoint_isValid = false;

    m_vpc_id_isSet = false;
    m_vpc_id_isValid = false;
}

void OAICreateService_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateService_request::fromJsonObject(QJsonObject json) {

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("ClientToken")]);
    m_client_token_isSet = !json[QString("ClientToken")].isNull() && m_client_token_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_endpoint_type_isValid = ::OpenAPI::fromJsonValue(m_endpoint_type, json[QString("EndpointType")]);
    m_endpoint_type_isSet = !json[QString("EndpointType")].isNull() && m_endpoint_type_isValid;

    m_lambda_endpoint_isValid = ::OpenAPI::fromJsonValue(m_lambda_endpoint, json[QString("LambdaEndpoint")]);
    m_lambda_endpoint_isSet = !json[QString("LambdaEndpoint")].isNull() && m_lambda_endpoint_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_url_endpoint_isValid = ::OpenAPI::fromJsonValue(m_url_endpoint, json[QString("UrlEndpoint")]);
    m_url_endpoint_isSet = !json[QString("UrlEndpoint")].isNull() && m_url_endpoint_isValid;

    m_vpc_id_isValid = ::OpenAPI::fromJsonValue(m_vpc_id, json[QString("VpcId")]);
    m_vpc_id_isSet = !json[QString("VpcId")].isNull() && m_vpc_id_isValid;
}

QString OAICreateService_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateService_request::asJsonObject() const {
    QJsonObject obj;
    if (m_client_token_isSet) {
        obj.insert(QString("ClientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_endpoint_type_isSet) {
        obj.insert(QString("EndpointType"), ::OpenAPI::toJsonValue(m_endpoint_type));
    }
    if (m_lambda_endpoint.isSet()) {
        obj.insert(QString("LambdaEndpoint"), ::OpenAPI::toJsonValue(m_lambda_endpoint));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_url_endpoint.isSet()) {
        obj.insert(QString("UrlEndpoint"), ::OpenAPI::toJsonValue(m_url_endpoint));
    }
    if (m_vpc_id_isSet) {
        obj.insert(QString("VpcId"), ::OpenAPI::toJsonValue(m_vpc_id));
    }
    return obj;
}

QString OAICreateService_request::getClientToken() const {
    return m_client_token;
}
void OAICreateService_request::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateService_request::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateService_request::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QString OAICreateService_request::getDescription() const {
    return m_description;
}
void OAICreateService_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateService_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateService_request::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICreateService_request::getEndpointType() const {
    return m_endpoint_type;
}
void OAICreateService_request::setEndpointType(const QString &endpoint_type) {
    m_endpoint_type = endpoint_type;
    m_endpoint_type_isSet = true;
}

bool OAICreateService_request::is_endpoint_type_Set() const{
    return m_endpoint_type_isSet;
}

bool OAICreateService_request::is_endpoint_type_Valid() const{
    return m_endpoint_type_isValid;
}

OAICreateService_request_LambdaEndpoint OAICreateService_request::getLambdaEndpoint() const {
    return m_lambda_endpoint;
}
void OAICreateService_request::setLambdaEndpoint(const OAICreateService_request_LambdaEndpoint &lambda_endpoint) {
    m_lambda_endpoint = lambda_endpoint;
    m_lambda_endpoint_isSet = true;
}

bool OAICreateService_request::is_lambda_endpoint_Set() const{
    return m_lambda_endpoint_isSet;
}

bool OAICreateService_request::is_lambda_endpoint_Valid() const{
    return m_lambda_endpoint_isValid;
}

QString OAICreateService_request::getName() const {
    return m_name;
}
void OAICreateService_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateService_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateService_request::is_name_Valid() const{
    return m_name_isValid;
}

QMap<QString, QString> OAICreateService_request::getTags() const {
    return m_tags;
}
void OAICreateService_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateService_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateService_request::is_tags_Valid() const{
    return m_tags_isValid;
}

OAICreateService_request_UrlEndpoint OAICreateService_request::getUrlEndpoint() const {
    return m_url_endpoint;
}
void OAICreateService_request::setUrlEndpoint(const OAICreateService_request_UrlEndpoint &url_endpoint) {
    m_url_endpoint = url_endpoint;
    m_url_endpoint_isSet = true;
}

bool OAICreateService_request::is_url_endpoint_Set() const{
    return m_url_endpoint_isSet;
}

bool OAICreateService_request::is_url_endpoint_Valid() const{
    return m_url_endpoint_isValid;
}

QString OAICreateService_request::getVpcId() const {
    return m_vpc_id;
}
void OAICreateService_request::setVpcId(const QString &vpc_id) {
    m_vpc_id = vpc_id;
    m_vpc_id_isSet = true;
}

bool OAICreateService_request::is_vpc_id_Set() const{
    return m_vpc_id_isSet;
}

bool OAICreateService_request::is_vpc_id_Valid() const{
    return m_vpc_id_isValid;
}

bool OAICreateService_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lambda_endpoint.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_endpoint.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateService_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_endpoint_type_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
