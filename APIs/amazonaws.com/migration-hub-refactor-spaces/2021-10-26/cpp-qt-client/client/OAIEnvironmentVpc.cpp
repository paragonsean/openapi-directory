/**
 * AWS Migration Hub Refactor Spaces
 * <p><fullname>Amazon Web Services Migration Hub Refactor Spaces</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Amazon Web Services Migration Hub Refactor Spaces (Refactor Spaces). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the Amazon Web Services SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"https://aws.amazon.com/tools/#SDKs\">Amazon Web Services SDKs</a>.</p> <p>To share Refactor Spaces environments with other Amazon Web Services accounts or with Organizations and their OUs, use Resource Access Manager's <code>CreateResourceShare</code> API. See <a href=\"https://docs.aws.amazon.com/ram/latest/APIReference/API_CreateResourceShare.html\">CreateResourceShare</a> in the <i>Amazon Web Services RAM API Reference</i>.</p></p>
 *
 * The version of the OpenAPI document: 2021-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnvironmentVpc.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnvironmentVpc::OAIEnvironmentVpc(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnvironmentVpc::OAIEnvironmentVpc() {
    this->initializeModel();
}

OAIEnvironmentVpc::~OAIEnvironmentVpc() {}

void OAIEnvironmentVpc::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_cidr_blocks_isSet = false;
    m_cidr_blocks_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_environment_id_isSet = false;
    m_environment_id_isValid = false;

    m_last_updated_time_isSet = false;
    m_last_updated_time_isValid = false;

    m_vpc_id_isSet = false;
    m_vpc_id_isValid = false;

    m_vpc_name_isSet = false;
    m_vpc_name_isValid = false;
}

void OAIEnvironmentVpc::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnvironmentVpc::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("AccountId")]);
    m_account_id_isSet = !json[QString("AccountId")].isNull() && m_account_id_isValid;

    m_cidr_blocks_isValid = ::OpenAPI::fromJsonValue(m_cidr_blocks, json[QString("CidrBlocks")]);
    m_cidr_blocks_isSet = !json[QString("CidrBlocks")].isNull() && m_cidr_blocks_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("CreatedTime")]);
    m_created_time_isSet = !json[QString("CreatedTime")].isNull() && m_created_time_isValid;

    m_environment_id_isValid = ::OpenAPI::fromJsonValue(m_environment_id, json[QString("EnvironmentId")]);
    m_environment_id_isSet = !json[QString("EnvironmentId")].isNull() && m_environment_id_isValid;

    m_last_updated_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time, json[QString("LastUpdatedTime")]);
    m_last_updated_time_isSet = !json[QString("LastUpdatedTime")].isNull() && m_last_updated_time_isValid;

    m_vpc_id_isValid = ::OpenAPI::fromJsonValue(m_vpc_id, json[QString("VpcId")]);
    m_vpc_id_isSet = !json[QString("VpcId")].isNull() && m_vpc_id_isValid;

    m_vpc_name_isValid = ::OpenAPI::fromJsonValue(m_vpc_name, json[QString("VpcName")]);
    m_vpc_name_isSet = !json[QString("VpcName")].isNull() && m_vpc_name_isValid;
}

QString OAIEnvironmentVpc::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnvironmentVpc::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("AccountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_cidr_blocks.isSet()) {
        obj.insert(QString("CidrBlocks"), ::OpenAPI::toJsonValue(m_cidr_blocks));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("CreatedTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_environment_id_isSet) {
        obj.insert(QString("EnvironmentId"), ::OpenAPI::toJsonValue(m_environment_id));
    }
    if (m_last_updated_time_isSet) {
        obj.insert(QString("LastUpdatedTime"), ::OpenAPI::toJsonValue(m_last_updated_time));
    }
    if (m_vpc_id_isSet) {
        obj.insert(QString("VpcId"), ::OpenAPI::toJsonValue(m_vpc_id));
    }
    if (m_vpc_name_isSet) {
        obj.insert(QString("VpcName"), ::OpenAPI::toJsonValue(m_vpc_name));
    }
    return obj;
}

QString OAIEnvironmentVpc::getAccountId() const {
    return m_account_id;
}
void OAIEnvironmentVpc::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIEnvironmentVpc::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIEnvironmentVpc::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QList OAIEnvironmentVpc::getCidrBlocks() const {
    return m_cidr_blocks;
}
void OAIEnvironmentVpc::setCidrBlocks(const QList &cidr_blocks) {
    m_cidr_blocks = cidr_blocks;
    m_cidr_blocks_isSet = true;
}

bool OAIEnvironmentVpc::is_cidr_blocks_Set() const{
    return m_cidr_blocks_isSet;
}

bool OAIEnvironmentVpc::is_cidr_blocks_Valid() const{
    return m_cidr_blocks_isValid;
}

QDateTime OAIEnvironmentVpc::getCreatedTime() const {
    return m_created_time;
}
void OAIEnvironmentVpc::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIEnvironmentVpc::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIEnvironmentVpc::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QString OAIEnvironmentVpc::getEnvironmentId() const {
    return m_environment_id;
}
void OAIEnvironmentVpc::setEnvironmentId(const QString &environment_id) {
    m_environment_id = environment_id;
    m_environment_id_isSet = true;
}

bool OAIEnvironmentVpc::is_environment_id_Set() const{
    return m_environment_id_isSet;
}

bool OAIEnvironmentVpc::is_environment_id_Valid() const{
    return m_environment_id_isValid;
}

QDateTime OAIEnvironmentVpc::getLastUpdatedTime() const {
    return m_last_updated_time;
}
void OAIEnvironmentVpc::setLastUpdatedTime(const QDateTime &last_updated_time) {
    m_last_updated_time = last_updated_time;
    m_last_updated_time_isSet = true;
}

bool OAIEnvironmentVpc::is_last_updated_time_Set() const{
    return m_last_updated_time_isSet;
}

bool OAIEnvironmentVpc::is_last_updated_time_Valid() const{
    return m_last_updated_time_isValid;
}

QString OAIEnvironmentVpc::getVpcId() const {
    return m_vpc_id;
}
void OAIEnvironmentVpc::setVpcId(const QString &vpc_id) {
    m_vpc_id = vpc_id;
    m_vpc_id_isSet = true;
}

bool OAIEnvironmentVpc::is_vpc_id_Set() const{
    return m_vpc_id_isSet;
}

bool OAIEnvironmentVpc::is_vpc_id_Valid() const{
    return m_vpc_id_isValid;
}

QString OAIEnvironmentVpc::getVpcName() const {
    return m_vpc_name;
}
void OAIEnvironmentVpc::setVpcName(const QString &vpc_name) {
    m_vpc_name = vpc_name;
    m_vpc_name_isSet = true;
}

bool OAIEnvironmentVpc::is_vpc_name_Set() const{
    return m_vpc_name_isSet;
}

bool OAIEnvironmentVpc::is_vpc_name_Valid() const{
    return m_vpc_name_isValid;
}

bool OAIEnvironmentVpc::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cidr_blocks.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnvironmentVpc::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
