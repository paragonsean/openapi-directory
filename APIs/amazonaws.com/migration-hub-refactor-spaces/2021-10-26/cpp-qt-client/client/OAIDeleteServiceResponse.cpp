/**
 * AWS Migration Hub Refactor Spaces
 * <p><fullname>Amazon Web Services Migration Hub Refactor Spaces</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Amazon Web Services Migration Hub Refactor Spaces (Refactor Spaces). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the Amazon Web Services SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"https://aws.amazon.com/tools/#SDKs\">Amazon Web Services SDKs</a>.</p> <p>To share Refactor Spaces environments with other Amazon Web Services accounts or with Organizations and their OUs, use Resource Access Manager's <code>CreateResourceShare</code> API. See <a href=\"https://docs.aws.amazon.com/ram/latest/APIReference/API_CreateResourceShare.html\">CreateResourceShare</a> in the <i>Amazon Web Services RAM API Reference</i>.</p></p>
 *
 * The version of the OpenAPI document: 2021-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteServiceResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteServiceResponse::OAIDeleteServiceResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteServiceResponse::OAIDeleteServiceResponse() {
    this->initializeModel();
}

OAIDeleteServiceResponse::~OAIDeleteServiceResponse() {}

void OAIDeleteServiceResponse::initializeModel() {

    m_application_id_isSet = false;
    m_application_id_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_environment_id_isSet = false;
    m_environment_id_isValid = false;

    m_last_updated_time_isSet = false;
    m_last_updated_time_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_service_id_isSet = false;
    m_service_id_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIDeleteServiceResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteServiceResponse::fromJsonObject(QJsonObject json) {

    m_application_id_isValid = ::OpenAPI::fromJsonValue(m_application_id, json[QString("ApplicationId")]);
    m_application_id_isSet = !json[QString("ApplicationId")].isNull() && m_application_id_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_environment_id_isValid = ::OpenAPI::fromJsonValue(m_environment_id, json[QString("EnvironmentId")]);
    m_environment_id_isSet = !json[QString("EnvironmentId")].isNull() && m_environment_id_isValid;

    m_last_updated_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time, json[QString("LastUpdatedTime")]);
    m_last_updated_time_isSet = !json[QString("LastUpdatedTime")].isNull() && m_last_updated_time_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_service_id_isValid = ::OpenAPI::fromJsonValue(m_service_id, json[QString("ServiceId")]);
    m_service_id_isSet = !json[QString("ServiceId")].isNull() && m_service_id_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;
}

QString OAIDeleteServiceResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteServiceResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_application_id_isSet) {
        obj.insert(QString("ApplicationId"), ::OpenAPI::toJsonValue(m_application_id));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_environment_id_isSet) {
        obj.insert(QString("EnvironmentId"), ::OpenAPI::toJsonValue(m_environment_id));
    }
    if (m_last_updated_time_isSet) {
        obj.insert(QString("LastUpdatedTime"), ::OpenAPI::toJsonValue(m_last_updated_time));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_service_id_isSet) {
        obj.insert(QString("ServiceId"), ::OpenAPI::toJsonValue(m_service_id));
    }
    if (m_state.isSet()) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIDeleteServiceResponse::getApplicationId() const {
    return m_application_id;
}
void OAIDeleteServiceResponse::setApplicationId(const QString &application_id) {
    m_application_id = application_id;
    m_application_id_isSet = true;
}

bool OAIDeleteServiceResponse::is_application_id_Set() const{
    return m_application_id_isSet;
}

bool OAIDeleteServiceResponse::is_application_id_Valid() const{
    return m_application_id_isValid;
}

QString OAIDeleteServiceResponse::getArn() const {
    return m_arn;
}
void OAIDeleteServiceResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIDeleteServiceResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIDeleteServiceResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIDeleteServiceResponse::getEnvironmentId() const {
    return m_environment_id;
}
void OAIDeleteServiceResponse::setEnvironmentId(const QString &environment_id) {
    m_environment_id = environment_id;
    m_environment_id_isSet = true;
}

bool OAIDeleteServiceResponse::is_environment_id_Set() const{
    return m_environment_id_isSet;
}

bool OAIDeleteServiceResponse::is_environment_id_Valid() const{
    return m_environment_id_isValid;
}

QDateTime OAIDeleteServiceResponse::getLastUpdatedTime() const {
    return m_last_updated_time;
}
void OAIDeleteServiceResponse::setLastUpdatedTime(const QDateTime &last_updated_time) {
    m_last_updated_time = last_updated_time;
    m_last_updated_time_isSet = true;
}

bool OAIDeleteServiceResponse::is_last_updated_time_Set() const{
    return m_last_updated_time_isSet;
}

bool OAIDeleteServiceResponse::is_last_updated_time_Valid() const{
    return m_last_updated_time_isValid;
}

QString OAIDeleteServiceResponse::getName() const {
    return m_name;
}
void OAIDeleteServiceResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDeleteServiceResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDeleteServiceResponse::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDeleteServiceResponse::getServiceId() const {
    return m_service_id;
}
void OAIDeleteServiceResponse::setServiceId(const QString &service_id) {
    m_service_id = service_id;
    m_service_id_isSet = true;
}

bool OAIDeleteServiceResponse::is_service_id_Set() const{
    return m_service_id_isSet;
}

bool OAIDeleteServiceResponse::is_service_id_Valid() const{
    return m_service_id_isValid;
}

OAIServiceState OAIDeleteServiceResponse::getState() const {
    return m_state;
}
void OAIDeleteServiceResponse::setState(const OAIServiceState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIDeleteServiceResponse::is_state_Set() const{
    return m_state_isSet;
}

bool OAIDeleteServiceResponse::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIDeleteServiceResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteServiceResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
