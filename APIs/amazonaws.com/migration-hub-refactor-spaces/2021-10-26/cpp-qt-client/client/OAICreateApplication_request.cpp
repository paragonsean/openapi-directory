/**
 * AWS Migration Hub Refactor Spaces
 * <p><fullname>Amazon Web Services Migration Hub Refactor Spaces</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Amazon Web Services Migration Hub Refactor Spaces (Refactor Spaces). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the Amazon Web Services SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"https://aws.amazon.com/tools/#SDKs\">Amazon Web Services SDKs</a>.</p> <p>To share Refactor Spaces environments with other Amazon Web Services accounts or with Organizations and their OUs, use Resource Access Manager's <code>CreateResourceShare</code> API. See <a href=\"https://docs.aws.amazon.com/ram/latest/APIReference/API_CreateResourceShare.html\">CreateResourceShare</a> in the <i>Amazon Web Services RAM API Reference</i>.</p></p>
 *
 * The version of the OpenAPI document: 2021-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateApplication_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateApplication_request::OAICreateApplication_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateApplication_request::OAICreateApplication_request() {
    this->initializeModel();
}

OAICreateApplication_request::~OAICreateApplication_request() {}

void OAICreateApplication_request::initializeModel() {

    m_api_gateway_proxy_isSet = false;
    m_api_gateway_proxy_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_proxy_type_isSet = false;
    m_proxy_type_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_vpc_id_isSet = false;
    m_vpc_id_isValid = false;
}

void OAICreateApplication_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateApplication_request::fromJsonObject(QJsonObject json) {

    m_api_gateway_proxy_isValid = ::OpenAPI::fromJsonValue(m_api_gateway_proxy, json[QString("ApiGatewayProxy")]);
    m_api_gateway_proxy_isSet = !json[QString("ApiGatewayProxy")].isNull() && m_api_gateway_proxy_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("ClientToken")]);
    m_client_token_isSet = !json[QString("ClientToken")].isNull() && m_client_token_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_proxy_type_isValid = ::OpenAPI::fromJsonValue(m_proxy_type, json[QString("ProxyType")]);
    m_proxy_type_isSet = !json[QString("ProxyType")].isNull() && m_proxy_type_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_vpc_id_isValid = ::OpenAPI::fromJsonValue(m_vpc_id, json[QString("VpcId")]);
    m_vpc_id_isSet = !json[QString("VpcId")].isNull() && m_vpc_id_isValid;
}

QString OAICreateApplication_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateApplication_request::asJsonObject() const {
    QJsonObject obj;
    if (m_api_gateway_proxy.isSet()) {
        obj.insert(QString("ApiGatewayProxy"), ::OpenAPI::toJsonValue(m_api_gateway_proxy));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("ClientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_proxy_type_isSet) {
        obj.insert(QString("ProxyType"), ::OpenAPI::toJsonValue(m_proxy_type));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_vpc_id_isSet) {
        obj.insert(QString("VpcId"), ::OpenAPI::toJsonValue(m_vpc_id));
    }
    return obj;
}

OAICreateApplication_request_ApiGatewayProxy OAICreateApplication_request::getApiGatewayProxy() const {
    return m_api_gateway_proxy;
}
void OAICreateApplication_request::setApiGatewayProxy(const OAICreateApplication_request_ApiGatewayProxy &api_gateway_proxy) {
    m_api_gateway_proxy = api_gateway_proxy;
    m_api_gateway_proxy_isSet = true;
}

bool OAICreateApplication_request::is_api_gateway_proxy_Set() const{
    return m_api_gateway_proxy_isSet;
}

bool OAICreateApplication_request::is_api_gateway_proxy_Valid() const{
    return m_api_gateway_proxy_isValid;
}

QString OAICreateApplication_request::getClientToken() const {
    return m_client_token;
}
void OAICreateApplication_request::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateApplication_request::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateApplication_request::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QString OAICreateApplication_request::getName() const {
    return m_name;
}
void OAICreateApplication_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateApplication_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateApplication_request::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateApplication_request::getProxyType() const {
    return m_proxy_type;
}
void OAICreateApplication_request::setProxyType(const QString &proxy_type) {
    m_proxy_type = proxy_type;
    m_proxy_type_isSet = true;
}

bool OAICreateApplication_request::is_proxy_type_Set() const{
    return m_proxy_type_isSet;
}

bool OAICreateApplication_request::is_proxy_type_Valid() const{
    return m_proxy_type_isValid;
}

QMap<QString, QString> OAICreateApplication_request::getTags() const {
    return m_tags;
}
void OAICreateApplication_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateApplication_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateApplication_request::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAICreateApplication_request::getVpcId() const {
    return m_vpc_id;
}
void OAICreateApplication_request::setVpcId(const QString &vpc_id) {
    m_vpc_id = vpc_id;
    m_vpc_id_isSet = true;
}

bool OAICreateApplication_request::is_vpc_id_Set() const{
    return m_vpc_id_isSet;
}

bool OAICreateApplication_request::is_vpc_id_Valid() const{
    return m_vpc_id_isValid;
}

bool OAICreateApplication_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_gateway_proxy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proxy_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateApplication_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_proxy_type_isValid && m_vpc_id_isValid && true;
}

} // namespace OpenAPI
