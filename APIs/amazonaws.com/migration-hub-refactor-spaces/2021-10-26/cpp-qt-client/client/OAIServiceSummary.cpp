/**
 * AWS Migration Hub Refactor Spaces
 * <p><fullname>Amazon Web Services Migration Hub Refactor Spaces</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Amazon Web Services Migration Hub Refactor Spaces (Refactor Spaces). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the Amazon Web Services SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"https://aws.amazon.com/tools/#SDKs\">Amazon Web Services SDKs</a>.</p> <p>To share Refactor Spaces environments with other Amazon Web Services accounts or with Organizations and their OUs, use Resource Access Manager's <code>CreateResourceShare</code> API. See <a href=\"https://docs.aws.amazon.com/ram/latest/APIReference/API_CreateResourceShare.html\">CreateResourceShare</a> in the <i>Amazon Web Services RAM API Reference</i>.</p></p>
 *
 * The version of the OpenAPI document: 2021-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceSummary::OAIServiceSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceSummary::OAIServiceSummary() {
    this->initializeModel();
}

OAIServiceSummary::~OAIServiceSummary() {}

void OAIServiceSummary::initializeModel() {

    m_application_id_isSet = false;
    m_application_id_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_created_by_account_id_isSet = false;
    m_created_by_account_id_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_endpoint_type_isSet = false;
    m_endpoint_type_isValid = false;

    m_environment_id_isSet = false;
    m_environment_id_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_lambda_endpoint_isSet = false;
    m_lambda_endpoint_isValid = false;

    m_last_updated_time_isSet = false;
    m_last_updated_time_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_owner_account_id_isSet = false;
    m_owner_account_id_isValid = false;

    m_service_id_isSet = false;
    m_service_id_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_url_endpoint_isSet = false;
    m_url_endpoint_isValid = false;

    m_vpc_id_isSet = false;
    m_vpc_id_isValid = false;
}

void OAIServiceSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceSummary::fromJsonObject(QJsonObject json) {

    m_application_id_isValid = ::OpenAPI::fromJsonValue(m_application_id, json[QString("ApplicationId")]);
    m_application_id_isSet = !json[QString("ApplicationId")].isNull() && m_application_id_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_created_by_account_id_isValid = ::OpenAPI::fromJsonValue(m_created_by_account_id, json[QString("CreatedByAccountId")]);
    m_created_by_account_id_isSet = !json[QString("CreatedByAccountId")].isNull() && m_created_by_account_id_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("CreatedTime")]);
    m_created_time_isSet = !json[QString("CreatedTime")].isNull() && m_created_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_endpoint_type_isValid = ::OpenAPI::fromJsonValue(m_endpoint_type, json[QString("EndpointType")]);
    m_endpoint_type_isSet = !json[QString("EndpointType")].isNull() && m_endpoint_type_isValid;

    m_environment_id_isValid = ::OpenAPI::fromJsonValue(m_environment_id, json[QString("EnvironmentId")]);
    m_environment_id_isSet = !json[QString("EnvironmentId")].isNull() && m_environment_id_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("Error")]);
    m_error_isSet = !json[QString("Error")].isNull() && m_error_isValid;

    m_lambda_endpoint_isValid = ::OpenAPI::fromJsonValue(m_lambda_endpoint, json[QString("LambdaEndpoint")]);
    m_lambda_endpoint_isSet = !json[QString("LambdaEndpoint")].isNull() && m_lambda_endpoint_isValid;

    m_last_updated_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time, json[QString("LastUpdatedTime")]);
    m_last_updated_time_isSet = !json[QString("LastUpdatedTime")].isNull() && m_last_updated_time_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_owner_account_id_isValid = ::OpenAPI::fromJsonValue(m_owner_account_id, json[QString("OwnerAccountId")]);
    m_owner_account_id_isSet = !json[QString("OwnerAccountId")].isNull() && m_owner_account_id_isValid;

    m_service_id_isValid = ::OpenAPI::fromJsonValue(m_service_id, json[QString("ServiceId")]);
    m_service_id_isSet = !json[QString("ServiceId")].isNull() && m_service_id_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_url_endpoint_isValid = ::OpenAPI::fromJsonValue(m_url_endpoint, json[QString("UrlEndpoint")]);
    m_url_endpoint_isSet = !json[QString("UrlEndpoint")].isNull() && m_url_endpoint_isValid;

    m_vpc_id_isValid = ::OpenAPI::fromJsonValue(m_vpc_id, json[QString("VpcId")]);
    m_vpc_id_isSet = !json[QString("VpcId")].isNull() && m_vpc_id_isValid;
}

QString OAIServiceSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_application_id_isSet) {
        obj.insert(QString("ApplicationId"), ::OpenAPI::toJsonValue(m_application_id));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_created_by_account_id_isSet) {
        obj.insert(QString("CreatedByAccountId"), ::OpenAPI::toJsonValue(m_created_by_account_id));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("CreatedTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_endpoint_type.isSet()) {
        obj.insert(QString("EndpointType"), ::OpenAPI::toJsonValue(m_endpoint_type));
    }
    if (m_environment_id_isSet) {
        obj.insert(QString("EnvironmentId"), ::OpenAPI::toJsonValue(m_environment_id));
    }
    if (m_error.isSet()) {
        obj.insert(QString("Error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_lambda_endpoint.isSet()) {
        obj.insert(QString("LambdaEndpoint"), ::OpenAPI::toJsonValue(m_lambda_endpoint));
    }
    if (m_last_updated_time_isSet) {
        obj.insert(QString("LastUpdatedTime"), ::OpenAPI::toJsonValue(m_last_updated_time));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_owner_account_id_isSet) {
        obj.insert(QString("OwnerAccountId"), ::OpenAPI::toJsonValue(m_owner_account_id));
    }
    if (m_service_id_isSet) {
        obj.insert(QString("ServiceId"), ::OpenAPI::toJsonValue(m_service_id));
    }
    if (m_state.isSet()) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_url_endpoint.isSet()) {
        obj.insert(QString("UrlEndpoint"), ::OpenAPI::toJsonValue(m_url_endpoint));
    }
    if (m_vpc_id_isSet) {
        obj.insert(QString("VpcId"), ::OpenAPI::toJsonValue(m_vpc_id));
    }
    return obj;
}

QString OAIServiceSummary::getApplicationId() const {
    return m_application_id;
}
void OAIServiceSummary::setApplicationId(const QString &application_id) {
    m_application_id = application_id;
    m_application_id_isSet = true;
}

bool OAIServiceSummary::is_application_id_Set() const{
    return m_application_id_isSet;
}

bool OAIServiceSummary::is_application_id_Valid() const{
    return m_application_id_isValid;
}

QString OAIServiceSummary::getArn() const {
    return m_arn;
}
void OAIServiceSummary::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIServiceSummary::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIServiceSummary::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIServiceSummary::getCreatedByAccountId() const {
    return m_created_by_account_id;
}
void OAIServiceSummary::setCreatedByAccountId(const QString &created_by_account_id) {
    m_created_by_account_id = created_by_account_id;
    m_created_by_account_id_isSet = true;
}

bool OAIServiceSummary::is_created_by_account_id_Set() const{
    return m_created_by_account_id_isSet;
}

bool OAIServiceSummary::is_created_by_account_id_Valid() const{
    return m_created_by_account_id_isValid;
}

QDateTime OAIServiceSummary::getCreatedTime() const {
    return m_created_time;
}
void OAIServiceSummary::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIServiceSummary::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIServiceSummary::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QString OAIServiceSummary::getDescription() const {
    return m_description;
}
void OAIServiceSummary::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIServiceSummary::is_description_Set() const{
    return m_description_isSet;
}

bool OAIServiceSummary::is_description_Valid() const{
    return m_description_isValid;
}

OAIServiceEndpointType OAIServiceSummary::getEndpointType() const {
    return m_endpoint_type;
}
void OAIServiceSummary::setEndpointType(const OAIServiceEndpointType &endpoint_type) {
    m_endpoint_type = endpoint_type;
    m_endpoint_type_isSet = true;
}

bool OAIServiceSummary::is_endpoint_type_Set() const{
    return m_endpoint_type_isSet;
}

bool OAIServiceSummary::is_endpoint_type_Valid() const{
    return m_endpoint_type_isValid;
}

QString OAIServiceSummary::getEnvironmentId() const {
    return m_environment_id;
}
void OAIServiceSummary::setEnvironmentId(const QString &environment_id) {
    m_environment_id = environment_id;
    m_environment_id_isSet = true;
}

bool OAIServiceSummary::is_environment_id_Set() const{
    return m_environment_id_isSet;
}

bool OAIServiceSummary::is_environment_id_Valid() const{
    return m_environment_id_isValid;
}

OAIGetServiceResponse_Error OAIServiceSummary::getError() const {
    return m_error;
}
void OAIServiceSummary::setError(const OAIGetServiceResponse_Error &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIServiceSummary::is_error_Set() const{
    return m_error_isSet;
}

bool OAIServiceSummary::is_error_Valid() const{
    return m_error_isValid;
}

OAIServiceSummary_LambdaEndpoint OAIServiceSummary::getLambdaEndpoint() const {
    return m_lambda_endpoint;
}
void OAIServiceSummary::setLambdaEndpoint(const OAIServiceSummary_LambdaEndpoint &lambda_endpoint) {
    m_lambda_endpoint = lambda_endpoint;
    m_lambda_endpoint_isSet = true;
}

bool OAIServiceSummary::is_lambda_endpoint_Set() const{
    return m_lambda_endpoint_isSet;
}

bool OAIServiceSummary::is_lambda_endpoint_Valid() const{
    return m_lambda_endpoint_isValid;
}

QDateTime OAIServiceSummary::getLastUpdatedTime() const {
    return m_last_updated_time;
}
void OAIServiceSummary::setLastUpdatedTime(const QDateTime &last_updated_time) {
    m_last_updated_time = last_updated_time;
    m_last_updated_time_isSet = true;
}

bool OAIServiceSummary::is_last_updated_time_Set() const{
    return m_last_updated_time_isSet;
}

bool OAIServiceSummary::is_last_updated_time_Valid() const{
    return m_last_updated_time_isValid;
}

QString OAIServiceSummary::getName() const {
    return m_name;
}
void OAIServiceSummary::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIServiceSummary::is_name_Set() const{
    return m_name_isSet;
}

bool OAIServiceSummary::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIServiceSummary::getOwnerAccountId() const {
    return m_owner_account_id;
}
void OAIServiceSummary::setOwnerAccountId(const QString &owner_account_id) {
    m_owner_account_id = owner_account_id;
    m_owner_account_id_isSet = true;
}

bool OAIServiceSummary::is_owner_account_id_Set() const{
    return m_owner_account_id_isSet;
}

bool OAIServiceSummary::is_owner_account_id_Valid() const{
    return m_owner_account_id_isValid;
}

QString OAIServiceSummary::getServiceId() const {
    return m_service_id;
}
void OAIServiceSummary::setServiceId(const QString &service_id) {
    m_service_id = service_id;
    m_service_id_isSet = true;
}

bool OAIServiceSummary::is_service_id_Set() const{
    return m_service_id_isSet;
}

bool OAIServiceSummary::is_service_id_Valid() const{
    return m_service_id_isValid;
}

OAIServiceState OAIServiceSummary::getState() const {
    return m_state;
}
void OAIServiceSummary::setState(const OAIServiceState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIServiceSummary::is_state_Set() const{
    return m_state_isSet;
}

bool OAIServiceSummary::is_state_Valid() const{
    return m_state_isValid;
}

QMap OAIServiceSummary::getTags() const {
    return m_tags;
}
void OAIServiceSummary::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIServiceSummary::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIServiceSummary::is_tags_Valid() const{
    return m_tags_isValid;
}

OAIServiceSummary_UrlEndpoint OAIServiceSummary::getUrlEndpoint() const {
    return m_url_endpoint;
}
void OAIServiceSummary::setUrlEndpoint(const OAIServiceSummary_UrlEndpoint &url_endpoint) {
    m_url_endpoint = url_endpoint;
    m_url_endpoint_isSet = true;
}

bool OAIServiceSummary::is_url_endpoint_Set() const{
    return m_url_endpoint_isSet;
}

bool OAIServiceSummary::is_url_endpoint_Valid() const{
    return m_url_endpoint_isValid;
}

QString OAIServiceSummary::getVpcId() const {
    return m_vpc_id;
}
void OAIServiceSummary::setVpcId(const QString &vpc_id) {
    m_vpc_id = vpc_id;
    m_vpc_id_isSet = true;
}

bool OAIServiceSummary::is_vpc_id_Set() const{
    return m_vpc_id_isSet;
}

bool OAIServiceSummary::is_vpc_id_Valid() const{
    return m_vpc_id_isValid;
}

bool OAIServiceSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lambda_endpoint.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_endpoint.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
