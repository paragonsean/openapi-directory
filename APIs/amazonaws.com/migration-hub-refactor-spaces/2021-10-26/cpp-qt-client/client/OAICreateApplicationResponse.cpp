/**
 * AWS Migration Hub Refactor Spaces
 * <p><fullname>Amazon Web Services Migration Hub Refactor Spaces</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Amazon Web Services Migration Hub Refactor Spaces (Refactor Spaces). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the Amazon Web Services SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"https://aws.amazon.com/tools/#SDKs\">Amazon Web Services SDKs</a>.</p> <p>To share Refactor Spaces environments with other Amazon Web Services accounts or with Organizations and their OUs, use Resource Access Manager's <code>CreateResourceShare</code> API. See <a href=\"https://docs.aws.amazon.com/ram/latest/APIReference/API_CreateResourceShare.html\">CreateResourceShare</a> in the <i>Amazon Web Services RAM API Reference</i>.</p></p>
 *
 * The version of the OpenAPI document: 2021-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateApplicationResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateApplicationResponse::OAICreateApplicationResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateApplicationResponse::OAICreateApplicationResponse() {
    this->initializeModel();
}

OAICreateApplicationResponse::~OAICreateApplicationResponse() {}

void OAICreateApplicationResponse::initializeModel() {

    m_api_gateway_proxy_isSet = false;
    m_api_gateway_proxy_isValid = false;

    m_application_id_isSet = false;
    m_application_id_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_created_by_account_id_isSet = false;
    m_created_by_account_id_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_environment_id_isSet = false;
    m_environment_id_isValid = false;

    m_last_updated_time_isSet = false;
    m_last_updated_time_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_owner_account_id_isSet = false;
    m_owner_account_id_isValid = false;

    m_proxy_type_isSet = false;
    m_proxy_type_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_vpc_id_isSet = false;
    m_vpc_id_isValid = false;
}

void OAICreateApplicationResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateApplicationResponse::fromJsonObject(QJsonObject json) {

    m_api_gateway_proxy_isValid = ::OpenAPI::fromJsonValue(m_api_gateway_proxy, json[QString("ApiGatewayProxy")]);
    m_api_gateway_proxy_isSet = !json[QString("ApiGatewayProxy")].isNull() && m_api_gateway_proxy_isValid;

    m_application_id_isValid = ::OpenAPI::fromJsonValue(m_application_id, json[QString("ApplicationId")]);
    m_application_id_isSet = !json[QString("ApplicationId")].isNull() && m_application_id_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_created_by_account_id_isValid = ::OpenAPI::fromJsonValue(m_created_by_account_id, json[QString("CreatedByAccountId")]);
    m_created_by_account_id_isSet = !json[QString("CreatedByAccountId")].isNull() && m_created_by_account_id_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("CreatedTime")]);
    m_created_time_isSet = !json[QString("CreatedTime")].isNull() && m_created_time_isValid;

    m_environment_id_isValid = ::OpenAPI::fromJsonValue(m_environment_id, json[QString("EnvironmentId")]);
    m_environment_id_isSet = !json[QString("EnvironmentId")].isNull() && m_environment_id_isValid;

    m_last_updated_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time, json[QString("LastUpdatedTime")]);
    m_last_updated_time_isSet = !json[QString("LastUpdatedTime")].isNull() && m_last_updated_time_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_owner_account_id_isValid = ::OpenAPI::fromJsonValue(m_owner_account_id, json[QString("OwnerAccountId")]);
    m_owner_account_id_isSet = !json[QString("OwnerAccountId")].isNull() && m_owner_account_id_isValid;

    m_proxy_type_isValid = ::OpenAPI::fromJsonValue(m_proxy_type, json[QString("ProxyType")]);
    m_proxy_type_isSet = !json[QString("ProxyType")].isNull() && m_proxy_type_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_vpc_id_isValid = ::OpenAPI::fromJsonValue(m_vpc_id, json[QString("VpcId")]);
    m_vpc_id_isSet = !json[QString("VpcId")].isNull() && m_vpc_id_isValid;
}

QString OAICreateApplicationResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateApplicationResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_api_gateway_proxy.isSet()) {
        obj.insert(QString("ApiGatewayProxy"), ::OpenAPI::toJsonValue(m_api_gateway_proxy));
    }
    if (m_application_id_isSet) {
        obj.insert(QString("ApplicationId"), ::OpenAPI::toJsonValue(m_application_id));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_created_by_account_id_isSet) {
        obj.insert(QString("CreatedByAccountId"), ::OpenAPI::toJsonValue(m_created_by_account_id));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("CreatedTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_environment_id_isSet) {
        obj.insert(QString("EnvironmentId"), ::OpenAPI::toJsonValue(m_environment_id));
    }
    if (m_last_updated_time_isSet) {
        obj.insert(QString("LastUpdatedTime"), ::OpenAPI::toJsonValue(m_last_updated_time));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_owner_account_id_isSet) {
        obj.insert(QString("OwnerAccountId"), ::OpenAPI::toJsonValue(m_owner_account_id));
    }
    if (m_proxy_type.isSet()) {
        obj.insert(QString("ProxyType"), ::OpenAPI::toJsonValue(m_proxy_type));
    }
    if (m_state.isSet()) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_vpc_id_isSet) {
        obj.insert(QString("VpcId"), ::OpenAPI::toJsonValue(m_vpc_id));
    }
    return obj;
}

OAICreateApplicationResponse_ApiGatewayProxy OAICreateApplicationResponse::getApiGatewayProxy() const {
    return m_api_gateway_proxy;
}
void OAICreateApplicationResponse::setApiGatewayProxy(const OAICreateApplicationResponse_ApiGatewayProxy &api_gateway_proxy) {
    m_api_gateway_proxy = api_gateway_proxy;
    m_api_gateway_proxy_isSet = true;
}

bool OAICreateApplicationResponse::is_api_gateway_proxy_Set() const{
    return m_api_gateway_proxy_isSet;
}

bool OAICreateApplicationResponse::is_api_gateway_proxy_Valid() const{
    return m_api_gateway_proxy_isValid;
}

QString OAICreateApplicationResponse::getApplicationId() const {
    return m_application_id;
}
void OAICreateApplicationResponse::setApplicationId(const QString &application_id) {
    m_application_id = application_id;
    m_application_id_isSet = true;
}

bool OAICreateApplicationResponse::is_application_id_Set() const{
    return m_application_id_isSet;
}

bool OAICreateApplicationResponse::is_application_id_Valid() const{
    return m_application_id_isValid;
}

QString OAICreateApplicationResponse::getArn() const {
    return m_arn;
}
void OAICreateApplicationResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAICreateApplicationResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAICreateApplicationResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAICreateApplicationResponse::getCreatedByAccountId() const {
    return m_created_by_account_id;
}
void OAICreateApplicationResponse::setCreatedByAccountId(const QString &created_by_account_id) {
    m_created_by_account_id = created_by_account_id;
    m_created_by_account_id_isSet = true;
}

bool OAICreateApplicationResponse::is_created_by_account_id_Set() const{
    return m_created_by_account_id_isSet;
}

bool OAICreateApplicationResponse::is_created_by_account_id_Valid() const{
    return m_created_by_account_id_isValid;
}

QDateTime OAICreateApplicationResponse::getCreatedTime() const {
    return m_created_time;
}
void OAICreateApplicationResponse::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAICreateApplicationResponse::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAICreateApplicationResponse::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QString OAICreateApplicationResponse::getEnvironmentId() const {
    return m_environment_id;
}
void OAICreateApplicationResponse::setEnvironmentId(const QString &environment_id) {
    m_environment_id = environment_id;
    m_environment_id_isSet = true;
}

bool OAICreateApplicationResponse::is_environment_id_Set() const{
    return m_environment_id_isSet;
}

bool OAICreateApplicationResponse::is_environment_id_Valid() const{
    return m_environment_id_isValid;
}

QDateTime OAICreateApplicationResponse::getLastUpdatedTime() const {
    return m_last_updated_time;
}
void OAICreateApplicationResponse::setLastUpdatedTime(const QDateTime &last_updated_time) {
    m_last_updated_time = last_updated_time;
    m_last_updated_time_isSet = true;
}

bool OAICreateApplicationResponse::is_last_updated_time_Set() const{
    return m_last_updated_time_isSet;
}

bool OAICreateApplicationResponse::is_last_updated_time_Valid() const{
    return m_last_updated_time_isValid;
}

QString OAICreateApplicationResponse::getName() const {
    return m_name;
}
void OAICreateApplicationResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateApplicationResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateApplicationResponse::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateApplicationResponse::getOwnerAccountId() const {
    return m_owner_account_id;
}
void OAICreateApplicationResponse::setOwnerAccountId(const QString &owner_account_id) {
    m_owner_account_id = owner_account_id;
    m_owner_account_id_isSet = true;
}

bool OAICreateApplicationResponse::is_owner_account_id_Set() const{
    return m_owner_account_id_isSet;
}

bool OAICreateApplicationResponse::is_owner_account_id_Valid() const{
    return m_owner_account_id_isValid;
}

OAIProxyType OAICreateApplicationResponse::getProxyType() const {
    return m_proxy_type;
}
void OAICreateApplicationResponse::setProxyType(const OAIProxyType &proxy_type) {
    m_proxy_type = proxy_type;
    m_proxy_type_isSet = true;
}

bool OAICreateApplicationResponse::is_proxy_type_Set() const{
    return m_proxy_type_isSet;
}

bool OAICreateApplicationResponse::is_proxy_type_Valid() const{
    return m_proxy_type_isValid;
}

OAIApplicationState OAICreateApplicationResponse::getState() const {
    return m_state;
}
void OAICreateApplicationResponse::setState(const OAIApplicationState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAICreateApplicationResponse::is_state_Set() const{
    return m_state_isSet;
}

bool OAICreateApplicationResponse::is_state_Valid() const{
    return m_state_isValid;
}

QMap OAICreateApplicationResponse::getTags() const {
    return m_tags;
}
void OAICreateApplicationResponse::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateApplicationResponse::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateApplicationResponse::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAICreateApplicationResponse::getVpcId() const {
    return m_vpc_id;
}
void OAICreateApplicationResponse::setVpcId(const QString &vpc_id) {
    m_vpc_id = vpc_id;
    m_vpc_id_isSet = true;
}

bool OAICreateApplicationResponse::is_vpc_id_Set() const{
    return m_vpc_id_isSet;
}

bool OAICreateApplicationResponse::is_vpc_id_Valid() const{
    return m_vpc_id_isValid;
}

bool OAICreateApplicationResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_gateway_proxy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proxy_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateApplicationResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
