/**
 * AWS Migration Hub Refactor Spaces
 * <p><fullname>Amazon Web Services Migration Hub Refactor Spaces</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Amazon Web Services Migration Hub Refactor Spaces (Refactor Spaces). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the Amazon Web Services SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"https://aws.amazon.com/tools/#SDKs\">Amazon Web Services SDKs</a>.</p> <p>To share Refactor Spaces environments with other Amazon Web Services accounts or with Organizations and their OUs, use Resource Access Manager's <code>CreateResourceShare</code> API. See <a href=\"https://docs.aws.amazon.com/ram/latest/APIReference/API_CreateResourceShare.html\">CreateResourceShare</a> in the <i>Amazon Web Services RAM API Reference</i>.</p></p>
 *
 * The version of the OpenAPI document: 2021-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateRouteResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateRouteResponse::OAIUpdateRouteResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateRouteResponse::OAIUpdateRouteResponse() {
    this->initializeModel();
}

OAIUpdateRouteResponse::~OAIUpdateRouteResponse() {}

void OAIUpdateRouteResponse::initializeModel() {

    m_application_id_isSet = false;
    m_application_id_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_last_updated_time_isSet = false;
    m_last_updated_time_isValid = false;

    m_route_id_isSet = false;
    m_route_id_isValid = false;

    m_service_id_isSet = false;
    m_service_id_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIUpdateRouteResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateRouteResponse::fromJsonObject(QJsonObject json) {

    m_application_id_isValid = ::OpenAPI::fromJsonValue(m_application_id, json[QString("ApplicationId")]);
    m_application_id_isSet = !json[QString("ApplicationId")].isNull() && m_application_id_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_last_updated_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time, json[QString("LastUpdatedTime")]);
    m_last_updated_time_isSet = !json[QString("LastUpdatedTime")].isNull() && m_last_updated_time_isValid;

    m_route_id_isValid = ::OpenAPI::fromJsonValue(m_route_id, json[QString("RouteId")]);
    m_route_id_isSet = !json[QString("RouteId")].isNull() && m_route_id_isValid;

    m_service_id_isValid = ::OpenAPI::fromJsonValue(m_service_id, json[QString("ServiceId")]);
    m_service_id_isSet = !json[QString("ServiceId")].isNull() && m_service_id_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;
}

QString OAIUpdateRouteResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateRouteResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_application_id_isSet) {
        obj.insert(QString("ApplicationId"), ::OpenAPI::toJsonValue(m_application_id));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_last_updated_time_isSet) {
        obj.insert(QString("LastUpdatedTime"), ::OpenAPI::toJsonValue(m_last_updated_time));
    }
    if (m_route_id_isSet) {
        obj.insert(QString("RouteId"), ::OpenAPI::toJsonValue(m_route_id));
    }
    if (m_service_id_isSet) {
        obj.insert(QString("ServiceId"), ::OpenAPI::toJsonValue(m_service_id));
    }
    if (m_state.isSet()) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIUpdateRouteResponse::getApplicationId() const {
    return m_application_id;
}
void OAIUpdateRouteResponse::setApplicationId(const QString &application_id) {
    m_application_id = application_id;
    m_application_id_isSet = true;
}

bool OAIUpdateRouteResponse::is_application_id_Set() const{
    return m_application_id_isSet;
}

bool OAIUpdateRouteResponse::is_application_id_Valid() const{
    return m_application_id_isValid;
}

QString OAIUpdateRouteResponse::getArn() const {
    return m_arn;
}
void OAIUpdateRouteResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIUpdateRouteResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIUpdateRouteResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

QDateTime OAIUpdateRouteResponse::getLastUpdatedTime() const {
    return m_last_updated_time;
}
void OAIUpdateRouteResponse::setLastUpdatedTime(const QDateTime &last_updated_time) {
    m_last_updated_time = last_updated_time;
    m_last_updated_time_isSet = true;
}

bool OAIUpdateRouteResponse::is_last_updated_time_Set() const{
    return m_last_updated_time_isSet;
}

bool OAIUpdateRouteResponse::is_last_updated_time_Valid() const{
    return m_last_updated_time_isValid;
}

QString OAIUpdateRouteResponse::getRouteId() const {
    return m_route_id;
}
void OAIUpdateRouteResponse::setRouteId(const QString &route_id) {
    m_route_id = route_id;
    m_route_id_isSet = true;
}

bool OAIUpdateRouteResponse::is_route_id_Set() const{
    return m_route_id_isSet;
}

bool OAIUpdateRouteResponse::is_route_id_Valid() const{
    return m_route_id_isValid;
}

QString OAIUpdateRouteResponse::getServiceId() const {
    return m_service_id;
}
void OAIUpdateRouteResponse::setServiceId(const QString &service_id) {
    m_service_id = service_id;
    m_service_id_isSet = true;
}

bool OAIUpdateRouteResponse::is_service_id_Set() const{
    return m_service_id_isSet;
}

bool OAIUpdateRouteResponse::is_service_id_Valid() const{
    return m_service_id_isValid;
}

OAIRouteState OAIUpdateRouteResponse::getState() const {
    return m_state;
}
void OAIUpdateRouteResponse::setState(const OAIRouteState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIUpdateRouteResponse::is_state_Set() const{
    return m_state_isSet;
}

bool OAIUpdateRouteResponse::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIUpdateRouteResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_route_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateRouteResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
