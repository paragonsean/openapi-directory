/**
 * AWS Migration Hub Refactor Spaces
 * <p><fullname>Amazon Web Services Migration Hub Refactor Spaces</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Amazon Web Services Migration Hub Refactor Spaces (Refactor Spaces). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the Amazon Web Services SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"https://aws.amazon.com/tools/#SDKs\">Amazon Web Services SDKs</a>.</p> <p>To share Refactor Spaces environments with other Amazon Web Services accounts or with Organizations and their OUs, use Resource Access Manager's <code>CreateResourceShare</code> API. See <a href=\"https://docs.aws.amazon.com/ram/latest/APIReference/API_CreateResourceShare.html\">CreateResourceShare</a> in the <i>Amazon Web Services RAM API Reference</i>.</p></p>
 *
 * The version of the OpenAPI document: 2021-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutResourcePolicyRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutResourcePolicyRequest::OAIPutResourcePolicyRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutResourcePolicyRequest::OAIPutResourcePolicyRequest() {
    this->initializeModel();
}

OAIPutResourcePolicyRequest::~OAIPutResourcePolicyRequest() {}

void OAIPutResourcePolicyRequest::initializeModel() {

    m_policy_isSet = false;
    m_policy_isValid = false;

    m_resource_arn_isSet = false;
    m_resource_arn_isValid = false;
}

void OAIPutResourcePolicyRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutResourcePolicyRequest::fromJsonObject(QJsonObject json) {

    m_policy_isValid = ::OpenAPI::fromJsonValue(m_policy, json[QString("Policy")]);
    m_policy_isSet = !json[QString("Policy")].isNull() && m_policy_isValid;

    m_resource_arn_isValid = ::OpenAPI::fromJsonValue(m_resource_arn, json[QString("ResourceArn")]);
    m_resource_arn_isSet = !json[QString("ResourceArn")].isNull() && m_resource_arn_isValid;
}

QString OAIPutResourcePolicyRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutResourcePolicyRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_policy_isSet) {
        obj.insert(QString("Policy"), ::OpenAPI::toJsonValue(m_policy));
    }
    if (m_resource_arn_isSet) {
        obj.insert(QString("ResourceArn"), ::OpenAPI::toJsonValue(m_resource_arn));
    }
    return obj;
}

QString OAIPutResourcePolicyRequest::getPolicy() const {
    return m_policy;
}
void OAIPutResourcePolicyRequest::setPolicy(const QString &policy) {
    m_policy = policy;
    m_policy_isSet = true;
}

bool OAIPutResourcePolicyRequest::is_policy_Set() const{
    return m_policy_isSet;
}

bool OAIPutResourcePolicyRequest::is_policy_Valid() const{
    return m_policy_isValid;
}

QString OAIPutResourcePolicyRequest::getResourceArn() const {
    return m_resource_arn;
}
void OAIPutResourcePolicyRequest::setResourceArn(const QString &resource_arn) {
    m_resource_arn = resource_arn;
    m_resource_arn_isSet = true;
}

bool OAIPutResourcePolicyRequest::is_resource_arn_Set() const{
    return m_resource_arn_isSet;
}

bool OAIPutResourcePolicyRequest::is_resource_arn_Valid() const{
    return m_resource_arn_isValid;
}

bool OAIPutResourcePolicyRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutResourcePolicyRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_policy_isValid && m_resource_arn_isValid && true;
}

} // namespace OpenAPI
