/**
 * AWS Migration Hub Refactor Spaces
 * <p><fullname>Amazon Web Services Migration Hub Refactor Spaces</fullname> <p>This API reference provides descriptions, syntax, and other details about each of the actions and data types for Amazon Web Services Migration Hub Refactor Spaces (Refactor Spaces). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the Amazon Web Services SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"https://aws.amazon.com/tools/#SDKs\">Amazon Web Services SDKs</a>.</p> <p>To share Refactor Spaces environments with other Amazon Web Services accounts or with Organizations and their OUs, use Resource Access Manager's <code>CreateResourceShare</code> API. See <a href=\"https://docs.aws.amazon.com/ram/latest/APIReference/API_CreateResourceShare.html\">CreateResourceShare</a> in the <i>Amazon Web Services RAM API Reference</i>.</p></p>
 *
 * The version of the OpenAPI document: 2021-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListRoutesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListRoutesResponse::OAIListRoutesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListRoutesResponse::OAIListRoutesResponse() {
    this->initializeModel();
}

OAIListRoutesResponse::~OAIListRoutesResponse() {}

void OAIListRoutesResponse::initializeModel() {

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_route_summary_list_isSet = false;
    m_route_summary_list_isValid = false;
}

void OAIListRoutesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListRoutesResponse::fromJsonObject(QJsonObject json) {

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_route_summary_list_isValid = ::OpenAPI::fromJsonValue(m_route_summary_list, json[QString("RouteSummaryList")]);
    m_route_summary_list_isSet = !json[QString("RouteSummaryList")].isNull() && m_route_summary_list_isValid;
}

QString OAIListRoutesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListRoutesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_route_summary_list.isSet()) {
        obj.insert(QString("RouteSummaryList"), ::OpenAPI::toJsonValue(m_route_summary_list));
    }
    return obj;
}

QString OAIListRoutesResponse::getNextToken() const {
    return m_next_token;
}
void OAIListRoutesResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListRoutesResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListRoutesResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

QList OAIListRoutesResponse::getRouteSummaryList() const {
    return m_route_summary_list;
}
void OAIListRoutesResponse::setRouteSummaryList(const QList &route_summary_list) {
    m_route_summary_list = route_summary_list;
    m_route_summary_list_isSet = true;
}

bool OAIListRoutesResponse::is_route_summary_list_Set() const{
    return m_route_summary_list_isSet;
}

bool OAIListRoutesResponse::is_route_summary_list_Valid() const{
    return m_route_summary_list_isValid;
}

bool OAIListRoutesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_route_summary_list.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListRoutesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
