# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.artifact_namespace import ArtifactNamespace
from openapi_server.models.artifact_packaging import ArtifactPackaging
from openapi_server.models.artifacts_type import ArtifactsType
from openapi_server.models.bucket_owner_access import BucketOwnerAccess
from openapi_server import util


class ProjectArtifacts(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: ArtifactsType=None, location: str=None, path: str=None, namespace_type: ArtifactNamespace=None, name: str=None, packaging: ArtifactPackaging=None, override_artifact_name: bool=None, encryption_disabled: bool=None, artifact_identifier: str=None, bucket_owner_access: BucketOwnerAccess=None):
        """ProjectArtifacts - a model defined in OpenAPI

        :param type: The type of this ProjectArtifacts.
        :param location: The location of this ProjectArtifacts.
        :param path: The path of this ProjectArtifacts.
        :param namespace_type: The namespace_type of this ProjectArtifacts.
        :param name: The name of this ProjectArtifacts.
        :param packaging: The packaging of this ProjectArtifacts.
        :param override_artifact_name: The override_artifact_name of this ProjectArtifacts.
        :param encryption_disabled: The encryption_disabled of this ProjectArtifacts.
        :param artifact_identifier: The artifact_identifier of this ProjectArtifacts.
        :param bucket_owner_access: The bucket_owner_access of this ProjectArtifacts.
        """
        self.openapi_types = {
            'type': ArtifactsType,
            'location': str,
            'path': str,
            'namespace_type': ArtifactNamespace,
            'name': str,
            'packaging': ArtifactPackaging,
            'override_artifact_name': bool,
            'encryption_disabled': bool,
            'artifact_identifier': str,
            'bucket_owner_access': BucketOwnerAccess
        }

        self.attribute_map = {
            'type': 'type',
            'location': 'location',
            'path': 'path',
            'namespace_type': 'namespaceType',
            'name': 'name',
            'packaging': 'packaging',
            'override_artifact_name': 'overrideArtifactName',
            'encryption_disabled': 'encryptionDisabled',
            'artifact_identifier': 'artifactIdentifier',
            'bucket_owner_access': 'bucketOwnerAccess'
        }

        self._type = type
        self._location = location
        self._path = path
        self._namespace_type = namespace_type
        self._name = name
        self._packaging = packaging
        self._override_artifact_name = override_artifact_name
        self._encryption_disabled = encryption_disabled
        self._artifact_identifier = artifact_identifier
        self._bucket_owner_access = bucket_owner_access

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProjectArtifacts':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProjectArtifacts of this ProjectArtifacts.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this ProjectArtifacts.


        :return: The type of this ProjectArtifacts.
        :rtype: ArtifactsType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ProjectArtifacts.


        :param type: The type of this ProjectArtifacts.
        :type type: ArtifactsType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def location(self):
        """Gets the location of this ProjectArtifacts.


        :return: The location of this ProjectArtifacts.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ProjectArtifacts.


        :param location: The location of this ProjectArtifacts.
        :type location: str
        """

        self._location = location

    @property
    def path(self):
        """Gets the path of this ProjectArtifacts.


        :return: The path of this ProjectArtifacts.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ProjectArtifacts.


        :param path: The path of this ProjectArtifacts.
        :type path: str
        """

        self._path = path

    @property
    def namespace_type(self):
        """Gets the namespace_type of this ProjectArtifacts.


        :return: The namespace_type of this ProjectArtifacts.
        :rtype: ArtifactNamespace
        """
        return self._namespace_type

    @namespace_type.setter
    def namespace_type(self, namespace_type):
        """Sets the namespace_type of this ProjectArtifacts.


        :param namespace_type: The namespace_type of this ProjectArtifacts.
        :type namespace_type: ArtifactNamespace
        """

        self._namespace_type = namespace_type

    @property
    def name(self):
        """Gets the name of this ProjectArtifacts.


        :return: The name of this ProjectArtifacts.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProjectArtifacts.


        :param name: The name of this ProjectArtifacts.
        :type name: str
        """

        self._name = name

    @property
    def packaging(self):
        """Gets the packaging of this ProjectArtifacts.


        :return: The packaging of this ProjectArtifacts.
        :rtype: ArtifactPackaging
        """
        return self._packaging

    @packaging.setter
    def packaging(self, packaging):
        """Sets the packaging of this ProjectArtifacts.


        :param packaging: The packaging of this ProjectArtifacts.
        :type packaging: ArtifactPackaging
        """

        self._packaging = packaging

    @property
    def override_artifact_name(self):
        """Gets the override_artifact_name of this ProjectArtifacts.


        :return: The override_artifact_name of this ProjectArtifacts.
        :rtype: bool
        """
        return self._override_artifact_name

    @override_artifact_name.setter
    def override_artifact_name(self, override_artifact_name):
        """Sets the override_artifact_name of this ProjectArtifacts.


        :param override_artifact_name: The override_artifact_name of this ProjectArtifacts.
        :type override_artifact_name: bool
        """

        self._override_artifact_name = override_artifact_name

    @property
    def encryption_disabled(self):
        """Gets the encryption_disabled of this ProjectArtifacts.


        :return: The encryption_disabled of this ProjectArtifacts.
        :rtype: bool
        """
        return self._encryption_disabled

    @encryption_disabled.setter
    def encryption_disabled(self, encryption_disabled):
        """Sets the encryption_disabled of this ProjectArtifacts.


        :param encryption_disabled: The encryption_disabled of this ProjectArtifacts.
        :type encryption_disabled: bool
        """

        self._encryption_disabled = encryption_disabled

    @property
    def artifact_identifier(self):
        """Gets the artifact_identifier of this ProjectArtifacts.


        :return: The artifact_identifier of this ProjectArtifacts.
        :rtype: str
        """
        return self._artifact_identifier

    @artifact_identifier.setter
    def artifact_identifier(self, artifact_identifier):
        """Sets the artifact_identifier of this ProjectArtifacts.


        :param artifact_identifier: The artifact_identifier of this ProjectArtifacts.
        :type artifact_identifier: str
        """

        self._artifact_identifier = artifact_identifier

    @property
    def bucket_owner_access(self):
        """Gets the bucket_owner_access of this ProjectArtifacts.


        :return: The bucket_owner_access of this ProjectArtifacts.
        :rtype: BucketOwnerAccess
        """
        return self._bucket_owner_access

    @bucket_owner_access.setter
    def bucket_owner_access(self, bucket_owner_access):
        """Sets the bucket_owner_access of this ProjectArtifacts.


        :param bucket_owner_access: The bucket_owner_access of this ProjectArtifacts.
        :type bucket_owner_access: BucketOwnerAccess
        """

        self._bucket_owner_access = bucket_owner_access
