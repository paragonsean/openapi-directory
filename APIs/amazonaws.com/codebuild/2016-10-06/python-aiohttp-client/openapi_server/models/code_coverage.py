# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CodeCoverage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, report_arn: str=None, file_path: str=None, line_coverage_percentage: float=None, lines_covered: int=None, lines_missed: int=None, branch_coverage_percentage: float=None, branches_covered: int=None, branches_missed: int=None, expired: datetime=None):
        """CodeCoverage - a model defined in OpenAPI

        :param id: The id of this CodeCoverage.
        :param report_arn: The report_arn of this CodeCoverage.
        :param file_path: The file_path of this CodeCoverage.
        :param line_coverage_percentage: The line_coverage_percentage of this CodeCoverage.
        :param lines_covered: The lines_covered of this CodeCoverage.
        :param lines_missed: The lines_missed of this CodeCoverage.
        :param branch_coverage_percentage: The branch_coverage_percentage of this CodeCoverage.
        :param branches_covered: The branches_covered of this CodeCoverage.
        :param branches_missed: The branches_missed of this CodeCoverage.
        :param expired: The expired of this CodeCoverage.
        """
        self.openapi_types = {
            'id': str,
            'report_arn': str,
            'file_path': str,
            'line_coverage_percentage': float,
            'lines_covered': int,
            'lines_missed': int,
            'branch_coverage_percentage': float,
            'branches_covered': int,
            'branches_missed': int,
            'expired': datetime
        }

        self.attribute_map = {
            'id': 'id',
            'report_arn': 'reportARN',
            'file_path': 'filePath',
            'line_coverage_percentage': 'lineCoveragePercentage',
            'lines_covered': 'linesCovered',
            'lines_missed': 'linesMissed',
            'branch_coverage_percentage': 'branchCoveragePercentage',
            'branches_covered': 'branchesCovered',
            'branches_missed': 'branchesMissed',
            'expired': 'expired'
        }

        self._id = id
        self._report_arn = report_arn
        self._file_path = file_path
        self._line_coverage_percentage = line_coverage_percentage
        self._lines_covered = lines_covered
        self._lines_missed = lines_missed
        self._branch_coverage_percentage = branch_coverage_percentage
        self._branches_covered = branches_covered
        self._branches_missed = branches_missed
        self._expired = expired

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CodeCoverage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CodeCoverage of this CodeCoverage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this CodeCoverage.


        :return: The id of this CodeCoverage.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CodeCoverage.


        :param id: The id of this CodeCoverage.
        :type id: str
        """

        self._id = id

    @property
    def report_arn(self):
        """Gets the report_arn of this CodeCoverage.


        :return: The report_arn of this CodeCoverage.
        :rtype: str
        """
        return self._report_arn

    @report_arn.setter
    def report_arn(self, report_arn):
        """Sets the report_arn of this CodeCoverage.


        :param report_arn: The report_arn of this CodeCoverage.
        :type report_arn: str
        """

        self._report_arn = report_arn

    @property
    def file_path(self):
        """Gets the file_path of this CodeCoverage.


        :return: The file_path of this CodeCoverage.
        :rtype: str
        """
        return self._file_path

    @file_path.setter
    def file_path(self, file_path):
        """Sets the file_path of this CodeCoverage.


        :param file_path: The file_path of this CodeCoverage.
        :type file_path: str
        """

        self._file_path = file_path

    @property
    def line_coverage_percentage(self):
        """Gets the line_coverage_percentage of this CodeCoverage.


        :return: The line_coverage_percentage of this CodeCoverage.
        :rtype: float
        """
        return self._line_coverage_percentage

    @line_coverage_percentage.setter
    def line_coverage_percentage(self, line_coverage_percentage):
        """Sets the line_coverage_percentage of this CodeCoverage.


        :param line_coverage_percentage: The line_coverage_percentage of this CodeCoverage.
        :type line_coverage_percentage: float
        """

        self._line_coverage_percentage = line_coverage_percentage

    @property
    def lines_covered(self):
        """Gets the lines_covered of this CodeCoverage.


        :return: The lines_covered of this CodeCoverage.
        :rtype: int
        """
        return self._lines_covered

    @lines_covered.setter
    def lines_covered(self, lines_covered):
        """Sets the lines_covered of this CodeCoverage.


        :param lines_covered: The lines_covered of this CodeCoverage.
        :type lines_covered: int
        """

        self._lines_covered = lines_covered

    @property
    def lines_missed(self):
        """Gets the lines_missed of this CodeCoverage.


        :return: The lines_missed of this CodeCoverage.
        :rtype: int
        """
        return self._lines_missed

    @lines_missed.setter
    def lines_missed(self, lines_missed):
        """Sets the lines_missed of this CodeCoverage.


        :param lines_missed: The lines_missed of this CodeCoverage.
        :type lines_missed: int
        """

        self._lines_missed = lines_missed

    @property
    def branch_coverage_percentage(self):
        """Gets the branch_coverage_percentage of this CodeCoverage.


        :return: The branch_coverage_percentage of this CodeCoverage.
        :rtype: float
        """
        return self._branch_coverage_percentage

    @branch_coverage_percentage.setter
    def branch_coverage_percentage(self, branch_coverage_percentage):
        """Sets the branch_coverage_percentage of this CodeCoverage.


        :param branch_coverage_percentage: The branch_coverage_percentage of this CodeCoverage.
        :type branch_coverage_percentage: float
        """

        self._branch_coverage_percentage = branch_coverage_percentage

    @property
    def branches_covered(self):
        """Gets the branches_covered of this CodeCoverage.


        :return: The branches_covered of this CodeCoverage.
        :rtype: int
        """
        return self._branches_covered

    @branches_covered.setter
    def branches_covered(self, branches_covered):
        """Sets the branches_covered of this CodeCoverage.


        :param branches_covered: The branches_covered of this CodeCoverage.
        :type branches_covered: int
        """

        self._branches_covered = branches_covered

    @property
    def branches_missed(self):
        """Gets the branches_missed of this CodeCoverage.


        :return: The branches_missed of this CodeCoverage.
        :rtype: int
        """
        return self._branches_missed

    @branches_missed.setter
    def branches_missed(self, branches_missed):
        """Sets the branches_missed of this CodeCoverage.


        :param branches_missed: The branches_missed of this CodeCoverage.
        :type branches_missed: int
        """

        self._branches_missed = branches_missed

    @property
    def expired(self):
        """Gets the expired of this CodeCoverage.


        :return: The expired of this CodeCoverage.
        :rtype: datetime
        """
        return self._expired

    @expired.setter
    def expired(self, expired):
        """Sets the expired of this CodeCoverage.


        :param expired: The expired of this CodeCoverage.
        :type expired: datetime
        """

        self._expired = expired
