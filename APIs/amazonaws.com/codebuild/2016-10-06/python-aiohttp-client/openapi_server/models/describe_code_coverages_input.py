# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.report_code_coverage_sort_by_type import ReportCodeCoverageSortByType
from openapi_server.models.sort_order_type import SortOrderType
from openapi_server import util


class DescribeCodeCoveragesInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, report_arn: str=None, next_token: str=None, max_results: int=None, sort_order: SortOrderType=None, sort_by: ReportCodeCoverageSortByType=None, min_line_coverage_percentage: float=None, max_line_coverage_percentage: float=None):
        """DescribeCodeCoveragesInput - a model defined in OpenAPI

        :param report_arn: The report_arn of this DescribeCodeCoveragesInput.
        :param next_token: The next_token of this DescribeCodeCoveragesInput.
        :param max_results: The max_results of this DescribeCodeCoveragesInput.
        :param sort_order: The sort_order of this DescribeCodeCoveragesInput.
        :param sort_by: The sort_by of this DescribeCodeCoveragesInput.
        :param min_line_coverage_percentage: The min_line_coverage_percentage of this DescribeCodeCoveragesInput.
        :param max_line_coverage_percentage: The max_line_coverage_percentage of this DescribeCodeCoveragesInput.
        """
        self.openapi_types = {
            'report_arn': str,
            'next_token': str,
            'max_results': int,
            'sort_order': SortOrderType,
            'sort_by': ReportCodeCoverageSortByType,
            'min_line_coverage_percentage': float,
            'max_line_coverage_percentage': float
        }

        self.attribute_map = {
            'report_arn': 'reportArn',
            'next_token': 'nextToken',
            'max_results': 'maxResults',
            'sort_order': 'sortOrder',
            'sort_by': 'sortBy',
            'min_line_coverage_percentage': 'minLineCoveragePercentage',
            'max_line_coverage_percentage': 'maxLineCoveragePercentage'
        }

        self._report_arn = report_arn
        self._next_token = next_token
        self._max_results = max_results
        self._sort_order = sort_order
        self._sort_by = sort_by
        self._min_line_coverage_percentage = min_line_coverage_percentage
        self._max_line_coverage_percentage = max_line_coverage_percentage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeCodeCoveragesInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeCodeCoveragesInput of this DescribeCodeCoveragesInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def report_arn(self):
        """Gets the report_arn of this DescribeCodeCoveragesInput.


        :return: The report_arn of this DescribeCodeCoveragesInput.
        :rtype: str
        """
        return self._report_arn

    @report_arn.setter
    def report_arn(self, report_arn):
        """Sets the report_arn of this DescribeCodeCoveragesInput.


        :param report_arn: The report_arn of this DescribeCodeCoveragesInput.
        :type report_arn: str
        """
        if report_arn is None:
            raise ValueError("Invalid value for `report_arn`, must not be `None`")

        self._report_arn = report_arn

    @property
    def next_token(self):
        """Gets the next_token of this DescribeCodeCoveragesInput.


        :return: The next_token of this DescribeCodeCoveragesInput.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this DescribeCodeCoveragesInput.


        :param next_token: The next_token of this DescribeCodeCoveragesInput.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def max_results(self):
        """Gets the max_results of this DescribeCodeCoveragesInput.


        :return: The max_results of this DescribeCodeCoveragesInput.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this DescribeCodeCoveragesInput.


        :param max_results: The max_results of this DescribeCodeCoveragesInput.
        :type max_results: int
        """

        self._max_results = max_results

    @property
    def sort_order(self):
        """Gets the sort_order of this DescribeCodeCoveragesInput.


        :return: The sort_order of this DescribeCodeCoveragesInput.
        :rtype: SortOrderType
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this DescribeCodeCoveragesInput.


        :param sort_order: The sort_order of this DescribeCodeCoveragesInput.
        :type sort_order: SortOrderType
        """

        self._sort_order = sort_order

    @property
    def sort_by(self):
        """Gets the sort_by of this DescribeCodeCoveragesInput.


        :return: The sort_by of this DescribeCodeCoveragesInput.
        :rtype: ReportCodeCoverageSortByType
        """
        return self._sort_by

    @sort_by.setter
    def sort_by(self, sort_by):
        """Sets the sort_by of this DescribeCodeCoveragesInput.


        :param sort_by: The sort_by of this DescribeCodeCoveragesInput.
        :type sort_by: ReportCodeCoverageSortByType
        """

        self._sort_by = sort_by

    @property
    def min_line_coverage_percentage(self):
        """Gets the min_line_coverage_percentage of this DescribeCodeCoveragesInput.


        :return: The min_line_coverage_percentage of this DescribeCodeCoveragesInput.
        :rtype: float
        """
        return self._min_line_coverage_percentage

    @min_line_coverage_percentage.setter
    def min_line_coverage_percentage(self, min_line_coverage_percentage):
        """Sets the min_line_coverage_percentage of this DescribeCodeCoveragesInput.


        :param min_line_coverage_percentage: The min_line_coverage_percentage of this DescribeCodeCoveragesInput.
        :type min_line_coverage_percentage: float
        """

        self._min_line_coverage_percentage = min_line_coverage_percentage

    @property
    def max_line_coverage_percentage(self):
        """Gets the max_line_coverage_percentage of this DescribeCodeCoveragesInput.


        :return: The max_line_coverage_percentage of this DescribeCodeCoveragesInput.
        :rtype: float
        """
        return self._max_line_coverage_percentage

    @max_line_coverage_percentage.setter
    def max_line_coverage_percentage(self, max_line_coverage_percentage):
        """Sets the max_line_coverage_percentage of this DescribeCodeCoveragesInput.


        :param max_line_coverage_percentage: The max_line_coverage_percentage of this DescribeCodeCoveragesInput.
        :type max_line_coverage_percentage: float
        """

        self._max_line_coverage_percentage = max_line_coverage_percentage
