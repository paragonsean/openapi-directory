# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.auth_type import AuthType
from openapi_server.models.server_type import ServerType
from openapi_server import util


class ImportSourceCredentialsInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, username: str=None, token: str=None, server_type: ServerType=None, auth_type: AuthType=None, should_overwrite: bool=None):
        """ImportSourceCredentialsInput - a model defined in OpenAPI

        :param username: The username of this ImportSourceCredentialsInput.
        :param token: The token of this ImportSourceCredentialsInput.
        :param server_type: The server_type of this ImportSourceCredentialsInput.
        :param auth_type: The auth_type of this ImportSourceCredentialsInput.
        :param should_overwrite: The should_overwrite of this ImportSourceCredentialsInput.
        """
        self.openapi_types = {
            'username': str,
            'token': str,
            'server_type': ServerType,
            'auth_type': AuthType,
            'should_overwrite': bool
        }

        self.attribute_map = {
            'username': 'username',
            'token': 'token',
            'server_type': 'serverType',
            'auth_type': 'authType',
            'should_overwrite': 'shouldOverwrite'
        }

        self._username = username
        self._token = token
        self._server_type = server_type
        self._auth_type = auth_type
        self._should_overwrite = should_overwrite

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImportSourceCredentialsInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImportSourceCredentialsInput of this ImportSourceCredentialsInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def username(self):
        """Gets the username of this ImportSourceCredentialsInput.


        :return: The username of this ImportSourceCredentialsInput.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this ImportSourceCredentialsInput.


        :param username: The username of this ImportSourceCredentialsInput.
        :type username: str
        """

        self._username = username

    @property
    def token(self):
        """Gets the token of this ImportSourceCredentialsInput.


        :return: The token of this ImportSourceCredentialsInput.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this ImportSourceCredentialsInput.


        :param token: The token of this ImportSourceCredentialsInput.
        :type token: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")

        self._token = token

    @property
    def server_type(self):
        """Gets the server_type of this ImportSourceCredentialsInput.


        :return: The server_type of this ImportSourceCredentialsInput.
        :rtype: ServerType
        """
        return self._server_type

    @server_type.setter
    def server_type(self, server_type):
        """Sets the server_type of this ImportSourceCredentialsInput.


        :param server_type: The server_type of this ImportSourceCredentialsInput.
        :type server_type: ServerType
        """
        if server_type is None:
            raise ValueError("Invalid value for `server_type`, must not be `None`")

        self._server_type = server_type

    @property
    def auth_type(self):
        """Gets the auth_type of this ImportSourceCredentialsInput.


        :return: The auth_type of this ImportSourceCredentialsInput.
        :rtype: AuthType
        """
        return self._auth_type

    @auth_type.setter
    def auth_type(self, auth_type):
        """Sets the auth_type of this ImportSourceCredentialsInput.


        :param auth_type: The auth_type of this ImportSourceCredentialsInput.
        :type auth_type: AuthType
        """
        if auth_type is None:
            raise ValueError("Invalid value for `auth_type`, must not be `None`")

        self._auth_type = auth_type

    @property
    def should_overwrite(self):
        """Gets the should_overwrite of this ImportSourceCredentialsInput.


        :return: The should_overwrite of this ImportSourceCredentialsInput.
        :rtype: bool
        """
        return self._should_overwrite

    @should_overwrite.setter
    def should_overwrite(self, should_overwrite):
        """Sets the should_overwrite of this ImportSourceCredentialsInput.


        :param should_overwrite: The should_overwrite of this ImportSourceCredentialsInput.
        :type should_overwrite: bool
        """

        self._should_overwrite = should_overwrite
