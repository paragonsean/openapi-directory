# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.report_code_coverage_summary import ReportCodeCoverageSummary
from openapi_server.models.report_export_config import ReportExportConfig
from openapi_server.models.report_status_type import ReportStatusType
from openapi_server.models.report_test_summary import ReportTestSummary
from openapi_server.models.report_type import ReportType
from openapi_server import util


class Report(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arn: str=None, type: ReportType=None, name: str=None, report_group_arn: str=None, execution_id: str=None, status: ReportStatusType=None, created: datetime=None, expired: datetime=None, export_config: ReportExportConfig=None, truncated: bool=None, test_summary: ReportTestSummary=None, code_coverage_summary: ReportCodeCoverageSummary=None):
        """Report - a model defined in OpenAPI

        :param arn: The arn of this Report.
        :param type: The type of this Report.
        :param name: The name of this Report.
        :param report_group_arn: The report_group_arn of this Report.
        :param execution_id: The execution_id of this Report.
        :param status: The status of this Report.
        :param created: The created of this Report.
        :param expired: The expired of this Report.
        :param export_config: The export_config of this Report.
        :param truncated: The truncated of this Report.
        :param test_summary: The test_summary of this Report.
        :param code_coverage_summary: The code_coverage_summary of this Report.
        """
        self.openapi_types = {
            'arn': str,
            'type': ReportType,
            'name': str,
            'report_group_arn': str,
            'execution_id': str,
            'status': ReportStatusType,
            'created': datetime,
            'expired': datetime,
            'export_config': ReportExportConfig,
            'truncated': bool,
            'test_summary': ReportTestSummary,
            'code_coverage_summary': ReportCodeCoverageSummary
        }

        self.attribute_map = {
            'arn': 'arn',
            'type': 'type',
            'name': 'name',
            'report_group_arn': 'reportGroupArn',
            'execution_id': 'executionId',
            'status': 'status',
            'created': 'created',
            'expired': 'expired',
            'export_config': 'exportConfig',
            'truncated': 'truncated',
            'test_summary': 'testSummary',
            'code_coverage_summary': 'codeCoverageSummary'
        }

        self._arn = arn
        self._type = type
        self._name = name
        self._report_group_arn = report_group_arn
        self._execution_id = execution_id
        self._status = status
        self._created = created
        self._expired = expired
        self._export_config = export_config
        self._truncated = truncated
        self._test_summary = test_summary
        self._code_coverage_summary = code_coverage_summary

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Report':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Report of this Report.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arn(self):
        """Gets the arn of this Report.


        :return: The arn of this Report.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this Report.


        :param arn: The arn of this Report.
        :type arn: str
        """

        self._arn = arn

    @property
    def type(self):
        """Gets the type of this Report.


        :return: The type of this Report.
        :rtype: ReportType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Report.


        :param type: The type of this Report.
        :type type: ReportType
        """

        self._type = type

    @property
    def name(self):
        """Gets the name of this Report.


        :return: The name of this Report.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Report.


        :param name: The name of this Report.
        :type name: str
        """

        self._name = name

    @property
    def report_group_arn(self):
        """Gets the report_group_arn of this Report.


        :return: The report_group_arn of this Report.
        :rtype: str
        """
        return self._report_group_arn

    @report_group_arn.setter
    def report_group_arn(self, report_group_arn):
        """Sets the report_group_arn of this Report.


        :param report_group_arn: The report_group_arn of this Report.
        :type report_group_arn: str
        """

        self._report_group_arn = report_group_arn

    @property
    def execution_id(self):
        """Gets the execution_id of this Report.


        :return: The execution_id of this Report.
        :rtype: str
        """
        return self._execution_id

    @execution_id.setter
    def execution_id(self, execution_id):
        """Sets the execution_id of this Report.


        :param execution_id: The execution_id of this Report.
        :type execution_id: str
        """

        self._execution_id = execution_id

    @property
    def status(self):
        """Gets the status of this Report.


        :return: The status of this Report.
        :rtype: ReportStatusType
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Report.


        :param status: The status of this Report.
        :type status: ReportStatusType
        """

        self._status = status

    @property
    def created(self):
        """Gets the created of this Report.


        :return: The created of this Report.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Report.


        :param created: The created of this Report.
        :type created: datetime
        """

        self._created = created

    @property
    def expired(self):
        """Gets the expired of this Report.


        :return: The expired of this Report.
        :rtype: datetime
        """
        return self._expired

    @expired.setter
    def expired(self, expired):
        """Sets the expired of this Report.


        :param expired: The expired of this Report.
        :type expired: datetime
        """

        self._expired = expired

    @property
    def export_config(self):
        """Gets the export_config of this Report.


        :return: The export_config of this Report.
        :rtype: ReportExportConfig
        """
        return self._export_config

    @export_config.setter
    def export_config(self, export_config):
        """Sets the export_config of this Report.


        :param export_config: The export_config of this Report.
        :type export_config: ReportExportConfig
        """

        self._export_config = export_config

    @property
    def truncated(self):
        """Gets the truncated of this Report.


        :return: The truncated of this Report.
        :rtype: bool
        """
        return self._truncated

    @truncated.setter
    def truncated(self, truncated):
        """Sets the truncated of this Report.


        :param truncated: The truncated of this Report.
        :type truncated: bool
        """

        self._truncated = truncated

    @property
    def test_summary(self):
        """Gets the test_summary of this Report.


        :return: The test_summary of this Report.
        :rtype: ReportTestSummary
        """
        return self._test_summary

    @test_summary.setter
    def test_summary(self, test_summary):
        """Sets the test_summary of this Report.


        :param test_summary: The test_summary of this Report.
        :type test_summary: ReportTestSummary
        """

        self._test_summary = test_summary

    @property
    def code_coverage_summary(self):
        """Gets the code_coverage_summary of this Report.


        :return: The code_coverage_summary of this Report.
        :rtype: ReportCodeCoverageSummary
        """
        return self._code_coverage_summary

    @code_coverage_summary.setter
    def code_coverage_summary(self, code_coverage_summary):
        """Sets the code_coverage_summary of this Report.


        :param code_coverage_summary: The code_coverage_summary of this Report.
        :type code_coverage_summary: ReportCodeCoverageSummary
        """

        self._code_coverage_summary = code_coverage_summary
