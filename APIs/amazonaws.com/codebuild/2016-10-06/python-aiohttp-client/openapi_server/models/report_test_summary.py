# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReportTestSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, total: int=None, status_counts: Dict=None, duration_in_nano_seconds: int=None):
        """ReportTestSummary - a model defined in OpenAPI

        :param total: The total of this ReportTestSummary.
        :param status_counts: The status_counts of this ReportTestSummary.
        :param duration_in_nano_seconds: The duration_in_nano_seconds of this ReportTestSummary.
        """
        self.openapi_types = {
            'total': int,
            'status_counts': Dict,
            'duration_in_nano_seconds': int
        }

        self.attribute_map = {
            'total': 'total',
            'status_counts': 'statusCounts',
            'duration_in_nano_seconds': 'durationInNanoSeconds'
        }

        self._total = total
        self._status_counts = status_counts
        self._duration_in_nano_seconds = duration_in_nano_seconds

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportTestSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Report_testSummary of this ReportTestSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def total(self):
        """Gets the total of this ReportTestSummary.


        :return: The total of this ReportTestSummary.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this ReportTestSummary.


        :param total: The total of this ReportTestSummary.
        :type total: int
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")

        self._total = total

    @property
    def status_counts(self):
        """Gets the status_counts of this ReportTestSummary.


        :return: The status_counts of this ReportTestSummary.
        :rtype: Dict
        """
        return self._status_counts

    @status_counts.setter
    def status_counts(self, status_counts):
        """Sets the status_counts of this ReportTestSummary.


        :param status_counts: The status_counts of this ReportTestSummary.
        :type status_counts: Dict
        """
        if status_counts is None:
            raise ValueError("Invalid value for `status_counts`, must not be `None`")

        self._status_counts = status_counts

    @property
    def duration_in_nano_seconds(self):
        """Gets the duration_in_nano_seconds of this ReportTestSummary.


        :return: The duration_in_nano_seconds of this ReportTestSummary.
        :rtype: int
        """
        return self._duration_in_nano_seconds

    @duration_in_nano_seconds.setter
    def duration_in_nano_seconds(self, duration_in_nano_seconds):
        """Sets the duration_in_nano_seconds of this ReportTestSummary.


        :param duration_in_nano_seconds: The duration_in_nano_seconds of this ReportTestSummary.
        :type duration_in_nano_seconds: int
        """
        if duration_in_nano_seconds is None:
            raise ValueError("Invalid value for `duration_in_nano_seconds`, must not be `None`")

        self._duration_in_nano_seconds = duration_in_nano_seconds
