# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sort_order_type import SortOrderType
from openapi_server import util


class ListBuildsForProjectInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, project_name: str=None, sort_order: SortOrderType=None, next_token: str=None):
        """ListBuildsForProjectInput - a model defined in OpenAPI

        :param project_name: The project_name of this ListBuildsForProjectInput.
        :param sort_order: The sort_order of this ListBuildsForProjectInput.
        :param next_token: The next_token of this ListBuildsForProjectInput.
        """
        self.openapi_types = {
            'project_name': str,
            'sort_order': SortOrderType,
            'next_token': str
        }

        self.attribute_map = {
            'project_name': 'projectName',
            'sort_order': 'sortOrder',
            'next_token': 'nextToken'
        }

        self._project_name = project_name
        self._sort_order = sort_order
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListBuildsForProjectInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListBuildsForProjectInput of this ListBuildsForProjectInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def project_name(self):
        """Gets the project_name of this ListBuildsForProjectInput.


        :return: The project_name of this ListBuildsForProjectInput.
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this ListBuildsForProjectInput.


        :param project_name: The project_name of this ListBuildsForProjectInput.
        :type project_name: str
        """
        if project_name is None:
            raise ValueError("Invalid value for `project_name`, must not be `None`")

        self._project_name = project_name

    @property
    def sort_order(self):
        """Gets the sort_order of this ListBuildsForProjectInput.


        :return: The sort_order of this ListBuildsForProjectInput.
        :rtype: SortOrderType
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this ListBuildsForProjectInput.


        :param sort_order: The sort_order of this ListBuildsForProjectInput.
        :type sort_order: SortOrderType
        """

        self._sort_order = sort_order

    @property
    def next_token(self):
        """Gets the next_token of this ListBuildsForProjectInput.


        :return: The next_token of this ListBuildsForProjectInput.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListBuildsForProjectInput.


        :param next_token: The next_token of this ListBuildsForProjectInput.
        :type next_token: str
        """

        self._next_token = next_token
