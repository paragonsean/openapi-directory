# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.artifacts_type import ArtifactsType
from openapi_server import util


class ResolvedArtifact(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: ArtifactsType=None, location: str=None, identifier: str=None):
        """ResolvedArtifact - a model defined in OpenAPI

        :param type: The type of this ResolvedArtifact.
        :param location: The location of this ResolvedArtifact.
        :param identifier: The identifier of this ResolvedArtifact.
        """
        self.openapi_types = {
            'type': ArtifactsType,
            'location': str,
            'identifier': str
        }

        self.attribute_map = {
            'type': 'type',
            'location': 'location',
            'identifier': 'identifier'
        }

        self._type = type
        self._location = location
        self._identifier = identifier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResolvedArtifact':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResolvedArtifact of this ResolvedArtifact.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this ResolvedArtifact.


        :return: The type of this ResolvedArtifact.
        :rtype: ArtifactsType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ResolvedArtifact.


        :param type: The type of this ResolvedArtifact.
        :type type: ArtifactsType
        """

        self._type = type

    @property
    def location(self):
        """Gets the location of this ResolvedArtifact.


        :return: The location of this ResolvedArtifact.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ResolvedArtifact.


        :param location: The location of this ResolvedArtifact.
        :type location: str
        """

        self._location = location

    @property
    def identifier(self):
        """Gets the identifier of this ResolvedArtifact.


        :return: The identifier of this ResolvedArtifact.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this ResolvedArtifact.


        :param identifier: The identifier of this ResolvedArtifact.
        :type identifier: str
        """

        self._identifier = identifier
