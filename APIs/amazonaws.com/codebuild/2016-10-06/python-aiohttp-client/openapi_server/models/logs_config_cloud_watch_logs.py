# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.logs_config_status_type import LogsConfigStatusType
from openapi_server import util


class LogsConfigCloudWatchLogs(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, status: LogsConfigStatusType=None, group_name: str=None, stream_name: str=None):
        """LogsConfigCloudWatchLogs - a model defined in OpenAPI

        :param status: The status of this LogsConfigCloudWatchLogs.
        :param group_name: The group_name of this LogsConfigCloudWatchLogs.
        :param stream_name: The stream_name of this LogsConfigCloudWatchLogs.
        """
        self.openapi_types = {
            'status': LogsConfigStatusType,
            'group_name': str,
            'stream_name': str
        }

        self.attribute_map = {
            'status': 'status',
            'group_name': 'groupName',
            'stream_name': 'streamName'
        }

        self._status = status
        self._group_name = group_name
        self._stream_name = stream_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LogsConfigCloudWatchLogs':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LogsConfig_cloudWatchLogs of this LogsConfigCloudWatchLogs.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self):
        """Gets the status of this LogsConfigCloudWatchLogs.


        :return: The status of this LogsConfigCloudWatchLogs.
        :rtype: LogsConfigStatusType
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this LogsConfigCloudWatchLogs.


        :param status: The status of this LogsConfigCloudWatchLogs.
        :type status: LogsConfigStatusType
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def group_name(self):
        """Gets the group_name of this LogsConfigCloudWatchLogs.


        :return: The group_name of this LogsConfigCloudWatchLogs.
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this LogsConfigCloudWatchLogs.


        :param group_name: The group_name of this LogsConfigCloudWatchLogs.
        :type group_name: str
        """

        self._group_name = group_name

    @property
    def stream_name(self):
        """Gets the stream_name of this LogsConfigCloudWatchLogs.


        :return: The stream_name of this LogsConfigCloudWatchLogs.
        :rtype: str
        """
        return self._stream_name

    @stream_name.setter
    def stream_name(self, stream_name):
        """Sets the stream_name of this LogsConfigCloudWatchLogs.


        :param stream_name: The stream_name of this LogsConfigCloudWatchLogs.
        :type stream_name: str
        """

        self._stream_name = stream_name
