# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.build_batch_artifacts import BuildBatchArtifacts
from openapi_server.models.logs_config import LogsConfig
from openapi_server.models.project_build_batch_config import ProjectBuildBatchConfig
from openapi_server.models.project_cache import ProjectCache
from openapi_server.models.project_environment import ProjectEnvironment
from openapi_server.models.project_source import ProjectSource
from openapi_server.models.status_type import StatusType
from openapi_server.models.vpc_config import VpcConfig
from openapi_server import util


class BuildBatch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, arn: str=None, start_time: datetime=None, end_time: datetime=None, current_phase: str=None, build_batch_status: StatusType=None, source_version: str=None, resolved_source_version: str=None, project_name: str=None, phases: List=None, source: ProjectSource=None, secondary_sources: List=None, secondary_source_versions: List=None, artifacts: BuildBatchArtifacts=None, secondary_artifacts: List=None, cache: ProjectCache=None, environment: ProjectEnvironment=None, service_role: str=None, log_config: LogsConfig=None, build_timeout_in_minutes: int=None, queued_timeout_in_minutes: int=None, complete: bool=None, initiator: str=None, vpc_config: VpcConfig=None, encryption_key: str=None, build_batch_number: int=None, file_system_locations: List=None, build_batch_config: ProjectBuildBatchConfig=None, build_groups: List=None, debug_session_enabled: bool=None):
        """BuildBatch - a model defined in OpenAPI

        :param id: The id of this BuildBatch.
        :param arn: The arn of this BuildBatch.
        :param start_time: The start_time of this BuildBatch.
        :param end_time: The end_time of this BuildBatch.
        :param current_phase: The current_phase of this BuildBatch.
        :param build_batch_status: The build_batch_status of this BuildBatch.
        :param source_version: The source_version of this BuildBatch.
        :param resolved_source_version: The resolved_source_version of this BuildBatch.
        :param project_name: The project_name of this BuildBatch.
        :param phases: The phases of this BuildBatch.
        :param source: The source of this BuildBatch.
        :param secondary_sources: The secondary_sources of this BuildBatch.
        :param secondary_source_versions: The secondary_source_versions of this BuildBatch.
        :param artifacts: The artifacts of this BuildBatch.
        :param secondary_artifacts: The secondary_artifacts of this BuildBatch.
        :param cache: The cache of this BuildBatch.
        :param environment: The environment of this BuildBatch.
        :param service_role: The service_role of this BuildBatch.
        :param log_config: The log_config of this BuildBatch.
        :param build_timeout_in_minutes: The build_timeout_in_minutes of this BuildBatch.
        :param queued_timeout_in_minutes: The queued_timeout_in_minutes of this BuildBatch.
        :param complete: The complete of this BuildBatch.
        :param initiator: The initiator of this BuildBatch.
        :param vpc_config: The vpc_config of this BuildBatch.
        :param encryption_key: The encryption_key of this BuildBatch.
        :param build_batch_number: The build_batch_number of this BuildBatch.
        :param file_system_locations: The file_system_locations of this BuildBatch.
        :param build_batch_config: The build_batch_config of this BuildBatch.
        :param build_groups: The build_groups of this BuildBatch.
        :param debug_session_enabled: The debug_session_enabled of this BuildBatch.
        """
        self.openapi_types = {
            'id': str,
            'arn': str,
            'start_time': datetime,
            'end_time': datetime,
            'current_phase': str,
            'build_batch_status': StatusType,
            'source_version': str,
            'resolved_source_version': str,
            'project_name': str,
            'phases': List,
            'source': ProjectSource,
            'secondary_sources': List,
            'secondary_source_versions': List,
            'artifacts': BuildBatchArtifacts,
            'secondary_artifacts': List,
            'cache': ProjectCache,
            'environment': ProjectEnvironment,
            'service_role': str,
            'log_config': LogsConfig,
            'build_timeout_in_minutes': int,
            'queued_timeout_in_minutes': int,
            'complete': bool,
            'initiator': str,
            'vpc_config': VpcConfig,
            'encryption_key': str,
            'build_batch_number': int,
            'file_system_locations': List,
            'build_batch_config': ProjectBuildBatchConfig,
            'build_groups': List,
            'debug_session_enabled': bool
        }

        self.attribute_map = {
            'id': 'id',
            'arn': 'arn',
            'start_time': 'startTime',
            'end_time': 'endTime',
            'current_phase': 'currentPhase',
            'build_batch_status': 'buildBatchStatus',
            'source_version': 'sourceVersion',
            'resolved_source_version': 'resolvedSourceVersion',
            'project_name': 'projectName',
            'phases': 'phases',
            'source': 'source',
            'secondary_sources': 'secondarySources',
            'secondary_source_versions': 'secondarySourceVersions',
            'artifacts': 'artifacts',
            'secondary_artifacts': 'secondaryArtifacts',
            'cache': 'cache',
            'environment': 'environment',
            'service_role': 'serviceRole',
            'log_config': 'logConfig',
            'build_timeout_in_minutes': 'buildTimeoutInMinutes',
            'queued_timeout_in_minutes': 'queuedTimeoutInMinutes',
            'complete': 'complete',
            'initiator': 'initiator',
            'vpc_config': 'vpcConfig',
            'encryption_key': 'encryptionKey',
            'build_batch_number': 'buildBatchNumber',
            'file_system_locations': 'fileSystemLocations',
            'build_batch_config': 'buildBatchConfig',
            'build_groups': 'buildGroups',
            'debug_session_enabled': 'debugSessionEnabled'
        }

        self._id = id
        self._arn = arn
        self._start_time = start_time
        self._end_time = end_time
        self._current_phase = current_phase
        self._build_batch_status = build_batch_status
        self._source_version = source_version
        self._resolved_source_version = resolved_source_version
        self._project_name = project_name
        self._phases = phases
        self._source = source
        self._secondary_sources = secondary_sources
        self._secondary_source_versions = secondary_source_versions
        self._artifacts = artifacts
        self._secondary_artifacts = secondary_artifacts
        self._cache = cache
        self._environment = environment
        self._service_role = service_role
        self._log_config = log_config
        self._build_timeout_in_minutes = build_timeout_in_minutes
        self._queued_timeout_in_minutes = queued_timeout_in_minutes
        self._complete = complete
        self._initiator = initiator
        self._vpc_config = vpc_config
        self._encryption_key = encryption_key
        self._build_batch_number = build_batch_number
        self._file_system_locations = file_system_locations
        self._build_batch_config = build_batch_config
        self._build_groups = build_groups
        self._debug_session_enabled = debug_session_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BuildBatch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BuildBatch of this BuildBatch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this BuildBatch.


        :return: The id of this BuildBatch.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BuildBatch.


        :param id: The id of this BuildBatch.
        :type id: str
        """

        self._id = id

    @property
    def arn(self):
        """Gets the arn of this BuildBatch.


        :return: The arn of this BuildBatch.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this BuildBatch.


        :param arn: The arn of this BuildBatch.
        :type arn: str
        """

        self._arn = arn

    @property
    def start_time(self):
        """Gets the start_time of this BuildBatch.


        :return: The start_time of this BuildBatch.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this BuildBatch.


        :param start_time: The start_time of this BuildBatch.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this BuildBatch.


        :return: The end_time of this BuildBatch.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this BuildBatch.


        :param end_time: The end_time of this BuildBatch.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def current_phase(self):
        """Gets the current_phase of this BuildBatch.


        :return: The current_phase of this BuildBatch.
        :rtype: str
        """
        return self._current_phase

    @current_phase.setter
    def current_phase(self, current_phase):
        """Sets the current_phase of this BuildBatch.


        :param current_phase: The current_phase of this BuildBatch.
        :type current_phase: str
        """

        self._current_phase = current_phase

    @property
    def build_batch_status(self):
        """Gets the build_batch_status of this BuildBatch.


        :return: The build_batch_status of this BuildBatch.
        :rtype: StatusType
        """
        return self._build_batch_status

    @build_batch_status.setter
    def build_batch_status(self, build_batch_status):
        """Sets the build_batch_status of this BuildBatch.


        :param build_batch_status: The build_batch_status of this BuildBatch.
        :type build_batch_status: StatusType
        """

        self._build_batch_status = build_batch_status

    @property
    def source_version(self):
        """Gets the source_version of this BuildBatch.


        :return: The source_version of this BuildBatch.
        :rtype: str
        """
        return self._source_version

    @source_version.setter
    def source_version(self, source_version):
        """Sets the source_version of this BuildBatch.


        :param source_version: The source_version of this BuildBatch.
        :type source_version: str
        """

        self._source_version = source_version

    @property
    def resolved_source_version(self):
        """Gets the resolved_source_version of this BuildBatch.


        :return: The resolved_source_version of this BuildBatch.
        :rtype: str
        """
        return self._resolved_source_version

    @resolved_source_version.setter
    def resolved_source_version(self, resolved_source_version):
        """Sets the resolved_source_version of this BuildBatch.


        :param resolved_source_version: The resolved_source_version of this BuildBatch.
        :type resolved_source_version: str
        """

        self._resolved_source_version = resolved_source_version

    @property
    def project_name(self):
        """Gets the project_name of this BuildBatch.


        :return: The project_name of this BuildBatch.
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this BuildBatch.


        :param project_name: The project_name of this BuildBatch.
        :type project_name: str
        """

        self._project_name = project_name

    @property
    def phases(self):
        """Gets the phases of this BuildBatch.


        :return: The phases of this BuildBatch.
        :rtype: List
        """
        return self._phases

    @phases.setter
    def phases(self, phases):
        """Sets the phases of this BuildBatch.


        :param phases: The phases of this BuildBatch.
        :type phases: List
        """

        self._phases = phases

    @property
    def source(self):
        """Gets the source of this BuildBatch.


        :return: The source of this BuildBatch.
        :rtype: ProjectSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this BuildBatch.


        :param source: The source of this BuildBatch.
        :type source: ProjectSource
        """

        self._source = source

    @property
    def secondary_sources(self):
        """Gets the secondary_sources of this BuildBatch.


        :return: The secondary_sources of this BuildBatch.
        :rtype: List
        """
        return self._secondary_sources

    @secondary_sources.setter
    def secondary_sources(self, secondary_sources):
        """Sets the secondary_sources of this BuildBatch.


        :param secondary_sources: The secondary_sources of this BuildBatch.
        :type secondary_sources: List
        """

        self._secondary_sources = secondary_sources

    @property
    def secondary_source_versions(self):
        """Gets the secondary_source_versions of this BuildBatch.


        :return: The secondary_source_versions of this BuildBatch.
        :rtype: List
        """
        return self._secondary_source_versions

    @secondary_source_versions.setter
    def secondary_source_versions(self, secondary_source_versions):
        """Sets the secondary_source_versions of this BuildBatch.


        :param secondary_source_versions: The secondary_source_versions of this BuildBatch.
        :type secondary_source_versions: List
        """

        self._secondary_source_versions = secondary_source_versions

    @property
    def artifacts(self):
        """Gets the artifacts of this BuildBatch.


        :return: The artifacts of this BuildBatch.
        :rtype: BuildBatchArtifacts
        """
        return self._artifacts

    @artifacts.setter
    def artifacts(self, artifacts):
        """Sets the artifacts of this BuildBatch.


        :param artifacts: The artifacts of this BuildBatch.
        :type artifacts: BuildBatchArtifacts
        """

        self._artifacts = artifacts

    @property
    def secondary_artifacts(self):
        """Gets the secondary_artifacts of this BuildBatch.


        :return: The secondary_artifacts of this BuildBatch.
        :rtype: List
        """
        return self._secondary_artifacts

    @secondary_artifacts.setter
    def secondary_artifacts(self, secondary_artifacts):
        """Sets the secondary_artifacts of this BuildBatch.


        :param secondary_artifacts: The secondary_artifacts of this BuildBatch.
        :type secondary_artifacts: List
        """

        self._secondary_artifacts = secondary_artifacts

    @property
    def cache(self):
        """Gets the cache of this BuildBatch.


        :return: The cache of this BuildBatch.
        :rtype: ProjectCache
        """
        return self._cache

    @cache.setter
    def cache(self, cache):
        """Sets the cache of this BuildBatch.


        :param cache: The cache of this BuildBatch.
        :type cache: ProjectCache
        """

        self._cache = cache

    @property
    def environment(self):
        """Gets the environment of this BuildBatch.


        :return: The environment of this BuildBatch.
        :rtype: ProjectEnvironment
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this BuildBatch.


        :param environment: The environment of this BuildBatch.
        :type environment: ProjectEnvironment
        """

        self._environment = environment

    @property
    def service_role(self):
        """Gets the service_role of this BuildBatch.


        :return: The service_role of this BuildBatch.
        :rtype: str
        """
        return self._service_role

    @service_role.setter
    def service_role(self, service_role):
        """Sets the service_role of this BuildBatch.


        :param service_role: The service_role of this BuildBatch.
        :type service_role: str
        """

        self._service_role = service_role

    @property
    def log_config(self):
        """Gets the log_config of this BuildBatch.


        :return: The log_config of this BuildBatch.
        :rtype: LogsConfig
        """
        return self._log_config

    @log_config.setter
    def log_config(self, log_config):
        """Sets the log_config of this BuildBatch.


        :param log_config: The log_config of this BuildBatch.
        :type log_config: LogsConfig
        """

        self._log_config = log_config

    @property
    def build_timeout_in_minutes(self):
        """Gets the build_timeout_in_minutes of this BuildBatch.


        :return: The build_timeout_in_minutes of this BuildBatch.
        :rtype: int
        """
        return self._build_timeout_in_minutes

    @build_timeout_in_minutes.setter
    def build_timeout_in_minutes(self, build_timeout_in_minutes):
        """Sets the build_timeout_in_minutes of this BuildBatch.


        :param build_timeout_in_minutes: The build_timeout_in_minutes of this BuildBatch.
        :type build_timeout_in_minutes: int
        """

        self._build_timeout_in_minutes = build_timeout_in_minutes

    @property
    def queued_timeout_in_minutes(self):
        """Gets the queued_timeout_in_minutes of this BuildBatch.


        :return: The queued_timeout_in_minutes of this BuildBatch.
        :rtype: int
        """
        return self._queued_timeout_in_minutes

    @queued_timeout_in_minutes.setter
    def queued_timeout_in_minutes(self, queued_timeout_in_minutes):
        """Sets the queued_timeout_in_minutes of this BuildBatch.


        :param queued_timeout_in_minutes: The queued_timeout_in_minutes of this BuildBatch.
        :type queued_timeout_in_minutes: int
        """

        self._queued_timeout_in_minutes = queued_timeout_in_minutes

    @property
    def complete(self):
        """Gets the complete of this BuildBatch.


        :return: The complete of this BuildBatch.
        :rtype: bool
        """
        return self._complete

    @complete.setter
    def complete(self, complete):
        """Sets the complete of this BuildBatch.


        :param complete: The complete of this BuildBatch.
        :type complete: bool
        """

        self._complete = complete

    @property
    def initiator(self):
        """Gets the initiator of this BuildBatch.


        :return: The initiator of this BuildBatch.
        :rtype: str
        """
        return self._initiator

    @initiator.setter
    def initiator(self, initiator):
        """Sets the initiator of this BuildBatch.


        :param initiator: The initiator of this BuildBatch.
        :type initiator: str
        """

        self._initiator = initiator

    @property
    def vpc_config(self):
        """Gets the vpc_config of this BuildBatch.


        :return: The vpc_config of this BuildBatch.
        :rtype: VpcConfig
        """
        return self._vpc_config

    @vpc_config.setter
    def vpc_config(self, vpc_config):
        """Sets the vpc_config of this BuildBatch.


        :param vpc_config: The vpc_config of this BuildBatch.
        :type vpc_config: VpcConfig
        """

        self._vpc_config = vpc_config

    @property
    def encryption_key(self):
        """Gets the encryption_key of this BuildBatch.


        :return: The encryption_key of this BuildBatch.
        :rtype: str
        """
        return self._encryption_key

    @encryption_key.setter
    def encryption_key(self, encryption_key):
        """Sets the encryption_key of this BuildBatch.


        :param encryption_key: The encryption_key of this BuildBatch.
        :type encryption_key: str
        """

        self._encryption_key = encryption_key

    @property
    def build_batch_number(self):
        """Gets the build_batch_number of this BuildBatch.


        :return: The build_batch_number of this BuildBatch.
        :rtype: int
        """
        return self._build_batch_number

    @build_batch_number.setter
    def build_batch_number(self, build_batch_number):
        """Sets the build_batch_number of this BuildBatch.


        :param build_batch_number: The build_batch_number of this BuildBatch.
        :type build_batch_number: int
        """

        self._build_batch_number = build_batch_number

    @property
    def file_system_locations(self):
        """Gets the file_system_locations of this BuildBatch.


        :return: The file_system_locations of this BuildBatch.
        :rtype: List
        """
        return self._file_system_locations

    @file_system_locations.setter
    def file_system_locations(self, file_system_locations):
        """Sets the file_system_locations of this BuildBatch.


        :param file_system_locations: The file_system_locations of this BuildBatch.
        :type file_system_locations: List
        """

        self._file_system_locations = file_system_locations

    @property
    def build_batch_config(self):
        """Gets the build_batch_config of this BuildBatch.


        :return: The build_batch_config of this BuildBatch.
        :rtype: ProjectBuildBatchConfig
        """
        return self._build_batch_config

    @build_batch_config.setter
    def build_batch_config(self, build_batch_config):
        """Sets the build_batch_config of this BuildBatch.


        :param build_batch_config: The build_batch_config of this BuildBatch.
        :type build_batch_config: ProjectBuildBatchConfig
        """

        self._build_batch_config = build_batch_config

    @property
    def build_groups(self):
        """Gets the build_groups of this BuildBatch.


        :return: The build_groups of this BuildBatch.
        :rtype: List
        """
        return self._build_groups

    @build_groups.setter
    def build_groups(self, build_groups):
        """Sets the build_groups of this BuildBatch.


        :param build_groups: The build_groups of this BuildBatch.
        :type build_groups: List
        """

        self._build_groups = build_groups

    @property
    def debug_session_enabled(self):
        """Gets the debug_session_enabled of this BuildBatch.


        :return: The debug_session_enabled of this BuildBatch.
        :rtype: bool
        """
        return self._debug_session_enabled

    @debug_session_enabled.setter
    def debug_session_enabled(self, debug_session_enabled):
        """Sets the debug_session_enabled of this BuildBatch.


        :param debug_session_enabled: The debug_session_enabled of this BuildBatch.
        :type debug_session_enabled: bool
        """

        self._debug_session_enabled = debug_session_enabled
