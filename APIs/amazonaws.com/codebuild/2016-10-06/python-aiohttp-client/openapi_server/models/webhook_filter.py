# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.webhook_filter_type import WebhookFilterType
from openapi_server import util


class WebhookFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: WebhookFilterType=None, pattern: str=None, exclude_matched_pattern: bool=None):
        """WebhookFilter - a model defined in OpenAPI

        :param type: The type of this WebhookFilter.
        :param pattern: The pattern of this WebhookFilter.
        :param exclude_matched_pattern: The exclude_matched_pattern of this WebhookFilter.
        """
        self.openapi_types = {
            'type': WebhookFilterType,
            'pattern': str,
            'exclude_matched_pattern': bool
        }

        self.attribute_map = {
            'type': 'type',
            'pattern': 'pattern',
            'exclude_matched_pattern': 'excludeMatchedPattern'
        }

        self._type = type
        self._pattern = pattern
        self._exclude_matched_pattern = exclude_matched_pattern

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WebhookFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WebhookFilter of this WebhookFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this WebhookFilter.


        :return: The type of this WebhookFilter.
        :rtype: WebhookFilterType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this WebhookFilter.


        :param type: The type of this WebhookFilter.
        :type type: WebhookFilterType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def pattern(self):
        """Gets the pattern of this WebhookFilter.


        :return: The pattern of this WebhookFilter.
        :rtype: str
        """
        return self._pattern

    @pattern.setter
    def pattern(self, pattern):
        """Sets the pattern of this WebhookFilter.


        :param pattern: The pattern of this WebhookFilter.
        :type pattern: str
        """
        if pattern is None:
            raise ValueError("Invalid value for `pattern`, must not be `None`")

        self._pattern = pattern

    @property
    def exclude_matched_pattern(self):
        """Gets the exclude_matched_pattern of this WebhookFilter.


        :return: The exclude_matched_pattern of this WebhookFilter.
        :rtype: bool
        """
        return self._exclude_matched_pattern

    @exclude_matched_pattern.setter
    def exclude_matched_pattern(self, exclude_matched_pattern):
        """Sets the exclude_matched_pattern of this WebhookFilter.


        :param exclude_matched_pattern: The exclude_matched_pattern of this WebhookFilter.
        :type exclude_matched_pattern: bool
        """

        self._exclude_matched_pattern = exclude_matched_pattern
