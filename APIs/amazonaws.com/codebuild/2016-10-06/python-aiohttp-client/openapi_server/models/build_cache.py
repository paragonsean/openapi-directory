# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cache_type import CacheType
from openapi_server import util


class BuildCache(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: CacheType=None, location: str=None, modes: List=None):
        """BuildCache - a model defined in OpenAPI

        :param type: The type of this BuildCache.
        :param location: The location of this BuildCache.
        :param modes: The modes of this BuildCache.
        """
        self.openapi_types = {
            'type': CacheType,
            'location': str,
            'modes': List
        }

        self.attribute_map = {
            'type': 'type',
            'location': 'location',
            'modes': 'modes'
        }

        self._type = type
        self._location = location
        self._modes = modes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BuildCache':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Build_cache of this BuildCache.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this BuildCache.


        :return: The type of this BuildCache.
        :rtype: CacheType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BuildCache.


        :param type: The type of this BuildCache.
        :type type: CacheType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def location(self):
        """Gets the location of this BuildCache.


        :return: The location of this BuildCache.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this BuildCache.


        :param location: The location of this BuildCache.
        :type location: str
        """

        self._location = location

    @property
    def modes(self):
        """Gets the modes of this BuildCache.


        :return: The modes of this BuildCache.
        :rtype: List
        """
        return self._modes

    @modes.setter
    def modes(self, modes):
        """Sets the modes of this BuildCache.


        :param modes: The modes of this BuildCache.
        :type modes: List
        """

        self._modes = modes
