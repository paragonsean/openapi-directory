# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.project_visibility_type import ProjectVisibilityType
from openapi_server import util


class UpdateProjectVisibilityInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, project_arn: str=None, project_visibility: ProjectVisibilityType=None, resource_access_role: str=None):
        """UpdateProjectVisibilityInput - a model defined in OpenAPI

        :param project_arn: The project_arn of this UpdateProjectVisibilityInput.
        :param project_visibility: The project_visibility of this UpdateProjectVisibilityInput.
        :param resource_access_role: The resource_access_role of this UpdateProjectVisibilityInput.
        """
        self.openapi_types = {
            'project_arn': str,
            'project_visibility': ProjectVisibilityType,
            'resource_access_role': str
        }

        self.attribute_map = {
            'project_arn': 'projectArn',
            'project_visibility': 'projectVisibility',
            'resource_access_role': 'resourceAccessRole'
        }

        self._project_arn = project_arn
        self._project_visibility = project_visibility
        self._resource_access_role = resource_access_role

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateProjectVisibilityInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateProjectVisibilityInput of this UpdateProjectVisibilityInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def project_arn(self):
        """Gets the project_arn of this UpdateProjectVisibilityInput.


        :return: The project_arn of this UpdateProjectVisibilityInput.
        :rtype: str
        """
        return self._project_arn

    @project_arn.setter
    def project_arn(self, project_arn):
        """Sets the project_arn of this UpdateProjectVisibilityInput.


        :param project_arn: The project_arn of this UpdateProjectVisibilityInput.
        :type project_arn: str
        """
        if project_arn is None:
            raise ValueError("Invalid value for `project_arn`, must not be `None`")

        self._project_arn = project_arn

    @property
    def project_visibility(self):
        """Gets the project_visibility of this UpdateProjectVisibilityInput.


        :return: The project_visibility of this UpdateProjectVisibilityInput.
        :rtype: ProjectVisibilityType
        """
        return self._project_visibility

    @project_visibility.setter
    def project_visibility(self, project_visibility):
        """Sets the project_visibility of this UpdateProjectVisibilityInput.


        :param project_visibility: The project_visibility of this UpdateProjectVisibilityInput.
        :type project_visibility: ProjectVisibilityType
        """
        if project_visibility is None:
            raise ValueError("Invalid value for `project_visibility`, must not be `None`")

        self._project_visibility = project_visibility

    @property
    def resource_access_role(self):
        """Gets the resource_access_role of this UpdateProjectVisibilityInput.


        :return: The resource_access_role of this UpdateProjectVisibilityInput.
        :rtype: str
        """
        return self._resource_access_role

    @resource_access_role.setter
    def resource_access_role(self, resource_access_role):
        """Sets the resource_access_role of this UpdateProjectVisibilityInput.


        :param resource_access_role: The resource_access_role of this UpdateProjectVisibilityInput.
        :type resource_access_role: str
        """

        self._resource_access_role = resource_access_role
