# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_project_input_artifacts import CreateProjectInputArtifacts
from openapi_server.models.create_project_input_build_batch_config import CreateProjectInputBuildBatchConfig
from openapi_server.models.create_project_input_cache import CreateProjectInputCache
from openapi_server.models.create_project_input_environment import CreateProjectInputEnvironment
from openapi_server.models.create_project_input_logs_config import CreateProjectInputLogsConfig
from openapi_server.models.create_project_input_source import CreateProjectInputSource
from openapi_server.models.create_project_input_vpc_config import CreateProjectInputVpcConfig
from openapi_server import util


class CreateProjectInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, description: str=None, source: CreateProjectInputSource=None, secondary_sources: List=None, source_version: str=None, secondary_source_versions: List=None, artifacts: CreateProjectInputArtifacts=None, secondary_artifacts: List=None, cache: CreateProjectInputCache=None, environment: CreateProjectInputEnvironment=None, service_role: str=None, timeout_in_minutes: int=None, queued_timeout_in_minutes: int=None, encryption_key: str=None, tags: List=None, vpc_config: CreateProjectInputVpcConfig=None, badge_enabled: bool=None, logs_config: CreateProjectInputLogsConfig=None, file_system_locations: List=None, build_batch_config: CreateProjectInputBuildBatchConfig=None, concurrent_build_limit: int=None):
        """CreateProjectInput - a model defined in OpenAPI

        :param name: The name of this CreateProjectInput.
        :param description: The description of this CreateProjectInput.
        :param source: The source of this CreateProjectInput.
        :param secondary_sources: The secondary_sources of this CreateProjectInput.
        :param source_version: The source_version of this CreateProjectInput.
        :param secondary_source_versions: The secondary_source_versions of this CreateProjectInput.
        :param artifacts: The artifacts of this CreateProjectInput.
        :param secondary_artifacts: The secondary_artifacts of this CreateProjectInput.
        :param cache: The cache of this CreateProjectInput.
        :param environment: The environment of this CreateProjectInput.
        :param service_role: The service_role of this CreateProjectInput.
        :param timeout_in_minutes: The timeout_in_minutes of this CreateProjectInput.
        :param queued_timeout_in_minutes: The queued_timeout_in_minutes of this CreateProjectInput.
        :param encryption_key: The encryption_key of this CreateProjectInput.
        :param tags: The tags of this CreateProjectInput.
        :param vpc_config: The vpc_config of this CreateProjectInput.
        :param badge_enabled: The badge_enabled of this CreateProjectInput.
        :param logs_config: The logs_config of this CreateProjectInput.
        :param file_system_locations: The file_system_locations of this CreateProjectInput.
        :param build_batch_config: The build_batch_config of this CreateProjectInput.
        :param concurrent_build_limit: The concurrent_build_limit of this CreateProjectInput.
        """
        self.openapi_types = {
            'name': str,
            'description': str,
            'source': CreateProjectInputSource,
            'secondary_sources': List,
            'source_version': str,
            'secondary_source_versions': List,
            'artifacts': CreateProjectInputArtifacts,
            'secondary_artifacts': List,
            'cache': CreateProjectInputCache,
            'environment': CreateProjectInputEnvironment,
            'service_role': str,
            'timeout_in_minutes': int,
            'queued_timeout_in_minutes': int,
            'encryption_key': str,
            'tags': List,
            'vpc_config': CreateProjectInputVpcConfig,
            'badge_enabled': bool,
            'logs_config': CreateProjectInputLogsConfig,
            'file_system_locations': List,
            'build_batch_config': CreateProjectInputBuildBatchConfig,
            'concurrent_build_limit': int
        }

        self.attribute_map = {
            'name': 'name',
            'description': 'description',
            'source': 'source',
            'secondary_sources': 'secondarySources',
            'source_version': 'sourceVersion',
            'secondary_source_versions': 'secondarySourceVersions',
            'artifacts': 'artifacts',
            'secondary_artifacts': 'secondaryArtifacts',
            'cache': 'cache',
            'environment': 'environment',
            'service_role': 'serviceRole',
            'timeout_in_minutes': 'timeoutInMinutes',
            'queued_timeout_in_minutes': 'queuedTimeoutInMinutes',
            'encryption_key': 'encryptionKey',
            'tags': 'tags',
            'vpc_config': 'vpcConfig',
            'badge_enabled': 'badgeEnabled',
            'logs_config': 'logsConfig',
            'file_system_locations': 'fileSystemLocations',
            'build_batch_config': 'buildBatchConfig',
            'concurrent_build_limit': 'concurrentBuildLimit'
        }

        self._name = name
        self._description = description
        self._source = source
        self._secondary_sources = secondary_sources
        self._source_version = source_version
        self._secondary_source_versions = secondary_source_versions
        self._artifacts = artifacts
        self._secondary_artifacts = secondary_artifacts
        self._cache = cache
        self._environment = environment
        self._service_role = service_role
        self._timeout_in_minutes = timeout_in_minutes
        self._queued_timeout_in_minutes = queued_timeout_in_minutes
        self._encryption_key = encryption_key
        self._tags = tags
        self._vpc_config = vpc_config
        self._badge_enabled = badge_enabled
        self._logs_config = logs_config
        self._file_system_locations = file_system_locations
        self._build_batch_config = build_batch_config
        self._concurrent_build_limit = concurrent_build_limit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateProjectInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateProjectInput of this CreateProjectInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateProjectInput.


        :return: The name of this CreateProjectInput.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateProjectInput.


        :param name: The name of this CreateProjectInput.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def description(self):
        """Gets the description of this CreateProjectInput.


        :return: The description of this CreateProjectInput.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateProjectInput.


        :param description: The description of this CreateProjectInput.
        :type description: str
        """

        self._description = description

    @property
    def source(self):
        """Gets the source of this CreateProjectInput.


        :return: The source of this CreateProjectInput.
        :rtype: CreateProjectInputSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this CreateProjectInput.


        :param source: The source of this CreateProjectInput.
        :type source: CreateProjectInputSource
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")

        self._source = source

    @property
    def secondary_sources(self):
        """Gets the secondary_sources of this CreateProjectInput.


        :return: The secondary_sources of this CreateProjectInput.
        :rtype: List
        """
        return self._secondary_sources

    @secondary_sources.setter
    def secondary_sources(self, secondary_sources):
        """Sets the secondary_sources of this CreateProjectInput.


        :param secondary_sources: The secondary_sources of this CreateProjectInput.
        :type secondary_sources: List
        """

        self._secondary_sources = secondary_sources

    @property
    def source_version(self):
        """Gets the source_version of this CreateProjectInput.


        :return: The source_version of this CreateProjectInput.
        :rtype: str
        """
        return self._source_version

    @source_version.setter
    def source_version(self, source_version):
        """Sets the source_version of this CreateProjectInput.


        :param source_version: The source_version of this CreateProjectInput.
        :type source_version: str
        """

        self._source_version = source_version

    @property
    def secondary_source_versions(self):
        """Gets the secondary_source_versions of this CreateProjectInput.


        :return: The secondary_source_versions of this CreateProjectInput.
        :rtype: List
        """
        return self._secondary_source_versions

    @secondary_source_versions.setter
    def secondary_source_versions(self, secondary_source_versions):
        """Sets the secondary_source_versions of this CreateProjectInput.


        :param secondary_source_versions: The secondary_source_versions of this CreateProjectInput.
        :type secondary_source_versions: List
        """

        self._secondary_source_versions = secondary_source_versions

    @property
    def artifacts(self):
        """Gets the artifacts of this CreateProjectInput.


        :return: The artifacts of this CreateProjectInput.
        :rtype: CreateProjectInputArtifacts
        """
        return self._artifacts

    @artifacts.setter
    def artifacts(self, artifacts):
        """Sets the artifacts of this CreateProjectInput.


        :param artifacts: The artifacts of this CreateProjectInput.
        :type artifacts: CreateProjectInputArtifacts
        """
        if artifacts is None:
            raise ValueError("Invalid value for `artifacts`, must not be `None`")

        self._artifacts = artifacts

    @property
    def secondary_artifacts(self):
        """Gets the secondary_artifacts of this CreateProjectInput.


        :return: The secondary_artifacts of this CreateProjectInput.
        :rtype: List
        """
        return self._secondary_artifacts

    @secondary_artifacts.setter
    def secondary_artifacts(self, secondary_artifacts):
        """Sets the secondary_artifacts of this CreateProjectInput.


        :param secondary_artifacts: The secondary_artifacts of this CreateProjectInput.
        :type secondary_artifacts: List
        """

        self._secondary_artifacts = secondary_artifacts

    @property
    def cache(self):
        """Gets the cache of this CreateProjectInput.


        :return: The cache of this CreateProjectInput.
        :rtype: CreateProjectInputCache
        """
        return self._cache

    @cache.setter
    def cache(self, cache):
        """Sets the cache of this CreateProjectInput.


        :param cache: The cache of this CreateProjectInput.
        :type cache: CreateProjectInputCache
        """

        self._cache = cache

    @property
    def environment(self):
        """Gets the environment of this CreateProjectInput.


        :return: The environment of this CreateProjectInput.
        :rtype: CreateProjectInputEnvironment
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this CreateProjectInput.


        :param environment: The environment of this CreateProjectInput.
        :type environment: CreateProjectInputEnvironment
        """
        if environment is None:
            raise ValueError("Invalid value for `environment`, must not be `None`")

        self._environment = environment

    @property
    def service_role(self):
        """Gets the service_role of this CreateProjectInput.


        :return: The service_role of this CreateProjectInput.
        :rtype: str
        """
        return self._service_role

    @service_role.setter
    def service_role(self, service_role):
        """Sets the service_role of this CreateProjectInput.


        :param service_role: The service_role of this CreateProjectInput.
        :type service_role: str
        """
        if service_role is None:
            raise ValueError("Invalid value for `service_role`, must not be `None`")

        self._service_role = service_role

    @property
    def timeout_in_minutes(self):
        """Gets the timeout_in_minutes of this CreateProjectInput.


        :return: The timeout_in_minutes of this CreateProjectInput.
        :rtype: int
        """
        return self._timeout_in_minutes

    @timeout_in_minutes.setter
    def timeout_in_minutes(self, timeout_in_minutes):
        """Sets the timeout_in_minutes of this CreateProjectInput.


        :param timeout_in_minutes: The timeout_in_minutes of this CreateProjectInput.
        :type timeout_in_minutes: int
        """

        self._timeout_in_minutes = timeout_in_minutes

    @property
    def queued_timeout_in_minutes(self):
        """Gets the queued_timeout_in_minutes of this CreateProjectInput.


        :return: The queued_timeout_in_minutes of this CreateProjectInput.
        :rtype: int
        """
        return self._queued_timeout_in_minutes

    @queued_timeout_in_minutes.setter
    def queued_timeout_in_minutes(self, queued_timeout_in_minutes):
        """Sets the queued_timeout_in_minutes of this CreateProjectInput.


        :param queued_timeout_in_minutes: The queued_timeout_in_minutes of this CreateProjectInput.
        :type queued_timeout_in_minutes: int
        """

        self._queued_timeout_in_minutes = queued_timeout_in_minutes

    @property
    def encryption_key(self):
        """Gets the encryption_key of this CreateProjectInput.


        :return: The encryption_key of this CreateProjectInput.
        :rtype: str
        """
        return self._encryption_key

    @encryption_key.setter
    def encryption_key(self, encryption_key):
        """Sets the encryption_key of this CreateProjectInput.


        :param encryption_key: The encryption_key of this CreateProjectInput.
        :type encryption_key: str
        """

        self._encryption_key = encryption_key

    @property
    def tags(self):
        """Gets the tags of this CreateProjectInput.


        :return: The tags of this CreateProjectInput.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateProjectInput.


        :param tags: The tags of this CreateProjectInput.
        :type tags: List
        """

        self._tags = tags

    @property
    def vpc_config(self):
        """Gets the vpc_config of this CreateProjectInput.


        :return: The vpc_config of this CreateProjectInput.
        :rtype: CreateProjectInputVpcConfig
        """
        return self._vpc_config

    @vpc_config.setter
    def vpc_config(self, vpc_config):
        """Sets the vpc_config of this CreateProjectInput.


        :param vpc_config: The vpc_config of this CreateProjectInput.
        :type vpc_config: CreateProjectInputVpcConfig
        """

        self._vpc_config = vpc_config

    @property
    def badge_enabled(self):
        """Gets the badge_enabled of this CreateProjectInput.


        :return: The badge_enabled of this CreateProjectInput.
        :rtype: bool
        """
        return self._badge_enabled

    @badge_enabled.setter
    def badge_enabled(self, badge_enabled):
        """Sets the badge_enabled of this CreateProjectInput.


        :param badge_enabled: The badge_enabled of this CreateProjectInput.
        :type badge_enabled: bool
        """

        self._badge_enabled = badge_enabled

    @property
    def logs_config(self):
        """Gets the logs_config of this CreateProjectInput.


        :return: The logs_config of this CreateProjectInput.
        :rtype: CreateProjectInputLogsConfig
        """
        return self._logs_config

    @logs_config.setter
    def logs_config(self, logs_config):
        """Sets the logs_config of this CreateProjectInput.


        :param logs_config: The logs_config of this CreateProjectInput.
        :type logs_config: CreateProjectInputLogsConfig
        """

        self._logs_config = logs_config

    @property
    def file_system_locations(self):
        """Gets the file_system_locations of this CreateProjectInput.


        :return: The file_system_locations of this CreateProjectInput.
        :rtype: List
        """
        return self._file_system_locations

    @file_system_locations.setter
    def file_system_locations(self, file_system_locations):
        """Sets the file_system_locations of this CreateProjectInput.


        :param file_system_locations: The file_system_locations of this CreateProjectInput.
        :type file_system_locations: List
        """

        self._file_system_locations = file_system_locations

    @property
    def build_batch_config(self):
        """Gets the build_batch_config of this CreateProjectInput.


        :return: The build_batch_config of this CreateProjectInput.
        :rtype: CreateProjectInputBuildBatchConfig
        """
        return self._build_batch_config

    @build_batch_config.setter
    def build_batch_config(self, build_batch_config):
        """Sets the build_batch_config of this CreateProjectInput.


        :param build_batch_config: The build_batch_config of this CreateProjectInput.
        :type build_batch_config: CreateProjectInputBuildBatchConfig
        """

        self._build_batch_config = build_batch_config

    @property
    def concurrent_build_limit(self):
        """Gets the concurrent_build_limit of this CreateProjectInput.


        :return: The concurrent_build_limit of this CreateProjectInput.
        :rtype: int
        """
        return self._concurrent_build_limit

    @concurrent_build_limit.setter
    def concurrent_build_limit(self, concurrent_build_limit):
        """Sets the concurrent_build_limit of this CreateProjectInput.


        :param concurrent_build_limit: The concurrent_build_limit of this CreateProjectInput.
        :type concurrent_build_limit: int
        """

        self._concurrent_build_limit = concurrent_build_limit
