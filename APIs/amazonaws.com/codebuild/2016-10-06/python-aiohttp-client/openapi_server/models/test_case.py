# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TestCase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, report_arn: str=None, test_raw_data_path: str=None, prefix: str=None, name: str=None, status: str=None, duration_in_nano_seconds: int=None, message: str=None, expired: datetime=None):
        """TestCase - a model defined in OpenAPI

        :param report_arn: The report_arn of this TestCase.
        :param test_raw_data_path: The test_raw_data_path of this TestCase.
        :param prefix: The prefix of this TestCase.
        :param name: The name of this TestCase.
        :param status: The status of this TestCase.
        :param duration_in_nano_seconds: The duration_in_nano_seconds of this TestCase.
        :param message: The message of this TestCase.
        :param expired: The expired of this TestCase.
        """
        self.openapi_types = {
            'report_arn': str,
            'test_raw_data_path': str,
            'prefix': str,
            'name': str,
            'status': str,
            'duration_in_nano_seconds': int,
            'message': str,
            'expired': datetime
        }

        self.attribute_map = {
            'report_arn': 'reportArn',
            'test_raw_data_path': 'testRawDataPath',
            'prefix': 'prefix',
            'name': 'name',
            'status': 'status',
            'duration_in_nano_seconds': 'durationInNanoSeconds',
            'message': 'message',
            'expired': 'expired'
        }

        self._report_arn = report_arn
        self._test_raw_data_path = test_raw_data_path
        self._prefix = prefix
        self._name = name
        self._status = status
        self._duration_in_nano_seconds = duration_in_nano_seconds
        self._message = message
        self._expired = expired

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TestCase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TestCase of this TestCase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def report_arn(self):
        """Gets the report_arn of this TestCase.


        :return: The report_arn of this TestCase.
        :rtype: str
        """
        return self._report_arn

    @report_arn.setter
    def report_arn(self, report_arn):
        """Sets the report_arn of this TestCase.


        :param report_arn: The report_arn of this TestCase.
        :type report_arn: str
        """

        self._report_arn = report_arn

    @property
    def test_raw_data_path(self):
        """Gets the test_raw_data_path of this TestCase.


        :return: The test_raw_data_path of this TestCase.
        :rtype: str
        """
        return self._test_raw_data_path

    @test_raw_data_path.setter
    def test_raw_data_path(self, test_raw_data_path):
        """Sets the test_raw_data_path of this TestCase.


        :param test_raw_data_path: The test_raw_data_path of this TestCase.
        :type test_raw_data_path: str
        """

        self._test_raw_data_path = test_raw_data_path

    @property
    def prefix(self):
        """Gets the prefix of this TestCase.


        :return: The prefix of this TestCase.
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this TestCase.


        :param prefix: The prefix of this TestCase.
        :type prefix: str
        """

        self._prefix = prefix

    @property
    def name(self):
        """Gets the name of this TestCase.


        :return: The name of this TestCase.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TestCase.


        :param name: The name of this TestCase.
        :type name: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this TestCase.


        :return: The status of this TestCase.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TestCase.


        :param status: The status of this TestCase.
        :type status: str
        """

        self._status = status

    @property
    def duration_in_nano_seconds(self):
        """Gets the duration_in_nano_seconds of this TestCase.


        :return: The duration_in_nano_seconds of this TestCase.
        :rtype: int
        """
        return self._duration_in_nano_seconds

    @duration_in_nano_seconds.setter
    def duration_in_nano_seconds(self, duration_in_nano_seconds):
        """Sets the duration_in_nano_seconds of this TestCase.


        :param duration_in_nano_seconds: The duration_in_nano_seconds of this TestCase.
        :type duration_in_nano_seconds: int
        """

        self._duration_in_nano_seconds = duration_in_nano_seconds

    @property
    def message(self):
        """Gets the message of this TestCase.


        :return: The message of this TestCase.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this TestCase.


        :param message: The message of this TestCase.
        :type message: str
        """

        self._message = message

    @property
    def expired(self):
        """Gets the expired of this TestCase.


        :return: The expired of this TestCase.
        :rtype: datetime
        """
        return self._expired

    @expired.setter
    def expired(self, expired):
        """Sets the expired of this TestCase.


        :param expired: The expired of this TestCase.
        :type expired: datetime
        """

        self._expired = expired
