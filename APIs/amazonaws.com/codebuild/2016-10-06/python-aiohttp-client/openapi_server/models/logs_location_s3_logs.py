# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bucket_owner_access import BucketOwnerAccess
from openapi_server.models.logs_config_status_type import LogsConfigStatusType
from openapi_server import util


class LogsLocationS3Logs(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, status: LogsConfigStatusType=None, location: str=None, encryption_disabled: bool=None, bucket_owner_access: BucketOwnerAccess=None):
        """LogsLocationS3Logs - a model defined in OpenAPI

        :param status: The status of this LogsLocationS3Logs.
        :param location: The location of this LogsLocationS3Logs.
        :param encryption_disabled: The encryption_disabled of this LogsLocationS3Logs.
        :param bucket_owner_access: The bucket_owner_access of this LogsLocationS3Logs.
        """
        self.openapi_types = {
            'status': LogsConfigStatusType,
            'location': str,
            'encryption_disabled': bool,
            'bucket_owner_access': BucketOwnerAccess
        }

        self.attribute_map = {
            'status': 'status',
            'location': 'location',
            'encryption_disabled': 'encryptionDisabled',
            'bucket_owner_access': 'bucketOwnerAccess'
        }

        self._status = status
        self._location = location
        self._encryption_disabled = encryption_disabled
        self._bucket_owner_access = bucket_owner_access

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LogsLocationS3Logs':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LogsLocation_s3Logs of this LogsLocationS3Logs.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self):
        """Gets the status of this LogsLocationS3Logs.


        :return: The status of this LogsLocationS3Logs.
        :rtype: LogsConfigStatusType
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this LogsLocationS3Logs.


        :param status: The status of this LogsLocationS3Logs.
        :type status: LogsConfigStatusType
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def location(self):
        """Gets the location of this LogsLocationS3Logs.


        :return: The location of this LogsLocationS3Logs.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this LogsLocationS3Logs.


        :param location: The location of this LogsLocationS3Logs.
        :type location: str
        """

        self._location = location

    @property
    def encryption_disabled(self):
        """Gets the encryption_disabled of this LogsLocationS3Logs.


        :return: The encryption_disabled of this LogsLocationS3Logs.
        :rtype: bool
        """
        return self._encryption_disabled

    @encryption_disabled.setter
    def encryption_disabled(self, encryption_disabled):
        """Sets the encryption_disabled of this LogsLocationS3Logs.


        :param encryption_disabled: The encryption_disabled of this LogsLocationS3Logs.
        :type encryption_disabled: bool
        """

        self._encryption_disabled = encryption_disabled

    @property
    def bucket_owner_access(self):
        """Gets the bucket_owner_access of this LogsLocationS3Logs.


        :return: The bucket_owner_access of this LogsLocationS3Logs.
        :rtype: BucketOwnerAccess
        """
        return self._bucket_owner_access

    @bucket_owner_access.setter
    def bucket_owner_access(self, bucket_owner_access):
        """Sets the bucket_owner_access of this LogsLocationS3Logs.


        :param bucket_owner_access: The bucket_owner_access of this LogsLocationS3Logs.
        :type bucket_owner_access: BucketOwnerAccess
        """

        self._bucket_owner_access = bucket_owner_access
