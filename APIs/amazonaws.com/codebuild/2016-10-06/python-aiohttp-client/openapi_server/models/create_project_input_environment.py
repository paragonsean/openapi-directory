# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.compute_type import ComputeType
from openapi_server.models.environment_type import EnvironmentType
from openapi_server.models.image_pull_credentials_type import ImagePullCredentialsType
from openapi_server.models.project_environment_registry_credential import ProjectEnvironmentRegistryCredential
from openapi_server import util


class CreateProjectInputEnvironment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: EnvironmentType=None, image: str=None, compute_type: ComputeType=None, environment_variables: List=None, privileged_mode: bool=None, certificate: str=None, registry_credential: ProjectEnvironmentRegistryCredential=None, image_pull_credentials_type: ImagePullCredentialsType=None):
        """CreateProjectInputEnvironment - a model defined in OpenAPI

        :param type: The type of this CreateProjectInputEnvironment.
        :param image: The image of this CreateProjectInputEnvironment.
        :param compute_type: The compute_type of this CreateProjectInputEnvironment.
        :param environment_variables: The environment_variables of this CreateProjectInputEnvironment.
        :param privileged_mode: The privileged_mode of this CreateProjectInputEnvironment.
        :param certificate: The certificate of this CreateProjectInputEnvironment.
        :param registry_credential: The registry_credential of this CreateProjectInputEnvironment.
        :param image_pull_credentials_type: The image_pull_credentials_type of this CreateProjectInputEnvironment.
        """
        self.openapi_types = {
            'type': EnvironmentType,
            'image': str,
            'compute_type': ComputeType,
            'environment_variables': List,
            'privileged_mode': bool,
            'certificate': str,
            'registry_credential': ProjectEnvironmentRegistryCredential,
            'image_pull_credentials_type': ImagePullCredentialsType
        }

        self.attribute_map = {
            'type': 'type',
            'image': 'image',
            'compute_type': 'computeType',
            'environment_variables': 'environmentVariables',
            'privileged_mode': 'privilegedMode',
            'certificate': 'certificate',
            'registry_credential': 'registryCredential',
            'image_pull_credentials_type': 'imagePullCredentialsType'
        }

        self._type = type
        self._image = image
        self._compute_type = compute_type
        self._environment_variables = environment_variables
        self._privileged_mode = privileged_mode
        self._certificate = certificate
        self._registry_credential = registry_credential
        self._image_pull_credentials_type = image_pull_credentials_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateProjectInputEnvironment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateProjectInput_environment of this CreateProjectInputEnvironment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this CreateProjectInputEnvironment.


        :return: The type of this CreateProjectInputEnvironment.
        :rtype: EnvironmentType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateProjectInputEnvironment.


        :param type: The type of this CreateProjectInputEnvironment.
        :type type: EnvironmentType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def image(self):
        """Gets the image of this CreateProjectInputEnvironment.


        :return: The image of this CreateProjectInputEnvironment.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this CreateProjectInputEnvironment.


        :param image: The image of this CreateProjectInputEnvironment.
        :type image: str
        """
        if image is None:
            raise ValueError("Invalid value for `image`, must not be `None`")

        self._image = image

    @property
    def compute_type(self):
        """Gets the compute_type of this CreateProjectInputEnvironment.


        :return: The compute_type of this CreateProjectInputEnvironment.
        :rtype: ComputeType
        """
        return self._compute_type

    @compute_type.setter
    def compute_type(self, compute_type):
        """Sets the compute_type of this CreateProjectInputEnvironment.


        :param compute_type: The compute_type of this CreateProjectInputEnvironment.
        :type compute_type: ComputeType
        """
        if compute_type is None:
            raise ValueError("Invalid value for `compute_type`, must not be `None`")

        self._compute_type = compute_type

    @property
    def environment_variables(self):
        """Gets the environment_variables of this CreateProjectInputEnvironment.


        :return: The environment_variables of this CreateProjectInputEnvironment.
        :rtype: List
        """
        return self._environment_variables

    @environment_variables.setter
    def environment_variables(self, environment_variables):
        """Sets the environment_variables of this CreateProjectInputEnvironment.


        :param environment_variables: The environment_variables of this CreateProjectInputEnvironment.
        :type environment_variables: List
        """

        self._environment_variables = environment_variables

    @property
    def privileged_mode(self):
        """Gets the privileged_mode of this CreateProjectInputEnvironment.


        :return: The privileged_mode of this CreateProjectInputEnvironment.
        :rtype: bool
        """
        return self._privileged_mode

    @privileged_mode.setter
    def privileged_mode(self, privileged_mode):
        """Sets the privileged_mode of this CreateProjectInputEnvironment.


        :param privileged_mode: The privileged_mode of this CreateProjectInputEnvironment.
        :type privileged_mode: bool
        """

        self._privileged_mode = privileged_mode

    @property
    def certificate(self):
        """Gets the certificate of this CreateProjectInputEnvironment.


        :return: The certificate of this CreateProjectInputEnvironment.
        :rtype: str
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate):
        """Sets the certificate of this CreateProjectInputEnvironment.


        :param certificate: The certificate of this CreateProjectInputEnvironment.
        :type certificate: str
        """

        self._certificate = certificate

    @property
    def registry_credential(self):
        """Gets the registry_credential of this CreateProjectInputEnvironment.


        :return: The registry_credential of this CreateProjectInputEnvironment.
        :rtype: ProjectEnvironmentRegistryCredential
        """
        return self._registry_credential

    @registry_credential.setter
    def registry_credential(self, registry_credential):
        """Sets the registry_credential of this CreateProjectInputEnvironment.


        :param registry_credential: The registry_credential of this CreateProjectInputEnvironment.
        :type registry_credential: ProjectEnvironmentRegistryCredential
        """

        self._registry_credential = registry_credential

    @property
    def image_pull_credentials_type(self):
        """Gets the image_pull_credentials_type of this CreateProjectInputEnvironment.


        :return: The image_pull_credentials_type of this CreateProjectInputEnvironment.
        :rtype: ImagePullCredentialsType
        """
        return self._image_pull_credentials_type

    @image_pull_credentials_type.setter
    def image_pull_credentials_type(self, image_pull_credentials_type):
        """Sets the image_pull_credentials_type of this CreateProjectInputEnvironment.


        :param image_pull_credentials_type: The image_pull_credentials_type of this CreateProjectInputEnvironment.
        :type image_pull_credentials_type: ImagePullCredentialsType
        """

        self._image_pull_credentials_type = image_pull_credentials_type
