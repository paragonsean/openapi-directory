# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_report_group_input_export_config import CreateReportGroupInputExportConfig
from openapi_server.models.report_type import ReportType
from openapi_server import util


class CreateReportGroupInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, type: ReportType=None, export_config: CreateReportGroupInputExportConfig=None, tags: List=None):
        """CreateReportGroupInput - a model defined in OpenAPI

        :param name: The name of this CreateReportGroupInput.
        :param type: The type of this CreateReportGroupInput.
        :param export_config: The export_config of this CreateReportGroupInput.
        :param tags: The tags of this CreateReportGroupInput.
        """
        self.openapi_types = {
            'name': str,
            'type': ReportType,
            'export_config': CreateReportGroupInputExportConfig,
            'tags': List
        }

        self.attribute_map = {
            'name': 'name',
            'type': 'type',
            'export_config': 'exportConfig',
            'tags': 'tags'
        }

        self._name = name
        self._type = type
        self._export_config = export_config
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateReportGroupInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateReportGroupInput of this CreateReportGroupInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateReportGroupInput.


        :return: The name of this CreateReportGroupInput.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateReportGroupInput.


        :param name: The name of this CreateReportGroupInput.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def type(self):
        """Gets the type of this CreateReportGroupInput.


        :return: The type of this CreateReportGroupInput.
        :rtype: ReportType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateReportGroupInput.


        :param type: The type of this CreateReportGroupInput.
        :type type: ReportType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def export_config(self):
        """Gets the export_config of this CreateReportGroupInput.


        :return: The export_config of this CreateReportGroupInput.
        :rtype: CreateReportGroupInputExportConfig
        """
        return self._export_config

    @export_config.setter
    def export_config(self, export_config):
        """Sets the export_config of this CreateReportGroupInput.


        :param export_config: The export_config of this CreateReportGroupInput.
        :type export_config: CreateReportGroupInputExportConfig
        """
        if export_config is None:
            raise ValueError("Invalid value for `export_config`, must not be `None`")

        self._export_config = export_config

    @property
    def tags(self):
        """Gets the tags of this CreateReportGroupInput.


        :return: The tags of this CreateReportGroupInput.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateReportGroupInput.


        :param tags: The tags of this CreateReportGroupInput.
        :type tags: List
        """

        self._tags = tags
