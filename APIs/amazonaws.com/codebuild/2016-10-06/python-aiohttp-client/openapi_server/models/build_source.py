# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.project_source_auth import ProjectSourceAuth
from openapi_server.models.project_source_git_submodules_config import ProjectSourceGitSubmodulesConfig
from openapi_server.models.source_type import SourceType
from openapi_server.models.start_build_input_build_status_config_override import StartBuildInputBuildStatusConfigOverride
from openapi_server import util


class BuildSource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: SourceType=None, location: str=None, git_clone_depth: int=None, git_submodules_config: ProjectSourceGitSubmodulesConfig=None, buildspec: str=None, auth: ProjectSourceAuth=None, report_build_status: bool=None, build_status_config: StartBuildInputBuildStatusConfigOverride=None, insecure_ssl: bool=None, source_identifier: str=None):
        """BuildSource - a model defined in OpenAPI

        :param type: The type of this BuildSource.
        :param location: The location of this BuildSource.
        :param git_clone_depth: The git_clone_depth of this BuildSource.
        :param git_submodules_config: The git_submodules_config of this BuildSource.
        :param buildspec: The buildspec of this BuildSource.
        :param auth: The auth of this BuildSource.
        :param report_build_status: The report_build_status of this BuildSource.
        :param build_status_config: The build_status_config of this BuildSource.
        :param insecure_ssl: The insecure_ssl of this BuildSource.
        :param source_identifier: The source_identifier of this BuildSource.
        """
        self.openapi_types = {
            'type': SourceType,
            'location': str,
            'git_clone_depth': int,
            'git_submodules_config': ProjectSourceGitSubmodulesConfig,
            'buildspec': str,
            'auth': ProjectSourceAuth,
            'report_build_status': bool,
            'build_status_config': StartBuildInputBuildStatusConfigOverride,
            'insecure_ssl': bool,
            'source_identifier': str
        }

        self.attribute_map = {
            'type': 'type',
            'location': 'location',
            'git_clone_depth': 'gitCloneDepth',
            'git_submodules_config': 'gitSubmodulesConfig',
            'buildspec': 'buildspec',
            'auth': 'auth',
            'report_build_status': 'reportBuildStatus',
            'build_status_config': 'buildStatusConfig',
            'insecure_ssl': 'insecureSsl',
            'source_identifier': 'sourceIdentifier'
        }

        self._type = type
        self._location = location
        self._git_clone_depth = git_clone_depth
        self._git_submodules_config = git_submodules_config
        self._buildspec = buildspec
        self._auth = auth
        self._report_build_status = report_build_status
        self._build_status_config = build_status_config
        self._insecure_ssl = insecure_ssl
        self._source_identifier = source_identifier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BuildSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Build_source of this BuildSource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this BuildSource.


        :return: The type of this BuildSource.
        :rtype: SourceType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BuildSource.


        :param type: The type of this BuildSource.
        :type type: SourceType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def location(self):
        """Gets the location of this BuildSource.


        :return: The location of this BuildSource.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this BuildSource.


        :param location: The location of this BuildSource.
        :type location: str
        """

        self._location = location

    @property
    def git_clone_depth(self):
        """Gets the git_clone_depth of this BuildSource.


        :return: The git_clone_depth of this BuildSource.
        :rtype: int
        """
        return self._git_clone_depth

    @git_clone_depth.setter
    def git_clone_depth(self, git_clone_depth):
        """Sets the git_clone_depth of this BuildSource.


        :param git_clone_depth: The git_clone_depth of this BuildSource.
        :type git_clone_depth: int
        """

        self._git_clone_depth = git_clone_depth

    @property
    def git_submodules_config(self):
        """Gets the git_submodules_config of this BuildSource.


        :return: The git_submodules_config of this BuildSource.
        :rtype: ProjectSourceGitSubmodulesConfig
        """
        return self._git_submodules_config

    @git_submodules_config.setter
    def git_submodules_config(self, git_submodules_config):
        """Sets the git_submodules_config of this BuildSource.


        :param git_submodules_config: The git_submodules_config of this BuildSource.
        :type git_submodules_config: ProjectSourceGitSubmodulesConfig
        """

        self._git_submodules_config = git_submodules_config

    @property
    def buildspec(self):
        """Gets the buildspec of this BuildSource.


        :return: The buildspec of this BuildSource.
        :rtype: str
        """
        return self._buildspec

    @buildspec.setter
    def buildspec(self, buildspec):
        """Sets the buildspec of this BuildSource.


        :param buildspec: The buildspec of this BuildSource.
        :type buildspec: str
        """

        self._buildspec = buildspec

    @property
    def auth(self):
        """Gets the auth of this BuildSource.


        :return: The auth of this BuildSource.
        :rtype: ProjectSourceAuth
        """
        return self._auth

    @auth.setter
    def auth(self, auth):
        """Sets the auth of this BuildSource.


        :param auth: The auth of this BuildSource.
        :type auth: ProjectSourceAuth
        """

        self._auth = auth

    @property
    def report_build_status(self):
        """Gets the report_build_status of this BuildSource.


        :return: The report_build_status of this BuildSource.
        :rtype: bool
        """
        return self._report_build_status

    @report_build_status.setter
    def report_build_status(self, report_build_status):
        """Sets the report_build_status of this BuildSource.


        :param report_build_status: The report_build_status of this BuildSource.
        :type report_build_status: bool
        """

        self._report_build_status = report_build_status

    @property
    def build_status_config(self):
        """Gets the build_status_config of this BuildSource.


        :return: The build_status_config of this BuildSource.
        :rtype: StartBuildInputBuildStatusConfigOverride
        """
        return self._build_status_config

    @build_status_config.setter
    def build_status_config(self, build_status_config):
        """Sets the build_status_config of this BuildSource.


        :param build_status_config: The build_status_config of this BuildSource.
        :type build_status_config: StartBuildInputBuildStatusConfigOverride
        """

        self._build_status_config = build_status_config

    @property
    def insecure_ssl(self):
        """Gets the insecure_ssl of this BuildSource.


        :return: The insecure_ssl of this BuildSource.
        :rtype: bool
        """
        return self._insecure_ssl

    @insecure_ssl.setter
    def insecure_ssl(self, insecure_ssl):
        """Sets the insecure_ssl of this BuildSource.


        :param insecure_ssl: The insecure_ssl of this BuildSource.
        :type insecure_ssl: bool
        """

        self._insecure_ssl = insecure_ssl

    @property
    def source_identifier(self):
        """Gets the source_identifier of this BuildSource.


        :return: The source_identifier of this BuildSource.
        :rtype: str
        """
        return self._source_identifier

    @source_identifier.setter
    def source_identifier(self, source_identifier):
        """Sets the source_identifier of this BuildSource.


        :param source_identifier: The source_identifier of this BuildSource.
        :type source_identifier: str
        """

        self._source_identifier = source_identifier
