# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.report_packaging_type import ReportPackagingType
from openapi_server import util


class ReportExportConfigS3Destination(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bucket: str=None, bucket_owner: str=None, path: str=None, packaging: ReportPackagingType=None, encryption_key: str=None, encryption_disabled: bool=None):
        """ReportExportConfigS3Destination - a model defined in OpenAPI

        :param bucket: The bucket of this ReportExportConfigS3Destination.
        :param bucket_owner: The bucket_owner of this ReportExportConfigS3Destination.
        :param path: The path of this ReportExportConfigS3Destination.
        :param packaging: The packaging of this ReportExportConfigS3Destination.
        :param encryption_key: The encryption_key of this ReportExportConfigS3Destination.
        :param encryption_disabled: The encryption_disabled of this ReportExportConfigS3Destination.
        """
        self.openapi_types = {
            'bucket': str,
            'bucket_owner': str,
            'path': str,
            'packaging': ReportPackagingType,
            'encryption_key': str,
            'encryption_disabled': bool
        }

        self.attribute_map = {
            'bucket': 'bucket',
            'bucket_owner': 'bucketOwner',
            'path': 'path',
            'packaging': 'packaging',
            'encryption_key': 'encryptionKey',
            'encryption_disabled': 'encryptionDisabled'
        }

        self._bucket = bucket
        self._bucket_owner = bucket_owner
        self._path = path
        self._packaging = packaging
        self._encryption_key = encryption_key
        self._encryption_disabled = encryption_disabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportExportConfigS3Destination':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReportExportConfig_s3Destination of this ReportExportConfigS3Destination.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bucket(self):
        """Gets the bucket of this ReportExportConfigS3Destination.


        :return: The bucket of this ReportExportConfigS3Destination.
        :rtype: str
        """
        return self._bucket

    @bucket.setter
    def bucket(self, bucket):
        """Sets the bucket of this ReportExportConfigS3Destination.


        :param bucket: The bucket of this ReportExportConfigS3Destination.
        :type bucket: str
        """

        self._bucket = bucket

    @property
    def bucket_owner(self):
        """Gets the bucket_owner of this ReportExportConfigS3Destination.


        :return: The bucket_owner of this ReportExportConfigS3Destination.
        :rtype: str
        """
        return self._bucket_owner

    @bucket_owner.setter
    def bucket_owner(self, bucket_owner):
        """Sets the bucket_owner of this ReportExportConfigS3Destination.


        :param bucket_owner: The bucket_owner of this ReportExportConfigS3Destination.
        :type bucket_owner: str
        """

        self._bucket_owner = bucket_owner

    @property
    def path(self):
        """Gets the path of this ReportExportConfigS3Destination.


        :return: The path of this ReportExportConfigS3Destination.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ReportExportConfigS3Destination.


        :param path: The path of this ReportExportConfigS3Destination.
        :type path: str
        """

        self._path = path

    @property
    def packaging(self):
        """Gets the packaging of this ReportExportConfigS3Destination.


        :return: The packaging of this ReportExportConfigS3Destination.
        :rtype: ReportPackagingType
        """
        return self._packaging

    @packaging.setter
    def packaging(self, packaging):
        """Sets the packaging of this ReportExportConfigS3Destination.


        :param packaging: The packaging of this ReportExportConfigS3Destination.
        :type packaging: ReportPackagingType
        """

        self._packaging = packaging

    @property
    def encryption_key(self):
        """Gets the encryption_key of this ReportExportConfigS3Destination.


        :return: The encryption_key of this ReportExportConfigS3Destination.
        :rtype: str
        """
        return self._encryption_key

    @encryption_key.setter
    def encryption_key(self, encryption_key):
        """Sets the encryption_key of this ReportExportConfigS3Destination.


        :param encryption_key: The encryption_key of this ReportExportConfigS3Destination.
        :type encryption_key: str
        """

        self._encryption_key = encryption_key

    @property
    def encryption_disabled(self):
        """Gets the encryption_disabled of this ReportExportConfigS3Destination.


        :return: The encryption_disabled of this ReportExportConfigS3Destination.
        :rtype: bool
        """
        return self._encryption_disabled

    @encryption_disabled.setter
    def encryption_disabled(self, encryption_disabled):
        """Sets the encryption_disabled of this ReportExportConfigS3Destination.


        :param encryption_disabled: The encryption_disabled of this ReportExportConfigS3Destination.
        :type encryption_disabled: bool
        """

        self._encryption_disabled = encryption_disabled
