/**
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BatchDeleteBuildsInput from '../model/BatchDeleteBuildsInput';
import BatchDeleteBuildsOutput from '../model/BatchDeleteBuildsOutput';
import BatchGetBuildBatchesInput from '../model/BatchGetBuildBatchesInput';
import BatchGetBuildBatchesOutput from '../model/BatchGetBuildBatchesOutput';
import BatchGetBuildsInput from '../model/BatchGetBuildsInput';
import BatchGetBuildsOutput from '../model/BatchGetBuildsOutput';
import BatchGetProjectsInput from '../model/BatchGetProjectsInput';
import BatchGetProjectsOutput from '../model/BatchGetProjectsOutput';
import BatchGetReportGroupsInput from '../model/BatchGetReportGroupsInput';
import BatchGetReportGroupsOutput from '../model/BatchGetReportGroupsOutput';
import BatchGetReportsInput from '../model/BatchGetReportsInput';
import BatchGetReportsOutput from '../model/BatchGetReportsOutput';
import CreateProjectInput from '../model/CreateProjectInput';
import CreateProjectOutput from '../model/CreateProjectOutput';
import CreateReportGroupInput from '../model/CreateReportGroupInput';
import CreateReportGroupOutput from '../model/CreateReportGroupOutput';
import CreateWebhookInput from '../model/CreateWebhookInput';
import CreateWebhookOutput from '../model/CreateWebhookOutput';
import DeleteBuildBatchInput from '../model/DeleteBuildBatchInput';
import DeleteBuildBatchOutput from '../model/DeleteBuildBatchOutput';
import DeleteProjectInput from '../model/DeleteProjectInput';
import DeleteReportGroupInput from '../model/DeleteReportGroupInput';
import DeleteReportInput from '../model/DeleteReportInput';
import DeleteResourcePolicyInput from '../model/DeleteResourcePolicyInput';
import DeleteSourceCredentialsInput from '../model/DeleteSourceCredentialsInput';
import DeleteSourceCredentialsOutput from '../model/DeleteSourceCredentialsOutput';
import DeleteWebhookInput from '../model/DeleteWebhookInput';
import DescribeCodeCoveragesInput from '../model/DescribeCodeCoveragesInput';
import DescribeCodeCoveragesOutput from '../model/DescribeCodeCoveragesOutput';
import DescribeTestCasesInput from '../model/DescribeTestCasesInput';
import DescribeTestCasesOutput from '../model/DescribeTestCasesOutput';
import GetReportGroupTrendInput from '../model/GetReportGroupTrendInput';
import GetReportGroupTrendOutput from '../model/GetReportGroupTrendOutput';
import GetResourcePolicyInput from '../model/GetResourcePolicyInput';
import GetResourcePolicyOutput from '../model/GetResourcePolicyOutput';
import ImportSourceCredentialsInput from '../model/ImportSourceCredentialsInput';
import ImportSourceCredentialsOutput from '../model/ImportSourceCredentialsOutput';
import InvalidateProjectCacheInput from '../model/InvalidateProjectCacheInput';
import ListBuildBatchesForProjectInput from '../model/ListBuildBatchesForProjectInput';
import ListBuildBatchesForProjectOutput from '../model/ListBuildBatchesForProjectOutput';
import ListBuildBatchesInput from '../model/ListBuildBatchesInput';
import ListBuildBatchesOutput from '../model/ListBuildBatchesOutput';
import ListBuildsForProjectInput from '../model/ListBuildsForProjectInput';
import ListBuildsForProjectOutput from '../model/ListBuildsForProjectOutput';
import ListBuildsInput from '../model/ListBuildsInput';
import ListBuildsOutput from '../model/ListBuildsOutput';
import ListCuratedEnvironmentImagesOutput from '../model/ListCuratedEnvironmentImagesOutput';
import ListProjectsInput from '../model/ListProjectsInput';
import ListProjectsOutput from '../model/ListProjectsOutput';
import ListReportGroupsInput from '../model/ListReportGroupsInput';
import ListReportGroupsOutput from '../model/ListReportGroupsOutput';
import ListReportsForReportGroupInput from '../model/ListReportsForReportGroupInput';
import ListReportsForReportGroupOutput from '../model/ListReportsForReportGroupOutput';
import ListReportsInput from '../model/ListReportsInput';
import ListReportsOutput from '../model/ListReportsOutput';
import ListSharedProjectsInput from '../model/ListSharedProjectsInput';
import ListSharedProjectsOutput from '../model/ListSharedProjectsOutput';
import ListSharedReportGroupsInput from '../model/ListSharedReportGroupsInput';
import ListSharedReportGroupsOutput from '../model/ListSharedReportGroupsOutput';
import ListSourceCredentialsOutput from '../model/ListSourceCredentialsOutput';
import PutResourcePolicyInput from '../model/PutResourcePolicyInput';
import PutResourcePolicyOutput from '../model/PutResourcePolicyOutput';
import RetryBuildBatchInput from '../model/RetryBuildBatchInput';
import RetryBuildBatchOutput from '../model/RetryBuildBatchOutput';
import RetryBuildInput from '../model/RetryBuildInput';
import RetryBuildOutput from '../model/RetryBuildOutput';
import StartBuildBatchInput from '../model/StartBuildBatchInput';
import StartBuildBatchOutput from '../model/StartBuildBatchOutput';
import StartBuildInput from '../model/StartBuildInput';
import StartBuildOutput from '../model/StartBuildOutput';
import StopBuildBatchInput from '../model/StopBuildBatchInput';
import StopBuildBatchOutput from '../model/StopBuildBatchOutput';
import StopBuildInput from '../model/StopBuildInput';
import StopBuildOutput from '../model/StopBuildOutput';
import UpdateProjectInput from '../model/UpdateProjectInput';
import UpdateProjectOutput from '../model/UpdateProjectOutput';
import UpdateProjectVisibilityInput from '../model/UpdateProjectVisibilityInput';
import UpdateProjectVisibilityOutput from '../model/UpdateProjectVisibilityOutput';
import UpdateReportGroupInput from '../model/UpdateReportGroupInput';
import UpdateReportGroupOutput from '../model/UpdateReportGroupOutput';
import UpdateWebhookInput from '../model/UpdateWebhookInput';
import UpdateWebhookOutput from '../model/UpdateWebhookOutput';

/**
* Default service.
* @module api/DefaultApi
* @version 2016-10-06
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the batchDeleteBuilds operation.
     * @callback module:api/DefaultApi~batchDeleteBuildsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchDeleteBuildsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes one or more builds.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/BatchDeleteBuildsInput} batchDeleteBuildsInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchDeleteBuildsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchDeleteBuildsOutput}
     */
    batchDeleteBuilds(xAmzTarget, batchDeleteBuildsInput, opts, callback) {
      opts = opts || {};
      let postBody = batchDeleteBuildsInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling batchDeleteBuilds");
      }
      // verify the required parameter 'batchDeleteBuildsInput' is set
      if (batchDeleteBuildsInput === undefined || batchDeleteBuildsInput === null) {
        throw new Error("Missing the required parameter 'batchDeleteBuildsInput' when calling batchDeleteBuilds");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchDeleteBuildsOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=CodeBuild_20161006.BatchDeleteBuilds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchGetBuildBatches operation.
     * @callback module:api/DefaultApi~batchGetBuildBatchesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchGetBuildBatchesOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about one or more batch builds.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/BatchGetBuildBatchesInput} batchGetBuildBatchesInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchGetBuildBatchesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchGetBuildBatchesOutput}
     */
    batchGetBuildBatches(xAmzTarget, batchGetBuildBatchesInput, opts, callback) {
      opts = opts || {};
      let postBody = batchGetBuildBatchesInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling batchGetBuildBatches");
      }
      // verify the required parameter 'batchGetBuildBatchesInput' is set
      if (batchGetBuildBatchesInput === undefined || batchGetBuildBatchesInput === null) {
        throw new Error("Missing the required parameter 'batchGetBuildBatchesInput' when calling batchGetBuildBatches");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchGetBuildBatchesOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=CodeBuild_20161006.BatchGetBuildBatches', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchGetBuilds operation.
     * @callback module:api/DefaultApi~batchGetBuildsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchGetBuildsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about one or more builds.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/BatchGetBuildsInput} batchGetBuildsInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchGetBuildsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchGetBuildsOutput}
     */
    batchGetBuilds(xAmzTarget, batchGetBuildsInput, opts, callback) {
      opts = opts || {};
      let postBody = batchGetBuildsInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling batchGetBuilds");
      }
      // verify the required parameter 'batchGetBuildsInput' is set
      if (batchGetBuildsInput === undefined || batchGetBuildsInput === null) {
        throw new Error("Missing the required parameter 'batchGetBuildsInput' when calling batchGetBuilds");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchGetBuildsOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=CodeBuild_20161006.BatchGetBuilds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchGetProjects operation.
     * @callback module:api/DefaultApi~batchGetProjectsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchGetProjectsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about one or more build projects.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/BatchGetProjectsInput} batchGetProjectsInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchGetProjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchGetProjectsOutput}
     */
    batchGetProjects(xAmzTarget, batchGetProjectsInput, opts, callback) {
      opts = opts || {};
      let postBody = batchGetProjectsInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling batchGetProjects");
      }
      // verify the required parameter 'batchGetProjectsInput' is set
      if (batchGetProjectsInput === undefined || batchGetProjectsInput === null) {
        throw new Error("Missing the required parameter 'batchGetProjectsInput' when calling batchGetProjects");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchGetProjectsOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=CodeBuild_20161006.BatchGetProjects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchGetReportGroups operation.
     * @callback module:api/DefaultApi~batchGetReportGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchGetReportGroupsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Returns an array of report groups. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/BatchGetReportGroupsInput} batchGetReportGroupsInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchGetReportGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchGetReportGroupsOutput}
     */
    batchGetReportGroups(xAmzTarget, batchGetReportGroupsInput, opts, callback) {
      opts = opts || {};
      let postBody = batchGetReportGroupsInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling batchGetReportGroups");
      }
      // verify the required parameter 'batchGetReportGroupsInput' is set
      if (batchGetReportGroupsInput === undefined || batchGetReportGroupsInput === null) {
        throw new Error("Missing the required parameter 'batchGetReportGroupsInput' when calling batchGetReportGroups");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchGetReportGroupsOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=CodeBuild_20161006.BatchGetReportGroups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchGetReports operation.
     * @callback module:api/DefaultApi~batchGetReportsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchGetReportsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Returns an array of reports. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/BatchGetReportsInput} batchGetReportsInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchGetReportsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchGetReportsOutput}
     */
    batchGetReports(xAmzTarget, batchGetReportsInput, opts, callback) {
      opts = opts || {};
      let postBody = batchGetReportsInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling batchGetReports");
      }
      // verify the required parameter 'batchGetReportsInput' is set
      if (batchGetReportsInput === undefined || batchGetReportsInput === null) {
        throw new Error("Missing the required parameter 'batchGetReportsInput' when calling batchGetReports");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchGetReportsOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=CodeBuild_20161006.BatchGetReports', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createProject operation.
     * @callback module:api/DefaultApi~createProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateProjectOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a build project.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateProjectInput} createProjectInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateProjectOutput}
     */
    createProject(xAmzTarget, createProjectInput, opts, callback) {
      opts = opts || {};
      let postBody = createProjectInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createProject");
      }
      // verify the required parameter 'createProjectInput' is set
      if (createProjectInput === undefined || createProjectInput === null) {
        throw new Error("Missing the required parameter 'createProjectInput' when calling createProject");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateProjectOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=CodeBuild_20161006.CreateProject', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createReportGroup operation.
     * @callback module:api/DefaultApi~createReportGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateReportGroupOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Creates a report group. A report group contains a collection of reports. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateReportGroupInput} createReportGroupInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createReportGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateReportGroupOutput}
     */
    createReportGroup(xAmzTarget, createReportGroupInput, opts, callback) {
      opts = opts || {};
      let postBody = createReportGroupInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createReportGroup");
      }
      // verify the required parameter 'createReportGroupInput' is set
      if (createReportGroupInput === undefined || createReportGroupInput === null) {
        throw new Error("Missing the required parameter 'createReportGroupInput' when calling createReportGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateReportGroupOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=CodeBuild_20161006.CreateReportGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createWebhook operation.
     * @callback module:api/DefaultApi~createWebhookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateWebhookOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>For an existing CodeBuild build project that has its source code stored in a GitHub or Bitbucket repository, enables CodeBuild to start rebuilding the source code every time a code change is pushed to the repository.</p> <important> <p>If you enable webhooks for an CodeBuild project, and the project is used as a build step in CodePipeline, then two identical builds are created for each commit. One build is triggered through webhooks, and one through CodePipeline. Because billing is on a per-build basis, you are billed for both builds. Therefore, if you are using CodePipeline, we recommend that you disable webhooks in CodeBuild. In the CodeBuild console, clear the Webhook box. For more information, see step 5 in <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/change-project.html#change-project-console\">Change a Build Project's Settings</a>.</p> </important>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateWebhookInput} createWebhookInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateWebhookOutput}
     */
    createWebhook(xAmzTarget, createWebhookInput, opts, callback) {
      opts = opts || {};
      let postBody = createWebhookInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createWebhook");
      }
      // verify the required parameter 'createWebhookInput' is set
      if (createWebhookInput === undefined || createWebhookInput === null) {
        throw new Error("Missing the required parameter 'createWebhookInput' when calling createWebhook");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateWebhookOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=CodeBuild_20161006.CreateWebhook', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBuildBatch operation.
     * @callback module:api/DefaultApi~deleteBuildBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteBuildBatchOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a batch build.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteBuildBatchInput} deleteBuildBatchInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteBuildBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteBuildBatchOutput}
     */
    deleteBuildBatch(xAmzTarget, deleteBuildBatchInput, opts, callback) {
      opts = opts || {};
      let postBody = deleteBuildBatchInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteBuildBatch");
      }
      // verify the required parameter 'deleteBuildBatchInput' is set
      if (deleteBuildBatchInput === undefined || deleteBuildBatchInput === null) {
        throw new Error("Missing the required parameter 'deleteBuildBatchInput' when calling deleteBuildBatch");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteBuildBatchOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=CodeBuild_20161006.DeleteBuildBatch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProject operation.
     * @callback module:api/DefaultApi~deleteProjectCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Deletes a build project. When you delete a project, its builds are not deleted. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteProjectInput} deleteProjectInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteProject(xAmzTarget, deleteProjectInput, opts, callback) {
      opts = opts || {};
      let postBody = deleteProjectInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteProject");
      }
      // verify the required parameter 'deleteProjectInput' is set
      if (deleteProjectInput === undefined || deleteProjectInput === null) {
        throw new Error("Missing the required parameter 'deleteProjectInput' when calling deleteProject");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=CodeBuild_20161006.DeleteProject', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteReport operation.
     * @callback module:api/DefaultApi~deleteReportCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Deletes a report. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteReportInput} deleteReportInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteReport(xAmzTarget, deleteReportInput, opts, callback) {
      opts = opts || {};
      let postBody = deleteReportInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteReport");
      }
      // verify the required parameter 'deleteReportInput' is set
      if (deleteReportInput === undefined || deleteReportInput === null) {
        throw new Error("Missing the required parameter 'deleteReportInput' when calling deleteReport");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=CodeBuild_20161006.DeleteReport', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteReportGroup operation.
     * @callback module:api/DefaultApi~deleteReportGroupCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a report group. Before you delete a report group, you must delete its reports. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteReportGroupInput} deleteReportGroupInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteReportGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteReportGroup(xAmzTarget, deleteReportGroupInput, opts, callback) {
      opts = opts || {};
      let postBody = deleteReportGroupInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteReportGroup");
      }
      // verify the required parameter 'deleteReportGroupInput' is set
      if (deleteReportGroupInput === undefined || deleteReportGroupInput === null) {
        throw new Error("Missing the required parameter 'deleteReportGroupInput' when calling deleteReportGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=CodeBuild_20161006.DeleteReportGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteResourcePolicy operation.
     * @callback module:api/DefaultApi~deleteResourcePolicyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Deletes a resource policy that is identified by its resource ARN. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteResourcePolicyInput} deleteResourcePolicyInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteResourcePolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteResourcePolicy(xAmzTarget, deleteResourcePolicyInput, opts, callback) {
      opts = opts || {};
      let postBody = deleteResourcePolicyInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteResourcePolicy");
      }
      // verify the required parameter 'deleteResourcePolicyInput' is set
      if (deleteResourcePolicyInput === undefined || deleteResourcePolicyInput === null) {
        throw new Error("Missing the required parameter 'deleteResourcePolicyInput' when calling deleteResourcePolicy");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=CodeBuild_20161006.DeleteResourcePolicy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSourceCredentials operation.
     * @callback module:api/DefaultApi~deleteSourceCredentialsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteSourceCredentialsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Deletes a set of GitHub, GitHub Enterprise, or Bitbucket source credentials. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteSourceCredentialsInput} deleteSourceCredentialsInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteSourceCredentialsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteSourceCredentialsOutput}
     */
    deleteSourceCredentials(xAmzTarget, deleteSourceCredentialsInput, opts, callback) {
      opts = opts || {};
      let postBody = deleteSourceCredentialsInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteSourceCredentials");
      }
      // verify the required parameter 'deleteSourceCredentialsInput' is set
      if (deleteSourceCredentialsInput === undefined || deleteSourceCredentialsInput === null) {
        throw new Error("Missing the required parameter 'deleteSourceCredentialsInput' when calling deleteSourceCredentials");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteSourceCredentialsOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=CodeBuild_20161006.DeleteSourceCredentials', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteWebhook operation.
     * @callback module:api/DefaultApi~deleteWebhookCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * For an existing CodeBuild build project that has its source code stored in a GitHub or Bitbucket repository, stops CodeBuild from rebuilding the source code every time a code change is pushed to the repository.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteWebhookInput} deleteWebhookInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteWebhook(xAmzTarget, deleteWebhookInput, opts, callback) {
      opts = opts || {};
      let postBody = deleteWebhookInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteWebhook");
      }
      // verify the required parameter 'deleteWebhookInput' is set
      if (deleteWebhookInput === undefined || deleteWebhookInput === null) {
        throw new Error("Missing the required parameter 'deleteWebhookInput' when calling deleteWebhook");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=CodeBuild_20161006.DeleteWebhook', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeCodeCoverages operation.
     * @callback module:api/DefaultApi~describeCodeCoveragesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeCodeCoveragesOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves one or more code coverage reports.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeCodeCoveragesInput} describeCodeCoveragesInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~describeCodeCoveragesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeCodeCoveragesOutput}
     */
    describeCodeCoverages(xAmzTarget, describeCodeCoveragesInput, opts, callback) {
      opts = opts || {};
      let postBody = describeCodeCoveragesInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeCodeCoverages");
      }
      // verify the required parameter 'describeCodeCoveragesInput' is set
      if (describeCodeCoveragesInput === undefined || describeCodeCoveragesInput === null) {
        throw new Error("Missing the required parameter 'describeCodeCoveragesInput' when calling describeCodeCoverages");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeCodeCoveragesOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=CodeBuild_20161006.DescribeCodeCoverages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeTestCases operation.
     * @callback module:api/DefaultApi~describeTestCasesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeTestCasesOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Returns a list of details about test cases for a report. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeTestCasesInput} describeTestCasesInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~describeTestCasesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeTestCasesOutput}
     */
    describeTestCases(xAmzTarget, describeTestCasesInput, opts, callback) {
      opts = opts || {};
      let postBody = describeTestCasesInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeTestCases");
      }
      // verify the required parameter 'describeTestCasesInput' is set
      if (describeTestCasesInput === undefined || describeTestCasesInput === null) {
        throw new Error("Missing the required parameter 'describeTestCasesInput' when calling describeTestCases");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeTestCasesOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=CodeBuild_20161006.DescribeTestCases', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReportGroupTrend operation.
     * @callback module:api/DefaultApi~getReportGroupTrendCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetReportGroupTrendOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Analyzes and accumulates test report values for the specified test reports.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetReportGroupTrendInput} getReportGroupTrendInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getReportGroupTrendCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetReportGroupTrendOutput}
     */
    getReportGroupTrend(xAmzTarget, getReportGroupTrendInput, opts, callback) {
      opts = opts || {};
      let postBody = getReportGroupTrendInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getReportGroupTrend");
      }
      // verify the required parameter 'getReportGroupTrendInput' is set
      if (getReportGroupTrendInput === undefined || getReportGroupTrendInput === null) {
        throw new Error("Missing the required parameter 'getReportGroupTrendInput' when calling getReportGroupTrend");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetReportGroupTrendOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=CodeBuild_20161006.GetReportGroupTrend', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getResourcePolicy operation.
     * @callback module:api/DefaultApi~getResourcePolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetResourcePolicyOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Gets a resource policy that is identified by its resource ARN. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetResourcePolicyInput} getResourcePolicyInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getResourcePolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetResourcePolicyOutput}
     */
    getResourcePolicy(xAmzTarget, getResourcePolicyInput, opts, callback) {
      opts = opts || {};
      let postBody = getResourcePolicyInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getResourcePolicy");
      }
      // verify the required parameter 'getResourcePolicyInput' is set
      if (getResourcePolicyInput === undefined || getResourcePolicyInput === null) {
        throw new Error("Missing the required parameter 'getResourcePolicyInput' when calling getResourcePolicy");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetResourcePolicyOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=CodeBuild_20161006.GetResourcePolicy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importSourceCredentials operation.
     * @callback module:api/DefaultApi~importSourceCredentialsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImportSourceCredentialsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Imports the source repository credentials for an CodeBuild project that has its source code stored in a GitHub, GitHub Enterprise, or Bitbucket repository. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ImportSourceCredentialsInput} importSourceCredentialsInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~importSourceCredentialsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImportSourceCredentialsOutput}
     */
    importSourceCredentials(xAmzTarget, importSourceCredentialsInput, opts, callback) {
      opts = opts || {};
      let postBody = importSourceCredentialsInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling importSourceCredentials");
      }
      // verify the required parameter 'importSourceCredentialsInput' is set
      if (importSourceCredentialsInput === undefined || importSourceCredentialsInput === null) {
        throw new Error("Missing the required parameter 'importSourceCredentialsInput' when calling importSourceCredentials");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ImportSourceCredentialsOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=CodeBuild_20161006.ImportSourceCredentials', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the invalidateProjectCache operation.
     * @callback module:api/DefaultApi~invalidateProjectCacheCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resets the cache for a project.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/InvalidateProjectCacheInput} invalidateProjectCacheInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~invalidateProjectCacheCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    invalidateProjectCache(xAmzTarget, invalidateProjectCacheInput, opts, callback) {
      opts = opts || {};
      let postBody = invalidateProjectCacheInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling invalidateProjectCache");
      }
      // verify the required parameter 'invalidateProjectCacheInput' is set
      if (invalidateProjectCacheInput === undefined || invalidateProjectCacheInput === null) {
        throw new Error("Missing the required parameter 'invalidateProjectCacheInput' when calling invalidateProjectCache");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=CodeBuild_20161006.InvalidateProjectCache', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listBuildBatches operation.
     * @callback module:api/DefaultApi~listBuildBatchesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListBuildBatchesOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the identifiers of your build batches in the current region.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListBuildBatchesInput} listBuildBatchesInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listBuildBatchesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListBuildBatchesOutput}
     */
    listBuildBatches(xAmzTarget, listBuildBatchesInput, opts, callback) {
      opts = opts || {};
      let postBody = listBuildBatchesInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listBuildBatches");
      }
      // verify the required parameter 'listBuildBatchesInput' is set
      if (listBuildBatchesInput === undefined || listBuildBatchesInput === null) {
        throw new Error("Missing the required parameter 'listBuildBatchesInput' when calling listBuildBatches");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListBuildBatchesOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=CodeBuild_20161006.ListBuildBatches', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listBuildBatchesForProject operation.
     * @callback module:api/DefaultApi~listBuildBatchesForProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListBuildBatchesForProjectOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the identifiers of the build batches for a specific project.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListBuildBatchesForProjectInput} listBuildBatchesForProjectInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listBuildBatchesForProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListBuildBatchesForProjectOutput}
     */
    listBuildBatchesForProject(xAmzTarget, listBuildBatchesForProjectInput, opts, callback) {
      opts = opts || {};
      let postBody = listBuildBatchesForProjectInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listBuildBatchesForProject");
      }
      // verify the required parameter 'listBuildBatchesForProjectInput' is set
      if (listBuildBatchesForProjectInput === undefined || listBuildBatchesForProjectInput === null) {
        throw new Error("Missing the required parameter 'listBuildBatchesForProjectInput' when calling listBuildBatchesForProject");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListBuildBatchesForProjectOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=CodeBuild_20161006.ListBuildBatchesForProject', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listBuilds operation.
     * @callback module:api/DefaultApi~listBuildsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListBuildsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of build IDs, with each build ID representing a single build.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListBuildsInput} listBuildsInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listBuildsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListBuildsOutput}
     */
    listBuilds(xAmzTarget, listBuildsInput, opts, callback) {
      opts = opts || {};
      let postBody = listBuildsInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listBuilds");
      }
      // verify the required parameter 'listBuildsInput' is set
      if (listBuildsInput === undefined || listBuildsInput === null) {
        throw new Error("Missing the required parameter 'listBuildsInput' when calling listBuilds");
      }

      let pathParams = {
      };
      let queryParams = {
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListBuildsOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=CodeBuild_20161006.ListBuilds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listBuildsForProject operation.
     * @callback module:api/DefaultApi~listBuildsForProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListBuildsForProjectOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of build identifiers for the specified build project, with each build identifier representing a single build.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListBuildsForProjectInput} listBuildsForProjectInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listBuildsForProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListBuildsForProjectOutput}
     */
    listBuildsForProject(xAmzTarget, listBuildsForProjectInput, opts, callback) {
      opts = opts || {};
      let postBody = listBuildsForProjectInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listBuildsForProject");
      }
      // verify the required parameter 'listBuildsForProjectInput' is set
      if (listBuildsForProjectInput === undefined || listBuildsForProjectInput === null) {
        throw new Error("Missing the required parameter 'listBuildsForProjectInput' when calling listBuildsForProject");
      }

      let pathParams = {
      };
      let queryParams = {
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListBuildsForProjectOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=CodeBuild_20161006.ListBuildsForProject', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCuratedEnvironmentImages operation.
     * @callback module:api/DefaultApi~listCuratedEnvironmentImagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListCuratedEnvironmentImagesOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about Docker images that are managed by CodeBuild.
     * @param {module:model/String} xAmzTarget 
     * @param {Object.<String, Object>} body 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listCuratedEnvironmentImagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListCuratedEnvironmentImagesOutput}
     */
    listCuratedEnvironmentImages(xAmzTarget, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listCuratedEnvironmentImages");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling listCuratedEnvironmentImages");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListCuratedEnvironmentImagesOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=CodeBuild_20161006.ListCuratedEnvironmentImages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listProjects operation.
     * @callback module:api/DefaultApi~listProjectsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListProjectsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of build project names, with each build project name representing a single build project.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListProjectsInput} listProjectsInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listProjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListProjectsOutput}
     */
    listProjects(xAmzTarget, listProjectsInput, opts, callback) {
      opts = opts || {};
      let postBody = listProjectsInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listProjects");
      }
      // verify the required parameter 'listProjectsInput' is set
      if (listProjectsInput === undefined || listProjectsInput === null) {
        throw new Error("Missing the required parameter 'listProjectsInput' when calling listProjects");
      }

      let pathParams = {
      };
      let queryParams = {
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListProjectsOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=CodeBuild_20161006.ListProjects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listReportGroups operation.
     * @callback module:api/DefaultApi~listReportGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListReportGroupsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Gets a list ARNs for the report groups in the current Amazon Web Services account. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListReportGroupsInput} listReportGroupsInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listReportGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListReportGroupsOutput}
     */
    listReportGroups(xAmzTarget, listReportGroupsInput, opts, callback) {
      opts = opts || {};
      let postBody = listReportGroupsInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listReportGroups");
      }
      // verify the required parameter 'listReportGroupsInput' is set
      if (listReportGroupsInput === undefined || listReportGroupsInput === null) {
        throw new Error("Missing the required parameter 'listReportGroupsInput' when calling listReportGroups");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListReportGroupsOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=CodeBuild_20161006.ListReportGroups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listReports operation.
     * @callback module:api/DefaultApi~listReportsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListReportsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Returns a list of ARNs for the reports in the current Amazon Web Services account. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListReportsInput} listReportsInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listReportsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListReportsOutput}
     */
    listReports(xAmzTarget, listReportsInput, opts, callback) {
      opts = opts || {};
      let postBody = listReportsInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listReports");
      }
      // verify the required parameter 'listReportsInput' is set
      if (listReportsInput === undefined || listReportsInput === null) {
        throw new Error("Missing the required parameter 'listReportsInput' when calling listReports");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListReportsOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=CodeBuild_20161006.ListReports', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listReportsForReportGroup operation.
     * @callback module:api/DefaultApi~listReportsForReportGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListReportsForReportGroupOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Returns a list of ARNs for the reports that belong to a <code>ReportGroup</code>. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListReportsForReportGroupInput} listReportsForReportGroupInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listReportsForReportGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListReportsForReportGroupOutput}
     */
    listReportsForReportGroup(xAmzTarget, listReportsForReportGroupInput, opts, callback) {
      opts = opts || {};
      let postBody = listReportsForReportGroupInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listReportsForReportGroup");
      }
      // verify the required parameter 'listReportsForReportGroupInput' is set
      if (listReportsForReportGroupInput === undefined || listReportsForReportGroupInput === null) {
        throw new Error("Missing the required parameter 'listReportsForReportGroupInput' when calling listReportsForReportGroup");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListReportsForReportGroupOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=CodeBuild_20161006.ListReportsForReportGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSharedProjects operation.
     * @callback module:api/DefaultApi~listSharedProjectsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSharedProjectsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Gets a list of projects that are shared with other Amazon Web Services accounts or users. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListSharedProjectsInput} listSharedProjectsInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listSharedProjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSharedProjectsOutput}
     */
    listSharedProjects(xAmzTarget, listSharedProjectsInput, opts, callback) {
      opts = opts || {};
      let postBody = listSharedProjectsInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listSharedProjects");
      }
      // verify the required parameter 'listSharedProjectsInput' is set
      if (listSharedProjectsInput === undefined || listSharedProjectsInput === null) {
        throw new Error("Missing the required parameter 'listSharedProjectsInput' when calling listSharedProjects");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListSharedProjectsOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=CodeBuild_20161006.ListSharedProjects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSharedReportGroups operation.
     * @callback module:api/DefaultApi~listSharedReportGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSharedReportGroupsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Gets a list of report groups that are shared with other Amazon Web Services accounts or users. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListSharedReportGroupsInput} listSharedReportGroupsInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listSharedReportGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSharedReportGroupsOutput}
     */
    listSharedReportGroups(xAmzTarget, listSharedReportGroupsInput, opts, callback) {
      opts = opts || {};
      let postBody = listSharedReportGroupsInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listSharedReportGroups");
      }
      // verify the required parameter 'listSharedReportGroupsInput' is set
      if (listSharedReportGroupsInput === undefined || listSharedReportGroupsInput === null) {
        throw new Error("Missing the required parameter 'listSharedReportGroupsInput' when calling listSharedReportGroups");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListSharedReportGroupsOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=CodeBuild_20161006.ListSharedReportGroups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSourceCredentials operation.
     * @callback module:api/DefaultApi~listSourceCredentialsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSourceCredentialsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Returns a list of <code>SourceCredentialsInfo</code> objects. 
     * @param {module:model/String} xAmzTarget 
     * @param {Object.<String, Object>} body 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listSourceCredentialsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSourceCredentialsOutput}
     */
    listSourceCredentials(xAmzTarget, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listSourceCredentials");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling listSourceCredentials");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListSourceCredentialsOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=CodeBuild_20161006.ListSourceCredentials', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putResourcePolicy operation.
     * @callback module:api/DefaultApi~putResourcePolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PutResourcePolicyOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Stores a resource policy for the ARN of a <code>Project</code> or <code>ReportGroup</code> object. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/PutResourcePolicyInput} putResourcePolicyInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putResourcePolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PutResourcePolicyOutput}
     */
    putResourcePolicy(xAmzTarget, putResourcePolicyInput, opts, callback) {
      opts = opts || {};
      let postBody = putResourcePolicyInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling putResourcePolicy");
      }
      // verify the required parameter 'putResourcePolicyInput' is set
      if (putResourcePolicyInput === undefined || putResourcePolicyInput === null) {
        throw new Error("Missing the required parameter 'putResourcePolicyInput' when calling putResourcePolicy");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PutResourcePolicyOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=CodeBuild_20161006.PutResourcePolicy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retryBuild operation.
     * @callback module:api/DefaultApi~retryBuildCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RetryBuildOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restarts a build.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/RetryBuildInput} retryBuildInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~retryBuildCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RetryBuildOutput}
     */
    retryBuild(xAmzTarget, retryBuildInput, opts, callback) {
      opts = opts || {};
      let postBody = retryBuildInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling retryBuild");
      }
      // verify the required parameter 'retryBuildInput' is set
      if (retryBuildInput === undefined || retryBuildInput === null) {
        throw new Error("Missing the required parameter 'retryBuildInput' when calling retryBuild");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RetryBuildOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=CodeBuild_20161006.RetryBuild', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retryBuildBatch operation.
     * @callback module:api/DefaultApi~retryBuildBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RetryBuildBatchOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restarts a failed batch build. Only batch builds that have failed can be retried.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/RetryBuildBatchInput} retryBuildBatchInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~retryBuildBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RetryBuildBatchOutput}
     */
    retryBuildBatch(xAmzTarget, retryBuildBatchInput, opts, callback) {
      opts = opts || {};
      let postBody = retryBuildBatchInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling retryBuildBatch");
      }
      // verify the required parameter 'retryBuildBatchInput' is set
      if (retryBuildBatchInput === undefined || retryBuildBatchInput === null) {
        throw new Error("Missing the required parameter 'retryBuildBatchInput' when calling retryBuildBatch");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RetryBuildBatchOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=CodeBuild_20161006.RetryBuildBatch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startBuild operation.
     * @callback module:api/DefaultApi~startBuildCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartBuildOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts running a build.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StartBuildInput} startBuildInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startBuildCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartBuildOutput}
     */
    startBuild(xAmzTarget, startBuildInput, opts, callback) {
      opts = opts || {};
      let postBody = startBuildInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling startBuild");
      }
      // verify the required parameter 'startBuildInput' is set
      if (startBuildInput === undefined || startBuildInput === null) {
        throw new Error("Missing the required parameter 'startBuildInput' when calling startBuild");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartBuildOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=CodeBuild_20161006.StartBuild', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startBuildBatch operation.
     * @callback module:api/DefaultApi~startBuildBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartBuildBatchOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts a batch build for a project.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StartBuildBatchInput} startBuildBatchInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startBuildBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartBuildBatchOutput}
     */
    startBuildBatch(xAmzTarget, startBuildBatchInput, opts, callback) {
      opts = opts || {};
      let postBody = startBuildBatchInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling startBuildBatch");
      }
      // verify the required parameter 'startBuildBatchInput' is set
      if (startBuildBatchInput === undefined || startBuildBatchInput === null) {
        throw new Error("Missing the required parameter 'startBuildBatchInput' when calling startBuildBatch");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartBuildBatchOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=CodeBuild_20161006.StartBuildBatch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopBuild operation.
     * @callback module:api/DefaultApi~stopBuildCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StopBuildOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attempts to stop running a build.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StopBuildInput} stopBuildInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~stopBuildCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StopBuildOutput}
     */
    stopBuild(xAmzTarget, stopBuildInput, opts, callback) {
      opts = opts || {};
      let postBody = stopBuildInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling stopBuild");
      }
      // verify the required parameter 'stopBuildInput' is set
      if (stopBuildInput === undefined || stopBuildInput === null) {
        throw new Error("Missing the required parameter 'stopBuildInput' when calling stopBuild");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StopBuildOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=CodeBuild_20161006.StopBuild', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopBuildBatch operation.
     * @callback module:api/DefaultApi~stopBuildBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StopBuildBatchOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stops a running batch build.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StopBuildBatchInput} stopBuildBatchInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~stopBuildBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StopBuildBatchOutput}
     */
    stopBuildBatch(xAmzTarget, stopBuildBatchInput, opts, callback) {
      opts = opts || {};
      let postBody = stopBuildBatchInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling stopBuildBatch");
      }
      // verify the required parameter 'stopBuildBatchInput' is set
      if (stopBuildBatchInput === undefined || stopBuildBatchInput === null) {
        throw new Error("Missing the required parameter 'stopBuildBatchInput' when calling stopBuildBatch");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StopBuildBatchOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=CodeBuild_20161006.StopBuildBatch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProject operation.
     * @callback module:api/DefaultApi~updateProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateProjectOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Changes the settings of a build project.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateProjectInput} updateProjectInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateProjectOutput}
     */
    updateProject(xAmzTarget, updateProjectInput, opts, callback) {
      opts = opts || {};
      let postBody = updateProjectInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateProject");
      }
      // verify the required parameter 'updateProjectInput' is set
      if (updateProjectInput === undefined || updateProjectInput === null) {
        throw new Error("Missing the required parameter 'updateProjectInput' when calling updateProject");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateProjectOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=CodeBuild_20161006.UpdateProject', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProjectVisibility operation.
     * @callback module:api/DefaultApi~updateProjectVisibilityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateProjectVisibilityOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Changes the public visibility for a project. The project's build results, logs, and artifacts are available to the general public. For more information, see <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/public-builds.html\">Public build projects</a> in the <i>CodeBuild User Guide</i>.</p> <important> <p>The following should be kept in mind when making your projects public:</p> <ul> <li> <p>All of a project's build results, logs, and artifacts, including builds that were run when the project was private, are available to the general public.</p> </li> <li> <p>All build logs and artifacts are available to the public. Environment variables, source code, and other sensitive information may have been output to the build logs and artifacts. You must be careful about what information is output to the build logs. Some best practice are:</p> <ul> <li> <p>Do not store sensitive values, especially Amazon Web Services access key IDs and secret access keys, in environment variables. We recommend that you use an Amazon EC2 Systems Manager Parameter Store or Secrets Manager to store sensitive values.</p> </li> <li> <p>Follow <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/webhooks.html#webhook-best-practices\">Best practices for using webhooks</a> in the <i>CodeBuild User Guide</i> to limit which entities can trigger a build, and do not store the buildspec in the project itself, to ensure that your webhooks are as secure as possible.</p> </li> </ul> </li> <li> <p>A malicious user can use public builds to distribute malicious artifacts. We recommend that you review all pull requests to verify that the pull request is a legitimate change. We also recommend that you validate any artifacts with their checksums to make sure that the correct artifacts are being downloaded.</p> </li> </ul> </important>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateProjectVisibilityInput} updateProjectVisibilityInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateProjectVisibilityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateProjectVisibilityOutput}
     */
    updateProjectVisibility(xAmzTarget, updateProjectVisibilityInput, opts, callback) {
      opts = opts || {};
      let postBody = updateProjectVisibilityInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateProjectVisibility");
      }
      // verify the required parameter 'updateProjectVisibilityInput' is set
      if (updateProjectVisibilityInput === undefined || updateProjectVisibilityInput === null) {
        throw new Error("Missing the required parameter 'updateProjectVisibilityInput' when calling updateProjectVisibility");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateProjectVisibilityOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=CodeBuild_20161006.UpdateProjectVisibility', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateReportGroup operation.
     * @callback module:api/DefaultApi~updateReportGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateReportGroupOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Updates a report group. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateReportGroupInput} updateReportGroupInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateReportGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateReportGroupOutput}
     */
    updateReportGroup(xAmzTarget, updateReportGroupInput, opts, callback) {
      opts = opts || {};
      let postBody = updateReportGroupInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateReportGroup");
      }
      // verify the required parameter 'updateReportGroupInput' is set
      if (updateReportGroupInput === undefined || updateReportGroupInput === null) {
        throw new Error("Missing the required parameter 'updateReportGroupInput' when calling updateReportGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateReportGroupOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=CodeBuild_20161006.UpdateReportGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateWebhook operation.
     * @callback module:api/DefaultApi~updateWebhookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateWebhookOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p> Updates the webhook associated with an CodeBuild build project. </p> <note> <p> If you use Bitbucket for your repository, <code>rotateSecret</code> is ignored. </p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateWebhookInput} updateWebhookInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateWebhookOutput}
     */
    updateWebhook(xAmzTarget, updateWebhookInput, opts, callback) {
      opts = opts || {};
      let postBody = updateWebhookInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateWebhook");
      }
      // verify the required parameter 'updateWebhookInput' is set
      if (updateWebhookInput === undefined || updateWebhookInput === null) {
        throw new Error("Missing the required parameter 'updateWebhookInput' when calling updateWebhook");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateWebhookOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=CodeBuild_20161006.UpdateWebhook', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
