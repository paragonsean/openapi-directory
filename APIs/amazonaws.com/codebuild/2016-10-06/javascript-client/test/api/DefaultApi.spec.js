/**
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsCodeBuild);
  }
}(this, function(expect, AwsCodeBuild) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsCodeBuild.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('batchDeleteBuilds', function() {
      it('should call batchDeleteBuilds successfully', function(done) {
        //uncomment below and update the code to test batchDeleteBuilds
        //instance.batchDeleteBuilds(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('batchGetBuildBatches', function() {
      it('should call batchGetBuildBatches successfully', function(done) {
        //uncomment below and update the code to test batchGetBuildBatches
        //instance.batchGetBuildBatches(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('batchGetBuilds', function() {
      it('should call batchGetBuilds successfully', function(done) {
        //uncomment below and update the code to test batchGetBuilds
        //instance.batchGetBuilds(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('batchGetProjects', function() {
      it('should call batchGetProjects successfully', function(done) {
        //uncomment below and update the code to test batchGetProjects
        //instance.batchGetProjects(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('batchGetReportGroups', function() {
      it('should call batchGetReportGroups successfully', function(done) {
        //uncomment below and update the code to test batchGetReportGroups
        //instance.batchGetReportGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('batchGetReports', function() {
      it('should call batchGetReports successfully', function(done) {
        //uncomment below and update the code to test batchGetReports
        //instance.batchGetReports(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createProject', function() {
      it('should call createProject successfully', function(done) {
        //uncomment below and update the code to test createProject
        //instance.createProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createReportGroup', function() {
      it('should call createReportGroup successfully', function(done) {
        //uncomment below and update the code to test createReportGroup
        //instance.createReportGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createWebhook', function() {
      it('should call createWebhook successfully', function(done) {
        //uncomment below and update the code to test createWebhook
        //instance.createWebhook(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteBuildBatch', function() {
      it('should call deleteBuildBatch successfully', function(done) {
        //uncomment below and update the code to test deleteBuildBatch
        //instance.deleteBuildBatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteProject', function() {
      it('should call deleteProject successfully', function(done) {
        //uncomment below and update the code to test deleteProject
        //instance.deleteProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteReport', function() {
      it('should call deleteReport successfully', function(done) {
        //uncomment below and update the code to test deleteReport
        //instance.deleteReport(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteReportGroup', function() {
      it('should call deleteReportGroup successfully', function(done) {
        //uncomment below and update the code to test deleteReportGroup
        //instance.deleteReportGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteResourcePolicy', function() {
      it('should call deleteResourcePolicy successfully', function(done) {
        //uncomment below and update the code to test deleteResourcePolicy
        //instance.deleteResourcePolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteSourceCredentials', function() {
      it('should call deleteSourceCredentials successfully', function(done) {
        //uncomment below and update the code to test deleteSourceCredentials
        //instance.deleteSourceCredentials(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteWebhook', function() {
      it('should call deleteWebhook successfully', function(done) {
        //uncomment below and update the code to test deleteWebhook
        //instance.deleteWebhook(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeCodeCoverages', function() {
      it('should call describeCodeCoverages successfully', function(done) {
        //uncomment below and update the code to test describeCodeCoverages
        //instance.describeCodeCoverages(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeTestCases', function() {
      it('should call describeTestCases successfully', function(done) {
        //uncomment below and update the code to test describeTestCases
        //instance.describeTestCases(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getReportGroupTrend', function() {
      it('should call getReportGroupTrend successfully', function(done) {
        //uncomment below and update the code to test getReportGroupTrend
        //instance.getReportGroupTrend(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getResourcePolicy', function() {
      it('should call getResourcePolicy successfully', function(done) {
        //uncomment below and update the code to test getResourcePolicy
        //instance.getResourcePolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('importSourceCredentials', function() {
      it('should call importSourceCredentials successfully', function(done) {
        //uncomment below and update the code to test importSourceCredentials
        //instance.importSourceCredentials(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('invalidateProjectCache', function() {
      it('should call invalidateProjectCache successfully', function(done) {
        //uncomment below and update the code to test invalidateProjectCache
        //instance.invalidateProjectCache(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listBuildBatches', function() {
      it('should call listBuildBatches successfully', function(done) {
        //uncomment below and update the code to test listBuildBatches
        //instance.listBuildBatches(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listBuildBatchesForProject', function() {
      it('should call listBuildBatchesForProject successfully', function(done) {
        //uncomment below and update the code to test listBuildBatchesForProject
        //instance.listBuildBatchesForProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listBuilds', function() {
      it('should call listBuilds successfully', function(done) {
        //uncomment below and update the code to test listBuilds
        //instance.listBuilds(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listBuildsForProject', function() {
      it('should call listBuildsForProject successfully', function(done) {
        //uncomment below and update the code to test listBuildsForProject
        //instance.listBuildsForProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCuratedEnvironmentImages', function() {
      it('should call listCuratedEnvironmentImages successfully', function(done) {
        //uncomment below and update the code to test listCuratedEnvironmentImages
        //instance.listCuratedEnvironmentImages(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listProjects', function() {
      it('should call listProjects successfully', function(done) {
        //uncomment below and update the code to test listProjects
        //instance.listProjects(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listReportGroups', function() {
      it('should call listReportGroups successfully', function(done) {
        //uncomment below and update the code to test listReportGroups
        //instance.listReportGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listReports', function() {
      it('should call listReports successfully', function(done) {
        //uncomment below and update the code to test listReports
        //instance.listReports(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listReportsForReportGroup', function() {
      it('should call listReportsForReportGroup successfully', function(done) {
        //uncomment below and update the code to test listReportsForReportGroup
        //instance.listReportsForReportGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listSharedProjects', function() {
      it('should call listSharedProjects successfully', function(done) {
        //uncomment below and update the code to test listSharedProjects
        //instance.listSharedProjects(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listSharedReportGroups', function() {
      it('should call listSharedReportGroups successfully', function(done) {
        //uncomment below and update the code to test listSharedReportGroups
        //instance.listSharedReportGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listSourceCredentials', function() {
      it('should call listSourceCredentials successfully', function(done) {
        //uncomment below and update the code to test listSourceCredentials
        //instance.listSourceCredentials(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putResourcePolicy', function() {
      it('should call putResourcePolicy successfully', function(done) {
        //uncomment below and update the code to test putResourcePolicy
        //instance.putResourcePolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('retryBuild', function() {
      it('should call retryBuild successfully', function(done) {
        //uncomment below and update the code to test retryBuild
        //instance.retryBuild(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('retryBuildBatch', function() {
      it('should call retryBuildBatch successfully', function(done) {
        //uncomment below and update the code to test retryBuildBatch
        //instance.retryBuildBatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startBuild', function() {
      it('should call startBuild successfully', function(done) {
        //uncomment below and update the code to test startBuild
        //instance.startBuild(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startBuildBatch', function() {
      it('should call startBuildBatch successfully', function(done) {
        //uncomment below and update the code to test startBuildBatch
        //instance.startBuildBatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopBuild', function() {
      it('should call stopBuild successfully', function(done) {
        //uncomment below and update the code to test stopBuild
        //instance.stopBuild(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopBuildBatch', function() {
      it('should call stopBuildBatch successfully', function(done) {
        //uncomment below and update the code to test stopBuildBatch
        //instance.stopBuildBatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateProject', function() {
      it('should call updateProject successfully', function(done) {
        //uncomment below and update the code to test updateProject
        //instance.updateProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateProjectVisibility', function() {
      it('should call updateProjectVisibility successfully', function(done) {
        //uncomment below and update the code to test updateProjectVisibility
        //instance.updateProjectVisibility(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateReportGroup', function() {
      it('should call updateReportGroup successfully', function(done) {
        //uncomment below and update the code to test updateReportGroup
        //instance.updateReportGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateWebhook', function() {
      it('should call updateWebhook successfully', function(done) {
        //uncomment below and update the code to test updateWebhook
        //instance.updateWebhook(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
