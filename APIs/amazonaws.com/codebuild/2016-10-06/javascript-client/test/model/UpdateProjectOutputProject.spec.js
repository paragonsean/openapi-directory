/**
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsCodeBuild);
  }
}(this, function(expect, AwsCodeBuild) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsCodeBuild.UpdateProjectOutputProject();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('UpdateProjectOutputProject', function() {
    it('should create an instance of UpdateProjectOutputProject', function() {
      // uncomment below and update the code to test UpdateProjectOutputProject
      //var instance = new AwsCodeBuild.UpdateProjectOutputProject();
      //expect(instance).to.be.a(AwsCodeBuild.UpdateProjectOutputProject);
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new AwsCodeBuild.UpdateProjectOutputProject();
      //expect(instance).to.be();
    });

    it('should have the property arn (base name: "arn")', function() {
      // uncomment below and update the code to test the property arn
      //var instance = new AwsCodeBuild.UpdateProjectOutputProject();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new AwsCodeBuild.UpdateProjectOutputProject();
      //expect(instance).to.be();
    });

    it('should have the property source (base name: "source")', function() {
      // uncomment below and update the code to test the property source
      //var instance = new AwsCodeBuild.UpdateProjectOutputProject();
      //expect(instance).to.be();
    });

    it('should have the property secondarySources (base name: "secondarySources")', function() {
      // uncomment below and update the code to test the property secondarySources
      //var instance = new AwsCodeBuild.UpdateProjectOutputProject();
      //expect(instance).to.be();
    });

    it('should have the property sourceVersion (base name: "sourceVersion")', function() {
      // uncomment below and update the code to test the property sourceVersion
      //var instance = new AwsCodeBuild.UpdateProjectOutputProject();
      //expect(instance).to.be();
    });

    it('should have the property secondarySourceVersions (base name: "secondarySourceVersions")', function() {
      // uncomment below and update the code to test the property secondarySourceVersions
      //var instance = new AwsCodeBuild.UpdateProjectOutputProject();
      //expect(instance).to.be();
    });

    it('should have the property artifacts (base name: "artifacts")', function() {
      // uncomment below and update the code to test the property artifacts
      //var instance = new AwsCodeBuild.UpdateProjectOutputProject();
      //expect(instance).to.be();
    });

    it('should have the property secondaryArtifacts (base name: "secondaryArtifacts")', function() {
      // uncomment below and update the code to test the property secondaryArtifacts
      //var instance = new AwsCodeBuild.UpdateProjectOutputProject();
      //expect(instance).to.be();
    });

    it('should have the property cache (base name: "cache")', function() {
      // uncomment below and update the code to test the property cache
      //var instance = new AwsCodeBuild.UpdateProjectOutputProject();
      //expect(instance).to.be();
    });

    it('should have the property environment (base name: "environment")', function() {
      // uncomment below and update the code to test the property environment
      //var instance = new AwsCodeBuild.UpdateProjectOutputProject();
      //expect(instance).to.be();
    });

    it('should have the property serviceRole (base name: "serviceRole")', function() {
      // uncomment below and update the code to test the property serviceRole
      //var instance = new AwsCodeBuild.UpdateProjectOutputProject();
      //expect(instance).to.be();
    });

    it('should have the property timeoutInMinutes (base name: "timeoutInMinutes")', function() {
      // uncomment below and update the code to test the property timeoutInMinutes
      //var instance = new AwsCodeBuild.UpdateProjectOutputProject();
      //expect(instance).to.be();
    });

    it('should have the property queuedTimeoutInMinutes (base name: "queuedTimeoutInMinutes")', function() {
      // uncomment below and update the code to test the property queuedTimeoutInMinutes
      //var instance = new AwsCodeBuild.UpdateProjectOutputProject();
      //expect(instance).to.be();
    });

    it('should have the property encryptionKey (base name: "encryptionKey")', function() {
      // uncomment below and update the code to test the property encryptionKey
      //var instance = new AwsCodeBuild.UpdateProjectOutputProject();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instance = new AwsCodeBuild.UpdateProjectOutputProject();
      //expect(instance).to.be();
    });

    it('should have the property created (base name: "created")', function() {
      // uncomment below and update the code to test the property created
      //var instance = new AwsCodeBuild.UpdateProjectOutputProject();
      //expect(instance).to.be();
    });

    it('should have the property lastModified (base name: "lastModified")', function() {
      // uncomment below and update the code to test the property lastModified
      //var instance = new AwsCodeBuild.UpdateProjectOutputProject();
      //expect(instance).to.be();
    });

    it('should have the property webhook (base name: "webhook")', function() {
      // uncomment below and update the code to test the property webhook
      //var instance = new AwsCodeBuild.UpdateProjectOutputProject();
      //expect(instance).to.be();
    });

    it('should have the property vpcConfig (base name: "vpcConfig")', function() {
      // uncomment below and update the code to test the property vpcConfig
      //var instance = new AwsCodeBuild.UpdateProjectOutputProject();
      //expect(instance).to.be();
    });

    it('should have the property badge (base name: "badge")', function() {
      // uncomment below and update the code to test the property badge
      //var instance = new AwsCodeBuild.UpdateProjectOutputProject();
      //expect(instance).to.be();
    });

    it('should have the property logsConfig (base name: "logsConfig")', function() {
      // uncomment below and update the code to test the property logsConfig
      //var instance = new AwsCodeBuild.UpdateProjectOutputProject();
      //expect(instance).to.be();
    });

    it('should have the property fileSystemLocations (base name: "fileSystemLocations")', function() {
      // uncomment below and update the code to test the property fileSystemLocations
      //var instance = new AwsCodeBuild.UpdateProjectOutputProject();
      //expect(instance).to.be();
    });

    it('should have the property buildBatchConfig (base name: "buildBatchConfig")', function() {
      // uncomment below and update the code to test the property buildBatchConfig
      //var instance = new AwsCodeBuild.UpdateProjectOutputProject();
      //expect(instance).to.be();
    });

    it('should have the property concurrentBuildLimit (base name: "concurrentBuildLimit")', function() {
      // uncomment below and update the code to test the property concurrentBuildLimit
      //var instance = new AwsCodeBuild.UpdateProjectOutputProject();
      //expect(instance).to.be();
    });

    it('should have the property projectVisibility (base name: "projectVisibility")', function() {
      // uncomment below and update the code to test the property projectVisibility
      //var instance = new AwsCodeBuild.UpdateProjectOutputProject();
      //expect(instance).to.be();
    });

    it('should have the property publicProjectAlias (base name: "publicProjectAlias")', function() {
      // uncomment below and update the code to test the property publicProjectAlias
      //var instance = new AwsCodeBuild.UpdateProjectOutputProject();
      //expect(instance).to.be();
    });

    it('should have the property resourceAccessRole (base name: "resourceAccessRole")', function() {
      // uncomment below and update the code to test the property resourceAccessRole
      //var instance = new AwsCodeBuild.UpdateProjectOutputProject();
      //expect(instance).to.be();
    });

  });

}));
