/**
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComputeType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComputeType::OAIComputeType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComputeType::OAIComputeType() {
    this->initializeModel();
}

OAIComputeType::~OAIComputeType() {}

void OAIComputeType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIComputeType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIComputeType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("BUILD_GENERAL1_SMALL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIComputeType::SMALL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BUILD_GENERAL1_MEDIUM", Qt::CaseInsensitive) == 0) {
        m_value = eOAIComputeType::MEDIUM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BUILD_GENERAL1_LARGE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIComputeType::LARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BUILD_GENERAL1_2XLARGE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIComputeType::_2XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIComputeType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIComputeType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIComputeType::SMALL:
            val = "BUILD_GENERAL1_SMALL";
            break;
        case eOAIComputeType::MEDIUM:
            val = "BUILD_GENERAL1_MEDIUM";
            break;
        case eOAIComputeType::LARGE:
            val = "BUILD_GENERAL1_LARGE";
            break;
        case eOAIComputeType::_2XLARGE:
            val = "BUILD_GENERAL1_2XLARGE";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIComputeType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIComputeType::eOAIComputeType OAIComputeType::getValue() const {
    return m_value;
}

void OAIComputeType::setValue(const OAIComputeType::eOAIComputeType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIComputeType::isSet() const {
    
    return m_value_isSet;
}

bool OAIComputeType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
