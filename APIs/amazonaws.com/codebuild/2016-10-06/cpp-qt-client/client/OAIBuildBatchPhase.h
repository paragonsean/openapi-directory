/**
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBuildBatchPhase.h
 *
 * Contains information about a stage for a batch build.
 */

#ifndef OAIBuildBatchPhase_H
#define OAIBuildBatchPhase_H

#include <QJsonObject>

#include "OAIBuildBatchPhaseType.h"
#include "OAIStatusType.h"
#include <QDateTime>
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIBuildBatchPhase : public OAIObject {
public:
    OAIBuildBatchPhase();
    OAIBuildBatchPhase(QString json);
    ~OAIBuildBatchPhase() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIBuildBatchPhaseType getPhaseType() const;
    void setPhaseType(const OAIBuildBatchPhaseType &phase_type);
    bool is_phase_type_Set() const;
    bool is_phase_type_Valid() const;

    OAIStatusType getPhaseStatus() const;
    void setPhaseStatus(const OAIStatusType &phase_status);
    bool is_phase_status_Set() const;
    bool is_phase_status_Valid() const;

    QDateTime getStartTime() const;
    void setStartTime(const QDateTime &start_time);
    bool is_start_time_Set() const;
    bool is_start_time_Valid() const;

    QDateTime getEndTime() const;
    void setEndTime(const QDateTime &end_time);
    bool is_end_time_Set() const;
    bool is_end_time_Valid() const;

    qint32 getDurationInSeconds() const;
    void setDurationInSeconds(const qint32 &duration_in_seconds);
    bool is_duration_in_seconds_Set() const;
    bool is_duration_in_seconds_Valid() const;

    QList getContexts() const;
    void setContexts(const QList &contexts);
    bool is_contexts_Set() const;
    bool is_contexts_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIBuildBatchPhaseType m_phase_type;
    bool m_phase_type_isSet;
    bool m_phase_type_isValid;

    OAIStatusType m_phase_status;
    bool m_phase_status_isSet;
    bool m_phase_status_isValid;

    QDateTime m_start_time;
    bool m_start_time_isSet;
    bool m_start_time_isValid;

    QDateTime m_end_time;
    bool m_end_time_isSet;
    bool m_end_time_isValid;

    qint32 m_duration_in_seconds;
    bool m_duration_in_seconds_isSet;
    bool m_duration_in_seconds_isValid;

    QList m_contexts;
    bool m_contexts_isSet;
    bool m_contexts_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBuildBatchPhase)

#endif // OAIBuildBatchPhase_H
