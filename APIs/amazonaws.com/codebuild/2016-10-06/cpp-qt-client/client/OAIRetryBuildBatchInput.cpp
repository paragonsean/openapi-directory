/**
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRetryBuildBatchInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRetryBuildBatchInput::OAIRetryBuildBatchInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRetryBuildBatchInput::OAIRetryBuildBatchInput() {
    this->initializeModel();
}

OAIRetryBuildBatchInput::~OAIRetryBuildBatchInput() {}

void OAIRetryBuildBatchInput::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_retry_type_isSet = false;
    m_retry_type_isValid = false;
}

void OAIRetryBuildBatchInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRetryBuildBatchInput::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_retry_type_isValid = ::OpenAPI::fromJsonValue(m_retry_type, json[QString("retryType")]);
    m_retry_type_isSet = !json[QString("retryType")].isNull() && m_retry_type_isValid;
}

QString OAIRetryBuildBatchInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRetryBuildBatchInput::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_retry_type.isSet()) {
        obj.insert(QString("retryType"), ::OpenAPI::toJsonValue(m_retry_type));
    }
    return obj;
}

QString OAIRetryBuildBatchInput::getId() const {
    return m_id;
}
void OAIRetryBuildBatchInput::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRetryBuildBatchInput::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRetryBuildBatchInput::is_id_Valid() const{
    return m_id_isValid;
}

OAIRetryBuildBatchType OAIRetryBuildBatchInput::getRetryType() const {
    return m_retry_type;
}
void OAIRetryBuildBatchInput::setRetryType(const OAIRetryBuildBatchType &retry_type) {
    m_retry_type = retry_type;
    m_retry_type_isSet = true;
}

bool OAIRetryBuildBatchInput::is_retry_type_Set() const{
    return m_retry_type_isSet;
}

bool OAIRetryBuildBatchInput::is_retry_type_Valid() const{
    return m_retry_type_isValid;
}

bool OAIRetryBuildBatchInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retry_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRetryBuildBatchInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
