/**
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartBuildBatchOutput_buildBatch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartBuildBatchOutput_buildBatch::OAIStartBuildBatchOutput_buildBatch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartBuildBatchOutput_buildBatch::OAIStartBuildBatchOutput_buildBatch() {
    this->initializeModel();
}

OAIStartBuildBatchOutput_buildBatch::~OAIStartBuildBatchOutput_buildBatch() {}

void OAIStartBuildBatchOutput_buildBatch::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_current_phase_isSet = false;
    m_current_phase_isValid = false;

    m_build_batch_status_isSet = false;
    m_build_batch_status_isValid = false;

    m_source_version_isSet = false;
    m_source_version_isValid = false;

    m_resolved_source_version_isSet = false;
    m_resolved_source_version_isValid = false;

    m_project_name_isSet = false;
    m_project_name_isValid = false;

    m_phases_isSet = false;
    m_phases_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_secondary_sources_isSet = false;
    m_secondary_sources_isValid = false;

    m_secondary_source_versions_isSet = false;
    m_secondary_source_versions_isValid = false;

    m_artifacts_isSet = false;
    m_artifacts_isValid = false;

    m_secondary_artifacts_isSet = false;
    m_secondary_artifacts_isValid = false;

    m_cache_isSet = false;
    m_cache_isValid = false;

    m_environment_isSet = false;
    m_environment_isValid = false;

    m_service_role_isSet = false;
    m_service_role_isValid = false;

    m_log_config_isSet = false;
    m_log_config_isValid = false;

    m_build_timeout_in_minutes_isSet = false;
    m_build_timeout_in_minutes_isValid = false;

    m_queued_timeout_in_minutes_isSet = false;
    m_queued_timeout_in_minutes_isValid = false;

    m_complete_isSet = false;
    m_complete_isValid = false;

    m_initiator_isSet = false;
    m_initiator_isValid = false;

    m_vpc_config_isSet = false;
    m_vpc_config_isValid = false;

    m_encryption_key_isSet = false;
    m_encryption_key_isValid = false;

    m_build_batch_number_isSet = false;
    m_build_batch_number_isValid = false;

    m_file_system_locations_isSet = false;
    m_file_system_locations_isValid = false;

    m_build_batch_config_isSet = false;
    m_build_batch_config_isValid = false;

    m_build_groups_isSet = false;
    m_build_groups_isValid = false;

    m_debug_session_enabled_isSet = false;
    m_debug_session_enabled_isValid = false;
}

void OAIStartBuildBatchOutput_buildBatch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartBuildBatchOutput_buildBatch::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_current_phase_isValid = ::OpenAPI::fromJsonValue(m_current_phase, json[QString("currentPhase")]);
    m_current_phase_isSet = !json[QString("currentPhase")].isNull() && m_current_phase_isValid;

    m_build_batch_status_isValid = ::OpenAPI::fromJsonValue(m_build_batch_status, json[QString("buildBatchStatus")]);
    m_build_batch_status_isSet = !json[QString("buildBatchStatus")].isNull() && m_build_batch_status_isValid;

    m_source_version_isValid = ::OpenAPI::fromJsonValue(m_source_version, json[QString("sourceVersion")]);
    m_source_version_isSet = !json[QString("sourceVersion")].isNull() && m_source_version_isValid;

    m_resolved_source_version_isValid = ::OpenAPI::fromJsonValue(m_resolved_source_version, json[QString("resolvedSourceVersion")]);
    m_resolved_source_version_isSet = !json[QString("resolvedSourceVersion")].isNull() && m_resolved_source_version_isValid;

    m_project_name_isValid = ::OpenAPI::fromJsonValue(m_project_name, json[QString("projectName")]);
    m_project_name_isSet = !json[QString("projectName")].isNull() && m_project_name_isValid;

    m_phases_isValid = ::OpenAPI::fromJsonValue(m_phases, json[QString("phases")]);
    m_phases_isSet = !json[QString("phases")].isNull() && m_phases_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_secondary_sources_isValid = ::OpenAPI::fromJsonValue(m_secondary_sources, json[QString("secondarySources")]);
    m_secondary_sources_isSet = !json[QString("secondarySources")].isNull() && m_secondary_sources_isValid;

    m_secondary_source_versions_isValid = ::OpenAPI::fromJsonValue(m_secondary_source_versions, json[QString("secondarySourceVersions")]);
    m_secondary_source_versions_isSet = !json[QString("secondarySourceVersions")].isNull() && m_secondary_source_versions_isValid;

    m_artifacts_isValid = ::OpenAPI::fromJsonValue(m_artifacts, json[QString("artifacts")]);
    m_artifacts_isSet = !json[QString("artifacts")].isNull() && m_artifacts_isValid;

    m_secondary_artifacts_isValid = ::OpenAPI::fromJsonValue(m_secondary_artifacts, json[QString("secondaryArtifacts")]);
    m_secondary_artifacts_isSet = !json[QString("secondaryArtifacts")].isNull() && m_secondary_artifacts_isValid;

    m_cache_isValid = ::OpenAPI::fromJsonValue(m_cache, json[QString("cache")]);
    m_cache_isSet = !json[QString("cache")].isNull() && m_cache_isValid;

    m_environment_isValid = ::OpenAPI::fromJsonValue(m_environment, json[QString("environment")]);
    m_environment_isSet = !json[QString("environment")].isNull() && m_environment_isValid;

    m_service_role_isValid = ::OpenAPI::fromJsonValue(m_service_role, json[QString("serviceRole")]);
    m_service_role_isSet = !json[QString("serviceRole")].isNull() && m_service_role_isValid;

    m_log_config_isValid = ::OpenAPI::fromJsonValue(m_log_config, json[QString("logConfig")]);
    m_log_config_isSet = !json[QString("logConfig")].isNull() && m_log_config_isValid;

    m_build_timeout_in_minutes_isValid = ::OpenAPI::fromJsonValue(m_build_timeout_in_minutes, json[QString("buildTimeoutInMinutes")]);
    m_build_timeout_in_minutes_isSet = !json[QString("buildTimeoutInMinutes")].isNull() && m_build_timeout_in_minutes_isValid;

    m_queued_timeout_in_minutes_isValid = ::OpenAPI::fromJsonValue(m_queued_timeout_in_minutes, json[QString("queuedTimeoutInMinutes")]);
    m_queued_timeout_in_minutes_isSet = !json[QString("queuedTimeoutInMinutes")].isNull() && m_queued_timeout_in_minutes_isValid;

    m_complete_isValid = ::OpenAPI::fromJsonValue(m_complete, json[QString("complete")]);
    m_complete_isSet = !json[QString("complete")].isNull() && m_complete_isValid;

    m_initiator_isValid = ::OpenAPI::fromJsonValue(m_initiator, json[QString("initiator")]);
    m_initiator_isSet = !json[QString("initiator")].isNull() && m_initiator_isValid;

    m_vpc_config_isValid = ::OpenAPI::fromJsonValue(m_vpc_config, json[QString("vpcConfig")]);
    m_vpc_config_isSet = !json[QString("vpcConfig")].isNull() && m_vpc_config_isValid;

    m_encryption_key_isValid = ::OpenAPI::fromJsonValue(m_encryption_key, json[QString("encryptionKey")]);
    m_encryption_key_isSet = !json[QString("encryptionKey")].isNull() && m_encryption_key_isValid;

    m_build_batch_number_isValid = ::OpenAPI::fromJsonValue(m_build_batch_number, json[QString("buildBatchNumber")]);
    m_build_batch_number_isSet = !json[QString("buildBatchNumber")].isNull() && m_build_batch_number_isValid;

    m_file_system_locations_isValid = ::OpenAPI::fromJsonValue(m_file_system_locations, json[QString("fileSystemLocations")]);
    m_file_system_locations_isSet = !json[QString("fileSystemLocations")].isNull() && m_file_system_locations_isValid;

    m_build_batch_config_isValid = ::OpenAPI::fromJsonValue(m_build_batch_config, json[QString("buildBatchConfig")]);
    m_build_batch_config_isSet = !json[QString("buildBatchConfig")].isNull() && m_build_batch_config_isValid;

    m_build_groups_isValid = ::OpenAPI::fromJsonValue(m_build_groups, json[QString("buildGroups")]);
    m_build_groups_isSet = !json[QString("buildGroups")].isNull() && m_build_groups_isValid;

    m_debug_session_enabled_isValid = ::OpenAPI::fromJsonValue(m_debug_session_enabled, json[QString("debugSessionEnabled")]);
    m_debug_session_enabled_isSet = !json[QString("debugSessionEnabled")].isNull() && m_debug_session_enabled_isValid;
}

QString OAIStartBuildBatchOutput_buildBatch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartBuildBatchOutput_buildBatch::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_current_phase_isSet) {
        obj.insert(QString("currentPhase"), ::OpenAPI::toJsonValue(m_current_phase));
    }
    if (m_build_batch_status.isSet()) {
        obj.insert(QString("buildBatchStatus"), ::OpenAPI::toJsonValue(m_build_batch_status));
    }
    if (m_source_version_isSet) {
        obj.insert(QString("sourceVersion"), ::OpenAPI::toJsonValue(m_source_version));
    }
    if (m_resolved_source_version_isSet) {
        obj.insert(QString("resolvedSourceVersion"), ::OpenAPI::toJsonValue(m_resolved_source_version));
    }
    if (m_project_name_isSet) {
        obj.insert(QString("projectName"), ::OpenAPI::toJsonValue(m_project_name));
    }
    if (m_phases.isSet()) {
        obj.insert(QString("phases"), ::OpenAPI::toJsonValue(m_phases));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_secondary_sources.isSet()) {
        obj.insert(QString("secondarySources"), ::OpenAPI::toJsonValue(m_secondary_sources));
    }
    if (m_secondary_source_versions.isSet()) {
        obj.insert(QString("secondarySourceVersions"), ::OpenAPI::toJsonValue(m_secondary_source_versions));
    }
    if (m_artifacts.isSet()) {
        obj.insert(QString("artifacts"), ::OpenAPI::toJsonValue(m_artifacts));
    }
    if (m_secondary_artifacts.isSet()) {
        obj.insert(QString("secondaryArtifacts"), ::OpenAPI::toJsonValue(m_secondary_artifacts));
    }
    if (m_cache.isSet()) {
        obj.insert(QString("cache"), ::OpenAPI::toJsonValue(m_cache));
    }
    if (m_environment.isSet()) {
        obj.insert(QString("environment"), ::OpenAPI::toJsonValue(m_environment));
    }
    if (m_service_role_isSet) {
        obj.insert(QString("serviceRole"), ::OpenAPI::toJsonValue(m_service_role));
    }
    if (m_log_config.isSet()) {
        obj.insert(QString("logConfig"), ::OpenAPI::toJsonValue(m_log_config));
    }
    if (m_build_timeout_in_minutes_isSet) {
        obj.insert(QString("buildTimeoutInMinutes"), ::OpenAPI::toJsonValue(m_build_timeout_in_minutes));
    }
    if (m_queued_timeout_in_minutes_isSet) {
        obj.insert(QString("queuedTimeoutInMinutes"), ::OpenAPI::toJsonValue(m_queued_timeout_in_minutes));
    }
    if (m_complete_isSet) {
        obj.insert(QString("complete"), ::OpenAPI::toJsonValue(m_complete));
    }
    if (m_initiator_isSet) {
        obj.insert(QString("initiator"), ::OpenAPI::toJsonValue(m_initiator));
    }
    if (m_vpc_config.isSet()) {
        obj.insert(QString("vpcConfig"), ::OpenAPI::toJsonValue(m_vpc_config));
    }
    if (m_encryption_key_isSet) {
        obj.insert(QString("encryptionKey"), ::OpenAPI::toJsonValue(m_encryption_key));
    }
    if (m_build_batch_number_isSet) {
        obj.insert(QString("buildBatchNumber"), ::OpenAPI::toJsonValue(m_build_batch_number));
    }
    if (m_file_system_locations.isSet()) {
        obj.insert(QString("fileSystemLocations"), ::OpenAPI::toJsonValue(m_file_system_locations));
    }
    if (m_build_batch_config.isSet()) {
        obj.insert(QString("buildBatchConfig"), ::OpenAPI::toJsonValue(m_build_batch_config));
    }
    if (m_build_groups.isSet()) {
        obj.insert(QString("buildGroups"), ::OpenAPI::toJsonValue(m_build_groups));
    }
    if (m_debug_session_enabled_isSet) {
        obj.insert(QString("debugSessionEnabled"), ::OpenAPI::toJsonValue(m_debug_session_enabled));
    }
    return obj;
}

QString OAIStartBuildBatchOutput_buildBatch::getId() const {
    return m_id;
}
void OAIStartBuildBatchOutput_buildBatch::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIStartBuildBatchOutput_buildBatch::is_id_Set() const{
    return m_id_isSet;
}

bool OAIStartBuildBatchOutput_buildBatch::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIStartBuildBatchOutput_buildBatch::getArn() const {
    return m_arn;
}
void OAIStartBuildBatchOutput_buildBatch::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIStartBuildBatchOutput_buildBatch::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIStartBuildBatchOutput_buildBatch::is_arn_Valid() const{
    return m_arn_isValid;
}

QDateTime OAIStartBuildBatchOutput_buildBatch::getStartTime() const {
    return m_start_time;
}
void OAIStartBuildBatchOutput_buildBatch::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIStartBuildBatchOutput_buildBatch::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIStartBuildBatchOutput_buildBatch::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QDateTime OAIStartBuildBatchOutput_buildBatch::getEndTime() const {
    return m_end_time;
}
void OAIStartBuildBatchOutput_buildBatch::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIStartBuildBatchOutput_buildBatch::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIStartBuildBatchOutput_buildBatch::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIStartBuildBatchOutput_buildBatch::getCurrentPhase() const {
    return m_current_phase;
}
void OAIStartBuildBatchOutput_buildBatch::setCurrentPhase(const QString &current_phase) {
    m_current_phase = current_phase;
    m_current_phase_isSet = true;
}

bool OAIStartBuildBatchOutput_buildBatch::is_current_phase_Set() const{
    return m_current_phase_isSet;
}

bool OAIStartBuildBatchOutput_buildBatch::is_current_phase_Valid() const{
    return m_current_phase_isValid;
}

OAIStatusType OAIStartBuildBatchOutput_buildBatch::getBuildBatchStatus() const {
    return m_build_batch_status;
}
void OAIStartBuildBatchOutput_buildBatch::setBuildBatchStatus(const OAIStatusType &build_batch_status) {
    m_build_batch_status = build_batch_status;
    m_build_batch_status_isSet = true;
}

bool OAIStartBuildBatchOutput_buildBatch::is_build_batch_status_Set() const{
    return m_build_batch_status_isSet;
}

bool OAIStartBuildBatchOutput_buildBatch::is_build_batch_status_Valid() const{
    return m_build_batch_status_isValid;
}

QString OAIStartBuildBatchOutput_buildBatch::getSourceVersion() const {
    return m_source_version;
}
void OAIStartBuildBatchOutput_buildBatch::setSourceVersion(const QString &source_version) {
    m_source_version = source_version;
    m_source_version_isSet = true;
}

bool OAIStartBuildBatchOutput_buildBatch::is_source_version_Set() const{
    return m_source_version_isSet;
}

bool OAIStartBuildBatchOutput_buildBatch::is_source_version_Valid() const{
    return m_source_version_isValid;
}

QString OAIStartBuildBatchOutput_buildBatch::getResolvedSourceVersion() const {
    return m_resolved_source_version;
}
void OAIStartBuildBatchOutput_buildBatch::setResolvedSourceVersion(const QString &resolved_source_version) {
    m_resolved_source_version = resolved_source_version;
    m_resolved_source_version_isSet = true;
}

bool OAIStartBuildBatchOutput_buildBatch::is_resolved_source_version_Set() const{
    return m_resolved_source_version_isSet;
}

bool OAIStartBuildBatchOutput_buildBatch::is_resolved_source_version_Valid() const{
    return m_resolved_source_version_isValid;
}

QString OAIStartBuildBatchOutput_buildBatch::getProjectName() const {
    return m_project_name;
}
void OAIStartBuildBatchOutput_buildBatch::setProjectName(const QString &project_name) {
    m_project_name = project_name;
    m_project_name_isSet = true;
}

bool OAIStartBuildBatchOutput_buildBatch::is_project_name_Set() const{
    return m_project_name_isSet;
}

bool OAIStartBuildBatchOutput_buildBatch::is_project_name_Valid() const{
    return m_project_name_isValid;
}

QList OAIStartBuildBatchOutput_buildBatch::getPhases() const {
    return m_phases;
}
void OAIStartBuildBatchOutput_buildBatch::setPhases(const QList &phases) {
    m_phases = phases;
    m_phases_isSet = true;
}

bool OAIStartBuildBatchOutput_buildBatch::is_phases_Set() const{
    return m_phases_isSet;
}

bool OAIStartBuildBatchOutput_buildBatch::is_phases_Valid() const{
    return m_phases_isValid;
}

OAIProjectSource OAIStartBuildBatchOutput_buildBatch::getSource() const {
    return m_source;
}
void OAIStartBuildBatchOutput_buildBatch::setSource(const OAIProjectSource &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIStartBuildBatchOutput_buildBatch::is_source_Set() const{
    return m_source_isSet;
}

bool OAIStartBuildBatchOutput_buildBatch::is_source_Valid() const{
    return m_source_isValid;
}

QList OAIStartBuildBatchOutput_buildBatch::getSecondarySources() const {
    return m_secondary_sources;
}
void OAIStartBuildBatchOutput_buildBatch::setSecondarySources(const QList &secondary_sources) {
    m_secondary_sources = secondary_sources;
    m_secondary_sources_isSet = true;
}

bool OAIStartBuildBatchOutput_buildBatch::is_secondary_sources_Set() const{
    return m_secondary_sources_isSet;
}

bool OAIStartBuildBatchOutput_buildBatch::is_secondary_sources_Valid() const{
    return m_secondary_sources_isValid;
}

QList OAIStartBuildBatchOutput_buildBatch::getSecondarySourceVersions() const {
    return m_secondary_source_versions;
}
void OAIStartBuildBatchOutput_buildBatch::setSecondarySourceVersions(const QList &secondary_source_versions) {
    m_secondary_source_versions = secondary_source_versions;
    m_secondary_source_versions_isSet = true;
}

bool OAIStartBuildBatchOutput_buildBatch::is_secondary_source_versions_Set() const{
    return m_secondary_source_versions_isSet;
}

bool OAIStartBuildBatchOutput_buildBatch::is_secondary_source_versions_Valid() const{
    return m_secondary_source_versions_isValid;
}

OAIBuildBatch_artifacts OAIStartBuildBatchOutput_buildBatch::getArtifacts() const {
    return m_artifacts;
}
void OAIStartBuildBatchOutput_buildBatch::setArtifacts(const OAIBuildBatch_artifacts &artifacts) {
    m_artifacts = artifacts;
    m_artifacts_isSet = true;
}

bool OAIStartBuildBatchOutput_buildBatch::is_artifacts_Set() const{
    return m_artifacts_isSet;
}

bool OAIStartBuildBatchOutput_buildBatch::is_artifacts_Valid() const{
    return m_artifacts_isValid;
}

QList OAIStartBuildBatchOutput_buildBatch::getSecondaryArtifacts() const {
    return m_secondary_artifacts;
}
void OAIStartBuildBatchOutput_buildBatch::setSecondaryArtifacts(const QList &secondary_artifacts) {
    m_secondary_artifacts = secondary_artifacts;
    m_secondary_artifacts_isSet = true;
}

bool OAIStartBuildBatchOutput_buildBatch::is_secondary_artifacts_Set() const{
    return m_secondary_artifacts_isSet;
}

bool OAIStartBuildBatchOutput_buildBatch::is_secondary_artifacts_Valid() const{
    return m_secondary_artifacts_isValid;
}

OAIProjectCache OAIStartBuildBatchOutput_buildBatch::getCache() const {
    return m_cache;
}
void OAIStartBuildBatchOutput_buildBatch::setCache(const OAIProjectCache &cache) {
    m_cache = cache;
    m_cache_isSet = true;
}

bool OAIStartBuildBatchOutput_buildBatch::is_cache_Set() const{
    return m_cache_isSet;
}

bool OAIStartBuildBatchOutput_buildBatch::is_cache_Valid() const{
    return m_cache_isValid;
}

OAIProjectEnvironment OAIStartBuildBatchOutput_buildBatch::getEnvironment() const {
    return m_environment;
}
void OAIStartBuildBatchOutput_buildBatch::setEnvironment(const OAIProjectEnvironment &environment) {
    m_environment = environment;
    m_environment_isSet = true;
}

bool OAIStartBuildBatchOutput_buildBatch::is_environment_Set() const{
    return m_environment_isSet;
}

bool OAIStartBuildBatchOutput_buildBatch::is_environment_Valid() const{
    return m_environment_isValid;
}

QString OAIStartBuildBatchOutput_buildBatch::getServiceRole() const {
    return m_service_role;
}
void OAIStartBuildBatchOutput_buildBatch::setServiceRole(const QString &service_role) {
    m_service_role = service_role;
    m_service_role_isSet = true;
}

bool OAIStartBuildBatchOutput_buildBatch::is_service_role_Set() const{
    return m_service_role_isSet;
}

bool OAIStartBuildBatchOutput_buildBatch::is_service_role_Valid() const{
    return m_service_role_isValid;
}

OAILogsConfig OAIStartBuildBatchOutput_buildBatch::getLogConfig() const {
    return m_log_config;
}
void OAIStartBuildBatchOutput_buildBatch::setLogConfig(const OAILogsConfig &log_config) {
    m_log_config = log_config;
    m_log_config_isSet = true;
}

bool OAIStartBuildBatchOutput_buildBatch::is_log_config_Set() const{
    return m_log_config_isSet;
}

bool OAIStartBuildBatchOutput_buildBatch::is_log_config_Valid() const{
    return m_log_config_isValid;
}

qint32 OAIStartBuildBatchOutput_buildBatch::getBuildTimeoutInMinutes() const {
    return m_build_timeout_in_minutes;
}
void OAIStartBuildBatchOutput_buildBatch::setBuildTimeoutInMinutes(const qint32 &build_timeout_in_minutes) {
    m_build_timeout_in_minutes = build_timeout_in_minutes;
    m_build_timeout_in_minutes_isSet = true;
}

bool OAIStartBuildBatchOutput_buildBatch::is_build_timeout_in_minutes_Set() const{
    return m_build_timeout_in_minutes_isSet;
}

bool OAIStartBuildBatchOutput_buildBatch::is_build_timeout_in_minutes_Valid() const{
    return m_build_timeout_in_minutes_isValid;
}

qint32 OAIStartBuildBatchOutput_buildBatch::getQueuedTimeoutInMinutes() const {
    return m_queued_timeout_in_minutes;
}
void OAIStartBuildBatchOutput_buildBatch::setQueuedTimeoutInMinutes(const qint32 &queued_timeout_in_minutes) {
    m_queued_timeout_in_minutes = queued_timeout_in_minutes;
    m_queued_timeout_in_minutes_isSet = true;
}

bool OAIStartBuildBatchOutput_buildBatch::is_queued_timeout_in_minutes_Set() const{
    return m_queued_timeout_in_minutes_isSet;
}

bool OAIStartBuildBatchOutput_buildBatch::is_queued_timeout_in_minutes_Valid() const{
    return m_queued_timeout_in_minutes_isValid;
}

bool OAIStartBuildBatchOutput_buildBatch::getComplete() const {
    return m_complete;
}
void OAIStartBuildBatchOutput_buildBatch::setComplete(const bool &complete) {
    m_complete = complete;
    m_complete_isSet = true;
}

bool OAIStartBuildBatchOutput_buildBatch::is_complete_Set() const{
    return m_complete_isSet;
}

bool OAIStartBuildBatchOutput_buildBatch::is_complete_Valid() const{
    return m_complete_isValid;
}

QString OAIStartBuildBatchOutput_buildBatch::getInitiator() const {
    return m_initiator;
}
void OAIStartBuildBatchOutput_buildBatch::setInitiator(const QString &initiator) {
    m_initiator = initiator;
    m_initiator_isSet = true;
}

bool OAIStartBuildBatchOutput_buildBatch::is_initiator_Set() const{
    return m_initiator_isSet;
}

bool OAIStartBuildBatchOutput_buildBatch::is_initiator_Valid() const{
    return m_initiator_isValid;
}

OAIVpcConfig OAIStartBuildBatchOutput_buildBatch::getVpcConfig() const {
    return m_vpc_config;
}
void OAIStartBuildBatchOutput_buildBatch::setVpcConfig(const OAIVpcConfig &vpc_config) {
    m_vpc_config = vpc_config;
    m_vpc_config_isSet = true;
}

bool OAIStartBuildBatchOutput_buildBatch::is_vpc_config_Set() const{
    return m_vpc_config_isSet;
}

bool OAIStartBuildBatchOutput_buildBatch::is_vpc_config_Valid() const{
    return m_vpc_config_isValid;
}

QString OAIStartBuildBatchOutput_buildBatch::getEncryptionKey() const {
    return m_encryption_key;
}
void OAIStartBuildBatchOutput_buildBatch::setEncryptionKey(const QString &encryption_key) {
    m_encryption_key = encryption_key;
    m_encryption_key_isSet = true;
}

bool OAIStartBuildBatchOutput_buildBatch::is_encryption_key_Set() const{
    return m_encryption_key_isSet;
}

bool OAIStartBuildBatchOutput_buildBatch::is_encryption_key_Valid() const{
    return m_encryption_key_isValid;
}

qint32 OAIStartBuildBatchOutput_buildBatch::getBuildBatchNumber() const {
    return m_build_batch_number;
}
void OAIStartBuildBatchOutput_buildBatch::setBuildBatchNumber(const qint32 &build_batch_number) {
    m_build_batch_number = build_batch_number;
    m_build_batch_number_isSet = true;
}

bool OAIStartBuildBatchOutput_buildBatch::is_build_batch_number_Set() const{
    return m_build_batch_number_isSet;
}

bool OAIStartBuildBatchOutput_buildBatch::is_build_batch_number_Valid() const{
    return m_build_batch_number_isValid;
}

QList OAIStartBuildBatchOutput_buildBatch::getFileSystemLocations() const {
    return m_file_system_locations;
}
void OAIStartBuildBatchOutput_buildBatch::setFileSystemLocations(const QList &file_system_locations) {
    m_file_system_locations = file_system_locations;
    m_file_system_locations_isSet = true;
}

bool OAIStartBuildBatchOutput_buildBatch::is_file_system_locations_Set() const{
    return m_file_system_locations_isSet;
}

bool OAIStartBuildBatchOutput_buildBatch::is_file_system_locations_Valid() const{
    return m_file_system_locations_isValid;
}

OAIProjectBuildBatchConfig OAIStartBuildBatchOutput_buildBatch::getBuildBatchConfig() const {
    return m_build_batch_config;
}
void OAIStartBuildBatchOutput_buildBatch::setBuildBatchConfig(const OAIProjectBuildBatchConfig &build_batch_config) {
    m_build_batch_config = build_batch_config;
    m_build_batch_config_isSet = true;
}

bool OAIStartBuildBatchOutput_buildBatch::is_build_batch_config_Set() const{
    return m_build_batch_config_isSet;
}

bool OAIStartBuildBatchOutput_buildBatch::is_build_batch_config_Valid() const{
    return m_build_batch_config_isValid;
}

QList OAIStartBuildBatchOutput_buildBatch::getBuildGroups() const {
    return m_build_groups;
}
void OAIStartBuildBatchOutput_buildBatch::setBuildGroups(const QList &build_groups) {
    m_build_groups = build_groups;
    m_build_groups_isSet = true;
}

bool OAIStartBuildBatchOutput_buildBatch::is_build_groups_Set() const{
    return m_build_groups_isSet;
}

bool OAIStartBuildBatchOutput_buildBatch::is_build_groups_Valid() const{
    return m_build_groups_isValid;
}

bool OAIStartBuildBatchOutput_buildBatch::getDebugSessionEnabled() const {
    return m_debug_session_enabled;
}
void OAIStartBuildBatchOutput_buildBatch::setDebugSessionEnabled(const bool &debug_session_enabled) {
    m_debug_session_enabled = debug_session_enabled;
    m_debug_session_enabled_isSet = true;
}

bool OAIStartBuildBatchOutput_buildBatch::is_debug_session_enabled_Set() const{
    return m_debug_session_enabled_isSet;
}

bool OAIStartBuildBatchOutput_buildBatch::is_debug_session_enabled_Valid() const{
    return m_debug_session_enabled_isValid;
}

bool OAIStartBuildBatchOutput_buildBatch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_phase_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_batch_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolved_source_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phases.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_sources.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_source_versions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_artifacts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_artifacts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cache.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_timeout_in_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_queued_timeout_in_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_complete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_initiator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_batch_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_system_locations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_batch_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_debug_session_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartBuildBatchOutput_buildBatch::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
