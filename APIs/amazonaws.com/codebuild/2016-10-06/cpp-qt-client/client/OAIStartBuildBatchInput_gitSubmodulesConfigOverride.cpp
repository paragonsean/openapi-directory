/**
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartBuildBatchInput_gitSubmodulesConfigOverride.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartBuildBatchInput_gitSubmodulesConfigOverride::OAIStartBuildBatchInput_gitSubmodulesConfigOverride(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartBuildBatchInput_gitSubmodulesConfigOverride::OAIStartBuildBatchInput_gitSubmodulesConfigOverride() {
    this->initializeModel();
}

OAIStartBuildBatchInput_gitSubmodulesConfigOverride::~OAIStartBuildBatchInput_gitSubmodulesConfigOverride() {}

void OAIStartBuildBatchInput_gitSubmodulesConfigOverride::initializeModel() {

    m_fetch_submodules_isSet = false;
    m_fetch_submodules_isValid = false;
}

void OAIStartBuildBatchInput_gitSubmodulesConfigOverride::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartBuildBatchInput_gitSubmodulesConfigOverride::fromJsonObject(QJsonObject json) {

    m_fetch_submodules_isValid = ::OpenAPI::fromJsonValue(m_fetch_submodules, json[QString("fetchSubmodules")]);
    m_fetch_submodules_isSet = !json[QString("fetchSubmodules")].isNull() && m_fetch_submodules_isValid;
}

QString OAIStartBuildBatchInput_gitSubmodulesConfigOverride::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartBuildBatchInput_gitSubmodulesConfigOverride::asJsonObject() const {
    QJsonObject obj;
    if (m_fetch_submodules_isSet) {
        obj.insert(QString("fetchSubmodules"), ::OpenAPI::toJsonValue(m_fetch_submodules));
    }
    return obj;
}

bool OAIStartBuildBatchInput_gitSubmodulesConfigOverride::getFetchSubmodules() const {
    return m_fetch_submodules;
}
void OAIStartBuildBatchInput_gitSubmodulesConfigOverride::setFetchSubmodules(const bool &fetch_submodules) {
    m_fetch_submodules = fetch_submodules;
    m_fetch_submodules_isSet = true;
}

bool OAIStartBuildBatchInput_gitSubmodulesConfigOverride::is_fetch_submodules_Set() const{
    return m_fetch_submodules_isSet;
}

bool OAIStartBuildBatchInput_gitSubmodulesConfigOverride::is_fetch_submodules_Valid() const{
    return m_fetch_submodules_isValid;
}

bool OAIStartBuildBatchInput_gitSubmodulesConfigOverride::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fetch_submodules_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartBuildBatchInput_gitSubmodulesConfigOverride::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_fetch_submodules_isValid && true;
}

} // namespace OpenAPI
