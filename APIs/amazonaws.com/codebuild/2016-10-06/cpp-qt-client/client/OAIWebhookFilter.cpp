/**
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebhookFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWebhookFilter::OAIWebhookFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWebhookFilter::OAIWebhookFilter() {
    this->initializeModel();
}

OAIWebhookFilter::~OAIWebhookFilter() {}

void OAIWebhookFilter::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_pattern_isSet = false;
    m_pattern_isValid = false;

    m_exclude_matched_pattern_isSet = false;
    m_exclude_matched_pattern_isValid = false;
}

void OAIWebhookFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWebhookFilter::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_pattern_isValid = ::OpenAPI::fromJsonValue(m_pattern, json[QString("pattern")]);
    m_pattern_isSet = !json[QString("pattern")].isNull() && m_pattern_isValid;

    m_exclude_matched_pattern_isValid = ::OpenAPI::fromJsonValue(m_exclude_matched_pattern, json[QString("excludeMatchedPattern")]);
    m_exclude_matched_pattern_isSet = !json[QString("excludeMatchedPattern")].isNull() && m_exclude_matched_pattern_isValid;
}

QString OAIWebhookFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWebhookFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_pattern_isSet) {
        obj.insert(QString("pattern"), ::OpenAPI::toJsonValue(m_pattern));
    }
    if (m_exclude_matched_pattern_isSet) {
        obj.insert(QString("excludeMatchedPattern"), ::OpenAPI::toJsonValue(m_exclude_matched_pattern));
    }
    return obj;
}

OAIWebhookFilterType OAIWebhookFilter::getType() const {
    return m_type;
}
void OAIWebhookFilter::setType(const OAIWebhookFilterType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIWebhookFilter::is_type_Set() const{
    return m_type_isSet;
}

bool OAIWebhookFilter::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIWebhookFilter::getPattern() const {
    return m_pattern;
}
void OAIWebhookFilter::setPattern(const QString &pattern) {
    m_pattern = pattern;
    m_pattern_isSet = true;
}

bool OAIWebhookFilter::is_pattern_Set() const{
    return m_pattern_isSet;
}

bool OAIWebhookFilter::is_pattern_Valid() const{
    return m_pattern_isValid;
}

bool OAIWebhookFilter::getExcludeMatchedPattern() const {
    return m_exclude_matched_pattern;
}
void OAIWebhookFilter::setExcludeMatchedPattern(const bool &exclude_matched_pattern) {
    m_exclude_matched_pattern = exclude_matched_pattern;
    m_exclude_matched_pattern_isSet = true;
}

bool OAIWebhookFilter::is_exclude_matched_pattern_Set() const{
    return m_exclude_matched_pattern_isSet;
}

bool OAIWebhookFilter::is_exclude_matched_pattern_Valid() const{
    return m_exclude_matched_pattern_isValid;
}

bool OAIWebhookFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pattern_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclude_matched_pattern_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWebhookFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && m_pattern_isValid && true;
}

} // namespace OpenAPI
