/**
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegistryCredential.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegistryCredential::OAIRegistryCredential(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegistryCredential::OAIRegistryCredential() {
    this->initializeModel();
}

OAIRegistryCredential::~OAIRegistryCredential() {}

void OAIRegistryCredential::initializeModel() {

    m_credential_isSet = false;
    m_credential_isValid = false;

    m_credential_provider_isSet = false;
    m_credential_provider_isValid = false;
}

void OAIRegistryCredential::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegistryCredential::fromJsonObject(QJsonObject json) {

    m_credential_isValid = ::OpenAPI::fromJsonValue(m_credential, json[QString("credential")]);
    m_credential_isSet = !json[QString("credential")].isNull() && m_credential_isValid;

    m_credential_provider_isValid = ::OpenAPI::fromJsonValue(m_credential_provider, json[QString("credentialProvider")]);
    m_credential_provider_isSet = !json[QString("credentialProvider")].isNull() && m_credential_provider_isValid;
}

QString OAIRegistryCredential::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegistryCredential::asJsonObject() const {
    QJsonObject obj;
    if (m_credential_isSet) {
        obj.insert(QString("credential"), ::OpenAPI::toJsonValue(m_credential));
    }
    if (m_credential_provider.isSet()) {
        obj.insert(QString("credentialProvider"), ::OpenAPI::toJsonValue(m_credential_provider));
    }
    return obj;
}

QString OAIRegistryCredential::getCredential() const {
    return m_credential;
}
void OAIRegistryCredential::setCredential(const QString &credential) {
    m_credential = credential;
    m_credential_isSet = true;
}

bool OAIRegistryCredential::is_credential_Set() const{
    return m_credential_isSet;
}

bool OAIRegistryCredential::is_credential_Valid() const{
    return m_credential_isValid;
}

OAICredentialProviderType OAIRegistryCredential::getCredentialProvider() const {
    return m_credential_provider;
}
void OAIRegistryCredential::setCredentialProvider(const OAICredentialProviderType &credential_provider) {
    m_credential_provider = credential_provider;
    m_credential_provider_isSet = true;
}

bool OAIRegistryCredential::is_credential_provider_Set() const{
    return m_credential_provider_isSet;
}

bool OAIRegistryCredential::is_credential_provider_Valid() const{
    return m_credential_provider_isValid;
}

bool OAIRegistryCredential::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_credential_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credential_provider.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegistryCredential::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_credential_isValid && m_credential_provider_isValid && true;
}

} // namespace OpenAPI
