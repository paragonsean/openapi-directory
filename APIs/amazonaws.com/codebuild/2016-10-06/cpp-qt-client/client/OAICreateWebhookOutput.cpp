/**
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateWebhookOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateWebhookOutput::OAICreateWebhookOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateWebhookOutput::OAICreateWebhookOutput() {
    this->initializeModel();
}

OAICreateWebhookOutput::~OAICreateWebhookOutput() {}

void OAICreateWebhookOutput::initializeModel() {

    m_webhook_isSet = false;
    m_webhook_isValid = false;
}

void OAICreateWebhookOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateWebhookOutput::fromJsonObject(QJsonObject json) {

    m_webhook_isValid = ::OpenAPI::fromJsonValue(m_webhook, json[QString("webhook")]);
    m_webhook_isSet = !json[QString("webhook")].isNull() && m_webhook_isValid;
}

QString OAICreateWebhookOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateWebhookOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_webhook.isSet()) {
        obj.insert(QString("webhook"), ::OpenAPI::toJsonValue(m_webhook));
    }
    return obj;
}

OAICreateWebhookOutput_webhook OAICreateWebhookOutput::getWebhook() const {
    return m_webhook;
}
void OAICreateWebhookOutput::setWebhook(const OAICreateWebhookOutput_webhook &webhook) {
    m_webhook = webhook;
    m_webhook_isSet = true;
}

bool OAICreateWebhookOutput::is_webhook_Set() const{
    return m_webhook_isSet;
}

bool OAICreateWebhookOutput::is_webhook_Valid() const{
    return m_webhook_isValid;
}

bool OAICreateWebhookOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_webhook.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateWebhookOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
