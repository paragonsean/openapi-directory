/**
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILogsLocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILogsLocation::OAILogsLocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILogsLocation::OAILogsLocation() {
    this->initializeModel();
}

OAILogsLocation::~OAILogsLocation() {}

void OAILogsLocation::initializeModel() {

    m_group_name_isSet = false;
    m_group_name_isValid = false;

    m_stream_name_isSet = false;
    m_stream_name_isValid = false;

    m_deep_link_isSet = false;
    m_deep_link_isValid = false;

    m_s3_deep_link_isSet = false;
    m_s3_deep_link_isValid = false;

    m_cloud_watch_logs_arn_isSet = false;
    m_cloud_watch_logs_arn_isValid = false;

    m_s3_logs_arn_isSet = false;
    m_s3_logs_arn_isValid = false;

    m_cloud_watch_logs_isSet = false;
    m_cloud_watch_logs_isValid = false;

    m_s3_logs_isSet = false;
    m_s3_logs_isValid = false;
}

void OAILogsLocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILogsLocation::fromJsonObject(QJsonObject json) {

    m_group_name_isValid = ::OpenAPI::fromJsonValue(m_group_name, json[QString("groupName")]);
    m_group_name_isSet = !json[QString("groupName")].isNull() && m_group_name_isValid;

    m_stream_name_isValid = ::OpenAPI::fromJsonValue(m_stream_name, json[QString("streamName")]);
    m_stream_name_isSet = !json[QString("streamName")].isNull() && m_stream_name_isValid;

    m_deep_link_isValid = ::OpenAPI::fromJsonValue(m_deep_link, json[QString("deepLink")]);
    m_deep_link_isSet = !json[QString("deepLink")].isNull() && m_deep_link_isValid;

    m_s3_deep_link_isValid = ::OpenAPI::fromJsonValue(m_s3_deep_link, json[QString("s3DeepLink")]);
    m_s3_deep_link_isSet = !json[QString("s3DeepLink")].isNull() && m_s3_deep_link_isValid;

    m_cloud_watch_logs_arn_isValid = ::OpenAPI::fromJsonValue(m_cloud_watch_logs_arn, json[QString("cloudWatchLogsArn")]);
    m_cloud_watch_logs_arn_isSet = !json[QString("cloudWatchLogsArn")].isNull() && m_cloud_watch_logs_arn_isValid;

    m_s3_logs_arn_isValid = ::OpenAPI::fromJsonValue(m_s3_logs_arn, json[QString("s3LogsArn")]);
    m_s3_logs_arn_isSet = !json[QString("s3LogsArn")].isNull() && m_s3_logs_arn_isValid;

    m_cloud_watch_logs_isValid = ::OpenAPI::fromJsonValue(m_cloud_watch_logs, json[QString("cloudWatchLogs")]);
    m_cloud_watch_logs_isSet = !json[QString("cloudWatchLogs")].isNull() && m_cloud_watch_logs_isValid;

    m_s3_logs_isValid = ::OpenAPI::fromJsonValue(m_s3_logs, json[QString("s3Logs")]);
    m_s3_logs_isSet = !json[QString("s3Logs")].isNull() && m_s3_logs_isValid;
}

QString OAILogsLocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILogsLocation::asJsonObject() const {
    QJsonObject obj;
    if (m_group_name_isSet) {
        obj.insert(QString("groupName"), ::OpenAPI::toJsonValue(m_group_name));
    }
    if (m_stream_name_isSet) {
        obj.insert(QString("streamName"), ::OpenAPI::toJsonValue(m_stream_name));
    }
    if (m_deep_link_isSet) {
        obj.insert(QString("deepLink"), ::OpenAPI::toJsonValue(m_deep_link));
    }
    if (m_s3_deep_link_isSet) {
        obj.insert(QString("s3DeepLink"), ::OpenAPI::toJsonValue(m_s3_deep_link));
    }
    if (m_cloud_watch_logs_arn_isSet) {
        obj.insert(QString("cloudWatchLogsArn"), ::OpenAPI::toJsonValue(m_cloud_watch_logs_arn));
    }
    if (m_s3_logs_arn_isSet) {
        obj.insert(QString("s3LogsArn"), ::OpenAPI::toJsonValue(m_s3_logs_arn));
    }
    if (m_cloud_watch_logs.isSet()) {
        obj.insert(QString("cloudWatchLogs"), ::OpenAPI::toJsonValue(m_cloud_watch_logs));
    }
    if (m_s3_logs.isSet()) {
        obj.insert(QString("s3Logs"), ::OpenAPI::toJsonValue(m_s3_logs));
    }
    return obj;
}

QString OAILogsLocation::getGroupName() const {
    return m_group_name;
}
void OAILogsLocation::setGroupName(const QString &group_name) {
    m_group_name = group_name;
    m_group_name_isSet = true;
}

bool OAILogsLocation::is_group_name_Set() const{
    return m_group_name_isSet;
}

bool OAILogsLocation::is_group_name_Valid() const{
    return m_group_name_isValid;
}

QString OAILogsLocation::getStreamName() const {
    return m_stream_name;
}
void OAILogsLocation::setStreamName(const QString &stream_name) {
    m_stream_name = stream_name;
    m_stream_name_isSet = true;
}

bool OAILogsLocation::is_stream_name_Set() const{
    return m_stream_name_isSet;
}

bool OAILogsLocation::is_stream_name_Valid() const{
    return m_stream_name_isValid;
}

QString OAILogsLocation::getDeepLink() const {
    return m_deep_link;
}
void OAILogsLocation::setDeepLink(const QString &deep_link) {
    m_deep_link = deep_link;
    m_deep_link_isSet = true;
}

bool OAILogsLocation::is_deep_link_Set() const{
    return m_deep_link_isSet;
}

bool OAILogsLocation::is_deep_link_Valid() const{
    return m_deep_link_isValid;
}

QString OAILogsLocation::getS3DeepLink() const {
    return m_s3_deep_link;
}
void OAILogsLocation::setS3DeepLink(const QString &s3_deep_link) {
    m_s3_deep_link = s3_deep_link;
    m_s3_deep_link_isSet = true;
}

bool OAILogsLocation::is_s3_deep_link_Set() const{
    return m_s3_deep_link_isSet;
}

bool OAILogsLocation::is_s3_deep_link_Valid() const{
    return m_s3_deep_link_isValid;
}

QString OAILogsLocation::getCloudWatchLogsArn() const {
    return m_cloud_watch_logs_arn;
}
void OAILogsLocation::setCloudWatchLogsArn(const QString &cloud_watch_logs_arn) {
    m_cloud_watch_logs_arn = cloud_watch_logs_arn;
    m_cloud_watch_logs_arn_isSet = true;
}

bool OAILogsLocation::is_cloud_watch_logs_arn_Set() const{
    return m_cloud_watch_logs_arn_isSet;
}

bool OAILogsLocation::is_cloud_watch_logs_arn_Valid() const{
    return m_cloud_watch_logs_arn_isValid;
}

QString OAILogsLocation::getS3LogsArn() const {
    return m_s3_logs_arn;
}
void OAILogsLocation::setS3LogsArn(const QString &s3_logs_arn) {
    m_s3_logs_arn = s3_logs_arn;
    m_s3_logs_arn_isSet = true;
}

bool OAILogsLocation::is_s3_logs_arn_Set() const{
    return m_s3_logs_arn_isSet;
}

bool OAILogsLocation::is_s3_logs_arn_Valid() const{
    return m_s3_logs_arn_isValid;
}

OAILogsLocation_cloudWatchLogs OAILogsLocation::getCloudWatchLogs() const {
    return m_cloud_watch_logs;
}
void OAILogsLocation::setCloudWatchLogs(const OAILogsLocation_cloudWatchLogs &cloud_watch_logs) {
    m_cloud_watch_logs = cloud_watch_logs;
    m_cloud_watch_logs_isSet = true;
}

bool OAILogsLocation::is_cloud_watch_logs_Set() const{
    return m_cloud_watch_logs_isSet;
}

bool OAILogsLocation::is_cloud_watch_logs_Valid() const{
    return m_cloud_watch_logs_isValid;
}

OAILogsLocation_s3Logs OAILogsLocation::getS3Logs() const {
    return m_s3_logs;
}
void OAILogsLocation::setS3Logs(const OAILogsLocation_s3Logs &s3_logs) {
    m_s3_logs = s3_logs;
    m_s3_logs_isSet = true;
}

bool OAILogsLocation::is_s3_logs_Set() const{
    return m_s3_logs_isSet;
}

bool OAILogsLocation::is_s3_logs_Valid() const{
    return m_s3_logs_isValid;
}

bool OAILogsLocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deep_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_deep_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloud_watch_logs_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_logs_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloud_watch_logs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_logs.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILogsLocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
