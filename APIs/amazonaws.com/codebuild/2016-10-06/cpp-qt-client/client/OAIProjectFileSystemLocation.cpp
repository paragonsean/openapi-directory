/**
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectFileSystemLocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectFileSystemLocation::OAIProjectFileSystemLocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectFileSystemLocation::OAIProjectFileSystemLocation() {
    this->initializeModel();
}

OAIProjectFileSystemLocation::~OAIProjectFileSystemLocation() {}

void OAIProjectFileSystemLocation::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_mount_point_isSet = false;
    m_mount_point_isValid = false;

    m_identifier_isSet = false;
    m_identifier_isValid = false;

    m_mount_options_isSet = false;
    m_mount_options_isValid = false;
}

void OAIProjectFileSystemLocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectFileSystemLocation::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_mount_point_isValid = ::OpenAPI::fromJsonValue(m_mount_point, json[QString("mountPoint")]);
    m_mount_point_isSet = !json[QString("mountPoint")].isNull() && m_mount_point_isValid;

    m_identifier_isValid = ::OpenAPI::fromJsonValue(m_identifier, json[QString("identifier")]);
    m_identifier_isSet = !json[QString("identifier")].isNull() && m_identifier_isValid;

    m_mount_options_isValid = ::OpenAPI::fromJsonValue(m_mount_options, json[QString("mountOptions")]);
    m_mount_options_isSet = !json[QString("mountOptions")].isNull() && m_mount_options_isValid;
}

QString OAIProjectFileSystemLocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectFileSystemLocation::asJsonObject() const {
    QJsonObject obj;
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_mount_point_isSet) {
        obj.insert(QString("mountPoint"), ::OpenAPI::toJsonValue(m_mount_point));
    }
    if (m_identifier_isSet) {
        obj.insert(QString("identifier"), ::OpenAPI::toJsonValue(m_identifier));
    }
    if (m_mount_options_isSet) {
        obj.insert(QString("mountOptions"), ::OpenAPI::toJsonValue(m_mount_options));
    }
    return obj;
}

OAIFileSystemType OAIProjectFileSystemLocation::getType() const {
    return m_type;
}
void OAIProjectFileSystemLocation::setType(const OAIFileSystemType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIProjectFileSystemLocation::is_type_Set() const{
    return m_type_isSet;
}

bool OAIProjectFileSystemLocation::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIProjectFileSystemLocation::getLocation() const {
    return m_location;
}
void OAIProjectFileSystemLocation::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIProjectFileSystemLocation::is_location_Set() const{
    return m_location_isSet;
}

bool OAIProjectFileSystemLocation::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIProjectFileSystemLocation::getMountPoint() const {
    return m_mount_point;
}
void OAIProjectFileSystemLocation::setMountPoint(const QString &mount_point) {
    m_mount_point = mount_point;
    m_mount_point_isSet = true;
}

bool OAIProjectFileSystemLocation::is_mount_point_Set() const{
    return m_mount_point_isSet;
}

bool OAIProjectFileSystemLocation::is_mount_point_Valid() const{
    return m_mount_point_isValid;
}

QString OAIProjectFileSystemLocation::getIdentifier() const {
    return m_identifier;
}
void OAIProjectFileSystemLocation::setIdentifier(const QString &identifier) {
    m_identifier = identifier;
    m_identifier_isSet = true;
}

bool OAIProjectFileSystemLocation::is_identifier_Set() const{
    return m_identifier_isSet;
}

bool OAIProjectFileSystemLocation::is_identifier_Valid() const{
    return m_identifier_isValid;
}

QString OAIProjectFileSystemLocation::getMountOptions() const {
    return m_mount_options;
}
void OAIProjectFileSystemLocation::setMountOptions(const QString &mount_options) {
    m_mount_options = mount_options;
    m_mount_options_isSet = true;
}

bool OAIProjectFileSystemLocation::is_mount_options_Set() const{
    return m_mount_options_isSet;
}

bool OAIProjectFileSystemLocation::is_mount_options_Valid() const{
    return m_mount_options_isValid;
}

bool OAIProjectFileSystemLocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mount_point_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mount_options_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectFileSystemLocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
