/**
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateProjectVisibilityInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateProjectVisibilityInput::OAIUpdateProjectVisibilityInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateProjectVisibilityInput::OAIUpdateProjectVisibilityInput() {
    this->initializeModel();
}

OAIUpdateProjectVisibilityInput::~OAIUpdateProjectVisibilityInput() {}

void OAIUpdateProjectVisibilityInput::initializeModel() {

    m_project_arn_isSet = false;
    m_project_arn_isValid = false;

    m_project_visibility_isSet = false;
    m_project_visibility_isValid = false;

    m_resource_access_role_isSet = false;
    m_resource_access_role_isValid = false;
}

void OAIUpdateProjectVisibilityInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateProjectVisibilityInput::fromJsonObject(QJsonObject json) {

    m_project_arn_isValid = ::OpenAPI::fromJsonValue(m_project_arn, json[QString("projectArn")]);
    m_project_arn_isSet = !json[QString("projectArn")].isNull() && m_project_arn_isValid;

    m_project_visibility_isValid = ::OpenAPI::fromJsonValue(m_project_visibility, json[QString("projectVisibility")]);
    m_project_visibility_isSet = !json[QString("projectVisibility")].isNull() && m_project_visibility_isValid;

    m_resource_access_role_isValid = ::OpenAPI::fromJsonValue(m_resource_access_role, json[QString("resourceAccessRole")]);
    m_resource_access_role_isSet = !json[QString("resourceAccessRole")].isNull() && m_resource_access_role_isValid;
}

QString OAIUpdateProjectVisibilityInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateProjectVisibilityInput::asJsonObject() const {
    QJsonObject obj;
    if (m_project_arn_isSet) {
        obj.insert(QString("projectArn"), ::OpenAPI::toJsonValue(m_project_arn));
    }
    if (m_project_visibility.isSet()) {
        obj.insert(QString("projectVisibility"), ::OpenAPI::toJsonValue(m_project_visibility));
    }
    if (m_resource_access_role_isSet) {
        obj.insert(QString("resourceAccessRole"), ::OpenAPI::toJsonValue(m_resource_access_role));
    }
    return obj;
}

QString OAIUpdateProjectVisibilityInput::getProjectArn() const {
    return m_project_arn;
}
void OAIUpdateProjectVisibilityInput::setProjectArn(const QString &project_arn) {
    m_project_arn = project_arn;
    m_project_arn_isSet = true;
}

bool OAIUpdateProjectVisibilityInput::is_project_arn_Set() const{
    return m_project_arn_isSet;
}

bool OAIUpdateProjectVisibilityInput::is_project_arn_Valid() const{
    return m_project_arn_isValid;
}

OAIProjectVisibilityType OAIUpdateProjectVisibilityInput::getProjectVisibility() const {
    return m_project_visibility;
}
void OAIUpdateProjectVisibilityInput::setProjectVisibility(const OAIProjectVisibilityType &project_visibility) {
    m_project_visibility = project_visibility;
    m_project_visibility_isSet = true;
}

bool OAIUpdateProjectVisibilityInput::is_project_visibility_Set() const{
    return m_project_visibility_isSet;
}

bool OAIUpdateProjectVisibilityInput::is_project_visibility_Valid() const{
    return m_project_visibility_isValid;
}

QString OAIUpdateProjectVisibilityInput::getResourceAccessRole() const {
    return m_resource_access_role;
}
void OAIUpdateProjectVisibilityInput::setResourceAccessRole(const QString &resource_access_role) {
    m_resource_access_role = resource_access_role;
    m_resource_access_role_isSet = true;
}

bool OAIUpdateProjectVisibilityInput::is_resource_access_role_Set() const{
    return m_resource_access_role_isSet;
}

bool OAIUpdateProjectVisibilityInput::is_resource_access_role_Valid() const{
    return m_resource_access_role_isValid;
}

bool OAIUpdateProjectVisibilityInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_project_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_access_role_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateProjectVisibilityInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_project_arn_isValid && m_project_visibility_isValid && true;
}

} // namespace OpenAPI
