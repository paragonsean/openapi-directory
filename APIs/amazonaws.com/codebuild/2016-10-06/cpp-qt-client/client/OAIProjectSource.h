/**
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIProjectSource.h
 *
 * Information about the build input source code for the build project.
 */

#ifndef OAIProjectSource_H
#define OAIProjectSource_H

#include <QJsonObject>

#include "OAIProjectSource_auth.h"
#include "OAIProjectSource_gitSubmodulesConfig.h"
#include "OAISourceType.h"
#include "OAIStartBuildInput_buildStatusConfigOverride.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIProjectSource_gitSubmodulesConfig;
class OAIProjectSource_auth;
class OAIStartBuildInput_buildStatusConfigOverride;

class OAIProjectSource : public OAIObject {
public:
    OAIProjectSource();
    OAIProjectSource(QString json);
    ~OAIProjectSource() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAISourceType getType() const;
    void setType(const OAISourceType &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getLocation() const;
    void setLocation(const QString &location);
    bool is_location_Set() const;
    bool is_location_Valid() const;

    qint32 getGitCloneDepth() const;
    void setGitCloneDepth(const qint32 &git_clone_depth);
    bool is_git_clone_depth_Set() const;
    bool is_git_clone_depth_Valid() const;

    OAIProjectSource_gitSubmodulesConfig getGitSubmodulesConfig() const;
    void setGitSubmodulesConfig(const OAIProjectSource_gitSubmodulesConfig &git_submodules_config);
    bool is_git_submodules_config_Set() const;
    bool is_git_submodules_config_Valid() const;

    QString getBuildspec() const;
    void setBuildspec(const QString &buildspec);
    bool is_buildspec_Set() const;
    bool is_buildspec_Valid() const;

    OAIProjectSource_auth getAuth() const;
    void setAuth(const OAIProjectSource_auth &auth);
    bool is_auth_Set() const;
    bool is_auth_Valid() const;

    bool getReportBuildStatus() const;
    void setReportBuildStatus(const bool &report_build_status);
    bool is_report_build_status_Set() const;
    bool is_report_build_status_Valid() const;

    OAIStartBuildInput_buildStatusConfigOverride getBuildStatusConfig() const;
    void setBuildStatusConfig(const OAIStartBuildInput_buildStatusConfigOverride &build_status_config);
    bool is_build_status_config_Set() const;
    bool is_build_status_config_Valid() const;

    bool getInsecureSsl() const;
    void setInsecureSsl(const bool &insecure_ssl);
    bool is_insecure_ssl_Set() const;
    bool is_insecure_ssl_Valid() const;

    QString getSourceIdentifier() const;
    void setSourceIdentifier(const QString &source_identifier);
    bool is_source_identifier_Set() const;
    bool is_source_identifier_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAISourceType m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_location;
    bool m_location_isSet;
    bool m_location_isValid;

    qint32 m_git_clone_depth;
    bool m_git_clone_depth_isSet;
    bool m_git_clone_depth_isValid;

    OAIProjectSource_gitSubmodulesConfig m_git_submodules_config;
    bool m_git_submodules_config_isSet;
    bool m_git_submodules_config_isValid;

    QString m_buildspec;
    bool m_buildspec_isSet;
    bool m_buildspec_isValid;

    OAIProjectSource_auth m_auth;
    bool m_auth_isSet;
    bool m_auth_isValid;

    bool m_report_build_status;
    bool m_report_build_status_isSet;
    bool m_report_build_status_isValid;

    OAIStartBuildInput_buildStatusConfigOverride m_build_status_config;
    bool m_build_status_config_isSet;
    bool m_build_status_config_isValid;

    bool m_insecure_ssl;
    bool m_insecure_ssl_isSet;
    bool m_insecure_ssl_isValid;

    QString m_source_identifier;
    bool m_source_identifier_isSet;
    bool m_source_identifier_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIProjectSource)

#endif // OAIProjectSource_H
