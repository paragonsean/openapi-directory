/**
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIStartBuildInput_cacheOverride.h
 *
 * 
 */

#ifndef OAIStartBuildInput_cacheOverride_H
#define OAIStartBuildInput_cacheOverride_H

#include <QJsonObject>

#include "OAICacheType.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIStartBuildInput_cacheOverride : public OAIObject {
public:
    OAIStartBuildInput_cacheOverride();
    OAIStartBuildInput_cacheOverride(QString json);
    ~OAIStartBuildInput_cacheOverride() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAICacheType getType() const;
    void setType(const OAICacheType &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getLocation() const;
    void setLocation(const QString &location);
    bool is_location_Set() const;
    bool is_location_Valid() const;

    QList getModes() const;
    void setModes(const QList &modes);
    bool is_modes_Set() const;
    bool is_modes_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAICacheType m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_location;
    bool m_location_isSet;
    bool m_location_isValid;

    QList m_modes;
    bool m_modes_isSet;
    bool m_modes_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIStartBuildInput_cacheOverride)

#endif // OAIStartBuildInput_cacheOverride_H
