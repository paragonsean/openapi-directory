/**
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateWebhookInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateWebhookInput::OAIUpdateWebhookInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateWebhookInput::OAIUpdateWebhookInput() {
    this->initializeModel();
}

OAIUpdateWebhookInput::~OAIUpdateWebhookInput() {}

void OAIUpdateWebhookInput::initializeModel() {

    m_project_name_isSet = false;
    m_project_name_isValid = false;

    m_branch_filter_isSet = false;
    m_branch_filter_isValid = false;

    m_rotate_secret_isSet = false;
    m_rotate_secret_isValid = false;

    m_filter_groups_isSet = false;
    m_filter_groups_isValid = false;

    m_build_type_isSet = false;
    m_build_type_isValid = false;
}

void OAIUpdateWebhookInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateWebhookInput::fromJsonObject(QJsonObject json) {

    m_project_name_isValid = ::OpenAPI::fromJsonValue(m_project_name, json[QString("projectName")]);
    m_project_name_isSet = !json[QString("projectName")].isNull() && m_project_name_isValid;

    m_branch_filter_isValid = ::OpenAPI::fromJsonValue(m_branch_filter, json[QString("branchFilter")]);
    m_branch_filter_isSet = !json[QString("branchFilter")].isNull() && m_branch_filter_isValid;

    m_rotate_secret_isValid = ::OpenAPI::fromJsonValue(m_rotate_secret, json[QString("rotateSecret")]);
    m_rotate_secret_isSet = !json[QString("rotateSecret")].isNull() && m_rotate_secret_isValid;

    m_filter_groups_isValid = ::OpenAPI::fromJsonValue(m_filter_groups, json[QString("filterGroups")]);
    m_filter_groups_isSet = !json[QString("filterGroups")].isNull() && m_filter_groups_isValid;

    m_build_type_isValid = ::OpenAPI::fromJsonValue(m_build_type, json[QString("buildType")]);
    m_build_type_isSet = !json[QString("buildType")].isNull() && m_build_type_isValid;
}

QString OAIUpdateWebhookInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateWebhookInput::asJsonObject() const {
    QJsonObject obj;
    if (m_project_name_isSet) {
        obj.insert(QString("projectName"), ::OpenAPI::toJsonValue(m_project_name));
    }
    if (m_branch_filter_isSet) {
        obj.insert(QString("branchFilter"), ::OpenAPI::toJsonValue(m_branch_filter));
    }
    if (m_rotate_secret_isSet) {
        obj.insert(QString("rotateSecret"), ::OpenAPI::toJsonValue(m_rotate_secret));
    }
    if (m_filter_groups.isSet()) {
        obj.insert(QString("filterGroups"), ::OpenAPI::toJsonValue(m_filter_groups));
    }
    if (m_build_type.isSet()) {
        obj.insert(QString("buildType"), ::OpenAPI::toJsonValue(m_build_type));
    }
    return obj;
}

QString OAIUpdateWebhookInput::getProjectName() const {
    return m_project_name;
}
void OAIUpdateWebhookInput::setProjectName(const QString &project_name) {
    m_project_name = project_name;
    m_project_name_isSet = true;
}

bool OAIUpdateWebhookInput::is_project_name_Set() const{
    return m_project_name_isSet;
}

bool OAIUpdateWebhookInput::is_project_name_Valid() const{
    return m_project_name_isValid;
}

QString OAIUpdateWebhookInput::getBranchFilter() const {
    return m_branch_filter;
}
void OAIUpdateWebhookInput::setBranchFilter(const QString &branch_filter) {
    m_branch_filter = branch_filter;
    m_branch_filter_isSet = true;
}

bool OAIUpdateWebhookInput::is_branch_filter_Set() const{
    return m_branch_filter_isSet;
}

bool OAIUpdateWebhookInput::is_branch_filter_Valid() const{
    return m_branch_filter_isValid;
}

bool OAIUpdateWebhookInput::getRotateSecret() const {
    return m_rotate_secret;
}
void OAIUpdateWebhookInput::setRotateSecret(const bool &rotate_secret) {
    m_rotate_secret = rotate_secret;
    m_rotate_secret_isSet = true;
}

bool OAIUpdateWebhookInput::is_rotate_secret_Set() const{
    return m_rotate_secret_isSet;
}

bool OAIUpdateWebhookInput::is_rotate_secret_Valid() const{
    return m_rotate_secret_isValid;
}

QList OAIUpdateWebhookInput::getFilterGroups() const {
    return m_filter_groups;
}
void OAIUpdateWebhookInput::setFilterGroups(const QList &filter_groups) {
    m_filter_groups = filter_groups;
    m_filter_groups_isSet = true;
}

bool OAIUpdateWebhookInput::is_filter_groups_Set() const{
    return m_filter_groups_isSet;
}

bool OAIUpdateWebhookInput::is_filter_groups_Valid() const{
    return m_filter_groups_isValid;
}

OAIWebhookBuildType OAIUpdateWebhookInput::getBuildType() const {
    return m_build_type;
}
void OAIUpdateWebhookInput::setBuildType(const OAIWebhookBuildType &build_type) {
    m_build_type = build_type;
    m_build_type_isSet = true;
}

bool OAIUpdateWebhookInput::is_build_type_Set() const{
    return m_build_type_isSet;
}

bool OAIUpdateWebhookInput::is_build_type_Valid() const{
    return m_build_type_isValid;
}

bool OAIUpdateWebhookInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_project_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rotate_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateWebhookInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_project_name_isValid && true;
}

} // namespace OpenAPI
