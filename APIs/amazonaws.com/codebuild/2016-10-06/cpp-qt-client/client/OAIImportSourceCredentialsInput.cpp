/**
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImportSourceCredentialsInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImportSourceCredentialsInput::OAIImportSourceCredentialsInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImportSourceCredentialsInput::OAIImportSourceCredentialsInput() {
    this->initializeModel();
}

OAIImportSourceCredentialsInput::~OAIImportSourceCredentialsInput() {}

void OAIImportSourceCredentialsInput::initializeModel() {

    m_username_isSet = false;
    m_username_isValid = false;

    m_token_isSet = false;
    m_token_isValid = false;

    m_server_type_isSet = false;
    m_server_type_isValid = false;

    m_auth_type_isSet = false;
    m_auth_type_isValid = false;

    m_should_overwrite_isSet = false;
    m_should_overwrite_isValid = false;
}

void OAIImportSourceCredentialsInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImportSourceCredentialsInput::fromJsonObject(QJsonObject json) {

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;

    m_token_isValid = ::OpenAPI::fromJsonValue(m_token, json[QString("token")]);
    m_token_isSet = !json[QString("token")].isNull() && m_token_isValid;

    m_server_type_isValid = ::OpenAPI::fromJsonValue(m_server_type, json[QString("serverType")]);
    m_server_type_isSet = !json[QString("serverType")].isNull() && m_server_type_isValid;

    m_auth_type_isValid = ::OpenAPI::fromJsonValue(m_auth_type, json[QString("authType")]);
    m_auth_type_isSet = !json[QString("authType")].isNull() && m_auth_type_isValid;

    m_should_overwrite_isValid = ::OpenAPI::fromJsonValue(m_should_overwrite, json[QString("shouldOverwrite")]);
    m_should_overwrite_isSet = !json[QString("shouldOverwrite")].isNull() && m_should_overwrite_isValid;
}

QString OAIImportSourceCredentialsInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImportSourceCredentialsInput::asJsonObject() const {
    QJsonObject obj;
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    if (m_token_isSet) {
        obj.insert(QString("token"), ::OpenAPI::toJsonValue(m_token));
    }
    if (m_server_type.isSet()) {
        obj.insert(QString("serverType"), ::OpenAPI::toJsonValue(m_server_type));
    }
    if (m_auth_type.isSet()) {
        obj.insert(QString("authType"), ::OpenAPI::toJsonValue(m_auth_type));
    }
    if (m_should_overwrite_isSet) {
        obj.insert(QString("shouldOverwrite"), ::OpenAPI::toJsonValue(m_should_overwrite));
    }
    return obj;
}

QString OAIImportSourceCredentialsInput::getUsername() const {
    return m_username;
}
void OAIImportSourceCredentialsInput::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIImportSourceCredentialsInput::is_username_Set() const{
    return m_username_isSet;
}

bool OAIImportSourceCredentialsInput::is_username_Valid() const{
    return m_username_isValid;
}

QString OAIImportSourceCredentialsInput::getToken() const {
    return m_token;
}
void OAIImportSourceCredentialsInput::setToken(const QString &token) {
    m_token = token;
    m_token_isSet = true;
}

bool OAIImportSourceCredentialsInput::is_token_Set() const{
    return m_token_isSet;
}

bool OAIImportSourceCredentialsInput::is_token_Valid() const{
    return m_token_isValid;
}

OAIServerType OAIImportSourceCredentialsInput::getServerType() const {
    return m_server_type;
}
void OAIImportSourceCredentialsInput::setServerType(const OAIServerType &server_type) {
    m_server_type = server_type;
    m_server_type_isSet = true;
}

bool OAIImportSourceCredentialsInput::is_server_type_Set() const{
    return m_server_type_isSet;
}

bool OAIImportSourceCredentialsInput::is_server_type_Valid() const{
    return m_server_type_isValid;
}

OAIAuthType OAIImportSourceCredentialsInput::getAuthType() const {
    return m_auth_type;
}
void OAIImportSourceCredentialsInput::setAuthType(const OAIAuthType &auth_type) {
    m_auth_type = auth_type;
    m_auth_type_isSet = true;
}

bool OAIImportSourceCredentialsInput::is_auth_type_Set() const{
    return m_auth_type_isSet;
}

bool OAIImportSourceCredentialsInput::is_auth_type_Valid() const{
    return m_auth_type_isValid;
}

bool OAIImportSourceCredentialsInput::getShouldOverwrite() const {
    return m_should_overwrite;
}
void OAIImportSourceCredentialsInput::setShouldOverwrite(const bool &should_overwrite) {
    m_should_overwrite = should_overwrite;
    m_should_overwrite_isSet = true;
}

bool OAIImportSourceCredentialsInput::is_should_overwrite_Set() const{
    return m_should_overwrite_isSet;
}

bool OAIImportSourceCredentialsInput::is_should_overwrite_Valid() const{
    return m_should_overwrite_isValid;
}

bool OAIImportSourceCredentialsInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_should_overwrite_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImportSourceCredentialsInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_token_isValid && m_server_type_isValid && m_auth_type_isValid && true;
}

} // namespace OpenAPI
