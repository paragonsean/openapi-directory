/**
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReportGroup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReportGroup::OAIReportGroup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReportGroup::OAIReportGroup() {
    this->initializeModel();
}

OAIReportGroup::~OAIReportGroup() {}

void OAIReportGroup::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_export_config_isSet = false;
    m_export_config_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_last_modified_isSet = false;
    m_last_modified_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIReportGroup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReportGroup::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_export_config_isValid = ::OpenAPI::fromJsonValue(m_export_config, json[QString("exportConfig")]);
    m_export_config_isSet = !json[QString("exportConfig")].isNull() && m_export_config_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_last_modified_isValid = ::OpenAPI::fromJsonValue(m_last_modified, json[QString("lastModified")]);
    m_last_modified_isSet = !json[QString("lastModified")].isNull() && m_last_modified_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIReportGroup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReportGroup::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_export_config.isSet()) {
        obj.insert(QString("exportConfig"), ::OpenAPI::toJsonValue(m_export_config));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_last_modified_isSet) {
        obj.insert(QString("lastModified"), ::OpenAPI::toJsonValue(m_last_modified));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIReportGroup::getArn() const {
    return m_arn;
}
void OAIReportGroup::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIReportGroup::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIReportGroup::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIReportGroup::getName() const {
    return m_name;
}
void OAIReportGroup::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIReportGroup::is_name_Set() const{
    return m_name_isSet;
}

bool OAIReportGroup::is_name_Valid() const{
    return m_name_isValid;
}

OAIReportType OAIReportGroup::getType() const {
    return m_type;
}
void OAIReportGroup::setType(const OAIReportType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIReportGroup::is_type_Set() const{
    return m_type_isSet;
}

bool OAIReportGroup::is_type_Valid() const{
    return m_type_isValid;
}

OAIReportGroup_exportConfig OAIReportGroup::getExportConfig() const {
    return m_export_config;
}
void OAIReportGroup::setExportConfig(const OAIReportGroup_exportConfig &export_config) {
    m_export_config = export_config;
    m_export_config_isSet = true;
}

bool OAIReportGroup::is_export_config_Set() const{
    return m_export_config_isSet;
}

bool OAIReportGroup::is_export_config_Valid() const{
    return m_export_config_isValid;
}

QDateTime OAIReportGroup::getCreated() const {
    return m_created;
}
void OAIReportGroup::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIReportGroup::is_created_Set() const{
    return m_created_isSet;
}

bool OAIReportGroup::is_created_Valid() const{
    return m_created_isValid;
}

QDateTime OAIReportGroup::getLastModified() const {
    return m_last_modified;
}
void OAIReportGroup::setLastModified(const QDateTime &last_modified) {
    m_last_modified = last_modified;
    m_last_modified_isSet = true;
}

bool OAIReportGroup::is_last_modified_Set() const{
    return m_last_modified_isSet;
}

bool OAIReportGroup::is_last_modified_Valid() const{
    return m_last_modified_isValid;
}

QList OAIReportGroup::getTags() const {
    return m_tags;
}
void OAIReportGroup::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIReportGroup::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIReportGroup::is_tags_Valid() const{
    return m_tags_isValid;
}

OAIReportGroupStatusType OAIReportGroup::getStatus() const {
    return m_status;
}
void OAIReportGroup::setStatus(const OAIReportGroupStatusType &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIReportGroup::is_status_Set() const{
    return m_status_isSet;
}

bool OAIReportGroup::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIReportGroup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_export_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReportGroup::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
