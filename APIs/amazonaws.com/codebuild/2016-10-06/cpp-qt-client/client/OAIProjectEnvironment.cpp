/**
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectEnvironment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectEnvironment::OAIProjectEnvironment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectEnvironment::OAIProjectEnvironment() {
    this->initializeModel();
}

OAIProjectEnvironment::~OAIProjectEnvironment() {}

void OAIProjectEnvironment::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_compute_type_isSet = false;
    m_compute_type_isValid = false;

    m_environment_variables_isSet = false;
    m_environment_variables_isValid = false;

    m_privileged_mode_isSet = false;
    m_privileged_mode_isValid = false;

    m_certificate_isSet = false;
    m_certificate_isValid = false;

    m_registry_credential_isSet = false;
    m_registry_credential_isValid = false;

    m_image_pull_credentials_type_isSet = false;
    m_image_pull_credentials_type_isValid = false;
}

void OAIProjectEnvironment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectEnvironment::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_compute_type_isValid = ::OpenAPI::fromJsonValue(m_compute_type, json[QString("computeType")]);
    m_compute_type_isSet = !json[QString("computeType")].isNull() && m_compute_type_isValid;

    m_environment_variables_isValid = ::OpenAPI::fromJsonValue(m_environment_variables, json[QString("environmentVariables")]);
    m_environment_variables_isSet = !json[QString("environmentVariables")].isNull() && m_environment_variables_isValid;

    m_privileged_mode_isValid = ::OpenAPI::fromJsonValue(m_privileged_mode, json[QString("privilegedMode")]);
    m_privileged_mode_isSet = !json[QString("privilegedMode")].isNull() && m_privileged_mode_isValid;

    m_certificate_isValid = ::OpenAPI::fromJsonValue(m_certificate, json[QString("certificate")]);
    m_certificate_isSet = !json[QString("certificate")].isNull() && m_certificate_isValid;

    m_registry_credential_isValid = ::OpenAPI::fromJsonValue(m_registry_credential, json[QString("registryCredential")]);
    m_registry_credential_isSet = !json[QString("registryCredential")].isNull() && m_registry_credential_isValid;

    m_image_pull_credentials_type_isValid = ::OpenAPI::fromJsonValue(m_image_pull_credentials_type, json[QString("imagePullCredentialsType")]);
    m_image_pull_credentials_type_isSet = !json[QString("imagePullCredentialsType")].isNull() && m_image_pull_credentials_type_isValid;
}

QString OAIProjectEnvironment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectEnvironment::asJsonObject() const {
    QJsonObject obj;
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_image_isSet) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_compute_type.isSet()) {
        obj.insert(QString("computeType"), ::OpenAPI::toJsonValue(m_compute_type));
    }
    if (m_environment_variables.isSet()) {
        obj.insert(QString("environmentVariables"), ::OpenAPI::toJsonValue(m_environment_variables));
    }
    if (m_privileged_mode_isSet) {
        obj.insert(QString("privilegedMode"), ::OpenAPI::toJsonValue(m_privileged_mode));
    }
    if (m_certificate_isSet) {
        obj.insert(QString("certificate"), ::OpenAPI::toJsonValue(m_certificate));
    }
    if (m_registry_credential.isSet()) {
        obj.insert(QString("registryCredential"), ::OpenAPI::toJsonValue(m_registry_credential));
    }
    if (m_image_pull_credentials_type.isSet()) {
        obj.insert(QString("imagePullCredentialsType"), ::OpenAPI::toJsonValue(m_image_pull_credentials_type));
    }
    return obj;
}

OAIEnvironmentType OAIProjectEnvironment::getType() const {
    return m_type;
}
void OAIProjectEnvironment::setType(const OAIEnvironmentType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIProjectEnvironment::is_type_Set() const{
    return m_type_isSet;
}

bool OAIProjectEnvironment::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIProjectEnvironment::getImage() const {
    return m_image;
}
void OAIProjectEnvironment::setImage(const QString &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIProjectEnvironment::is_image_Set() const{
    return m_image_isSet;
}

bool OAIProjectEnvironment::is_image_Valid() const{
    return m_image_isValid;
}

OAIComputeType OAIProjectEnvironment::getComputeType() const {
    return m_compute_type;
}
void OAIProjectEnvironment::setComputeType(const OAIComputeType &compute_type) {
    m_compute_type = compute_type;
    m_compute_type_isSet = true;
}

bool OAIProjectEnvironment::is_compute_type_Set() const{
    return m_compute_type_isSet;
}

bool OAIProjectEnvironment::is_compute_type_Valid() const{
    return m_compute_type_isValid;
}

QList OAIProjectEnvironment::getEnvironmentVariables() const {
    return m_environment_variables;
}
void OAIProjectEnvironment::setEnvironmentVariables(const QList &environment_variables) {
    m_environment_variables = environment_variables;
    m_environment_variables_isSet = true;
}

bool OAIProjectEnvironment::is_environment_variables_Set() const{
    return m_environment_variables_isSet;
}

bool OAIProjectEnvironment::is_environment_variables_Valid() const{
    return m_environment_variables_isValid;
}

bool OAIProjectEnvironment::getPrivilegedMode() const {
    return m_privileged_mode;
}
void OAIProjectEnvironment::setPrivilegedMode(const bool &privileged_mode) {
    m_privileged_mode = privileged_mode;
    m_privileged_mode_isSet = true;
}

bool OAIProjectEnvironment::is_privileged_mode_Set() const{
    return m_privileged_mode_isSet;
}

bool OAIProjectEnvironment::is_privileged_mode_Valid() const{
    return m_privileged_mode_isValid;
}

QString OAIProjectEnvironment::getCertificate() const {
    return m_certificate;
}
void OAIProjectEnvironment::setCertificate(const QString &certificate) {
    m_certificate = certificate;
    m_certificate_isSet = true;
}

bool OAIProjectEnvironment::is_certificate_Set() const{
    return m_certificate_isSet;
}

bool OAIProjectEnvironment::is_certificate_Valid() const{
    return m_certificate_isValid;
}

OAIProjectEnvironment_registryCredential OAIProjectEnvironment::getRegistryCredential() const {
    return m_registry_credential;
}
void OAIProjectEnvironment::setRegistryCredential(const OAIProjectEnvironment_registryCredential &registry_credential) {
    m_registry_credential = registry_credential;
    m_registry_credential_isSet = true;
}

bool OAIProjectEnvironment::is_registry_credential_Set() const{
    return m_registry_credential_isSet;
}

bool OAIProjectEnvironment::is_registry_credential_Valid() const{
    return m_registry_credential_isValid;
}

OAIImagePullCredentialsType OAIProjectEnvironment::getImagePullCredentialsType() const {
    return m_image_pull_credentials_type;
}
void OAIProjectEnvironment::setImagePullCredentialsType(const OAIImagePullCredentialsType &image_pull_credentials_type) {
    m_image_pull_credentials_type = image_pull_credentials_type;
    m_image_pull_credentials_type_isSet = true;
}

bool OAIProjectEnvironment::is_image_pull_credentials_type_Set() const{
    return m_image_pull_credentials_type_isSet;
}

bool OAIProjectEnvironment::is_image_pull_credentials_type_Valid() const{
    return m_image_pull_credentials_type_isValid;
}

bool OAIProjectEnvironment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compute_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_variables.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_privileged_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registry_credential.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_pull_credentials_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectEnvironment::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && m_image_isValid && m_compute_type_isValid && true;
}

} // namespace OpenAPI
