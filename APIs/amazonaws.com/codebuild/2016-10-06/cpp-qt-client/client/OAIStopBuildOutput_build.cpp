/**
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStopBuildOutput_build.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStopBuildOutput_build::OAIStopBuildOutput_build(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStopBuildOutput_build::OAIStopBuildOutput_build() {
    this->initializeModel();
}

OAIStopBuildOutput_build::~OAIStopBuildOutput_build() {}

void OAIStopBuildOutput_build::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_build_number_isSet = false;
    m_build_number_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_current_phase_isSet = false;
    m_current_phase_isValid = false;

    m_build_status_isSet = false;
    m_build_status_isValid = false;

    m_source_version_isSet = false;
    m_source_version_isValid = false;

    m_resolved_source_version_isSet = false;
    m_resolved_source_version_isValid = false;

    m_project_name_isSet = false;
    m_project_name_isValid = false;

    m_phases_isSet = false;
    m_phases_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_secondary_sources_isSet = false;
    m_secondary_sources_isValid = false;

    m_secondary_source_versions_isSet = false;
    m_secondary_source_versions_isValid = false;

    m_artifacts_isSet = false;
    m_artifacts_isValid = false;

    m_secondary_artifacts_isSet = false;
    m_secondary_artifacts_isValid = false;

    m_cache_isSet = false;
    m_cache_isValid = false;

    m_environment_isSet = false;
    m_environment_isValid = false;

    m_service_role_isSet = false;
    m_service_role_isValid = false;

    m_logs_isSet = false;
    m_logs_isValid = false;

    m_timeout_in_minutes_isSet = false;
    m_timeout_in_minutes_isValid = false;

    m_queued_timeout_in_minutes_isSet = false;
    m_queued_timeout_in_minutes_isValid = false;

    m_build_complete_isSet = false;
    m_build_complete_isValid = false;

    m_initiator_isSet = false;
    m_initiator_isValid = false;

    m_vpc_config_isSet = false;
    m_vpc_config_isValid = false;

    m_network_interface_isSet = false;
    m_network_interface_isValid = false;

    m_encryption_key_isSet = false;
    m_encryption_key_isValid = false;

    m_exported_environment_variables_isSet = false;
    m_exported_environment_variables_isValid = false;

    m_report_arns_isSet = false;
    m_report_arns_isValid = false;

    m_file_system_locations_isSet = false;
    m_file_system_locations_isValid = false;

    m_debug_session_isSet = false;
    m_debug_session_isValid = false;

    m_build_batch_arn_isSet = false;
    m_build_batch_arn_isValid = false;
}

void OAIStopBuildOutput_build::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStopBuildOutput_build::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_build_number_isValid = ::OpenAPI::fromJsonValue(m_build_number, json[QString("buildNumber")]);
    m_build_number_isSet = !json[QString("buildNumber")].isNull() && m_build_number_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_current_phase_isValid = ::OpenAPI::fromJsonValue(m_current_phase, json[QString("currentPhase")]);
    m_current_phase_isSet = !json[QString("currentPhase")].isNull() && m_current_phase_isValid;

    m_build_status_isValid = ::OpenAPI::fromJsonValue(m_build_status, json[QString("buildStatus")]);
    m_build_status_isSet = !json[QString("buildStatus")].isNull() && m_build_status_isValid;

    m_source_version_isValid = ::OpenAPI::fromJsonValue(m_source_version, json[QString("sourceVersion")]);
    m_source_version_isSet = !json[QString("sourceVersion")].isNull() && m_source_version_isValid;

    m_resolved_source_version_isValid = ::OpenAPI::fromJsonValue(m_resolved_source_version, json[QString("resolvedSourceVersion")]);
    m_resolved_source_version_isSet = !json[QString("resolvedSourceVersion")].isNull() && m_resolved_source_version_isValid;

    m_project_name_isValid = ::OpenAPI::fromJsonValue(m_project_name, json[QString("projectName")]);
    m_project_name_isSet = !json[QString("projectName")].isNull() && m_project_name_isValid;

    m_phases_isValid = ::OpenAPI::fromJsonValue(m_phases, json[QString("phases")]);
    m_phases_isSet = !json[QString("phases")].isNull() && m_phases_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_secondary_sources_isValid = ::OpenAPI::fromJsonValue(m_secondary_sources, json[QString("secondarySources")]);
    m_secondary_sources_isSet = !json[QString("secondarySources")].isNull() && m_secondary_sources_isValid;

    m_secondary_source_versions_isValid = ::OpenAPI::fromJsonValue(m_secondary_source_versions, json[QString("secondarySourceVersions")]);
    m_secondary_source_versions_isSet = !json[QString("secondarySourceVersions")].isNull() && m_secondary_source_versions_isValid;

    m_artifacts_isValid = ::OpenAPI::fromJsonValue(m_artifacts, json[QString("artifacts")]);
    m_artifacts_isSet = !json[QString("artifacts")].isNull() && m_artifacts_isValid;

    m_secondary_artifacts_isValid = ::OpenAPI::fromJsonValue(m_secondary_artifacts, json[QString("secondaryArtifacts")]);
    m_secondary_artifacts_isSet = !json[QString("secondaryArtifacts")].isNull() && m_secondary_artifacts_isValid;

    m_cache_isValid = ::OpenAPI::fromJsonValue(m_cache, json[QString("cache")]);
    m_cache_isSet = !json[QString("cache")].isNull() && m_cache_isValid;

    m_environment_isValid = ::OpenAPI::fromJsonValue(m_environment, json[QString("environment")]);
    m_environment_isSet = !json[QString("environment")].isNull() && m_environment_isValid;

    m_service_role_isValid = ::OpenAPI::fromJsonValue(m_service_role, json[QString("serviceRole")]);
    m_service_role_isSet = !json[QString("serviceRole")].isNull() && m_service_role_isValid;

    m_logs_isValid = ::OpenAPI::fromJsonValue(m_logs, json[QString("logs")]);
    m_logs_isSet = !json[QString("logs")].isNull() && m_logs_isValid;

    m_timeout_in_minutes_isValid = ::OpenAPI::fromJsonValue(m_timeout_in_minutes, json[QString("timeoutInMinutes")]);
    m_timeout_in_minutes_isSet = !json[QString("timeoutInMinutes")].isNull() && m_timeout_in_minutes_isValid;

    m_queued_timeout_in_minutes_isValid = ::OpenAPI::fromJsonValue(m_queued_timeout_in_minutes, json[QString("queuedTimeoutInMinutes")]);
    m_queued_timeout_in_minutes_isSet = !json[QString("queuedTimeoutInMinutes")].isNull() && m_queued_timeout_in_minutes_isValid;

    m_build_complete_isValid = ::OpenAPI::fromJsonValue(m_build_complete, json[QString("buildComplete")]);
    m_build_complete_isSet = !json[QString("buildComplete")].isNull() && m_build_complete_isValid;

    m_initiator_isValid = ::OpenAPI::fromJsonValue(m_initiator, json[QString("initiator")]);
    m_initiator_isSet = !json[QString("initiator")].isNull() && m_initiator_isValid;

    m_vpc_config_isValid = ::OpenAPI::fromJsonValue(m_vpc_config, json[QString("vpcConfig")]);
    m_vpc_config_isSet = !json[QString("vpcConfig")].isNull() && m_vpc_config_isValid;

    m_network_interface_isValid = ::OpenAPI::fromJsonValue(m_network_interface, json[QString("networkInterface")]);
    m_network_interface_isSet = !json[QString("networkInterface")].isNull() && m_network_interface_isValid;

    m_encryption_key_isValid = ::OpenAPI::fromJsonValue(m_encryption_key, json[QString("encryptionKey")]);
    m_encryption_key_isSet = !json[QString("encryptionKey")].isNull() && m_encryption_key_isValid;

    m_exported_environment_variables_isValid = ::OpenAPI::fromJsonValue(m_exported_environment_variables, json[QString("exportedEnvironmentVariables")]);
    m_exported_environment_variables_isSet = !json[QString("exportedEnvironmentVariables")].isNull() && m_exported_environment_variables_isValid;

    m_report_arns_isValid = ::OpenAPI::fromJsonValue(m_report_arns, json[QString("reportArns")]);
    m_report_arns_isSet = !json[QString("reportArns")].isNull() && m_report_arns_isValid;

    m_file_system_locations_isValid = ::OpenAPI::fromJsonValue(m_file_system_locations, json[QString("fileSystemLocations")]);
    m_file_system_locations_isSet = !json[QString("fileSystemLocations")].isNull() && m_file_system_locations_isValid;

    m_debug_session_isValid = ::OpenAPI::fromJsonValue(m_debug_session, json[QString("debugSession")]);
    m_debug_session_isSet = !json[QString("debugSession")].isNull() && m_debug_session_isValid;

    m_build_batch_arn_isValid = ::OpenAPI::fromJsonValue(m_build_batch_arn, json[QString("buildBatchArn")]);
    m_build_batch_arn_isSet = !json[QString("buildBatchArn")].isNull() && m_build_batch_arn_isValid;
}

QString OAIStopBuildOutput_build::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStopBuildOutput_build::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_build_number_isSet) {
        obj.insert(QString("buildNumber"), ::OpenAPI::toJsonValue(m_build_number));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_current_phase_isSet) {
        obj.insert(QString("currentPhase"), ::OpenAPI::toJsonValue(m_current_phase));
    }
    if (m_build_status.isSet()) {
        obj.insert(QString("buildStatus"), ::OpenAPI::toJsonValue(m_build_status));
    }
    if (m_source_version_isSet) {
        obj.insert(QString("sourceVersion"), ::OpenAPI::toJsonValue(m_source_version));
    }
    if (m_resolved_source_version_isSet) {
        obj.insert(QString("resolvedSourceVersion"), ::OpenAPI::toJsonValue(m_resolved_source_version));
    }
    if (m_project_name_isSet) {
        obj.insert(QString("projectName"), ::OpenAPI::toJsonValue(m_project_name));
    }
    if (m_phases.isSet()) {
        obj.insert(QString("phases"), ::OpenAPI::toJsonValue(m_phases));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_secondary_sources.isSet()) {
        obj.insert(QString("secondarySources"), ::OpenAPI::toJsonValue(m_secondary_sources));
    }
    if (m_secondary_source_versions.isSet()) {
        obj.insert(QString("secondarySourceVersions"), ::OpenAPI::toJsonValue(m_secondary_source_versions));
    }
    if (m_artifacts.isSet()) {
        obj.insert(QString("artifacts"), ::OpenAPI::toJsonValue(m_artifacts));
    }
    if (m_secondary_artifacts.isSet()) {
        obj.insert(QString("secondaryArtifacts"), ::OpenAPI::toJsonValue(m_secondary_artifacts));
    }
    if (m_cache.isSet()) {
        obj.insert(QString("cache"), ::OpenAPI::toJsonValue(m_cache));
    }
    if (m_environment.isSet()) {
        obj.insert(QString("environment"), ::OpenAPI::toJsonValue(m_environment));
    }
    if (m_service_role_isSet) {
        obj.insert(QString("serviceRole"), ::OpenAPI::toJsonValue(m_service_role));
    }
    if (m_logs.isSet()) {
        obj.insert(QString("logs"), ::OpenAPI::toJsonValue(m_logs));
    }
    if (m_timeout_in_minutes_isSet) {
        obj.insert(QString("timeoutInMinutes"), ::OpenAPI::toJsonValue(m_timeout_in_minutes));
    }
    if (m_queued_timeout_in_minutes_isSet) {
        obj.insert(QString("queuedTimeoutInMinutes"), ::OpenAPI::toJsonValue(m_queued_timeout_in_minutes));
    }
    if (m_build_complete_isSet) {
        obj.insert(QString("buildComplete"), ::OpenAPI::toJsonValue(m_build_complete));
    }
    if (m_initiator_isSet) {
        obj.insert(QString("initiator"), ::OpenAPI::toJsonValue(m_initiator));
    }
    if (m_vpc_config.isSet()) {
        obj.insert(QString("vpcConfig"), ::OpenAPI::toJsonValue(m_vpc_config));
    }
    if (m_network_interface.isSet()) {
        obj.insert(QString("networkInterface"), ::OpenAPI::toJsonValue(m_network_interface));
    }
    if (m_encryption_key_isSet) {
        obj.insert(QString("encryptionKey"), ::OpenAPI::toJsonValue(m_encryption_key));
    }
    if (m_exported_environment_variables.isSet()) {
        obj.insert(QString("exportedEnvironmentVariables"), ::OpenAPI::toJsonValue(m_exported_environment_variables));
    }
    if (m_report_arns.isSet()) {
        obj.insert(QString("reportArns"), ::OpenAPI::toJsonValue(m_report_arns));
    }
    if (m_file_system_locations.isSet()) {
        obj.insert(QString("fileSystemLocations"), ::OpenAPI::toJsonValue(m_file_system_locations));
    }
    if (m_debug_session.isSet()) {
        obj.insert(QString("debugSession"), ::OpenAPI::toJsonValue(m_debug_session));
    }
    if (m_build_batch_arn_isSet) {
        obj.insert(QString("buildBatchArn"), ::OpenAPI::toJsonValue(m_build_batch_arn));
    }
    return obj;
}

QString OAIStopBuildOutput_build::getId() const {
    return m_id;
}
void OAIStopBuildOutput_build::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIStopBuildOutput_build::is_id_Set() const{
    return m_id_isSet;
}

bool OAIStopBuildOutput_build::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIStopBuildOutput_build::getArn() const {
    return m_arn;
}
void OAIStopBuildOutput_build::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIStopBuildOutput_build::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIStopBuildOutput_build::is_arn_Valid() const{
    return m_arn_isValid;
}

qint32 OAIStopBuildOutput_build::getBuildNumber() const {
    return m_build_number;
}
void OAIStopBuildOutput_build::setBuildNumber(const qint32 &build_number) {
    m_build_number = build_number;
    m_build_number_isSet = true;
}

bool OAIStopBuildOutput_build::is_build_number_Set() const{
    return m_build_number_isSet;
}

bool OAIStopBuildOutput_build::is_build_number_Valid() const{
    return m_build_number_isValid;
}

QDateTime OAIStopBuildOutput_build::getStartTime() const {
    return m_start_time;
}
void OAIStopBuildOutput_build::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIStopBuildOutput_build::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIStopBuildOutput_build::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QDateTime OAIStopBuildOutput_build::getEndTime() const {
    return m_end_time;
}
void OAIStopBuildOutput_build::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIStopBuildOutput_build::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIStopBuildOutput_build::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIStopBuildOutput_build::getCurrentPhase() const {
    return m_current_phase;
}
void OAIStopBuildOutput_build::setCurrentPhase(const QString &current_phase) {
    m_current_phase = current_phase;
    m_current_phase_isSet = true;
}

bool OAIStopBuildOutput_build::is_current_phase_Set() const{
    return m_current_phase_isSet;
}

bool OAIStopBuildOutput_build::is_current_phase_Valid() const{
    return m_current_phase_isValid;
}

OAIStatusType OAIStopBuildOutput_build::getBuildStatus() const {
    return m_build_status;
}
void OAIStopBuildOutput_build::setBuildStatus(const OAIStatusType &build_status) {
    m_build_status = build_status;
    m_build_status_isSet = true;
}

bool OAIStopBuildOutput_build::is_build_status_Set() const{
    return m_build_status_isSet;
}

bool OAIStopBuildOutput_build::is_build_status_Valid() const{
    return m_build_status_isValid;
}

QString OAIStopBuildOutput_build::getSourceVersion() const {
    return m_source_version;
}
void OAIStopBuildOutput_build::setSourceVersion(const QString &source_version) {
    m_source_version = source_version;
    m_source_version_isSet = true;
}

bool OAIStopBuildOutput_build::is_source_version_Set() const{
    return m_source_version_isSet;
}

bool OAIStopBuildOutput_build::is_source_version_Valid() const{
    return m_source_version_isValid;
}

QString OAIStopBuildOutput_build::getResolvedSourceVersion() const {
    return m_resolved_source_version;
}
void OAIStopBuildOutput_build::setResolvedSourceVersion(const QString &resolved_source_version) {
    m_resolved_source_version = resolved_source_version;
    m_resolved_source_version_isSet = true;
}

bool OAIStopBuildOutput_build::is_resolved_source_version_Set() const{
    return m_resolved_source_version_isSet;
}

bool OAIStopBuildOutput_build::is_resolved_source_version_Valid() const{
    return m_resolved_source_version_isValid;
}

QString OAIStopBuildOutput_build::getProjectName() const {
    return m_project_name;
}
void OAIStopBuildOutput_build::setProjectName(const QString &project_name) {
    m_project_name = project_name;
    m_project_name_isSet = true;
}

bool OAIStopBuildOutput_build::is_project_name_Set() const{
    return m_project_name_isSet;
}

bool OAIStopBuildOutput_build::is_project_name_Valid() const{
    return m_project_name_isValid;
}

QList OAIStopBuildOutput_build::getPhases() const {
    return m_phases;
}
void OAIStopBuildOutput_build::setPhases(const QList &phases) {
    m_phases = phases;
    m_phases_isSet = true;
}

bool OAIStopBuildOutput_build::is_phases_Set() const{
    return m_phases_isSet;
}

bool OAIStopBuildOutput_build::is_phases_Valid() const{
    return m_phases_isValid;
}

OAIBuild_source OAIStopBuildOutput_build::getSource() const {
    return m_source;
}
void OAIStopBuildOutput_build::setSource(const OAIBuild_source &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIStopBuildOutput_build::is_source_Set() const{
    return m_source_isSet;
}

bool OAIStopBuildOutput_build::is_source_Valid() const{
    return m_source_isValid;
}

QList OAIStopBuildOutput_build::getSecondarySources() const {
    return m_secondary_sources;
}
void OAIStopBuildOutput_build::setSecondarySources(const QList &secondary_sources) {
    m_secondary_sources = secondary_sources;
    m_secondary_sources_isSet = true;
}

bool OAIStopBuildOutput_build::is_secondary_sources_Set() const{
    return m_secondary_sources_isSet;
}

bool OAIStopBuildOutput_build::is_secondary_sources_Valid() const{
    return m_secondary_sources_isValid;
}

QList OAIStopBuildOutput_build::getSecondarySourceVersions() const {
    return m_secondary_source_versions;
}
void OAIStopBuildOutput_build::setSecondarySourceVersions(const QList &secondary_source_versions) {
    m_secondary_source_versions = secondary_source_versions;
    m_secondary_source_versions_isSet = true;
}

bool OAIStopBuildOutput_build::is_secondary_source_versions_Set() const{
    return m_secondary_source_versions_isSet;
}

bool OAIStopBuildOutput_build::is_secondary_source_versions_Valid() const{
    return m_secondary_source_versions_isValid;
}

OAIBuild_artifacts OAIStopBuildOutput_build::getArtifacts() const {
    return m_artifacts;
}
void OAIStopBuildOutput_build::setArtifacts(const OAIBuild_artifacts &artifacts) {
    m_artifacts = artifacts;
    m_artifacts_isSet = true;
}

bool OAIStopBuildOutput_build::is_artifacts_Set() const{
    return m_artifacts_isSet;
}

bool OAIStopBuildOutput_build::is_artifacts_Valid() const{
    return m_artifacts_isValid;
}

QList OAIStopBuildOutput_build::getSecondaryArtifacts() const {
    return m_secondary_artifacts;
}
void OAIStopBuildOutput_build::setSecondaryArtifacts(const QList &secondary_artifacts) {
    m_secondary_artifacts = secondary_artifacts;
    m_secondary_artifacts_isSet = true;
}

bool OAIStopBuildOutput_build::is_secondary_artifacts_Set() const{
    return m_secondary_artifacts_isSet;
}

bool OAIStopBuildOutput_build::is_secondary_artifacts_Valid() const{
    return m_secondary_artifacts_isValid;
}

OAIBuild_cache OAIStopBuildOutput_build::getCache() const {
    return m_cache;
}
void OAIStopBuildOutput_build::setCache(const OAIBuild_cache &cache) {
    m_cache = cache;
    m_cache_isSet = true;
}

bool OAIStopBuildOutput_build::is_cache_Set() const{
    return m_cache_isSet;
}

bool OAIStopBuildOutput_build::is_cache_Valid() const{
    return m_cache_isValid;
}

OAIBuild_environment OAIStopBuildOutput_build::getEnvironment() const {
    return m_environment;
}
void OAIStopBuildOutput_build::setEnvironment(const OAIBuild_environment &environment) {
    m_environment = environment;
    m_environment_isSet = true;
}

bool OAIStopBuildOutput_build::is_environment_Set() const{
    return m_environment_isSet;
}

bool OAIStopBuildOutput_build::is_environment_Valid() const{
    return m_environment_isValid;
}

QString OAIStopBuildOutput_build::getServiceRole() const {
    return m_service_role;
}
void OAIStopBuildOutput_build::setServiceRole(const QString &service_role) {
    m_service_role = service_role;
    m_service_role_isSet = true;
}

bool OAIStopBuildOutput_build::is_service_role_Set() const{
    return m_service_role_isSet;
}

bool OAIStopBuildOutput_build::is_service_role_Valid() const{
    return m_service_role_isValid;
}

OAIBuild_logs OAIStopBuildOutput_build::getLogs() const {
    return m_logs;
}
void OAIStopBuildOutput_build::setLogs(const OAIBuild_logs &logs) {
    m_logs = logs;
    m_logs_isSet = true;
}

bool OAIStopBuildOutput_build::is_logs_Set() const{
    return m_logs_isSet;
}

bool OAIStopBuildOutput_build::is_logs_Valid() const{
    return m_logs_isValid;
}

qint32 OAIStopBuildOutput_build::getTimeoutInMinutes() const {
    return m_timeout_in_minutes;
}
void OAIStopBuildOutput_build::setTimeoutInMinutes(const qint32 &timeout_in_minutes) {
    m_timeout_in_minutes = timeout_in_minutes;
    m_timeout_in_minutes_isSet = true;
}

bool OAIStopBuildOutput_build::is_timeout_in_minutes_Set() const{
    return m_timeout_in_minutes_isSet;
}

bool OAIStopBuildOutput_build::is_timeout_in_minutes_Valid() const{
    return m_timeout_in_minutes_isValid;
}

qint32 OAIStopBuildOutput_build::getQueuedTimeoutInMinutes() const {
    return m_queued_timeout_in_minutes;
}
void OAIStopBuildOutput_build::setQueuedTimeoutInMinutes(const qint32 &queued_timeout_in_minutes) {
    m_queued_timeout_in_minutes = queued_timeout_in_minutes;
    m_queued_timeout_in_minutes_isSet = true;
}

bool OAIStopBuildOutput_build::is_queued_timeout_in_minutes_Set() const{
    return m_queued_timeout_in_minutes_isSet;
}

bool OAIStopBuildOutput_build::is_queued_timeout_in_minutes_Valid() const{
    return m_queued_timeout_in_minutes_isValid;
}

bool OAIStopBuildOutput_build::getBuildComplete() const {
    return m_build_complete;
}
void OAIStopBuildOutput_build::setBuildComplete(const bool &build_complete) {
    m_build_complete = build_complete;
    m_build_complete_isSet = true;
}

bool OAIStopBuildOutput_build::is_build_complete_Set() const{
    return m_build_complete_isSet;
}

bool OAIStopBuildOutput_build::is_build_complete_Valid() const{
    return m_build_complete_isValid;
}

QString OAIStopBuildOutput_build::getInitiator() const {
    return m_initiator;
}
void OAIStopBuildOutput_build::setInitiator(const QString &initiator) {
    m_initiator = initiator;
    m_initiator_isSet = true;
}

bool OAIStopBuildOutput_build::is_initiator_Set() const{
    return m_initiator_isSet;
}

bool OAIStopBuildOutput_build::is_initiator_Valid() const{
    return m_initiator_isValid;
}

OAIBuild_vpcConfig OAIStopBuildOutput_build::getVpcConfig() const {
    return m_vpc_config;
}
void OAIStopBuildOutput_build::setVpcConfig(const OAIBuild_vpcConfig &vpc_config) {
    m_vpc_config = vpc_config;
    m_vpc_config_isSet = true;
}

bool OAIStopBuildOutput_build::is_vpc_config_Set() const{
    return m_vpc_config_isSet;
}

bool OAIStopBuildOutput_build::is_vpc_config_Valid() const{
    return m_vpc_config_isValid;
}

OAIBuild_networkInterface OAIStopBuildOutput_build::getNetworkInterface() const {
    return m_network_interface;
}
void OAIStopBuildOutput_build::setNetworkInterface(const OAIBuild_networkInterface &network_interface) {
    m_network_interface = network_interface;
    m_network_interface_isSet = true;
}

bool OAIStopBuildOutput_build::is_network_interface_Set() const{
    return m_network_interface_isSet;
}

bool OAIStopBuildOutput_build::is_network_interface_Valid() const{
    return m_network_interface_isValid;
}

QString OAIStopBuildOutput_build::getEncryptionKey() const {
    return m_encryption_key;
}
void OAIStopBuildOutput_build::setEncryptionKey(const QString &encryption_key) {
    m_encryption_key = encryption_key;
    m_encryption_key_isSet = true;
}

bool OAIStopBuildOutput_build::is_encryption_key_Set() const{
    return m_encryption_key_isSet;
}

bool OAIStopBuildOutput_build::is_encryption_key_Valid() const{
    return m_encryption_key_isValid;
}

QList OAIStopBuildOutput_build::getExportedEnvironmentVariables() const {
    return m_exported_environment_variables;
}
void OAIStopBuildOutput_build::setExportedEnvironmentVariables(const QList &exported_environment_variables) {
    m_exported_environment_variables = exported_environment_variables;
    m_exported_environment_variables_isSet = true;
}

bool OAIStopBuildOutput_build::is_exported_environment_variables_Set() const{
    return m_exported_environment_variables_isSet;
}

bool OAIStopBuildOutput_build::is_exported_environment_variables_Valid() const{
    return m_exported_environment_variables_isValid;
}

QList OAIStopBuildOutput_build::getReportArns() const {
    return m_report_arns;
}
void OAIStopBuildOutput_build::setReportArns(const QList &report_arns) {
    m_report_arns = report_arns;
    m_report_arns_isSet = true;
}

bool OAIStopBuildOutput_build::is_report_arns_Set() const{
    return m_report_arns_isSet;
}

bool OAIStopBuildOutput_build::is_report_arns_Valid() const{
    return m_report_arns_isValid;
}

QList OAIStopBuildOutput_build::getFileSystemLocations() const {
    return m_file_system_locations;
}
void OAIStopBuildOutput_build::setFileSystemLocations(const QList &file_system_locations) {
    m_file_system_locations = file_system_locations;
    m_file_system_locations_isSet = true;
}

bool OAIStopBuildOutput_build::is_file_system_locations_Set() const{
    return m_file_system_locations_isSet;
}

bool OAIStopBuildOutput_build::is_file_system_locations_Valid() const{
    return m_file_system_locations_isValid;
}

OAIBuild_debugSession OAIStopBuildOutput_build::getDebugSession() const {
    return m_debug_session;
}
void OAIStopBuildOutput_build::setDebugSession(const OAIBuild_debugSession &debug_session) {
    m_debug_session = debug_session;
    m_debug_session_isSet = true;
}

bool OAIStopBuildOutput_build::is_debug_session_Set() const{
    return m_debug_session_isSet;
}

bool OAIStopBuildOutput_build::is_debug_session_Valid() const{
    return m_debug_session_isValid;
}

QString OAIStopBuildOutput_build::getBuildBatchArn() const {
    return m_build_batch_arn;
}
void OAIStopBuildOutput_build::setBuildBatchArn(const QString &build_batch_arn) {
    m_build_batch_arn = build_batch_arn;
    m_build_batch_arn_isSet = true;
}

bool OAIStopBuildOutput_build::is_build_batch_arn_Set() const{
    return m_build_batch_arn_isSet;
}

bool OAIStopBuildOutput_build::is_build_batch_arn_Valid() const{
    return m_build_batch_arn_isValid;
}

bool OAIStopBuildOutput_build::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_phase_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolved_source_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phases.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_sources.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_source_versions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_artifacts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_artifacts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cache.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_in_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_queued_timeout_in_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_complete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_initiator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_interface.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exported_environment_variables.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_system_locations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_debug_session.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_batch_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStopBuildOutput_build::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
