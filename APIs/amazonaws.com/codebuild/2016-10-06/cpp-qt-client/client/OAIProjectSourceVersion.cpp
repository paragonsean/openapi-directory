/**
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectSourceVersion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectSourceVersion::OAIProjectSourceVersion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectSourceVersion::OAIProjectSourceVersion() {
    this->initializeModel();
}

OAIProjectSourceVersion::~OAIProjectSourceVersion() {}

void OAIProjectSourceVersion::initializeModel() {

    m_source_identifier_isSet = false;
    m_source_identifier_isValid = false;

    m_source_version_isSet = false;
    m_source_version_isValid = false;
}

void OAIProjectSourceVersion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectSourceVersion::fromJsonObject(QJsonObject json) {

    m_source_identifier_isValid = ::OpenAPI::fromJsonValue(m_source_identifier, json[QString("sourceIdentifier")]);
    m_source_identifier_isSet = !json[QString("sourceIdentifier")].isNull() && m_source_identifier_isValid;

    m_source_version_isValid = ::OpenAPI::fromJsonValue(m_source_version, json[QString("sourceVersion")]);
    m_source_version_isSet = !json[QString("sourceVersion")].isNull() && m_source_version_isValid;
}

QString OAIProjectSourceVersion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectSourceVersion::asJsonObject() const {
    QJsonObject obj;
    if (m_source_identifier_isSet) {
        obj.insert(QString("sourceIdentifier"), ::OpenAPI::toJsonValue(m_source_identifier));
    }
    if (m_source_version_isSet) {
        obj.insert(QString("sourceVersion"), ::OpenAPI::toJsonValue(m_source_version));
    }
    return obj;
}

QString OAIProjectSourceVersion::getSourceIdentifier() const {
    return m_source_identifier;
}
void OAIProjectSourceVersion::setSourceIdentifier(const QString &source_identifier) {
    m_source_identifier = source_identifier;
    m_source_identifier_isSet = true;
}

bool OAIProjectSourceVersion::is_source_identifier_Set() const{
    return m_source_identifier_isSet;
}

bool OAIProjectSourceVersion::is_source_identifier_Valid() const{
    return m_source_identifier_isValid;
}

QString OAIProjectSourceVersion::getSourceVersion() const {
    return m_source_version;
}
void OAIProjectSourceVersion::setSourceVersion(const QString &source_version) {
    m_source_version = source_version;
    m_source_version_isSet = true;
}

bool OAIProjectSourceVersion::is_source_version_Set() const{
    return m_source_version_isSet;
}

bool OAIProjectSourceVersion::is_source_version_Valid() const{
    return m_source_version_isValid;
}

bool OAIProjectSourceVersion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_source_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectSourceVersion::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_source_identifier_isValid && m_source_version_isValid && true;
}

} // namespace OpenAPI
