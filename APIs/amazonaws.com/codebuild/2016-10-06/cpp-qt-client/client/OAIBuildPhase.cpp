/**
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBuildPhase.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBuildPhase::OAIBuildPhase(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBuildPhase::OAIBuildPhase() {
    this->initializeModel();
}

OAIBuildPhase::~OAIBuildPhase() {}

void OAIBuildPhase::initializeModel() {

    m_phase_type_isSet = false;
    m_phase_type_isValid = false;

    m_phase_status_isSet = false;
    m_phase_status_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_duration_in_seconds_isSet = false;
    m_duration_in_seconds_isValid = false;

    m_contexts_isSet = false;
    m_contexts_isValid = false;
}

void OAIBuildPhase::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBuildPhase::fromJsonObject(QJsonObject json) {

    m_phase_type_isValid = ::OpenAPI::fromJsonValue(m_phase_type, json[QString("phaseType")]);
    m_phase_type_isSet = !json[QString("phaseType")].isNull() && m_phase_type_isValid;

    m_phase_status_isValid = ::OpenAPI::fromJsonValue(m_phase_status, json[QString("phaseStatus")]);
    m_phase_status_isSet = !json[QString("phaseStatus")].isNull() && m_phase_status_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_duration_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_duration_in_seconds, json[QString("durationInSeconds")]);
    m_duration_in_seconds_isSet = !json[QString("durationInSeconds")].isNull() && m_duration_in_seconds_isValid;

    m_contexts_isValid = ::OpenAPI::fromJsonValue(m_contexts, json[QString("contexts")]);
    m_contexts_isSet = !json[QString("contexts")].isNull() && m_contexts_isValid;
}

QString OAIBuildPhase::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBuildPhase::asJsonObject() const {
    QJsonObject obj;
    if (m_phase_type.isSet()) {
        obj.insert(QString("phaseType"), ::OpenAPI::toJsonValue(m_phase_type));
    }
    if (m_phase_status.isSet()) {
        obj.insert(QString("phaseStatus"), ::OpenAPI::toJsonValue(m_phase_status));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_duration_in_seconds_isSet) {
        obj.insert(QString("durationInSeconds"), ::OpenAPI::toJsonValue(m_duration_in_seconds));
    }
    if (m_contexts.isSet()) {
        obj.insert(QString("contexts"), ::OpenAPI::toJsonValue(m_contexts));
    }
    return obj;
}

OAIBuildPhaseType OAIBuildPhase::getPhaseType() const {
    return m_phase_type;
}
void OAIBuildPhase::setPhaseType(const OAIBuildPhaseType &phase_type) {
    m_phase_type = phase_type;
    m_phase_type_isSet = true;
}

bool OAIBuildPhase::is_phase_type_Set() const{
    return m_phase_type_isSet;
}

bool OAIBuildPhase::is_phase_type_Valid() const{
    return m_phase_type_isValid;
}

OAIStatusType OAIBuildPhase::getPhaseStatus() const {
    return m_phase_status;
}
void OAIBuildPhase::setPhaseStatus(const OAIStatusType &phase_status) {
    m_phase_status = phase_status;
    m_phase_status_isSet = true;
}

bool OAIBuildPhase::is_phase_status_Set() const{
    return m_phase_status_isSet;
}

bool OAIBuildPhase::is_phase_status_Valid() const{
    return m_phase_status_isValid;
}

QDateTime OAIBuildPhase::getStartTime() const {
    return m_start_time;
}
void OAIBuildPhase::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIBuildPhase::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIBuildPhase::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QDateTime OAIBuildPhase::getEndTime() const {
    return m_end_time;
}
void OAIBuildPhase::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIBuildPhase::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIBuildPhase::is_end_time_Valid() const{
    return m_end_time_isValid;
}

qint32 OAIBuildPhase::getDurationInSeconds() const {
    return m_duration_in_seconds;
}
void OAIBuildPhase::setDurationInSeconds(const qint32 &duration_in_seconds) {
    m_duration_in_seconds = duration_in_seconds;
    m_duration_in_seconds_isSet = true;
}

bool OAIBuildPhase::is_duration_in_seconds_Set() const{
    return m_duration_in_seconds_isSet;
}

bool OAIBuildPhase::is_duration_in_seconds_Valid() const{
    return m_duration_in_seconds_isValid;
}

QList OAIBuildPhase::getContexts() const {
    return m_contexts;
}
void OAIBuildPhase::setContexts(const QList &contexts) {
    m_contexts = contexts;
    m_contexts_isSet = true;
}

bool OAIBuildPhase::is_contexts_Set() const{
    return m_contexts_isSet;
}

bool OAIBuildPhase::is_contexts_Valid() const{
    return m_contexts_isValid;
}

bool OAIBuildPhase::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_phase_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_phase_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contexts.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBuildPhase::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
