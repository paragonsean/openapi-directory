/**
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListProjectsInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListProjectsInput::OAIListProjectsInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListProjectsInput::OAIListProjectsInput() {
    this->initializeModel();
}

OAIListProjectsInput::~OAIListProjectsInput() {}

void OAIListProjectsInput::initializeModel() {

    m_sort_by_isSet = false;
    m_sort_by_isValid = false;

    m_sort_order_isSet = false;
    m_sort_order_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListProjectsInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListProjectsInput::fromJsonObject(QJsonObject json) {

    m_sort_by_isValid = ::OpenAPI::fromJsonValue(m_sort_by, json[QString("sortBy")]);
    m_sort_by_isSet = !json[QString("sortBy")].isNull() && m_sort_by_isValid;

    m_sort_order_isValid = ::OpenAPI::fromJsonValue(m_sort_order, json[QString("sortOrder")]);
    m_sort_order_isSet = !json[QString("sortOrder")].isNull() && m_sort_order_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;
}

QString OAIListProjectsInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListProjectsInput::asJsonObject() const {
    QJsonObject obj;
    if (m_sort_by.isSet()) {
        obj.insert(QString("sortBy"), ::OpenAPI::toJsonValue(m_sort_by));
    }
    if (m_sort_order.isSet()) {
        obj.insert(QString("sortOrder"), ::OpenAPI::toJsonValue(m_sort_order));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

OAIProjectSortByType OAIListProjectsInput::getSortBy() const {
    return m_sort_by;
}
void OAIListProjectsInput::setSortBy(const OAIProjectSortByType &sort_by) {
    m_sort_by = sort_by;
    m_sort_by_isSet = true;
}

bool OAIListProjectsInput::is_sort_by_Set() const{
    return m_sort_by_isSet;
}

bool OAIListProjectsInput::is_sort_by_Valid() const{
    return m_sort_by_isValid;
}

OAISortOrderType OAIListProjectsInput::getSortOrder() const {
    return m_sort_order;
}
void OAIListProjectsInput::setSortOrder(const OAISortOrderType &sort_order) {
    m_sort_order = sort_order;
    m_sort_order_isSet = true;
}

bool OAIListProjectsInput::is_sort_order_Set() const{
    return m_sort_order_isSet;
}

bool OAIListProjectsInput::is_sort_order_Valid() const{
    return m_sort_order_isValid;
}

QString OAIListProjectsInput::getNextToken() const {
    return m_next_token;
}
void OAIListProjectsInput::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListProjectsInput::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListProjectsInput::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListProjectsInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sort_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_order.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListProjectsInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
