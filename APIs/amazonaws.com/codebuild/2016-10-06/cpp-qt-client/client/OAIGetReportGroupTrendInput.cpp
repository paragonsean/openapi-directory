/**
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetReportGroupTrendInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetReportGroupTrendInput::OAIGetReportGroupTrendInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetReportGroupTrendInput::OAIGetReportGroupTrendInput() {
    this->initializeModel();
}

OAIGetReportGroupTrendInput::~OAIGetReportGroupTrendInput() {}

void OAIGetReportGroupTrendInput::initializeModel() {

    m_report_group_arn_isSet = false;
    m_report_group_arn_isValid = false;

    m_num_of_reports_isSet = false;
    m_num_of_reports_isValid = false;

    m_trend_field_isSet = false;
    m_trend_field_isValid = false;
}

void OAIGetReportGroupTrendInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetReportGroupTrendInput::fromJsonObject(QJsonObject json) {

    m_report_group_arn_isValid = ::OpenAPI::fromJsonValue(m_report_group_arn, json[QString("reportGroupArn")]);
    m_report_group_arn_isSet = !json[QString("reportGroupArn")].isNull() && m_report_group_arn_isValid;

    m_num_of_reports_isValid = ::OpenAPI::fromJsonValue(m_num_of_reports, json[QString("numOfReports")]);
    m_num_of_reports_isSet = !json[QString("numOfReports")].isNull() && m_num_of_reports_isValid;

    m_trend_field_isValid = ::OpenAPI::fromJsonValue(m_trend_field, json[QString("trendField")]);
    m_trend_field_isSet = !json[QString("trendField")].isNull() && m_trend_field_isValid;
}

QString OAIGetReportGroupTrendInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetReportGroupTrendInput::asJsonObject() const {
    QJsonObject obj;
    if (m_report_group_arn_isSet) {
        obj.insert(QString("reportGroupArn"), ::OpenAPI::toJsonValue(m_report_group_arn));
    }
    if (m_num_of_reports_isSet) {
        obj.insert(QString("numOfReports"), ::OpenAPI::toJsonValue(m_num_of_reports));
    }
    if (m_trend_field.isSet()) {
        obj.insert(QString("trendField"), ::OpenAPI::toJsonValue(m_trend_field));
    }
    return obj;
}

QString OAIGetReportGroupTrendInput::getReportGroupArn() const {
    return m_report_group_arn;
}
void OAIGetReportGroupTrendInput::setReportGroupArn(const QString &report_group_arn) {
    m_report_group_arn = report_group_arn;
    m_report_group_arn_isSet = true;
}

bool OAIGetReportGroupTrendInput::is_report_group_arn_Set() const{
    return m_report_group_arn_isSet;
}

bool OAIGetReportGroupTrendInput::is_report_group_arn_Valid() const{
    return m_report_group_arn_isValid;
}

qint32 OAIGetReportGroupTrendInput::getNumOfReports() const {
    return m_num_of_reports;
}
void OAIGetReportGroupTrendInput::setNumOfReports(const qint32 &num_of_reports) {
    m_num_of_reports = num_of_reports;
    m_num_of_reports_isSet = true;
}

bool OAIGetReportGroupTrendInput::is_num_of_reports_Set() const{
    return m_num_of_reports_isSet;
}

bool OAIGetReportGroupTrendInput::is_num_of_reports_Valid() const{
    return m_num_of_reports_isValid;
}

OAIReportGroupTrendFieldType OAIGetReportGroupTrendInput::getTrendField() const {
    return m_trend_field;
}
void OAIGetReportGroupTrendInput::setTrendField(const OAIReportGroupTrendFieldType &trend_field) {
    m_trend_field = trend_field;
    m_trend_field_isSet = true;
}

bool OAIGetReportGroupTrendInput::is_trend_field_Set() const{
    return m_trend_field_isSet;
}

bool OAIGetReportGroupTrendInput::is_trend_field_Valid() const{
    return m_trend_field_isValid;
}

bool OAIGetReportGroupTrendInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_report_group_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_of_reports_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trend_field.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetReportGroupTrendInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_report_group_arn_isValid && m_trend_field_isValid && true;
}

} // namespace OpenAPI
