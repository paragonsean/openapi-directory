/**
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReportExportConfig_s3Destination.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReportExportConfig_s3Destination::OAIReportExportConfig_s3Destination(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReportExportConfig_s3Destination::OAIReportExportConfig_s3Destination() {
    this->initializeModel();
}

OAIReportExportConfig_s3Destination::~OAIReportExportConfig_s3Destination() {}

void OAIReportExportConfig_s3Destination::initializeModel() {

    m_bucket_isSet = false;
    m_bucket_isValid = false;

    m_bucket_owner_isSet = false;
    m_bucket_owner_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_packaging_isSet = false;
    m_packaging_isValid = false;

    m_encryption_key_isSet = false;
    m_encryption_key_isValid = false;

    m_encryption_disabled_isSet = false;
    m_encryption_disabled_isValid = false;
}

void OAIReportExportConfig_s3Destination::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReportExportConfig_s3Destination::fromJsonObject(QJsonObject json) {

    m_bucket_isValid = ::OpenAPI::fromJsonValue(m_bucket, json[QString("bucket")]);
    m_bucket_isSet = !json[QString("bucket")].isNull() && m_bucket_isValid;

    m_bucket_owner_isValid = ::OpenAPI::fromJsonValue(m_bucket_owner, json[QString("bucketOwner")]);
    m_bucket_owner_isSet = !json[QString("bucketOwner")].isNull() && m_bucket_owner_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_packaging_isValid = ::OpenAPI::fromJsonValue(m_packaging, json[QString("packaging")]);
    m_packaging_isSet = !json[QString("packaging")].isNull() && m_packaging_isValid;

    m_encryption_key_isValid = ::OpenAPI::fromJsonValue(m_encryption_key, json[QString("encryptionKey")]);
    m_encryption_key_isSet = !json[QString("encryptionKey")].isNull() && m_encryption_key_isValid;

    m_encryption_disabled_isValid = ::OpenAPI::fromJsonValue(m_encryption_disabled, json[QString("encryptionDisabled")]);
    m_encryption_disabled_isSet = !json[QString("encryptionDisabled")].isNull() && m_encryption_disabled_isValid;
}

QString OAIReportExportConfig_s3Destination::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReportExportConfig_s3Destination::asJsonObject() const {
    QJsonObject obj;
    if (m_bucket_isSet) {
        obj.insert(QString("bucket"), ::OpenAPI::toJsonValue(m_bucket));
    }
    if (m_bucket_owner_isSet) {
        obj.insert(QString("bucketOwner"), ::OpenAPI::toJsonValue(m_bucket_owner));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_packaging.isSet()) {
        obj.insert(QString("packaging"), ::OpenAPI::toJsonValue(m_packaging));
    }
    if (m_encryption_key_isSet) {
        obj.insert(QString("encryptionKey"), ::OpenAPI::toJsonValue(m_encryption_key));
    }
    if (m_encryption_disabled_isSet) {
        obj.insert(QString("encryptionDisabled"), ::OpenAPI::toJsonValue(m_encryption_disabled));
    }
    return obj;
}

QString OAIReportExportConfig_s3Destination::getBucket() const {
    return m_bucket;
}
void OAIReportExportConfig_s3Destination::setBucket(const QString &bucket) {
    m_bucket = bucket;
    m_bucket_isSet = true;
}

bool OAIReportExportConfig_s3Destination::is_bucket_Set() const{
    return m_bucket_isSet;
}

bool OAIReportExportConfig_s3Destination::is_bucket_Valid() const{
    return m_bucket_isValid;
}

QString OAIReportExportConfig_s3Destination::getBucketOwner() const {
    return m_bucket_owner;
}
void OAIReportExportConfig_s3Destination::setBucketOwner(const QString &bucket_owner) {
    m_bucket_owner = bucket_owner;
    m_bucket_owner_isSet = true;
}

bool OAIReportExportConfig_s3Destination::is_bucket_owner_Set() const{
    return m_bucket_owner_isSet;
}

bool OAIReportExportConfig_s3Destination::is_bucket_owner_Valid() const{
    return m_bucket_owner_isValid;
}

QString OAIReportExportConfig_s3Destination::getPath() const {
    return m_path;
}
void OAIReportExportConfig_s3Destination::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIReportExportConfig_s3Destination::is_path_Set() const{
    return m_path_isSet;
}

bool OAIReportExportConfig_s3Destination::is_path_Valid() const{
    return m_path_isValid;
}

OAIReportPackagingType OAIReportExportConfig_s3Destination::getPackaging() const {
    return m_packaging;
}
void OAIReportExportConfig_s3Destination::setPackaging(const OAIReportPackagingType &packaging) {
    m_packaging = packaging;
    m_packaging_isSet = true;
}

bool OAIReportExportConfig_s3Destination::is_packaging_Set() const{
    return m_packaging_isSet;
}

bool OAIReportExportConfig_s3Destination::is_packaging_Valid() const{
    return m_packaging_isValid;
}

QString OAIReportExportConfig_s3Destination::getEncryptionKey() const {
    return m_encryption_key;
}
void OAIReportExportConfig_s3Destination::setEncryptionKey(const QString &encryption_key) {
    m_encryption_key = encryption_key;
    m_encryption_key_isSet = true;
}

bool OAIReportExportConfig_s3Destination::is_encryption_key_Set() const{
    return m_encryption_key_isSet;
}

bool OAIReportExportConfig_s3Destination::is_encryption_key_Valid() const{
    return m_encryption_key_isValid;
}

bool OAIReportExportConfig_s3Destination::getEncryptionDisabled() const {
    return m_encryption_disabled;
}
void OAIReportExportConfig_s3Destination::setEncryptionDisabled(const bool &encryption_disabled) {
    m_encryption_disabled = encryption_disabled;
    m_encryption_disabled_isSet = true;
}

bool OAIReportExportConfig_s3Destination::is_encryption_disabled_Set() const{
    return m_encryption_disabled_isSet;
}

bool OAIReportExportConfig_s3Destination::is_encryption_disabled_Valid() const{
    return m_encryption_disabled_isValid;
}

bool OAIReportExportConfig_s3Destination::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_packaging.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReportExportConfig_s3Destination::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
