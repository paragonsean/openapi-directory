/**
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReport::OAIReport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReport::OAIReport() {
    this->initializeModel();
}

OAIReport::~OAIReport() {}

void OAIReport::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_report_group_arn_isSet = false;
    m_report_group_arn_isValid = false;

    m_execution_id_isSet = false;
    m_execution_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_expired_isSet = false;
    m_expired_isValid = false;

    m_export_config_isSet = false;
    m_export_config_isValid = false;

    m_truncated_isSet = false;
    m_truncated_isValid = false;

    m_test_summary_isSet = false;
    m_test_summary_isValid = false;

    m_code_coverage_summary_isSet = false;
    m_code_coverage_summary_isValid = false;
}

void OAIReport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReport::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_report_group_arn_isValid = ::OpenAPI::fromJsonValue(m_report_group_arn, json[QString("reportGroupArn")]);
    m_report_group_arn_isSet = !json[QString("reportGroupArn")].isNull() && m_report_group_arn_isValid;

    m_execution_id_isValid = ::OpenAPI::fromJsonValue(m_execution_id, json[QString("executionId")]);
    m_execution_id_isSet = !json[QString("executionId")].isNull() && m_execution_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_expired_isValid = ::OpenAPI::fromJsonValue(m_expired, json[QString("expired")]);
    m_expired_isSet = !json[QString("expired")].isNull() && m_expired_isValid;

    m_export_config_isValid = ::OpenAPI::fromJsonValue(m_export_config, json[QString("exportConfig")]);
    m_export_config_isSet = !json[QString("exportConfig")].isNull() && m_export_config_isValid;

    m_truncated_isValid = ::OpenAPI::fromJsonValue(m_truncated, json[QString("truncated")]);
    m_truncated_isSet = !json[QString("truncated")].isNull() && m_truncated_isValid;

    m_test_summary_isValid = ::OpenAPI::fromJsonValue(m_test_summary, json[QString("testSummary")]);
    m_test_summary_isSet = !json[QString("testSummary")].isNull() && m_test_summary_isValid;

    m_code_coverage_summary_isValid = ::OpenAPI::fromJsonValue(m_code_coverage_summary, json[QString("codeCoverageSummary")]);
    m_code_coverage_summary_isSet = !json[QString("codeCoverageSummary")].isNull() && m_code_coverage_summary_isValid;
}

QString OAIReport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReport::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_report_group_arn_isSet) {
        obj.insert(QString("reportGroupArn"), ::OpenAPI::toJsonValue(m_report_group_arn));
    }
    if (m_execution_id_isSet) {
        obj.insert(QString("executionId"), ::OpenAPI::toJsonValue(m_execution_id));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_expired_isSet) {
        obj.insert(QString("expired"), ::OpenAPI::toJsonValue(m_expired));
    }
    if (m_export_config.isSet()) {
        obj.insert(QString("exportConfig"), ::OpenAPI::toJsonValue(m_export_config));
    }
    if (m_truncated_isSet) {
        obj.insert(QString("truncated"), ::OpenAPI::toJsonValue(m_truncated));
    }
    if (m_test_summary.isSet()) {
        obj.insert(QString("testSummary"), ::OpenAPI::toJsonValue(m_test_summary));
    }
    if (m_code_coverage_summary.isSet()) {
        obj.insert(QString("codeCoverageSummary"), ::OpenAPI::toJsonValue(m_code_coverage_summary));
    }
    return obj;
}

QString OAIReport::getArn() const {
    return m_arn;
}
void OAIReport::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIReport::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIReport::is_arn_Valid() const{
    return m_arn_isValid;
}

OAIReportType OAIReport::getType() const {
    return m_type;
}
void OAIReport::setType(const OAIReportType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIReport::is_type_Set() const{
    return m_type_isSet;
}

bool OAIReport::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIReport::getName() const {
    return m_name;
}
void OAIReport::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIReport::is_name_Set() const{
    return m_name_isSet;
}

bool OAIReport::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIReport::getReportGroupArn() const {
    return m_report_group_arn;
}
void OAIReport::setReportGroupArn(const QString &report_group_arn) {
    m_report_group_arn = report_group_arn;
    m_report_group_arn_isSet = true;
}

bool OAIReport::is_report_group_arn_Set() const{
    return m_report_group_arn_isSet;
}

bool OAIReport::is_report_group_arn_Valid() const{
    return m_report_group_arn_isValid;
}

QString OAIReport::getExecutionId() const {
    return m_execution_id;
}
void OAIReport::setExecutionId(const QString &execution_id) {
    m_execution_id = execution_id;
    m_execution_id_isSet = true;
}

bool OAIReport::is_execution_id_Set() const{
    return m_execution_id_isSet;
}

bool OAIReport::is_execution_id_Valid() const{
    return m_execution_id_isValid;
}

OAIReportStatusType OAIReport::getStatus() const {
    return m_status;
}
void OAIReport::setStatus(const OAIReportStatusType &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIReport::is_status_Set() const{
    return m_status_isSet;
}

bool OAIReport::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIReport::getCreated() const {
    return m_created;
}
void OAIReport::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIReport::is_created_Set() const{
    return m_created_isSet;
}

bool OAIReport::is_created_Valid() const{
    return m_created_isValid;
}

QDateTime OAIReport::getExpired() const {
    return m_expired;
}
void OAIReport::setExpired(const QDateTime &expired) {
    m_expired = expired;
    m_expired_isSet = true;
}

bool OAIReport::is_expired_Set() const{
    return m_expired_isSet;
}

bool OAIReport::is_expired_Valid() const{
    return m_expired_isValid;
}

OAIReport_exportConfig OAIReport::getExportConfig() const {
    return m_export_config;
}
void OAIReport::setExportConfig(const OAIReport_exportConfig &export_config) {
    m_export_config = export_config;
    m_export_config_isSet = true;
}

bool OAIReport::is_export_config_Set() const{
    return m_export_config_isSet;
}

bool OAIReport::is_export_config_Valid() const{
    return m_export_config_isValid;
}

bool OAIReport::getTruncated() const {
    return m_truncated;
}
void OAIReport::setTruncated(const bool &truncated) {
    m_truncated = truncated;
    m_truncated_isSet = true;
}

bool OAIReport::is_truncated_Set() const{
    return m_truncated_isSet;
}

bool OAIReport::is_truncated_Valid() const{
    return m_truncated_isValid;
}

OAIReport_testSummary OAIReport::getTestSummary() const {
    return m_test_summary;
}
void OAIReport::setTestSummary(const OAIReport_testSummary &test_summary) {
    m_test_summary = test_summary;
    m_test_summary_isSet = true;
}

bool OAIReport::is_test_summary_Set() const{
    return m_test_summary_isSet;
}

bool OAIReport::is_test_summary_Valid() const{
    return m_test_summary_isValid;
}

OAIReport_codeCoverageSummary OAIReport::getCodeCoverageSummary() const {
    return m_code_coverage_summary;
}
void OAIReport::setCodeCoverageSummary(const OAIReport_codeCoverageSummary &code_coverage_summary) {
    m_code_coverage_summary = code_coverage_summary;
    m_code_coverage_summary_isSet = true;
}

bool OAIReport::is_code_coverage_summary_Set() const{
    return m_code_coverage_summary_isSet;
}

bool OAIReport::is_code_coverage_summary_Valid() const{
    return m_code_coverage_summary_isValid;
}

bool OAIReport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_group_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expired_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_export_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_truncated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_coverage_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReport::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
