/**
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateWebhookInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateWebhookInput::OAICreateWebhookInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateWebhookInput::OAICreateWebhookInput() {
    this->initializeModel();
}

OAICreateWebhookInput::~OAICreateWebhookInput() {}

void OAICreateWebhookInput::initializeModel() {

    m_project_name_isSet = false;
    m_project_name_isValid = false;

    m_branch_filter_isSet = false;
    m_branch_filter_isValid = false;

    m_filter_groups_isSet = false;
    m_filter_groups_isValid = false;

    m_build_type_isSet = false;
    m_build_type_isValid = false;
}

void OAICreateWebhookInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateWebhookInput::fromJsonObject(QJsonObject json) {

    m_project_name_isValid = ::OpenAPI::fromJsonValue(m_project_name, json[QString("projectName")]);
    m_project_name_isSet = !json[QString("projectName")].isNull() && m_project_name_isValid;

    m_branch_filter_isValid = ::OpenAPI::fromJsonValue(m_branch_filter, json[QString("branchFilter")]);
    m_branch_filter_isSet = !json[QString("branchFilter")].isNull() && m_branch_filter_isValid;

    m_filter_groups_isValid = ::OpenAPI::fromJsonValue(m_filter_groups, json[QString("filterGroups")]);
    m_filter_groups_isSet = !json[QString("filterGroups")].isNull() && m_filter_groups_isValid;

    m_build_type_isValid = ::OpenAPI::fromJsonValue(m_build_type, json[QString("buildType")]);
    m_build_type_isSet = !json[QString("buildType")].isNull() && m_build_type_isValid;
}

QString OAICreateWebhookInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateWebhookInput::asJsonObject() const {
    QJsonObject obj;
    if (m_project_name_isSet) {
        obj.insert(QString("projectName"), ::OpenAPI::toJsonValue(m_project_name));
    }
    if (m_branch_filter_isSet) {
        obj.insert(QString("branchFilter"), ::OpenAPI::toJsonValue(m_branch_filter));
    }
    if (m_filter_groups.isSet()) {
        obj.insert(QString("filterGroups"), ::OpenAPI::toJsonValue(m_filter_groups));
    }
    if (m_build_type.isSet()) {
        obj.insert(QString("buildType"), ::OpenAPI::toJsonValue(m_build_type));
    }
    return obj;
}

QString OAICreateWebhookInput::getProjectName() const {
    return m_project_name;
}
void OAICreateWebhookInput::setProjectName(const QString &project_name) {
    m_project_name = project_name;
    m_project_name_isSet = true;
}

bool OAICreateWebhookInput::is_project_name_Set() const{
    return m_project_name_isSet;
}

bool OAICreateWebhookInput::is_project_name_Valid() const{
    return m_project_name_isValid;
}

QString OAICreateWebhookInput::getBranchFilter() const {
    return m_branch_filter;
}
void OAICreateWebhookInput::setBranchFilter(const QString &branch_filter) {
    m_branch_filter = branch_filter;
    m_branch_filter_isSet = true;
}

bool OAICreateWebhookInput::is_branch_filter_Set() const{
    return m_branch_filter_isSet;
}

bool OAICreateWebhookInput::is_branch_filter_Valid() const{
    return m_branch_filter_isValid;
}

QList OAICreateWebhookInput::getFilterGroups() const {
    return m_filter_groups;
}
void OAICreateWebhookInput::setFilterGroups(const QList &filter_groups) {
    m_filter_groups = filter_groups;
    m_filter_groups_isSet = true;
}

bool OAICreateWebhookInput::is_filter_groups_Set() const{
    return m_filter_groups_isSet;
}

bool OAICreateWebhookInput::is_filter_groups_Valid() const{
    return m_filter_groups_isValid;
}

OAIWebhookBuildType OAICreateWebhookInput::getBuildType() const {
    return m_build_type;
}
void OAICreateWebhookInput::setBuildType(const OAIWebhookBuildType &build_type) {
    m_build_type = build_type;
    m_build_type_isSet = true;
}

bool OAICreateWebhookInput::is_build_type_Set() const{
    return m_build_type_isSet;
}

bool OAICreateWebhookInput::is_build_type_Valid() const{
    return m_build_type_isValid;
}

bool OAICreateWebhookInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_project_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateWebhookInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_project_name_isValid && true;
}

} // namespace OpenAPI
