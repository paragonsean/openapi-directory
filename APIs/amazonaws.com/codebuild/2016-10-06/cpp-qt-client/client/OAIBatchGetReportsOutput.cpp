/**
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchGetReportsOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchGetReportsOutput::OAIBatchGetReportsOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchGetReportsOutput::OAIBatchGetReportsOutput() {
    this->initializeModel();
}

OAIBatchGetReportsOutput::~OAIBatchGetReportsOutput() {}

void OAIBatchGetReportsOutput::initializeModel() {

    m_reports_isSet = false;
    m_reports_isValid = false;

    m_reports_not_found_isSet = false;
    m_reports_not_found_isValid = false;
}

void OAIBatchGetReportsOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchGetReportsOutput::fromJsonObject(QJsonObject json) {

    m_reports_isValid = ::OpenAPI::fromJsonValue(m_reports, json[QString("reports")]);
    m_reports_isSet = !json[QString("reports")].isNull() && m_reports_isValid;

    m_reports_not_found_isValid = ::OpenAPI::fromJsonValue(m_reports_not_found, json[QString("reportsNotFound")]);
    m_reports_not_found_isSet = !json[QString("reportsNotFound")].isNull() && m_reports_not_found_isValid;
}

QString OAIBatchGetReportsOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchGetReportsOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_reports.isSet()) {
        obj.insert(QString("reports"), ::OpenAPI::toJsonValue(m_reports));
    }
    if (m_reports_not_found.isSet()) {
        obj.insert(QString("reportsNotFound"), ::OpenAPI::toJsonValue(m_reports_not_found));
    }
    return obj;
}

QList OAIBatchGetReportsOutput::getReports() const {
    return m_reports;
}
void OAIBatchGetReportsOutput::setReports(const QList &reports) {
    m_reports = reports;
    m_reports_isSet = true;
}

bool OAIBatchGetReportsOutput::is_reports_Set() const{
    return m_reports_isSet;
}

bool OAIBatchGetReportsOutput::is_reports_Valid() const{
    return m_reports_isValid;
}

QList OAIBatchGetReportsOutput::getReportsNotFound() const {
    return m_reports_not_found;
}
void OAIBatchGetReportsOutput::setReportsNotFound(const QList &reports_not_found) {
    m_reports_not_found = reports_not_found;
    m_reports_not_found_isSet = true;
}

bool OAIBatchGetReportsOutput::is_reports_not_found_Set() const{
    return m_reports_not_found_isSet;
}

bool OAIBatchGetReportsOutput::is_reports_not_found_Valid() const{
    return m_reports_not_found_isValid;
}

bool OAIBatchGetReportsOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_reports.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reports_not_found.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchGetReportsOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
