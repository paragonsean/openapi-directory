/**
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeCodeCoveragesInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeCodeCoveragesInput::OAIDescribeCodeCoveragesInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeCodeCoveragesInput::OAIDescribeCodeCoveragesInput() {
    this->initializeModel();
}

OAIDescribeCodeCoveragesInput::~OAIDescribeCodeCoveragesInput() {}

void OAIDescribeCodeCoveragesInput::initializeModel() {

    m_report_arn_isSet = false;
    m_report_arn_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_sort_order_isSet = false;
    m_sort_order_isValid = false;

    m_sort_by_isSet = false;
    m_sort_by_isValid = false;

    m_min_line_coverage_percentage_isSet = false;
    m_min_line_coverage_percentage_isValid = false;

    m_max_line_coverage_percentage_isSet = false;
    m_max_line_coverage_percentage_isValid = false;
}

void OAIDescribeCodeCoveragesInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeCodeCoveragesInput::fromJsonObject(QJsonObject json) {

    m_report_arn_isValid = ::OpenAPI::fromJsonValue(m_report_arn, json[QString("reportArn")]);
    m_report_arn_isSet = !json[QString("reportArn")].isNull() && m_report_arn_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("maxResults")]);
    m_max_results_isSet = !json[QString("maxResults")].isNull() && m_max_results_isValid;

    m_sort_order_isValid = ::OpenAPI::fromJsonValue(m_sort_order, json[QString("sortOrder")]);
    m_sort_order_isSet = !json[QString("sortOrder")].isNull() && m_sort_order_isValid;

    m_sort_by_isValid = ::OpenAPI::fromJsonValue(m_sort_by, json[QString("sortBy")]);
    m_sort_by_isSet = !json[QString("sortBy")].isNull() && m_sort_by_isValid;

    m_min_line_coverage_percentage_isValid = ::OpenAPI::fromJsonValue(m_min_line_coverage_percentage, json[QString("minLineCoveragePercentage")]);
    m_min_line_coverage_percentage_isSet = !json[QString("minLineCoveragePercentage")].isNull() && m_min_line_coverage_percentage_isValid;

    m_max_line_coverage_percentage_isValid = ::OpenAPI::fromJsonValue(m_max_line_coverage_percentage, json[QString("maxLineCoveragePercentage")]);
    m_max_line_coverage_percentage_isSet = !json[QString("maxLineCoveragePercentage")].isNull() && m_max_line_coverage_percentage_isValid;
}

QString OAIDescribeCodeCoveragesInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeCodeCoveragesInput::asJsonObject() const {
    QJsonObject obj;
    if (m_report_arn_isSet) {
        obj.insert(QString("reportArn"), ::OpenAPI::toJsonValue(m_report_arn));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("maxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_sort_order.isSet()) {
        obj.insert(QString("sortOrder"), ::OpenAPI::toJsonValue(m_sort_order));
    }
    if (m_sort_by.isSet()) {
        obj.insert(QString("sortBy"), ::OpenAPI::toJsonValue(m_sort_by));
    }
    if (m_min_line_coverage_percentage_isSet) {
        obj.insert(QString("minLineCoveragePercentage"), ::OpenAPI::toJsonValue(m_min_line_coverage_percentage));
    }
    if (m_max_line_coverage_percentage_isSet) {
        obj.insert(QString("maxLineCoveragePercentage"), ::OpenAPI::toJsonValue(m_max_line_coverage_percentage));
    }
    return obj;
}

QString OAIDescribeCodeCoveragesInput::getReportArn() const {
    return m_report_arn;
}
void OAIDescribeCodeCoveragesInput::setReportArn(const QString &report_arn) {
    m_report_arn = report_arn;
    m_report_arn_isSet = true;
}

bool OAIDescribeCodeCoveragesInput::is_report_arn_Set() const{
    return m_report_arn_isSet;
}

bool OAIDescribeCodeCoveragesInput::is_report_arn_Valid() const{
    return m_report_arn_isValid;
}

QString OAIDescribeCodeCoveragesInput::getNextToken() const {
    return m_next_token;
}
void OAIDescribeCodeCoveragesInput::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIDescribeCodeCoveragesInput::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIDescribeCodeCoveragesInput::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIDescribeCodeCoveragesInput::getMaxResults() const {
    return m_max_results;
}
void OAIDescribeCodeCoveragesInput::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIDescribeCodeCoveragesInput::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIDescribeCodeCoveragesInput::is_max_results_Valid() const{
    return m_max_results_isValid;
}

OAISortOrderType OAIDescribeCodeCoveragesInput::getSortOrder() const {
    return m_sort_order;
}
void OAIDescribeCodeCoveragesInput::setSortOrder(const OAISortOrderType &sort_order) {
    m_sort_order = sort_order;
    m_sort_order_isSet = true;
}

bool OAIDescribeCodeCoveragesInput::is_sort_order_Set() const{
    return m_sort_order_isSet;
}

bool OAIDescribeCodeCoveragesInput::is_sort_order_Valid() const{
    return m_sort_order_isValid;
}

OAIReportCodeCoverageSortByType OAIDescribeCodeCoveragesInput::getSortBy() const {
    return m_sort_by;
}
void OAIDescribeCodeCoveragesInput::setSortBy(const OAIReportCodeCoverageSortByType &sort_by) {
    m_sort_by = sort_by;
    m_sort_by_isSet = true;
}

bool OAIDescribeCodeCoveragesInput::is_sort_by_Set() const{
    return m_sort_by_isSet;
}

bool OAIDescribeCodeCoveragesInput::is_sort_by_Valid() const{
    return m_sort_by_isValid;
}

double OAIDescribeCodeCoveragesInput::getMinLineCoveragePercentage() const {
    return m_min_line_coverage_percentage;
}
void OAIDescribeCodeCoveragesInput::setMinLineCoveragePercentage(const double &min_line_coverage_percentage) {
    m_min_line_coverage_percentage = min_line_coverage_percentage;
    m_min_line_coverage_percentage_isSet = true;
}

bool OAIDescribeCodeCoveragesInput::is_min_line_coverage_percentage_Set() const{
    return m_min_line_coverage_percentage_isSet;
}

bool OAIDescribeCodeCoveragesInput::is_min_line_coverage_percentage_Valid() const{
    return m_min_line_coverage_percentage_isValid;
}

double OAIDescribeCodeCoveragesInput::getMaxLineCoveragePercentage() const {
    return m_max_line_coverage_percentage;
}
void OAIDescribeCodeCoveragesInput::setMaxLineCoveragePercentage(const double &max_line_coverage_percentage) {
    m_max_line_coverage_percentage = max_line_coverage_percentage;
    m_max_line_coverage_percentage_isSet = true;
}

bool OAIDescribeCodeCoveragesInput::is_max_line_coverage_percentage_Set() const{
    return m_max_line_coverage_percentage_isSet;
}

bool OAIDescribeCodeCoveragesInput::is_max_line_coverage_percentage_Valid() const{
    return m_max_line_coverage_percentage_isValid;
}

bool OAIDescribeCodeCoveragesInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_report_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_order.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_line_coverage_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_line_coverage_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeCodeCoveragesInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_report_arn_isValid && true;
}

} // namespace OpenAPI
