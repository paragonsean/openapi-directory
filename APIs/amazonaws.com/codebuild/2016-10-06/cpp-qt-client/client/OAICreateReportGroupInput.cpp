/**
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateReportGroupInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateReportGroupInput::OAICreateReportGroupInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateReportGroupInput::OAICreateReportGroupInput() {
    this->initializeModel();
}

OAICreateReportGroupInput::~OAICreateReportGroupInput() {}

void OAICreateReportGroupInput::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_export_config_isSet = false;
    m_export_config_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateReportGroupInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateReportGroupInput::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_export_config_isValid = ::OpenAPI::fromJsonValue(m_export_config, json[QString("exportConfig")]);
    m_export_config_isSet = !json[QString("exportConfig")].isNull() && m_export_config_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateReportGroupInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateReportGroupInput::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_export_config.isSet()) {
        obj.insert(QString("exportConfig"), ::OpenAPI::toJsonValue(m_export_config));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateReportGroupInput::getName() const {
    return m_name;
}
void OAICreateReportGroupInput::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateReportGroupInput::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateReportGroupInput::is_name_Valid() const{
    return m_name_isValid;
}

OAIReportType OAICreateReportGroupInput::getType() const {
    return m_type;
}
void OAICreateReportGroupInput::setType(const OAIReportType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICreateReportGroupInput::is_type_Set() const{
    return m_type_isSet;
}

bool OAICreateReportGroupInput::is_type_Valid() const{
    return m_type_isValid;
}

OAICreateReportGroupInput_exportConfig OAICreateReportGroupInput::getExportConfig() const {
    return m_export_config;
}
void OAICreateReportGroupInput::setExportConfig(const OAICreateReportGroupInput_exportConfig &export_config) {
    m_export_config = export_config;
    m_export_config_isSet = true;
}

bool OAICreateReportGroupInput::is_export_config_Set() const{
    return m_export_config_isSet;
}

bool OAICreateReportGroupInput::is_export_config_Valid() const{
    return m_export_config_isValid;
}

QList OAICreateReportGroupInput::getTags() const {
    return m_tags;
}
void OAICreateReportGroupInput::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateReportGroupInput::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateReportGroupInput::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateReportGroupInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_export_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateReportGroupInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_type_isValid && m_export_config_isValid && true;
}

} // namespace OpenAPI
