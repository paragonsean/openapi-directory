/**
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListCuratedEnvironmentImagesOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListCuratedEnvironmentImagesOutput::OAIListCuratedEnvironmentImagesOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListCuratedEnvironmentImagesOutput::OAIListCuratedEnvironmentImagesOutput() {
    this->initializeModel();
}

OAIListCuratedEnvironmentImagesOutput::~OAIListCuratedEnvironmentImagesOutput() {}

void OAIListCuratedEnvironmentImagesOutput::initializeModel() {

    m_platforms_isSet = false;
    m_platforms_isValid = false;
}

void OAIListCuratedEnvironmentImagesOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListCuratedEnvironmentImagesOutput::fromJsonObject(QJsonObject json) {

    m_platforms_isValid = ::OpenAPI::fromJsonValue(m_platforms, json[QString("platforms")]);
    m_platforms_isSet = !json[QString("platforms")].isNull() && m_platforms_isValid;
}

QString OAIListCuratedEnvironmentImagesOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListCuratedEnvironmentImagesOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_platforms.isSet()) {
        obj.insert(QString("platforms"), ::OpenAPI::toJsonValue(m_platforms));
    }
    return obj;
}

QList OAIListCuratedEnvironmentImagesOutput::getPlatforms() const {
    return m_platforms;
}
void OAIListCuratedEnvironmentImagesOutput::setPlatforms(const QList &platforms) {
    m_platforms = platforms;
    m_platforms_isSet = true;
}

bool OAIListCuratedEnvironmentImagesOutput::is_platforms_Set() const{
    return m_platforms_isSet;
}

bool OAIListCuratedEnvironmentImagesOutput::is_platforms_Valid() const{
    return m_platforms_isValid;
}

bool OAIListCuratedEnvironmentImagesOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_platforms.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListCuratedEnvironmentImagesOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
