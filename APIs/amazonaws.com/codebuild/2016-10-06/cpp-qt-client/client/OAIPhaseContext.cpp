/**
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPhaseContext.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPhaseContext::OAIPhaseContext(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPhaseContext::OAIPhaseContext() {
    this->initializeModel();
}

OAIPhaseContext::~OAIPhaseContext() {}

void OAIPhaseContext::initializeModel() {

    m_status_code_isSet = false;
    m_status_code_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;
}

void OAIPhaseContext::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPhaseContext::fromJsonObject(QJsonObject json) {

    m_status_code_isValid = ::OpenAPI::fromJsonValue(m_status_code, json[QString("statusCode")]);
    m_status_code_isSet = !json[QString("statusCode")].isNull() && m_status_code_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;
}

QString OAIPhaseContext::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPhaseContext::asJsonObject() const {
    QJsonObject obj;
    if (m_status_code_isSet) {
        obj.insert(QString("statusCode"), ::OpenAPI::toJsonValue(m_status_code));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    return obj;
}

QString OAIPhaseContext::getStatusCode() const {
    return m_status_code;
}
void OAIPhaseContext::setStatusCode(const QString &status_code) {
    m_status_code = status_code;
    m_status_code_isSet = true;
}

bool OAIPhaseContext::is_status_code_Set() const{
    return m_status_code_isSet;
}

bool OAIPhaseContext::is_status_code_Valid() const{
    return m_status_code_isValid;
}

QString OAIPhaseContext::getMessage() const {
    return m_message;
}
void OAIPhaseContext::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIPhaseContext::is_message_Set() const{
    return m_message_isSet;
}

bool OAIPhaseContext::is_message_Valid() const{
    return m_message_isValid;
}

bool OAIPhaseContext::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_status_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPhaseContext::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
