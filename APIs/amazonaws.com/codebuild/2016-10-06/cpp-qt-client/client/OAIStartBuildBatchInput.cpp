/**
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartBuildBatchInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartBuildBatchInput::OAIStartBuildBatchInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartBuildBatchInput::OAIStartBuildBatchInput() {
    this->initializeModel();
}

OAIStartBuildBatchInput::~OAIStartBuildBatchInput() {}

void OAIStartBuildBatchInput::initializeModel() {

    m_project_name_isSet = false;
    m_project_name_isValid = false;

    m_secondary_sources_override_isSet = false;
    m_secondary_sources_override_isValid = false;

    m_secondary_sources_version_override_isSet = false;
    m_secondary_sources_version_override_isValid = false;

    m_source_version_isSet = false;
    m_source_version_isValid = false;

    m_artifacts_override_isSet = false;
    m_artifacts_override_isValid = false;

    m_secondary_artifacts_override_isSet = false;
    m_secondary_artifacts_override_isValid = false;

    m_environment_variables_override_isSet = false;
    m_environment_variables_override_isValid = false;

    m_source_type_override_isSet = false;
    m_source_type_override_isValid = false;

    m_source_location_override_isSet = false;
    m_source_location_override_isValid = false;

    m_source_auth_override_isSet = false;
    m_source_auth_override_isValid = false;

    m_git_clone_depth_override_isSet = false;
    m_git_clone_depth_override_isValid = false;

    m_git_submodules_config_override_isSet = false;
    m_git_submodules_config_override_isValid = false;

    m_buildspec_override_isSet = false;
    m_buildspec_override_isValid = false;

    m_insecure_ssl_override_isSet = false;
    m_insecure_ssl_override_isValid = false;

    m_report_build_batch_status_override_isSet = false;
    m_report_build_batch_status_override_isValid = false;

    m_environment_type_override_isSet = false;
    m_environment_type_override_isValid = false;

    m_image_override_isSet = false;
    m_image_override_isValid = false;

    m_compute_type_override_isSet = false;
    m_compute_type_override_isValid = false;

    m_certificate_override_isSet = false;
    m_certificate_override_isValid = false;

    m_cache_override_isSet = false;
    m_cache_override_isValid = false;

    m_service_role_override_isSet = false;
    m_service_role_override_isValid = false;

    m_privileged_mode_override_isSet = false;
    m_privileged_mode_override_isValid = false;

    m_build_timeout_in_minutes_override_isSet = false;
    m_build_timeout_in_minutes_override_isValid = false;

    m_queued_timeout_in_minutes_override_isSet = false;
    m_queued_timeout_in_minutes_override_isValid = false;

    m_encryption_key_override_isSet = false;
    m_encryption_key_override_isValid = false;

    m_logs_config_override_isSet = false;
    m_logs_config_override_isValid = false;

    m_registry_credential_override_isSet = false;
    m_registry_credential_override_isValid = false;

    m_image_pull_credentials_type_override_isSet = false;
    m_image_pull_credentials_type_override_isValid = false;

    m_build_batch_config_override_isSet = false;
    m_build_batch_config_override_isValid = false;

    m_debug_session_enabled_isSet = false;
    m_debug_session_enabled_isValid = false;
}

void OAIStartBuildBatchInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartBuildBatchInput::fromJsonObject(QJsonObject json) {

    m_project_name_isValid = ::OpenAPI::fromJsonValue(m_project_name, json[QString("projectName")]);
    m_project_name_isSet = !json[QString("projectName")].isNull() && m_project_name_isValid;

    m_secondary_sources_override_isValid = ::OpenAPI::fromJsonValue(m_secondary_sources_override, json[QString("secondarySourcesOverride")]);
    m_secondary_sources_override_isSet = !json[QString("secondarySourcesOverride")].isNull() && m_secondary_sources_override_isValid;

    m_secondary_sources_version_override_isValid = ::OpenAPI::fromJsonValue(m_secondary_sources_version_override, json[QString("secondarySourcesVersionOverride")]);
    m_secondary_sources_version_override_isSet = !json[QString("secondarySourcesVersionOverride")].isNull() && m_secondary_sources_version_override_isValid;

    m_source_version_isValid = ::OpenAPI::fromJsonValue(m_source_version, json[QString("sourceVersion")]);
    m_source_version_isSet = !json[QString("sourceVersion")].isNull() && m_source_version_isValid;

    m_artifacts_override_isValid = ::OpenAPI::fromJsonValue(m_artifacts_override, json[QString("artifactsOverride")]);
    m_artifacts_override_isSet = !json[QString("artifactsOverride")].isNull() && m_artifacts_override_isValid;

    m_secondary_artifacts_override_isValid = ::OpenAPI::fromJsonValue(m_secondary_artifacts_override, json[QString("secondaryArtifactsOverride")]);
    m_secondary_artifacts_override_isSet = !json[QString("secondaryArtifactsOverride")].isNull() && m_secondary_artifacts_override_isValid;

    m_environment_variables_override_isValid = ::OpenAPI::fromJsonValue(m_environment_variables_override, json[QString("environmentVariablesOverride")]);
    m_environment_variables_override_isSet = !json[QString("environmentVariablesOverride")].isNull() && m_environment_variables_override_isValid;

    m_source_type_override_isValid = ::OpenAPI::fromJsonValue(m_source_type_override, json[QString("sourceTypeOverride")]);
    m_source_type_override_isSet = !json[QString("sourceTypeOverride")].isNull() && m_source_type_override_isValid;

    m_source_location_override_isValid = ::OpenAPI::fromJsonValue(m_source_location_override, json[QString("sourceLocationOverride")]);
    m_source_location_override_isSet = !json[QString("sourceLocationOverride")].isNull() && m_source_location_override_isValid;

    m_source_auth_override_isValid = ::OpenAPI::fromJsonValue(m_source_auth_override, json[QString("sourceAuthOverride")]);
    m_source_auth_override_isSet = !json[QString("sourceAuthOverride")].isNull() && m_source_auth_override_isValid;

    m_git_clone_depth_override_isValid = ::OpenAPI::fromJsonValue(m_git_clone_depth_override, json[QString("gitCloneDepthOverride")]);
    m_git_clone_depth_override_isSet = !json[QString("gitCloneDepthOverride")].isNull() && m_git_clone_depth_override_isValid;

    m_git_submodules_config_override_isValid = ::OpenAPI::fromJsonValue(m_git_submodules_config_override, json[QString("gitSubmodulesConfigOverride")]);
    m_git_submodules_config_override_isSet = !json[QString("gitSubmodulesConfigOverride")].isNull() && m_git_submodules_config_override_isValid;

    m_buildspec_override_isValid = ::OpenAPI::fromJsonValue(m_buildspec_override, json[QString("buildspecOverride")]);
    m_buildspec_override_isSet = !json[QString("buildspecOverride")].isNull() && m_buildspec_override_isValid;

    m_insecure_ssl_override_isValid = ::OpenAPI::fromJsonValue(m_insecure_ssl_override, json[QString("insecureSslOverride")]);
    m_insecure_ssl_override_isSet = !json[QString("insecureSslOverride")].isNull() && m_insecure_ssl_override_isValid;

    m_report_build_batch_status_override_isValid = ::OpenAPI::fromJsonValue(m_report_build_batch_status_override, json[QString("reportBuildBatchStatusOverride")]);
    m_report_build_batch_status_override_isSet = !json[QString("reportBuildBatchStatusOverride")].isNull() && m_report_build_batch_status_override_isValid;

    m_environment_type_override_isValid = ::OpenAPI::fromJsonValue(m_environment_type_override, json[QString("environmentTypeOverride")]);
    m_environment_type_override_isSet = !json[QString("environmentTypeOverride")].isNull() && m_environment_type_override_isValid;

    m_image_override_isValid = ::OpenAPI::fromJsonValue(m_image_override, json[QString("imageOverride")]);
    m_image_override_isSet = !json[QString("imageOverride")].isNull() && m_image_override_isValid;

    m_compute_type_override_isValid = ::OpenAPI::fromJsonValue(m_compute_type_override, json[QString("computeTypeOverride")]);
    m_compute_type_override_isSet = !json[QString("computeTypeOverride")].isNull() && m_compute_type_override_isValid;

    m_certificate_override_isValid = ::OpenAPI::fromJsonValue(m_certificate_override, json[QString("certificateOverride")]);
    m_certificate_override_isSet = !json[QString("certificateOverride")].isNull() && m_certificate_override_isValid;

    m_cache_override_isValid = ::OpenAPI::fromJsonValue(m_cache_override, json[QString("cacheOverride")]);
    m_cache_override_isSet = !json[QString("cacheOverride")].isNull() && m_cache_override_isValid;

    m_service_role_override_isValid = ::OpenAPI::fromJsonValue(m_service_role_override, json[QString("serviceRoleOverride")]);
    m_service_role_override_isSet = !json[QString("serviceRoleOverride")].isNull() && m_service_role_override_isValid;

    m_privileged_mode_override_isValid = ::OpenAPI::fromJsonValue(m_privileged_mode_override, json[QString("privilegedModeOverride")]);
    m_privileged_mode_override_isSet = !json[QString("privilegedModeOverride")].isNull() && m_privileged_mode_override_isValid;

    m_build_timeout_in_minutes_override_isValid = ::OpenAPI::fromJsonValue(m_build_timeout_in_minutes_override, json[QString("buildTimeoutInMinutesOverride")]);
    m_build_timeout_in_minutes_override_isSet = !json[QString("buildTimeoutInMinutesOverride")].isNull() && m_build_timeout_in_minutes_override_isValid;

    m_queued_timeout_in_minutes_override_isValid = ::OpenAPI::fromJsonValue(m_queued_timeout_in_minutes_override, json[QString("queuedTimeoutInMinutesOverride")]);
    m_queued_timeout_in_minutes_override_isSet = !json[QString("queuedTimeoutInMinutesOverride")].isNull() && m_queued_timeout_in_minutes_override_isValid;

    m_encryption_key_override_isValid = ::OpenAPI::fromJsonValue(m_encryption_key_override, json[QString("encryptionKeyOverride")]);
    m_encryption_key_override_isSet = !json[QString("encryptionKeyOverride")].isNull() && m_encryption_key_override_isValid;

    m_logs_config_override_isValid = ::OpenAPI::fromJsonValue(m_logs_config_override, json[QString("logsConfigOverride")]);
    m_logs_config_override_isSet = !json[QString("logsConfigOverride")].isNull() && m_logs_config_override_isValid;

    m_registry_credential_override_isValid = ::OpenAPI::fromJsonValue(m_registry_credential_override, json[QString("registryCredentialOverride")]);
    m_registry_credential_override_isSet = !json[QString("registryCredentialOverride")].isNull() && m_registry_credential_override_isValid;

    m_image_pull_credentials_type_override_isValid = ::OpenAPI::fromJsonValue(m_image_pull_credentials_type_override, json[QString("imagePullCredentialsTypeOverride")]);
    m_image_pull_credentials_type_override_isSet = !json[QString("imagePullCredentialsTypeOverride")].isNull() && m_image_pull_credentials_type_override_isValid;

    m_build_batch_config_override_isValid = ::OpenAPI::fromJsonValue(m_build_batch_config_override, json[QString("buildBatchConfigOverride")]);
    m_build_batch_config_override_isSet = !json[QString("buildBatchConfigOverride")].isNull() && m_build_batch_config_override_isValid;

    m_debug_session_enabled_isValid = ::OpenAPI::fromJsonValue(m_debug_session_enabled, json[QString("debugSessionEnabled")]);
    m_debug_session_enabled_isSet = !json[QString("debugSessionEnabled")].isNull() && m_debug_session_enabled_isValid;
}

QString OAIStartBuildBatchInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartBuildBatchInput::asJsonObject() const {
    QJsonObject obj;
    if (m_project_name_isSet) {
        obj.insert(QString("projectName"), ::OpenAPI::toJsonValue(m_project_name));
    }
    if (m_secondary_sources_override.isSet()) {
        obj.insert(QString("secondarySourcesOverride"), ::OpenAPI::toJsonValue(m_secondary_sources_override));
    }
    if (m_secondary_sources_version_override.isSet()) {
        obj.insert(QString("secondarySourcesVersionOverride"), ::OpenAPI::toJsonValue(m_secondary_sources_version_override));
    }
    if (m_source_version_isSet) {
        obj.insert(QString("sourceVersion"), ::OpenAPI::toJsonValue(m_source_version));
    }
    if (m_artifacts_override.isSet()) {
        obj.insert(QString("artifactsOverride"), ::OpenAPI::toJsonValue(m_artifacts_override));
    }
    if (m_secondary_artifacts_override.isSet()) {
        obj.insert(QString("secondaryArtifactsOverride"), ::OpenAPI::toJsonValue(m_secondary_artifacts_override));
    }
    if (m_environment_variables_override.isSet()) {
        obj.insert(QString("environmentVariablesOverride"), ::OpenAPI::toJsonValue(m_environment_variables_override));
    }
    if (m_source_type_override.isSet()) {
        obj.insert(QString("sourceTypeOverride"), ::OpenAPI::toJsonValue(m_source_type_override));
    }
    if (m_source_location_override_isSet) {
        obj.insert(QString("sourceLocationOverride"), ::OpenAPI::toJsonValue(m_source_location_override));
    }
    if (m_source_auth_override.isSet()) {
        obj.insert(QString("sourceAuthOverride"), ::OpenAPI::toJsonValue(m_source_auth_override));
    }
    if (m_git_clone_depth_override_isSet) {
        obj.insert(QString("gitCloneDepthOverride"), ::OpenAPI::toJsonValue(m_git_clone_depth_override));
    }
    if (m_git_submodules_config_override.isSet()) {
        obj.insert(QString("gitSubmodulesConfigOverride"), ::OpenAPI::toJsonValue(m_git_submodules_config_override));
    }
    if (m_buildspec_override_isSet) {
        obj.insert(QString("buildspecOverride"), ::OpenAPI::toJsonValue(m_buildspec_override));
    }
    if (m_insecure_ssl_override_isSet) {
        obj.insert(QString("insecureSslOverride"), ::OpenAPI::toJsonValue(m_insecure_ssl_override));
    }
    if (m_report_build_batch_status_override_isSet) {
        obj.insert(QString("reportBuildBatchStatusOverride"), ::OpenAPI::toJsonValue(m_report_build_batch_status_override));
    }
    if (m_environment_type_override.isSet()) {
        obj.insert(QString("environmentTypeOverride"), ::OpenAPI::toJsonValue(m_environment_type_override));
    }
    if (m_image_override_isSet) {
        obj.insert(QString("imageOverride"), ::OpenAPI::toJsonValue(m_image_override));
    }
    if (m_compute_type_override.isSet()) {
        obj.insert(QString("computeTypeOverride"), ::OpenAPI::toJsonValue(m_compute_type_override));
    }
    if (m_certificate_override_isSet) {
        obj.insert(QString("certificateOverride"), ::OpenAPI::toJsonValue(m_certificate_override));
    }
    if (m_cache_override.isSet()) {
        obj.insert(QString("cacheOverride"), ::OpenAPI::toJsonValue(m_cache_override));
    }
    if (m_service_role_override_isSet) {
        obj.insert(QString("serviceRoleOverride"), ::OpenAPI::toJsonValue(m_service_role_override));
    }
    if (m_privileged_mode_override_isSet) {
        obj.insert(QString("privilegedModeOverride"), ::OpenAPI::toJsonValue(m_privileged_mode_override));
    }
    if (m_build_timeout_in_minutes_override_isSet) {
        obj.insert(QString("buildTimeoutInMinutesOverride"), ::OpenAPI::toJsonValue(m_build_timeout_in_minutes_override));
    }
    if (m_queued_timeout_in_minutes_override_isSet) {
        obj.insert(QString("queuedTimeoutInMinutesOverride"), ::OpenAPI::toJsonValue(m_queued_timeout_in_minutes_override));
    }
    if (m_encryption_key_override_isSet) {
        obj.insert(QString("encryptionKeyOverride"), ::OpenAPI::toJsonValue(m_encryption_key_override));
    }
    if (m_logs_config_override.isSet()) {
        obj.insert(QString("logsConfigOverride"), ::OpenAPI::toJsonValue(m_logs_config_override));
    }
    if (m_registry_credential_override.isSet()) {
        obj.insert(QString("registryCredentialOverride"), ::OpenAPI::toJsonValue(m_registry_credential_override));
    }
    if (m_image_pull_credentials_type_override.isSet()) {
        obj.insert(QString("imagePullCredentialsTypeOverride"), ::OpenAPI::toJsonValue(m_image_pull_credentials_type_override));
    }
    if (m_build_batch_config_override.isSet()) {
        obj.insert(QString("buildBatchConfigOverride"), ::OpenAPI::toJsonValue(m_build_batch_config_override));
    }
    if (m_debug_session_enabled_isSet) {
        obj.insert(QString("debugSessionEnabled"), ::OpenAPI::toJsonValue(m_debug_session_enabled));
    }
    return obj;
}

QString OAIStartBuildBatchInput::getProjectName() const {
    return m_project_name;
}
void OAIStartBuildBatchInput::setProjectName(const QString &project_name) {
    m_project_name = project_name;
    m_project_name_isSet = true;
}

bool OAIStartBuildBatchInput::is_project_name_Set() const{
    return m_project_name_isSet;
}

bool OAIStartBuildBatchInput::is_project_name_Valid() const{
    return m_project_name_isValid;
}

QList OAIStartBuildBatchInput::getSecondarySourcesOverride() const {
    return m_secondary_sources_override;
}
void OAIStartBuildBatchInput::setSecondarySourcesOverride(const QList &secondary_sources_override) {
    m_secondary_sources_override = secondary_sources_override;
    m_secondary_sources_override_isSet = true;
}

bool OAIStartBuildBatchInput::is_secondary_sources_override_Set() const{
    return m_secondary_sources_override_isSet;
}

bool OAIStartBuildBatchInput::is_secondary_sources_override_Valid() const{
    return m_secondary_sources_override_isValid;
}

QList OAIStartBuildBatchInput::getSecondarySourcesVersionOverride() const {
    return m_secondary_sources_version_override;
}
void OAIStartBuildBatchInput::setSecondarySourcesVersionOverride(const QList &secondary_sources_version_override) {
    m_secondary_sources_version_override = secondary_sources_version_override;
    m_secondary_sources_version_override_isSet = true;
}

bool OAIStartBuildBatchInput::is_secondary_sources_version_override_Set() const{
    return m_secondary_sources_version_override_isSet;
}

bool OAIStartBuildBatchInput::is_secondary_sources_version_override_Valid() const{
    return m_secondary_sources_version_override_isValid;
}

QString OAIStartBuildBatchInput::getSourceVersion() const {
    return m_source_version;
}
void OAIStartBuildBatchInput::setSourceVersion(const QString &source_version) {
    m_source_version = source_version;
    m_source_version_isSet = true;
}

bool OAIStartBuildBatchInput::is_source_version_Set() const{
    return m_source_version_isSet;
}

bool OAIStartBuildBatchInput::is_source_version_Valid() const{
    return m_source_version_isValid;
}

OAIStartBuildBatchInput_artifactsOverride OAIStartBuildBatchInput::getArtifactsOverride() const {
    return m_artifacts_override;
}
void OAIStartBuildBatchInput::setArtifactsOverride(const OAIStartBuildBatchInput_artifactsOverride &artifacts_override) {
    m_artifacts_override = artifacts_override;
    m_artifacts_override_isSet = true;
}

bool OAIStartBuildBatchInput::is_artifacts_override_Set() const{
    return m_artifacts_override_isSet;
}

bool OAIStartBuildBatchInput::is_artifacts_override_Valid() const{
    return m_artifacts_override_isValid;
}

QList OAIStartBuildBatchInput::getSecondaryArtifactsOverride() const {
    return m_secondary_artifacts_override;
}
void OAIStartBuildBatchInput::setSecondaryArtifactsOverride(const QList &secondary_artifacts_override) {
    m_secondary_artifacts_override = secondary_artifacts_override;
    m_secondary_artifacts_override_isSet = true;
}

bool OAIStartBuildBatchInput::is_secondary_artifacts_override_Set() const{
    return m_secondary_artifacts_override_isSet;
}

bool OAIStartBuildBatchInput::is_secondary_artifacts_override_Valid() const{
    return m_secondary_artifacts_override_isValid;
}

QList OAIStartBuildBatchInput::getEnvironmentVariablesOverride() const {
    return m_environment_variables_override;
}
void OAIStartBuildBatchInput::setEnvironmentVariablesOverride(const QList &environment_variables_override) {
    m_environment_variables_override = environment_variables_override;
    m_environment_variables_override_isSet = true;
}

bool OAIStartBuildBatchInput::is_environment_variables_override_Set() const{
    return m_environment_variables_override_isSet;
}

bool OAIStartBuildBatchInput::is_environment_variables_override_Valid() const{
    return m_environment_variables_override_isValid;
}

OAISourceType OAIStartBuildBatchInput::getSourceTypeOverride() const {
    return m_source_type_override;
}
void OAIStartBuildBatchInput::setSourceTypeOverride(const OAISourceType &source_type_override) {
    m_source_type_override = source_type_override;
    m_source_type_override_isSet = true;
}

bool OAIStartBuildBatchInput::is_source_type_override_Set() const{
    return m_source_type_override_isSet;
}

bool OAIStartBuildBatchInput::is_source_type_override_Valid() const{
    return m_source_type_override_isValid;
}

QString OAIStartBuildBatchInput::getSourceLocationOverride() const {
    return m_source_location_override;
}
void OAIStartBuildBatchInput::setSourceLocationOverride(const QString &source_location_override) {
    m_source_location_override = source_location_override;
    m_source_location_override_isSet = true;
}

bool OAIStartBuildBatchInput::is_source_location_override_Set() const{
    return m_source_location_override_isSet;
}

bool OAIStartBuildBatchInput::is_source_location_override_Valid() const{
    return m_source_location_override_isValid;
}

OAIStartBuildBatchInput_sourceAuthOverride OAIStartBuildBatchInput::getSourceAuthOverride() const {
    return m_source_auth_override;
}
void OAIStartBuildBatchInput::setSourceAuthOverride(const OAIStartBuildBatchInput_sourceAuthOverride &source_auth_override) {
    m_source_auth_override = source_auth_override;
    m_source_auth_override_isSet = true;
}

bool OAIStartBuildBatchInput::is_source_auth_override_Set() const{
    return m_source_auth_override_isSet;
}

bool OAIStartBuildBatchInput::is_source_auth_override_Valid() const{
    return m_source_auth_override_isValid;
}

qint32 OAIStartBuildBatchInput::getGitCloneDepthOverride() const {
    return m_git_clone_depth_override;
}
void OAIStartBuildBatchInput::setGitCloneDepthOverride(const qint32 &git_clone_depth_override) {
    m_git_clone_depth_override = git_clone_depth_override;
    m_git_clone_depth_override_isSet = true;
}

bool OAIStartBuildBatchInput::is_git_clone_depth_override_Set() const{
    return m_git_clone_depth_override_isSet;
}

bool OAIStartBuildBatchInput::is_git_clone_depth_override_Valid() const{
    return m_git_clone_depth_override_isValid;
}

OAIStartBuildBatchInput_gitSubmodulesConfigOverride OAIStartBuildBatchInput::getGitSubmodulesConfigOverride() const {
    return m_git_submodules_config_override;
}
void OAIStartBuildBatchInput::setGitSubmodulesConfigOverride(const OAIStartBuildBatchInput_gitSubmodulesConfigOverride &git_submodules_config_override) {
    m_git_submodules_config_override = git_submodules_config_override;
    m_git_submodules_config_override_isSet = true;
}

bool OAIStartBuildBatchInput::is_git_submodules_config_override_Set() const{
    return m_git_submodules_config_override_isSet;
}

bool OAIStartBuildBatchInput::is_git_submodules_config_override_Valid() const{
    return m_git_submodules_config_override_isValid;
}

QString OAIStartBuildBatchInput::getBuildspecOverride() const {
    return m_buildspec_override;
}
void OAIStartBuildBatchInput::setBuildspecOverride(const QString &buildspec_override) {
    m_buildspec_override = buildspec_override;
    m_buildspec_override_isSet = true;
}

bool OAIStartBuildBatchInput::is_buildspec_override_Set() const{
    return m_buildspec_override_isSet;
}

bool OAIStartBuildBatchInput::is_buildspec_override_Valid() const{
    return m_buildspec_override_isValid;
}

bool OAIStartBuildBatchInput::getInsecureSslOverride() const {
    return m_insecure_ssl_override;
}
void OAIStartBuildBatchInput::setInsecureSslOverride(const bool &insecure_ssl_override) {
    m_insecure_ssl_override = insecure_ssl_override;
    m_insecure_ssl_override_isSet = true;
}

bool OAIStartBuildBatchInput::is_insecure_ssl_override_Set() const{
    return m_insecure_ssl_override_isSet;
}

bool OAIStartBuildBatchInput::is_insecure_ssl_override_Valid() const{
    return m_insecure_ssl_override_isValid;
}

bool OAIStartBuildBatchInput::getReportBuildBatchStatusOverride() const {
    return m_report_build_batch_status_override;
}
void OAIStartBuildBatchInput::setReportBuildBatchStatusOverride(const bool &report_build_batch_status_override) {
    m_report_build_batch_status_override = report_build_batch_status_override;
    m_report_build_batch_status_override_isSet = true;
}

bool OAIStartBuildBatchInput::is_report_build_batch_status_override_Set() const{
    return m_report_build_batch_status_override_isSet;
}

bool OAIStartBuildBatchInput::is_report_build_batch_status_override_Valid() const{
    return m_report_build_batch_status_override_isValid;
}

OAIEnvironmentType OAIStartBuildBatchInput::getEnvironmentTypeOverride() const {
    return m_environment_type_override;
}
void OAIStartBuildBatchInput::setEnvironmentTypeOverride(const OAIEnvironmentType &environment_type_override) {
    m_environment_type_override = environment_type_override;
    m_environment_type_override_isSet = true;
}

bool OAIStartBuildBatchInput::is_environment_type_override_Set() const{
    return m_environment_type_override_isSet;
}

bool OAIStartBuildBatchInput::is_environment_type_override_Valid() const{
    return m_environment_type_override_isValid;
}

QString OAIStartBuildBatchInput::getImageOverride() const {
    return m_image_override;
}
void OAIStartBuildBatchInput::setImageOverride(const QString &image_override) {
    m_image_override = image_override;
    m_image_override_isSet = true;
}

bool OAIStartBuildBatchInput::is_image_override_Set() const{
    return m_image_override_isSet;
}

bool OAIStartBuildBatchInput::is_image_override_Valid() const{
    return m_image_override_isValid;
}

OAIComputeType OAIStartBuildBatchInput::getComputeTypeOverride() const {
    return m_compute_type_override;
}
void OAIStartBuildBatchInput::setComputeTypeOverride(const OAIComputeType &compute_type_override) {
    m_compute_type_override = compute_type_override;
    m_compute_type_override_isSet = true;
}

bool OAIStartBuildBatchInput::is_compute_type_override_Set() const{
    return m_compute_type_override_isSet;
}

bool OAIStartBuildBatchInput::is_compute_type_override_Valid() const{
    return m_compute_type_override_isValid;
}

QString OAIStartBuildBatchInput::getCertificateOverride() const {
    return m_certificate_override;
}
void OAIStartBuildBatchInput::setCertificateOverride(const QString &certificate_override) {
    m_certificate_override = certificate_override;
    m_certificate_override_isSet = true;
}

bool OAIStartBuildBatchInput::is_certificate_override_Set() const{
    return m_certificate_override_isSet;
}

bool OAIStartBuildBatchInput::is_certificate_override_Valid() const{
    return m_certificate_override_isValid;
}

OAIStartBuildBatchInput_cacheOverride OAIStartBuildBatchInput::getCacheOverride() const {
    return m_cache_override;
}
void OAIStartBuildBatchInput::setCacheOverride(const OAIStartBuildBatchInput_cacheOverride &cache_override) {
    m_cache_override = cache_override;
    m_cache_override_isSet = true;
}

bool OAIStartBuildBatchInput::is_cache_override_Set() const{
    return m_cache_override_isSet;
}

bool OAIStartBuildBatchInput::is_cache_override_Valid() const{
    return m_cache_override_isValid;
}

QString OAIStartBuildBatchInput::getServiceRoleOverride() const {
    return m_service_role_override;
}
void OAIStartBuildBatchInput::setServiceRoleOverride(const QString &service_role_override) {
    m_service_role_override = service_role_override;
    m_service_role_override_isSet = true;
}

bool OAIStartBuildBatchInput::is_service_role_override_Set() const{
    return m_service_role_override_isSet;
}

bool OAIStartBuildBatchInput::is_service_role_override_Valid() const{
    return m_service_role_override_isValid;
}

bool OAIStartBuildBatchInput::getPrivilegedModeOverride() const {
    return m_privileged_mode_override;
}
void OAIStartBuildBatchInput::setPrivilegedModeOverride(const bool &privileged_mode_override) {
    m_privileged_mode_override = privileged_mode_override;
    m_privileged_mode_override_isSet = true;
}

bool OAIStartBuildBatchInput::is_privileged_mode_override_Set() const{
    return m_privileged_mode_override_isSet;
}

bool OAIStartBuildBatchInput::is_privileged_mode_override_Valid() const{
    return m_privileged_mode_override_isValid;
}

qint32 OAIStartBuildBatchInput::getBuildTimeoutInMinutesOverride() const {
    return m_build_timeout_in_minutes_override;
}
void OAIStartBuildBatchInput::setBuildTimeoutInMinutesOverride(const qint32 &build_timeout_in_minutes_override) {
    m_build_timeout_in_minutes_override = build_timeout_in_minutes_override;
    m_build_timeout_in_minutes_override_isSet = true;
}

bool OAIStartBuildBatchInput::is_build_timeout_in_minutes_override_Set() const{
    return m_build_timeout_in_minutes_override_isSet;
}

bool OAIStartBuildBatchInput::is_build_timeout_in_minutes_override_Valid() const{
    return m_build_timeout_in_minutes_override_isValid;
}

qint32 OAIStartBuildBatchInput::getQueuedTimeoutInMinutesOverride() const {
    return m_queued_timeout_in_minutes_override;
}
void OAIStartBuildBatchInput::setQueuedTimeoutInMinutesOverride(const qint32 &queued_timeout_in_minutes_override) {
    m_queued_timeout_in_minutes_override = queued_timeout_in_minutes_override;
    m_queued_timeout_in_minutes_override_isSet = true;
}

bool OAIStartBuildBatchInput::is_queued_timeout_in_minutes_override_Set() const{
    return m_queued_timeout_in_minutes_override_isSet;
}

bool OAIStartBuildBatchInput::is_queued_timeout_in_minutes_override_Valid() const{
    return m_queued_timeout_in_minutes_override_isValid;
}

QString OAIStartBuildBatchInput::getEncryptionKeyOverride() const {
    return m_encryption_key_override;
}
void OAIStartBuildBatchInput::setEncryptionKeyOverride(const QString &encryption_key_override) {
    m_encryption_key_override = encryption_key_override;
    m_encryption_key_override_isSet = true;
}

bool OAIStartBuildBatchInput::is_encryption_key_override_Set() const{
    return m_encryption_key_override_isSet;
}

bool OAIStartBuildBatchInput::is_encryption_key_override_Valid() const{
    return m_encryption_key_override_isValid;
}

OAIStartBuildBatchInput_logsConfigOverride OAIStartBuildBatchInput::getLogsConfigOverride() const {
    return m_logs_config_override;
}
void OAIStartBuildBatchInput::setLogsConfigOverride(const OAIStartBuildBatchInput_logsConfigOverride &logs_config_override) {
    m_logs_config_override = logs_config_override;
    m_logs_config_override_isSet = true;
}

bool OAIStartBuildBatchInput::is_logs_config_override_Set() const{
    return m_logs_config_override_isSet;
}

bool OAIStartBuildBatchInput::is_logs_config_override_Valid() const{
    return m_logs_config_override_isValid;
}

OAIStartBuildBatchInput_registryCredentialOverride OAIStartBuildBatchInput::getRegistryCredentialOverride() const {
    return m_registry_credential_override;
}
void OAIStartBuildBatchInput::setRegistryCredentialOverride(const OAIStartBuildBatchInput_registryCredentialOverride &registry_credential_override) {
    m_registry_credential_override = registry_credential_override;
    m_registry_credential_override_isSet = true;
}

bool OAIStartBuildBatchInput::is_registry_credential_override_Set() const{
    return m_registry_credential_override_isSet;
}

bool OAIStartBuildBatchInput::is_registry_credential_override_Valid() const{
    return m_registry_credential_override_isValid;
}

OAIImagePullCredentialsType OAIStartBuildBatchInput::getImagePullCredentialsTypeOverride() const {
    return m_image_pull_credentials_type_override;
}
void OAIStartBuildBatchInput::setImagePullCredentialsTypeOverride(const OAIImagePullCredentialsType &image_pull_credentials_type_override) {
    m_image_pull_credentials_type_override = image_pull_credentials_type_override;
    m_image_pull_credentials_type_override_isSet = true;
}

bool OAIStartBuildBatchInput::is_image_pull_credentials_type_override_Set() const{
    return m_image_pull_credentials_type_override_isSet;
}

bool OAIStartBuildBatchInput::is_image_pull_credentials_type_override_Valid() const{
    return m_image_pull_credentials_type_override_isValid;
}

OAIStartBuildBatchInput_buildBatchConfigOverride OAIStartBuildBatchInput::getBuildBatchConfigOverride() const {
    return m_build_batch_config_override;
}
void OAIStartBuildBatchInput::setBuildBatchConfigOverride(const OAIStartBuildBatchInput_buildBatchConfigOverride &build_batch_config_override) {
    m_build_batch_config_override = build_batch_config_override;
    m_build_batch_config_override_isSet = true;
}

bool OAIStartBuildBatchInput::is_build_batch_config_override_Set() const{
    return m_build_batch_config_override_isSet;
}

bool OAIStartBuildBatchInput::is_build_batch_config_override_Valid() const{
    return m_build_batch_config_override_isValid;
}

bool OAIStartBuildBatchInput::getDebugSessionEnabled() const {
    return m_debug_session_enabled;
}
void OAIStartBuildBatchInput::setDebugSessionEnabled(const bool &debug_session_enabled) {
    m_debug_session_enabled = debug_session_enabled;
    m_debug_session_enabled_isSet = true;
}

bool OAIStartBuildBatchInput::is_debug_session_enabled_Set() const{
    return m_debug_session_enabled_isSet;
}

bool OAIStartBuildBatchInput::is_debug_session_enabled_Valid() const{
    return m_debug_session_enabled_isValid;
}

bool OAIStartBuildBatchInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_project_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_sources_override.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_sources_version_override.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_artifacts_override.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_artifacts_override.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_variables_override.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_type_override.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_location_override_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_auth_override.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_git_clone_depth_override_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_git_submodules_config_override.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_buildspec_override_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_insecure_ssl_override_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_build_batch_status_override_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_type_override.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_override_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compute_type_override.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_override_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cache_override.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_role_override_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_privileged_mode_override_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_timeout_in_minutes_override_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_queued_timeout_in_minutes_override_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_key_override_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logs_config_override.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_registry_credential_override.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_pull_credentials_type_override.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_batch_config_override.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_debug_session_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartBuildBatchInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_project_name_isValid && true;
}

} // namespace OpenAPI
