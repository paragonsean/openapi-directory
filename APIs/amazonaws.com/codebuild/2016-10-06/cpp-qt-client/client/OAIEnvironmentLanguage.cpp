/**
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnvironmentLanguage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnvironmentLanguage::OAIEnvironmentLanguage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnvironmentLanguage::OAIEnvironmentLanguage() {
    this->initializeModel();
}

OAIEnvironmentLanguage::~OAIEnvironmentLanguage() {}

void OAIEnvironmentLanguage::initializeModel() {

    m_language_isSet = false;
    m_language_isValid = false;

    m_images_isSet = false;
    m_images_isValid = false;
}

void OAIEnvironmentLanguage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnvironmentLanguage::fromJsonObject(QJsonObject json) {

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_images_isValid = ::OpenAPI::fromJsonValue(m_images, json[QString("images")]);
    m_images_isSet = !json[QString("images")].isNull() && m_images_isValid;
}

QString OAIEnvironmentLanguage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnvironmentLanguage::asJsonObject() const {
    QJsonObject obj;
    if (m_language.isSet()) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_images.isSet()) {
        obj.insert(QString("images"), ::OpenAPI::toJsonValue(m_images));
    }
    return obj;
}

OAILanguageType OAIEnvironmentLanguage::getLanguage() const {
    return m_language;
}
void OAIEnvironmentLanguage::setLanguage(const OAILanguageType &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIEnvironmentLanguage::is_language_Set() const{
    return m_language_isSet;
}

bool OAIEnvironmentLanguage::is_language_Valid() const{
    return m_language_isValid;
}

QList OAIEnvironmentLanguage::getImages() const {
    return m_images;
}
void OAIEnvironmentLanguage::setImages(const QList &images) {
    m_images = images;
    m_images_isSet = true;
}

bool OAIEnvironmentLanguage::is_images_Set() const{
    return m_images_isSet;
}

bool OAIEnvironmentLanguage::is_images_Valid() const{
    return m_images_isValid;
}

bool OAIEnvironmentLanguage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_language.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_images.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnvironmentLanguage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
