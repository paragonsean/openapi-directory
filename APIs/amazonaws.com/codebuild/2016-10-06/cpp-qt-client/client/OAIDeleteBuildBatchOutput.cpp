/**
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteBuildBatchOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteBuildBatchOutput::OAIDeleteBuildBatchOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteBuildBatchOutput::OAIDeleteBuildBatchOutput() {
    this->initializeModel();
}

OAIDeleteBuildBatchOutput::~OAIDeleteBuildBatchOutput() {}

void OAIDeleteBuildBatchOutput::initializeModel() {

    m_status_code_isSet = false;
    m_status_code_isValid = false;

    m_builds_deleted_isSet = false;
    m_builds_deleted_isValid = false;

    m_builds_not_deleted_isSet = false;
    m_builds_not_deleted_isValid = false;
}

void OAIDeleteBuildBatchOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteBuildBatchOutput::fromJsonObject(QJsonObject json) {

    m_status_code_isValid = ::OpenAPI::fromJsonValue(m_status_code, json[QString("statusCode")]);
    m_status_code_isSet = !json[QString("statusCode")].isNull() && m_status_code_isValid;

    m_builds_deleted_isValid = ::OpenAPI::fromJsonValue(m_builds_deleted, json[QString("buildsDeleted")]);
    m_builds_deleted_isSet = !json[QString("buildsDeleted")].isNull() && m_builds_deleted_isValid;

    m_builds_not_deleted_isValid = ::OpenAPI::fromJsonValue(m_builds_not_deleted, json[QString("buildsNotDeleted")]);
    m_builds_not_deleted_isSet = !json[QString("buildsNotDeleted")].isNull() && m_builds_not_deleted_isValid;
}

QString OAIDeleteBuildBatchOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteBuildBatchOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_status_code_isSet) {
        obj.insert(QString("statusCode"), ::OpenAPI::toJsonValue(m_status_code));
    }
    if (m_builds_deleted.isSet()) {
        obj.insert(QString("buildsDeleted"), ::OpenAPI::toJsonValue(m_builds_deleted));
    }
    if (m_builds_not_deleted.isSet()) {
        obj.insert(QString("buildsNotDeleted"), ::OpenAPI::toJsonValue(m_builds_not_deleted));
    }
    return obj;
}

QString OAIDeleteBuildBatchOutput::getStatusCode() const {
    return m_status_code;
}
void OAIDeleteBuildBatchOutput::setStatusCode(const QString &status_code) {
    m_status_code = status_code;
    m_status_code_isSet = true;
}

bool OAIDeleteBuildBatchOutput::is_status_code_Set() const{
    return m_status_code_isSet;
}

bool OAIDeleteBuildBatchOutput::is_status_code_Valid() const{
    return m_status_code_isValid;
}

QList OAIDeleteBuildBatchOutput::getBuildsDeleted() const {
    return m_builds_deleted;
}
void OAIDeleteBuildBatchOutput::setBuildsDeleted(const QList &builds_deleted) {
    m_builds_deleted = builds_deleted;
    m_builds_deleted_isSet = true;
}

bool OAIDeleteBuildBatchOutput::is_builds_deleted_Set() const{
    return m_builds_deleted_isSet;
}

bool OAIDeleteBuildBatchOutput::is_builds_deleted_Valid() const{
    return m_builds_deleted_isValid;
}

QList OAIDeleteBuildBatchOutput::getBuildsNotDeleted() const {
    return m_builds_not_deleted;
}
void OAIDeleteBuildBatchOutput::setBuildsNotDeleted(const QList &builds_not_deleted) {
    m_builds_not_deleted = builds_not_deleted;
    m_builds_not_deleted_isSet = true;
}

bool OAIDeleteBuildBatchOutput::is_builds_not_deleted_Set() const{
    return m_builds_not_deleted_isSet;
}

bool OAIDeleteBuildBatchOutput::is_builds_not_deleted_Valid() const{
    return m_builds_not_deleted_isValid;
}

bool OAIDeleteBuildBatchOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_status_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_builds_deleted.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_builds_not_deleted.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteBuildBatchOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
