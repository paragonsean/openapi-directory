/**
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeTestCasesOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeTestCasesOutput::OAIDescribeTestCasesOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeTestCasesOutput::OAIDescribeTestCasesOutput() {
    this->initializeModel();
}

OAIDescribeTestCasesOutput::~OAIDescribeTestCasesOutput() {}

void OAIDescribeTestCasesOutput::initializeModel() {

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_test_cases_isSet = false;
    m_test_cases_isValid = false;
}

void OAIDescribeTestCasesOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeTestCasesOutput::fromJsonObject(QJsonObject json) {

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;

    m_test_cases_isValid = ::OpenAPI::fromJsonValue(m_test_cases, json[QString("testCases")]);
    m_test_cases_isSet = !json[QString("testCases")].isNull() && m_test_cases_isValid;
}

QString OAIDescribeTestCasesOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeTestCasesOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_test_cases.isSet()) {
        obj.insert(QString("testCases"), ::OpenAPI::toJsonValue(m_test_cases));
    }
    return obj;
}

QString OAIDescribeTestCasesOutput::getNextToken() const {
    return m_next_token;
}
void OAIDescribeTestCasesOutput::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIDescribeTestCasesOutput::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIDescribeTestCasesOutput::is_next_token_Valid() const{
    return m_next_token_isValid;
}

QList OAIDescribeTestCasesOutput::getTestCases() const {
    return m_test_cases;
}
void OAIDescribeTestCasesOutput::setTestCases(const QList &test_cases) {
    m_test_cases = test_cases;
    m_test_cases_isSet = true;
}

bool OAIDescribeTestCasesOutput::is_test_cases_Set() const{
    return m_test_cases_isSet;
}

bool OAIDescribeTestCasesOutput::is_test_cases_Valid() const{
    return m_test_cases_isValid;
}

bool OAIDescribeTestCasesOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_cases.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeTestCasesOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
