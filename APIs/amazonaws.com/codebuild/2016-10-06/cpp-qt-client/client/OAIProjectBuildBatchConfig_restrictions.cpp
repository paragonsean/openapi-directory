/**
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectBuildBatchConfig_restrictions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectBuildBatchConfig_restrictions::OAIProjectBuildBatchConfig_restrictions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectBuildBatchConfig_restrictions::OAIProjectBuildBatchConfig_restrictions() {
    this->initializeModel();
}

OAIProjectBuildBatchConfig_restrictions::~OAIProjectBuildBatchConfig_restrictions() {}

void OAIProjectBuildBatchConfig_restrictions::initializeModel() {

    m_maximum_builds_allowed_isSet = false;
    m_maximum_builds_allowed_isValid = false;

    m_compute_types_allowed_isSet = false;
    m_compute_types_allowed_isValid = false;
}

void OAIProjectBuildBatchConfig_restrictions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectBuildBatchConfig_restrictions::fromJsonObject(QJsonObject json) {

    m_maximum_builds_allowed_isValid = ::OpenAPI::fromJsonValue(m_maximum_builds_allowed, json[QString("maximumBuildsAllowed")]);
    m_maximum_builds_allowed_isSet = !json[QString("maximumBuildsAllowed")].isNull() && m_maximum_builds_allowed_isValid;

    m_compute_types_allowed_isValid = ::OpenAPI::fromJsonValue(m_compute_types_allowed, json[QString("computeTypesAllowed")]);
    m_compute_types_allowed_isSet = !json[QString("computeTypesAllowed")].isNull() && m_compute_types_allowed_isValid;
}

QString OAIProjectBuildBatchConfig_restrictions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectBuildBatchConfig_restrictions::asJsonObject() const {
    QJsonObject obj;
    if (m_maximum_builds_allowed_isSet) {
        obj.insert(QString("maximumBuildsAllowed"), ::OpenAPI::toJsonValue(m_maximum_builds_allowed));
    }
    if (m_compute_types_allowed.isSet()) {
        obj.insert(QString("computeTypesAllowed"), ::OpenAPI::toJsonValue(m_compute_types_allowed));
    }
    return obj;
}

qint32 OAIProjectBuildBatchConfig_restrictions::getMaximumBuildsAllowed() const {
    return m_maximum_builds_allowed;
}
void OAIProjectBuildBatchConfig_restrictions::setMaximumBuildsAllowed(const qint32 &maximum_builds_allowed) {
    m_maximum_builds_allowed = maximum_builds_allowed;
    m_maximum_builds_allowed_isSet = true;
}

bool OAIProjectBuildBatchConfig_restrictions::is_maximum_builds_allowed_Set() const{
    return m_maximum_builds_allowed_isSet;
}

bool OAIProjectBuildBatchConfig_restrictions::is_maximum_builds_allowed_Valid() const{
    return m_maximum_builds_allowed_isValid;
}

QList OAIProjectBuildBatchConfig_restrictions::getComputeTypesAllowed() const {
    return m_compute_types_allowed;
}
void OAIProjectBuildBatchConfig_restrictions::setComputeTypesAllowed(const QList &compute_types_allowed) {
    m_compute_types_allowed = compute_types_allowed;
    m_compute_types_allowed_isSet = true;
}

bool OAIProjectBuildBatchConfig_restrictions::is_compute_types_allowed_Set() const{
    return m_compute_types_allowed_isSet;
}

bool OAIProjectBuildBatchConfig_restrictions::is_compute_types_allowed_Valid() const{
    return m_compute_types_allowed_isValid;
}

bool OAIProjectBuildBatchConfig_restrictions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_maximum_builds_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compute_types_allowed.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectBuildBatchConfig_restrictions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
