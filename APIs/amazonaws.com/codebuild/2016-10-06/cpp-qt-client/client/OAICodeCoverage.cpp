/**
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICodeCoverage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICodeCoverage::OAICodeCoverage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICodeCoverage::OAICodeCoverage() {
    this->initializeModel();
}

OAICodeCoverage::~OAICodeCoverage() {}

void OAICodeCoverage::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_report_arn_isSet = false;
    m_report_arn_isValid = false;

    m_file_path_isSet = false;
    m_file_path_isValid = false;

    m_line_coverage_percentage_isSet = false;
    m_line_coverage_percentage_isValid = false;

    m_lines_covered_isSet = false;
    m_lines_covered_isValid = false;

    m_lines_missed_isSet = false;
    m_lines_missed_isValid = false;

    m_branch_coverage_percentage_isSet = false;
    m_branch_coverage_percentage_isValid = false;

    m_branches_covered_isSet = false;
    m_branches_covered_isValid = false;

    m_branches_missed_isSet = false;
    m_branches_missed_isValid = false;

    m_expired_isSet = false;
    m_expired_isValid = false;
}

void OAICodeCoverage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICodeCoverage::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_report_arn_isValid = ::OpenAPI::fromJsonValue(m_report_arn, json[QString("reportARN")]);
    m_report_arn_isSet = !json[QString("reportARN")].isNull() && m_report_arn_isValid;

    m_file_path_isValid = ::OpenAPI::fromJsonValue(m_file_path, json[QString("filePath")]);
    m_file_path_isSet = !json[QString("filePath")].isNull() && m_file_path_isValid;

    m_line_coverage_percentage_isValid = ::OpenAPI::fromJsonValue(m_line_coverage_percentage, json[QString("lineCoveragePercentage")]);
    m_line_coverage_percentage_isSet = !json[QString("lineCoveragePercentage")].isNull() && m_line_coverage_percentage_isValid;

    m_lines_covered_isValid = ::OpenAPI::fromJsonValue(m_lines_covered, json[QString("linesCovered")]);
    m_lines_covered_isSet = !json[QString("linesCovered")].isNull() && m_lines_covered_isValid;

    m_lines_missed_isValid = ::OpenAPI::fromJsonValue(m_lines_missed, json[QString("linesMissed")]);
    m_lines_missed_isSet = !json[QString("linesMissed")].isNull() && m_lines_missed_isValid;

    m_branch_coverage_percentage_isValid = ::OpenAPI::fromJsonValue(m_branch_coverage_percentage, json[QString("branchCoveragePercentage")]);
    m_branch_coverage_percentage_isSet = !json[QString("branchCoveragePercentage")].isNull() && m_branch_coverage_percentage_isValid;

    m_branches_covered_isValid = ::OpenAPI::fromJsonValue(m_branches_covered, json[QString("branchesCovered")]);
    m_branches_covered_isSet = !json[QString("branchesCovered")].isNull() && m_branches_covered_isValid;

    m_branches_missed_isValid = ::OpenAPI::fromJsonValue(m_branches_missed, json[QString("branchesMissed")]);
    m_branches_missed_isSet = !json[QString("branchesMissed")].isNull() && m_branches_missed_isValid;

    m_expired_isValid = ::OpenAPI::fromJsonValue(m_expired, json[QString("expired")]);
    m_expired_isSet = !json[QString("expired")].isNull() && m_expired_isValid;
}

QString OAICodeCoverage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICodeCoverage::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_report_arn_isSet) {
        obj.insert(QString("reportARN"), ::OpenAPI::toJsonValue(m_report_arn));
    }
    if (m_file_path_isSet) {
        obj.insert(QString("filePath"), ::OpenAPI::toJsonValue(m_file_path));
    }
    if (m_line_coverage_percentage_isSet) {
        obj.insert(QString("lineCoveragePercentage"), ::OpenAPI::toJsonValue(m_line_coverage_percentage));
    }
    if (m_lines_covered_isSet) {
        obj.insert(QString("linesCovered"), ::OpenAPI::toJsonValue(m_lines_covered));
    }
    if (m_lines_missed_isSet) {
        obj.insert(QString("linesMissed"), ::OpenAPI::toJsonValue(m_lines_missed));
    }
    if (m_branch_coverage_percentage_isSet) {
        obj.insert(QString("branchCoveragePercentage"), ::OpenAPI::toJsonValue(m_branch_coverage_percentage));
    }
    if (m_branches_covered_isSet) {
        obj.insert(QString("branchesCovered"), ::OpenAPI::toJsonValue(m_branches_covered));
    }
    if (m_branches_missed_isSet) {
        obj.insert(QString("branchesMissed"), ::OpenAPI::toJsonValue(m_branches_missed));
    }
    if (m_expired_isSet) {
        obj.insert(QString("expired"), ::OpenAPI::toJsonValue(m_expired));
    }
    return obj;
}

QString OAICodeCoverage::getId() const {
    return m_id;
}
void OAICodeCoverage::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICodeCoverage::is_id_Set() const{
    return m_id_isSet;
}

bool OAICodeCoverage::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICodeCoverage::getReportArn() const {
    return m_report_arn;
}
void OAICodeCoverage::setReportArn(const QString &report_arn) {
    m_report_arn = report_arn;
    m_report_arn_isSet = true;
}

bool OAICodeCoverage::is_report_arn_Set() const{
    return m_report_arn_isSet;
}

bool OAICodeCoverage::is_report_arn_Valid() const{
    return m_report_arn_isValid;
}

QString OAICodeCoverage::getFilePath() const {
    return m_file_path;
}
void OAICodeCoverage::setFilePath(const QString &file_path) {
    m_file_path = file_path;
    m_file_path_isSet = true;
}

bool OAICodeCoverage::is_file_path_Set() const{
    return m_file_path_isSet;
}

bool OAICodeCoverage::is_file_path_Valid() const{
    return m_file_path_isValid;
}

double OAICodeCoverage::getLineCoveragePercentage() const {
    return m_line_coverage_percentage;
}
void OAICodeCoverage::setLineCoveragePercentage(const double &line_coverage_percentage) {
    m_line_coverage_percentage = line_coverage_percentage;
    m_line_coverage_percentage_isSet = true;
}

bool OAICodeCoverage::is_line_coverage_percentage_Set() const{
    return m_line_coverage_percentage_isSet;
}

bool OAICodeCoverage::is_line_coverage_percentage_Valid() const{
    return m_line_coverage_percentage_isValid;
}

qint32 OAICodeCoverage::getLinesCovered() const {
    return m_lines_covered;
}
void OAICodeCoverage::setLinesCovered(const qint32 &lines_covered) {
    m_lines_covered = lines_covered;
    m_lines_covered_isSet = true;
}

bool OAICodeCoverage::is_lines_covered_Set() const{
    return m_lines_covered_isSet;
}

bool OAICodeCoverage::is_lines_covered_Valid() const{
    return m_lines_covered_isValid;
}

qint32 OAICodeCoverage::getLinesMissed() const {
    return m_lines_missed;
}
void OAICodeCoverage::setLinesMissed(const qint32 &lines_missed) {
    m_lines_missed = lines_missed;
    m_lines_missed_isSet = true;
}

bool OAICodeCoverage::is_lines_missed_Set() const{
    return m_lines_missed_isSet;
}

bool OAICodeCoverage::is_lines_missed_Valid() const{
    return m_lines_missed_isValid;
}

double OAICodeCoverage::getBranchCoveragePercentage() const {
    return m_branch_coverage_percentage;
}
void OAICodeCoverage::setBranchCoveragePercentage(const double &branch_coverage_percentage) {
    m_branch_coverage_percentage = branch_coverage_percentage;
    m_branch_coverage_percentage_isSet = true;
}

bool OAICodeCoverage::is_branch_coverage_percentage_Set() const{
    return m_branch_coverage_percentage_isSet;
}

bool OAICodeCoverage::is_branch_coverage_percentage_Valid() const{
    return m_branch_coverage_percentage_isValid;
}

qint32 OAICodeCoverage::getBranchesCovered() const {
    return m_branches_covered;
}
void OAICodeCoverage::setBranchesCovered(const qint32 &branches_covered) {
    m_branches_covered = branches_covered;
    m_branches_covered_isSet = true;
}

bool OAICodeCoverage::is_branches_covered_Set() const{
    return m_branches_covered_isSet;
}

bool OAICodeCoverage::is_branches_covered_Valid() const{
    return m_branches_covered_isValid;
}

qint32 OAICodeCoverage::getBranchesMissed() const {
    return m_branches_missed;
}
void OAICodeCoverage::setBranchesMissed(const qint32 &branches_missed) {
    m_branches_missed = branches_missed;
    m_branches_missed_isSet = true;
}

bool OAICodeCoverage::is_branches_missed_Set() const{
    return m_branches_missed_isSet;
}

bool OAICodeCoverage::is_branches_missed_Valid() const{
    return m_branches_missed_isValid;
}

QDateTime OAICodeCoverage::getExpired() const {
    return m_expired;
}
void OAICodeCoverage::setExpired(const QDateTime &expired) {
    m_expired = expired;
    m_expired_isSet = true;
}

bool OAICodeCoverage::is_expired_Set() const{
    return m_expired_isSet;
}

bool OAICodeCoverage::is_expired_Valid() const{
    return m_expired_isValid;
}

bool OAICodeCoverage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_coverage_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lines_covered_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lines_missed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch_coverage_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_branches_covered_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_branches_missed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expired_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICodeCoverage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
