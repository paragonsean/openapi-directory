/**
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBuild_source.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBuild_source::OAIBuild_source(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBuild_source::OAIBuild_source() {
    this->initializeModel();
}

OAIBuild_source::~OAIBuild_source() {}

void OAIBuild_source::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_git_clone_depth_isSet = false;
    m_git_clone_depth_isValid = false;

    m_git_submodules_config_isSet = false;
    m_git_submodules_config_isValid = false;

    m_buildspec_isSet = false;
    m_buildspec_isValid = false;

    m_auth_isSet = false;
    m_auth_isValid = false;

    m_report_build_status_isSet = false;
    m_report_build_status_isValid = false;

    m_build_status_config_isSet = false;
    m_build_status_config_isValid = false;

    m_insecure_ssl_isSet = false;
    m_insecure_ssl_isValid = false;

    m_source_identifier_isSet = false;
    m_source_identifier_isValid = false;
}

void OAIBuild_source::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBuild_source::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_git_clone_depth_isValid = ::OpenAPI::fromJsonValue(m_git_clone_depth, json[QString("gitCloneDepth")]);
    m_git_clone_depth_isSet = !json[QString("gitCloneDepth")].isNull() && m_git_clone_depth_isValid;

    m_git_submodules_config_isValid = ::OpenAPI::fromJsonValue(m_git_submodules_config, json[QString("gitSubmodulesConfig")]);
    m_git_submodules_config_isSet = !json[QString("gitSubmodulesConfig")].isNull() && m_git_submodules_config_isValid;

    m_buildspec_isValid = ::OpenAPI::fromJsonValue(m_buildspec, json[QString("buildspec")]);
    m_buildspec_isSet = !json[QString("buildspec")].isNull() && m_buildspec_isValid;

    m_auth_isValid = ::OpenAPI::fromJsonValue(m_auth, json[QString("auth")]);
    m_auth_isSet = !json[QString("auth")].isNull() && m_auth_isValid;

    m_report_build_status_isValid = ::OpenAPI::fromJsonValue(m_report_build_status, json[QString("reportBuildStatus")]);
    m_report_build_status_isSet = !json[QString("reportBuildStatus")].isNull() && m_report_build_status_isValid;

    m_build_status_config_isValid = ::OpenAPI::fromJsonValue(m_build_status_config, json[QString("buildStatusConfig")]);
    m_build_status_config_isSet = !json[QString("buildStatusConfig")].isNull() && m_build_status_config_isValid;

    m_insecure_ssl_isValid = ::OpenAPI::fromJsonValue(m_insecure_ssl, json[QString("insecureSsl")]);
    m_insecure_ssl_isSet = !json[QString("insecureSsl")].isNull() && m_insecure_ssl_isValid;

    m_source_identifier_isValid = ::OpenAPI::fromJsonValue(m_source_identifier, json[QString("sourceIdentifier")]);
    m_source_identifier_isSet = !json[QString("sourceIdentifier")].isNull() && m_source_identifier_isValid;
}

QString OAIBuild_source::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBuild_source::asJsonObject() const {
    QJsonObject obj;
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_git_clone_depth_isSet) {
        obj.insert(QString("gitCloneDepth"), ::OpenAPI::toJsonValue(m_git_clone_depth));
    }
    if (m_git_submodules_config.isSet()) {
        obj.insert(QString("gitSubmodulesConfig"), ::OpenAPI::toJsonValue(m_git_submodules_config));
    }
    if (m_buildspec_isSet) {
        obj.insert(QString("buildspec"), ::OpenAPI::toJsonValue(m_buildspec));
    }
    if (m_auth.isSet()) {
        obj.insert(QString("auth"), ::OpenAPI::toJsonValue(m_auth));
    }
    if (m_report_build_status_isSet) {
        obj.insert(QString("reportBuildStatus"), ::OpenAPI::toJsonValue(m_report_build_status));
    }
    if (m_build_status_config.isSet()) {
        obj.insert(QString("buildStatusConfig"), ::OpenAPI::toJsonValue(m_build_status_config));
    }
    if (m_insecure_ssl_isSet) {
        obj.insert(QString("insecureSsl"), ::OpenAPI::toJsonValue(m_insecure_ssl));
    }
    if (m_source_identifier_isSet) {
        obj.insert(QString("sourceIdentifier"), ::OpenAPI::toJsonValue(m_source_identifier));
    }
    return obj;
}

OAISourceType OAIBuild_source::getType() const {
    return m_type;
}
void OAIBuild_source::setType(const OAISourceType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIBuild_source::is_type_Set() const{
    return m_type_isSet;
}

bool OAIBuild_source::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIBuild_source::getLocation() const {
    return m_location;
}
void OAIBuild_source::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIBuild_source::is_location_Set() const{
    return m_location_isSet;
}

bool OAIBuild_source::is_location_Valid() const{
    return m_location_isValid;
}

qint32 OAIBuild_source::getGitCloneDepth() const {
    return m_git_clone_depth;
}
void OAIBuild_source::setGitCloneDepth(const qint32 &git_clone_depth) {
    m_git_clone_depth = git_clone_depth;
    m_git_clone_depth_isSet = true;
}

bool OAIBuild_source::is_git_clone_depth_Set() const{
    return m_git_clone_depth_isSet;
}

bool OAIBuild_source::is_git_clone_depth_Valid() const{
    return m_git_clone_depth_isValid;
}

OAIProjectSource_gitSubmodulesConfig OAIBuild_source::getGitSubmodulesConfig() const {
    return m_git_submodules_config;
}
void OAIBuild_source::setGitSubmodulesConfig(const OAIProjectSource_gitSubmodulesConfig &git_submodules_config) {
    m_git_submodules_config = git_submodules_config;
    m_git_submodules_config_isSet = true;
}

bool OAIBuild_source::is_git_submodules_config_Set() const{
    return m_git_submodules_config_isSet;
}

bool OAIBuild_source::is_git_submodules_config_Valid() const{
    return m_git_submodules_config_isValid;
}

QString OAIBuild_source::getBuildspec() const {
    return m_buildspec;
}
void OAIBuild_source::setBuildspec(const QString &buildspec) {
    m_buildspec = buildspec;
    m_buildspec_isSet = true;
}

bool OAIBuild_source::is_buildspec_Set() const{
    return m_buildspec_isSet;
}

bool OAIBuild_source::is_buildspec_Valid() const{
    return m_buildspec_isValid;
}

OAIProjectSource_auth OAIBuild_source::getAuth() const {
    return m_auth;
}
void OAIBuild_source::setAuth(const OAIProjectSource_auth &auth) {
    m_auth = auth;
    m_auth_isSet = true;
}

bool OAIBuild_source::is_auth_Set() const{
    return m_auth_isSet;
}

bool OAIBuild_source::is_auth_Valid() const{
    return m_auth_isValid;
}

bool OAIBuild_source::getReportBuildStatus() const {
    return m_report_build_status;
}
void OAIBuild_source::setReportBuildStatus(const bool &report_build_status) {
    m_report_build_status = report_build_status;
    m_report_build_status_isSet = true;
}

bool OAIBuild_source::is_report_build_status_Set() const{
    return m_report_build_status_isSet;
}

bool OAIBuild_source::is_report_build_status_Valid() const{
    return m_report_build_status_isValid;
}

OAIStartBuildInput_buildStatusConfigOverride OAIBuild_source::getBuildStatusConfig() const {
    return m_build_status_config;
}
void OAIBuild_source::setBuildStatusConfig(const OAIStartBuildInput_buildStatusConfigOverride &build_status_config) {
    m_build_status_config = build_status_config;
    m_build_status_config_isSet = true;
}

bool OAIBuild_source::is_build_status_config_Set() const{
    return m_build_status_config_isSet;
}

bool OAIBuild_source::is_build_status_config_Valid() const{
    return m_build_status_config_isValid;
}

bool OAIBuild_source::getInsecureSsl() const {
    return m_insecure_ssl;
}
void OAIBuild_source::setInsecureSsl(const bool &insecure_ssl) {
    m_insecure_ssl = insecure_ssl;
    m_insecure_ssl_isSet = true;
}

bool OAIBuild_source::is_insecure_ssl_Set() const{
    return m_insecure_ssl_isSet;
}

bool OAIBuild_source::is_insecure_ssl_Valid() const{
    return m_insecure_ssl_isValid;
}

QString OAIBuild_source::getSourceIdentifier() const {
    return m_source_identifier;
}
void OAIBuild_source::setSourceIdentifier(const QString &source_identifier) {
    m_source_identifier = source_identifier;
    m_source_identifier_isSet = true;
}

bool OAIBuild_source::is_source_identifier_Set() const{
    return m_source_identifier_isSet;
}

bool OAIBuild_source::is_source_identifier_Valid() const{
    return m_source_identifier_isValid;
}

bool OAIBuild_source::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_git_clone_depth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_git_submodules_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_buildspec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_build_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_status_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_insecure_ssl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBuild_source::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
