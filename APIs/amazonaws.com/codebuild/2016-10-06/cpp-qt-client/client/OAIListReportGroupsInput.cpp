/**
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListReportGroupsInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListReportGroupsInput::OAIListReportGroupsInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListReportGroupsInput::OAIListReportGroupsInput() {
    this->initializeModel();
}

OAIListReportGroupsInput::~OAIListReportGroupsInput() {}

void OAIListReportGroupsInput::initializeModel() {

    m_sort_order_isSet = false;
    m_sort_order_isValid = false;

    m_sort_by_isSet = false;
    m_sort_by_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;
}

void OAIListReportGroupsInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListReportGroupsInput::fromJsonObject(QJsonObject json) {

    m_sort_order_isValid = ::OpenAPI::fromJsonValue(m_sort_order, json[QString("sortOrder")]);
    m_sort_order_isSet = !json[QString("sortOrder")].isNull() && m_sort_order_isValid;

    m_sort_by_isValid = ::OpenAPI::fromJsonValue(m_sort_by, json[QString("sortBy")]);
    m_sort_by_isSet = !json[QString("sortBy")].isNull() && m_sort_by_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("maxResults")]);
    m_max_results_isSet = !json[QString("maxResults")].isNull() && m_max_results_isValid;
}

QString OAIListReportGroupsInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListReportGroupsInput::asJsonObject() const {
    QJsonObject obj;
    if (m_sort_order.isSet()) {
        obj.insert(QString("sortOrder"), ::OpenAPI::toJsonValue(m_sort_order));
    }
    if (m_sort_by.isSet()) {
        obj.insert(QString("sortBy"), ::OpenAPI::toJsonValue(m_sort_by));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("maxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    return obj;
}

OAISortOrderType OAIListReportGroupsInput::getSortOrder() const {
    return m_sort_order;
}
void OAIListReportGroupsInput::setSortOrder(const OAISortOrderType &sort_order) {
    m_sort_order = sort_order;
    m_sort_order_isSet = true;
}

bool OAIListReportGroupsInput::is_sort_order_Set() const{
    return m_sort_order_isSet;
}

bool OAIListReportGroupsInput::is_sort_order_Valid() const{
    return m_sort_order_isValid;
}

OAIReportGroupSortByType OAIListReportGroupsInput::getSortBy() const {
    return m_sort_by;
}
void OAIListReportGroupsInput::setSortBy(const OAIReportGroupSortByType &sort_by) {
    m_sort_by = sort_by;
    m_sort_by_isSet = true;
}

bool OAIListReportGroupsInput::is_sort_by_Set() const{
    return m_sort_by_isSet;
}

bool OAIListReportGroupsInput::is_sort_by_Valid() const{
    return m_sort_by_isValid;
}

QString OAIListReportGroupsInput::getNextToken() const {
    return m_next_token;
}
void OAIListReportGroupsInput::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListReportGroupsInput::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListReportGroupsInput::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIListReportGroupsInput::getMaxResults() const {
    return m_max_results;
}
void OAIListReportGroupsInput::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListReportGroupsInput::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListReportGroupsInput::is_max_results_Valid() const{
    return m_max_results_isValid;
}

bool OAIListReportGroupsInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sort_order.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListReportGroupsInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
