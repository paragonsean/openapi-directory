/**
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIS3LogsConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIS3LogsConfig::OAIS3LogsConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIS3LogsConfig::OAIS3LogsConfig() {
    this->initializeModel();
}

OAIS3LogsConfig::~OAIS3LogsConfig() {}

void OAIS3LogsConfig::initializeModel() {

    m_status_isSet = false;
    m_status_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_encryption_disabled_isSet = false;
    m_encryption_disabled_isValid = false;

    m_bucket_owner_access_isSet = false;
    m_bucket_owner_access_isValid = false;
}

void OAIS3LogsConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIS3LogsConfig::fromJsonObject(QJsonObject json) {

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_encryption_disabled_isValid = ::OpenAPI::fromJsonValue(m_encryption_disabled, json[QString("encryptionDisabled")]);
    m_encryption_disabled_isSet = !json[QString("encryptionDisabled")].isNull() && m_encryption_disabled_isValid;

    m_bucket_owner_access_isValid = ::OpenAPI::fromJsonValue(m_bucket_owner_access, json[QString("bucketOwnerAccess")]);
    m_bucket_owner_access_isSet = !json[QString("bucketOwnerAccess")].isNull() && m_bucket_owner_access_isValid;
}

QString OAIS3LogsConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIS3LogsConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_encryption_disabled_isSet) {
        obj.insert(QString("encryptionDisabled"), ::OpenAPI::toJsonValue(m_encryption_disabled));
    }
    if (m_bucket_owner_access.isSet()) {
        obj.insert(QString("bucketOwnerAccess"), ::OpenAPI::toJsonValue(m_bucket_owner_access));
    }
    return obj;
}

OAILogsConfigStatusType OAIS3LogsConfig::getStatus() const {
    return m_status;
}
void OAIS3LogsConfig::setStatus(const OAILogsConfigStatusType &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIS3LogsConfig::is_status_Set() const{
    return m_status_isSet;
}

bool OAIS3LogsConfig::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIS3LogsConfig::getLocation() const {
    return m_location;
}
void OAIS3LogsConfig::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIS3LogsConfig::is_location_Set() const{
    return m_location_isSet;
}

bool OAIS3LogsConfig::is_location_Valid() const{
    return m_location_isValid;
}

bool OAIS3LogsConfig::getEncryptionDisabled() const {
    return m_encryption_disabled;
}
void OAIS3LogsConfig::setEncryptionDisabled(const bool &encryption_disabled) {
    m_encryption_disabled = encryption_disabled;
    m_encryption_disabled_isSet = true;
}

bool OAIS3LogsConfig::is_encryption_disabled_Set() const{
    return m_encryption_disabled_isSet;
}

bool OAIS3LogsConfig::is_encryption_disabled_Valid() const{
    return m_encryption_disabled_isValid;
}

OAIBucketOwnerAccess OAIS3LogsConfig::getBucketOwnerAccess() const {
    return m_bucket_owner_access;
}
void OAIS3LogsConfig::setBucketOwnerAccess(const OAIBucketOwnerAccess &bucket_owner_access) {
    m_bucket_owner_access = bucket_owner_access;
    m_bucket_owner_access_isSet = true;
}

bool OAIS3LogsConfig::is_bucket_owner_access_Set() const{
    return m_bucket_owner_access_isSet;
}

bool OAIS3LogsConfig::is_bucket_owner_access_Valid() const{
    return m_bucket_owner_access_isValid;
}

bool OAIS3LogsConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_owner_access.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIS3LogsConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_status_isValid && true;
}

} // namespace OpenAPI
