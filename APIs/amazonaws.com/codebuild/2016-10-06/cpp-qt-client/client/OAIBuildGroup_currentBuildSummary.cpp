/**
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBuildGroup_currentBuildSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBuildGroup_currentBuildSummary::OAIBuildGroup_currentBuildSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBuildGroup_currentBuildSummary::OAIBuildGroup_currentBuildSummary() {
    this->initializeModel();
}

OAIBuildGroup_currentBuildSummary::~OAIBuildGroup_currentBuildSummary() {}

void OAIBuildGroup_currentBuildSummary::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_requested_on_isSet = false;
    m_requested_on_isValid = false;

    m_build_status_isSet = false;
    m_build_status_isValid = false;

    m_primary_artifact_isSet = false;
    m_primary_artifact_isValid = false;

    m_secondary_artifacts_isSet = false;
    m_secondary_artifacts_isValid = false;
}

void OAIBuildGroup_currentBuildSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBuildGroup_currentBuildSummary::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_requested_on_isValid = ::OpenAPI::fromJsonValue(m_requested_on, json[QString("requestedOn")]);
    m_requested_on_isSet = !json[QString("requestedOn")].isNull() && m_requested_on_isValid;

    m_build_status_isValid = ::OpenAPI::fromJsonValue(m_build_status, json[QString("buildStatus")]);
    m_build_status_isSet = !json[QString("buildStatus")].isNull() && m_build_status_isValid;

    m_primary_artifact_isValid = ::OpenAPI::fromJsonValue(m_primary_artifact, json[QString("primaryArtifact")]);
    m_primary_artifact_isSet = !json[QString("primaryArtifact")].isNull() && m_primary_artifact_isValid;

    m_secondary_artifacts_isValid = ::OpenAPI::fromJsonValue(m_secondary_artifacts, json[QString("secondaryArtifacts")]);
    m_secondary_artifacts_isSet = !json[QString("secondaryArtifacts")].isNull() && m_secondary_artifacts_isValid;
}

QString OAIBuildGroup_currentBuildSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBuildGroup_currentBuildSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_requested_on_isSet) {
        obj.insert(QString("requestedOn"), ::OpenAPI::toJsonValue(m_requested_on));
    }
    if (m_build_status.isSet()) {
        obj.insert(QString("buildStatus"), ::OpenAPI::toJsonValue(m_build_status));
    }
    if (m_primary_artifact.isSet()) {
        obj.insert(QString("primaryArtifact"), ::OpenAPI::toJsonValue(m_primary_artifact));
    }
    if (m_secondary_artifacts.isSet()) {
        obj.insert(QString("secondaryArtifacts"), ::OpenAPI::toJsonValue(m_secondary_artifacts));
    }
    return obj;
}

QString OAIBuildGroup_currentBuildSummary::getArn() const {
    return m_arn;
}
void OAIBuildGroup_currentBuildSummary::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIBuildGroup_currentBuildSummary::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIBuildGroup_currentBuildSummary::is_arn_Valid() const{
    return m_arn_isValid;
}

QDateTime OAIBuildGroup_currentBuildSummary::getRequestedOn() const {
    return m_requested_on;
}
void OAIBuildGroup_currentBuildSummary::setRequestedOn(const QDateTime &requested_on) {
    m_requested_on = requested_on;
    m_requested_on_isSet = true;
}

bool OAIBuildGroup_currentBuildSummary::is_requested_on_Set() const{
    return m_requested_on_isSet;
}

bool OAIBuildGroup_currentBuildSummary::is_requested_on_Valid() const{
    return m_requested_on_isValid;
}

OAIStatusType OAIBuildGroup_currentBuildSummary::getBuildStatus() const {
    return m_build_status;
}
void OAIBuildGroup_currentBuildSummary::setBuildStatus(const OAIStatusType &build_status) {
    m_build_status = build_status;
    m_build_status_isSet = true;
}

bool OAIBuildGroup_currentBuildSummary::is_build_status_Set() const{
    return m_build_status_isSet;
}

bool OAIBuildGroup_currentBuildSummary::is_build_status_Valid() const{
    return m_build_status_isValid;
}

OAIBuildSummary_primaryArtifact OAIBuildGroup_currentBuildSummary::getPrimaryArtifact() const {
    return m_primary_artifact;
}
void OAIBuildGroup_currentBuildSummary::setPrimaryArtifact(const OAIBuildSummary_primaryArtifact &primary_artifact) {
    m_primary_artifact = primary_artifact;
    m_primary_artifact_isSet = true;
}

bool OAIBuildGroup_currentBuildSummary::is_primary_artifact_Set() const{
    return m_primary_artifact_isSet;
}

bool OAIBuildGroup_currentBuildSummary::is_primary_artifact_Valid() const{
    return m_primary_artifact_isValid;
}

QList OAIBuildGroup_currentBuildSummary::getSecondaryArtifacts() const {
    return m_secondary_artifacts;
}
void OAIBuildGroup_currentBuildSummary::setSecondaryArtifacts(const QList &secondary_artifacts) {
    m_secondary_artifacts = secondary_artifacts;
    m_secondary_artifacts_isSet = true;
}

bool OAIBuildGroup_currentBuildSummary::is_secondary_artifacts_Set() const{
    return m_secondary_artifacts_isSet;
}

bool OAIBuildGroup_currentBuildSummary::is_secondary_artifacts_Valid() const{
    return m_secondary_artifacts_isValid;
}

bool OAIBuildGroup_currentBuildSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_artifact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_artifacts.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBuildGroup_currentBuildSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
