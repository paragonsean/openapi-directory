/**
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBuildGroup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBuildGroup::OAIBuildGroup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBuildGroup::OAIBuildGroup() {
    this->initializeModel();
}

OAIBuildGroup::~OAIBuildGroup() {}

void OAIBuildGroup::initializeModel() {

    m_identifier_isSet = false;
    m_identifier_isValid = false;

    m_depends_on_isSet = false;
    m_depends_on_isValid = false;

    m_ignore_failure_isSet = false;
    m_ignore_failure_isValid = false;

    m_current_build_summary_isSet = false;
    m_current_build_summary_isValid = false;

    m_prior_build_summary_list_isSet = false;
    m_prior_build_summary_list_isValid = false;
}

void OAIBuildGroup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBuildGroup::fromJsonObject(QJsonObject json) {

    m_identifier_isValid = ::OpenAPI::fromJsonValue(m_identifier, json[QString("identifier")]);
    m_identifier_isSet = !json[QString("identifier")].isNull() && m_identifier_isValid;

    m_depends_on_isValid = ::OpenAPI::fromJsonValue(m_depends_on, json[QString("dependsOn")]);
    m_depends_on_isSet = !json[QString("dependsOn")].isNull() && m_depends_on_isValid;

    m_ignore_failure_isValid = ::OpenAPI::fromJsonValue(m_ignore_failure, json[QString("ignoreFailure")]);
    m_ignore_failure_isSet = !json[QString("ignoreFailure")].isNull() && m_ignore_failure_isValid;

    m_current_build_summary_isValid = ::OpenAPI::fromJsonValue(m_current_build_summary, json[QString("currentBuildSummary")]);
    m_current_build_summary_isSet = !json[QString("currentBuildSummary")].isNull() && m_current_build_summary_isValid;

    m_prior_build_summary_list_isValid = ::OpenAPI::fromJsonValue(m_prior_build_summary_list, json[QString("priorBuildSummaryList")]);
    m_prior_build_summary_list_isSet = !json[QString("priorBuildSummaryList")].isNull() && m_prior_build_summary_list_isValid;
}

QString OAIBuildGroup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBuildGroup::asJsonObject() const {
    QJsonObject obj;
    if (m_identifier_isSet) {
        obj.insert(QString("identifier"), ::OpenAPI::toJsonValue(m_identifier));
    }
    if (m_depends_on.isSet()) {
        obj.insert(QString("dependsOn"), ::OpenAPI::toJsonValue(m_depends_on));
    }
    if (m_ignore_failure_isSet) {
        obj.insert(QString("ignoreFailure"), ::OpenAPI::toJsonValue(m_ignore_failure));
    }
    if (m_current_build_summary.isSet()) {
        obj.insert(QString("currentBuildSummary"), ::OpenAPI::toJsonValue(m_current_build_summary));
    }
    if (m_prior_build_summary_list.isSet()) {
        obj.insert(QString("priorBuildSummaryList"), ::OpenAPI::toJsonValue(m_prior_build_summary_list));
    }
    return obj;
}

QString OAIBuildGroup::getIdentifier() const {
    return m_identifier;
}
void OAIBuildGroup::setIdentifier(const QString &identifier) {
    m_identifier = identifier;
    m_identifier_isSet = true;
}

bool OAIBuildGroup::is_identifier_Set() const{
    return m_identifier_isSet;
}

bool OAIBuildGroup::is_identifier_Valid() const{
    return m_identifier_isValid;
}

QList OAIBuildGroup::getDependsOn() const {
    return m_depends_on;
}
void OAIBuildGroup::setDependsOn(const QList &depends_on) {
    m_depends_on = depends_on;
    m_depends_on_isSet = true;
}

bool OAIBuildGroup::is_depends_on_Set() const{
    return m_depends_on_isSet;
}

bool OAIBuildGroup::is_depends_on_Valid() const{
    return m_depends_on_isValid;
}

bool OAIBuildGroup::getIgnoreFailure() const {
    return m_ignore_failure;
}
void OAIBuildGroup::setIgnoreFailure(const bool &ignore_failure) {
    m_ignore_failure = ignore_failure;
    m_ignore_failure_isSet = true;
}

bool OAIBuildGroup::is_ignore_failure_Set() const{
    return m_ignore_failure_isSet;
}

bool OAIBuildGroup::is_ignore_failure_Valid() const{
    return m_ignore_failure_isValid;
}

OAIBuildGroup_currentBuildSummary OAIBuildGroup::getCurrentBuildSummary() const {
    return m_current_build_summary;
}
void OAIBuildGroup::setCurrentBuildSummary(const OAIBuildGroup_currentBuildSummary &current_build_summary) {
    m_current_build_summary = current_build_summary;
    m_current_build_summary_isSet = true;
}

bool OAIBuildGroup::is_current_build_summary_Set() const{
    return m_current_build_summary_isSet;
}

bool OAIBuildGroup::is_current_build_summary_Valid() const{
    return m_current_build_summary_isValid;
}

QList OAIBuildGroup::getPriorBuildSummaryList() const {
    return m_prior_build_summary_list;
}
void OAIBuildGroup::setPriorBuildSummaryList(const QList &prior_build_summary_list) {
    m_prior_build_summary_list = prior_build_summary_list;
    m_prior_build_summary_list_isSet = true;
}

bool OAIBuildGroup::is_prior_build_summary_list_Set() const{
    return m_prior_build_summary_list_isSet;
}

bool OAIBuildGroup::is_prior_build_summary_list_Valid() const{
    return m_prior_build_summary_list_isValid;
}

bool OAIBuildGroup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_depends_on.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ignore_failure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_build_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_prior_build_summary_list.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBuildGroup::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
