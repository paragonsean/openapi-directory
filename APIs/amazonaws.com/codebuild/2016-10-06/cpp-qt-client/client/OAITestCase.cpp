/**
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITestCase.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITestCase::OAITestCase(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITestCase::OAITestCase() {
    this->initializeModel();
}

OAITestCase::~OAITestCase() {}

void OAITestCase::initializeModel() {

    m_report_arn_isSet = false;
    m_report_arn_isValid = false;

    m_test_raw_data_path_isSet = false;
    m_test_raw_data_path_isValid = false;

    m_prefix_isSet = false;
    m_prefix_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_duration_in_nano_seconds_isSet = false;
    m_duration_in_nano_seconds_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_expired_isSet = false;
    m_expired_isValid = false;
}

void OAITestCase::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITestCase::fromJsonObject(QJsonObject json) {

    m_report_arn_isValid = ::OpenAPI::fromJsonValue(m_report_arn, json[QString("reportArn")]);
    m_report_arn_isSet = !json[QString("reportArn")].isNull() && m_report_arn_isValid;

    m_test_raw_data_path_isValid = ::OpenAPI::fromJsonValue(m_test_raw_data_path, json[QString("testRawDataPath")]);
    m_test_raw_data_path_isSet = !json[QString("testRawDataPath")].isNull() && m_test_raw_data_path_isValid;

    m_prefix_isValid = ::OpenAPI::fromJsonValue(m_prefix, json[QString("prefix")]);
    m_prefix_isSet = !json[QString("prefix")].isNull() && m_prefix_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_duration_in_nano_seconds_isValid = ::OpenAPI::fromJsonValue(m_duration_in_nano_seconds, json[QString("durationInNanoSeconds")]);
    m_duration_in_nano_seconds_isSet = !json[QString("durationInNanoSeconds")].isNull() && m_duration_in_nano_seconds_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_expired_isValid = ::OpenAPI::fromJsonValue(m_expired, json[QString("expired")]);
    m_expired_isSet = !json[QString("expired")].isNull() && m_expired_isValid;
}

QString OAITestCase::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITestCase::asJsonObject() const {
    QJsonObject obj;
    if (m_report_arn_isSet) {
        obj.insert(QString("reportArn"), ::OpenAPI::toJsonValue(m_report_arn));
    }
    if (m_test_raw_data_path_isSet) {
        obj.insert(QString("testRawDataPath"), ::OpenAPI::toJsonValue(m_test_raw_data_path));
    }
    if (m_prefix_isSet) {
        obj.insert(QString("prefix"), ::OpenAPI::toJsonValue(m_prefix));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_duration_in_nano_seconds_isSet) {
        obj.insert(QString("durationInNanoSeconds"), ::OpenAPI::toJsonValue(m_duration_in_nano_seconds));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_expired_isSet) {
        obj.insert(QString("expired"), ::OpenAPI::toJsonValue(m_expired));
    }
    return obj;
}

QString OAITestCase::getReportArn() const {
    return m_report_arn;
}
void OAITestCase::setReportArn(const QString &report_arn) {
    m_report_arn = report_arn;
    m_report_arn_isSet = true;
}

bool OAITestCase::is_report_arn_Set() const{
    return m_report_arn_isSet;
}

bool OAITestCase::is_report_arn_Valid() const{
    return m_report_arn_isValid;
}

QString OAITestCase::getTestRawDataPath() const {
    return m_test_raw_data_path;
}
void OAITestCase::setTestRawDataPath(const QString &test_raw_data_path) {
    m_test_raw_data_path = test_raw_data_path;
    m_test_raw_data_path_isSet = true;
}

bool OAITestCase::is_test_raw_data_path_Set() const{
    return m_test_raw_data_path_isSet;
}

bool OAITestCase::is_test_raw_data_path_Valid() const{
    return m_test_raw_data_path_isValid;
}

QString OAITestCase::getPrefix() const {
    return m_prefix;
}
void OAITestCase::setPrefix(const QString &prefix) {
    m_prefix = prefix;
    m_prefix_isSet = true;
}

bool OAITestCase::is_prefix_Set() const{
    return m_prefix_isSet;
}

bool OAITestCase::is_prefix_Valid() const{
    return m_prefix_isValid;
}

QString OAITestCase::getName() const {
    return m_name;
}
void OAITestCase::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITestCase::is_name_Set() const{
    return m_name_isSet;
}

bool OAITestCase::is_name_Valid() const{
    return m_name_isValid;
}

QString OAITestCase::getStatus() const {
    return m_status;
}
void OAITestCase::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITestCase::is_status_Set() const{
    return m_status_isSet;
}

bool OAITestCase::is_status_Valid() const{
    return m_status_isValid;
}

qint32 OAITestCase::getDurationInNanoSeconds() const {
    return m_duration_in_nano_seconds;
}
void OAITestCase::setDurationInNanoSeconds(const qint32 &duration_in_nano_seconds) {
    m_duration_in_nano_seconds = duration_in_nano_seconds;
    m_duration_in_nano_seconds_isSet = true;
}

bool OAITestCase::is_duration_in_nano_seconds_Set() const{
    return m_duration_in_nano_seconds_isSet;
}

bool OAITestCase::is_duration_in_nano_seconds_Valid() const{
    return m_duration_in_nano_seconds_isValid;
}

QString OAITestCase::getMessage() const {
    return m_message;
}
void OAITestCase::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAITestCase::is_message_Set() const{
    return m_message_isSet;
}

bool OAITestCase::is_message_Valid() const{
    return m_message_isValid;
}

QDateTime OAITestCase::getExpired() const {
    return m_expired;
}
void OAITestCase::setExpired(const QDateTime &expired) {
    m_expired = expired;
    m_expired_isSet = true;
}

bool OAITestCase::is_expired_Set() const{
    return m_expired_isSet;
}

bool OAITestCase::is_expired_Valid() const{
    return m_expired_isValid;
}

bool OAITestCase::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_report_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_raw_data_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_in_nano_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expired_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITestCase::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
