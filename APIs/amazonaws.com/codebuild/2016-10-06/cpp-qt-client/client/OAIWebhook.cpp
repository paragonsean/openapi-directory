/**
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebhook.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWebhook::OAIWebhook(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWebhook::OAIWebhook() {
    this->initializeModel();
}

OAIWebhook::~OAIWebhook() {}

void OAIWebhook::initializeModel() {

    m_url_isSet = false;
    m_url_isValid = false;

    m_payload_url_isSet = false;
    m_payload_url_isValid = false;

    m_secret_isSet = false;
    m_secret_isValid = false;

    m_branch_filter_isSet = false;
    m_branch_filter_isValid = false;

    m_filter_groups_isSet = false;
    m_filter_groups_isValid = false;

    m_build_type_isSet = false;
    m_build_type_isValid = false;

    m_last_modified_secret_isSet = false;
    m_last_modified_secret_isValid = false;
}

void OAIWebhook::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWebhook::fromJsonObject(QJsonObject json) {

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_payload_url_isValid = ::OpenAPI::fromJsonValue(m_payload_url, json[QString("payloadUrl")]);
    m_payload_url_isSet = !json[QString("payloadUrl")].isNull() && m_payload_url_isValid;

    m_secret_isValid = ::OpenAPI::fromJsonValue(m_secret, json[QString("secret")]);
    m_secret_isSet = !json[QString("secret")].isNull() && m_secret_isValid;

    m_branch_filter_isValid = ::OpenAPI::fromJsonValue(m_branch_filter, json[QString("branchFilter")]);
    m_branch_filter_isSet = !json[QString("branchFilter")].isNull() && m_branch_filter_isValid;

    m_filter_groups_isValid = ::OpenAPI::fromJsonValue(m_filter_groups, json[QString("filterGroups")]);
    m_filter_groups_isSet = !json[QString("filterGroups")].isNull() && m_filter_groups_isValid;

    m_build_type_isValid = ::OpenAPI::fromJsonValue(m_build_type, json[QString("buildType")]);
    m_build_type_isSet = !json[QString("buildType")].isNull() && m_build_type_isValid;

    m_last_modified_secret_isValid = ::OpenAPI::fromJsonValue(m_last_modified_secret, json[QString("lastModifiedSecret")]);
    m_last_modified_secret_isSet = !json[QString("lastModifiedSecret")].isNull() && m_last_modified_secret_isValid;
}

QString OAIWebhook::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWebhook::asJsonObject() const {
    QJsonObject obj;
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_payload_url_isSet) {
        obj.insert(QString("payloadUrl"), ::OpenAPI::toJsonValue(m_payload_url));
    }
    if (m_secret_isSet) {
        obj.insert(QString("secret"), ::OpenAPI::toJsonValue(m_secret));
    }
    if (m_branch_filter_isSet) {
        obj.insert(QString("branchFilter"), ::OpenAPI::toJsonValue(m_branch_filter));
    }
    if (m_filter_groups.isSet()) {
        obj.insert(QString("filterGroups"), ::OpenAPI::toJsonValue(m_filter_groups));
    }
    if (m_build_type.isSet()) {
        obj.insert(QString("buildType"), ::OpenAPI::toJsonValue(m_build_type));
    }
    if (m_last_modified_secret_isSet) {
        obj.insert(QString("lastModifiedSecret"), ::OpenAPI::toJsonValue(m_last_modified_secret));
    }
    return obj;
}

QString OAIWebhook::getUrl() const {
    return m_url;
}
void OAIWebhook::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIWebhook::is_url_Set() const{
    return m_url_isSet;
}

bool OAIWebhook::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIWebhook::getPayloadUrl() const {
    return m_payload_url;
}
void OAIWebhook::setPayloadUrl(const QString &payload_url) {
    m_payload_url = payload_url;
    m_payload_url_isSet = true;
}

bool OAIWebhook::is_payload_url_Set() const{
    return m_payload_url_isSet;
}

bool OAIWebhook::is_payload_url_Valid() const{
    return m_payload_url_isValid;
}

QString OAIWebhook::getSecret() const {
    return m_secret;
}
void OAIWebhook::setSecret(const QString &secret) {
    m_secret = secret;
    m_secret_isSet = true;
}

bool OAIWebhook::is_secret_Set() const{
    return m_secret_isSet;
}

bool OAIWebhook::is_secret_Valid() const{
    return m_secret_isValid;
}

QString OAIWebhook::getBranchFilter() const {
    return m_branch_filter;
}
void OAIWebhook::setBranchFilter(const QString &branch_filter) {
    m_branch_filter = branch_filter;
    m_branch_filter_isSet = true;
}

bool OAIWebhook::is_branch_filter_Set() const{
    return m_branch_filter_isSet;
}

bool OAIWebhook::is_branch_filter_Valid() const{
    return m_branch_filter_isValid;
}

QList OAIWebhook::getFilterGroups() const {
    return m_filter_groups;
}
void OAIWebhook::setFilterGroups(const QList &filter_groups) {
    m_filter_groups = filter_groups;
    m_filter_groups_isSet = true;
}

bool OAIWebhook::is_filter_groups_Set() const{
    return m_filter_groups_isSet;
}

bool OAIWebhook::is_filter_groups_Valid() const{
    return m_filter_groups_isValid;
}

OAIWebhookBuildType OAIWebhook::getBuildType() const {
    return m_build_type;
}
void OAIWebhook::setBuildType(const OAIWebhookBuildType &build_type) {
    m_build_type = build_type;
    m_build_type_isSet = true;
}

bool OAIWebhook::is_build_type_Set() const{
    return m_build_type_isSet;
}

bool OAIWebhook::is_build_type_Valid() const{
    return m_build_type_isValid;
}

QDateTime OAIWebhook::getLastModifiedSecret() const {
    return m_last_modified_secret;
}
void OAIWebhook::setLastModifiedSecret(const QDateTime &last_modified_secret) {
    m_last_modified_secret = last_modified_secret;
    m_last_modified_secret_isSet = true;
}

bool OAIWebhook::is_last_modified_secret_Set() const{
    return m_last_modified_secret_isSet;
}

bool OAIWebhook::is_last_modified_secret_Valid() const{
    return m_last_modified_secret_isValid;
}

bool OAIWebhook::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payload_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_secret_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWebhook::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
