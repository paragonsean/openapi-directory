/**
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReport_testSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReport_testSummary::OAIReport_testSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReport_testSummary::OAIReport_testSummary() {
    this->initializeModel();
}

OAIReport_testSummary::~OAIReport_testSummary() {}

void OAIReport_testSummary::initializeModel() {

    m_total_isSet = false;
    m_total_isValid = false;

    m_status_counts_isSet = false;
    m_status_counts_isValid = false;

    m_duration_in_nano_seconds_isSet = false;
    m_duration_in_nano_seconds_isValid = false;
}

void OAIReport_testSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReport_testSummary::fromJsonObject(QJsonObject json) {

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;

    m_status_counts_isValid = ::OpenAPI::fromJsonValue(m_status_counts, json[QString("statusCounts")]);
    m_status_counts_isSet = !json[QString("statusCounts")].isNull() && m_status_counts_isValid;

    m_duration_in_nano_seconds_isValid = ::OpenAPI::fromJsonValue(m_duration_in_nano_seconds, json[QString("durationInNanoSeconds")]);
    m_duration_in_nano_seconds_isSet = !json[QString("durationInNanoSeconds")].isNull() && m_duration_in_nano_seconds_isValid;
}

QString OAIReport_testSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReport_testSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    if (m_status_counts.isSet()) {
        obj.insert(QString("statusCounts"), ::OpenAPI::toJsonValue(m_status_counts));
    }
    if (m_duration_in_nano_seconds_isSet) {
        obj.insert(QString("durationInNanoSeconds"), ::OpenAPI::toJsonValue(m_duration_in_nano_seconds));
    }
    return obj;
}

qint32 OAIReport_testSummary::getTotal() const {
    return m_total;
}
void OAIReport_testSummary::setTotal(const qint32 &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIReport_testSummary::is_total_Set() const{
    return m_total_isSet;
}

bool OAIReport_testSummary::is_total_Valid() const{
    return m_total_isValid;
}

QMap OAIReport_testSummary::getStatusCounts() const {
    return m_status_counts;
}
void OAIReport_testSummary::setStatusCounts(const QMap &status_counts) {
    m_status_counts = status_counts;
    m_status_counts_isSet = true;
}

bool OAIReport_testSummary::is_status_counts_Set() const{
    return m_status_counts_isSet;
}

bool OAIReport_testSummary::is_status_counts_Valid() const{
    return m_status_counts_isValid;
}

qint32 OAIReport_testSummary::getDurationInNanoSeconds() const {
    return m_duration_in_nano_seconds;
}
void OAIReport_testSummary::setDurationInNanoSeconds(const qint32 &duration_in_nano_seconds) {
    m_duration_in_nano_seconds = duration_in_nano_seconds;
    m_duration_in_nano_seconds_isSet = true;
}

bool OAIReport_testSummary::is_duration_in_nano_seconds_Set() const{
    return m_duration_in_nano_seconds_isSet;
}

bool OAIReport_testSummary::is_duration_in_nano_seconds_Valid() const{
    return m_duration_in_nano_seconds_isValid;
}

bool OAIReport_testSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_counts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_in_nano_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReport_testSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_total_isValid && m_status_counts_isValid && m_duration_in_nano_seconds_isValid && true;
}

} // namespace OpenAPI
