/**
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProject_badge.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProject_badge::OAIProject_badge(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProject_badge::OAIProject_badge() {
    this->initializeModel();
}

OAIProject_badge::~OAIProject_badge() {}

void OAIProject_badge::initializeModel() {

    m_badge_enabled_isSet = false;
    m_badge_enabled_isValid = false;

    m_badge_request_url_isSet = false;
    m_badge_request_url_isValid = false;
}

void OAIProject_badge::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProject_badge::fromJsonObject(QJsonObject json) {

    m_badge_enabled_isValid = ::OpenAPI::fromJsonValue(m_badge_enabled, json[QString("badgeEnabled")]);
    m_badge_enabled_isSet = !json[QString("badgeEnabled")].isNull() && m_badge_enabled_isValid;

    m_badge_request_url_isValid = ::OpenAPI::fromJsonValue(m_badge_request_url, json[QString("badgeRequestUrl")]);
    m_badge_request_url_isSet = !json[QString("badgeRequestUrl")].isNull() && m_badge_request_url_isValid;
}

QString OAIProject_badge::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProject_badge::asJsonObject() const {
    QJsonObject obj;
    if (m_badge_enabled_isSet) {
        obj.insert(QString("badgeEnabled"), ::OpenAPI::toJsonValue(m_badge_enabled));
    }
    if (m_badge_request_url_isSet) {
        obj.insert(QString("badgeRequestUrl"), ::OpenAPI::toJsonValue(m_badge_request_url));
    }
    return obj;
}

bool OAIProject_badge::getBadgeEnabled() const {
    return m_badge_enabled;
}
void OAIProject_badge::setBadgeEnabled(const bool &badge_enabled) {
    m_badge_enabled = badge_enabled;
    m_badge_enabled_isSet = true;
}

bool OAIProject_badge::is_badge_enabled_Set() const{
    return m_badge_enabled_isSet;
}

bool OAIProject_badge::is_badge_enabled_Valid() const{
    return m_badge_enabled_isValid;
}

QString OAIProject_badge::getBadgeRequestUrl() const {
    return m_badge_request_url;
}
void OAIProject_badge::setBadgeRequestUrl(const QString &badge_request_url) {
    m_badge_request_url = badge_request_url;
    m_badge_request_url_isSet = true;
}

bool OAIProject_badge::is_badge_request_url_Set() const{
    return m_badge_request_url_isSet;
}

bool OAIProject_badge::is_badge_request_url_Valid() const{
    return m_badge_request_url_isValid;
}

bool OAIProject_badge::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_badge_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_badge_request_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProject_badge::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
