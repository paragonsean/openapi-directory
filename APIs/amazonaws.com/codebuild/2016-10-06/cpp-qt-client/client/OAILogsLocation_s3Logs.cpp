/**
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILogsLocation_s3Logs.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILogsLocation_s3Logs::OAILogsLocation_s3Logs(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILogsLocation_s3Logs::OAILogsLocation_s3Logs() {
    this->initializeModel();
}

OAILogsLocation_s3Logs::~OAILogsLocation_s3Logs() {}

void OAILogsLocation_s3Logs::initializeModel() {

    m_status_isSet = false;
    m_status_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_encryption_disabled_isSet = false;
    m_encryption_disabled_isValid = false;

    m_bucket_owner_access_isSet = false;
    m_bucket_owner_access_isValid = false;
}

void OAILogsLocation_s3Logs::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILogsLocation_s3Logs::fromJsonObject(QJsonObject json) {

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_encryption_disabled_isValid = ::OpenAPI::fromJsonValue(m_encryption_disabled, json[QString("encryptionDisabled")]);
    m_encryption_disabled_isSet = !json[QString("encryptionDisabled")].isNull() && m_encryption_disabled_isValid;

    m_bucket_owner_access_isValid = ::OpenAPI::fromJsonValue(m_bucket_owner_access, json[QString("bucketOwnerAccess")]);
    m_bucket_owner_access_isSet = !json[QString("bucketOwnerAccess")].isNull() && m_bucket_owner_access_isValid;
}

QString OAILogsLocation_s3Logs::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILogsLocation_s3Logs::asJsonObject() const {
    QJsonObject obj;
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_encryption_disabled_isSet) {
        obj.insert(QString("encryptionDisabled"), ::OpenAPI::toJsonValue(m_encryption_disabled));
    }
    if (m_bucket_owner_access.isSet()) {
        obj.insert(QString("bucketOwnerAccess"), ::OpenAPI::toJsonValue(m_bucket_owner_access));
    }
    return obj;
}

OAILogsConfigStatusType OAILogsLocation_s3Logs::getStatus() const {
    return m_status;
}
void OAILogsLocation_s3Logs::setStatus(const OAILogsConfigStatusType &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAILogsLocation_s3Logs::is_status_Set() const{
    return m_status_isSet;
}

bool OAILogsLocation_s3Logs::is_status_Valid() const{
    return m_status_isValid;
}

QString OAILogsLocation_s3Logs::getLocation() const {
    return m_location;
}
void OAILogsLocation_s3Logs::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAILogsLocation_s3Logs::is_location_Set() const{
    return m_location_isSet;
}

bool OAILogsLocation_s3Logs::is_location_Valid() const{
    return m_location_isValid;
}

bool OAILogsLocation_s3Logs::getEncryptionDisabled() const {
    return m_encryption_disabled;
}
void OAILogsLocation_s3Logs::setEncryptionDisabled(const bool &encryption_disabled) {
    m_encryption_disabled = encryption_disabled;
    m_encryption_disabled_isSet = true;
}

bool OAILogsLocation_s3Logs::is_encryption_disabled_Set() const{
    return m_encryption_disabled_isSet;
}

bool OAILogsLocation_s3Logs::is_encryption_disabled_Valid() const{
    return m_encryption_disabled_isValid;
}

OAIBucketOwnerAccess OAILogsLocation_s3Logs::getBucketOwnerAccess() const {
    return m_bucket_owner_access;
}
void OAILogsLocation_s3Logs::setBucketOwnerAccess(const OAIBucketOwnerAccess &bucket_owner_access) {
    m_bucket_owner_access = bucket_owner_access;
    m_bucket_owner_access_isSet = true;
}

bool OAILogsLocation_s3Logs::is_bucket_owner_access_Set() const{
    return m_bucket_owner_access_isSet;
}

bool OAILogsLocation_s3Logs::is_bucket_owner_access_Valid() const{
    return m_bucket_owner_access_isValid;
}

bool OAILogsLocation_s3Logs::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_owner_access.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILogsLocation_s3Logs::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_status_isValid && true;
}

} // namespace OpenAPI
