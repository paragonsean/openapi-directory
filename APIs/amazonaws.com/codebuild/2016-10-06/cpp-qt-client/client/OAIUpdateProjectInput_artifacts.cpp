/**
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateProjectInput_artifacts.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateProjectInput_artifacts::OAIUpdateProjectInput_artifacts(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateProjectInput_artifacts::OAIUpdateProjectInput_artifacts() {
    this->initializeModel();
}

OAIUpdateProjectInput_artifacts::~OAIUpdateProjectInput_artifacts() {}

void OAIUpdateProjectInput_artifacts::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_namespace_type_isSet = false;
    m_namespace_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_packaging_isSet = false;
    m_packaging_isValid = false;

    m_override_artifact_name_isSet = false;
    m_override_artifact_name_isValid = false;

    m_encryption_disabled_isSet = false;
    m_encryption_disabled_isValid = false;

    m_artifact_identifier_isSet = false;
    m_artifact_identifier_isValid = false;

    m_bucket_owner_access_isSet = false;
    m_bucket_owner_access_isValid = false;
}

void OAIUpdateProjectInput_artifacts::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateProjectInput_artifacts::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_namespace_type_isValid = ::OpenAPI::fromJsonValue(m_namespace_type, json[QString("namespaceType")]);
    m_namespace_type_isSet = !json[QString("namespaceType")].isNull() && m_namespace_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_packaging_isValid = ::OpenAPI::fromJsonValue(m_packaging, json[QString("packaging")]);
    m_packaging_isSet = !json[QString("packaging")].isNull() && m_packaging_isValid;

    m_override_artifact_name_isValid = ::OpenAPI::fromJsonValue(m_override_artifact_name, json[QString("overrideArtifactName")]);
    m_override_artifact_name_isSet = !json[QString("overrideArtifactName")].isNull() && m_override_artifact_name_isValid;

    m_encryption_disabled_isValid = ::OpenAPI::fromJsonValue(m_encryption_disabled, json[QString("encryptionDisabled")]);
    m_encryption_disabled_isSet = !json[QString("encryptionDisabled")].isNull() && m_encryption_disabled_isValid;

    m_artifact_identifier_isValid = ::OpenAPI::fromJsonValue(m_artifact_identifier, json[QString("artifactIdentifier")]);
    m_artifact_identifier_isSet = !json[QString("artifactIdentifier")].isNull() && m_artifact_identifier_isValid;

    m_bucket_owner_access_isValid = ::OpenAPI::fromJsonValue(m_bucket_owner_access, json[QString("bucketOwnerAccess")]);
    m_bucket_owner_access_isSet = !json[QString("bucketOwnerAccess")].isNull() && m_bucket_owner_access_isValid;
}

QString OAIUpdateProjectInput_artifacts::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateProjectInput_artifacts::asJsonObject() const {
    QJsonObject obj;
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_namespace_type.isSet()) {
        obj.insert(QString("namespaceType"), ::OpenAPI::toJsonValue(m_namespace_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_packaging.isSet()) {
        obj.insert(QString("packaging"), ::OpenAPI::toJsonValue(m_packaging));
    }
    if (m_override_artifact_name_isSet) {
        obj.insert(QString("overrideArtifactName"), ::OpenAPI::toJsonValue(m_override_artifact_name));
    }
    if (m_encryption_disabled_isSet) {
        obj.insert(QString("encryptionDisabled"), ::OpenAPI::toJsonValue(m_encryption_disabled));
    }
    if (m_artifact_identifier_isSet) {
        obj.insert(QString("artifactIdentifier"), ::OpenAPI::toJsonValue(m_artifact_identifier));
    }
    if (m_bucket_owner_access.isSet()) {
        obj.insert(QString("bucketOwnerAccess"), ::OpenAPI::toJsonValue(m_bucket_owner_access));
    }
    return obj;
}

OAIArtifactsType OAIUpdateProjectInput_artifacts::getType() const {
    return m_type;
}
void OAIUpdateProjectInput_artifacts::setType(const OAIArtifactsType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIUpdateProjectInput_artifacts::is_type_Set() const{
    return m_type_isSet;
}

bool OAIUpdateProjectInput_artifacts::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIUpdateProjectInput_artifacts::getLocation() const {
    return m_location;
}
void OAIUpdateProjectInput_artifacts::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIUpdateProjectInput_artifacts::is_location_Set() const{
    return m_location_isSet;
}

bool OAIUpdateProjectInput_artifacts::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIUpdateProjectInput_artifacts::getPath() const {
    return m_path;
}
void OAIUpdateProjectInput_artifacts::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIUpdateProjectInput_artifacts::is_path_Set() const{
    return m_path_isSet;
}

bool OAIUpdateProjectInput_artifacts::is_path_Valid() const{
    return m_path_isValid;
}

OAIArtifactNamespace OAIUpdateProjectInput_artifacts::getNamespaceType() const {
    return m_namespace_type;
}
void OAIUpdateProjectInput_artifacts::setNamespaceType(const OAIArtifactNamespace &namespace_type) {
    m_namespace_type = namespace_type;
    m_namespace_type_isSet = true;
}

bool OAIUpdateProjectInput_artifacts::is_namespace_type_Set() const{
    return m_namespace_type_isSet;
}

bool OAIUpdateProjectInput_artifacts::is_namespace_type_Valid() const{
    return m_namespace_type_isValid;
}

QString OAIUpdateProjectInput_artifacts::getName() const {
    return m_name;
}
void OAIUpdateProjectInput_artifacts::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdateProjectInput_artifacts::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateProjectInput_artifacts::is_name_Valid() const{
    return m_name_isValid;
}

OAIArtifactPackaging OAIUpdateProjectInput_artifacts::getPackaging() const {
    return m_packaging;
}
void OAIUpdateProjectInput_artifacts::setPackaging(const OAIArtifactPackaging &packaging) {
    m_packaging = packaging;
    m_packaging_isSet = true;
}

bool OAIUpdateProjectInput_artifacts::is_packaging_Set() const{
    return m_packaging_isSet;
}

bool OAIUpdateProjectInput_artifacts::is_packaging_Valid() const{
    return m_packaging_isValid;
}

bool OAIUpdateProjectInput_artifacts::getOverrideArtifactName() const {
    return m_override_artifact_name;
}
void OAIUpdateProjectInput_artifacts::setOverrideArtifactName(const bool &override_artifact_name) {
    m_override_artifact_name = override_artifact_name;
    m_override_artifact_name_isSet = true;
}

bool OAIUpdateProjectInput_artifacts::is_override_artifact_name_Set() const{
    return m_override_artifact_name_isSet;
}

bool OAIUpdateProjectInput_artifacts::is_override_artifact_name_Valid() const{
    return m_override_artifact_name_isValid;
}

bool OAIUpdateProjectInput_artifacts::getEncryptionDisabled() const {
    return m_encryption_disabled;
}
void OAIUpdateProjectInput_artifacts::setEncryptionDisabled(const bool &encryption_disabled) {
    m_encryption_disabled = encryption_disabled;
    m_encryption_disabled_isSet = true;
}

bool OAIUpdateProjectInput_artifacts::is_encryption_disabled_Set() const{
    return m_encryption_disabled_isSet;
}

bool OAIUpdateProjectInput_artifacts::is_encryption_disabled_Valid() const{
    return m_encryption_disabled_isValid;
}

QString OAIUpdateProjectInput_artifacts::getArtifactIdentifier() const {
    return m_artifact_identifier;
}
void OAIUpdateProjectInput_artifacts::setArtifactIdentifier(const QString &artifact_identifier) {
    m_artifact_identifier = artifact_identifier;
    m_artifact_identifier_isSet = true;
}

bool OAIUpdateProjectInput_artifacts::is_artifact_identifier_Set() const{
    return m_artifact_identifier_isSet;
}

bool OAIUpdateProjectInput_artifacts::is_artifact_identifier_Valid() const{
    return m_artifact_identifier_isValid;
}

OAIBucketOwnerAccess OAIUpdateProjectInput_artifacts::getBucketOwnerAccess() const {
    return m_bucket_owner_access;
}
void OAIUpdateProjectInput_artifacts::setBucketOwnerAccess(const OAIBucketOwnerAccess &bucket_owner_access) {
    m_bucket_owner_access = bucket_owner_access;
    m_bucket_owner_access_isSet = true;
}

bool OAIUpdateProjectInput_artifacts::is_bucket_owner_access_Set() const{
    return m_bucket_owner_access_isSet;
}

bool OAIUpdateProjectInput_artifacts::is_bucket_owner_access_Valid() const{
    return m_bucket_owner_access_isValid;
}

bool OAIUpdateProjectInput_artifacts::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_namespace_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_packaging.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_override_artifact_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_artifact_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_owner_access.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateProjectInput_artifacts::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
