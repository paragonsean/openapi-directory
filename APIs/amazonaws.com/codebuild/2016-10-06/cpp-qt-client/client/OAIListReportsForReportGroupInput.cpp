/**
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListReportsForReportGroupInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListReportsForReportGroupInput::OAIListReportsForReportGroupInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListReportsForReportGroupInput::OAIListReportsForReportGroupInput() {
    this->initializeModel();
}

OAIListReportsForReportGroupInput::~OAIListReportsForReportGroupInput() {}

void OAIListReportsForReportGroupInput::initializeModel() {

    m_report_group_arn_isSet = false;
    m_report_group_arn_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_sort_order_isSet = false;
    m_sort_order_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;
}

void OAIListReportsForReportGroupInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListReportsForReportGroupInput::fromJsonObject(QJsonObject json) {

    m_report_group_arn_isValid = ::OpenAPI::fromJsonValue(m_report_group_arn, json[QString("reportGroupArn")]);
    m_report_group_arn_isSet = !json[QString("reportGroupArn")].isNull() && m_report_group_arn_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;

    m_sort_order_isValid = ::OpenAPI::fromJsonValue(m_sort_order, json[QString("sortOrder")]);
    m_sort_order_isSet = !json[QString("sortOrder")].isNull() && m_sort_order_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("maxResults")]);
    m_max_results_isSet = !json[QString("maxResults")].isNull() && m_max_results_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;
}

QString OAIListReportsForReportGroupInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListReportsForReportGroupInput::asJsonObject() const {
    QJsonObject obj;
    if (m_report_group_arn_isSet) {
        obj.insert(QString("reportGroupArn"), ::OpenAPI::toJsonValue(m_report_group_arn));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_sort_order.isSet()) {
        obj.insert(QString("sortOrder"), ::OpenAPI::toJsonValue(m_sort_order));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("maxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_filter.isSet()) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    return obj;
}

QString OAIListReportsForReportGroupInput::getReportGroupArn() const {
    return m_report_group_arn;
}
void OAIListReportsForReportGroupInput::setReportGroupArn(const QString &report_group_arn) {
    m_report_group_arn = report_group_arn;
    m_report_group_arn_isSet = true;
}

bool OAIListReportsForReportGroupInput::is_report_group_arn_Set() const{
    return m_report_group_arn_isSet;
}

bool OAIListReportsForReportGroupInput::is_report_group_arn_Valid() const{
    return m_report_group_arn_isValid;
}

QString OAIListReportsForReportGroupInput::getNextToken() const {
    return m_next_token;
}
void OAIListReportsForReportGroupInput::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListReportsForReportGroupInput::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListReportsForReportGroupInput::is_next_token_Valid() const{
    return m_next_token_isValid;
}

OAISortOrderType OAIListReportsForReportGroupInput::getSortOrder() const {
    return m_sort_order;
}
void OAIListReportsForReportGroupInput::setSortOrder(const OAISortOrderType &sort_order) {
    m_sort_order = sort_order;
    m_sort_order_isSet = true;
}

bool OAIListReportsForReportGroupInput::is_sort_order_Set() const{
    return m_sort_order_isSet;
}

bool OAIListReportsForReportGroupInput::is_sort_order_Valid() const{
    return m_sort_order_isValid;
}

qint32 OAIListReportsForReportGroupInput::getMaxResults() const {
    return m_max_results;
}
void OAIListReportsForReportGroupInput::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListReportsForReportGroupInput::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListReportsForReportGroupInput::is_max_results_Valid() const{
    return m_max_results_isValid;
}

OAIListReportsInput_filter OAIListReportsForReportGroupInput::getFilter() const {
    return m_filter;
}
void OAIListReportsForReportGroupInput::setFilter(const OAIListReportsInput_filter &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIListReportsForReportGroupInput::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIListReportsForReportGroupInput::is_filter_Valid() const{
    return m_filter_isValid;
}

bool OAIListReportsForReportGroupInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_report_group_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_order.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListReportsForReportGroupInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_report_group_arn_isValid && true;
}

} // namespace OpenAPI
