/**
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProject::OAIProject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProject::OAIProject() {
    this->initializeModel();
}

OAIProject::~OAIProject() {}

void OAIProject::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_secondary_sources_isSet = false;
    m_secondary_sources_isValid = false;

    m_source_version_isSet = false;
    m_source_version_isValid = false;

    m_secondary_source_versions_isSet = false;
    m_secondary_source_versions_isValid = false;

    m_artifacts_isSet = false;
    m_artifacts_isValid = false;

    m_secondary_artifacts_isSet = false;
    m_secondary_artifacts_isValid = false;

    m_cache_isSet = false;
    m_cache_isValid = false;

    m_environment_isSet = false;
    m_environment_isValid = false;

    m_service_role_isSet = false;
    m_service_role_isValid = false;

    m_timeout_in_minutes_isSet = false;
    m_timeout_in_minutes_isValid = false;

    m_queued_timeout_in_minutes_isSet = false;
    m_queued_timeout_in_minutes_isValid = false;

    m_encryption_key_isSet = false;
    m_encryption_key_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_last_modified_isSet = false;
    m_last_modified_isValid = false;

    m_webhook_isSet = false;
    m_webhook_isValid = false;

    m_vpc_config_isSet = false;
    m_vpc_config_isValid = false;

    m_badge_isSet = false;
    m_badge_isValid = false;

    m_logs_config_isSet = false;
    m_logs_config_isValid = false;

    m_file_system_locations_isSet = false;
    m_file_system_locations_isValid = false;

    m_build_batch_config_isSet = false;
    m_build_batch_config_isValid = false;

    m_concurrent_build_limit_isSet = false;
    m_concurrent_build_limit_isValid = false;

    m_project_visibility_isSet = false;
    m_project_visibility_isValid = false;

    m_public_project_alias_isSet = false;
    m_public_project_alias_isValid = false;

    m_resource_access_role_isSet = false;
    m_resource_access_role_isValid = false;
}

void OAIProject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProject::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_secondary_sources_isValid = ::OpenAPI::fromJsonValue(m_secondary_sources, json[QString("secondarySources")]);
    m_secondary_sources_isSet = !json[QString("secondarySources")].isNull() && m_secondary_sources_isValid;

    m_source_version_isValid = ::OpenAPI::fromJsonValue(m_source_version, json[QString("sourceVersion")]);
    m_source_version_isSet = !json[QString("sourceVersion")].isNull() && m_source_version_isValid;

    m_secondary_source_versions_isValid = ::OpenAPI::fromJsonValue(m_secondary_source_versions, json[QString("secondarySourceVersions")]);
    m_secondary_source_versions_isSet = !json[QString("secondarySourceVersions")].isNull() && m_secondary_source_versions_isValid;

    m_artifacts_isValid = ::OpenAPI::fromJsonValue(m_artifacts, json[QString("artifacts")]);
    m_artifacts_isSet = !json[QString("artifacts")].isNull() && m_artifacts_isValid;

    m_secondary_artifacts_isValid = ::OpenAPI::fromJsonValue(m_secondary_artifacts, json[QString("secondaryArtifacts")]);
    m_secondary_artifacts_isSet = !json[QString("secondaryArtifacts")].isNull() && m_secondary_artifacts_isValid;

    m_cache_isValid = ::OpenAPI::fromJsonValue(m_cache, json[QString("cache")]);
    m_cache_isSet = !json[QString("cache")].isNull() && m_cache_isValid;

    m_environment_isValid = ::OpenAPI::fromJsonValue(m_environment, json[QString("environment")]);
    m_environment_isSet = !json[QString("environment")].isNull() && m_environment_isValid;

    m_service_role_isValid = ::OpenAPI::fromJsonValue(m_service_role, json[QString("serviceRole")]);
    m_service_role_isSet = !json[QString("serviceRole")].isNull() && m_service_role_isValid;

    m_timeout_in_minutes_isValid = ::OpenAPI::fromJsonValue(m_timeout_in_minutes, json[QString("timeoutInMinutes")]);
    m_timeout_in_minutes_isSet = !json[QString("timeoutInMinutes")].isNull() && m_timeout_in_minutes_isValid;

    m_queued_timeout_in_minutes_isValid = ::OpenAPI::fromJsonValue(m_queued_timeout_in_minutes, json[QString("queuedTimeoutInMinutes")]);
    m_queued_timeout_in_minutes_isSet = !json[QString("queuedTimeoutInMinutes")].isNull() && m_queued_timeout_in_minutes_isValid;

    m_encryption_key_isValid = ::OpenAPI::fromJsonValue(m_encryption_key, json[QString("encryptionKey")]);
    m_encryption_key_isSet = !json[QString("encryptionKey")].isNull() && m_encryption_key_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_last_modified_isValid = ::OpenAPI::fromJsonValue(m_last_modified, json[QString("lastModified")]);
    m_last_modified_isSet = !json[QString("lastModified")].isNull() && m_last_modified_isValid;

    m_webhook_isValid = ::OpenAPI::fromJsonValue(m_webhook, json[QString("webhook")]);
    m_webhook_isSet = !json[QString("webhook")].isNull() && m_webhook_isValid;

    m_vpc_config_isValid = ::OpenAPI::fromJsonValue(m_vpc_config, json[QString("vpcConfig")]);
    m_vpc_config_isSet = !json[QString("vpcConfig")].isNull() && m_vpc_config_isValid;

    m_badge_isValid = ::OpenAPI::fromJsonValue(m_badge, json[QString("badge")]);
    m_badge_isSet = !json[QString("badge")].isNull() && m_badge_isValid;

    m_logs_config_isValid = ::OpenAPI::fromJsonValue(m_logs_config, json[QString("logsConfig")]);
    m_logs_config_isSet = !json[QString("logsConfig")].isNull() && m_logs_config_isValid;

    m_file_system_locations_isValid = ::OpenAPI::fromJsonValue(m_file_system_locations, json[QString("fileSystemLocations")]);
    m_file_system_locations_isSet = !json[QString("fileSystemLocations")].isNull() && m_file_system_locations_isValid;

    m_build_batch_config_isValid = ::OpenAPI::fromJsonValue(m_build_batch_config, json[QString("buildBatchConfig")]);
    m_build_batch_config_isSet = !json[QString("buildBatchConfig")].isNull() && m_build_batch_config_isValid;

    m_concurrent_build_limit_isValid = ::OpenAPI::fromJsonValue(m_concurrent_build_limit, json[QString("concurrentBuildLimit")]);
    m_concurrent_build_limit_isSet = !json[QString("concurrentBuildLimit")].isNull() && m_concurrent_build_limit_isValid;

    m_project_visibility_isValid = ::OpenAPI::fromJsonValue(m_project_visibility, json[QString("projectVisibility")]);
    m_project_visibility_isSet = !json[QString("projectVisibility")].isNull() && m_project_visibility_isValid;

    m_public_project_alias_isValid = ::OpenAPI::fromJsonValue(m_public_project_alias, json[QString("publicProjectAlias")]);
    m_public_project_alias_isSet = !json[QString("publicProjectAlias")].isNull() && m_public_project_alias_isValid;

    m_resource_access_role_isValid = ::OpenAPI::fromJsonValue(m_resource_access_role, json[QString("resourceAccessRole")]);
    m_resource_access_role_isSet = !json[QString("resourceAccessRole")].isNull() && m_resource_access_role_isValid;
}

QString OAIProject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProject::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_secondary_sources.isSet()) {
        obj.insert(QString("secondarySources"), ::OpenAPI::toJsonValue(m_secondary_sources));
    }
    if (m_source_version_isSet) {
        obj.insert(QString("sourceVersion"), ::OpenAPI::toJsonValue(m_source_version));
    }
    if (m_secondary_source_versions.isSet()) {
        obj.insert(QString("secondarySourceVersions"), ::OpenAPI::toJsonValue(m_secondary_source_versions));
    }
    if (m_artifacts.isSet()) {
        obj.insert(QString("artifacts"), ::OpenAPI::toJsonValue(m_artifacts));
    }
    if (m_secondary_artifacts.isSet()) {
        obj.insert(QString("secondaryArtifacts"), ::OpenAPI::toJsonValue(m_secondary_artifacts));
    }
    if (m_cache.isSet()) {
        obj.insert(QString("cache"), ::OpenAPI::toJsonValue(m_cache));
    }
    if (m_environment.isSet()) {
        obj.insert(QString("environment"), ::OpenAPI::toJsonValue(m_environment));
    }
    if (m_service_role_isSet) {
        obj.insert(QString("serviceRole"), ::OpenAPI::toJsonValue(m_service_role));
    }
    if (m_timeout_in_minutes_isSet) {
        obj.insert(QString("timeoutInMinutes"), ::OpenAPI::toJsonValue(m_timeout_in_minutes));
    }
    if (m_queued_timeout_in_minutes_isSet) {
        obj.insert(QString("queuedTimeoutInMinutes"), ::OpenAPI::toJsonValue(m_queued_timeout_in_minutes));
    }
    if (m_encryption_key_isSet) {
        obj.insert(QString("encryptionKey"), ::OpenAPI::toJsonValue(m_encryption_key));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_last_modified_isSet) {
        obj.insert(QString("lastModified"), ::OpenAPI::toJsonValue(m_last_modified));
    }
    if (m_webhook.isSet()) {
        obj.insert(QString("webhook"), ::OpenAPI::toJsonValue(m_webhook));
    }
    if (m_vpc_config.isSet()) {
        obj.insert(QString("vpcConfig"), ::OpenAPI::toJsonValue(m_vpc_config));
    }
    if (m_badge.isSet()) {
        obj.insert(QString("badge"), ::OpenAPI::toJsonValue(m_badge));
    }
    if (m_logs_config.isSet()) {
        obj.insert(QString("logsConfig"), ::OpenAPI::toJsonValue(m_logs_config));
    }
    if (m_file_system_locations.isSet()) {
        obj.insert(QString("fileSystemLocations"), ::OpenAPI::toJsonValue(m_file_system_locations));
    }
    if (m_build_batch_config.isSet()) {
        obj.insert(QString("buildBatchConfig"), ::OpenAPI::toJsonValue(m_build_batch_config));
    }
    if (m_concurrent_build_limit_isSet) {
        obj.insert(QString("concurrentBuildLimit"), ::OpenAPI::toJsonValue(m_concurrent_build_limit));
    }
    if (m_project_visibility.isSet()) {
        obj.insert(QString("projectVisibility"), ::OpenAPI::toJsonValue(m_project_visibility));
    }
    if (m_public_project_alias_isSet) {
        obj.insert(QString("publicProjectAlias"), ::OpenAPI::toJsonValue(m_public_project_alias));
    }
    if (m_resource_access_role_isSet) {
        obj.insert(QString("resourceAccessRole"), ::OpenAPI::toJsonValue(m_resource_access_role));
    }
    return obj;
}

QString OAIProject::getName() const {
    return m_name;
}
void OAIProject::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProject::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProject::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIProject::getArn() const {
    return m_arn;
}
void OAIProject::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIProject::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIProject::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIProject::getDescription() const {
    return m_description;
}
void OAIProject::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIProject::is_description_Set() const{
    return m_description_isSet;
}

bool OAIProject::is_description_Valid() const{
    return m_description_isValid;
}

OAIProject_source OAIProject::getSource() const {
    return m_source;
}
void OAIProject::setSource(const OAIProject_source &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIProject::is_source_Set() const{
    return m_source_isSet;
}

bool OAIProject::is_source_Valid() const{
    return m_source_isValid;
}

QList OAIProject::getSecondarySources() const {
    return m_secondary_sources;
}
void OAIProject::setSecondarySources(const QList &secondary_sources) {
    m_secondary_sources = secondary_sources;
    m_secondary_sources_isSet = true;
}

bool OAIProject::is_secondary_sources_Set() const{
    return m_secondary_sources_isSet;
}

bool OAIProject::is_secondary_sources_Valid() const{
    return m_secondary_sources_isValid;
}

QString OAIProject::getSourceVersion() const {
    return m_source_version;
}
void OAIProject::setSourceVersion(const QString &source_version) {
    m_source_version = source_version;
    m_source_version_isSet = true;
}

bool OAIProject::is_source_version_Set() const{
    return m_source_version_isSet;
}

bool OAIProject::is_source_version_Valid() const{
    return m_source_version_isValid;
}

QList OAIProject::getSecondarySourceVersions() const {
    return m_secondary_source_versions;
}
void OAIProject::setSecondarySourceVersions(const QList &secondary_source_versions) {
    m_secondary_source_versions = secondary_source_versions;
    m_secondary_source_versions_isSet = true;
}

bool OAIProject::is_secondary_source_versions_Set() const{
    return m_secondary_source_versions_isSet;
}

bool OAIProject::is_secondary_source_versions_Valid() const{
    return m_secondary_source_versions_isValid;
}

OAICreateProjectInput_artifacts OAIProject::getArtifacts() const {
    return m_artifacts;
}
void OAIProject::setArtifacts(const OAICreateProjectInput_artifacts &artifacts) {
    m_artifacts = artifacts;
    m_artifacts_isSet = true;
}

bool OAIProject::is_artifacts_Set() const{
    return m_artifacts_isSet;
}

bool OAIProject::is_artifacts_Valid() const{
    return m_artifacts_isValid;
}

QList OAIProject::getSecondaryArtifacts() const {
    return m_secondary_artifacts;
}
void OAIProject::setSecondaryArtifacts(const QList &secondary_artifacts) {
    m_secondary_artifacts = secondary_artifacts;
    m_secondary_artifacts_isSet = true;
}

bool OAIProject::is_secondary_artifacts_Set() const{
    return m_secondary_artifacts_isSet;
}

bool OAIProject::is_secondary_artifacts_Valid() const{
    return m_secondary_artifacts_isValid;
}

OAIProject_cache OAIProject::getCache() const {
    return m_cache;
}
void OAIProject::setCache(const OAIProject_cache &cache) {
    m_cache = cache;
    m_cache_isSet = true;
}

bool OAIProject::is_cache_Set() const{
    return m_cache_isSet;
}

bool OAIProject::is_cache_Valid() const{
    return m_cache_isValid;
}

OAIProject_environment OAIProject::getEnvironment() const {
    return m_environment;
}
void OAIProject::setEnvironment(const OAIProject_environment &environment) {
    m_environment = environment;
    m_environment_isSet = true;
}

bool OAIProject::is_environment_Set() const{
    return m_environment_isSet;
}

bool OAIProject::is_environment_Valid() const{
    return m_environment_isValid;
}

QString OAIProject::getServiceRole() const {
    return m_service_role;
}
void OAIProject::setServiceRole(const QString &service_role) {
    m_service_role = service_role;
    m_service_role_isSet = true;
}

bool OAIProject::is_service_role_Set() const{
    return m_service_role_isSet;
}

bool OAIProject::is_service_role_Valid() const{
    return m_service_role_isValid;
}

qint32 OAIProject::getTimeoutInMinutes() const {
    return m_timeout_in_minutes;
}
void OAIProject::setTimeoutInMinutes(const qint32 &timeout_in_minutes) {
    m_timeout_in_minutes = timeout_in_minutes;
    m_timeout_in_minutes_isSet = true;
}

bool OAIProject::is_timeout_in_minutes_Set() const{
    return m_timeout_in_minutes_isSet;
}

bool OAIProject::is_timeout_in_minutes_Valid() const{
    return m_timeout_in_minutes_isValid;
}

qint32 OAIProject::getQueuedTimeoutInMinutes() const {
    return m_queued_timeout_in_minutes;
}
void OAIProject::setQueuedTimeoutInMinutes(const qint32 &queued_timeout_in_minutes) {
    m_queued_timeout_in_minutes = queued_timeout_in_minutes;
    m_queued_timeout_in_minutes_isSet = true;
}

bool OAIProject::is_queued_timeout_in_minutes_Set() const{
    return m_queued_timeout_in_minutes_isSet;
}

bool OAIProject::is_queued_timeout_in_minutes_Valid() const{
    return m_queued_timeout_in_minutes_isValid;
}

QString OAIProject::getEncryptionKey() const {
    return m_encryption_key;
}
void OAIProject::setEncryptionKey(const QString &encryption_key) {
    m_encryption_key = encryption_key;
    m_encryption_key_isSet = true;
}

bool OAIProject::is_encryption_key_Set() const{
    return m_encryption_key_isSet;
}

bool OAIProject::is_encryption_key_Valid() const{
    return m_encryption_key_isValid;
}

QList OAIProject::getTags() const {
    return m_tags;
}
void OAIProject::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIProject::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIProject::is_tags_Valid() const{
    return m_tags_isValid;
}

QDateTime OAIProject::getCreated() const {
    return m_created;
}
void OAIProject::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIProject::is_created_Set() const{
    return m_created_isSet;
}

bool OAIProject::is_created_Valid() const{
    return m_created_isValid;
}

QDateTime OAIProject::getLastModified() const {
    return m_last_modified;
}
void OAIProject::setLastModified(const QDateTime &last_modified) {
    m_last_modified = last_modified;
    m_last_modified_isSet = true;
}

bool OAIProject::is_last_modified_Set() const{
    return m_last_modified_isSet;
}

bool OAIProject::is_last_modified_Valid() const{
    return m_last_modified_isValid;
}

OAICreateWebhookOutput_webhook OAIProject::getWebhook() const {
    return m_webhook;
}
void OAIProject::setWebhook(const OAICreateWebhookOutput_webhook &webhook) {
    m_webhook = webhook;
    m_webhook_isSet = true;
}

bool OAIProject::is_webhook_Set() const{
    return m_webhook_isSet;
}

bool OAIProject::is_webhook_Valid() const{
    return m_webhook_isValid;
}

OAIProject_vpcConfig OAIProject::getVpcConfig() const {
    return m_vpc_config;
}
void OAIProject::setVpcConfig(const OAIProject_vpcConfig &vpc_config) {
    m_vpc_config = vpc_config;
    m_vpc_config_isSet = true;
}

bool OAIProject::is_vpc_config_Set() const{
    return m_vpc_config_isSet;
}

bool OAIProject::is_vpc_config_Valid() const{
    return m_vpc_config_isValid;
}

OAIProject_badge OAIProject::getBadge() const {
    return m_badge;
}
void OAIProject::setBadge(const OAIProject_badge &badge) {
    m_badge = badge;
    m_badge_isSet = true;
}

bool OAIProject::is_badge_Set() const{
    return m_badge_isSet;
}

bool OAIProject::is_badge_Valid() const{
    return m_badge_isValid;
}

OAIProject_logsConfig OAIProject::getLogsConfig() const {
    return m_logs_config;
}
void OAIProject::setLogsConfig(const OAIProject_logsConfig &logs_config) {
    m_logs_config = logs_config;
    m_logs_config_isSet = true;
}

bool OAIProject::is_logs_config_Set() const{
    return m_logs_config_isSet;
}

bool OAIProject::is_logs_config_Valid() const{
    return m_logs_config_isValid;
}

QList OAIProject::getFileSystemLocations() const {
    return m_file_system_locations;
}
void OAIProject::setFileSystemLocations(const QList &file_system_locations) {
    m_file_system_locations = file_system_locations;
    m_file_system_locations_isSet = true;
}

bool OAIProject::is_file_system_locations_Set() const{
    return m_file_system_locations_isSet;
}

bool OAIProject::is_file_system_locations_Valid() const{
    return m_file_system_locations_isValid;
}

OAICreateProjectInput_buildBatchConfig OAIProject::getBuildBatchConfig() const {
    return m_build_batch_config;
}
void OAIProject::setBuildBatchConfig(const OAICreateProjectInput_buildBatchConfig &build_batch_config) {
    m_build_batch_config = build_batch_config;
    m_build_batch_config_isSet = true;
}

bool OAIProject::is_build_batch_config_Set() const{
    return m_build_batch_config_isSet;
}

bool OAIProject::is_build_batch_config_Valid() const{
    return m_build_batch_config_isValid;
}

qint32 OAIProject::getConcurrentBuildLimit() const {
    return m_concurrent_build_limit;
}
void OAIProject::setConcurrentBuildLimit(const qint32 &concurrent_build_limit) {
    m_concurrent_build_limit = concurrent_build_limit;
    m_concurrent_build_limit_isSet = true;
}

bool OAIProject::is_concurrent_build_limit_Set() const{
    return m_concurrent_build_limit_isSet;
}

bool OAIProject::is_concurrent_build_limit_Valid() const{
    return m_concurrent_build_limit_isValid;
}

OAIProjectVisibilityType OAIProject::getProjectVisibility() const {
    return m_project_visibility;
}
void OAIProject::setProjectVisibility(const OAIProjectVisibilityType &project_visibility) {
    m_project_visibility = project_visibility;
    m_project_visibility_isSet = true;
}

bool OAIProject::is_project_visibility_Set() const{
    return m_project_visibility_isSet;
}

bool OAIProject::is_project_visibility_Valid() const{
    return m_project_visibility_isValid;
}

QString OAIProject::getPublicProjectAlias() const {
    return m_public_project_alias;
}
void OAIProject::setPublicProjectAlias(const QString &public_project_alias) {
    m_public_project_alias = public_project_alias;
    m_public_project_alias_isSet = true;
}

bool OAIProject::is_public_project_alias_Set() const{
    return m_public_project_alias_isSet;
}

bool OAIProject::is_public_project_alias_Valid() const{
    return m_public_project_alias_isValid;
}

QString OAIProject::getResourceAccessRole() const {
    return m_resource_access_role;
}
void OAIProject::setResourceAccessRole(const QString &resource_access_role) {
    m_resource_access_role = resource_access_role;
    m_resource_access_role_isSet = true;
}

bool OAIProject::is_resource_access_role_Set() const{
    return m_resource_access_role_isSet;
}

bool OAIProject::is_resource_access_role_Valid() const{
    return m_resource_access_role_isValid;
}

bool OAIProject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_sources.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_source_versions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_artifacts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_artifacts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cache.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_in_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_queued_timeout_in_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_webhook.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_badge.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_logs_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_system_locations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_batch_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_concurrent_build_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_project_alias_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_access_role_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
