/**
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectCache.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectCache::OAIProjectCache(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectCache::OAIProjectCache() {
    this->initializeModel();
}

OAIProjectCache::~OAIProjectCache() {}

void OAIProjectCache::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_modes_isSet = false;
    m_modes_isValid = false;
}

void OAIProjectCache::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectCache::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_modes_isValid = ::OpenAPI::fromJsonValue(m_modes, json[QString("modes")]);
    m_modes_isSet = !json[QString("modes")].isNull() && m_modes_isValid;
}

QString OAIProjectCache::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectCache::asJsonObject() const {
    QJsonObject obj;
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_modes.isSet()) {
        obj.insert(QString("modes"), ::OpenAPI::toJsonValue(m_modes));
    }
    return obj;
}

OAICacheType OAIProjectCache::getType() const {
    return m_type;
}
void OAIProjectCache::setType(const OAICacheType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIProjectCache::is_type_Set() const{
    return m_type_isSet;
}

bool OAIProjectCache::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIProjectCache::getLocation() const {
    return m_location;
}
void OAIProjectCache::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIProjectCache::is_location_Set() const{
    return m_location_isSet;
}

bool OAIProjectCache::is_location_Valid() const{
    return m_location_isValid;
}

QList OAIProjectCache::getModes() const {
    return m_modes;
}
void OAIProjectCache::setModes(const QList &modes) {
    m_modes = modes;
    m_modes_isSet = true;
}

bool OAIProjectCache::is_modes_Set() const{
    return m_modes_isSet;
}

bool OAIProjectCache::is_modes_Valid() const{
    return m_modes_isValid;
}

bool OAIProjectCache::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modes.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectCache::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
