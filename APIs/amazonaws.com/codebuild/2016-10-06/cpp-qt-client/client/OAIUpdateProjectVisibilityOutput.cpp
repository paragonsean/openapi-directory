/**
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateProjectVisibilityOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateProjectVisibilityOutput::OAIUpdateProjectVisibilityOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateProjectVisibilityOutput::OAIUpdateProjectVisibilityOutput() {
    this->initializeModel();
}

OAIUpdateProjectVisibilityOutput::~OAIUpdateProjectVisibilityOutput() {}

void OAIUpdateProjectVisibilityOutput::initializeModel() {

    m_project_arn_isSet = false;
    m_project_arn_isValid = false;

    m_public_project_alias_isSet = false;
    m_public_project_alias_isValid = false;

    m_project_visibility_isSet = false;
    m_project_visibility_isValid = false;
}

void OAIUpdateProjectVisibilityOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateProjectVisibilityOutput::fromJsonObject(QJsonObject json) {

    m_project_arn_isValid = ::OpenAPI::fromJsonValue(m_project_arn, json[QString("projectArn")]);
    m_project_arn_isSet = !json[QString("projectArn")].isNull() && m_project_arn_isValid;

    m_public_project_alias_isValid = ::OpenAPI::fromJsonValue(m_public_project_alias, json[QString("publicProjectAlias")]);
    m_public_project_alias_isSet = !json[QString("publicProjectAlias")].isNull() && m_public_project_alias_isValid;

    m_project_visibility_isValid = ::OpenAPI::fromJsonValue(m_project_visibility, json[QString("projectVisibility")]);
    m_project_visibility_isSet = !json[QString("projectVisibility")].isNull() && m_project_visibility_isValid;
}

QString OAIUpdateProjectVisibilityOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateProjectVisibilityOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_project_arn_isSet) {
        obj.insert(QString("projectArn"), ::OpenAPI::toJsonValue(m_project_arn));
    }
    if (m_public_project_alias_isSet) {
        obj.insert(QString("publicProjectAlias"), ::OpenAPI::toJsonValue(m_public_project_alias));
    }
    if (m_project_visibility.isSet()) {
        obj.insert(QString("projectVisibility"), ::OpenAPI::toJsonValue(m_project_visibility));
    }
    return obj;
}

QString OAIUpdateProjectVisibilityOutput::getProjectArn() const {
    return m_project_arn;
}
void OAIUpdateProjectVisibilityOutput::setProjectArn(const QString &project_arn) {
    m_project_arn = project_arn;
    m_project_arn_isSet = true;
}

bool OAIUpdateProjectVisibilityOutput::is_project_arn_Set() const{
    return m_project_arn_isSet;
}

bool OAIUpdateProjectVisibilityOutput::is_project_arn_Valid() const{
    return m_project_arn_isValid;
}

QString OAIUpdateProjectVisibilityOutput::getPublicProjectAlias() const {
    return m_public_project_alias;
}
void OAIUpdateProjectVisibilityOutput::setPublicProjectAlias(const QString &public_project_alias) {
    m_public_project_alias = public_project_alias;
    m_public_project_alias_isSet = true;
}

bool OAIUpdateProjectVisibilityOutput::is_public_project_alias_Set() const{
    return m_public_project_alias_isSet;
}

bool OAIUpdateProjectVisibilityOutput::is_public_project_alias_Valid() const{
    return m_public_project_alias_isValid;
}

OAIProjectVisibilityType OAIUpdateProjectVisibilityOutput::getProjectVisibility() const {
    return m_project_visibility;
}
void OAIUpdateProjectVisibilityOutput::setProjectVisibility(const OAIProjectVisibilityType &project_visibility) {
    m_project_visibility = project_visibility;
    m_project_visibility_isSet = true;
}

bool OAIUpdateProjectVisibilityOutput::is_project_visibility_Set() const{
    return m_project_visibility_isSet;
}

bool OAIUpdateProjectVisibilityOutput::is_project_visibility_Valid() const{
    return m_project_visibility_isValid;
}

bool OAIUpdateProjectVisibilityOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_project_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_project_alias_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateProjectVisibilityOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
