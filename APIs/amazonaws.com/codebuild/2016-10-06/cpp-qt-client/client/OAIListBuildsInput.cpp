/**
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListBuildsInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListBuildsInput::OAIListBuildsInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListBuildsInput::OAIListBuildsInput() {
    this->initializeModel();
}

OAIListBuildsInput::~OAIListBuildsInput() {}

void OAIListBuildsInput::initializeModel() {

    m_sort_order_isSet = false;
    m_sort_order_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListBuildsInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListBuildsInput::fromJsonObject(QJsonObject json) {

    m_sort_order_isValid = ::OpenAPI::fromJsonValue(m_sort_order, json[QString("sortOrder")]);
    m_sort_order_isSet = !json[QString("sortOrder")].isNull() && m_sort_order_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;
}

QString OAIListBuildsInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListBuildsInput::asJsonObject() const {
    QJsonObject obj;
    if (m_sort_order.isSet()) {
        obj.insert(QString("sortOrder"), ::OpenAPI::toJsonValue(m_sort_order));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

OAISortOrderType OAIListBuildsInput::getSortOrder() const {
    return m_sort_order;
}
void OAIListBuildsInput::setSortOrder(const OAISortOrderType &sort_order) {
    m_sort_order = sort_order;
    m_sort_order_isSet = true;
}

bool OAIListBuildsInput::is_sort_order_Set() const{
    return m_sort_order_isSet;
}

bool OAIListBuildsInput::is_sort_order_Valid() const{
    return m_sort_order_isValid;
}

QString OAIListBuildsInput::getNextToken() const {
    return m_next_token;
}
void OAIListBuildsInput::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListBuildsInput::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListBuildsInput::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListBuildsInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sort_order.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListBuildsInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
