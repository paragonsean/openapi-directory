/**
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListBuildBatchesInput_filter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListBuildBatchesInput_filter::OAIListBuildBatchesInput_filter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListBuildBatchesInput_filter::OAIListBuildBatchesInput_filter() {
    this->initializeModel();
}

OAIListBuildBatchesInput_filter::~OAIListBuildBatchesInput_filter() {}

void OAIListBuildBatchesInput_filter::initializeModel() {

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIListBuildBatchesInput_filter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListBuildBatchesInput_filter::fromJsonObject(QJsonObject json) {

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIListBuildBatchesInput_filter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListBuildBatchesInput_filter::asJsonObject() const {
    QJsonObject obj;
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAIStatusType OAIListBuildBatchesInput_filter::getStatus() const {
    return m_status;
}
void OAIListBuildBatchesInput_filter::setStatus(const OAIStatusType &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIListBuildBatchesInput_filter::is_status_Set() const{
    return m_status_isSet;
}

bool OAIListBuildBatchesInput_filter::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIListBuildBatchesInput_filter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListBuildBatchesInput_filter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
