/**
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBuildSummary_primaryArtifact.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBuildSummary_primaryArtifact::OAIBuildSummary_primaryArtifact(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBuildSummary_primaryArtifact::OAIBuildSummary_primaryArtifact() {
    this->initializeModel();
}

OAIBuildSummary_primaryArtifact::~OAIBuildSummary_primaryArtifact() {}

void OAIBuildSummary_primaryArtifact::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_identifier_isSet = false;
    m_identifier_isValid = false;
}

void OAIBuildSummary_primaryArtifact::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBuildSummary_primaryArtifact::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_identifier_isValid = ::OpenAPI::fromJsonValue(m_identifier, json[QString("identifier")]);
    m_identifier_isSet = !json[QString("identifier")].isNull() && m_identifier_isValid;
}

QString OAIBuildSummary_primaryArtifact::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBuildSummary_primaryArtifact::asJsonObject() const {
    QJsonObject obj;
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_identifier_isSet) {
        obj.insert(QString("identifier"), ::OpenAPI::toJsonValue(m_identifier));
    }
    return obj;
}

OAIArtifactsType OAIBuildSummary_primaryArtifact::getType() const {
    return m_type;
}
void OAIBuildSummary_primaryArtifact::setType(const OAIArtifactsType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIBuildSummary_primaryArtifact::is_type_Set() const{
    return m_type_isSet;
}

bool OAIBuildSummary_primaryArtifact::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIBuildSummary_primaryArtifact::getLocation() const {
    return m_location;
}
void OAIBuildSummary_primaryArtifact::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIBuildSummary_primaryArtifact::is_location_Set() const{
    return m_location_isSet;
}

bool OAIBuildSummary_primaryArtifact::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIBuildSummary_primaryArtifact::getIdentifier() const {
    return m_identifier;
}
void OAIBuildSummary_primaryArtifact::setIdentifier(const QString &identifier) {
    m_identifier = identifier;
    m_identifier_isSet = true;
}

bool OAIBuildSummary_primaryArtifact::is_identifier_Set() const{
    return m_identifier_isSet;
}

bool OAIBuildSummary_primaryArtifact::is_identifier_Valid() const{
    return m_identifier_isValid;
}

bool OAIBuildSummary_primaryArtifact::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBuildSummary_primaryArtifact::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
