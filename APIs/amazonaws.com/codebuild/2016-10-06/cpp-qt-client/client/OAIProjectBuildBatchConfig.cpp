/**
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectBuildBatchConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectBuildBatchConfig::OAIProjectBuildBatchConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectBuildBatchConfig::OAIProjectBuildBatchConfig() {
    this->initializeModel();
}

OAIProjectBuildBatchConfig::~OAIProjectBuildBatchConfig() {}

void OAIProjectBuildBatchConfig::initializeModel() {

    m_service_role_isSet = false;
    m_service_role_isValid = false;

    m_combine_artifacts_isSet = false;
    m_combine_artifacts_isValid = false;

    m_restrictions_isSet = false;
    m_restrictions_isValid = false;

    m_timeout_in_mins_isSet = false;
    m_timeout_in_mins_isValid = false;

    m_batch_report_mode_isSet = false;
    m_batch_report_mode_isValid = false;
}

void OAIProjectBuildBatchConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectBuildBatchConfig::fromJsonObject(QJsonObject json) {

    m_service_role_isValid = ::OpenAPI::fromJsonValue(m_service_role, json[QString("serviceRole")]);
    m_service_role_isSet = !json[QString("serviceRole")].isNull() && m_service_role_isValid;

    m_combine_artifacts_isValid = ::OpenAPI::fromJsonValue(m_combine_artifacts, json[QString("combineArtifacts")]);
    m_combine_artifacts_isSet = !json[QString("combineArtifacts")].isNull() && m_combine_artifacts_isValid;

    m_restrictions_isValid = ::OpenAPI::fromJsonValue(m_restrictions, json[QString("restrictions")]);
    m_restrictions_isSet = !json[QString("restrictions")].isNull() && m_restrictions_isValid;

    m_timeout_in_mins_isValid = ::OpenAPI::fromJsonValue(m_timeout_in_mins, json[QString("timeoutInMins")]);
    m_timeout_in_mins_isSet = !json[QString("timeoutInMins")].isNull() && m_timeout_in_mins_isValid;

    m_batch_report_mode_isValid = ::OpenAPI::fromJsonValue(m_batch_report_mode, json[QString("batchReportMode")]);
    m_batch_report_mode_isSet = !json[QString("batchReportMode")].isNull() && m_batch_report_mode_isValid;
}

QString OAIProjectBuildBatchConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectBuildBatchConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_service_role_isSet) {
        obj.insert(QString("serviceRole"), ::OpenAPI::toJsonValue(m_service_role));
    }
    if (m_combine_artifacts_isSet) {
        obj.insert(QString("combineArtifacts"), ::OpenAPI::toJsonValue(m_combine_artifacts));
    }
    if (m_restrictions.isSet()) {
        obj.insert(QString("restrictions"), ::OpenAPI::toJsonValue(m_restrictions));
    }
    if (m_timeout_in_mins_isSet) {
        obj.insert(QString("timeoutInMins"), ::OpenAPI::toJsonValue(m_timeout_in_mins));
    }
    if (m_batch_report_mode.isSet()) {
        obj.insert(QString("batchReportMode"), ::OpenAPI::toJsonValue(m_batch_report_mode));
    }
    return obj;
}

QString OAIProjectBuildBatchConfig::getServiceRole() const {
    return m_service_role;
}
void OAIProjectBuildBatchConfig::setServiceRole(const QString &service_role) {
    m_service_role = service_role;
    m_service_role_isSet = true;
}

bool OAIProjectBuildBatchConfig::is_service_role_Set() const{
    return m_service_role_isSet;
}

bool OAIProjectBuildBatchConfig::is_service_role_Valid() const{
    return m_service_role_isValid;
}

bool OAIProjectBuildBatchConfig::getCombineArtifacts() const {
    return m_combine_artifacts;
}
void OAIProjectBuildBatchConfig::setCombineArtifacts(const bool &combine_artifacts) {
    m_combine_artifacts = combine_artifacts;
    m_combine_artifacts_isSet = true;
}

bool OAIProjectBuildBatchConfig::is_combine_artifacts_Set() const{
    return m_combine_artifacts_isSet;
}

bool OAIProjectBuildBatchConfig::is_combine_artifacts_Valid() const{
    return m_combine_artifacts_isValid;
}

OAIProjectBuildBatchConfig_restrictions OAIProjectBuildBatchConfig::getRestrictions() const {
    return m_restrictions;
}
void OAIProjectBuildBatchConfig::setRestrictions(const OAIProjectBuildBatchConfig_restrictions &restrictions) {
    m_restrictions = restrictions;
    m_restrictions_isSet = true;
}

bool OAIProjectBuildBatchConfig::is_restrictions_Set() const{
    return m_restrictions_isSet;
}

bool OAIProjectBuildBatchConfig::is_restrictions_Valid() const{
    return m_restrictions_isValid;
}

qint32 OAIProjectBuildBatchConfig::getTimeoutInMins() const {
    return m_timeout_in_mins;
}
void OAIProjectBuildBatchConfig::setTimeoutInMins(const qint32 &timeout_in_mins) {
    m_timeout_in_mins = timeout_in_mins;
    m_timeout_in_mins_isSet = true;
}

bool OAIProjectBuildBatchConfig::is_timeout_in_mins_Set() const{
    return m_timeout_in_mins_isSet;
}

bool OAIProjectBuildBatchConfig::is_timeout_in_mins_Valid() const{
    return m_timeout_in_mins_isValid;
}

OAIBatchReportModeType OAIProjectBuildBatchConfig::getBatchReportMode() const {
    return m_batch_report_mode;
}
void OAIProjectBuildBatchConfig::setBatchReportMode(const OAIBatchReportModeType &batch_report_mode) {
    m_batch_report_mode = batch_report_mode;
    m_batch_report_mode_isSet = true;
}

bool OAIProjectBuildBatchConfig::is_batch_report_mode_Set() const{
    return m_batch_report_mode_isSet;
}

bool OAIProjectBuildBatchConfig::is_batch_report_mode_Valid() const{
    return m_batch_report_mode_isValid;
}

bool OAIProjectBuildBatchConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_service_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_combine_artifacts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restrictions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_in_mins_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_batch_report_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectBuildBatchConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
