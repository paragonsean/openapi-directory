/**
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBuild_artifacts.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBuild_artifacts::OAIBuild_artifacts(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBuild_artifacts::OAIBuild_artifacts() {
    this->initializeModel();
}

OAIBuild_artifacts::~OAIBuild_artifacts() {}

void OAIBuild_artifacts::initializeModel() {

    m_location_isSet = false;
    m_location_isValid = false;

    m_sha256sum_isSet = false;
    m_sha256sum_isValid = false;

    m_md5sum_isSet = false;
    m_md5sum_isValid = false;

    m_override_artifact_name_isSet = false;
    m_override_artifact_name_isValid = false;

    m_encryption_disabled_isSet = false;
    m_encryption_disabled_isValid = false;

    m_artifact_identifier_isSet = false;
    m_artifact_identifier_isValid = false;

    m_bucket_owner_access_isSet = false;
    m_bucket_owner_access_isValid = false;
}

void OAIBuild_artifacts::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBuild_artifacts::fromJsonObject(QJsonObject json) {

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_sha256sum_isValid = ::OpenAPI::fromJsonValue(m_sha256sum, json[QString("sha256sum")]);
    m_sha256sum_isSet = !json[QString("sha256sum")].isNull() && m_sha256sum_isValid;

    m_md5sum_isValid = ::OpenAPI::fromJsonValue(m_md5sum, json[QString("md5sum")]);
    m_md5sum_isSet = !json[QString("md5sum")].isNull() && m_md5sum_isValid;

    m_override_artifact_name_isValid = ::OpenAPI::fromJsonValue(m_override_artifact_name, json[QString("overrideArtifactName")]);
    m_override_artifact_name_isSet = !json[QString("overrideArtifactName")].isNull() && m_override_artifact_name_isValid;

    m_encryption_disabled_isValid = ::OpenAPI::fromJsonValue(m_encryption_disabled, json[QString("encryptionDisabled")]);
    m_encryption_disabled_isSet = !json[QString("encryptionDisabled")].isNull() && m_encryption_disabled_isValid;

    m_artifact_identifier_isValid = ::OpenAPI::fromJsonValue(m_artifact_identifier, json[QString("artifactIdentifier")]);
    m_artifact_identifier_isSet = !json[QString("artifactIdentifier")].isNull() && m_artifact_identifier_isValid;

    m_bucket_owner_access_isValid = ::OpenAPI::fromJsonValue(m_bucket_owner_access, json[QString("bucketOwnerAccess")]);
    m_bucket_owner_access_isSet = !json[QString("bucketOwnerAccess")].isNull() && m_bucket_owner_access_isValid;
}

QString OAIBuild_artifacts::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBuild_artifacts::asJsonObject() const {
    QJsonObject obj;
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_sha256sum_isSet) {
        obj.insert(QString("sha256sum"), ::OpenAPI::toJsonValue(m_sha256sum));
    }
    if (m_md5sum_isSet) {
        obj.insert(QString("md5sum"), ::OpenAPI::toJsonValue(m_md5sum));
    }
    if (m_override_artifact_name_isSet) {
        obj.insert(QString("overrideArtifactName"), ::OpenAPI::toJsonValue(m_override_artifact_name));
    }
    if (m_encryption_disabled_isSet) {
        obj.insert(QString("encryptionDisabled"), ::OpenAPI::toJsonValue(m_encryption_disabled));
    }
    if (m_artifact_identifier_isSet) {
        obj.insert(QString("artifactIdentifier"), ::OpenAPI::toJsonValue(m_artifact_identifier));
    }
    if (m_bucket_owner_access.isSet()) {
        obj.insert(QString("bucketOwnerAccess"), ::OpenAPI::toJsonValue(m_bucket_owner_access));
    }
    return obj;
}

QString OAIBuild_artifacts::getLocation() const {
    return m_location;
}
void OAIBuild_artifacts::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIBuild_artifacts::is_location_Set() const{
    return m_location_isSet;
}

bool OAIBuild_artifacts::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIBuild_artifacts::getSha256sum() const {
    return m_sha256sum;
}
void OAIBuild_artifacts::setSha256sum(const QString &sha256sum) {
    m_sha256sum = sha256sum;
    m_sha256sum_isSet = true;
}

bool OAIBuild_artifacts::is_sha256sum_Set() const{
    return m_sha256sum_isSet;
}

bool OAIBuild_artifacts::is_sha256sum_Valid() const{
    return m_sha256sum_isValid;
}

QString OAIBuild_artifacts::getMd5sum() const {
    return m_md5sum;
}
void OAIBuild_artifacts::setMd5sum(const QString &md5sum) {
    m_md5sum = md5sum;
    m_md5sum_isSet = true;
}

bool OAIBuild_artifacts::is_md5sum_Set() const{
    return m_md5sum_isSet;
}

bool OAIBuild_artifacts::is_md5sum_Valid() const{
    return m_md5sum_isValid;
}

bool OAIBuild_artifacts::getOverrideArtifactName() const {
    return m_override_artifact_name;
}
void OAIBuild_artifacts::setOverrideArtifactName(const bool &override_artifact_name) {
    m_override_artifact_name = override_artifact_name;
    m_override_artifact_name_isSet = true;
}

bool OAIBuild_artifacts::is_override_artifact_name_Set() const{
    return m_override_artifact_name_isSet;
}

bool OAIBuild_artifacts::is_override_artifact_name_Valid() const{
    return m_override_artifact_name_isValid;
}

bool OAIBuild_artifacts::getEncryptionDisabled() const {
    return m_encryption_disabled;
}
void OAIBuild_artifacts::setEncryptionDisabled(const bool &encryption_disabled) {
    m_encryption_disabled = encryption_disabled;
    m_encryption_disabled_isSet = true;
}

bool OAIBuild_artifacts::is_encryption_disabled_Set() const{
    return m_encryption_disabled_isSet;
}

bool OAIBuild_artifacts::is_encryption_disabled_Valid() const{
    return m_encryption_disabled_isValid;
}

QString OAIBuild_artifacts::getArtifactIdentifier() const {
    return m_artifact_identifier;
}
void OAIBuild_artifacts::setArtifactIdentifier(const QString &artifact_identifier) {
    m_artifact_identifier = artifact_identifier;
    m_artifact_identifier_isSet = true;
}

bool OAIBuild_artifacts::is_artifact_identifier_Set() const{
    return m_artifact_identifier_isSet;
}

bool OAIBuild_artifacts::is_artifact_identifier_Valid() const{
    return m_artifact_identifier_isValid;
}

OAIBucketOwnerAccess OAIBuild_artifacts::getBucketOwnerAccess() const {
    return m_bucket_owner_access;
}
void OAIBuild_artifacts::setBucketOwnerAccess(const OAIBucketOwnerAccess &bucket_owner_access) {
    m_bucket_owner_access = bucket_owner_access;
    m_bucket_owner_access_isSet = true;
}

bool OAIBuild_artifacts::is_bucket_owner_access_Set() const{
    return m_bucket_owner_access_isSet;
}

bool OAIBuild_artifacts::is_bucket_owner_access_Valid() const{
    return m_bucket_owner_access_isValid;
}

bool OAIBuild_artifacts::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sha256sum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_md5sum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_override_artifact_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_artifact_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_owner_access.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBuild_artifacts::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
