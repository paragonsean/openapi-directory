/**
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListBuildBatchesForProjectInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListBuildBatchesForProjectInput::OAIListBuildBatchesForProjectInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListBuildBatchesForProjectInput::OAIListBuildBatchesForProjectInput() {
    this->initializeModel();
}

OAIListBuildBatchesForProjectInput::~OAIListBuildBatchesForProjectInput() {}

void OAIListBuildBatchesForProjectInput::initializeModel() {

    m_project_name_isSet = false;
    m_project_name_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_sort_order_isSet = false;
    m_sort_order_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListBuildBatchesForProjectInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListBuildBatchesForProjectInput::fromJsonObject(QJsonObject json) {

    m_project_name_isValid = ::OpenAPI::fromJsonValue(m_project_name, json[QString("projectName")]);
    m_project_name_isSet = !json[QString("projectName")].isNull() && m_project_name_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("maxResults")]);
    m_max_results_isSet = !json[QString("maxResults")].isNull() && m_max_results_isValid;

    m_sort_order_isValid = ::OpenAPI::fromJsonValue(m_sort_order, json[QString("sortOrder")]);
    m_sort_order_isSet = !json[QString("sortOrder")].isNull() && m_sort_order_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;
}

QString OAIListBuildBatchesForProjectInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListBuildBatchesForProjectInput::asJsonObject() const {
    QJsonObject obj;
    if (m_project_name_isSet) {
        obj.insert(QString("projectName"), ::OpenAPI::toJsonValue(m_project_name));
    }
    if (m_filter.isSet()) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("maxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_sort_order.isSet()) {
        obj.insert(QString("sortOrder"), ::OpenAPI::toJsonValue(m_sort_order));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QString OAIListBuildBatchesForProjectInput::getProjectName() const {
    return m_project_name;
}
void OAIListBuildBatchesForProjectInput::setProjectName(const QString &project_name) {
    m_project_name = project_name;
    m_project_name_isSet = true;
}

bool OAIListBuildBatchesForProjectInput::is_project_name_Set() const{
    return m_project_name_isSet;
}

bool OAIListBuildBatchesForProjectInput::is_project_name_Valid() const{
    return m_project_name_isValid;
}

OAIListBuildBatchesInput_filter OAIListBuildBatchesForProjectInput::getFilter() const {
    return m_filter;
}
void OAIListBuildBatchesForProjectInput::setFilter(const OAIListBuildBatchesInput_filter &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIListBuildBatchesForProjectInput::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIListBuildBatchesForProjectInput::is_filter_Valid() const{
    return m_filter_isValid;
}

qint32 OAIListBuildBatchesForProjectInput::getMaxResults() const {
    return m_max_results;
}
void OAIListBuildBatchesForProjectInput::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListBuildBatchesForProjectInput::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListBuildBatchesForProjectInput::is_max_results_Valid() const{
    return m_max_results_isValid;
}

OAISortOrderType OAIListBuildBatchesForProjectInput::getSortOrder() const {
    return m_sort_order;
}
void OAIListBuildBatchesForProjectInput::setSortOrder(const OAISortOrderType &sort_order) {
    m_sort_order = sort_order;
    m_sort_order_isSet = true;
}

bool OAIListBuildBatchesForProjectInput::is_sort_order_Set() const{
    return m_sort_order_isSet;
}

bool OAIListBuildBatchesForProjectInput::is_sort_order_Valid() const{
    return m_sort_order_isValid;
}

QString OAIListBuildBatchesForProjectInput::getNextToken() const {
    return m_next_token;
}
void OAIListBuildBatchesForProjectInput::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListBuildBatchesForProjectInput::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListBuildBatchesForProjectInput::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListBuildBatchesForProjectInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_project_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_order.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListBuildBatchesForProjectInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
