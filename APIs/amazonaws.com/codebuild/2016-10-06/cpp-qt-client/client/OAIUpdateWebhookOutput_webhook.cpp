/**
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateWebhookOutput_webhook.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateWebhookOutput_webhook::OAIUpdateWebhookOutput_webhook(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateWebhookOutput_webhook::OAIUpdateWebhookOutput_webhook() {
    this->initializeModel();
}

OAIUpdateWebhookOutput_webhook::~OAIUpdateWebhookOutput_webhook() {}

void OAIUpdateWebhookOutput_webhook::initializeModel() {

    m_url_isSet = false;
    m_url_isValid = false;

    m_payload_url_isSet = false;
    m_payload_url_isValid = false;

    m_secret_isSet = false;
    m_secret_isValid = false;

    m_branch_filter_isSet = false;
    m_branch_filter_isValid = false;

    m_filter_groups_isSet = false;
    m_filter_groups_isValid = false;

    m_build_type_isSet = false;
    m_build_type_isValid = false;

    m_last_modified_secret_isSet = false;
    m_last_modified_secret_isValid = false;
}

void OAIUpdateWebhookOutput_webhook::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateWebhookOutput_webhook::fromJsonObject(QJsonObject json) {

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_payload_url_isValid = ::OpenAPI::fromJsonValue(m_payload_url, json[QString("payloadUrl")]);
    m_payload_url_isSet = !json[QString("payloadUrl")].isNull() && m_payload_url_isValid;

    m_secret_isValid = ::OpenAPI::fromJsonValue(m_secret, json[QString("secret")]);
    m_secret_isSet = !json[QString("secret")].isNull() && m_secret_isValid;

    m_branch_filter_isValid = ::OpenAPI::fromJsonValue(m_branch_filter, json[QString("branchFilter")]);
    m_branch_filter_isSet = !json[QString("branchFilter")].isNull() && m_branch_filter_isValid;

    m_filter_groups_isValid = ::OpenAPI::fromJsonValue(m_filter_groups, json[QString("filterGroups")]);
    m_filter_groups_isSet = !json[QString("filterGroups")].isNull() && m_filter_groups_isValid;

    m_build_type_isValid = ::OpenAPI::fromJsonValue(m_build_type, json[QString("buildType")]);
    m_build_type_isSet = !json[QString("buildType")].isNull() && m_build_type_isValid;

    m_last_modified_secret_isValid = ::OpenAPI::fromJsonValue(m_last_modified_secret, json[QString("lastModifiedSecret")]);
    m_last_modified_secret_isSet = !json[QString("lastModifiedSecret")].isNull() && m_last_modified_secret_isValid;
}

QString OAIUpdateWebhookOutput_webhook::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateWebhookOutput_webhook::asJsonObject() const {
    QJsonObject obj;
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_payload_url_isSet) {
        obj.insert(QString("payloadUrl"), ::OpenAPI::toJsonValue(m_payload_url));
    }
    if (m_secret_isSet) {
        obj.insert(QString("secret"), ::OpenAPI::toJsonValue(m_secret));
    }
    if (m_branch_filter_isSet) {
        obj.insert(QString("branchFilter"), ::OpenAPI::toJsonValue(m_branch_filter));
    }
    if (m_filter_groups.isSet()) {
        obj.insert(QString("filterGroups"), ::OpenAPI::toJsonValue(m_filter_groups));
    }
    if (m_build_type.isSet()) {
        obj.insert(QString("buildType"), ::OpenAPI::toJsonValue(m_build_type));
    }
    if (m_last_modified_secret_isSet) {
        obj.insert(QString("lastModifiedSecret"), ::OpenAPI::toJsonValue(m_last_modified_secret));
    }
    return obj;
}

QString OAIUpdateWebhookOutput_webhook::getUrl() const {
    return m_url;
}
void OAIUpdateWebhookOutput_webhook::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIUpdateWebhookOutput_webhook::is_url_Set() const{
    return m_url_isSet;
}

bool OAIUpdateWebhookOutput_webhook::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIUpdateWebhookOutput_webhook::getPayloadUrl() const {
    return m_payload_url;
}
void OAIUpdateWebhookOutput_webhook::setPayloadUrl(const QString &payload_url) {
    m_payload_url = payload_url;
    m_payload_url_isSet = true;
}

bool OAIUpdateWebhookOutput_webhook::is_payload_url_Set() const{
    return m_payload_url_isSet;
}

bool OAIUpdateWebhookOutput_webhook::is_payload_url_Valid() const{
    return m_payload_url_isValid;
}

QString OAIUpdateWebhookOutput_webhook::getSecret() const {
    return m_secret;
}
void OAIUpdateWebhookOutput_webhook::setSecret(const QString &secret) {
    m_secret = secret;
    m_secret_isSet = true;
}

bool OAIUpdateWebhookOutput_webhook::is_secret_Set() const{
    return m_secret_isSet;
}

bool OAIUpdateWebhookOutput_webhook::is_secret_Valid() const{
    return m_secret_isValid;
}

QString OAIUpdateWebhookOutput_webhook::getBranchFilter() const {
    return m_branch_filter;
}
void OAIUpdateWebhookOutput_webhook::setBranchFilter(const QString &branch_filter) {
    m_branch_filter = branch_filter;
    m_branch_filter_isSet = true;
}

bool OAIUpdateWebhookOutput_webhook::is_branch_filter_Set() const{
    return m_branch_filter_isSet;
}

bool OAIUpdateWebhookOutput_webhook::is_branch_filter_Valid() const{
    return m_branch_filter_isValid;
}

QList OAIUpdateWebhookOutput_webhook::getFilterGroups() const {
    return m_filter_groups;
}
void OAIUpdateWebhookOutput_webhook::setFilterGroups(const QList &filter_groups) {
    m_filter_groups = filter_groups;
    m_filter_groups_isSet = true;
}

bool OAIUpdateWebhookOutput_webhook::is_filter_groups_Set() const{
    return m_filter_groups_isSet;
}

bool OAIUpdateWebhookOutput_webhook::is_filter_groups_Valid() const{
    return m_filter_groups_isValid;
}

OAIWebhookBuildType OAIUpdateWebhookOutput_webhook::getBuildType() const {
    return m_build_type;
}
void OAIUpdateWebhookOutput_webhook::setBuildType(const OAIWebhookBuildType &build_type) {
    m_build_type = build_type;
    m_build_type_isSet = true;
}

bool OAIUpdateWebhookOutput_webhook::is_build_type_Set() const{
    return m_build_type_isSet;
}

bool OAIUpdateWebhookOutput_webhook::is_build_type_Valid() const{
    return m_build_type_isValid;
}

QDateTime OAIUpdateWebhookOutput_webhook::getLastModifiedSecret() const {
    return m_last_modified_secret;
}
void OAIUpdateWebhookOutput_webhook::setLastModifiedSecret(const QDateTime &last_modified_secret) {
    m_last_modified_secret = last_modified_secret;
    m_last_modified_secret_isSet = true;
}

bool OAIUpdateWebhookOutput_webhook::is_last_modified_secret_Set() const{
    return m_last_modified_secret_isSet;
}

bool OAIUpdateWebhookOutput_webhook::is_last_modified_secret_Valid() const{
    return m_last_modified_secret_isValid;
}

bool OAIUpdateWebhookOutput_webhook::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payload_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_secret_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateWebhookOutput_webhook::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
