/**
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITestCase.h
 *
 *  Information about a test case created using a framework such as NUnit or Cucumber. A test case might be a unit test or a configuration test. 
 */

#ifndef OAITestCase_H
#define OAITestCase_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAITestCase : public OAIObject {
public:
    OAITestCase();
    OAITestCase(QString json);
    ~OAITestCase() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getReportArn() const;
    void setReportArn(const QString &report_arn);
    bool is_report_arn_Set() const;
    bool is_report_arn_Valid() const;

    QString getTestRawDataPath() const;
    void setTestRawDataPath(const QString &test_raw_data_path);
    bool is_test_raw_data_path_Set() const;
    bool is_test_raw_data_path_Valid() const;

    QString getPrefix() const;
    void setPrefix(const QString &prefix);
    bool is_prefix_Set() const;
    bool is_prefix_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    qint32 getDurationInNanoSeconds() const;
    void setDurationInNanoSeconds(const qint32 &duration_in_nano_seconds);
    bool is_duration_in_nano_seconds_Set() const;
    bool is_duration_in_nano_seconds_Valid() const;

    QString getMessage() const;
    void setMessage(const QString &message);
    bool is_message_Set() const;
    bool is_message_Valid() const;

    QDateTime getExpired() const;
    void setExpired(const QDateTime &expired);
    bool is_expired_Set() const;
    bool is_expired_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_report_arn;
    bool m_report_arn_isSet;
    bool m_report_arn_isValid;

    QString m_test_raw_data_path;
    bool m_test_raw_data_path_isSet;
    bool m_test_raw_data_path_isValid;

    QString m_prefix;
    bool m_prefix_isSet;
    bool m_prefix_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    qint32 m_duration_in_nano_seconds;
    bool m_duration_in_nano_seconds_isSet;
    bool m_duration_in_nano_seconds_isValid;

    QString m_message;
    bool m_message_isSet;
    bool m_message_isValid;

    QDateTime m_expired;
    bool m_expired_isSet;
    bool m_expired_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITestCase)

#endif // OAITestCase_H
