/*
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ProjectSourceAuth;
import org.openapitools.client.model.ProjectSourceGitSubmodulesConfig;
import org.openapitools.client.model.SourceType;
import org.openapitools.client.model.StartBuildInputBuildStatusConfigOverride;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BuildSource
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:18.687160-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BuildSource {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private SourceType type;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_GIT_CLONE_DEPTH = "gitCloneDepth";
  @SerializedName(SERIALIZED_NAME_GIT_CLONE_DEPTH)
  private Integer gitCloneDepth;

  public static final String SERIALIZED_NAME_GIT_SUBMODULES_CONFIG = "gitSubmodulesConfig";
  @SerializedName(SERIALIZED_NAME_GIT_SUBMODULES_CONFIG)
  private ProjectSourceGitSubmodulesConfig gitSubmodulesConfig;

  public static final String SERIALIZED_NAME_BUILDSPEC = "buildspec";
  @SerializedName(SERIALIZED_NAME_BUILDSPEC)
  private String buildspec;

  public static final String SERIALIZED_NAME_AUTH = "auth";
  @SerializedName(SERIALIZED_NAME_AUTH)
  private ProjectSourceAuth auth;

  public static final String SERIALIZED_NAME_REPORT_BUILD_STATUS = "reportBuildStatus";
  @SerializedName(SERIALIZED_NAME_REPORT_BUILD_STATUS)
  private Boolean reportBuildStatus;

  public static final String SERIALIZED_NAME_BUILD_STATUS_CONFIG = "buildStatusConfig";
  @SerializedName(SERIALIZED_NAME_BUILD_STATUS_CONFIG)
  private StartBuildInputBuildStatusConfigOverride buildStatusConfig;

  public static final String SERIALIZED_NAME_INSECURE_SSL = "insecureSsl";
  @SerializedName(SERIALIZED_NAME_INSECURE_SSL)
  private Boolean insecureSsl;

  public static final String SERIALIZED_NAME_SOURCE_IDENTIFIER = "sourceIdentifier";
  @SerializedName(SERIALIZED_NAME_SOURCE_IDENTIFIER)
  private String sourceIdentifier;

  public BuildSource() {
  }

  public BuildSource type(SourceType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public SourceType getType() {
    return type;
  }

  public void setType(SourceType type) {
    this.type = type;
  }


  public BuildSource location(String location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public BuildSource gitCloneDepth(Integer gitCloneDepth) {
    this.gitCloneDepth = gitCloneDepth;
    return this;
  }

  /**
   * Get gitCloneDepth
   * @return gitCloneDepth
   */
  @javax.annotation.Nullable
  public Integer getGitCloneDepth() {
    return gitCloneDepth;
  }

  public void setGitCloneDepth(Integer gitCloneDepth) {
    this.gitCloneDepth = gitCloneDepth;
  }


  public BuildSource gitSubmodulesConfig(ProjectSourceGitSubmodulesConfig gitSubmodulesConfig) {
    this.gitSubmodulesConfig = gitSubmodulesConfig;
    return this;
  }

  /**
   * Get gitSubmodulesConfig
   * @return gitSubmodulesConfig
   */
  @javax.annotation.Nullable
  public ProjectSourceGitSubmodulesConfig getGitSubmodulesConfig() {
    return gitSubmodulesConfig;
  }

  public void setGitSubmodulesConfig(ProjectSourceGitSubmodulesConfig gitSubmodulesConfig) {
    this.gitSubmodulesConfig = gitSubmodulesConfig;
  }


  public BuildSource buildspec(String buildspec) {
    this.buildspec = buildspec;
    return this;
  }

  /**
   * Get buildspec
   * @return buildspec
   */
  @javax.annotation.Nullable
  public String getBuildspec() {
    return buildspec;
  }

  public void setBuildspec(String buildspec) {
    this.buildspec = buildspec;
  }


  public BuildSource auth(ProjectSourceAuth auth) {
    this.auth = auth;
    return this;
  }

  /**
   * Get auth
   * @return auth
   */
  @javax.annotation.Nullable
  public ProjectSourceAuth getAuth() {
    return auth;
  }

  public void setAuth(ProjectSourceAuth auth) {
    this.auth = auth;
  }


  public BuildSource reportBuildStatus(Boolean reportBuildStatus) {
    this.reportBuildStatus = reportBuildStatus;
    return this;
  }

  /**
   * Get reportBuildStatus
   * @return reportBuildStatus
   */
  @javax.annotation.Nullable
  public Boolean getReportBuildStatus() {
    return reportBuildStatus;
  }

  public void setReportBuildStatus(Boolean reportBuildStatus) {
    this.reportBuildStatus = reportBuildStatus;
  }


  public BuildSource buildStatusConfig(StartBuildInputBuildStatusConfigOverride buildStatusConfig) {
    this.buildStatusConfig = buildStatusConfig;
    return this;
  }

  /**
   * Get buildStatusConfig
   * @return buildStatusConfig
   */
  @javax.annotation.Nullable
  public StartBuildInputBuildStatusConfigOverride getBuildStatusConfig() {
    return buildStatusConfig;
  }

  public void setBuildStatusConfig(StartBuildInputBuildStatusConfigOverride buildStatusConfig) {
    this.buildStatusConfig = buildStatusConfig;
  }


  public BuildSource insecureSsl(Boolean insecureSsl) {
    this.insecureSsl = insecureSsl;
    return this;
  }

  /**
   * Get insecureSsl
   * @return insecureSsl
   */
  @javax.annotation.Nullable
  public Boolean getInsecureSsl() {
    return insecureSsl;
  }

  public void setInsecureSsl(Boolean insecureSsl) {
    this.insecureSsl = insecureSsl;
  }


  public BuildSource sourceIdentifier(String sourceIdentifier) {
    this.sourceIdentifier = sourceIdentifier;
    return this;
  }

  /**
   * Get sourceIdentifier
   * @return sourceIdentifier
   */
  @javax.annotation.Nullable
  public String getSourceIdentifier() {
    return sourceIdentifier;
  }

  public void setSourceIdentifier(String sourceIdentifier) {
    this.sourceIdentifier = sourceIdentifier;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BuildSource buildSource = (BuildSource) o;
    return Objects.equals(this.type, buildSource.type) &&
        Objects.equals(this.location, buildSource.location) &&
        Objects.equals(this.gitCloneDepth, buildSource.gitCloneDepth) &&
        Objects.equals(this.gitSubmodulesConfig, buildSource.gitSubmodulesConfig) &&
        Objects.equals(this.buildspec, buildSource.buildspec) &&
        Objects.equals(this.auth, buildSource.auth) &&
        Objects.equals(this.reportBuildStatus, buildSource.reportBuildStatus) &&
        Objects.equals(this.buildStatusConfig, buildSource.buildStatusConfig) &&
        Objects.equals(this.insecureSsl, buildSource.insecureSsl) &&
        Objects.equals(this.sourceIdentifier, buildSource.sourceIdentifier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, location, gitCloneDepth, gitSubmodulesConfig, buildspec, auth, reportBuildStatus, buildStatusConfig, insecureSsl, sourceIdentifier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BuildSource {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    gitCloneDepth: ").append(toIndentedString(gitCloneDepth)).append("\n");
    sb.append("    gitSubmodulesConfig: ").append(toIndentedString(gitSubmodulesConfig)).append("\n");
    sb.append("    buildspec: ").append(toIndentedString(buildspec)).append("\n");
    sb.append("    auth: ").append(toIndentedString(auth)).append("\n");
    sb.append("    reportBuildStatus: ").append(toIndentedString(reportBuildStatus)).append("\n");
    sb.append("    buildStatusConfig: ").append(toIndentedString(buildStatusConfig)).append("\n");
    sb.append("    insecureSsl: ").append(toIndentedString(insecureSsl)).append("\n");
    sb.append("    sourceIdentifier: ").append(toIndentedString(sourceIdentifier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("location");
    openapiFields.add("gitCloneDepth");
    openapiFields.add("gitSubmodulesConfig");
    openapiFields.add("buildspec");
    openapiFields.add("auth");
    openapiFields.add("reportBuildStatus");
    openapiFields.add("buildStatusConfig");
    openapiFields.add("insecureSsl");
    openapiFields.add("sourceIdentifier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BuildSource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BuildSource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BuildSource is not found in the empty JSON string", BuildSource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BuildSource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BuildSource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BuildSource.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `type`
      SourceType.validateJsonElement(jsonObj.get("type"));
      // validate the optional field `location`
      if (jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("location"));
      }
      // validate the optional field `gitCloneDepth`
      if (jsonObj.get("gitCloneDepth") != null && !jsonObj.get("gitCloneDepth").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("gitCloneDepth"));
      }
      // validate the optional field `gitSubmodulesConfig`
      if (jsonObj.get("gitSubmodulesConfig") != null && !jsonObj.get("gitSubmodulesConfig").isJsonNull()) {
        ProjectSourceGitSubmodulesConfig.validateJsonElement(jsonObj.get("gitSubmodulesConfig"));
      }
      // validate the optional field `buildspec`
      if (jsonObj.get("buildspec") != null && !jsonObj.get("buildspec").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("buildspec"));
      }
      // validate the optional field `auth`
      if (jsonObj.get("auth") != null && !jsonObj.get("auth").isJsonNull()) {
        ProjectSourceAuth.validateJsonElement(jsonObj.get("auth"));
      }
      // validate the optional field `reportBuildStatus`
      if (jsonObj.get("reportBuildStatus") != null && !jsonObj.get("reportBuildStatus").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("reportBuildStatus"));
      }
      // validate the optional field `buildStatusConfig`
      if (jsonObj.get("buildStatusConfig") != null && !jsonObj.get("buildStatusConfig").isJsonNull()) {
        StartBuildInputBuildStatusConfigOverride.validateJsonElement(jsonObj.get("buildStatusConfig"));
      }
      // validate the optional field `insecureSsl`
      if (jsonObj.get("insecureSsl") != null && !jsonObj.get("insecureSsl").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("insecureSsl"));
      }
      // validate the optional field `sourceIdentifier`
      if (jsonObj.get("sourceIdentifier") != null && !jsonObj.get("sourceIdentifier").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("sourceIdentifier"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BuildSource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BuildSource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BuildSource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BuildSource.class));

       return (TypeAdapter<T>) new TypeAdapter<BuildSource>() {
           @Override
           public void write(JsonWriter out, BuildSource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BuildSource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BuildSource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BuildSource
   * @throws IOException if the JSON string is invalid with respect to BuildSource
   */
  public static BuildSource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BuildSource.class);
  }

  /**
   * Convert an instance of BuildSource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

