/*
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 *  Information about a test case created using a framework such as NUnit or Cucumber. A test case might be a unit test or a configuration test. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:18.687160-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TestCase {
  public static final String SERIALIZED_NAME_REPORT_ARN = "reportArn";
  @SerializedName(SERIALIZED_NAME_REPORT_ARN)
  private String reportArn;

  public static final String SERIALIZED_NAME_TEST_RAW_DATA_PATH = "testRawDataPath";
  @SerializedName(SERIALIZED_NAME_TEST_RAW_DATA_PATH)
  private String testRawDataPath;

  public static final String SERIALIZED_NAME_PREFIX = "prefix";
  @SerializedName(SERIALIZED_NAME_PREFIX)
  private String prefix;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_DURATION_IN_NANO_SECONDS = "durationInNanoSeconds";
  @SerializedName(SERIALIZED_NAME_DURATION_IN_NANO_SECONDS)
  private Integer durationInNanoSeconds;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_EXPIRED = "expired";
  @SerializedName(SERIALIZED_NAME_EXPIRED)
  private OffsetDateTime expired;

  public TestCase() {
  }

  public TestCase reportArn(String reportArn) {
    this.reportArn = reportArn;
    return this;
  }

  /**
   * Get reportArn
   * @return reportArn
   */
  @javax.annotation.Nullable
  public String getReportArn() {
    return reportArn;
  }

  public void setReportArn(String reportArn) {
    this.reportArn = reportArn;
  }


  public TestCase testRawDataPath(String testRawDataPath) {
    this.testRawDataPath = testRawDataPath;
    return this;
  }

  /**
   * Get testRawDataPath
   * @return testRawDataPath
   */
  @javax.annotation.Nullable
  public String getTestRawDataPath() {
    return testRawDataPath;
  }

  public void setTestRawDataPath(String testRawDataPath) {
    this.testRawDataPath = testRawDataPath;
  }


  public TestCase prefix(String prefix) {
    this.prefix = prefix;
    return this;
  }

  /**
   * Get prefix
   * @return prefix
   */
  @javax.annotation.Nullable
  public String getPrefix() {
    return prefix;
  }

  public void setPrefix(String prefix) {
    this.prefix = prefix;
  }


  public TestCase name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public TestCase status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public TestCase durationInNanoSeconds(Integer durationInNanoSeconds) {
    this.durationInNanoSeconds = durationInNanoSeconds;
    return this;
  }

  /**
   * Get durationInNanoSeconds
   * @return durationInNanoSeconds
   */
  @javax.annotation.Nullable
  public Integer getDurationInNanoSeconds() {
    return durationInNanoSeconds;
  }

  public void setDurationInNanoSeconds(Integer durationInNanoSeconds) {
    this.durationInNanoSeconds = durationInNanoSeconds;
  }


  public TestCase message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public TestCase expired(OffsetDateTime expired) {
    this.expired = expired;
    return this;
  }

  /**
   * Get expired
   * @return expired
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpired() {
    return expired;
  }

  public void setExpired(OffsetDateTime expired) {
    this.expired = expired;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestCase testCase = (TestCase) o;
    return Objects.equals(this.reportArn, testCase.reportArn) &&
        Objects.equals(this.testRawDataPath, testCase.testRawDataPath) &&
        Objects.equals(this.prefix, testCase.prefix) &&
        Objects.equals(this.name, testCase.name) &&
        Objects.equals(this.status, testCase.status) &&
        Objects.equals(this.durationInNanoSeconds, testCase.durationInNanoSeconds) &&
        Objects.equals(this.message, testCase.message) &&
        Objects.equals(this.expired, testCase.expired);
  }

  @Override
  public int hashCode() {
    return Objects.hash(reportArn, testRawDataPath, prefix, name, status, durationInNanoSeconds, message, expired);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestCase {\n");
    sb.append("    reportArn: ").append(toIndentedString(reportArn)).append("\n");
    sb.append("    testRawDataPath: ").append(toIndentedString(testRawDataPath)).append("\n");
    sb.append("    prefix: ").append(toIndentedString(prefix)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    durationInNanoSeconds: ").append(toIndentedString(durationInNanoSeconds)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    expired: ").append(toIndentedString(expired)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("reportArn");
    openapiFields.add("testRawDataPath");
    openapiFields.add("prefix");
    openapiFields.add("name");
    openapiFields.add("status");
    openapiFields.add("durationInNanoSeconds");
    openapiFields.add("message");
    openapiFields.add("expired");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TestCase
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TestCase.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TestCase is not found in the empty JSON string", TestCase.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TestCase.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TestCase` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `reportArn`
      if (jsonObj.get("reportArn") != null && !jsonObj.get("reportArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("reportArn"));
      }
      // validate the optional field `testRawDataPath`
      if (jsonObj.get("testRawDataPath") != null && !jsonObj.get("testRawDataPath").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("testRawDataPath"));
      }
      // validate the optional field `prefix`
      if (jsonObj.get("prefix") != null && !jsonObj.get("prefix").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("prefix"));
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("name"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `durationInNanoSeconds`
      if (jsonObj.get("durationInNanoSeconds") != null && !jsonObj.get("durationInNanoSeconds").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("durationInNanoSeconds"));
      }
      // validate the optional field `message`
      if (jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("message"));
      }
      // validate the optional field `expired`
      if (jsonObj.get("expired") != null && !jsonObj.get("expired").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("expired"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TestCase.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TestCase' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TestCase> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TestCase.class));

       return (TypeAdapter<T>) new TypeAdapter<TestCase>() {
           @Override
           public void write(JsonWriter out, TestCase value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TestCase read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TestCase given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TestCase
   * @throws IOException if the JSON string is invalid with respect to TestCase
   */
  public static TestCase fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TestCase.class);
  }

  /**
   * Convert an instance of TestCase to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

