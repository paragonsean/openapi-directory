/*
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.WebhookBuildType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateWebhookInput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:18.687160-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateWebhookInput {
  public static final String SERIALIZED_NAME_PROJECT_NAME = "projectName";
  @SerializedName(SERIALIZED_NAME_PROJECT_NAME)
  private String projectName;

  public static final String SERIALIZED_NAME_BRANCH_FILTER = "branchFilter";
  @SerializedName(SERIALIZED_NAME_BRANCH_FILTER)
  private String branchFilter;

  public static final String SERIALIZED_NAME_ROTATE_SECRET = "rotateSecret";
  @SerializedName(SERIALIZED_NAME_ROTATE_SECRET)
  private Boolean rotateSecret;

  public static final String SERIALIZED_NAME_FILTER_GROUPS = "filterGroups";
  @SerializedName(SERIALIZED_NAME_FILTER_GROUPS)
  private List filterGroups;

  public static final String SERIALIZED_NAME_BUILD_TYPE = "buildType";
  @SerializedName(SERIALIZED_NAME_BUILD_TYPE)
  private WebhookBuildType buildType;

  public UpdateWebhookInput() {
  }

  public UpdateWebhookInput projectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  /**
   * Get projectName
   * @return projectName
   */
  @javax.annotation.Nonnull
  public String getProjectName() {
    return projectName;
  }

  public void setProjectName(String projectName) {
    this.projectName = projectName;
  }


  public UpdateWebhookInput branchFilter(String branchFilter) {
    this.branchFilter = branchFilter;
    return this;
  }

  /**
   * Get branchFilter
   * @return branchFilter
   */
  @javax.annotation.Nullable
  public String getBranchFilter() {
    return branchFilter;
  }

  public void setBranchFilter(String branchFilter) {
    this.branchFilter = branchFilter;
  }


  public UpdateWebhookInput rotateSecret(Boolean rotateSecret) {
    this.rotateSecret = rotateSecret;
    return this;
  }

  /**
   * Get rotateSecret
   * @return rotateSecret
   */
  @javax.annotation.Nullable
  public Boolean getRotateSecret() {
    return rotateSecret;
  }

  public void setRotateSecret(Boolean rotateSecret) {
    this.rotateSecret = rotateSecret;
  }


  public UpdateWebhookInput filterGroups(List filterGroups) {
    this.filterGroups = filterGroups;
    return this;
  }

  /**
   * Get filterGroups
   * @return filterGroups
   */
  @javax.annotation.Nullable
  public List getFilterGroups() {
    return filterGroups;
  }

  public void setFilterGroups(List filterGroups) {
    this.filterGroups = filterGroups;
  }


  public UpdateWebhookInput buildType(WebhookBuildType buildType) {
    this.buildType = buildType;
    return this;
  }

  /**
   * Get buildType
   * @return buildType
   */
  @javax.annotation.Nullable
  public WebhookBuildType getBuildType() {
    return buildType;
  }

  public void setBuildType(WebhookBuildType buildType) {
    this.buildType = buildType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateWebhookInput updateWebhookInput = (UpdateWebhookInput) o;
    return Objects.equals(this.projectName, updateWebhookInput.projectName) &&
        Objects.equals(this.branchFilter, updateWebhookInput.branchFilter) &&
        Objects.equals(this.rotateSecret, updateWebhookInput.rotateSecret) &&
        Objects.equals(this.filterGroups, updateWebhookInput.filterGroups) &&
        Objects.equals(this.buildType, updateWebhookInput.buildType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(projectName, branchFilter, rotateSecret, filterGroups, buildType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateWebhookInput {\n");
    sb.append("    projectName: ").append(toIndentedString(projectName)).append("\n");
    sb.append("    branchFilter: ").append(toIndentedString(branchFilter)).append("\n");
    sb.append("    rotateSecret: ").append(toIndentedString(rotateSecret)).append("\n");
    sb.append("    filterGroups: ").append(toIndentedString(filterGroups)).append("\n");
    sb.append("    buildType: ").append(toIndentedString(buildType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("projectName");
    openapiFields.add("branchFilter");
    openapiFields.add("rotateSecret");
    openapiFields.add("filterGroups");
    openapiFields.add("buildType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("projectName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateWebhookInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateWebhookInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateWebhookInput is not found in the empty JSON string", UpdateWebhookInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateWebhookInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateWebhookInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateWebhookInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `projectName`
      String.validateJsonElement(jsonObj.get("projectName"));
      // validate the optional field `branchFilter`
      if (jsonObj.get("branchFilter") != null && !jsonObj.get("branchFilter").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("branchFilter"));
      }
      // validate the optional field `rotateSecret`
      if (jsonObj.get("rotateSecret") != null && !jsonObj.get("rotateSecret").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("rotateSecret"));
      }
      // validate the optional field `filterGroups`
      if (jsonObj.get("filterGroups") != null && !jsonObj.get("filterGroups").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("filterGroups"));
      }
      // validate the optional field `buildType`
      if (jsonObj.get("buildType") != null && !jsonObj.get("buildType").isJsonNull()) {
        WebhookBuildType.validateJsonElement(jsonObj.get("buildType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateWebhookInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateWebhookInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateWebhookInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateWebhookInput.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateWebhookInput>() {
           @Override
           public void write(JsonWriter out, UpdateWebhookInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateWebhookInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateWebhookInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateWebhookInput
   * @throws IOException if the JSON string is invalid with respect to UpdateWebhookInput
   */
  public static UpdateWebhookInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateWebhookInput.class);
  }

  /**
   * Convert an instance of UpdateWebhookInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

