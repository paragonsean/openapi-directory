/*
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains information about the debug session for a build. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/codebuild/latest/userguide/session-manager.html\&quot;&gt;Viewing a running build in Session Manager&lt;/a&gt;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:18.687160-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DebugSession {
  public static final String SERIALIZED_NAME_SESSION_ENABLED = "sessionEnabled";
  @SerializedName(SERIALIZED_NAME_SESSION_ENABLED)
  private Boolean sessionEnabled;

  public static final String SERIALIZED_NAME_SESSION_TARGET = "sessionTarget";
  @SerializedName(SERIALIZED_NAME_SESSION_TARGET)
  private String sessionTarget;

  public DebugSession() {
  }

  public DebugSession sessionEnabled(Boolean sessionEnabled) {
    this.sessionEnabled = sessionEnabled;
    return this;
  }

  /**
   * Get sessionEnabled
   * @return sessionEnabled
   */
  @javax.annotation.Nullable
  public Boolean getSessionEnabled() {
    return sessionEnabled;
  }

  public void setSessionEnabled(Boolean sessionEnabled) {
    this.sessionEnabled = sessionEnabled;
  }


  public DebugSession sessionTarget(String sessionTarget) {
    this.sessionTarget = sessionTarget;
    return this;
  }

  /**
   * Get sessionTarget
   * @return sessionTarget
   */
  @javax.annotation.Nullable
  public String getSessionTarget() {
    return sessionTarget;
  }

  public void setSessionTarget(String sessionTarget) {
    this.sessionTarget = sessionTarget;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DebugSession debugSession = (DebugSession) o;
    return Objects.equals(this.sessionEnabled, debugSession.sessionEnabled) &&
        Objects.equals(this.sessionTarget, debugSession.sessionTarget);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sessionEnabled, sessionTarget);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DebugSession {\n");
    sb.append("    sessionEnabled: ").append(toIndentedString(sessionEnabled)).append("\n");
    sb.append("    sessionTarget: ").append(toIndentedString(sessionTarget)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("sessionEnabled");
    openapiFields.add("sessionTarget");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DebugSession
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DebugSession.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DebugSession is not found in the empty JSON string", DebugSession.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DebugSession.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DebugSession` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `sessionEnabled`
      if (jsonObj.get("sessionEnabled") != null && !jsonObj.get("sessionEnabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("sessionEnabled"));
      }
      // validate the optional field `sessionTarget`
      if (jsonObj.get("sessionTarget") != null && !jsonObj.get("sessionTarget").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("sessionTarget"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DebugSession.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DebugSession' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DebugSession> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DebugSession.class));

       return (TypeAdapter<T>) new TypeAdapter<DebugSession>() {
           @Override
           public void write(JsonWriter out, DebugSession value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DebugSession read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DebugSession given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DebugSession
   * @throws IOException if the JSON string is invalid with respect to DebugSession
   */
  public static DebugSession fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DebugSession.class);
  }

  /**
   * Convert an instance of DebugSession to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

