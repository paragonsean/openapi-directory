/*
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ComputeType;
import org.openapitools.client.model.EnvironmentType;
import org.openapitools.client.model.ImagePullCredentialsType;
import org.openapitools.client.model.SourceType;
import org.openapitools.client.model.StartBuildBatchInputArtifactsOverride;
import org.openapitools.client.model.StartBuildBatchInputBuildBatchConfigOverride;
import org.openapitools.client.model.StartBuildBatchInputCacheOverride;
import org.openapitools.client.model.StartBuildBatchInputGitSubmodulesConfigOverride;
import org.openapitools.client.model.StartBuildBatchInputLogsConfigOverride;
import org.openapitools.client.model.StartBuildBatchInputRegistryCredentialOverride;
import org.openapitools.client.model.StartBuildBatchInputSourceAuthOverride;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StartBuildBatchInput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:18.687160-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StartBuildBatchInput {
  public static final String SERIALIZED_NAME_PROJECT_NAME = "projectName";
  @SerializedName(SERIALIZED_NAME_PROJECT_NAME)
  private String projectName;

  public static final String SERIALIZED_NAME_SECONDARY_SOURCES_OVERRIDE = "secondarySourcesOverride";
  @SerializedName(SERIALIZED_NAME_SECONDARY_SOURCES_OVERRIDE)
  private List secondarySourcesOverride;

  public static final String SERIALIZED_NAME_SECONDARY_SOURCES_VERSION_OVERRIDE = "secondarySourcesVersionOverride";
  @SerializedName(SERIALIZED_NAME_SECONDARY_SOURCES_VERSION_OVERRIDE)
  private List secondarySourcesVersionOverride;

  public static final String SERIALIZED_NAME_SOURCE_VERSION = "sourceVersion";
  @SerializedName(SERIALIZED_NAME_SOURCE_VERSION)
  private String sourceVersion;

  public static final String SERIALIZED_NAME_ARTIFACTS_OVERRIDE = "artifactsOverride";
  @SerializedName(SERIALIZED_NAME_ARTIFACTS_OVERRIDE)
  private StartBuildBatchInputArtifactsOverride artifactsOverride;

  public static final String SERIALIZED_NAME_SECONDARY_ARTIFACTS_OVERRIDE = "secondaryArtifactsOverride";
  @SerializedName(SERIALIZED_NAME_SECONDARY_ARTIFACTS_OVERRIDE)
  private List secondaryArtifactsOverride;

  public static final String SERIALIZED_NAME_ENVIRONMENT_VARIABLES_OVERRIDE = "environmentVariablesOverride";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_VARIABLES_OVERRIDE)
  private List environmentVariablesOverride;

  public static final String SERIALIZED_NAME_SOURCE_TYPE_OVERRIDE = "sourceTypeOverride";
  @SerializedName(SERIALIZED_NAME_SOURCE_TYPE_OVERRIDE)
  private SourceType sourceTypeOverride;

  public static final String SERIALIZED_NAME_SOURCE_LOCATION_OVERRIDE = "sourceLocationOverride";
  @SerializedName(SERIALIZED_NAME_SOURCE_LOCATION_OVERRIDE)
  private String sourceLocationOverride;

  public static final String SERIALIZED_NAME_SOURCE_AUTH_OVERRIDE = "sourceAuthOverride";
  @SerializedName(SERIALIZED_NAME_SOURCE_AUTH_OVERRIDE)
  private StartBuildBatchInputSourceAuthOverride sourceAuthOverride;

  public static final String SERIALIZED_NAME_GIT_CLONE_DEPTH_OVERRIDE = "gitCloneDepthOverride";
  @SerializedName(SERIALIZED_NAME_GIT_CLONE_DEPTH_OVERRIDE)
  private Integer gitCloneDepthOverride;

  public static final String SERIALIZED_NAME_GIT_SUBMODULES_CONFIG_OVERRIDE = "gitSubmodulesConfigOverride";
  @SerializedName(SERIALIZED_NAME_GIT_SUBMODULES_CONFIG_OVERRIDE)
  private StartBuildBatchInputGitSubmodulesConfigOverride gitSubmodulesConfigOverride;

  public static final String SERIALIZED_NAME_BUILDSPEC_OVERRIDE = "buildspecOverride";
  @SerializedName(SERIALIZED_NAME_BUILDSPEC_OVERRIDE)
  private String buildspecOverride;

  public static final String SERIALIZED_NAME_INSECURE_SSL_OVERRIDE = "insecureSslOverride";
  @SerializedName(SERIALIZED_NAME_INSECURE_SSL_OVERRIDE)
  private Boolean insecureSslOverride;

  public static final String SERIALIZED_NAME_REPORT_BUILD_BATCH_STATUS_OVERRIDE = "reportBuildBatchStatusOverride";
  @SerializedName(SERIALIZED_NAME_REPORT_BUILD_BATCH_STATUS_OVERRIDE)
  private Boolean reportBuildBatchStatusOverride;

  public static final String SERIALIZED_NAME_ENVIRONMENT_TYPE_OVERRIDE = "environmentTypeOverride";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_TYPE_OVERRIDE)
  private EnvironmentType environmentTypeOverride;

  public static final String SERIALIZED_NAME_IMAGE_OVERRIDE = "imageOverride";
  @SerializedName(SERIALIZED_NAME_IMAGE_OVERRIDE)
  private String imageOverride;

  public static final String SERIALIZED_NAME_COMPUTE_TYPE_OVERRIDE = "computeTypeOverride";
  @SerializedName(SERIALIZED_NAME_COMPUTE_TYPE_OVERRIDE)
  private ComputeType computeTypeOverride;

  public static final String SERIALIZED_NAME_CERTIFICATE_OVERRIDE = "certificateOverride";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_OVERRIDE)
  private String certificateOverride;

  public static final String SERIALIZED_NAME_CACHE_OVERRIDE = "cacheOverride";
  @SerializedName(SERIALIZED_NAME_CACHE_OVERRIDE)
  private StartBuildBatchInputCacheOverride cacheOverride;

  public static final String SERIALIZED_NAME_SERVICE_ROLE_OVERRIDE = "serviceRoleOverride";
  @SerializedName(SERIALIZED_NAME_SERVICE_ROLE_OVERRIDE)
  private String serviceRoleOverride;

  public static final String SERIALIZED_NAME_PRIVILEGED_MODE_OVERRIDE = "privilegedModeOverride";
  @SerializedName(SERIALIZED_NAME_PRIVILEGED_MODE_OVERRIDE)
  private Boolean privilegedModeOverride;

  public static final String SERIALIZED_NAME_BUILD_TIMEOUT_IN_MINUTES_OVERRIDE = "buildTimeoutInMinutesOverride";
  @SerializedName(SERIALIZED_NAME_BUILD_TIMEOUT_IN_MINUTES_OVERRIDE)
  private Integer buildTimeoutInMinutesOverride;

  public static final String SERIALIZED_NAME_QUEUED_TIMEOUT_IN_MINUTES_OVERRIDE = "queuedTimeoutInMinutesOverride";
  @SerializedName(SERIALIZED_NAME_QUEUED_TIMEOUT_IN_MINUTES_OVERRIDE)
  private Integer queuedTimeoutInMinutesOverride;

  public static final String SERIALIZED_NAME_ENCRYPTION_KEY_OVERRIDE = "encryptionKeyOverride";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_KEY_OVERRIDE)
  private String encryptionKeyOverride;

  public static final String SERIALIZED_NAME_LOGS_CONFIG_OVERRIDE = "logsConfigOverride";
  @SerializedName(SERIALIZED_NAME_LOGS_CONFIG_OVERRIDE)
  private StartBuildBatchInputLogsConfigOverride logsConfigOverride;

  public static final String SERIALIZED_NAME_REGISTRY_CREDENTIAL_OVERRIDE = "registryCredentialOverride";
  @SerializedName(SERIALIZED_NAME_REGISTRY_CREDENTIAL_OVERRIDE)
  private StartBuildBatchInputRegistryCredentialOverride registryCredentialOverride;

  public static final String SERIALIZED_NAME_IMAGE_PULL_CREDENTIALS_TYPE_OVERRIDE = "imagePullCredentialsTypeOverride";
  @SerializedName(SERIALIZED_NAME_IMAGE_PULL_CREDENTIALS_TYPE_OVERRIDE)
  private ImagePullCredentialsType imagePullCredentialsTypeOverride;

  public static final String SERIALIZED_NAME_BUILD_BATCH_CONFIG_OVERRIDE = "buildBatchConfigOverride";
  @SerializedName(SERIALIZED_NAME_BUILD_BATCH_CONFIG_OVERRIDE)
  private StartBuildBatchInputBuildBatchConfigOverride buildBatchConfigOverride;

  public static final String SERIALIZED_NAME_DEBUG_SESSION_ENABLED = "debugSessionEnabled";
  @SerializedName(SERIALIZED_NAME_DEBUG_SESSION_ENABLED)
  private Boolean debugSessionEnabled;

  public StartBuildBatchInput() {
  }

  public StartBuildBatchInput projectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  /**
   * Get projectName
   * @return projectName
   */
  @javax.annotation.Nonnull
  public String getProjectName() {
    return projectName;
  }

  public void setProjectName(String projectName) {
    this.projectName = projectName;
  }


  public StartBuildBatchInput secondarySourcesOverride(List secondarySourcesOverride) {
    this.secondarySourcesOverride = secondarySourcesOverride;
    return this;
  }

  /**
   * Get secondarySourcesOverride
   * @return secondarySourcesOverride
   */
  @javax.annotation.Nullable
  public List getSecondarySourcesOverride() {
    return secondarySourcesOverride;
  }

  public void setSecondarySourcesOverride(List secondarySourcesOverride) {
    this.secondarySourcesOverride = secondarySourcesOverride;
  }


  public StartBuildBatchInput secondarySourcesVersionOverride(List secondarySourcesVersionOverride) {
    this.secondarySourcesVersionOverride = secondarySourcesVersionOverride;
    return this;
  }

  /**
   * Get secondarySourcesVersionOverride
   * @return secondarySourcesVersionOverride
   */
  @javax.annotation.Nullable
  public List getSecondarySourcesVersionOverride() {
    return secondarySourcesVersionOverride;
  }

  public void setSecondarySourcesVersionOverride(List secondarySourcesVersionOverride) {
    this.secondarySourcesVersionOverride = secondarySourcesVersionOverride;
  }


  public StartBuildBatchInput sourceVersion(String sourceVersion) {
    this.sourceVersion = sourceVersion;
    return this;
  }

  /**
   * Get sourceVersion
   * @return sourceVersion
   */
  @javax.annotation.Nullable
  public String getSourceVersion() {
    return sourceVersion;
  }

  public void setSourceVersion(String sourceVersion) {
    this.sourceVersion = sourceVersion;
  }


  public StartBuildBatchInput artifactsOverride(StartBuildBatchInputArtifactsOverride artifactsOverride) {
    this.artifactsOverride = artifactsOverride;
    return this;
  }

  /**
   * Get artifactsOverride
   * @return artifactsOverride
   */
  @javax.annotation.Nullable
  public StartBuildBatchInputArtifactsOverride getArtifactsOverride() {
    return artifactsOverride;
  }

  public void setArtifactsOverride(StartBuildBatchInputArtifactsOverride artifactsOverride) {
    this.artifactsOverride = artifactsOverride;
  }


  public StartBuildBatchInput secondaryArtifactsOverride(List secondaryArtifactsOverride) {
    this.secondaryArtifactsOverride = secondaryArtifactsOverride;
    return this;
  }

  /**
   * Get secondaryArtifactsOverride
   * @return secondaryArtifactsOverride
   */
  @javax.annotation.Nullable
  public List getSecondaryArtifactsOverride() {
    return secondaryArtifactsOverride;
  }

  public void setSecondaryArtifactsOverride(List secondaryArtifactsOverride) {
    this.secondaryArtifactsOverride = secondaryArtifactsOverride;
  }


  public StartBuildBatchInput environmentVariablesOverride(List environmentVariablesOverride) {
    this.environmentVariablesOverride = environmentVariablesOverride;
    return this;
  }

  /**
   * Get environmentVariablesOverride
   * @return environmentVariablesOverride
   */
  @javax.annotation.Nullable
  public List getEnvironmentVariablesOverride() {
    return environmentVariablesOverride;
  }

  public void setEnvironmentVariablesOverride(List environmentVariablesOverride) {
    this.environmentVariablesOverride = environmentVariablesOverride;
  }


  public StartBuildBatchInput sourceTypeOverride(SourceType sourceTypeOverride) {
    this.sourceTypeOverride = sourceTypeOverride;
    return this;
  }

  /**
   * Get sourceTypeOverride
   * @return sourceTypeOverride
   */
  @javax.annotation.Nullable
  public SourceType getSourceTypeOverride() {
    return sourceTypeOverride;
  }

  public void setSourceTypeOverride(SourceType sourceTypeOverride) {
    this.sourceTypeOverride = sourceTypeOverride;
  }


  public StartBuildBatchInput sourceLocationOverride(String sourceLocationOverride) {
    this.sourceLocationOverride = sourceLocationOverride;
    return this;
  }

  /**
   * Get sourceLocationOverride
   * @return sourceLocationOverride
   */
  @javax.annotation.Nullable
  public String getSourceLocationOverride() {
    return sourceLocationOverride;
  }

  public void setSourceLocationOverride(String sourceLocationOverride) {
    this.sourceLocationOverride = sourceLocationOverride;
  }


  public StartBuildBatchInput sourceAuthOverride(StartBuildBatchInputSourceAuthOverride sourceAuthOverride) {
    this.sourceAuthOverride = sourceAuthOverride;
    return this;
  }

  /**
   * Get sourceAuthOverride
   * @return sourceAuthOverride
   */
  @javax.annotation.Nullable
  public StartBuildBatchInputSourceAuthOverride getSourceAuthOverride() {
    return sourceAuthOverride;
  }

  public void setSourceAuthOverride(StartBuildBatchInputSourceAuthOverride sourceAuthOverride) {
    this.sourceAuthOverride = sourceAuthOverride;
  }


  public StartBuildBatchInput gitCloneDepthOverride(Integer gitCloneDepthOverride) {
    this.gitCloneDepthOverride = gitCloneDepthOverride;
    return this;
  }

  /**
   * Get gitCloneDepthOverride
   * @return gitCloneDepthOverride
   */
  @javax.annotation.Nullable
  public Integer getGitCloneDepthOverride() {
    return gitCloneDepthOverride;
  }

  public void setGitCloneDepthOverride(Integer gitCloneDepthOverride) {
    this.gitCloneDepthOverride = gitCloneDepthOverride;
  }


  public StartBuildBatchInput gitSubmodulesConfigOverride(StartBuildBatchInputGitSubmodulesConfigOverride gitSubmodulesConfigOverride) {
    this.gitSubmodulesConfigOverride = gitSubmodulesConfigOverride;
    return this;
  }

  /**
   * Get gitSubmodulesConfigOverride
   * @return gitSubmodulesConfigOverride
   */
  @javax.annotation.Nullable
  public StartBuildBatchInputGitSubmodulesConfigOverride getGitSubmodulesConfigOverride() {
    return gitSubmodulesConfigOverride;
  }

  public void setGitSubmodulesConfigOverride(StartBuildBatchInputGitSubmodulesConfigOverride gitSubmodulesConfigOverride) {
    this.gitSubmodulesConfigOverride = gitSubmodulesConfigOverride;
  }


  public StartBuildBatchInput buildspecOverride(String buildspecOverride) {
    this.buildspecOverride = buildspecOverride;
    return this;
  }

  /**
   * Get buildspecOverride
   * @return buildspecOverride
   */
  @javax.annotation.Nullable
  public String getBuildspecOverride() {
    return buildspecOverride;
  }

  public void setBuildspecOverride(String buildspecOverride) {
    this.buildspecOverride = buildspecOverride;
  }


  public StartBuildBatchInput insecureSslOverride(Boolean insecureSslOverride) {
    this.insecureSslOverride = insecureSslOverride;
    return this;
  }

  /**
   * Get insecureSslOverride
   * @return insecureSslOverride
   */
  @javax.annotation.Nullable
  public Boolean getInsecureSslOverride() {
    return insecureSslOverride;
  }

  public void setInsecureSslOverride(Boolean insecureSslOverride) {
    this.insecureSslOverride = insecureSslOverride;
  }


  public StartBuildBatchInput reportBuildBatchStatusOverride(Boolean reportBuildBatchStatusOverride) {
    this.reportBuildBatchStatusOverride = reportBuildBatchStatusOverride;
    return this;
  }

  /**
   * Get reportBuildBatchStatusOverride
   * @return reportBuildBatchStatusOverride
   */
  @javax.annotation.Nullable
  public Boolean getReportBuildBatchStatusOverride() {
    return reportBuildBatchStatusOverride;
  }

  public void setReportBuildBatchStatusOverride(Boolean reportBuildBatchStatusOverride) {
    this.reportBuildBatchStatusOverride = reportBuildBatchStatusOverride;
  }


  public StartBuildBatchInput environmentTypeOverride(EnvironmentType environmentTypeOverride) {
    this.environmentTypeOverride = environmentTypeOverride;
    return this;
  }

  /**
   * Get environmentTypeOverride
   * @return environmentTypeOverride
   */
  @javax.annotation.Nullable
  public EnvironmentType getEnvironmentTypeOverride() {
    return environmentTypeOverride;
  }

  public void setEnvironmentTypeOverride(EnvironmentType environmentTypeOverride) {
    this.environmentTypeOverride = environmentTypeOverride;
  }


  public StartBuildBatchInput imageOverride(String imageOverride) {
    this.imageOverride = imageOverride;
    return this;
  }

  /**
   * Get imageOverride
   * @return imageOverride
   */
  @javax.annotation.Nullable
  public String getImageOverride() {
    return imageOverride;
  }

  public void setImageOverride(String imageOverride) {
    this.imageOverride = imageOverride;
  }


  public StartBuildBatchInput computeTypeOverride(ComputeType computeTypeOverride) {
    this.computeTypeOverride = computeTypeOverride;
    return this;
  }

  /**
   * Get computeTypeOverride
   * @return computeTypeOverride
   */
  @javax.annotation.Nullable
  public ComputeType getComputeTypeOverride() {
    return computeTypeOverride;
  }

  public void setComputeTypeOverride(ComputeType computeTypeOverride) {
    this.computeTypeOverride = computeTypeOverride;
  }


  public StartBuildBatchInput certificateOverride(String certificateOverride) {
    this.certificateOverride = certificateOverride;
    return this;
  }

  /**
   * Get certificateOverride
   * @return certificateOverride
   */
  @javax.annotation.Nullable
  public String getCertificateOverride() {
    return certificateOverride;
  }

  public void setCertificateOverride(String certificateOverride) {
    this.certificateOverride = certificateOverride;
  }


  public StartBuildBatchInput cacheOverride(StartBuildBatchInputCacheOverride cacheOverride) {
    this.cacheOverride = cacheOverride;
    return this;
  }

  /**
   * Get cacheOverride
   * @return cacheOverride
   */
  @javax.annotation.Nullable
  public StartBuildBatchInputCacheOverride getCacheOverride() {
    return cacheOverride;
  }

  public void setCacheOverride(StartBuildBatchInputCacheOverride cacheOverride) {
    this.cacheOverride = cacheOverride;
  }


  public StartBuildBatchInput serviceRoleOverride(String serviceRoleOverride) {
    this.serviceRoleOverride = serviceRoleOverride;
    return this;
  }

  /**
   * Get serviceRoleOverride
   * @return serviceRoleOverride
   */
  @javax.annotation.Nullable
  public String getServiceRoleOverride() {
    return serviceRoleOverride;
  }

  public void setServiceRoleOverride(String serviceRoleOverride) {
    this.serviceRoleOverride = serviceRoleOverride;
  }


  public StartBuildBatchInput privilegedModeOverride(Boolean privilegedModeOverride) {
    this.privilegedModeOverride = privilegedModeOverride;
    return this;
  }

  /**
   * Get privilegedModeOverride
   * @return privilegedModeOverride
   */
  @javax.annotation.Nullable
  public Boolean getPrivilegedModeOverride() {
    return privilegedModeOverride;
  }

  public void setPrivilegedModeOverride(Boolean privilegedModeOverride) {
    this.privilegedModeOverride = privilegedModeOverride;
  }


  public StartBuildBatchInput buildTimeoutInMinutesOverride(Integer buildTimeoutInMinutesOverride) {
    this.buildTimeoutInMinutesOverride = buildTimeoutInMinutesOverride;
    return this;
  }

  /**
   * Get buildTimeoutInMinutesOverride
   * @return buildTimeoutInMinutesOverride
   */
  @javax.annotation.Nullable
  public Integer getBuildTimeoutInMinutesOverride() {
    return buildTimeoutInMinutesOverride;
  }

  public void setBuildTimeoutInMinutesOverride(Integer buildTimeoutInMinutesOverride) {
    this.buildTimeoutInMinutesOverride = buildTimeoutInMinutesOverride;
  }


  public StartBuildBatchInput queuedTimeoutInMinutesOverride(Integer queuedTimeoutInMinutesOverride) {
    this.queuedTimeoutInMinutesOverride = queuedTimeoutInMinutesOverride;
    return this;
  }

  /**
   * Get queuedTimeoutInMinutesOverride
   * @return queuedTimeoutInMinutesOverride
   */
  @javax.annotation.Nullable
  public Integer getQueuedTimeoutInMinutesOverride() {
    return queuedTimeoutInMinutesOverride;
  }

  public void setQueuedTimeoutInMinutesOverride(Integer queuedTimeoutInMinutesOverride) {
    this.queuedTimeoutInMinutesOverride = queuedTimeoutInMinutesOverride;
  }


  public StartBuildBatchInput encryptionKeyOverride(String encryptionKeyOverride) {
    this.encryptionKeyOverride = encryptionKeyOverride;
    return this;
  }

  /**
   * Get encryptionKeyOverride
   * @return encryptionKeyOverride
   */
  @javax.annotation.Nullable
  public String getEncryptionKeyOverride() {
    return encryptionKeyOverride;
  }

  public void setEncryptionKeyOverride(String encryptionKeyOverride) {
    this.encryptionKeyOverride = encryptionKeyOverride;
  }


  public StartBuildBatchInput logsConfigOverride(StartBuildBatchInputLogsConfigOverride logsConfigOverride) {
    this.logsConfigOverride = logsConfigOverride;
    return this;
  }

  /**
   * Get logsConfigOverride
   * @return logsConfigOverride
   */
  @javax.annotation.Nullable
  public StartBuildBatchInputLogsConfigOverride getLogsConfigOverride() {
    return logsConfigOverride;
  }

  public void setLogsConfigOverride(StartBuildBatchInputLogsConfigOverride logsConfigOverride) {
    this.logsConfigOverride = logsConfigOverride;
  }


  public StartBuildBatchInput registryCredentialOverride(StartBuildBatchInputRegistryCredentialOverride registryCredentialOverride) {
    this.registryCredentialOverride = registryCredentialOverride;
    return this;
  }

  /**
   * Get registryCredentialOverride
   * @return registryCredentialOverride
   */
  @javax.annotation.Nullable
  public StartBuildBatchInputRegistryCredentialOverride getRegistryCredentialOverride() {
    return registryCredentialOverride;
  }

  public void setRegistryCredentialOverride(StartBuildBatchInputRegistryCredentialOverride registryCredentialOverride) {
    this.registryCredentialOverride = registryCredentialOverride;
  }


  public StartBuildBatchInput imagePullCredentialsTypeOverride(ImagePullCredentialsType imagePullCredentialsTypeOverride) {
    this.imagePullCredentialsTypeOverride = imagePullCredentialsTypeOverride;
    return this;
  }

  /**
   * Get imagePullCredentialsTypeOverride
   * @return imagePullCredentialsTypeOverride
   */
  @javax.annotation.Nullable
  public ImagePullCredentialsType getImagePullCredentialsTypeOverride() {
    return imagePullCredentialsTypeOverride;
  }

  public void setImagePullCredentialsTypeOverride(ImagePullCredentialsType imagePullCredentialsTypeOverride) {
    this.imagePullCredentialsTypeOverride = imagePullCredentialsTypeOverride;
  }


  public StartBuildBatchInput buildBatchConfigOverride(StartBuildBatchInputBuildBatchConfigOverride buildBatchConfigOverride) {
    this.buildBatchConfigOverride = buildBatchConfigOverride;
    return this;
  }

  /**
   * Get buildBatchConfigOverride
   * @return buildBatchConfigOverride
   */
  @javax.annotation.Nullable
  public StartBuildBatchInputBuildBatchConfigOverride getBuildBatchConfigOverride() {
    return buildBatchConfigOverride;
  }

  public void setBuildBatchConfigOverride(StartBuildBatchInputBuildBatchConfigOverride buildBatchConfigOverride) {
    this.buildBatchConfigOverride = buildBatchConfigOverride;
  }


  public StartBuildBatchInput debugSessionEnabled(Boolean debugSessionEnabled) {
    this.debugSessionEnabled = debugSessionEnabled;
    return this;
  }

  /**
   * Get debugSessionEnabled
   * @return debugSessionEnabled
   */
  @javax.annotation.Nullable
  public Boolean getDebugSessionEnabled() {
    return debugSessionEnabled;
  }

  public void setDebugSessionEnabled(Boolean debugSessionEnabled) {
    this.debugSessionEnabled = debugSessionEnabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartBuildBatchInput startBuildBatchInput = (StartBuildBatchInput) o;
    return Objects.equals(this.projectName, startBuildBatchInput.projectName) &&
        Objects.equals(this.secondarySourcesOverride, startBuildBatchInput.secondarySourcesOverride) &&
        Objects.equals(this.secondarySourcesVersionOverride, startBuildBatchInput.secondarySourcesVersionOverride) &&
        Objects.equals(this.sourceVersion, startBuildBatchInput.sourceVersion) &&
        Objects.equals(this.artifactsOverride, startBuildBatchInput.artifactsOverride) &&
        Objects.equals(this.secondaryArtifactsOverride, startBuildBatchInput.secondaryArtifactsOverride) &&
        Objects.equals(this.environmentVariablesOverride, startBuildBatchInput.environmentVariablesOverride) &&
        Objects.equals(this.sourceTypeOverride, startBuildBatchInput.sourceTypeOverride) &&
        Objects.equals(this.sourceLocationOverride, startBuildBatchInput.sourceLocationOverride) &&
        Objects.equals(this.sourceAuthOverride, startBuildBatchInput.sourceAuthOverride) &&
        Objects.equals(this.gitCloneDepthOverride, startBuildBatchInput.gitCloneDepthOverride) &&
        Objects.equals(this.gitSubmodulesConfigOverride, startBuildBatchInput.gitSubmodulesConfigOverride) &&
        Objects.equals(this.buildspecOverride, startBuildBatchInput.buildspecOverride) &&
        Objects.equals(this.insecureSslOverride, startBuildBatchInput.insecureSslOverride) &&
        Objects.equals(this.reportBuildBatchStatusOverride, startBuildBatchInput.reportBuildBatchStatusOverride) &&
        Objects.equals(this.environmentTypeOverride, startBuildBatchInput.environmentTypeOverride) &&
        Objects.equals(this.imageOverride, startBuildBatchInput.imageOverride) &&
        Objects.equals(this.computeTypeOverride, startBuildBatchInput.computeTypeOverride) &&
        Objects.equals(this.certificateOverride, startBuildBatchInput.certificateOverride) &&
        Objects.equals(this.cacheOverride, startBuildBatchInput.cacheOverride) &&
        Objects.equals(this.serviceRoleOverride, startBuildBatchInput.serviceRoleOverride) &&
        Objects.equals(this.privilegedModeOverride, startBuildBatchInput.privilegedModeOverride) &&
        Objects.equals(this.buildTimeoutInMinutesOverride, startBuildBatchInput.buildTimeoutInMinutesOverride) &&
        Objects.equals(this.queuedTimeoutInMinutesOverride, startBuildBatchInput.queuedTimeoutInMinutesOverride) &&
        Objects.equals(this.encryptionKeyOverride, startBuildBatchInput.encryptionKeyOverride) &&
        Objects.equals(this.logsConfigOverride, startBuildBatchInput.logsConfigOverride) &&
        Objects.equals(this.registryCredentialOverride, startBuildBatchInput.registryCredentialOverride) &&
        Objects.equals(this.imagePullCredentialsTypeOverride, startBuildBatchInput.imagePullCredentialsTypeOverride) &&
        Objects.equals(this.buildBatchConfigOverride, startBuildBatchInput.buildBatchConfigOverride) &&
        Objects.equals(this.debugSessionEnabled, startBuildBatchInput.debugSessionEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(projectName, secondarySourcesOverride, secondarySourcesVersionOverride, sourceVersion, artifactsOverride, secondaryArtifactsOverride, environmentVariablesOverride, sourceTypeOverride, sourceLocationOverride, sourceAuthOverride, gitCloneDepthOverride, gitSubmodulesConfigOverride, buildspecOverride, insecureSslOverride, reportBuildBatchStatusOverride, environmentTypeOverride, imageOverride, computeTypeOverride, certificateOverride, cacheOverride, serviceRoleOverride, privilegedModeOverride, buildTimeoutInMinutesOverride, queuedTimeoutInMinutesOverride, encryptionKeyOverride, logsConfigOverride, registryCredentialOverride, imagePullCredentialsTypeOverride, buildBatchConfigOverride, debugSessionEnabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartBuildBatchInput {\n");
    sb.append("    projectName: ").append(toIndentedString(projectName)).append("\n");
    sb.append("    secondarySourcesOverride: ").append(toIndentedString(secondarySourcesOverride)).append("\n");
    sb.append("    secondarySourcesVersionOverride: ").append(toIndentedString(secondarySourcesVersionOverride)).append("\n");
    sb.append("    sourceVersion: ").append(toIndentedString(sourceVersion)).append("\n");
    sb.append("    artifactsOverride: ").append(toIndentedString(artifactsOverride)).append("\n");
    sb.append("    secondaryArtifactsOverride: ").append(toIndentedString(secondaryArtifactsOverride)).append("\n");
    sb.append("    environmentVariablesOverride: ").append(toIndentedString(environmentVariablesOverride)).append("\n");
    sb.append("    sourceTypeOverride: ").append(toIndentedString(sourceTypeOverride)).append("\n");
    sb.append("    sourceLocationOverride: ").append(toIndentedString(sourceLocationOverride)).append("\n");
    sb.append("    sourceAuthOverride: ").append(toIndentedString(sourceAuthOverride)).append("\n");
    sb.append("    gitCloneDepthOverride: ").append(toIndentedString(gitCloneDepthOverride)).append("\n");
    sb.append("    gitSubmodulesConfigOverride: ").append(toIndentedString(gitSubmodulesConfigOverride)).append("\n");
    sb.append("    buildspecOverride: ").append(toIndentedString(buildspecOverride)).append("\n");
    sb.append("    insecureSslOverride: ").append(toIndentedString(insecureSslOverride)).append("\n");
    sb.append("    reportBuildBatchStatusOverride: ").append(toIndentedString(reportBuildBatchStatusOverride)).append("\n");
    sb.append("    environmentTypeOverride: ").append(toIndentedString(environmentTypeOverride)).append("\n");
    sb.append("    imageOverride: ").append(toIndentedString(imageOverride)).append("\n");
    sb.append("    computeTypeOverride: ").append(toIndentedString(computeTypeOverride)).append("\n");
    sb.append("    certificateOverride: ").append(toIndentedString(certificateOverride)).append("\n");
    sb.append("    cacheOverride: ").append(toIndentedString(cacheOverride)).append("\n");
    sb.append("    serviceRoleOverride: ").append(toIndentedString(serviceRoleOverride)).append("\n");
    sb.append("    privilegedModeOverride: ").append(toIndentedString(privilegedModeOverride)).append("\n");
    sb.append("    buildTimeoutInMinutesOverride: ").append(toIndentedString(buildTimeoutInMinutesOverride)).append("\n");
    sb.append("    queuedTimeoutInMinutesOverride: ").append(toIndentedString(queuedTimeoutInMinutesOverride)).append("\n");
    sb.append("    encryptionKeyOverride: ").append(toIndentedString(encryptionKeyOverride)).append("\n");
    sb.append("    logsConfigOverride: ").append(toIndentedString(logsConfigOverride)).append("\n");
    sb.append("    registryCredentialOverride: ").append(toIndentedString(registryCredentialOverride)).append("\n");
    sb.append("    imagePullCredentialsTypeOverride: ").append(toIndentedString(imagePullCredentialsTypeOverride)).append("\n");
    sb.append("    buildBatchConfigOverride: ").append(toIndentedString(buildBatchConfigOverride)).append("\n");
    sb.append("    debugSessionEnabled: ").append(toIndentedString(debugSessionEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("projectName");
    openapiFields.add("secondarySourcesOverride");
    openapiFields.add("secondarySourcesVersionOverride");
    openapiFields.add("sourceVersion");
    openapiFields.add("artifactsOverride");
    openapiFields.add("secondaryArtifactsOverride");
    openapiFields.add("environmentVariablesOverride");
    openapiFields.add("sourceTypeOverride");
    openapiFields.add("sourceLocationOverride");
    openapiFields.add("sourceAuthOverride");
    openapiFields.add("gitCloneDepthOverride");
    openapiFields.add("gitSubmodulesConfigOverride");
    openapiFields.add("buildspecOverride");
    openapiFields.add("insecureSslOverride");
    openapiFields.add("reportBuildBatchStatusOverride");
    openapiFields.add("environmentTypeOverride");
    openapiFields.add("imageOverride");
    openapiFields.add("computeTypeOverride");
    openapiFields.add("certificateOverride");
    openapiFields.add("cacheOverride");
    openapiFields.add("serviceRoleOverride");
    openapiFields.add("privilegedModeOverride");
    openapiFields.add("buildTimeoutInMinutesOverride");
    openapiFields.add("queuedTimeoutInMinutesOverride");
    openapiFields.add("encryptionKeyOverride");
    openapiFields.add("logsConfigOverride");
    openapiFields.add("registryCredentialOverride");
    openapiFields.add("imagePullCredentialsTypeOverride");
    openapiFields.add("buildBatchConfigOverride");
    openapiFields.add("debugSessionEnabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("projectName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StartBuildBatchInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StartBuildBatchInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartBuildBatchInput is not found in the empty JSON string", StartBuildBatchInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StartBuildBatchInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StartBuildBatchInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StartBuildBatchInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `projectName`
      String.validateJsonElement(jsonObj.get("projectName"));
      // validate the optional field `secondarySourcesOverride`
      if (jsonObj.get("secondarySourcesOverride") != null && !jsonObj.get("secondarySourcesOverride").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("secondarySourcesOverride"));
      }
      // validate the optional field `secondarySourcesVersionOverride`
      if (jsonObj.get("secondarySourcesVersionOverride") != null && !jsonObj.get("secondarySourcesVersionOverride").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("secondarySourcesVersionOverride"));
      }
      // validate the optional field `sourceVersion`
      if (jsonObj.get("sourceVersion") != null && !jsonObj.get("sourceVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("sourceVersion"));
      }
      // validate the optional field `artifactsOverride`
      if (jsonObj.get("artifactsOverride") != null && !jsonObj.get("artifactsOverride").isJsonNull()) {
        StartBuildBatchInputArtifactsOverride.validateJsonElement(jsonObj.get("artifactsOverride"));
      }
      // validate the optional field `secondaryArtifactsOverride`
      if (jsonObj.get("secondaryArtifactsOverride") != null && !jsonObj.get("secondaryArtifactsOverride").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("secondaryArtifactsOverride"));
      }
      // validate the optional field `environmentVariablesOverride`
      if (jsonObj.get("environmentVariablesOverride") != null && !jsonObj.get("environmentVariablesOverride").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("environmentVariablesOverride"));
      }
      // validate the optional field `sourceTypeOverride`
      if (jsonObj.get("sourceTypeOverride") != null && !jsonObj.get("sourceTypeOverride").isJsonNull()) {
        SourceType.validateJsonElement(jsonObj.get("sourceTypeOverride"));
      }
      // validate the optional field `sourceLocationOverride`
      if (jsonObj.get("sourceLocationOverride") != null && !jsonObj.get("sourceLocationOverride").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("sourceLocationOverride"));
      }
      // validate the optional field `sourceAuthOverride`
      if (jsonObj.get("sourceAuthOverride") != null && !jsonObj.get("sourceAuthOverride").isJsonNull()) {
        StartBuildBatchInputSourceAuthOverride.validateJsonElement(jsonObj.get("sourceAuthOverride"));
      }
      // validate the optional field `gitCloneDepthOverride`
      if (jsonObj.get("gitCloneDepthOverride") != null && !jsonObj.get("gitCloneDepthOverride").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("gitCloneDepthOverride"));
      }
      // validate the optional field `gitSubmodulesConfigOverride`
      if (jsonObj.get("gitSubmodulesConfigOverride") != null && !jsonObj.get("gitSubmodulesConfigOverride").isJsonNull()) {
        StartBuildBatchInputGitSubmodulesConfigOverride.validateJsonElement(jsonObj.get("gitSubmodulesConfigOverride"));
      }
      // validate the optional field `buildspecOverride`
      if (jsonObj.get("buildspecOverride") != null && !jsonObj.get("buildspecOverride").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("buildspecOverride"));
      }
      // validate the optional field `insecureSslOverride`
      if (jsonObj.get("insecureSslOverride") != null && !jsonObj.get("insecureSslOverride").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("insecureSslOverride"));
      }
      // validate the optional field `reportBuildBatchStatusOverride`
      if (jsonObj.get("reportBuildBatchStatusOverride") != null && !jsonObj.get("reportBuildBatchStatusOverride").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("reportBuildBatchStatusOverride"));
      }
      // validate the optional field `environmentTypeOverride`
      if (jsonObj.get("environmentTypeOverride") != null && !jsonObj.get("environmentTypeOverride").isJsonNull()) {
        EnvironmentType.validateJsonElement(jsonObj.get("environmentTypeOverride"));
      }
      // validate the optional field `imageOverride`
      if (jsonObj.get("imageOverride") != null && !jsonObj.get("imageOverride").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("imageOverride"));
      }
      // validate the optional field `computeTypeOverride`
      if (jsonObj.get("computeTypeOverride") != null && !jsonObj.get("computeTypeOverride").isJsonNull()) {
        ComputeType.validateJsonElement(jsonObj.get("computeTypeOverride"));
      }
      // validate the optional field `certificateOverride`
      if (jsonObj.get("certificateOverride") != null && !jsonObj.get("certificateOverride").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("certificateOverride"));
      }
      // validate the optional field `cacheOverride`
      if (jsonObj.get("cacheOverride") != null && !jsonObj.get("cacheOverride").isJsonNull()) {
        StartBuildBatchInputCacheOverride.validateJsonElement(jsonObj.get("cacheOverride"));
      }
      // validate the optional field `serviceRoleOverride`
      if (jsonObj.get("serviceRoleOverride") != null && !jsonObj.get("serviceRoleOverride").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("serviceRoleOverride"));
      }
      // validate the optional field `privilegedModeOverride`
      if (jsonObj.get("privilegedModeOverride") != null && !jsonObj.get("privilegedModeOverride").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("privilegedModeOverride"));
      }
      // validate the optional field `buildTimeoutInMinutesOverride`
      if (jsonObj.get("buildTimeoutInMinutesOverride") != null && !jsonObj.get("buildTimeoutInMinutesOverride").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("buildTimeoutInMinutesOverride"));
      }
      // validate the optional field `queuedTimeoutInMinutesOverride`
      if (jsonObj.get("queuedTimeoutInMinutesOverride") != null && !jsonObj.get("queuedTimeoutInMinutesOverride").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("queuedTimeoutInMinutesOverride"));
      }
      // validate the optional field `encryptionKeyOverride`
      if (jsonObj.get("encryptionKeyOverride") != null && !jsonObj.get("encryptionKeyOverride").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("encryptionKeyOverride"));
      }
      // validate the optional field `logsConfigOverride`
      if (jsonObj.get("logsConfigOverride") != null && !jsonObj.get("logsConfigOverride").isJsonNull()) {
        StartBuildBatchInputLogsConfigOverride.validateJsonElement(jsonObj.get("logsConfigOverride"));
      }
      // validate the optional field `registryCredentialOverride`
      if (jsonObj.get("registryCredentialOverride") != null && !jsonObj.get("registryCredentialOverride").isJsonNull()) {
        StartBuildBatchInputRegistryCredentialOverride.validateJsonElement(jsonObj.get("registryCredentialOverride"));
      }
      // validate the optional field `imagePullCredentialsTypeOverride`
      if (jsonObj.get("imagePullCredentialsTypeOverride") != null && !jsonObj.get("imagePullCredentialsTypeOverride").isJsonNull()) {
        ImagePullCredentialsType.validateJsonElement(jsonObj.get("imagePullCredentialsTypeOverride"));
      }
      // validate the optional field `buildBatchConfigOverride`
      if (jsonObj.get("buildBatchConfigOverride") != null && !jsonObj.get("buildBatchConfigOverride").isJsonNull()) {
        StartBuildBatchInputBuildBatchConfigOverride.validateJsonElement(jsonObj.get("buildBatchConfigOverride"));
      }
      // validate the optional field `debugSessionEnabled`
      if (jsonObj.get("debugSessionEnabled") != null && !jsonObj.get("debugSessionEnabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("debugSessionEnabled"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartBuildBatchInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartBuildBatchInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartBuildBatchInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartBuildBatchInput.class));

       return (TypeAdapter<T>) new TypeAdapter<StartBuildBatchInput>() {
           @Override
           public void write(JsonWriter out, StartBuildBatchInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StartBuildBatchInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StartBuildBatchInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StartBuildBatchInput
   * @throws IOException if the JSON string is invalid with respect to StartBuildBatchInput
   */
  public static StartBuildBatchInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartBuildBatchInput.class);
  }

  /**
   * Convert an instance of StartBuildBatchInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

