/*
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ReportCodeCoverageSortByType;
import org.openapitools.client.model.SortOrderType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeCodeCoveragesInput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:18.687160-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeCodeCoveragesInput {
  public static final String SERIALIZED_NAME_REPORT_ARN = "reportArn";
  @SerializedName(SERIALIZED_NAME_REPORT_ARN)
  private String reportArn;

  public static final String SERIALIZED_NAME_NEXT_TOKEN = "nextToken";
  @SerializedName(SERIALIZED_NAME_NEXT_TOKEN)
  private String nextToken;

  public static final String SERIALIZED_NAME_MAX_RESULTS = "maxResults";
  @SerializedName(SERIALIZED_NAME_MAX_RESULTS)
  private Integer maxResults;

  public static final String SERIALIZED_NAME_SORT_ORDER = "sortOrder";
  @SerializedName(SERIALIZED_NAME_SORT_ORDER)
  private SortOrderType sortOrder;

  public static final String SERIALIZED_NAME_SORT_BY = "sortBy";
  @SerializedName(SERIALIZED_NAME_SORT_BY)
  private ReportCodeCoverageSortByType sortBy;

  public static final String SERIALIZED_NAME_MIN_LINE_COVERAGE_PERCENTAGE = "minLineCoveragePercentage";
  @SerializedName(SERIALIZED_NAME_MIN_LINE_COVERAGE_PERCENTAGE)
  private Double minLineCoveragePercentage;

  public static final String SERIALIZED_NAME_MAX_LINE_COVERAGE_PERCENTAGE = "maxLineCoveragePercentage";
  @SerializedName(SERIALIZED_NAME_MAX_LINE_COVERAGE_PERCENTAGE)
  private Double maxLineCoveragePercentage;

  public DescribeCodeCoveragesInput() {
  }

  public DescribeCodeCoveragesInput reportArn(String reportArn) {
    this.reportArn = reportArn;
    return this;
  }

  /**
   * Get reportArn
   * @return reportArn
   */
  @javax.annotation.Nonnull
  public String getReportArn() {
    return reportArn;
  }

  public void setReportArn(String reportArn) {
    this.reportArn = reportArn;
  }


  public DescribeCodeCoveragesInput nextToken(String nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  /**
   * Get nextToken
   * @return nextToken
   */
  @javax.annotation.Nullable
  public String getNextToken() {
    return nextToken;
  }

  public void setNextToken(String nextToken) {
    this.nextToken = nextToken;
  }


  public DescribeCodeCoveragesInput maxResults(Integer maxResults) {
    this.maxResults = maxResults;
    return this;
  }

  /**
   * Get maxResults
   * @return maxResults
   */
  @javax.annotation.Nullable
  public Integer getMaxResults() {
    return maxResults;
  }

  public void setMaxResults(Integer maxResults) {
    this.maxResults = maxResults;
  }


  public DescribeCodeCoveragesInput sortOrder(SortOrderType sortOrder) {
    this.sortOrder = sortOrder;
    return this;
  }

  /**
   * Get sortOrder
   * @return sortOrder
   */
  @javax.annotation.Nullable
  public SortOrderType getSortOrder() {
    return sortOrder;
  }

  public void setSortOrder(SortOrderType sortOrder) {
    this.sortOrder = sortOrder;
  }


  public DescribeCodeCoveragesInput sortBy(ReportCodeCoverageSortByType sortBy) {
    this.sortBy = sortBy;
    return this;
  }

  /**
   * Get sortBy
   * @return sortBy
   */
  @javax.annotation.Nullable
  public ReportCodeCoverageSortByType getSortBy() {
    return sortBy;
  }

  public void setSortBy(ReportCodeCoverageSortByType sortBy) {
    this.sortBy = sortBy;
  }


  public DescribeCodeCoveragesInput minLineCoveragePercentage(Double minLineCoveragePercentage) {
    this.minLineCoveragePercentage = minLineCoveragePercentage;
    return this;
  }

  /**
   * Get minLineCoveragePercentage
   * @return minLineCoveragePercentage
   */
  @javax.annotation.Nullable
  public Double getMinLineCoveragePercentage() {
    return minLineCoveragePercentage;
  }

  public void setMinLineCoveragePercentage(Double minLineCoveragePercentage) {
    this.minLineCoveragePercentage = minLineCoveragePercentage;
  }


  public DescribeCodeCoveragesInput maxLineCoveragePercentage(Double maxLineCoveragePercentage) {
    this.maxLineCoveragePercentage = maxLineCoveragePercentage;
    return this;
  }

  /**
   * Get maxLineCoveragePercentage
   * @return maxLineCoveragePercentage
   */
  @javax.annotation.Nullable
  public Double getMaxLineCoveragePercentage() {
    return maxLineCoveragePercentage;
  }

  public void setMaxLineCoveragePercentage(Double maxLineCoveragePercentage) {
    this.maxLineCoveragePercentage = maxLineCoveragePercentage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeCodeCoveragesInput describeCodeCoveragesInput = (DescribeCodeCoveragesInput) o;
    return Objects.equals(this.reportArn, describeCodeCoveragesInput.reportArn) &&
        Objects.equals(this.nextToken, describeCodeCoveragesInput.nextToken) &&
        Objects.equals(this.maxResults, describeCodeCoveragesInput.maxResults) &&
        Objects.equals(this.sortOrder, describeCodeCoveragesInput.sortOrder) &&
        Objects.equals(this.sortBy, describeCodeCoveragesInput.sortBy) &&
        Objects.equals(this.minLineCoveragePercentage, describeCodeCoveragesInput.minLineCoveragePercentage) &&
        Objects.equals(this.maxLineCoveragePercentage, describeCodeCoveragesInput.maxLineCoveragePercentage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(reportArn, nextToken, maxResults, sortOrder, sortBy, minLineCoveragePercentage, maxLineCoveragePercentage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeCodeCoveragesInput {\n");
    sb.append("    reportArn: ").append(toIndentedString(reportArn)).append("\n");
    sb.append("    nextToken: ").append(toIndentedString(nextToken)).append("\n");
    sb.append("    maxResults: ").append(toIndentedString(maxResults)).append("\n");
    sb.append("    sortOrder: ").append(toIndentedString(sortOrder)).append("\n");
    sb.append("    sortBy: ").append(toIndentedString(sortBy)).append("\n");
    sb.append("    minLineCoveragePercentage: ").append(toIndentedString(minLineCoveragePercentage)).append("\n");
    sb.append("    maxLineCoveragePercentage: ").append(toIndentedString(maxLineCoveragePercentage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("reportArn");
    openapiFields.add("nextToken");
    openapiFields.add("maxResults");
    openapiFields.add("sortOrder");
    openapiFields.add("sortBy");
    openapiFields.add("minLineCoveragePercentage");
    openapiFields.add("maxLineCoveragePercentage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("reportArn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeCodeCoveragesInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeCodeCoveragesInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeCodeCoveragesInput is not found in the empty JSON string", DescribeCodeCoveragesInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeCodeCoveragesInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeCodeCoveragesInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DescribeCodeCoveragesInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `reportArn`
      String.validateJsonElement(jsonObj.get("reportArn"));
      // validate the optional field `nextToken`
      if (jsonObj.get("nextToken") != null && !jsonObj.get("nextToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("nextToken"));
      }
      // validate the optional field `maxResults`
      if (jsonObj.get("maxResults") != null && !jsonObj.get("maxResults").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("maxResults"));
      }
      // validate the optional field `sortOrder`
      if (jsonObj.get("sortOrder") != null && !jsonObj.get("sortOrder").isJsonNull()) {
        SortOrderType.validateJsonElement(jsonObj.get("sortOrder"));
      }
      // validate the optional field `sortBy`
      if (jsonObj.get("sortBy") != null && !jsonObj.get("sortBy").isJsonNull()) {
        ReportCodeCoverageSortByType.validateJsonElement(jsonObj.get("sortBy"));
      }
      // validate the optional field `minLineCoveragePercentage`
      if (jsonObj.get("minLineCoveragePercentage") != null && !jsonObj.get("minLineCoveragePercentage").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("minLineCoveragePercentage"));
      }
      // validate the optional field `maxLineCoveragePercentage`
      if (jsonObj.get("maxLineCoveragePercentage") != null && !jsonObj.get("maxLineCoveragePercentage").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("maxLineCoveragePercentage"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeCodeCoveragesInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeCodeCoveragesInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeCodeCoveragesInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeCodeCoveragesInput.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeCodeCoveragesInput>() {
           @Override
           public void write(JsonWriter out, DescribeCodeCoveragesInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeCodeCoveragesInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeCodeCoveragesInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeCodeCoveragesInput
   * @throws IOException if the JSON string is invalid with respect to DescribeCodeCoveragesInput
   */
  public static DescribeCodeCoveragesInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeCodeCoveragesInput.class);
  }

  /**
   * Convert an instance of DescribeCodeCoveragesInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

