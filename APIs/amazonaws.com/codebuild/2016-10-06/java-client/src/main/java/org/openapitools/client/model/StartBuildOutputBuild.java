/*
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BuildArtifacts;
import org.openapitools.client.model.BuildCache;
import org.openapitools.client.model.BuildDebugSession;
import org.openapitools.client.model.BuildEnvironment;
import org.openapitools.client.model.BuildLogs;
import org.openapitools.client.model.BuildNetworkInterface;
import org.openapitools.client.model.BuildSource;
import org.openapitools.client.model.BuildVpcConfig;
import org.openapitools.client.model.StatusType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StartBuildOutputBuild
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:18.687160-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StartBuildOutputBuild {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ARN = "arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_BUILD_NUMBER = "buildNumber";
  @SerializedName(SERIALIZED_NAME_BUILD_NUMBER)
  private Integer buildNumber;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_CURRENT_PHASE = "currentPhase";
  @SerializedName(SERIALIZED_NAME_CURRENT_PHASE)
  private String currentPhase;

  public static final String SERIALIZED_NAME_BUILD_STATUS = "buildStatus";
  @SerializedName(SERIALIZED_NAME_BUILD_STATUS)
  private StatusType buildStatus;

  public static final String SERIALIZED_NAME_SOURCE_VERSION = "sourceVersion";
  @SerializedName(SERIALIZED_NAME_SOURCE_VERSION)
  private String sourceVersion;

  public static final String SERIALIZED_NAME_RESOLVED_SOURCE_VERSION = "resolvedSourceVersion";
  @SerializedName(SERIALIZED_NAME_RESOLVED_SOURCE_VERSION)
  private String resolvedSourceVersion;

  public static final String SERIALIZED_NAME_PROJECT_NAME = "projectName";
  @SerializedName(SERIALIZED_NAME_PROJECT_NAME)
  private String projectName;

  public static final String SERIALIZED_NAME_PHASES = "phases";
  @SerializedName(SERIALIZED_NAME_PHASES)
  private List phases;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private BuildSource source;

  public static final String SERIALIZED_NAME_SECONDARY_SOURCES = "secondarySources";
  @SerializedName(SERIALIZED_NAME_SECONDARY_SOURCES)
  private List secondarySources;

  public static final String SERIALIZED_NAME_SECONDARY_SOURCE_VERSIONS = "secondarySourceVersions";
  @SerializedName(SERIALIZED_NAME_SECONDARY_SOURCE_VERSIONS)
  private List secondarySourceVersions;

  public static final String SERIALIZED_NAME_ARTIFACTS = "artifacts";
  @SerializedName(SERIALIZED_NAME_ARTIFACTS)
  private BuildArtifacts artifacts;

  public static final String SERIALIZED_NAME_SECONDARY_ARTIFACTS = "secondaryArtifacts";
  @SerializedName(SERIALIZED_NAME_SECONDARY_ARTIFACTS)
  private List secondaryArtifacts;

  public static final String SERIALIZED_NAME_CACHE = "cache";
  @SerializedName(SERIALIZED_NAME_CACHE)
  private BuildCache cache;

  public static final String SERIALIZED_NAME_ENVIRONMENT = "environment";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT)
  private BuildEnvironment environment;

  public static final String SERIALIZED_NAME_SERVICE_ROLE = "serviceRole";
  @SerializedName(SERIALIZED_NAME_SERVICE_ROLE)
  private String serviceRole;

  public static final String SERIALIZED_NAME_LOGS = "logs";
  @SerializedName(SERIALIZED_NAME_LOGS)
  private BuildLogs logs;

  public static final String SERIALIZED_NAME_TIMEOUT_IN_MINUTES = "timeoutInMinutes";
  @SerializedName(SERIALIZED_NAME_TIMEOUT_IN_MINUTES)
  private Integer timeoutInMinutes;

  public static final String SERIALIZED_NAME_QUEUED_TIMEOUT_IN_MINUTES = "queuedTimeoutInMinutes";
  @SerializedName(SERIALIZED_NAME_QUEUED_TIMEOUT_IN_MINUTES)
  private Integer queuedTimeoutInMinutes;

  public static final String SERIALIZED_NAME_BUILD_COMPLETE = "buildComplete";
  @SerializedName(SERIALIZED_NAME_BUILD_COMPLETE)
  private Boolean buildComplete;

  public static final String SERIALIZED_NAME_INITIATOR = "initiator";
  @SerializedName(SERIALIZED_NAME_INITIATOR)
  private String initiator;

  public static final String SERIALIZED_NAME_VPC_CONFIG = "vpcConfig";
  @SerializedName(SERIALIZED_NAME_VPC_CONFIG)
  private BuildVpcConfig vpcConfig;

  public static final String SERIALIZED_NAME_NETWORK_INTERFACE = "networkInterface";
  @SerializedName(SERIALIZED_NAME_NETWORK_INTERFACE)
  private BuildNetworkInterface networkInterface;

  public static final String SERIALIZED_NAME_ENCRYPTION_KEY = "encryptionKey";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_KEY)
  private String encryptionKey;

  public static final String SERIALIZED_NAME_EXPORTED_ENVIRONMENT_VARIABLES = "exportedEnvironmentVariables";
  @SerializedName(SERIALIZED_NAME_EXPORTED_ENVIRONMENT_VARIABLES)
  private List exportedEnvironmentVariables;

  public static final String SERIALIZED_NAME_REPORT_ARNS = "reportArns";
  @SerializedName(SERIALIZED_NAME_REPORT_ARNS)
  private List reportArns;

  public static final String SERIALIZED_NAME_FILE_SYSTEM_LOCATIONS = "fileSystemLocations";
  @SerializedName(SERIALIZED_NAME_FILE_SYSTEM_LOCATIONS)
  private List fileSystemLocations;

  public static final String SERIALIZED_NAME_DEBUG_SESSION = "debugSession";
  @SerializedName(SERIALIZED_NAME_DEBUG_SESSION)
  private BuildDebugSession debugSession;

  public static final String SERIALIZED_NAME_BUILD_BATCH_ARN = "buildBatchArn";
  @SerializedName(SERIALIZED_NAME_BUILD_BATCH_ARN)
  private String buildBatchArn;

  public StartBuildOutputBuild() {
  }

  public StartBuildOutputBuild id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public StartBuildOutputBuild arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public StartBuildOutputBuild buildNumber(Integer buildNumber) {
    this.buildNumber = buildNumber;
    return this;
  }

  /**
   * Get buildNumber
   * @return buildNumber
   */
  @javax.annotation.Nullable
  public Integer getBuildNumber() {
    return buildNumber;
  }

  public void setBuildNumber(Integer buildNumber) {
    this.buildNumber = buildNumber;
  }


  public StartBuildOutputBuild startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Get startTime
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public StartBuildOutputBuild endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * Get endTime
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public StartBuildOutputBuild currentPhase(String currentPhase) {
    this.currentPhase = currentPhase;
    return this;
  }

  /**
   * Get currentPhase
   * @return currentPhase
   */
  @javax.annotation.Nullable
  public String getCurrentPhase() {
    return currentPhase;
  }

  public void setCurrentPhase(String currentPhase) {
    this.currentPhase = currentPhase;
  }


  public StartBuildOutputBuild buildStatus(StatusType buildStatus) {
    this.buildStatus = buildStatus;
    return this;
  }

  /**
   * Get buildStatus
   * @return buildStatus
   */
  @javax.annotation.Nullable
  public StatusType getBuildStatus() {
    return buildStatus;
  }

  public void setBuildStatus(StatusType buildStatus) {
    this.buildStatus = buildStatus;
  }


  public StartBuildOutputBuild sourceVersion(String sourceVersion) {
    this.sourceVersion = sourceVersion;
    return this;
  }

  /**
   * Get sourceVersion
   * @return sourceVersion
   */
  @javax.annotation.Nullable
  public String getSourceVersion() {
    return sourceVersion;
  }

  public void setSourceVersion(String sourceVersion) {
    this.sourceVersion = sourceVersion;
  }


  public StartBuildOutputBuild resolvedSourceVersion(String resolvedSourceVersion) {
    this.resolvedSourceVersion = resolvedSourceVersion;
    return this;
  }

  /**
   * Get resolvedSourceVersion
   * @return resolvedSourceVersion
   */
  @javax.annotation.Nullable
  public String getResolvedSourceVersion() {
    return resolvedSourceVersion;
  }

  public void setResolvedSourceVersion(String resolvedSourceVersion) {
    this.resolvedSourceVersion = resolvedSourceVersion;
  }


  public StartBuildOutputBuild projectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  /**
   * Get projectName
   * @return projectName
   */
  @javax.annotation.Nullable
  public String getProjectName() {
    return projectName;
  }

  public void setProjectName(String projectName) {
    this.projectName = projectName;
  }


  public StartBuildOutputBuild phases(List phases) {
    this.phases = phases;
    return this;
  }

  /**
   * Get phases
   * @return phases
   */
  @javax.annotation.Nullable
  public List getPhases() {
    return phases;
  }

  public void setPhases(List phases) {
    this.phases = phases;
  }


  public StartBuildOutputBuild source(BuildSource source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nullable
  public BuildSource getSource() {
    return source;
  }

  public void setSource(BuildSource source) {
    this.source = source;
  }


  public StartBuildOutputBuild secondarySources(List secondarySources) {
    this.secondarySources = secondarySources;
    return this;
  }

  /**
   * Get secondarySources
   * @return secondarySources
   */
  @javax.annotation.Nullable
  public List getSecondarySources() {
    return secondarySources;
  }

  public void setSecondarySources(List secondarySources) {
    this.secondarySources = secondarySources;
  }


  public StartBuildOutputBuild secondarySourceVersions(List secondarySourceVersions) {
    this.secondarySourceVersions = secondarySourceVersions;
    return this;
  }

  /**
   * Get secondarySourceVersions
   * @return secondarySourceVersions
   */
  @javax.annotation.Nullable
  public List getSecondarySourceVersions() {
    return secondarySourceVersions;
  }

  public void setSecondarySourceVersions(List secondarySourceVersions) {
    this.secondarySourceVersions = secondarySourceVersions;
  }


  public StartBuildOutputBuild artifacts(BuildArtifacts artifacts) {
    this.artifacts = artifacts;
    return this;
  }

  /**
   * Get artifacts
   * @return artifacts
   */
  @javax.annotation.Nullable
  public BuildArtifacts getArtifacts() {
    return artifacts;
  }

  public void setArtifacts(BuildArtifacts artifacts) {
    this.artifacts = artifacts;
  }


  public StartBuildOutputBuild secondaryArtifacts(List secondaryArtifacts) {
    this.secondaryArtifacts = secondaryArtifacts;
    return this;
  }

  /**
   * Get secondaryArtifacts
   * @return secondaryArtifacts
   */
  @javax.annotation.Nullable
  public List getSecondaryArtifacts() {
    return secondaryArtifacts;
  }

  public void setSecondaryArtifacts(List secondaryArtifacts) {
    this.secondaryArtifacts = secondaryArtifacts;
  }


  public StartBuildOutputBuild cache(BuildCache cache) {
    this.cache = cache;
    return this;
  }

  /**
   * Get cache
   * @return cache
   */
  @javax.annotation.Nullable
  public BuildCache getCache() {
    return cache;
  }

  public void setCache(BuildCache cache) {
    this.cache = cache;
  }


  public StartBuildOutputBuild environment(BuildEnvironment environment) {
    this.environment = environment;
    return this;
  }

  /**
   * Get environment
   * @return environment
   */
  @javax.annotation.Nullable
  public BuildEnvironment getEnvironment() {
    return environment;
  }

  public void setEnvironment(BuildEnvironment environment) {
    this.environment = environment;
  }


  public StartBuildOutputBuild serviceRole(String serviceRole) {
    this.serviceRole = serviceRole;
    return this;
  }

  /**
   * Get serviceRole
   * @return serviceRole
   */
  @javax.annotation.Nullable
  public String getServiceRole() {
    return serviceRole;
  }

  public void setServiceRole(String serviceRole) {
    this.serviceRole = serviceRole;
  }


  public StartBuildOutputBuild logs(BuildLogs logs) {
    this.logs = logs;
    return this;
  }

  /**
   * Get logs
   * @return logs
   */
  @javax.annotation.Nullable
  public BuildLogs getLogs() {
    return logs;
  }

  public void setLogs(BuildLogs logs) {
    this.logs = logs;
  }


  public StartBuildOutputBuild timeoutInMinutes(Integer timeoutInMinutes) {
    this.timeoutInMinutes = timeoutInMinutes;
    return this;
  }

  /**
   * Get timeoutInMinutes
   * @return timeoutInMinutes
   */
  @javax.annotation.Nullable
  public Integer getTimeoutInMinutes() {
    return timeoutInMinutes;
  }

  public void setTimeoutInMinutes(Integer timeoutInMinutes) {
    this.timeoutInMinutes = timeoutInMinutes;
  }


  public StartBuildOutputBuild queuedTimeoutInMinutes(Integer queuedTimeoutInMinutes) {
    this.queuedTimeoutInMinutes = queuedTimeoutInMinutes;
    return this;
  }

  /**
   * Get queuedTimeoutInMinutes
   * @return queuedTimeoutInMinutes
   */
  @javax.annotation.Nullable
  public Integer getQueuedTimeoutInMinutes() {
    return queuedTimeoutInMinutes;
  }

  public void setQueuedTimeoutInMinutes(Integer queuedTimeoutInMinutes) {
    this.queuedTimeoutInMinutes = queuedTimeoutInMinutes;
  }


  public StartBuildOutputBuild buildComplete(Boolean buildComplete) {
    this.buildComplete = buildComplete;
    return this;
  }

  /**
   * Get buildComplete
   * @return buildComplete
   */
  @javax.annotation.Nullable
  public Boolean getBuildComplete() {
    return buildComplete;
  }

  public void setBuildComplete(Boolean buildComplete) {
    this.buildComplete = buildComplete;
  }


  public StartBuildOutputBuild initiator(String initiator) {
    this.initiator = initiator;
    return this;
  }

  /**
   * Get initiator
   * @return initiator
   */
  @javax.annotation.Nullable
  public String getInitiator() {
    return initiator;
  }

  public void setInitiator(String initiator) {
    this.initiator = initiator;
  }


  public StartBuildOutputBuild vpcConfig(BuildVpcConfig vpcConfig) {
    this.vpcConfig = vpcConfig;
    return this;
  }

  /**
   * Get vpcConfig
   * @return vpcConfig
   */
  @javax.annotation.Nullable
  public BuildVpcConfig getVpcConfig() {
    return vpcConfig;
  }

  public void setVpcConfig(BuildVpcConfig vpcConfig) {
    this.vpcConfig = vpcConfig;
  }


  public StartBuildOutputBuild networkInterface(BuildNetworkInterface networkInterface) {
    this.networkInterface = networkInterface;
    return this;
  }

  /**
   * Get networkInterface
   * @return networkInterface
   */
  @javax.annotation.Nullable
  public BuildNetworkInterface getNetworkInterface() {
    return networkInterface;
  }

  public void setNetworkInterface(BuildNetworkInterface networkInterface) {
    this.networkInterface = networkInterface;
  }


  public StartBuildOutputBuild encryptionKey(String encryptionKey) {
    this.encryptionKey = encryptionKey;
    return this;
  }

  /**
   * Get encryptionKey
   * @return encryptionKey
   */
  @javax.annotation.Nullable
  public String getEncryptionKey() {
    return encryptionKey;
  }

  public void setEncryptionKey(String encryptionKey) {
    this.encryptionKey = encryptionKey;
  }


  public StartBuildOutputBuild exportedEnvironmentVariables(List exportedEnvironmentVariables) {
    this.exportedEnvironmentVariables = exportedEnvironmentVariables;
    return this;
  }

  /**
   * Get exportedEnvironmentVariables
   * @return exportedEnvironmentVariables
   */
  @javax.annotation.Nullable
  public List getExportedEnvironmentVariables() {
    return exportedEnvironmentVariables;
  }

  public void setExportedEnvironmentVariables(List exportedEnvironmentVariables) {
    this.exportedEnvironmentVariables = exportedEnvironmentVariables;
  }


  public StartBuildOutputBuild reportArns(List reportArns) {
    this.reportArns = reportArns;
    return this;
  }

  /**
   * Get reportArns
   * @return reportArns
   */
  @javax.annotation.Nullable
  public List getReportArns() {
    return reportArns;
  }

  public void setReportArns(List reportArns) {
    this.reportArns = reportArns;
  }


  public StartBuildOutputBuild fileSystemLocations(List fileSystemLocations) {
    this.fileSystemLocations = fileSystemLocations;
    return this;
  }

  /**
   * Get fileSystemLocations
   * @return fileSystemLocations
   */
  @javax.annotation.Nullable
  public List getFileSystemLocations() {
    return fileSystemLocations;
  }

  public void setFileSystemLocations(List fileSystemLocations) {
    this.fileSystemLocations = fileSystemLocations;
  }


  public StartBuildOutputBuild debugSession(BuildDebugSession debugSession) {
    this.debugSession = debugSession;
    return this;
  }

  /**
   * Get debugSession
   * @return debugSession
   */
  @javax.annotation.Nullable
  public BuildDebugSession getDebugSession() {
    return debugSession;
  }

  public void setDebugSession(BuildDebugSession debugSession) {
    this.debugSession = debugSession;
  }


  public StartBuildOutputBuild buildBatchArn(String buildBatchArn) {
    this.buildBatchArn = buildBatchArn;
    return this;
  }

  /**
   * Get buildBatchArn
   * @return buildBatchArn
   */
  @javax.annotation.Nullable
  public String getBuildBatchArn() {
    return buildBatchArn;
  }

  public void setBuildBatchArn(String buildBatchArn) {
    this.buildBatchArn = buildBatchArn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartBuildOutputBuild startBuildOutputBuild = (StartBuildOutputBuild) o;
    return Objects.equals(this.id, startBuildOutputBuild.id) &&
        Objects.equals(this.arn, startBuildOutputBuild.arn) &&
        Objects.equals(this.buildNumber, startBuildOutputBuild.buildNumber) &&
        Objects.equals(this.startTime, startBuildOutputBuild.startTime) &&
        Objects.equals(this.endTime, startBuildOutputBuild.endTime) &&
        Objects.equals(this.currentPhase, startBuildOutputBuild.currentPhase) &&
        Objects.equals(this.buildStatus, startBuildOutputBuild.buildStatus) &&
        Objects.equals(this.sourceVersion, startBuildOutputBuild.sourceVersion) &&
        Objects.equals(this.resolvedSourceVersion, startBuildOutputBuild.resolvedSourceVersion) &&
        Objects.equals(this.projectName, startBuildOutputBuild.projectName) &&
        Objects.equals(this.phases, startBuildOutputBuild.phases) &&
        Objects.equals(this.source, startBuildOutputBuild.source) &&
        Objects.equals(this.secondarySources, startBuildOutputBuild.secondarySources) &&
        Objects.equals(this.secondarySourceVersions, startBuildOutputBuild.secondarySourceVersions) &&
        Objects.equals(this.artifacts, startBuildOutputBuild.artifacts) &&
        Objects.equals(this.secondaryArtifacts, startBuildOutputBuild.secondaryArtifacts) &&
        Objects.equals(this.cache, startBuildOutputBuild.cache) &&
        Objects.equals(this.environment, startBuildOutputBuild.environment) &&
        Objects.equals(this.serviceRole, startBuildOutputBuild.serviceRole) &&
        Objects.equals(this.logs, startBuildOutputBuild.logs) &&
        Objects.equals(this.timeoutInMinutes, startBuildOutputBuild.timeoutInMinutes) &&
        Objects.equals(this.queuedTimeoutInMinutes, startBuildOutputBuild.queuedTimeoutInMinutes) &&
        Objects.equals(this.buildComplete, startBuildOutputBuild.buildComplete) &&
        Objects.equals(this.initiator, startBuildOutputBuild.initiator) &&
        Objects.equals(this.vpcConfig, startBuildOutputBuild.vpcConfig) &&
        Objects.equals(this.networkInterface, startBuildOutputBuild.networkInterface) &&
        Objects.equals(this.encryptionKey, startBuildOutputBuild.encryptionKey) &&
        Objects.equals(this.exportedEnvironmentVariables, startBuildOutputBuild.exportedEnvironmentVariables) &&
        Objects.equals(this.reportArns, startBuildOutputBuild.reportArns) &&
        Objects.equals(this.fileSystemLocations, startBuildOutputBuild.fileSystemLocations) &&
        Objects.equals(this.debugSession, startBuildOutputBuild.debugSession) &&
        Objects.equals(this.buildBatchArn, startBuildOutputBuild.buildBatchArn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, arn, buildNumber, startTime, endTime, currentPhase, buildStatus, sourceVersion, resolvedSourceVersion, projectName, phases, source, secondarySources, secondarySourceVersions, artifacts, secondaryArtifacts, cache, environment, serviceRole, logs, timeoutInMinutes, queuedTimeoutInMinutes, buildComplete, initiator, vpcConfig, networkInterface, encryptionKey, exportedEnvironmentVariables, reportArns, fileSystemLocations, debugSession, buildBatchArn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartBuildOutputBuild {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    buildNumber: ").append(toIndentedString(buildNumber)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    currentPhase: ").append(toIndentedString(currentPhase)).append("\n");
    sb.append("    buildStatus: ").append(toIndentedString(buildStatus)).append("\n");
    sb.append("    sourceVersion: ").append(toIndentedString(sourceVersion)).append("\n");
    sb.append("    resolvedSourceVersion: ").append(toIndentedString(resolvedSourceVersion)).append("\n");
    sb.append("    projectName: ").append(toIndentedString(projectName)).append("\n");
    sb.append("    phases: ").append(toIndentedString(phases)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    secondarySources: ").append(toIndentedString(secondarySources)).append("\n");
    sb.append("    secondarySourceVersions: ").append(toIndentedString(secondarySourceVersions)).append("\n");
    sb.append("    artifacts: ").append(toIndentedString(artifacts)).append("\n");
    sb.append("    secondaryArtifacts: ").append(toIndentedString(secondaryArtifacts)).append("\n");
    sb.append("    cache: ").append(toIndentedString(cache)).append("\n");
    sb.append("    environment: ").append(toIndentedString(environment)).append("\n");
    sb.append("    serviceRole: ").append(toIndentedString(serviceRole)).append("\n");
    sb.append("    logs: ").append(toIndentedString(logs)).append("\n");
    sb.append("    timeoutInMinutes: ").append(toIndentedString(timeoutInMinutes)).append("\n");
    sb.append("    queuedTimeoutInMinutes: ").append(toIndentedString(queuedTimeoutInMinutes)).append("\n");
    sb.append("    buildComplete: ").append(toIndentedString(buildComplete)).append("\n");
    sb.append("    initiator: ").append(toIndentedString(initiator)).append("\n");
    sb.append("    vpcConfig: ").append(toIndentedString(vpcConfig)).append("\n");
    sb.append("    networkInterface: ").append(toIndentedString(networkInterface)).append("\n");
    sb.append("    encryptionKey: ").append(toIndentedString(encryptionKey)).append("\n");
    sb.append("    exportedEnvironmentVariables: ").append(toIndentedString(exportedEnvironmentVariables)).append("\n");
    sb.append("    reportArns: ").append(toIndentedString(reportArns)).append("\n");
    sb.append("    fileSystemLocations: ").append(toIndentedString(fileSystemLocations)).append("\n");
    sb.append("    debugSession: ").append(toIndentedString(debugSession)).append("\n");
    sb.append("    buildBatchArn: ").append(toIndentedString(buildBatchArn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("arn");
    openapiFields.add("buildNumber");
    openapiFields.add("startTime");
    openapiFields.add("endTime");
    openapiFields.add("currentPhase");
    openapiFields.add("buildStatus");
    openapiFields.add("sourceVersion");
    openapiFields.add("resolvedSourceVersion");
    openapiFields.add("projectName");
    openapiFields.add("phases");
    openapiFields.add("source");
    openapiFields.add("secondarySources");
    openapiFields.add("secondarySourceVersions");
    openapiFields.add("artifacts");
    openapiFields.add("secondaryArtifacts");
    openapiFields.add("cache");
    openapiFields.add("environment");
    openapiFields.add("serviceRole");
    openapiFields.add("logs");
    openapiFields.add("timeoutInMinutes");
    openapiFields.add("queuedTimeoutInMinutes");
    openapiFields.add("buildComplete");
    openapiFields.add("initiator");
    openapiFields.add("vpcConfig");
    openapiFields.add("networkInterface");
    openapiFields.add("encryptionKey");
    openapiFields.add("exportedEnvironmentVariables");
    openapiFields.add("reportArns");
    openapiFields.add("fileSystemLocations");
    openapiFields.add("debugSession");
    openapiFields.add("buildBatchArn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StartBuildOutputBuild
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StartBuildOutputBuild.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartBuildOutputBuild is not found in the empty JSON string", StartBuildOutputBuild.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StartBuildOutputBuild.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StartBuildOutputBuild` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `id`
      if (jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("id"));
      }
      // validate the optional field `arn`
      if (jsonObj.get("arn") != null && !jsonObj.get("arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("arn"));
      }
      // validate the optional field `buildNumber`
      if (jsonObj.get("buildNumber") != null && !jsonObj.get("buildNumber").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("buildNumber"));
      }
      // validate the optional field `startTime`
      if (jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("startTime"));
      }
      // validate the optional field `endTime`
      if (jsonObj.get("endTime") != null && !jsonObj.get("endTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("endTime"));
      }
      // validate the optional field `currentPhase`
      if (jsonObj.get("currentPhase") != null && !jsonObj.get("currentPhase").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("currentPhase"));
      }
      // validate the optional field `buildStatus`
      if (jsonObj.get("buildStatus") != null && !jsonObj.get("buildStatus").isJsonNull()) {
        StatusType.validateJsonElement(jsonObj.get("buildStatus"));
      }
      // validate the optional field `sourceVersion`
      if (jsonObj.get("sourceVersion") != null && !jsonObj.get("sourceVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("sourceVersion"));
      }
      // validate the optional field `resolvedSourceVersion`
      if (jsonObj.get("resolvedSourceVersion") != null && !jsonObj.get("resolvedSourceVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("resolvedSourceVersion"));
      }
      // validate the optional field `projectName`
      if (jsonObj.get("projectName") != null && !jsonObj.get("projectName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("projectName"));
      }
      // validate the optional field `phases`
      if (jsonObj.get("phases") != null && !jsonObj.get("phases").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("phases"));
      }
      // validate the optional field `source`
      if (jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) {
        BuildSource.validateJsonElement(jsonObj.get("source"));
      }
      // validate the optional field `secondarySources`
      if (jsonObj.get("secondarySources") != null && !jsonObj.get("secondarySources").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("secondarySources"));
      }
      // validate the optional field `secondarySourceVersions`
      if (jsonObj.get("secondarySourceVersions") != null && !jsonObj.get("secondarySourceVersions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("secondarySourceVersions"));
      }
      // validate the optional field `artifacts`
      if (jsonObj.get("artifacts") != null && !jsonObj.get("artifacts").isJsonNull()) {
        BuildArtifacts.validateJsonElement(jsonObj.get("artifacts"));
      }
      // validate the optional field `secondaryArtifacts`
      if (jsonObj.get("secondaryArtifacts") != null && !jsonObj.get("secondaryArtifacts").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("secondaryArtifacts"));
      }
      // validate the optional field `cache`
      if (jsonObj.get("cache") != null && !jsonObj.get("cache").isJsonNull()) {
        BuildCache.validateJsonElement(jsonObj.get("cache"));
      }
      // validate the optional field `environment`
      if (jsonObj.get("environment") != null && !jsonObj.get("environment").isJsonNull()) {
        BuildEnvironment.validateJsonElement(jsonObj.get("environment"));
      }
      // validate the optional field `serviceRole`
      if (jsonObj.get("serviceRole") != null && !jsonObj.get("serviceRole").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("serviceRole"));
      }
      // validate the optional field `logs`
      if (jsonObj.get("logs") != null && !jsonObj.get("logs").isJsonNull()) {
        BuildLogs.validateJsonElement(jsonObj.get("logs"));
      }
      // validate the optional field `timeoutInMinutes`
      if (jsonObj.get("timeoutInMinutes") != null && !jsonObj.get("timeoutInMinutes").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("timeoutInMinutes"));
      }
      // validate the optional field `queuedTimeoutInMinutes`
      if (jsonObj.get("queuedTimeoutInMinutes") != null && !jsonObj.get("queuedTimeoutInMinutes").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("queuedTimeoutInMinutes"));
      }
      // validate the optional field `buildComplete`
      if (jsonObj.get("buildComplete") != null && !jsonObj.get("buildComplete").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("buildComplete"));
      }
      // validate the optional field `initiator`
      if (jsonObj.get("initiator") != null && !jsonObj.get("initiator").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("initiator"));
      }
      // validate the optional field `vpcConfig`
      if (jsonObj.get("vpcConfig") != null && !jsonObj.get("vpcConfig").isJsonNull()) {
        BuildVpcConfig.validateJsonElement(jsonObj.get("vpcConfig"));
      }
      // validate the optional field `networkInterface`
      if (jsonObj.get("networkInterface") != null && !jsonObj.get("networkInterface").isJsonNull()) {
        BuildNetworkInterface.validateJsonElement(jsonObj.get("networkInterface"));
      }
      // validate the optional field `encryptionKey`
      if (jsonObj.get("encryptionKey") != null && !jsonObj.get("encryptionKey").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("encryptionKey"));
      }
      // validate the optional field `exportedEnvironmentVariables`
      if (jsonObj.get("exportedEnvironmentVariables") != null && !jsonObj.get("exportedEnvironmentVariables").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("exportedEnvironmentVariables"));
      }
      // validate the optional field `reportArns`
      if (jsonObj.get("reportArns") != null && !jsonObj.get("reportArns").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("reportArns"));
      }
      // validate the optional field `fileSystemLocations`
      if (jsonObj.get("fileSystemLocations") != null && !jsonObj.get("fileSystemLocations").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("fileSystemLocations"));
      }
      // validate the optional field `debugSession`
      if (jsonObj.get("debugSession") != null && !jsonObj.get("debugSession").isJsonNull()) {
        BuildDebugSession.validateJsonElement(jsonObj.get("debugSession"));
      }
      // validate the optional field `buildBatchArn`
      if (jsonObj.get("buildBatchArn") != null && !jsonObj.get("buildBatchArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("buildBatchArn"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartBuildOutputBuild.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartBuildOutputBuild' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartBuildOutputBuild> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartBuildOutputBuild.class));

       return (TypeAdapter<T>) new TypeAdapter<StartBuildOutputBuild>() {
           @Override
           public void write(JsonWriter out, StartBuildOutputBuild value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StartBuildOutputBuild read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StartBuildOutputBuild given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StartBuildOutputBuild
   * @throws IOException if the JSON string is invalid with respect to StartBuildOutputBuild
   */
  public static StartBuildOutputBuild fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartBuildOutputBuild.class);
  }

  /**
   * Convert an instance of StartBuildOutputBuild to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

