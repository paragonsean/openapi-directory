/*
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;Contains code coverage report information.&lt;/p&gt; &lt;p&gt;Line coverage measures how many statements your tests cover. A statement is a single instruction, not including comments, conditionals, etc.&lt;/p&gt; &lt;p&gt;Branch coverage determines if your tests cover every possible branch of a control structure, such as an &lt;code&gt;if&lt;/code&gt; or &lt;code&gt;case&lt;/code&gt; statement.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:18.687160-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CodeCoverage {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_REPORT_A_R_N = "reportARN";
  @SerializedName(SERIALIZED_NAME_REPORT_A_R_N)
  private String reportARN;

  public static final String SERIALIZED_NAME_FILE_PATH = "filePath";
  @SerializedName(SERIALIZED_NAME_FILE_PATH)
  private String filePath;

  public static final String SERIALIZED_NAME_LINE_COVERAGE_PERCENTAGE = "lineCoveragePercentage";
  @SerializedName(SERIALIZED_NAME_LINE_COVERAGE_PERCENTAGE)
  private Double lineCoveragePercentage;

  public static final String SERIALIZED_NAME_LINES_COVERED = "linesCovered";
  @SerializedName(SERIALIZED_NAME_LINES_COVERED)
  private Integer linesCovered;

  public static final String SERIALIZED_NAME_LINES_MISSED = "linesMissed";
  @SerializedName(SERIALIZED_NAME_LINES_MISSED)
  private Integer linesMissed;

  public static final String SERIALIZED_NAME_BRANCH_COVERAGE_PERCENTAGE = "branchCoveragePercentage";
  @SerializedName(SERIALIZED_NAME_BRANCH_COVERAGE_PERCENTAGE)
  private Double branchCoveragePercentage;

  public static final String SERIALIZED_NAME_BRANCHES_COVERED = "branchesCovered";
  @SerializedName(SERIALIZED_NAME_BRANCHES_COVERED)
  private Integer branchesCovered;

  public static final String SERIALIZED_NAME_BRANCHES_MISSED = "branchesMissed";
  @SerializedName(SERIALIZED_NAME_BRANCHES_MISSED)
  private Integer branchesMissed;

  public static final String SERIALIZED_NAME_EXPIRED = "expired";
  @SerializedName(SERIALIZED_NAME_EXPIRED)
  private OffsetDateTime expired;

  public CodeCoverage() {
  }

  public CodeCoverage id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public CodeCoverage reportARN(String reportARN) {
    this.reportARN = reportARN;
    return this;
  }

  /**
   * Get reportARN
   * @return reportARN
   */
  @javax.annotation.Nullable
  public String getReportARN() {
    return reportARN;
  }

  public void setReportARN(String reportARN) {
    this.reportARN = reportARN;
  }


  public CodeCoverage filePath(String filePath) {
    this.filePath = filePath;
    return this;
  }

  /**
   * Get filePath
   * @return filePath
   */
  @javax.annotation.Nullable
  public String getFilePath() {
    return filePath;
  }

  public void setFilePath(String filePath) {
    this.filePath = filePath;
  }


  public CodeCoverage lineCoveragePercentage(Double lineCoveragePercentage) {
    this.lineCoveragePercentage = lineCoveragePercentage;
    return this;
  }

  /**
   * Get lineCoveragePercentage
   * @return lineCoveragePercentage
   */
  @javax.annotation.Nullable
  public Double getLineCoveragePercentage() {
    return lineCoveragePercentage;
  }

  public void setLineCoveragePercentage(Double lineCoveragePercentage) {
    this.lineCoveragePercentage = lineCoveragePercentage;
  }


  public CodeCoverage linesCovered(Integer linesCovered) {
    this.linesCovered = linesCovered;
    return this;
  }

  /**
   * Get linesCovered
   * @return linesCovered
   */
  @javax.annotation.Nullable
  public Integer getLinesCovered() {
    return linesCovered;
  }

  public void setLinesCovered(Integer linesCovered) {
    this.linesCovered = linesCovered;
  }


  public CodeCoverage linesMissed(Integer linesMissed) {
    this.linesMissed = linesMissed;
    return this;
  }

  /**
   * Get linesMissed
   * @return linesMissed
   */
  @javax.annotation.Nullable
  public Integer getLinesMissed() {
    return linesMissed;
  }

  public void setLinesMissed(Integer linesMissed) {
    this.linesMissed = linesMissed;
  }


  public CodeCoverage branchCoveragePercentage(Double branchCoveragePercentage) {
    this.branchCoveragePercentage = branchCoveragePercentage;
    return this;
  }

  /**
   * Get branchCoveragePercentage
   * @return branchCoveragePercentage
   */
  @javax.annotation.Nullable
  public Double getBranchCoveragePercentage() {
    return branchCoveragePercentage;
  }

  public void setBranchCoveragePercentage(Double branchCoveragePercentage) {
    this.branchCoveragePercentage = branchCoveragePercentage;
  }


  public CodeCoverage branchesCovered(Integer branchesCovered) {
    this.branchesCovered = branchesCovered;
    return this;
  }

  /**
   * Get branchesCovered
   * @return branchesCovered
   */
  @javax.annotation.Nullable
  public Integer getBranchesCovered() {
    return branchesCovered;
  }

  public void setBranchesCovered(Integer branchesCovered) {
    this.branchesCovered = branchesCovered;
  }


  public CodeCoverage branchesMissed(Integer branchesMissed) {
    this.branchesMissed = branchesMissed;
    return this;
  }

  /**
   * Get branchesMissed
   * @return branchesMissed
   */
  @javax.annotation.Nullable
  public Integer getBranchesMissed() {
    return branchesMissed;
  }

  public void setBranchesMissed(Integer branchesMissed) {
    this.branchesMissed = branchesMissed;
  }


  public CodeCoverage expired(OffsetDateTime expired) {
    this.expired = expired;
    return this;
  }

  /**
   * Get expired
   * @return expired
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpired() {
    return expired;
  }

  public void setExpired(OffsetDateTime expired) {
    this.expired = expired;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CodeCoverage codeCoverage = (CodeCoverage) o;
    return Objects.equals(this.id, codeCoverage.id) &&
        Objects.equals(this.reportARN, codeCoverage.reportARN) &&
        Objects.equals(this.filePath, codeCoverage.filePath) &&
        Objects.equals(this.lineCoveragePercentage, codeCoverage.lineCoveragePercentage) &&
        Objects.equals(this.linesCovered, codeCoverage.linesCovered) &&
        Objects.equals(this.linesMissed, codeCoverage.linesMissed) &&
        Objects.equals(this.branchCoveragePercentage, codeCoverage.branchCoveragePercentage) &&
        Objects.equals(this.branchesCovered, codeCoverage.branchesCovered) &&
        Objects.equals(this.branchesMissed, codeCoverage.branchesMissed) &&
        Objects.equals(this.expired, codeCoverage.expired);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, reportARN, filePath, lineCoveragePercentage, linesCovered, linesMissed, branchCoveragePercentage, branchesCovered, branchesMissed, expired);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CodeCoverage {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    reportARN: ").append(toIndentedString(reportARN)).append("\n");
    sb.append("    filePath: ").append(toIndentedString(filePath)).append("\n");
    sb.append("    lineCoveragePercentage: ").append(toIndentedString(lineCoveragePercentage)).append("\n");
    sb.append("    linesCovered: ").append(toIndentedString(linesCovered)).append("\n");
    sb.append("    linesMissed: ").append(toIndentedString(linesMissed)).append("\n");
    sb.append("    branchCoveragePercentage: ").append(toIndentedString(branchCoveragePercentage)).append("\n");
    sb.append("    branchesCovered: ").append(toIndentedString(branchesCovered)).append("\n");
    sb.append("    branchesMissed: ").append(toIndentedString(branchesMissed)).append("\n");
    sb.append("    expired: ").append(toIndentedString(expired)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("reportARN");
    openapiFields.add("filePath");
    openapiFields.add("lineCoveragePercentage");
    openapiFields.add("linesCovered");
    openapiFields.add("linesMissed");
    openapiFields.add("branchCoveragePercentage");
    openapiFields.add("branchesCovered");
    openapiFields.add("branchesMissed");
    openapiFields.add("expired");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CodeCoverage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CodeCoverage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CodeCoverage is not found in the empty JSON string", CodeCoverage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CodeCoverage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CodeCoverage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `id`
      if (jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("id"));
      }
      // validate the optional field `reportARN`
      if (jsonObj.get("reportARN") != null && !jsonObj.get("reportARN").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("reportARN"));
      }
      // validate the optional field `filePath`
      if (jsonObj.get("filePath") != null && !jsonObj.get("filePath").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("filePath"));
      }
      // validate the optional field `lineCoveragePercentage`
      if (jsonObj.get("lineCoveragePercentage") != null && !jsonObj.get("lineCoveragePercentage").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("lineCoveragePercentage"));
      }
      // validate the optional field `linesCovered`
      if (jsonObj.get("linesCovered") != null && !jsonObj.get("linesCovered").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("linesCovered"));
      }
      // validate the optional field `linesMissed`
      if (jsonObj.get("linesMissed") != null && !jsonObj.get("linesMissed").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("linesMissed"));
      }
      // validate the optional field `branchCoveragePercentage`
      if (jsonObj.get("branchCoveragePercentage") != null && !jsonObj.get("branchCoveragePercentage").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("branchCoveragePercentage"));
      }
      // validate the optional field `branchesCovered`
      if (jsonObj.get("branchesCovered") != null && !jsonObj.get("branchesCovered").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("branchesCovered"));
      }
      // validate the optional field `branchesMissed`
      if (jsonObj.get("branchesMissed") != null && !jsonObj.get("branchesMissed").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("branchesMissed"));
      }
      // validate the optional field `expired`
      if (jsonObj.get("expired") != null && !jsonObj.get("expired").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("expired"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CodeCoverage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CodeCoverage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CodeCoverage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CodeCoverage.class));

       return (TypeAdapter<T>) new TypeAdapter<CodeCoverage>() {
           @Override
           public void write(JsonWriter out, CodeCoverage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CodeCoverage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CodeCoverage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CodeCoverage
   * @throws IOException if the JSON string is invalid with respect to CodeCoverage
   */
  public static CodeCoverage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CodeCoverage.class);
  }

  /**
   * Convert an instance of CodeCoverage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

