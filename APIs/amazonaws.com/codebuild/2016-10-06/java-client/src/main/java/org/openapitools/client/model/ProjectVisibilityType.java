/*
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * &lt;p&gt;Specifies the visibility of the project&#39;s builds. Possible values are:&lt;/p&gt; &lt;dl&gt; &lt;dt&gt;PUBLIC_READ&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;The project builds are visible to the public.&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;PRIVATE&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;The project builds are not visible to the public.&lt;/p&gt; &lt;/dd&gt; &lt;/dl&gt;
 */
@JsonAdapter(ProjectVisibilityType.Adapter.class)
public enum ProjectVisibilityType {
  
  PUBLIC_READ("PUBLIC_READ"),
  
  PRIVATE("PRIVATE");

  private String value;

  ProjectVisibilityType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static ProjectVisibilityType fromValue(String value) {
    for (ProjectVisibilityType b : ProjectVisibilityType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<ProjectVisibilityType> {
    @Override
    public void write(final JsonWriter jsonWriter, final ProjectVisibilityType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public ProjectVisibilityType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return ProjectVisibilityType.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    ProjectVisibilityType.fromValue(value);
  }
}

