/*
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BuildGroupCurrentBuildSummary;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains information about a batch build build group. Build groups are used to combine builds that can run in parallel, while still being able to set dependencies on other build groups.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:18.687160-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BuildGroup {
  public static final String SERIALIZED_NAME_IDENTIFIER = "identifier";
  @SerializedName(SERIALIZED_NAME_IDENTIFIER)
  private String identifier;

  public static final String SERIALIZED_NAME_DEPENDS_ON = "dependsOn";
  @SerializedName(SERIALIZED_NAME_DEPENDS_ON)
  private List dependsOn;

  public static final String SERIALIZED_NAME_IGNORE_FAILURE = "ignoreFailure";
  @SerializedName(SERIALIZED_NAME_IGNORE_FAILURE)
  private Boolean ignoreFailure;

  public static final String SERIALIZED_NAME_CURRENT_BUILD_SUMMARY = "currentBuildSummary";
  @SerializedName(SERIALIZED_NAME_CURRENT_BUILD_SUMMARY)
  private BuildGroupCurrentBuildSummary currentBuildSummary;

  public static final String SERIALIZED_NAME_PRIOR_BUILD_SUMMARY_LIST = "priorBuildSummaryList";
  @SerializedName(SERIALIZED_NAME_PRIOR_BUILD_SUMMARY_LIST)
  private List priorBuildSummaryList;

  public BuildGroup() {
  }

  public BuildGroup identifier(String identifier) {
    this.identifier = identifier;
    return this;
  }

  /**
   * Get identifier
   * @return identifier
   */
  @javax.annotation.Nullable
  public String getIdentifier() {
    return identifier;
  }

  public void setIdentifier(String identifier) {
    this.identifier = identifier;
  }


  public BuildGroup dependsOn(List dependsOn) {
    this.dependsOn = dependsOn;
    return this;
  }

  /**
   * Get dependsOn
   * @return dependsOn
   */
  @javax.annotation.Nullable
  public List getDependsOn() {
    return dependsOn;
  }

  public void setDependsOn(List dependsOn) {
    this.dependsOn = dependsOn;
  }


  public BuildGroup ignoreFailure(Boolean ignoreFailure) {
    this.ignoreFailure = ignoreFailure;
    return this;
  }

  /**
   * Get ignoreFailure
   * @return ignoreFailure
   */
  @javax.annotation.Nullable
  public Boolean getIgnoreFailure() {
    return ignoreFailure;
  }

  public void setIgnoreFailure(Boolean ignoreFailure) {
    this.ignoreFailure = ignoreFailure;
  }


  public BuildGroup currentBuildSummary(BuildGroupCurrentBuildSummary currentBuildSummary) {
    this.currentBuildSummary = currentBuildSummary;
    return this;
  }

  /**
   * Get currentBuildSummary
   * @return currentBuildSummary
   */
  @javax.annotation.Nullable
  public BuildGroupCurrentBuildSummary getCurrentBuildSummary() {
    return currentBuildSummary;
  }

  public void setCurrentBuildSummary(BuildGroupCurrentBuildSummary currentBuildSummary) {
    this.currentBuildSummary = currentBuildSummary;
  }


  public BuildGroup priorBuildSummaryList(List priorBuildSummaryList) {
    this.priorBuildSummaryList = priorBuildSummaryList;
    return this;
  }

  /**
   * Get priorBuildSummaryList
   * @return priorBuildSummaryList
   */
  @javax.annotation.Nullable
  public List getPriorBuildSummaryList() {
    return priorBuildSummaryList;
  }

  public void setPriorBuildSummaryList(List priorBuildSummaryList) {
    this.priorBuildSummaryList = priorBuildSummaryList;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BuildGroup buildGroup = (BuildGroup) o;
    return Objects.equals(this.identifier, buildGroup.identifier) &&
        Objects.equals(this.dependsOn, buildGroup.dependsOn) &&
        Objects.equals(this.ignoreFailure, buildGroup.ignoreFailure) &&
        Objects.equals(this.currentBuildSummary, buildGroup.currentBuildSummary) &&
        Objects.equals(this.priorBuildSummaryList, buildGroup.priorBuildSummaryList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(identifier, dependsOn, ignoreFailure, currentBuildSummary, priorBuildSummaryList);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BuildGroup {\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    dependsOn: ").append(toIndentedString(dependsOn)).append("\n");
    sb.append("    ignoreFailure: ").append(toIndentedString(ignoreFailure)).append("\n");
    sb.append("    currentBuildSummary: ").append(toIndentedString(currentBuildSummary)).append("\n");
    sb.append("    priorBuildSummaryList: ").append(toIndentedString(priorBuildSummaryList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("identifier");
    openapiFields.add("dependsOn");
    openapiFields.add("ignoreFailure");
    openapiFields.add("currentBuildSummary");
    openapiFields.add("priorBuildSummaryList");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BuildGroup
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BuildGroup.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BuildGroup is not found in the empty JSON string", BuildGroup.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BuildGroup.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BuildGroup` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `identifier`
      if (jsonObj.get("identifier") != null && !jsonObj.get("identifier").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("identifier"));
      }
      // validate the optional field `dependsOn`
      if (jsonObj.get("dependsOn") != null && !jsonObj.get("dependsOn").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("dependsOn"));
      }
      // validate the optional field `ignoreFailure`
      if (jsonObj.get("ignoreFailure") != null && !jsonObj.get("ignoreFailure").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("ignoreFailure"));
      }
      // validate the optional field `currentBuildSummary`
      if (jsonObj.get("currentBuildSummary") != null && !jsonObj.get("currentBuildSummary").isJsonNull()) {
        BuildGroupCurrentBuildSummary.validateJsonElement(jsonObj.get("currentBuildSummary"));
      }
      // validate the optional field `priorBuildSummaryList`
      if (jsonObj.get("priorBuildSummaryList") != null && !jsonObj.get("priorBuildSummaryList").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("priorBuildSummaryList"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BuildGroup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BuildGroup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BuildGroup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BuildGroup.class));

       return (TypeAdapter<T>) new TypeAdapter<BuildGroup>() {
           @Override
           public void write(JsonWriter out, BuildGroup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BuildGroup read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BuildGroup given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BuildGroup
   * @throws IOException if the JSON string is invalid with respect to BuildGroup
   */
  public static BuildGroup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BuildGroup.class);
  }

  /**
   * Convert an instance of BuildGroup to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

