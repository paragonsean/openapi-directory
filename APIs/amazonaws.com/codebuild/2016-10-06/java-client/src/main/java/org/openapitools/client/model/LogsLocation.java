/*
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.LogsLocationCloudWatchLogs;
import org.openapitools.client.model.LogsLocationS3Logs;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about build logs in CloudWatch Logs.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:18.687160-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LogsLocation {
  public static final String SERIALIZED_NAME_GROUP_NAME = "groupName";
  @SerializedName(SERIALIZED_NAME_GROUP_NAME)
  private String groupName;

  public static final String SERIALIZED_NAME_STREAM_NAME = "streamName";
  @SerializedName(SERIALIZED_NAME_STREAM_NAME)
  private String streamName;

  public static final String SERIALIZED_NAME_DEEP_LINK = "deepLink";
  @SerializedName(SERIALIZED_NAME_DEEP_LINK)
  private String deepLink;

  public static final String SERIALIZED_NAME_S3_DEEP_LINK = "s3DeepLink";
  @SerializedName(SERIALIZED_NAME_S3_DEEP_LINK)
  private String s3DeepLink;

  public static final String SERIALIZED_NAME_CLOUD_WATCH_LOGS_ARN = "cloudWatchLogsArn";
  @SerializedName(SERIALIZED_NAME_CLOUD_WATCH_LOGS_ARN)
  private String cloudWatchLogsArn;

  public static final String SERIALIZED_NAME_S3_LOGS_ARN = "s3LogsArn";
  @SerializedName(SERIALIZED_NAME_S3_LOGS_ARN)
  private String s3LogsArn;

  public static final String SERIALIZED_NAME_CLOUD_WATCH_LOGS = "cloudWatchLogs";
  @SerializedName(SERIALIZED_NAME_CLOUD_WATCH_LOGS)
  private LogsLocationCloudWatchLogs cloudWatchLogs;

  public static final String SERIALIZED_NAME_S3_LOGS = "s3Logs";
  @SerializedName(SERIALIZED_NAME_S3_LOGS)
  private LogsLocationS3Logs s3Logs;

  public LogsLocation() {
  }

  public LogsLocation groupName(String groupName) {
    this.groupName = groupName;
    return this;
  }

  /**
   * Get groupName
   * @return groupName
   */
  @javax.annotation.Nullable
  public String getGroupName() {
    return groupName;
  }

  public void setGroupName(String groupName) {
    this.groupName = groupName;
  }


  public LogsLocation streamName(String streamName) {
    this.streamName = streamName;
    return this;
  }

  /**
   * Get streamName
   * @return streamName
   */
  @javax.annotation.Nullable
  public String getStreamName() {
    return streamName;
  }

  public void setStreamName(String streamName) {
    this.streamName = streamName;
  }


  public LogsLocation deepLink(String deepLink) {
    this.deepLink = deepLink;
    return this;
  }

  /**
   * Get deepLink
   * @return deepLink
   */
  @javax.annotation.Nullable
  public String getDeepLink() {
    return deepLink;
  }

  public void setDeepLink(String deepLink) {
    this.deepLink = deepLink;
  }


  public LogsLocation s3DeepLink(String s3DeepLink) {
    this.s3DeepLink = s3DeepLink;
    return this;
  }

  /**
   * Get s3DeepLink
   * @return s3DeepLink
   */
  @javax.annotation.Nullable
  public String getS3DeepLink() {
    return s3DeepLink;
  }

  public void setS3DeepLink(String s3DeepLink) {
    this.s3DeepLink = s3DeepLink;
  }


  public LogsLocation cloudWatchLogsArn(String cloudWatchLogsArn) {
    this.cloudWatchLogsArn = cloudWatchLogsArn;
    return this;
  }

  /**
   * Get cloudWatchLogsArn
   * @return cloudWatchLogsArn
   */
  @javax.annotation.Nullable
  public String getCloudWatchLogsArn() {
    return cloudWatchLogsArn;
  }

  public void setCloudWatchLogsArn(String cloudWatchLogsArn) {
    this.cloudWatchLogsArn = cloudWatchLogsArn;
  }


  public LogsLocation s3LogsArn(String s3LogsArn) {
    this.s3LogsArn = s3LogsArn;
    return this;
  }

  /**
   * Get s3LogsArn
   * @return s3LogsArn
   */
  @javax.annotation.Nullable
  public String getS3LogsArn() {
    return s3LogsArn;
  }

  public void setS3LogsArn(String s3LogsArn) {
    this.s3LogsArn = s3LogsArn;
  }


  public LogsLocation cloudWatchLogs(LogsLocationCloudWatchLogs cloudWatchLogs) {
    this.cloudWatchLogs = cloudWatchLogs;
    return this;
  }

  /**
   * Get cloudWatchLogs
   * @return cloudWatchLogs
   */
  @javax.annotation.Nullable
  public LogsLocationCloudWatchLogs getCloudWatchLogs() {
    return cloudWatchLogs;
  }

  public void setCloudWatchLogs(LogsLocationCloudWatchLogs cloudWatchLogs) {
    this.cloudWatchLogs = cloudWatchLogs;
  }


  public LogsLocation s3Logs(LogsLocationS3Logs s3Logs) {
    this.s3Logs = s3Logs;
    return this;
  }

  /**
   * Get s3Logs
   * @return s3Logs
   */
  @javax.annotation.Nullable
  public LogsLocationS3Logs getS3Logs() {
    return s3Logs;
  }

  public void setS3Logs(LogsLocationS3Logs s3Logs) {
    this.s3Logs = s3Logs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LogsLocation logsLocation = (LogsLocation) o;
    return Objects.equals(this.groupName, logsLocation.groupName) &&
        Objects.equals(this.streamName, logsLocation.streamName) &&
        Objects.equals(this.deepLink, logsLocation.deepLink) &&
        Objects.equals(this.s3DeepLink, logsLocation.s3DeepLink) &&
        Objects.equals(this.cloudWatchLogsArn, logsLocation.cloudWatchLogsArn) &&
        Objects.equals(this.s3LogsArn, logsLocation.s3LogsArn) &&
        Objects.equals(this.cloudWatchLogs, logsLocation.cloudWatchLogs) &&
        Objects.equals(this.s3Logs, logsLocation.s3Logs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(groupName, streamName, deepLink, s3DeepLink, cloudWatchLogsArn, s3LogsArn, cloudWatchLogs, s3Logs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LogsLocation {\n");
    sb.append("    groupName: ").append(toIndentedString(groupName)).append("\n");
    sb.append("    streamName: ").append(toIndentedString(streamName)).append("\n");
    sb.append("    deepLink: ").append(toIndentedString(deepLink)).append("\n");
    sb.append("    s3DeepLink: ").append(toIndentedString(s3DeepLink)).append("\n");
    sb.append("    cloudWatchLogsArn: ").append(toIndentedString(cloudWatchLogsArn)).append("\n");
    sb.append("    s3LogsArn: ").append(toIndentedString(s3LogsArn)).append("\n");
    sb.append("    cloudWatchLogs: ").append(toIndentedString(cloudWatchLogs)).append("\n");
    sb.append("    s3Logs: ").append(toIndentedString(s3Logs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("groupName");
    openapiFields.add("streamName");
    openapiFields.add("deepLink");
    openapiFields.add("s3DeepLink");
    openapiFields.add("cloudWatchLogsArn");
    openapiFields.add("s3LogsArn");
    openapiFields.add("cloudWatchLogs");
    openapiFields.add("s3Logs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LogsLocation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LogsLocation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LogsLocation is not found in the empty JSON string", LogsLocation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LogsLocation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LogsLocation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `groupName`
      if (jsonObj.get("groupName") != null && !jsonObj.get("groupName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("groupName"));
      }
      // validate the optional field `streamName`
      if (jsonObj.get("streamName") != null && !jsonObj.get("streamName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("streamName"));
      }
      // validate the optional field `deepLink`
      if (jsonObj.get("deepLink") != null && !jsonObj.get("deepLink").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("deepLink"));
      }
      // validate the optional field `s3DeepLink`
      if (jsonObj.get("s3DeepLink") != null && !jsonObj.get("s3DeepLink").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("s3DeepLink"));
      }
      // validate the optional field `cloudWatchLogsArn`
      if (jsonObj.get("cloudWatchLogsArn") != null && !jsonObj.get("cloudWatchLogsArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("cloudWatchLogsArn"));
      }
      // validate the optional field `s3LogsArn`
      if (jsonObj.get("s3LogsArn") != null && !jsonObj.get("s3LogsArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("s3LogsArn"));
      }
      // validate the optional field `cloudWatchLogs`
      if (jsonObj.get("cloudWatchLogs") != null && !jsonObj.get("cloudWatchLogs").isJsonNull()) {
        LogsLocationCloudWatchLogs.validateJsonElement(jsonObj.get("cloudWatchLogs"));
      }
      // validate the optional field `s3Logs`
      if (jsonObj.get("s3Logs") != null && !jsonObj.get("s3Logs").isJsonNull()) {
        LogsLocationS3Logs.validateJsonElement(jsonObj.get("s3Logs"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LogsLocation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LogsLocation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LogsLocation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LogsLocation.class));

       return (TypeAdapter<T>) new TypeAdapter<LogsLocation>() {
           @Override
           public void write(JsonWriter out, LogsLocation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LogsLocation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LogsLocation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LogsLocation
   * @throws IOException if the JSON string is invalid with respect to LogsLocation
   */
  public static LogsLocation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LogsLocation.class);
  }

  /**
   * Convert an instance of LogsLocation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

