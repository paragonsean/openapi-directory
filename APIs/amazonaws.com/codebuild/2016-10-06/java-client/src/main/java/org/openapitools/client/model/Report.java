/*
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ReportCodeCoverageSummary;
import org.openapitools.client.model.ReportExportConfig;
import org.openapitools.client.model.ReportStatusType;
import org.openapitools.client.model.ReportTestSummary;
import org.openapitools.client.model.ReportType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about the results from running a series of test cases during the run of a build project. The test cases are specified in the buildspec for the build project using one or more paths to the test case files. You can specify any type of tests you want, such as unit tests, integration tests, and functional tests. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:18.687160-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Report {
  public static final String SERIALIZED_NAME_ARN = "arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private ReportType type;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_REPORT_GROUP_ARN = "reportGroupArn";
  @SerializedName(SERIALIZED_NAME_REPORT_GROUP_ARN)
  private String reportGroupArn;

  public static final String SERIALIZED_NAME_EXECUTION_ID = "executionId";
  @SerializedName(SERIALIZED_NAME_EXECUTION_ID)
  private String executionId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private ReportStatusType status;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_EXPIRED = "expired";
  @SerializedName(SERIALIZED_NAME_EXPIRED)
  private OffsetDateTime expired;

  public static final String SERIALIZED_NAME_EXPORT_CONFIG = "exportConfig";
  @SerializedName(SERIALIZED_NAME_EXPORT_CONFIG)
  private ReportExportConfig exportConfig;

  public static final String SERIALIZED_NAME_TRUNCATED = "truncated";
  @SerializedName(SERIALIZED_NAME_TRUNCATED)
  private Boolean truncated;

  public static final String SERIALIZED_NAME_TEST_SUMMARY = "testSummary";
  @SerializedName(SERIALIZED_NAME_TEST_SUMMARY)
  private ReportTestSummary testSummary;

  public static final String SERIALIZED_NAME_CODE_COVERAGE_SUMMARY = "codeCoverageSummary";
  @SerializedName(SERIALIZED_NAME_CODE_COVERAGE_SUMMARY)
  private ReportCodeCoverageSummary codeCoverageSummary;

  public Report() {
  }

  public Report arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public Report type(ReportType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public ReportType getType() {
    return type;
  }

  public void setType(ReportType type) {
    this.type = type;
  }


  public Report name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Report reportGroupArn(String reportGroupArn) {
    this.reportGroupArn = reportGroupArn;
    return this;
  }

  /**
   * Get reportGroupArn
   * @return reportGroupArn
   */
  @javax.annotation.Nullable
  public String getReportGroupArn() {
    return reportGroupArn;
  }

  public void setReportGroupArn(String reportGroupArn) {
    this.reportGroupArn = reportGroupArn;
  }


  public Report executionId(String executionId) {
    this.executionId = executionId;
    return this;
  }

  /**
   * Get executionId
   * @return executionId
   */
  @javax.annotation.Nullable
  public String getExecutionId() {
    return executionId;
  }

  public void setExecutionId(String executionId) {
    this.executionId = executionId;
  }


  public Report status(ReportStatusType status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public ReportStatusType getStatus() {
    return status;
  }

  public void setStatus(ReportStatusType status) {
    this.status = status;
  }


  public Report created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public Report expired(OffsetDateTime expired) {
    this.expired = expired;
    return this;
  }

  /**
   * Get expired
   * @return expired
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpired() {
    return expired;
  }

  public void setExpired(OffsetDateTime expired) {
    this.expired = expired;
  }


  public Report exportConfig(ReportExportConfig exportConfig) {
    this.exportConfig = exportConfig;
    return this;
  }

  /**
   * Get exportConfig
   * @return exportConfig
   */
  @javax.annotation.Nullable
  public ReportExportConfig getExportConfig() {
    return exportConfig;
  }

  public void setExportConfig(ReportExportConfig exportConfig) {
    this.exportConfig = exportConfig;
  }


  public Report truncated(Boolean truncated) {
    this.truncated = truncated;
    return this;
  }

  /**
   * Get truncated
   * @return truncated
   */
  @javax.annotation.Nullable
  public Boolean getTruncated() {
    return truncated;
  }

  public void setTruncated(Boolean truncated) {
    this.truncated = truncated;
  }


  public Report testSummary(ReportTestSummary testSummary) {
    this.testSummary = testSummary;
    return this;
  }

  /**
   * Get testSummary
   * @return testSummary
   */
  @javax.annotation.Nullable
  public ReportTestSummary getTestSummary() {
    return testSummary;
  }

  public void setTestSummary(ReportTestSummary testSummary) {
    this.testSummary = testSummary;
  }


  public Report codeCoverageSummary(ReportCodeCoverageSummary codeCoverageSummary) {
    this.codeCoverageSummary = codeCoverageSummary;
    return this;
  }

  /**
   * Get codeCoverageSummary
   * @return codeCoverageSummary
   */
  @javax.annotation.Nullable
  public ReportCodeCoverageSummary getCodeCoverageSummary() {
    return codeCoverageSummary;
  }

  public void setCodeCoverageSummary(ReportCodeCoverageSummary codeCoverageSummary) {
    this.codeCoverageSummary = codeCoverageSummary;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Report report = (Report) o;
    return Objects.equals(this.arn, report.arn) &&
        Objects.equals(this.type, report.type) &&
        Objects.equals(this.name, report.name) &&
        Objects.equals(this.reportGroupArn, report.reportGroupArn) &&
        Objects.equals(this.executionId, report.executionId) &&
        Objects.equals(this.status, report.status) &&
        Objects.equals(this.created, report.created) &&
        Objects.equals(this.expired, report.expired) &&
        Objects.equals(this.exportConfig, report.exportConfig) &&
        Objects.equals(this.truncated, report.truncated) &&
        Objects.equals(this.testSummary, report.testSummary) &&
        Objects.equals(this.codeCoverageSummary, report.codeCoverageSummary);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arn, type, name, reportGroupArn, executionId, status, created, expired, exportConfig, truncated, testSummary, codeCoverageSummary);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Report {\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    reportGroupArn: ").append(toIndentedString(reportGroupArn)).append("\n");
    sb.append("    executionId: ").append(toIndentedString(executionId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    expired: ").append(toIndentedString(expired)).append("\n");
    sb.append("    exportConfig: ").append(toIndentedString(exportConfig)).append("\n");
    sb.append("    truncated: ").append(toIndentedString(truncated)).append("\n");
    sb.append("    testSummary: ").append(toIndentedString(testSummary)).append("\n");
    sb.append("    codeCoverageSummary: ").append(toIndentedString(codeCoverageSummary)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arn");
    openapiFields.add("type");
    openapiFields.add("name");
    openapiFields.add("reportGroupArn");
    openapiFields.add("executionId");
    openapiFields.add("status");
    openapiFields.add("created");
    openapiFields.add("expired");
    openapiFields.add("exportConfig");
    openapiFields.add("truncated");
    openapiFields.add("testSummary");
    openapiFields.add("codeCoverageSummary");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Report
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Report.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Report is not found in the empty JSON string", Report.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Report.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Report` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `arn`
      if (jsonObj.get("arn") != null && !jsonObj.get("arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("arn"));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        ReportType.validateJsonElement(jsonObj.get("type"));
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("name"));
      }
      // validate the optional field `reportGroupArn`
      if (jsonObj.get("reportGroupArn") != null && !jsonObj.get("reportGroupArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("reportGroupArn"));
      }
      // validate the optional field `executionId`
      if (jsonObj.get("executionId") != null && !jsonObj.get("executionId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("executionId"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        ReportStatusType.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `created`
      if (jsonObj.get("created") != null && !jsonObj.get("created").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("created"));
      }
      // validate the optional field `expired`
      if (jsonObj.get("expired") != null && !jsonObj.get("expired").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("expired"));
      }
      // validate the optional field `exportConfig`
      if (jsonObj.get("exportConfig") != null && !jsonObj.get("exportConfig").isJsonNull()) {
        ReportExportConfig.validateJsonElement(jsonObj.get("exportConfig"));
      }
      // validate the optional field `truncated`
      if (jsonObj.get("truncated") != null && !jsonObj.get("truncated").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("truncated"));
      }
      // validate the optional field `testSummary`
      if (jsonObj.get("testSummary") != null && !jsonObj.get("testSummary").isJsonNull()) {
        ReportTestSummary.validateJsonElement(jsonObj.get("testSummary"));
      }
      // validate the optional field `codeCoverageSummary`
      if (jsonObj.get("codeCoverageSummary") != null && !jsonObj.get("codeCoverageSummary").isJsonNull()) {
        ReportCodeCoverageSummary.validateJsonElement(jsonObj.get("codeCoverageSummary"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Report.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Report' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Report> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Report.class));

       return (TypeAdapter<T>) new TypeAdapter<Report>() {
           @Override
           public void write(JsonWriter out, Report value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Report read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Report given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Report
   * @throws IOException if the JSON string is invalid with respect to Report
   */
  public static Report fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Report.class);
  }

  /**
   * Convert an instance of Report to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

