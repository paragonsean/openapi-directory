/*
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ComputeType;
import org.openapitools.client.model.EnvironmentType;
import org.openapitools.client.model.ImagePullCredentialsType;
import org.openapitools.client.model.ProjectEnvironmentRegistryCredential;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProjectEnvironment
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:18.687160-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProjectEnvironment {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private EnvironmentType type;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private String image;

  public static final String SERIALIZED_NAME_COMPUTE_TYPE = "computeType";
  @SerializedName(SERIALIZED_NAME_COMPUTE_TYPE)
  private ComputeType computeType;

  public static final String SERIALIZED_NAME_ENVIRONMENT_VARIABLES = "environmentVariables";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_VARIABLES)
  private List environmentVariables;

  public static final String SERIALIZED_NAME_PRIVILEGED_MODE = "privilegedMode";
  @SerializedName(SERIALIZED_NAME_PRIVILEGED_MODE)
  private Boolean privilegedMode;

  public static final String SERIALIZED_NAME_CERTIFICATE = "certificate";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE)
  private String certificate;

  public static final String SERIALIZED_NAME_REGISTRY_CREDENTIAL = "registryCredential";
  @SerializedName(SERIALIZED_NAME_REGISTRY_CREDENTIAL)
  private ProjectEnvironmentRegistryCredential registryCredential;

  public static final String SERIALIZED_NAME_IMAGE_PULL_CREDENTIALS_TYPE = "imagePullCredentialsType";
  @SerializedName(SERIALIZED_NAME_IMAGE_PULL_CREDENTIALS_TYPE)
  private ImagePullCredentialsType imagePullCredentialsType;

  public ProjectEnvironment() {
  }

  public ProjectEnvironment type(EnvironmentType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public EnvironmentType getType() {
    return type;
  }

  public void setType(EnvironmentType type) {
    this.type = type;
  }


  public ProjectEnvironment image(String image) {
    this.image = image;
    return this;
  }

  /**
   * Get image
   * @return image
   */
  @javax.annotation.Nonnull
  public String getImage() {
    return image;
  }

  public void setImage(String image) {
    this.image = image;
  }


  public ProjectEnvironment computeType(ComputeType computeType) {
    this.computeType = computeType;
    return this;
  }

  /**
   * Get computeType
   * @return computeType
   */
  @javax.annotation.Nonnull
  public ComputeType getComputeType() {
    return computeType;
  }

  public void setComputeType(ComputeType computeType) {
    this.computeType = computeType;
  }


  public ProjectEnvironment environmentVariables(List environmentVariables) {
    this.environmentVariables = environmentVariables;
    return this;
  }

  /**
   * Get environmentVariables
   * @return environmentVariables
   */
  @javax.annotation.Nullable
  public List getEnvironmentVariables() {
    return environmentVariables;
  }

  public void setEnvironmentVariables(List environmentVariables) {
    this.environmentVariables = environmentVariables;
  }


  public ProjectEnvironment privilegedMode(Boolean privilegedMode) {
    this.privilegedMode = privilegedMode;
    return this;
  }

  /**
   * Get privilegedMode
   * @return privilegedMode
   */
  @javax.annotation.Nullable
  public Boolean getPrivilegedMode() {
    return privilegedMode;
  }

  public void setPrivilegedMode(Boolean privilegedMode) {
    this.privilegedMode = privilegedMode;
  }


  public ProjectEnvironment certificate(String certificate) {
    this.certificate = certificate;
    return this;
  }

  /**
   * Get certificate
   * @return certificate
   */
  @javax.annotation.Nullable
  public String getCertificate() {
    return certificate;
  }

  public void setCertificate(String certificate) {
    this.certificate = certificate;
  }


  public ProjectEnvironment registryCredential(ProjectEnvironmentRegistryCredential registryCredential) {
    this.registryCredential = registryCredential;
    return this;
  }

  /**
   * Get registryCredential
   * @return registryCredential
   */
  @javax.annotation.Nullable
  public ProjectEnvironmentRegistryCredential getRegistryCredential() {
    return registryCredential;
  }

  public void setRegistryCredential(ProjectEnvironmentRegistryCredential registryCredential) {
    this.registryCredential = registryCredential;
  }


  public ProjectEnvironment imagePullCredentialsType(ImagePullCredentialsType imagePullCredentialsType) {
    this.imagePullCredentialsType = imagePullCredentialsType;
    return this;
  }

  /**
   * Get imagePullCredentialsType
   * @return imagePullCredentialsType
   */
  @javax.annotation.Nullable
  public ImagePullCredentialsType getImagePullCredentialsType() {
    return imagePullCredentialsType;
  }

  public void setImagePullCredentialsType(ImagePullCredentialsType imagePullCredentialsType) {
    this.imagePullCredentialsType = imagePullCredentialsType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProjectEnvironment projectEnvironment = (ProjectEnvironment) o;
    return Objects.equals(this.type, projectEnvironment.type) &&
        Objects.equals(this.image, projectEnvironment.image) &&
        Objects.equals(this.computeType, projectEnvironment.computeType) &&
        Objects.equals(this.environmentVariables, projectEnvironment.environmentVariables) &&
        Objects.equals(this.privilegedMode, projectEnvironment.privilegedMode) &&
        Objects.equals(this.certificate, projectEnvironment.certificate) &&
        Objects.equals(this.registryCredential, projectEnvironment.registryCredential) &&
        Objects.equals(this.imagePullCredentialsType, projectEnvironment.imagePullCredentialsType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, image, computeType, environmentVariables, privilegedMode, certificate, registryCredential, imagePullCredentialsType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProjectEnvironment {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    computeType: ").append(toIndentedString(computeType)).append("\n");
    sb.append("    environmentVariables: ").append(toIndentedString(environmentVariables)).append("\n");
    sb.append("    privilegedMode: ").append(toIndentedString(privilegedMode)).append("\n");
    sb.append("    certificate: ").append(toIndentedString(certificate)).append("\n");
    sb.append("    registryCredential: ").append(toIndentedString(registryCredential)).append("\n");
    sb.append("    imagePullCredentialsType: ").append(toIndentedString(imagePullCredentialsType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("image");
    openapiFields.add("computeType");
    openapiFields.add("environmentVariables");
    openapiFields.add("privilegedMode");
    openapiFields.add("certificate");
    openapiFields.add("registryCredential");
    openapiFields.add("imagePullCredentialsType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("image");
    openapiRequiredFields.add("computeType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProjectEnvironment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProjectEnvironment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProjectEnvironment is not found in the empty JSON string", ProjectEnvironment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProjectEnvironment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProjectEnvironment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ProjectEnvironment.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `type`
      EnvironmentType.validateJsonElement(jsonObj.get("type"));
      // validate the required field `image`
      String.validateJsonElement(jsonObj.get("image"));
      // validate the required field `computeType`
      ComputeType.validateJsonElement(jsonObj.get("computeType"));
      // validate the optional field `environmentVariables`
      if (jsonObj.get("environmentVariables") != null && !jsonObj.get("environmentVariables").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("environmentVariables"));
      }
      // validate the optional field `privilegedMode`
      if (jsonObj.get("privilegedMode") != null && !jsonObj.get("privilegedMode").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("privilegedMode"));
      }
      // validate the optional field `certificate`
      if (jsonObj.get("certificate") != null && !jsonObj.get("certificate").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("certificate"));
      }
      // validate the optional field `registryCredential`
      if (jsonObj.get("registryCredential") != null && !jsonObj.get("registryCredential").isJsonNull()) {
        ProjectEnvironmentRegistryCredential.validateJsonElement(jsonObj.get("registryCredential"));
      }
      // validate the optional field `imagePullCredentialsType`
      if (jsonObj.get("imagePullCredentialsType") != null && !jsonObj.get("imagePullCredentialsType").isJsonNull()) {
        ImagePullCredentialsType.validateJsonElement(jsonObj.get("imagePullCredentialsType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProjectEnvironment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProjectEnvironment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProjectEnvironment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProjectEnvironment.class));

       return (TypeAdapter<T>) new TypeAdapter<ProjectEnvironment>() {
           @Override
           public void write(JsonWriter out, ProjectEnvironment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProjectEnvironment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProjectEnvironment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProjectEnvironment
   * @throws IOException if the JSON string is invalid with respect to ProjectEnvironment
   */
  public static ProjectEnvironment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProjectEnvironment.class);
  }

  /**
   * Convert an instance of ProjectEnvironment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

