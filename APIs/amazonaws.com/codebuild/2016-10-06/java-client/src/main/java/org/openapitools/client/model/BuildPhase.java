/*
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BuildPhaseType;
import org.openapitools.client.model.StatusType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about a stage for a build.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:18.687160-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BuildPhase {
  public static final String SERIALIZED_NAME_PHASE_TYPE = "phaseType";
  @SerializedName(SERIALIZED_NAME_PHASE_TYPE)
  private BuildPhaseType phaseType;

  public static final String SERIALIZED_NAME_PHASE_STATUS = "phaseStatus";
  @SerializedName(SERIALIZED_NAME_PHASE_STATUS)
  private StatusType phaseStatus;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_DURATION_IN_SECONDS = "durationInSeconds";
  @SerializedName(SERIALIZED_NAME_DURATION_IN_SECONDS)
  private Integer durationInSeconds;

  public static final String SERIALIZED_NAME_CONTEXTS = "contexts";
  @SerializedName(SERIALIZED_NAME_CONTEXTS)
  private List contexts;

  public BuildPhase() {
  }

  public BuildPhase phaseType(BuildPhaseType phaseType) {
    this.phaseType = phaseType;
    return this;
  }

  /**
   * Get phaseType
   * @return phaseType
   */
  @javax.annotation.Nullable
  public BuildPhaseType getPhaseType() {
    return phaseType;
  }

  public void setPhaseType(BuildPhaseType phaseType) {
    this.phaseType = phaseType;
  }


  public BuildPhase phaseStatus(StatusType phaseStatus) {
    this.phaseStatus = phaseStatus;
    return this;
  }

  /**
   * Get phaseStatus
   * @return phaseStatus
   */
  @javax.annotation.Nullable
  public StatusType getPhaseStatus() {
    return phaseStatus;
  }

  public void setPhaseStatus(StatusType phaseStatus) {
    this.phaseStatus = phaseStatus;
  }


  public BuildPhase startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Get startTime
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public BuildPhase endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * Get endTime
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public BuildPhase durationInSeconds(Integer durationInSeconds) {
    this.durationInSeconds = durationInSeconds;
    return this;
  }

  /**
   * Get durationInSeconds
   * @return durationInSeconds
   */
  @javax.annotation.Nullable
  public Integer getDurationInSeconds() {
    return durationInSeconds;
  }

  public void setDurationInSeconds(Integer durationInSeconds) {
    this.durationInSeconds = durationInSeconds;
  }


  public BuildPhase contexts(List contexts) {
    this.contexts = contexts;
    return this;
  }

  /**
   * Get contexts
   * @return contexts
   */
  @javax.annotation.Nullable
  public List getContexts() {
    return contexts;
  }

  public void setContexts(List contexts) {
    this.contexts = contexts;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BuildPhase buildPhase = (BuildPhase) o;
    return Objects.equals(this.phaseType, buildPhase.phaseType) &&
        Objects.equals(this.phaseStatus, buildPhase.phaseStatus) &&
        Objects.equals(this.startTime, buildPhase.startTime) &&
        Objects.equals(this.endTime, buildPhase.endTime) &&
        Objects.equals(this.durationInSeconds, buildPhase.durationInSeconds) &&
        Objects.equals(this.contexts, buildPhase.contexts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(phaseType, phaseStatus, startTime, endTime, durationInSeconds, contexts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BuildPhase {\n");
    sb.append("    phaseType: ").append(toIndentedString(phaseType)).append("\n");
    sb.append("    phaseStatus: ").append(toIndentedString(phaseStatus)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    durationInSeconds: ").append(toIndentedString(durationInSeconds)).append("\n");
    sb.append("    contexts: ").append(toIndentedString(contexts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("phaseType");
    openapiFields.add("phaseStatus");
    openapiFields.add("startTime");
    openapiFields.add("endTime");
    openapiFields.add("durationInSeconds");
    openapiFields.add("contexts");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BuildPhase
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BuildPhase.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BuildPhase is not found in the empty JSON string", BuildPhase.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BuildPhase.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BuildPhase` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `phaseType`
      if (jsonObj.get("phaseType") != null && !jsonObj.get("phaseType").isJsonNull()) {
        BuildPhaseType.validateJsonElement(jsonObj.get("phaseType"));
      }
      // validate the optional field `phaseStatus`
      if (jsonObj.get("phaseStatus") != null && !jsonObj.get("phaseStatus").isJsonNull()) {
        StatusType.validateJsonElement(jsonObj.get("phaseStatus"));
      }
      // validate the optional field `startTime`
      if (jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("startTime"));
      }
      // validate the optional field `endTime`
      if (jsonObj.get("endTime") != null && !jsonObj.get("endTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("endTime"));
      }
      // validate the optional field `durationInSeconds`
      if (jsonObj.get("durationInSeconds") != null && !jsonObj.get("durationInSeconds").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("durationInSeconds"));
      }
      // validate the optional field `contexts`
      if (jsonObj.get("contexts") != null && !jsonObj.get("contexts").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("contexts"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BuildPhase.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BuildPhase' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BuildPhase> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BuildPhase.class));

       return (TypeAdapter<T>) new TypeAdapter<BuildPhase>() {
           @Override
           public void write(JsonWriter out, BuildPhase value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BuildPhase read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BuildPhase given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BuildPhase
   * @throws IOException if the JSON string is invalid with respect to BuildPhase
   */
  public static BuildPhase fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BuildPhase.class);
  }

  /**
   * Convert an instance of BuildPhase to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

