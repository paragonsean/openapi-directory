/*
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.WebhookBuildType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about a webhook that connects repository events to a build project in CodeBuild.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:18.687160-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Webhook {
  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_PAYLOAD_URL = "payloadUrl";
  @SerializedName(SERIALIZED_NAME_PAYLOAD_URL)
  private String payloadUrl;

  public static final String SERIALIZED_NAME_SECRET = "secret";
  @SerializedName(SERIALIZED_NAME_SECRET)
  private String secret;

  public static final String SERIALIZED_NAME_BRANCH_FILTER = "branchFilter";
  @SerializedName(SERIALIZED_NAME_BRANCH_FILTER)
  private String branchFilter;

  public static final String SERIALIZED_NAME_FILTER_GROUPS = "filterGroups";
  @SerializedName(SERIALIZED_NAME_FILTER_GROUPS)
  private List filterGroups;

  public static final String SERIALIZED_NAME_BUILD_TYPE = "buildType";
  @SerializedName(SERIALIZED_NAME_BUILD_TYPE)
  private WebhookBuildType buildType;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_SECRET = "lastModifiedSecret";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_SECRET)
  private OffsetDateTime lastModifiedSecret;

  public Webhook() {
  }

  public Webhook url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public Webhook payloadUrl(String payloadUrl) {
    this.payloadUrl = payloadUrl;
    return this;
  }

  /**
   * Get payloadUrl
   * @return payloadUrl
   */
  @javax.annotation.Nullable
  public String getPayloadUrl() {
    return payloadUrl;
  }

  public void setPayloadUrl(String payloadUrl) {
    this.payloadUrl = payloadUrl;
  }


  public Webhook secret(String secret) {
    this.secret = secret;
    return this;
  }

  /**
   * Get secret
   * @return secret
   */
  @javax.annotation.Nullable
  public String getSecret() {
    return secret;
  }

  public void setSecret(String secret) {
    this.secret = secret;
  }


  public Webhook branchFilter(String branchFilter) {
    this.branchFilter = branchFilter;
    return this;
  }

  /**
   * Get branchFilter
   * @return branchFilter
   */
  @javax.annotation.Nullable
  public String getBranchFilter() {
    return branchFilter;
  }

  public void setBranchFilter(String branchFilter) {
    this.branchFilter = branchFilter;
  }


  public Webhook filterGroups(List filterGroups) {
    this.filterGroups = filterGroups;
    return this;
  }

  /**
   * Get filterGroups
   * @return filterGroups
   */
  @javax.annotation.Nullable
  public List getFilterGroups() {
    return filterGroups;
  }

  public void setFilterGroups(List filterGroups) {
    this.filterGroups = filterGroups;
  }


  public Webhook buildType(WebhookBuildType buildType) {
    this.buildType = buildType;
    return this;
  }

  /**
   * Get buildType
   * @return buildType
   */
  @javax.annotation.Nullable
  public WebhookBuildType getBuildType() {
    return buildType;
  }

  public void setBuildType(WebhookBuildType buildType) {
    this.buildType = buildType;
  }


  public Webhook lastModifiedSecret(OffsetDateTime lastModifiedSecret) {
    this.lastModifiedSecret = lastModifiedSecret;
    return this;
  }

  /**
   * Get lastModifiedSecret
   * @return lastModifiedSecret
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastModifiedSecret() {
    return lastModifiedSecret;
  }

  public void setLastModifiedSecret(OffsetDateTime lastModifiedSecret) {
    this.lastModifiedSecret = lastModifiedSecret;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Webhook webhook = (Webhook) o;
    return Objects.equals(this.url, webhook.url) &&
        Objects.equals(this.payloadUrl, webhook.payloadUrl) &&
        Objects.equals(this.secret, webhook.secret) &&
        Objects.equals(this.branchFilter, webhook.branchFilter) &&
        Objects.equals(this.filterGroups, webhook.filterGroups) &&
        Objects.equals(this.buildType, webhook.buildType) &&
        Objects.equals(this.lastModifiedSecret, webhook.lastModifiedSecret);
  }

  @Override
  public int hashCode() {
    return Objects.hash(url, payloadUrl, secret, branchFilter, filterGroups, buildType, lastModifiedSecret);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Webhook {\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    payloadUrl: ").append(toIndentedString(payloadUrl)).append("\n");
    sb.append("    secret: ").append(toIndentedString(secret)).append("\n");
    sb.append("    branchFilter: ").append(toIndentedString(branchFilter)).append("\n");
    sb.append("    filterGroups: ").append(toIndentedString(filterGroups)).append("\n");
    sb.append("    buildType: ").append(toIndentedString(buildType)).append("\n");
    sb.append("    lastModifiedSecret: ").append(toIndentedString(lastModifiedSecret)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("url");
    openapiFields.add("payloadUrl");
    openapiFields.add("secret");
    openapiFields.add("branchFilter");
    openapiFields.add("filterGroups");
    openapiFields.add("buildType");
    openapiFields.add("lastModifiedSecret");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Webhook
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Webhook.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Webhook is not found in the empty JSON string", Webhook.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Webhook.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Webhook` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `url`
      if (jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("url"));
      }
      // validate the optional field `payloadUrl`
      if (jsonObj.get("payloadUrl") != null && !jsonObj.get("payloadUrl").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("payloadUrl"));
      }
      // validate the optional field `secret`
      if (jsonObj.get("secret") != null && !jsonObj.get("secret").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("secret"));
      }
      // validate the optional field `branchFilter`
      if (jsonObj.get("branchFilter") != null && !jsonObj.get("branchFilter").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("branchFilter"));
      }
      // validate the optional field `filterGroups`
      if (jsonObj.get("filterGroups") != null && !jsonObj.get("filterGroups").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("filterGroups"));
      }
      // validate the optional field `buildType`
      if (jsonObj.get("buildType") != null && !jsonObj.get("buildType").isJsonNull()) {
        WebhookBuildType.validateJsonElement(jsonObj.get("buildType"));
      }
      // validate the optional field `lastModifiedSecret`
      if (jsonObj.get("lastModifiedSecret") != null && !jsonObj.get("lastModifiedSecret").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("lastModifiedSecret"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Webhook.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Webhook' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Webhook> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Webhook.class));

       return (TypeAdapter<T>) new TypeAdapter<Webhook>() {
           @Override
           public void write(JsonWriter out, Webhook value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Webhook read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Webhook given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Webhook
   * @throws IOException if the JSON string is invalid with respect to Webhook
   */
  public static Webhook fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Webhook.class);
  }

  /**
   * Convert an instance of Webhook to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

