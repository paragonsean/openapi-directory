/*
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ReportPackagingType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ReportExportConfigS3Destination
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:18.687160-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReportExportConfigS3Destination {
  public static final String SERIALIZED_NAME_BUCKET = "bucket";
  @SerializedName(SERIALIZED_NAME_BUCKET)
  private String bucket;

  public static final String SERIALIZED_NAME_BUCKET_OWNER = "bucketOwner";
  @SerializedName(SERIALIZED_NAME_BUCKET_OWNER)
  private String bucketOwner;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_PACKAGING = "packaging";
  @SerializedName(SERIALIZED_NAME_PACKAGING)
  private ReportPackagingType packaging;

  public static final String SERIALIZED_NAME_ENCRYPTION_KEY = "encryptionKey";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_KEY)
  private String encryptionKey;

  public static final String SERIALIZED_NAME_ENCRYPTION_DISABLED = "encryptionDisabled";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_DISABLED)
  private Boolean encryptionDisabled;

  public ReportExportConfigS3Destination() {
  }

  public ReportExportConfigS3Destination bucket(String bucket) {
    this.bucket = bucket;
    return this;
  }

  /**
   * Get bucket
   * @return bucket
   */
  @javax.annotation.Nullable
  public String getBucket() {
    return bucket;
  }

  public void setBucket(String bucket) {
    this.bucket = bucket;
  }


  public ReportExportConfigS3Destination bucketOwner(String bucketOwner) {
    this.bucketOwner = bucketOwner;
    return this;
  }

  /**
   * Get bucketOwner
   * @return bucketOwner
   */
  @javax.annotation.Nullable
  public String getBucketOwner() {
    return bucketOwner;
  }

  public void setBucketOwner(String bucketOwner) {
    this.bucketOwner = bucketOwner;
  }


  public ReportExportConfigS3Destination path(String path) {
    this.path = path;
    return this;
  }

  /**
   * Get path
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public ReportExportConfigS3Destination packaging(ReportPackagingType packaging) {
    this.packaging = packaging;
    return this;
  }

  /**
   * Get packaging
   * @return packaging
   */
  @javax.annotation.Nullable
  public ReportPackagingType getPackaging() {
    return packaging;
  }

  public void setPackaging(ReportPackagingType packaging) {
    this.packaging = packaging;
  }


  public ReportExportConfigS3Destination encryptionKey(String encryptionKey) {
    this.encryptionKey = encryptionKey;
    return this;
  }

  /**
   * Get encryptionKey
   * @return encryptionKey
   */
  @javax.annotation.Nullable
  public String getEncryptionKey() {
    return encryptionKey;
  }

  public void setEncryptionKey(String encryptionKey) {
    this.encryptionKey = encryptionKey;
  }


  public ReportExportConfigS3Destination encryptionDisabled(Boolean encryptionDisabled) {
    this.encryptionDisabled = encryptionDisabled;
    return this;
  }

  /**
   * Get encryptionDisabled
   * @return encryptionDisabled
   */
  @javax.annotation.Nullable
  public Boolean getEncryptionDisabled() {
    return encryptionDisabled;
  }

  public void setEncryptionDisabled(Boolean encryptionDisabled) {
    this.encryptionDisabled = encryptionDisabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportExportConfigS3Destination reportExportConfigS3Destination = (ReportExportConfigS3Destination) o;
    return Objects.equals(this.bucket, reportExportConfigS3Destination.bucket) &&
        Objects.equals(this.bucketOwner, reportExportConfigS3Destination.bucketOwner) &&
        Objects.equals(this.path, reportExportConfigS3Destination.path) &&
        Objects.equals(this.packaging, reportExportConfigS3Destination.packaging) &&
        Objects.equals(this.encryptionKey, reportExportConfigS3Destination.encryptionKey) &&
        Objects.equals(this.encryptionDisabled, reportExportConfigS3Destination.encryptionDisabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bucket, bucketOwner, path, packaging, encryptionKey, encryptionDisabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportExportConfigS3Destination {\n");
    sb.append("    bucket: ").append(toIndentedString(bucket)).append("\n");
    sb.append("    bucketOwner: ").append(toIndentedString(bucketOwner)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    packaging: ").append(toIndentedString(packaging)).append("\n");
    sb.append("    encryptionKey: ").append(toIndentedString(encryptionKey)).append("\n");
    sb.append("    encryptionDisabled: ").append(toIndentedString(encryptionDisabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bucket");
    openapiFields.add("bucketOwner");
    openapiFields.add("path");
    openapiFields.add("packaging");
    openapiFields.add("encryptionKey");
    openapiFields.add("encryptionDisabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReportExportConfigS3Destination
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReportExportConfigS3Destination.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportExportConfigS3Destination is not found in the empty JSON string", ReportExportConfigS3Destination.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReportExportConfigS3Destination.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReportExportConfigS3Destination` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `bucket`
      if (jsonObj.get("bucket") != null && !jsonObj.get("bucket").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("bucket"));
      }
      // validate the optional field `bucketOwner`
      if (jsonObj.get("bucketOwner") != null && !jsonObj.get("bucketOwner").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("bucketOwner"));
      }
      // validate the optional field `path`
      if (jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("path"));
      }
      // validate the optional field `packaging`
      if (jsonObj.get("packaging") != null && !jsonObj.get("packaging").isJsonNull()) {
        ReportPackagingType.validateJsonElement(jsonObj.get("packaging"));
      }
      // validate the optional field `encryptionKey`
      if (jsonObj.get("encryptionKey") != null && !jsonObj.get("encryptionKey").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("encryptionKey"));
      }
      // validate the optional field `encryptionDisabled`
      if (jsonObj.get("encryptionDisabled") != null && !jsonObj.get("encryptionDisabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("encryptionDisabled"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportExportConfigS3Destination.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportExportConfigS3Destination' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportExportConfigS3Destination> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportExportConfigS3Destination.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportExportConfigS3Destination>() {
           @Override
           public void write(JsonWriter out, ReportExportConfigS3Destination value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportExportConfigS3Destination read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReportExportConfigS3Destination given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReportExportConfigS3Destination
   * @throws IOException if the JSON string is invalid with respect to ReportExportConfigS3Destination
   */
  public static ReportExportConfigS3Destination fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportExportConfigS3Destination.class);
  }

  /**
   * Convert an instance of ReportExportConfigS3Destination to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

