/*
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateProjectInputArtifacts;
import org.openapitools.client.model.CreateProjectInputBuildBatchConfig;
import org.openapitools.client.model.CreateWebhookOutputWebhook;
import org.openapitools.client.model.ProjectBadge;
import org.openapitools.client.model.ProjectCache;
import org.openapitools.client.model.ProjectEnvironment;
import org.openapitools.client.model.ProjectLogsConfig;
import org.openapitools.client.model.ProjectSource;
import org.openapitools.client.model.ProjectVisibilityType;
import org.openapitools.client.model.ProjectVpcConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateProjectOutputProject
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:18.687160-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateProjectOutputProject {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ARN = "arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private ProjectSource source;

  public static final String SERIALIZED_NAME_SECONDARY_SOURCES = "secondarySources";
  @SerializedName(SERIALIZED_NAME_SECONDARY_SOURCES)
  private List secondarySources;

  public static final String SERIALIZED_NAME_SOURCE_VERSION = "sourceVersion";
  @SerializedName(SERIALIZED_NAME_SOURCE_VERSION)
  private String sourceVersion;

  public static final String SERIALIZED_NAME_SECONDARY_SOURCE_VERSIONS = "secondarySourceVersions";
  @SerializedName(SERIALIZED_NAME_SECONDARY_SOURCE_VERSIONS)
  private List secondarySourceVersions;

  public static final String SERIALIZED_NAME_ARTIFACTS = "artifacts";
  @SerializedName(SERIALIZED_NAME_ARTIFACTS)
  private CreateProjectInputArtifacts artifacts;

  public static final String SERIALIZED_NAME_SECONDARY_ARTIFACTS = "secondaryArtifacts";
  @SerializedName(SERIALIZED_NAME_SECONDARY_ARTIFACTS)
  private List secondaryArtifacts;

  public static final String SERIALIZED_NAME_CACHE = "cache";
  @SerializedName(SERIALIZED_NAME_CACHE)
  private ProjectCache cache;

  public static final String SERIALIZED_NAME_ENVIRONMENT = "environment";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT)
  private ProjectEnvironment environment;

  public static final String SERIALIZED_NAME_SERVICE_ROLE = "serviceRole";
  @SerializedName(SERIALIZED_NAME_SERVICE_ROLE)
  private String serviceRole;

  public static final String SERIALIZED_NAME_TIMEOUT_IN_MINUTES = "timeoutInMinutes";
  @SerializedName(SERIALIZED_NAME_TIMEOUT_IN_MINUTES)
  private Integer timeoutInMinutes;

  public static final String SERIALIZED_NAME_QUEUED_TIMEOUT_IN_MINUTES = "queuedTimeoutInMinutes";
  @SerializedName(SERIALIZED_NAME_QUEUED_TIMEOUT_IN_MINUTES)
  private Integer queuedTimeoutInMinutes;

  public static final String SERIALIZED_NAME_ENCRYPTION_KEY = "encryptionKey";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_KEY)
  private String encryptionKey;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_LAST_MODIFIED = "lastModified";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED)
  private OffsetDateTime lastModified;

  public static final String SERIALIZED_NAME_WEBHOOK = "webhook";
  @SerializedName(SERIALIZED_NAME_WEBHOOK)
  private CreateWebhookOutputWebhook webhook;

  public static final String SERIALIZED_NAME_VPC_CONFIG = "vpcConfig";
  @SerializedName(SERIALIZED_NAME_VPC_CONFIG)
  private ProjectVpcConfig vpcConfig;

  public static final String SERIALIZED_NAME_BADGE = "badge";
  @SerializedName(SERIALIZED_NAME_BADGE)
  private ProjectBadge badge;

  public static final String SERIALIZED_NAME_LOGS_CONFIG = "logsConfig";
  @SerializedName(SERIALIZED_NAME_LOGS_CONFIG)
  private ProjectLogsConfig logsConfig;

  public static final String SERIALIZED_NAME_FILE_SYSTEM_LOCATIONS = "fileSystemLocations";
  @SerializedName(SERIALIZED_NAME_FILE_SYSTEM_LOCATIONS)
  private List fileSystemLocations;

  public static final String SERIALIZED_NAME_BUILD_BATCH_CONFIG = "buildBatchConfig";
  @SerializedName(SERIALIZED_NAME_BUILD_BATCH_CONFIG)
  private CreateProjectInputBuildBatchConfig buildBatchConfig;

  public static final String SERIALIZED_NAME_CONCURRENT_BUILD_LIMIT = "concurrentBuildLimit";
  @SerializedName(SERIALIZED_NAME_CONCURRENT_BUILD_LIMIT)
  private Integer concurrentBuildLimit;

  public static final String SERIALIZED_NAME_PROJECT_VISIBILITY = "projectVisibility";
  @SerializedName(SERIALIZED_NAME_PROJECT_VISIBILITY)
  private ProjectVisibilityType projectVisibility;

  public static final String SERIALIZED_NAME_PUBLIC_PROJECT_ALIAS = "publicProjectAlias";
  @SerializedName(SERIALIZED_NAME_PUBLIC_PROJECT_ALIAS)
  private String publicProjectAlias;

  public static final String SERIALIZED_NAME_RESOURCE_ACCESS_ROLE = "resourceAccessRole";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ACCESS_ROLE)
  private String resourceAccessRole;

  public CreateProjectOutputProject() {
  }

  public CreateProjectOutputProject name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateProjectOutputProject arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public CreateProjectOutputProject description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateProjectOutputProject source(ProjectSource source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nullable
  public ProjectSource getSource() {
    return source;
  }

  public void setSource(ProjectSource source) {
    this.source = source;
  }


  public CreateProjectOutputProject secondarySources(List secondarySources) {
    this.secondarySources = secondarySources;
    return this;
  }

  /**
   * Get secondarySources
   * @return secondarySources
   */
  @javax.annotation.Nullable
  public List getSecondarySources() {
    return secondarySources;
  }

  public void setSecondarySources(List secondarySources) {
    this.secondarySources = secondarySources;
  }


  public CreateProjectOutputProject sourceVersion(String sourceVersion) {
    this.sourceVersion = sourceVersion;
    return this;
  }

  /**
   * Get sourceVersion
   * @return sourceVersion
   */
  @javax.annotation.Nullable
  public String getSourceVersion() {
    return sourceVersion;
  }

  public void setSourceVersion(String sourceVersion) {
    this.sourceVersion = sourceVersion;
  }


  public CreateProjectOutputProject secondarySourceVersions(List secondarySourceVersions) {
    this.secondarySourceVersions = secondarySourceVersions;
    return this;
  }

  /**
   * Get secondarySourceVersions
   * @return secondarySourceVersions
   */
  @javax.annotation.Nullable
  public List getSecondarySourceVersions() {
    return secondarySourceVersions;
  }

  public void setSecondarySourceVersions(List secondarySourceVersions) {
    this.secondarySourceVersions = secondarySourceVersions;
  }


  public CreateProjectOutputProject artifacts(CreateProjectInputArtifacts artifacts) {
    this.artifacts = artifacts;
    return this;
  }

  /**
   * Get artifacts
   * @return artifacts
   */
  @javax.annotation.Nullable
  public CreateProjectInputArtifacts getArtifacts() {
    return artifacts;
  }

  public void setArtifacts(CreateProjectInputArtifacts artifacts) {
    this.artifacts = artifacts;
  }


  public CreateProjectOutputProject secondaryArtifacts(List secondaryArtifacts) {
    this.secondaryArtifacts = secondaryArtifacts;
    return this;
  }

  /**
   * Get secondaryArtifacts
   * @return secondaryArtifacts
   */
  @javax.annotation.Nullable
  public List getSecondaryArtifacts() {
    return secondaryArtifacts;
  }

  public void setSecondaryArtifacts(List secondaryArtifacts) {
    this.secondaryArtifacts = secondaryArtifacts;
  }


  public CreateProjectOutputProject cache(ProjectCache cache) {
    this.cache = cache;
    return this;
  }

  /**
   * Get cache
   * @return cache
   */
  @javax.annotation.Nullable
  public ProjectCache getCache() {
    return cache;
  }

  public void setCache(ProjectCache cache) {
    this.cache = cache;
  }


  public CreateProjectOutputProject environment(ProjectEnvironment environment) {
    this.environment = environment;
    return this;
  }

  /**
   * Get environment
   * @return environment
   */
  @javax.annotation.Nullable
  public ProjectEnvironment getEnvironment() {
    return environment;
  }

  public void setEnvironment(ProjectEnvironment environment) {
    this.environment = environment;
  }


  public CreateProjectOutputProject serviceRole(String serviceRole) {
    this.serviceRole = serviceRole;
    return this;
  }

  /**
   * Get serviceRole
   * @return serviceRole
   */
  @javax.annotation.Nullable
  public String getServiceRole() {
    return serviceRole;
  }

  public void setServiceRole(String serviceRole) {
    this.serviceRole = serviceRole;
  }


  public CreateProjectOutputProject timeoutInMinutes(Integer timeoutInMinutes) {
    this.timeoutInMinutes = timeoutInMinutes;
    return this;
  }

  /**
   * Get timeoutInMinutes
   * @return timeoutInMinutes
   */
  @javax.annotation.Nullable
  public Integer getTimeoutInMinutes() {
    return timeoutInMinutes;
  }

  public void setTimeoutInMinutes(Integer timeoutInMinutes) {
    this.timeoutInMinutes = timeoutInMinutes;
  }


  public CreateProjectOutputProject queuedTimeoutInMinutes(Integer queuedTimeoutInMinutes) {
    this.queuedTimeoutInMinutes = queuedTimeoutInMinutes;
    return this;
  }

  /**
   * Get queuedTimeoutInMinutes
   * @return queuedTimeoutInMinutes
   */
  @javax.annotation.Nullable
  public Integer getQueuedTimeoutInMinutes() {
    return queuedTimeoutInMinutes;
  }

  public void setQueuedTimeoutInMinutes(Integer queuedTimeoutInMinutes) {
    this.queuedTimeoutInMinutes = queuedTimeoutInMinutes;
  }


  public CreateProjectOutputProject encryptionKey(String encryptionKey) {
    this.encryptionKey = encryptionKey;
    return this;
  }

  /**
   * Get encryptionKey
   * @return encryptionKey
   */
  @javax.annotation.Nullable
  public String getEncryptionKey() {
    return encryptionKey;
  }

  public void setEncryptionKey(String encryptionKey) {
    this.encryptionKey = encryptionKey;
  }


  public CreateProjectOutputProject tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }


  public CreateProjectOutputProject created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public CreateProjectOutputProject lastModified(OffsetDateTime lastModified) {
    this.lastModified = lastModified;
    return this;
  }

  /**
   * Get lastModified
   * @return lastModified
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastModified() {
    return lastModified;
  }

  public void setLastModified(OffsetDateTime lastModified) {
    this.lastModified = lastModified;
  }


  public CreateProjectOutputProject webhook(CreateWebhookOutputWebhook webhook) {
    this.webhook = webhook;
    return this;
  }

  /**
   * Get webhook
   * @return webhook
   */
  @javax.annotation.Nullable
  public CreateWebhookOutputWebhook getWebhook() {
    return webhook;
  }

  public void setWebhook(CreateWebhookOutputWebhook webhook) {
    this.webhook = webhook;
  }


  public CreateProjectOutputProject vpcConfig(ProjectVpcConfig vpcConfig) {
    this.vpcConfig = vpcConfig;
    return this;
  }

  /**
   * Get vpcConfig
   * @return vpcConfig
   */
  @javax.annotation.Nullable
  public ProjectVpcConfig getVpcConfig() {
    return vpcConfig;
  }

  public void setVpcConfig(ProjectVpcConfig vpcConfig) {
    this.vpcConfig = vpcConfig;
  }


  public CreateProjectOutputProject badge(ProjectBadge badge) {
    this.badge = badge;
    return this;
  }

  /**
   * Get badge
   * @return badge
   */
  @javax.annotation.Nullable
  public ProjectBadge getBadge() {
    return badge;
  }

  public void setBadge(ProjectBadge badge) {
    this.badge = badge;
  }


  public CreateProjectOutputProject logsConfig(ProjectLogsConfig logsConfig) {
    this.logsConfig = logsConfig;
    return this;
  }

  /**
   * Get logsConfig
   * @return logsConfig
   */
  @javax.annotation.Nullable
  public ProjectLogsConfig getLogsConfig() {
    return logsConfig;
  }

  public void setLogsConfig(ProjectLogsConfig logsConfig) {
    this.logsConfig = logsConfig;
  }


  public CreateProjectOutputProject fileSystemLocations(List fileSystemLocations) {
    this.fileSystemLocations = fileSystemLocations;
    return this;
  }

  /**
   * Get fileSystemLocations
   * @return fileSystemLocations
   */
  @javax.annotation.Nullable
  public List getFileSystemLocations() {
    return fileSystemLocations;
  }

  public void setFileSystemLocations(List fileSystemLocations) {
    this.fileSystemLocations = fileSystemLocations;
  }


  public CreateProjectOutputProject buildBatchConfig(CreateProjectInputBuildBatchConfig buildBatchConfig) {
    this.buildBatchConfig = buildBatchConfig;
    return this;
  }

  /**
   * Get buildBatchConfig
   * @return buildBatchConfig
   */
  @javax.annotation.Nullable
  public CreateProjectInputBuildBatchConfig getBuildBatchConfig() {
    return buildBatchConfig;
  }

  public void setBuildBatchConfig(CreateProjectInputBuildBatchConfig buildBatchConfig) {
    this.buildBatchConfig = buildBatchConfig;
  }


  public CreateProjectOutputProject concurrentBuildLimit(Integer concurrentBuildLimit) {
    this.concurrentBuildLimit = concurrentBuildLimit;
    return this;
  }

  /**
   * Get concurrentBuildLimit
   * @return concurrentBuildLimit
   */
  @javax.annotation.Nullable
  public Integer getConcurrentBuildLimit() {
    return concurrentBuildLimit;
  }

  public void setConcurrentBuildLimit(Integer concurrentBuildLimit) {
    this.concurrentBuildLimit = concurrentBuildLimit;
  }


  public CreateProjectOutputProject projectVisibility(ProjectVisibilityType projectVisibility) {
    this.projectVisibility = projectVisibility;
    return this;
  }

  /**
   * Get projectVisibility
   * @return projectVisibility
   */
  @javax.annotation.Nullable
  public ProjectVisibilityType getProjectVisibility() {
    return projectVisibility;
  }

  public void setProjectVisibility(ProjectVisibilityType projectVisibility) {
    this.projectVisibility = projectVisibility;
  }


  public CreateProjectOutputProject publicProjectAlias(String publicProjectAlias) {
    this.publicProjectAlias = publicProjectAlias;
    return this;
  }

  /**
   * Get publicProjectAlias
   * @return publicProjectAlias
   */
  @javax.annotation.Nullable
  public String getPublicProjectAlias() {
    return publicProjectAlias;
  }

  public void setPublicProjectAlias(String publicProjectAlias) {
    this.publicProjectAlias = publicProjectAlias;
  }


  public CreateProjectOutputProject resourceAccessRole(String resourceAccessRole) {
    this.resourceAccessRole = resourceAccessRole;
    return this;
  }

  /**
   * Get resourceAccessRole
   * @return resourceAccessRole
   */
  @javax.annotation.Nullable
  public String getResourceAccessRole() {
    return resourceAccessRole;
  }

  public void setResourceAccessRole(String resourceAccessRole) {
    this.resourceAccessRole = resourceAccessRole;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateProjectOutputProject createProjectOutputProject = (CreateProjectOutputProject) o;
    return Objects.equals(this.name, createProjectOutputProject.name) &&
        Objects.equals(this.arn, createProjectOutputProject.arn) &&
        Objects.equals(this.description, createProjectOutputProject.description) &&
        Objects.equals(this.source, createProjectOutputProject.source) &&
        Objects.equals(this.secondarySources, createProjectOutputProject.secondarySources) &&
        Objects.equals(this.sourceVersion, createProjectOutputProject.sourceVersion) &&
        Objects.equals(this.secondarySourceVersions, createProjectOutputProject.secondarySourceVersions) &&
        Objects.equals(this.artifacts, createProjectOutputProject.artifacts) &&
        Objects.equals(this.secondaryArtifacts, createProjectOutputProject.secondaryArtifacts) &&
        Objects.equals(this.cache, createProjectOutputProject.cache) &&
        Objects.equals(this.environment, createProjectOutputProject.environment) &&
        Objects.equals(this.serviceRole, createProjectOutputProject.serviceRole) &&
        Objects.equals(this.timeoutInMinutes, createProjectOutputProject.timeoutInMinutes) &&
        Objects.equals(this.queuedTimeoutInMinutes, createProjectOutputProject.queuedTimeoutInMinutes) &&
        Objects.equals(this.encryptionKey, createProjectOutputProject.encryptionKey) &&
        Objects.equals(this.tags, createProjectOutputProject.tags) &&
        Objects.equals(this.created, createProjectOutputProject.created) &&
        Objects.equals(this.lastModified, createProjectOutputProject.lastModified) &&
        Objects.equals(this.webhook, createProjectOutputProject.webhook) &&
        Objects.equals(this.vpcConfig, createProjectOutputProject.vpcConfig) &&
        Objects.equals(this.badge, createProjectOutputProject.badge) &&
        Objects.equals(this.logsConfig, createProjectOutputProject.logsConfig) &&
        Objects.equals(this.fileSystemLocations, createProjectOutputProject.fileSystemLocations) &&
        Objects.equals(this.buildBatchConfig, createProjectOutputProject.buildBatchConfig) &&
        Objects.equals(this.concurrentBuildLimit, createProjectOutputProject.concurrentBuildLimit) &&
        Objects.equals(this.projectVisibility, createProjectOutputProject.projectVisibility) &&
        Objects.equals(this.publicProjectAlias, createProjectOutputProject.publicProjectAlias) &&
        Objects.equals(this.resourceAccessRole, createProjectOutputProject.resourceAccessRole);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, arn, description, source, secondarySources, sourceVersion, secondarySourceVersions, artifacts, secondaryArtifacts, cache, environment, serviceRole, timeoutInMinutes, queuedTimeoutInMinutes, encryptionKey, tags, created, lastModified, webhook, vpcConfig, badge, logsConfig, fileSystemLocations, buildBatchConfig, concurrentBuildLimit, projectVisibility, publicProjectAlias, resourceAccessRole);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateProjectOutputProject {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    secondarySources: ").append(toIndentedString(secondarySources)).append("\n");
    sb.append("    sourceVersion: ").append(toIndentedString(sourceVersion)).append("\n");
    sb.append("    secondarySourceVersions: ").append(toIndentedString(secondarySourceVersions)).append("\n");
    sb.append("    artifacts: ").append(toIndentedString(artifacts)).append("\n");
    sb.append("    secondaryArtifacts: ").append(toIndentedString(secondaryArtifacts)).append("\n");
    sb.append("    cache: ").append(toIndentedString(cache)).append("\n");
    sb.append("    environment: ").append(toIndentedString(environment)).append("\n");
    sb.append("    serviceRole: ").append(toIndentedString(serviceRole)).append("\n");
    sb.append("    timeoutInMinutes: ").append(toIndentedString(timeoutInMinutes)).append("\n");
    sb.append("    queuedTimeoutInMinutes: ").append(toIndentedString(queuedTimeoutInMinutes)).append("\n");
    sb.append("    encryptionKey: ").append(toIndentedString(encryptionKey)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    lastModified: ").append(toIndentedString(lastModified)).append("\n");
    sb.append("    webhook: ").append(toIndentedString(webhook)).append("\n");
    sb.append("    vpcConfig: ").append(toIndentedString(vpcConfig)).append("\n");
    sb.append("    badge: ").append(toIndentedString(badge)).append("\n");
    sb.append("    logsConfig: ").append(toIndentedString(logsConfig)).append("\n");
    sb.append("    fileSystemLocations: ").append(toIndentedString(fileSystemLocations)).append("\n");
    sb.append("    buildBatchConfig: ").append(toIndentedString(buildBatchConfig)).append("\n");
    sb.append("    concurrentBuildLimit: ").append(toIndentedString(concurrentBuildLimit)).append("\n");
    sb.append("    projectVisibility: ").append(toIndentedString(projectVisibility)).append("\n");
    sb.append("    publicProjectAlias: ").append(toIndentedString(publicProjectAlias)).append("\n");
    sb.append("    resourceAccessRole: ").append(toIndentedString(resourceAccessRole)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("arn");
    openapiFields.add("description");
    openapiFields.add("source");
    openapiFields.add("secondarySources");
    openapiFields.add("sourceVersion");
    openapiFields.add("secondarySourceVersions");
    openapiFields.add("artifacts");
    openapiFields.add("secondaryArtifacts");
    openapiFields.add("cache");
    openapiFields.add("environment");
    openapiFields.add("serviceRole");
    openapiFields.add("timeoutInMinutes");
    openapiFields.add("queuedTimeoutInMinutes");
    openapiFields.add("encryptionKey");
    openapiFields.add("tags");
    openapiFields.add("created");
    openapiFields.add("lastModified");
    openapiFields.add("webhook");
    openapiFields.add("vpcConfig");
    openapiFields.add("badge");
    openapiFields.add("logsConfig");
    openapiFields.add("fileSystemLocations");
    openapiFields.add("buildBatchConfig");
    openapiFields.add("concurrentBuildLimit");
    openapiFields.add("projectVisibility");
    openapiFields.add("publicProjectAlias");
    openapiFields.add("resourceAccessRole");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateProjectOutputProject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateProjectOutputProject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateProjectOutputProject is not found in the empty JSON string", CreateProjectOutputProject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateProjectOutputProject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateProjectOutputProject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("name"));
      }
      // validate the optional field `arn`
      if (jsonObj.get("arn") != null && !jsonObj.get("arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("arn"));
      }
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("description"));
      }
      // validate the optional field `source`
      if (jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) {
        ProjectSource.validateJsonElement(jsonObj.get("source"));
      }
      // validate the optional field `secondarySources`
      if (jsonObj.get("secondarySources") != null && !jsonObj.get("secondarySources").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("secondarySources"));
      }
      // validate the optional field `sourceVersion`
      if (jsonObj.get("sourceVersion") != null && !jsonObj.get("sourceVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("sourceVersion"));
      }
      // validate the optional field `secondarySourceVersions`
      if (jsonObj.get("secondarySourceVersions") != null && !jsonObj.get("secondarySourceVersions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("secondarySourceVersions"));
      }
      // validate the optional field `artifacts`
      if (jsonObj.get("artifacts") != null && !jsonObj.get("artifacts").isJsonNull()) {
        CreateProjectInputArtifacts.validateJsonElement(jsonObj.get("artifacts"));
      }
      // validate the optional field `secondaryArtifacts`
      if (jsonObj.get("secondaryArtifacts") != null && !jsonObj.get("secondaryArtifacts").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("secondaryArtifacts"));
      }
      // validate the optional field `cache`
      if (jsonObj.get("cache") != null && !jsonObj.get("cache").isJsonNull()) {
        ProjectCache.validateJsonElement(jsonObj.get("cache"));
      }
      // validate the optional field `environment`
      if (jsonObj.get("environment") != null && !jsonObj.get("environment").isJsonNull()) {
        ProjectEnvironment.validateJsonElement(jsonObj.get("environment"));
      }
      // validate the optional field `serviceRole`
      if (jsonObj.get("serviceRole") != null && !jsonObj.get("serviceRole").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("serviceRole"));
      }
      // validate the optional field `timeoutInMinutes`
      if (jsonObj.get("timeoutInMinutes") != null && !jsonObj.get("timeoutInMinutes").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("timeoutInMinutes"));
      }
      // validate the optional field `queuedTimeoutInMinutes`
      if (jsonObj.get("queuedTimeoutInMinutes") != null && !jsonObj.get("queuedTimeoutInMinutes").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("queuedTimeoutInMinutes"));
      }
      // validate the optional field `encryptionKey`
      if (jsonObj.get("encryptionKey") != null && !jsonObj.get("encryptionKey").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("encryptionKey"));
      }
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("tags"));
      }
      // validate the optional field `created`
      if (jsonObj.get("created") != null && !jsonObj.get("created").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("created"));
      }
      // validate the optional field `lastModified`
      if (jsonObj.get("lastModified") != null && !jsonObj.get("lastModified").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("lastModified"));
      }
      // validate the optional field `webhook`
      if (jsonObj.get("webhook") != null && !jsonObj.get("webhook").isJsonNull()) {
        CreateWebhookOutputWebhook.validateJsonElement(jsonObj.get("webhook"));
      }
      // validate the optional field `vpcConfig`
      if (jsonObj.get("vpcConfig") != null && !jsonObj.get("vpcConfig").isJsonNull()) {
        ProjectVpcConfig.validateJsonElement(jsonObj.get("vpcConfig"));
      }
      // validate the optional field `badge`
      if (jsonObj.get("badge") != null && !jsonObj.get("badge").isJsonNull()) {
        ProjectBadge.validateJsonElement(jsonObj.get("badge"));
      }
      // validate the optional field `logsConfig`
      if (jsonObj.get("logsConfig") != null && !jsonObj.get("logsConfig").isJsonNull()) {
        ProjectLogsConfig.validateJsonElement(jsonObj.get("logsConfig"));
      }
      // validate the optional field `fileSystemLocations`
      if (jsonObj.get("fileSystemLocations") != null && !jsonObj.get("fileSystemLocations").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("fileSystemLocations"));
      }
      // validate the optional field `buildBatchConfig`
      if (jsonObj.get("buildBatchConfig") != null && !jsonObj.get("buildBatchConfig").isJsonNull()) {
        CreateProjectInputBuildBatchConfig.validateJsonElement(jsonObj.get("buildBatchConfig"));
      }
      // validate the optional field `concurrentBuildLimit`
      if (jsonObj.get("concurrentBuildLimit") != null && !jsonObj.get("concurrentBuildLimit").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("concurrentBuildLimit"));
      }
      // validate the optional field `projectVisibility`
      if (jsonObj.get("projectVisibility") != null && !jsonObj.get("projectVisibility").isJsonNull()) {
        ProjectVisibilityType.validateJsonElement(jsonObj.get("projectVisibility"));
      }
      // validate the optional field `publicProjectAlias`
      if (jsonObj.get("publicProjectAlias") != null && !jsonObj.get("publicProjectAlias").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("publicProjectAlias"));
      }
      // validate the optional field `resourceAccessRole`
      if (jsonObj.get("resourceAccessRole") != null && !jsonObj.get("resourceAccessRole").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("resourceAccessRole"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateProjectOutputProject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateProjectOutputProject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateProjectOutputProject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateProjectOutputProject.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateProjectOutputProject>() {
           @Override
           public void write(JsonWriter out, CreateProjectOutputProject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateProjectOutputProject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateProjectOutputProject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateProjectOutputProject
   * @throws IOException if the JSON string is invalid with respect to CreateProjectOutputProject
   */
  public static CreateProjectOutputProject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateProjectOutputProject.class);
  }

  /**
   * Convert an instance of CreateProjectOutputProject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

