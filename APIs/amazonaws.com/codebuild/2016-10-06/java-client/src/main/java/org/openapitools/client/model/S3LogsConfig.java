/*
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BucketOwnerAccess;
import org.openapitools.client.model.LogsConfigStatusType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 *  Information about S3 logs for a build project. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:18.687160-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class S3LogsConfig {
  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private LogsConfigStatusType status;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_ENCRYPTION_DISABLED = "encryptionDisabled";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_DISABLED)
  private Boolean encryptionDisabled;

  public static final String SERIALIZED_NAME_BUCKET_OWNER_ACCESS = "bucketOwnerAccess";
  @SerializedName(SERIALIZED_NAME_BUCKET_OWNER_ACCESS)
  private BucketOwnerAccess bucketOwnerAccess;

  public S3LogsConfig() {
  }

  public S3LogsConfig status(LogsConfigStatusType status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public LogsConfigStatusType getStatus() {
    return status;
  }

  public void setStatus(LogsConfigStatusType status) {
    this.status = status;
  }


  public S3LogsConfig location(String location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public S3LogsConfig encryptionDisabled(Boolean encryptionDisabled) {
    this.encryptionDisabled = encryptionDisabled;
    return this;
  }

  /**
   * Get encryptionDisabled
   * @return encryptionDisabled
   */
  @javax.annotation.Nullable
  public Boolean getEncryptionDisabled() {
    return encryptionDisabled;
  }

  public void setEncryptionDisabled(Boolean encryptionDisabled) {
    this.encryptionDisabled = encryptionDisabled;
  }


  public S3LogsConfig bucketOwnerAccess(BucketOwnerAccess bucketOwnerAccess) {
    this.bucketOwnerAccess = bucketOwnerAccess;
    return this;
  }

  /**
   * Get bucketOwnerAccess
   * @return bucketOwnerAccess
   */
  @javax.annotation.Nullable
  public BucketOwnerAccess getBucketOwnerAccess() {
    return bucketOwnerAccess;
  }

  public void setBucketOwnerAccess(BucketOwnerAccess bucketOwnerAccess) {
    this.bucketOwnerAccess = bucketOwnerAccess;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    S3LogsConfig s3LogsConfig = (S3LogsConfig) o;
    return Objects.equals(this.status, s3LogsConfig.status) &&
        Objects.equals(this.location, s3LogsConfig.location) &&
        Objects.equals(this.encryptionDisabled, s3LogsConfig.encryptionDisabled) &&
        Objects.equals(this.bucketOwnerAccess, s3LogsConfig.bucketOwnerAccess);
  }

  @Override
  public int hashCode() {
    return Objects.hash(status, location, encryptionDisabled, bucketOwnerAccess);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class S3LogsConfig {\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    encryptionDisabled: ").append(toIndentedString(encryptionDisabled)).append("\n");
    sb.append("    bucketOwnerAccess: ").append(toIndentedString(bucketOwnerAccess)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("status");
    openapiFields.add("location");
    openapiFields.add("encryptionDisabled");
    openapiFields.add("bucketOwnerAccess");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("status");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to S3LogsConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!S3LogsConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in S3LogsConfig is not found in the empty JSON string", S3LogsConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!S3LogsConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `S3LogsConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : S3LogsConfig.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `status`
      LogsConfigStatusType.validateJsonElement(jsonObj.get("status"));
      // validate the optional field `location`
      if (jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("location"));
      }
      // validate the optional field `encryptionDisabled`
      if (jsonObj.get("encryptionDisabled") != null && !jsonObj.get("encryptionDisabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("encryptionDisabled"));
      }
      // validate the optional field `bucketOwnerAccess`
      if (jsonObj.get("bucketOwnerAccess") != null && !jsonObj.get("bucketOwnerAccess").isJsonNull()) {
        BucketOwnerAccess.validateJsonElement(jsonObj.get("bucketOwnerAccess"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!S3LogsConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'S3LogsConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<S3LogsConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(S3LogsConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<S3LogsConfig>() {
           @Override
           public void write(JsonWriter out, S3LogsConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public S3LogsConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of S3LogsConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of S3LogsConfig
   * @throws IOException if the JSON string is invalid with respect to S3LogsConfig
   */
  public static S3LogsConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, S3LogsConfig.class);
  }

  /**
   * Convert an instance of S3LogsConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

