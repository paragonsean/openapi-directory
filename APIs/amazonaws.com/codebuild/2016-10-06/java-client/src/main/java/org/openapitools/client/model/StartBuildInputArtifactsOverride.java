/*
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ArtifactNamespace;
import org.openapitools.client.model.ArtifactPackaging;
import org.openapitools.client.model.ArtifactsType;
import org.openapitools.client.model.BucketOwnerAccess;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StartBuildInputArtifactsOverride
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:18.687160-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StartBuildInputArtifactsOverride {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private ArtifactsType type;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_NAMESPACE_TYPE = "namespaceType";
  @SerializedName(SERIALIZED_NAME_NAMESPACE_TYPE)
  private ArtifactNamespace namespaceType;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PACKAGING = "packaging";
  @SerializedName(SERIALIZED_NAME_PACKAGING)
  private ArtifactPackaging packaging;

  public static final String SERIALIZED_NAME_OVERRIDE_ARTIFACT_NAME = "overrideArtifactName";
  @SerializedName(SERIALIZED_NAME_OVERRIDE_ARTIFACT_NAME)
  private Boolean overrideArtifactName;

  public static final String SERIALIZED_NAME_ENCRYPTION_DISABLED = "encryptionDisabled";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_DISABLED)
  private Boolean encryptionDisabled;

  public static final String SERIALIZED_NAME_ARTIFACT_IDENTIFIER = "artifactIdentifier";
  @SerializedName(SERIALIZED_NAME_ARTIFACT_IDENTIFIER)
  private String artifactIdentifier;

  public static final String SERIALIZED_NAME_BUCKET_OWNER_ACCESS = "bucketOwnerAccess";
  @SerializedName(SERIALIZED_NAME_BUCKET_OWNER_ACCESS)
  private BucketOwnerAccess bucketOwnerAccess;

  public StartBuildInputArtifactsOverride() {
  }

  public StartBuildInputArtifactsOverride type(ArtifactsType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public ArtifactsType getType() {
    return type;
  }

  public void setType(ArtifactsType type) {
    this.type = type;
  }


  public StartBuildInputArtifactsOverride location(String location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public StartBuildInputArtifactsOverride path(String path) {
    this.path = path;
    return this;
  }

  /**
   * Get path
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public StartBuildInputArtifactsOverride namespaceType(ArtifactNamespace namespaceType) {
    this.namespaceType = namespaceType;
    return this;
  }

  /**
   * Get namespaceType
   * @return namespaceType
   */
  @javax.annotation.Nullable
  public ArtifactNamespace getNamespaceType() {
    return namespaceType;
  }

  public void setNamespaceType(ArtifactNamespace namespaceType) {
    this.namespaceType = namespaceType;
  }


  public StartBuildInputArtifactsOverride name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public StartBuildInputArtifactsOverride packaging(ArtifactPackaging packaging) {
    this.packaging = packaging;
    return this;
  }

  /**
   * Get packaging
   * @return packaging
   */
  @javax.annotation.Nullable
  public ArtifactPackaging getPackaging() {
    return packaging;
  }

  public void setPackaging(ArtifactPackaging packaging) {
    this.packaging = packaging;
  }


  public StartBuildInputArtifactsOverride overrideArtifactName(Boolean overrideArtifactName) {
    this.overrideArtifactName = overrideArtifactName;
    return this;
  }

  /**
   * Get overrideArtifactName
   * @return overrideArtifactName
   */
  @javax.annotation.Nullable
  public Boolean getOverrideArtifactName() {
    return overrideArtifactName;
  }

  public void setOverrideArtifactName(Boolean overrideArtifactName) {
    this.overrideArtifactName = overrideArtifactName;
  }


  public StartBuildInputArtifactsOverride encryptionDisabled(Boolean encryptionDisabled) {
    this.encryptionDisabled = encryptionDisabled;
    return this;
  }

  /**
   * Get encryptionDisabled
   * @return encryptionDisabled
   */
  @javax.annotation.Nullable
  public Boolean getEncryptionDisabled() {
    return encryptionDisabled;
  }

  public void setEncryptionDisabled(Boolean encryptionDisabled) {
    this.encryptionDisabled = encryptionDisabled;
  }


  public StartBuildInputArtifactsOverride artifactIdentifier(String artifactIdentifier) {
    this.artifactIdentifier = artifactIdentifier;
    return this;
  }

  /**
   * Get artifactIdentifier
   * @return artifactIdentifier
   */
  @javax.annotation.Nullable
  public String getArtifactIdentifier() {
    return artifactIdentifier;
  }

  public void setArtifactIdentifier(String artifactIdentifier) {
    this.artifactIdentifier = artifactIdentifier;
  }


  public StartBuildInputArtifactsOverride bucketOwnerAccess(BucketOwnerAccess bucketOwnerAccess) {
    this.bucketOwnerAccess = bucketOwnerAccess;
    return this;
  }

  /**
   * Get bucketOwnerAccess
   * @return bucketOwnerAccess
   */
  @javax.annotation.Nullable
  public BucketOwnerAccess getBucketOwnerAccess() {
    return bucketOwnerAccess;
  }

  public void setBucketOwnerAccess(BucketOwnerAccess bucketOwnerAccess) {
    this.bucketOwnerAccess = bucketOwnerAccess;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartBuildInputArtifactsOverride startBuildInputArtifactsOverride = (StartBuildInputArtifactsOverride) o;
    return Objects.equals(this.type, startBuildInputArtifactsOverride.type) &&
        Objects.equals(this.location, startBuildInputArtifactsOverride.location) &&
        Objects.equals(this.path, startBuildInputArtifactsOverride.path) &&
        Objects.equals(this.namespaceType, startBuildInputArtifactsOverride.namespaceType) &&
        Objects.equals(this.name, startBuildInputArtifactsOverride.name) &&
        Objects.equals(this.packaging, startBuildInputArtifactsOverride.packaging) &&
        Objects.equals(this.overrideArtifactName, startBuildInputArtifactsOverride.overrideArtifactName) &&
        Objects.equals(this.encryptionDisabled, startBuildInputArtifactsOverride.encryptionDisabled) &&
        Objects.equals(this.artifactIdentifier, startBuildInputArtifactsOverride.artifactIdentifier) &&
        Objects.equals(this.bucketOwnerAccess, startBuildInputArtifactsOverride.bucketOwnerAccess);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, location, path, namespaceType, name, packaging, overrideArtifactName, encryptionDisabled, artifactIdentifier, bucketOwnerAccess);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartBuildInputArtifactsOverride {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    namespaceType: ").append(toIndentedString(namespaceType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    packaging: ").append(toIndentedString(packaging)).append("\n");
    sb.append("    overrideArtifactName: ").append(toIndentedString(overrideArtifactName)).append("\n");
    sb.append("    encryptionDisabled: ").append(toIndentedString(encryptionDisabled)).append("\n");
    sb.append("    artifactIdentifier: ").append(toIndentedString(artifactIdentifier)).append("\n");
    sb.append("    bucketOwnerAccess: ").append(toIndentedString(bucketOwnerAccess)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("location");
    openapiFields.add("path");
    openapiFields.add("namespaceType");
    openapiFields.add("name");
    openapiFields.add("packaging");
    openapiFields.add("overrideArtifactName");
    openapiFields.add("encryptionDisabled");
    openapiFields.add("artifactIdentifier");
    openapiFields.add("bucketOwnerAccess");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StartBuildInputArtifactsOverride
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StartBuildInputArtifactsOverride.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartBuildInputArtifactsOverride is not found in the empty JSON string", StartBuildInputArtifactsOverride.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StartBuildInputArtifactsOverride.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StartBuildInputArtifactsOverride` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StartBuildInputArtifactsOverride.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `type`
      ArtifactsType.validateJsonElement(jsonObj.get("type"));
      // validate the optional field `location`
      if (jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("location"));
      }
      // validate the optional field `path`
      if (jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("path"));
      }
      // validate the optional field `namespaceType`
      if (jsonObj.get("namespaceType") != null && !jsonObj.get("namespaceType").isJsonNull()) {
        ArtifactNamespace.validateJsonElement(jsonObj.get("namespaceType"));
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("name"));
      }
      // validate the optional field `packaging`
      if (jsonObj.get("packaging") != null && !jsonObj.get("packaging").isJsonNull()) {
        ArtifactPackaging.validateJsonElement(jsonObj.get("packaging"));
      }
      // validate the optional field `overrideArtifactName`
      if (jsonObj.get("overrideArtifactName") != null && !jsonObj.get("overrideArtifactName").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("overrideArtifactName"));
      }
      // validate the optional field `encryptionDisabled`
      if (jsonObj.get("encryptionDisabled") != null && !jsonObj.get("encryptionDisabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("encryptionDisabled"));
      }
      // validate the optional field `artifactIdentifier`
      if (jsonObj.get("artifactIdentifier") != null && !jsonObj.get("artifactIdentifier").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("artifactIdentifier"));
      }
      // validate the optional field `bucketOwnerAccess`
      if (jsonObj.get("bucketOwnerAccess") != null && !jsonObj.get("bucketOwnerAccess").isJsonNull()) {
        BucketOwnerAccess.validateJsonElement(jsonObj.get("bucketOwnerAccess"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartBuildInputArtifactsOverride.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartBuildInputArtifactsOverride' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartBuildInputArtifactsOverride> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartBuildInputArtifactsOverride.class));

       return (TypeAdapter<T>) new TypeAdapter<StartBuildInputArtifactsOverride>() {
           @Override
           public void write(JsonWriter out, StartBuildInputArtifactsOverride value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StartBuildInputArtifactsOverride read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StartBuildInputArtifactsOverride given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StartBuildInputArtifactsOverride
   * @throws IOException if the JSON string is invalid with respect to StartBuildInputArtifactsOverride
   */
  public static StartBuildInputArtifactsOverride fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartBuildInputArtifactsOverride.class);
  }

  /**
   * Convert an instance of StartBuildInputArtifactsOverride to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

