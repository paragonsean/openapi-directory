/*
 * AWS CodeBuild
 * <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the <i> <a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html\">CodeBuild User Guide</a>.</i> </p>
 *
 * The version of the OpenAPI document: 2016-10-06
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BatchDeleteBuildsInput;
import org.openapitools.client.model.BatchDeleteBuildsOutput;
import org.openapitools.client.model.BatchGetBuildBatchesInput;
import org.openapitools.client.model.BatchGetBuildBatchesOutput;
import org.openapitools.client.model.BatchGetBuildsInput;
import org.openapitools.client.model.BatchGetBuildsOutput;
import org.openapitools.client.model.BatchGetProjectsInput;
import org.openapitools.client.model.BatchGetProjectsOutput;
import org.openapitools.client.model.BatchGetReportGroupsInput;
import org.openapitools.client.model.BatchGetReportGroupsOutput;
import org.openapitools.client.model.BatchGetReportsInput;
import org.openapitools.client.model.BatchGetReportsOutput;
import org.openapitools.client.model.CreateProjectInput;
import org.openapitools.client.model.CreateProjectOutput;
import org.openapitools.client.model.CreateReportGroupInput;
import org.openapitools.client.model.CreateReportGroupOutput;
import org.openapitools.client.model.CreateWebhookInput;
import org.openapitools.client.model.CreateWebhookOutput;
import org.openapitools.client.model.DeleteBuildBatchInput;
import org.openapitools.client.model.DeleteBuildBatchOutput;
import org.openapitools.client.model.DeleteProjectInput;
import org.openapitools.client.model.DeleteReportGroupInput;
import org.openapitools.client.model.DeleteReportInput;
import org.openapitools.client.model.DeleteResourcePolicyInput;
import org.openapitools.client.model.DeleteSourceCredentialsInput;
import org.openapitools.client.model.DeleteSourceCredentialsOutput;
import org.openapitools.client.model.DeleteWebhookInput;
import org.openapitools.client.model.DescribeCodeCoveragesInput;
import org.openapitools.client.model.DescribeCodeCoveragesOutput;
import org.openapitools.client.model.DescribeTestCasesInput;
import org.openapitools.client.model.DescribeTestCasesOutput;
import org.openapitools.client.model.GetReportGroupTrendInput;
import org.openapitools.client.model.GetReportGroupTrendOutput;
import org.openapitools.client.model.GetResourcePolicyInput;
import org.openapitools.client.model.GetResourcePolicyOutput;
import org.openapitools.client.model.ImportSourceCredentialsInput;
import org.openapitools.client.model.ImportSourceCredentialsOutput;
import org.openapitools.client.model.InvalidateProjectCacheInput;
import org.openapitools.client.model.ListBuildBatchesForProjectInput;
import org.openapitools.client.model.ListBuildBatchesForProjectOutput;
import org.openapitools.client.model.ListBuildBatchesInput;
import org.openapitools.client.model.ListBuildBatchesOutput;
import org.openapitools.client.model.ListBuildsForProjectInput;
import org.openapitools.client.model.ListBuildsForProjectOutput;
import org.openapitools.client.model.ListBuildsInput;
import org.openapitools.client.model.ListBuildsOutput;
import org.openapitools.client.model.ListCuratedEnvironmentImagesOutput;
import org.openapitools.client.model.ListProjectsInput;
import org.openapitools.client.model.ListProjectsOutput;
import org.openapitools.client.model.ListReportGroupsInput;
import org.openapitools.client.model.ListReportGroupsOutput;
import org.openapitools.client.model.ListReportsForReportGroupInput;
import org.openapitools.client.model.ListReportsForReportGroupOutput;
import org.openapitools.client.model.ListReportsInput;
import org.openapitools.client.model.ListReportsOutput;
import org.openapitools.client.model.ListSharedProjectsInput;
import org.openapitools.client.model.ListSharedProjectsOutput;
import org.openapitools.client.model.ListSharedReportGroupsInput;
import org.openapitools.client.model.ListSharedReportGroupsOutput;
import org.openapitools.client.model.ListSourceCredentialsOutput;
import org.openapitools.client.model.PutResourcePolicyInput;
import org.openapitools.client.model.PutResourcePolicyOutput;
import org.openapitools.client.model.RetryBuildBatchInput;
import org.openapitools.client.model.RetryBuildBatchOutput;
import org.openapitools.client.model.RetryBuildInput;
import org.openapitools.client.model.RetryBuildOutput;
import org.openapitools.client.model.StartBuildBatchInput;
import org.openapitools.client.model.StartBuildBatchOutput;
import org.openapitools.client.model.StartBuildInput;
import org.openapitools.client.model.StartBuildOutput;
import org.openapitools.client.model.StopBuildBatchInput;
import org.openapitools.client.model.StopBuildBatchOutput;
import org.openapitools.client.model.StopBuildInput;
import org.openapitools.client.model.StopBuildOutput;
import org.openapitools.client.model.UpdateProjectInput;
import org.openapitools.client.model.UpdateProjectOutput;
import org.openapitools.client.model.UpdateProjectVisibilityInput;
import org.openapitools.client.model.UpdateProjectVisibilityOutput;
import org.openapitools.client.model.UpdateReportGroupInput;
import org.openapitools.client.model.UpdateReportGroupOutput;
import org.openapitools.client.model.UpdateWebhookInput;
import org.openapitools.client.model.UpdateWebhookOutput;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Deletes one or more builds.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchDeleteBuildsTest() throws ApiException {
        String xAmzTarget = null;
        BatchDeleteBuildsInput batchDeleteBuildsInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchDeleteBuildsOutput response = api.batchDeleteBuilds(xAmzTarget, batchDeleteBuildsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves information about one or more batch builds.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchGetBuildBatchesTest() throws ApiException {
        String xAmzTarget = null;
        BatchGetBuildBatchesInput batchGetBuildBatchesInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchGetBuildBatchesOutput response = api.batchGetBuildBatches(xAmzTarget, batchGetBuildBatchesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about one or more builds.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchGetBuildsTest() throws ApiException {
        String xAmzTarget = null;
        BatchGetBuildsInput batchGetBuildsInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchGetBuildsOutput response = api.batchGetBuilds(xAmzTarget, batchGetBuildsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about one or more build projects.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchGetProjectsTest() throws ApiException {
        String xAmzTarget = null;
        BatchGetProjectsInput batchGetProjectsInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchGetProjectsOutput response = api.batchGetProjects(xAmzTarget, batchGetProjectsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Returns an array of report groups. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchGetReportGroupsTest() throws ApiException {
        String xAmzTarget = null;
        BatchGetReportGroupsInput batchGetReportGroupsInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchGetReportGroupsOutput response = api.batchGetReportGroups(xAmzTarget, batchGetReportGroupsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Returns an array of reports. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchGetReportsTest() throws ApiException {
        String xAmzTarget = null;
        BatchGetReportsInput batchGetReportsInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchGetReportsOutput response = api.batchGetReports(xAmzTarget, batchGetReportsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a build project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createProjectTest() throws ApiException {
        String xAmzTarget = null;
        CreateProjectInput createProjectInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateProjectOutput response = api.createProject(xAmzTarget, createProjectInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Creates a report group. A report group contains a collection of reports. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createReportGroupTest() throws ApiException {
        String xAmzTarget = null;
        CreateReportGroupInput createReportGroupInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateReportGroupOutput response = api.createReportGroup(xAmzTarget, createReportGroupInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;For an existing CodeBuild build project that has its source code stored in a GitHub or Bitbucket repository, enables CodeBuild to start rebuilding the source code every time a code change is pushed to the repository.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If you enable webhooks for an CodeBuild project, and the project is used as a build step in CodePipeline, then two identical builds are created for each commit. One build is triggered through webhooks, and one through CodePipeline. Because billing is on a per-build basis, you are billed for both builds. Therefore, if you are using CodePipeline, we recommend that you disable webhooks in CodeBuild. In the CodeBuild console, clear the Webhook box. For more information, see step 5 in &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/codebuild/latest/userguide/change-project.html#change-project-console\&quot;&gt;Change a Build Project&#39;s Settings&lt;/a&gt;.&lt;/p&gt; &lt;/important&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createWebhookTest() throws ApiException {
        String xAmzTarget = null;
        CreateWebhookInput createWebhookInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateWebhookOutput response = api.createWebhook(xAmzTarget, createWebhookInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a batch build.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteBuildBatchTest() throws ApiException {
        String xAmzTarget = null;
        DeleteBuildBatchInput deleteBuildBatchInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteBuildBatchOutput response = api.deleteBuildBatch(xAmzTarget, deleteBuildBatchInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Deletes a build project. When you delete a project, its builds are not deleted. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteProjectTest() throws ApiException {
        String xAmzTarget = null;
        DeleteProjectInput deleteProjectInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteProject(xAmzTarget, deleteProjectInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Deletes a report. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteReportTest() throws ApiException {
        String xAmzTarget = null;
        DeleteReportInput deleteReportInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteReport(xAmzTarget, deleteReportInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a report group. Before you delete a report group, you must delete its reports. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteReportGroupTest() throws ApiException {
        String xAmzTarget = null;
        DeleteReportGroupInput deleteReportGroupInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteReportGroup(xAmzTarget, deleteReportGroupInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Deletes a resource policy that is identified by its resource ARN. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteResourcePolicyTest() throws ApiException {
        String xAmzTarget = null;
        DeleteResourcePolicyInput deleteResourcePolicyInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteResourcePolicy(xAmzTarget, deleteResourcePolicyInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Deletes a set of GitHub, GitHub Enterprise, or Bitbucket source credentials. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSourceCredentialsTest() throws ApiException {
        String xAmzTarget = null;
        DeleteSourceCredentialsInput deleteSourceCredentialsInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteSourceCredentialsOutput response = api.deleteSourceCredentials(xAmzTarget, deleteSourceCredentialsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * For an existing CodeBuild build project that has its source code stored in a GitHub or Bitbucket repository, stops CodeBuild from rebuilding the source code every time a code change is pushed to the repository.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteWebhookTest() throws ApiException {
        String xAmzTarget = null;
        DeleteWebhookInput deleteWebhookInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteWebhook(xAmzTarget, deleteWebhookInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves one or more code coverage reports.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeCodeCoveragesTest() throws ApiException {
        String xAmzTarget = null;
        DescribeCodeCoveragesInput describeCodeCoveragesInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        DescribeCodeCoveragesOutput response = api.describeCodeCoverages(xAmzTarget, describeCodeCoveragesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     *  Returns a list of details about test cases for a report. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeTestCasesTest() throws ApiException {
        String xAmzTarget = null;
        DescribeTestCasesInput describeTestCasesInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        DescribeTestCasesOutput response = api.describeTestCases(xAmzTarget, describeTestCasesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Analyzes and accumulates test report values for the specified test reports.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReportGroupTrendTest() throws ApiException {
        String xAmzTarget = null;
        GetReportGroupTrendInput getReportGroupTrendInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetReportGroupTrendOutput response = api.getReportGroupTrend(xAmzTarget, getReportGroupTrendInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Gets a resource policy that is identified by its resource ARN. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getResourcePolicyTest() throws ApiException {
        String xAmzTarget = null;
        GetResourcePolicyInput getResourcePolicyInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetResourcePolicyOutput response = api.getResourcePolicy(xAmzTarget, getResourcePolicyInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Imports the source repository credentials for an CodeBuild project that has its source code stored in a GitHub, GitHub Enterprise, or Bitbucket repository. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void importSourceCredentialsTest() throws ApiException {
        String xAmzTarget = null;
        ImportSourceCredentialsInput importSourceCredentialsInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ImportSourceCredentialsOutput response = api.importSourceCredentials(xAmzTarget, importSourceCredentialsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Resets the cache for a project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void invalidateProjectCacheTest() throws ApiException {
        String xAmzTarget = null;
        InvalidateProjectCacheInput invalidateProjectCacheInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.invalidateProjectCache(xAmzTarget, invalidateProjectCacheInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the identifiers of your build batches in the current region.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listBuildBatchesTest() throws ApiException {
        String xAmzTarget = null;
        ListBuildBatchesInput listBuildBatchesInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListBuildBatchesOutput response = api.listBuildBatches(xAmzTarget, listBuildBatchesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves the identifiers of the build batches for a specific project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listBuildBatchesForProjectTest() throws ApiException {
        String xAmzTarget = null;
        ListBuildBatchesForProjectInput listBuildBatchesForProjectInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListBuildBatchesForProjectOutput response = api.listBuildBatchesForProject(xAmzTarget, listBuildBatchesForProjectInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Gets a list of build IDs, with each build ID representing a single build.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listBuildsTest() throws ApiException {
        String xAmzTarget = null;
        ListBuildsInput listBuildsInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        ListBuildsOutput response = api.listBuilds(xAmzTarget, listBuildsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        // TODO: test validations
    }

    /**
     * Gets a list of build identifiers for the specified build project, with each build identifier representing a single build.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listBuildsForProjectTest() throws ApiException {
        String xAmzTarget = null;
        ListBuildsForProjectInput listBuildsForProjectInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        ListBuildsForProjectOutput response = api.listBuildsForProject(xAmzTarget, listBuildsForProjectInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        // TODO: test validations
    }

    /**
     * Gets information about Docker images that are managed by CodeBuild.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCuratedEnvironmentImagesTest() throws ApiException {
        String xAmzTarget = null;
        Object body = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListCuratedEnvironmentImagesOutput response = api.listCuratedEnvironmentImages(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets a list of build project names, with each build project name representing a single build project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listProjectsTest() throws ApiException {
        String xAmzTarget = null;
        ListProjectsInput listProjectsInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        ListProjectsOutput response = api.listProjects(xAmzTarget, listProjectsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        // TODO: test validations
    }

    /**
     *  Gets a list ARNs for the report groups in the current Amazon Web Services account. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listReportGroupsTest() throws ApiException {
        String xAmzTarget = null;
        ListReportGroupsInput listReportGroupsInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListReportGroupsOutput response = api.listReportGroups(xAmzTarget, listReportGroupsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     *  Returns a list of ARNs for the reports in the current Amazon Web Services account. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listReportsTest() throws ApiException {
        String xAmzTarget = null;
        ListReportsInput listReportsInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListReportsOutput response = api.listReports(xAmzTarget, listReportsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     *  Returns a list of ARNs for the reports that belong to a &lt;code&gt;ReportGroup&lt;/code&gt;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listReportsForReportGroupTest() throws ApiException {
        String xAmzTarget = null;
        ListReportsForReportGroupInput listReportsForReportGroupInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListReportsForReportGroupOutput response = api.listReportsForReportGroup(xAmzTarget, listReportsForReportGroupInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     *  Gets a list of projects that are shared with other Amazon Web Services accounts or users. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSharedProjectsTest() throws ApiException {
        String xAmzTarget = null;
        ListSharedProjectsInput listSharedProjectsInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListSharedProjectsOutput response = api.listSharedProjects(xAmzTarget, listSharedProjectsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     *  Gets a list of report groups that are shared with other Amazon Web Services accounts or users. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSharedReportGroupsTest() throws ApiException {
        String xAmzTarget = null;
        ListSharedReportGroupsInput listSharedReportGroupsInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListSharedReportGroupsOutput response = api.listSharedReportGroups(xAmzTarget, listSharedReportGroupsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     *  Returns a list of &lt;code&gt;SourceCredentialsInfo&lt;/code&gt; objects. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSourceCredentialsTest() throws ApiException {
        String xAmzTarget = null;
        Object body = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListSourceCredentialsOutput response = api.listSourceCredentials(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Stores a resource policy for the ARN of a &lt;code&gt;Project&lt;/code&gt; or &lt;code&gt;ReportGroup&lt;/code&gt; object. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putResourcePolicyTest() throws ApiException {
        String xAmzTarget = null;
        PutResourcePolicyInput putResourcePolicyInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PutResourcePolicyOutput response = api.putResourcePolicy(xAmzTarget, putResourcePolicyInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Restarts a build.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retryBuildTest() throws ApiException {
        String xAmzTarget = null;
        RetryBuildInput retryBuildInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RetryBuildOutput response = api.retryBuild(xAmzTarget, retryBuildInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Restarts a failed batch build. Only batch builds that have failed can be retried.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retryBuildBatchTest() throws ApiException {
        String xAmzTarget = null;
        RetryBuildBatchInput retryBuildBatchInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RetryBuildBatchOutput response = api.retryBuildBatch(xAmzTarget, retryBuildBatchInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Starts running a build.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startBuildTest() throws ApiException {
        String xAmzTarget = null;
        StartBuildInput startBuildInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartBuildOutput response = api.startBuild(xAmzTarget, startBuildInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Starts a batch build for a project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startBuildBatchTest() throws ApiException {
        String xAmzTarget = null;
        StartBuildBatchInput startBuildBatchInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartBuildBatchOutput response = api.startBuildBatch(xAmzTarget, startBuildBatchInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Attempts to stop running a build.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopBuildTest() throws ApiException {
        String xAmzTarget = null;
        StopBuildInput stopBuildInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StopBuildOutput response = api.stopBuild(xAmzTarget, stopBuildInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Stops a running batch build.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopBuildBatchTest() throws ApiException {
        String xAmzTarget = null;
        StopBuildBatchInput stopBuildBatchInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StopBuildBatchOutput response = api.stopBuildBatch(xAmzTarget, stopBuildBatchInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Changes the settings of a build project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProjectTest() throws ApiException {
        String xAmzTarget = null;
        UpdateProjectInput updateProjectInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateProjectOutput response = api.updateProject(xAmzTarget, updateProjectInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Changes the public visibility for a project. The project&#39;s build results, logs, and artifacts are available to the general public. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/codebuild/latest/userguide/public-builds.html\&quot;&gt;Public build projects&lt;/a&gt; in the &lt;i&gt;CodeBuild User Guide&lt;/i&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;The following should be kept in mind when making your projects public:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;All of a project&#39;s build results, logs, and artifacts, including builds that were run when the project was private, are available to the general public.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;All build logs and artifacts are available to the public. Environment variables, source code, and other sensitive information may have been output to the build logs and artifacts. You must be careful about what information is output to the build logs. Some best practice are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Do not store sensitive values, especially Amazon Web Services access key IDs and secret access keys, in environment variables. We recommend that you use an Amazon EC2 Systems Manager Parameter Store or Secrets Manager to store sensitive values.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Follow &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/codebuild/latest/userguide/webhooks.html#webhook-best-practices\&quot;&gt;Best practices for using webhooks&lt;/a&gt; in the &lt;i&gt;CodeBuild User Guide&lt;/i&gt; to limit which entities can trigger a build, and do not store the buildspec in the project itself, to ensure that your webhooks are as secure as possible.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A malicious user can use public builds to distribute malicious artifacts. We recommend that you review all pull requests to verify that the pull request is a legitimate change. We also recommend that you validate any artifacts with their checksums to make sure that the correct artifacts are being downloaded.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/important&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProjectVisibilityTest() throws ApiException {
        String xAmzTarget = null;
        UpdateProjectVisibilityInput updateProjectVisibilityInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateProjectVisibilityOutput response = api.updateProjectVisibility(xAmzTarget, updateProjectVisibilityInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Updates a report group. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateReportGroupTest() throws ApiException {
        String xAmzTarget = null;
        UpdateReportGroupInput updateReportGroupInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateReportGroupOutput response = api.updateReportGroup(xAmzTarget, updateReportGroupInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt; Updates the webhook associated with an CodeBuild build project. &lt;/p&gt; &lt;note&gt; &lt;p&gt; If you use Bitbucket for your repository, &lt;code&gt;rotateSecret&lt;/code&gt; is ignored. &lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateWebhookTest() throws ApiException {
        String xAmzTarget = null;
        UpdateWebhookInput updateWebhookInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateWebhookOutput response = api.updateWebhook(xAmzTarget, updateWebhookInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
