/**
 * Amazon EC2 Container Registry
 * <fullname>Amazon Elastic Container Registry</fullname> <p>Amazon Elastic Container Registry (Amazon ECR) is a managed container image registry service. Customers can use the familiar Docker CLI, or their preferred client, to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports private repositories with resource-based permissions using IAM so that specific users or Amazon EC2 instances can access repositories and images.</p> <p>Amazon ECR has service endpoints in each supported Region. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/ecr.html\">Amazon ECR endpoints</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2015-09-21
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonEc2ContainerRegistry);
  }
}(this, function(expect, AmazonEc2ContainerRegistry) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonEc2ContainerRegistry.PutImageScanningConfigurationResponse();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PutImageScanningConfigurationResponse', function() {
    it('should create an instance of PutImageScanningConfigurationResponse', function() {
      // uncomment below and update the code to test PutImageScanningConfigurationResponse
      //var instance = new AmazonEc2ContainerRegistry.PutImageScanningConfigurationResponse();
      //expect(instance).to.be.a(AmazonEc2ContainerRegistry.PutImageScanningConfigurationResponse);
    });

    it('should have the property registryId (base name: "registryId")', function() {
      // uncomment below and update the code to test the property registryId
      //var instance = new AmazonEc2ContainerRegistry.PutImageScanningConfigurationResponse();
      //expect(instance).to.be();
    });

    it('should have the property repositoryName (base name: "repositoryName")', function() {
      // uncomment below and update the code to test the property repositoryName
      //var instance = new AmazonEc2ContainerRegistry.PutImageScanningConfigurationResponse();
      //expect(instance).to.be();
    });

    it('should have the property imageScanningConfiguration (base name: "imageScanningConfiguration")', function() {
      // uncomment below and update the code to test the property imageScanningConfiguration
      //var instance = new AmazonEc2ContainerRegistry.PutImageScanningConfigurationResponse();
      //expect(instance).to.be();
    });

  });

}));
