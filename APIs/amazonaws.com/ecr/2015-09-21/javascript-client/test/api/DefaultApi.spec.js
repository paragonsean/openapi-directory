/**
 * Amazon EC2 Container Registry
 * <fullname>Amazon Elastic Container Registry</fullname> <p>Amazon Elastic Container Registry (Amazon ECR) is a managed container image registry service. Customers can use the familiar Docker CLI, or their preferred client, to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports private repositories with resource-based permissions using IAM so that specific users or Amazon EC2 instances can access repositories and images.</p> <p>Amazon ECR has service endpoints in each supported Region. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/ecr.html\">Amazon ECR endpoints</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2015-09-21
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonEc2ContainerRegistry);
  }
}(this, function(expect, AmazonEc2ContainerRegistry) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonEc2ContainerRegistry.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('batchCheckLayerAvailability', function() {
      it('should call batchCheckLayerAvailability successfully', function(done) {
        //uncomment below and update the code to test batchCheckLayerAvailability
        //instance.batchCheckLayerAvailability(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('batchDeleteImage', function() {
      it('should call batchDeleteImage successfully', function(done) {
        //uncomment below and update the code to test batchDeleteImage
        //instance.batchDeleteImage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('batchGetImage', function() {
      it('should call batchGetImage successfully', function(done) {
        //uncomment below and update the code to test batchGetImage
        //instance.batchGetImage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('batchGetRepositoryScanningConfiguration', function() {
      it('should call batchGetRepositoryScanningConfiguration successfully', function(done) {
        //uncomment below and update the code to test batchGetRepositoryScanningConfiguration
        //instance.batchGetRepositoryScanningConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('completeLayerUpload', function() {
      it('should call completeLayerUpload successfully', function(done) {
        //uncomment below and update the code to test completeLayerUpload
        //instance.completeLayerUpload(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createPullThroughCacheRule', function() {
      it('should call createPullThroughCacheRule successfully', function(done) {
        //uncomment below and update the code to test createPullThroughCacheRule
        //instance.createPullThroughCacheRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createRepository', function() {
      it('should call createRepository successfully', function(done) {
        //uncomment below and update the code to test createRepository
        //instance.createRepository(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteLifecyclePolicy', function() {
      it('should call deleteLifecyclePolicy successfully', function(done) {
        //uncomment below and update the code to test deleteLifecyclePolicy
        //instance.deleteLifecyclePolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deletePullThroughCacheRule', function() {
      it('should call deletePullThroughCacheRule successfully', function(done) {
        //uncomment below and update the code to test deletePullThroughCacheRule
        //instance.deletePullThroughCacheRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteRegistryPolicy', function() {
      it('should call deleteRegistryPolicy successfully', function(done) {
        //uncomment below and update the code to test deleteRegistryPolicy
        //instance.deleteRegistryPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteRepository', function() {
      it('should call deleteRepository successfully', function(done) {
        //uncomment below and update the code to test deleteRepository
        //instance.deleteRepository(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteRepositoryPolicy', function() {
      it('should call deleteRepositoryPolicy successfully', function(done) {
        //uncomment below and update the code to test deleteRepositoryPolicy
        //instance.deleteRepositoryPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeImageReplicationStatus', function() {
      it('should call describeImageReplicationStatus successfully', function(done) {
        //uncomment below and update the code to test describeImageReplicationStatus
        //instance.describeImageReplicationStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeImageScanFindings', function() {
      it('should call describeImageScanFindings successfully', function(done) {
        //uncomment below and update the code to test describeImageScanFindings
        //instance.describeImageScanFindings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeImages', function() {
      it('should call describeImages successfully', function(done) {
        //uncomment below and update the code to test describeImages
        //instance.describeImages(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describePullThroughCacheRules', function() {
      it('should call describePullThroughCacheRules successfully', function(done) {
        //uncomment below and update the code to test describePullThroughCacheRules
        //instance.describePullThroughCacheRules(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeRegistry', function() {
      it('should call describeRegistry successfully', function(done) {
        //uncomment below and update the code to test describeRegistry
        //instance.describeRegistry(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeRepositories', function() {
      it('should call describeRepositories successfully', function(done) {
        //uncomment below and update the code to test describeRepositories
        //instance.describeRepositories(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAuthorizationToken', function() {
      it('should call getAuthorizationToken successfully', function(done) {
        //uncomment below and update the code to test getAuthorizationToken
        //instance.getAuthorizationToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDownloadUrlForLayer', function() {
      it('should call getDownloadUrlForLayer successfully', function(done) {
        //uncomment below and update the code to test getDownloadUrlForLayer
        //instance.getDownloadUrlForLayer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLifecyclePolicy', function() {
      it('should call getLifecyclePolicy successfully', function(done) {
        //uncomment below and update the code to test getLifecyclePolicy
        //instance.getLifecyclePolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLifecyclePolicyPreview', function() {
      it('should call getLifecyclePolicyPreview successfully', function(done) {
        //uncomment below and update the code to test getLifecyclePolicyPreview
        //instance.getLifecyclePolicyPreview(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRegistryPolicy', function() {
      it('should call getRegistryPolicy successfully', function(done) {
        //uncomment below and update the code to test getRegistryPolicy
        //instance.getRegistryPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRegistryScanningConfiguration', function() {
      it('should call getRegistryScanningConfiguration successfully', function(done) {
        //uncomment below and update the code to test getRegistryScanningConfiguration
        //instance.getRegistryScanningConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRepositoryPolicy', function() {
      it('should call getRepositoryPolicy successfully', function(done) {
        //uncomment below and update the code to test getRepositoryPolicy
        //instance.getRepositoryPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('initiateLayerUpload', function() {
      it('should call initiateLayerUpload successfully', function(done) {
        //uncomment below and update the code to test initiateLayerUpload
        //instance.initiateLayerUpload(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listImages', function() {
      it('should call listImages successfully', function(done) {
        //uncomment below and update the code to test listImages
        //instance.listImages(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putImage', function() {
      it('should call putImage successfully', function(done) {
        //uncomment below and update the code to test putImage
        //instance.putImage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putImageScanningConfiguration', function() {
      it('should call putImageScanningConfiguration successfully', function(done) {
        //uncomment below and update the code to test putImageScanningConfiguration
        //instance.putImageScanningConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putImageTagMutability', function() {
      it('should call putImageTagMutability successfully', function(done) {
        //uncomment below and update the code to test putImageTagMutability
        //instance.putImageTagMutability(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putLifecyclePolicy', function() {
      it('should call putLifecyclePolicy successfully', function(done) {
        //uncomment below and update the code to test putLifecyclePolicy
        //instance.putLifecyclePolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putRegistryPolicy', function() {
      it('should call putRegistryPolicy successfully', function(done) {
        //uncomment below and update the code to test putRegistryPolicy
        //instance.putRegistryPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putRegistryScanningConfiguration', function() {
      it('should call putRegistryScanningConfiguration successfully', function(done) {
        //uncomment below and update the code to test putRegistryScanningConfiguration
        //instance.putRegistryScanningConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putReplicationConfiguration', function() {
      it('should call putReplicationConfiguration successfully', function(done) {
        //uncomment below and update the code to test putReplicationConfiguration
        //instance.putReplicationConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setRepositoryPolicy', function() {
      it('should call setRepositoryPolicy successfully', function(done) {
        //uncomment below and update the code to test setRepositoryPolicy
        //instance.setRepositoryPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startImageScan', function() {
      it('should call startImageScan successfully', function(done) {
        //uncomment below and update the code to test startImageScan
        //instance.startImageScan(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startLifecyclePolicyPreview', function() {
      it('should call startLifecyclePolicyPreview successfully', function(done) {
        //uncomment below and update the code to test startLifecyclePolicyPreview
        //instance.startLifecyclePolicyPreview(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uploadLayerPart', function() {
      it('should call uploadLayerPart successfully', function(done) {
        //uncomment below and update the code to test uploadLayerPart
        //instance.uploadLayerPart(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
