/**
 * Amazon EC2 Container Registry
 * <fullname>Amazon Elastic Container Registry</fullname> <p>Amazon Elastic Container Registry (Amazon ECR) is a managed container image registry service. Customers can use the familiar Docker CLI, or their preferred client, to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports private repositories with resource-based permissions using IAM so that specific users or Amazon EC2 instances can access repositories and images.</p> <p>Amazon ECR has service endpoints in each supported Region. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/ecr.html\">Amazon ECR endpoints</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2015-09-21
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BatchCheckLayerAvailabilityRequest from '../model/BatchCheckLayerAvailabilityRequest';
import BatchCheckLayerAvailabilityResponse from '../model/BatchCheckLayerAvailabilityResponse';
import BatchDeleteImageRequest from '../model/BatchDeleteImageRequest';
import BatchDeleteImageResponse from '../model/BatchDeleteImageResponse';
import BatchGetImageRequest from '../model/BatchGetImageRequest';
import BatchGetImageResponse from '../model/BatchGetImageResponse';
import BatchGetRepositoryScanningConfigurationRequest from '../model/BatchGetRepositoryScanningConfigurationRequest';
import BatchGetRepositoryScanningConfigurationResponse from '../model/BatchGetRepositoryScanningConfigurationResponse';
import CompleteLayerUploadRequest from '../model/CompleteLayerUploadRequest';
import CompleteLayerUploadResponse from '../model/CompleteLayerUploadResponse';
import CreatePullThroughCacheRuleRequest from '../model/CreatePullThroughCacheRuleRequest';
import CreatePullThroughCacheRuleResponse from '../model/CreatePullThroughCacheRuleResponse';
import CreateRepositoryRequest from '../model/CreateRepositoryRequest';
import CreateRepositoryResponse from '../model/CreateRepositoryResponse';
import DeleteLifecyclePolicyRequest from '../model/DeleteLifecyclePolicyRequest';
import DeleteLifecyclePolicyResponse from '../model/DeleteLifecyclePolicyResponse';
import DeletePullThroughCacheRuleRequest from '../model/DeletePullThroughCacheRuleRequest';
import DeletePullThroughCacheRuleResponse from '../model/DeletePullThroughCacheRuleResponse';
import DeleteRegistryPolicyResponse from '../model/DeleteRegistryPolicyResponse';
import DeleteRepositoryPolicyRequest from '../model/DeleteRepositoryPolicyRequest';
import DeleteRepositoryPolicyResponse from '../model/DeleteRepositoryPolicyResponse';
import DeleteRepositoryRequest from '../model/DeleteRepositoryRequest';
import DeleteRepositoryResponse from '../model/DeleteRepositoryResponse';
import DescribeImageReplicationStatusRequest from '../model/DescribeImageReplicationStatusRequest';
import DescribeImageReplicationStatusResponse from '../model/DescribeImageReplicationStatusResponse';
import DescribeImageScanFindingsRequest from '../model/DescribeImageScanFindingsRequest';
import DescribeImageScanFindingsResponse from '../model/DescribeImageScanFindingsResponse';
import DescribeImagesRequest from '../model/DescribeImagesRequest';
import DescribeImagesResponse from '../model/DescribeImagesResponse';
import DescribePullThroughCacheRulesRequest from '../model/DescribePullThroughCacheRulesRequest';
import DescribePullThroughCacheRulesResponse from '../model/DescribePullThroughCacheRulesResponse';
import DescribeRegistryResponse from '../model/DescribeRegistryResponse';
import DescribeRepositoriesRequest from '../model/DescribeRepositoriesRequest';
import DescribeRepositoriesResponse from '../model/DescribeRepositoriesResponse';
import GetAuthorizationTokenRequest from '../model/GetAuthorizationTokenRequest';
import GetAuthorizationTokenResponse from '../model/GetAuthorizationTokenResponse';
import GetDownloadUrlForLayerRequest from '../model/GetDownloadUrlForLayerRequest';
import GetDownloadUrlForLayerResponse from '../model/GetDownloadUrlForLayerResponse';
import GetLifecyclePolicyPreviewRequest from '../model/GetLifecyclePolicyPreviewRequest';
import GetLifecyclePolicyPreviewResponse from '../model/GetLifecyclePolicyPreviewResponse';
import GetLifecyclePolicyRequest from '../model/GetLifecyclePolicyRequest';
import GetLifecyclePolicyResponse from '../model/GetLifecyclePolicyResponse';
import GetRegistryPolicyResponse from '../model/GetRegistryPolicyResponse';
import GetRegistryScanningConfigurationResponse from '../model/GetRegistryScanningConfigurationResponse';
import GetRepositoryPolicyRequest from '../model/GetRepositoryPolicyRequest';
import GetRepositoryPolicyResponse from '../model/GetRepositoryPolicyResponse';
import InitiateLayerUploadRequest from '../model/InitiateLayerUploadRequest';
import InitiateLayerUploadResponse from '../model/InitiateLayerUploadResponse';
import ListImagesRequest from '../model/ListImagesRequest';
import ListImagesResponse from '../model/ListImagesResponse';
import ListTagsForResourceRequest from '../model/ListTagsForResourceRequest';
import ListTagsForResourceResponse from '../model/ListTagsForResourceResponse';
import PutImageRequest from '../model/PutImageRequest';
import PutImageResponse from '../model/PutImageResponse';
import PutImageScanningConfigurationRequest from '../model/PutImageScanningConfigurationRequest';
import PutImageScanningConfigurationResponse from '../model/PutImageScanningConfigurationResponse';
import PutImageTagMutabilityRequest from '../model/PutImageTagMutabilityRequest';
import PutImageTagMutabilityResponse from '../model/PutImageTagMutabilityResponse';
import PutLifecyclePolicyRequest from '../model/PutLifecyclePolicyRequest';
import PutLifecyclePolicyResponse from '../model/PutLifecyclePolicyResponse';
import PutRegistryPolicyRequest from '../model/PutRegistryPolicyRequest';
import PutRegistryPolicyResponse from '../model/PutRegistryPolicyResponse';
import PutRegistryScanningConfigurationRequest from '../model/PutRegistryScanningConfigurationRequest';
import PutRegistryScanningConfigurationResponse from '../model/PutRegistryScanningConfigurationResponse';
import PutReplicationConfigurationRequest from '../model/PutReplicationConfigurationRequest';
import PutReplicationConfigurationResponse from '../model/PutReplicationConfigurationResponse';
import SetRepositoryPolicyRequest from '../model/SetRepositoryPolicyRequest';
import SetRepositoryPolicyResponse from '../model/SetRepositoryPolicyResponse';
import StartImageScanRequest from '../model/StartImageScanRequest';
import StartImageScanResponse from '../model/StartImageScanResponse';
import StartLifecyclePolicyPreviewRequest from '../model/StartLifecyclePolicyPreviewRequest';
import StartLifecyclePolicyPreviewResponse from '../model/StartLifecyclePolicyPreviewResponse';
import TagResourceRequest from '../model/TagResourceRequest';
import UntagResourceRequest from '../model/UntagResourceRequest';
import UploadLayerPartRequest from '../model/UploadLayerPartRequest';
import UploadLayerPartResponse from '../model/UploadLayerPartResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 2015-09-21
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the batchCheckLayerAvailability operation.
     * @callback module:api/DefaultApi~batchCheckLayerAvailabilityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchCheckLayerAvailabilityResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Checks the availability of one or more image layers in a repository.</p> <p>When an image is pushed to a repository, each image layer is checked to verify if it has been uploaded before. If it has been uploaded, then the image layer is skipped.</p> <note> <p>This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/BatchCheckLayerAvailabilityRequest} batchCheckLayerAvailabilityRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchCheckLayerAvailabilityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchCheckLayerAvailabilityResponse}
     */
    batchCheckLayerAvailability(xAmzTarget, batchCheckLayerAvailabilityRequest, opts, callback) {
      opts = opts || {};
      let postBody = batchCheckLayerAvailabilityRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling batchCheckLayerAvailability");
      }
      // verify the required parameter 'batchCheckLayerAvailabilityRequest' is set
      if (batchCheckLayerAvailabilityRequest === undefined || batchCheckLayerAvailabilityRequest === null) {
        throw new Error("Missing the required parameter 'batchCheckLayerAvailabilityRequest' when calling batchCheckLayerAvailability");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchCheckLayerAvailabilityResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.BatchCheckLayerAvailability', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchDeleteImage operation.
     * @callback module:api/DefaultApi~batchDeleteImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchDeleteImageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes a list of specified images within a repository. Images are specified with either an <code>imageTag</code> or <code>imageDigest</code>.</p> <p>You can remove a tag from an image by specifying the image's tag in your request. When you remove the last tag from an image, the image is deleted from your repository.</p> <p>You can completely delete an image (and all of its tags) by specifying the image's digest in your request.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/BatchDeleteImageRequest} batchDeleteImageRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchDeleteImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchDeleteImageResponse}
     */
    batchDeleteImage(xAmzTarget, batchDeleteImageRequest, opts, callback) {
      opts = opts || {};
      let postBody = batchDeleteImageRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling batchDeleteImage");
      }
      // verify the required parameter 'batchDeleteImageRequest' is set
      if (batchDeleteImageRequest === undefined || batchDeleteImageRequest === null) {
        throw new Error("Missing the required parameter 'batchDeleteImageRequest' when calling batchDeleteImage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchDeleteImageResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.BatchDeleteImage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchGetImage operation.
     * @callback module:api/DefaultApi~batchGetImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchGetImageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets detailed information for an image. Images are specified with either an <code>imageTag</code> or <code>imageDigest</code>.</p> <p>When an image is pulled, the BatchGetImage API is called once to retrieve the image manifest.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/BatchGetImageRequest} batchGetImageRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchGetImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchGetImageResponse}
     */
    batchGetImage(xAmzTarget, batchGetImageRequest, opts, callback) {
      opts = opts || {};
      let postBody = batchGetImageRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling batchGetImage");
      }
      // verify the required parameter 'batchGetImageRequest' is set
      if (batchGetImageRequest === undefined || batchGetImageRequest === null) {
        throw new Error("Missing the required parameter 'batchGetImageRequest' when calling batchGetImage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchGetImageResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.BatchGetImage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchGetRepositoryScanningConfiguration operation.
     * @callback module:api/DefaultApi~batchGetRepositoryScanningConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchGetRepositoryScanningConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the scanning configuration for one or more repositories.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/BatchGetRepositoryScanningConfigurationRequest} batchGetRepositoryScanningConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchGetRepositoryScanningConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchGetRepositoryScanningConfigurationResponse}
     */
    batchGetRepositoryScanningConfiguration(xAmzTarget, batchGetRepositoryScanningConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = batchGetRepositoryScanningConfigurationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling batchGetRepositoryScanningConfiguration");
      }
      // verify the required parameter 'batchGetRepositoryScanningConfigurationRequest' is set
      if (batchGetRepositoryScanningConfigurationRequest === undefined || batchGetRepositoryScanningConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'batchGetRepositoryScanningConfigurationRequest' when calling batchGetRepositoryScanningConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchGetRepositoryScanningConfigurationResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.BatchGetRepositoryScanningConfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the completeLayerUpload operation.
     * @callback module:api/DefaultApi~completeLayerUploadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CompleteLayerUploadResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Informs Amazon ECR that the image layer upload has completed for a specified registry, repository name, and upload ID. You can optionally provide a <code>sha256</code> digest of the image layer for data validation purposes.</p> <p>When an image is pushed, the CompleteLayerUpload API is called once per each new image layer to verify that the upload has completed.</p> <note> <p>This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CompleteLayerUploadRequest} completeLayerUploadRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~completeLayerUploadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CompleteLayerUploadResponse}
     */
    completeLayerUpload(xAmzTarget, completeLayerUploadRequest, opts, callback) {
      opts = opts || {};
      let postBody = completeLayerUploadRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling completeLayerUpload");
      }
      // verify the required parameter 'completeLayerUploadRequest' is set
      if (completeLayerUploadRequest === undefined || completeLayerUploadRequest === null) {
        throw new Error("Missing the required parameter 'completeLayerUploadRequest' when calling completeLayerUpload");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CompleteLayerUploadResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.CompleteLayerUpload', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPullThroughCacheRule operation.
     * @callback module:api/DefaultApi~createPullThroughCacheRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatePullThroughCacheRuleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a pull through cache rule. A pull through cache rule provides a way to cache images from an external public registry in your Amazon ECR private registry.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreatePullThroughCacheRuleRequest} createPullThroughCacheRuleRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createPullThroughCacheRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreatePullThroughCacheRuleResponse}
     */
    createPullThroughCacheRule(xAmzTarget, createPullThroughCacheRuleRequest, opts, callback) {
      opts = opts || {};
      let postBody = createPullThroughCacheRuleRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createPullThroughCacheRule");
      }
      // verify the required parameter 'createPullThroughCacheRuleRequest' is set
      if (createPullThroughCacheRuleRequest === undefined || createPullThroughCacheRuleRequest === null) {
        throw new Error("Missing the required parameter 'createPullThroughCacheRuleRequest' when calling createPullThroughCacheRule");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreatePullThroughCacheRuleResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.CreatePullThroughCacheRule', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createRepository operation.
     * @callback module:api/DefaultApi~createRepositoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateRepositoryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a repository. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/userguide/Repositories.html\">Amazon ECR repositories</a> in the <i>Amazon Elastic Container Registry User Guide</i>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateRepositoryRequest} createRepositoryRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateRepositoryResponse}
     */
    createRepository(xAmzTarget, createRepositoryRequest, opts, callback) {
      opts = opts || {};
      let postBody = createRepositoryRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createRepository");
      }
      // verify the required parameter 'createRepositoryRequest' is set
      if (createRepositoryRequest === undefined || createRepositoryRequest === null) {
        throw new Error("Missing the required parameter 'createRepositoryRequest' when calling createRepository");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateRepositoryResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.CreateRepository', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLifecyclePolicy operation.
     * @callback module:api/DefaultApi~deleteLifecyclePolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteLifecyclePolicyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the lifecycle policy associated with the specified repository.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteLifecyclePolicyRequest} deleteLifecyclePolicyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteLifecyclePolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteLifecyclePolicyResponse}
     */
    deleteLifecyclePolicy(xAmzTarget, deleteLifecyclePolicyRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteLifecyclePolicyRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteLifecyclePolicy");
      }
      // verify the required parameter 'deleteLifecyclePolicyRequest' is set
      if (deleteLifecyclePolicyRequest === undefined || deleteLifecyclePolicyRequest === null) {
        throw new Error("Missing the required parameter 'deleteLifecyclePolicyRequest' when calling deleteLifecyclePolicy");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteLifecyclePolicyResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DeleteLifecyclePolicy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePullThroughCacheRule operation.
     * @callback module:api/DefaultApi~deletePullThroughCacheRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeletePullThroughCacheRuleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a pull through cache rule.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeletePullThroughCacheRuleRequest} deletePullThroughCacheRuleRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deletePullThroughCacheRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeletePullThroughCacheRuleResponse}
     */
    deletePullThroughCacheRule(xAmzTarget, deletePullThroughCacheRuleRequest, opts, callback) {
      opts = opts || {};
      let postBody = deletePullThroughCacheRuleRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deletePullThroughCacheRule");
      }
      // verify the required parameter 'deletePullThroughCacheRuleRequest' is set
      if (deletePullThroughCacheRuleRequest === undefined || deletePullThroughCacheRuleRequest === null) {
        throw new Error("Missing the required parameter 'deletePullThroughCacheRuleRequest' when calling deletePullThroughCacheRule");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeletePullThroughCacheRuleResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DeletePullThroughCacheRule', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRegistryPolicy operation.
     * @callback module:api/DefaultApi~deleteRegistryPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteRegistryPolicyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the registry permissions policy.
     * @param {module:model/String} xAmzTarget 
     * @param {Object.<String, Object>} body 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteRegistryPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteRegistryPolicyResponse}
     */
    deleteRegistryPolicy(xAmzTarget, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteRegistryPolicy");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteRegistryPolicy");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteRegistryPolicyResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DeleteRegistryPolicy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRepository operation.
     * @callback module:api/DefaultApi~deleteRepositoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteRepositoryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a repository. If the repository contains images, you must either delete all images in the repository or use the <code>force</code> option to delete the repository.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteRepositoryRequest} deleteRepositoryRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteRepositoryResponse}
     */
    deleteRepository(xAmzTarget, deleteRepositoryRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteRepositoryRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteRepository");
      }
      // verify the required parameter 'deleteRepositoryRequest' is set
      if (deleteRepositoryRequest === undefined || deleteRepositoryRequest === null) {
        throw new Error("Missing the required parameter 'deleteRepositoryRequest' when calling deleteRepository");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteRepositoryResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DeleteRepository', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRepositoryPolicy operation.
     * @callback module:api/DefaultApi~deleteRepositoryPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteRepositoryPolicyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the repository policy associated with the specified repository.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteRepositoryPolicyRequest} deleteRepositoryPolicyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteRepositoryPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteRepositoryPolicyResponse}
     */
    deleteRepositoryPolicy(xAmzTarget, deleteRepositoryPolicyRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteRepositoryPolicyRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteRepositoryPolicy");
      }
      // verify the required parameter 'deleteRepositoryPolicyRequest' is set
      if (deleteRepositoryPolicyRequest === undefined || deleteRepositoryPolicyRequest === null) {
        throw new Error("Missing the required parameter 'deleteRepositoryPolicyRequest' when calling deleteRepositoryPolicy");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteRepositoryPolicyResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DeleteRepositoryPolicy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeImageReplicationStatus operation.
     * @callback module:api/DefaultApi~describeImageReplicationStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeImageReplicationStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the replication status for a specified image.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeImageReplicationStatusRequest} describeImageReplicationStatusRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeImageReplicationStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeImageReplicationStatusResponse}
     */
    describeImageReplicationStatus(xAmzTarget, describeImageReplicationStatusRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeImageReplicationStatusRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeImageReplicationStatus");
      }
      // verify the required parameter 'describeImageReplicationStatusRequest' is set
      if (describeImageReplicationStatusRequest === undefined || describeImageReplicationStatusRequest === null) {
        throw new Error("Missing the required parameter 'describeImageReplicationStatusRequest' when calling describeImageReplicationStatus");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeImageReplicationStatusResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DescribeImageReplicationStatus', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeImageScanFindings operation.
     * @callback module:api/DefaultApi~describeImageScanFindingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeImageScanFindingsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the scan findings for the specified image.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeImageScanFindingsRequest} describeImageScanFindingsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~describeImageScanFindingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeImageScanFindingsResponse}
     */
    describeImageScanFindings(xAmzTarget, describeImageScanFindingsRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeImageScanFindingsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeImageScanFindings");
      }
      // verify the required parameter 'describeImageScanFindingsRequest' is set
      if (describeImageScanFindingsRequest === undefined || describeImageScanFindingsRequest === null) {
        throw new Error("Missing the required parameter 'describeImageScanFindingsRequest' when calling describeImageScanFindings");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeImageScanFindingsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DescribeImageScanFindings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeImages operation.
     * @callback module:api/DefaultApi~describeImagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeImagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns metadata about the images in a repository.</p> <note> <p>Beginning with Docker version 1.9, the Docker client compresses image layers before pushing them to a V2 Docker registry. The output of the <code>docker images</code> command shows the uncompressed image size, so it may return a larger image size than the image sizes returned by <a>DescribeImages</a>.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeImagesRequest} describeImagesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~describeImagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeImagesResponse}
     */
    describeImages(xAmzTarget, describeImagesRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeImagesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeImages");
      }
      // verify the required parameter 'describeImagesRequest' is set
      if (describeImagesRequest === undefined || describeImagesRequest === null) {
        throw new Error("Missing the required parameter 'describeImagesRequest' when calling describeImages");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeImagesResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DescribeImages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describePullThroughCacheRules operation.
     * @callback module:api/DefaultApi~describePullThroughCacheRulesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribePullThroughCacheRulesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the pull through cache rules for a registry.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribePullThroughCacheRulesRequest} describePullThroughCacheRulesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~describePullThroughCacheRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribePullThroughCacheRulesResponse}
     */
    describePullThroughCacheRules(xAmzTarget, describePullThroughCacheRulesRequest, opts, callback) {
      opts = opts || {};
      let postBody = describePullThroughCacheRulesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describePullThroughCacheRules");
      }
      // verify the required parameter 'describePullThroughCacheRulesRequest' is set
      if (describePullThroughCacheRulesRequest === undefined || describePullThroughCacheRulesRequest === null) {
        throw new Error("Missing the required parameter 'describePullThroughCacheRulesRequest' when calling describePullThroughCacheRules");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribePullThroughCacheRulesResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DescribePullThroughCacheRules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeRegistry operation.
     * @callback module:api/DefaultApi~describeRegistryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeRegistryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the settings for a registry. The replication configuration for a repository can be created or updated with the <a>PutReplicationConfiguration</a> API action.
     * @param {module:model/String} xAmzTarget 
     * @param {Object.<String, Object>} body 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeRegistryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeRegistryResponse}
     */
    describeRegistry(xAmzTarget, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeRegistry");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling describeRegistry");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeRegistryResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DescribeRegistry', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeRepositories operation.
     * @callback module:api/DefaultApi~describeRepositoriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeRepositoriesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes image repositories in a registry.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeRepositoriesRequest} describeRepositoriesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~describeRepositoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeRepositoriesResponse}
     */
    describeRepositories(xAmzTarget, describeRepositoriesRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeRepositoriesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeRepositories");
      }
      // verify the required parameter 'describeRepositoriesRequest' is set
      if (describeRepositoriesRequest === undefined || describeRepositoriesRequest === null) {
        throw new Error("Missing the required parameter 'describeRepositoriesRequest' when calling describeRepositories");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeRepositoriesResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DescribeRepositories', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAuthorizationToken operation.
     * @callback module:api/DefaultApi~getAuthorizationTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAuthorizationTokenResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Retrieves an authorization token. An authorization token represents your IAM authentication credentials and can be used to access any Amazon ECR registry that your IAM principal has access to. The authorization token is valid for 12 hours.</p> <p>The <code>authorizationToken</code> returned is a base64 encoded string that can be decoded and used in a <code>docker login</code> command to authenticate to a registry. The CLI offers an <code>get-login-password</code> command that simplifies the login process. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/userguide/Registries.html#registry_auth\">Registry authentication</a> in the <i>Amazon Elastic Container Registry User Guide</i>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetAuthorizationTokenRequest} getAuthorizationTokenRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getAuthorizationTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAuthorizationTokenResponse}
     */
    getAuthorizationToken(xAmzTarget, getAuthorizationTokenRequest, opts, callback) {
      opts = opts || {};
      let postBody = getAuthorizationTokenRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getAuthorizationToken");
      }
      // verify the required parameter 'getAuthorizationTokenRequest' is set
      if (getAuthorizationTokenRequest === undefined || getAuthorizationTokenRequest === null) {
        throw new Error("Missing the required parameter 'getAuthorizationTokenRequest' when calling getAuthorizationToken");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetAuthorizationTokenResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.GetAuthorizationToken', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDownloadUrlForLayer operation.
     * @callback module:api/DefaultApi~getDownloadUrlForLayerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDownloadUrlForLayerResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Retrieves the pre-signed Amazon S3 download URL corresponding to an image layer. You can only get URLs for image layers that are referenced in an image.</p> <p>When an image is pulled, the GetDownloadUrlForLayer API is called once per image layer that is not already cached.</p> <note> <p>This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetDownloadUrlForLayerRequest} getDownloadUrlForLayerRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getDownloadUrlForLayerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDownloadUrlForLayerResponse}
     */
    getDownloadUrlForLayer(xAmzTarget, getDownloadUrlForLayerRequest, opts, callback) {
      opts = opts || {};
      let postBody = getDownloadUrlForLayerRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getDownloadUrlForLayer");
      }
      // verify the required parameter 'getDownloadUrlForLayerRequest' is set
      if (getDownloadUrlForLayerRequest === undefined || getDownloadUrlForLayerRequest === null) {
        throw new Error("Missing the required parameter 'getDownloadUrlForLayerRequest' when calling getDownloadUrlForLayer");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetDownloadUrlForLayerResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.GetDownloadUrlForLayer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLifecyclePolicy operation.
     * @callback module:api/DefaultApi~getLifecyclePolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetLifecyclePolicyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the lifecycle policy for the specified repository.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetLifecyclePolicyRequest} getLifecyclePolicyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getLifecyclePolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetLifecyclePolicyResponse}
     */
    getLifecyclePolicy(xAmzTarget, getLifecyclePolicyRequest, opts, callback) {
      opts = opts || {};
      let postBody = getLifecyclePolicyRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getLifecyclePolicy");
      }
      // verify the required parameter 'getLifecyclePolicyRequest' is set
      if (getLifecyclePolicyRequest === undefined || getLifecyclePolicyRequest === null) {
        throw new Error("Missing the required parameter 'getLifecyclePolicyRequest' when calling getLifecyclePolicy");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetLifecyclePolicyResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.GetLifecyclePolicy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLifecyclePolicyPreview operation.
     * @callback module:api/DefaultApi~getLifecyclePolicyPreviewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetLifecyclePolicyPreviewResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the results of the lifecycle policy preview request for the specified repository.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetLifecyclePolicyPreviewRequest} getLifecyclePolicyPreviewRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~getLifecyclePolicyPreviewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetLifecyclePolicyPreviewResponse}
     */
    getLifecyclePolicyPreview(xAmzTarget, getLifecyclePolicyPreviewRequest, opts, callback) {
      opts = opts || {};
      let postBody = getLifecyclePolicyPreviewRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getLifecyclePolicyPreview");
      }
      // verify the required parameter 'getLifecyclePolicyPreviewRequest' is set
      if (getLifecyclePolicyPreviewRequest === undefined || getLifecyclePolicyPreviewRequest === null) {
        throw new Error("Missing the required parameter 'getLifecyclePolicyPreviewRequest' when calling getLifecyclePolicyPreview");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetLifecyclePolicyPreviewResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.GetLifecyclePolicyPreview', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRegistryPolicy operation.
     * @callback module:api/DefaultApi~getRegistryPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRegistryPolicyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the permissions policy for a registry.
     * @param {module:model/String} xAmzTarget 
     * @param {Object.<String, Object>} body 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getRegistryPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRegistryPolicyResponse}
     */
    getRegistryPolicy(xAmzTarget, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getRegistryPolicy");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getRegistryPolicy");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetRegistryPolicyResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.GetRegistryPolicy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRegistryScanningConfiguration operation.
     * @callback module:api/DefaultApi~getRegistryScanningConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRegistryScanningConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the scanning configuration for a registry.
     * @param {module:model/String} xAmzTarget 
     * @param {Object.<String, Object>} body 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getRegistryScanningConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRegistryScanningConfigurationResponse}
     */
    getRegistryScanningConfiguration(xAmzTarget, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getRegistryScanningConfiguration");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getRegistryScanningConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetRegistryScanningConfigurationResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.GetRegistryScanningConfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRepositoryPolicy operation.
     * @callback module:api/DefaultApi~getRepositoryPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRepositoryPolicyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the repository policy for the specified repository.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetRepositoryPolicyRequest} getRepositoryPolicyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getRepositoryPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRepositoryPolicyResponse}
     */
    getRepositoryPolicy(xAmzTarget, getRepositoryPolicyRequest, opts, callback) {
      opts = opts || {};
      let postBody = getRepositoryPolicyRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getRepositoryPolicy");
      }
      // verify the required parameter 'getRepositoryPolicyRequest' is set
      if (getRepositoryPolicyRequest === undefined || getRepositoryPolicyRequest === null) {
        throw new Error("Missing the required parameter 'getRepositoryPolicyRequest' when calling getRepositoryPolicy");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetRepositoryPolicyResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.GetRepositoryPolicy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the initiateLayerUpload operation.
     * @callback module:api/DefaultApi~initiateLayerUploadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InitiateLayerUploadResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Notifies Amazon ECR that you intend to upload an image layer.</p> <p>When an image is pushed, the InitiateLayerUpload API is called once per image layer that has not already been uploaded. Whether or not an image layer has been uploaded is determined by the BatchCheckLayerAvailability API action.</p> <note> <p>This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/InitiateLayerUploadRequest} initiateLayerUploadRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~initiateLayerUploadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InitiateLayerUploadResponse}
     */
    initiateLayerUpload(xAmzTarget, initiateLayerUploadRequest, opts, callback) {
      opts = opts || {};
      let postBody = initiateLayerUploadRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling initiateLayerUpload");
      }
      // verify the required parameter 'initiateLayerUploadRequest' is set
      if (initiateLayerUploadRequest === undefined || initiateLayerUploadRequest === null) {
        throw new Error("Missing the required parameter 'initiateLayerUploadRequest' when calling initiateLayerUpload");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InitiateLayerUploadResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.InitiateLayerUpload', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listImages operation.
     * @callback module:api/DefaultApi~listImagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListImagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Lists all the image IDs for the specified repository.</p> <p>You can filter images based on whether or not they are tagged by using the <code>tagStatus</code> filter and specifying either <code>TAGGED</code>, <code>UNTAGGED</code> or <code>ANY</code>. For example, you can filter your results to return only <code>UNTAGGED</code> images and then pipe that result to a <a>BatchDeleteImage</a> operation to delete them. Or, you can filter your results to return only <code>TAGGED</code> images to list all of the tags in your repository.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListImagesRequest} listImagesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listImagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListImagesResponse}
     */
    listImages(xAmzTarget, listImagesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listImagesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listImages");
      }
      // verify the required parameter 'listImagesRequest' is set
      if (listImagesRequest === undefined || listImagesRequest === null) {
        throw new Error("Missing the required parameter 'listImagesRequest' when calling listImages");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListImagesResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.ListImages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the tags for an Amazon ECR resource.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListTagsForResourceRequest} listTagsForResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceResponse}
     */
    listTagsForResource(xAmzTarget, listTagsForResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = listTagsForResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listTagsForResource");
      }
      // verify the required parameter 'listTagsForResourceRequest' is set
      if (listTagsForResourceRequest === undefined || listTagsForResourceRequest === null) {
        throw new Error("Missing the required parameter 'listTagsForResourceRequest' when calling listTagsForResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.ListTagsForResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putImage operation.
     * @callback module:api/DefaultApi~putImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PutImageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates or updates the image manifest and tags associated with an image.</p> <p>When an image is pushed and all new image layers have been uploaded, the PutImage API is called once to create or update the image manifest and the tags associated with the image.</p> <note> <p>This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/PutImageRequest} putImageRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PutImageResponse}
     */
    putImage(xAmzTarget, putImageRequest, opts, callback) {
      opts = opts || {};
      let postBody = putImageRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling putImage");
      }
      // verify the required parameter 'putImageRequest' is set
      if (putImageRequest === undefined || putImageRequest === null) {
        throw new Error("Missing the required parameter 'putImageRequest' when calling putImage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PutImageResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.PutImage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putImageScanningConfiguration operation.
     * @callback module:api/DefaultApi~putImageScanningConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PutImageScanningConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <important> <p>The <code>PutImageScanningConfiguration</code> API is being deprecated, in favor of specifying the image scanning configuration at the registry level. For more information, see <a>PutRegistryScanningConfiguration</a>.</p> </important> <p>Updates the image scanning configuration for the specified repository.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/PutImageScanningConfigurationRequest} putImageScanningConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putImageScanningConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PutImageScanningConfigurationResponse}
     */
    putImageScanningConfiguration(xAmzTarget, putImageScanningConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = putImageScanningConfigurationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling putImageScanningConfiguration");
      }
      // verify the required parameter 'putImageScanningConfigurationRequest' is set
      if (putImageScanningConfigurationRequest === undefined || putImageScanningConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'putImageScanningConfigurationRequest' when calling putImageScanningConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PutImageScanningConfigurationResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.PutImageScanningConfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putImageTagMutability operation.
     * @callback module:api/DefaultApi~putImageTagMutabilityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PutImageTagMutabilityResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the image tag mutability settings for the specified repository. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/userguide/image-tag-mutability.html\">Image tag mutability</a> in the <i>Amazon Elastic Container Registry User Guide</i>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/PutImageTagMutabilityRequest} putImageTagMutabilityRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putImageTagMutabilityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PutImageTagMutabilityResponse}
     */
    putImageTagMutability(xAmzTarget, putImageTagMutabilityRequest, opts, callback) {
      opts = opts || {};
      let postBody = putImageTagMutabilityRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling putImageTagMutability");
      }
      // verify the required parameter 'putImageTagMutabilityRequest' is set
      if (putImageTagMutabilityRequest === undefined || putImageTagMutabilityRequest === null) {
        throw new Error("Missing the required parameter 'putImageTagMutabilityRequest' when calling putImageTagMutability");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PutImageTagMutabilityResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.PutImageTagMutability', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putLifecyclePolicy operation.
     * @callback module:api/DefaultApi~putLifecyclePolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PutLifecyclePolicyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates the lifecycle policy for the specified repository. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/userguide/LifecyclePolicies.html\">Lifecycle policy template</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/PutLifecyclePolicyRequest} putLifecyclePolicyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putLifecyclePolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PutLifecyclePolicyResponse}
     */
    putLifecyclePolicy(xAmzTarget, putLifecyclePolicyRequest, opts, callback) {
      opts = opts || {};
      let postBody = putLifecyclePolicyRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling putLifecyclePolicy");
      }
      // verify the required parameter 'putLifecyclePolicyRequest' is set
      if (putLifecyclePolicyRequest === undefined || putLifecyclePolicyRequest === null) {
        throw new Error("Missing the required parameter 'putLifecyclePolicyRequest' when calling putLifecyclePolicy");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PutLifecyclePolicyResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.PutLifecyclePolicy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putRegistryPolicy operation.
     * @callback module:api/DefaultApi~putRegistryPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PutRegistryPolicyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates or updates the permissions policy for your registry.</p> <p>A registry policy is used to specify permissions for another Amazon Web Services account and is used when configuring cross-account replication. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/userguide/registry-permissions.html\">Registry permissions</a> in the <i>Amazon Elastic Container Registry User Guide</i>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/PutRegistryPolicyRequest} putRegistryPolicyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putRegistryPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PutRegistryPolicyResponse}
     */
    putRegistryPolicy(xAmzTarget, putRegistryPolicyRequest, opts, callback) {
      opts = opts || {};
      let postBody = putRegistryPolicyRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling putRegistryPolicy");
      }
      // verify the required parameter 'putRegistryPolicyRequest' is set
      if (putRegistryPolicyRequest === undefined || putRegistryPolicyRequest === null) {
        throw new Error("Missing the required parameter 'putRegistryPolicyRequest' when calling putRegistryPolicy");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PutRegistryPolicyResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.PutRegistryPolicy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putRegistryScanningConfiguration operation.
     * @callback module:api/DefaultApi~putRegistryScanningConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PutRegistryScanningConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates the scanning configuration for your private registry.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/PutRegistryScanningConfigurationRequest} putRegistryScanningConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putRegistryScanningConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PutRegistryScanningConfigurationResponse}
     */
    putRegistryScanningConfiguration(xAmzTarget, putRegistryScanningConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = putRegistryScanningConfigurationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling putRegistryScanningConfiguration");
      }
      // verify the required parameter 'putRegistryScanningConfigurationRequest' is set
      if (putRegistryScanningConfigurationRequest === undefined || putRegistryScanningConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'putRegistryScanningConfigurationRequest' when calling putRegistryScanningConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PutRegistryScanningConfigurationResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.PutRegistryScanningConfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putReplicationConfiguration operation.
     * @callback module:api/DefaultApi~putReplicationConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PutReplicationConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates or updates the replication configuration for a registry. The existing replication configuration for a repository can be retrieved with the <a>DescribeRegistry</a> API action. The first time the PutReplicationConfiguration API is called, a service-linked IAM role is created in your account for the replication process. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/userguide/using-service-linked-roles.html\">Using service-linked roles for Amazon ECR</a> in the <i>Amazon Elastic Container Registry User Guide</i>.</p> <note> <p>When configuring cross-account replication, the destination account must grant the source account permission to replicate. This permission is controlled using a registry permissions policy. For more information, see <a>PutRegistryPolicy</a>.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/PutReplicationConfigurationRequest} putReplicationConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putReplicationConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PutReplicationConfigurationResponse}
     */
    putReplicationConfiguration(xAmzTarget, putReplicationConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = putReplicationConfigurationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling putReplicationConfiguration");
      }
      // verify the required parameter 'putReplicationConfigurationRequest' is set
      if (putReplicationConfigurationRequest === undefined || putReplicationConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'putReplicationConfigurationRequest' when calling putReplicationConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PutReplicationConfigurationResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.PutReplicationConfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setRepositoryPolicy operation.
     * @callback module:api/DefaultApi~setRepositoryPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SetRepositoryPolicyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Applies a repository policy to the specified repository to control access permissions. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/userguide/repository-policies.html\">Amazon ECR Repository policies</a> in the <i>Amazon Elastic Container Registry User Guide</i>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/SetRepositoryPolicyRequest} setRepositoryPolicyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~setRepositoryPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SetRepositoryPolicyResponse}
     */
    setRepositoryPolicy(xAmzTarget, setRepositoryPolicyRequest, opts, callback) {
      opts = opts || {};
      let postBody = setRepositoryPolicyRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling setRepositoryPolicy");
      }
      // verify the required parameter 'setRepositoryPolicyRequest' is set
      if (setRepositoryPolicyRequest === undefined || setRepositoryPolicyRequest === null) {
        throw new Error("Missing the required parameter 'setRepositoryPolicyRequest' when calling setRepositoryPolicy");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SetRepositoryPolicyResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.SetRepositoryPolicy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startImageScan operation.
     * @callback module:api/DefaultApi~startImageScanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartImageScanResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts an image vulnerability scan. An image scan can only be started once per 24 hours on an individual image. This limit includes if an image was scanned on initial push. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/userguide/image-scanning.html\">Image scanning</a> in the <i>Amazon Elastic Container Registry User Guide</i>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StartImageScanRequest} startImageScanRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startImageScanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartImageScanResponse}
     */
    startImageScan(xAmzTarget, startImageScanRequest, opts, callback) {
      opts = opts || {};
      let postBody = startImageScanRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling startImageScan");
      }
      // verify the required parameter 'startImageScanRequest' is set
      if (startImageScanRequest === undefined || startImageScanRequest === null) {
        throw new Error("Missing the required parameter 'startImageScanRequest' when calling startImageScan");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartImageScanResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.StartImageScan', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startLifecyclePolicyPreview operation.
     * @callback module:api/DefaultApi~startLifecyclePolicyPreviewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartLifecyclePolicyPreviewResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts a preview of a lifecycle policy for the specified repository. This allows you to see the results before associating the lifecycle policy with the repository.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StartLifecyclePolicyPreviewRequest} startLifecyclePolicyPreviewRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startLifecyclePolicyPreviewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartLifecyclePolicyPreviewResponse}
     */
    startLifecyclePolicyPreview(xAmzTarget, startLifecyclePolicyPreviewRequest, opts, callback) {
      opts = opts || {};
      let postBody = startLifecyclePolicyPreviewRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling startLifecyclePolicyPreview");
      }
      // verify the required parameter 'startLifecyclePolicyPreviewRequest' is set
      if (startLifecyclePolicyPreviewRequest === undefined || startLifecyclePolicyPreviewRequest === null) {
        throw new Error("Missing the required parameter 'startLifecyclePolicyPreviewRequest' when calling startLifecyclePolicyPreview");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartLifecyclePolicyPreviewResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.StartLifecyclePolicyPreview', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds specified tags to a resource with the specified ARN. Existing tags on a resource are not changed if they are not specified in the request parameters.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    tagResource(xAmzTarget, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.TagResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes specified tags from a resource.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UntagResourceRequest} untagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    untagResource(xAmzTarget, untagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = untagResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling untagResource");
      }
      // verify the required parameter 'untagResourceRequest' is set
      if (untagResourceRequest === undefined || untagResourceRequest === null) {
        throw new Error("Missing the required parameter 'untagResourceRequest' when calling untagResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.UntagResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadLayerPart operation.
     * @callback module:api/DefaultApi~uploadLayerPartCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UploadLayerPartResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Uploads an image layer part to Amazon ECR.</p> <p>When an image is pushed, each new image layer is uploaded in parts. The maximum size of each image layer part can be 20971520 bytes (or about 20MB). The UploadLayerPart API is called once per each new image layer part.</p> <note> <p>This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UploadLayerPartRequest} uploadLayerPartRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~uploadLayerPartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UploadLayerPartResponse}
     */
    uploadLayerPart(xAmzTarget, uploadLayerPartRequest, opts, callback) {
      opts = opts || {};
      let postBody = uploadLayerPartRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling uploadLayerPart");
      }
      // verify the required parameter 'uploadLayerPartRequest' is set
      if (uploadLayerPartRequest === undefined || uploadLayerPartRequest === null) {
        throw new Error("Missing the required parameter 'uploadLayerPartRequest' when calling uploadLayerPart");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UploadLayerPartResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.UploadLayerPart', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
