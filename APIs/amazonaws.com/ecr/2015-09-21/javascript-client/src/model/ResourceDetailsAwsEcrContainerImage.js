/**
 * Amazon EC2 Container Registry
 * <fullname>Amazon Elastic Container Registry</fullname> <p>Amazon Elastic Container Registry (Amazon ECR) is a managed container image registry service. Customers can use the familiar Docker CLI, or their preferred client, to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports private repositories with resource-based permissions using IAM so that specific users or Amazon EC2 instances can access repositories and images.</p> <p>Amazon ECR has service endpoints in each supported Region. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/ecr.html\">Amazon ECR endpoints</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2015-09-21
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AwsEcrContainerImageDetails from './AwsEcrContainerImageDetails';

/**
 * The ResourceDetailsAwsEcrContainerImage model module.
 * @module model/ResourceDetailsAwsEcrContainerImage
 * @version 2015-09-21
 */
class ResourceDetailsAwsEcrContainerImage {
    /**
     * Constructs a new <code>ResourceDetailsAwsEcrContainerImage</code>.
     * @alias module:model/ResourceDetailsAwsEcrContainerImage
     * @implements module:model/AwsEcrContainerImageDetails
     */
    constructor() { 
        AwsEcrContainerImageDetails.initialize(this);
        ResourceDetailsAwsEcrContainerImage.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ResourceDetailsAwsEcrContainerImage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ResourceDetailsAwsEcrContainerImage} obj Optional instance to populate.
     * @return {module:model/ResourceDetailsAwsEcrContainerImage} The populated <code>ResourceDetailsAwsEcrContainerImage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ResourceDetailsAwsEcrContainerImage();
            AwsEcrContainerImageDetails.constructFromObject(data, obj);

            if (data.hasOwnProperty('architecture')) {
                obj['architecture'] = ApiClient.convertToType(data['architecture'], 'String');
            }
            if (data.hasOwnProperty('author')) {
                obj['author'] = ApiClient.convertToType(data['author'], 'String');
            }
            if (data.hasOwnProperty('imageHash')) {
                obj['imageHash'] = ApiClient.convertToType(data['imageHash'], 'String');
            }
            if (data.hasOwnProperty('imageTags')) {
                obj['imageTags'] = ApiClient.convertToType(data['imageTags'], Array);
            }
            if (data.hasOwnProperty('platform')) {
                obj['platform'] = ApiClient.convertToType(data['platform'], 'String');
            }
            if (data.hasOwnProperty('pushedAt')) {
                obj['pushedAt'] = ApiClient.convertToType(data['pushedAt'], 'Date');
            }
            if (data.hasOwnProperty('registry')) {
                obj['registry'] = ApiClient.convertToType(data['registry'], 'String');
            }
            if (data.hasOwnProperty('repositoryName')) {
                obj['repositoryName'] = ApiClient.convertToType(data['repositoryName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ResourceDetailsAwsEcrContainerImage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ResourceDetailsAwsEcrContainerImage</code>.
     */
    static validateJSON(data) {
        // validate the optional field `architecture`
        if (data['architecture']) { // data not null
          String.validateJSON(data['architecture']);
        }
        // validate the optional field `author`
        if (data['author']) { // data not null
          String.validateJSON(data['author']);
        }
        // validate the optional field `imageHash`
        if (data['imageHash']) { // data not null
          String.validateJSON(data['imageHash']);
        }
        // validate the optional field `imageTags`
        if (data['imageTags']) { // data not null
          Array.validateJSON(data['imageTags']);
        }
        // validate the optional field `platform`
        if (data['platform']) { // data not null
          String.validateJSON(data['platform']);
        }
        // validate the optional field `pushedAt`
        if (data['pushedAt']) { // data not null
          Date.validateJSON(data['pushedAt']);
        }
        // validate the optional field `registry`
        if (data['registry']) { // data not null
          String.validateJSON(data['registry']);
        }
        // validate the optional field `repositoryName`
        if (data['repositoryName']) { // data not null
          String.validateJSON(data['repositoryName']);
        }

        return true;
    }


}



/**
 * @member {String} architecture
 */
ResourceDetailsAwsEcrContainerImage.prototype['architecture'] = undefined;

/**
 * @member {String} author
 */
ResourceDetailsAwsEcrContainerImage.prototype['author'] = undefined;

/**
 * @member {String} imageHash
 */
ResourceDetailsAwsEcrContainerImage.prototype['imageHash'] = undefined;

/**
 * @member {Array} imageTags
 */
ResourceDetailsAwsEcrContainerImage.prototype['imageTags'] = undefined;

/**
 * @member {String} platform
 */
ResourceDetailsAwsEcrContainerImage.prototype['platform'] = undefined;

/**
 * @member {Date} pushedAt
 */
ResourceDetailsAwsEcrContainerImage.prototype['pushedAt'] = undefined;

/**
 * @member {String} registry
 */
ResourceDetailsAwsEcrContainerImage.prototype['registry'] = undefined;

/**
 * @member {String} repositoryName
 */
ResourceDetailsAwsEcrContainerImage.prototype['repositoryName'] = undefined;


// Implement AwsEcrContainerImageDetails interface:
/**
 * @member {String} architecture
 */
AwsEcrContainerImageDetails.prototype['architecture'] = undefined;
/**
 * @member {String} author
 */
AwsEcrContainerImageDetails.prototype['author'] = undefined;
/**
 * @member {String} imageHash
 */
AwsEcrContainerImageDetails.prototype['imageHash'] = undefined;
/**
 * @member {Array} imageTags
 */
AwsEcrContainerImageDetails.prototype['imageTags'] = undefined;
/**
 * @member {String} platform
 */
AwsEcrContainerImageDetails.prototype['platform'] = undefined;
/**
 * @member {Date} pushedAt
 */
AwsEcrContainerImageDetails.prototype['pushedAt'] = undefined;
/**
 * @member {String} registry
 */
AwsEcrContainerImageDetails.prototype['registry'] = undefined;
/**
 * @member {String} repositoryName
 */
AwsEcrContainerImageDetails.prototype['repositoryName'] = undefined;




export default ResourceDetailsAwsEcrContainerImage;

