/**
 * Amazon EC2 Container Registry
 * <fullname>Amazon Elastic Container Registry</fullname> <p>Amazon Elastic Container Registry (Amazon ECR) is a managed container image registry service. Customers can use the familiar Docker CLI, or their preferred client, to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports private repositories with resource-based permissions using IAM so that specific users or Amazon EC2 instances can access repositories and images.</p> <p>Amazon ECR has service endpoints in each supported Region. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/ecr.html\">Amazon ECR endpoints</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2015-09-21
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EncryptionType from './EncryptionType';

/**
 * The EncryptionConfiguration model module.
 * @module model/EncryptionConfiguration
 * @version 2015-09-21
 */
class EncryptionConfiguration {
    /**
     * Constructs a new <code>EncryptionConfiguration</code>.
     * &lt;p&gt;The encryption configuration for the repository. This determines how the contents of your repository are encrypted at rest.&lt;/p&gt; &lt;p&gt;By default, when no encryption configuration is set or the &lt;code&gt;AES256&lt;/code&gt; encryption type is used, Amazon ECR uses server-side encryption with Amazon S3-managed encryption keys which encrypts your data at rest using an AES-256 encryption algorithm. This does not require any action on your part.&lt;/p&gt; &lt;p&gt;For more control over the encryption of the contents of your repository, you can use server-side encryption with Key Management Service key stored in Key Management Service (KMS) to encrypt your images. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECR/latest/userguide/encryption-at-rest.html\&quot;&gt;Amazon ECR encryption at rest&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Registry User Guide&lt;/i&gt;.&lt;/p&gt;
     * @alias module:model/EncryptionConfiguration
     * @param encryptionType {module:model/EncryptionType} 
     */
    constructor(encryptionType) { 
        
        EncryptionConfiguration.initialize(this, encryptionType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, encryptionType) { 
        obj['encryptionType'] = encryptionType;
    }

    /**
     * Constructs a <code>EncryptionConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EncryptionConfiguration} obj Optional instance to populate.
     * @return {module:model/EncryptionConfiguration} The populated <code>EncryptionConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EncryptionConfiguration();

            if (data.hasOwnProperty('encryptionType')) {
                obj['encryptionType'] = ApiClient.convertToType(data['encryptionType'], EncryptionType);
            }
            if (data.hasOwnProperty('kmsKey')) {
                obj['kmsKey'] = ApiClient.convertToType(data['kmsKey'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EncryptionConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EncryptionConfiguration</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EncryptionConfiguration.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `encryptionType`
        if (data['encryptionType']) { // data not null
          EncryptionType.validateJSON(data['encryptionType']);
        }
        // validate the optional field `kmsKey`
        if (data['kmsKey']) { // data not null
          String.validateJSON(data['kmsKey']);
        }

        return true;
    }


}

EncryptionConfiguration.RequiredProperties = ["encryptionType"];

/**
 * @member {module:model/EncryptionType} encryptionType
 */
EncryptionConfiguration.prototype['encryptionType'] = undefined;

/**
 * @member {String} kmsKey
 */
EncryptionConfiguration.prototype['kmsKey'] = undefined;






export default EncryptionConfiguration;

