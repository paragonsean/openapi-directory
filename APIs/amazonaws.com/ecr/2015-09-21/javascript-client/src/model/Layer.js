/**
 * Amazon EC2 Container Registry
 * <fullname>Amazon Elastic Container Registry</fullname> <p>Amazon Elastic Container Registry (Amazon ECR) is a managed container image registry service. Customers can use the familiar Docker CLI, or their preferred client, to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports private repositories with resource-based permissions using IAM so that specific users or Amazon EC2 instances can access repositories and images.</p> <p>Amazon ECR has service endpoints in each supported Region. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/ecr.html\">Amazon ECR endpoints</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2015-09-21
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LayerAvailability from './LayerAvailability';

/**
 * The Layer model module.
 * @module model/Layer
 * @version 2015-09-21
 */
class Layer {
    /**
     * Constructs a new <code>Layer</code>.
     * An object representing an Amazon ECR image layer.
     * @alias module:model/Layer
     */
    constructor() { 
        
        Layer.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Layer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Layer} obj Optional instance to populate.
     * @return {module:model/Layer} The populated <code>Layer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Layer();

            if (data.hasOwnProperty('layerDigest')) {
                obj['layerDigest'] = ApiClient.convertToType(data['layerDigest'], 'String');
            }
            if (data.hasOwnProperty('layerAvailability')) {
                obj['layerAvailability'] = ApiClient.convertToType(data['layerAvailability'], LayerAvailability);
            }
            if (data.hasOwnProperty('layerSize')) {
                obj['layerSize'] = ApiClient.convertToType(data['layerSize'], 'Number');
            }
            if (data.hasOwnProperty('mediaType')) {
                obj['mediaType'] = ApiClient.convertToType(data['mediaType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Layer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Layer</code>.
     */
    static validateJSON(data) {
        // validate the optional field `layerDigest`
        if (data['layerDigest']) { // data not null
          String.validateJSON(data['layerDigest']);
        }
        // validate the optional field `layerAvailability`
        if (data['layerAvailability']) { // data not null
          LayerAvailability.validateJSON(data['layerAvailability']);
        }
        // validate the optional field `layerSize`
        if (data['layerSize']) { // data not null
          Number.validateJSON(data['layerSize']);
        }
        // validate the optional field `mediaType`
        if (data['mediaType']) { // data not null
          String.validateJSON(data['mediaType']);
        }

        return true;
    }


}



/**
 * @member {String} layerDigest
 */
Layer.prototype['layerDigest'] = undefined;

/**
 * @member {module:model/LayerAvailability} layerAvailability
 */
Layer.prototype['layerAvailability'] = undefined;

/**
 * @member {Number} layerSize
 */
Layer.prototype['layerSize'] = undefined;

/**
 * @member {String} mediaType
 */
Layer.prototype['mediaType'] = undefined;






export default Layer;

