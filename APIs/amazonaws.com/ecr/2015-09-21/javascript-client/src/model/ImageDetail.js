/**
 * Amazon EC2 Container Registry
 * <fullname>Amazon Elastic Container Registry</fullname> <p>Amazon Elastic Container Registry (Amazon ECR) is a managed container image registry service. Customers can use the familiar Docker CLI, or their preferred client, to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports private repositories with resource-based permissions using IAM so that specific users or Amazon EC2 instances can access repositories and images.</p> <p>Amazon ECR has service endpoints in each supported Region. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/ecr.html\">Amazon ECR endpoints</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2015-09-21
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DescribeImageScanFindingsResponseImageScanStatus from './DescribeImageScanFindingsResponseImageScanStatus';
import ImageDetailImageScanFindingsSummary from './ImageDetailImageScanFindingsSummary';

/**
 * The ImageDetail model module.
 * @module model/ImageDetail
 * @version 2015-09-21
 */
class ImageDetail {
    /**
     * Constructs a new <code>ImageDetail</code>.
     * An object that describes an image returned by a &lt;a&gt;DescribeImages&lt;/a&gt; operation.
     * @alias module:model/ImageDetail
     */
    constructor() { 
        
        ImageDetail.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ImageDetail</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImageDetail} obj Optional instance to populate.
     * @return {module:model/ImageDetail} The populated <code>ImageDetail</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImageDetail();

            if (data.hasOwnProperty('registryId')) {
                obj['registryId'] = ApiClient.convertToType(data['registryId'], 'String');
            }
            if (data.hasOwnProperty('repositoryName')) {
                obj['repositoryName'] = ApiClient.convertToType(data['repositoryName'], 'String');
            }
            if (data.hasOwnProperty('imageDigest')) {
                obj['imageDigest'] = ApiClient.convertToType(data['imageDigest'], 'String');
            }
            if (data.hasOwnProperty('imageTags')) {
                obj['imageTags'] = ApiClient.convertToType(data['imageTags'], Array);
            }
            if (data.hasOwnProperty('imageSizeInBytes')) {
                obj['imageSizeInBytes'] = ApiClient.convertToType(data['imageSizeInBytes'], 'Number');
            }
            if (data.hasOwnProperty('imagePushedAt')) {
                obj['imagePushedAt'] = ApiClient.convertToType(data['imagePushedAt'], 'Date');
            }
            if (data.hasOwnProperty('imageScanStatus')) {
                obj['imageScanStatus'] = DescribeImageScanFindingsResponseImageScanStatus.constructFromObject(data['imageScanStatus']);
            }
            if (data.hasOwnProperty('imageScanFindingsSummary')) {
                obj['imageScanFindingsSummary'] = ImageDetailImageScanFindingsSummary.constructFromObject(data['imageScanFindingsSummary']);
            }
            if (data.hasOwnProperty('imageManifestMediaType')) {
                obj['imageManifestMediaType'] = ApiClient.convertToType(data['imageManifestMediaType'], 'String');
            }
            if (data.hasOwnProperty('artifactMediaType')) {
                obj['artifactMediaType'] = ApiClient.convertToType(data['artifactMediaType'], 'String');
            }
            if (data.hasOwnProperty('lastRecordedPullTime')) {
                obj['lastRecordedPullTime'] = ApiClient.convertToType(data['lastRecordedPullTime'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImageDetail</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImageDetail</code>.
     */
    static validateJSON(data) {
        // validate the optional field `registryId`
        if (data['registryId']) { // data not null
          String.validateJSON(data['registryId']);
        }
        // validate the optional field `repositoryName`
        if (data['repositoryName']) { // data not null
          String.validateJSON(data['repositoryName']);
        }
        // validate the optional field `imageDigest`
        if (data['imageDigest']) { // data not null
          String.validateJSON(data['imageDigest']);
        }
        // validate the optional field `imageTags`
        if (data['imageTags']) { // data not null
          Array.validateJSON(data['imageTags']);
        }
        // validate the optional field `imageSizeInBytes`
        if (data['imageSizeInBytes']) { // data not null
          Number.validateJSON(data['imageSizeInBytes']);
        }
        // validate the optional field `imagePushedAt`
        if (data['imagePushedAt']) { // data not null
          Date.validateJSON(data['imagePushedAt']);
        }
        // validate the optional field `imageScanStatus`
        if (data['imageScanStatus']) { // data not null
          DescribeImageScanFindingsResponseImageScanStatus.validateJSON(data['imageScanStatus']);
        }
        // validate the optional field `imageScanFindingsSummary`
        if (data['imageScanFindingsSummary']) { // data not null
          ImageDetailImageScanFindingsSummary.validateJSON(data['imageScanFindingsSummary']);
        }
        // validate the optional field `imageManifestMediaType`
        if (data['imageManifestMediaType']) { // data not null
          String.validateJSON(data['imageManifestMediaType']);
        }
        // validate the optional field `artifactMediaType`
        if (data['artifactMediaType']) { // data not null
          String.validateJSON(data['artifactMediaType']);
        }
        // validate the optional field `lastRecordedPullTime`
        if (data['lastRecordedPullTime']) { // data not null
          Date.validateJSON(data['lastRecordedPullTime']);
        }

        return true;
    }


}



/**
 * @member {String} registryId
 */
ImageDetail.prototype['registryId'] = undefined;

/**
 * @member {String} repositoryName
 */
ImageDetail.prototype['repositoryName'] = undefined;

/**
 * @member {String} imageDigest
 */
ImageDetail.prototype['imageDigest'] = undefined;

/**
 * @member {Array} imageTags
 */
ImageDetail.prototype['imageTags'] = undefined;

/**
 * @member {Number} imageSizeInBytes
 */
ImageDetail.prototype['imageSizeInBytes'] = undefined;

/**
 * @member {Date} imagePushedAt
 */
ImageDetail.prototype['imagePushedAt'] = undefined;

/**
 * @member {module:model/DescribeImageScanFindingsResponseImageScanStatus} imageScanStatus
 */
ImageDetail.prototype['imageScanStatus'] = undefined;

/**
 * @member {module:model/ImageDetailImageScanFindingsSummary} imageScanFindingsSummary
 */
ImageDetail.prototype['imageScanFindingsSummary'] = undefined;

/**
 * @member {String} imageManifestMediaType
 */
ImageDetail.prototype['imageManifestMediaType'] = undefined;

/**
 * @member {String} artifactMediaType
 */
ImageDetail.prototype['artifactMediaType'] = undefined;

/**
 * @member {Date} lastRecordedPullTime
 */
ImageDetail.prototype['lastRecordedPullTime'] = undefined;






export default ImageDetail;

