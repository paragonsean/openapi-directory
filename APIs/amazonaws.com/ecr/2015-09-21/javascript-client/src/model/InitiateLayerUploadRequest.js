/**
 * Amazon EC2 Container Registry
 * <fullname>Amazon Elastic Container Registry</fullname> <p>Amazon Elastic Container Registry (Amazon ECR) is a managed container image registry service. Customers can use the familiar Docker CLI, or their preferred client, to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports private repositories with resource-based permissions using IAM so that specific users or Amazon EC2 instances can access repositories and images.</p> <p>Amazon ECR has service endpoints in each supported Region. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/ecr.html\">Amazon ECR endpoints</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2015-09-21
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The InitiateLayerUploadRequest model module.
 * @module model/InitiateLayerUploadRequest
 * @version 2015-09-21
 */
class InitiateLayerUploadRequest {
    /**
     * Constructs a new <code>InitiateLayerUploadRequest</code>.
     * @alias module:model/InitiateLayerUploadRequest
     * @param repositoryName {String} 
     */
    constructor(repositoryName) { 
        
        InitiateLayerUploadRequest.initialize(this, repositoryName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, repositoryName) { 
        obj['repositoryName'] = repositoryName;
    }

    /**
     * Constructs a <code>InitiateLayerUploadRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InitiateLayerUploadRequest} obj Optional instance to populate.
     * @return {module:model/InitiateLayerUploadRequest} The populated <code>InitiateLayerUploadRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InitiateLayerUploadRequest();

            if (data.hasOwnProperty('registryId')) {
                obj['registryId'] = ApiClient.convertToType(data['registryId'], 'String');
            }
            if (data.hasOwnProperty('repositoryName')) {
                obj['repositoryName'] = ApiClient.convertToType(data['repositoryName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InitiateLayerUploadRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InitiateLayerUploadRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of InitiateLayerUploadRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `registryId`
        if (data['registryId']) { // data not null
          String.validateJSON(data['registryId']);
        }
        // validate the optional field `repositoryName`
        if (data['repositoryName']) { // data not null
          String.validateJSON(data['repositoryName']);
        }

        return true;
    }


}

InitiateLayerUploadRequest.RequiredProperties = ["repositoryName"];

/**
 * @member {String} registryId
 */
InitiateLayerUploadRequest.prototype['registryId'] = undefined;

/**
 * @member {String} repositoryName
 */
InitiateLayerUploadRequest.prototype['repositoryName'] = undefined;






export default InitiateLayerUploadRequest;

