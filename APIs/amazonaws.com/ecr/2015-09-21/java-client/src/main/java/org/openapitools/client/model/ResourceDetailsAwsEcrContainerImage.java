/*
 * Amazon EC2 Container Registry
 * <fullname>Amazon Elastic Container Registry</fullname> <p>Amazon Elastic Container Registry (Amazon ECR) is a managed container image registry service. Customers can use the familiar Docker CLI, or their preferred client, to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports private repositories with resource-based permissions using IAM so that specific users or Amazon EC2 instances can access repositories and images.</p> <p>Amazon ECR has service endpoints in each supported Region. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/ecr.html\">Amazon ECR endpoints</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2015-09-21
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ResourceDetailsAwsEcrContainerImage
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:15.936661-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ResourceDetailsAwsEcrContainerImage {
  public static final String SERIALIZED_NAME_ARCHITECTURE = "architecture";
  @SerializedName(SERIALIZED_NAME_ARCHITECTURE)
  private String architecture;

  public static final String SERIALIZED_NAME_AUTHOR = "author";
  @SerializedName(SERIALIZED_NAME_AUTHOR)
  private String author;

  public static final String SERIALIZED_NAME_IMAGE_HASH = "imageHash";
  @SerializedName(SERIALIZED_NAME_IMAGE_HASH)
  private String imageHash;

  public static final String SERIALIZED_NAME_IMAGE_TAGS = "imageTags";
  @SerializedName(SERIALIZED_NAME_IMAGE_TAGS)
  private List imageTags;

  public static final String SERIALIZED_NAME_PLATFORM = "platform";
  @SerializedName(SERIALIZED_NAME_PLATFORM)
  private String platform;

  public static final String SERIALIZED_NAME_PUSHED_AT = "pushedAt";
  @SerializedName(SERIALIZED_NAME_PUSHED_AT)
  private OffsetDateTime pushedAt;

  public static final String SERIALIZED_NAME_REGISTRY = "registry";
  @SerializedName(SERIALIZED_NAME_REGISTRY)
  private String registry;

  public static final String SERIALIZED_NAME_REPOSITORY_NAME = "repositoryName";
  @SerializedName(SERIALIZED_NAME_REPOSITORY_NAME)
  private String repositoryName;

  public ResourceDetailsAwsEcrContainerImage() {
  }

  public ResourceDetailsAwsEcrContainerImage architecture(String architecture) {
    this.architecture = architecture;
    return this;
  }

  /**
   * Get architecture
   * @return architecture
   */
  @javax.annotation.Nullable
  public String getArchitecture() {
    return architecture;
  }

  public void setArchitecture(String architecture) {
    this.architecture = architecture;
  }


  public ResourceDetailsAwsEcrContainerImage author(String author) {
    this.author = author;
    return this;
  }

  /**
   * Get author
   * @return author
   */
  @javax.annotation.Nullable
  public String getAuthor() {
    return author;
  }

  public void setAuthor(String author) {
    this.author = author;
  }


  public ResourceDetailsAwsEcrContainerImage imageHash(String imageHash) {
    this.imageHash = imageHash;
    return this;
  }

  /**
   * Get imageHash
   * @return imageHash
   */
  @javax.annotation.Nullable
  public String getImageHash() {
    return imageHash;
  }

  public void setImageHash(String imageHash) {
    this.imageHash = imageHash;
  }


  public ResourceDetailsAwsEcrContainerImage imageTags(List imageTags) {
    this.imageTags = imageTags;
    return this;
  }

  /**
   * Get imageTags
   * @return imageTags
   */
  @javax.annotation.Nullable
  public List getImageTags() {
    return imageTags;
  }

  public void setImageTags(List imageTags) {
    this.imageTags = imageTags;
  }


  public ResourceDetailsAwsEcrContainerImage platform(String platform) {
    this.platform = platform;
    return this;
  }

  /**
   * Get platform
   * @return platform
   */
  @javax.annotation.Nullable
  public String getPlatform() {
    return platform;
  }

  public void setPlatform(String platform) {
    this.platform = platform;
  }


  public ResourceDetailsAwsEcrContainerImage pushedAt(OffsetDateTime pushedAt) {
    this.pushedAt = pushedAt;
    return this;
  }

  /**
   * Get pushedAt
   * @return pushedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPushedAt() {
    return pushedAt;
  }

  public void setPushedAt(OffsetDateTime pushedAt) {
    this.pushedAt = pushedAt;
  }


  public ResourceDetailsAwsEcrContainerImage registry(String registry) {
    this.registry = registry;
    return this;
  }

  /**
   * Get registry
   * @return registry
   */
  @javax.annotation.Nullable
  public String getRegistry() {
    return registry;
  }

  public void setRegistry(String registry) {
    this.registry = registry;
  }


  public ResourceDetailsAwsEcrContainerImage repositoryName(String repositoryName) {
    this.repositoryName = repositoryName;
    return this;
  }

  /**
   * Get repositoryName
   * @return repositoryName
   */
  @javax.annotation.Nullable
  public String getRepositoryName() {
    return repositoryName;
  }

  public void setRepositoryName(String repositoryName) {
    this.repositoryName = repositoryName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResourceDetailsAwsEcrContainerImage resourceDetailsAwsEcrContainerImage = (ResourceDetailsAwsEcrContainerImage) o;
    return Objects.equals(this.architecture, resourceDetailsAwsEcrContainerImage.architecture) &&
        Objects.equals(this.author, resourceDetailsAwsEcrContainerImage.author) &&
        Objects.equals(this.imageHash, resourceDetailsAwsEcrContainerImage.imageHash) &&
        Objects.equals(this.imageTags, resourceDetailsAwsEcrContainerImage.imageTags) &&
        Objects.equals(this.platform, resourceDetailsAwsEcrContainerImage.platform) &&
        Objects.equals(this.pushedAt, resourceDetailsAwsEcrContainerImage.pushedAt) &&
        Objects.equals(this.registry, resourceDetailsAwsEcrContainerImage.registry) &&
        Objects.equals(this.repositoryName, resourceDetailsAwsEcrContainerImage.repositoryName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(architecture, author, imageHash, imageTags, platform, pushedAt, registry, repositoryName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResourceDetailsAwsEcrContainerImage {\n");
    sb.append("    architecture: ").append(toIndentedString(architecture)).append("\n");
    sb.append("    author: ").append(toIndentedString(author)).append("\n");
    sb.append("    imageHash: ").append(toIndentedString(imageHash)).append("\n");
    sb.append("    imageTags: ").append(toIndentedString(imageTags)).append("\n");
    sb.append("    platform: ").append(toIndentedString(platform)).append("\n");
    sb.append("    pushedAt: ").append(toIndentedString(pushedAt)).append("\n");
    sb.append("    registry: ").append(toIndentedString(registry)).append("\n");
    sb.append("    repositoryName: ").append(toIndentedString(repositoryName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("architecture");
    openapiFields.add("author");
    openapiFields.add("imageHash");
    openapiFields.add("imageTags");
    openapiFields.add("platform");
    openapiFields.add("pushedAt");
    openapiFields.add("registry");
    openapiFields.add("repositoryName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ResourceDetailsAwsEcrContainerImage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResourceDetailsAwsEcrContainerImage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResourceDetailsAwsEcrContainerImage is not found in the empty JSON string", ResourceDetailsAwsEcrContainerImage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ResourceDetailsAwsEcrContainerImage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResourceDetailsAwsEcrContainerImage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `architecture`
      if (jsonObj.get("architecture") != null && !jsonObj.get("architecture").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("architecture"));
      }
      // validate the optional field `author`
      if (jsonObj.get("author") != null && !jsonObj.get("author").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("author"));
      }
      // validate the optional field `imageHash`
      if (jsonObj.get("imageHash") != null && !jsonObj.get("imageHash").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("imageHash"));
      }
      // validate the optional field `imageTags`
      if (jsonObj.get("imageTags") != null && !jsonObj.get("imageTags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("imageTags"));
      }
      // validate the optional field `platform`
      if (jsonObj.get("platform") != null && !jsonObj.get("platform").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("platform"));
      }
      // validate the optional field `pushedAt`
      if (jsonObj.get("pushedAt") != null && !jsonObj.get("pushedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("pushedAt"));
      }
      // validate the optional field `registry`
      if (jsonObj.get("registry") != null && !jsonObj.get("registry").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("registry"));
      }
      // validate the optional field `repositoryName`
      if (jsonObj.get("repositoryName") != null && !jsonObj.get("repositoryName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("repositoryName"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResourceDetailsAwsEcrContainerImage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResourceDetailsAwsEcrContainerImage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResourceDetailsAwsEcrContainerImage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResourceDetailsAwsEcrContainerImage.class));

       return (TypeAdapter<T>) new TypeAdapter<ResourceDetailsAwsEcrContainerImage>() {
           @Override
           public void write(JsonWriter out, ResourceDetailsAwsEcrContainerImage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResourceDetailsAwsEcrContainerImage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ResourceDetailsAwsEcrContainerImage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ResourceDetailsAwsEcrContainerImage
   * @throws IOException if the JSON string is invalid with respect to ResourceDetailsAwsEcrContainerImage
   */
  public static ResourceDetailsAwsEcrContainerImage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResourceDetailsAwsEcrContainerImage.class);
  }

  /**
   * Convert an instance of ResourceDetailsAwsEcrContainerImage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

