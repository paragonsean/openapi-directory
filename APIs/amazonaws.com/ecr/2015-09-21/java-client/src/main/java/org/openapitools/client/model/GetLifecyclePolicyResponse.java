/*
 * Amazon EC2 Container Registry
 * <fullname>Amazon Elastic Container Registry</fullname> <p>Amazon Elastic Container Registry (Amazon ECR) is a managed container image registry service. Customers can use the familiar Docker CLI, or their preferred client, to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports private repositories with resource-based permissions using IAM so that specific users or Amazon EC2 instances can access repositories and images.</p> <p>Amazon ECR has service endpoints in each supported Region. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/ecr.html\">Amazon ECR endpoints</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2015-09-21
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetLifecyclePolicyResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:15.936661-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetLifecyclePolicyResponse {
  public static final String SERIALIZED_NAME_REGISTRY_ID = "registryId";
  @SerializedName(SERIALIZED_NAME_REGISTRY_ID)
  private String registryId;

  public static final String SERIALIZED_NAME_REPOSITORY_NAME = "repositoryName";
  @SerializedName(SERIALIZED_NAME_REPOSITORY_NAME)
  private String repositoryName;

  public static final String SERIALIZED_NAME_LIFECYCLE_POLICY_TEXT = "lifecyclePolicyText";
  @SerializedName(SERIALIZED_NAME_LIFECYCLE_POLICY_TEXT)
  private String lifecyclePolicyText;

  public static final String SERIALIZED_NAME_LAST_EVALUATED_AT = "lastEvaluatedAt";
  @SerializedName(SERIALIZED_NAME_LAST_EVALUATED_AT)
  private OffsetDateTime lastEvaluatedAt;

  public GetLifecyclePolicyResponse() {
  }

  public GetLifecyclePolicyResponse registryId(String registryId) {
    this.registryId = registryId;
    return this;
  }

  /**
   * Get registryId
   * @return registryId
   */
  @javax.annotation.Nullable
  public String getRegistryId() {
    return registryId;
  }

  public void setRegistryId(String registryId) {
    this.registryId = registryId;
  }


  public GetLifecyclePolicyResponse repositoryName(String repositoryName) {
    this.repositoryName = repositoryName;
    return this;
  }

  /**
   * Get repositoryName
   * @return repositoryName
   */
  @javax.annotation.Nullable
  public String getRepositoryName() {
    return repositoryName;
  }

  public void setRepositoryName(String repositoryName) {
    this.repositoryName = repositoryName;
  }


  public GetLifecyclePolicyResponse lifecyclePolicyText(String lifecyclePolicyText) {
    this.lifecyclePolicyText = lifecyclePolicyText;
    return this;
  }

  /**
   * Get lifecyclePolicyText
   * @return lifecyclePolicyText
   */
  @javax.annotation.Nullable
  public String getLifecyclePolicyText() {
    return lifecyclePolicyText;
  }

  public void setLifecyclePolicyText(String lifecyclePolicyText) {
    this.lifecyclePolicyText = lifecyclePolicyText;
  }


  public GetLifecyclePolicyResponse lastEvaluatedAt(OffsetDateTime lastEvaluatedAt) {
    this.lastEvaluatedAt = lastEvaluatedAt;
    return this;
  }

  /**
   * Get lastEvaluatedAt
   * @return lastEvaluatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastEvaluatedAt() {
    return lastEvaluatedAt;
  }

  public void setLastEvaluatedAt(OffsetDateTime lastEvaluatedAt) {
    this.lastEvaluatedAt = lastEvaluatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetLifecyclePolicyResponse getLifecyclePolicyResponse = (GetLifecyclePolicyResponse) o;
    return Objects.equals(this.registryId, getLifecyclePolicyResponse.registryId) &&
        Objects.equals(this.repositoryName, getLifecyclePolicyResponse.repositoryName) &&
        Objects.equals(this.lifecyclePolicyText, getLifecyclePolicyResponse.lifecyclePolicyText) &&
        Objects.equals(this.lastEvaluatedAt, getLifecyclePolicyResponse.lastEvaluatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(registryId, repositoryName, lifecyclePolicyText, lastEvaluatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetLifecyclePolicyResponse {\n");
    sb.append("    registryId: ").append(toIndentedString(registryId)).append("\n");
    sb.append("    repositoryName: ").append(toIndentedString(repositoryName)).append("\n");
    sb.append("    lifecyclePolicyText: ").append(toIndentedString(lifecyclePolicyText)).append("\n");
    sb.append("    lastEvaluatedAt: ").append(toIndentedString(lastEvaluatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("registryId");
    openapiFields.add("repositoryName");
    openapiFields.add("lifecyclePolicyText");
    openapiFields.add("lastEvaluatedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetLifecyclePolicyResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetLifecyclePolicyResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetLifecyclePolicyResponse is not found in the empty JSON string", GetLifecyclePolicyResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetLifecyclePolicyResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetLifecyclePolicyResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `registryId`
      if (jsonObj.get("registryId") != null && !jsonObj.get("registryId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("registryId"));
      }
      // validate the optional field `repositoryName`
      if (jsonObj.get("repositoryName") != null && !jsonObj.get("repositoryName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("repositoryName"));
      }
      // validate the optional field `lifecyclePolicyText`
      if (jsonObj.get("lifecyclePolicyText") != null && !jsonObj.get("lifecyclePolicyText").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("lifecyclePolicyText"));
      }
      // validate the optional field `lastEvaluatedAt`
      if (jsonObj.get("lastEvaluatedAt") != null && !jsonObj.get("lastEvaluatedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("lastEvaluatedAt"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetLifecyclePolicyResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetLifecyclePolicyResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetLifecyclePolicyResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetLifecyclePolicyResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetLifecyclePolicyResponse>() {
           @Override
           public void write(JsonWriter out, GetLifecyclePolicyResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetLifecyclePolicyResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetLifecyclePolicyResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetLifecyclePolicyResponse
   * @throws IOException if the JSON string is invalid with respect to GetLifecyclePolicyResponse
   */
  public static GetLifecyclePolicyResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetLifecyclePolicyResponse.class);
  }

  /**
   * Convert an instance of GetLifecyclePolicyResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

