/*
 * Amazon EC2 Container Registry
 * <fullname>Amazon Elastic Container Registry</fullname> <p>Amazon Elastic Container Registry (Amazon ECR) is a managed container image registry service. Customers can use the familiar Docker CLI, or their preferred client, to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports private repositories with resource-based permissions using IAM so that specific users or Amazon EC2 instances can access repositories and images.</p> <p>Amazon ECR has service endpoints in each supported Region. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/ecr.html\">Amazon ECR endpoints</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2015-09-21
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DescribeImageScanFindingsResponseImageScanStatus;
import org.openapitools.client.model.ImageDetailImageScanFindingsSummary;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An object that describes an image returned by a &lt;a&gt;DescribeImages&lt;/a&gt; operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:15.936661-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ImageDetail {
  public static final String SERIALIZED_NAME_REGISTRY_ID = "registryId";
  @SerializedName(SERIALIZED_NAME_REGISTRY_ID)
  private String registryId;

  public static final String SERIALIZED_NAME_REPOSITORY_NAME = "repositoryName";
  @SerializedName(SERIALIZED_NAME_REPOSITORY_NAME)
  private String repositoryName;

  public static final String SERIALIZED_NAME_IMAGE_DIGEST = "imageDigest";
  @SerializedName(SERIALIZED_NAME_IMAGE_DIGEST)
  private String imageDigest;

  public static final String SERIALIZED_NAME_IMAGE_TAGS = "imageTags";
  @SerializedName(SERIALIZED_NAME_IMAGE_TAGS)
  private List imageTags;

  public static final String SERIALIZED_NAME_IMAGE_SIZE_IN_BYTES = "imageSizeInBytes";
  @SerializedName(SERIALIZED_NAME_IMAGE_SIZE_IN_BYTES)
  private Integer imageSizeInBytes;

  public static final String SERIALIZED_NAME_IMAGE_PUSHED_AT = "imagePushedAt";
  @SerializedName(SERIALIZED_NAME_IMAGE_PUSHED_AT)
  private OffsetDateTime imagePushedAt;

  public static final String SERIALIZED_NAME_IMAGE_SCAN_STATUS = "imageScanStatus";
  @SerializedName(SERIALIZED_NAME_IMAGE_SCAN_STATUS)
  private DescribeImageScanFindingsResponseImageScanStatus imageScanStatus;

  public static final String SERIALIZED_NAME_IMAGE_SCAN_FINDINGS_SUMMARY = "imageScanFindingsSummary";
  @SerializedName(SERIALIZED_NAME_IMAGE_SCAN_FINDINGS_SUMMARY)
  private ImageDetailImageScanFindingsSummary imageScanFindingsSummary;

  public static final String SERIALIZED_NAME_IMAGE_MANIFEST_MEDIA_TYPE = "imageManifestMediaType";
  @SerializedName(SERIALIZED_NAME_IMAGE_MANIFEST_MEDIA_TYPE)
  private String imageManifestMediaType;

  public static final String SERIALIZED_NAME_ARTIFACT_MEDIA_TYPE = "artifactMediaType";
  @SerializedName(SERIALIZED_NAME_ARTIFACT_MEDIA_TYPE)
  private String artifactMediaType;

  public static final String SERIALIZED_NAME_LAST_RECORDED_PULL_TIME = "lastRecordedPullTime";
  @SerializedName(SERIALIZED_NAME_LAST_RECORDED_PULL_TIME)
  private OffsetDateTime lastRecordedPullTime;

  public ImageDetail() {
  }

  public ImageDetail registryId(String registryId) {
    this.registryId = registryId;
    return this;
  }

  /**
   * Get registryId
   * @return registryId
   */
  @javax.annotation.Nullable
  public String getRegistryId() {
    return registryId;
  }

  public void setRegistryId(String registryId) {
    this.registryId = registryId;
  }


  public ImageDetail repositoryName(String repositoryName) {
    this.repositoryName = repositoryName;
    return this;
  }

  /**
   * Get repositoryName
   * @return repositoryName
   */
  @javax.annotation.Nullable
  public String getRepositoryName() {
    return repositoryName;
  }

  public void setRepositoryName(String repositoryName) {
    this.repositoryName = repositoryName;
  }


  public ImageDetail imageDigest(String imageDigest) {
    this.imageDigest = imageDigest;
    return this;
  }

  /**
   * Get imageDigest
   * @return imageDigest
   */
  @javax.annotation.Nullable
  public String getImageDigest() {
    return imageDigest;
  }

  public void setImageDigest(String imageDigest) {
    this.imageDigest = imageDigest;
  }


  public ImageDetail imageTags(List imageTags) {
    this.imageTags = imageTags;
    return this;
  }

  /**
   * Get imageTags
   * @return imageTags
   */
  @javax.annotation.Nullable
  public List getImageTags() {
    return imageTags;
  }

  public void setImageTags(List imageTags) {
    this.imageTags = imageTags;
  }


  public ImageDetail imageSizeInBytes(Integer imageSizeInBytes) {
    this.imageSizeInBytes = imageSizeInBytes;
    return this;
  }

  /**
   * Get imageSizeInBytes
   * @return imageSizeInBytes
   */
  @javax.annotation.Nullable
  public Integer getImageSizeInBytes() {
    return imageSizeInBytes;
  }

  public void setImageSizeInBytes(Integer imageSizeInBytes) {
    this.imageSizeInBytes = imageSizeInBytes;
  }


  public ImageDetail imagePushedAt(OffsetDateTime imagePushedAt) {
    this.imagePushedAt = imagePushedAt;
    return this;
  }

  /**
   * Get imagePushedAt
   * @return imagePushedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getImagePushedAt() {
    return imagePushedAt;
  }

  public void setImagePushedAt(OffsetDateTime imagePushedAt) {
    this.imagePushedAt = imagePushedAt;
  }


  public ImageDetail imageScanStatus(DescribeImageScanFindingsResponseImageScanStatus imageScanStatus) {
    this.imageScanStatus = imageScanStatus;
    return this;
  }

  /**
   * Get imageScanStatus
   * @return imageScanStatus
   */
  @javax.annotation.Nullable
  public DescribeImageScanFindingsResponseImageScanStatus getImageScanStatus() {
    return imageScanStatus;
  }

  public void setImageScanStatus(DescribeImageScanFindingsResponseImageScanStatus imageScanStatus) {
    this.imageScanStatus = imageScanStatus;
  }


  public ImageDetail imageScanFindingsSummary(ImageDetailImageScanFindingsSummary imageScanFindingsSummary) {
    this.imageScanFindingsSummary = imageScanFindingsSummary;
    return this;
  }

  /**
   * Get imageScanFindingsSummary
   * @return imageScanFindingsSummary
   */
  @javax.annotation.Nullable
  public ImageDetailImageScanFindingsSummary getImageScanFindingsSummary() {
    return imageScanFindingsSummary;
  }

  public void setImageScanFindingsSummary(ImageDetailImageScanFindingsSummary imageScanFindingsSummary) {
    this.imageScanFindingsSummary = imageScanFindingsSummary;
  }


  public ImageDetail imageManifestMediaType(String imageManifestMediaType) {
    this.imageManifestMediaType = imageManifestMediaType;
    return this;
  }

  /**
   * Get imageManifestMediaType
   * @return imageManifestMediaType
   */
  @javax.annotation.Nullable
  public String getImageManifestMediaType() {
    return imageManifestMediaType;
  }

  public void setImageManifestMediaType(String imageManifestMediaType) {
    this.imageManifestMediaType = imageManifestMediaType;
  }


  public ImageDetail artifactMediaType(String artifactMediaType) {
    this.artifactMediaType = artifactMediaType;
    return this;
  }

  /**
   * Get artifactMediaType
   * @return artifactMediaType
   */
  @javax.annotation.Nullable
  public String getArtifactMediaType() {
    return artifactMediaType;
  }

  public void setArtifactMediaType(String artifactMediaType) {
    this.artifactMediaType = artifactMediaType;
  }


  public ImageDetail lastRecordedPullTime(OffsetDateTime lastRecordedPullTime) {
    this.lastRecordedPullTime = lastRecordedPullTime;
    return this;
  }

  /**
   * Get lastRecordedPullTime
   * @return lastRecordedPullTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastRecordedPullTime() {
    return lastRecordedPullTime;
  }

  public void setLastRecordedPullTime(OffsetDateTime lastRecordedPullTime) {
    this.lastRecordedPullTime = lastRecordedPullTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImageDetail imageDetail = (ImageDetail) o;
    return Objects.equals(this.registryId, imageDetail.registryId) &&
        Objects.equals(this.repositoryName, imageDetail.repositoryName) &&
        Objects.equals(this.imageDigest, imageDetail.imageDigest) &&
        Objects.equals(this.imageTags, imageDetail.imageTags) &&
        Objects.equals(this.imageSizeInBytes, imageDetail.imageSizeInBytes) &&
        Objects.equals(this.imagePushedAt, imageDetail.imagePushedAt) &&
        Objects.equals(this.imageScanStatus, imageDetail.imageScanStatus) &&
        Objects.equals(this.imageScanFindingsSummary, imageDetail.imageScanFindingsSummary) &&
        Objects.equals(this.imageManifestMediaType, imageDetail.imageManifestMediaType) &&
        Objects.equals(this.artifactMediaType, imageDetail.artifactMediaType) &&
        Objects.equals(this.lastRecordedPullTime, imageDetail.lastRecordedPullTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(registryId, repositoryName, imageDigest, imageTags, imageSizeInBytes, imagePushedAt, imageScanStatus, imageScanFindingsSummary, imageManifestMediaType, artifactMediaType, lastRecordedPullTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImageDetail {\n");
    sb.append("    registryId: ").append(toIndentedString(registryId)).append("\n");
    sb.append("    repositoryName: ").append(toIndentedString(repositoryName)).append("\n");
    sb.append("    imageDigest: ").append(toIndentedString(imageDigest)).append("\n");
    sb.append("    imageTags: ").append(toIndentedString(imageTags)).append("\n");
    sb.append("    imageSizeInBytes: ").append(toIndentedString(imageSizeInBytes)).append("\n");
    sb.append("    imagePushedAt: ").append(toIndentedString(imagePushedAt)).append("\n");
    sb.append("    imageScanStatus: ").append(toIndentedString(imageScanStatus)).append("\n");
    sb.append("    imageScanFindingsSummary: ").append(toIndentedString(imageScanFindingsSummary)).append("\n");
    sb.append("    imageManifestMediaType: ").append(toIndentedString(imageManifestMediaType)).append("\n");
    sb.append("    artifactMediaType: ").append(toIndentedString(artifactMediaType)).append("\n");
    sb.append("    lastRecordedPullTime: ").append(toIndentedString(lastRecordedPullTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("registryId");
    openapiFields.add("repositoryName");
    openapiFields.add("imageDigest");
    openapiFields.add("imageTags");
    openapiFields.add("imageSizeInBytes");
    openapiFields.add("imagePushedAt");
    openapiFields.add("imageScanStatus");
    openapiFields.add("imageScanFindingsSummary");
    openapiFields.add("imageManifestMediaType");
    openapiFields.add("artifactMediaType");
    openapiFields.add("lastRecordedPullTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImageDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImageDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImageDetail is not found in the empty JSON string", ImageDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImageDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImageDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `registryId`
      if (jsonObj.get("registryId") != null && !jsonObj.get("registryId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("registryId"));
      }
      // validate the optional field `repositoryName`
      if (jsonObj.get("repositoryName") != null && !jsonObj.get("repositoryName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("repositoryName"));
      }
      // validate the optional field `imageDigest`
      if (jsonObj.get("imageDigest") != null && !jsonObj.get("imageDigest").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("imageDigest"));
      }
      // validate the optional field `imageTags`
      if (jsonObj.get("imageTags") != null && !jsonObj.get("imageTags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("imageTags"));
      }
      // validate the optional field `imageSizeInBytes`
      if (jsonObj.get("imageSizeInBytes") != null && !jsonObj.get("imageSizeInBytes").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("imageSizeInBytes"));
      }
      // validate the optional field `imagePushedAt`
      if (jsonObj.get("imagePushedAt") != null && !jsonObj.get("imagePushedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("imagePushedAt"));
      }
      // validate the optional field `imageScanStatus`
      if (jsonObj.get("imageScanStatus") != null && !jsonObj.get("imageScanStatus").isJsonNull()) {
        DescribeImageScanFindingsResponseImageScanStatus.validateJsonElement(jsonObj.get("imageScanStatus"));
      }
      // validate the optional field `imageScanFindingsSummary`
      if (jsonObj.get("imageScanFindingsSummary") != null && !jsonObj.get("imageScanFindingsSummary").isJsonNull()) {
        ImageDetailImageScanFindingsSummary.validateJsonElement(jsonObj.get("imageScanFindingsSummary"));
      }
      // validate the optional field `imageManifestMediaType`
      if (jsonObj.get("imageManifestMediaType") != null && !jsonObj.get("imageManifestMediaType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("imageManifestMediaType"));
      }
      // validate the optional field `artifactMediaType`
      if (jsonObj.get("artifactMediaType") != null && !jsonObj.get("artifactMediaType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("artifactMediaType"));
      }
      // validate the optional field `lastRecordedPullTime`
      if (jsonObj.get("lastRecordedPullTime") != null && !jsonObj.get("lastRecordedPullTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("lastRecordedPullTime"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImageDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImageDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImageDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImageDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<ImageDetail>() {
           @Override
           public void write(JsonWriter out, ImageDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImageDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImageDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImageDetail
   * @throws IOException if the JSON string is invalid with respect to ImageDetail
   */
  public static ImageDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImageDetail.class);
  }

  /**
   * Convert an instance of ImageDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

