/*
 * Amazon EC2 Container Registry
 * <fullname>Amazon Elastic Container Registry</fullname> <p>Amazon Elastic Container Registry (Amazon ECR) is a managed container image registry service. Customers can use the familiar Docker CLI, or their preferred client, to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports private repositories with resource-based permissions using IAM so that specific users or Amazon EC2 instances can access repositories and images.</p> <p>Amazon ECR has service endpoints in each supported Region. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/ecr.html\">Amazon ECR endpoints</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2015-09-21
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EnhancedImageScanFindingPackageVulnerabilityDetails;
import org.openapitools.client.model.EnhancedImageScanFindingRemediation;
import org.openapitools.client.model.EnhancedImageScanFindingScoreDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The details of an enhanced image scan. This is returned when enhanced scanning is enabled for your private registry.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:15.936661-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EnhancedImageScanFinding {
  public static final String SERIALIZED_NAME_AWS_ACCOUNT_ID = "awsAccountId";
  @SerializedName(SERIALIZED_NAME_AWS_ACCOUNT_ID)
  private String awsAccountId;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_FINDING_ARN = "findingArn";
  @SerializedName(SERIALIZED_NAME_FINDING_ARN)
  private String findingArn;

  public static final String SERIALIZED_NAME_FIRST_OBSERVED_AT = "firstObservedAt";
  @SerializedName(SERIALIZED_NAME_FIRST_OBSERVED_AT)
  private OffsetDateTime firstObservedAt;

  public static final String SERIALIZED_NAME_LAST_OBSERVED_AT = "lastObservedAt";
  @SerializedName(SERIALIZED_NAME_LAST_OBSERVED_AT)
  private OffsetDateTime lastObservedAt;

  public static final String SERIALIZED_NAME_PACKAGE_VULNERABILITY_DETAILS = "packageVulnerabilityDetails";
  @SerializedName(SERIALIZED_NAME_PACKAGE_VULNERABILITY_DETAILS)
  private EnhancedImageScanFindingPackageVulnerabilityDetails packageVulnerabilityDetails;

  public static final String SERIALIZED_NAME_REMEDIATION = "remediation";
  @SerializedName(SERIALIZED_NAME_REMEDIATION)
  private EnhancedImageScanFindingRemediation remediation;

  public static final String SERIALIZED_NAME_RESOURCES = "resources";
  @SerializedName(SERIALIZED_NAME_RESOURCES)
  private List resources;

  public static final String SERIALIZED_NAME_SCORE = "score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private Double score;

  public static final String SERIALIZED_NAME_SCORE_DETAILS = "scoreDetails";
  @SerializedName(SERIALIZED_NAME_SCORE_DETAILS)
  private EnhancedImageScanFindingScoreDetails scoreDetails;

  public static final String SERIALIZED_NAME_SEVERITY = "severity";
  @SerializedName(SERIALIZED_NAME_SEVERITY)
  private String severity;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public EnhancedImageScanFinding() {
  }

  public EnhancedImageScanFinding awsAccountId(String awsAccountId) {
    this.awsAccountId = awsAccountId;
    return this;
  }

  /**
   * Get awsAccountId
   * @return awsAccountId
   */
  @javax.annotation.Nullable
  public String getAwsAccountId() {
    return awsAccountId;
  }

  public void setAwsAccountId(String awsAccountId) {
    this.awsAccountId = awsAccountId;
  }


  public EnhancedImageScanFinding description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public EnhancedImageScanFinding findingArn(String findingArn) {
    this.findingArn = findingArn;
    return this;
  }

  /**
   * Get findingArn
   * @return findingArn
   */
  @javax.annotation.Nullable
  public String getFindingArn() {
    return findingArn;
  }

  public void setFindingArn(String findingArn) {
    this.findingArn = findingArn;
  }


  public EnhancedImageScanFinding firstObservedAt(OffsetDateTime firstObservedAt) {
    this.firstObservedAt = firstObservedAt;
    return this;
  }

  /**
   * Get firstObservedAt
   * @return firstObservedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getFirstObservedAt() {
    return firstObservedAt;
  }

  public void setFirstObservedAt(OffsetDateTime firstObservedAt) {
    this.firstObservedAt = firstObservedAt;
  }


  public EnhancedImageScanFinding lastObservedAt(OffsetDateTime lastObservedAt) {
    this.lastObservedAt = lastObservedAt;
    return this;
  }

  /**
   * Get lastObservedAt
   * @return lastObservedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastObservedAt() {
    return lastObservedAt;
  }

  public void setLastObservedAt(OffsetDateTime lastObservedAt) {
    this.lastObservedAt = lastObservedAt;
  }


  public EnhancedImageScanFinding packageVulnerabilityDetails(EnhancedImageScanFindingPackageVulnerabilityDetails packageVulnerabilityDetails) {
    this.packageVulnerabilityDetails = packageVulnerabilityDetails;
    return this;
  }

  /**
   * Get packageVulnerabilityDetails
   * @return packageVulnerabilityDetails
   */
  @javax.annotation.Nullable
  public EnhancedImageScanFindingPackageVulnerabilityDetails getPackageVulnerabilityDetails() {
    return packageVulnerabilityDetails;
  }

  public void setPackageVulnerabilityDetails(EnhancedImageScanFindingPackageVulnerabilityDetails packageVulnerabilityDetails) {
    this.packageVulnerabilityDetails = packageVulnerabilityDetails;
  }


  public EnhancedImageScanFinding remediation(EnhancedImageScanFindingRemediation remediation) {
    this.remediation = remediation;
    return this;
  }

  /**
   * Get remediation
   * @return remediation
   */
  @javax.annotation.Nullable
  public EnhancedImageScanFindingRemediation getRemediation() {
    return remediation;
  }

  public void setRemediation(EnhancedImageScanFindingRemediation remediation) {
    this.remediation = remediation;
  }


  public EnhancedImageScanFinding resources(List resources) {
    this.resources = resources;
    return this;
  }

  /**
   * Get resources
   * @return resources
   */
  @javax.annotation.Nullable
  public List getResources() {
    return resources;
  }

  public void setResources(List resources) {
    this.resources = resources;
  }


  public EnhancedImageScanFinding score(Double score) {
    this.score = score;
    return this;
  }

  /**
   * Get score
   * @return score
   */
  @javax.annotation.Nullable
  public Double getScore() {
    return score;
  }

  public void setScore(Double score) {
    this.score = score;
  }


  public EnhancedImageScanFinding scoreDetails(EnhancedImageScanFindingScoreDetails scoreDetails) {
    this.scoreDetails = scoreDetails;
    return this;
  }

  /**
   * Get scoreDetails
   * @return scoreDetails
   */
  @javax.annotation.Nullable
  public EnhancedImageScanFindingScoreDetails getScoreDetails() {
    return scoreDetails;
  }

  public void setScoreDetails(EnhancedImageScanFindingScoreDetails scoreDetails) {
    this.scoreDetails = scoreDetails;
  }


  public EnhancedImageScanFinding severity(String severity) {
    this.severity = severity;
    return this;
  }

  /**
   * Get severity
   * @return severity
   */
  @javax.annotation.Nullable
  public String getSeverity() {
    return severity;
  }

  public void setSeverity(String severity) {
    this.severity = severity;
  }


  public EnhancedImageScanFinding status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public EnhancedImageScanFinding title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public EnhancedImageScanFinding type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public EnhancedImageScanFinding updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnhancedImageScanFinding enhancedImageScanFinding = (EnhancedImageScanFinding) o;
    return Objects.equals(this.awsAccountId, enhancedImageScanFinding.awsAccountId) &&
        Objects.equals(this.description, enhancedImageScanFinding.description) &&
        Objects.equals(this.findingArn, enhancedImageScanFinding.findingArn) &&
        Objects.equals(this.firstObservedAt, enhancedImageScanFinding.firstObservedAt) &&
        Objects.equals(this.lastObservedAt, enhancedImageScanFinding.lastObservedAt) &&
        Objects.equals(this.packageVulnerabilityDetails, enhancedImageScanFinding.packageVulnerabilityDetails) &&
        Objects.equals(this.remediation, enhancedImageScanFinding.remediation) &&
        Objects.equals(this.resources, enhancedImageScanFinding.resources) &&
        Objects.equals(this.score, enhancedImageScanFinding.score) &&
        Objects.equals(this.scoreDetails, enhancedImageScanFinding.scoreDetails) &&
        Objects.equals(this.severity, enhancedImageScanFinding.severity) &&
        Objects.equals(this.status, enhancedImageScanFinding.status) &&
        Objects.equals(this.title, enhancedImageScanFinding.title) &&
        Objects.equals(this.type, enhancedImageScanFinding.type) &&
        Objects.equals(this.updatedAt, enhancedImageScanFinding.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(awsAccountId, description, findingArn, firstObservedAt, lastObservedAt, packageVulnerabilityDetails, remediation, resources, score, scoreDetails, severity, status, title, type, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnhancedImageScanFinding {\n");
    sb.append("    awsAccountId: ").append(toIndentedString(awsAccountId)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    findingArn: ").append(toIndentedString(findingArn)).append("\n");
    sb.append("    firstObservedAt: ").append(toIndentedString(firstObservedAt)).append("\n");
    sb.append("    lastObservedAt: ").append(toIndentedString(lastObservedAt)).append("\n");
    sb.append("    packageVulnerabilityDetails: ").append(toIndentedString(packageVulnerabilityDetails)).append("\n");
    sb.append("    remediation: ").append(toIndentedString(remediation)).append("\n");
    sb.append("    resources: ").append(toIndentedString(resources)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    scoreDetails: ").append(toIndentedString(scoreDetails)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("awsAccountId");
    openapiFields.add("description");
    openapiFields.add("findingArn");
    openapiFields.add("firstObservedAt");
    openapiFields.add("lastObservedAt");
    openapiFields.add("packageVulnerabilityDetails");
    openapiFields.add("remediation");
    openapiFields.add("resources");
    openapiFields.add("score");
    openapiFields.add("scoreDetails");
    openapiFields.add("severity");
    openapiFields.add("status");
    openapiFields.add("title");
    openapiFields.add("type");
    openapiFields.add("updatedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EnhancedImageScanFinding
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EnhancedImageScanFinding.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EnhancedImageScanFinding is not found in the empty JSON string", EnhancedImageScanFinding.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EnhancedImageScanFinding.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EnhancedImageScanFinding` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `awsAccountId`
      if (jsonObj.get("awsAccountId") != null && !jsonObj.get("awsAccountId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("awsAccountId"));
      }
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("description"));
      }
      // validate the optional field `findingArn`
      if (jsonObj.get("findingArn") != null && !jsonObj.get("findingArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("findingArn"));
      }
      // validate the optional field `firstObservedAt`
      if (jsonObj.get("firstObservedAt") != null && !jsonObj.get("firstObservedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("firstObservedAt"));
      }
      // validate the optional field `lastObservedAt`
      if (jsonObj.get("lastObservedAt") != null && !jsonObj.get("lastObservedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("lastObservedAt"));
      }
      // validate the optional field `packageVulnerabilityDetails`
      if (jsonObj.get("packageVulnerabilityDetails") != null && !jsonObj.get("packageVulnerabilityDetails").isJsonNull()) {
        EnhancedImageScanFindingPackageVulnerabilityDetails.validateJsonElement(jsonObj.get("packageVulnerabilityDetails"));
      }
      // validate the optional field `remediation`
      if (jsonObj.get("remediation") != null && !jsonObj.get("remediation").isJsonNull()) {
        EnhancedImageScanFindingRemediation.validateJsonElement(jsonObj.get("remediation"));
      }
      // validate the optional field `resources`
      if (jsonObj.get("resources") != null && !jsonObj.get("resources").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("resources"));
      }
      // validate the optional field `score`
      if (jsonObj.get("score") != null && !jsonObj.get("score").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("score"));
      }
      // validate the optional field `scoreDetails`
      if (jsonObj.get("scoreDetails") != null && !jsonObj.get("scoreDetails").isJsonNull()) {
        EnhancedImageScanFindingScoreDetails.validateJsonElement(jsonObj.get("scoreDetails"));
      }
      // validate the optional field `severity`
      if (jsonObj.get("severity") != null && !jsonObj.get("severity").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("severity"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `title`
      if (jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("title"));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("type"));
      }
      // validate the optional field `updatedAt`
      if (jsonObj.get("updatedAt") != null && !jsonObj.get("updatedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("updatedAt"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EnhancedImageScanFinding.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EnhancedImageScanFinding' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EnhancedImageScanFinding> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EnhancedImageScanFinding.class));

       return (TypeAdapter<T>) new TypeAdapter<EnhancedImageScanFinding>() {
           @Override
           public void write(JsonWriter out, EnhancedImageScanFinding value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EnhancedImageScanFinding read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EnhancedImageScanFinding given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EnhancedImageScanFinding
   * @throws IOException if the JSON string is invalid with respect to EnhancedImageScanFinding
   */
  public static EnhancedImageScanFinding fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EnhancedImageScanFinding.class);
  }

  /**
   * Convert an instance of EnhancedImageScanFinding to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

