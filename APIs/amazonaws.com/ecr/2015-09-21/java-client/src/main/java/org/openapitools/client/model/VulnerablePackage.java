/*
 * Amazon EC2 Container Registry
 * <fullname>Amazon Elastic Container Registry</fullname> <p>Amazon Elastic Container Registry (Amazon ECR) is a managed container image registry service. Customers can use the familiar Docker CLI, or their preferred client, to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports private repositories with resource-based permissions using IAM so that specific users or Amazon EC2 instances can access repositories and images.</p> <p>Amazon ECR has service endpoints in each supported Region. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/ecr.html\">Amazon ECR endpoints</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2015-09-21
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information on the vulnerable package identified by a finding.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:15.936661-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VulnerablePackage {
  public static final String SERIALIZED_NAME_ARCH = "arch";
  @SerializedName(SERIALIZED_NAME_ARCH)
  private String arch;

  public static final String SERIALIZED_NAME_EPOCH = "epoch";
  @SerializedName(SERIALIZED_NAME_EPOCH)
  private Integer epoch;

  public static final String SERIALIZED_NAME_FILE_PATH = "filePath";
  @SerializedName(SERIALIZED_NAME_FILE_PATH)
  private String filePath;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PACKAGE_MANAGER = "packageManager";
  @SerializedName(SERIALIZED_NAME_PACKAGE_MANAGER)
  private String packageManager;

  public static final String SERIALIZED_NAME_RELEASE = "release";
  @SerializedName(SERIALIZED_NAME_RELEASE)
  private String release;

  public static final String SERIALIZED_NAME_SOURCE_LAYER_HASH = "sourceLayerHash";
  @SerializedName(SERIALIZED_NAME_SOURCE_LAYER_HASH)
  private String sourceLayerHash;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public VulnerablePackage() {
  }

  public VulnerablePackage arch(String arch) {
    this.arch = arch;
    return this;
  }

  /**
   * Get arch
   * @return arch
   */
  @javax.annotation.Nullable
  public String getArch() {
    return arch;
  }

  public void setArch(String arch) {
    this.arch = arch;
  }


  public VulnerablePackage epoch(Integer epoch) {
    this.epoch = epoch;
    return this;
  }

  /**
   * Get epoch
   * @return epoch
   */
  @javax.annotation.Nullable
  public Integer getEpoch() {
    return epoch;
  }

  public void setEpoch(Integer epoch) {
    this.epoch = epoch;
  }


  public VulnerablePackage filePath(String filePath) {
    this.filePath = filePath;
    return this;
  }

  /**
   * Get filePath
   * @return filePath
   */
  @javax.annotation.Nullable
  public String getFilePath() {
    return filePath;
  }

  public void setFilePath(String filePath) {
    this.filePath = filePath;
  }


  public VulnerablePackage name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public VulnerablePackage packageManager(String packageManager) {
    this.packageManager = packageManager;
    return this;
  }

  /**
   * Get packageManager
   * @return packageManager
   */
  @javax.annotation.Nullable
  public String getPackageManager() {
    return packageManager;
  }

  public void setPackageManager(String packageManager) {
    this.packageManager = packageManager;
  }


  public VulnerablePackage release(String release) {
    this.release = release;
    return this;
  }

  /**
   * Get release
   * @return release
   */
  @javax.annotation.Nullable
  public String getRelease() {
    return release;
  }

  public void setRelease(String release) {
    this.release = release;
  }


  public VulnerablePackage sourceLayerHash(String sourceLayerHash) {
    this.sourceLayerHash = sourceLayerHash;
    return this;
  }

  /**
   * Get sourceLayerHash
   * @return sourceLayerHash
   */
  @javax.annotation.Nullable
  public String getSourceLayerHash() {
    return sourceLayerHash;
  }

  public void setSourceLayerHash(String sourceLayerHash) {
    this.sourceLayerHash = sourceLayerHash;
  }


  public VulnerablePackage version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VulnerablePackage vulnerablePackage = (VulnerablePackage) o;
    return Objects.equals(this.arch, vulnerablePackage.arch) &&
        Objects.equals(this.epoch, vulnerablePackage.epoch) &&
        Objects.equals(this.filePath, vulnerablePackage.filePath) &&
        Objects.equals(this.name, vulnerablePackage.name) &&
        Objects.equals(this.packageManager, vulnerablePackage.packageManager) &&
        Objects.equals(this.release, vulnerablePackage.release) &&
        Objects.equals(this.sourceLayerHash, vulnerablePackage.sourceLayerHash) &&
        Objects.equals(this.version, vulnerablePackage.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arch, epoch, filePath, name, packageManager, release, sourceLayerHash, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VulnerablePackage {\n");
    sb.append("    arch: ").append(toIndentedString(arch)).append("\n");
    sb.append("    epoch: ").append(toIndentedString(epoch)).append("\n");
    sb.append("    filePath: ").append(toIndentedString(filePath)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    packageManager: ").append(toIndentedString(packageManager)).append("\n");
    sb.append("    release: ").append(toIndentedString(release)).append("\n");
    sb.append("    sourceLayerHash: ").append(toIndentedString(sourceLayerHash)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arch");
    openapiFields.add("epoch");
    openapiFields.add("filePath");
    openapiFields.add("name");
    openapiFields.add("packageManager");
    openapiFields.add("release");
    openapiFields.add("sourceLayerHash");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VulnerablePackage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VulnerablePackage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VulnerablePackage is not found in the empty JSON string", VulnerablePackage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VulnerablePackage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VulnerablePackage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `arch`
      if (jsonObj.get("arch") != null && !jsonObj.get("arch").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("arch"));
      }
      // validate the optional field `epoch`
      if (jsonObj.get("epoch") != null && !jsonObj.get("epoch").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("epoch"));
      }
      // validate the optional field `filePath`
      if (jsonObj.get("filePath") != null && !jsonObj.get("filePath").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("filePath"));
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("name"));
      }
      // validate the optional field `packageManager`
      if (jsonObj.get("packageManager") != null && !jsonObj.get("packageManager").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("packageManager"));
      }
      // validate the optional field `release`
      if (jsonObj.get("release") != null && !jsonObj.get("release").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("release"));
      }
      // validate the optional field `sourceLayerHash`
      if (jsonObj.get("sourceLayerHash") != null && !jsonObj.get("sourceLayerHash").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("sourceLayerHash"));
      }
      // validate the optional field `version`
      if (jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("version"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VulnerablePackage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VulnerablePackage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VulnerablePackage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VulnerablePackage.class));

       return (TypeAdapter<T>) new TypeAdapter<VulnerablePackage>() {
           @Override
           public void write(JsonWriter out, VulnerablePackage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VulnerablePackage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VulnerablePackage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VulnerablePackage
   * @throws IOException if the JSON string is invalid with respect to VulnerablePackage
   */
  public static VulnerablePackage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VulnerablePackage.class);
  }

  /**
   * Convert an instance of VulnerablePackage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

