/*
 * Amazon EC2 Container Registry
 * <fullname>Amazon Elastic Container Registry</fullname> <p>Amazon Elastic Container Registry (Amazon ECR) is a managed container image registry service. Customers can use the familiar Docker CLI, or their preferred client, to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports private repositories with resource-based permissions using IAM so that specific users or Amazon EC2 instances can access repositories and images.</p> <p>Amazon ECR has service endpoints in each supported Region. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/ecr.html\">Amazon ECR endpoints</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2015-09-21
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DeletePullThroughCacheRuleResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:15.936661-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeletePullThroughCacheRuleResponse {
  public static final String SERIALIZED_NAME_ECR_REPOSITORY_PREFIX = "ecrRepositoryPrefix";
  @SerializedName(SERIALIZED_NAME_ECR_REPOSITORY_PREFIX)
  private String ecrRepositoryPrefix;

  public static final String SERIALIZED_NAME_UPSTREAM_REGISTRY_URL = "upstreamRegistryUrl";
  @SerializedName(SERIALIZED_NAME_UPSTREAM_REGISTRY_URL)
  private String upstreamRegistryUrl;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_REGISTRY_ID = "registryId";
  @SerializedName(SERIALIZED_NAME_REGISTRY_ID)
  private String registryId;

  public DeletePullThroughCacheRuleResponse() {
  }

  public DeletePullThroughCacheRuleResponse ecrRepositoryPrefix(String ecrRepositoryPrefix) {
    this.ecrRepositoryPrefix = ecrRepositoryPrefix;
    return this;
  }

  /**
   * Get ecrRepositoryPrefix
   * @return ecrRepositoryPrefix
   */
  @javax.annotation.Nullable
  public String getEcrRepositoryPrefix() {
    return ecrRepositoryPrefix;
  }

  public void setEcrRepositoryPrefix(String ecrRepositoryPrefix) {
    this.ecrRepositoryPrefix = ecrRepositoryPrefix;
  }


  public DeletePullThroughCacheRuleResponse upstreamRegistryUrl(String upstreamRegistryUrl) {
    this.upstreamRegistryUrl = upstreamRegistryUrl;
    return this;
  }

  /**
   * Get upstreamRegistryUrl
   * @return upstreamRegistryUrl
   */
  @javax.annotation.Nullable
  public String getUpstreamRegistryUrl() {
    return upstreamRegistryUrl;
  }

  public void setUpstreamRegistryUrl(String upstreamRegistryUrl) {
    this.upstreamRegistryUrl = upstreamRegistryUrl;
  }


  public DeletePullThroughCacheRuleResponse createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public DeletePullThroughCacheRuleResponse registryId(String registryId) {
    this.registryId = registryId;
    return this;
  }

  /**
   * Get registryId
   * @return registryId
   */
  @javax.annotation.Nullable
  public String getRegistryId() {
    return registryId;
  }

  public void setRegistryId(String registryId) {
    this.registryId = registryId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeletePullThroughCacheRuleResponse deletePullThroughCacheRuleResponse = (DeletePullThroughCacheRuleResponse) o;
    return Objects.equals(this.ecrRepositoryPrefix, deletePullThroughCacheRuleResponse.ecrRepositoryPrefix) &&
        Objects.equals(this.upstreamRegistryUrl, deletePullThroughCacheRuleResponse.upstreamRegistryUrl) &&
        Objects.equals(this.createdAt, deletePullThroughCacheRuleResponse.createdAt) &&
        Objects.equals(this.registryId, deletePullThroughCacheRuleResponse.registryId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ecrRepositoryPrefix, upstreamRegistryUrl, createdAt, registryId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeletePullThroughCacheRuleResponse {\n");
    sb.append("    ecrRepositoryPrefix: ").append(toIndentedString(ecrRepositoryPrefix)).append("\n");
    sb.append("    upstreamRegistryUrl: ").append(toIndentedString(upstreamRegistryUrl)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    registryId: ").append(toIndentedString(registryId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ecrRepositoryPrefix");
    openapiFields.add("upstreamRegistryUrl");
    openapiFields.add("createdAt");
    openapiFields.add("registryId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeletePullThroughCacheRuleResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeletePullThroughCacheRuleResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeletePullThroughCacheRuleResponse is not found in the empty JSON string", DeletePullThroughCacheRuleResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeletePullThroughCacheRuleResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeletePullThroughCacheRuleResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ecrRepositoryPrefix`
      if (jsonObj.get("ecrRepositoryPrefix") != null && !jsonObj.get("ecrRepositoryPrefix").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ecrRepositoryPrefix"));
      }
      // validate the optional field `upstreamRegistryUrl`
      if (jsonObj.get("upstreamRegistryUrl") != null && !jsonObj.get("upstreamRegistryUrl").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("upstreamRegistryUrl"));
      }
      // validate the optional field `createdAt`
      if (jsonObj.get("createdAt") != null && !jsonObj.get("createdAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("createdAt"));
      }
      // validate the optional field `registryId`
      if (jsonObj.get("registryId") != null && !jsonObj.get("registryId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("registryId"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeletePullThroughCacheRuleResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeletePullThroughCacheRuleResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeletePullThroughCacheRuleResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeletePullThroughCacheRuleResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DeletePullThroughCacheRuleResponse>() {
           @Override
           public void write(JsonWriter out, DeletePullThroughCacheRuleResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeletePullThroughCacheRuleResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeletePullThroughCacheRuleResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeletePullThroughCacheRuleResponse
   * @throws IOException if the JSON string is invalid with respect to DeletePullThroughCacheRuleResponse
   */
  public static DeletePullThroughCacheRuleResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeletePullThroughCacheRuleResponse.class);
  }

  /**
   * Convert an instance of DeletePullThroughCacheRuleResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

