/*
 * Amazon EC2 Container Registry
 * <fullname>Amazon Elastic Container Registry</fullname> <p>Amazon Elastic Container Registry (Amazon ECR) is a managed container image registry service. Customers can use the familiar Docker CLI, or their preferred client, to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports private repositories with resource-based permissions using IAM so that specific users or Amazon EC2 instances can access repositories and images.</p> <p>Amazon ECR has service endpoints in each supported Region. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/ecr.html\">Amazon ECR endpoints</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2015-09-21
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EnhancedImageScanFindingPackageVulnerabilityDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:15.936661-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EnhancedImageScanFindingPackageVulnerabilityDetails {
  public static final String SERIALIZED_NAME_CVSS = "cvss";
  @SerializedName(SERIALIZED_NAME_CVSS)
  private List cvss;

  public static final String SERIALIZED_NAME_REFERENCE_URLS = "referenceUrls";
  @SerializedName(SERIALIZED_NAME_REFERENCE_URLS)
  private List referenceUrls;

  public static final String SERIALIZED_NAME_RELATED_VULNERABILITIES = "relatedVulnerabilities";
  @SerializedName(SERIALIZED_NAME_RELATED_VULNERABILITIES)
  private List relatedVulnerabilities;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_SOURCE_URL = "sourceUrl";
  @SerializedName(SERIALIZED_NAME_SOURCE_URL)
  private String sourceUrl;

  public static final String SERIALIZED_NAME_VENDOR_CREATED_AT = "vendorCreatedAt";
  @SerializedName(SERIALIZED_NAME_VENDOR_CREATED_AT)
  private OffsetDateTime vendorCreatedAt;

  public static final String SERIALIZED_NAME_VENDOR_SEVERITY = "vendorSeverity";
  @SerializedName(SERIALIZED_NAME_VENDOR_SEVERITY)
  private String vendorSeverity;

  public static final String SERIALIZED_NAME_VENDOR_UPDATED_AT = "vendorUpdatedAt";
  @SerializedName(SERIALIZED_NAME_VENDOR_UPDATED_AT)
  private OffsetDateTime vendorUpdatedAt;

  public static final String SERIALIZED_NAME_VULNERABILITY_ID = "vulnerabilityId";
  @SerializedName(SERIALIZED_NAME_VULNERABILITY_ID)
  private String vulnerabilityId;

  public static final String SERIALIZED_NAME_VULNERABLE_PACKAGES = "vulnerablePackages";
  @SerializedName(SERIALIZED_NAME_VULNERABLE_PACKAGES)
  private List vulnerablePackages;

  public EnhancedImageScanFindingPackageVulnerabilityDetails() {
  }

  public EnhancedImageScanFindingPackageVulnerabilityDetails cvss(List cvss) {
    this.cvss = cvss;
    return this;
  }

  /**
   * Get cvss
   * @return cvss
   */
  @javax.annotation.Nullable
  public List getCvss() {
    return cvss;
  }

  public void setCvss(List cvss) {
    this.cvss = cvss;
  }


  public EnhancedImageScanFindingPackageVulnerabilityDetails referenceUrls(List referenceUrls) {
    this.referenceUrls = referenceUrls;
    return this;
  }

  /**
   * Get referenceUrls
   * @return referenceUrls
   */
  @javax.annotation.Nullable
  public List getReferenceUrls() {
    return referenceUrls;
  }

  public void setReferenceUrls(List referenceUrls) {
    this.referenceUrls = referenceUrls;
  }


  public EnhancedImageScanFindingPackageVulnerabilityDetails relatedVulnerabilities(List relatedVulnerabilities) {
    this.relatedVulnerabilities = relatedVulnerabilities;
    return this;
  }

  /**
   * Get relatedVulnerabilities
   * @return relatedVulnerabilities
   */
  @javax.annotation.Nullable
  public List getRelatedVulnerabilities() {
    return relatedVulnerabilities;
  }

  public void setRelatedVulnerabilities(List relatedVulnerabilities) {
    this.relatedVulnerabilities = relatedVulnerabilities;
  }


  public EnhancedImageScanFindingPackageVulnerabilityDetails source(String source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nullable
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }


  public EnhancedImageScanFindingPackageVulnerabilityDetails sourceUrl(String sourceUrl) {
    this.sourceUrl = sourceUrl;
    return this;
  }

  /**
   * Get sourceUrl
   * @return sourceUrl
   */
  @javax.annotation.Nullable
  public String getSourceUrl() {
    return sourceUrl;
  }

  public void setSourceUrl(String sourceUrl) {
    this.sourceUrl = sourceUrl;
  }


  public EnhancedImageScanFindingPackageVulnerabilityDetails vendorCreatedAt(OffsetDateTime vendorCreatedAt) {
    this.vendorCreatedAt = vendorCreatedAt;
    return this;
  }

  /**
   * Get vendorCreatedAt
   * @return vendorCreatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getVendorCreatedAt() {
    return vendorCreatedAt;
  }

  public void setVendorCreatedAt(OffsetDateTime vendorCreatedAt) {
    this.vendorCreatedAt = vendorCreatedAt;
  }


  public EnhancedImageScanFindingPackageVulnerabilityDetails vendorSeverity(String vendorSeverity) {
    this.vendorSeverity = vendorSeverity;
    return this;
  }

  /**
   * Get vendorSeverity
   * @return vendorSeverity
   */
  @javax.annotation.Nullable
  public String getVendorSeverity() {
    return vendorSeverity;
  }

  public void setVendorSeverity(String vendorSeverity) {
    this.vendorSeverity = vendorSeverity;
  }


  public EnhancedImageScanFindingPackageVulnerabilityDetails vendorUpdatedAt(OffsetDateTime vendorUpdatedAt) {
    this.vendorUpdatedAt = vendorUpdatedAt;
    return this;
  }

  /**
   * Get vendorUpdatedAt
   * @return vendorUpdatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getVendorUpdatedAt() {
    return vendorUpdatedAt;
  }

  public void setVendorUpdatedAt(OffsetDateTime vendorUpdatedAt) {
    this.vendorUpdatedAt = vendorUpdatedAt;
  }


  public EnhancedImageScanFindingPackageVulnerabilityDetails vulnerabilityId(String vulnerabilityId) {
    this.vulnerabilityId = vulnerabilityId;
    return this;
  }

  /**
   * Get vulnerabilityId
   * @return vulnerabilityId
   */
  @javax.annotation.Nullable
  public String getVulnerabilityId() {
    return vulnerabilityId;
  }

  public void setVulnerabilityId(String vulnerabilityId) {
    this.vulnerabilityId = vulnerabilityId;
  }


  public EnhancedImageScanFindingPackageVulnerabilityDetails vulnerablePackages(List vulnerablePackages) {
    this.vulnerablePackages = vulnerablePackages;
    return this;
  }

  /**
   * Get vulnerablePackages
   * @return vulnerablePackages
   */
  @javax.annotation.Nullable
  public List getVulnerablePackages() {
    return vulnerablePackages;
  }

  public void setVulnerablePackages(List vulnerablePackages) {
    this.vulnerablePackages = vulnerablePackages;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnhancedImageScanFindingPackageVulnerabilityDetails enhancedImageScanFindingPackageVulnerabilityDetails = (EnhancedImageScanFindingPackageVulnerabilityDetails) o;
    return Objects.equals(this.cvss, enhancedImageScanFindingPackageVulnerabilityDetails.cvss) &&
        Objects.equals(this.referenceUrls, enhancedImageScanFindingPackageVulnerabilityDetails.referenceUrls) &&
        Objects.equals(this.relatedVulnerabilities, enhancedImageScanFindingPackageVulnerabilityDetails.relatedVulnerabilities) &&
        Objects.equals(this.source, enhancedImageScanFindingPackageVulnerabilityDetails.source) &&
        Objects.equals(this.sourceUrl, enhancedImageScanFindingPackageVulnerabilityDetails.sourceUrl) &&
        Objects.equals(this.vendorCreatedAt, enhancedImageScanFindingPackageVulnerabilityDetails.vendorCreatedAt) &&
        Objects.equals(this.vendorSeverity, enhancedImageScanFindingPackageVulnerabilityDetails.vendorSeverity) &&
        Objects.equals(this.vendorUpdatedAt, enhancedImageScanFindingPackageVulnerabilityDetails.vendorUpdatedAt) &&
        Objects.equals(this.vulnerabilityId, enhancedImageScanFindingPackageVulnerabilityDetails.vulnerabilityId) &&
        Objects.equals(this.vulnerablePackages, enhancedImageScanFindingPackageVulnerabilityDetails.vulnerablePackages);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cvss, referenceUrls, relatedVulnerabilities, source, sourceUrl, vendorCreatedAt, vendorSeverity, vendorUpdatedAt, vulnerabilityId, vulnerablePackages);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnhancedImageScanFindingPackageVulnerabilityDetails {\n");
    sb.append("    cvss: ").append(toIndentedString(cvss)).append("\n");
    sb.append("    referenceUrls: ").append(toIndentedString(referenceUrls)).append("\n");
    sb.append("    relatedVulnerabilities: ").append(toIndentedString(relatedVulnerabilities)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    sourceUrl: ").append(toIndentedString(sourceUrl)).append("\n");
    sb.append("    vendorCreatedAt: ").append(toIndentedString(vendorCreatedAt)).append("\n");
    sb.append("    vendorSeverity: ").append(toIndentedString(vendorSeverity)).append("\n");
    sb.append("    vendorUpdatedAt: ").append(toIndentedString(vendorUpdatedAt)).append("\n");
    sb.append("    vulnerabilityId: ").append(toIndentedString(vulnerabilityId)).append("\n");
    sb.append("    vulnerablePackages: ").append(toIndentedString(vulnerablePackages)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cvss");
    openapiFields.add("referenceUrls");
    openapiFields.add("relatedVulnerabilities");
    openapiFields.add("source");
    openapiFields.add("sourceUrl");
    openapiFields.add("vendorCreatedAt");
    openapiFields.add("vendorSeverity");
    openapiFields.add("vendorUpdatedAt");
    openapiFields.add("vulnerabilityId");
    openapiFields.add("vulnerablePackages");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EnhancedImageScanFindingPackageVulnerabilityDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EnhancedImageScanFindingPackageVulnerabilityDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EnhancedImageScanFindingPackageVulnerabilityDetails is not found in the empty JSON string", EnhancedImageScanFindingPackageVulnerabilityDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EnhancedImageScanFindingPackageVulnerabilityDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EnhancedImageScanFindingPackageVulnerabilityDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `cvss`
      if (jsonObj.get("cvss") != null && !jsonObj.get("cvss").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("cvss"));
      }
      // validate the optional field `referenceUrls`
      if (jsonObj.get("referenceUrls") != null && !jsonObj.get("referenceUrls").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("referenceUrls"));
      }
      // validate the optional field `relatedVulnerabilities`
      if (jsonObj.get("relatedVulnerabilities") != null && !jsonObj.get("relatedVulnerabilities").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("relatedVulnerabilities"));
      }
      // validate the optional field `source`
      if (jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("source"));
      }
      // validate the optional field `sourceUrl`
      if (jsonObj.get("sourceUrl") != null && !jsonObj.get("sourceUrl").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("sourceUrl"));
      }
      // validate the optional field `vendorCreatedAt`
      if (jsonObj.get("vendorCreatedAt") != null && !jsonObj.get("vendorCreatedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("vendorCreatedAt"));
      }
      // validate the optional field `vendorSeverity`
      if (jsonObj.get("vendorSeverity") != null && !jsonObj.get("vendorSeverity").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("vendorSeverity"));
      }
      // validate the optional field `vendorUpdatedAt`
      if (jsonObj.get("vendorUpdatedAt") != null && !jsonObj.get("vendorUpdatedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("vendorUpdatedAt"));
      }
      // validate the optional field `vulnerabilityId`
      if (jsonObj.get("vulnerabilityId") != null && !jsonObj.get("vulnerabilityId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("vulnerabilityId"));
      }
      // validate the optional field `vulnerablePackages`
      if (jsonObj.get("vulnerablePackages") != null && !jsonObj.get("vulnerablePackages").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("vulnerablePackages"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EnhancedImageScanFindingPackageVulnerabilityDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EnhancedImageScanFindingPackageVulnerabilityDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EnhancedImageScanFindingPackageVulnerabilityDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EnhancedImageScanFindingPackageVulnerabilityDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<EnhancedImageScanFindingPackageVulnerabilityDetails>() {
           @Override
           public void write(JsonWriter out, EnhancedImageScanFindingPackageVulnerabilityDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EnhancedImageScanFindingPackageVulnerabilityDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EnhancedImageScanFindingPackageVulnerabilityDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EnhancedImageScanFindingPackageVulnerabilityDetails
   * @throws IOException if the JSON string is invalid with respect to EnhancedImageScanFindingPackageVulnerabilityDetails
   */
  public static EnhancedImageScanFindingPackageVulnerabilityDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EnhancedImageScanFindingPackageVulnerabilityDetails.class);
  }

  /**
   * Convert an instance of EnhancedImageScanFindingPackageVulnerabilityDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

