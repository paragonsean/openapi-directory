/*
 * Amazon EC2 Container Registry
 * <fullname>Amazon Elastic Container Registry</fullname> <p>Amazon Elastic Container Registry (Amazon ECR) is a managed container image registry service. Customers can use the familiar Docker CLI, or their preferred client, to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports private repositories with resource-based permissions using IAM so that specific users or Amazon EC2 instances can access repositories and images.</p> <p>Amazon ECR has service endpoints in each supported Region. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/ecr.html\">Amazon ECR endpoints</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2015-09-21
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BatchCheckLayerAvailabilityRequest;
import org.openapitools.client.model.BatchCheckLayerAvailabilityResponse;
import org.openapitools.client.model.BatchDeleteImageRequest;
import org.openapitools.client.model.BatchDeleteImageResponse;
import org.openapitools.client.model.BatchGetImageRequest;
import org.openapitools.client.model.BatchGetImageResponse;
import org.openapitools.client.model.BatchGetRepositoryScanningConfigurationRequest;
import org.openapitools.client.model.BatchGetRepositoryScanningConfigurationResponse;
import org.openapitools.client.model.CompleteLayerUploadRequest;
import org.openapitools.client.model.CompleteLayerUploadResponse;
import org.openapitools.client.model.CreatePullThroughCacheRuleRequest;
import org.openapitools.client.model.CreatePullThroughCacheRuleResponse;
import org.openapitools.client.model.CreateRepositoryRequest;
import org.openapitools.client.model.CreateRepositoryResponse;
import org.openapitools.client.model.DeleteLifecyclePolicyRequest;
import org.openapitools.client.model.DeleteLifecyclePolicyResponse;
import org.openapitools.client.model.DeletePullThroughCacheRuleRequest;
import org.openapitools.client.model.DeletePullThroughCacheRuleResponse;
import org.openapitools.client.model.DeleteRegistryPolicyResponse;
import org.openapitools.client.model.DeleteRepositoryPolicyRequest;
import org.openapitools.client.model.DeleteRepositoryPolicyResponse;
import org.openapitools.client.model.DeleteRepositoryRequest;
import org.openapitools.client.model.DeleteRepositoryResponse;
import org.openapitools.client.model.DescribeImageReplicationStatusRequest;
import org.openapitools.client.model.DescribeImageReplicationStatusResponse;
import org.openapitools.client.model.DescribeImageScanFindingsRequest;
import org.openapitools.client.model.DescribeImageScanFindingsResponse;
import org.openapitools.client.model.DescribeImagesRequest;
import org.openapitools.client.model.DescribeImagesResponse;
import org.openapitools.client.model.DescribePullThroughCacheRulesRequest;
import org.openapitools.client.model.DescribePullThroughCacheRulesResponse;
import org.openapitools.client.model.DescribeRegistryResponse;
import org.openapitools.client.model.DescribeRepositoriesRequest;
import org.openapitools.client.model.DescribeRepositoriesResponse;
import org.openapitools.client.model.GetAuthorizationTokenRequest;
import org.openapitools.client.model.GetAuthorizationTokenResponse;
import org.openapitools.client.model.GetDownloadUrlForLayerRequest;
import org.openapitools.client.model.GetDownloadUrlForLayerResponse;
import org.openapitools.client.model.GetLifecyclePolicyPreviewRequest;
import org.openapitools.client.model.GetLifecyclePolicyPreviewResponse;
import org.openapitools.client.model.GetLifecyclePolicyRequest;
import org.openapitools.client.model.GetLifecyclePolicyResponse;
import org.openapitools.client.model.GetRegistryPolicyResponse;
import org.openapitools.client.model.GetRegistryScanningConfigurationResponse;
import org.openapitools.client.model.GetRepositoryPolicyRequest;
import org.openapitools.client.model.GetRepositoryPolicyResponse;
import org.openapitools.client.model.InitiateLayerUploadRequest;
import org.openapitools.client.model.InitiateLayerUploadResponse;
import org.openapitools.client.model.ListImagesRequest;
import org.openapitools.client.model.ListImagesResponse;
import org.openapitools.client.model.ListTagsForResourceRequest;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.PutImageRequest;
import org.openapitools.client.model.PutImageResponse;
import org.openapitools.client.model.PutImageScanningConfigurationRequest;
import org.openapitools.client.model.PutImageScanningConfigurationResponse;
import org.openapitools.client.model.PutImageTagMutabilityRequest;
import org.openapitools.client.model.PutImageTagMutabilityResponse;
import org.openapitools.client.model.PutLifecyclePolicyRequest;
import org.openapitools.client.model.PutLifecyclePolicyResponse;
import org.openapitools.client.model.PutRegistryPolicyRequest;
import org.openapitools.client.model.PutRegistryPolicyResponse;
import org.openapitools.client.model.PutRegistryScanningConfigurationRequest;
import org.openapitools.client.model.PutRegistryScanningConfigurationResponse;
import org.openapitools.client.model.PutReplicationConfigurationRequest;
import org.openapitools.client.model.PutReplicationConfigurationResponse;
import org.openapitools.client.model.SetRepositoryPolicyRequest;
import org.openapitools.client.model.SetRepositoryPolicyResponse;
import org.openapitools.client.model.StartImageScanRequest;
import org.openapitools.client.model.StartImageScanResponse;
import org.openapitools.client.model.StartLifecyclePolicyPreviewRequest;
import org.openapitools.client.model.StartLifecyclePolicyPreviewResponse;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UntagResourceRequest;
import org.openapitools.client.model.UploadLayerPartRequest;
import org.openapitools.client.model.UploadLayerPartResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * &lt;p&gt;Checks the availability of one or more image layers in a repository.&lt;/p&gt; &lt;p&gt;When an image is pushed to a repository, each image layer is checked to verify if it has been uploaded before. If it has been uploaded, then the image layer is skipped.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the &lt;code&gt;docker&lt;/code&gt; CLI to pull, tag, and push images.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchCheckLayerAvailabilityTest() throws ApiException {
        String xAmzTarget = null;
        BatchCheckLayerAvailabilityRequest batchCheckLayerAvailabilityRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchCheckLayerAvailabilityResponse response = api.batchCheckLayerAvailability(xAmzTarget, batchCheckLayerAvailabilityRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a list of specified images within a repository. Images are specified with either an &lt;code&gt;imageTag&lt;/code&gt; or &lt;code&gt;imageDigest&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;You can remove a tag from an image by specifying the image&#39;s tag in your request. When you remove the last tag from an image, the image is deleted from your repository.&lt;/p&gt; &lt;p&gt;You can completely delete an image (and all of its tags) by specifying the image&#39;s digest in your request.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchDeleteImageTest() throws ApiException {
        String xAmzTarget = null;
        BatchDeleteImageRequest batchDeleteImageRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchDeleteImageResponse response = api.batchDeleteImage(xAmzTarget, batchDeleteImageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets detailed information for an image. Images are specified with either an &lt;code&gt;imageTag&lt;/code&gt; or &lt;code&gt;imageDigest&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;When an image is pulled, the BatchGetImage API is called once to retrieve the image manifest.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchGetImageTest() throws ApiException {
        String xAmzTarget = null;
        BatchGetImageRequest batchGetImageRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchGetImageResponse response = api.batchGetImage(xAmzTarget, batchGetImageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets the scanning configuration for one or more repositories.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchGetRepositoryScanningConfigurationTest() throws ApiException {
        String xAmzTarget = null;
        BatchGetRepositoryScanningConfigurationRequest batchGetRepositoryScanningConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchGetRepositoryScanningConfigurationResponse response = api.batchGetRepositoryScanningConfiguration(xAmzTarget, batchGetRepositoryScanningConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Informs Amazon ECR that the image layer upload has completed for a specified registry, repository name, and upload ID. You can optionally provide a &lt;code&gt;sha256&lt;/code&gt; digest of the image layer for data validation purposes.&lt;/p&gt; &lt;p&gt;When an image is pushed, the CompleteLayerUpload API is called once per each new image layer to verify that the upload has completed.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the &lt;code&gt;docker&lt;/code&gt; CLI to pull, tag, and push images.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void completeLayerUploadTest() throws ApiException {
        String xAmzTarget = null;
        CompleteLayerUploadRequest completeLayerUploadRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CompleteLayerUploadResponse response = api.completeLayerUpload(xAmzTarget, completeLayerUploadRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a pull through cache rule. A pull through cache rule provides a way to cache images from an external public registry in your Amazon ECR private registry.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPullThroughCacheRuleTest() throws ApiException {
        String xAmzTarget = null;
        CreatePullThroughCacheRuleRequest createPullThroughCacheRuleRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreatePullThroughCacheRuleResponse response = api.createPullThroughCacheRule(xAmzTarget, createPullThroughCacheRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a repository. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECR/latest/userguide/Repositories.html\&quot;&gt;Amazon ECR repositories&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Registry User Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRepositoryTest() throws ApiException {
        String xAmzTarget = null;
        CreateRepositoryRequest createRepositoryRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateRepositoryResponse response = api.createRepository(xAmzTarget, createRepositoryRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the lifecycle policy associated with the specified repository.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteLifecyclePolicyTest() throws ApiException {
        String xAmzTarget = null;
        DeleteLifecyclePolicyRequest deleteLifecyclePolicyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteLifecyclePolicyResponse response = api.deleteLifecyclePolicy(xAmzTarget, deleteLifecyclePolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a pull through cache rule.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePullThroughCacheRuleTest() throws ApiException {
        String xAmzTarget = null;
        DeletePullThroughCacheRuleRequest deletePullThroughCacheRuleRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeletePullThroughCacheRuleResponse response = api.deletePullThroughCacheRule(xAmzTarget, deletePullThroughCacheRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the registry permissions policy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRegistryPolicyTest() throws ApiException {
        String xAmzTarget = null;
        Object body = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteRegistryPolicyResponse response = api.deleteRegistryPolicy(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a repository. If the repository contains images, you must either delete all images in the repository or use the &lt;code&gt;force&lt;/code&gt; option to delete the repository.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRepositoryTest() throws ApiException {
        String xAmzTarget = null;
        DeleteRepositoryRequest deleteRepositoryRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteRepositoryResponse response = api.deleteRepository(xAmzTarget, deleteRepositoryRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the repository policy associated with the specified repository.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRepositoryPolicyTest() throws ApiException {
        String xAmzTarget = null;
        DeleteRepositoryPolicyRequest deleteRepositoryPolicyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteRepositoryPolicyResponse response = api.deleteRepositoryPolicy(xAmzTarget, deleteRepositoryPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns the replication status for a specified image.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeImageReplicationStatusTest() throws ApiException {
        String xAmzTarget = null;
        DescribeImageReplicationStatusRequest describeImageReplicationStatusRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeImageReplicationStatusResponse response = api.describeImageReplicationStatus(xAmzTarget, describeImageReplicationStatusRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns the scan findings for the specified image.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeImageScanFindingsTest() throws ApiException {
        String xAmzTarget = null;
        DescribeImageScanFindingsRequest describeImageScanFindingsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        DescribeImageScanFindingsResponse response = api.describeImageScanFindings(xAmzTarget, describeImageScanFindingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns metadata about the images in a repository.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Beginning with Docker version 1.9, the Docker client compresses image layers before pushing them to a V2 Docker registry. The output of the &lt;code&gt;docker images&lt;/code&gt; command shows the uncompressed image size, so it may return a larger image size than the image sizes returned by &lt;a&gt;DescribeImages&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeImagesTest() throws ApiException {
        String xAmzTarget = null;
        DescribeImagesRequest describeImagesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        DescribeImagesResponse response = api.describeImages(xAmzTarget, describeImagesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns the pull through cache rules for a registry.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describePullThroughCacheRulesTest() throws ApiException {
        String xAmzTarget = null;
        DescribePullThroughCacheRulesRequest describePullThroughCacheRulesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        DescribePullThroughCacheRulesResponse response = api.describePullThroughCacheRules(xAmzTarget, describePullThroughCacheRulesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Describes the settings for a registry. The replication configuration for a repository can be created or updated with the &lt;a&gt;PutReplicationConfiguration&lt;/a&gt; API action.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeRegistryTest() throws ApiException {
        String xAmzTarget = null;
        Object body = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeRegistryResponse response = api.describeRegistry(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes image repositories in a registry.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeRepositoriesTest() throws ApiException {
        String xAmzTarget = null;
        DescribeRepositoriesRequest describeRepositoriesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        DescribeRepositoriesResponse response = api.describeRepositories(xAmzTarget, describeRepositoriesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Retrieves an authorization token. An authorization token represents your IAM authentication credentials and can be used to access any Amazon ECR registry that your IAM principal has access to. The authorization token is valid for 12 hours.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;authorizationToken&lt;/code&gt; returned is a base64 encoded string that can be decoded and used in a &lt;code&gt;docker login&lt;/code&gt; command to authenticate to a registry. The CLI offers an &lt;code&gt;get-login-password&lt;/code&gt; command that simplifies the login process. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECR/latest/userguide/Registries.html#registry_auth\&quot;&gt;Registry authentication&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Registry User Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAuthorizationTokenTest() throws ApiException {
        String xAmzTarget = null;
        GetAuthorizationTokenRequest getAuthorizationTokenRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetAuthorizationTokenResponse response = api.getAuthorizationToken(xAmzTarget, getAuthorizationTokenRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Retrieves the pre-signed Amazon S3 download URL corresponding to an image layer. You can only get URLs for image layers that are referenced in an image.&lt;/p&gt; &lt;p&gt;When an image is pulled, the GetDownloadUrlForLayer API is called once per image layer that is not already cached.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the &lt;code&gt;docker&lt;/code&gt; CLI to pull, tag, and push images.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDownloadUrlForLayerTest() throws ApiException {
        String xAmzTarget = null;
        GetDownloadUrlForLayerRequest getDownloadUrlForLayerRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDownloadUrlForLayerResponse response = api.getDownloadUrlForLayer(xAmzTarget, getDownloadUrlForLayerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the lifecycle policy for the specified repository.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLifecyclePolicyTest() throws ApiException {
        String xAmzTarget = null;
        GetLifecyclePolicyRequest getLifecyclePolicyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetLifecyclePolicyResponse response = api.getLifecyclePolicy(xAmzTarget, getLifecyclePolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the results of the lifecycle policy preview request for the specified repository.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLifecyclePolicyPreviewTest() throws ApiException {
        String xAmzTarget = null;
        GetLifecyclePolicyPreviewRequest getLifecyclePolicyPreviewRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetLifecyclePolicyPreviewResponse response = api.getLifecyclePolicyPreview(xAmzTarget, getLifecyclePolicyPreviewRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves the permissions policy for a registry.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRegistryPolicyTest() throws ApiException {
        String xAmzTarget = null;
        Object body = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetRegistryPolicyResponse response = api.getRegistryPolicy(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the scanning configuration for a registry.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRegistryScanningConfigurationTest() throws ApiException {
        String xAmzTarget = null;
        Object body = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetRegistryScanningConfigurationResponse response = api.getRegistryScanningConfiguration(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the repository policy for the specified repository.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRepositoryPolicyTest() throws ApiException {
        String xAmzTarget = null;
        GetRepositoryPolicyRequest getRepositoryPolicyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetRepositoryPolicyResponse response = api.getRepositoryPolicy(xAmzTarget, getRepositoryPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Notifies Amazon ECR that you intend to upload an image layer.&lt;/p&gt; &lt;p&gt;When an image is pushed, the InitiateLayerUpload API is called once per image layer that has not already been uploaded. Whether or not an image layer has been uploaded is determined by the BatchCheckLayerAvailability API action.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the &lt;code&gt;docker&lt;/code&gt; CLI to pull, tag, and push images.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void initiateLayerUploadTest() throws ApiException {
        String xAmzTarget = null;
        InitiateLayerUploadRequest initiateLayerUploadRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        InitiateLayerUploadResponse response = api.initiateLayerUpload(xAmzTarget, initiateLayerUploadRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists all the image IDs for the specified repository.&lt;/p&gt; &lt;p&gt;You can filter images based on whether or not they are tagged by using the &lt;code&gt;tagStatus&lt;/code&gt; filter and specifying either &lt;code&gt;TAGGED&lt;/code&gt;, &lt;code&gt;UNTAGGED&lt;/code&gt; or &lt;code&gt;ANY&lt;/code&gt;. For example, you can filter your results to return only &lt;code&gt;UNTAGGED&lt;/code&gt; images and then pipe that result to a &lt;a&gt;BatchDeleteImage&lt;/a&gt; operation to delete them. Or, you can filter your results to return only &lt;code&gt;TAGGED&lt;/code&gt; images to list all of the tags in your repository.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listImagesTest() throws ApiException {
        String xAmzTarget = null;
        ListImagesRequest listImagesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListImagesResponse response = api.listImages(xAmzTarget, listImagesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * List the tags for an Amazon ECR resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String xAmzTarget = null;
        ListTagsForResourceRequest listTagsForResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceResponse response = api.listTagsForResource(xAmzTarget, listTagsForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates or updates the image manifest and tags associated with an image.&lt;/p&gt; &lt;p&gt;When an image is pushed and all new image layers have been uploaded, the PutImage API is called once to create or update the image manifest and the tags associated with the image.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the &lt;code&gt;docker&lt;/code&gt; CLI to pull, tag, and push images.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putImageTest() throws ApiException {
        String xAmzTarget = null;
        PutImageRequest putImageRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PutImageResponse response = api.putImage(xAmzTarget, putImageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;important&gt; &lt;p&gt;The &lt;code&gt;PutImageScanningConfiguration&lt;/code&gt; API is being deprecated, in favor of specifying the image scanning configuration at the registry level. For more information, see &lt;a&gt;PutRegistryScanningConfiguration&lt;/a&gt;.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;Updates the image scanning configuration for the specified repository.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putImageScanningConfigurationTest() throws ApiException {
        String xAmzTarget = null;
        PutImageScanningConfigurationRequest putImageScanningConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PutImageScanningConfigurationResponse response = api.putImageScanningConfiguration(xAmzTarget, putImageScanningConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the image tag mutability settings for the specified repository. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECR/latest/userguide/image-tag-mutability.html\&quot;&gt;Image tag mutability&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Registry User Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putImageTagMutabilityTest() throws ApiException {
        String xAmzTarget = null;
        PutImageTagMutabilityRequest putImageTagMutabilityRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PutImageTagMutabilityResponse response = api.putImageTagMutability(xAmzTarget, putImageTagMutabilityRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates or updates the lifecycle policy for the specified repository. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECR/latest/userguide/LifecyclePolicies.html\&quot;&gt;Lifecycle policy template&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putLifecyclePolicyTest() throws ApiException {
        String xAmzTarget = null;
        PutLifecyclePolicyRequest putLifecyclePolicyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PutLifecyclePolicyResponse response = api.putLifecyclePolicy(xAmzTarget, putLifecyclePolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates or updates the permissions policy for your registry.&lt;/p&gt; &lt;p&gt;A registry policy is used to specify permissions for another Amazon Web Services account and is used when configuring cross-account replication. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECR/latest/userguide/registry-permissions.html\&quot;&gt;Registry permissions&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Registry User Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putRegistryPolicyTest() throws ApiException {
        String xAmzTarget = null;
        PutRegistryPolicyRequest putRegistryPolicyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PutRegistryPolicyResponse response = api.putRegistryPolicy(xAmzTarget, putRegistryPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates or updates the scanning configuration for your private registry.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putRegistryScanningConfigurationTest() throws ApiException {
        String xAmzTarget = null;
        PutRegistryScanningConfigurationRequest putRegistryScanningConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PutRegistryScanningConfigurationResponse response = api.putRegistryScanningConfiguration(xAmzTarget, putRegistryScanningConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates or updates the replication configuration for a registry. The existing replication configuration for a repository can be retrieved with the &lt;a&gt;DescribeRegistry&lt;/a&gt; API action. The first time the PutReplicationConfiguration API is called, a service-linked IAM role is created in your account for the replication process. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECR/latest/userguide/using-service-linked-roles.html\&quot;&gt;Using service-linked roles for Amazon ECR&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Registry User Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;When configuring cross-account replication, the destination account must grant the source account permission to replicate. This permission is controlled using a registry permissions policy. For more information, see &lt;a&gt;PutRegistryPolicy&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putReplicationConfigurationTest() throws ApiException {
        String xAmzTarget = null;
        PutReplicationConfigurationRequest putReplicationConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PutReplicationConfigurationResponse response = api.putReplicationConfiguration(xAmzTarget, putReplicationConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Applies a repository policy to the specified repository to control access permissions. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECR/latest/userguide/repository-policies.html\&quot;&gt;Amazon ECR Repository policies&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Registry User Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setRepositoryPolicyTest() throws ApiException {
        String xAmzTarget = null;
        SetRepositoryPolicyRequest setRepositoryPolicyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        SetRepositoryPolicyResponse response = api.setRepositoryPolicy(xAmzTarget, setRepositoryPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Starts an image vulnerability scan. An image scan can only be started once per 24 hours on an individual image. This limit includes if an image was scanned on initial push. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECR/latest/userguide/image-scanning.html\&quot;&gt;Image scanning&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Registry User Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startImageScanTest() throws ApiException {
        String xAmzTarget = null;
        StartImageScanRequest startImageScanRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartImageScanResponse response = api.startImageScan(xAmzTarget, startImageScanRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Starts a preview of a lifecycle policy for the specified repository. This allows you to see the results before associating the lifecycle policy with the repository.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startLifecyclePolicyPreviewTest() throws ApiException {
        String xAmzTarget = null;
        StartLifecyclePolicyPreviewRequest startLifecyclePolicyPreviewRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartLifecyclePolicyPreviewResponse response = api.startLifecyclePolicyPreview(xAmzTarget, startLifecyclePolicyPreviewRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Adds specified tags to a resource with the specified ARN. Existing tags on a resource are not changed if they are not specified in the request parameters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String xAmzTarget = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.tagResource(xAmzTarget, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes specified tags from a resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String xAmzTarget = null;
        UntagResourceRequest untagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.untagResource(xAmzTarget, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Uploads an image layer part to Amazon ECR.&lt;/p&gt; &lt;p&gt;When an image is pushed, each new image layer is uploaded in parts. The maximum size of each image layer part can be 20971520 bytes (or about 20MB). The UploadLayerPart API is called once per each new image layer part.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the &lt;code&gt;docker&lt;/code&gt; CLI to pull, tag, and push images.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadLayerPartTest() throws ApiException {
        String xAmzTarget = null;
        UploadLayerPartRequest uploadLayerPartRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UploadLayerPartResponse response = api.uploadLayerPart(xAmzTarget, uploadLayerPartRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
