/**
 * Amazon EC2 Container Registry
 * <fullname>Amazon Elastic Container Registry</fullname> <p>Amazon Elastic Container Registry (Amazon ECR) is a managed container image registry service. Customers can use the familiar Docker CLI, or their preferred client, to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports private repositories with resource-based permissions using IAM so that specific users or Amazon EC2 instances can access repositories and images.</p> <p>Amazon ECR has service endpoints in each supported Region. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/ecr.html\">Amazon ECR endpoints</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2015-09-21
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILayerFailure.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILayerFailure::OAILayerFailure(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILayerFailure::OAILayerFailure() {
    this->initializeModel();
}

OAILayerFailure::~OAILayerFailure() {}

void OAILayerFailure::initializeModel() {

    m_layer_digest_isSet = false;
    m_layer_digest_isValid = false;

    m_failure_code_isSet = false;
    m_failure_code_isValid = false;

    m_failure_reason_isSet = false;
    m_failure_reason_isValid = false;
}

void OAILayerFailure::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILayerFailure::fromJsonObject(QJsonObject json) {

    m_layer_digest_isValid = ::OpenAPI::fromJsonValue(m_layer_digest, json[QString("layerDigest")]);
    m_layer_digest_isSet = !json[QString("layerDigest")].isNull() && m_layer_digest_isValid;

    m_failure_code_isValid = ::OpenAPI::fromJsonValue(m_failure_code, json[QString("failureCode")]);
    m_failure_code_isSet = !json[QString("failureCode")].isNull() && m_failure_code_isValid;

    m_failure_reason_isValid = ::OpenAPI::fromJsonValue(m_failure_reason, json[QString("failureReason")]);
    m_failure_reason_isSet = !json[QString("failureReason")].isNull() && m_failure_reason_isValid;
}

QString OAILayerFailure::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILayerFailure::asJsonObject() const {
    QJsonObject obj;
    if (m_layer_digest_isSet) {
        obj.insert(QString("layerDigest"), ::OpenAPI::toJsonValue(m_layer_digest));
    }
    if (m_failure_code.isSet()) {
        obj.insert(QString("failureCode"), ::OpenAPI::toJsonValue(m_failure_code));
    }
    if (m_failure_reason_isSet) {
        obj.insert(QString("failureReason"), ::OpenAPI::toJsonValue(m_failure_reason));
    }
    return obj;
}

QString OAILayerFailure::getLayerDigest() const {
    return m_layer_digest;
}
void OAILayerFailure::setLayerDigest(const QString &layer_digest) {
    m_layer_digest = layer_digest;
    m_layer_digest_isSet = true;
}

bool OAILayerFailure::is_layer_digest_Set() const{
    return m_layer_digest_isSet;
}

bool OAILayerFailure::is_layer_digest_Valid() const{
    return m_layer_digest_isValid;
}

OAILayerFailureCode OAILayerFailure::getFailureCode() const {
    return m_failure_code;
}
void OAILayerFailure::setFailureCode(const OAILayerFailureCode &failure_code) {
    m_failure_code = failure_code;
    m_failure_code_isSet = true;
}

bool OAILayerFailure::is_failure_code_Set() const{
    return m_failure_code_isSet;
}

bool OAILayerFailure::is_failure_code_Valid() const{
    return m_failure_code_isValid;
}

QString OAILayerFailure::getFailureReason() const {
    return m_failure_reason;
}
void OAILayerFailure::setFailureReason(const QString &failure_reason) {
    m_failure_reason = failure_reason;
    m_failure_reason_isSet = true;
}

bool OAILayerFailure::is_failure_reason_Set() const{
    return m_failure_reason_isSet;
}

bool OAILayerFailure::is_failure_reason_Valid() const{
    return m_failure_reason_isValid;
}

bool OAILayerFailure::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_layer_digest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_reason_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILayerFailure::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
