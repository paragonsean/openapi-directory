/**
 * Amazon EC2 Container Registry
 * <fullname>Amazon Elastic Container Registry</fullname> <p>Amazon Elastic Container Registry (Amazon ECR) is a managed container image registry service. Customers can use the familiar Docker CLI, or their preferred client, to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports private repositories with resource-based permissions using IAM so that specific users or Amazon EC2 instances can access repositories and images.</p> <p>Amazon ECR has service endpoints in each supported Region. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/ecr.html\">Amazon ECR endpoints</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2015-09-21
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUploadLayerPartResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUploadLayerPartResponse::OAIUploadLayerPartResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUploadLayerPartResponse::OAIUploadLayerPartResponse() {
    this->initializeModel();
}

OAIUploadLayerPartResponse::~OAIUploadLayerPartResponse() {}

void OAIUploadLayerPartResponse::initializeModel() {

    m_registry_id_isSet = false;
    m_registry_id_isValid = false;

    m_repository_name_isSet = false;
    m_repository_name_isValid = false;

    m_upload_id_isSet = false;
    m_upload_id_isValid = false;

    m_last_byte_received_isSet = false;
    m_last_byte_received_isValid = false;
}

void OAIUploadLayerPartResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUploadLayerPartResponse::fromJsonObject(QJsonObject json) {

    m_registry_id_isValid = ::OpenAPI::fromJsonValue(m_registry_id, json[QString("registryId")]);
    m_registry_id_isSet = !json[QString("registryId")].isNull() && m_registry_id_isValid;

    m_repository_name_isValid = ::OpenAPI::fromJsonValue(m_repository_name, json[QString("repositoryName")]);
    m_repository_name_isSet = !json[QString("repositoryName")].isNull() && m_repository_name_isValid;

    m_upload_id_isValid = ::OpenAPI::fromJsonValue(m_upload_id, json[QString("uploadId")]);
    m_upload_id_isSet = !json[QString("uploadId")].isNull() && m_upload_id_isValid;

    m_last_byte_received_isValid = ::OpenAPI::fromJsonValue(m_last_byte_received, json[QString("lastByteReceived")]);
    m_last_byte_received_isSet = !json[QString("lastByteReceived")].isNull() && m_last_byte_received_isValid;
}

QString OAIUploadLayerPartResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUploadLayerPartResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_registry_id_isSet) {
        obj.insert(QString("registryId"), ::OpenAPI::toJsonValue(m_registry_id));
    }
    if (m_repository_name_isSet) {
        obj.insert(QString("repositoryName"), ::OpenAPI::toJsonValue(m_repository_name));
    }
    if (m_upload_id_isSet) {
        obj.insert(QString("uploadId"), ::OpenAPI::toJsonValue(m_upload_id));
    }
    if (m_last_byte_received_isSet) {
        obj.insert(QString("lastByteReceived"), ::OpenAPI::toJsonValue(m_last_byte_received));
    }
    return obj;
}

QString OAIUploadLayerPartResponse::getRegistryId() const {
    return m_registry_id;
}
void OAIUploadLayerPartResponse::setRegistryId(const QString &registry_id) {
    m_registry_id = registry_id;
    m_registry_id_isSet = true;
}

bool OAIUploadLayerPartResponse::is_registry_id_Set() const{
    return m_registry_id_isSet;
}

bool OAIUploadLayerPartResponse::is_registry_id_Valid() const{
    return m_registry_id_isValid;
}

QString OAIUploadLayerPartResponse::getRepositoryName() const {
    return m_repository_name;
}
void OAIUploadLayerPartResponse::setRepositoryName(const QString &repository_name) {
    m_repository_name = repository_name;
    m_repository_name_isSet = true;
}

bool OAIUploadLayerPartResponse::is_repository_name_Set() const{
    return m_repository_name_isSet;
}

bool OAIUploadLayerPartResponse::is_repository_name_Valid() const{
    return m_repository_name_isValid;
}

QString OAIUploadLayerPartResponse::getUploadId() const {
    return m_upload_id;
}
void OAIUploadLayerPartResponse::setUploadId(const QString &upload_id) {
    m_upload_id = upload_id;
    m_upload_id_isSet = true;
}

bool OAIUploadLayerPartResponse::is_upload_id_Set() const{
    return m_upload_id_isSet;
}

bool OAIUploadLayerPartResponse::is_upload_id_Valid() const{
    return m_upload_id_isValid;
}

qint32 OAIUploadLayerPartResponse::getLastByteReceived() const {
    return m_last_byte_received;
}
void OAIUploadLayerPartResponse::setLastByteReceived(const qint32 &last_byte_received) {
    m_last_byte_received = last_byte_received;
    m_last_byte_received_isSet = true;
}

bool OAIUploadLayerPartResponse::is_last_byte_received_Set() const{
    return m_last_byte_received_isSet;
}

bool OAIUploadLayerPartResponse::is_last_byte_received_Valid() const{
    return m_last_byte_received_isValid;
}

bool OAIUploadLayerPartResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_registry_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upload_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_byte_received_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUploadLayerPartResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
