/**
 * Amazon EC2 Container Registry
 * <fullname>Amazon Elastic Container Registry</fullname> <p>Amazon Elastic Container Registry (Amazon ECR) is a managed container image registry service. Customers can use the familiar Docker CLI, or their preferred client, to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports private repositories with resource-based permissions using IAM so that specific users or Amazon EC2 instances can access repositories and images.</p> <p>Amazon ECR has service endpoints in each supported Region. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/ecr.html\">Amazon ECR endpoints</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2015-09-21
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIImageDetail.h
 *
 * An object that describes an image returned by a &lt;a&gt;DescribeImages&lt;/a&gt; operation.
 */

#ifndef OAIImageDetail_H
#define OAIImageDetail_H

#include <QJsonObject>

#include "OAIDescribeImageScanFindingsResponse_imageScanStatus.h"
#include "OAIImageDetail_imageScanFindingsSummary.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDescribeImageScanFindingsResponse_imageScanStatus;
class OAIImageDetail_imageScanFindingsSummary;

class OAIImageDetail : public OAIObject {
public:
    OAIImageDetail();
    OAIImageDetail(QString json);
    ~OAIImageDetail() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getRegistryId() const;
    void setRegistryId(const QString &registry_id);
    bool is_registry_id_Set() const;
    bool is_registry_id_Valid() const;

    QString getRepositoryName() const;
    void setRepositoryName(const QString &repository_name);
    bool is_repository_name_Set() const;
    bool is_repository_name_Valid() const;

    QString getImageDigest() const;
    void setImageDigest(const QString &image_digest);
    bool is_image_digest_Set() const;
    bool is_image_digest_Valid() const;

    QList getImageTags() const;
    void setImageTags(const QList &image_tags);
    bool is_image_tags_Set() const;
    bool is_image_tags_Valid() const;

    qint32 getImageSizeInBytes() const;
    void setImageSizeInBytes(const qint32 &image_size_in_bytes);
    bool is_image_size_in_bytes_Set() const;
    bool is_image_size_in_bytes_Valid() const;

    QDateTime getImagePushedAt() const;
    void setImagePushedAt(const QDateTime &image_pushed_at);
    bool is_image_pushed_at_Set() const;
    bool is_image_pushed_at_Valid() const;

    OAIDescribeImageScanFindingsResponse_imageScanStatus getImageScanStatus() const;
    void setImageScanStatus(const OAIDescribeImageScanFindingsResponse_imageScanStatus &image_scan_status);
    bool is_image_scan_status_Set() const;
    bool is_image_scan_status_Valid() const;

    OAIImageDetail_imageScanFindingsSummary getImageScanFindingsSummary() const;
    void setImageScanFindingsSummary(const OAIImageDetail_imageScanFindingsSummary &image_scan_findings_summary);
    bool is_image_scan_findings_summary_Set() const;
    bool is_image_scan_findings_summary_Valid() const;

    QString getImageManifestMediaType() const;
    void setImageManifestMediaType(const QString &image_manifest_media_type);
    bool is_image_manifest_media_type_Set() const;
    bool is_image_manifest_media_type_Valid() const;

    QString getArtifactMediaType() const;
    void setArtifactMediaType(const QString &artifact_media_type);
    bool is_artifact_media_type_Set() const;
    bool is_artifact_media_type_Valid() const;

    QDateTime getLastRecordedPullTime() const;
    void setLastRecordedPullTime(const QDateTime &last_recorded_pull_time);
    bool is_last_recorded_pull_time_Set() const;
    bool is_last_recorded_pull_time_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_registry_id;
    bool m_registry_id_isSet;
    bool m_registry_id_isValid;

    QString m_repository_name;
    bool m_repository_name_isSet;
    bool m_repository_name_isValid;

    QString m_image_digest;
    bool m_image_digest_isSet;
    bool m_image_digest_isValid;

    QList m_image_tags;
    bool m_image_tags_isSet;
    bool m_image_tags_isValid;

    qint32 m_image_size_in_bytes;
    bool m_image_size_in_bytes_isSet;
    bool m_image_size_in_bytes_isValid;

    QDateTime m_image_pushed_at;
    bool m_image_pushed_at_isSet;
    bool m_image_pushed_at_isValid;

    OAIDescribeImageScanFindingsResponse_imageScanStatus m_image_scan_status;
    bool m_image_scan_status_isSet;
    bool m_image_scan_status_isValid;

    OAIImageDetail_imageScanFindingsSummary m_image_scan_findings_summary;
    bool m_image_scan_findings_summary_isSet;
    bool m_image_scan_findings_summary_isValid;

    QString m_image_manifest_media_type;
    bool m_image_manifest_media_type_isSet;
    bool m_image_manifest_media_type_isValid;

    QString m_artifact_media_type;
    bool m_artifact_media_type_isSet;
    bool m_artifact_media_type_isValid;

    QDateTime m_last_recorded_pull_time;
    bool m_last_recorded_pull_time_isSet;
    bool m_last_recorded_pull_time_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIImageDetail)

#endif // OAIImageDetail_H
