/**
 * Amazon EC2 Container Registry
 * <fullname>Amazon Elastic Container Registry</fullname> <p>Amazon Elastic Container Registry (Amazon ECR) is a managed container image registry service. Customers can use the familiar Docker CLI, or their preferred client, to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports private repositories with resource-based permissions using IAM so that specific users or Amazon EC2 instances can access repositories and images.</p> <p>Amazon ECR has service endpoints in each supported Region. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/ecr.html\">Amazon ECR endpoints</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2015-09-21
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICvssScoreDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICvssScoreDetails::OAICvssScoreDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICvssScoreDetails::OAICvssScoreDetails() {
    this->initializeModel();
}

OAICvssScoreDetails::~OAICvssScoreDetails() {}

void OAICvssScoreDetails::initializeModel() {

    m_adjustments_isSet = false;
    m_adjustments_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_score_source_isSet = false;
    m_score_source_isValid = false;

    m_scoring_vector_isSet = false;
    m_scoring_vector_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAICvssScoreDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICvssScoreDetails::fromJsonObject(QJsonObject json) {

    m_adjustments_isValid = ::OpenAPI::fromJsonValue(m_adjustments, json[QString("adjustments")]);
    m_adjustments_isSet = !json[QString("adjustments")].isNull() && m_adjustments_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;

    m_score_source_isValid = ::OpenAPI::fromJsonValue(m_score_source, json[QString("scoreSource")]);
    m_score_source_isSet = !json[QString("scoreSource")].isNull() && m_score_source_isValid;

    m_scoring_vector_isValid = ::OpenAPI::fromJsonValue(m_scoring_vector, json[QString("scoringVector")]);
    m_scoring_vector_isSet = !json[QString("scoringVector")].isNull() && m_scoring_vector_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAICvssScoreDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICvssScoreDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_adjustments.isSet()) {
        obj.insert(QString("adjustments"), ::OpenAPI::toJsonValue(m_adjustments));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_score_source_isSet) {
        obj.insert(QString("scoreSource"), ::OpenAPI::toJsonValue(m_score_source));
    }
    if (m_scoring_vector_isSet) {
        obj.insert(QString("scoringVector"), ::OpenAPI::toJsonValue(m_scoring_vector));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QList OAICvssScoreDetails::getAdjustments() const {
    return m_adjustments;
}
void OAICvssScoreDetails::setAdjustments(const QList &adjustments) {
    m_adjustments = adjustments;
    m_adjustments_isSet = true;
}

bool OAICvssScoreDetails::is_adjustments_Set() const{
    return m_adjustments_isSet;
}

bool OAICvssScoreDetails::is_adjustments_Valid() const{
    return m_adjustments_isValid;
}

double OAICvssScoreDetails::getScore() const {
    return m_score;
}
void OAICvssScoreDetails::setScore(const double &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAICvssScoreDetails::is_score_Set() const{
    return m_score_isSet;
}

bool OAICvssScoreDetails::is_score_Valid() const{
    return m_score_isValid;
}

QString OAICvssScoreDetails::getScoreSource() const {
    return m_score_source;
}
void OAICvssScoreDetails::setScoreSource(const QString &score_source) {
    m_score_source = score_source;
    m_score_source_isSet = true;
}

bool OAICvssScoreDetails::is_score_source_Set() const{
    return m_score_source_isSet;
}

bool OAICvssScoreDetails::is_score_source_Valid() const{
    return m_score_source_isValid;
}

QString OAICvssScoreDetails::getScoringVector() const {
    return m_scoring_vector;
}
void OAICvssScoreDetails::setScoringVector(const QString &scoring_vector) {
    m_scoring_vector = scoring_vector;
    m_scoring_vector_isSet = true;
}

bool OAICvssScoreDetails::is_scoring_vector_Set() const{
    return m_scoring_vector_isSet;
}

bool OAICvssScoreDetails::is_scoring_vector_Valid() const{
    return m_scoring_vector_isValid;
}

QString OAICvssScoreDetails::getVersion() const {
    return m_version;
}
void OAICvssScoreDetails::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAICvssScoreDetails::is_version_Set() const{
    return m_version_isSet;
}

bool OAICvssScoreDetails::is_version_Valid() const{
    return m_version_isValid;
}

bool OAICvssScoreDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_adjustments.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scoring_vector_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICvssScoreDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
