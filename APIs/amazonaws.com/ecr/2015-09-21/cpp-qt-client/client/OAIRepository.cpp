/**
 * Amazon EC2 Container Registry
 * <fullname>Amazon Elastic Container Registry</fullname> <p>Amazon Elastic Container Registry (Amazon ECR) is a managed container image registry service. Customers can use the familiar Docker CLI, or their preferred client, to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports private repositories with resource-based permissions using IAM so that specific users or Amazon EC2 instances can access repositories and images.</p> <p>Amazon ECR has service endpoints in each supported Region. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/ecr.html\">Amazon ECR endpoints</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2015-09-21
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRepository.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRepository::OAIRepository(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRepository::OAIRepository() {
    this->initializeModel();
}

OAIRepository::~OAIRepository() {}

void OAIRepository::initializeModel() {

    m_repository_arn_isSet = false;
    m_repository_arn_isValid = false;

    m_registry_id_isSet = false;
    m_registry_id_isValid = false;

    m_repository_name_isSet = false;
    m_repository_name_isValid = false;

    m_repository_uri_isSet = false;
    m_repository_uri_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_image_tag_mutability_isSet = false;
    m_image_tag_mutability_isValid = false;

    m_image_scanning_configuration_isSet = false;
    m_image_scanning_configuration_isValid = false;

    m_encryption_configuration_isSet = false;
    m_encryption_configuration_isValid = false;
}

void OAIRepository::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRepository::fromJsonObject(QJsonObject json) {

    m_repository_arn_isValid = ::OpenAPI::fromJsonValue(m_repository_arn, json[QString("repositoryArn")]);
    m_repository_arn_isSet = !json[QString("repositoryArn")].isNull() && m_repository_arn_isValid;

    m_registry_id_isValid = ::OpenAPI::fromJsonValue(m_registry_id, json[QString("registryId")]);
    m_registry_id_isSet = !json[QString("registryId")].isNull() && m_registry_id_isValid;

    m_repository_name_isValid = ::OpenAPI::fromJsonValue(m_repository_name, json[QString("repositoryName")]);
    m_repository_name_isSet = !json[QString("repositoryName")].isNull() && m_repository_name_isValid;

    m_repository_uri_isValid = ::OpenAPI::fromJsonValue(m_repository_uri, json[QString("repositoryUri")]);
    m_repository_uri_isSet = !json[QString("repositoryUri")].isNull() && m_repository_uri_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_image_tag_mutability_isValid = ::OpenAPI::fromJsonValue(m_image_tag_mutability, json[QString("imageTagMutability")]);
    m_image_tag_mutability_isSet = !json[QString("imageTagMutability")].isNull() && m_image_tag_mutability_isValid;

    m_image_scanning_configuration_isValid = ::OpenAPI::fromJsonValue(m_image_scanning_configuration, json[QString("imageScanningConfiguration")]);
    m_image_scanning_configuration_isSet = !json[QString("imageScanningConfiguration")].isNull() && m_image_scanning_configuration_isValid;

    m_encryption_configuration_isValid = ::OpenAPI::fromJsonValue(m_encryption_configuration, json[QString("encryptionConfiguration")]);
    m_encryption_configuration_isSet = !json[QString("encryptionConfiguration")].isNull() && m_encryption_configuration_isValid;
}

QString OAIRepository::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRepository::asJsonObject() const {
    QJsonObject obj;
    if (m_repository_arn_isSet) {
        obj.insert(QString("repositoryArn"), ::OpenAPI::toJsonValue(m_repository_arn));
    }
    if (m_registry_id_isSet) {
        obj.insert(QString("registryId"), ::OpenAPI::toJsonValue(m_registry_id));
    }
    if (m_repository_name_isSet) {
        obj.insert(QString("repositoryName"), ::OpenAPI::toJsonValue(m_repository_name));
    }
    if (m_repository_uri_isSet) {
        obj.insert(QString("repositoryUri"), ::OpenAPI::toJsonValue(m_repository_uri));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_image_tag_mutability.isSet()) {
        obj.insert(QString("imageTagMutability"), ::OpenAPI::toJsonValue(m_image_tag_mutability));
    }
    if (m_image_scanning_configuration.isSet()) {
        obj.insert(QString("imageScanningConfiguration"), ::OpenAPI::toJsonValue(m_image_scanning_configuration));
    }
    if (m_encryption_configuration.isSet()) {
        obj.insert(QString("encryptionConfiguration"), ::OpenAPI::toJsonValue(m_encryption_configuration));
    }
    return obj;
}

QString OAIRepository::getRepositoryArn() const {
    return m_repository_arn;
}
void OAIRepository::setRepositoryArn(const QString &repository_arn) {
    m_repository_arn = repository_arn;
    m_repository_arn_isSet = true;
}

bool OAIRepository::is_repository_arn_Set() const{
    return m_repository_arn_isSet;
}

bool OAIRepository::is_repository_arn_Valid() const{
    return m_repository_arn_isValid;
}

QString OAIRepository::getRegistryId() const {
    return m_registry_id;
}
void OAIRepository::setRegistryId(const QString &registry_id) {
    m_registry_id = registry_id;
    m_registry_id_isSet = true;
}

bool OAIRepository::is_registry_id_Set() const{
    return m_registry_id_isSet;
}

bool OAIRepository::is_registry_id_Valid() const{
    return m_registry_id_isValid;
}

QString OAIRepository::getRepositoryName() const {
    return m_repository_name;
}
void OAIRepository::setRepositoryName(const QString &repository_name) {
    m_repository_name = repository_name;
    m_repository_name_isSet = true;
}

bool OAIRepository::is_repository_name_Set() const{
    return m_repository_name_isSet;
}

bool OAIRepository::is_repository_name_Valid() const{
    return m_repository_name_isValid;
}

QString OAIRepository::getRepositoryUri() const {
    return m_repository_uri;
}
void OAIRepository::setRepositoryUri(const QString &repository_uri) {
    m_repository_uri = repository_uri;
    m_repository_uri_isSet = true;
}

bool OAIRepository::is_repository_uri_Set() const{
    return m_repository_uri_isSet;
}

bool OAIRepository::is_repository_uri_Valid() const{
    return m_repository_uri_isValid;
}

QDateTime OAIRepository::getCreatedAt() const {
    return m_created_at;
}
void OAIRepository::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIRepository::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIRepository::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAIImageTagMutability OAIRepository::getImageTagMutability() const {
    return m_image_tag_mutability;
}
void OAIRepository::setImageTagMutability(const OAIImageTagMutability &image_tag_mutability) {
    m_image_tag_mutability = image_tag_mutability;
    m_image_tag_mutability_isSet = true;
}

bool OAIRepository::is_image_tag_mutability_Set() const{
    return m_image_tag_mutability_isSet;
}

bool OAIRepository::is_image_tag_mutability_Valid() const{
    return m_image_tag_mutability_isValid;
}

OAIImageScanningConfiguration OAIRepository::getImageScanningConfiguration() const {
    return m_image_scanning_configuration;
}
void OAIRepository::setImageScanningConfiguration(const OAIImageScanningConfiguration &image_scanning_configuration) {
    m_image_scanning_configuration = image_scanning_configuration;
    m_image_scanning_configuration_isSet = true;
}

bool OAIRepository::is_image_scanning_configuration_Set() const{
    return m_image_scanning_configuration_isSet;
}

bool OAIRepository::is_image_scanning_configuration_Valid() const{
    return m_image_scanning_configuration_isValid;
}

OAICreateRepositoryRequest_encryptionConfiguration OAIRepository::getEncryptionConfiguration() const {
    return m_encryption_configuration;
}
void OAIRepository::setEncryptionConfiguration(const OAICreateRepositoryRequest_encryptionConfiguration &encryption_configuration) {
    m_encryption_configuration = encryption_configuration;
    m_encryption_configuration_isSet = true;
}

bool OAIRepository::is_encryption_configuration_Set() const{
    return m_encryption_configuration_isSet;
}

bool OAIRepository::is_encryption_configuration_Valid() const{
    return m_encryption_configuration_isValid;
}

bool OAIRepository::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_repository_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registry_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_tag_mutability.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_scanning_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRepository::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
