/**
 * Amazon EC2 Container Registry
 * <fullname>Amazon Elastic Container Registry</fullname> <p>Amazon Elastic Container Registry (Amazon ECR) is a managed container image registry service. Customers can use the familiar Docker CLI, or their preferred client, to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports private repositories with resource-based permissions using IAM so that specific users or Amazon EC2 instances can access repositories and images.</p> <p>Amazon ECR has service endpoints in each supported Region. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/ecr.html\">Amazon ECR endpoints</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2015-09-21
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIImage.h
 *
 * An object representing an Amazon ECR image.
 */

#ifndef OAIImage_H
#define OAIImage_H

#include <QJsonObject>

#include "OAIImage_imageId.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIImage_imageId;

class OAIImage : public OAIObject {
public:
    OAIImage();
    OAIImage(QString json);
    ~OAIImage() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getRegistryId() const;
    void setRegistryId(const QString &registry_id);
    bool is_registry_id_Set() const;
    bool is_registry_id_Valid() const;

    QString getRepositoryName() const;
    void setRepositoryName(const QString &repository_name);
    bool is_repository_name_Set() const;
    bool is_repository_name_Valid() const;

    OAIImage_imageId getImageId() const;
    void setImageId(const OAIImage_imageId &image_id);
    bool is_image_id_Set() const;
    bool is_image_id_Valid() const;

    QString getImageManifest() const;
    void setImageManifest(const QString &image_manifest);
    bool is_image_manifest_Set() const;
    bool is_image_manifest_Valid() const;

    QString getImageManifestMediaType() const;
    void setImageManifestMediaType(const QString &image_manifest_media_type);
    bool is_image_manifest_media_type_Set() const;
    bool is_image_manifest_media_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_registry_id;
    bool m_registry_id_isSet;
    bool m_registry_id_isValid;

    QString m_repository_name;
    bool m_repository_name_isSet;
    bool m_repository_name_isValid;

    OAIImage_imageId m_image_id;
    bool m_image_id_isSet;
    bool m_image_id_isValid;

    QString m_image_manifest;
    bool m_image_manifest_isSet;
    bool m_image_manifest_isValid;

    QString m_image_manifest_media_type;
    bool m_image_manifest_media_type_isSet;
    bool m_image_manifest_media_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIImage)

#endif // OAIImage_H
