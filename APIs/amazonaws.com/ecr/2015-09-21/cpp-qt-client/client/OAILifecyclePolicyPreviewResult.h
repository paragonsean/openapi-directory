/**
 * Amazon EC2 Container Registry
 * <fullname>Amazon Elastic Container Registry</fullname> <p>Amazon Elastic Container Registry (Amazon ECR) is a managed container image registry service. Customers can use the familiar Docker CLI, or their preferred client, to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports private repositories with resource-based permissions using IAM so that specific users or Amazon EC2 instances can access repositories and images.</p> <p>Amazon ECR has service endpoints in each supported Region. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/ecr.html\">Amazon ECR endpoints</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2015-09-21
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAILifecyclePolicyPreviewResult.h
 *
 * The result of the lifecycle policy preview.
 */

#ifndef OAILifecyclePolicyPreviewResult_H
#define OAILifecyclePolicyPreviewResult_H

#include <QJsonObject>

#include "OAILifecyclePolicyPreviewResult_action.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAILifecyclePolicyPreviewResult_action;

class OAILifecyclePolicyPreviewResult : public OAIObject {
public:
    OAILifecyclePolicyPreviewResult();
    OAILifecyclePolicyPreviewResult(QString json);
    ~OAILifecyclePolicyPreviewResult() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList getImageTags() const;
    void setImageTags(const QList &image_tags);
    bool is_image_tags_Set() const;
    bool is_image_tags_Valid() const;

    QString getImageDigest() const;
    void setImageDigest(const QString &image_digest);
    bool is_image_digest_Set() const;
    bool is_image_digest_Valid() const;

    QDateTime getImagePushedAt() const;
    void setImagePushedAt(const QDateTime &image_pushed_at);
    bool is_image_pushed_at_Set() const;
    bool is_image_pushed_at_Valid() const;

    OAILifecyclePolicyPreviewResult_action getAction() const;
    void setAction(const OAILifecyclePolicyPreviewResult_action &action);
    bool is_action_Set() const;
    bool is_action_Valid() const;

    qint32 getAppliedRulePriority() const;
    void setAppliedRulePriority(const qint32 &applied_rule_priority);
    bool is_applied_rule_priority_Set() const;
    bool is_applied_rule_priority_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList m_image_tags;
    bool m_image_tags_isSet;
    bool m_image_tags_isValid;

    QString m_image_digest;
    bool m_image_digest_isSet;
    bool m_image_digest_isValid;

    QDateTime m_image_pushed_at;
    bool m_image_pushed_at_isSet;
    bool m_image_pushed_at_isValid;

    OAILifecyclePolicyPreviewResult_action m_action;
    bool m_action_isSet;
    bool m_action_isValid;

    qint32 m_applied_rule_priority;
    bool m_applied_rule_priority_isSet;
    bool m_applied_rule_priority_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAILifecyclePolicyPreviewResult)

#endif // OAILifecyclePolicyPreviewResult_H
