/**
 * Amazon EC2 Container Registry
 * <fullname>Amazon Elastic Container Registry</fullname> <p>Amazon Elastic Container Registry (Amazon ECR) is a managed container image registry service. Customers can use the familiar Docker CLI, or their preferred client, to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports private repositories with resource-based permissions using IAM so that specific users or Amazon EC2 instances can access repositories and images.</p> <p>Amazon ECR has service endpoints in each supported Region. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/ecr.html\">Amazon ECR endpoints</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2015-09-21
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScanStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScanStatus::OAIScanStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScanStatus::OAIScanStatus() {
    this->initializeModel();
}

OAIScanStatus::~OAIScanStatus() {}

void OAIScanStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIScanStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIScanStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("IN_PROGRESS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIScanStatus::IN_PROGRESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("COMPLETE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIScanStatus::COMPLETE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIScanStatus::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNSUPPORTED_IMAGE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIScanStatus::UNSUPPORTED_IMAGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ACTIVE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIScanStatus::ACTIVE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PENDING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIScanStatus::PENDING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SCAN_ELIGIBILITY_EXPIRED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIScanStatus::SCAN_ELIGIBILITY_EXPIRED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FINDINGS_UNAVAILABLE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIScanStatus::FINDINGS_UNAVAILABLE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIScanStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIScanStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIScanStatus::IN_PROGRESS:
            val = "IN_PROGRESS";
            break;
        case eOAIScanStatus::COMPLETE:
            val = "COMPLETE";
            break;
        case eOAIScanStatus::FAILED:
            val = "FAILED";
            break;
        case eOAIScanStatus::UNSUPPORTED_IMAGE:
            val = "UNSUPPORTED_IMAGE";
            break;
        case eOAIScanStatus::ACTIVE:
            val = "ACTIVE";
            break;
        case eOAIScanStatus::PENDING:
            val = "PENDING";
            break;
        case eOAIScanStatus::SCAN_ELIGIBILITY_EXPIRED:
            val = "SCAN_ELIGIBILITY_EXPIRED";
            break;
        case eOAIScanStatus::FINDINGS_UNAVAILABLE:
            val = "FINDINGS_UNAVAILABLE";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIScanStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIScanStatus::eOAIScanStatus OAIScanStatus::getValue() const {
    return m_value;
}

void OAIScanStatus::setValue(const OAIScanStatus::eOAIScanStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIScanStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAIScanStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
