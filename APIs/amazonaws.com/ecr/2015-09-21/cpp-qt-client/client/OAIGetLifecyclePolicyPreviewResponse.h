/**
 * Amazon EC2 Container Registry
 * <fullname>Amazon Elastic Container Registry</fullname> <p>Amazon Elastic Container Registry (Amazon ECR) is a managed container image registry service. Customers can use the familiar Docker CLI, or their preferred client, to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports private repositories with resource-based permissions using IAM so that specific users or Amazon EC2 instances can access repositories and images.</p> <p>Amazon ECR has service endpoints in each supported Region. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/ecr.html\">Amazon ECR endpoints</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2015-09-21
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetLifecyclePolicyPreviewResponse.h
 *
 * 
 */

#ifndef OAIGetLifecyclePolicyPreviewResponse_H
#define OAIGetLifecyclePolicyPreviewResponse_H

#include <QJsonObject>

#include "OAIGetLifecyclePolicyPreviewResponse_summary.h"
#include "OAILifecyclePolicyPreviewStatus.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGetLifecyclePolicyPreviewResponse_summary;

class OAIGetLifecyclePolicyPreviewResponse : public OAIObject {
public:
    OAIGetLifecyclePolicyPreviewResponse();
    OAIGetLifecyclePolicyPreviewResponse(QString json);
    ~OAIGetLifecyclePolicyPreviewResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getRegistryId() const;
    void setRegistryId(const QString &registry_id);
    bool is_registry_id_Set() const;
    bool is_registry_id_Valid() const;

    QString getRepositoryName() const;
    void setRepositoryName(const QString &repository_name);
    bool is_repository_name_Set() const;
    bool is_repository_name_Valid() const;

    QString getLifecyclePolicyText() const;
    void setLifecyclePolicyText(const QString &lifecycle_policy_text);
    bool is_lifecycle_policy_text_Set() const;
    bool is_lifecycle_policy_text_Valid() const;

    OAILifecyclePolicyPreviewStatus getStatus() const;
    void setStatus(const OAILifecyclePolicyPreviewStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getNextToken() const;
    void setNextToken(const QString &next_token);
    bool is_next_token_Set() const;
    bool is_next_token_Valid() const;

    QList getPreviewResults() const;
    void setPreviewResults(const QList &preview_results);
    bool is_preview_results_Set() const;
    bool is_preview_results_Valid() const;

    OAIGetLifecyclePolicyPreviewResponse_summary getSummary() const;
    void setSummary(const OAIGetLifecyclePolicyPreviewResponse_summary &summary);
    bool is_summary_Set() const;
    bool is_summary_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_registry_id;
    bool m_registry_id_isSet;
    bool m_registry_id_isValid;

    QString m_repository_name;
    bool m_repository_name_isSet;
    bool m_repository_name_isValid;

    QString m_lifecycle_policy_text;
    bool m_lifecycle_policy_text_isSet;
    bool m_lifecycle_policy_text_isValid;

    OAILifecyclePolicyPreviewStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_next_token;
    bool m_next_token_isSet;
    bool m_next_token_isValid;

    QList m_preview_results;
    bool m_preview_results_isSet;
    bool m_preview_results_isValid;

    OAIGetLifecyclePolicyPreviewResponse_summary m_summary;
    bool m_summary_isSet;
    bool m_summary_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetLifecyclePolicyPreviewResponse)

#endif // OAIGetLifecyclePolicyPreviewResponse_H
