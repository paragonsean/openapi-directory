/**
 * Amazon EC2 Container Registry
 * <fullname>Amazon Elastic Container Registry</fullname> <p>Amazon Elastic Container Registry (Amazon ECR) is a managed container image registry service. Customers can use the familiar Docker CLI, or their preferred client, to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports private repositories with resource-based permissions using IAM so that specific users or Amazon EC2 instances can access repositories and images.</p> <p>Amazon ECR has service endpoints in each supported Region. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/ecr.html\">Amazon ECR endpoints</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2015-09-21
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPackageVulnerabilityDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPackageVulnerabilityDetails::OAIPackageVulnerabilityDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPackageVulnerabilityDetails::OAIPackageVulnerabilityDetails() {
    this->initializeModel();
}

OAIPackageVulnerabilityDetails::~OAIPackageVulnerabilityDetails() {}

void OAIPackageVulnerabilityDetails::initializeModel() {

    m_cvss_isSet = false;
    m_cvss_isValid = false;

    m_reference_urls_isSet = false;
    m_reference_urls_isValid = false;

    m_related_vulnerabilities_isSet = false;
    m_related_vulnerabilities_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_source_url_isSet = false;
    m_source_url_isValid = false;

    m_vendor_created_at_isSet = false;
    m_vendor_created_at_isValid = false;

    m_vendor_severity_isSet = false;
    m_vendor_severity_isValid = false;

    m_vendor_updated_at_isSet = false;
    m_vendor_updated_at_isValid = false;

    m_vulnerability_id_isSet = false;
    m_vulnerability_id_isValid = false;

    m_vulnerable_packages_isSet = false;
    m_vulnerable_packages_isValid = false;
}

void OAIPackageVulnerabilityDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPackageVulnerabilityDetails::fromJsonObject(QJsonObject json) {

    m_cvss_isValid = ::OpenAPI::fromJsonValue(m_cvss, json[QString("cvss")]);
    m_cvss_isSet = !json[QString("cvss")].isNull() && m_cvss_isValid;

    m_reference_urls_isValid = ::OpenAPI::fromJsonValue(m_reference_urls, json[QString("referenceUrls")]);
    m_reference_urls_isSet = !json[QString("referenceUrls")].isNull() && m_reference_urls_isValid;

    m_related_vulnerabilities_isValid = ::OpenAPI::fromJsonValue(m_related_vulnerabilities, json[QString("relatedVulnerabilities")]);
    m_related_vulnerabilities_isSet = !json[QString("relatedVulnerabilities")].isNull() && m_related_vulnerabilities_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_source_url_isValid = ::OpenAPI::fromJsonValue(m_source_url, json[QString("sourceUrl")]);
    m_source_url_isSet = !json[QString("sourceUrl")].isNull() && m_source_url_isValid;

    m_vendor_created_at_isValid = ::OpenAPI::fromJsonValue(m_vendor_created_at, json[QString("vendorCreatedAt")]);
    m_vendor_created_at_isSet = !json[QString("vendorCreatedAt")].isNull() && m_vendor_created_at_isValid;

    m_vendor_severity_isValid = ::OpenAPI::fromJsonValue(m_vendor_severity, json[QString("vendorSeverity")]);
    m_vendor_severity_isSet = !json[QString("vendorSeverity")].isNull() && m_vendor_severity_isValid;

    m_vendor_updated_at_isValid = ::OpenAPI::fromJsonValue(m_vendor_updated_at, json[QString("vendorUpdatedAt")]);
    m_vendor_updated_at_isSet = !json[QString("vendorUpdatedAt")].isNull() && m_vendor_updated_at_isValid;

    m_vulnerability_id_isValid = ::OpenAPI::fromJsonValue(m_vulnerability_id, json[QString("vulnerabilityId")]);
    m_vulnerability_id_isSet = !json[QString("vulnerabilityId")].isNull() && m_vulnerability_id_isValid;

    m_vulnerable_packages_isValid = ::OpenAPI::fromJsonValue(m_vulnerable_packages, json[QString("vulnerablePackages")]);
    m_vulnerable_packages_isSet = !json[QString("vulnerablePackages")].isNull() && m_vulnerable_packages_isValid;
}

QString OAIPackageVulnerabilityDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPackageVulnerabilityDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_cvss.isSet()) {
        obj.insert(QString("cvss"), ::OpenAPI::toJsonValue(m_cvss));
    }
    if (m_reference_urls.isSet()) {
        obj.insert(QString("referenceUrls"), ::OpenAPI::toJsonValue(m_reference_urls));
    }
    if (m_related_vulnerabilities.isSet()) {
        obj.insert(QString("relatedVulnerabilities"), ::OpenAPI::toJsonValue(m_related_vulnerabilities));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_source_url_isSet) {
        obj.insert(QString("sourceUrl"), ::OpenAPI::toJsonValue(m_source_url));
    }
    if (m_vendor_created_at_isSet) {
        obj.insert(QString("vendorCreatedAt"), ::OpenAPI::toJsonValue(m_vendor_created_at));
    }
    if (m_vendor_severity_isSet) {
        obj.insert(QString("vendorSeverity"), ::OpenAPI::toJsonValue(m_vendor_severity));
    }
    if (m_vendor_updated_at_isSet) {
        obj.insert(QString("vendorUpdatedAt"), ::OpenAPI::toJsonValue(m_vendor_updated_at));
    }
    if (m_vulnerability_id_isSet) {
        obj.insert(QString("vulnerabilityId"), ::OpenAPI::toJsonValue(m_vulnerability_id));
    }
    if (m_vulnerable_packages.isSet()) {
        obj.insert(QString("vulnerablePackages"), ::OpenAPI::toJsonValue(m_vulnerable_packages));
    }
    return obj;
}

QList OAIPackageVulnerabilityDetails::getCvss() const {
    return m_cvss;
}
void OAIPackageVulnerabilityDetails::setCvss(const QList &cvss) {
    m_cvss = cvss;
    m_cvss_isSet = true;
}

bool OAIPackageVulnerabilityDetails::is_cvss_Set() const{
    return m_cvss_isSet;
}

bool OAIPackageVulnerabilityDetails::is_cvss_Valid() const{
    return m_cvss_isValid;
}

QList OAIPackageVulnerabilityDetails::getReferenceUrls() const {
    return m_reference_urls;
}
void OAIPackageVulnerabilityDetails::setReferenceUrls(const QList &reference_urls) {
    m_reference_urls = reference_urls;
    m_reference_urls_isSet = true;
}

bool OAIPackageVulnerabilityDetails::is_reference_urls_Set() const{
    return m_reference_urls_isSet;
}

bool OAIPackageVulnerabilityDetails::is_reference_urls_Valid() const{
    return m_reference_urls_isValid;
}

QList OAIPackageVulnerabilityDetails::getRelatedVulnerabilities() const {
    return m_related_vulnerabilities;
}
void OAIPackageVulnerabilityDetails::setRelatedVulnerabilities(const QList &related_vulnerabilities) {
    m_related_vulnerabilities = related_vulnerabilities;
    m_related_vulnerabilities_isSet = true;
}

bool OAIPackageVulnerabilityDetails::is_related_vulnerabilities_Set() const{
    return m_related_vulnerabilities_isSet;
}

bool OAIPackageVulnerabilityDetails::is_related_vulnerabilities_Valid() const{
    return m_related_vulnerabilities_isValid;
}

QString OAIPackageVulnerabilityDetails::getSource() const {
    return m_source;
}
void OAIPackageVulnerabilityDetails::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIPackageVulnerabilityDetails::is_source_Set() const{
    return m_source_isSet;
}

bool OAIPackageVulnerabilityDetails::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIPackageVulnerabilityDetails::getSourceUrl() const {
    return m_source_url;
}
void OAIPackageVulnerabilityDetails::setSourceUrl(const QString &source_url) {
    m_source_url = source_url;
    m_source_url_isSet = true;
}

bool OAIPackageVulnerabilityDetails::is_source_url_Set() const{
    return m_source_url_isSet;
}

bool OAIPackageVulnerabilityDetails::is_source_url_Valid() const{
    return m_source_url_isValid;
}

QDateTime OAIPackageVulnerabilityDetails::getVendorCreatedAt() const {
    return m_vendor_created_at;
}
void OAIPackageVulnerabilityDetails::setVendorCreatedAt(const QDateTime &vendor_created_at) {
    m_vendor_created_at = vendor_created_at;
    m_vendor_created_at_isSet = true;
}

bool OAIPackageVulnerabilityDetails::is_vendor_created_at_Set() const{
    return m_vendor_created_at_isSet;
}

bool OAIPackageVulnerabilityDetails::is_vendor_created_at_Valid() const{
    return m_vendor_created_at_isValid;
}

QString OAIPackageVulnerabilityDetails::getVendorSeverity() const {
    return m_vendor_severity;
}
void OAIPackageVulnerabilityDetails::setVendorSeverity(const QString &vendor_severity) {
    m_vendor_severity = vendor_severity;
    m_vendor_severity_isSet = true;
}

bool OAIPackageVulnerabilityDetails::is_vendor_severity_Set() const{
    return m_vendor_severity_isSet;
}

bool OAIPackageVulnerabilityDetails::is_vendor_severity_Valid() const{
    return m_vendor_severity_isValid;
}

QDateTime OAIPackageVulnerabilityDetails::getVendorUpdatedAt() const {
    return m_vendor_updated_at;
}
void OAIPackageVulnerabilityDetails::setVendorUpdatedAt(const QDateTime &vendor_updated_at) {
    m_vendor_updated_at = vendor_updated_at;
    m_vendor_updated_at_isSet = true;
}

bool OAIPackageVulnerabilityDetails::is_vendor_updated_at_Set() const{
    return m_vendor_updated_at_isSet;
}

bool OAIPackageVulnerabilityDetails::is_vendor_updated_at_Valid() const{
    return m_vendor_updated_at_isValid;
}

QString OAIPackageVulnerabilityDetails::getVulnerabilityId() const {
    return m_vulnerability_id;
}
void OAIPackageVulnerabilityDetails::setVulnerabilityId(const QString &vulnerability_id) {
    m_vulnerability_id = vulnerability_id;
    m_vulnerability_id_isSet = true;
}

bool OAIPackageVulnerabilityDetails::is_vulnerability_id_Set() const{
    return m_vulnerability_id_isSet;
}

bool OAIPackageVulnerabilityDetails::is_vulnerability_id_Valid() const{
    return m_vulnerability_id_isValid;
}

QList OAIPackageVulnerabilityDetails::getVulnerablePackages() const {
    return m_vulnerable_packages;
}
void OAIPackageVulnerabilityDetails::setVulnerablePackages(const QList &vulnerable_packages) {
    m_vulnerable_packages = vulnerable_packages;
    m_vulnerable_packages_isSet = true;
}

bool OAIPackageVulnerabilityDetails::is_vulnerable_packages_Set() const{
    return m_vulnerable_packages_isSet;
}

bool OAIPackageVulnerabilityDetails::is_vulnerable_packages_Valid() const{
    return m_vulnerable_packages_isValid;
}

bool OAIPackageVulnerabilityDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cvss.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_urls.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_related_vulnerabilities.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vulnerability_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vulnerable_packages.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPackageVulnerabilityDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
