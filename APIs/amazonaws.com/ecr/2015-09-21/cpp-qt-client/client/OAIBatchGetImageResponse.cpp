/**
 * Amazon EC2 Container Registry
 * <fullname>Amazon Elastic Container Registry</fullname> <p>Amazon Elastic Container Registry (Amazon ECR) is a managed container image registry service. Customers can use the familiar Docker CLI, or their preferred client, to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports private repositories with resource-based permissions using IAM so that specific users or Amazon EC2 instances can access repositories and images.</p> <p>Amazon ECR has service endpoints in each supported Region. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/ecr.html\">Amazon ECR endpoints</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2015-09-21
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchGetImageResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchGetImageResponse::OAIBatchGetImageResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchGetImageResponse::OAIBatchGetImageResponse() {
    this->initializeModel();
}

OAIBatchGetImageResponse::~OAIBatchGetImageResponse() {}

void OAIBatchGetImageResponse::initializeModel() {

    m_images_isSet = false;
    m_images_isValid = false;

    m_failures_isSet = false;
    m_failures_isValid = false;
}

void OAIBatchGetImageResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchGetImageResponse::fromJsonObject(QJsonObject json) {

    m_images_isValid = ::OpenAPI::fromJsonValue(m_images, json[QString("images")]);
    m_images_isSet = !json[QString("images")].isNull() && m_images_isValid;

    m_failures_isValid = ::OpenAPI::fromJsonValue(m_failures, json[QString("failures")]);
    m_failures_isSet = !json[QString("failures")].isNull() && m_failures_isValid;
}

QString OAIBatchGetImageResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchGetImageResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_images.isSet()) {
        obj.insert(QString("images"), ::OpenAPI::toJsonValue(m_images));
    }
    if (m_failures.isSet()) {
        obj.insert(QString("failures"), ::OpenAPI::toJsonValue(m_failures));
    }
    return obj;
}

QList OAIBatchGetImageResponse::getImages() const {
    return m_images;
}
void OAIBatchGetImageResponse::setImages(const QList &images) {
    m_images = images;
    m_images_isSet = true;
}

bool OAIBatchGetImageResponse::is_images_Set() const{
    return m_images_isSet;
}

bool OAIBatchGetImageResponse::is_images_Valid() const{
    return m_images_isValid;
}

QList OAIBatchGetImageResponse::getFailures() const {
    return m_failures;
}
void OAIBatchGetImageResponse::setFailures(const QList &failures) {
    m_failures = failures;
    m_failures_isSet = true;
}

bool OAIBatchGetImageResponse::is_failures_Set() const{
    return m_failures_isSet;
}

bool OAIBatchGetImageResponse::is_failures_Valid() const{
    return m_failures_isValid;
}

bool OAIBatchGetImageResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_images.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failures.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchGetImageResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
