/**
 * Amazon EC2 Container Registry
 * <fullname>Amazon Elastic Container Registry</fullname> <p>Amazon Elastic Container Registry (Amazon ECR) is a managed container image registry service. Customers can use the familiar Docker CLI, or their preferred client, to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports private repositories with resource-based permissions using IAM so that specific users or Amazon EC2 instances can access repositories and images.</p> <p>Amazon ECR has service endpoints in each supported Region. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/ecr.html\">Amazon ECR endpoints</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2015-09-21
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAwsEcrContainerImageDetails.h
 *
 * The image details of the Amazon ECR container image.
 */

#ifndef OAIAwsEcrContainerImageDetails_H
#define OAIAwsEcrContainerImageDetails_H

#include <QJsonObject>

#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAwsEcrContainerImageDetails : public OAIObject {
public:
    OAIAwsEcrContainerImageDetails();
    OAIAwsEcrContainerImageDetails(QString json);
    ~OAIAwsEcrContainerImageDetails() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getArchitecture() const;
    void setArchitecture(const QString &architecture);
    bool is_architecture_Set() const;
    bool is_architecture_Valid() const;

    QString getAuthor() const;
    void setAuthor(const QString &author);
    bool is_author_Set() const;
    bool is_author_Valid() const;

    QString getImageHash() const;
    void setImageHash(const QString &image_hash);
    bool is_image_hash_Set() const;
    bool is_image_hash_Valid() const;

    QList getImageTags() const;
    void setImageTags(const QList &image_tags);
    bool is_image_tags_Set() const;
    bool is_image_tags_Valid() const;

    QString getPlatform() const;
    void setPlatform(const QString &platform);
    bool is_platform_Set() const;
    bool is_platform_Valid() const;

    QDateTime getPushedAt() const;
    void setPushedAt(const QDateTime &pushed_at);
    bool is_pushed_at_Set() const;
    bool is_pushed_at_Valid() const;

    QString getRegistry() const;
    void setRegistry(const QString &registry);
    bool is_registry_Set() const;
    bool is_registry_Valid() const;

    QString getRepositoryName() const;
    void setRepositoryName(const QString &repository_name);
    bool is_repository_name_Set() const;
    bool is_repository_name_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_architecture;
    bool m_architecture_isSet;
    bool m_architecture_isValid;

    QString m_author;
    bool m_author_isSet;
    bool m_author_isValid;

    QString m_image_hash;
    bool m_image_hash_isSet;
    bool m_image_hash_isValid;

    QList m_image_tags;
    bool m_image_tags_isSet;
    bool m_image_tags_isValid;

    QString m_platform;
    bool m_platform_isSet;
    bool m_platform_isValid;

    QDateTime m_pushed_at;
    bool m_pushed_at_isSet;
    bool m_pushed_at_isValid;

    QString m_registry;
    bool m_registry_isSet;
    bool m_registry_isValid;

    QString m_repository_name;
    bool m_repository_name_isSet;
    bool m_repository_name_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAwsEcrContainerImageDetails)

#endif // OAIAwsEcrContainerImageDetails_H
