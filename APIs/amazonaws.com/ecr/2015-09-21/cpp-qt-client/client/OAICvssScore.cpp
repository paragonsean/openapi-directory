/**
 * Amazon EC2 Container Registry
 * <fullname>Amazon Elastic Container Registry</fullname> <p>Amazon Elastic Container Registry (Amazon ECR) is a managed container image registry service. Customers can use the familiar Docker CLI, or their preferred client, to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports private repositories with resource-based permissions using IAM so that specific users or Amazon EC2 instances can access repositories and images.</p> <p>Amazon ECR has service endpoints in each supported Region. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/ecr.html\">Amazon ECR endpoints</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2015-09-21
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICvssScore.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICvssScore::OAICvssScore(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICvssScore::OAICvssScore() {
    this->initializeModel();
}

OAICvssScore::~OAICvssScore() {}

void OAICvssScore::initializeModel() {

    m_base_score_isSet = false;
    m_base_score_isValid = false;

    m_scoring_vector_isSet = false;
    m_scoring_vector_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAICvssScore::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICvssScore::fromJsonObject(QJsonObject json) {

    m_base_score_isValid = ::OpenAPI::fromJsonValue(m_base_score, json[QString("baseScore")]);
    m_base_score_isSet = !json[QString("baseScore")].isNull() && m_base_score_isValid;

    m_scoring_vector_isValid = ::OpenAPI::fromJsonValue(m_scoring_vector, json[QString("scoringVector")]);
    m_scoring_vector_isSet = !json[QString("scoringVector")].isNull() && m_scoring_vector_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAICvssScore::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICvssScore::asJsonObject() const {
    QJsonObject obj;
    if (m_base_score_isSet) {
        obj.insert(QString("baseScore"), ::OpenAPI::toJsonValue(m_base_score));
    }
    if (m_scoring_vector_isSet) {
        obj.insert(QString("scoringVector"), ::OpenAPI::toJsonValue(m_scoring_vector));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

double OAICvssScore::getBaseScore() const {
    return m_base_score;
}
void OAICvssScore::setBaseScore(const double &base_score) {
    m_base_score = base_score;
    m_base_score_isSet = true;
}

bool OAICvssScore::is_base_score_Set() const{
    return m_base_score_isSet;
}

bool OAICvssScore::is_base_score_Valid() const{
    return m_base_score_isValid;
}

QString OAICvssScore::getScoringVector() const {
    return m_scoring_vector;
}
void OAICvssScore::setScoringVector(const QString &scoring_vector) {
    m_scoring_vector = scoring_vector;
    m_scoring_vector_isSet = true;
}

bool OAICvssScore::is_scoring_vector_Set() const{
    return m_scoring_vector_isSet;
}

bool OAICvssScore::is_scoring_vector_Valid() const{
    return m_scoring_vector_isValid;
}

QString OAICvssScore::getSource() const {
    return m_source;
}
void OAICvssScore::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAICvssScore::is_source_Set() const{
    return m_source_isSet;
}

bool OAICvssScore::is_source_Valid() const{
    return m_source_isValid;
}

QString OAICvssScore::getVersion() const {
    return m_version;
}
void OAICvssScore::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAICvssScore::is_version_Set() const{
    return m_version_isSet;
}

bool OAICvssScore::is_version_Valid() const{
    return m_version_isValid;
}

bool OAICvssScore::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scoring_vector_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICvssScore::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
