/**
 * Amazon EC2 Container Registry
 * <fullname>Amazon Elastic Container Registry</fullname> <p>Amazon Elastic Container Registry (Amazon ECR) is a managed container image registry service. Customers can use the familiar Docker CLI, or their preferred client, to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports private repositories with resource-based permissions using IAM so that specific users or Amazon EC2 instances can access repositories and images.</p> <p>Amazon ECR has service endpoints in each supported Region. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/ecr.html\">Amazon ECR endpoints</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2015-09-21
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReplicationRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReplicationRule::OAIReplicationRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReplicationRule::OAIReplicationRule() {
    this->initializeModel();
}

OAIReplicationRule::~OAIReplicationRule() {}

void OAIReplicationRule::initializeModel() {

    m_destinations_isSet = false;
    m_destinations_isValid = false;

    m_repository_filters_isSet = false;
    m_repository_filters_isValid = false;
}

void OAIReplicationRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReplicationRule::fromJsonObject(QJsonObject json) {

    m_destinations_isValid = ::OpenAPI::fromJsonValue(m_destinations, json[QString("destinations")]);
    m_destinations_isSet = !json[QString("destinations")].isNull() && m_destinations_isValid;

    m_repository_filters_isValid = ::OpenAPI::fromJsonValue(m_repository_filters, json[QString("repositoryFilters")]);
    m_repository_filters_isSet = !json[QString("repositoryFilters")].isNull() && m_repository_filters_isValid;
}

QString OAIReplicationRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReplicationRule::asJsonObject() const {
    QJsonObject obj;
    if (m_destinations.isSet()) {
        obj.insert(QString("destinations"), ::OpenAPI::toJsonValue(m_destinations));
    }
    if (m_repository_filters.isSet()) {
        obj.insert(QString("repositoryFilters"), ::OpenAPI::toJsonValue(m_repository_filters));
    }
    return obj;
}

QList OAIReplicationRule::getDestinations() const {
    return m_destinations;
}
void OAIReplicationRule::setDestinations(const QList &destinations) {
    m_destinations = destinations;
    m_destinations_isSet = true;
}

bool OAIReplicationRule::is_destinations_Set() const{
    return m_destinations_isSet;
}

bool OAIReplicationRule::is_destinations_Valid() const{
    return m_destinations_isValid;
}

QList OAIReplicationRule::getRepositoryFilters() const {
    return m_repository_filters;
}
void OAIReplicationRule::setRepositoryFilters(const QList &repository_filters) {
    m_repository_filters = repository_filters;
    m_repository_filters_isSet = true;
}

bool OAIReplicationRule::is_repository_filters_Set() const{
    return m_repository_filters_isSet;
}

bool OAIReplicationRule::is_repository_filters_Valid() const{
    return m_repository_filters_isValid;
}

bool OAIReplicationRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destinations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReplicationRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_destinations_isValid && true;
}

} // namespace OpenAPI
