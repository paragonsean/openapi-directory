/**
 * Amazon EC2 Container Registry
 * <fullname>Amazon Elastic Container Registry</fullname> <p>Amazon Elastic Container Registry (Amazon ECR) is a managed container image registry service. Customers can use the familiar Docker CLI, or their preferred client, to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports private repositories with resource-based permissions using IAM so that specific users or Amazon EC2 instances can access repositories and images.</p> <p>Amazon ECR has service endpoints in each supported Region. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/ecr.html\">Amazon ECR endpoints</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2015-09-21
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILayer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILayer::OAILayer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILayer::OAILayer() {
    this->initializeModel();
}

OAILayer::~OAILayer() {}

void OAILayer::initializeModel() {

    m_layer_digest_isSet = false;
    m_layer_digest_isValid = false;

    m_layer_availability_isSet = false;
    m_layer_availability_isValid = false;

    m_layer_size_isSet = false;
    m_layer_size_isValid = false;

    m_media_type_isSet = false;
    m_media_type_isValid = false;
}

void OAILayer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILayer::fromJsonObject(QJsonObject json) {

    m_layer_digest_isValid = ::OpenAPI::fromJsonValue(m_layer_digest, json[QString("layerDigest")]);
    m_layer_digest_isSet = !json[QString("layerDigest")].isNull() && m_layer_digest_isValid;

    m_layer_availability_isValid = ::OpenAPI::fromJsonValue(m_layer_availability, json[QString("layerAvailability")]);
    m_layer_availability_isSet = !json[QString("layerAvailability")].isNull() && m_layer_availability_isValid;

    m_layer_size_isValid = ::OpenAPI::fromJsonValue(m_layer_size, json[QString("layerSize")]);
    m_layer_size_isSet = !json[QString("layerSize")].isNull() && m_layer_size_isValid;

    m_media_type_isValid = ::OpenAPI::fromJsonValue(m_media_type, json[QString("mediaType")]);
    m_media_type_isSet = !json[QString("mediaType")].isNull() && m_media_type_isValid;
}

QString OAILayer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILayer::asJsonObject() const {
    QJsonObject obj;
    if (m_layer_digest_isSet) {
        obj.insert(QString("layerDigest"), ::OpenAPI::toJsonValue(m_layer_digest));
    }
    if (m_layer_availability.isSet()) {
        obj.insert(QString("layerAvailability"), ::OpenAPI::toJsonValue(m_layer_availability));
    }
    if (m_layer_size_isSet) {
        obj.insert(QString("layerSize"), ::OpenAPI::toJsonValue(m_layer_size));
    }
    if (m_media_type_isSet) {
        obj.insert(QString("mediaType"), ::OpenAPI::toJsonValue(m_media_type));
    }
    return obj;
}

QString OAILayer::getLayerDigest() const {
    return m_layer_digest;
}
void OAILayer::setLayerDigest(const QString &layer_digest) {
    m_layer_digest = layer_digest;
    m_layer_digest_isSet = true;
}

bool OAILayer::is_layer_digest_Set() const{
    return m_layer_digest_isSet;
}

bool OAILayer::is_layer_digest_Valid() const{
    return m_layer_digest_isValid;
}

OAILayerAvailability OAILayer::getLayerAvailability() const {
    return m_layer_availability;
}
void OAILayer::setLayerAvailability(const OAILayerAvailability &layer_availability) {
    m_layer_availability = layer_availability;
    m_layer_availability_isSet = true;
}

bool OAILayer::is_layer_availability_Set() const{
    return m_layer_availability_isSet;
}

bool OAILayer::is_layer_availability_Valid() const{
    return m_layer_availability_isValid;
}

qint32 OAILayer::getLayerSize() const {
    return m_layer_size;
}
void OAILayer::setLayerSize(const qint32 &layer_size) {
    m_layer_size = layer_size;
    m_layer_size_isSet = true;
}

bool OAILayer::is_layer_size_Set() const{
    return m_layer_size_isSet;
}

bool OAILayer::is_layer_size_Valid() const{
    return m_layer_size_isValid;
}

QString OAILayer::getMediaType() const {
    return m_media_type;
}
void OAILayer::setMediaType(const QString &media_type) {
    m_media_type = media_type;
    m_media_type_isSet = true;
}

bool OAILayer::is_media_type_Set() const{
    return m_media_type_isSet;
}

bool OAILayer::is_media_type_Valid() const{
    return m_media_type_isValid;
}

bool OAILayer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_layer_digest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_layer_availability.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_layer_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILayer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
