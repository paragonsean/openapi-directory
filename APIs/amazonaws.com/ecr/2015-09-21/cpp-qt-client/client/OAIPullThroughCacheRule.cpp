/**
 * Amazon EC2 Container Registry
 * <fullname>Amazon Elastic Container Registry</fullname> <p>Amazon Elastic Container Registry (Amazon ECR) is a managed container image registry service. Customers can use the familiar Docker CLI, or their preferred client, to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports private repositories with resource-based permissions using IAM so that specific users or Amazon EC2 instances can access repositories and images.</p> <p>Amazon ECR has service endpoints in each supported Region. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/ecr.html\">Amazon ECR endpoints</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2015-09-21
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPullThroughCacheRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPullThroughCacheRule::OAIPullThroughCacheRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPullThroughCacheRule::OAIPullThroughCacheRule() {
    this->initializeModel();
}

OAIPullThroughCacheRule::~OAIPullThroughCacheRule() {}

void OAIPullThroughCacheRule::initializeModel() {

    m_ecr_repository_prefix_isSet = false;
    m_ecr_repository_prefix_isValid = false;

    m_upstream_registry_url_isSet = false;
    m_upstream_registry_url_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_registry_id_isSet = false;
    m_registry_id_isValid = false;
}

void OAIPullThroughCacheRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPullThroughCacheRule::fromJsonObject(QJsonObject json) {

    m_ecr_repository_prefix_isValid = ::OpenAPI::fromJsonValue(m_ecr_repository_prefix, json[QString("ecrRepositoryPrefix")]);
    m_ecr_repository_prefix_isSet = !json[QString("ecrRepositoryPrefix")].isNull() && m_ecr_repository_prefix_isValid;

    m_upstream_registry_url_isValid = ::OpenAPI::fromJsonValue(m_upstream_registry_url, json[QString("upstreamRegistryUrl")]);
    m_upstream_registry_url_isSet = !json[QString("upstreamRegistryUrl")].isNull() && m_upstream_registry_url_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_registry_id_isValid = ::OpenAPI::fromJsonValue(m_registry_id, json[QString("registryId")]);
    m_registry_id_isSet = !json[QString("registryId")].isNull() && m_registry_id_isValid;
}

QString OAIPullThroughCacheRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPullThroughCacheRule::asJsonObject() const {
    QJsonObject obj;
    if (m_ecr_repository_prefix_isSet) {
        obj.insert(QString("ecrRepositoryPrefix"), ::OpenAPI::toJsonValue(m_ecr_repository_prefix));
    }
    if (m_upstream_registry_url_isSet) {
        obj.insert(QString("upstreamRegistryUrl"), ::OpenAPI::toJsonValue(m_upstream_registry_url));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_registry_id_isSet) {
        obj.insert(QString("registryId"), ::OpenAPI::toJsonValue(m_registry_id));
    }
    return obj;
}

QString OAIPullThroughCacheRule::getEcrRepositoryPrefix() const {
    return m_ecr_repository_prefix;
}
void OAIPullThroughCacheRule::setEcrRepositoryPrefix(const QString &ecr_repository_prefix) {
    m_ecr_repository_prefix = ecr_repository_prefix;
    m_ecr_repository_prefix_isSet = true;
}

bool OAIPullThroughCacheRule::is_ecr_repository_prefix_Set() const{
    return m_ecr_repository_prefix_isSet;
}

bool OAIPullThroughCacheRule::is_ecr_repository_prefix_Valid() const{
    return m_ecr_repository_prefix_isValid;
}

QString OAIPullThroughCacheRule::getUpstreamRegistryUrl() const {
    return m_upstream_registry_url;
}
void OAIPullThroughCacheRule::setUpstreamRegistryUrl(const QString &upstream_registry_url) {
    m_upstream_registry_url = upstream_registry_url;
    m_upstream_registry_url_isSet = true;
}

bool OAIPullThroughCacheRule::is_upstream_registry_url_Set() const{
    return m_upstream_registry_url_isSet;
}

bool OAIPullThroughCacheRule::is_upstream_registry_url_Valid() const{
    return m_upstream_registry_url_isValid;
}

QDateTime OAIPullThroughCacheRule::getCreatedAt() const {
    return m_created_at;
}
void OAIPullThroughCacheRule::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIPullThroughCacheRule::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIPullThroughCacheRule::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIPullThroughCacheRule::getRegistryId() const {
    return m_registry_id;
}
void OAIPullThroughCacheRule::setRegistryId(const QString &registry_id) {
    m_registry_id = registry_id;
    m_registry_id_isSet = true;
}

bool OAIPullThroughCacheRule::is_registry_id_Set() const{
    return m_registry_id_isSet;
}

bool OAIPullThroughCacheRule::is_registry_id_Valid() const{
    return m_registry_id_isValid;
}

bool OAIPullThroughCacheRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ecr_repository_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upstream_registry_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registry_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPullThroughCacheRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
