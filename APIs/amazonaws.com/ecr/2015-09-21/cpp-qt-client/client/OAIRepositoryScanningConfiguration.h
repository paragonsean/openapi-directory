/**
 * Amazon EC2 Container Registry
 * <fullname>Amazon Elastic Container Registry</fullname> <p>Amazon Elastic Container Registry (Amazon ECR) is a managed container image registry service. Customers can use the familiar Docker CLI, or their preferred client, to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports private repositories with resource-based permissions using IAM so that specific users or Amazon EC2 instances can access repositories and images.</p> <p>Amazon ECR has service endpoints in each supported Region. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/ecr.html\">Amazon ECR endpoints</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2015-09-21
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRepositoryScanningConfiguration.h
 *
 * The details of the scanning configuration for a repository.
 */

#ifndef OAIRepositoryScanningConfiguration_H
#define OAIRepositoryScanningConfiguration_H

#include <QJsonObject>

#include "OAIScanFrequency.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIRepositoryScanningConfiguration : public OAIObject {
public:
    OAIRepositoryScanningConfiguration();
    OAIRepositoryScanningConfiguration(QString json);
    ~OAIRepositoryScanningConfiguration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getRepositoryArn() const;
    void setRepositoryArn(const QString &repository_arn);
    bool is_repository_arn_Set() const;
    bool is_repository_arn_Valid() const;

    QString getRepositoryName() const;
    void setRepositoryName(const QString &repository_name);
    bool is_repository_name_Set() const;
    bool is_repository_name_Valid() const;

    bool getScanOnPush() const;
    void setScanOnPush(const bool &scan_on_push);
    bool is_scan_on_push_Set() const;
    bool is_scan_on_push_Valid() const;

    OAIScanFrequency getScanFrequency() const;
    void setScanFrequency(const OAIScanFrequency &scan_frequency);
    bool is_scan_frequency_Set() const;
    bool is_scan_frequency_Valid() const;

    QList getAppliedScanFilters() const;
    void setAppliedScanFilters(const QList &applied_scan_filters);
    bool is_applied_scan_filters_Set() const;
    bool is_applied_scan_filters_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_repository_arn;
    bool m_repository_arn_isSet;
    bool m_repository_arn_isValid;

    QString m_repository_name;
    bool m_repository_name_isSet;
    bool m_repository_name_isValid;

    bool m_scan_on_push;
    bool m_scan_on_push_isSet;
    bool m_scan_on_push_isValid;

    OAIScanFrequency m_scan_frequency;
    bool m_scan_frequency_isSet;
    bool m_scan_frequency_isValid;

    QList m_applied_scan_filters;
    bool m_applied_scan_filters_isSet;
    bool m_applied_scan_filters_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRepositoryScanningConfiguration)

#endif // OAIRepositoryScanningConfiguration_H
