/**
 * Amazon EC2 Container Registry
 * <fullname>Amazon Elastic Container Registry</fullname> <p>Amazon Elastic Container Registry (Amazon ECR) is a managed container image registry service. Customers can use the familiar Docker CLI, or their preferred client, to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports private repositories with resource-based permissions using IAM so that specific users or Amazon EC2 instances can access repositories and images.</p> <p>Amazon ECR has service endpoints in each supported Region. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/ecr.html\">Amazon ECR endpoints</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2015-09-21
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRepositoryFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRepositoryFilter::OAIRepositoryFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRepositoryFilter::OAIRepositoryFilter() {
    this->initializeModel();
}

OAIRepositoryFilter::~OAIRepositoryFilter() {}

void OAIRepositoryFilter::initializeModel() {

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_filter_type_isSet = false;
    m_filter_type_isValid = false;
}

void OAIRepositoryFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRepositoryFilter::fromJsonObject(QJsonObject json) {

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_filter_type_isValid = ::OpenAPI::fromJsonValue(m_filter_type, json[QString("filterType")]);
    m_filter_type_isSet = !json[QString("filterType")].isNull() && m_filter_type_isValid;
}

QString OAIRepositoryFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRepositoryFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_filter_isSet) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_filter_type.isSet()) {
        obj.insert(QString("filterType"), ::OpenAPI::toJsonValue(m_filter_type));
    }
    return obj;
}

QString OAIRepositoryFilter::getFilter() const {
    return m_filter;
}
void OAIRepositoryFilter::setFilter(const QString &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIRepositoryFilter::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIRepositoryFilter::is_filter_Valid() const{
    return m_filter_isValid;
}

OAIRepositoryFilterType OAIRepositoryFilter::getFilterType() const {
    return m_filter_type;
}
void OAIRepositoryFilter::setFilterType(const OAIRepositoryFilterType &filter_type) {
    m_filter_type = filter_type;
    m_filter_type_isSet = true;
}

bool OAIRepositoryFilter::is_filter_type_Set() const{
    return m_filter_type_isSet;
}

bool OAIRepositoryFilter::is_filter_type_Valid() const{
    return m_filter_type_isValid;
}

bool OAIRepositoryFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRepositoryFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_filter_isValid && m_filter_type_isValid && true;
}

} // namespace OpenAPI
