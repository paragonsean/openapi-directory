/**
 * Amazon EC2 Container Registry
 * <fullname>Amazon Elastic Container Registry</fullname> <p>Amazon Elastic Container Registry (Amazon ECR) is a managed container image registry service. Customers can use the familiar Docker CLI, or their preferred client, to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports private repositories with resource-based permissions using IAM so that specific users or Amazon EC2 instances can access repositories and images.</p> <p>Amazon ECR has service endpoints in each supported Region. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/ecr.html\">Amazon ECR endpoints</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2015-09-21
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIVulnerablePackage.h
 *
 * Information on the vulnerable package identified by a finding.
 */

#ifndef OAIVulnerablePackage_H
#define OAIVulnerablePackage_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIVulnerablePackage : public OAIObject {
public:
    OAIVulnerablePackage();
    OAIVulnerablePackage(QString json);
    ~OAIVulnerablePackage() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getArch() const;
    void setArch(const QString &arch);
    bool is_arch_Set() const;
    bool is_arch_Valid() const;

    qint32 getEpoch() const;
    void setEpoch(const qint32 &epoch);
    bool is_epoch_Set() const;
    bool is_epoch_Valid() const;

    QString getFilePath() const;
    void setFilePath(const QString &file_path);
    bool is_file_path_Set() const;
    bool is_file_path_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getPackageManager() const;
    void setPackageManager(const QString &package_manager);
    bool is_package_manager_Set() const;
    bool is_package_manager_Valid() const;

    QString getRelease() const;
    void setRelease(const QString &release);
    bool is_release_Set() const;
    bool is_release_Valid() const;

    QString getSourceLayerHash() const;
    void setSourceLayerHash(const QString &source_layer_hash);
    bool is_source_layer_hash_Set() const;
    bool is_source_layer_hash_Valid() const;

    QString getVersion() const;
    void setVersion(const QString &version);
    bool is_version_Set() const;
    bool is_version_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_arch;
    bool m_arch_isSet;
    bool m_arch_isValid;

    qint32 m_epoch;
    bool m_epoch_isSet;
    bool m_epoch_isValid;

    QString m_file_path;
    bool m_file_path_isSet;
    bool m_file_path_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_package_manager;
    bool m_package_manager_isSet;
    bool m_package_manager_isValid;

    QString m_release;
    bool m_release_isSet;
    bool m_release_isValid;

    QString m_source_layer_hash;
    bool m_source_layer_hash_isSet;
    bool m_source_layer_hash_isValid;

    QString m_version;
    bool m_version_isSet;
    bool m_version_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIVulnerablePackage)

#endif // OAIVulnerablePackage_H
