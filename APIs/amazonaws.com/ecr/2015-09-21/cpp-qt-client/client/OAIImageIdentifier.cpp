/**
 * Amazon EC2 Container Registry
 * <fullname>Amazon Elastic Container Registry</fullname> <p>Amazon Elastic Container Registry (Amazon ECR) is a managed container image registry service. Customers can use the familiar Docker CLI, or their preferred client, to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports private repositories with resource-based permissions using IAM so that specific users or Amazon EC2 instances can access repositories and images.</p> <p>Amazon ECR has service endpoints in each supported Region. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/ecr.html\">Amazon ECR endpoints</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2015-09-21
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageIdentifier.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageIdentifier::OAIImageIdentifier(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageIdentifier::OAIImageIdentifier() {
    this->initializeModel();
}

OAIImageIdentifier::~OAIImageIdentifier() {}

void OAIImageIdentifier::initializeModel() {

    m_image_digest_isSet = false;
    m_image_digest_isValid = false;

    m_image_tag_isSet = false;
    m_image_tag_isValid = false;
}

void OAIImageIdentifier::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageIdentifier::fromJsonObject(QJsonObject json) {

    m_image_digest_isValid = ::OpenAPI::fromJsonValue(m_image_digest, json[QString("imageDigest")]);
    m_image_digest_isSet = !json[QString("imageDigest")].isNull() && m_image_digest_isValid;

    m_image_tag_isValid = ::OpenAPI::fromJsonValue(m_image_tag, json[QString("imageTag")]);
    m_image_tag_isSet = !json[QString("imageTag")].isNull() && m_image_tag_isValid;
}

QString OAIImageIdentifier::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageIdentifier::asJsonObject() const {
    QJsonObject obj;
    if (m_image_digest_isSet) {
        obj.insert(QString("imageDigest"), ::OpenAPI::toJsonValue(m_image_digest));
    }
    if (m_image_tag_isSet) {
        obj.insert(QString("imageTag"), ::OpenAPI::toJsonValue(m_image_tag));
    }
    return obj;
}

QString OAIImageIdentifier::getImageDigest() const {
    return m_image_digest;
}
void OAIImageIdentifier::setImageDigest(const QString &image_digest) {
    m_image_digest = image_digest;
    m_image_digest_isSet = true;
}

bool OAIImageIdentifier::is_image_digest_Set() const{
    return m_image_digest_isSet;
}

bool OAIImageIdentifier::is_image_digest_Valid() const{
    return m_image_digest_isValid;
}

QString OAIImageIdentifier::getImageTag() const {
    return m_image_tag;
}
void OAIImageIdentifier::setImageTag(const QString &image_tag) {
    m_image_tag = image_tag;
    m_image_tag_isSet = true;
}

bool OAIImageIdentifier::is_image_tag_Set() const{
    return m_image_tag_isSet;
}

bool OAIImageIdentifier::is_image_tag_Valid() const{
    return m_image_tag_isValid;
}

bool OAIImageIdentifier::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_image_digest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_tag_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageIdentifier::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
