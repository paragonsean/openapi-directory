/**
 * Amazon EC2 Container Registry
 * <fullname>Amazon Elastic Container Registry</fullname> <p>Amazon Elastic Container Registry (Amazon ECR) is a managed container image registry service. Customers can use the familiar Docker CLI, or their preferred client, to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports private repositories with resource-based permissions using IAM so that specific users or Amazon EC2 instances can access repositories and images.</p> <p>Amazon ECR has service endpoints in each supported Region. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/ecr.html\">Amazon ECR endpoints</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2015-09-21
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIImageScanFindings.h
 *
 * The details of an image scan.
 */

#ifndef OAIImageScanFindings_H
#define OAIImageScanFindings_H

#include <QJsonObject>

#include <QDateTime>
#include <QList>
#include <QMap>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIImageScanFindings : public OAIObject {
public:
    OAIImageScanFindings();
    OAIImageScanFindings(QString json);
    ~OAIImageScanFindings() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getImageScanCompletedAt() const;
    void setImageScanCompletedAt(const QDateTime &image_scan_completed_at);
    bool is_image_scan_completed_at_Set() const;
    bool is_image_scan_completed_at_Valid() const;

    QDateTime getVulnerabilitySourceUpdatedAt() const;
    void setVulnerabilitySourceUpdatedAt(const QDateTime &vulnerability_source_updated_at);
    bool is_vulnerability_source_updated_at_Set() const;
    bool is_vulnerability_source_updated_at_Valid() const;

    QMap getFindingSeverityCounts() const;
    void setFindingSeverityCounts(const QMap &finding_severity_counts);
    bool is_finding_severity_counts_Set() const;
    bool is_finding_severity_counts_Valid() const;

    QList getFindings() const;
    void setFindings(const QList &findings);
    bool is_findings_Set() const;
    bool is_findings_Valid() const;

    QList getEnhancedFindings() const;
    void setEnhancedFindings(const QList &enhanced_findings);
    bool is_enhanced_findings_Set() const;
    bool is_enhanced_findings_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_image_scan_completed_at;
    bool m_image_scan_completed_at_isSet;
    bool m_image_scan_completed_at_isValid;

    QDateTime m_vulnerability_source_updated_at;
    bool m_vulnerability_source_updated_at_isSet;
    bool m_vulnerability_source_updated_at_isValid;

    QMap m_finding_severity_counts;
    bool m_finding_severity_counts_isSet;
    bool m_finding_severity_counts_isValid;

    QList m_findings;
    bool m_findings_isSet;
    bool m_findings_isValid;

    QList m_enhanced_findings;
    bool m_enhanced_findings_isSet;
    bool m_enhanced_findings_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIImageScanFindings)

#endif // OAIImageScanFindings_H
