/**
 * Amazon EC2 Container Registry
 * <fullname>Amazon Elastic Container Registry</fullname> <p>Amazon Elastic Container Registry (Amazon ECR) is a managed container image registry service. Customers can use the familiar Docker CLI, or their preferred client, to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports private repositories with resource-based permissions using IAM so that specific users or Amazon EC2 instances can access repositories and images.</p> <p>Amazon ECR has service endpoints in each supported Region. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/ecr.html\">Amazon ECR endpoints</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2015-09-21
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnhancedImageScanFinding.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnhancedImageScanFinding::OAIEnhancedImageScanFinding(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnhancedImageScanFinding::OAIEnhancedImageScanFinding() {
    this->initializeModel();
}

OAIEnhancedImageScanFinding::~OAIEnhancedImageScanFinding() {}

void OAIEnhancedImageScanFinding::initializeModel() {

    m_aws_account_id_isSet = false;
    m_aws_account_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_finding_arn_isSet = false;
    m_finding_arn_isValid = false;

    m_first_observed_at_isSet = false;
    m_first_observed_at_isValid = false;

    m_last_observed_at_isSet = false;
    m_last_observed_at_isValid = false;

    m_package_vulnerability_details_isSet = false;
    m_package_vulnerability_details_isValid = false;

    m_remediation_isSet = false;
    m_remediation_isValid = false;

    m_resources_isSet = false;
    m_resources_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_score_details_isSet = false;
    m_score_details_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIEnhancedImageScanFinding::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnhancedImageScanFinding::fromJsonObject(QJsonObject json) {

    m_aws_account_id_isValid = ::OpenAPI::fromJsonValue(m_aws_account_id, json[QString("awsAccountId")]);
    m_aws_account_id_isSet = !json[QString("awsAccountId")].isNull() && m_aws_account_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_finding_arn_isValid = ::OpenAPI::fromJsonValue(m_finding_arn, json[QString("findingArn")]);
    m_finding_arn_isSet = !json[QString("findingArn")].isNull() && m_finding_arn_isValid;

    m_first_observed_at_isValid = ::OpenAPI::fromJsonValue(m_first_observed_at, json[QString("firstObservedAt")]);
    m_first_observed_at_isSet = !json[QString("firstObservedAt")].isNull() && m_first_observed_at_isValid;

    m_last_observed_at_isValid = ::OpenAPI::fromJsonValue(m_last_observed_at, json[QString("lastObservedAt")]);
    m_last_observed_at_isSet = !json[QString("lastObservedAt")].isNull() && m_last_observed_at_isValid;

    m_package_vulnerability_details_isValid = ::OpenAPI::fromJsonValue(m_package_vulnerability_details, json[QString("packageVulnerabilityDetails")]);
    m_package_vulnerability_details_isSet = !json[QString("packageVulnerabilityDetails")].isNull() && m_package_vulnerability_details_isValid;

    m_remediation_isValid = ::OpenAPI::fromJsonValue(m_remediation, json[QString("remediation")]);
    m_remediation_isSet = !json[QString("remediation")].isNull() && m_remediation_isValid;

    m_resources_isValid = ::OpenAPI::fromJsonValue(m_resources, json[QString("resources")]);
    m_resources_isSet = !json[QString("resources")].isNull() && m_resources_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;

    m_score_details_isValid = ::OpenAPI::fromJsonValue(m_score_details, json[QString("scoreDetails")]);
    m_score_details_isSet = !json[QString("scoreDetails")].isNull() && m_score_details_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;
}

QString OAIEnhancedImageScanFinding::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnhancedImageScanFinding::asJsonObject() const {
    QJsonObject obj;
    if (m_aws_account_id_isSet) {
        obj.insert(QString("awsAccountId"), ::OpenAPI::toJsonValue(m_aws_account_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_finding_arn_isSet) {
        obj.insert(QString("findingArn"), ::OpenAPI::toJsonValue(m_finding_arn));
    }
    if (m_first_observed_at_isSet) {
        obj.insert(QString("firstObservedAt"), ::OpenAPI::toJsonValue(m_first_observed_at));
    }
    if (m_last_observed_at_isSet) {
        obj.insert(QString("lastObservedAt"), ::OpenAPI::toJsonValue(m_last_observed_at));
    }
    if (m_package_vulnerability_details.isSet()) {
        obj.insert(QString("packageVulnerabilityDetails"), ::OpenAPI::toJsonValue(m_package_vulnerability_details));
    }
    if (m_remediation.isSet()) {
        obj.insert(QString("remediation"), ::OpenAPI::toJsonValue(m_remediation));
    }
    if (m_resources.isSet()) {
        obj.insert(QString("resources"), ::OpenAPI::toJsonValue(m_resources));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_score_details.isSet()) {
        obj.insert(QString("scoreDetails"), ::OpenAPI::toJsonValue(m_score_details));
    }
    if (m_severity_isSet) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QString OAIEnhancedImageScanFinding::getAwsAccountId() const {
    return m_aws_account_id;
}
void OAIEnhancedImageScanFinding::setAwsAccountId(const QString &aws_account_id) {
    m_aws_account_id = aws_account_id;
    m_aws_account_id_isSet = true;
}

bool OAIEnhancedImageScanFinding::is_aws_account_id_Set() const{
    return m_aws_account_id_isSet;
}

bool OAIEnhancedImageScanFinding::is_aws_account_id_Valid() const{
    return m_aws_account_id_isValid;
}

QString OAIEnhancedImageScanFinding::getDescription() const {
    return m_description;
}
void OAIEnhancedImageScanFinding::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIEnhancedImageScanFinding::is_description_Set() const{
    return m_description_isSet;
}

bool OAIEnhancedImageScanFinding::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIEnhancedImageScanFinding::getFindingArn() const {
    return m_finding_arn;
}
void OAIEnhancedImageScanFinding::setFindingArn(const QString &finding_arn) {
    m_finding_arn = finding_arn;
    m_finding_arn_isSet = true;
}

bool OAIEnhancedImageScanFinding::is_finding_arn_Set() const{
    return m_finding_arn_isSet;
}

bool OAIEnhancedImageScanFinding::is_finding_arn_Valid() const{
    return m_finding_arn_isValid;
}

QDateTime OAIEnhancedImageScanFinding::getFirstObservedAt() const {
    return m_first_observed_at;
}
void OAIEnhancedImageScanFinding::setFirstObservedAt(const QDateTime &first_observed_at) {
    m_first_observed_at = first_observed_at;
    m_first_observed_at_isSet = true;
}

bool OAIEnhancedImageScanFinding::is_first_observed_at_Set() const{
    return m_first_observed_at_isSet;
}

bool OAIEnhancedImageScanFinding::is_first_observed_at_Valid() const{
    return m_first_observed_at_isValid;
}

QDateTime OAIEnhancedImageScanFinding::getLastObservedAt() const {
    return m_last_observed_at;
}
void OAIEnhancedImageScanFinding::setLastObservedAt(const QDateTime &last_observed_at) {
    m_last_observed_at = last_observed_at;
    m_last_observed_at_isSet = true;
}

bool OAIEnhancedImageScanFinding::is_last_observed_at_Set() const{
    return m_last_observed_at_isSet;
}

bool OAIEnhancedImageScanFinding::is_last_observed_at_Valid() const{
    return m_last_observed_at_isValid;
}

OAIEnhancedImageScanFinding_packageVulnerabilityDetails OAIEnhancedImageScanFinding::getPackageVulnerabilityDetails() const {
    return m_package_vulnerability_details;
}
void OAIEnhancedImageScanFinding::setPackageVulnerabilityDetails(const OAIEnhancedImageScanFinding_packageVulnerabilityDetails &package_vulnerability_details) {
    m_package_vulnerability_details = package_vulnerability_details;
    m_package_vulnerability_details_isSet = true;
}

bool OAIEnhancedImageScanFinding::is_package_vulnerability_details_Set() const{
    return m_package_vulnerability_details_isSet;
}

bool OAIEnhancedImageScanFinding::is_package_vulnerability_details_Valid() const{
    return m_package_vulnerability_details_isValid;
}

OAIEnhancedImageScanFinding_remediation OAIEnhancedImageScanFinding::getRemediation() const {
    return m_remediation;
}
void OAIEnhancedImageScanFinding::setRemediation(const OAIEnhancedImageScanFinding_remediation &remediation) {
    m_remediation = remediation;
    m_remediation_isSet = true;
}

bool OAIEnhancedImageScanFinding::is_remediation_Set() const{
    return m_remediation_isSet;
}

bool OAIEnhancedImageScanFinding::is_remediation_Valid() const{
    return m_remediation_isValid;
}

QList OAIEnhancedImageScanFinding::getResources() const {
    return m_resources;
}
void OAIEnhancedImageScanFinding::setResources(const QList &resources) {
    m_resources = resources;
    m_resources_isSet = true;
}

bool OAIEnhancedImageScanFinding::is_resources_Set() const{
    return m_resources_isSet;
}

bool OAIEnhancedImageScanFinding::is_resources_Valid() const{
    return m_resources_isValid;
}

double OAIEnhancedImageScanFinding::getScore() const {
    return m_score;
}
void OAIEnhancedImageScanFinding::setScore(const double &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIEnhancedImageScanFinding::is_score_Set() const{
    return m_score_isSet;
}

bool OAIEnhancedImageScanFinding::is_score_Valid() const{
    return m_score_isValid;
}

OAIEnhancedImageScanFinding_scoreDetails OAIEnhancedImageScanFinding::getScoreDetails() const {
    return m_score_details;
}
void OAIEnhancedImageScanFinding::setScoreDetails(const OAIEnhancedImageScanFinding_scoreDetails &score_details) {
    m_score_details = score_details;
    m_score_details_isSet = true;
}

bool OAIEnhancedImageScanFinding::is_score_details_Set() const{
    return m_score_details_isSet;
}

bool OAIEnhancedImageScanFinding::is_score_details_Valid() const{
    return m_score_details_isValid;
}

QString OAIEnhancedImageScanFinding::getSeverity() const {
    return m_severity;
}
void OAIEnhancedImageScanFinding::setSeverity(const QString &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAIEnhancedImageScanFinding::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAIEnhancedImageScanFinding::is_severity_Valid() const{
    return m_severity_isValid;
}

QString OAIEnhancedImageScanFinding::getStatus() const {
    return m_status;
}
void OAIEnhancedImageScanFinding::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIEnhancedImageScanFinding::is_status_Set() const{
    return m_status_isSet;
}

bool OAIEnhancedImageScanFinding::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIEnhancedImageScanFinding::getTitle() const {
    return m_title;
}
void OAIEnhancedImageScanFinding::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIEnhancedImageScanFinding::is_title_Set() const{
    return m_title_isSet;
}

bool OAIEnhancedImageScanFinding::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIEnhancedImageScanFinding::getType() const {
    return m_type;
}
void OAIEnhancedImageScanFinding::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIEnhancedImageScanFinding::is_type_Set() const{
    return m_type_isSet;
}

bool OAIEnhancedImageScanFinding::is_type_Valid() const{
    return m_type_isValid;
}

QDateTime OAIEnhancedImageScanFinding::getUpdatedAt() const {
    return m_updated_at;
}
void OAIEnhancedImageScanFinding::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIEnhancedImageScanFinding::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIEnhancedImageScanFinding::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIEnhancedImageScanFinding::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aws_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_finding_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_observed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_observed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_vulnerability_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_remediation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resources.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnhancedImageScanFinding::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
