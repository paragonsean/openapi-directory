/**
 * Amazon EC2 Container Registry
 * <fullname>Amazon Elastic Container Registry</fullname> <p>Amazon Elastic Container Registry (Amazon ECR) is a managed container image registry service. Customers can use the familiar Docker CLI, or their preferred client, to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports private repositories with resource-based permissions using IAM so that specific users or Amazon EC2 instances can access repositories and images.</p> <p>Amazon ECR has service endpoints in each supported Region. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/ecr.html\">Amazon ECR endpoints</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2015-09-21
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeRepositoriesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeRepositoriesRequest::OAIDescribeRepositoriesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeRepositoriesRequest::OAIDescribeRepositoriesRequest() {
    this->initializeModel();
}

OAIDescribeRepositoriesRequest::~OAIDescribeRepositoriesRequest() {}

void OAIDescribeRepositoriesRequest::initializeModel() {

    m_registry_id_isSet = false;
    m_registry_id_isValid = false;

    m_repository_names_isSet = false;
    m_repository_names_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;
}

void OAIDescribeRepositoriesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeRepositoriesRequest::fromJsonObject(QJsonObject json) {

    m_registry_id_isValid = ::OpenAPI::fromJsonValue(m_registry_id, json[QString("registryId")]);
    m_registry_id_isSet = !json[QString("registryId")].isNull() && m_registry_id_isValid;

    m_repository_names_isValid = ::OpenAPI::fromJsonValue(m_repository_names, json[QString("repositoryNames")]);
    m_repository_names_isSet = !json[QString("repositoryNames")].isNull() && m_repository_names_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("maxResults")]);
    m_max_results_isSet = !json[QString("maxResults")].isNull() && m_max_results_isValid;
}

QString OAIDescribeRepositoriesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeRepositoriesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_registry_id_isSet) {
        obj.insert(QString("registryId"), ::OpenAPI::toJsonValue(m_registry_id));
    }
    if (m_repository_names.isSet()) {
        obj.insert(QString("repositoryNames"), ::OpenAPI::toJsonValue(m_repository_names));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("maxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    return obj;
}

QString OAIDescribeRepositoriesRequest::getRegistryId() const {
    return m_registry_id;
}
void OAIDescribeRepositoriesRequest::setRegistryId(const QString &registry_id) {
    m_registry_id = registry_id;
    m_registry_id_isSet = true;
}

bool OAIDescribeRepositoriesRequest::is_registry_id_Set() const{
    return m_registry_id_isSet;
}

bool OAIDescribeRepositoriesRequest::is_registry_id_Valid() const{
    return m_registry_id_isValid;
}

QList OAIDescribeRepositoriesRequest::getRepositoryNames() const {
    return m_repository_names;
}
void OAIDescribeRepositoriesRequest::setRepositoryNames(const QList &repository_names) {
    m_repository_names = repository_names;
    m_repository_names_isSet = true;
}

bool OAIDescribeRepositoriesRequest::is_repository_names_Set() const{
    return m_repository_names_isSet;
}

bool OAIDescribeRepositoriesRequest::is_repository_names_Valid() const{
    return m_repository_names_isValid;
}

QString OAIDescribeRepositoriesRequest::getNextToken() const {
    return m_next_token;
}
void OAIDescribeRepositoriesRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIDescribeRepositoriesRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIDescribeRepositoriesRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIDescribeRepositoriesRequest::getMaxResults() const {
    return m_max_results;
}
void OAIDescribeRepositoriesRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIDescribeRepositoriesRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIDescribeRepositoriesRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

bool OAIDescribeRepositoriesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_registry_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_names.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeRepositoriesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
