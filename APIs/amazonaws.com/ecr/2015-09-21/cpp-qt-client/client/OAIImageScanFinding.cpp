/**
 * Amazon EC2 Container Registry
 * <fullname>Amazon Elastic Container Registry</fullname> <p>Amazon Elastic Container Registry (Amazon ECR) is a managed container image registry service. Customers can use the familiar Docker CLI, or their preferred client, to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports private repositories with resource-based permissions using IAM so that specific users or Amazon EC2 instances can access repositories and images.</p> <p>Amazon ECR has service endpoints in each supported Region. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/ecr.html\">Amazon ECR endpoints</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2015-09-21
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageScanFinding.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageScanFinding::OAIImageScanFinding(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageScanFinding::OAIImageScanFinding() {
    this->initializeModel();
}

OAIImageScanFinding::~OAIImageScanFinding() {}

void OAIImageScanFinding::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;
}

void OAIImageScanFinding::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageScanFinding::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;
}

QString OAIImageScanFinding::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageScanFinding::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    if (m_severity.isSet()) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    if (m_attributes.isSet()) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    return obj;
}

QString OAIImageScanFinding::getName() const {
    return m_name;
}
void OAIImageScanFinding::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIImageScanFinding::is_name_Set() const{
    return m_name_isSet;
}

bool OAIImageScanFinding::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIImageScanFinding::getDescription() const {
    return m_description;
}
void OAIImageScanFinding::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIImageScanFinding::is_description_Set() const{
    return m_description_isSet;
}

bool OAIImageScanFinding::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIImageScanFinding::getUri() const {
    return m_uri;
}
void OAIImageScanFinding::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIImageScanFinding::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIImageScanFinding::is_uri_Valid() const{
    return m_uri_isValid;
}

OAIFindingSeverity OAIImageScanFinding::getSeverity() const {
    return m_severity;
}
void OAIImageScanFinding::setSeverity(const OAIFindingSeverity &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAIImageScanFinding::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAIImageScanFinding::is_severity_Valid() const{
    return m_severity_isValid;
}

QList OAIImageScanFinding::getAttributes() const {
    return m_attributes;
}
void OAIImageScanFinding::setAttributes(const QList &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIImageScanFinding::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIImageScanFinding::is_attributes_Valid() const{
    return m_attributes_isValid;
}

bool OAIImageScanFinding::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageScanFinding::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
