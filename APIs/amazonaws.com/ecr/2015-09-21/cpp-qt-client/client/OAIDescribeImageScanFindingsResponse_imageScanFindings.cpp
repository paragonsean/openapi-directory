/**
 * Amazon EC2 Container Registry
 * <fullname>Amazon Elastic Container Registry</fullname> <p>Amazon Elastic Container Registry (Amazon ECR) is a managed container image registry service. Customers can use the familiar Docker CLI, or their preferred client, to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports private repositories with resource-based permissions using IAM so that specific users or Amazon EC2 instances can access repositories and images.</p> <p>Amazon ECR has service endpoints in each supported Region. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/ecr.html\">Amazon ECR endpoints</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2015-09-21
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeImageScanFindingsResponse_imageScanFindings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeImageScanFindingsResponse_imageScanFindings::OAIDescribeImageScanFindingsResponse_imageScanFindings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeImageScanFindingsResponse_imageScanFindings::OAIDescribeImageScanFindingsResponse_imageScanFindings() {
    this->initializeModel();
}

OAIDescribeImageScanFindingsResponse_imageScanFindings::~OAIDescribeImageScanFindingsResponse_imageScanFindings() {}

void OAIDescribeImageScanFindingsResponse_imageScanFindings::initializeModel() {

    m_image_scan_completed_at_isSet = false;
    m_image_scan_completed_at_isValid = false;

    m_vulnerability_source_updated_at_isSet = false;
    m_vulnerability_source_updated_at_isValid = false;

    m_finding_severity_counts_isSet = false;
    m_finding_severity_counts_isValid = false;

    m_findings_isSet = false;
    m_findings_isValid = false;

    m_enhanced_findings_isSet = false;
    m_enhanced_findings_isValid = false;
}

void OAIDescribeImageScanFindingsResponse_imageScanFindings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeImageScanFindingsResponse_imageScanFindings::fromJsonObject(QJsonObject json) {

    m_image_scan_completed_at_isValid = ::OpenAPI::fromJsonValue(m_image_scan_completed_at, json[QString("imageScanCompletedAt")]);
    m_image_scan_completed_at_isSet = !json[QString("imageScanCompletedAt")].isNull() && m_image_scan_completed_at_isValid;

    m_vulnerability_source_updated_at_isValid = ::OpenAPI::fromJsonValue(m_vulnerability_source_updated_at, json[QString("vulnerabilitySourceUpdatedAt")]);
    m_vulnerability_source_updated_at_isSet = !json[QString("vulnerabilitySourceUpdatedAt")].isNull() && m_vulnerability_source_updated_at_isValid;

    m_finding_severity_counts_isValid = ::OpenAPI::fromJsonValue(m_finding_severity_counts, json[QString("findingSeverityCounts")]);
    m_finding_severity_counts_isSet = !json[QString("findingSeverityCounts")].isNull() && m_finding_severity_counts_isValid;

    m_findings_isValid = ::OpenAPI::fromJsonValue(m_findings, json[QString("findings")]);
    m_findings_isSet = !json[QString("findings")].isNull() && m_findings_isValid;

    m_enhanced_findings_isValid = ::OpenAPI::fromJsonValue(m_enhanced_findings, json[QString("enhancedFindings")]);
    m_enhanced_findings_isSet = !json[QString("enhancedFindings")].isNull() && m_enhanced_findings_isValid;
}

QString OAIDescribeImageScanFindingsResponse_imageScanFindings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeImageScanFindingsResponse_imageScanFindings::asJsonObject() const {
    QJsonObject obj;
    if (m_image_scan_completed_at_isSet) {
        obj.insert(QString("imageScanCompletedAt"), ::OpenAPI::toJsonValue(m_image_scan_completed_at));
    }
    if (m_vulnerability_source_updated_at_isSet) {
        obj.insert(QString("vulnerabilitySourceUpdatedAt"), ::OpenAPI::toJsonValue(m_vulnerability_source_updated_at));
    }
    if (m_finding_severity_counts.isSet()) {
        obj.insert(QString("findingSeverityCounts"), ::OpenAPI::toJsonValue(m_finding_severity_counts));
    }
    if (m_findings.isSet()) {
        obj.insert(QString("findings"), ::OpenAPI::toJsonValue(m_findings));
    }
    if (m_enhanced_findings.isSet()) {
        obj.insert(QString("enhancedFindings"), ::OpenAPI::toJsonValue(m_enhanced_findings));
    }
    return obj;
}

QDateTime OAIDescribeImageScanFindingsResponse_imageScanFindings::getImageScanCompletedAt() const {
    return m_image_scan_completed_at;
}
void OAIDescribeImageScanFindingsResponse_imageScanFindings::setImageScanCompletedAt(const QDateTime &image_scan_completed_at) {
    m_image_scan_completed_at = image_scan_completed_at;
    m_image_scan_completed_at_isSet = true;
}

bool OAIDescribeImageScanFindingsResponse_imageScanFindings::is_image_scan_completed_at_Set() const{
    return m_image_scan_completed_at_isSet;
}

bool OAIDescribeImageScanFindingsResponse_imageScanFindings::is_image_scan_completed_at_Valid() const{
    return m_image_scan_completed_at_isValid;
}

QDateTime OAIDescribeImageScanFindingsResponse_imageScanFindings::getVulnerabilitySourceUpdatedAt() const {
    return m_vulnerability_source_updated_at;
}
void OAIDescribeImageScanFindingsResponse_imageScanFindings::setVulnerabilitySourceUpdatedAt(const QDateTime &vulnerability_source_updated_at) {
    m_vulnerability_source_updated_at = vulnerability_source_updated_at;
    m_vulnerability_source_updated_at_isSet = true;
}

bool OAIDescribeImageScanFindingsResponse_imageScanFindings::is_vulnerability_source_updated_at_Set() const{
    return m_vulnerability_source_updated_at_isSet;
}

bool OAIDescribeImageScanFindingsResponse_imageScanFindings::is_vulnerability_source_updated_at_Valid() const{
    return m_vulnerability_source_updated_at_isValid;
}

QMap OAIDescribeImageScanFindingsResponse_imageScanFindings::getFindingSeverityCounts() const {
    return m_finding_severity_counts;
}
void OAIDescribeImageScanFindingsResponse_imageScanFindings::setFindingSeverityCounts(const QMap &finding_severity_counts) {
    m_finding_severity_counts = finding_severity_counts;
    m_finding_severity_counts_isSet = true;
}

bool OAIDescribeImageScanFindingsResponse_imageScanFindings::is_finding_severity_counts_Set() const{
    return m_finding_severity_counts_isSet;
}

bool OAIDescribeImageScanFindingsResponse_imageScanFindings::is_finding_severity_counts_Valid() const{
    return m_finding_severity_counts_isValid;
}

QList OAIDescribeImageScanFindingsResponse_imageScanFindings::getFindings() const {
    return m_findings;
}
void OAIDescribeImageScanFindingsResponse_imageScanFindings::setFindings(const QList &findings) {
    m_findings = findings;
    m_findings_isSet = true;
}

bool OAIDescribeImageScanFindingsResponse_imageScanFindings::is_findings_Set() const{
    return m_findings_isSet;
}

bool OAIDescribeImageScanFindingsResponse_imageScanFindings::is_findings_Valid() const{
    return m_findings_isValid;
}

QList OAIDescribeImageScanFindingsResponse_imageScanFindings::getEnhancedFindings() const {
    return m_enhanced_findings;
}
void OAIDescribeImageScanFindingsResponse_imageScanFindings::setEnhancedFindings(const QList &enhanced_findings) {
    m_enhanced_findings = enhanced_findings;
    m_enhanced_findings_isSet = true;
}

bool OAIDescribeImageScanFindingsResponse_imageScanFindings::is_enhanced_findings_Set() const{
    return m_enhanced_findings_isSet;
}

bool OAIDescribeImageScanFindingsResponse_imageScanFindings::is_enhanced_findings_Valid() const{
    return m_enhanced_findings_isValid;
}

bool OAIDescribeImageScanFindingsResponse_imageScanFindings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_image_scan_completed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vulnerability_source_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_finding_severity_counts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_findings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enhanced_findings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeImageScanFindingsResponse_imageScanFindings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
