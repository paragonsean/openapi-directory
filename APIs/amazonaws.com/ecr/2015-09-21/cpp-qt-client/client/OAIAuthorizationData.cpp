/**
 * Amazon EC2 Container Registry
 * <fullname>Amazon Elastic Container Registry</fullname> <p>Amazon Elastic Container Registry (Amazon ECR) is a managed container image registry service. Customers can use the familiar Docker CLI, or their preferred client, to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports private repositories with resource-based permissions using IAM so that specific users or Amazon EC2 instances can access repositories and images.</p> <p>Amazon ECR has service endpoints in each supported Region. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/ecr.html\">Amazon ECR endpoints</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2015-09-21
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuthorizationData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuthorizationData::OAIAuthorizationData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuthorizationData::OAIAuthorizationData() {
    this->initializeModel();
}

OAIAuthorizationData::~OAIAuthorizationData() {}

void OAIAuthorizationData::initializeModel() {

    m_authorization_token_isSet = false;
    m_authorization_token_isValid = false;

    m_expires_at_isSet = false;
    m_expires_at_isValid = false;

    m_proxy_endpoint_isSet = false;
    m_proxy_endpoint_isValid = false;
}

void OAIAuthorizationData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuthorizationData::fromJsonObject(QJsonObject json) {

    m_authorization_token_isValid = ::OpenAPI::fromJsonValue(m_authorization_token, json[QString("authorizationToken")]);
    m_authorization_token_isSet = !json[QString("authorizationToken")].isNull() && m_authorization_token_isValid;

    m_expires_at_isValid = ::OpenAPI::fromJsonValue(m_expires_at, json[QString("expiresAt")]);
    m_expires_at_isSet = !json[QString("expiresAt")].isNull() && m_expires_at_isValid;

    m_proxy_endpoint_isValid = ::OpenAPI::fromJsonValue(m_proxy_endpoint, json[QString("proxyEndpoint")]);
    m_proxy_endpoint_isSet = !json[QString("proxyEndpoint")].isNull() && m_proxy_endpoint_isValid;
}

QString OAIAuthorizationData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuthorizationData::asJsonObject() const {
    QJsonObject obj;
    if (m_authorization_token_isSet) {
        obj.insert(QString("authorizationToken"), ::OpenAPI::toJsonValue(m_authorization_token));
    }
    if (m_expires_at_isSet) {
        obj.insert(QString("expiresAt"), ::OpenAPI::toJsonValue(m_expires_at));
    }
    if (m_proxy_endpoint_isSet) {
        obj.insert(QString("proxyEndpoint"), ::OpenAPI::toJsonValue(m_proxy_endpoint));
    }
    return obj;
}

QString OAIAuthorizationData::getAuthorizationToken() const {
    return m_authorization_token;
}
void OAIAuthorizationData::setAuthorizationToken(const QString &authorization_token) {
    m_authorization_token = authorization_token;
    m_authorization_token_isSet = true;
}

bool OAIAuthorizationData::is_authorization_token_Set() const{
    return m_authorization_token_isSet;
}

bool OAIAuthorizationData::is_authorization_token_Valid() const{
    return m_authorization_token_isValid;
}

QDateTime OAIAuthorizationData::getExpiresAt() const {
    return m_expires_at;
}
void OAIAuthorizationData::setExpiresAt(const QDateTime &expires_at) {
    m_expires_at = expires_at;
    m_expires_at_isSet = true;
}

bool OAIAuthorizationData::is_expires_at_Set() const{
    return m_expires_at_isSet;
}

bool OAIAuthorizationData::is_expires_at_Valid() const{
    return m_expires_at_isValid;
}

QString OAIAuthorizationData::getProxyEndpoint() const {
    return m_proxy_endpoint;
}
void OAIAuthorizationData::setProxyEndpoint(const QString &proxy_endpoint) {
    m_proxy_endpoint = proxy_endpoint;
    m_proxy_endpoint_isSet = true;
}

bool OAIAuthorizationData::is_proxy_endpoint_Set() const{
    return m_proxy_endpoint_isSet;
}

bool OAIAuthorizationData::is_proxy_endpoint_Valid() const{
    return m_proxy_endpoint_isValid;
}

bool OAIAuthorizationData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authorization_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proxy_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuthorizationData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
