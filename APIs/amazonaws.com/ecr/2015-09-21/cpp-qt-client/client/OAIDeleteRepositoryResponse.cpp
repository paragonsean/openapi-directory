/**
 * Amazon EC2 Container Registry
 * <fullname>Amazon Elastic Container Registry</fullname> <p>Amazon Elastic Container Registry (Amazon ECR) is a managed container image registry service. Customers can use the familiar Docker CLI, or their preferred client, to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports private repositories with resource-based permissions using IAM so that specific users or Amazon EC2 instances can access repositories and images.</p> <p>Amazon ECR has service endpoints in each supported Region. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/ecr.html\">Amazon ECR endpoints</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2015-09-21
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteRepositoryResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteRepositoryResponse::OAIDeleteRepositoryResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteRepositoryResponse::OAIDeleteRepositoryResponse() {
    this->initializeModel();
}

OAIDeleteRepositoryResponse::~OAIDeleteRepositoryResponse() {}

void OAIDeleteRepositoryResponse::initializeModel() {

    m_repository_isSet = false;
    m_repository_isValid = false;
}

void OAIDeleteRepositoryResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteRepositoryResponse::fromJsonObject(QJsonObject json) {

    m_repository_isValid = ::OpenAPI::fromJsonValue(m_repository, json[QString("repository")]);
    m_repository_isSet = !json[QString("repository")].isNull() && m_repository_isValid;
}

QString OAIDeleteRepositoryResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteRepositoryResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_repository.isSet()) {
        obj.insert(QString("repository"), ::OpenAPI::toJsonValue(m_repository));
    }
    return obj;
}

OAIDeleteRepositoryResponse_repository OAIDeleteRepositoryResponse::getRepository() const {
    return m_repository;
}
void OAIDeleteRepositoryResponse::setRepository(const OAIDeleteRepositoryResponse_repository &repository) {
    m_repository = repository;
    m_repository_isSet = true;
}

bool OAIDeleteRepositoryResponse::is_repository_Set() const{
    return m_repository_isSet;
}

bool OAIDeleteRepositoryResponse::is_repository_Valid() const{
    return m_repository_isValid;
}

bool OAIDeleteRepositoryResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_repository.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteRepositoryResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
