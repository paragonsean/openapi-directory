openapi: 3.0.0
info:
  contact:
    email: mike.ralphson@gmail.com
    name: Mike Ralphson
    url: https://github.com/mermade/aws2openapi
    x-twitter: PermittedSoc
  description: "<fullname>Amazon Elastic Container Registry</fullname> <p>Amazon Elastic\
    \ Container Registry (Amazon ECR) is a managed container image registry service.\
    \ Customers can use the familiar Docker CLI, or their preferred client, to push,\
    \ pull, and manage images. Amazon ECR provides a secure, scalable, and reliable\
    \ registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR\
    \ supports private repositories with resource-based permissions using IAM so that\
    \ specific users or Amazon EC2 instances can access repositories and images.</p>\
    \ <p>Amazon ECR has service endpoints in each supported Region. For more information,\
    \ see <a href=\"https://docs.aws.amazon.com/general/latest/gr/ecr.html\">Amazon\
    \ ECR endpoints</a> in the <i>Amazon Web Services General Reference</i>.</p>"
  license:
    name: Apache 2.0 License
    url: http://www.apache.org/licenses/
  termsOfService: https://aws.amazon.com/service-terms/
  title: Amazon EC2 Container Registry
  version: 2015-09-21
  x-release: v4
  x-logo:
    url: https://twitter.com/awscloud/profile_image?size=original
    backgroundColor: '#FFFFFF'
  x-providerName: amazonaws.com
  x-serviceName: ecr
  x-aws-signingName: ecr
  x-origin:
  - contentType: application/json
    url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/ecr-2015-09-21.normal.json
    converter:
      url: https://github.com/mermade/aws2openapi
      version: 1.0.0
    x-apisguru-driver: external
  x-apiClientRegistration:
    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
  - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: https://docs.aws.amazon.com/ecr/
servers:
- description: The Amazon ECR multi-region endpoint
  url: "http://api.ecr.{region}.amazonaws.com"
  variables:
    region:
      default: us-east-1
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
- description: The Amazon ECR multi-region endpoint
  url: "https://api.ecr.{region}.amazonaws.com"
  variables:
    region:
      default: us-east-1
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
- description: The Amazon ECR endpoint for China (Beijing) and China (Ningxia)
  url: "http://api.ecr.{region}.amazonaws.com.cn"
  variables:
    region:
      default: cn-north-1
      description: The AWS region
      enum:
      - cn-north-1
      - cn-northwest-1
- description: The Amazon ECR endpoint for China (Beijing) and China (Ningxia)
  url: "https://api.ecr.{region}.amazonaws.com.cn"
  variables:
    region:
      default: cn-north-1
      description: The AWS region
      enum:
      - cn-north-1
      - cn-northwest-1
security:
- hmac: []
paths:
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.BatchCheckLayerAvailability:
    post:
      description: "<p>Checks the availability of one or more image layers in a repository.</p>\
        \ <p>When an image is pushed to a repository, each image layer is checked\
        \ to verify if it has been uploaded before. If it has been uploaded, then\
        \ the image layer is skipped.</p> <note> <p>This operation is used by the\
        \ Amazon ECR proxy and is not generally used by customers for pulling and\
        \ pushing images. In most cases, you should use the <code>docker</code> CLI\
        \ to pull, tag, and push images.</p> </note>"
      operationId: batch_check_layer_availability
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - AmazonEC2ContainerRegistry_V20150921.BatchCheckLayerAvailability
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchCheckLayerAvailabilityRequest'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchCheckLayerAvailabilityResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
          description: RepositoryNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
          description: ServerException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.BatchDeleteImage:
    post:
      description: "<p>Deletes a list of specified images within a repository. Images\
        \ are specified with either an <code>imageTag</code> or <code>imageDigest</code>.</p>\
        \ <p>You can remove a tag from an image by specifying the image's tag in your\
        \ request. When you remove the last tag from an image, the image is deleted\
        \ from your repository.</p> <p>You can completely delete an image (and all\
        \ of its tags) by specifying the image's digest in your request.</p>"
      operationId: batch_delete_image
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - AmazonEC2ContainerRegistry_V20150921.BatchDeleteImage
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchDeleteImageRequest'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchDeleteImageResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
          description: ServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
          description: RepositoryNotFoundException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.BatchGetImage:
    post:
      description: "<p>Gets detailed information for an image. Images are specified\
        \ with either an <code>imageTag</code> or <code>imageDigest</code>.</p> <p>When\
        \ an image is pulled, the BatchGetImage API is called once to retrieve the\
        \ image manifest.</p>"
      operationId: batch_get_image
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - AmazonEC2ContainerRegistry_V20150921.BatchGetImage
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchGetImageRequest'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchGetImageResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
          description: ServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
          description: RepositoryNotFoundException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.BatchGetRepositoryScanningConfiguration:
    post:
      description: Gets the scanning configuration for one or more repositories.
      operationId: batch_get_repository_scanning_configuration
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - AmazonEC2ContainerRegistry_V20150921.BatchGetRepositoryScanningConfiguration
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchGetRepositoryScanningConfigurationRequest'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchGetRepositoryScanningConfigurationResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
          description: ServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
          description: RepositoryNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.CompleteLayerUpload:
    post:
      description: "<p>Informs Amazon ECR that the image layer upload has completed\
        \ for a specified registry, repository name, and upload ID. You can optionally\
        \ provide a <code>sha256</code> digest of the image layer for data validation\
        \ purposes.</p> <p>When an image is pushed, the CompleteLayerUpload API is\
        \ called once per each new image layer to verify that the upload has completed.</p>\
        \ <note> <p>This operation is used by the Amazon ECR proxy and is not generally\
        \ used by customers for pulling and pushing images. In most cases, you should\
        \ use the <code>docker</code> CLI to pull, tag, and push images.</p> </note>"
      operationId: complete_layer_upload
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - AmazonEC2ContainerRegistry_V20150921.CompleteLayerUpload
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompleteLayerUploadRequest'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompleteLayerUploadResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
          description: ServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
          description: RepositoryNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadNotFoundException'
          description: UploadNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidLayerException'
          description: InvalidLayerException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LayerPartTooSmallException'
          description: LayerPartTooSmallException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LayerAlreadyExistsException'
          description: LayerAlreadyExistsException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyUploadException'
          description: EmptyUploadException
        "488":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KmsException'
          description: KmsException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.CreatePullThroughCacheRule:
    post:
      description: Creates a pull through cache rule. A pull through cache rule provides
        a way to cache images from an external public registry in your Amazon ECR
        private registry.
      operationId: create_pull_through_cache_rule
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - AmazonEC2ContainerRegistry_V20150921.CreatePullThroughCacheRule
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePullThroughCacheRuleRequest'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatePullThroughCacheRuleResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
          description: ServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullThroughCacheRuleAlreadyExistsException'
          description: PullThroughCacheRuleAlreadyExistsException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedUpstreamRegistryException'
          description: UnsupportedUpstreamRegistryException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.CreateRepository:
    post:
      description: "Creates a repository. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/userguide/Repositories.html\"\
        >Amazon ECR repositories</a> in the <i>Amazon Elastic Container Registry User\
        \ Guide</i>."
      operationId: create_repository
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - AmazonEC2ContainerRegistry_V20150921.CreateRepository
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRepositoryRequest'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateRepositoryResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
          description: ServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidTagParameterException'
          description: InvalidTagParameterException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyTagsException'
          description: TooManyTagsException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryAlreadyExistsException'
          description: RepositoryAlreadyExistsException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KmsException'
          description: KmsException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DeleteLifecyclePolicy:
    post:
      description: Deletes the lifecycle policy associated with the specified repository.
      operationId: delete_lifecycle_policy
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - AmazonEC2ContainerRegistry_V20150921.DeleteLifecyclePolicy
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteLifecyclePolicyRequest'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteLifecyclePolicyResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
          description: ServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
          description: RepositoryNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LifecyclePolicyNotFoundException'
          description: LifecyclePolicyNotFoundException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DeletePullThroughCacheRule:
    post:
      description: Deletes a pull through cache rule.
      operationId: delete_pull_through_cache_rule
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - AmazonEC2ContainerRegistry_V20150921.DeletePullThroughCacheRule
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeletePullThroughCacheRuleRequest'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletePullThroughCacheRuleResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
          description: ServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullThroughCacheRuleNotFoundException'
          description: PullThroughCacheRuleNotFoundException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DeleteRegistryPolicy:
    post:
      description: Deletes the registry permissions policy.
      operationId: delete_registry_policy
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - AmazonEC2ContainerRegistry_V20150921.DeleteRegistryPolicy
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteRegistryPolicyRequest'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteRegistryPolicyResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
          description: ServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistryPolicyNotFoundException'
          description: RegistryPolicyNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DeleteRepository:
    post:
      description: "Deletes a repository. If the repository contains images, you must\
        \ either delete all images in the repository or use the <code>force</code>\
        \ option to delete the repository."
      operationId: delete_repository
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - AmazonEC2ContainerRegistry_V20150921.DeleteRepository
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteRepositoryRequest'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteRepositoryResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
          description: ServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
          description: RepositoryNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotEmptyException'
          description: RepositoryNotEmptyException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KmsException'
          description: KmsException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DeleteRepositoryPolicy:
    post:
      description: Deletes the repository policy associated with the specified repository.
      operationId: delete_repository_policy
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - AmazonEC2ContainerRegistry_V20150921.DeleteRepositoryPolicy
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteRepositoryPolicyRequest'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteRepositoryPolicyResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
          description: ServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
          description: RepositoryNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryPolicyNotFoundException'
          description: RepositoryPolicyNotFoundException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DescribeImageReplicationStatus:
    post:
      description: Returns the replication status for a specified image.
      operationId: describe_image_replication_status
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - AmazonEC2ContainerRegistry_V20150921.DescribeImageReplicationStatus
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeImageReplicationStatusRequest'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeImageReplicationStatusResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
          description: ServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageNotFoundException'
          description: ImageNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
          description: RepositoryNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DescribeImageScanFindings:
    post:
      description: Returns the scan findings for the specified image.
      operationId: describe_image_scan_findings
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - AmazonEC2ContainerRegistry_V20150921.DescribeImageScanFindings
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeImageScanFindingsRequest'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeImageScanFindingsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
          description: ServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
          description: RepositoryNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageNotFoundException'
          description: ImageNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScanNotFoundException'
          description: ScanNotFoundException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DescribeImages:
    post:
      description: "<p>Returns metadata about the images in a repository.</p> <note>\
        \ <p>Beginning with Docker version 1.9, the Docker client compresses image\
        \ layers before pushing them to a V2 Docker registry. The output of the <code>docker\
        \ images</code> command shows the uncompressed image size, so it may return\
        \ a larger image size than the image sizes returned by <a>DescribeImages</a>.</p>\
        \ </note>"
      operationId: describe_images
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - AmazonEC2ContainerRegistry_V20150921.DescribeImages
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeImagesRequest'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeImagesResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
          description: ServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
          description: RepositoryNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageNotFoundException'
          description: ImageNotFoundException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DescribePullThroughCacheRules:
    post:
      description: Returns the pull through cache rules for a registry.
      operationId: describe_pull_through_cache_rules
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - AmazonEC2ContainerRegistry_V20150921.DescribePullThroughCacheRules
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribePullThroughCacheRulesRequest'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribePullThroughCacheRulesResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
          description: ServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullThroughCacheRuleNotFoundException'
          description: PullThroughCacheRuleNotFoundException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DescribeRegistry:
    post:
      description: Describes the settings for a registry. The replication configuration
        for a repository can be created or updated with the <a>PutReplicationConfiguration</a>
        API action.
      operationId: describe_registry
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - AmazonEC2ContainerRegistry_V20150921.DescribeRegistry
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeRegistryRequest'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeRegistryResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
          description: ServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DescribeRepositories:
    post:
      description: Describes image repositories in a registry.
      operationId: describe_repositories
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - AmazonEC2ContainerRegistry_V20150921.DescribeRepositories
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeRepositoriesRequest'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeRepositoriesResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
          description: ServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
          description: RepositoryNotFoundException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.GetAuthorizationToken:
    post:
      description: "<p>Retrieves an authorization token. An authorization token represents\
        \ your IAM authentication credentials and can be used to access any Amazon\
        \ ECR registry that your IAM principal has access to. The authorization token\
        \ is valid for 12 hours.</p> <p>The <code>authorizationToken</code> returned\
        \ is a base64 encoded string that can be decoded and used in a <code>docker\
        \ login</code> command to authenticate to a registry. The CLI offers an <code>get-login-password</code>\
        \ command that simplifies the login process. For more information, see <a\
        \ href=\"https://docs.aws.amazon.com/AmazonECR/latest/userguide/Registries.html#registry_auth\"\
        >Registry authentication</a> in the <i>Amazon Elastic Container Registry User\
        \ Guide</i>.</p>"
      operationId: get_authorization_token
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - AmazonEC2ContainerRegistry_V20150921.GetAuthorizationToken
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetAuthorizationTokenRequest'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAuthorizationTokenResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
          description: ServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.GetDownloadUrlForLayer:
    post:
      description: "<p>Retrieves the pre-signed Amazon S3 download URL corresponding\
        \ to an image layer. You can only get URLs for image layers that are referenced\
        \ in an image.</p> <p>When an image is pulled, the GetDownloadUrlForLayer\
        \ API is called once per image layer that is not already cached.</p> <note>\
        \ <p>This operation is used by the Amazon ECR proxy and is not generally used\
        \ by customers for pulling and pushing images. In most cases, you should use\
        \ the <code>docker</code> CLI to pull, tag, and push images.</p> </note>"
      operationId: get_download_url_for_layer
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - AmazonEC2ContainerRegistry_V20150921.GetDownloadUrlForLayer
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetDownloadUrlForLayerRequest'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDownloadUrlForLayerResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
          description: ServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LayersNotFoundException'
          description: LayersNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LayerInaccessibleException'
          description: LayerInaccessibleException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
          description: RepositoryNotFoundException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.GetLifecyclePolicy:
    post:
      description: Retrieves the lifecycle policy for the specified repository.
      operationId: get_lifecycle_policy
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - AmazonEC2ContainerRegistry_V20150921.GetLifecyclePolicy
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetLifecyclePolicyRequest'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetLifecyclePolicyResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
          description: ServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
          description: RepositoryNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LifecyclePolicyNotFoundException'
          description: LifecyclePolicyNotFoundException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.GetLifecyclePolicyPreview:
    post:
      description: Retrieves the results of the lifecycle policy preview request for
        the specified repository.
      operationId: get_lifecycle_policy_preview
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - AmazonEC2ContainerRegistry_V20150921.GetLifecyclePolicyPreview
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetLifecyclePolicyPreviewRequest'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetLifecyclePolicyPreviewResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
          description: ServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
          description: RepositoryNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LifecyclePolicyPreviewNotFoundException'
          description: LifecyclePolicyPreviewNotFoundException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.GetRegistryPolicy:
    post:
      description: Retrieves the permissions policy for a registry.
      operationId: get_registry_policy
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - AmazonEC2ContainerRegistry_V20150921.GetRegistryPolicy
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetRegistryPolicyRequest'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRegistryPolicyResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
          description: ServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistryPolicyNotFoundException'
          description: RegistryPolicyNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.GetRegistryScanningConfiguration:
    post:
      description: Retrieves the scanning configuration for a registry.
      operationId: get_registry_scanning_configuration
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - AmazonEC2ContainerRegistry_V20150921.GetRegistryScanningConfiguration
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetRegistryScanningConfigurationRequest'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRegistryScanningConfigurationResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
          description: ServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.GetRepositoryPolicy:
    post:
      description: Retrieves the repository policy for the specified repository.
      operationId: get_repository_policy
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - AmazonEC2ContainerRegistry_V20150921.GetRepositoryPolicy
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetRepositoryPolicyRequest'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRepositoryPolicyResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
          description: ServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
          description: RepositoryNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryPolicyNotFoundException'
          description: RepositoryPolicyNotFoundException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.InitiateLayerUpload:
    post:
      description: "<p>Notifies Amazon ECR that you intend to upload an image layer.</p>\
        \ <p>When an image is pushed, the InitiateLayerUpload API is called once per\
        \ image layer that has not already been uploaded. Whether or not an image\
        \ layer has been uploaded is determined by the BatchCheckLayerAvailability\
        \ API action.</p> <note> <p>This operation is used by the Amazon ECR proxy\
        \ and is not generally used by customers for pulling and pushing images. In\
        \ most cases, you should use the <code>docker</code> CLI to pull, tag, and\
        \ push images.</p> </note>"
      operationId: initiate_layer_upload
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - AmazonEC2ContainerRegistry_V20150921.InitiateLayerUpload
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InitiateLayerUploadRequest'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InitiateLayerUploadResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
          description: ServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
          description: RepositoryNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KmsException'
          description: KmsException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.ListImages:
    post:
      description: "<p>Lists all the image IDs for the specified repository.</p> <p>You\
        \ can filter images based on whether or not they are tagged by using the <code>tagStatus</code>\
        \ filter and specifying either <code>TAGGED</code>, <code>UNTAGGED</code>\
        \ or <code>ANY</code>. For example, you can filter your results to return\
        \ only <code>UNTAGGED</code> images and then pipe that result to a <a>BatchDeleteImage</a>\
        \ operation to delete them. Or, you can filter your results to return only\
        \ <code>TAGGED</code> images to list all of the tags in your repository.</p>"
      operationId: list_images
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - AmazonEC2ContainerRegistry_V20150921.ListImages
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListImagesRequest'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListImagesResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
          description: ServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
          description: RepositoryNotFoundException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.ListTagsForResource:
    post:
      description: List the tags for an Amazon ECR resource.
      operationId: list_tags_for_resource
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - AmazonEC2ContainerRegistry_V20150921.ListTagsForResource
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListTagsForResourceRequest'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTagsForResourceResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
          description: RepositoryNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
          description: ServerException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.PutImage:
    post:
      description: "<p>Creates or updates the image manifest and tags associated with\
        \ an image.</p> <p>When an image is pushed and all new image layers have been\
        \ uploaded, the PutImage API is called once to create or update the image\
        \ manifest and the tags associated with the image.</p> <note> <p>This operation\
        \ is used by the Amazon ECR proxy and is not generally used by customers for\
        \ pulling and pushing images. In most cases, you should use the <code>docker</code>\
        \ CLI to pull, tag, and push images.</p> </note>"
      operationId: put_image
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - AmazonEC2ContainerRegistry_V20150921.PutImage
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutImageRequest'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutImageResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
          description: ServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
          description: RepositoryNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageAlreadyExistsException'
          description: ImageAlreadyExistsException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LayersNotFoundException'
          description: LayersNotFoundException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReferencedImagesNotFoundException'
          description: ReferencedImagesNotFoundException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageTagAlreadyExistsException'
          description: ImageTagAlreadyExistsException
        "488":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageDigestDoesNotMatchException'
          description: ImageDigestDoesNotMatchException
        "489":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KmsException'
          description: KmsException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.PutImageScanningConfiguration:
    post:
      description: "<important> <p>The <code>PutImageScanningConfiguration</code>\
        \ API is being deprecated, in favor of specifying the image scanning configuration\
        \ at the registry level. For more information, see <a>PutRegistryScanningConfiguration</a>.</p>\
        \ </important> <p>Updates the image scanning configuration for the specified\
        \ repository.</p>"
      operationId: put_image_scanning_configuration
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - AmazonEC2ContainerRegistry_V20150921.PutImageScanningConfiguration
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutImageScanningConfigurationRequest'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutImageScanningConfigurationResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
          description: ServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
          description: RepositoryNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.PutImageTagMutability:
    post:
      description: "Updates the image tag mutability settings for the specified repository.\
        \ For more information, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/userguide/image-tag-mutability.html\"\
        >Image tag mutability</a> in the <i>Amazon Elastic Container Registry User\
        \ Guide</i>."
      operationId: put_image_tag_mutability
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - AmazonEC2ContainerRegistry_V20150921.PutImageTagMutability
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutImageTagMutabilityRequest'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutImageTagMutabilityResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
          description: ServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
          description: RepositoryNotFoundException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.PutLifecyclePolicy:
    post:
      description: "Creates or updates the lifecycle policy for the specified repository.\
        \ For more information, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/userguide/LifecyclePolicies.html\"\
        >Lifecycle policy template</a>."
      operationId: put_lifecycle_policy
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - AmazonEC2ContainerRegistry_V20150921.PutLifecyclePolicy
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutLifecyclePolicyRequest'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutLifecyclePolicyResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
          description: ServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
          description: RepositoryNotFoundException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.PutRegistryPolicy:
    post:
      description: "<p>Creates or updates the permissions policy for your registry.</p>\
        \ <p>A registry policy is used to specify permissions for another Amazon Web\
        \ Services account and is used when configuring cross-account replication.\
        \ For more information, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/userguide/registry-permissions.html\"\
        >Registry permissions</a> in the <i>Amazon Elastic Container Registry User\
        \ Guide</i>.</p>"
      operationId: put_registry_policy
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - AmazonEC2ContainerRegistry_V20150921.PutRegistryPolicy
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutRegistryPolicyRequest'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutRegistryPolicyResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
          description: ServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.PutRegistryScanningConfiguration:
    post:
      description: Creates or updates the scanning configuration for your private
        registry.
      operationId: put_registry_scanning_configuration
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - AmazonEC2ContainerRegistry_V20150921.PutRegistryScanningConfiguration
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutRegistryScanningConfigurationRequest'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutRegistryScanningConfigurationResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
          description: ServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.PutReplicationConfiguration:
    post:
      description: "<p>Creates or updates the replication configuration for a registry.\
        \ The existing replication configuration for a repository can be retrieved\
        \ with the <a>DescribeRegistry</a> API action. The first time the PutReplicationConfiguration\
        \ API is called, a service-linked IAM role is created in your account for\
        \ the replication process. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/userguide/using-service-linked-roles.html\"\
        >Using service-linked roles for Amazon ECR</a> in the <i>Amazon Elastic Container\
        \ Registry User Guide</i>.</p> <note> <p>When configuring cross-account replication,\
        \ the destination account must grant the source account permission to replicate.\
        \ This permission is controlled using a registry permissions policy. For more\
        \ information, see <a>PutRegistryPolicy</a>.</p> </note>"
      operationId: put_replication_configuration
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - AmazonEC2ContainerRegistry_V20150921.PutReplicationConfiguration
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutReplicationConfigurationRequest'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutReplicationConfigurationResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
          description: ServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.SetRepositoryPolicy:
    post:
      description: "Applies a repository policy to the specified repository to control\
        \ access permissions. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/userguide/repository-policies.html\"\
        >Amazon ECR Repository policies</a> in the <i>Amazon Elastic Container Registry\
        \ User Guide</i>."
      operationId: set_repository_policy
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - AmazonEC2ContainerRegistry_V20150921.SetRepositoryPolicy
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetRepositoryPolicyRequest'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetRepositoryPolicyResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
          description: ServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
          description: RepositoryNotFoundException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.StartImageScan:
    post:
      description: "Starts an image vulnerability scan. An image scan can only be\
        \ started once per 24 hours on an individual image. This limit includes if\
        \ an image was scanned on initial push. For more information, see <a href=\"\
        https://docs.aws.amazon.com/AmazonECR/latest/userguide/image-scanning.html\"\
        >Image scanning</a> in the <i>Amazon Elastic Container Registry User Guide</i>."
      operationId: start_image_scan
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - AmazonEC2ContainerRegistry_V20150921.StartImageScan
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartImageScanRequest'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartImageScanResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
          description: ServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedImageTypeException'
          description: UnsupportedImageTypeException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
          description: RepositoryNotFoundException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageNotFoundException'
          description: ImageNotFoundException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.StartLifecyclePolicyPreview:
    post:
      description: Starts a preview of a lifecycle policy for the specified repository.
        This allows you to see the results before associating the lifecycle policy
        with the repository.
      operationId: start_lifecycle_policy_preview
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - AmazonEC2ContainerRegistry_V20150921.StartLifecyclePolicyPreview
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartLifecyclePolicyPreviewRequest'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartLifecyclePolicyPreviewResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
          description: ServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
          description: RepositoryNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LifecyclePolicyNotFoundException'
          description: LifecyclePolicyNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LifecyclePolicyPreviewInProgressException'
          description: LifecyclePolicyPreviewInProgressException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.TagResource:
    post:
      description: Adds specified tags to a resource with the specified ARN. Existing
        tags on a resource are not changed if they are not specified in the request
        parameters.
      operationId: tag_resource
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - AmazonEC2ContainerRegistry_V20150921.TagResource
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagResourceRequest'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagResourceResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidTagParameterException'
          description: InvalidTagParameterException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyTagsException'
          description: TooManyTagsException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
          description: RepositoryNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
          description: ServerException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.UntagResource:
    post:
      description: Deletes specified tags from a resource.
      operationId: untag_resource
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - AmazonEC2ContainerRegistry_V20150921.UntagResource
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UntagResourceRequest'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UntagResourceResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidTagParameterException'
          description: InvalidTagParameterException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyTagsException'
          description: TooManyTagsException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
          description: RepositoryNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
          description: ServerException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.UploadLayerPart:
    post:
      description: "<p>Uploads an image layer part to Amazon ECR.</p> <p>When an image\
        \ is pushed, each new image layer is uploaded in parts. The maximum size of\
        \ each image layer part can be 20971520 bytes (or about 20MB). The UploadLayerPart\
        \ API is called once per each new image layer part.</p> <note> <p>This operation\
        \ is used by the Amazon ECR proxy and is not generally used by customers for\
        \ pulling and pushing images. In most cases, you should use the <code>docker</code>\
        \ CLI to pull, tag, and push images.</p> </note>"
      operationId: upload_layer_part
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - AmazonEC2ContainerRegistry_V20150921.UploadLayerPart
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadLayerPartRequest'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadLayerPartResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
          description: ServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidLayerPartException'
          description: InvalidLayerPartException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
          description: RepositoryNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadNotFoundException'
          description: UploadNotFoundException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KmsException'
          description: KmsException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
components:
  parameters:
    X-Amz-Content-Sha256:
      explode: false
      in: header
      name: X-Amz-Content-Sha256
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Date:
      explode: false
      in: header
      name: X-Amz-Date
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Algorithm:
      explode: false
      in: header
      name: X-Amz-Algorithm
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Credential:
      explode: false
      in: header
      name: X-Amz-Credential
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Security-Token:
      explode: false
      in: header
      name: X-Amz-Security-Token
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Signature:
      explode: false
      in: header
      name: X-Amz-Signature
      required: false
      schema:
        type: string
      style: simple
    X-Amz-SignedHeaders:
      explode: false
      in: header
      name: X-Amz-SignedHeaders
      required: false
      schema:
        type: string
      style: simple
  schemas:
    BatchCheckLayerAvailabilityResponse:
      example:
        failures: ""
        layers: ""
      properties:
        layers:
          allOf:
          - $ref: '#/components/schemas/LayerList'
          - description: A list of image layer objects corresponding to the image
              layer references in the request.
          title: layers
        failures:
          allOf:
          - $ref: '#/components/schemas/LayerFailureList'
          - description: Any failures associated with the call.
          title: failures
      title: BatchCheckLayerAvailabilityResponse
      type: object
    BatchCheckLayerAvailabilityRequest:
      example:
        registryId: ""
        layerDigests: ""
        repositoryName: ""
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: "The Amazon Web Services account ID associated with the registry\
              \ that contains the image layers to check. If you do not specify a registry,\
              \ the default registry is assumed."
          title: registryId
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository that is associated with the image
              layers to check.
          title: repositoryName
        layerDigests:
          allOf:
          - $ref: '#/components/schemas/BatchedOperationLayerDigestList'
          - description: The digests of the image layers to check.
          title: layerDigests
      required:
      - layerDigests
      - repositoryName
      title: BatchCheckLayerAvailabilityRequest
      type: object
    RepositoryNotFoundException: {}
    InvalidParameterException: {}
    ServerException: {}
    BatchDeleteImageResponse:
      example:
        failures: []
        imageIds:
        - imageDigest: sha256:examplee6d1e504117a17000003d3753086354a38375961f2e665416ef4b1b2f
          imageTag: precise
      properties:
        imageIds:
          allOf:
          - $ref: '#/components/schemas/ImageIdentifierList'
          - description: The image IDs of the deleted images.
        failures:
          allOf:
          - $ref: '#/components/schemas/ImageFailureList'
          - description: Any failures associated with the call.
      title: BatchDeleteImageResponse
      type: object
    BatchDeleteImageRequest:
      description: Deletes specified images within a specified repository. Images
        are specified with either the <code>imageTag</code> or <code>imageDigest</code>.
      example:
        registryId: ""
        repositoryName: ""
        imageIds: ""
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: "The Amazon Web Services account ID associated with the registry\
              \ that contains the image to delete. If you do not specify a registry,\
              \ the default registry is assumed."
          title: registryId
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The repository that contains the image to delete.
          title: repositoryName
        imageIds:
          allOf:
          - $ref: '#/components/schemas/ImageIdentifierList'
          - description: A list of image ID references that correspond to images to
              delete. The format of the <code>imageIds</code> reference is <code>imageTag=tag</code>
              or <code>imageDigest=digest</code>.
          title: imageIds
      required:
      - imageIds
      - repositoryName
      title: BatchDeleteImageRequest
      type: object
    BatchGetImageResponse:
      example:
        failures: []
        images:
        - imageId:
            imageDigest: sha256:example76bdff6d83a09ba2a818f0d00000063724a9ac3ba5019c56f74ebf42a
            imageTag: precise
          imageManifest: |-
            {
             "schemaVersion": 1,
             "name": "ubuntu",
             "tag": "precise",
            ...
          registryId: "244698725403"
          repositoryName: ubuntu
      properties:
        images:
          allOf:
          - $ref: '#/components/schemas/ImageList'
          - description: A list of image objects corresponding to the image references
              in the request.
        failures:
          allOf:
          - $ref: '#/components/schemas/ImageFailureList'
          - description: Any failures associated with the call.
      title: BatchGetImageResponse
      type: object
    BatchGetImageRequest:
      example:
        acceptedMediaTypes: ""
        registryId: ""
        repositoryName: ""
        imageIds: ""
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: "The Amazon Web Services account ID associated with the registry\
              \ that contains the images to describe. If you do not specify a registry,\
              \ the default registry is assumed."
          title: registryId
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The repository that contains the images to describe.
          title: repositoryName
        imageIds:
          allOf:
          - $ref: '#/components/schemas/ImageIdentifierList'
          - description: A list of image ID references that correspond to images to
              describe. The format of the <code>imageIds</code> reference is <code>imageTag=tag</code>
              or <code>imageDigest=digest</code>.
          title: imageIds
        acceptedMediaTypes:
          allOf:
          - $ref: '#/components/schemas/MediaTypeList'
          - description: "<p>The accepted media types for the request.</p> <p>Valid\
              \ values: <code>application/vnd.docker.distribution.manifest.v1+json</code>\
              \ | <code>application/vnd.docker.distribution.manifest.v2+json</code>\
              \ | <code>application/vnd.oci.image.manifest.v1+json</code> </p>"
          title: acceptedMediaTypes
      required:
      - imageIds
      - repositoryName
      title: BatchGetImageRequest
      type: object
    BatchGetRepositoryScanningConfigurationResponse:
      example:
        failures: ""
        scanningConfigurations: ""
      properties:
        scanningConfigurations:
          allOf:
          - $ref: '#/components/schemas/RepositoryScanningConfigurationList'
          - description: The scanning configuration for the requested repositories.
          title: scanningConfigurations
        failures:
          allOf:
          - $ref: '#/components/schemas/RepositoryScanningConfigurationFailureList'
          - description: Any failures associated with the call.
          title: failures
      title: BatchGetRepositoryScanningConfigurationResponse
      type: object
    BatchGetRepositoryScanningConfigurationRequest:
      example:
        repositoryNames: ""
      properties:
        repositoryNames:
          allOf:
          - $ref: '#/components/schemas/ScanningConfigurationRepositoryNameList'
          - description: One or more repository names to get the scanning configuration
              for.
          title: repositoryNames
      required:
      - repositoryNames
      title: BatchGetRepositoryScanningConfigurationRequest
      type: object
    ValidationException: {}
    CompleteLayerUploadResponse:
      example:
        layerDigest: ""
        uploadId: ""
        registryId: ""
        repositoryName: ""
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: The registry ID associated with the request.
          title: registryId
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The repository name associated with the request.
          title: repositoryName
        uploadId:
          allOf:
          - $ref: '#/components/schemas/UploadId'
          - description: The upload ID associated with the layer.
          title: uploadId
        layerDigest:
          allOf:
          - $ref: '#/components/schemas/LayerDigest'
          - description: The <code>sha256</code> digest of the image layer.
          title: layerDigest
      title: CompleteLayerUploadResponse
      type: object
    CompleteLayerUploadRequest:
      example:
        uploadId: ""
        registryId: ""
        layerDigests: ""
        repositoryName: ""
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: "The Amazon Web Services account ID associated with the registry\
              \ to which to upload layers. If you do not specify a registry, the default\
              \ registry is assumed."
          title: registryId
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository to associate with the image layer.
          title: repositoryName
        uploadId:
          allOf:
          - $ref: '#/components/schemas/UploadId'
          - description: The upload ID from a previous <a>InitiateLayerUpload</a>
              operation to associate with the image layer.
          title: uploadId
        layerDigests:
          allOf:
          - $ref: '#/components/schemas/LayerDigestList'
          - description: The <code>sha256</code> digest of the image layer.
          title: layerDigests
      required:
      - layerDigests
      - repositoryName
      - uploadId
      title: CompleteLayerUploadRequest
      type: object
    UploadNotFoundException: {}
    InvalidLayerException: {}
    LayerPartTooSmallException: {}
    LayerAlreadyExistsException: {}
    EmptyUploadException: {}
    KmsException: {}
    CreatePullThroughCacheRuleResponse:
      example:
        createdAt: ""
        upstreamRegistryUrl: ""
        ecrRepositoryPrefix: ""
        registryId: ""
      properties:
        ecrRepositoryPrefix:
          allOf:
          - $ref: '#/components/schemas/PullThroughCacheRuleRepositoryPrefix'
          - description: The Amazon ECR repository prefix associated with the pull
              through cache rule.
          title: ecrRepositoryPrefix
        upstreamRegistryUrl:
          allOf:
          - $ref: '#/components/schemas/Url'
          - description: The upstream registry URL associated with the pull through
              cache rule.
          title: upstreamRegistryUrl
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreationTimestamp'
          - description: "The date and time, in JavaScript date format, when the pull\
              \ through cache rule was created."
          title: createdAt
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: The registry ID associated with the request.
          title: registryId
      title: CreatePullThroughCacheRuleResponse
      type: object
    CreatePullThroughCacheRuleRequest:
      example:
        upstreamRegistryUrl: ""
        ecrRepositoryPrefix: ""
        registryId: ""
      properties:
        ecrRepositoryPrefix:
          allOf:
          - $ref: '#/components/schemas/PullThroughCacheRuleRepositoryPrefix'
          - description: The repository name prefix to use when caching images from
              the source registry.
          title: ecrRepositoryPrefix
        upstreamRegistryUrl:
          allOf:
          - $ref: '#/components/schemas/Url'
          - description: The registry URL of the upstream public registry to use as
              the source for the pull through cache rule.
          title: upstreamRegistryUrl
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: "The Amazon Web Services account ID associated with the registry\
              \ to create the pull through cache rule for. If you do not specify a\
              \ registry, the default registry is assumed."
          title: registryId
      required:
      - ecrRepositoryPrefix
      - upstreamRegistryUrl
      title: CreatePullThroughCacheRuleRequest
      type: object
    PullThroughCacheRuleAlreadyExistsException: {}
    UnsupportedUpstreamRegistryException: {}
    LimitExceededException: {}
    CreateRepositoryResponse:
      example:
        repository:
          registryId: "012345678901"
          repositoryArn: arn:aws:ecr:us-west-2:012345678901:repository/project-a/nginx-web-app
          repositoryName: project-a/nginx-web-app
      properties:
        repository:
          $ref: '#/components/schemas/CreateRepositoryResponse_repository'
      title: CreateRepositoryResponse
      type: object
    CreateRepositoryRequest:
      example:
        registryId: ""
        encryptionConfiguration:
          kmsKey: ""
          encryptionType: ""
        repositoryName: ""
        imageTagMutability: ""
        tags: ""
        imageScanningConfiguration:
          scanOnPush: ""
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: "The Amazon Web Services account ID associated with the registry\
              \ to create the repository. If you do not specify a registry, the default\
              \ registry is assumed."
          title: registryId
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name to use for the repository. The repository name may
              be specified on its own (such as <code>nginx-web-app</code>) or it can
              be prepended with a namespace to group the repository into a category
              (such as <code>project-a/nginx-web-app</code>).
          title: repositoryName
        tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          - description: "The metadata that you apply to the repository to help you\
              \ categorize and organize them. Each tag consists of a key and an optional\
              \ value, both of which you define. Tag keys can have a maximum character\
              \ length of 128 characters, and tag values can have a maximum length\
              \ of 256 characters."
          title: tags
        imageTagMutability:
          allOf:
          - $ref: '#/components/schemas/ImageTagMutability'
          - description: "The tag mutability setting for the repository. If this parameter\
              \ is omitted, the default setting of <code>MUTABLE</code> will be used\
              \ which will allow image tags to be overwritten. If <code>IMMUTABLE</code>\
              \ is specified, all image tags within the repository will be immutable\
              \ which will prevent them from being overwritten."
          title: imageTagMutability
        imageScanningConfiguration:
          $ref: '#/components/schemas/CreateRepositoryRequest_imageScanningConfiguration'
        encryptionConfiguration:
          $ref: '#/components/schemas/CreateRepositoryRequest_encryptionConfiguration'
      required:
      - repositoryName
      title: CreateRepositoryRequest
      type: object
    InvalidTagParameterException: {}
    TooManyTagsException: {}
    RepositoryAlreadyExistsException: {}
    DeleteLifecyclePolicyResponse:
      example:
        registryId: ""
        lastEvaluatedAt: ""
        repositoryName: ""
        lifecyclePolicyText: ""
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: The registry ID associated with the request.
          title: registryId
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The repository name associated with the request.
          title: repositoryName
        lifecyclePolicyText:
          allOf:
          - $ref: '#/components/schemas/LifecyclePolicyText'
          - description: The JSON lifecycle policy text.
          title: lifecyclePolicyText
        lastEvaluatedAt:
          allOf:
          - $ref: '#/components/schemas/EvaluationTimestamp'
          - description: The time stamp of the last time that the lifecycle policy
              was run.
          title: lastEvaluatedAt
      title: DeleteLifecyclePolicyResponse
      type: object
    DeleteLifecyclePolicyRequest:
      example:
        registryId: ""
        repositoryName: ""
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: "The Amazon Web Services account ID associated with the registry\
              \ that contains the repository. If you do not specify a registry, the\
              \ default registry is assumed."
          title: registryId
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository.
          title: repositoryName
      required:
      - repositoryName
      title: DeleteLifecyclePolicyRequest
      type: object
    LifecyclePolicyNotFoundException: {}
    DeletePullThroughCacheRuleResponse:
      example:
        createdAt: ""
        upstreamRegistryUrl: ""
        ecrRepositoryPrefix: ""
        registryId: ""
      properties:
        ecrRepositoryPrefix:
          allOf:
          - $ref: '#/components/schemas/PullThroughCacheRuleRepositoryPrefix'
          - description: The Amazon ECR repository prefix associated with the request.
          title: ecrRepositoryPrefix
        upstreamRegistryUrl:
          allOf:
          - $ref: '#/components/schemas/Url'
          - description: The upstream registry URL associated with the pull through
              cache rule.
          title: upstreamRegistryUrl
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreationTimestamp'
          - description: The timestamp associated with the pull through cache rule.
          title: createdAt
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: The registry ID associated with the request.
          title: registryId
      title: DeletePullThroughCacheRuleResponse
      type: object
    DeletePullThroughCacheRuleRequest:
      example:
        ecrRepositoryPrefix: ""
        registryId: ""
      properties:
        ecrRepositoryPrefix:
          allOf:
          - $ref: '#/components/schemas/PullThroughCacheRuleRepositoryPrefix'
          - description: The Amazon ECR repository prefix associated with the pull
              through cache rule to delete.
          title: ecrRepositoryPrefix
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: "The Amazon Web Services account ID associated with the registry\
              \ that contains the pull through cache rule. If you do not specify a\
              \ registry, the default registry is assumed."
          title: registryId
      required:
      - ecrRepositoryPrefix
      title: DeletePullThroughCacheRuleRequest
      type: object
    PullThroughCacheRuleNotFoundException: {}
    DeleteRegistryPolicyResponse:
      example:
        policyText: ""
        registryId: ""
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: The registry ID associated with the request.
          title: registryId
        policyText:
          allOf:
          - $ref: '#/components/schemas/RegistryPolicyText'
          - description: The contents of the registry permissions policy that was
              deleted.
          title: policyText
      title: DeleteRegistryPolicyResponse
      type: object
    DeleteRegistryPolicyRequest:
      properties: {}
      title: DeleteRegistryPolicyRequest
      type: object
    RegistryPolicyNotFoundException: {}
    DeleteRepositoryResponse:
      example:
        repository:
          registryId: "012345678901"
          repositoryArn: arn:aws:ecr:us-west-2:012345678901:repository/ubuntu
          repositoryName: ubuntu
      properties:
        repository:
          $ref: '#/components/schemas/DeleteRepositoryResponse_repository'
      title: DeleteRepositoryResponse
      type: object
    DeleteRepositoryRequest:
      example:
        registryId: ""
        force: ""
        repositoryName: ""
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: "The Amazon Web Services account ID associated with the registry\
              \ that contains the repository to delete. If you do not specify a registry,\
              \ the default registry is assumed."
          title: registryId
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository to delete.
          title: repositoryName
        force:
          allOf:
          - $ref: '#/components/schemas/ForceFlag'
          - description: " If a repository contains images, forces the deletion."
          title: force
      required:
      - repositoryName
      title: DeleteRepositoryRequest
      type: object
    RepositoryNotEmptyException: {}
    DeleteRepositoryPolicyResponse:
      example:
        policyText: "{ ... }"
        registryId: "012345678901"
        repositoryName: ubuntu
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: The registry ID associated with the request.
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The repository name associated with the request.
        policyText:
          allOf:
          - $ref: '#/components/schemas/RepositoryPolicyText'
          - description: The JSON repository policy that was deleted from the repository.
      title: DeleteRepositoryPolicyResponse
      type: object
    DeleteRepositoryPolicyRequest:
      example:
        registryId: ""
        repositoryName: ""
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: "The Amazon Web Services account ID associated with the registry\
              \ that contains the repository policy to delete. If you do not specify\
              \ a registry, the default registry is assumed."
          title: registryId
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository that is associated with the repository
              policy to delete.
          title: repositoryName
      required:
      - repositoryName
      title: DeleteRepositoryPolicyRequest
      type: object
    RepositoryPolicyNotFoundException: {}
    DescribeImageReplicationStatusResponse:
      example:
        imageId:
          imageTag: ""
          imageDigest: ""
        repositoryName: ""
        replicationStatuses: ""
      properties:
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The repository name associated with the request.
          title: repositoryName
        imageId:
          $ref: '#/components/schemas/ImageIdentifier'
        replicationStatuses:
          allOf:
          - $ref: '#/components/schemas/ImageReplicationStatusList'
          - description: The replication status details for the images in the specified
              repository.
          title: replicationStatuses
      title: DescribeImageReplicationStatusResponse
      type: object
    DescribeImageReplicationStatusRequest:
      example:
        imageId:
          imageTag: ""
          imageDigest: ""
        registryId: ""
        repositoryName: ""
      properties:
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository that the image is in.
          title: repositoryName
        imageId:
          $ref: '#/components/schemas/ImageIdentifier'
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: "The Amazon Web Services account ID associated with the registry.\
              \ If you do not specify a registry, the default registry is assumed."
          title: registryId
      required:
      - imageId
      - repositoryName
      title: DescribeImageReplicationStatusRequest
      type: object
    ImageNotFoundException: {}
    DescribeImageScanFindingsResponse:
      example:
        imageId:
          imageTag: ""
          imageDigest: ""
        imageScanFindings:
          enhancedFindings: ""
          imageScanCompletedAt: ""
          findings: ""
          vulnerabilitySourceUpdatedAt: ""
          findingSeverityCounts: ""
        imageScanStatus:
          description: ""
          status: ""
        nextToken: ""
        registryId: ""
        repositoryName: ""
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: The registry ID associated with the request.
          title: registryId
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The repository name associated with the request.
          title: repositoryName
        imageId:
          $ref: '#/components/schemas/ImageIdentifier'
        imageScanStatus:
          $ref: '#/components/schemas/DescribeImageScanFindingsResponse_imageScanStatus'
        imageScanFindings:
          $ref: '#/components/schemas/DescribeImageScanFindingsResponse_imageScanFindings'
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "The <code>nextToken</code> value to include in a future\
              \ <code>DescribeImageScanFindings</code> request. When the results of\
              \ a <code>DescribeImageScanFindings</code> request exceed <code>maxResults</code>,\
              \ this value can be used to retrieve the next page of results. This\
              \ value is null when there are no more results to return."
          title: nextToken
      title: DescribeImageScanFindingsResponse
      type: object
    DescribeImageScanFindingsRequest:
      example:
        imageId:
          imageTag: ""
          imageDigest: ""
        nextToken: ""
        maxResults: ""
        registryId: ""
        repositoryName: ""
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: "The Amazon Web Services account ID associated with the registry\
              \ that contains the repository in which to describe the image scan findings\
              \ for. If you do not specify a registry, the default registry is assumed."
          title: registryId
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The repository for the image for which to describe the scan
              findings.
          title: repositoryName
        imageId:
          $ref: '#/components/schemas/ImageIdentifier'
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: The <code>nextToken</code> value returned from a previous
              paginated <code>DescribeImageScanFindings</code> request where <code>maxResults</code>
              was used and the results exceeded the value of that parameter. Pagination
              continues from the end of the previous results that returned the <code>nextToken</code>
              value. This value is null when there are no more results to return.
          title: nextToken
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          - description: "The maximum number of image scan results returned by <code>DescribeImageScanFindings</code>\
              \ in paginated output. When this parameter is used, <code>DescribeImageScanFindings</code>\
              \ only returns <code>maxResults</code> results in a single page along\
              \ with a <code>nextToken</code> response element. The remaining results\
              \ of the initial request can be seen by sending another <code>DescribeImageScanFindings</code>\
              \ request with the returned <code>nextToken</code> value. This value\
              \ can be between 1 and 1000. If this parameter is not used, then <code>DescribeImageScanFindings</code>\
              \ returns up to 100 results and a <code>nextToken</code> value, if applicable."
          title: maxResults
      required:
      - imageId
      - repositoryName
      title: DescribeImageScanFindingsRequest
      type: object
    ScanNotFoundException: {}
    DescribeImagesResponse:
      example:
        imageDetails: ""
        nextToken: ""
      properties:
        imageDetails:
          allOf:
          - $ref: '#/components/schemas/ImageDetailList'
          - description: A list of <a>ImageDetail</a> objects that contain data about
              the image.
          title: imageDetails
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "The <code>nextToken</code> value to include in a future\
              \ <code>DescribeImages</code> request. When the results of a <code>DescribeImages</code>\
              \ request exceed <code>maxResults</code>, this value can be used to\
              \ retrieve the next page of results. This value is <code>null</code>\
              \ when there are no more results to return."
          title: nextToken
      title: DescribeImagesResponse
      type: object
    DescribeImagesRequest:
      example:
        filter:
          tagStatus: ""
        nextToken: ""
        maxResults: ""
        registryId: ""
        repositoryName: ""
        imageIds: ""
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: "The Amazon Web Services account ID associated with the registry\
              \ that contains the repository in which to describe images. If you do\
              \ not specify a registry, the default registry is assumed."
          title: registryId
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The repository that contains the images to describe.
          title: repositoryName
        imageIds:
          allOf:
          - $ref: '#/components/schemas/ImageIdentifierList'
          - description: The list of image IDs for the requested repository.
          title: imageIds
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: The <code>nextToken</code> value returned from a previous
              paginated <code>DescribeImages</code> request where <code>maxResults</code>
              was used and the results exceeded the value of that parameter. Pagination
              continues from the end of the previous results that returned the <code>nextToken</code>
              value. This value is <code>null</code> when there are no more results
              to return. This option cannot be used when you specify images with <code>imageIds</code>.
          title: nextToken
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          - description: "The maximum number of repository results returned by <code>DescribeImages</code>\
              \ in paginated output. When this parameter is used, <code>DescribeImages</code>\
              \ only returns <code>maxResults</code> results in a single page along\
              \ with a <code>nextToken</code> response element. The remaining results\
              \ of the initial request can be seen by sending another <code>DescribeImages</code>\
              \ request with the returned <code>nextToken</code> value. This value\
              \ can be between 1 and 1000. If this parameter is not used, then <code>DescribeImages</code>\
              \ returns up to 100 results and a <code>nextToken</code> value, if applicable.\
              \ This option cannot be used when you specify images with <code>imageIds</code>."
          title: maxResults
        filter:
          $ref: '#/components/schemas/DescribeImagesRequest_filter'
      required:
      - repositoryName
      title: DescribeImagesRequest
      type: object
    DescribePullThroughCacheRulesResponse:
      example:
        nextToken: ""
        pullThroughCacheRules: ""
      properties:
        pullThroughCacheRules:
          allOf:
          - $ref: '#/components/schemas/PullThroughCacheRuleList'
          - description: The details of the pull through cache rules.
          title: pullThroughCacheRules
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "The <code>nextToken</code> value to include in a future\
              \ <code>DescribePullThroughCacheRulesRequest</code> request. When the\
              \ results of a <code>DescribePullThroughCacheRulesRequest</code> request\
              \ exceed <code>maxResults</code>, this value can be used to retrieve\
              \ the next page of results. This value is null when there are no more\
              \ results to return."
          title: nextToken
      title: DescribePullThroughCacheRulesResponse
      type: object
    DescribePullThroughCacheRulesRequest:
      example:
        nextToken: ""
        maxResults: ""
        registryId: ""
        ecrRepositoryPrefixes: ""
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: "The Amazon Web Services account ID associated with the registry\
              \ to return the pull through cache rules for. If you do not specify\
              \ a registry, the default registry is assumed."
          title: registryId
        ecrRepositoryPrefixes:
          allOf:
          - $ref: '#/components/schemas/PullThroughCacheRuleRepositoryPrefixList'
          - description: "The Amazon ECR repository prefixes associated with the pull\
              \ through cache rules to return. If no repository prefix value is specified,\
              \ all pull through cache rules are returned."
          title: ecrRepositoryPrefixes
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: The <code>nextToken</code> value returned from a previous
              paginated <code>DescribePullThroughCacheRulesRequest</code> request
              where <code>maxResults</code> was used and the results exceeded the
              value of that parameter. Pagination continues from the end of the previous
              results that returned the <code>nextToken</code> value. This value is
              null when there are no more results to return.
          title: nextToken
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          - description: "The maximum number of pull through cache rules returned\
              \ by <code>DescribePullThroughCacheRulesRequest</code> in paginated\
              \ output. When this parameter is used, <code>DescribePullThroughCacheRulesRequest</code>\
              \ only returns <code>maxResults</code> results in a single page along\
              \ with a <code>nextToken</code> response element. The remaining results\
              \ of the initial request can be seen by sending another <code>DescribePullThroughCacheRulesRequest</code>\
              \ request with the returned <code>nextToken</code> value. This value\
              \ can be between 1 and 1000. If this parameter is not used, then <code>DescribePullThroughCacheRulesRequest</code>\
              \ returns up to 100 results and a <code>nextToken</code> value, if applicable."
          title: maxResults
      title: DescribePullThroughCacheRulesRequest
      type: object
    DescribeRegistryResponse:
      example:
        registryId: ""
        replicationConfiguration:
          rules: ""
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: The ID of the registry.
          title: registryId
        replicationConfiguration:
          $ref: '#/components/schemas/DescribeRegistryResponse_replicationConfiguration'
      title: DescribeRegistryResponse
      type: object
    DescribeRegistryRequest:
      properties: {}
      title: DescribeRegistryRequest
      type: object
    DescribeRepositoriesResponse:
      example:
        repositories:
        - registryId: "012345678910"
          repositoryArn: arn:aws:ecr:us-west-2:012345678910:repository/ubuntu
          repositoryName: ubuntu
        - registryId: "012345678910"
          repositoryArn: arn:aws:ecr:us-west-2:012345678910:repository/test
          repositoryName: test
      properties:
        repositories:
          allOf:
          - $ref: '#/components/schemas/RepositoryList'
          - description: A list of repository objects corresponding to valid repositories.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "The <code>nextToken</code> value to include in a future\
              \ <code>DescribeRepositories</code> request. When the results of a <code>DescribeRepositories</code>\
              \ request exceed <code>maxResults</code>, this value can be used to\
              \ retrieve the next page of results. This value is <code>null</code>\
              \ when there are no more results to return."
      title: DescribeRepositoriesResponse
      type: object
    DescribeRepositoriesRequest:
      example:
        nextToken: ""
        maxResults: ""
        repositoryNames: ""
        registryId: ""
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: "The Amazon Web Services account ID associated with the registry\
              \ that contains the repositories to be described. If you do not specify\
              \ a registry, the default registry is assumed."
          title: registryId
        repositoryNames:
          allOf:
          - $ref: '#/components/schemas/RepositoryNameList'
          - description: "A list of repositories to describe. If this parameter is\
              \ omitted, then all repositories in a registry are described."
          title: repositoryNames
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: <p>The <code>nextToken</code> value returned from a previous
              paginated <code>DescribeRepositories</code> request where <code>maxResults</code>
              was used and the results exceeded the value of that parameter. Pagination
              continues from the end of the previous results that returned the <code>nextToken</code>
              value. This value is <code>null</code> when there are no more results
              to return. This option cannot be used when you specify repositories
              with <code>repositoryNames</code>.</p> <note> <p>This token should be
              treated as an opaque identifier that is only used to retrieve the next
              items in a list and not for other programmatic purposes.</p> </note>
          title: nextToken
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          - description: "The maximum number of repository results returned by <code>DescribeRepositories</code>\
              \ in paginated output. When this parameter is used, <code>DescribeRepositories</code>\
              \ only returns <code>maxResults</code> results in a single page along\
              \ with a <code>nextToken</code> response element. The remaining results\
              \ of the initial request can be seen by sending another <code>DescribeRepositories</code>\
              \ request with the returned <code>nextToken</code> value. This value\
              \ can be between 1 and 1000. If this parameter is not used, then <code>DescribeRepositories</code>\
              \ returns up to 100 results and a <code>nextToken</code> value, if applicable.\
              \ This option cannot be used when you specify repositories with <code>repositoryNames</code>."
          title: maxResults
      title: DescribeRepositoriesRequest
      type: object
    GetAuthorizationTokenResponse:
      example:
        authorizationData:
        - authorizationToken: QVdTOkN...
          expiresAt: "1470951892432"
          proxyEndpoint: https://012345678901.dkr.ecr.us-west-2.amazonaws.com
      properties:
        authorizationData:
          allOf:
          - $ref: '#/components/schemas/AuthorizationDataList'
          - description: A list of authorization token data objects that correspond
              to the <code>registryIds</code> values in the request.
      title: GetAuthorizationTokenResponse
      type: object
    GetAuthorizationTokenRequest:
      example:
        registryIds: ""
      properties:
        registryIds:
          allOf:
          - $ref: '#/components/schemas/GetAuthorizationTokenRegistryIdList'
          - deprecated: true
            description: "A list of Amazon Web Services account IDs that are associated\
              \ with the registries for which to get AuthorizationData objects. If\
              \ you do not specify a registry, the default registry is assumed.This\
              \ field is deprecated. The returned authorization token can be used\
              \ to access any Amazon ECR registry that the IAM principal has access\
              \ to, specifying a registry ID doesn't change the permissions scope\
              \ of the authorization token."
          title: registryIds
      title: GetAuthorizationTokenRequest
      type: object
    GetDownloadUrlForLayerResponse:
      example:
        layerDigest: ""
        downloadUrl: ""
      properties:
        downloadUrl:
          allOf:
          - $ref: '#/components/schemas/Url'
          - description: The pre-signed Amazon S3 download URL for the requested layer.
          title: downloadUrl
        layerDigest:
          allOf:
          - $ref: '#/components/schemas/LayerDigest'
          - description: The digest of the image layer to download.
          title: layerDigest
      title: GetDownloadUrlForLayerResponse
      type: object
    GetDownloadUrlForLayerRequest:
      example:
        layerDigest: ""
        registryId: ""
        repositoryName: ""
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: "The Amazon Web Services account ID associated with the registry\
              \ that contains the image layer to download. If you do not specify a\
              \ registry, the default registry is assumed."
          title: registryId
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository that is associated with the image
              layer to download.
          title: repositoryName
        layerDigest:
          allOf:
          - $ref: '#/components/schemas/LayerDigest'
          - description: The digest of the image layer to download.
          title: layerDigest
      required:
      - layerDigest
      - repositoryName
      title: GetDownloadUrlForLayerRequest
      type: object
    LayersNotFoundException: {}
    LayerInaccessibleException: {}
    GetLifecyclePolicyResponse:
      example:
        registryId: ""
        lastEvaluatedAt: ""
        repositoryName: ""
        lifecyclePolicyText: ""
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: The registry ID associated with the request.
          title: registryId
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The repository name associated with the request.
          title: repositoryName
        lifecyclePolicyText:
          allOf:
          - $ref: '#/components/schemas/LifecyclePolicyText'
          - description: The JSON lifecycle policy text.
          title: lifecyclePolicyText
        lastEvaluatedAt:
          allOf:
          - $ref: '#/components/schemas/EvaluationTimestamp'
          - description: The time stamp of the last time that the lifecycle policy
              was run.
          title: lastEvaluatedAt
      title: GetLifecyclePolicyResponse
      type: object
    GetLifecyclePolicyRequest:
      example:
        registryId: ""
        repositoryName: ""
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: "The Amazon Web Services account ID associated with the registry\
              \ that contains the repository. If you do not specify a registry, the\
              \ default registry is assumed."
          title: registryId
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository.
          title: repositoryName
      required:
      - repositoryName
      title: GetLifecyclePolicyRequest
      type: object
    GetLifecyclePolicyPreviewResponse:
      example:
        summary:
          expiringImageTotalCount: ""
        nextToken: ""
        registryId: ""
        repositoryName: ""
        lifecyclePolicyText: ""
        previewResults: ""
        status: ""
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: The registry ID associated with the request.
          title: registryId
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The repository name associated with the request.
          title: repositoryName
        lifecyclePolicyText:
          allOf:
          - $ref: '#/components/schemas/LifecyclePolicyText'
          - description: The JSON lifecycle policy text.
          title: lifecyclePolicyText
        status:
          allOf:
          - $ref: '#/components/schemas/LifecyclePolicyPreviewStatus'
          - description: The status of the lifecycle policy preview request.
          title: status
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "The <code>nextToken</code> value to include in a future\
              \ <code>GetLifecyclePolicyPreview</code> request. When the results of\
              \ a <code>GetLifecyclePolicyPreview</code> request exceed <code>maxResults</code>,\
              \ this value can be used to retrieve the next page of results. This\
              \ value is <code>null</code> when there are no more results to return."
          title: nextToken
        previewResults:
          allOf:
          - $ref: '#/components/schemas/LifecyclePolicyPreviewResultList'
          - description: The results of the lifecycle policy preview request.
          title: previewResults
        summary:
          $ref: '#/components/schemas/GetLifecyclePolicyPreviewResponse_summary'
      title: GetLifecyclePolicyPreviewResponse
      type: object
    GetLifecyclePolicyPreviewRequest:
      example:
        filter:
          tagStatus: ""
        nextToken: ""
        maxResults: ""
        registryId: ""
        repositoryName: ""
        imageIds: ""
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: "The Amazon Web Services account ID associated with the registry\
              \ that contains the repository. If you do not specify a registry, the\
              \ default registry is assumed."
          title: registryId
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository.
          title: repositoryName
        imageIds:
          allOf:
          - $ref: '#/components/schemas/ImageIdentifierList'
          - description: The list of imageIDs to be included.
          title: imageIds
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: The <code>nextToken</code> value returned from a previous
              paginated&#x2028; <code>GetLifecyclePolicyPreviewRequest</code> request
              where <code>maxResults</code> was used and the&#x2028; results exceeded
              the value of that parameter. Pagination continues from the end of the&#x2028;
              previous results that returned the <code>nextToken</code> value. This
              value is&#x2028; <code>null</code> when there are no more results to
              return. This option cannot be used when you specify images with <code>imageIds</code>.
          title: nextToken
        maxResults:
          allOf:
          - $ref: '#/components/schemas/LifecyclePreviewMaxResults'
          - description: "The maximum number of repository results returned by <code>GetLifecyclePolicyPreviewRequest</code>\
              \ in&#x2028; paginated output. When this parameter is used, <code>GetLifecyclePolicyPreviewRequest</code>\
              \ only returns&#x2028; <code>maxResults</code> results in a single page\
              \ along with a <code>nextToken</code>&#x2028; response element. The\
              \ remaining results of the initial request can be seen by sending&#x2028;\
              \ another <code>GetLifecyclePolicyPreviewRequest</code> request with\
              \ the returned <code>nextToken</code>&#x2028; value. This value can\
              \ be between 1 and 1000. If this&#x2028; parameter is not used, then\
              \ <code>GetLifecyclePolicyPreviewRequest</code> returns up to&#x2028;\
              \ 100 results and a <code>nextToken</code> value, if&#x2028; applicable.\
              \ This option cannot be used when you specify images with <code>imageIds</code>."
          title: maxResults
        filter:
          $ref: '#/components/schemas/GetLifecyclePolicyPreviewRequest_filter'
      required:
      - repositoryName
      title: GetLifecyclePolicyPreviewRequest
      type: object
    LifecyclePolicyPreviewNotFoundException: {}
    GetRegistryPolicyResponse:
      example:
        policyText: ""
        registryId: ""
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: The ID of the registry.
          title: registryId
        policyText:
          allOf:
          - $ref: '#/components/schemas/RegistryPolicyText'
          - description: The JSON text of the permissions policy for a registry.
          title: policyText
      title: GetRegistryPolicyResponse
      type: object
    GetRegistryPolicyRequest:
      properties: {}
      title: GetRegistryPolicyRequest
      type: object
    GetRegistryScanningConfigurationResponse:
      example:
        scanningConfiguration:
          rules: ""
          scanType: ""
        registryId: ""
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: The ID of the registry.
          title: registryId
        scanningConfiguration:
          $ref: '#/components/schemas/GetRegistryScanningConfigurationResponse_scanningConfiguration'
      title: GetRegistryScanningConfigurationResponse
      type: object
    GetRegistryScanningConfigurationRequest:
      properties: {}
      title: GetRegistryScanningConfigurationRequest
      type: object
    GetRepositoryPolicyResponse:
      example:
        policyText: |-
          {
            "Version" : "2008-10-17",
            "Statement" : [ {
              "Sid" : "new statement",
              "Effect" : "Allow",
              "Principal" : {
               "AWS" : "arn:aws:iam::012345678901:role/CodeDeployDemo"
              },
          "Action" : [ "ecr:GetDownloadUrlForLayer", "ecr:BatchGetImage", "ecr:BatchCheckLayerAvailability" ]
           } ]
          }
        registryId: "012345678901"
        repositoryName: ubuntu
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: The registry ID associated with the request.
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The repository name associated with the request.
        policyText:
          allOf:
          - $ref: '#/components/schemas/RepositoryPolicyText'
          - description: The JSON repository policy text associated with the repository.
      title: GetRepositoryPolicyResponse
      type: object
    GetRepositoryPolicyRequest:
      example:
        registryId: ""
        repositoryName: ""
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: "The Amazon Web Services account ID associated with the registry\
              \ that contains the repository. If you do not specify a registry, the\
              \ default registry is assumed."
          title: registryId
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository with the policy to retrieve.
          title: repositoryName
      required:
      - repositoryName
      title: GetRepositoryPolicyRequest
      type: object
    InitiateLayerUploadResponse:
      example:
        uploadId: ""
        partSize: ""
      properties:
        uploadId:
          allOf:
          - $ref: '#/components/schemas/UploadId'
          - description: The upload ID for the layer upload. This parameter is passed
              to further <a>UploadLayerPart</a> and <a>CompleteLayerUpload</a> operations.
          title: uploadId
        partSize:
          allOf:
          - $ref: '#/components/schemas/PartSize'
          - description: "The size, in bytes, that Amazon ECR expects future layer\
              \ part uploads to be."
          title: partSize
      title: InitiateLayerUploadResponse
      type: object
    InitiateLayerUploadRequest:
      example:
        registryId: ""
        repositoryName: ""
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: "The Amazon Web Services account ID associated with the registry\
              \ to which you intend to upload layers. If you do not specify a registry,\
              \ the default registry is assumed."
          title: registryId
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository to which you intend to upload
              layers.
          title: repositoryName
      required:
      - repositoryName
      title: InitiateLayerUploadRequest
      type: object
    ListImagesResponse:
      example:
        imageIds:
        - imageDigest: sha256:764f63476bdff6d83a09ba2a818f0d35757063724a9ac3ba5019c56f74ebf42a
          imageTag: precise
      properties:
        imageIds:
          allOf:
          - $ref: '#/components/schemas/ImageIdentifierList'
          - description: The list of image IDs for the requested repository.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "The <code>nextToken</code> value to include in a future\
              \ <code>ListImages</code> request. When the results of a <code>ListImages</code>\
              \ request exceed <code>maxResults</code>, this value can be used to\
              \ retrieve the next page of results. This value is <code>null</code>\
              \ when there are no more results to return."
      title: ListImagesResponse
      type: object
    ListImagesRequest:
      example:
        filter:
          tagStatus: ""
        nextToken: ""
        maxResults: ""
        registryId: ""
        repositoryName: ""
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: "The Amazon Web Services account ID associated with the registry\
              \ that contains the repository in which to list images. If you do not\
              \ specify a registry, the default registry is assumed."
          title: registryId
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The repository with image IDs to be listed.
          title: repositoryName
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: <p>The <code>nextToken</code> value returned from a previous
              paginated <code>ListImages</code> request where <code>maxResults</code>
              was used and the results exceeded the value of that parameter. Pagination
              continues from the end of the previous results that returned the <code>nextToken</code>
              value. This value is <code>null</code> when there are no more results
              to return.</p> <note> <p>This token should be treated as an opaque identifier
              that is only used to retrieve the next items in a list and not for other
              programmatic purposes.</p> </note>
          title: nextToken
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          - description: "The maximum number of image results returned by <code>ListImages</code>\
              \ in paginated output. When this parameter is used, <code>ListImages</code>\
              \ only returns <code>maxResults</code> results in a single page along\
              \ with a <code>nextToken</code> response element. The remaining results\
              \ of the initial request can be seen by sending another <code>ListImages</code>\
              \ request with the returned <code>nextToken</code> value. This value\
              \ can be between 1 and 1000. If this parameter is not used, then <code>ListImages</code>\
              \ returns up to 100 results and a <code>nextToken</code> value, if applicable."
          title: maxResults
        filter:
          $ref: '#/components/schemas/ListImagesRequest_filter'
      required:
      - repositoryName
      title: ListImagesRequest
      type: object
    ListTagsForResourceResponse:
      example:
        tags: ""
      properties:
        tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          - description: The tags for the resource.
          title: tags
      title: ListTagsForResourceResponse
      type: object
    ListTagsForResourceRequest:
      example:
        resourceArn: ""
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: "The Amazon Resource Name (ARN) that identifies the resource\
              \ for which to list the tags. Currently, the only supported resource\
              \ is an Amazon ECR repository."
          title: resourceArn
      required:
      - resourceArn
      title: ListTagsForResourceRequest
      type: object
    PutImageResponse:
      example:
        image:
          imageManifest: ""
          imageId:
            imageTag: ""
            imageDigest: ""
          registryId: ""
          repositoryName: ""
          imageManifestMediaType: ""
      properties:
        image:
          $ref: '#/components/schemas/PutImageResponse_image'
      title: PutImageResponse
      type: object
    PutImageRequest:
      example:
        imageManifest: ""
        registryId: ""
        repositoryName: ""
        imageTag: ""
        imageManifestMediaType: ""
        imageDigest: ""
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: "The Amazon Web Services account ID associated with the registry\
              \ that contains the repository in which to put the image. If you do\
              \ not specify a registry, the default registry is assumed."
          title: registryId
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository in which to put the image.
          title: repositoryName
        imageManifest:
          allOf:
          - $ref: '#/components/schemas/ImageManifest'
          - description: The image manifest corresponding to the image to be uploaded.
          title: imageManifest
        imageManifestMediaType:
          allOf:
          - $ref: '#/components/schemas/MediaType'
          - description: "The media type of the image manifest. If you push an image\
              \ manifest that does not contain the <code>mediaType</code> field, you\
              \ must specify the <code>imageManifestMediaType</code> in the request."
          title: imageManifestMediaType
        imageTag:
          allOf:
          - $ref: '#/components/schemas/ImageTag'
          - description: The tag to associate with the image. This parameter is required
              for images that use the Docker Image Manifest V2 Schema 2 or Open Container
              Initiative (OCI) formats.
          title: imageTag
        imageDigest:
          allOf:
          - $ref: '#/components/schemas/ImageDigest'
          - description: The image digest of the image manifest corresponding to the
              image.
          title: imageDigest
      required:
      - imageManifest
      - repositoryName
      title: PutImageRequest
      type: object
    ImageAlreadyExistsException: {}
    ReferencedImagesNotFoundException: {}
    ImageTagAlreadyExistsException: {}
    ImageDigestDoesNotMatchException: {}
    PutImageScanningConfigurationResponse:
      example:
        registryId: ""
        repositoryName: ""
        imageScanningConfiguration:
          scanOnPush: ""
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: The registry ID associated with the request.
          title: registryId
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The repository name associated with the request.
          title: repositoryName
        imageScanningConfiguration:
          $ref: '#/components/schemas/PutImageScanningConfigurationResponse_imageScanningConfiguration'
      title: PutImageScanningConfigurationResponse
      type: object
    PutImageScanningConfigurationRequest:
      example:
        registryId: ""
        repositoryName: ""
        imageScanningConfiguration:
          scanOnPush: ""
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: "The Amazon Web Services account ID associated with the registry\
              \ that contains the repository in which to update the image scanning\
              \ configuration setting. If you do not specify a registry, the default\
              \ registry is assumed."
          title: registryId
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository in which to update the image scanning
              configuration setting.
          title: repositoryName
        imageScanningConfiguration:
          $ref: '#/components/schemas/PutImageScanningConfigurationRequest_imageScanningConfiguration'
      required:
      - imageScanningConfiguration
      - repositoryName
      title: PutImageScanningConfigurationRequest
      type: object
    PutImageTagMutabilityResponse:
      example:
        registryId: ""
        repositoryName: ""
        imageTagMutability: ""
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: The registry ID associated with the request.
          title: registryId
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The repository name associated with the request.
          title: repositoryName
        imageTagMutability:
          allOf:
          - $ref: '#/components/schemas/ImageTagMutability'
          - description: The image tag mutability setting for the repository.
          title: imageTagMutability
      title: PutImageTagMutabilityResponse
      type: object
    PutImageTagMutabilityRequest:
      example:
        registryId: ""
        repositoryName: ""
        imageTagMutability: ""
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: "The Amazon Web Services account ID associated with the registry\
              \ that contains the repository in which to update the image tag mutability\
              \ settings. If you do not specify a registry, the default registry is\
              \ assumed."
          title: registryId
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository in which to update the image tag
              mutability settings.
          title: repositoryName
        imageTagMutability:
          allOf:
          - $ref: '#/components/schemas/ImageTagMutability'
          - description: "The tag mutability setting for the repository. If <code>MUTABLE</code>\
              \ is specified, image tags can be overwritten. If <code>IMMUTABLE</code>\
              \ is specified, all image tags within the repository will be immutable\
              \ which will prevent them from being overwritten."
          title: imageTagMutability
      required:
      - imageTagMutability
      - repositoryName
      title: PutImageTagMutabilityRequest
      type: object
    PutLifecyclePolicyResponse:
      example:
        registryId: ""
        repositoryName: ""
        lifecyclePolicyText: ""
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: The registry ID associated with the request.
          title: registryId
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The repository name associated with the request.
          title: repositoryName
        lifecyclePolicyText:
          allOf:
          - $ref: '#/components/schemas/LifecyclePolicyText'
          - description: The JSON repository policy text.
          title: lifecyclePolicyText
      title: PutLifecyclePolicyResponse
      type: object
    PutLifecyclePolicyRequest:
      example:
        registryId: ""
        repositoryName: ""
        lifecyclePolicyText: ""
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: "The Amazon Web Services account ID associated with the registry\
              \ that contains the repository. If you do&#x2028; not specify a registry,\
              \ the default registry is assumed."
          title: registryId
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository to receive the policy.
          title: repositoryName
        lifecyclePolicyText:
          allOf:
          - $ref: '#/components/schemas/LifecyclePolicyText'
          - description: The JSON repository policy text to apply to the repository.
          title: lifecyclePolicyText
      required:
      - lifecyclePolicyText
      - repositoryName
      title: PutLifecyclePolicyRequest
      type: object
    PutRegistryPolicyResponse:
      example:
        policyText: ""
        registryId: ""
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: The registry ID.
          title: registryId
        policyText:
          allOf:
          - $ref: '#/components/schemas/RegistryPolicyText'
          - description: The JSON policy text for your registry.
          title: policyText
      title: PutRegistryPolicyResponse
      type: object
    PutRegistryPolicyRequest:
      example:
        policyText: ""
      properties:
        policyText:
          allOf:
          - $ref: '#/components/schemas/RegistryPolicyText'
          - description: "The JSON policy text to apply to your registry. The policy\
              \ text follows the same format as IAM policy text. For more information,\
              \ see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/userguide/registry-permissions.html\"\
              >Registry permissions</a> in the <i>Amazon Elastic Container Registry\
              \ User Guide</i>."
          title: policyText
      required:
      - policyText
      title: PutRegistryPolicyRequest
      type: object
    PutRegistryScanningConfigurationResponse:
      example:
        registryScanningConfiguration:
          rules: ""
          scanType: ""
      properties:
        registryScanningConfiguration:
          $ref: '#/components/schemas/PutRegistryScanningConfigurationResponse_registryScanningConfiguration'
      title: PutRegistryScanningConfigurationResponse
      type: object
    PutRegistryScanningConfigurationRequest:
      example:
        rules: ""
        scanType: ""
      properties:
        scanType:
          allOf:
          - $ref: '#/components/schemas/ScanType'
          - description: "<p>The scanning type to set for the registry.</p> <p>When\
              \ a registry scanning configuration is not defined, by default the <code>BASIC</code>\
              \ scan type is used. When basic scanning is used, you may specify filters\
              \ to determine which individual repositories, or all repositories, are\
              \ scanned when new images are pushed to those repositories. Alternatively,\
              \ you can do manual scans of images with basic scanning.</p> <p>When\
              \ the <code>ENHANCED</code> scan type is set, Amazon Inspector provides\
              \ automated vulnerability scanning. You may choose between continuous\
              \ scanning or scan on push and you may specify filters to determine\
              \ which individual repositories, or all repositories, are scanned.</p>"
          title: scanType
        rules:
          allOf:
          - $ref: '#/components/schemas/RegistryScanningRuleList'
          - description: The scanning rules to use for the registry. A scanning rule
              is used to determine which repository filters are used and at what frequency
              scanning will occur.
          title: rules
      title: PutRegistryScanningConfigurationRequest
      type: object
    PutReplicationConfigurationResponse:
      example:
        replicationConfiguration:
          rules: ""
      properties:
        replicationConfiguration:
          $ref: '#/components/schemas/PutReplicationConfigurationResponse_replicationConfiguration'
      title: PutReplicationConfigurationResponse
      type: object
    PutReplicationConfigurationRequest:
      example:
        replicationConfiguration:
          rules: ""
      properties:
        replicationConfiguration:
          $ref: '#/components/schemas/PutReplicationConfigurationRequest_replicationConfiguration'
      required:
      - replicationConfiguration
      title: PutReplicationConfigurationRequest
      type: object
    SetRepositoryPolicyResponse:
      example:
        policyText: ""
        registryId: ""
        repositoryName: ""
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: The registry ID associated with the request.
          title: registryId
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The repository name associated with the request.
          title: repositoryName
        policyText:
          allOf:
          - $ref: '#/components/schemas/RepositoryPolicyText'
          - description: The JSON repository policy text applied to the repository.
          title: policyText
      title: SetRepositoryPolicyResponse
      type: object
    SetRepositoryPolicyRequest:
      example:
        policyText: ""
        registryId: ""
        force: ""
        repositoryName: ""
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: "The Amazon Web Services account ID associated with the registry\
              \ that contains the repository. If you do not specify a registry, the\
              \ default registry is assumed."
          title: registryId
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository to receive the policy.
          title: repositoryName
        policyText:
          allOf:
          - $ref: '#/components/schemas/RepositoryPolicyText'
          - description: "The JSON repository policy text to apply to the repository.\
              \ For more information, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/userguide/repository-policy-examples.html\"\
              >Amazon ECR repository policies</a> in the <i>Amazon Elastic Container\
              \ Registry User Guide</i>."
          title: policyText
        force:
          allOf:
          - $ref: '#/components/schemas/ForceFlag'
          - description: "If the policy you are attempting to set on a repository\
              \ policy would prevent you from setting another policy in the future,\
              \ you must force the <a>SetRepositoryPolicy</a> operation. This is intended\
              \ to prevent accidental repository lock outs."
          title: force
      required:
      - policyText
      - repositoryName
      title: SetRepositoryPolicyRequest
      type: object
    StartImageScanResponse:
      example:
        imageId:
          imageTag: ""
          imageDigest: ""
        imageScanStatus:
          description: ""
          status: ""
        registryId: ""
        repositoryName: ""
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: The registry ID associated with the request.
          title: registryId
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The repository name associated with the request.
          title: repositoryName
        imageId:
          $ref: '#/components/schemas/ImageIdentifier'
        imageScanStatus:
          $ref: '#/components/schemas/DescribeImageScanFindingsResponse_imageScanStatus'
      title: StartImageScanResponse
      type: object
    StartImageScanRequest:
      example:
        imageId:
          imageTag: ""
          imageDigest: ""
        registryId: ""
        repositoryName: ""
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: "The Amazon Web Services account ID associated with the registry\
              \ that contains the repository in which to start an image scan request.\
              \ If you do not specify a registry, the default registry is assumed."
          title: registryId
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository that contains the images to scan.
          title: repositoryName
        imageId:
          $ref: '#/components/schemas/ImageIdentifier'
      required:
      - imageId
      - repositoryName
      title: StartImageScanRequest
      type: object
    UnsupportedImageTypeException: {}
    StartLifecyclePolicyPreviewResponse:
      example:
        registryId: ""
        repositoryName: ""
        lifecyclePolicyText: ""
        status: ""
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: The registry ID associated with the request.
          title: registryId
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The repository name associated with the request.
          title: repositoryName
        lifecyclePolicyText:
          allOf:
          - $ref: '#/components/schemas/LifecyclePolicyText'
          - description: The JSON repository policy text.
          title: lifecyclePolicyText
        status:
          allOf:
          - $ref: '#/components/schemas/LifecyclePolicyPreviewStatus'
          - description: The status of the lifecycle policy preview request.
          title: status
      title: StartLifecyclePolicyPreviewResponse
      type: object
    StartLifecyclePolicyPreviewRequest:
      example:
        registryId: ""
        repositoryName: ""
        lifecyclePolicyText: ""
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: "The Amazon Web Services account ID associated with the registry\
              \ that contains the repository. If you do not specify a registry, the\
              \ default registry is assumed."
          title: registryId
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository to be evaluated.
          title: repositoryName
        lifecyclePolicyText:
          allOf:
          - $ref: '#/components/schemas/LifecyclePolicyText'
          - description: "The policy to be evaluated against. If you do not specify\
              \ a policy, the current policy for the repository is used."
          title: lifecyclePolicyText
      required:
      - repositoryName
      title: StartLifecyclePolicyPreviewRequest
      type: object
    LifecyclePolicyPreviewInProgressException: {}
    TagResourceResponse:
      properties: {}
      type: object
    TagResourceRequest:
      example:
        resourceArn: ""
        tags: ""
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: "The Amazon Resource Name (ARN) of the the resource to which\
              \ to add tags. Currently, the only supported resource is an Amazon ECR\
              \ repository."
          title: resourceArn
        tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          - description: "The tags to add to the resource. A tag is an array of key-value\
              \ pairs. Tag keys can have a maximum character length of 128 characters,\
              \ and tag values can have a maximum length of 256 characters."
          title: tags
      required:
      - resourceArn
      - tags
      title: TagResourceRequest
      type: object
    UntagResourceResponse:
      properties: {}
      type: object
    UntagResourceRequest:
      example:
        tagKeys: ""
        resourceArn: ""
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: "The Amazon Resource Name (ARN) of the resource from which\
              \ to remove tags. Currently, the only supported resource is an Amazon\
              \ ECR repository."
          title: resourceArn
        tagKeys:
          allOf:
          - $ref: '#/components/schemas/TagKeyList'
          - description: The keys of the tags to be removed.
          title: tagKeys
      required:
      - resourceArn
      - tagKeys
      title: UntagResourceRequest
      type: object
    UploadLayerPartResponse:
      example:
        lastByteReceived: ""
        uploadId: ""
        registryId: ""
        repositoryName: ""
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: The registry ID associated with the request.
          title: registryId
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The repository name associated with the request.
          title: repositoryName
        uploadId:
          allOf:
          - $ref: '#/components/schemas/UploadId'
          - description: The upload ID associated with the request.
          title: uploadId
        lastByteReceived:
          allOf:
          - $ref: '#/components/schemas/PartSize'
          - description: The integer value of the last byte received in the request.
          title: lastByteReceived
      title: UploadLayerPartResponse
      type: object
    UploadLayerPartRequest:
      example:
        uploadId: ""
        layerPartBlob: ""
        registryId: ""
        repositoryName: ""
        partFirstByte: ""
        partLastByte: ""
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: "The Amazon Web Services account ID associated with the registry\
              \ to which you are uploading layer parts. If you do not specify a registry,\
              \ the default registry is assumed."
          title: registryId
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository to which you are uploading layer
              parts.
          title: repositoryName
        uploadId:
          allOf:
          - $ref: '#/components/schemas/UploadId'
          - description: The upload ID from a previous <a>InitiateLayerUpload</a>
              operation to associate with the layer part upload.
          title: uploadId
        partFirstByte:
          allOf:
          - $ref: '#/components/schemas/PartSize'
          - description: The position of the first byte of the layer part witin the
              overall image layer.
          title: partFirstByte
        partLastByte:
          allOf:
          - $ref: '#/components/schemas/PartSize'
          - description: The position of the last byte of the layer part within the
              overall image layer.
          title: partLastByte
        layerPartBlob:
          allOf:
          - $ref: '#/components/schemas/LayerPartBlob'
          - description: The base64-encoded layer part payload.
          title: layerPartBlob
      required:
      - layerPartBlob
      - partFirstByte
      - partLastByte
      - repositoryName
      - uploadId
      title: UploadLayerPartRequest
      type: object
    InvalidLayerPartException: {}
    Arch:
      type: string
    Arn:
      type: string
    AttributeKey:
      maxLength: 128
      minLength: 1
      type: string
    AttributeValue:
      maxLength: 256
      minLength: 1
      type: string
    Attribute:
      description: This data type is used in the <a>ImageScanFinding</a> data type.
      properties:
        key:
          allOf:
          - $ref: '#/components/schemas/AttributeKey'
          - description: The attribute key.
          title: key
        value:
          allOf:
          - $ref: '#/components/schemas/AttributeValue'
          - description: The value assigned to the attribute key.
          title: value
      required:
      - key
      title: Attribute
      type: object
    AttributeList:
      items:
        $ref: '#/components/schemas/Attribute'
      maxItems: 50
      minItems: 0
      type: array
    Author:
      type: string
    Base64:
      pattern: ^\S+$
      type: string
    ExpirationTimestamp:
      format: date-time
      type: string
    ProxyEndpoint:
      type: string
    AuthorizationData:
      description: An object representing authorization data for an Amazon ECR registry.
      properties:
        authorizationToken:
          allOf:
          - $ref: '#/components/schemas/Base64'
          - description: "A base64-encoded string that contains authorization data\
              \ for the specified Amazon ECR registry. When the string is decoded,\
              \ it is presented in the format <code>user:password</code> for private\
              \ registry authentication using <code>docker login</code>."
          title: authorizationToken
        expiresAt:
          allOf:
          - $ref: '#/components/schemas/ExpirationTimestamp'
          - description: The Unix time in seconds and milliseconds when the authorization
              token expires. Authorization tokens are valid for 12 hours.
          title: expiresAt
        proxyEndpoint:
          allOf:
          - $ref: '#/components/schemas/ProxyEndpoint'
          - description: "The registry URL to use for this authorization token in\
              \ a <code>docker login</code> command. The Amazon ECR registry URL format\
              \ is <code>https://aws_account_id.dkr.ecr.region.amazonaws.com</code>.\
              \ For example, <code>https://012345678910.dkr.ecr.us-east-1.amazonaws.com</code>.. "
          title: proxyEndpoint
      title: AuthorizationData
      type: object
    AuthorizationDataList:
      items:
        $ref: '#/components/schemas/AuthorizationData'
      type: array
    ImageDigest:
      type: string
    ImageTagsList:
      items:
        $ref: '#/components/schemas/ImageTag'
      type: array
    Platform:
      type: string
    Date:
      format: date-time
      type: string
    RegistryId:
      pattern: "[0-9]{12}"
      title: RegistryId
      type: string
    RepositoryName:
      maxLength: 256
      minLength: 2
      pattern: "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*"
      title: RepositoryName
      type: string
    AwsEcrContainerImageDetails:
      description: The image details of the Amazon ECR container image.
      properties:
        architecture:
          allOf:
          - $ref: '#/components/schemas/Arch'
          - description: The architecture of the Amazon ECR container image.
          title: architecture
        author:
          allOf:
          - $ref: '#/components/schemas/Author'
          - description: The image author of the Amazon ECR container image.
          title: author
        imageHash:
          allOf:
          - $ref: '#/components/schemas/ImageDigest'
          - description: The image hash of the Amazon ECR container image.
          title: imageHash
        imageTags:
          allOf:
          - $ref: '#/components/schemas/ImageTagsList'
          - description: The image tags attached to the Amazon ECR container image.
          title: imageTags
        platform:
          allOf:
          - $ref: '#/components/schemas/Platform'
          - description: The platform of the Amazon ECR container image.
          title: platform
        pushedAt:
          allOf:
          - $ref: '#/components/schemas/Date'
          - description: The date and time the Amazon ECR container image was pushed.
          title: pushedAt
        registry:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: The registry the Amazon ECR container image belongs to.
          title: registry
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository the Amazon ECR container image
              resides in.
          title: repositoryName
      title: AwsEcrContainerImageDetails
      type: object
    BaseScore:
      format: double
      type: number
    BatchedOperationLayerDigestList:
      items:
        $ref: '#/components/schemas/BatchedOperationLayerDigest'
      maxItems: 100
      minItems: 1
      type: array
    LayerList:
      items:
        $ref: '#/components/schemas/Layer'
      type: array
    LayerFailureList:
      items:
        $ref: '#/components/schemas/LayerFailure'
      type: array
    ImageIdentifierList:
      items:
        $ref: '#/components/schemas/ImageIdentifier'
      maxItems: 100
      minItems: 1
      type: array
    ImageFailureList:
      items:
        $ref: '#/components/schemas/ImageFailure'
      type: array
    MediaTypeList:
      items:
        $ref: '#/components/schemas/MediaType'
      maxItems: 100
      minItems: 1
      type: array
    ImageList:
      items:
        $ref: '#/components/schemas/Image'
      type: array
    ScanningConfigurationRepositoryNameList:
      items:
        $ref: '#/components/schemas/RepositoryName'
      maxItems: 25
      minItems: 1
      type: array
    RepositoryScanningConfigurationList:
      items:
        $ref: '#/components/schemas/RepositoryScanningConfiguration'
      type: array
    RepositoryScanningConfigurationFailureList:
      items:
        $ref: '#/components/schemas/RepositoryScanningConfigurationFailure'
      type: array
    BatchedOperationLayerDigest:
      maxLength: 1000
      minLength: 0
      title: BatchedOperationLayerDigest
      type: string
    UploadId:
      pattern: "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
      type: string
    LayerDigestList:
      items:
        $ref: '#/components/schemas/LayerDigest'
      maxItems: 100
      minItems: 1
      type: array
    LayerDigest:
      pattern: "[a-zA-Z0-9-_+.]+:[a-fA-F0-9]+"
      title: LayerDigest
      type: string
    PullThroughCacheRuleRepositoryPrefix:
      maxLength: 20
      minLength: 2
      pattern: "[a-z0-9]+(?:[._-][a-z0-9]+)*"
      title: PullThroughCacheRuleRepositoryPrefix
      type: string
    Url:
      title: Url
      type: string
    CreationTimestamp:
      format: date-time
      type: string
    TagList:
      items:
        $ref: '#/components/schemas/Tag'
      type: array
    ImageTagMutability:
      enum:
      - MUTABLE
      - IMMUTABLE
      title: ImageTagMutability
      type: string
    ImageScanningConfiguration:
      description: The image scanning configuration for a repository.
      properties:
        scanOnPush:
          allOf:
          - $ref: '#/components/schemas/ScanOnPushFlag'
          - description: "The setting that determines whether images are scanned after\
              \ being pushed to a repository. If set to <code>true</code>, images\
              \ will be scanned after being pushed. If this parameter is not specified,\
              \ it will default to <code>false</code> and images will not be scanned\
              \ unless a scan is manually started with the <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/APIReference/API_StartImageScan.html\"\
              >API_StartImageScan</a> API."
          title: scanOnPush
      title: ImageScanningConfiguration
      type: object
    EncryptionConfiguration:
      description: "<p>The encryption configuration for the repository. This determines\
        \ how the contents of your repository are encrypted at rest.</p> <p>By default,\
        \ when no encryption configuration is set or the <code>AES256</code> encryption\
        \ type is used, Amazon ECR uses server-side encryption with Amazon S3-managed\
        \ encryption keys which encrypts your data at rest using an AES-256 encryption\
        \ algorithm. This does not require any action on your part.</p> <p>For more\
        \ control over the encryption of the contents of your repository, you can\
        \ use server-side encryption with Key Management Service key stored in Key\
        \ Management Service (KMS) to encrypt your images. For more information, see\
        \ <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/userguide/encryption-at-rest.html\"\
        >Amazon ECR encryption at rest</a> in the <i>Amazon Elastic Container Registry\
        \ User Guide</i>.</p>"
      properties:
        encryptionType:
          allOf:
          - $ref: '#/components/schemas/EncryptionType'
          - description: "<p>The encryption type to use.</p> <p>If you use the <code>KMS</code>\
              \ encryption type, the contents of the repository will be encrypted\
              \ using server-side encryption with Key Management Service key stored\
              \ in KMS. When you use KMS to encrypt your data, you can either use\
              \ the default Amazon Web Services managed KMS key for Amazon ECR, or\
              \ specify your own KMS key, which you already created. For more information,\
              \ see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html\"\
              >Protecting data using server-side encryption with an KMS key stored\
              \ in Key Management Service (SSE-KMS)</a> in the <i>Amazon Simple Storage\
              \ Service Console Developer Guide</i>.</p> <p>If you use the <code>AES256</code>\
              \ encryption type, Amazon ECR uses server-side encryption with Amazon\
              \ S3-managed encryption keys which encrypts the images in the repository\
              \ using an AES-256 encryption algorithm. For more information, see <a\
              \ href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingServerSideEncryption.html\"\
              >Protecting data using server-side encryption with Amazon S3-managed\
              \ encryption keys (SSE-S3)</a> in the <i>Amazon Simple Storage Service\
              \ Console Developer Guide</i>.</p>"
          title: encryptionType
        kmsKey:
          allOf:
          - $ref: '#/components/schemas/KmsKey'
          - description: "If you use the <code>KMS</code> encryption type, specify\
              \ the KMS key to use for encryption. The alias, key ID, or full ARN\
              \ of the KMS key can be specified. The key must exist in the same Region\
              \ as the repository. If no key is specified, the default Amazon Web\
              \ Services managed KMS key for Amazon ECR will be used."
          title: kmsKey
      required:
      - encryptionType
      title: EncryptionConfiguration
      type: object
    Repository:
      description: An object representing a repository.
      properties:
        repositoryArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: "The Amazon Resource Name (ARN) that identifies the repository.\
              \ The ARN contains the <code>arn:aws:ecr</code> namespace, followed\
              \ by the region of the repository, Amazon Web Services account ID of\
              \ the repository owner, repository namespace, and repository name. For\
              \ example, <code>arn:aws:ecr:region:012345678910:repository/test</code>."
          title: repositoryArn
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: The Amazon Web Services account ID associated with the registry
              that contains the repository.
          title: registryId
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository.
          title: repositoryName
        repositoryUri:
          allOf:
          - $ref: '#/components/schemas/Url'
          - description: The URI for the repository. You can use this URI for container
              image <code>push</code> and <code>pull</code> operations.
          title: repositoryUri
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreationTimestamp'
          - description: "The date and time, in JavaScript date format, when the repository\
              \ was created."
          title: createdAt
        imageTagMutability:
          allOf:
          - $ref: '#/components/schemas/ImageTagMutability'
          - description: The tag mutability setting for the repository.
          title: imageTagMutability
        imageScanningConfiguration:
          $ref: '#/components/schemas/ImageScanningConfiguration'
        encryptionConfiguration:
          $ref: '#/components/schemas/CreateRepositoryRequest_encryptionConfiguration'
      title: Repository
      type: object
    ScoringVector:
      type: string
    Source:
      type: string
    Version:
      type: string
    CvssScore:
      description: The CVSS score for a finding.
      properties:
        baseScore:
          allOf:
          - $ref: '#/components/schemas/BaseScore'
          - description: The base CVSS score used for the finding.
          title: baseScore
        scoringVector:
          allOf:
          - $ref: '#/components/schemas/ScoringVector'
          - description: The vector string of the CVSS score.
          title: scoringVector
        source:
          allOf:
          - $ref: '#/components/schemas/Source'
          - description: The source of the CVSS score.
          title: source
        version:
          allOf:
          - $ref: '#/components/schemas/Version'
          - description: The version of CVSS used for the score.
          title: version
      title: CvssScore
      type: object
    Metric:
      type: string
    Reason:
      type: string
    CvssScoreAdjustment:
      description: Details on adjustments Amazon Inspector made to the CVSS score
        for a finding.
      properties:
        metric:
          allOf:
          - $ref: '#/components/schemas/Metric'
          - description: The metric used to adjust the CVSS score.
          title: metric
        reason:
          allOf:
          - $ref: '#/components/schemas/Reason'
          - description: The reason the CVSS score has been adjustment.
          title: reason
      title: CvssScoreAdjustment
      type: object
    CvssScoreAdjustmentList:
      items:
        $ref: '#/components/schemas/CvssScoreAdjustment'
      type: array
    Score:
      format: double
      type: number
    CvssScoreDetails:
      description: Information about the CVSS score.
      properties:
        adjustments:
          allOf:
          - $ref: '#/components/schemas/CvssScoreAdjustmentList'
          - description: An object that contains details about adjustment Amazon Inspector
              made to the CVSS score.
          title: adjustments
        score:
          allOf:
          - $ref: '#/components/schemas/Score'
          - description: The CVSS score.
          title: score
        scoreSource:
          allOf:
          - $ref: '#/components/schemas/Source'
          - description: The source for the CVSS score.
          title: scoreSource
        scoringVector:
          allOf:
          - $ref: '#/components/schemas/ScoringVector'
          - description: The vector for the CVSS score.
          title: scoringVector
        version:
          allOf:
          - $ref: '#/components/schemas/Version'
          - description: The CVSS version used in scoring.
          title: version
      title: CvssScoreDetails
      type: object
    CvssScoreList:
      items:
        $ref: '#/components/schemas/CvssScore'
      type: array
    LifecyclePolicyText:
      maxLength: 30720
      minLength: 100
      type: string
    EvaluationTimestamp:
      format: date-time
      type: string
    RegistryPolicyText:
      maxLength: 10240
      minLength: 0
      type: string
    RepositoryPolicyText:
      maxLength: 10240
      minLength: 0
      type: string
    ForceFlag:
      type: boolean
    ImageIdentifier:
      description: An object with identifying information for an image in an Amazon
        ECR repository.
      example:
        imageTag: ""
        imageDigest: ""
      properties:
        imageDigest:
          allOf:
          - $ref: '#/components/schemas/ImageDigest'
          - description: The <code>sha256</code> digest of the image manifest.
          title: imageDigest
        imageTag:
          allOf:
          - $ref: '#/components/schemas/ImageTag'
          - description: The tag used for the image.
          title: imageTag
      title: ImageIdentifier
      type: object
    ImageReplicationStatusList:
      items:
        $ref: '#/components/schemas/ImageReplicationStatus'
      type: array
    NextToken:
      type: string
    MaxResults:
      maximum: 1000
      minimum: 1
      type: integer
    ImageScanStatus:
      description: The current status of an image scan.
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/ScanStatus'
          - description: The current state of an image scan.
          title: status
        description:
          allOf:
          - $ref: '#/components/schemas/ScanStatusDescription'
          - description: The description of the image scan status.
          title: description
      title: ImageScanStatus
      type: object
    ImageScanFindings:
      description: The details of an image scan.
      properties:
        imageScanCompletedAt:
          allOf:
          - $ref: '#/components/schemas/ScanTimestamp'
          - description: The time of the last completed image scan.
          title: imageScanCompletedAt
        vulnerabilitySourceUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/VulnerabilitySourceUpdateTimestamp'
          - description: The time when the vulnerability data was last scanned.
          title: vulnerabilitySourceUpdatedAt
        findingSeverityCounts:
          allOf:
          - $ref: '#/components/schemas/FindingSeverityCounts'
          - description: "The image vulnerability counts, sorted by severity."
          title: findingSeverityCounts
        findings:
          allOf:
          - $ref: '#/components/schemas/ImageScanFindingList'
          - description: The findings from the image scan.
          title: findings
        enhancedFindings:
          allOf:
          - $ref: '#/components/schemas/EnhancedImageScanFindingList'
          - description: Details about the enhanced scan findings from Amazon Inspector.
          title: enhancedFindings
      title: ImageScanFindings
      type: object
    TagStatus:
      enum:
      - TAGGED
      - UNTAGGED
      - ANY
      title: TagStatus
      type: string
    DescribeImagesFilter:
      description: An object representing a filter on a <a>DescribeImages</a> operation.
      properties:
        tagStatus:
          allOf:
          - $ref: '#/components/schemas/TagStatus'
          - description: The tag status with which to filter your <a>DescribeImages</a>
              results. You can filter results based on whether they are <code>TAGGED</code>
              or <code>UNTAGGED</code>.
          title: tagStatus
      title: DescribeImagesFilter
      type: object
    ImageDetailList:
      items:
        $ref: '#/components/schemas/ImageDetail'
      type: array
    PullThroughCacheRuleRepositoryPrefixList:
      items:
        $ref: '#/components/schemas/PullThroughCacheRuleRepositoryPrefix'
      maxItems: 100
      minItems: 1
      type: array
    PullThroughCacheRuleList:
      items:
        $ref: '#/components/schemas/PullThroughCacheRule'
      type: array
    ReplicationConfiguration:
      description: The replication configuration for a registry.
      properties:
        rules:
          allOf:
          - $ref: '#/components/schemas/ReplicationRuleList'
          - description: An array of objects representing the replication destinations
              and repository filters for a replication configuration.
          title: rules
      required:
      - rules
      title: ReplicationConfiguration
      type: object
    RepositoryNameList:
      items:
        $ref: '#/components/schemas/RepositoryName'
      maxItems: 100
      minItems: 1
      type: array
    RepositoryList:
      items:
        $ref: '#/components/schemas/Repository'
      type: array
    EncryptionType:
      enum:
      - AES256
      - KMS
      title: EncryptionType
      type: string
    KmsKey:
      maxLength: 2048
      minLength: 1
      type: string
    FindingDescription:
      type: string
    FindingArn:
      type: string
    PackageVulnerabilityDetails:
      description: Information about a package vulnerability finding.
      properties:
        cvss:
          allOf:
          - $ref: '#/components/schemas/CvssScoreList'
          - description: An object that contains details about the CVSS score of a
              finding.
          title: cvss
        referenceUrls:
          allOf:
          - $ref: '#/components/schemas/ReferenceUrlsList'
          - description: One or more URLs that contain details about this vulnerability
              type.
          title: referenceUrls
        relatedVulnerabilities:
          allOf:
          - $ref: '#/components/schemas/RelatedVulnerabilitiesList'
          - description: One or more vulnerabilities related to the one identified
              in this finding.
          title: relatedVulnerabilities
        source:
          allOf:
          - $ref: '#/components/schemas/Source'
          - description: The source of the vulnerability information.
          title: source
        sourceUrl:
          allOf:
          - $ref: '#/components/schemas/Url'
          - description: A URL to the source of the vulnerability information.
          title: sourceUrl
        vendorCreatedAt:
          allOf:
          - $ref: '#/components/schemas/Date'
          - description: The date and time that this vulnerability was first added
              to the vendor's database.
          title: vendorCreatedAt
        vendorSeverity:
          allOf:
          - $ref: '#/components/schemas/Severity'
          - description: The severity the vendor has given to this vulnerability type.
          title: vendorSeverity
        vendorUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Date'
          - description: The date and time the vendor last updated this vulnerability
              in their database.
          title: vendorUpdatedAt
        vulnerabilityId:
          allOf:
          - $ref: '#/components/schemas/VulnerabilityId'
          - description: The ID given to this vulnerability.
          title: vulnerabilityId
        vulnerablePackages:
          allOf:
          - $ref: '#/components/schemas/VulnerablePackagesList'
          - description: The packages impacted by this vulnerability.
          title: vulnerablePackages
      title: PackageVulnerabilityDetails
      type: object
    Remediation:
      description: Information on how to remediate a finding.
      properties:
        recommendation:
          $ref: '#/components/schemas/Remediation_recommendation'
      title: Remediation
      type: object
    ResourceList:
      items:
        $ref: '#/components/schemas/Resource'
      type: array
    ScoreDetails:
      description: Information about the Amazon Inspector score given to a finding.
      properties:
        cvss:
          $ref: '#/components/schemas/ScoreDetails_cvss'
      title: ScoreDetails
      type: object
    Severity:
      type: string
    Status:
      type: string
    Title:
      type: string
    Type:
      type: string
    EnhancedImageScanFinding:
      description: The details of an enhanced image scan. This is returned when enhanced
        scanning is enabled for your private registry.
      properties:
        awsAccountId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: The Amazon Web Services account ID associated with the image.
          title: awsAccountId
        description:
          allOf:
          - $ref: '#/components/schemas/FindingDescription'
          - description: The description of the finding.
          title: description
        findingArn:
          allOf:
          - $ref: '#/components/schemas/FindingArn'
          - description: The Amazon Resource Number (ARN) of the finding.
          title: findingArn
        firstObservedAt:
          allOf:
          - $ref: '#/components/schemas/Date'
          - description: The date and time that the finding was first observed.
          title: firstObservedAt
        lastObservedAt:
          allOf:
          - $ref: '#/components/schemas/Date'
          - description: The date and time that the finding was last observed.
          title: lastObservedAt
        packageVulnerabilityDetails:
          $ref: '#/components/schemas/EnhancedImageScanFinding_packageVulnerabilityDetails'
        remediation:
          $ref: '#/components/schemas/EnhancedImageScanFinding_remediation'
        resources:
          allOf:
          - $ref: '#/components/schemas/ResourceList'
          - description: Contains information on the resources involved in a finding.
          title: resources
        score:
          allOf:
          - $ref: '#/components/schemas/Score'
          - description: The Amazon Inspector score given to the finding.
          title: score
        scoreDetails:
          $ref: '#/components/schemas/EnhancedImageScanFinding_scoreDetails'
        severity:
          allOf:
          - $ref: '#/components/schemas/Severity'
          - description: The severity of the finding.
          title: severity
        status:
          allOf:
          - $ref: '#/components/schemas/Status'
          - description: The status of the finding.
          title: status
        title:
          allOf:
          - $ref: '#/components/schemas/Title'
          - description: The title of the finding.
          title: title
        type:
          allOf:
          - $ref: '#/components/schemas/Type'
          - description: The type of the finding.
          title: type
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/Date'
          - description: The date and time the finding was last updated at.
          title: updatedAt
      title: EnhancedImageScanFinding
      type: object
    EnhancedImageScanFindingList:
      items:
        $ref: '#/components/schemas/EnhancedImageScanFinding'
      type: array
    Epoch:
      type: integer
    FilePath:
      type: string
    FindingName:
      type: string
    FindingSeverity:
      enum:
      - INFORMATIONAL
      - LOW
      - MEDIUM
      - HIGH
      - CRITICAL
      - UNDEFINED
      title: FindingSeverity
      type: string
    SeverityCount:
      minimum: 0
      title: SeverityCount
      type: integer
    FindingSeverityCounts:
      additionalProperties:
        $ref: '#/components/schemas/SeverityCount'
      type: object
    GetAuthorizationTokenRegistryIdList:
      items:
        $ref: '#/components/schemas/RegistryId'
      maxItems: 10
      minItems: 1
      type: array
    LifecyclePreviewMaxResults:
      maximum: 100
      minimum: 1
      type: integer
    LifecyclePolicyPreviewFilter:
      description: The filter for the lifecycle policy preview.
      properties:
        tagStatus:
          allOf:
          - $ref: '#/components/schemas/TagStatus'
          - description: The tag status of the image.
          title: tagStatus
      title: LifecyclePolicyPreviewFilter
      type: object
    LifecyclePolicyPreviewStatus:
      enum:
      - IN_PROGRESS
      - COMPLETE
      - EXPIRED
      - FAILED
      title: LifecyclePolicyPreviewStatus
      type: string
    LifecyclePolicyPreviewResultList:
      items:
        $ref: '#/components/schemas/LifecyclePolicyPreviewResult'
      type: array
    LifecyclePolicyPreviewSummary:
      description: The summary of the lifecycle policy preview request.
      properties:
        expiringImageTotalCount:
          allOf:
          - $ref: '#/components/schemas/ImageCount'
          - description: The number of expiring images.
          title: expiringImageTotalCount
      title: LifecyclePolicyPreviewSummary
      type: object
    RegistryScanningConfiguration:
      description: The scanning configuration for a private registry.
      properties:
        scanType:
          allOf:
          - $ref: '#/components/schemas/ScanType'
          - description: The type of scanning configured for the registry.
          title: scanType
        rules:
          allOf:
          - $ref: '#/components/schemas/RegistryScanningRuleList'
          - description: The scanning rules associated with the registry.
          title: rules
      title: RegistryScanningConfiguration
      type: object
    ImageManifest:
      maxLength: 4194304
      minLength: 1
      type: string
    MediaType:
      title: MediaType
      type: string
    Image:
      description: An object representing an Amazon ECR image.
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: The Amazon Web Services account ID associated with the registry
              containing the image.
          title: registryId
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository associated with the image.
          title: repositoryName
        imageId:
          $ref: '#/components/schemas/Image_imageId'
        imageManifest:
          allOf:
          - $ref: '#/components/schemas/ImageManifest'
          - description: The image manifest associated with the image.
          title: imageManifest
        imageManifestMediaType:
          allOf:
          - $ref: '#/components/schemas/MediaType'
          - description: The manifest media type of the image.
          title: imageManifestMediaType
      title: Image
      type: object
    ImageActionType:
      enum:
      - EXPIRE
      title: ImageActionType
      type: string
    ImageCount:
      minimum: 0
      type: integer
    ImageTagList:
      items:
        $ref: '#/components/schemas/ImageTag'
      type: array
    ImageSizeInBytes:
      type: integer
    PushTimestamp:
      format: date-time
      type: string
    ImageScanFindingsSummary:
      description: A summary of the last completed image scan.
      properties:
        imageScanCompletedAt:
          allOf:
          - $ref: '#/components/schemas/ScanTimestamp'
          - description: The time of the last completed image scan.
          title: imageScanCompletedAt
        vulnerabilitySourceUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/VulnerabilitySourceUpdateTimestamp'
          - description: The time when the vulnerability data was last scanned.
          title: vulnerabilitySourceUpdatedAt
        findingSeverityCounts:
          allOf:
          - $ref: '#/components/schemas/FindingSeverityCounts'
          - description: "The image vulnerability counts, sorted by severity."
          title: findingSeverityCounts
      title: ImageScanFindingsSummary
      type: object
    RecordedPullTimestamp:
      format: date-time
      type: string
    ImageDetail:
      description: An object that describes an image returned by a <a>DescribeImages</a>
        operation.
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: The Amazon Web Services account ID associated with the registry
              to which this image belongs.
          title: registryId
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository to which this image belongs.
          title: repositoryName
        imageDigest:
          allOf:
          - $ref: '#/components/schemas/ImageDigest'
          - description: The <code>sha256</code> digest of the image manifest.
          title: imageDigest
        imageTags:
          allOf:
          - $ref: '#/components/schemas/ImageTagList'
          - description: The list of tags associated with this image.
          title: imageTags
        imageSizeInBytes:
          allOf:
          - $ref: '#/components/schemas/ImageSizeInBytes'
          - description: "<p>The size, in bytes, of the image in the repository.</p>\
              \ <p>If the image is a manifest list, this will be the max size of all\
              \ manifests in the list.</p> <note> <p>Beginning with Docker version\
              \ 1.9, the Docker client compresses image layers before pushing them\
              \ to a V2 Docker registry. The output of the <code>docker images</code>\
              \ command shows the uncompressed image size, so it may return a larger\
              \ image size than the image sizes returned by <a>DescribeImages</a>.</p>\
              \ </note>"
          title: imageSizeInBytes
        imagePushedAt:
          allOf:
          - $ref: '#/components/schemas/PushTimestamp'
          - description: "The date and time, expressed in standard JavaScript date\
              \ format, at which the current image was pushed to the repository. "
          title: imagePushedAt
        imageScanStatus:
          $ref: '#/components/schemas/DescribeImageScanFindingsResponse_imageScanStatus'
        imageScanFindingsSummary:
          $ref: '#/components/schemas/ImageDetail_imageScanFindingsSummary'
        imageManifestMediaType:
          allOf:
          - $ref: '#/components/schemas/MediaType'
          - description: The media type of the image manifest.
          title: imageManifestMediaType
        artifactMediaType:
          allOf:
          - $ref: '#/components/schemas/MediaType'
          - description: The artifact media type of the image.
          title: artifactMediaType
        lastRecordedPullTime:
          allOf:
          - $ref: '#/components/schemas/RecordedPullTimestamp'
          - description: "<p>The date and time, expressed in standard JavaScript date\
              \ format, when Amazon ECR recorded the last image pull.</p> <note> <p>Amazon\
              \ ECR refreshes the last image pull timestamp at least once every 24\
              \ hours. For example, if you pull an image once a day then the <code>lastRecordedPullTime</code>\
              \ timestamp will indicate the exact time that the image was last pulled.\
              \ However, if you pull an image once an hour, because Amazon ECR refreshes\
              \ the <code>lastRecordedPullTime</code> timestamp at least once every\
              \ 24 hours, the result may not be the exact time that the image was\
              \ last pulled.</p> </note>"
          title: lastRecordedPullTime
      title: ImageDetail
      type: object
    ImageFailureCode:
      enum:
      - InvalidImageDigest
      - InvalidImageTag
      - ImageTagDoesNotMatchDigest
      - ImageNotFound
      - MissingDigestAndTag
      - ImageReferencedByManifestList
      - KmsError
      title: ImageFailureCode
      type: string
    ImageFailureReason:
      type: string
    ImageFailure:
      description: An object representing an Amazon ECR image failure.
      properties:
        imageId:
          $ref: '#/components/schemas/ImageFailure_imageId'
        failureCode:
          allOf:
          - $ref: '#/components/schemas/ImageFailureCode'
          - description: The code associated with the failure.
          title: failureCode
        failureReason:
          allOf:
          - $ref: '#/components/schemas/ImageFailureReason'
          - description: The reason for the failure.
          title: failureReason
      title: ImageFailure
      type: object
    ImageTag:
      maxLength: 300
      minLength: 1
      title: ImageTag
      type: string
    Region:
      maxLength: 25
      minLength: 2
      pattern: "[0-9a-z-]{2,25}"
      type: string
    ReplicationStatus:
      enum:
      - IN_PROGRESS
      - COMPLETE
      - FAILED
      title: ReplicationStatus
      type: string
    ReplicationError:
      type: string
    ImageReplicationStatus:
      description: The status of the replication process for an image.
      properties:
        region:
          allOf:
          - $ref: '#/components/schemas/Region'
          - description: The destination Region for the image replication.
          title: region
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: The Amazon Web Services account ID associated with the registry
              to which the image belongs.
          title: registryId
        status:
          allOf:
          - $ref: '#/components/schemas/ReplicationStatus'
          - description: The image replication status.
          title: status
        failureCode:
          allOf:
          - $ref: '#/components/schemas/ReplicationError'
          - description: The failure code for a replication that has failed.
          title: failureCode
      title: ImageReplicationStatus
      type: object
    ImageScanFinding:
      description: Contains information about an image scan finding.
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/FindingName'
          - description: "The name associated with the finding, usually a CVE number."
          title: name
        description:
          allOf:
          - $ref: '#/components/schemas/FindingDescription'
          - description: The description of the finding.
          title: description
        uri:
          allOf:
          - $ref: '#/components/schemas/Url'
          - description: A link containing additional details about the security vulnerability.
          title: uri
        severity:
          allOf:
          - $ref: '#/components/schemas/FindingSeverity'
          - description: The finding severity.
          title: severity
        attributes:
          allOf:
          - $ref: '#/components/schemas/AttributeList'
          - description: A collection of attributes of the host from which the finding
              is generated.
          title: attributes
      title: ImageScanFinding
      type: object
    ImageScanFindingList:
      items:
        $ref: '#/components/schemas/ImageScanFinding'
      type: array
    ScanTimestamp:
      format: date-time
      type: string
    VulnerabilitySourceUpdateTimestamp:
      format: date-time
      type: string
    ScanStatus:
      enum:
      - IN_PROGRESS
      - COMPLETE
      - FAILED
      - UNSUPPORTED_IMAGE
      - ACTIVE
      - PENDING
      - SCAN_ELIGIBILITY_EXPIRED
      - FINDINGS_UNAVAILABLE
      title: ScanStatus
      type: string
    ScanStatusDescription:
      type: string
    ScanOnPushFlag:
      type: boolean
    PartSize:
      minimum: 0
      type: integer
    LayerAvailability:
      enum:
      - AVAILABLE
      - UNAVAILABLE
      title: LayerAvailability
      type: string
    LayerSizeInBytes:
      type: integer
    Layer:
      description: An object representing an Amazon ECR image layer.
      properties:
        layerDigest:
          allOf:
          - $ref: '#/components/schemas/LayerDigest'
          - description: The <code>sha256</code> digest of the image layer.
          title: layerDigest
        layerAvailability:
          allOf:
          - $ref: '#/components/schemas/LayerAvailability'
          - description: The availability status of the image layer.
          title: layerAvailability
        layerSize:
          allOf:
          - $ref: '#/components/schemas/LayerSizeInBytes'
          - description: "The size, in bytes, of the image layer."
          title: layerSize
        mediaType:
          allOf:
          - $ref: '#/components/schemas/MediaType'
          - description: "The media type of the layer, such as <code>application/vnd.docker.image.rootfs.diff.tar.gzip</code>\
              \ or <code>application/vnd.oci.image.layer.v1.tar+gzip</code>."
          title: mediaType
      title: Layer
      type: object
    LayerFailureCode:
      enum:
      - InvalidLayerDigest
      - MissingLayerDigest
      title: LayerFailureCode
      type: string
    LayerFailureReason:
      type: string
    LayerFailure:
      description: An object representing an Amazon ECR image layer failure.
      properties:
        layerDigest:
          allOf:
          - $ref: '#/components/schemas/BatchedOperationLayerDigest'
          - description: The layer digest associated with the failure.
          title: layerDigest
        failureCode:
          allOf:
          - $ref: '#/components/schemas/LayerFailureCode'
          - description: The failure code associated with the failure.
          title: failureCode
        failureReason:
          allOf:
          - $ref: '#/components/schemas/LayerFailureReason'
          - description: The reason for the failure.
          title: failureReason
      title: LayerFailure
      type: object
    LayerPartBlob:
      maxLength: 20971520
      minLength: 0
      type: string
    LifecyclePolicyRuleAction:
      description: The type of action to be taken.
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/ImageActionType'
          - description: The type of action to be taken.
          title: type
      title: LifecyclePolicyRuleAction
      type: object
    LifecyclePolicyRulePriority:
      minimum: 1
      type: integer
    LifecyclePolicyPreviewResult:
      description: The result of the lifecycle policy preview.
      properties:
        imageTags:
          allOf:
          - $ref: '#/components/schemas/ImageTagList'
          - description: The list of tags associated with this image.
          title: imageTags
        imageDigest:
          allOf:
          - $ref: '#/components/schemas/ImageDigest'
          - description: The <code>sha256</code> digest of the image manifest.
          title: imageDigest
        imagePushedAt:
          allOf:
          - $ref: '#/components/schemas/PushTimestamp'
          - description: "The date and time, expressed in standard JavaScript date\
              \ format, at which the current image was pushed to the repository."
          title: imagePushedAt
        action:
          $ref: '#/components/schemas/LifecyclePolicyPreviewResult_action'
        appliedRulePriority:
          allOf:
          - $ref: '#/components/schemas/LifecyclePolicyRulePriority'
          - description: The priority of the applied rule.
          title: appliedRulePriority
      title: LifecyclePolicyPreviewResult
      type: object
    ListImagesFilter:
      description: An object representing a filter on a <a>ListImages</a> operation.
      properties:
        tagStatus:
          allOf:
          - $ref: '#/components/schemas/TagStatus'
          - description: The tag status with which to filter your <a>ListImages</a>
              results. You can filter results based on whether they are <code>TAGGED</code>
              or <code>UNTAGGED</code>.
          title: tagStatus
      title: ListImagesFilter
      type: object
    PackageManager:
      type: string
    ReferenceUrlsList:
      items:
        $ref: '#/components/schemas/Url'
      type: array
    RelatedVulnerabilitiesList:
      items:
        $ref: '#/components/schemas/RelatedVulnerability'
      type: array
    VulnerabilityId:
      type: string
    VulnerablePackagesList:
      items:
        $ref: '#/components/schemas/VulnerablePackage'
      type: array
    PullThroughCacheRule:
      description: The details of a pull through cache rule.
      properties:
        ecrRepositoryPrefix:
          allOf:
          - $ref: '#/components/schemas/PullThroughCacheRuleRepositoryPrefix'
          - description: The Amazon ECR repository prefix associated with the pull
              through cache rule.
          title: ecrRepositoryPrefix
        upstreamRegistryUrl:
          allOf:
          - $ref: '#/components/schemas/Url'
          - description: The upstream registry URL associated with the pull through
              cache rule.
          title: upstreamRegistryUrl
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreationTimestamp'
          - description: The date and time the pull through cache was created.
          title: createdAt
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: The Amazon Web Services account ID associated with the registry
              the pull through cache rule is associated with.
          title: registryId
      title: PullThroughCacheRule
      type: object
    ScanType:
      enum:
      - BASIC
      - ENHANCED
      title: ScanType
      type: string
    RegistryScanningRuleList:
      items:
        $ref: '#/components/schemas/RegistryScanningRule'
      maxItems: 2
      minItems: 0
      type: array
    RecommendationText:
      type: string
    Recommendation:
      description: Details about the recommended course of action to remediate the
        finding.
      properties:
        url:
          allOf:
          - $ref: '#/components/schemas/Url'
          - description: The URL address to the CVE remediation recommendations.
          title: url
        text:
          allOf:
          - $ref: '#/components/schemas/RecommendationText'
          - description: The recommended course of action to remediate the finding.
          title: text
      title: Recommendation
      type: object
    ScanFrequency:
      enum:
      - SCAN_ON_PUSH
      - CONTINUOUS_SCAN
      - MANUAL
      title: ScanFrequency
      type: string
    ScanningRepositoryFilterList:
      items:
        $ref: '#/components/schemas/ScanningRepositoryFilter'
      maxItems: 100
      minItems: 0
      type: array
    RegistryScanningRule:
      description: The details of a scanning rule for a private registry.
      properties:
        scanFrequency:
          allOf:
          - $ref: '#/components/schemas/ScanFrequency'
          - description: "The frequency that scans are performed at for a private\
              \ registry. When the <code>ENHANCED</code> scan type is specified, the\
              \ supported scan frequencies are <code>CONTINUOUS_SCAN</code> and <code>SCAN_ON_PUSH</code>.\
              \ When the <code>BASIC</code> scan type is specified, the <code>SCAN_ON_PUSH</code>\
              \ and <code>MANUAL</code> scan frequencies are supported."
          title: scanFrequency
        repositoryFilters:
          allOf:
          - $ref: '#/components/schemas/ScanningRepositoryFilterList'
          - description: The repository filters associated with the scanning configuration
              for a private registry.
          title: repositoryFilters
      required:
      - repositoryFilters
      - scanFrequency
      title: RegistryScanningRule
      type: object
    RelatedVulnerability:
      title: RelatedVulnerability
      type: string
    Release:
      type: string
    ReplicationRuleList:
      items:
        $ref: '#/components/schemas/ReplicationRule'
      maxItems: 10
      minItems: 0
      type: array
    ReplicationDestination:
      description: An array of objects representing the destination for a replication
        rule.
      properties:
        region:
          allOf:
          - $ref: '#/components/schemas/Region'
          - description: The Region to replicate to.
          title: region
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: "The Amazon Web Services account ID of the Amazon ECR private\
              \ registry to replicate to. When configuring cross-Region replication\
              \ within your own registry, specify your own account ID."
          title: registryId
      required:
      - region
      - registryId
      title: ReplicationDestination
      type: object
    ReplicationDestinationList:
      items:
        $ref: '#/components/schemas/ReplicationDestination'
      maxItems: 25
      minItems: 0
      type: array
    RepositoryFilterList:
      items:
        $ref: '#/components/schemas/RepositoryFilter'
      maxItems: 100
      minItems: 1
      type: array
    ReplicationRule:
      description: An array of objects representing the replication destinations and
        repository filters for a replication configuration.
      properties:
        destinations:
          allOf:
          - $ref: '#/components/schemas/ReplicationDestinationList'
          - description: An array of objects representing the destination for a replication
              rule.
          title: destinations
        repositoryFilters:
          allOf:
          - $ref: '#/components/schemas/RepositoryFilterList'
          - description: An array of objects representing the filters for a replication
              rule. Specifying a repository filter for a replication rule provides
              a method for controlling which repositories in a private registry are
              replicated.
          title: repositoryFilters
      required:
      - destinations
      title: ReplicationRule
      type: object
    RepositoryFilterValue:
      maxLength: 256
      minLength: 2
      pattern: "^(?:[a-z0-9]+(?:[._-][a-z0-9]*)*/)*[a-z0-9]*(?:[._-][a-z0-9]*)*$"
      type: string
    RepositoryFilterType:
      enum:
      - PREFIX_MATCH
      title: RepositoryFilterType
      type: string
    RepositoryFilter:
      description: "The filter settings used with image replication. Specifying a\
        \ repository filter to a replication rule provides a method for controlling\
        \ which repositories in a private registry are replicated. If no repository\
        \ filter is specified, all images in the repository are replicated."
      properties:
        filter:
          allOf:
          - $ref: '#/components/schemas/RepositoryFilterValue'
          - description: "The repository filter details. When the <code>PREFIX_MATCH</code>\
              \ filter type is specified, this value is required and should be the\
              \ repository name prefix to configure replication for."
          title: filter
        filterType:
          allOf:
          - $ref: '#/components/schemas/RepositoryFilterType'
          - description: "The repository filter type. The only supported value is\
              \ <code>PREFIX_MATCH</code>, which is a repository name prefix specified\
              \ with the <code>filter</code> parameter."
          title: filterType
      required:
      - filter
      - filterType
      title: RepositoryFilter
      type: object
    RepositoryScanningConfiguration:
      description: The details of the scanning configuration for a repository.
      properties:
        repositoryArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: The ARN of the repository.
          title: repositoryArn
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository.
          title: repositoryName
        scanOnPush:
          allOf:
          - $ref: '#/components/schemas/ScanOnPushFlag'
          - description: Whether or not scan on push is configured for the repository.
          title: scanOnPush
        scanFrequency:
          allOf:
          - $ref: '#/components/schemas/ScanFrequency'
          - description: The scan frequency for the repository.
          title: scanFrequency
        appliedScanFilters:
          allOf:
          - $ref: '#/components/schemas/ScanningRepositoryFilterList'
          - description: The scan filters applied to the repository.
          title: appliedScanFilters
      title: RepositoryScanningConfiguration
      type: object
    ScanningConfigurationFailureCode:
      enum:
      - REPOSITORY_NOT_FOUND
      title: ScanningConfigurationFailureCode
      type: string
    ScanningConfigurationFailureReason:
      type: string
    RepositoryScanningConfigurationFailure:
      description: The details about any failures associated with the scanning configuration
        of a repository.
      properties:
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository.
          title: repositoryName
        failureCode:
          allOf:
          - $ref: '#/components/schemas/ScanningConfigurationFailureCode'
          - description: The failure code.
          title: failureCode
        failureReason:
          allOf:
          - $ref: '#/components/schemas/ScanningConfigurationFailureReason'
          - description: The reason for the failure.
          title: failureReason
      title: RepositoryScanningConfigurationFailure
      type: object
    ResourceDetails:
      description: Contains details about the resource involved in the finding.
      properties:
        awsEcrContainerImage:
          $ref: '#/components/schemas/ResourceDetails_awsEcrContainerImage'
      title: ResourceDetails
      type: object
    ResourceId:
      type: string
    Tags:
      additionalProperties:
        $ref: '#/components/schemas/TagValue'
      type: object
    Resource:
      description: Details about the resource involved in a finding.
      properties:
        details:
          $ref: '#/components/schemas/Resource_details'
        id:
          allOf:
          - $ref: '#/components/schemas/ResourceId'
          - description: The ID of the resource.
          title: id
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          - description: The tags attached to the resource.
          title: tags
        type:
          allOf:
          - $ref: '#/components/schemas/Type'
          - description: The type of resource.
          title: type
      title: Resource
      type: object
    ScanningRepositoryFilterValue:
      maxLength: 255
      minLength: 1
      pattern: "^[a-z0-9*](?:[._\\-/a-z0-9*]?[a-z0-9*]+)*$"
      type: string
    ScanningRepositoryFilterType:
      enum:
      - WILDCARD
      title: ScanningRepositoryFilterType
      type: string
    ScanningRepositoryFilter:
      description: "The details of a scanning repository filter. For more information\
        \ on how to use filters, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/userguide/image-scanning.html#image-scanning-filters\"\
        >Using filters</a> in the <i>Amazon Elastic Container Registry User Guide</i>."
      properties:
        filter:
          allOf:
          - $ref: '#/components/schemas/ScanningRepositoryFilterValue'
          - description: The filter to use when scanning.
          title: filter
        filterType:
          allOf:
          - $ref: '#/components/schemas/ScanningRepositoryFilterType'
          - description: The type associated with the filter.
          title: filterType
      required:
      - filter
      - filterType
      title: ScanningRepositoryFilter
      type: object
    SourceLayerHash:
      type: string
    TagKey:
      title: TagKey
      type: string
    TagValue:
      title: TagValue
      type: string
    Tag:
      description: "The metadata to apply to a resource to help you categorize and\
        \ organize them. Each tag consists of a key and a value, both of which you\
        \ define. Tag keys can have a maximum character length of 128 characters,\
        \ and tag values can have a maximum length of 256 characters."
      properties:
        Key:
          allOf:
          - $ref: '#/components/schemas/TagKey'
          - description: One part of a key-value pair that make up a tag. A <code>key</code>
              is a general label that acts like a category for more specific tag values.
          title: Key
        Value:
          allOf:
          - $ref: '#/components/schemas/TagValue'
          - description: A <code>value</code> acts as a descriptor within a tag category
              (key).
          title: Value
      title: Tag
      type: object
    TagKeyList:
      items:
        $ref: '#/components/schemas/TagKey'
      type: array
    VulnerablePackageName:
      type: string
    VulnerablePackage:
      description: Information on the vulnerable package identified by a finding.
      properties:
        arch:
          allOf:
          - $ref: '#/components/schemas/Arch'
          - description: The architecture of the vulnerable package.
          title: arch
        epoch:
          allOf:
          - $ref: '#/components/schemas/Epoch'
          - description: The epoch of the vulnerable package.
          title: epoch
        filePath:
          allOf:
          - $ref: '#/components/schemas/FilePath'
          - description: The file path of the vulnerable package.
          title: filePath
        name:
          allOf:
          - $ref: '#/components/schemas/VulnerablePackageName'
          - description: The name of the vulnerable package.
          title: name
        packageManager:
          allOf:
          - $ref: '#/components/schemas/PackageManager'
          - description: The package manager of the vulnerable package.
          title: packageManager
        release:
          allOf:
          - $ref: '#/components/schemas/Release'
          - description: The release of the vulnerable package.
          title: release
        sourceLayerHash:
          allOf:
          - $ref: '#/components/schemas/SourceLayerHash'
          - description: The source layer hash of the vulnerable package.
          title: sourceLayerHash
        version:
          allOf:
          - $ref: '#/components/schemas/Version'
          - description: The version of the vulnerable package.
          title: version
      title: VulnerablePackage
      type: object
    CreateRepositoryResponse_repository:
      allOf:
      - $ref: '#/components/schemas/Repository'
      - description: The repository that was created.
      title: CreateRepositoryResponse_repository
    CreateRepositoryRequest_imageScanningConfiguration:
      allOf:
      - $ref: '#/components/schemas/ImageScanningConfiguration'
      - description: The image scanning configuration for the repository. This determines
          whether images are scanned for known vulnerabilities after being pushed
          to the repository.
      example:
        scanOnPush: ""
      title: CreateRepositoryRequest_imageScanningConfiguration
    CreateRepositoryRequest_encryptionConfiguration:
      allOf:
      - $ref: '#/components/schemas/EncryptionConfiguration'
      - description: The encryption configuration for the repository. This determines
          how the contents of your repository are encrypted at rest.
      example:
        kmsKey: ""
        encryptionType: ""
      title: CreateRepositoryRequest_encryptionConfiguration
    DeleteRepositoryResponse_repository:
      allOf:
      - $ref: '#/components/schemas/Repository'
      - description: The repository that was deleted.
      title: DeleteRepositoryResponse_repository
    DescribeImageScanFindingsResponse_imageScanStatus:
      allOf:
      - $ref: '#/components/schemas/ImageScanStatus'
      - description: The current state of the scan.
      example:
        description: ""
        status: ""
      title: DescribeImageScanFindingsResponse_imageScanStatus
    DescribeImageScanFindingsResponse_imageScanFindings:
      allOf:
      - $ref: '#/components/schemas/ImageScanFindings'
      - description: The information contained in the image scan findings.
      example:
        enhancedFindings: ""
        imageScanCompletedAt: ""
        findings: ""
        vulnerabilitySourceUpdatedAt: ""
        findingSeverityCounts: ""
      title: DescribeImageScanFindingsResponse_imageScanFindings
    DescribeImagesRequest_filter:
      allOf:
      - $ref: '#/components/schemas/DescribeImagesFilter'
      - description: The filter key and value with which to filter your <code>DescribeImages</code>
          results.
      example:
        tagStatus: ""
      title: DescribeImagesRequest_filter
    DescribeRegistryResponse_replicationConfiguration:
      allOf:
      - $ref: '#/components/schemas/ReplicationConfiguration'
      - description: The replication configuration for the registry.
      example:
        rules: ""
      title: DescribeRegistryResponse_replicationConfiguration
    GetLifecyclePolicyPreviewResponse_summary:
      allOf:
      - $ref: '#/components/schemas/LifecyclePolicyPreviewSummary'
      - description: The list of images that is returned as a result of the action.
      example:
        expiringImageTotalCount: ""
      title: GetLifecyclePolicyPreviewResponse_summary
    GetLifecyclePolicyPreviewRequest_filter:
      allOf:
      - $ref: '#/components/schemas/LifecyclePolicyPreviewFilter'
      - description: "An optional parameter that filters results based on image tag\
          \ status and all tags, if tagged."
      example:
        tagStatus: ""
      title: GetLifecyclePolicyPreviewRequest_filter
    GetRegistryScanningConfigurationResponse_scanningConfiguration:
      allOf:
      - $ref: '#/components/schemas/RegistryScanningConfiguration'
      - description: The scanning configuration for the registry.
      example:
        rules: ""
        scanType: ""
      title: GetRegistryScanningConfigurationResponse_scanningConfiguration
    ListImagesRequest_filter:
      allOf:
      - $ref: '#/components/schemas/ListImagesFilter'
      - description: The filter key and value with which to filter your <code>ListImages</code>
          results.
      example:
        tagStatus: ""
      title: ListImagesRequest_filter
    PutImageResponse_image:
      allOf:
      - $ref: '#/components/schemas/Image'
      - description: Details of the image uploaded.
      example:
        imageManifest: ""
        imageId:
          imageTag: ""
          imageDigest: ""
        registryId: ""
        repositoryName: ""
        imageManifestMediaType: ""
      title: PutImageResponse_image
    PutImageScanningConfigurationResponse_imageScanningConfiguration:
      allOf:
      - $ref: '#/components/schemas/ImageScanningConfiguration'
      - description: The image scanning configuration setting for the repository.
      example:
        scanOnPush: ""
      title: PutImageScanningConfigurationResponse_imageScanningConfiguration
    PutImageScanningConfigurationRequest_imageScanningConfiguration:
      allOf:
      - $ref: '#/components/schemas/ImageScanningConfiguration'
      - description: The image scanning configuration for the repository. This setting
          determines whether images are scanned for known vulnerabilities after being
          pushed to the repository.
      example:
        scanOnPush: ""
      title: PutImageScanningConfigurationRequest_imageScanningConfiguration
    PutRegistryScanningConfigurationResponse_registryScanningConfiguration:
      allOf:
      - $ref: '#/components/schemas/RegistryScanningConfiguration'
      - description: The scanning configuration for your registry.
      example:
        rules: ""
        scanType: ""
      title: PutRegistryScanningConfigurationResponse_registryScanningConfiguration
    PutReplicationConfigurationResponse_replicationConfiguration:
      allOf:
      - $ref: '#/components/schemas/ReplicationConfiguration'
      - description: The contents of the replication configuration for the registry.
      example:
        rules: ""
      title: PutReplicationConfigurationResponse_replicationConfiguration
    PutReplicationConfigurationRequest_replicationConfiguration:
      allOf:
      - $ref: '#/components/schemas/ReplicationConfiguration'
      - description: An object representing the replication configuration for a registry.
      example:
        rules: ""
      title: PutReplicationConfigurationRequest_replicationConfiguration
    Remediation_recommendation:
      allOf:
      - $ref: '#/components/schemas/Recommendation'
      - description: An object that contains information about the recommended course
          of action to remediate the finding.
      title: Remediation_recommendation
    ScoreDetails_cvss:
      allOf:
      - $ref: '#/components/schemas/CvssScoreDetails'
      - description: An object that contains details about the CVSS score given to
          a finding.
      title: ScoreDetails_cvss
    EnhancedImageScanFinding_packageVulnerabilityDetails:
      allOf:
      - $ref: '#/components/schemas/PackageVulnerabilityDetails'
      - description: An object that contains the details of a package vulnerability
          finding.
      title: EnhancedImageScanFinding_packageVulnerabilityDetails
    EnhancedImageScanFinding_remediation:
      allOf:
      - $ref: '#/components/schemas/Remediation'
      - description: An object that contains the details about how to remediate a
          finding.
      title: EnhancedImageScanFinding_remediation
    EnhancedImageScanFinding_scoreDetails:
      allOf:
      - $ref: '#/components/schemas/ScoreDetails'
      - description: An object that contains details of the Amazon Inspector score.
      title: EnhancedImageScanFinding_scoreDetails
    Image_imageId:
      allOf:
      - $ref: '#/components/schemas/ImageIdentifier'
      - description: An object containing the image tag and image digest associated
          with an image.
      example:
        imageTag: ""
        imageDigest: ""
      title: Image_imageId
    ImageDetail_imageScanFindingsSummary:
      allOf:
      - $ref: '#/components/schemas/ImageScanFindingsSummary'
      - description: A summary of the last completed image scan.
      title: ImageDetail_imageScanFindingsSummary
    ImageFailure_imageId:
      allOf:
      - $ref: '#/components/schemas/ImageIdentifier'
      - description: The image ID associated with the failure.
      title: ImageFailure_imageId
    LifecyclePolicyPreviewResult_action:
      allOf:
      - $ref: '#/components/schemas/LifecyclePolicyRuleAction'
      - description: The type of action to be taken.
      title: LifecyclePolicyPreviewResult_action
    ResourceDetails_awsEcrContainerImage:
      allOf:
      - $ref: '#/components/schemas/AwsEcrContainerImageDetails'
      - description: An object that contains details about the Amazon ECR container
          image involved in the finding.
      title: ResourceDetails_awsEcrContainerImage
    Resource_details:
      allOf:
      - $ref: '#/components/schemas/ResourceDetails'
      - description: An object that contains details about the resource involved in
          a finding.
      title: Resource_details
  securitySchemes:
    hmac:
      description: Amazon Signature authorization v4
      in: header
      name: Authorization
      type: apiKey
      x-amazon-apigateway-authtype: awsSigv4
      x-apikeyInfoFunc: openapi_server.controllers.security_controller.info_from_hmac
x-hasEquivalentPaths: true
