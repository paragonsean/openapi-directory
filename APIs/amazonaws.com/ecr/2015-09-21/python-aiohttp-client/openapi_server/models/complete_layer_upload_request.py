# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CompleteLayerUploadRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, registry_id: str=None, repository_name: str=None, upload_id: str=None, layer_digests: List=None):
        """CompleteLayerUploadRequest - a model defined in OpenAPI

        :param registry_id: The registry_id of this CompleteLayerUploadRequest.
        :param repository_name: The repository_name of this CompleteLayerUploadRequest.
        :param upload_id: The upload_id of this CompleteLayerUploadRequest.
        :param layer_digests: The layer_digests of this CompleteLayerUploadRequest.
        """
        self.openapi_types = {
            'registry_id': str,
            'repository_name': str,
            'upload_id': str,
            'layer_digests': List
        }

        self.attribute_map = {
            'registry_id': 'registryId',
            'repository_name': 'repositoryName',
            'upload_id': 'uploadId',
            'layer_digests': 'layerDigests'
        }

        self._registry_id = registry_id
        self._repository_name = repository_name
        self._upload_id = upload_id
        self._layer_digests = layer_digests

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CompleteLayerUploadRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CompleteLayerUploadRequest of this CompleteLayerUploadRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def registry_id(self):
        """Gets the registry_id of this CompleteLayerUploadRequest.


        :return: The registry_id of this CompleteLayerUploadRequest.
        :rtype: str
        """
        return self._registry_id

    @registry_id.setter
    def registry_id(self, registry_id):
        """Sets the registry_id of this CompleteLayerUploadRequest.


        :param registry_id: The registry_id of this CompleteLayerUploadRequest.
        :type registry_id: str
        """

        self._registry_id = registry_id

    @property
    def repository_name(self):
        """Gets the repository_name of this CompleteLayerUploadRequest.


        :return: The repository_name of this CompleteLayerUploadRequest.
        :rtype: str
        """
        return self._repository_name

    @repository_name.setter
    def repository_name(self, repository_name):
        """Sets the repository_name of this CompleteLayerUploadRequest.


        :param repository_name: The repository_name of this CompleteLayerUploadRequest.
        :type repository_name: str
        """
        if repository_name is None:
            raise ValueError("Invalid value for `repository_name`, must not be `None`")

        self._repository_name = repository_name

    @property
    def upload_id(self):
        """Gets the upload_id of this CompleteLayerUploadRequest.


        :return: The upload_id of this CompleteLayerUploadRequest.
        :rtype: str
        """
        return self._upload_id

    @upload_id.setter
    def upload_id(self, upload_id):
        """Sets the upload_id of this CompleteLayerUploadRequest.


        :param upload_id: The upload_id of this CompleteLayerUploadRequest.
        :type upload_id: str
        """
        if upload_id is None:
            raise ValueError("Invalid value for `upload_id`, must not be `None`")

        self._upload_id = upload_id

    @property
    def layer_digests(self):
        """Gets the layer_digests of this CompleteLayerUploadRequest.


        :return: The layer_digests of this CompleteLayerUploadRequest.
        :rtype: List
        """
        return self._layer_digests

    @layer_digests.setter
    def layer_digests(self, layer_digests):
        """Sets the layer_digests of this CompleteLayerUploadRequest.


        :param layer_digests: The layer_digests of this CompleteLayerUploadRequest.
        :type layer_digests: List
        """
        if layer_digests is None:
            raise ValueError("Invalid value for `layer_digests`, must not be `None`")

        self._layer_digests = layer_digests
