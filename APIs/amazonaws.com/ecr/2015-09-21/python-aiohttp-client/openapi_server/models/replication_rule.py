# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReplicationRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destinations: List=None, repository_filters: List=None):
        """ReplicationRule - a model defined in OpenAPI

        :param destinations: The destinations of this ReplicationRule.
        :param repository_filters: The repository_filters of this ReplicationRule.
        """
        self.openapi_types = {
            'destinations': List,
            'repository_filters': List
        }

        self.attribute_map = {
            'destinations': 'destinations',
            'repository_filters': 'repositoryFilters'
        }

        self._destinations = destinations
        self._repository_filters = repository_filters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReplicationRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReplicationRule of this ReplicationRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destinations(self):
        """Gets the destinations of this ReplicationRule.


        :return: The destinations of this ReplicationRule.
        :rtype: List
        """
        return self._destinations

    @destinations.setter
    def destinations(self, destinations):
        """Sets the destinations of this ReplicationRule.


        :param destinations: The destinations of this ReplicationRule.
        :type destinations: List
        """
        if destinations is None:
            raise ValueError("Invalid value for `destinations`, must not be `None`")

        self._destinations = destinations

    @property
    def repository_filters(self):
        """Gets the repository_filters of this ReplicationRule.


        :return: The repository_filters of this ReplicationRule.
        :rtype: List
        """
        return self._repository_filters

    @repository_filters.setter
    def repository_filters(self, repository_filters):
        """Sets the repository_filters of this ReplicationRule.


        :param repository_filters: The repository_filters of this ReplicationRule.
        :type repository_filters: List
        """

        self._repository_filters = repository_filters
