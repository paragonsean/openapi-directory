# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PutRegistryPolicyRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, policy_text: str=None):
        """PutRegistryPolicyRequest - a model defined in OpenAPI

        :param policy_text: The policy_text of this PutRegistryPolicyRequest.
        """
        self.openapi_types = {
            'policy_text': str
        }

        self.attribute_map = {
            'policy_text': 'policyText'
        }

        self._policy_text = policy_text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutRegistryPolicyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutRegistryPolicyRequest of this PutRegistryPolicyRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def policy_text(self):
        """Gets the policy_text of this PutRegistryPolicyRequest.


        :return: The policy_text of this PutRegistryPolicyRequest.
        :rtype: str
        """
        return self._policy_text

    @policy_text.setter
    def policy_text(self, policy_text):
        """Sets the policy_text of this PutRegistryPolicyRequest.


        :param policy_text: The policy_text of this PutRegistryPolicyRequest.
        :type policy_text: str
        """
        if policy_text is None:
            raise ValueError("Invalid value for `policy_text`, must not be `None`")

        self._policy_text = policy_text
