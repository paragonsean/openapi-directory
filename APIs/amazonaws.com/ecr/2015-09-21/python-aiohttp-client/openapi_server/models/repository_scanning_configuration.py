# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.scan_frequency import ScanFrequency
from openapi_server import util


class RepositoryScanningConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, repository_arn: str=None, repository_name: str=None, scan_on_push: bool=None, scan_frequency: ScanFrequency=None, applied_scan_filters: List=None):
        """RepositoryScanningConfiguration - a model defined in OpenAPI

        :param repository_arn: The repository_arn of this RepositoryScanningConfiguration.
        :param repository_name: The repository_name of this RepositoryScanningConfiguration.
        :param scan_on_push: The scan_on_push of this RepositoryScanningConfiguration.
        :param scan_frequency: The scan_frequency of this RepositoryScanningConfiguration.
        :param applied_scan_filters: The applied_scan_filters of this RepositoryScanningConfiguration.
        """
        self.openapi_types = {
            'repository_arn': str,
            'repository_name': str,
            'scan_on_push': bool,
            'scan_frequency': ScanFrequency,
            'applied_scan_filters': List
        }

        self.attribute_map = {
            'repository_arn': 'repositoryArn',
            'repository_name': 'repositoryName',
            'scan_on_push': 'scanOnPush',
            'scan_frequency': 'scanFrequency',
            'applied_scan_filters': 'appliedScanFilters'
        }

        self._repository_arn = repository_arn
        self._repository_name = repository_name
        self._scan_on_push = scan_on_push
        self._scan_frequency = scan_frequency
        self._applied_scan_filters = applied_scan_filters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RepositoryScanningConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RepositoryScanningConfiguration of this RepositoryScanningConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def repository_arn(self):
        """Gets the repository_arn of this RepositoryScanningConfiguration.


        :return: The repository_arn of this RepositoryScanningConfiguration.
        :rtype: str
        """
        return self._repository_arn

    @repository_arn.setter
    def repository_arn(self, repository_arn):
        """Sets the repository_arn of this RepositoryScanningConfiguration.


        :param repository_arn: The repository_arn of this RepositoryScanningConfiguration.
        :type repository_arn: str
        """

        self._repository_arn = repository_arn

    @property
    def repository_name(self):
        """Gets the repository_name of this RepositoryScanningConfiguration.


        :return: The repository_name of this RepositoryScanningConfiguration.
        :rtype: str
        """
        return self._repository_name

    @repository_name.setter
    def repository_name(self, repository_name):
        """Sets the repository_name of this RepositoryScanningConfiguration.


        :param repository_name: The repository_name of this RepositoryScanningConfiguration.
        :type repository_name: str
        """

        self._repository_name = repository_name

    @property
    def scan_on_push(self):
        """Gets the scan_on_push of this RepositoryScanningConfiguration.


        :return: The scan_on_push of this RepositoryScanningConfiguration.
        :rtype: bool
        """
        return self._scan_on_push

    @scan_on_push.setter
    def scan_on_push(self, scan_on_push):
        """Sets the scan_on_push of this RepositoryScanningConfiguration.


        :param scan_on_push: The scan_on_push of this RepositoryScanningConfiguration.
        :type scan_on_push: bool
        """

        self._scan_on_push = scan_on_push

    @property
    def scan_frequency(self):
        """Gets the scan_frequency of this RepositoryScanningConfiguration.


        :return: The scan_frequency of this RepositoryScanningConfiguration.
        :rtype: ScanFrequency
        """
        return self._scan_frequency

    @scan_frequency.setter
    def scan_frequency(self, scan_frequency):
        """Sets the scan_frequency of this RepositoryScanningConfiguration.


        :param scan_frequency: The scan_frequency of this RepositoryScanningConfiguration.
        :type scan_frequency: ScanFrequency
        """

        self._scan_frequency = scan_frequency

    @property
    def applied_scan_filters(self):
        """Gets the applied_scan_filters of this RepositoryScanningConfiguration.


        :return: The applied_scan_filters of this RepositoryScanningConfiguration.
        :rtype: List
        """
        return self._applied_scan_filters

    @applied_scan_filters.setter
    def applied_scan_filters(self, applied_scan_filters):
        """Sets the applied_scan_filters of this RepositoryScanningConfiguration.


        :param applied_scan_filters: The applied_scan_filters of this RepositoryScanningConfiguration.
        :type applied_scan_filters: List
        """

        self._applied_scan_filters = applied_scan_filters
