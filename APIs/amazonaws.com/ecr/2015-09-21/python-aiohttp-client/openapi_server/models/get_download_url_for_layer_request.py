# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetDownloadUrlForLayerRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, registry_id: str=None, repository_name: str=None, layer_digest: str=None):
        """GetDownloadUrlForLayerRequest - a model defined in OpenAPI

        :param registry_id: The registry_id of this GetDownloadUrlForLayerRequest.
        :param repository_name: The repository_name of this GetDownloadUrlForLayerRequest.
        :param layer_digest: The layer_digest of this GetDownloadUrlForLayerRequest.
        """
        self.openapi_types = {
            'registry_id': str,
            'repository_name': str,
            'layer_digest': str
        }

        self.attribute_map = {
            'registry_id': 'registryId',
            'repository_name': 'repositoryName',
            'layer_digest': 'layerDigest'
        }

        self._registry_id = registry_id
        self._repository_name = repository_name
        self._layer_digest = layer_digest

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetDownloadUrlForLayerRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetDownloadUrlForLayerRequest of this GetDownloadUrlForLayerRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def registry_id(self):
        """Gets the registry_id of this GetDownloadUrlForLayerRequest.


        :return: The registry_id of this GetDownloadUrlForLayerRequest.
        :rtype: str
        """
        return self._registry_id

    @registry_id.setter
    def registry_id(self, registry_id):
        """Sets the registry_id of this GetDownloadUrlForLayerRequest.


        :param registry_id: The registry_id of this GetDownloadUrlForLayerRequest.
        :type registry_id: str
        """

        self._registry_id = registry_id

    @property
    def repository_name(self):
        """Gets the repository_name of this GetDownloadUrlForLayerRequest.


        :return: The repository_name of this GetDownloadUrlForLayerRequest.
        :rtype: str
        """
        return self._repository_name

    @repository_name.setter
    def repository_name(self, repository_name):
        """Sets the repository_name of this GetDownloadUrlForLayerRequest.


        :param repository_name: The repository_name of this GetDownloadUrlForLayerRequest.
        :type repository_name: str
        """
        if repository_name is None:
            raise ValueError("Invalid value for `repository_name`, must not be `None`")

        self._repository_name = repository_name

    @property
    def layer_digest(self):
        """Gets the layer_digest of this GetDownloadUrlForLayerRequest.


        :return: The layer_digest of this GetDownloadUrlForLayerRequest.
        :rtype: str
        """
        return self._layer_digest

    @layer_digest.setter
    def layer_digest(self, layer_digest):
        """Sets the layer_digest of this GetDownloadUrlForLayerRequest.


        :param layer_digest: The layer_digest of this GetDownloadUrlForLayerRequest.
        :type layer_digest: str
        """
        if layer_digest is None:
            raise ValueError("Invalid value for `layer_digest`, must not be `None`")

        self._layer_digest = layer_digest
