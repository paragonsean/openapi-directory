# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.lifecycle_policy_preview_result_action import LifecyclePolicyPreviewResultAction
from openapi_server import util


class LifecyclePolicyPreviewResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, image_tags: List=None, image_digest: str=None, image_pushed_at: datetime=None, action: LifecyclePolicyPreviewResultAction=None, applied_rule_priority: int=None):
        """LifecyclePolicyPreviewResult - a model defined in OpenAPI

        :param image_tags: The image_tags of this LifecyclePolicyPreviewResult.
        :param image_digest: The image_digest of this LifecyclePolicyPreviewResult.
        :param image_pushed_at: The image_pushed_at of this LifecyclePolicyPreviewResult.
        :param action: The action of this LifecyclePolicyPreviewResult.
        :param applied_rule_priority: The applied_rule_priority of this LifecyclePolicyPreviewResult.
        """
        self.openapi_types = {
            'image_tags': List,
            'image_digest': str,
            'image_pushed_at': datetime,
            'action': LifecyclePolicyPreviewResultAction,
            'applied_rule_priority': int
        }

        self.attribute_map = {
            'image_tags': 'imageTags',
            'image_digest': 'imageDigest',
            'image_pushed_at': 'imagePushedAt',
            'action': 'action',
            'applied_rule_priority': 'appliedRulePriority'
        }

        self._image_tags = image_tags
        self._image_digest = image_digest
        self._image_pushed_at = image_pushed_at
        self._action = action
        self._applied_rule_priority = applied_rule_priority

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LifecyclePolicyPreviewResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LifecyclePolicyPreviewResult of this LifecyclePolicyPreviewResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def image_tags(self):
        """Gets the image_tags of this LifecyclePolicyPreviewResult.


        :return: The image_tags of this LifecyclePolicyPreviewResult.
        :rtype: List
        """
        return self._image_tags

    @image_tags.setter
    def image_tags(self, image_tags):
        """Sets the image_tags of this LifecyclePolicyPreviewResult.


        :param image_tags: The image_tags of this LifecyclePolicyPreviewResult.
        :type image_tags: List
        """

        self._image_tags = image_tags

    @property
    def image_digest(self):
        """Gets the image_digest of this LifecyclePolicyPreviewResult.


        :return: The image_digest of this LifecyclePolicyPreviewResult.
        :rtype: str
        """
        return self._image_digest

    @image_digest.setter
    def image_digest(self, image_digest):
        """Sets the image_digest of this LifecyclePolicyPreviewResult.


        :param image_digest: The image_digest of this LifecyclePolicyPreviewResult.
        :type image_digest: str
        """

        self._image_digest = image_digest

    @property
    def image_pushed_at(self):
        """Gets the image_pushed_at of this LifecyclePolicyPreviewResult.


        :return: The image_pushed_at of this LifecyclePolicyPreviewResult.
        :rtype: datetime
        """
        return self._image_pushed_at

    @image_pushed_at.setter
    def image_pushed_at(self, image_pushed_at):
        """Sets the image_pushed_at of this LifecyclePolicyPreviewResult.


        :param image_pushed_at: The image_pushed_at of this LifecyclePolicyPreviewResult.
        :type image_pushed_at: datetime
        """

        self._image_pushed_at = image_pushed_at

    @property
    def action(self):
        """Gets the action of this LifecyclePolicyPreviewResult.


        :return: The action of this LifecyclePolicyPreviewResult.
        :rtype: LifecyclePolicyPreviewResultAction
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this LifecyclePolicyPreviewResult.


        :param action: The action of this LifecyclePolicyPreviewResult.
        :type action: LifecyclePolicyPreviewResultAction
        """

        self._action = action

    @property
    def applied_rule_priority(self):
        """Gets the applied_rule_priority of this LifecyclePolicyPreviewResult.


        :return: The applied_rule_priority of this LifecyclePolicyPreviewResult.
        :rtype: int
        """
        return self._applied_rule_priority

    @applied_rule_priority.setter
    def applied_rule_priority(self, applied_rule_priority):
        """Sets the applied_rule_priority of this LifecyclePolicyPreviewResult.


        :param applied_rule_priority: The applied_rule_priority of this LifecyclePolicyPreviewResult.
        :type applied_rule_priority: int
        """

        self._applied_rule_priority = applied_rule_priority
