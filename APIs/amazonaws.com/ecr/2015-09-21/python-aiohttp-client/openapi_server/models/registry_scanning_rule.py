# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.scan_frequency import ScanFrequency
from openapi_server import util


class RegistryScanningRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, scan_frequency: ScanFrequency=None, repository_filters: List=None):
        """RegistryScanningRule - a model defined in OpenAPI

        :param scan_frequency: The scan_frequency of this RegistryScanningRule.
        :param repository_filters: The repository_filters of this RegistryScanningRule.
        """
        self.openapi_types = {
            'scan_frequency': ScanFrequency,
            'repository_filters': List
        }

        self.attribute_map = {
            'scan_frequency': 'scanFrequency',
            'repository_filters': 'repositoryFilters'
        }

        self._scan_frequency = scan_frequency
        self._repository_filters = repository_filters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegistryScanningRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegistryScanningRule of this RegistryScanningRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def scan_frequency(self):
        """Gets the scan_frequency of this RegistryScanningRule.


        :return: The scan_frequency of this RegistryScanningRule.
        :rtype: ScanFrequency
        """
        return self._scan_frequency

    @scan_frequency.setter
    def scan_frequency(self, scan_frequency):
        """Sets the scan_frequency of this RegistryScanningRule.


        :param scan_frequency: The scan_frequency of this RegistryScanningRule.
        :type scan_frequency: ScanFrequency
        """
        if scan_frequency is None:
            raise ValueError("Invalid value for `scan_frequency`, must not be `None`")

        self._scan_frequency = scan_frequency

    @property
    def repository_filters(self):
        """Gets the repository_filters of this RegistryScanningRule.


        :return: The repository_filters of this RegistryScanningRule.
        :rtype: List
        """
        return self._repository_filters

    @repository_filters.setter
    def repository_filters(self, repository_filters):
        """Sets the repository_filters of this RegistryScanningRule.


        :param repository_filters: The repository_filters of this RegistryScanningRule.
        :type repository_filters: List
        """
        if repository_filters is None:
            raise ValueError("Invalid value for `repository_filters`, must not be `None`")

        self._repository_filters = repository_filters
