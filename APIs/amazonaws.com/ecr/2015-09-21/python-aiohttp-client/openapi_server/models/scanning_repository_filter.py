# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.scanning_repository_filter_type import ScanningRepositoryFilterType
from openapi_server import util


class ScanningRepositoryFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filter: str=None, filter_type: ScanningRepositoryFilterType=None):
        """ScanningRepositoryFilter - a model defined in OpenAPI

        :param filter: The filter of this ScanningRepositoryFilter.
        :param filter_type: The filter_type of this ScanningRepositoryFilter.
        """
        self.openapi_types = {
            'filter': str,
            'filter_type': ScanningRepositoryFilterType
        }

        self.attribute_map = {
            'filter': 'filter',
            'filter_type': 'filterType'
        }

        self._filter = filter
        self._filter_type = filter_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScanningRepositoryFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScanningRepositoryFilter of this ScanningRepositoryFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filter(self):
        """Gets the filter of this ScanningRepositoryFilter.


        :return: The filter of this ScanningRepositoryFilter.
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this ScanningRepositoryFilter.


        :param filter: The filter of this ScanningRepositoryFilter.
        :type filter: str
        """
        if filter is None:
            raise ValueError("Invalid value for `filter`, must not be `None`")

        self._filter = filter

    @property
    def filter_type(self):
        """Gets the filter_type of this ScanningRepositoryFilter.


        :return: The filter_type of this ScanningRepositoryFilter.
        :rtype: ScanningRepositoryFilterType
        """
        return self._filter_type

    @filter_type.setter
    def filter_type(self, filter_type):
        """Sets the filter_type of this ScanningRepositoryFilter.


        :param filter_type: The filter_type of this ScanningRepositoryFilter.
        :type filter_type: ScanningRepositoryFilterType
        """
        if filter_type is None:
            raise ValueError("Invalid value for `filter_type`, must not be `None`")

        self._filter_type = filter_type
