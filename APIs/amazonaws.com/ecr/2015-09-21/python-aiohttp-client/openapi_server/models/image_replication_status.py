# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.replication_status import ReplicationStatus
from openapi_server import util


class ImageReplicationStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, region: str=None, registry_id: str=None, status: ReplicationStatus=None, failure_code: str=None):
        """ImageReplicationStatus - a model defined in OpenAPI

        :param region: The region of this ImageReplicationStatus.
        :param registry_id: The registry_id of this ImageReplicationStatus.
        :param status: The status of this ImageReplicationStatus.
        :param failure_code: The failure_code of this ImageReplicationStatus.
        """
        self.openapi_types = {
            'region': str,
            'registry_id': str,
            'status': ReplicationStatus,
            'failure_code': str
        }

        self.attribute_map = {
            'region': 'region',
            'registry_id': 'registryId',
            'status': 'status',
            'failure_code': 'failureCode'
        }

        self._region = region
        self._registry_id = registry_id
        self._status = status
        self._failure_code = failure_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageReplicationStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImageReplicationStatus of this ImageReplicationStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def region(self):
        """Gets the region of this ImageReplicationStatus.


        :return: The region of this ImageReplicationStatus.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this ImageReplicationStatus.


        :param region: The region of this ImageReplicationStatus.
        :type region: str
        """

        self._region = region

    @property
    def registry_id(self):
        """Gets the registry_id of this ImageReplicationStatus.


        :return: The registry_id of this ImageReplicationStatus.
        :rtype: str
        """
        return self._registry_id

    @registry_id.setter
    def registry_id(self, registry_id):
        """Sets the registry_id of this ImageReplicationStatus.


        :param registry_id: The registry_id of this ImageReplicationStatus.
        :type registry_id: str
        """

        self._registry_id = registry_id

    @property
    def status(self):
        """Gets the status of this ImageReplicationStatus.


        :return: The status of this ImageReplicationStatus.
        :rtype: ReplicationStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ImageReplicationStatus.


        :param status: The status of this ImageReplicationStatus.
        :type status: ReplicationStatus
        """

        self._status = status

    @property
    def failure_code(self):
        """Gets the failure_code of this ImageReplicationStatus.


        :return: The failure_code of this ImageReplicationStatus.
        :rtype: str
        """
        return self._failure_code

    @failure_code.setter
    def failure_code(self, failure_code):
        """Sets the failure_code of this ImageReplicationStatus.


        :param failure_code: The failure_code of this ImageReplicationStatus.
        :type failure_code: str
        """

        self._failure_code = failure_code
