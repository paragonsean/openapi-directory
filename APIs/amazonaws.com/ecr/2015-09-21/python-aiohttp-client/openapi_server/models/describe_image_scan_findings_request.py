# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.image_identifier import ImageIdentifier
from openapi_server import util


class DescribeImageScanFindingsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, registry_id: str=None, repository_name: str=None, image_id: ImageIdentifier=None, next_token: str=None, max_results: int=None):
        """DescribeImageScanFindingsRequest - a model defined in OpenAPI

        :param registry_id: The registry_id of this DescribeImageScanFindingsRequest.
        :param repository_name: The repository_name of this DescribeImageScanFindingsRequest.
        :param image_id: The image_id of this DescribeImageScanFindingsRequest.
        :param next_token: The next_token of this DescribeImageScanFindingsRequest.
        :param max_results: The max_results of this DescribeImageScanFindingsRequest.
        """
        self.openapi_types = {
            'registry_id': str,
            'repository_name': str,
            'image_id': ImageIdentifier,
            'next_token': str,
            'max_results': int
        }

        self.attribute_map = {
            'registry_id': 'registryId',
            'repository_name': 'repositoryName',
            'image_id': 'imageId',
            'next_token': 'nextToken',
            'max_results': 'maxResults'
        }

        self._registry_id = registry_id
        self._repository_name = repository_name
        self._image_id = image_id
        self._next_token = next_token
        self._max_results = max_results

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeImageScanFindingsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeImageScanFindingsRequest of this DescribeImageScanFindingsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def registry_id(self):
        """Gets the registry_id of this DescribeImageScanFindingsRequest.


        :return: The registry_id of this DescribeImageScanFindingsRequest.
        :rtype: str
        """
        return self._registry_id

    @registry_id.setter
    def registry_id(self, registry_id):
        """Sets the registry_id of this DescribeImageScanFindingsRequest.


        :param registry_id: The registry_id of this DescribeImageScanFindingsRequest.
        :type registry_id: str
        """

        self._registry_id = registry_id

    @property
    def repository_name(self):
        """Gets the repository_name of this DescribeImageScanFindingsRequest.


        :return: The repository_name of this DescribeImageScanFindingsRequest.
        :rtype: str
        """
        return self._repository_name

    @repository_name.setter
    def repository_name(self, repository_name):
        """Sets the repository_name of this DescribeImageScanFindingsRequest.


        :param repository_name: The repository_name of this DescribeImageScanFindingsRequest.
        :type repository_name: str
        """
        if repository_name is None:
            raise ValueError("Invalid value for `repository_name`, must not be `None`")

        self._repository_name = repository_name

    @property
    def image_id(self):
        """Gets the image_id of this DescribeImageScanFindingsRequest.


        :return: The image_id of this DescribeImageScanFindingsRequest.
        :rtype: ImageIdentifier
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """Sets the image_id of this DescribeImageScanFindingsRequest.


        :param image_id: The image_id of this DescribeImageScanFindingsRequest.
        :type image_id: ImageIdentifier
        """
        if image_id is None:
            raise ValueError("Invalid value for `image_id`, must not be `None`")

        self._image_id = image_id

    @property
    def next_token(self):
        """Gets the next_token of this DescribeImageScanFindingsRequest.


        :return: The next_token of this DescribeImageScanFindingsRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this DescribeImageScanFindingsRequest.


        :param next_token: The next_token of this DescribeImageScanFindingsRequest.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def max_results(self):
        """Gets the max_results of this DescribeImageScanFindingsRequest.


        :return: The max_results of this DescribeImageScanFindingsRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this DescribeImageScanFindingsRequest.


        :param max_results: The max_results of this DescribeImageScanFindingsRequest.
        :type max_results: int
        """

        self._max_results = max_results
