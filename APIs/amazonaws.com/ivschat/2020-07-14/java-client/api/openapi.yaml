openapi: 3.0.0
info:
  contact:
    email: mike.ralphson@gmail.com
    name: Mike Ralphson
    url: https://github.com/mermade/aws2openapi
    x-twitter: PermittedSoc
  description: "<p> <b>Introduction</b> </p> <p>The Amazon IVS Chat control-plane\
    \ API enables you to create and manage Amazon IVS Chat resources. You also need\
    \ to integrate with the <a href=\"https://docs.aws.amazon.com/ivs/latest/chatmsgapireference/chat-messaging-api.html\"\
    > Amazon IVS Chat Messaging API</a>, to enable users to interact with chat rooms\
    \ in real time.</p> <p>The API is an AWS regional service. For a list of supported\
    \ regions and Amazon IVS Chat HTTPS service endpoints, see the Amazon IVS Chat\
    \ information on the <a href=\"https://docs.aws.amazon.com/general/latest/gr/ivs.html\"\
    >Amazon IVS page</a> in the <i>AWS General Reference</i>. </p> <p> <b>Notes on\
    \ terminology:</b> </p> <ul> <li> <p>You create service applications using the\
    \ Amazon IVS Chat API. We refer to these as <i>applications</i>.</p> </li> <li>\
    \ <p>You create front-end client applications (browser and Android/iOS apps) using\
    \ the Amazon IVS Chat Messaging API. We refer to these as <i>clients</i>. </p>\
    \ </li> </ul> <p> <b>Resources</b> </p> <p>The following resources are part of\
    \ Amazon IVS Chat:</p> <ul> <li> <p> <b>LoggingConfiguration</b> — A configuration\
    \ that allows customers to store and record sent messages in a chat room. See\
    \ the Logging Configuration endpoints for more information.</p> </li> <li> <p>\
    \ <b>Room</b> — The central Amazon IVS Chat resource through which clients connect\
    \ to and exchange chat messages. See the Room endpoints for more information.</p>\
    \ </li> </ul> <p> <b>Tagging</b> </p> <p>A <i>tag</i> is a metadata label that\
    \ you assign to an AWS resource. A tag comprises a <i>key</i> and a <i>value</i>,\
    \ both set by you. For example, you might set a tag as <code>topic:nature</code>\
    \ to label a particular video category. See <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\"\
    >Tagging AWS Resources</a> for more information, including restrictions that apply\
    \ to tags and \"Tag naming limits and requirements\"; Amazon IVS Chat has no service-specific\
    \ constraints beyond what is documented there.</p> <p>Tags can help you identify\
    \ and organize your AWS resources. For example, you can use the same tag for different\
    \ resources to indicate that they are related. You can also use tags to manage\
    \ access (see <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html\"\
    >Access Tags</a>).</p> <p>The Amazon IVS Chat API has these tag-related endpoints:\
    \ <a>TagResource</a>, <a>UntagResource</a>, and <a>ListTagsForResource</a>. The\
    \ following resource supports tagging: Room.</p> <p>At most 50 tags can be applied\
    \ to a resource.</p> <p> <b>API Access Security</b> </p> <p>Your Amazon IVS Chat\
    \ applications (service applications and clients) must be authenticated and authorized\
    \ to access Amazon IVS Chat resources. Note the differences between these concepts:</p>\
    \ <ul> <li> <p> <i>Authentication</i> is about verifying identity. Requests to\
    \ the Amazon IVS Chat API must be signed to verify your identity.</p> </li> <li>\
    \ <p> <i>Authorization</i> is about granting permissions. Your IAM roles need\
    \ to have permissions for Amazon IVS Chat API requests.</p> </li> </ul> <p>Users\
    \ (viewers) connect to a room using secure access tokens that you create using\
    \ the <a>CreateChatToken</a> endpoint through the AWS SDK. You call CreateChatToken\
    \ for every user’s chat session, passing identity and authorization information\
    \ about the user.</p> <p> <b>Signing API Requests</b> </p> <p>HTTP API requests\
    \ must be signed with an AWS SigV4 signature using your AWS security credentials.\
    \ The AWS Command Line Interface (CLI) and the AWS SDKs take care of signing the\
    \ underlying API calls for you. However, if your application calls the Amazon\
    \ IVS Chat HTTP API directly, it’s your responsibility to sign the requests.</p>\
    \ <p>You generate a signature using valid AWS credentials for an IAM role that\
    \ has permission to perform the requested action. For example, DeleteMessage requests\
    \ must be made using an IAM role that has the <code>ivschat:DeleteMessage</code>\
    \ permission.</p> <p>For more information:</p> <ul> <li> <p>Authentication and\
    \ generating signatures — See <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/sig-v4-authenticating-requests.html\"\
    >Authenticating Requests (Amazon Web Services Signature Version 4)</a> in the\
    \ <i>Amazon Web Services General Reference</i>.</p> </li> <li> <p>Managing Amazon\
    \ IVS permissions — See <a href=\"https://docs.aws.amazon.com/ivs/latest/userguide/security-iam.html\"\
    >Identity and Access Management</a> on the Security page of the <i>Amazon IVS\
    \ User Guide</i>.</p> </li> </ul> <p> <b>Amazon Resource Names (ARNs)</b> </p>\
    \ <p>ARNs uniquely identify AWS resources. An ARN is required when you need to\
    \ specify a resource unambiguously across all of AWS, such as in IAM policies\
    \ and API calls. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\"\
    >Amazon Resource Names</a> in the <i>AWS General Reference</i>.</p> <p> <b>Messaging\
    \ Endpoints</b> </p> <ul> <li> <p> <a>DeleteMessage</a> — Sends an event to a\
    \ specific room which directs clients to delete a specific message; that is, unrender\
    \ it from view and delete it from the client’s chat history. This event’s <code>EventName</code>\
    \ is <code>aws:DELETE_MESSAGE</code>. This replicates the <a href=\"https://docs.aws.amazon.com/ivs/latest/chatmsgapireference/actions-deletemessage-publish.html\"\
    > DeleteMessage</a> WebSocket operation in the Amazon IVS Chat Messaging API.</p>\
    \ </li> <li> <p> <a>DisconnectUser</a> — Disconnects all connections using a specified\
    \ user ID from a room. This replicates the <a href=\"https://docs.aws.amazon.com/ivs/latest/chatmsgapireference/actions-disconnectuser-publish.html\"\
    > DisconnectUser</a> WebSocket operation in the Amazon IVS Chat Messaging API.</p>\
    \ </li> <li> <p> <a>SendEvent</a> — Sends an event to a room. Use this within\
    \ your application’s business logic to send events to clients of a room; e.g.,\
    \ to notify clients to change the way the chat UI is rendered.</p> </li> </ul>\
    \ <p> <b>Chat Token Endpoint</b> </p> <ul> <li> <p> <a>CreateChatToken</a> — Creates\
    \ an encrypted token that is used by a chat participant to establish an individual\
    \ WebSocket chat connection to a room. When the token is used to connect to chat,\
    \ the connection is valid for the session duration specified in the request. The\
    \ token becomes invalid at the token-expiration timestamp included in the response.</p>\
    \ </li> </ul> <p> <b>Room Endpoints</b> </p> <ul> <li> <p> <a>CreateRoom</a> —\
    \ Creates a room that allows clients to connect and pass messages.</p> </li> <li>\
    \ <p> <a>DeleteRoom</a> — Deletes the specified room.</p> </li> <li> <p> <a>GetRoom</a>\
    \ — Gets the specified room.</p> </li> <li> <p> <a>ListRooms</a> — Gets summary\
    \ information about all your rooms in the AWS region where the API request is\
    \ processed. </p> </li> <li> <p> <a>UpdateRoom</a> — Updates a room’s configuration.</p>\
    \ </li> </ul> <p> <b>Logging Configuration Endpoints</b> </p> <ul> <li> <p> <a>CreateLoggingConfiguration</a>\
    \ — Creates a logging configuration that allows clients to store and record sent\
    \ messages.</p> </li> <li> <p> <a>DeleteLoggingConfiguration</a> — Deletes the\
    \ specified logging configuration.</p> </li> <li> <p> <a>GetLoggingConfiguration</a>\
    \ — Gets the specified logging configuration.</p> </li> <li> <p> <a>ListLoggingConfigurations</a>\
    \ — Gets summary information about all your logging configurations in the AWS\
    \ region where the API request is processed.</p> </li> <li> <p> <a>UpdateLoggingConfiguration</a>\
    \ — Updates a specified logging configuration.</p> </li> </ul> <p> <b>Tags Endpoints</b>\
    \ </p> <ul> <li> <p> <a>ListTagsForResource</a> — Gets information about AWS tags\
    \ for the specified ARN.</p> </li> <li> <p> <a>TagResource</a> — Adds or updates\
    \ tags for the AWS resource with the specified ARN.</p> </li> <li> <p> <a>UntagResource</a>\
    \ — Removes tags from the resource with the specified ARN.</p> </li> </ul> <p>All\
    \ the above are HTTP operations. There is a separate <i>messaging</i> API for\
    \ managing Chat resources; see the <a href=\"https://docs.aws.amazon.com/ivs/latest/chatmsgapireference/chat-messaging-api.html\"\
    > Amazon IVS Chat Messaging API Reference</a>.</p>"
  license:
    name: Apache 2.0 License
    url: http://www.apache.org/licenses/
  termsOfService: https://aws.amazon.com/service-terms/
  title: Amazon Interactive Video Service Chat
  version: 2020-07-14
  x-release: v4
  x-logo:
    url: https://twitter.com/awscloud/profile_image?size=original
    backgroundColor: '#FFFFFF'
  x-providerName: amazonaws.com
  x-serviceName: ivschat
  x-aws-signingName: ivschat
  x-origin:
  - contentType: application/json
    url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/ivschat-2020-07-14.normal.json
    converter:
      url: https://github.com/mermade/aws2openapi
      version: 1.0.0
    x-apisguru-driver: external
  x-apiClientRegistration:
    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
  - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: https://docs.aws.amazon.com/ivschat/
servers:
- description: The ivschat multi-region endpoint
  url: "http://ivschat.{region}.amazonaws.com"
  variables:
    region:
      default: us-east-1
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
- description: The ivschat multi-region endpoint
  url: "https://ivschat.{region}.amazonaws.com"
  variables:
    region:
      default: us-east-1
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
- description: The ivschat endpoint for China (Beijing) and China (Ningxia)
  url: "http://ivschat.{region}.amazonaws.com.cn"
  variables:
    region:
      default: cn-north-1
      description: The AWS region
      enum:
      - cn-north-1
      - cn-northwest-1
- description: The ivschat endpoint for China (Beijing) and China (Ningxia)
  url: "https://ivschat.{region}.amazonaws.com.cn"
  variables:
    region:
      default: cn-north-1
      description: The AWS region
      enum:
      - cn-north-1
      - cn-northwest-1
security:
- hmac: []
paths:
  /CreateChatToken:
    post:
      description: "<p>Creates an encrypted token that is used by a chat participant\
        \ to establish an individual WebSocket chat connection to a room. When the\
        \ token is used to connect to chat, the connection is valid for the session\
        \ duration specified in the request. The token becomes invalid at the token-expiration\
        \ timestamp included in the response.</p> <p>Use the <code>capabilities</code>\
        \ field to permit an end user to send messages or moderate a room.</p> <p>The\
        \ <code>attributes</code> field securely attaches structured data to the chat\
        \ session; the data is included within each message sent by the end user and\
        \ received by other participants in the room. Common use cases for attributes\
        \ include passing end-user profile data like an icon, display name, colors,\
        \ badges, and other display features.</p> <p>Encryption keys are owned by\
        \ Amazon IVS Chat and never used directly by your application.</p>"
      operationId: CreateChatToken
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateChatToken_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateChatTokenResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingVerification'
          description: PendingVerification
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
      x-content-type: application/json
      x-accepts:
      - application/json
  /CreateLoggingConfiguration:
    post:
      description: Creates a logging configuration that allows clients to store and
        record sent messages.
      operationId: CreateLoggingConfiguration
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLoggingConfiguration_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateLoggingConfigurationResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingVerification'
          description: PendingVerification
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
      x-content-type: application/json
      x-accepts:
      - application/json
  /CreateRoom:
    post:
      description: Creates a room that allows clients to connect and pass messages.
      operationId: CreateRoom
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRoom_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateRoomResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingVerification'
          description: PendingVerification
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
      x-content-type: application/json
      x-accepts:
      - application/json
  /DeleteLoggingConfiguration:
    post:
      description: Deletes the specified logging configuration.
      operationId: DeleteLoggingConfiguration
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteLoggingConfiguration_request'
        required: true
      responses:
        "204":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingVerification'
          description: PendingVerification
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
      x-content-type: application/json
      x-accepts:
      - application/json
  /DeleteMessage:
    post:
      description: "Sends an event to a specific room which directs clients to delete\
        \ a specific message; that is, unrender it from view and delete it from the\
        \ client’s chat history. This event’s <code>EventName</code> is <code>aws:DELETE_MESSAGE</code>.\
        \ This replicates the <a href=\"https://docs.aws.amazon.com/ivs/latest/chatmsgapireference/actions-deletemessage-publish.html\"\
        > DeleteMessage</a> WebSocket operation in the Amazon IVS Chat Messaging API."
      operationId: DeleteMessage
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteMessage_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteMessageResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingVerification'
          description: PendingVerification
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
      x-content-type: application/json
      x-accepts:
      - application/json
  /DeleteRoom:
    post:
      description: Deletes the specified room.
      operationId: DeleteRoom
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteRoom_request'
        required: true
      responses:
        "204":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingVerification'
          description: PendingVerification
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
      x-content-type: application/json
      x-accepts:
      - application/json
  /DisconnectUser:
    post:
      description: Disconnects all connections using a specified user ID from a room.
        This replicates the <a href="https://docs.aws.amazon.com/ivs/latest/chatmsgapireference/actions-disconnectuser-publish.html">
        DisconnectUser</a> WebSocket operation in the Amazon IVS Chat Messaging API.
      operationId: DisconnectUser
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DisconnectUser_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DisconnectUserResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingVerification'
          description: PendingVerification
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
      x-content-type: application/json
      x-accepts:
      - application/json
  /GetLoggingConfiguration:
    post:
      description: Gets the specified logging configuration.
      operationId: GetLoggingConfiguration
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetLoggingConfiguration_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetLoggingConfigurationResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
      x-content-type: application/json
      x-accepts:
      - application/json
  /GetRoom:
    post:
      description: Gets the specified room.
      operationId: GetRoom
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetRoom_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRoomResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
      x-content-type: application/json
      x-accepts:
      - application/json
  /ListLoggingConfigurations:
    post:
      description: Gets summary information about all your logging configurations
        in the AWS region where the API request is processed.
      operationId: ListLoggingConfigurations
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListLoggingConfigurations_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListLoggingConfigurationsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
      x-content-type: application/json
      x-accepts:
      - application/json
  /ListRooms:
    post:
      description: Gets summary information about all your rooms in the AWS region
        where the API request is processed. Results are sorted in descending order
        of <code>updateTime</code>.
      operationId: ListRooms
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListRooms_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRoomsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
      x-content-type: application/json
      x-accepts:
      - application/json
  /tags/{resourceArn}:
    get:
      description: Gets information about AWS tags for the specified ARN.
      operationId: ListTagsForResource
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The ARN of the resource to be retrieved. The ARN must be URL-encoded.
        explode: false
        in: path
        name: resourceArn
        required: true
        schema:
          maxLength: 128
          minLength: 1
          pattern: "^arn:aws:ivschat:[a-z0-9-]+:[0-9]+:[a-z-]/[a-zA-Z0-9-]+$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTagsForResourceResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
      x-accepts:
      - application/json
    post:
      description: Adds or updates tags for the AWS resource with the specified ARN.
      operationId: TagResource
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The ARN of the resource to be tagged. The ARN must be URL-encoded.
        explode: false
        in: path
        name: resourceArn
        required: true
        schema:
          maxLength: 128
          minLength: 1
          pattern: "^arn:aws:ivschat:[a-z0-9-]+:[0-9]+:[a-z-]/[a-zA-Z0-9-]+$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagResource_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagResourceResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
      x-content-type: application/json
      x-accepts:
      - application/json
  /SendEvent:
    post:
      description: "Sends an event to a room. Use this within your application’s business\
        \ logic to send events to clients of a room; e.g., to notify clients to change\
        \ the way the chat UI is rendered."
      operationId: SendEvent
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEvent_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendEventResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingVerification'
          description: PendingVerification
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
      x-content-type: application/json
      x-accepts:
      - application/json
  /tags/{resourceArn}#tagKeys:
    delete:
      description: Removes tags from the resource with the specified ARN.
      operationId: UntagResource
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The ARN of the resource to be untagged. The ARN must be URL-encoded.
        explode: false
        in: path
        name: resourceArn
        required: true
        schema:
          maxLength: 128
          minLength: 1
          pattern: "^arn:aws:ivschat:[a-z0-9-]+:[0-9]+:[a-z-]/[a-zA-Z0-9-]+$"
          type: string
        style: simple
      - description: "Array of tags to be removed. Array of maps, each of the form\
          \ <code>string:string (key:value)</code>. See <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\"\
          >Tagging AWS Resources</a> for details, including restrictions that apply\
          \ to tags and \"Tag naming limits and requirements\"; Amazon IVS Chat has\
          \ no constraints beyond what is documented there."
        explode: true
        in: query
        name: tagKeys
        required: true
        schema:
          items:
            $ref: '#/components/schemas/TagKey'
          maxItems: 50
          minItems: 0
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UntagResourceResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
      x-accepts:
      - application/json
  /UpdateLoggingConfiguration:
    post:
      description: Updates a specified logging configuration.
      operationId: UpdateLoggingConfiguration
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLoggingConfiguration_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateLoggingConfigurationResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingVerification'
          description: PendingVerification
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
      x-content-type: application/json
      x-accepts:
      - application/json
  /UpdateRoom:
    post:
      description: Updates a room’s configuration.
      operationId: UpdateRoom
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRoom_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateRoomResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingVerification'
          description: PendingVerification
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
      x-content-type: application/json
      x-accepts:
      - application/json
components:
  parameters:
    X-Amz-Content-Sha256:
      explode: false
      in: header
      name: X-Amz-Content-Sha256
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Date:
      explode: false
      in: header
      name: X-Amz-Date
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Algorithm:
      explode: false
      in: header
      name: X-Amz-Algorithm
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Credential:
      explode: false
      in: header
      name: X-Amz-Credential
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Security-Token:
      explode: false
      in: header
      name: X-Amz-Security-Token
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Signature:
      explode: false
      in: header
      name: X-Amz-Signature
      required: false
      schema:
        type: string
      style: simple
    X-Amz-SignedHeaders:
      explode: false
      in: header
      name: X-Amz-SignedHeaders
      required: false
      schema:
        type: string
      style: simple
  schemas:
    CreateChatTokenResponse:
      example:
        sessionExpirationTime: ""
        token: ""
        tokenExpirationTime: ""
      properties:
        sessionExpirationTime:
          allOf:
          - $ref: '#/components/schemas/Time'
          - description: Time after which an end user's session is no longer valid.
              This is an ISO 8601 timestamp; <i>note that this is returned as a string</i>.
        token:
          allOf:
          - $ref: '#/components/schemas/ChatToken'
          - description: "The issued client token, encrypted."
        tokenExpirationTime:
          allOf:
          - $ref: '#/components/schemas/Time'
          - description: Time after which the token is no longer valid and cannot
              be used to connect to a room. This is an ISO 8601 timestamp; <i>note
              that this is returned as a string</i>.
      type: object
    String:
      type: string
    ChatTokenCapability:
      enum:
      - SEND_MESSAGE
      - DISCONNECT_USER
      - DELETE_MESSAGE
      type: string
    AccessDeniedException: {}
    ResourceNotFoundException: {}
    PendingVerification: {}
    ValidationException: {}
    CreateLoggingConfigurationResponse:
      example:
        destinationConfiguration:
          s3:
            bucketName: ""
          firehose:
            deliveryStreamName: ""
          cloudWatchLogs:
            logGroupName: ""
        createTime: ""
        name: ""
        updateTime: ""
        id: ""
        state: ""
        arn: ""
        tags: ""
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/LoggingConfigurationArn'
          - description: "Logging-configuration ARN, assigned by the system."
        createTime:
          allOf:
          - $ref: '#/components/schemas/Time'
          - description: Time when the logging configuration was created. This is
              an ISO 8601 timestamp; <i>note that this is returned as a string</i>.
        destinationConfiguration:
          $ref: '#/components/schemas/CreateLoggingConfigurationResponse_destinationConfiguration'
        id:
          allOf:
          - $ref: '#/components/schemas/LoggingConfigurationID'
          - description: "Logging-configuration ID, generated by the system. This\
              \ is a relative identifier, the part of the ARN that uniquely identifies\
              \ the logging configuration."
        name:
          allOf:
          - $ref: '#/components/schemas/LoggingConfigurationName'
          - description: "Logging-configuration name, from the request (if specified)."
        state:
          allOf:
          - $ref: '#/components/schemas/CreateLoggingConfigurationState'
          - description: "The state of the logging configuration. When the state is\
              \ <code>ACTIVE</code>, the configuration is ready to log chat content."
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          - description: "Tags attached to the resource, from the request (if specified).\
              \ Array of maps, each of the form <code>string:string (key:value)</code>."
        updateTime:
          allOf:
          - $ref: '#/components/schemas/Time'
          - description: Time of the logging configuration’s last update. This is
              an ISO 8601 timestamp; <i>note that this is returned as a string</i>.
      type: object
    CloudWatchLogsDestinationConfiguration:
      description: Specifies a CloudWatch Logs location where chat logs will be stored.
      properties:
        logGroupName:
          allOf:
          - $ref: '#/components/schemas/LogGroupName'
          - description: Name of the Amazon Cloudwatch Logs destination where chat
              activity will be logged.
      required:
      - logGroupName
      type: object
    FirehoseDestinationConfiguration:
      description: Specifies a Kinesis Firehose location where chat logs will be stored.
      properties:
        deliveryStreamName:
          allOf:
          - $ref: '#/components/schemas/DeliveryStreamName'
          - description: Name of the Amazon Kinesis Firehose delivery stream where
              chat activity will be logged.
      required:
      - deliveryStreamName
      type: object
    S3DestinationConfiguration:
      description: Specifies an S3 location where chat logs will be stored.
      properties:
        bucketName:
          allOf:
          - $ref: '#/components/schemas/BucketName'
          - description: Name of the Amazon S3 bucket where chat activity will be
              logged.
      required:
      - bucketName
      type: object
    TagValue:
      maxLength: 256
      minLength: 0
      type: string
    ConflictException: {}
    ServiceQuotaExceededException: {}
    CreateRoomResponse:
      example:
        maximumMessageRatePerSecond: ""
        createTime: ""
        messageReviewHandler:
          fallbackResult: ""
          uri: ""
        name: ""
        updateTime: ""
        id: ""
        loggingConfigurationIdentifiers: ""
        arn: ""
        maximumMessageLength: ""
        tags: ""
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/RoomArn'
          - description: "Room ARN, assigned by the system."
        createTime:
          allOf:
          - $ref: '#/components/schemas/Time'
          - description: Time when the room was created. This is an ISO 8601 timestamp;
              <i>note that this is returned as a string</i>.
        id:
          allOf:
          - $ref: '#/components/schemas/RoomID'
          - description: "Room ID, generated by the system. This is a relative identifier,\
              \ the part of the ARN that uniquely identifies the room."
        loggingConfigurationIdentifiers:
          allOf:
          - $ref: '#/components/schemas/LoggingConfigurationIdentifierList'
          - description: "Array of logging configurations attached to the room, from\
              \ the request (if specified)."
        maximumMessageLength:
          allOf:
          - $ref: '#/components/schemas/RoomMaxMessageLength'
          - description: "Maximum number of characters in a single message, from the\
              \ request (if specified)."
        maximumMessageRatePerSecond:
          allOf:
          - $ref: '#/components/schemas/RoomMaxMessageRatePerSecond'
          - description: "Maximum number of messages per second that can be sent to\
              \ the room (by all clients), from the request (if specified)."
        messageReviewHandler:
          $ref: '#/components/schemas/CreateRoomResponse_messageReviewHandler'
        name:
          allOf:
          - $ref: '#/components/schemas/RoomName'
          - description: "Room name, from the request (if specified)."
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          - description: "Tags attached to the resource, from the request (if specified)."
        updateTime:
          allOf:
          - $ref: '#/components/schemas/Time'
          - description: Time of the room’s last update. This is an ISO 8601 timestamp;
              <i>note that this is returned as a string</i>.
      type: object
    LoggingConfigurationIdentifier:
      maxLength: 128
      minLength: 1
      pattern: "^arn:aws:ivschat:[a-z0-9-]+:[0-9]+:logging-configuration/[a-zA-Z0-9-]+$"
      type: string
    FallbackResult:
      enum:
      - ALLOW
      - DENY
      type: string
    LambdaArn:
      maxLength: 170
      minLength: 0
      pattern: "^$|^arn:aws:lambda:[a-z0-9-]+:[0-9]{12}:function:.+"
      type: string
    DeleteMessageResponse:
      example:
        id: ""
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ID'
          - description: "Operation identifier, generated by Amazon IVS Chat."
      type: object
    ThrottlingException: {}
    DisconnectUserResponse:
      properties: {}
      type: object
    GetLoggingConfigurationResponse:
      example:
        destinationConfiguration:
          s3:
            bucketName: ""
          firehose:
            deliveryStreamName: ""
          cloudWatchLogs:
            logGroupName: ""
        createTime: ""
        name: ""
        updateTime: ""
        id: ""
        state: ""
        arn: ""
        tags: ""
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/LoggingConfigurationArn'
          - description: "Logging-configuration ARN, from the request (if <code>identifier</code>\
              \ was an ARN)."
        createTime:
          allOf:
          - $ref: '#/components/schemas/Time'
          - description: Time when the logging configuration was created. This is
              an ISO 8601 timestamp; <i>note that this is returned as a string</i>.
        destinationConfiguration:
          $ref: '#/components/schemas/GetLoggingConfigurationResponse_destinationConfiguration'
        id:
          allOf:
          - $ref: '#/components/schemas/LoggingConfigurationID'
          - description: "Logging-configuration ID, generated by the system. This\
              \ is a relative identifier, the part of the ARN that uniquely identifies\
              \ the logging configuration."
        name:
          allOf:
          - $ref: '#/components/schemas/LoggingConfigurationName'
          - description: Logging-configuration name. This value does not need to be
              unique.
        state:
          allOf:
          - $ref: '#/components/schemas/LoggingConfigurationState'
          - description: "The state of the logging configuration. When the state is\
              \ <code>ACTIVE</code>, the configuration is ready to log chat content."
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          - description: "Tags attached to the resource. Array of maps, each of the\
              \ form <code>string:string (key:value)</code>."
        updateTime:
          allOf:
          - $ref: '#/components/schemas/Time'
          - description: Time of the logging configuration’s last update. This is
              an ISO 8601 timestamp; <i>note that this is returned as a string</i>.
      type: object
    GetRoomResponse:
      example:
        maximumMessageRatePerSecond: ""
        createTime: ""
        messageReviewHandler:
          fallbackResult: ""
          uri: ""
        name: ""
        updateTime: ""
        id: ""
        loggingConfigurationIdentifiers: ""
        arn: ""
        maximumMessageLength: ""
        tags: ""
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/RoomArn'
          - description: "Room ARN, from the request (if <code>identifier</code> was\
              \ an ARN)."
        createTime:
          allOf:
          - $ref: '#/components/schemas/Time'
          - description: Time when the room was created. This is an ISO 8601 timestamp;
              <i>note that this is returned as a string</i>.
        id:
          allOf:
          - $ref: '#/components/schemas/RoomID'
          - description: "Room ID, generated by the system. This is a relative identifier,\
              \ the part of the ARN that uniquely identifies the room."
        loggingConfigurationIdentifiers:
          allOf:
          - $ref: '#/components/schemas/LoggingConfigurationIdentifierList'
          - description: Array of logging configurations attached to the room.
        maximumMessageLength:
          allOf:
          - $ref: '#/components/schemas/RoomMaxMessageLength'
          - description: "Maximum number of characters in a single message. Messages\
              \ are expected to be UTF-8 encoded and this limit applies specifically\
              \ to rune/code-point count, not number of bytes. Default: 500."
        maximumMessageRatePerSecond:
          allOf:
          - $ref: '#/components/schemas/RoomMaxMessageRatePerSecond'
          - description: "Maximum number of messages per second that can be sent to\
              \ the room (by all clients). Default: 10."
        messageReviewHandler:
          $ref: '#/components/schemas/CreateRoomResponse_messageReviewHandler'
        name:
          allOf:
          - $ref: '#/components/schemas/RoomName'
          - description: Room name. The value does not need to be unique.
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          - description: "Tags attached to the resource. Array of maps, each of the\
              \ form <code>string:string (key:value)</code>."
        updateTime:
          allOf:
          - $ref: '#/components/schemas/Time'
          - description: Time of the room’s last update. This is an ISO 8601 timestamp;
              <i>note that this is returned as a string</i>.
      type: object
    ListLoggingConfigurationsResponse:
      example:
        nextToken: ""
        loggingConfigurations: ""
      properties:
        loggingConfigurations:
          allOf:
          - $ref: '#/components/schemas/LoggingConfigurationList'
          - description: "List of the matching logging configurations (summary information\
              \ only). There is only one type of destination (<code>cloudWatchLogs</code>,\
              \ <code>firehose</code>, or <code>s3</code>) in a <code>destinationConfiguration</code>."
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          - description: "If there are more logging configurations than <code>maxResults</code>,\
              \ use <code>nextToken</code> in the request to get the next set."
      required:
      - loggingConfigurations
      type: object
    ListRoomsResponse:
      example:
        rooms: ""
        nextToken: ""
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          - description: "If there are more rooms than <code>maxResults</code>, use\
              \ <code>nextToken</code> in the request to get the next set."
        rooms:
          allOf:
          - $ref: '#/components/schemas/RoomList'
          - description: List of the matching rooms (summary information only).
      required:
      - rooms
      type: object
    ListTagsForResourceResponse:
      example:
        tags: ""
      properties:
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          - description: "Tags attached to the resource. Array of maps, each of the\
              \ form <code>string:string (key:value)</code>."
      required:
      - tags
      type: object
    InternalServerException: {}
    SendEventResponse:
      example:
        id: ""
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ID'
          - description: "An identifier generated by Amazon IVS Chat. This identifier\
              \ must be used in subsequent operations for this message, such as DeleteMessage."
      type: object
    TagResourceResponse:
      properties: {}
      type: object
    UntagResourceResponse:
      properties: {}
      type: object
    TagKey:
      maxLength: 128
      minLength: 1
      type: string
    UpdateLoggingConfigurationResponse:
      example:
        destinationConfiguration:
          s3:
            bucketName: ""
          firehose:
            deliveryStreamName: ""
          cloudWatchLogs:
            logGroupName: ""
        createTime: ""
        name: ""
        updateTime: ""
        id: ""
        state: ""
        arn: ""
        tags: ""
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/LoggingConfigurationArn'
          - description: "Logging-configuration ARN, from the request (if <code>identifier</code>\
              \ was an ARN)."
        createTime:
          allOf:
          - $ref: '#/components/schemas/Time'
          - description: Time when the logging configuration was created. This is
              an ISO 8601 timestamp; <i>note that this is returned as a string</i>.
        destinationConfiguration:
          $ref: '#/components/schemas/CreateLoggingConfigurationResponse_destinationConfiguration'
        id:
          allOf:
          - $ref: '#/components/schemas/LoggingConfigurationID'
          - description: "Logging-configuration ID, generated by the system. This\
              \ is a relative identifier, the part of the ARN that uniquely identifies\
              \ the room."
        name:
          allOf:
          - $ref: '#/components/schemas/LoggingConfigurationName'
          - description: "Logging-configuration name, from the request (if specified)."
        state:
          allOf:
          - $ref: '#/components/schemas/UpdateLoggingConfigurationState'
          - description: "The state of the logging configuration. When the state is\
              \ <code>ACTIVE</code>, the configuration is ready to log chat content."
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          - description: "Tags attached to the resource. Array of maps, each of the\
              \ form <code>string:string (key:value)</code>. "
        updateTime:
          allOf:
          - $ref: '#/components/schemas/Time'
          - description: Time of the logging configuration’s last update. This is
              an ISO 8601 timestamp; <i>note that this is returned as a string</i>.
      type: object
    UpdateRoomResponse:
      example:
        maximumMessageRatePerSecond: ""
        createTime: ""
        messageReviewHandler:
          fallbackResult: ""
          uri: ""
        name: ""
        updateTime: ""
        id: ""
        loggingConfigurationIdentifiers: ""
        arn: ""
        maximumMessageLength: ""
        tags: ""
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/RoomArn'
          - description: "Room ARN, from the request (if <code>identifier</code> was\
              \ an ARN)."
        createTime:
          allOf:
          - $ref: '#/components/schemas/Time'
          - description: Time when the room was created. This is an ISO 8601 timestamp;
              <i>note that this is returned as a string</i>.
        id:
          allOf:
          - $ref: '#/components/schemas/RoomID'
          - description: "Room ID, generated by the system. This is a relative identifier,\
              \ the part of the ARN that uniquely identifies the room."
        loggingConfigurationIdentifiers:
          allOf:
          - $ref: '#/components/schemas/LoggingConfigurationIdentifierList'
          - description: "Array of logging configurations attached to the room, from\
              \ the request (if specified)."
        maximumMessageLength:
          allOf:
          - $ref: '#/components/schemas/RoomMaxMessageLength'
          - description: "Maximum number of characters in a single message, from the\
              \ request (if specified)."
        maximumMessageRatePerSecond:
          allOf:
          - $ref: '#/components/schemas/RoomMaxMessageRatePerSecond'
          - description: "Maximum number of messages per second that can be sent to\
              \ the room (by all clients), from the request (if specified)."
        messageReviewHandler:
          $ref: '#/components/schemas/CreateRoomResponse_messageReviewHandler'
        name:
          allOf:
          - $ref: '#/components/schemas/RoomName'
          - description: "Room name, from the request (if specified)."
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          - description: "Tags attached to the resource. Array of maps, each of the\
              \ form <code>string:string (key:value)</code>."
        updateTime:
          allOf:
          - $ref: '#/components/schemas/Time'
          - description: Time of the room’s last update. This is an ISO 8601 timestamp;
              <i>note that this is returned as a string</i>.
      type: object
    BucketName:
      maxLength: 63
      minLength: 3
      pattern: "^[a-z0-9-.]+$"
      type: string
    ChatToken:
      type: string
    ChatTokenAttributes:
      additionalProperties:
        $ref: '#/components/schemas/String'
      type: object
    ChatTokenCapabilities:
      items:
        $ref: '#/components/schemas/ChatTokenCapability'
      type: array
    LogGroupName:
      maxLength: 512
      minLength: 1
      pattern: "^[\\.\\-_/#A-Za-z0-9]+$"
      type: string
    RoomIdentifier:
      maxLength: 128
      minLength: 1
      pattern: "^arn:aws:ivschat:[a-z0-9-]+:[0-9]+:room/[a-zA-Z0-9-]+$"
      type: string
    SessionDurationInMinutes:
      maximum: 180
      minimum: 1
      type: integer
    UserID:
      maxLength: 128
      minLength: 1
      type: string
    CreateChatTokenRequest:
      example:
        roomIdentifier: ""
        sessionDurationInMinutes: ""
        capabilities: ""
        attributes: ""
        userId: ""
      properties:
        attributes:
          allOf:
          - $ref: '#/components/schemas/ChatTokenAttributes'
          - description: Application-provided attributes to encode into the token
              and attach to a chat session. Map keys and values can contain UTF-8
              encoded text. The maximum length of this field is 1 KB total.
        capabilities:
          allOf:
          - $ref: '#/components/schemas/ChatTokenCapabilities'
          - description: "Set of capabilities that the user is allowed to perform\
              \ in the room. Default: None (the capability to view messages is implicitly\
              \ included in all requests)."
        roomIdentifier:
          allOf:
          - $ref: '#/components/schemas/RoomIdentifier'
          - description: 'Identifier of the room that the client is trying to access.
              Currently this must be an ARN. '
        sessionDurationInMinutes:
          allOf:
          - $ref: '#/components/schemas/SessionDurationInMinutes'
          - description: "Session duration (in minutes), after which the session expires.\
              \ Default: 60 (1 hour)."
        userId:
          allOf:
          - $ref: '#/components/schemas/UserID'
          - description: Application-provided ID that uniquely identifies the user
              associated with this token. This can be any UTF-8 encoded text.
      required:
      - roomIdentifier
      - userId
      title: CreateChatTokenRequest
      type: object
    Time:
      format: date-time
      type: string
    DestinationConfiguration:
      description: "A complex type that describes a location where chat logs will\
        \ be stored. Each member represents the configuration of one log destination.\
        \ For logging, you define only one type of destination (for CloudWatch Logs,\
        \ Kinesis Firehose, or S3)."
      properties:
        cloudWatchLogs:
          $ref: '#/components/schemas/CreateLoggingConfiguration_request_destinationConfiguration_cloudWatchLogs'
        firehose:
          $ref: '#/components/schemas/CreateLoggingConfiguration_request_destinationConfiguration_firehose'
        s3:
          $ref: '#/components/schemas/CreateLoggingConfiguration_request_destinationConfiguration_s3'
      type: object
    LoggingConfigurationName:
      maxLength: 128
      minLength: 0
      pattern: "^[a-zA-Z0-9-_]*$"
      type: string
    Tags:
      additionalProperties:
        $ref: '#/components/schemas/TagValue'
      maxProperties: 50
      minProperties: 0
      type: object
    CreateLoggingConfigurationRequest:
      example:
        destinationConfiguration:
          s3:
            bucketName: ""
          firehose:
            deliveryStreamName: ""
          cloudWatchLogs:
            logGroupName: ""
        name: ""
        tags: ""
      properties:
        destinationConfiguration:
          $ref: '#/components/schemas/CreateLoggingConfigurationRequest_destinationConfiguration'
        name:
          allOf:
          - $ref: '#/components/schemas/LoggingConfigurationName'
          - description: Logging-configuration name. The value does not need to be
              unique.
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          - description: "Tags to attach to the resource. Array of maps, each of the\
              \ form <code>string:string (key:value)</code>. See <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\"\
              >Tagging AWS Resources</a> for details, including restrictions that\
              \ apply to tags and \"Tag naming limits and requirements\"; Amazon IVS\
              \ Chat has no constraints on tags beyond what is documented there."
      required:
      - destinationConfiguration
      title: CreateLoggingConfigurationRequest
      type: object
    LoggingConfigurationArn:
      maxLength: 128
      minLength: 1
      pattern: "^arn:aws:ivschat:[a-z0-9-]+:[0-9]+:logging-configuration/[a-zA-Z0-9-]+$"
      type: string
    LoggingConfigurationID:
      maxLength: 12
      minLength: 12
      pattern: "^[a-zA-Z0-9]+$"
      type: string
    CreateLoggingConfigurationState:
      enum:
      - ACTIVE
      type: string
    LoggingConfigurationIdentifierList:
      items:
        $ref: '#/components/schemas/LoggingConfigurationIdentifier'
      maxItems: 3
      minItems: 0
      type: array
    RoomMaxMessageLength:
      maximum: 500
      minimum: 1
      type: integer
    RoomMaxMessageRatePerSecond:
      maximum: 100
      minimum: 1
      type: integer
    MessageReviewHandler:
      description: Configuration information for optional message review.
      properties:
        fallbackResult:
          allOf:
          - $ref: '#/components/schemas/FallbackResult'
          - description: "Specifies the fallback behavior (whether the message is\
              \ allowed or denied) if the handler does not return a valid response,\
              \ encounters an error, or times out. (For the timeout period, see <a\
              \ href=\"https://docs.aws.amazon.com/ivs/latest/userguide/service-quotas.html\"\
              > Service Quotas</a>.) If allowed, the message is delivered with returned\
              \ content to all users connected to the room. If denied, the message\
              \ is not delivered to any user. Default: <code>ALLOW</code>."
        uri:
          allOf:
          - $ref: '#/components/schemas/LambdaArn'
          - description: Identifier of the message review handler. Currently this
              must be an ARN of a lambda function.
      type: object
    RoomName:
      maxLength: 128
      minLength: 0
      pattern: "^[a-zA-Z0-9-_]*$"
      type: string
    CreateRoomRequest:
      example:
        maximumMessageRatePerSecond: ""
        messageReviewHandler:
          fallbackResult: ""
          uri: ""
        name: ""
        loggingConfigurationIdentifiers: ""
        maximumMessageLength: ""
        tags: ""
      properties:
        loggingConfigurationIdentifiers:
          allOf:
          - $ref: '#/components/schemas/LoggingConfigurationIdentifierList'
          - description: Array of logging-configuration identifiers attached to the
              room.
        maximumMessageLength:
          allOf:
          - $ref: '#/components/schemas/RoomMaxMessageLength'
          - description: "Maximum number of characters in a single message. Messages\
              \ are expected to be UTF-8 encoded and this limit applies specifically\
              \ to rune/code-point count, not number of bytes. Default: 500."
        maximumMessageRatePerSecond:
          allOf:
          - $ref: '#/components/schemas/RoomMaxMessageRatePerSecond'
          - description: "Maximum number of messages per second that can be sent to\
              \ the room (by all clients). Default: 10. "
        messageReviewHandler:
          $ref: '#/components/schemas/CreateRoomResponse_messageReviewHandler'
        name:
          allOf:
          - $ref: '#/components/schemas/RoomName'
          - description: Room name. The value does not need to be unique.
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          - description: "Tags to attach to the resource. Array of maps, each of the\
              \ form <code>string:string (key:value)</code>. See <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\"\
              >Tagging AWS Resources</a> for details, including restrictions that\
              \ apply to tags and \"Tag naming limits and requirements\"; Amazon IVS\
              \ Chat has no constraints beyond what is documented there."
      title: CreateRoomRequest
      type: object
    RoomArn:
      maxLength: 128
      minLength: 1
      pattern: "^arn:aws:ivschat:[a-z0-9-]+:[0-9]+:room/[a-zA-Z0-9-]+$"
      type: string
    RoomID:
      maxLength: 12
      minLength: 12
      pattern: "^[a-zA-Z0-9]+$"
      type: string
    DeleteLoggingConfigurationRequest:
      example:
        identifier: ""
      properties:
        identifier:
          allOf:
          - $ref: '#/components/schemas/LoggingConfigurationIdentifier'
          - description: Identifier of the logging configuration to be deleted.
      required:
      - identifier
      title: DeleteLoggingConfigurationRequest
      type: object
    MessageID:
      maxLength: 12
      minLength: 12
      pattern: "^[a-zA-Z0-9]+$"
      type: string
    Reason:
      maxLength: 256
      minLength: 1
      type: string
    DeleteMessageRequest:
      example:
        roomIdentifier: ""
        reason: ""
        id: ""
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/MessageID'
          - description: ID of the message to be deleted. This is the <code>Id</code>
              field in the received message (see <a href="https://docs.aws.amazon.com/ivs/latest/chatmsgapireference/actions-message-subscribe.html">
              Message (Subscribe)</a> in the Chat Messaging API).
        reason:
          allOf:
          - $ref: '#/components/schemas/Reason'
          - description: Reason for deleting the message.
        roomIdentifier:
          allOf:
          - $ref: '#/components/schemas/RoomIdentifier'
          - description: 'Identifier of the room where the message should be deleted.
              Currently this must be an ARN. '
      required:
      - id
      - roomIdentifier
      title: DeleteMessageRequest
      type: object
    ID:
      maxLength: 12
      minLength: 12
      pattern: "^[a-zA-Z0-9]+$"
      type: string
    DeleteRoomRequest:
      example:
        identifier: ""
      properties:
        identifier:
          allOf:
          - $ref: '#/components/schemas/RoomIdentifier'
          - description: Identifier of the room to be deleted. Currently this must
              be an ARN.
      required:
      - identifier
      title: DeleteRoomRequest
      type: object
    DeliveryStreamName:
      maxLength: 64
      minLength: 1
      pattern: "^[a-zA-Z0-9_.-]+$"
      type: string
    DisconnectUserRequest:
      example:
        roomIdentifier: ""
        reason: ""
        userId: ""
      properties:
        reason:
          allOf:
          - $ref: '#/components/schemas/Reason'
          - description: Reason for disconnecting the user.
        roomIdentifier:
          allOf:
          - $ref: '#/components/schemas/RoomIdentifier'
          - description: Identifier of the room from which the user's clients should
              be disconnected. Currently this must be an ARN.
        userId:
          allOf:
          - $ref: '#/components/schemas/UserID'
          - description: ID of the user (connection) to disconnect from the room.
      required:
      - roomIdentifier
      - userId
      title: DisconnectUserRequest
      type: object
    EventAttributes:
      additionalProperties:
        $ref: '#/components/schemas/String'
      type: object
    EventName:
      maxLength: 100
      minLength: 1
      type: string
    GetLoggingConfigurationRequest:
      example:
        identifier: ""
      properties:
        identifier:
          allOf:
          - $ref: '#/components/schemas/LoggingConfigurationIdentifier'
          - description: Identifier of the logging configuration to be retrieved.
      required:
      - identifier
      title: GetLoggingConfigurationRequest
      type: object
    LoggingConfigurationState:
      enum:
      - CREATING
      - CREATE_FAILED
      - DELETING
      - DELETE_FAILED
      - UPDATING
      - UPDATE_FAILED
      - ACTIVE
      type: string
    GetRoomRequest:
      example:
        identifier: ""
      properties:
        identifier:
          allOf:
          - $ref: '#/components/schemas/RoomIdentifier'
          - description: Identifier of the room for which the configuration is to
              be retrieved. Currently this must be an ARN.
      required:
      - identifier
      title: GetRoomRequest
      type: object
    MaxLoggingConfigurationResults:
      maximum: 50
      minimum: 1
      type: integer
    PaginationToken:
      maxLength: 1024
      minLength: 0
      type: string
    ListLoggingConfigurationsRequest:
      example:
        maxResults: ""
        nextToken: ""
      properties:
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxLoggingConfigurationResults'
          - description: "Maximum number of logging configurations to return. Default:\
              \ 50."
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          - description: The first logging configurations to retrieve. This is used
              for pagination; see the <code>nextToken</code> response field.
      title: ListLoggingConfigurationsRequest
      type: object
    LoggingConfigurationList:
      items:
        $ref: '#/components/schemas/LoggingConfigurationSummary'
      type: array
    MaxRoomResults:
      maximum: 50
      minimum: 1
      type: integer
    ListRoomsRequest:
      example:
        loggingConfigurationIdentifier: ""
        maxResults: ""
        nextToken: ""
        name: ""
        messageReviewHandlerUri: ""
      properties:
        loggingConfigurationIdentifier:
          allOf:
          - $ref: '#/components/schemas/LoggingConfigurationIdentifier'
          - description: Logging-configuration identifier.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxRoomResults'
          - description: "Maximum number of rooms to return. Default: 50."
        messageReviewHandlerUri:
          allOf:
          - $ref: '#/components/schemas/LambdaArn'
          - description: Filters the list to match the specified message review handler
              URI.
        name:
          allOf:
          - $ref: '#/components/schemas/RoomName'
          - description: Filters the list to match the specified room name.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          - description: The first room to retrieve. This is used for pagination;
              see the <code>nextToken</code> response field.
      title: ListRoomsRequest
      type: object
    RoomList:
      items:
        $ref: '#/components/schemas/RoomSummary'
      type: array
    ResourceArn:
      maxLength: 128
      minLength: 1
      pattern: "^arn:aws:ivschat:[a-z0-9-]+:[0-9]+:[a-z-]/[a-zA-Z0-9-]+$"
      type: string
    ListTagsForResourceRequest:
      properties: {}
      title: ListTagsForResourceRequest
      type: object
    LoggingConfigurationSummary:
      description: Summary information about a logging configuration.
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/LoggingConfigurationArn'
          - description: Logging-configuration ARN.
        createTime:
          allOf:
          - $ref: '#/components/schemas/Time'
          - description: Time when the logging configuration was created. This is
              an ISO 8601 timestamp; <i>note that this is returned as a string</i>.
        destinationConfiguration:
          $ref: '#/components/schemas/LoggingConfigurationSummary_destinationConfiguration'
        id:
          allOf:
          - $ref: '#/components/schemas/LoggingConfigurationID'
          - description: "Logging-configuration ID, generated by the system. This\
              \ is a relative identifier, the part of the ARN that uniquely identifies\
              \ the room."
        name:
          allOf:
          - $ref: '#/components/schemas/LoggingConfigurationName'
          - description: Logging-configuration name. The value does not need to be
              unique.
        state:
          allOf:
          - $ref: '#/components/schemas/LoggingConfigurationState'
          - description: "The state of the logging configuration. When this is <code>ACTIVE</code>,\
              \ the configuration is ready for logging chat content."
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          - description: "Tags to attach to the resource. Array of maps, each of the\
              \ form <code>string:string (key:value)</code>. See <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\"\
              >Tagging AWS Resources</a> for details, including restrictions that\
              \ apply to tags and \"Tag naming limits and requirements\"; Amazon IVS\
              \ Chat has no constraints on tags beyond what is documented there."
        updateTime:
          allOf:
          - $ref: '#/components/schemas/Time'
          - description: Time of the logging configuration’s last update. This is
              an ISO 8601 timestamp; <i>note that this is returned as a string</i>.
      type: object
    RoomSummary:
      description: Summary information about a room.
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/RoomArn'
          - description: Room ARN.
        createTime:
          allOf:
          - $ref: '#/components/schemas/Time'
          - description: 'Time when the room was created. This is an ISO 8601 timestamp;
              <i>note that this is returned as a string</i>. '
        id:
          allOf:
          - $ref: '#/components/schemas/RoomID'
          - description: "Room ID, generated by the system. This is a relative identifier,\
              \ the part of the ARN that uniquely identifies the room."
        loggingConfigurationIdentifiers:
          allOf:
          - $ref: '#/components/schemas/LoggingConfigurationIdentifierList'
          - description: List of logging-configuration identifiers attached to the
              room.
        messageReviewHandler:
          $ref: '#/components/schemas/CreateRoomResponse_messageReviewHandler'
        name:
          allOf:
          - $ref: '#/components/schemas/RoomName'
          - description: Room name. The value does not need to be unique.
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          - description: "Tags attached to the resource. Array of maps, each of the\
              \ form <code>string:string (key:value)</code>. See <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\"\
              >Tagging AWS Resources</a> for details, including restrictions that\
              \ apply to tags and \"Tag naming limits and requirements\"; Amazon IVS\
              \ Chat has no constraints beyond what is documented there."
        updateTime:
          allOf:
          - $ref: '#/components/schemas/Time'
          - description: 'Time of the room’s last update. This is an ISO 8601 timestamp;
              <i>note that this is returned as a string</i>. '
      type: object
    SendEventRequest:
      example:
        roomIdentifier: ""
        eventName: ""
        attributes: ""
      properties:
        attributes:
          allOf:
          - $ref: '#/components/schemas/EventAttributes'
          - description: Application-defined metadata to attach to the event sent
              to clients. The maximum length of the metadata is 1 KB total.
        eventName:
          allOf:
          - $ref: '#/components/schemas/EventName'
          - description: Application-defined name of the event to send to clients.
        roomIdentifier:
          allOf:
          - $ref: '#/components/schemas/RoomIdentifier'
          - description: Identifier of the room to which the event will be sent. Currently
              this must be an ARN.
      required:
      - eventName
      - roomIdentifier
      title: SendEventRequest
      type: object
    TagKeyList:
      items:
        $ref: '#/components/schemas/TagKey'
      maxItems: 50
      minItems: 0
      type: array
    TagResourceRequest:
      example:
        tags: ""
      properties:
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          - description: "Array of tags to be added or updated. Array of maps, each\
              \ of the form <code>string:string (key:value)</code>. See <a href=\"\
              https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\">Tagging\
              \ AWS Resources</a> for details, including restrictions that apply to\
              \ tags and \"Tag naming limits and requirements\"; Amazon IVS Chat has\
              \ no constraints beyond what is documented there."
      required:
      - tags
      title: TagResourceRequest
      type: object
    UntagResourceRequest:
      properties: {}
      title: UntagResourceRequest
      type: object
    UpdateLoggingConfigurationRequest:
      example:
        identifier: ""
        destinationConfiguration:
          s3:
            bucketName: ""
          firehose:
            deliveryStreamName: ""
          cloudWatchLogs:
            logGroupName: ""
        name: ""
      properties:
        destinationConfiguration:
          $ref: '#/components/schemas/CreateLoggingConfigurationRequest_destinationConfiguration'
        identifier:
          allOf:
          - $ref: '#/components/schemas/LoggingConfigurationIdentifier'
          - description: Identifier of the logging configuration to be updated.
        name:
          allOf:
          - $ref: '#/components/schemas/LoggingConfigurationName'
          - description: Logging-configuration name. The value does not need to be
              unique.
      required:
      - identifier
      title: UpdateLoggingConfigurationRequest
      type: object
    UpdateLoggingConfigurationState:
      enum:
      - ACTIVE
      type: string
    UpdateRoomRequest:
      example:
        identifier: ""
        maximumMessageRatePerSecond: ""
        messageReviewHandler:
          fallbackResult: ""
          uri: ""
        name: ""
        loggingConfigurationIdentifiers: ""
        maximumMessageLength: ""
      properties:
        identifier:
          allOf:
          - $ref: '#/components/schemas/RoomIdentifier'
          - description: Identifier of the room to be updated. Currently this must
              be an ARN.
        loggingConfigurationIdentifiers:
          allOf:
          - $ref: '#/components/schemas/LoggingConfigurationIdentifierList'
          - description: Array of logging-configuration identifiers attached to the
              room.
        maximumMessageLength:
          allOf:
          - $ref: '#/components/schemas/RoomMaxMessageLength'
          - description: "The maximum number of characters in a single message. Messages\
              \ are expected to be UTF-8 encoded and this limit applies specifically\
              \ to rune/code-point count, not number of bytes. Default: 500."
        maximumMessageRatePerSecond:
          allOf:
          - $ref: '#/components/schemas/RoomMaxMessageRatePerSecond'
          - description: "Maximum number of messages per second that can be sent to\
              \ the room (by all clients). Default: 10."
        messageReviewHandler:
          $ref: '#/components/schemas/UpdateRoomRequest_messageReviewHandler'
        name:
          allOf:
          - $ref: '#/components/schemas/RoomName'
          - description: Room name. The value does not need to be unique.
      required:
      - identifier
      title: UpdateRoomRequest
      type: object
    CreateChatToken_request:
      properties:
        attributes:
          additionalProperties:
            $ref: '#/components/schemas/String'
          description: Application-provided attributes to encode into the token and
            attach to a chat session. Map keys and values can contain UTF-8 encoded
            text. The maximum length of this field is 1 KB total.
          type: object
        capabilities:
          description: "Set of capabilities that the user is allowed to perform in\
            \ the room. Default: None (the capability to view messages is implicitly\
            \ included in all requests)."
          items:
            $ref: '#/components/schemas/ChatTokenCapability'
          type: array
        roomIdentifier:
          description: 'Identifier of the room that the client is trying to access.
            Currently this must be an ARN. '
          maxLength: 128
          minLength: 1
          pattern: "^arn:aws:ivschat:[a-z0-9-]+:[0-9]+:room/[a-zA-Z0-9-]+$"
          type: string
        sessionDurationInMinutes:
          description: "Session duration (in minutes), after which the session expires.\
            \ Default: 60 (1 hour)."
          maximum: 180
          minimum: 1
          type: integer
        userId:
          description: Application-provided ID that uniquely identifies the user associated
            with this token. This can be any UTF-8 encoded text.
          maxLength: 128
          minLength: 1
          type: string
      required:
      - roomIdentifier
      - userId
      type: object
    CreateLoggingConfiguration_request_destinationConfiguration_cloudWatchLogs:
      allOf:
      - $ref: '#/components/schemas/CloudWatchLogsDestinationConfiguration'
      - description: An Amazon CloudWatch Logs destination configuration where chat
          activity will be logged.
      example:
        logGroupName: ""
    CreateLoggingConfiguration_request_destinationConfiguration_firehose:
      allOf:
      - $ref: '#/components/schemas/FirehoseDestinationConfiguration'
      - description: An Amazon Kinesis Data Firehose destination configuration where
          chat activity will be logged.
      example:
        deliveryStreamName: ""
    CreateLoggingConfiguration_request_destinationConfiguration_s3:
      allOf:
      - $ref: '#/components/schemas/S3DestinationConfiguration'
      - description: An Amazon S3 destination configuration where chat activity will
          be logged.
      example:
        bucketName: ""
    CreateLoggingConfiguration_request_destinationConfiguration:
      description: "A complex type that describes a location where chat logs will\
        \ be stored. Each member represents the configuration of one log destination.\
        \ For logging, you define only one type of destination (for CloudWatch Logs,\
        \ Kinesis Firehose, or S3)."
      properties:
        cloudWatchLogs:
          $ref: '#/components/schemas/CreateLoggingConfiguration_request_destinationConfiguration_cloudWatchLogs'
        firehose:
          $ref: '#/components/schemas/CreateLoggingConfiguration_request_destinationConfiguration_firehose'
        s3:
          $ref: '#/components/schemas/CreateLoggingConfiguration_request_destinationConfiguration_s3'
      type: object
    CreateLoggingConfiguration_request:
      properties:
        destinationConfiguration:
          $ref: '#/components/schemas/CreateLoggingConfiguration_request_destinationConfiguration'
        name:
          description: Logging-configuration name. The value does not need to be unique.
          maxLength: 128
          minLength: 0
          pattern: "^[a-zA-Z0-9-_]*$"
          type: string
        tags:
          additionalProperties:
            $ref: '#/components/schemas/TagValue'
          description: "Tags to attach to the resource. Array of maps, each of the\
            \ form <code>string:string (key:value)</code>. See <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\"\
            >Tagging AWS Resources</a> for details, including restrictions that apply\
            \ to tags and \"Tag naming limits and requirements\"; Amazon IVS Chat\
            \ has no constraints on tags beyond what is documented there."
          maxProperties: 50
          minProperties: 0
          type: object
      required:
      - destinationConfiguration
      type: object
    CreateRoom_request_messageReviewHandler:
      description: Configuration information for optional message review.
      properties:
        fallbackResult:
          allOf:
          - $ref: '#/components/schemas/FallbackResult'
          - description: "Specifies the fallback behavior (whether the message is\
              \ allowed or denied) if the handler does not return a valid response,\
              \ encounters an error, or times out. (For the timeout period, see <a\
              \ href=\"https://docs.aws.amazon.com/ivs/latest/userguide/service-quotas.html\"\
              > Service Quotas</a>.) If allowed, the message is delivered with returned\
              \ content to all users connected to the room. If denied, the message\
              \ is not delivered to any user. Default: <code>ALLOW</code>."
        uri:
          allOf:
          - $ref: '#/components/schemas/LambdaArn'
          - description: Identifier of the message review handler. Currently this
              must be an ARN of a lambda function.
      type: object
    CreateRoom_request:
      properties:
        loggingConfigurationIdentifiers:
          description: Array of logging-configuration identifiers attached to the
            room.
          items:
            $ref: '#/components/schemas/LoggingConfigurationIdentifier'
          maxItems: 3
          minItems: 0
          type: array
        maximumMessageLength:
          description: "Maximum number of characters in a single message. Messages\
            \ are expected to be UTF-8 encoded and this limit applies specifically\
            \ to rune/code-point count, not number of bytes. Default: 500."
          maximum: 500
          minimum: 1
          type: integer
        maximumMessageRatePerSecond:
          description: "Maximum number of messages per second that can be sent to\
            \ the room (by all clients). Default: 10. "
          maximum: 100
          minimum: 1
          type: integer
        messageReviewHandler:
          $ref: '#/components/schemas/CreateRoom_request_messageReviewHandler'
        name:
          description: Room name. The value does not need to be unique.
          maxLength: 128
          minLength: 0
          pattern: "^[a-zA-Z0-9-_]*$"
          type: string
        tags:
          additionalProperties:
            $ref: '#/components/schemas/TagValue'
          description: "Tags to attach to the resource. Array of maps, each of the\
            \ form <code>string:string (key:value)</code>. See <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\"\
            >Tagging AWS Resources</a> for details, including restrictions that apply\
            \ to tags and \"Tag naming limits and requirements\"; Amazon IVS Chat\
            \ has no constraints beyond what is documented there."
          maxProperties: 50
          minProperties: 0
          type: object
      type: object
    DeleteLoggingConfiguration_request:
      properties:
        identifier:
          description: Identifier of the logging configuration to be deleted.
          maxLength: 128
          minLength: 1
          pattern: "^arn:aws:ivschat:[a-z0-9-]+:[0-9]+:logging-configuration/[a-zA-Z0-9-]+$"
          type: string
      required:
      - identifier
      type: object
    DeleteMessage_request:
      properties:
        id:
          description: ID of the message to be deleted. This is the <code>Id</code>
            field in the received message (see <a href="https://docs.aws.amazon.com/ivs/latest/chatmsgapireference/actions-message-subscribe.html">
            Message (Subscribe)</a> in the Chat Messaging API).
          maxLength: 12
          minLength: 12
          pattern: "^[a-zA-Z0-9]+$"
          type: string
        reason:
          description: Reason for deleting the message.
          maxLength: 256
          minLength: 1
          type: string
        roomIdentifier:
          description: 'Identifier of the room where the message should be deleted.
            Currently this must be an ARN. '
          maxLength: 128
          minLength: 1
          pattern: "^arn:aws:ivschat:[a-z0-9-]+:[0-9]+:room/[a-zA-Z0-9-]+$"
          type: string
      required:
      - id
      - roomIdentifier
      type: object
    DeleteRoom_request:
      properties:
        identifier:
          description: Identifier of the room to be deleted. Currently this must be
            an ARN.
          maxLength: 128
          minLength: 1
          pattern: "^arn:aws:ivschat:[a-z0-9-]+:[0-9]+:room/[a-zA-Z0-9-]+$"
          type: string
      required:
      - identifier
      type: object
    DisconnectUser_request:
      properties:
        reason:
          description: Reason for disconnecting the user.
          maxLength: 256
          minLength: 1
          type: string
        roomIdentifier:
          description: Identifier of the room from which the user's clients should
            be disconnected. Currently this must be an ARN.
          maxLength: 128
          minLength: 1
          pattern: "^arn:aws:ivschat:[a-z0-9-]+:[0-9]+:room/[a-zA-Z0-9-]+$"
          type: string
        userId:
          description: ID of the user (connection) to disconnect from the room.
          maxLength: 128
          minLength: 1
          type: string
      required:
      - roomIdentifier
      - userId
      type: object
    GetLoggingConfiguration_request:
      properties:
        identifier:
          description: Identifier of the logging configuration to be retrieved.
          maxLength: 128
          minLength: 1
          pattern: "^arn:aws:ivschat:[a-z0-9-]+:[0-9]+:logging-configuration/[a-zA-Z0-9-]+$"
          type: string
      required:
      - identifier
      type: object
    GetRoom_request:
      properties:
        identifier:
          description: Identifier of the room for which the configuration is to be
            retrieved. Currently this must be an ARN.
          maxLength: 128
          minLength: 1
          pattern: "^arn:aws:ivschat:[a-z0-9-]+:[0-9]+:room/[a-zA-Z0-9-]+$"
          type: string
      required:
      - identifier
      type: object
    ListLoggingConfigurations_request:
      properties:
        maxResults:
          description: "Maximum number of logging configurations to return. Default:\
            \ 50."
          maximum: 50
          minimum: 1
          type: integer
        nextToken:
          description: The first logging configurations to retrieve. This is used
            for pagination; see the <code>nextToken</code> response field.
          maxLength: 1024
          minLength: 0
          type: string
      type: object
    ListRooms_request:
      properties:
        loggingConfigurationIdentifier:
          description: Logging-configuration identifier.
          maxLength: 128
          minLength: 1
          pattern: "^arn:aws:ivschat:[a-z0-9-]+:[0-9]+:logging-configuration/[a-zA-Z0-9-]+$"
          type: string
        maxResults:
          description: "Maximum number of rooms to return. Default: 50."
          maximum: 50
          minimum: 1
          type: integer
        messageReviewHandlerUri:
          description: Filters the list to match the specified message review handler
            URI.
          maxLength: 170
          minLength: 0
          pattern: "^$|^arn:aws:lambda:[a-z0-9-]+:[0-9]{12}:function:.+"
          type: string
        name:
          description: Filters the list to match the specified room name.
          maxLength: 128
          minLength: 0
          pattern: "^[a-zA-Z0-9-_]*$"
          type: string
        nextToken:
          description: The first room to retrieve. This is used for pagination; see
            the <code>nextToken</code> response field.
          maxLength: 1024
          minLength: 0
          type: string
      type: object
    TagResource_request:
      properties:
        tags:
          additionalProperties:
            $ref: '#/components/schemas/TagValue'
          description: "Array of tags to be added or updated. Array of maps, each\
            \ of the form <code>string:string (key:value)</code>. See <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\"\
            >Tagging AWS Resources</a> for details, including restrictions that apply\
            \ to tags and \"Tag naming limits and requirements\"; Amazon IVS Chat\
            \ has no constraints beyond what is documented there."
          maxProperties: 50
          minProperties: 0
          type: object
      required:
      - tags
      type: object
    SendEvent_request:
      properties:
        attributes:
          additionalProperties:
            $ref: '#/components/schemas/String'
          description: Application-defined metadata to attach to the event sent to
            clients. The maximum length of the metadata is 1 KB total.
          type: object
        eventName:
          description: Application-defined name of the event to send to clients.
          maxLength: 100
          minLength: 1
          type: string
        roomIdentifier:
          description: Identifier of the room to which the event will be sent. Currently
            this must be an ARN.
          maxLength: 128
          minLength: 1
          pattern: "^arn:aws:ivschat:[a-z0-9-]+:[0-9]+:room/[a-zA-Z0-9-]+$"
          type: string
      required:
      - eventName
      - roomIdentifier
      type: object
    UpdateLoggingConfiguration_request:
      properties:
        destinationConfiguration:
          $ref: '#/components/schemas/CreateLoggingConfiguration_request_destinationConfiguration'
        identifier:
          description: Identifier of the logging configuration to be updated.
          maxLength: 128
          minLength: 1
          pattern: "^arn:aws:ivschat:[a-z0-9-]+:[0-9]+:logging-configuration/[a-zA-Z0-9-]+$"
          type: string
        name:
          description: Logging-configuration name. The value does not need to be unique.
          maxLength: 128
          minLength: 0
          pattern: "^[a-zA-Z0-9-_]*$"
          type: string
      required:
      - identifier
      type: object
    UpdateRoom_request:
      properties:
        identifier:
          description: Identifier of the room to be updated. Currently this must be
            an ARN.
          maxLength: 128
          minLength: 1
          pattern: "^arn:aws:ivschat:[a-z0-9-]+:[0-9]+:room/[a-zA-Z0-9-]+$"
          type: string
        loggingConfigurationIdentifiers:
          description: Array of logging-configuration identifiers attached to the
            room.
          items:
            $ref: '#/components/schemas/LoggingConfigurationIdentifier'
          maxItems: 3
          minItems: 0
          type: array
        maximumMessageLength:
          description: "The maximum number of characters in a single message. Messages\
            \ are expected to be UTF-8 encoded and this limit applies specifically\
            \ to rune/code-point count, not number of bytes. Default: 500."
          maximum: 500
          minimum: 1
          type: integer
        maximumMessageRatePerSecond:
          description: "Maximum number of messages per second that can be sent to\
            \ the room (by all clients). Default: 10."
          maximum: 100
          minimum: 1
          type: integer
        messageReviewHandler:
          $ref: '#/components/schemas/CreateRoom_request_messageReviewHandler'
        name:
          description: Room name. The value does not need to be unique.
          maxLength: 128
          minLength: 0
          pattern: "^[a-zA-Z0-9-_]*$"
          type: string
      required:
      - identifier
      type: object
    CreateLoggingConfigurationResponse_destinationConfiguration:
      allOf:
      - $ref: '#/components/schemas/DestinationConfiguration'
      - description: "A complex type that contains a destination configuration for\
          \ where chat content will be logged, from the request. There is only one\
          \ type of destination (<code>cloudWatchLogs</code>, <code>firehose</code>,\
          \ or <code>s3</code>) in a <code>destinationConfiguration</code>."
      example:
        s3:
          bucketName: ""
        firehose:
          deliveryStreamName: ""
        cloudWatchLogs:
          logGroupName: ""
    CreateRoomResponse_messageReviewHandler:
      allOf:
      - $ref: '#/components/schemas/MessageReviewHandler'
      - description: Configuration information for optional review of messages.
      example:
        fallbackResult: ""
        uri: ""
    GetLoggingConfigurationResponse_destinationConfiguration:
      allOf:
      - $ref: '#/components/schemas/DestinationConfiguration'
      - description: "A complex type that contains a destination configuration for\
          \ where chat content will be logged. There is only one type of destination\
          \ (<code>cloudWatchLogs</code>, <code>firehose</code>, or <code>s3</code>)\
          \ in a <code>destinationConfiguration</code>."
      example:
        s3:
          bucketName: ""
        firehose:
          deliveryStreamName: ""
        cloudWatchLogs:
          logGroupName: ""
    CreateLoggingConfigurationRequest_destinationConfiguration:
      allOf:
      - $ref: '#/components/schemas/DestinationConfiguration'
      - description: "A complex type that contains a destination configuration for\
          \ where chat content will be logged. There can be only one type of destination\
          \ (<code>cloudWatchLogs</code>, <code>firehose</code>, or <code>s3</code>)\
          \ in a <code>destinationConfiguration</code>."
      example:
        s3:
          bucketName: ""
        firehose:
          deliveryStreamName: ""
        cloudWatchLogs:
          logGroupName: ""
    LoggingConfigurationSummary_destinationConfiguration:
      allOf:
      - $ref: '#/components/schemas/DestinationConfiguration'
      - description: A complex type that contains a destination configuration for
          where chat content will be logged.
    UpdateRoomRequest_messageReviewHandler:
      allOf:
      - $ref: '#/components/schemas/MessageReviewHandler'
      - description: Configuration information for optional review of messages. Specify
          an empty <code>uri</code> string to disassociate a message review handler
          from the specified room.
      example:
        fallbackResult: ""
        uri: ""
  securitySchemes:
    hmac:
      description: Amazon Signature authorization v4
      in: header
      name: Authorization
      type: apiKey
      x-amazon-apigateway-authtype: awsSigv4
x-hasEquivalentPaths: true

