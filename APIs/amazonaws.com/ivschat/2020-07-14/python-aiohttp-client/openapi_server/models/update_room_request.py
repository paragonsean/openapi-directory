# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_room_request_message_review_handler import CreateRoomRequestMessageReviewHandler
import re
from openapi_server import util


class UpdateRoomRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, identifier: str=None, logging_configuration_identifiers: List[str]=None, maximum_message_length: int=None, maximum_message_rate_per_second: int=None, message_review_handler: CreateRoomRequestMessageReviewHandler=None, name: str=None):
        """UpdateRoomRequest - a model defined in OpenAPI

        :param identifier: The identifier of this UpdateRoomRequest.
        :param logging_configuration_identifiers: The logging_configuration_identifiers of this UpdateRoomRequest.
        :param maximum_message_length: The maximum_message_length of this UpdateRoomRequest.
        :param maximum_message_rate_per_second: The maximum_message_rate_per_second of this UpdateRoomRequest.
        :param message_review_handler: The message_review_handler of this UpdateRoomRequest.
        :param name: The name of this UpdateRoomRequest.
        """
        self.openapi_types = {
            'identifier': str,
            'logging_configuration_identifiers': List[str],
            'maximum_message_length': int,
            'maximum_message_rate_per_second': int,
            'message_review_handler': CreateRoomRequestMessageReviewHandler,
            'name': str
        }

        self.attribute_map = {
            'identifier': 'identifier',
            'logging_configuration_identifiers': 'loggingConfigurationIdentifiers',
            'maximum_message_length': 'maximumMessageLength',
            'maximum_message_rate_per_second': 'maximumMessageRatePerSecond',
            'message_review_handler': 'messageReviewHandler',
            'name': 'name'
        }

        self._identifier = identifier
        self._logging_configuration_identifiers = logging_configuration_identifiers
        self._maximum_message_length = maximum_message_length
        self._maximum_message_rate_per_second = maximum_message_rate_per_second
        self._message_review_handler = message_review_handler
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateRoomRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateRoom_request of this UpdateRoomRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def identifier(self):
        """Gets the identifier of this UpdateRoomRequest.

        Identifier of the room to be updated. Currently this must be an ARN.

        :return: The identifier of this UpdateRoomRequest.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this UpdateRoomRequest.

        Identifier of the room to be updated. Currently this must be an ARN.

        :param identifier: The identifier of this UpdateRoomRequest.
        :type identifier: str
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")
        if identifier is not None and len(identifier) > 128:
            raise ValueError("Invalid value for `identifier`, length must be less than or equal to `128`")
        if identifier is not None and len(identifier) < 1:
            raise ValueError("Invalid value for `identifier`, length must be greater than or equal to `1`")
        if identifier is not None and not re.search(r'^arn:aws:ivschat:[a-z0-9-]+:[0-9]+:room\/[a-zA-Z0-9-]+$', identifier):
            raise ValueError("Invalid value for `identifier`, must be a follow pattern or equal to `/^arn:aws:ivschat:[a-z0-9-]+:[0-9]+:room\/[a-zA-Z0-9-]+$/`")

        self._identifier = identifier

    @property
    def logging_configuration_identifiers(self):
        """Gets the logging_configuration_identifiers of this UpdateRoomRequest.

        Array of logging-configuration identifiers attached to the room.

        :return: The logging_configuration_identifiers of this UpdateRoomRequest.
        :rtype: List[str]
        """
        return self._logging_configuration_identifiers

    @logging_configuration_identifiers.setter
    def logging_configuration_identifiers(self, logging_configuration_identifiers):
        """Sets the logging_configuration_identifiers of this UpdateRoomRequest.

        Array of logging-configuration identifiers attached to the room.

        :param logging_configuration_identifiers: The logging_configuration_identifiers of this UpdateRoomRequest.
        :type logging_configuration_identifiers: List[str]
        """
        if logging_configuration_identifiers is not None and len(logging_configuration_identifiers) > 3:
            raise ValueError("Invalid value for `logging_configuration_identifiers`, number of items must be less than or equal to `3`")
        if logging_configuration_identifiers is not None and len(logging_configuration_identifiers) < 0:
            raise ValueError("Invalid value for `logging_configuration_identifiers`, number of items must be greater than or equal to `0`")

        self._logging_configuration_identifiers = logging_configuration_identifiers

    @property
    def maximum_message_length(self):
        """Gets the maximum_message_length of this UpdateRoomRequest.

        The maximum number of characters in a single message. Messages are expected to be UTF-8 encoded and this limit applies specifically to rune/code-point count, not number of bytes. Default: 500.

        :return: The maximum_message_length of this UpdateRoomRequest.
        :rtype: int
        """
        return self._maximum_message_length

    @maximum_message_length.setter
    def maximum_message_length(self, maximum_message_length):
        """Sets the maximum_message_length of this UpdateRoomRequest.

        The maximum number of characters in a single message. Messages are expected to be UTF-8 encoded and this limit applies specifically to rune/code-point count, not number of bytes. Default: 500.

        :param maximum_message_length: The maximum_message_length of this UpdateRoomRequest.
        :type maximum_message_length: int
        """
        if maximum_message_length is not None and maximum_message_length > 500:
            raise ValueError("Invalid value for `maximum_message_length`, must be a value less than or equal to `500`")
        if maximum_message_length is not None and maximum_message_length < 1:
            raise ValueError("Invalid value for `maximum_message_length`, must be a value greater than or equal to `1`")

        self._maximum_message_length = maximum_message_length

    @property
    def maximum_message_rate_per_second(self):
        """Gets the maximum_message_rate_per_second of this UpdateRoomRequest.

        Maximum number of messages per second that can be sent to the room (by all clients). Default: 10.

        :return: The maximum_message_rate_per_second of this UpdateRoomRequest.
        :rtype: int
        """
        return self._maximum_message_rate_per_second

    @maximum_message_rate_per_second.setter
    def maximum_message_rate_per_second(self, maximum_message_rate_per_second):
        """Sets the maximum_message_rate_per_second of this UpdateRoomRequest.

        Maximum number of messages per second that can be sent to the room (by all clients). Default: 10.

        :param maximum_message_rate_per_second: The maximum_message_rate_per_second of this UpdateRoomRequest.
        :type maximum_message_rate_per_second: int
        """
        if maximum_message_rate_per_second is not None and maximum_message_rate_per_second > 100:
            raise ValueError("Invalid value for `maximum_message_rate_per_second`, must be a value less than or equal to `100`")
        if maximum_message_rate_per_second is not None and maximum_message_rate_per_second < 1:
            raise ValueError("Invalid value for `maximum_message_rate_per_second`, must be a value greater than or equal to `1`")

        self._maximum_message_rate_per_second = maximum_message_rate_per_second

    @property
    def message_review_handler(self):
        """Gets the message_review_handler of this UpdateRoomRequest.


        :return: The message_review_handler of this UpdateRoomRequest.
        :rtype: CreateRoomRequestMessageReviewHandler
        """
        return self._message_review_handler

    @message_review_handler.setter
    def message_review_handler(self, message_review_handler):
        """Sets the message_review_handler of this UpdateRoomRequest.


        :param message_review_handler: The message_review_handler of this UpdateRoomRequest.
        :type message_review_handler: CreateRoomRequestMessageReviewHandler
        """

        self._message_review_handler = message_review_handler

    @property
    def name(self):
        """Gets the name of this UpdateRoomRequest.

        Room name. The value does not need to be unique.

        :return: The name of this UpdateRoomRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateRoomRequest.

        Room name. The value does not need to be unique.

        :param name: The name of this UpdateRoomRequest.
        :type name: str
        """
        if name is not None and len(name) > 128:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")
        if name is not None and len(name) < 0:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")
        if name is not None and not re.search(r'^[a-zA-Z0-9-_]*$', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^[a-zA-Z0-9-_]*$/`")

        self._name = name
