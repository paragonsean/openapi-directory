# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_room_request_message_review_handler import CreateRoomRequestMessageReviewHandler
import re
from openapi_server import util


class CreateRoomRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, logging_configuration_identifiers: List[str]=None, maximum_message_length: int=None, maximum_message_rate_per_second: int=None, message_review_handler: CreateRoomRequestMessageReviewHandler=None, name: str=None, tags: Dict[str, str]=None):
        """CreateRoomRequest - a model defined in OpenAPI

        :param logging_configuration_identifiers: The logging_configuration_identifiers of this CreateRoomRequest.
        :param maximum_message_length: The maximum_message_length of this CreateRoomRequest.
        :param maximum_message_rate_per_second: The maximum_message_rate_per_second of this CreateRoomRequest.
        :param message_review_handler: The message_review_handler of this CreateRoomRequest.
        :param name: The name of this CreateRoomRequest.
        :param tags: The tags of this CreateRoomRequest.
        """
        self.openapi_types = {
            'logging_configuration_identifiers': List[str],
            'maximum_message_length': int,
            'maximum_message_rate_per_second': int,
            'message_review_handler': CreateRoomRequestMessageReviewHandler,
            'name': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'logging_configuration_identifiers': 'loggingConfigurationIdentifiers',
            'maximum_message_length': 'maximumMessageLength',
            'maximum_message_rate_per_second': 'maximumMessageRatePerSecond',
            'message_review_handler': 'messageReviewHandler',
            'name': 'name',
            'tags': 'tags'
        }

        self._logging_configuration_identifiers = logging_configuration_identifiers
        self._maximum_message_length = maximum_message_length
        self._maximum_message_rate_per_second = maximum_message_rate_per_second
        self._message_review_handler = message_review_handler
        self._name = name
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateRoomRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateRoom_request of this CreateRoomRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def logging_configuration_identifiers(self):
        """Gets the logging_configuration_identifiers of this CreateRoomRequest.

        Array of logging-configuration identifiers attached to the room.

        :return: The logging_configuration_identifiers of this CreateRoomRequest.
        :rtype: List[str]
        """
        return self._logging_configuration_identifiers

    @logging_configuration_identifiers.setter
    def logging_configuration_identifiers(self, logging_configuration_identifiers):
        """Sets the logging_configuration_identifiers of this CreateRoomRequest.

        Array of logging-configuration identifiers attached to the room.

        :param logging_configuration_identifiers: The logging_configuration_identifiers of this CreateRoomRequest.
        :type logging_configuration_identifiers: List[str]
        """
        if logging_configuration_identifiers is not None and len(logging_configuration_identifiers) > 3:
            raise ValueError("Invalid value for `logging_configuration_identifiers`, number of items must be less than or equal to `3`")
        if logging_configuration_identifiers is not None and len(logging_configuration_identifiers) < 0:
            raise ValueError("Invalid value for `logging_configuration_identifiers`, number of items must be greater than or equal to `0`")

        self._logging_configuration_identifiers = logging_configuration_identifiers

    @property
    def maximum_message_length(self):
        """Gets the maximum_message_length of this CreateRoomRequest.

        Maximum number of characters in a single message. Messages are expected to be UTF-8 encoded and this limit applies specifically to rune/code-point count, not number of bytes. Default: 500.

        :return: The maximum_message_length of this CreateRoomRequest.
        :rtype: int
        """
        return self._maximum_message_length

    @maximum_message_length.setter
    def maximum_message_length(self, maximum_message_length):
        """Sets the maximum_message_length of this CreateRoomRequest.

        Maximum number of characters in a single message. Messages are expected to be UTF-8 encoded and this limit applies specifically to rune/code-point count, not number of bytes. Default: 500.

        :param maximum_message_length: The maximum_message_length of this CreateRoomRequest.
        :type maximum_message_length: int
        """
        if maximum_message_length is not None and maximum_message_length > 500:
            raise ValueError("Invalid value for `maximum_message_length`, must be a value less than or equal to `500`")
        if maximum_message_length is not None and maximum_message_length < 1:
            raise ValueError("Invalid value for `maximum_message_length`, must be a value greater than or equal to `1`")

        self._maximum_message_length = maximum_message_length

    @property
    def maximum_message_rate_per_second(self):
        """Gets the maximum_message_rate_per_second of this CreateRoomRequest.

        Maximum number of messages per second that can be sent to the room (by all clients). Default: 10. 

        :return: The maximum_message_rate_per_second of this CreateRoomRequest.
        :rtype: int
        """
        return self._maximum_message_rate_per_second

    @maximum_message_rate_per_second.setter
    def maximum_message_rate_per_second(self, maximum_message_rate_per_second):
        """Sets the maximum_message_rate_per_second of this CreateRoomRequest.

        Maximum number of messages per second that can be sent to the room (by all clients). Default: 10. 

        :param maximum_message_rate_per_second: The maximum_message_rate_per_second of this CreateRoomRequest.
        :type maximum_message_rate_per_second: int
        """
        if maximum_message_rate_per_second is not None and maximum_message_rate_per_second > 100:
            raise ValueError("Invalid value for `maximum_message_rate_per_second`, must be a value less than or equal to `100`")
        if maximum_message_rate_per_second is not None and maximum_message_rate_per_second < 1:
            raise ValueError("Invalid value for `maximum_message_rate_per_second`, must be a value greater than or equal to `1`")

        self._maximum_message_rate_per_second = maximum_message_rate_per_second

    @property
    def message_review_handler(self):
        """Gets the message_review_handler of this CreateRoomRequest.


        :return: The message_review_handler of this CreateRoomRequest.
        :rtype: CreateRoomRequestMessageReviewHandler
        """
        return self._message_review_handler

    @message_review_handler.setter
    def message_review_handler(self, message_review_handler):
        """Sets the message_review_handler of this CreateRoomRequest.


        :param message_review_handler: The message_review_handler of this CreateRoomRequest.
        :type message_review_handler: CreateRoomRequestMessageReviewHandler
        """

        self._message_review_handler = message_review_handler

    @property
    def name(self):
        """Gets the name of this CreateRoomRequest.

        Room name. The value does not need to be unique.

        :return: The name of this CreateRoomRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateRoomRequest.

        Room name. The value does not need to be unique.

        :param name: The name of this CreateRoomRequest.
        :type name: str
        """
        if name is not None and len(name) > 128:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")
        if name is not None and len(name) < 0:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")
        if name is not None and not re.search(r'^[a-zA-Z0-9-_]*$', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^[a-zA-Z0-9-_]*$/`")

        self._name = name

    @property
    def tags(self):
        """Gets the tags of this CreateRoomRequest.

        Tags to attach to the resource. Array of maps, each of the form <code>string:string (key:value)</code>. See <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\">Tagging AWS Resources</a> for details, including restrictions that apply to tags and \"Tag naming limits and requirements\"; Amazon IVS Chat has no constraints beyond what is documented there.

        :return: The tags of this CreateRoomRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateRoomRequest.

        Tags to attach to the resource. Array of maps, each of the form <code>string:string (key:value)</code>. See <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\">Tagging AWS Resources</a> for details, including restrictions that apply to tags and \"Tag naming limits and requirements\"; Amazon IVS Chat has no constraints beyond what is documented there.

        :param tags: The tags of this CreateRoomRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags
