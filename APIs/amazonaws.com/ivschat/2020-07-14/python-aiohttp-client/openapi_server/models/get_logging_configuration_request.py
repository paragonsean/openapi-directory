# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class GetLoggingConfigurationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, identifier: str=None):
        """GetLoggingConfigurationRequest - a model defined in OpenAPI

        :param identifier: The identifier of this GetLoggingConfigurationRequest.
        """
        self.openapi_types = {
            'identifier': str
        }

        self.attribute_map = {
            'identifier': 'identifier'
        }

        self._identifier = identifier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetLoggingConfigurationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetLoggingConfiguration_request of this GetLoggingConfigurationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def identifier(self):
        """Gets the identifier of this GetLoggingConfigurationRequest.

        Identifier of the logging configuration to be retrieved.

        :return: The identifier of this GetLoggingConfigurationRequest.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this GetLoggingConfigurationRequest.

        Identifier of the logging configuration to be retrieved.

        :param identifier: The identifier of this GetLoggingConfigurationRequest.
        :type identifier: str
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")
        if identifier is not None and len(identifier) > 128:
            raise ValueError("Invalid value for `identifier`, length must be less than or equal to `128`")
        if identifier is not None and len(identifier) < 1:
            raise ValueError("Invalid value for `identifier`, length must be greater than or equal to `1`")
        if identifier is not None and not re.search(r'^arn:aws:ivschat:[a-z0-9-]+:[0-9]+:logging-configuration\/[a-zA-Z0-9-]+$', identifier):
            raise ValueError("Invalid value for `identifier`, must be a follow pattern or equal to `/^arn:aws:ivschat:[a-z0-9-]+:[0-9]+:logging-configuration\/[a-zA-Z0-9-]+$/`")

        self._identifier = identifier
