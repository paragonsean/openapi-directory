# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class ListRoomsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, logging_configuration_identifier: str=None, max_results: int=None, message_review_handler_uri: str=None, name: str=None, next_token: str=None):
        """ListRoomsRequest - a model defined in OpenAPI

        :param logging_configuration_identifier: The logging_configuration_identifier of this ListRoomsRequest.
        :param max_results: The max_results of this ListRoomsRequest.
        :param message_review_handler_uri: The message_review_handler_uri of this ListRoomsRequest.
        :param name: The name of this ListRoomsRequest.
        :param next_token: The next_token of this ListRoomsRequest.
        """
        self.openapi_types = {
            'logging_configuration_identifier': str,
            'max_results': int,
            'message_review_handler_uri': str,
            'name': str,
            'next_token': str
        }

        self.attribute_map = {
            'logging_configuration_identifier': 'loggingConfigurationIdentifier',
            'max_results': 'maxResults',
            'message_review_handler_uri': 'messageReviewHandlerUri',
            'name': 'name',
            'next_token': 'nextToken'
        }

        self._logging_configuration_identifier = logging_configuration_identifier
        self._max_results = max_results
        self._message_review_handler_uri = message_review_handler_uri
        self._name = name
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListRoomsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListRooms_request of this ListRoomsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def logging_configuration_identifier(self):
        """Gets the logging_configuration_identifier of this ListRoomsRequest.

        Logging-configuration identifier.

        :return: The logging_configuration_identifier of this ListRoomsRequest.
        :rtype: str
        """
        return self._logging_configuration_identifier

    @logging_configuration_identifier.setter
    def logging_configuration_identifier(self, logging_configuration_identifier):
        """Sets the logging_configuration_identifier of this ListRoomsRequest.

        Logging-configuration identifier.

        :param logging_configuration_identifier: The logging_configuration_identifier of this ListRoomsRequest.
        :type logging_configuration_identifier: str
        """
        if logging_configuration_identifier is not None and len(logging_configuration_identifier) > 128:
            raise ValueError("Invalid value for `logging_configuration_identifier`, length must be less than or equal to `128`")
        if logging_configuration_identifier is not None and len(logging_configuration_identifier) < 1:
            raise ValueError("Invalid value for `logging_configuration_identifier`, length must be greater than or equal to `1`")
        if logging_configuration_identifier is not None and not re.search(r'^arn:aws:ivschat:[a-z0-9-]+:[0-9]+:logging-configuration\/[a-zA-Z0-9-]+$', logging_configuration_identifier):
            raise ValueError("Invalid value for `logging_configuration_identifier`, must be a follow pattern or equal to `/^arn:aws:ivschat:[a-z0-9-]+:[0-9]+:logging-configuration\/[a-zA-Z0-9-]+$/`")

        self._logging_configuration_identifier = logging_configuration_identifier

    @property
    def max_results(self):
        """Gets the max_results of this ListRoomsRequest.

        Maximum number of rooms to return. Default: 50.

        :return: The max_results of this ListRoomsRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListRoomsRequest.

        Maximum number of rooms to return. Default: 50.

        :param max_results: The max_results of this ListRoomsRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 50:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `50`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results

    @property
    def message_review_handler_uri(self):
        """Gets the message_review_handler_uri of this ListRoomsRequest.

        Filters the list to match the specified message review handler URI.

        :return: The message_review_handler_uri of this ListRoomsRequest.
        :rtype: str
        """
        return self._message_review_handler_uri

    @message_review_handler_uri.setter
    def message_review_handler_uri(self, message_review_handler_uri):
        """Sets the message_review_handler_uri of this ListRoomsRequest.

        Filters the list to match the specified message review handler URI.

        :param message_review_handler_uri: The message_review_handler_uri of this ListRoomsRequest.
        :type message_review_handler_uri: str
        """
        if message_review_handler_uri is not None and len(message_review_handler_uri) > 170:
            raise ValueError("Invalid value for `message_review_handler_uri`, length must be less than or equal to `170`")
        if message_review_handler_uri is not None and len(message_review_handler_uri) < 0:
            raise ValueError("Invalid value for `message_review_handler_uri`, length must be greater than or equal to `0`")
        if message_review_handler_uri is not None and not re.search(r'^$|^arn:aws:lambda:[a-z0-9-]+:[0-9]{12}:function:.+', message_review_handler_uri):
            raise ValueError("Invalid value for `message_review_handler_uri`, must be a follow pattern or equal to `/^$|^arn:aws:lambda:[a-z0-9-]+:[0-9]{12}:function:.+/`")

        self._message_review_handler_uri = message_review_handler_uri

    @property
    def name(self):
        """Gets the name of this ListRoomsRequest.

        Filters the list to match the specified room name.

        :return: The name of this ListRoomsRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ListRoomsRequest.

        Filters the list to match the specified room name.

        :param name: The name of this ListRoomsRequest.
        :type name: str
        """
        if name is not None and len(name) > 128:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")
        if name is not None and len(name) < 0:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")
        if name is not None and not re.search(r'^[a-zA-Z0-9-_]*$', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^[a-zA-Z0-9-_]*$/`")

        self._name = name

    @property
    def next_token(self):
        """Gets the next_token of this ListRoomsRequest.

        The first room to retrieve. This is used for pagination; see the <code>nextToken</code> response field.

        :return: The next_token of this ListRoomsRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListRoomsRequest.

        The first room to retrieve. This is used for pagination; see the <code>nextToken</code> response field.

        :param next_token: The next_token of this ListRoomsRequest.
        :type next_token: str
        """
        if next_token is not None and len(next_token) > 1024:
            raise ValueError("Invalid value for `next_token`, length must be less than or equal to `1024`")
        if next_token is not None and len(next_token) < 0:
            raise ValueError("Invalid value for `next_token`, length must be greater than or equal to `0`")

        self._next_token = next_token
