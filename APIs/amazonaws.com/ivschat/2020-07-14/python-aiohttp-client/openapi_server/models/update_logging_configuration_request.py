# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_logging_configuration_request_destination_configuration import CreateLoggingConfigurationRequestDestinationConfiguration
import re
from openapi_server import util


class UpdateLoggingConfigurationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destination_configuration: CreateLoggingConfigurationRequestDestinationConfiguration=None, identifier: str=None, name: str=None):
        """UpdateLoggingConfigurationRequest - a model defined in OpenAPI

        :param destination_configuration: The destination_configuration of this UpdateLoggingConfigurationRequest.
        :param identifier: The identifier of this UpdateLoggingConfigurationRequest.
        :param name: The name of this UpdateLoggingConfigurationRequest.
        """
        self.openapi_types = {
            'destination_configuration': CreateLoggingConfigurationRequestDestinationConfiguration,
            'identifier': str,
            'name': str
        }

        self.attribute_map = {
            'destination_configuration': 'destinationConfiguration',
            'identifier': 'identifier',
            'name': 'name'
        }

        self._destination_configuration = destination_configuration
        self._identifier = identifier
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateLoggingConfigurationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateLoggingConfiguration_request of this UpdateLoggingConfigurationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destination_configuration(self):
        """Gets the destination_configuration of this UpdateLoggingConfigurationRequest.


        :return: The destination_configuration of this UpdateLoggingConfigurationRequest.
        :rtype: CreateLoggingConfigurationRequestDestinationConfiguration
        """
        return self._destination_configuration

    @destination_configuration.setter
    def destination_configuration(self, destination_configuration):
        """Sets the destination_configuration of this UpdateLoggingConfigurationRequest.


        :param destination_configuration: The destination_configuration of this UpdateLoggingConfigurationRequest.
        :type destination_configuration: CreateLoggingConfigurationRequestDestinationConfiguration
        """

        self._destination_configuration = destination_configuration

    @property
    def identifier(self):
        """Gets the identifier of this UpdateLoggingConfigurationRequest.

        Identifier of the logging configuration to be updated.

        :return: The identifier of this UpdateLoggingConfigurationRequest.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this UpdateLoggingConfigurationRequest.

        Identifier of the logging configuration to be updated.

        :param identifier: The identifier of this UpdateLoggingConfigurationRequest.
        :type identifier: str
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")
        if identifier is not None and len(identifier) > 128:
            raise ValueError("Invalid value for `identifier`, length must be less than or equal to `128`")
        if identifier is not None and len(identifier) < 1:
            raise ValueError("Invalid value for `identifier`, length must be greater than or equal to `1`")
        if identifier is not None and not re.search(r'^arn:aws:ivschat:[a-z0-9-]+:[0-9]+:logging-configuration\/[a-zA-Z0-9-]+$', identifier):
            raise ValueError("Invalid value for `identifier`, must be a follow pattern or equal to `/^arn:aws:ivschat:[a-z0-9-]+:[0-9]+:logging-configuration\/[a-zA-Z0-9-]+$/`")

        self._identifier = identifier

    @property
    def name(self):
        """Gets the name of this UpdateLoggingConfigurationRequest.

        Logging-configuration name. The value does not need to be unique.

        :return: The name of this UpdateLoggingConfigurationRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateLoggingConfigurationRequest.

        Logging-configuration name. The value does not need to be unique.

        :param name: The name of this UpdateLoggingConfigurationRequest.
        :type name: str
        """
        if name is not None and len(name) > 128:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")
        if name is not None and len(name) < 0:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")
        if name is not None and not re.search(r'^[a-zA-Z0-9-_]*$', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^[a-zA-Z0-9-_]*$/`")

        self._name = name
