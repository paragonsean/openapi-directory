# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.chat_token_capability import ChatTokenCapability
import re
from openapi_server import util


class CreateChatTokenRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes: Dict[str, str]=None, capabilities: List[ChatTokenCapability]=None, room_identifier: str=None, session_duration_in_minutes: int=None, user_id: str=None):
        """CreateChatTokenRequest - a model defined in OpenAPI

        :param attributes: The attributes of this CreateChatTokenRequest.
        :param capabilities: The capabilities of this CreateChatTokenRequest.
        :param room_identifier: The room_identifier of this CreateChatTokenRequest.
        :param session_duration_in_minutes: The session_duration_in_minutes of this CreateChatTokenRequest.
        :param user_id: The user_id of this CreateChatTokenRequest.
        """
        self.openapi_types = {
            'attributes': Dict[str, str],
            'capabilities': List[ChatTokenCapability],
            'room_identifier': str,
            'session_duration_in_minutes': int,
            'user_id': str
        }

        self.attribute_map = {
            'attributes': 'attributes',
            'capabilities': 'capabilities',
            'room_identifier': 'roomIdentifier',
            'session_duration_in_minutes': 'sessionDurationInMinutes',
            'user_id': 'userId'
        }

        self._attributes = attributes
        self._capabilities = capabilities
        self._room_identifier = room_identifier
        self._session_duration_in_minutes = session_duration_in_minutes
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateChatTokenRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateChatToken_request of this CreateChatTokenRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes(self):
        """Gets the attributes of this CreateChatTokenRequest.

        Application-provided attributes to encode into the token and attach to a chat session. Map keys and values can contain UTF-8 encoded text. The maximum length of this field is 1 KB total.

        :return: The attributes of this CreateChatTokenRequest.
        :rtype: Dict[str, str]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this CreateChatTokenRequest.

        Application-provided attributes to encode into the token and attach to a chat session. Map keys and values can contain UTF-8 encoded text. The maximum length of this field is 1 KB total.

        :param attributes: The attributes of this CreateChatTokenRequest.
        :type attributes: Dict[str, str]
        """

        self._attributes = attributes

    @property
    def capabilities(self):
        """Gets the capabilities of this CreateChatTokenRequest.

        Set of capabilities that the user is allowed to perform in the room. Default: None (the capability to view messages is implicitly included in all requests).

        :return: The capabilities of this CreateChatTokenRequest.
        :rtype: List[ChatTokenCapability]
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities):
        """Sets the capabilities of this CreateChatTokenRequest.

        Set of capabilities that the user is allowed to perform in the room. Default: None (the capability to view messages is implicitly included in all requests).

        :param capabilities: The capabilities of this CreateChatTokenRequest.
        :type capabilities: List[ChatTokenCapability]
        """

        self._capabilities = capabilities

    @property
    def room_identifier(self):
        """Gets the room_identifier of this CreateChatTokenRequest.

        Identifier of the room that the client is trying to access. Currently this must be an ARN. 

        :return: The room_identifier of this CreateChatTokenRequest.
        :rtype: str
        """
        return self._room_identifier

    @room_identifier.setter
    def room_identifier(self, room_identifier):
        """Sets the room_identifier of this CreateChatTokenRequest.

        Identifier of the room that the client is trying to access. Currently this must be an ARN. 

        :param room_identifier: The room_identifier of this CreateChatTokenRequest.
        :type room_identifier: str
        """
        if room_identifier is None:
            raise ValueError("Invalid value for `room_identifier`, must not be `None`")
        if room_identifier is not None and len(room_identifier) > 128:
            raise ValueError("Invalid value for `room_identifier`, length must be less than or equal to `128`")
        if room_identifier is not None and len(room_identifier) < 1:
            raise ValueError("Invalid value for `room_identifier`, length must be greater than or equal to `1`")
        if room_identifier is not None and not re.search(r'^arn:aws:ivschat:[a-z0-9-]+:[0-9]+:room\/[a-zA-Z0-9-]+$', room_identifier):
            raise ValueError("Invalid value for `room_identifier`, must be a follow pattern or equal to `/^arn:aws:ivschat:[a-z0-9-]+:[0-9]+:room\/[a-zA-Z0-9-]+$/`")

        self._room_identifier = room_identifier

    @property
    def session_duration_in_minutes(self):
        """Gets the session_duration_in_minutes of this CreateChatTokenRequest.

        Session duration (in minutes), after which the session expires. Default: 60 (1 hour).

        :return: The session_duration_in_minutes of this CreateChatTokenRequest.
        :rtype: int
        """
        return self._session_duration_in_minutes

    @session_duration_in_minutes.setter
    def session_duration_in_minutes(self, session_duration_in_minutes):
        """Sets the session_duration_in_minutes of this CreateChatTokenRequest.

        Session duration (in minutes), after which the session expires. Default: 60 (1 hour).

        :param session_duration_in_minutes: The session_duration_in_minutes of this CreateChatTokenRequest.
        :type session_duration_in_minutes: int
        """
        if session_duration_in_minutes is not None and session_duration_in_minutes > 180:
            raise ValueError("Invalid value for `session_duration_in_minutes`, must be a value less than or equal to `180`")
        if session_duration_in_minutes is not None and session_duration_in_minutes < 1:
            raise ValueError("Invalid value for `session_duration_in_minutes`, must be a value greater than or equal to `1`")

        self._session_duration_in_minutes = session_duration_in_minutes

    @property
    def user_id(self):
        """Gets the user_id of this CreateChatTokenRequest.

        Application-provided ID that uniquely identifies the user associated with this token. This can be any UTF-8 encoded text.

        :return: The user_id of this CreateChatTokenRequest.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this CreateChatTokenRequest.

        Application-provided ID that uniquely identifies the user associated with this token. This can be any UTF-8 encoded text.

        :param user_id: The user_id of this CreateChatTokenRequest.
        :type user_id: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")
        if user_id is not None and len(user_id) > 128:
            raise ValueError("Invalid value for `user_id`, length must be less than or equal to `128`")
        if user_id is not None and len(user_id) < 1:
            raise ValueError("Invalid value for `user_id`, length must be greater than or equal to `1`")

        self._user_id = user_id
