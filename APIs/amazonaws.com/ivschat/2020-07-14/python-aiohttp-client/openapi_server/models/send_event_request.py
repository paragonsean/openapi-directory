# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class SendEventRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes: Dict[str, str]=None, event_name: str=None, room_identifier: str=None):
        """SendEventRequest - a model defined in OpenAPI

        :param attributes: The attributes of this SendEventRequest.
        :param event_name: The event_name of this SendEventRequest.
        :param room_identifier: The room_identifier of this SendEventRequest.
        """
        self.openapi_types = {
            'attributes': Dict[str, str],
            'event_name': str,
            'room_identifier': str
        }

        self.attribute_map = {
            'attributes': 'attributes',
            'event_name': 'eventName',
            'room_identifier': 'roomIdentifier'
        }

        self._attributes = attributes
        self._event_name = event_name
        self._room_identifier = room_identifier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SendEventRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SendEvent_request of this SendEventRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes(self):
        """Gets the attributes of this SendEventRequest.

        Application-defined metadata to attach to the event sent to clients. The maximum length of the metadata is 1 KB total.

        :return: The attributes of this SendEventRequest.
        :rtype: Dict[str, str]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this SendEventRequest.

        Application-defined metadata to attach to the event sent to clients. The maximum length of the metadata is 1 KB total.

        :param attributes: The attributes of this SendEventRequest.
        :type attributes: Dict[str, str]
        """

        self._attributes = attributes

    @property
    def event_name(self):
        """Gets the event_name of this SendEventRequest.

        Application-defined name of the event to send to clients.

        :return: The event_name of this SendEventRequest.
        :rtype: str
        """
        return self._event_name

    @event_name.setter
    def event_name(self, event_name):
        """Sets the event_name of this SendEventRequest.

        Application-defined name of the event to send to clients.

        :param event_name: The event_name of this SendEventRequest.
        :type event_name: str
        """
        if event_name is None:
            raise ValueError("Invalid value for `event_name`, must not be `None`")
        if event_name is not None and len(event_name) > 100:
            raise ValueError("Invalid value for `event_name`, length must be less than or equal to `100`")
        if event_name is not None and len(event_name) < 1:
            raise ValueError("Invalid value for `event_name`, length must be greater than or equal to `1`")

        self._event_name = event_name

    @property
    def room_identifier(self):
        """Gets the room_identifier of this SendEventRequest.

        Identifier of the room to which the event will be sent. Currently this must be an ARN.

        :return: The room_identifier of this SendEventRequest.
        :rtype: str
        """
        return self._room_identifier

    @room_identifier.setter
    def room_identifier(self, room_identifier):
        """Sets the room_identifier of this SendEventRequest.

        Identifier of the room to which the event will be sent. Currently this must be an ARN.

        :param room_identifier: The room_identifier of this SendEventRequest.
        :type room_identifier: str
        """
        if room_identifier is None:
            raise ValueError("Invalid value for `room_identifier`, must not be `None`")
        if room_identifier is not None and len(room_identifier) > 128:
            raise ValueError("Invalid value for `room_identifier`, length must be less than or equal to `128`")
        if room_identifier is not None and len(room_identifier) < 1:
            raise ValueError("Invalid value for `room_identifier`, length must be greater than or equal to `1`")
        if room_identifier is not None and not re.search(r'^arn:aws:ivschat:[a-z0-9-]+:[0-9]+:room\/[a-zA-Z0-9-]+$', room_identifier):
            raise ValueError("Invalid value for `room_identifier`, must be a follow pattern or equal to `/^arn:aws:ivschat:[a-z0-9-]+:[0-9]+:room\/[a-zA-Z0-9-]+$/`")

        self._room_identifier = room_identifier
