# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.document_attribute_value_type import DocumentAttributeValueType
from openapi_server.models.document_metadata_configuration_relevance import DocumentMetadataConfigurationRelevance
from openapi_server.models.document_metadata_configuration_search import DocumentMetadataConfigurationSearch
from openapi_server import util


class DocumentMetadataConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, type: DocumentAttributeValueType=None, relevance: DocumentMetadataConfigurationRelevance=None, search: DocumentMetadataConfigurationSearch=None):
        """DocumentMetadataConfiguration - a model defined in OpenAPI

        :param name: The name of this DocumentMetadataConfiguration.
        :param type: The type of this DocumentMetadataConfiguration.
        :param relevance: The relevance of this DocumentMetadataConfiguration.
        :param search: The search of this DocumentMetadataConfiguration.
        """
        self.openapi_types = {
            'name': str,
            'type': DocumentAttributeValueType,
            'relevance': DocumentMetadataConfigurationRelevance,
            'search': DocumentMetadataConfigurationSearch
        }

        self.attribute_map = {
            'name': 'Name',
            'type': 'Type',
            'relevance': 'Relevance',
            'search': 'Search'
        }

        self._name = name
        self._type = type
        self._relevance = relevance
        self._search = search

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DocumentMetadataConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DocumentMetadataConfiguration of this DocumentMetadataConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this DocumentMetadataConfiguration.


        :return: The name of this DocumentMetadataConfiguration.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DocumentMetadataConfiguration.


        :param name: The name of this DocumentMetadataConfiguration.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def type(self):
        """Gets the type of this DocumentMetadataConfiguration.


        :return: The type of this DocumentMetadataConfiguration.
        :rtype: DocumentAttributeValueType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DocumentMetadataConfiguration.


        :param type: The type of this DocumentMetadataConfiguration.
        :type type: DocumentAttributeValueType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def relevance(self):
        """Gets the relevance of this DocumentMetadataConfiguration.


        :return: The relevance of this DocumentMetadataConfiguration.
        :rtype: DocumentMetadataConfigurationRelevance
        """
        return self._relevance

    @relevance.setter
    def relevance(self, relevance):
        """Sets the relevance of this DocumentMetadataConfiguration.


        :param relevance: The relevance of this DocumentMetadataConfiguration.
        :type relevance: DocumentMetadataConfigurationRelevance
        """

        self._relevance = relevance

    @property
    def search(self):
        """Gets the search of this DocumentMetadataConfiguration.


        :return: The search of this DocumentMetadataConfiguration.
        :rtype: DocumentMetadataConfigurationSearch
        """
        return self._search

    @search.setter
    def search(self, search):
        """Sets the search of this DocumentMetadataConfiguration.


        :param search: The search of this DocumentMetadataConfiguration.
        :type search: DocumentMetadataConfigurationSearch
        """

        self._search = search
