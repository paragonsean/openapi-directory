# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WebCrawlerConfigurationProxyConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, host: str=None, port: int=None, credentials: str=None):
        """WebCrawlerConfigurationProxyConfiguration - a model defined in OpenAPI

        :param host: The host of this WebCrawlerConfigurationProxyConfiguration.
        :param port: The port of this WebCrawlerConfigurationProxyConfiguration.
        :param credentials: The credentials of this WebCrawlerConfigurationProxyConfiguration.
        """
        self.openapi_types = {
            'host': str,
            'port': int,
            'credentials': str
        }

        self.attribute_map = {
            'host': 'Host',
            'port': 'Port',
            'credentials': 'Credentials'
        }

        self._host = host
        self._port = port
        self._credentials = credentials

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WebCrawlerConfigurationProxyConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WebCrawlerConfiguration_ProxyConfiguration of this WebCrawlerConfigurationProxyConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def host(self):
        """Gets the host of this WebCrawlerConfigurationProxyConfiguration.


        :return: The host of this WebCrawlerConfigurationProxyConfiguration.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this WebCrawlerConfigurationProxyConfiguration.


        :param host: The host of this WebCrawlerConfigurationProxyConfiguration.
        :type host: str
        """
        if host is None:
            raise ValueError("Invalid value for `host`, must not be `None`")

        self._host = host

    @property
    def port(self):
        """Gets the port of this WebCrawlerConfigurationProxyConfiguration.


        :return: The port of this WebCrawlerConfigurationProxyConfiguration.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this WebCrawlerConfigurationProxyConfiguration.


        :param port: The port of this WebCrawlerConfigurationProxyConfiguration.
        :type port: int
        """
        if port is None:
            raise ValueError("Invalid value for `port`, must not be `None`")

        self._port = port

    @property
    def credentials(self):
        """Gets the credentials of this WebCrawlerConfigurationProxyConfiguration.


        :return: The credentials of this WebCrawlerConfigurationProxyConfiguration.
        :rtype: str
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this WebCrawlerConfigurationProxyConfiguration.


        :param credentials: The credentials of this WebCrawlerConfigurationProxyConfiguration.
        :type credentials: str
        """

        self._credentials = credentials
