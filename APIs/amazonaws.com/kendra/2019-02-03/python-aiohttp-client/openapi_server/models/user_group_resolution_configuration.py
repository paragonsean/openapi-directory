# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_group_resolution_mode import UserGroupResolutionMode
from openapi_server import util


class UserGroupResolutionConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user_group_resolution_mode: UserGroupResolutionMode=None):
        """UserGroupResolutionConfiguration - a model defined in OpenAPI

        :param user_group_resolution_mode: The user_group_resolution_mode of this UserGroupResolutionConfiguration.
        """
        self.openapi_types = {
            'user_group_resolution_mode': UserGroupResolutionMode
        }

        self.attribute_map = {
            'user_group_resolution_mode': 'UserGroupResolutionMode'
        }

        self._user_group_resolution_mode = user_group_resolution_mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserGroupResolutionConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserGroupResolutionConfiguration of this UserGroupResolutionConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_group_resolution_mode(self):
        """Gets the user_group_resolution_mode of this UserGroupResolutionConfiguration.


        :return: The user_group_resolution_mode of this UserGroupResolutionConfiguration.
        :rtype: UserGroupResolutionMode
        """
        return self._user_group_resolution_mode

    @user_group_resolution_mode.setter
    def user_group_resolution_mode(self, user_group_resolution_mode):
        """Sets the user_group_resolution_mode of this UserGroupResolutionConfiguration.


        :param user_group_resolution_mode: The user_group_resolution_mode of this UserGroupResolutionConfiguration.
        :type user_group_resolution_mode: UserGroupResolutionMode
        """
        if user_group_resolution_mode is None:
            raise ValueError("Invalid value for `user_group_resolution_mode`, must not be `None`")

        self._user_group_resolution_mode = user_group_resolution_mode
