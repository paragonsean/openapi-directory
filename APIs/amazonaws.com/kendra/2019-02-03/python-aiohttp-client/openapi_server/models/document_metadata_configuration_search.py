# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DocumentMetadataConfigurationSearch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, facetable: bool=None, searchable: bool=None, displayable: bool=None, sortable: bool=None):
        """DocumentMetadataConfigurationSearch - a model defined in OpenAPI

        :param facetable: The facetable of this DocumentMetadataConfigurationSearch.
        :param searchable: The searchable of this DocumentMetadataConfigurationSearch.
        :param displayable: The displayable of this DocumentMetadataConfigurationSearch.
        :param sortable: The sortable of this DocumentMetadataConfigurationSearch.
        """
        self.openapi_types = {
            'facetable': bool,
            'searchable': bool,
            'displayable': bool,
            'sortable': bool
        }

        self.attribute_map = {
            'facetable': 'Facetable',
            'searchable': 'Searchable',
            'displayable': 'Displayable',
            'sortable': 'Sortable'
        }

        self._facetable = facetable
        self._searchable = searchable
        self._displayable = displayable
        self._sortable = sortable

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DocumentMetadataConfigurationSearch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DocumentMetadataConfiguration_Search of this DocumentMetadataConfigurationSearch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def facetable(self):
        """Gets the facetable of this DocumentMetadataConfigurationSearch.


        :return: The facetable of this DocumentMetadataConfigurationSearch.
        :rtype: bool
        """
        return self._facetable

    @facetable.setter
    def facetable(self, facetable):
        """Sets the facetable of this DocumentMetadataConfigurationSearch.


        :param facetable: The facetable of this DocumentMetadataConfigurationSearch.
        :type facetable: bool
        """

        self._facetable = facetable

    @property
    def searchable(self):
        """Gets the searchable of this DocumentMetadataConfigurationSearch.


        :return: The searchable of this DocumentMetadataConfigurationSearch.
        :rtype: bool
        """
        return self._searchable

    @searchable.setter
    def searchable(self, searchable):
        """Sets the searchable of this DocumentMetadataConfigurationSearch.


        :param searchable: The searchable of this DocumentMetadataConfigurationSearch.
        :type searchable: bool
        """

        self._searchable = searchable

    @property
    def displayable(self):
        """Gets the displayable of this DocumentMetadataConfigurationSearch.


        :return: The displayable of this DocumentMetadataConfigurationSearch.
        :rtype: bool
        """
        return self._displayable

    @displayable.setter
    def displayable(self, displayable):
        """Sets the displayable of this DocumentMetadataConfigurationSearch.


        :param displayable: The displayable of this DocumentMetadataConfigurationSearch.
        :type displayable: bool
        """

        self._displayable = displayable

    @property
    def sortable(self):
        """Gets the sortable of this DocumentMetadataConfigurationSearch.


        :return: The sortable of this DocumentMetadataConfigurationSearch.
        :rtype: bool
        """
        return self._sortable

    @sortable.setter
    def sortable(self, sortable):
        """Sets the sortable of this DocumentMetadataConfigurationSearch.


        :param sortable: The sortable of this DocumentMetadataConfigurationSearch.
        :type sortable: bool
        """

        self._sortable = sortable
