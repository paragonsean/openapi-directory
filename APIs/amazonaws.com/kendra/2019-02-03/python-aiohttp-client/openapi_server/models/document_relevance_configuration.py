# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.document_relevance_configuration_relevance import DocumentRelevanceConfigurationRelevance
from openapi_server import util


class DocumentRelevanceConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, relevance: DocumentRelevanceConfigurationRelevance=None):
        """DocumentRelevanceConfiguration - a model defined in OpenAPI

        :param name: The name of this DocumentRelevanceConfiguration.
        :param relevance: The relevance of this DocumentRelevanceConfiguration.
        """
        self.openapi_types = {
            'name': str,
            'relevance': DocumentRelevanceConfigurationRelevance
        }

        self.attribute_map = {
            'name': 'Name',
            'relevance': 'Relevance'
        }

        self._name = name
        self._relevance = relevance

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DocumentRelevanceConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DocumentRelevanceConfiguration of this DocumentRelevanceConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this DocumentRelevanceConfiguration.


        :return: The name of this DocumentRelevanceConfiguration.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DocumentRelevanceConfiguration.


        :param name: The name of this DocumentRelevanceConfiguration.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def relevance(self):
        """Gets the relevance of this DocumentRelevanceConfiguration.


        :return: The relevance of this DocumentRelevanceConfiguration.
        :rtype: DocumentRelevanceConfigurationRelevance
        """
        return self._relevance

    @relevance.setter
    def relevance(self, relevance):
        """Sets the relevance of this DocumentRelevanceConfiguration.


        :param relevance: The relevance of this DocumentRelevanceConfiguration.
        :type relevance: DocumentRelevanceConfigurationRelevance
        """
        if relevance is None:
            raise ValueError("Invalid value for `relevance`, must not be `None`")

        self._relevance = relevance
