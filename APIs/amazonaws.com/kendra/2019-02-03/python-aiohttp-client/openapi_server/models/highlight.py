# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.highlight_type import HighlightType
from openapi_server import util


class Highlight(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, begin_offset: int=None, end_offset: int=None, top_answer: bool=None, type: HighlightType=None):
        """Highlight - a model defined in OpenAPI

        :param begin_offset: The begin_offset of this Highlight.
        :param end_offset: The end_offset of this Highlight.
        :param top_answer: The top_answer of this Highlight.
        :param type: The type of this Highlight.
        """
        self.openapi_types = {
            'begin_offset': int,
            'end_offset': int,
            'top_answer': bool,
            'type': HighlightType
        }

        self.attribute_map = {
            'begin_offset': 'BeginOffset',
            'end_offset': 'EndOffset',
            'top_answer': 'TopAnswer',
            'type': 'Type'
        }

        self._begin_offset = begin_offset
        self._end_offset = end_offset
        self._top_answer = top_answer
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Highlight':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Highlight of this Highlight.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def begin_offset(self):
        """Gets the begin_offset of this Highlight.


        :return: The begin_offset of this Highlight.
        :rtype: int
        """
        return self._begin_offset

    @begin_offset.setter
    def begin_offset(self, begin_offset):
        """Sets the begin_offset of this Highlight.


        :param begin_offset: The begin_offset of this Highlight.
        :type begin_offset: int
        """
        if begin_offset is None:
            raise ValueError("Invalid value for `begin_offset`, must not be `None`")

        self._begin_offset = begin_offset

    @property
    def end_offset(self):
        """Gets the end_offset of this Highlight.


        :return: The end_offset of this Highlight.
        :rtype: int
        """
        return self._end_offset

    @end_offset.setter
    def end_offset(self, end_offset):
        """Sets the end_offset of this Highlight.


        :param end_offset: The end_offset of this Highlight.
        :type end_offset: int
        """
        if end_offset is None:
            raise ValueError("Invalid value for `end_offset`, must not be `None`")

        self._end_offset = end_offset

    @property
    def top_answer(self):
        """Gets the top_answer of this Highlight.


        :return: The top_answer of this Highlight.
        :rtype: bool
        """
        return self._top_answer

    @top_answer.setter
    def top_answer(self, top_answer):
        """Sets the top_answer of this Highlight.


        :param top_answer: The top_answer of this Highlight.
        :type top_answer: bool
        """

        self._top_answer = top_answer

    @property
    def type(self):
        """Gets the type of this Highlight.


        :return: The type of this Highlight.
        :rtype: HighlightType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Highlight.


        :param type: The type of this Highlight.
        :type type: HighlightType
        """

        self._type = type
