# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_thesaurus_request_source_s3_path import CreateThesaurusRequestSourceS3Path
from openapi_server import util


class CreateThesaurusRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, index_id: str=None, name: str=None, description: str=None, role_arn: str=None, tags: List=None, source_s3_path: CreateThesaurusRequestSourceS3Path=None, client_token: str=None):
        """CreateThesaurusRequest - a model defined in OpenAPI

        :param index_id: The index_id of this CreateThesaurusRequest.
        :param name: The name of this CreateThesaurusRequest.
        :param description: The description of this CreateThesaurusRequest.
        :param role_arn: The role_arn of this CreateThesaurusRequest.
        :param tags: The tags of this CreateThesaurusRequest.
        :param source_s3_path: The source_s3_path of this CreateThesaurusRequest.
        :param client_token: The client_token of this CreateThesaurusRequest.
        """
        self.openapi_types = {
            'index_id': str,
            'name': str,
            'description': str,
            'role_arn': str,
            'tags': List,
            'source_s3_path': CreateThesaurusRequestSourceS3Path,
            'client_token': str
        }

        self.attribute_map = {
            'index_id': 'IndexId',
            'name': 'Name',
            'description': 'Description',
            'role_arn': 'RoleArn',
            'tags': 'Tags',
            'source_s3_path': 'SourceS3Path',
            'client_token': 'ClientToken'
        }

        self._index_id = index_id
        self._name = name
        self._description = description
        self._role_arn = role_arn
        self._tags = tags
        self._source_s3_path = source_s3_path
        self._client_token = client_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateThesaurusRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateThesaurusRequest of this CreateThesaurusRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def index_id(self):
        """Gets the index_id of this CreateThesaurusRequest.


        :return: The index_id of this CreateThesaurusRequest.
        :rtype: str
        """
        return self._index_id

    @index_id.setter
    def index_id(self, index_id):
        """Sets the index_id of this CreateThesaurusRequest.


        :param index_id: The index_id of this CreateThesaurusRequest.
        :type index_id: str
        """
        if index_id is None:
            raise ValueError("Invalid value for `index_id`, must not be `None`")

        self._index_id = index_id

    @property
    def name(self):
        """Gets the name of this CreateThesaurusRequest.


        :return: The name of this CreateThesaurusRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateThesaurusRequest.


        :param name: The name of this CreateThesaurusRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def description(self):
        """Gets the description of this CreateThesaurusRequest.


        :return: The description of this CreateThesaurusRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateThesaurusRequest.


        :param description: The description of this CreateThesaurusRequest.
        :type description: str
        """

        self._description = description

    @property
    def role_arn(self):
        """Gets the role_arn of this CreateThesaurusRequest.


        :return: The role_arn of this CreateThesaurusRequest.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this CreateThesaurusRequest.


        :param role_arn: The role_arn of this CreateThesaurusRequest.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")

        self._role_arn = role_arn

    @property
    def tags(self):
        """Gets the tags of this CreateThesaurusRequest.


        :return: The tags of this CreateThesaurusRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateThesaurusRequest.


        :param tags: The tags of this CreateThesaurusRequest.
        :type tags: List
        """

        self._tags = tags

    @property
    def source_s3_path(self):
        """Gets the source_s3_path of this CreateThesaurusRequest.


        :return: The source_s3_path of this CreateThesaurusRequest.
        :rtype: CreateThesaurusRequestSourceS3Path
        """
        return self._source_s3_path

    @source_s3_path.setter
    def source_s3_path(self, source_s3_path):
        """Sets the source_s3_path of this CreateThesaurusRequest.


        :param source_s3_path: The source_s3_path of this CreateThesaurusRequest.
        :type source_s3_path: CreateThesaurusRequestSourceS3Path
        """
        if source_s3_path is None:
            raise ValueError("Invalid value for `source_s3_path`, must not be `None`")

        self._source_s3_path = source_s3_path

    @property
    def client_token(self):
        """Gets the client_token of this CreateThesaurusRequest.


        :return: The client_token of this CreateThesaurusRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateThesaurusRequest.


        :param client_token: The client_token of this CreateThesaurusRequest.
        :type client_token: str
        """

        self._client_token = client_token
