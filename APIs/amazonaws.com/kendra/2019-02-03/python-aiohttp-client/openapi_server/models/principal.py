# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.principal_type import PrincipalType
from openapi_server.models.read_access_type import ReadAccessType
from openapi_server import util


class Principal(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, type: PrincipalType=None, access: ReadAccessType=None, data_source_id: str=None):
        """Principal - a model defined in OpenAPI

        :param name: The name of this Principal.
        :param type: The type of this Principal.
        :param access: The access of this Principal.
        :param data_source_id: The data_source_id of this Principal.
        """
        self.openapi_types = {
            'name': str,
            'type': PrincipalType,
            'access': ReadAccessType,
            'data_source_id': str
        }

        self.attribute_map = {
            'name': 'Name',
            'type': 'Type',
            'access': 'Access',
            'data_source_id': 'DataSourceId'
        }

        self._name = name
        self._type = type
        self._access = access
        self._data_source_id = data_source_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Principal':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Principal of this Principal.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this Principal.


        :return: The name of this Principal.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Principal.


        :param name: The name of this Principal.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def type(self):
        """Gets the type of this Principal.


        :return: The type of this Principal.
        :rtype: PrincipalType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Principal.


        :param type: The type of this Principal.
        :type type: PrincipalType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def access(self):
        """Gets the access of this Principal.


        :return: The access of this Principal.
        :rtype: ReadAccessType
        """
        return self._access

    @access.setter
    def access(self, access):
        """Sets the access of this Principal.


        :param access: The access of this Principal.
        :type access: ReadAccessType
        """
        if access is None:
            raise ValueError("Invalid value for `access`, must not be `None`")

        self._access = access

    @property
    def data_source_id(self):
        """Gets the data_source_id of this Principal.


        :return: The data_source_id of this Principal.
        :rtype: str
        """
        return self._data_source_id

    @data_source_id.setter
    def data_source_id(self, data_source_id):
        """Sets the data_source_id of this Principal.


        :param data_source_id: The data_source_id of this Principal.
        :type data_source_id: str
        """

        self._data_source_id = data_source_id
