# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConditionOperator(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    GREATERTHAN = 'GreaterThan'
    GREATERTHANOREQUALS = 'GreaterThanOrEquals'
    LESSTHAN = 'LessThan'
    LESSTHANOREQUALS = 'LessThanOrEquals'
    EQUALS = 'Equals'
    NOTEQUALS = 'NotEquals'
    CONTAINS = 'Contains'
    NOTCONTAINS = 'NotContains'
    EXISTS = 'Exists'
    NOTEXISTS = 'NotExists'
    BEGINSWITH = 'BeginsWith'

    def __init__(self):
        """ConditionOperator - a model defined in OpenAPI

        """
        self.openapi_types = {
        }

        self.attribute_map = {
        }

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConditionOperator':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConditionOperator of this ConditionOperator.
        """
        return util.deserialize_model(dikt, cls)
