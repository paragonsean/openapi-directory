# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FaqStatistics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, indexed_question_answers_count: int=None):
        """FaqStatistics - a model defined in OpenAPI

        :param indexed_question_answers_count: The indexed_question_answers_count of this FaqStatistics.
        """
        self.openapi_types = {
            'indexed_question_answers_count': int
        }

        self.attribute_map = {
            'indexed_question_answers_count': 'IndexedQuestionAnswersCount'
        }

        self._indexed_question_answers_count = indexed_question_answers_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FaqStatistics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FaqStatistics of this FaqStatistics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def indexed_question_answers_count(self):
        """Gets the indexed_question_answers_count of this FaqStatistics.


        :return: The indexed_question_answers_count of this FaqStatistics.
        :rtype: int
        """
        return self._indexed_question_answers_count

    @indexed_question_answers_count.setter
    def indexed_question_answers_count(self, indexed_question_answers_count):
        """Sets the indexed_question_answers_count of this FaqStatistics.


        :param indexed_question_answers_count: The indexed_question_answers_count of this FaqStatistics.
        :type indexed_question_answers_count: int
        """
        if indexed_question_answers_count is None:
            raise ValueError("Invalid value for `indexed_question_answers_count`, must not be `None`")

        self._indexed_question_answers_count = indexed_question_answers_count
