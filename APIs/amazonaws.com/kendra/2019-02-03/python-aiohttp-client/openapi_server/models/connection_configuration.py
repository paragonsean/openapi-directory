# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConnectionConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, database_host: str=None, database_port: int=None, database_name: str=None, table_name: str=None, secret_arn: str=None):
        """ConnectionConfiguration - a model defined in OpenAPI

        :param database_host: The database_host of this ConnectionConfiguration.
        :param database_port: The database_port of this ConnectionConfiguration.
        :param database_name: The database_name of this ConnectionConfiguration.
        :param table_name: The table_name of this ConnectionConfiguration.
        :param secret_arn: The secret_arn of this ConnectionConfiguration.
        """
        self.openapi_types = {
            'database_host': str,
            'database_port': int,
            'database_name': str,
            'table_name': str,
            'secret_arn': str
        }

        self.attribute_map = {
            'database_host': 'DatabaseHost',
            'database_port': 'DatabasePort',
            'database_name': 'DatabaseName',
            'table_name': 'TableName',
            'secret_arn': 'SecretArn'
        }

        self._database_host = database_host
        self._database_port = database_port
        self._database_name = database_name
        self._table_name = table_name
        self._secret_arn = secret_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectionConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectionConfiguration of this ConnectionConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def database_host(self):
        """Gets the database_host of this ConnectionConfiguration.


        :return: The database_host of this ConnectionConfiguration.
        :rtype: str
        """
        return self._database_host

    @database_host.setter
    def database_host(self, database_host):
        """Sets the database_host of this ConnectionConfiguration.


        :param database_host: The database_host of this ConnectionConfiguration.
        :type database_host: str
        """
        if database_host is None:
            raise ValueError("Invalid value for `database_host`, must not be `None`")

        self._database_host = database_host

    @property
    def database_port(self):
        """Gets the database_port of this ConnectionConfiguration.


        :return: The database_port of this ConnectionConfiguration.
        :rtype: int
        """
        return self._database_port

    @database_port.setter
    def database_port(self, database_port):
        """Sets the database_port of this ConnectionConfiguration.


        :param database_port: The database_port of this ConnectionConfiguration.
        :type database_port: int
        """
        if database_port is None:
            raise ValueError("Invalid value for `database_port`, must not be `None`")

        self._database_port = database_port

    @property
    def database_name(self):
        """Gets the database_name of this ConnectionConfiguration.


        :return: The database_name of this ConnectionConfiguration.
        :rtype: str
        """
        return self._database_name

    @database_name.setter
    def database_name(self, database_name):
        """Sets the database_name of this ConnectionConfiguration.


        :param database_name: The database_name of this ConnectionConfiguration.
        :type database_name: str
        """
        if database_name is None:
            raise ValueError("Invalid value for `database_name`, must not be `None`")

        self._database_name = database_name

    @property
    def table_name(self):
        """Gets the table_name of this ConnectionConfiguration.


        :return: The table_name of this ConnectionConfiguration.
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this ConnectionConfiguration.


        :param table_name: The table_name of this ConnectionConfiguration.
        :type table_name: str
        """
        if table_name is None:
            raise ValueError("Invalid value for `table_name`, must not be `None`")

        self._table_name = table_name

    @property
    def secret_arn(self):
        """Gets the secret_arn of this ConnectionConfiguration.


        :return: The secret_arn of this ConnectionConfiguration.
        :rtype: str
        """
        return self._secret_arn

    @secret_arn.setter
    def secret_arn(self, secret_arn):
        """Sets the secret_arn of this ConnectionConfiguration.


        :param secret_arn: The secret_arn of this ConnectionConfiguration.
        :type secret_arn: str
        """
        if secret_arn is None:
            raise ValueError("Invalid value for `secret_arn`, must not be `None`")

        self._secret_arn = secret_arn
