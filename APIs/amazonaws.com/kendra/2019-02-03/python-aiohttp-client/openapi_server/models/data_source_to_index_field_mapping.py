# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DataSourceToIndexFieldMapping(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_source_field_name: str=None, date_field_format: str=None, index_field_name: str=None):
        """DataSourceToIndexFieldMapping - a model defined in OpenAPI

        :param data_source_field_name: The data_source_field_name of this DataSourceToIndexFieldMapping.
        :param date_field_format: The date_field_format of this DataSourceToIndexFieldMapping.
        :param index_field_name: The index_field_name of this DataSourceToIndexFieldMapping.
        """
        self.openapi_types = {
            'data_source_field_name': str,
            'date_field_format': str,
            'index_field_name': str
        }

        self.attribute_map = {
            'data_source_field_name': 'DataSourceFieldName',
            'date_field_format': 'DateFieldFormat',
            'index_field_name': 'IndexFieldName'
        }

        self._data_source_field_name = data_source_field_name
        self._date_field_format = date_field_format
        self._index_field_name = index_field_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataSourceToIndexFieldMapping':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataSourceToIndexFieldMapping of this DataSourceToIndexFieldMapping.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_source_field_name(self):
        """Gets the data_source_field_name of this DataSourceToIndexFieldMapping.


        :return: The data_source_field_name of this DataSourceToIndexFieldMapping.
        :rtype: str
        """
        return self._data_source_field_name

    @data_source_field_name.setter
    def data_source_field_name(self, data_source_field_name):
        """Sets the data_source_field_name of this DataSourceToIndexFieldMapping.


        :param data_source_field_name: The data_source_field_name of this DataSourceToIndexFieldMapping.
        :type data_source_field_name: str
        """
        if data_source_field_name is None:
            raise ValueError("Invalid value for `data_source_field_name`, must not be `None`")

        self._data_source_field_name = data_source_field_name

    @property
    def date_field_format(self):
        """Gets the date_field_format of this DataSourceToIndexFieldMapping.


        :return: The date_field_format of this DataSourceToIndexFieldMapping.
        :rtype: str
        """
        return self._date_field_format

    @date_field_format.setter
    def date_field_format(self, date_field_format):
        """Sets the date_field_format of this DataSourceToIndexFieldMapping.


        :param date_field_format: The date_field_format of this DataSourceToIndexFieldMapping.
        :type date_field_format: str
        """

        self._date_field_format = date_field_format

    @property
    def index_field_name(self):
        """Gets the index_field_name of this DataSourceToIndexFieldMapping.


        :return: The index_field_name of this DataSourceToIndexFieldMapping.
        :rtype: str
        """
        return self._index_field_name

    @index_field_name.setter
    def index_field_name(self, index_field_name):
        """Sets the index_field_name of this DataSourceToIndexFieldMapping.


        :param index_field_name: The index_field_name of this DataSourceToIndexFieldMapping.
        :type index_field_name: str
        """
        if index_field_name is None:
            raise ValueError("Invalid value for `index_field_name`, must not be `None`")

        self._index_field_name = index_field_name
