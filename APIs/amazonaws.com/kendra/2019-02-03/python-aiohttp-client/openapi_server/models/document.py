# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.content_type import ContentType
from openapi_server.models.s3_path import S3Path
from openapi_server import util


class Document(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, title: str=None, blob: str=None, s3_path: S3Path=None, attributes: List=None, access_control_list: List=None, hierarchical_access_control_list: List=None, content_type: ContentType=None, access_control_configuration_id: str=None):
        """Document - a model defined in OpenAPI

        :param id: The id of this Document.
        :param title: The title of this Document.
        :param blob: The blob of this Document.
        :param s3_path: The s3_path of this Document.
        :param attributes: The attributes of this Document.
        :param access_control_list: The access_control_list of this Document.
        :param hierarchical_access_control_list: The hierarchical_access_control_list of this Document.
        :param content_type: The content_type of this Document.
        :param access_control_configuration_id: The access_control_configuration_id of this Document.
        """
        self.openapi_types = {
            'id': str,
            'title': str,
            'blob': str,
            's3_path': S3Path,
            'attributes': List,
            'access_control_list': List,
            'hierarchical_access_control_list': List,
            'content_type': ContentType,
            'access_control_configuration_id': str
        }

        self.attribute_map = {
            'id': 'Id',
            'title': 'Title',
            'blob': 'Blob',
            's3_path': 'S3Path',
            'attributes': 'Attributes',
            'access_control_list': 'AccessControlList',
            'hierarchical_access_control_list': 'HierarchicalAccessControlList',
            'content_type': 'ContentType',
            'access_control_configuration_id': 'AccessControlConfigurationId'
        }

        self._id = id
        self._title = title
        self._blob = blob
        self._s3_path = s3_path
        self._attributes = attributes
        self._access_control_list = access_control_list
        self._hierarchical_access_control_list = hierarchical_access_control_list
        self._content_type = content_type
        self._access_control_configuration_id = access_control_configuration_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Document':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Document of this Document.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Document.


        :return: The id of this Document.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Document.


        :param id: The id of this Document.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def title(self):
        """Gets the title of this Document.


        :return: The title of this Document.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Document.


        :param title: The title of this Document.
        :type title: str
        """

        self._title = title

    @property
    def blob(self):
        """Gets the blob of this Document.


        :return: The blob of this Document.
        :rtype: str
        """
        return self._blob

    @blob.setter
    def blob(self, blob):
        """Sets the blob of this Document.


        :param blob: The blob of this Document.
        :type blob: str
        """

        self._blob = blob

    @property
    def s3_path(self):
        """Gets the s3_path of this Document.


        :return: The s3_path of this Document.
        :rtype: S3Path
        """
        return self._s3_path

    @s3_path.setter
    def s3_path(self, s3_path):
        """Sets the s3_path of this Document.


        :param s3_path: The s3_path of this Document.
        :type s3_path: S3Path
        """

        self._s3_path = s3_path

    @property
    def attributes(self):
        """Gets the attributes of this Document.


        :return: The attributes of this Document.
        :rtype: List
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this Document.


        :param attributes: The attributes of this Document.
        :type attributes: List
        """

        self._attributes = attributes

    @property
    def access_control_list(self):
        """Gets the access_control_list of this Document.


        :return: The access_control_list of this Document.
        :rtype: List
        """
        return self._access_control_list

    @access_control_list.setter
    def access_control_list(self, access_control_list):
        """Sets the access_control_list of this Document.


        :param access_control_list: The access_control_list of this Document.
        :type access_control_list: List
        """

        self._access_control_list = access_control_list

    @property
    def hierarchical_access_control_list(self):
        """Gets the hierarchical_access_control_list of this Document.


        :return: The hierarchical_access_control_list of this Document.
        :rtype: List
        """
        return self._hierarchical_access_control_list

    @hierarchical_access_control_list.setter
    def hierarchical_access_control_list(self, hierarchical_access_control_list):
        """Sets the hierarchical_access_control_list of this Document.


        :param hierarchical_access_control_list: The hierarchical_access_control_list of this Document.
        :type hierarchical_access_control_list: List
        """

        self._hierarchical_access_control_list = hierarchical_access_control_list

    @property
    def content_type(self):
        """Gets the content_type of this Document.


        :return: The content_type of this Document.
        :rtype: ContentType
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this Document.


        :param content_type: The content_type of this Document.
        :type content_type: ContentType
        """

        self._content_type = content_type

    @property
    def access_control_configuration_id(self):
        """Gets the access_control_configuration_id of this Document.


        :return: The access_control_configuration_id of this Document.
        :rtype: str
        """
        return self._access_control_configuration_id

    @access_control_configuration_id.setter
    def access_control_configuration_id(self, access_control_configuration_id):
        """Sets the access_control_configuration_id of this Document.


        :param access_control_configuration_id: The access_control_configuration_id of this Document.
        :type access_control_configuration_id: str
        """

        self._access_control_configuration_id = access_control_configuration_id
