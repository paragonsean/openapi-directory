# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IndexStatisticsTextDocumentStatistics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, indexed_text_documents_count: int=None, indexed_text_bytes: int=None):
        """IndexStatisticsTextDocumentStatistics - a model defined in OpenAPI

        :param indexed_text_documents_count: The indexed_text_documents_count of this IndexStatisticsTextDocumentStatistics.
        :param indexed_text_bytes: The indexed_text_bytes of this IndexStatisticsTextDocumentStatistics.
        """
        self.openapi_types = {
            'indexed_text_documents_count': int,
            'indexed_text_bytes': int
        }

        self.attribute_map = {
            'indexed_text_documents_count': 'IndexedTextDocumentsCount',
            'indexed_text_bytes': 'IndexedTextBytes'
        }

        self._indexed_text_documents_count = indexed_text_documents_count
        self._indexed_text_bytes = indexed_text_bytes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IndexStatisticsTextDocumentStatistics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IndexStatistics_TextDocumentStatistics of this IndexStatisticsTextDocumentStatistics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def indexed_text_documents_count(self):
        """Gets the indexed_text_documents_count of this IndexStatisticsTextDocumentStatistics.


        :return: The indexed_text_documents_count of this IndexStatisticsTextDocumentStatistics.
        :rtype: int
        """
        return self._indexed_text_documents_count

    @indexed_text_documents_count.setter
    def indexed_text_documents_count(self, indexed_text_documents_count):
        """Sets the indexed_text_documents_count of this IndexStatisticsTextDocumentStatistics.


        :param indexed_text_documents_count: The indexed_text_documents_count of this IndexStatisticsTextDocumentStatistics.
        :type indexed_text_documents_count: int
        """
        if indexed_text_documents_count is None:
            raise ValueError("Invalid value for `indexed_text_documents_count`, must not be `None`")

        self._indexed_text_documents_count = indexed_text_documents_count

    @property
    def indexed_text_bytes(self):
        """Gets the indexed_text_bytes of this IndexStatisticsTextDocumentStatistics.


        :return: The indexed_text_bytes of this IndexStatisticsTextDocumentStatistics.
        :rtype: int
        """
        return self._indexed_text_bytes

    @indexed_text_bytes.setter
    def indexed_text_bytes(self, indexed_text_bytes):
        """Sets the indexed_text_bytes of this IndexStatisticsTextDocumentStatistics.


        :param indexed_text_bytes: The indexed_text_bytes of this IndexStatisticsTextDocumentStatistics.
        :type indexed_text_bytes: int
        """
        if indexed_text_bytes is None:
            raise ValueError("Invalid value for `indexed_text_bytes`, must not be `None`")

        self._indexed_text_bytes = indexed_text_bytes
