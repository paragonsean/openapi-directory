# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_index_request_capacity_units import UpdateIndexRequestCapacityUnits
from openapi_server.models.update_index_request_user_group_resolution_configuration import UpdateIndexRequestUserGroupResolutionConfiguration
from openapi_server.models.user_context_policy import UserContextPolicy
from openapi_server import util


class UpdateIndexRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, name: str=None, role_arn: str=None, description: str=None, document_metadata_configuration_updates: List=None, capacity_units: UpdateIndexRequestCapacityUnits=None, user_token_configurations: List=None, user_context_policy: UserContextPolicy=None, user_group_resolution_configuration: UpdateIndexRequestUserGroupResolutionConfiguration=None):
        """UpdateIndexRequest - a model defined in OpenAPI

        :param id: The id of this UpdateIndexRequest.
        :param name: The name of this UpdateIndexRequest.
        :param role_arn: The role_arn of this UpdateIndexRequest.
        :param description: The description of this UpdateIndexRequest.
        :param document_metadata_configuration_updates: The document_metadata_configuration_updates of this UpdateIndexRequest.
        :param capacity_units: The capacity_units of this UpdateIndexRequest.
        :param user_token_configurations: The user_token_configurations of this UpdateIndexRequest.
        :param user_context_policy: The user_context_policy of this UpdateIndexRequest.
        :param user_group_resolution_configuration: The user_group_resolution_configuration of this UpdateIndexRequest.
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'role_arn': str,
            'description': str,
            'document_metadata_configuration_updates': List,
            'capacity_units': UpdateIndexRequestCapacityUnits,
            'user_token_configurations': List,
            'user_context_policy': UserContextPolicy,
            'user_group_resolution_configuration': UpdateIndexRequestUserGroupResolutionConfiguration
        }

        self.attribute_map = {
            'id': 'Id',
            'name': 'Name',
            'role_arn': 'RoleArn',
            'description': 'Description',
            'document_metadata_configuration_updates': 'DocumentMetadataConfigurationUpdates',
            'capacity_units': 'CapacityUnits',
            'user_token_configurations': 'UserTokenConfigurations',
            'user_context_policy': 'UserContextPolicy',
            'user_group_resolution_configuration': 'UserGroupResolutionConfiguration'
        }

        self._id = id
        self._name = name
        self._role_arn = role_arn
        self._description = description
        self._document_metadata_configuration_updates = document_metadata_configuration_updates
        self._capacity_units = capacity_units
        self._user_token_configurations = user_token_configurations
        self._user_context_policy = user_context_policy
        self._user_group_resolution_configuration = user_group_resolution_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateIndexRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateIndexRequest of this UpdateIndexRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this UpdateIndexRequest.


        :return: The id of this UpdateIndexRequest.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UpdateIndexRequest.


        :param id: The id of this UpdateIndexRequest.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this UpdateIndexRequest.


        :return: The name of this UpdateIndexRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateIndexRequest.


        :param name: The name of this UpdateIndexRequest.
        :type name: str
        """

        self._name = name

    @property
    def role_arn(self):
        """Gets the role_arn of this UpdateIndexRequest.


        :return: The role_arn of this UpdateIndexRequest.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this UpdateIndexRequest.


        :param role_arn: The role_arn of this UpdateIndexRequest.
        :type role_arn: str
        """

        self._role_arn = role_arn

    @property
    def description(self):
        """Gets the description of this UpdateIndexRequest.


        :return: The description of this UpdateIndexRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateIndexRequest.


        :param description: The description of this UpdateIndexRequest.
        :type description: str
        """

        self._description = description

    @property
    def document_metadata_configuration_updates(self):
        """Gets the document_metadata_configuration_updates of this UpdateIndexRequest.


        :return: The document_metadata_configuration_updates of this UpdateIndexRequest.
        :rtype: List
        """
        return self._document_metadata_configuration_updates

    @document_metadata_configuration_updates.setter
    def document_metadata_configuration_updates(self, document_metadata_configuration_updates):
        """Sets the document_metadata_configuration_updates of this UpdateIndexRequest.


        :param document_metadata_configuration_updates: The document_metadata_configuration_updates of this UpdateIndexRequest.
        :type document_metadata_configuration_updates: List
        """

        self._document_metadata_configuration_updates = document_metadata_configuration_updates

    @property
    def capacity_units(self):
        """Gets the capacity_units of this UpdateIndexRequest.


        :return: The capacity_units of this UpdateIndexRequest.
        :rtype: UpdateIndexRequestCapacityUnits
        """
        return self._capacity_units

    @capacity_units.setter
    def capacity_units(self, capacity_units):
        """Sets the capacity_units of this UpdateIndexRequest.


        :param capacity_units: The capacity_units of this UpdateIndexRequest.
        :type capacity_units: UpdateIndexRequestCapacityUnits
        """

        self._capacity_units = capacity_units

    @property
    def user_token_configurations(self):
        """Gets the user_token_configurations of this UpdateIndexRequest.


        :return: The user_token_configurations of this UpdateIndexRequest.
        :rtype: List
        """
        return self._user_token_configurations

    @user_token_configurations.setter
    def user_token_configurations(self, user_token_configurations):
        """Sets the user_token_configurations of this UpdateIndexRequest.


        :param user_token_configurations: The user_token_configurations of this UpdateIndexRequest.
        :type user_token_configurations: List
        """

        self._user_token_configurations = user_token_configurations

    @property
    def user_context_policy(self):
        """Gets the user_context_policy of this UpdateIndexRequest.


        :return: The user_context_policy of this UpdateIndexRequest.
        :rtype: UserContextPolicy
        """
        return self._user_context_policy

    @user_context_policy.setter
    def user_context_policy(self, user_context_policy):
        """Sets the user_context_policy of this UpdateIndexRequest.


        :param user_context_policy: The user_context_policy of this UpdateIndexRequest.
        :type user_context_policy: UserContextPolicy
        """

        self._user_context_policy = user_context_policy

    @property
    def user_group_resolution_configuration(self):
        """Gets the user_group_resolution_configuration of this UpdateIndexRequest.


        :return: The user_group_resolution_configuration of this UpdateIndexRequest.
        :rtype: UpdateIndexRequestUserGroupResolutionConfiguration
        """
        return self._user_group_resolution_configuration

    @user_group_resolution_configuration.setter
    def user_group_resolution_configuration(self, user_group_resolution_configuration):
        """Sets the user_group_resolution_configuration of this UpdateIndexRequest.


        :param user_group_resolution_configuration: The user_group_resolution_configuration of this UpdateIndexRequest.
        :type user_group_resolution_configuration: UpdateIndexRequestUserGroupResolutionConfiguration
        """

        self._user_group_resolution_configuration = user_group_resolution_configuration
