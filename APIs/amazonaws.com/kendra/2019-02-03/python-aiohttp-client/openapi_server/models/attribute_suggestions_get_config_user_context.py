# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AttributeSuggestionsGetConfigUserContext(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, token: str=None, user_id: str=None, groups: List=None, data_source_groups: List=None):
        """AttributeSuggestionsGetConfigUserContext - a model defined in OpenAPI

        :param token: The token of this AttributeSuggestionsGetConfigUserContext.
        :param user_id: The user_id of this AttributeSuggestionsGetConfigUserContext.
        :param groups: The groups of this AttributeSuggestionsGetConfigUserContext.
        :param data_source_groups: The data_source_groups of this AttributeSuggestionsGetConfigUserContext.
        """
        self.openapi_types = {
            'token': str,
            'user_id': str,
            'groups': List,
            'data_source_groups': List
        }

        self.attribute_map = {
            'token': 'Token',
            'user_id': 'UserId',
            'groups': 'Groups',
            'data_source_groups': 'DataSourceGroups'
        }

        self._token = token
        self._user_id = user_id
        self._groups = groups
        self._data_source_groups = data_source_groups

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AttributeSuggestionsGetConfigUserContext':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AttributeSuggestionsGetConfig_UserContext of this AttributeSuggestionsGetConfigUserContext.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def token(self):
        """Gets the token of this AttributeSuggestionsGetConfigUserContext.


        :return: The token of this AttributeSuggestionsGetConfigUserContext.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this AttributeSuggestionsGetConfigUserContext.


        :param token: The token of this AttributeSuggestionsGetConfigUserContext.
        :type token: str
        """

        self._token = token

    @property
    def user_id(self):
        """Gets the user_id of this AttributeSuggestionsGetConfigUserContext.


        :return: The user_id of this AttributeSuggestionsGetConfigUserContext.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AttributeSuggestionsGetConfigUserContext.


        :param user_id: The user_id of this AttributeSuggestionsGetConfigUserContext.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def groups(self):
        """Gets the groups of this AttributeSuggestionsGetConfigUserContext.


        :return: The groups of this AttributeSuggestionsGetConfigUserContext.
        :rtype: List
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this AttributeSuggestionsGetConfigUserContext.


        :param groups: The groups of this AttributeSuggestionsGetConfigUserContext.
        :type groups: List
        """

        self._groups = groups

    @property
    def data_source_groups(self):
        """Gets the data_source_groups of this AttributeSuggestionsGetConfigUserContext.


        :return: The data_source_groups of this AttributeSuggestionsGetConfigUserContext.
        :rtype: List
        """
        return self._data_source_groups

    @data_source_groups.setter
    def data_source_groups(self, data_source_groups):
        """Sets the data_source_groups of this AttributeSuggestionsGetConfigUserContext.


        :param data_source_groups: The data_source_groups of this AttributeSuggestionsGetConfigUserContext.
        :type data_source_groups: List
        """

        self._data_source_groups = data_source_groups
