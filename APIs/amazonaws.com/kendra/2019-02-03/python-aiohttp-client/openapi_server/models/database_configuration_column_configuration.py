# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DatabaseConfigurationColumnConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, document_id_column_name: str=None, document_data_column_name: str=None, document_title_column_name: str=None, field_mappings: List=None, change_detecting_columns: List=None):
        """DatabaseConfigurationColumnConfiguration - a model defined in OpenAPI

        :param document_id_column_name: The document_id_column_name of this DatabaseConfigurationColumnConfiguration.
        :param document_data_column_name: The document_data_column_name of this DatabaseConfigurationColumnConfiguration.
        :param document_title_column_name: The document_title_column_name of this DatabaseConfigurationColumnConfiguration.
        :param field_mappings: The field_mappings of this DatabaseConfigurationColumnConfiguration.
        :param change_detecting_columns: The change_detecting_columns of this DatabaseConfigurationColumnConfiguration.
        """
        self.openapi_types = {
            'document_id_column_name': str,
            'document_data_column_name': str,
            'document_title_column_name': str,
            'field_mappings': List,
            'change_detecting_columns': List
        }

        self.attribute_map = {
            'document_id_column_name': 'DocumentIdColumnName',
            'document_data_column_name': 'DocumentDataColumnName',
            'document_title_column_name': 'DocumentTitleColumnName',
            'field_mappings': 'FieldMappings',
            'change_detecting_columns': 'ChangeDetectingColumns'
        }

        self._document_id_column_name = document_id_column_name
        self._document_data_column_name = document_data_column_name
        self._document_title_column_name = document_title_column_name
        self._field_mappings = field_mappings
        self._change_detecting_columns = change_detecting_columns

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DatabaseConfigurationColumnConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DatabaseConfiguration_ColumnConfiguration of this DatabaseConfigurationColumnConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def document_id_column_name(self):
        """Gets the document_id_column_name of this DatabaseConfigurationColumnConfiguration.


        :return: The document_id_column_name of this DatabaseConfigurationColumnConfiguration.
        :rtype: str
        """
        return self._document_id_column_name

    @document_id_column_name.setter
    def document_id_column_name(self, document_id_column_name):
        """Sets the document_id_column_name of this DatabaseConfigurationColumnConfiguration.


        :param document_id_column_name: The document_id_column_name of this DatabaseConfigurationColumnConfiguration.
        :type document_id_column_name: str
        """
        if document_id_column_name is None:
            raise ValueError("Invalid value for `document_id_column_name`, must not be `None`")

        self._document_id_column_name = document_id_column_name

    @property
    def document_data_column_name(self):
        """Gets the document_data_column_name of this DatabaseConfigurationColumnConfiguration.


        :return: The document_data_column_name of this DatabaseConfigurationColumnConfiguration.
        :rtype: str
        """
        return self._document_data_column_name

    @document_data_column_name.setter
    def document_data_column_name(self, document_data_column_name):
        """Sets the document_data_column_name of this DatabaseConfigurationColumnConfiguration.


        :param document_data_column_name: The document_data_column_name of this DatabaseConfigurationColumnConfiguration.
        :type document_data_column_name: str
        """
        if document_data_column_name is None:
            raise ValueError("Invalid value for `document_data_column_name`, must not be `None`")

        self._document_data_column_name = document_data_column_name

    @property
    def document_title_column_name(self):
        """Gets the document_title_column_name of this DatabaseConfigurationColumnConfiguration.


        :return: The document_title_column_name of this DatabaseConfigurationColumnConfiguration.
        :rtype: str
        """
        return self._document_title_column_name

    @document_title_column_name.setter
    def document_title_column_name(self, document_title_column_name):
        """Sets the document_title_column_name of this DatabaseConfigurationColumnConfiguration.


        :param document_title_column_name: The document_title_column_name of this DatabaseConfigurationColumnConfiguration.
        :type document_title_column_name: str
        """

        self._document_title_column_name = document_title_column_name

    @property
    def field_mappings(self):
        """Gets the field_mappings of this DatabaseConfigurationColumnConfiguration.


        :return: The field_mappings of this DatabaseConfigurationColumnConfiguration.
        :rtype: List
        """
        return self._field_mappings

    @field_mappings.setter
    def field_mappings(self, field_mappings):
        """Sets the field_mappings of this DatabaseConfigurationColumnConfiguration.


        :param field_mappings: The field_mappings of this DatabaseConfigurationColumnConfiguration.
        :type field_mappings: List
        """

        self._field_mappings = field_mappings

    @property
    def change_detecting_columns(self):
        """Gets the change_detecting_columns of this DatabaseConfigurationColumnConfiguration.


        :return: The change_detecting_columns of this DatabaseConfigurationColumnConfiguration.
        :rtype: List
        """
        return self._change_detecting_columns

    @change_detecting_columns.setter
    def change_detecting_columns(self, change_detecting_columns):
        """Sets the change_detecting_columns of this DatabaseConfigurationColumnConfiguration.


        :param change_detecting_columns: The change_detecting_columns of this DatabaseConfigurationColumnConfiguration.
        :type change_detecting_columns: List
        """
        if change_detecting_columns is None:
            raise ValueError("Invalid value for `change_detecting_columns`, must not be `None`")

        self._change_detecting_columns = change_detecting_columns
