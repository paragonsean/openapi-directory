# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DataSourceConfigurationWorkDocsConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, organization_id: str=None, crawl_comments: bool=None, use_change_log: bool=None, inclusion_patterns: List=None, exclusion_patterns: List=None, field_mappings: List=None):
        """DataSourceConfigurationWorkDocsConfiguration - a model defined in OpenAPI

        :param organization_id: The organization_id of this DataSourceConfigurationWorkDocsConfiguration.
        :param crawl_comments: The crawl_comments of this DataSourceConfigurationWorkDocsConfiguration.
        :param use_change_log: The use_change_log of this DataSourceConfigurationWorkDocsConfiguration.
        :param inclusion_patterns: The inclusion_patterns of this DataSourceConfigurationWorkDocsConfiguration.
        :param exclusion_patterns: The exclusion_patterns of this DataSourceConfigurationWorkDocsConfiguration.
        :param field_mappings: The field_mappings of this DataSourceConfigurationWorkDocsConfiguration.
        """
        self.openapi_types = {
            'organization_id': str,
            'crawl_comments': bool,
            'use_change_log': bool,
            'inclusion_patterns': List,
            'exclusion_patterns': List,
            'field_mappings': List
        }

        self.attribute_map = {
            'organization_id': 'OrganizationId',
            'crawl_comments': 'CrawlComments',
            'use_change_log': 'UseChangeLog',
            'inclusion_patterns': 'InclusionPatterns',
            'exclusion_patterns': 'ExclusionPatterns',
            'field_mappings': 'FieldMappings'
        }

        self._organization_id = organization_id
        self._crawl_comments = crawl_comments
        self._use_change_log = use_change_log
        self._inclusion_patterns = inclusion_patterns
        self._exclusion_patterns = exclusion_patterns
        self._field_mappings = field_mappings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataSourceConfigurationWorkDocsConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataSourceConfiguration_WorkDocsConfiguration of this DataSourceConfigurationWorkDocsConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def organization_id(self):
        """Gets the organization_id of this DataSourceConfigurationWorkDocsConfiguration.


        :return: The organization_id of this DataSourceConfigurationWorkDocsConfiguration.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this DataSourceConfigurationWorkDocsConfiguration.


        :param organization_id: The organization_id of this DataSourceConfigurationWorkDocsConfiguration.
        :type organization_id: str
        """
        if organization_id is None:
            raise ValueError("Invalid value for `organization_id`, must not be `None`")

        self._organization_id = organization_id

    @property
    def crawl_comments(self):
        """Gets the crawl_comments of this DataSourceConfigurationWorkDocsConfiguration.


        :return: The crawl_comments of this DataSourceConfigurationWorkDocsConfiguration.
        :rtype: bool
        """
        return self._crawl_comments

    @crawl_comments.setter
    def crawl_comments(self, crawl_comments):
        """Sets the crawl_comments of this DataSourceConfigurationWorkDocsConfiguration.


        :param crawl_comments: The crawl_comments of this DataSourceConfigurationWorkDocsConfiguration.
        :type crawl_comments: bool
        """

        self._crawl_comments = crawl_comments

    @property
    def use_change_log(self):
        """Gets the use_change_log of this DataSourceConfigurationWorkDocsConfiguration.


        :return: The use_change_log of this DataSourceConfigurationWorkDocsConfiguration.
        :rtype: bool
        """
        return self._use_change_log

    @use_change_log.setter
    def use_change_log(self, use_change_log):
        """Sets the use_change_log of this DataSourceConfigurationWorkDocsConfiguration.


        :param use_change_log: The use_change_log of this DataSourceConfigurationWorkDocsConfiguration.
        :type use_change_log: bool
        """

        self._use_change_log = use_change_log

    @property
    def inclusion_patterns(self):
        """Gets the inclusion_patterns of this DataSourceConfigurationWorkDocsConfiguration.


        :return: The inclusion_patterns of this DataSourceConfigurationWorkDocsConfiguration.
        :rtype: List
        """
        return self._inclusion_patterns

    @inclusion_patterns.setter
    def inclusion_patterns(self, inclusion_patterns):
        """Sets the inclusion_patterns of this DataSourceConfigurationWorkDocsConfiguration.


        :param inclusion_patterns: The inclusion_patterns of this DataSourceConfigurationWorkDocsConfiguration.
        :type inclusion_patterns: List
        """

        self._inclusion_patterns = inclusion_patterns

    @property
    def exclusion_patterns(self):
        """Gets the exclusion_patterns of this DataSourceConfigurationWorkDocsConfiguration.


        :return: The exclusion_patterns of this DataSourceConfigurationWorkDocsConfiguration.
        :rtype: List
        """
        return self._exclusion_patterns

    @exclusion_patterns.setter
    def exclusion_patterns(self, exclusion_patterns):
        """Sets the exclusion_patterns of this DataSourceConfigurationWorkDocsConfiguration.


        :param exclusion_patterns: The exclusion_patterns of this DataSourceConfigurationWorkDocsConfiguration.
        :type exclusion_patterns: List
        """

        self._exclusion_patterns = exclusion_patterns

    @property
    def field_mappings(self):
        """Gets the field_mappings of this DataSourceConfigurationWorkDocsConfiguration.


        :return: The field_mappings of this DataSourceConfigurationWorkDocsConfiguration.
        :rtype: List
        """
        return self._field_mappings

    @field_mappings.setter
    def field_mappings(self, field_mappings):
        """Sets the field_mappings of this DataSourceConfigurationWorkDocsConfiguration.


        :param field_mappings: The field_mappings of this DataSourceConfigurationWorkDocsConfiguration.
        :type field_mappings: List
        """

        self._field_mappings = field_mappings
