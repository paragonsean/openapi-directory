# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.key_location import KeyLocation
from openapi_server import util


class UserTokenConfigurationJwtTokenTypeConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, key_location: KeyLocation=None, url: str=None, secret_manager_arn: str=None, user_name_attribute_field: str=None, group_attribute_field: str=None, issuer: str=None, claim_regex: str=None):
        """UserTokenConfigurationJwtTokenTypeConfiguration - a model defined in OpenAPI

        :param key_location: The key_location of this UserTokenConfigurationJwtTokenTypeConfiguration.
        :param url: The url of this UserTokenConfigurationJwtTokenTypeConfiguration.
        :param secret_manager_arn: The secret_manager_arn of this UserTokenConfigurationJwtTokenTypeConfiguration.
        :param user_name_attribute_field: The user_name_attribute_field of this UserTokenConfigurationJwtTokenTypeConfiguration.
        :param group_attribute_field: The group_attribute_field of this UserTokenConfigurationJwtTokenTypeConfiguration.
        :param issuer: The issuer of this UserTokenConfigurationJwtTokenTypeConfiguration.
        :param claim_regex: The claim_regex of this UserTokenConfigurationJwtTokenTypeConfiguration.
        """
        self.openapi_types = {
            'key_location': KeyLocation,
            'url': str,
            'secret_manager_arn': str,
            'user_name_attribute_field': str,
            'group_attribute_field': str,
            'issuer': str,
            'claim_regex': str
        }

        self.attribute_map = {
            'key_location': 'KeyLocation',
            'url': 'URL',
            'secret_manager_arn': 'SecretManagerArn',
            'user_name_attribute_field': 'UserNameAttributeField',
            'group_attribute_field': 'GroupAttributeField',
            'issuer': 'Issuer',
            'claim_regex': 'ClaimRegex'
        }

        self._key_location = key_location
        self._url = url
        self._secret_manager_arn = secret_manager_arn
        self._user_name_attribute_field = user_name_attribute_field
        self._group_attribute_field = group_attribute_field
        self._issuer = issuer
        self._claim_regex = claim_regex

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserTokenConfigurationJwtTokenTypeConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserTokenConfiguration_JwtTokenTypeConfiguration of this UserTokenConfigurationJwtTokenTypeConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key_location(self):
        """Gets the key_location of this UserTokenConfigurationJwtTokenTypeConfiguration.


        :return: The key_location of this UserTokenConfigurationJwtTokenTypeConfiguration.
        :rtype: KeyLocation
        """
        return self._key_location

    @key_location.setter
    def key_location(self, key_location):
        """Sets the key_location of this UserTokenConfigurationJwtTokenTypeConfiguration.


        :param key_location: The key_location of this UserTokenConfigurationJwtTokenTypeConfiguration.
        :type key_location: KeyLocation
        """
        if key_location is None:
            raise ValueError("Invalid value for `key_location`, must not be `None`")

        self._key_location = key_location

    @property
    def url(self):
        """Gets the url of this UserTokenConfigurationJwtTokenTypeConfiguration.


        :return: The url of this UserTokenConfigurationJwtTokenTypeConfiguration.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this UserTokenConfigurationJwtTokenTypeConfiguration.


        :param url: The url of this UserTokenConfigurationJwtTokenTypeConfiguration.
        :type url: str
        """

        self._url = url

    @property
    def secret_manager_arn(self):
        """Gets the secret_manager_arn of this UserTokenConfigurationJwtTokenTypeConfiguration.


        :return: The secret_manager_arn of this UserTokenConfigurationJwtTokenTypeConfiguration.
        :rtype: str
        """
        return self._secret_manager_arn

    @secret_manager_arn.setter
    def secret_manager_arn(self, secret_manager_arn):
        """Sets the secret_manager_arn of this UserTokenConfigurationJwtTokenTypeConfiguration.


        :param secret_manager_arn: The secret_manager_arn of this UserTokenConfigurationJwtTokenTypeConfiguration.
        :type secret_manager_arn: str
        """

        self._secret_manager_arn = secret_manager_arn

    @property
    def user_name_attribute_field(self):
        """Gets the user_name_attribute_field of this UserTokenConfigurationJwtTokenTypeConfiguration.


        :return: The user_name_attribute_field of this UserTokenConfigurationJwtTokenTypeConfiguration.
        :rtype: str
        """
        return self._user_name_attribute_field

    @user_name_attribute_field.setter
    def user_name_attribute_field(self, user_name_attribute_field):
        """Sets the user_name_attribute_field of this UserTokenConfigurationJwtTokenTypeConfiguration.


        :param user_name_attribute_field: The user_name_attribute_field of this UserTokenConfigurationJwtTokenTypeConfiguration.
        :type user_name_attribute_field: str
        """

        self._user_name_attribute_field = user_name_attribute_field

    @property
    def group_attribute_field(self):
        """Gets the group_attribute_field of this UserTokenConfigurationJwtTokenTypeConfiguration.


        :return: The group_attribute_field of this UserTokenConfigurationJwtTokenTypeConfiguration.
        :rtype: str
        """
        return self._group_attribute_field

    @group_attribute_field.setter
    def group_attribute_field(self, group_attribute_field):
        """Sets the group_attribute_field of this UserTokenConfigurationJwtTokenTypeConfiguration.


        :param group_attribute_field: The group_attribute_field of this UserTokenConfigurationJwtTokenTypeConfiguration.
        :type group_attribute_field: str
        """

        self._group_attribute_field = group_attribute_field

    @property
    def issuer(self):
        """Gets the issuer of this UserTokenConfigurationJwtTokenTypeConfiguration.


        :return: The issuer of this UserTokenConfigurationJwtTokenTypeConfiguration.
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this UserTokenConfigurationJwtTokenTypeConfiguration.


        :param issuer: The issuer of this UserTokenConfigurationJwtTokenTypeConfiguration.
        :type issuer: str
        """

        self._issuer = issuer

    @property
    def claim_regex(self):
        """Gets the claim_regex of this UserTokenConfigurationJwtTokenTypeConfiguration.


        :return: The claim_regex of this UserTokenConfigurationJwtTokenTypeConfiguration.
        :rtype: str
        """
        return self._claim_regex

    @claim_regex.setter
    def claim_regex(self, claim_regex):
        """Sets the claim_regex of this UserTokenConfigurationJwtTokenTypeConfiguration.


        :param claim_regex: The claim_regex of this UserTokenConfigurationJwtTokenTypeConfiguration.
        :type claim_regex: str
        """

        self._claim_regex = claim_regex
