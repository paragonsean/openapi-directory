# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UserTokenConfigurationJsonTokenTypeConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user_name_attribute_field: str=None, group_attribute_field: str=None):
        """UserTokenConfigurationJsonTokenTypeConfiguration - a model defined in OpenAPI

        :param user_name_attribute_field: The user_name_attribute_field of this UserTokenConfigurationJsonTokenTypeConfiguration.
        :param group_attribute_field: The group_attribute_field of this UserTokenConfigurationJsonTokenTypeConfiguration.
        """
        self.openapi_types = {
            'user_name_attribute_field': str,
            'group_attribute_field': str
        }

        self.attribute_map = {
            'user_name_attribute_field': 'UserNameAttributeField',
            'group_attribute_field': 'GroupAttributeField'
        }

        self._user_name_attribute_field = user_name_attribute_field
        self._group_attribute_field = group_attribute_field

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserTokenConfigurationJsonTokenTypeConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserTokenConfiguration_JsonTokenTypeConfiguration of this UserTokenConfigurationJsonTokenTypeConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_name_attribute_field(self):
        """Gets the user_name_attribute_field of this UserTokenConfigurationJsonTokenTypeConfiguration.


        :return: The user_name_attribute_field of this UserTokenConfigurationJsonTokenTypeConfiguration.
        :rtype: str
        """
        return self._user_name_attribute_field

    @user_name_attribute_field.setter
    def user_name_attribute_field(self, user_name_attribute_field):
        """Sets the user_name_attribute_field of this UserTokenConfigurationJsonTokenTypeConfiguration.


        :param user_name_attribute_field: The user_name_attribute_field of this UserTokenConfigurationJsonTokenTypeConfiguration.
        :type user_name_attribute_field: str
        """
        if user_name_attribute_field is None:
            raise ValueError("Invalid value for `user_name_attribute_field`, must not be `None`")

        self._user_name_attribute_field = user_name_attribute_field

    @property
    def group_attribute_field(self):
        """Gets the group_attribute_field of this UserTokenConfigurationJsonTokenTypeConfiguration.


        :return: The group_attribute_field of this UserTokenConfigurationJsonTokenTypeConfiguration.
        :rtype: str
        """
        return self._group_attribute_field

    @group_attribute_field.setter
    def group_attribute_field(self, group_attribute_field):
        """Sets the group_attribute_field of this UserTokenConfigurationJsonTokenTypeConfiguration.


        :param group_attribute_field: The group_attribute_field of this UserTokenConfigurationJsonTokenTypeConfiguration.
        :type group_attribute_field: str
        """
        if group_attribute_field is None:
            raise ValueError("Invalid value for `group_attribute_field`, must not be `None`")

        self._group_attribute_field = group_attribute_field
