# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.fsx_configuration_vpc_configuration import FsxConfigurationVpcConfiguration
from openapi_server.models.fsx_file_system_type import FsxFileSystemType
from openapi_server import util


class FsxConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, file_system_id: str=None, file_system_type: FsxFileSystemType=None, vpc_configuration: FsxConfigurationVpcConfiguration=None, secret_arn: str=None, inclusion_patterns: List=None, exclusion_patterns: List=None, field_mappings: List=None):
        """FsxConfiguration - a model defined in OpenAPI

        :param file_system_id: The file_system_id of this FsxConfiguration.
        :param file_system_type: The file_system_type of this FsxConfiguration.
        :param vpc_configuration: The vpc_configuration of this FsxConfiguration.
        :param secret_arn: The secret_arn of this FsxConfiguration.
        :param inclusion_patterns: The inclusion_patterns of this FsxConfiguration.
        :param exclusion_patterns: The exclusion_patterns of this FsxConfiguration.
        :param field_mappings: The field_mappings of this FsxConfiguration.
        """
        self.openapi_types = {
            'file_system_id': str,
            'file_system_type': FsxFileSystemType,
            'vpc_configuration': FsxConfigurationVpcConfiguration,
            'secret_arn': str,
            'inclusion_patterns': List,
            'exclusion_patterns': List,
            'field_mappings': List
        }

        self.attribute_map = {
            'file_system_id': 'FileSystemId',
            'file_system_type': 'FileSystemType',
            'vpc_configuration': 'VpcConfiguration',
            'secret_arn': 'SecretArn',
            'inclusion_patterns': 'InclusionPatterns',
            'exclusion_patterns': 'ExclusionPatterns',
            'field_mappings': 'FieldMappings'
        }

        self._file_system_id = file_system_id
        self._file_system_type = file_system_type
        self._vpc_configuration = vpc_configuration
        self._secret_arn = secret_arn
        self._inclusion_patterns = inclusion_patterns
        self._exclusion_patterns = exclusion_patterns
        self._field_mappings = field_mappings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FsxConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FsxConfiguration of this FsxConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file_system_id(self):
        """Gets the file_system_id of this FsxConfiguration.


        :return: The file_system_id of this FsxConfiguration.
        :rtype: str
        """
        return self._file_system_id

    @file_system_id.setter
    def file_system_id(self, file_system_id):
        """Sets the file_system_id of this FsxConfiguration.


        :param file_system_id: The file_system_id of this FsxConfiguration.
        :type file_system_id: str
        """
        if file_system_id is None:
            raise ValueError("Invalid value for `file_system_id`, must not be `None`")

        self._file_system_id = file_system_id

    @property
    def file_system_type(self):
        """Gets the file_system_type of this FsxConfiguration.


        :return: The file_system_type of this FsxConfiguration.
        :rtype: FsxFileSystemType
        """
        return self._file_system_type

    @file_system_type.setter
    def file_system_type(self, file_system_type):
        """Sets the file_system_type of this FsxConfiguration.


        :param file_system_type: The file_system_type of this FsxConfiguration.
        :type file_system_type: FsxFileSystemType
        """
        if file_system_type is None:
            raise ValueError("Invalid value for `file_system_type`, must not be `None`")

        self._file_system_type = file_system_type

    @property
    def vpc_configuration(self):
        """Gets the vpc_configuration of this FsxConfiguration.


        :return: The vpc_configuration of this FsxConfiguration.
        :rtype: FsxConfigurationVpcConfiguration
        """
        return self._vpc_configuration

    @vpc_configuration.setter
    def vpc_configuration(self, vpc_configuration):
        """Sets the vpc_configuration of this FsxConfiguration.


        :param vpc_configuration: The vpc_configuration of this FsxConfiguration.
        :type vpc_configuration: FsxConfigurationVpcConfiguration
        """
        if vpc_configuration is None:
            raise ValueError("Invalid value for `vpc_configuration`, must not be `None`")

        self._vpc_configuration = vpc_configuration

    @property
    def secret_arn(self):
        """Gets the secret_arn of this FsxConfiguration.


        :return: The secret_arn of this FsxConfiguration.
        :rtype: str
        """
        return self._secret_arn

    @secret_arn.setter
    def secret_arn(self, secret_arn):
        """Sets the secret_arn of this FsxConfiguration.


        :param secret_arn: The secret_arn of this FsxConfiguration.
        :type secret_arn: str
        """

        self._secret_arn = secret_arn

    @property
    def inclusion_patterns(self):
        """Gets the inclusion_patterns of this FsxConfiguration.


        :return: The inclusion_patterns of this FsxConfiguration.
        :rtype: List
        """
        return self._inclusion_patterns

    @inclusion_patterns.setter
    def inclusion_patterns(self, inclusion_patterns):
        """Sets the inclusion_patterns of this FsxConfiguration.


        :param inclusion_patterns: The inclusion_patterns of this FsxConfiguration.
        :type inclusion_patterns: List
        """

        self._inclusion_patterns = inclusion_patterns

    @property
    def exclusion_patterns(self):
        """Gets the exclusion_patterns of this FsxConfiguration.


        :return: The exclusion_patterns of this FsxConfiguration.
        :rtype: List
        """
        return self._exclusion_patterns

    @exclusion_patterns.setter
    def exclusion_patterns(self, exclusion_patterns):
        """Sets the exclusion_patterns of this FsxConfiguration.


        :param exclusion_patterns: The exclusion_patterns of this FsxConfiguration.
        :type exclusion_patterns: List
        """

        self._exclusion_patterns = exclusion_patterns

    @property
    def field_mappings(self):
        """Gets the field_mappings of this FsxConfiguration.


        :return: The field_mappings of this FsxConfiguration.
        :rtype: List
        """
        return self._field_mappings

    @field_mappings.setter
    def field_mappings(self, field_mappings):
        """Sets the field_mappings of this FsxConfiguration.


        :param field_mappings: The field_mappings of this FsxConfiguration.
        :type field_mappings: List
        """

        self._field_mappings = field_mappings
