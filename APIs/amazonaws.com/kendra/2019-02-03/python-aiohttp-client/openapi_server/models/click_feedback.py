# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ClickFeedback(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, result_id: str=None, click_time: datetime=None):
        """ClickFeedback - a model defined in OpenAPI

        :param result_id: The result_id of this ClickFeedback.
        :param click_time: The click_time of this ClickFeedback.
        """
        self.openapi_types = {
            'result_id': str,
            'click_time': datetime
        }

        self.attribute_map = {
            'result_id': 'ResultId',
            'click_time': 'ClickTime'
        }

        self._result_id = result_id
        self._click_time = click_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClickFeedback':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClickFeedback of this ClickFeedback.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def result_id(self):
        """Gets the result_id of this ClickFeedback.


        :return: The result_id of this ClickFeedback.
        :rtype: str
        """
        return self._result_id

    @result_id.setter
    def result_id(self, result_id):
        """Sets the result_id of this ClickFeedback.


        :param result_id: The result_id of this ClickFeedback.
        :type result_id: str
        """
        if result_id is None:
            raise ValueError("Invalid value for `result_id`, must not be `None`")

        self._result_id = result_id

    @property
    def click_time(self):
        """Gets the click_time of this ClickFeedback.


        :return: The click_time of this ClickFeedback.
        :rtype: datetime
        """
        return self._click_time

    @click_time.setter
    def click_time(self, click_time):
        """Sets the click_time of this ClickFeedback.


        :param click_time: The click_time of this ClickFeedback.
        :type click_time: datetime
        """
        if click_time is None:
            raise ValueError("Invalid value for `click_time`, must not be `None`")

        self._click_time = click_time
