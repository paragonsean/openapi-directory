# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_source_vpc_configuration import DataSourceVpcConfiguration
from openapi_server.models.database_configuration_acl_configuration import DatabaseConfigurationAclConfiguration
from openapi_server.models.database_configuration_column_configuration import DatabaseConfigurationColumnConfiguration
from openapi_server.models.database_configuration_connection_configuration import DatabaseConfigurationConnectionConfiguration
from openapi_server.models.database_configuration_sql_configuration import DatabaseConfigurationSqlConfiguration
from openapi_server.models.database_engine_type import DatabaseEngineType
from openapi_server import util


class DataSourceConfigurationDatabaseConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, database_engine_type: DatabaseEngineType=None, connection_configuration: DatabaseConfigurationConnectionConfiguration=None, vpc_configuration: DataSourceVpcConfiguration=None, column_configuration: DatabaseConfigurationColumnConfiguration=None, acl_configuration: DatabaseConfigurationAclConfiguration=None, sql_configuration: DatabaseConfigurationSqlConfiguration=None):
        """DataSourceConfigurationDatabaseConfiguration - a model defined in OpenAPI

        :param database_engine_type: The database_engine_type of this DataSourceConfigurationDatabaseConfiguration.
        :param connection_configuration: The connection_configuration of this DataSourceConfigurationDatabaseConfiguration.
        :param vpc_configuration: The vpc_configuration of this DataSourceConfigurationDatabaseConfiguration.
        :param column_configuration: The column_configuration of this DataSourceConfigurationDatabaseConfiguration.
        :param acl_configuration: The acl_configuration of this DataSourceConfigurationDatabaseConfiguration.
        :param sql_configuration: The sql_configuration of this DataSourceConfigurationDatabaseConfiguration.
        """
        self.openapi_types = {
            'database_engine_type': DatabaseEngineType,
            'connection_configuration': DatabaseConfigurationConnectionConfiguration,
            'vpc_configuration': DataSourceVpcConfiguration,
            'column_configuration': DatabaseConfigurationColumnConfiguration,
            'acl_configuration': DatabaseConfigurationAclConfiguration,
            'sql_configuration': DatabaseConfigurationSqlConfiguration
        }

        self.attribute_map = {
            'database_engine_type': 'DatabaseEngineType',
            'connection_configuration': 'ConnectionConfiguration',
            'vpc_configuration': 'VpcConfiguration',
            'column_configuration': 'ColumnConfiguration',
            'acl_configuration': 'AclConfiguration',
            'sql_configuration': 'SqlConfiguration'
        }

        self._database_engine_type = database_engine_type
        self._connection_configuration = connection_configuration
        self._vpc_configuration = vpc_configuration
        self._column_configuration = column_configuration
        self._acl_configuration = acl_configuration
        self._sql_configuration = sql_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataSourceConfigurationDatabaseConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataSourceConfiguration_DatabaseConfiguration of this DataSourceConfigurationDatabaseConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def database_engine_type(self):
        """Gets the database_engine_type of this DataSourceConfigurationDatabaseConfiguration.


        :return: The database_engine_type of this DataSourceConfigurationDatabaseConfiguration.
        :rtype: DatabaseEngineType
        """
        return self._database_engine_type

    @database_engine_type.setter
    def database_engine_type(self, database_engine_type):
        """Sets the database_engine_type of this DataSourceConfigurationDatabaseConfiguration.


        :param database_engine_type: The database_engine_type of this DataSourceConfigurationDatabaseConfiguration.
        :type database_engine_type: DatabaseEngineType
        """
        if database_engine_type is None:
            raise ValueError("Invalid value for `database_engine_type`, must not be `None`")

        self._database_engine_type = database_engine_type

    @property
    def connection_configuration(self):
        """Gets the connection_configuration of this DataSourceConfigurationDatabaseConfiguration.


        :return: The connection_configuration of this DataSourceConfigurationDatabaseConfiguration.
        :rtype: DatabaseConfigurationConnectionConfiguration
        """
        return self._connection_configuration

    @connection_configuration.setter
    def connection_configuration(self, connection_configuration):
        """Sets the connection_configuration of this DataSourceConfigurationDatabaseConfiguration.


        :param connection_configuration: The connection_configuration of this DataSourceConfigurationDatabaseConfiguration.
        :type connection_configuration: DatabaseConfigurationConnectionConfiguration
        """
        if connection_configuration is None:
            raise ValueError("Invalid value for `connection_configuration`, must not be `None`")

        self._connection_configuration = connection_configuration

    @property
    def vpc_configuration(self):
        """Gets the vpc_configuration of this DataSourceConfigurationDatabaseConfiguration.


        :return: The vpc_configuration of this DataSourceConfigurationDatabaseConfiguration.
        :rtype: DataSourceVpcConfiguration
        """
        return self._vpc_configuration

    @vpc_configuration.setter
    def vpc_configuration(self, vpc_configuration):
        """Sets the vpc_configuration of this DataSourceConfigurationDatabaseConfiguration.


        :param vpc_configuration: The vpc_configuration of this DataSourceConfigurationDatabaseConfiguration.
        :type vpc_configuration: DataSourceVpcConfiguration
        """

        self._vpc_configuration = vpc_configuration

    @property
    def column_configuration(self):
        """Gets the column_configuration of this DataSourceConfigurationDatabaseConfiguration.


        :return: The column_configuration of this DataSourceConfigurationDatabaseConfiguration.
        :rtype: DatabaseConfigurationColumnConfiguration
        """
        return self._column_configuration

    @column_configuration.setter
    def column_configuration(self, column_configuration):
        """Sets the column_configuration of this DataSourceConfigurationDatabaseConfiguration.


        :param column_configuration: The column_configuration of this DataSourceConfigurationDatabaseConfiguration.
        :type column_configuration: DatabaseConfigurationColumnConfiguration
        """
        if column_configuration is None:
            raise ValueError("Invalid value for `column_configuration`, must not be `None`")

        self._column_configuration = column_configuration

    @property
    def acl_configuration(self):
        """Gets the acl_configuration of this DataSourceConfigurationDatabaseConfiguration.


        :return: The acl_configuration of this DataSourceConfigurationDatabaseConfiguration.
        :rtype: DatabaseConfigurationAclConfiguration
        """
        return self._acl_configuration

    @acl_configuration.setter
    def acl_configuration(self, acl_configuration):
        """Sets the acl_configuration of this DataSourceConfigurationDatabaseConfiguration.


        :param acl_configuration: The acl_configuration of this DataSourceConfigurationDatabaseConfiguration.
        :type acl_configuration: DatabaseConfigurationAclConfiguration
        """

        self._acl_configuration = acl_configuration

    @property
    def sql_configuration(self):
        """Gets the sql_configuration of this DataSourceConfigurationDatabaseConfiguration.


        :return: The sql_configuration of this DataSourceConfigurationDatabaseConfiguration.
        :rtype: DatabaseConfigurationSqlConfiguration
        """
        return self._sql_configuration

    @sql_configuration.setter
    def sql_configuration(self, sql_configuration):
        """Sets the sql_configuration of this DataSourceConfigurationDatabaseConfiguration.


        :param sql_configuration: The sql_configuration of this DataSourceConfigurationDatabaseConfiguration.
        :type sql_configuration: DatabaseConfigurationSqlConfiguration
        """

        self._sql_configuration = sql_configuration
