# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.index_edition import IndexEdition
from openapi_server.models.index_status import IndexStatus
from openapi_server import util


class IndexConfigurationSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, id: str=None, edition: IndexEdition=None, created_at: datetime=None, updated_at: datetime=None, status: IndexStatus=None):
        """IndexConfigurationSummary - a model defined in OpenAPI

        :param name: The name of this IndexConfigurationSummary.
        :param id: The id of this IndexConfigurationSummary.
        :param edition: The edition of this IndexConfigurationSummary.
        :param created_at: The created_at of this IndexConfigurationSummary.
        :param updated_at: The updated_at of this IndexConfigurationSummary.
        :param status: The status of this IndexConfigurationSummary.
        """
        self.openapi_types = {
            'name': str,
            'id': str,
            'edition': IndexEdition,
            'created_at': datetime,
            'updated_at': datetime,
            'status': IndexStatus
        }

        self.attribute_map = {
            'name': 'Name',
            'id': 'Id',
            'edition': 'Edition',
            'created_at': 'CreatedAt',
            'updated_at': 'UpdatedAt',
            'status': 'Status'
        }

        self._name = name
        self._id = id
        self._edition = edition
        self._created_at = created_at
        self._updated_at = updated_at
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IndexConfigurationSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IndexConfigurationSummary of this IndexConfigurationSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this IndexConfigurationSummary.


        :return: The name of this IndexConfigurationSummary.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IndexConfigurationSummary.


        :param name: The name of this IndexConfigurationSummary.
        :type name: str
        """

        self._name = name

    @property
    def id(self):
        """Gets the id of this IndexConfigurationSummary.


        :return: The id of this IndexConfigurationSummary.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IndexConfigurationSummary.


        :param id: The id of this IndexConfigurationSummary.
        :type id: str
        """

        self._id = id

    @property
    def edition(self):
        """Gets the edition of this IndexConfigurationSummary.


        :return: The edition of this IndexConfigurationSummary.
        :rtype: IndexEdition
        """
        return self._edition

    @edition.setter
    def edition(self, edition):
        """Sets the edition of this IndexConfigurationSummary.


        :param edition: The edition of this IndexConfigurationSummary.
        :type edition: IndexEdition
        """

        self._edition = edition

    @property
    def created_at(self):
        """Gets the created_at of this IndexConfigurationSummary.


        :return: The created_at of this IndexConfigurationSummary.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this IndexConfigurationSummary.


        :param created_at: The created_at of this IndexConfigurationSummary.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this IndexConfigurationSummary.


        :return: The updated_at of this IndexConfigurationSummary.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this IndexConfigurationSummary.


        :param updated_at: The updated_at of this IndexConfigurationSummary.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at

    @property
    def status(self):
        """Gets the status of this IndexConfigurationSummary.


        :return: The status of this IndexConfigurationSummary.
        :rtype: IndexStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this IndexConfigurationSummary.


        :param status: The status of this IndexConfigurationSummary.
        :type status: IndexStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
