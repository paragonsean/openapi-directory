# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.documents_metadata_configuration import DocumentsMetadataConfiguration
from openapi_server.models.s3_data_source_configuration_access_control_list_configuration import S3DataSourceConfigurationAccessControlListConfiguration
from openapi_server import util


class S3DataSourceConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bucket_name: str=None, inclusion_prefixes: List=None, inclusion_patterns: List=None, exclusion_patterns: List=None, documents_metadata_configuration: DocumentsMetadataConfiguration=None, access_control_list_configuration: S3DataSourceConfigurationAccessControlListConfiguration=None):
        """S3DataSourceConfiguration - a model defined in OpenAPI

        :param bucket_name: The bucket_name of this S3DataSourceConfiguration.
        :param inclusion_prefixes: The inclusion_prefixes of this S3DataSourceConfiguration.
        :param inclusion_patterns: The inclusion_patterns of this S3DataSourceConfiguration.
        :param exclusion_patterns: The exclusion_patterns of this S3DataSourceConfiguration.
        :param documents_metadata_configuration: The documents_metadata_configuration of this S3DataSourceConfiguration.
        :param access_control_list_configuration: The access_control_list_configuration of this S3DataSourceConfiguration.
        """
        self.openapi_types = {
            'bucket_name': str,
            'inclusion_prefixes': List,
            'inclusion_patterns': List,
            'exclusion_patterns': List,
            'documents_metadata_configuration': DocumentsMetadataConfiguration,
            'access_control_list_configuration': S3DataSourceConfigurationAccessControlListConfiguration
        }

        self.attribute_map = {
            'bucket_name': 'BucketName',
            'inclusion_prefixes': 'InclusionPrefixes',
            'inclusion_patterns': 'InclusionPatterns',
            'exclusion_patterns': 'ExclusionPatterns',
            'documents_metadata_configuration': 'DocumentsMetadataConfiguration',
            'access_control_list_configuration': 'AccessControlListConfiguration'
        }

        self._bucket_name = bucket_name
        self._inclusion_prefixes = inclusion_prefixes
        self._inclusion_patterns = inclusion_patterns
        self._exclusion_patterns = exclusion_patterns
        self._documents_metadata_configuration = documents_metadata_configuration
        self._access_control_list_configuration = access_control_list_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'S3DataSourceConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The S3DataSourceConfiguration of this S3DataSourceConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bucket_name(self):
        """Gets the bucket_name of this S3DataSourceConfiguration.


        :return: The bucket_name of this S3DataSourceConfiguration.
        :rtype: str
        """
        return self._bucket_name

    @bucket_name.setter
    def bucket_name(self, bucket_name):
        """Sets the bucket_name of this S3DataSourceConfiguration.


        :param bucket_name: The bucket_name of this S3DataSourceConfiguration.
        :type bucket_name: str
        """
        if bucket_name is None:
            raise ValueError("Invalid value for `bucket_name`, must not be `None`")

        self._bucket_name = bucket_name

    @property
    def inclusion_prefixes(self):
        """Gets the inclusion_prefixes of this S3DataSourceConfiguration.


        :return: The inclusion_prefixes of this S3DataSourceConfiguration.
        :rtype: List
        """
        return self._inclusion_prefixes

    @inclusion_prefixes.setter
    def inclusion_prefixes(self, inclusion_prefixes):
        """Sets the inclusion_prefixes of this S3DataSourceConfiguration.


        :param inclusion_prefixes: The inclusion_prefixes of this S3DataSourceConfiguration.
        :type inclusion_prefixes: List
        """

        self._inclusion_prefixes = inclusion_prefixes

    @property
    def inclusion_patterns(self):
        """Gets the inclusion_patterns of this S3DataSourceConfiguration.


        :return: The inclusion_patterns of this S3DataSourceConfiguration.
        :rtype: List
        """
        return self._inclusion_patterns

    @inclusion_patterns.setter
    def inclusion_patterns(self, inclusion_patterns):
        """Sets the inclusion_patterns of this S3DataSourceConfiguration.


        :param inclusion_patterns: The inclusion_patterns of this S3DataSourceConfiguration.
        :type inclusion_patterns: List
        """

        self._inclusion_patterns = inclusion_patterns

    @property
    def exclusion_patterns(self):
        """Gets the exclusion_patterns of this S3DataSourceConfiguration.


        :return: The exclusion_patterns of this S3DataSourceConfiguration.
        :rtype: List
        """
        return self._exclusion_patterns

    @exclusion_patterns.setter
    def exclusion_patterns(self, exclusion_patterns):
        """Sets the exclusion_patterns of this S3DataSourceConfiguration.


        :param exclusion_patterns: The exclusion_patterns of this S3DataSourceConfiguration.
        :type exclusion_patterns: List
        """

        self._exclusion_patterns = exclusion_patterns

    @property
    def documents_metadata_configuration(self):
        """Gets the documents_metadata_configuration of this S3DataSourceConfiguration.


        :return: The documents_metadata_configuration of this S3DataSourceConfiguration.
        :rtype: DocumentsMetadataConfiguration
        """
        return self._documents_metadata_configuration

    @documents_metadata_configuration.setter
    def documents_metadata_configuration(self, documents_metadata_configuration):
        """Sets the documents_metadata_configuration of this S3DataSourceConfiguration.


        :param documents_metadata_configuration: The documents_metadata_configuration of this S3DataSourceConfiguration.
        :type documents_metadata_configuration: DocumentsMetadataConfiguration
        """

        self._documents_metadata_configuration = documents_metadata_configuration

    @property
    def access_control_list_configuration(self):
        """Gets the access_control_list_configuration of this S3DataSourceConfiguration.


        :return: The access_control_list_configuration of this S3DataSourceConfiguration.
        :rtype: S3DataSourceConfigurationAccessControlListConfiguration
        """
        return self._access_control_list_configuration

    @access_control_list_configuration.setter
    def access_control_list_configuration(self, access_control_list_configuration):
        """Sets the access_control_list_configuration of this S3DataSourceConfiguration.


        :param access_control_list_configuration: The access_control_list_configuration of this S3DataSourceConfiguration.
        :type access_control_list_configuration: S3DataSourceConfigurationAccessControlListConfiguration
        """

        self._access_control_list_configuration = access_control_list_configuration
