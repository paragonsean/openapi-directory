# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.mode import Mode
from openapi_server.models.update_query_suggestions_config_request_attribute_suggestions_config import UpdateQuerySuggestionsConfigRequestAttributeSuggestionsConfig
from openapi_server import util


class UpdateQuerySuggestionsConfigRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, index_id: str=None, mode: Mode=None, query_log_look_back_window_in_days: int=None, include_queries_without_user_information: bool=None, minimum_number_of_querying_users: int=None, minimum_query_count: int=None, attribute_suggestions_config: UpdateQuerySuggestionsConfigRequestAttributeSuggestionsConfig=None):
        """UpdateQuerySuggestionsConfigRequest - a model defined in OpenAPI

        :param index_id: The index_id of this UpdateQuerySuggestionsConfigRequest.
        :param mode: The mode of this UpdateQuerySuggestionsConfigRequest.
        :param query_log_look_back_window_in_days: The query_log_look_back_window_in_days of this UpdateQuerySuggestionsConfigRequest.
        :param include_queries_without_user_information: The include_queries_without_user_information of this UpdateQuerySuggestionsConfigRequest.
        :param minimum_number_of_querying_users: The minimum_number_of_querying_users of this UpdateQuerySuggestionsConfigRequest.
        :param minimum_query_count: The minimum_query_count of this UpdateQuerySuggestionsConfigRequest.
        :param attribute_suggestions_config: The attribute_suggestions_config of this UpdateQuerySuggestionsConfigRequest.
        """
        self.openapi_types = {
            'index_id': str,
            'mode': Mode,
            'query_log_look_back_window_in_days': int,
            'include_queries_without_user_information': bool,
            'minimum_number_of_querying_users': int,
            'minimum_query_count': int,
            'attribute_suggestions_config': UpdateQuerySuggestionsConfigRequestAttributeSuggestionsConfig
        }

        self.attribute_map = {
            'index_id': 'IndexId',
            'mode': 'Mode',
            'query_log_look_back_window_in_days': 'QueryLogLookBackWindowInDays',
            'include_queries_without_user_information': 'IncludeQueriesWithoutUserInformation',
            'minimum_number_of_querying_users': 'MinimumNumberOfQueryingUsers',
            'minimum_query_count': 'MinimumQueryCount',
            'attribute_suggestions_config': 'AttributeSuggestionsConfig'
        }

        self._index_id = index_id
        self._mode = mode
        self._query_log_look_back_window_in_days = query_log_look_back_window_in_days
        self._include_queries_without_user_information = include_queries_without_user_information
        self._minimum_number_of_querying_users = minimum_number_of_querying_users
        self._minimum_query_count = minimum_query_count
        self._attribute_suggestions_config = attribute_suggestions_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateQuerySuggestionsConfigRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateQuerySuggestionsConfigRequest of this UpdateQuerySuggestionsConfigRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def index_id(self):
        """Gets the index_id of this UpdateQuerySuggestionsConfigRequest.


        :return: The index_id of this UpdateQuerySuggestionsConfigRequest.
        :rtype: str
        """
        return self._index_id

    @index_id.setter
    def index_id(self, index_id):
        """Sets the index_id of this UpdateQuerySuggestionsConfigRequest.


        :param index_id: The index_id of this UpdateQuerySuggestionsConfigRequest.
        :type index_id: str
        """
        if index_id is None:
            raise ValueError("Invalid value for `index_id`, must not be `None`")

        self._index_id = index_id

    @property
    def mode(self):
        """Gets the mode of this UpdateQuerySuggestionsConfigRequest.


        :return: The mode of this UpdateQuerySuggestionsConfigRequest.
        :rtype: Mode
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this UpdateQuerySuggestionsConfigRequest.


        :param mode: The mode of this UpdateQuerySuggestionsConfigRequest.
        :type mode: Mode
        """

        self._mode = mode

    @property
    def query_log_look_back_window_in_days(self):
        """Gets the query_log_look_back_window_in_days of this UpdateQuerySuggestionsConfigRequest.


        :return: The query_log_look_back_window_in_days of this UpdateQuerySuggestionsConfigRequest.
        :rtype: int
        """
        return self._query_log_look_back_window_in_days

    @query_log_look_back_window_in_days.setter
    def query_log_look_back_window_in_days(self, query_log_look_back_window_in_days):
        """Sets the query_log_look_back_window_in_days of this UpdateQuerySuggestionsConfigRequest.


        :param query_log_look_back_window_in_days: The query_log_look_back_window_in_days of this UpdateQuerySuggestionsConfigRequest.
        :type query_log_look_back_window_in_days: int
        """

        self._query_log_look_back_window_in_days = query_log_look_back_window_in_days

    @property
    def include_queries_without_user_information(self):
        """Gets the include_queries_without_user_information of this UpdateQuerySuggestionsConfigRequest.


        :return: The include_queries_without_user_information of this UpdateQuerySuggestionsConfigRequest.
        :rtype: bool
        """
        return self._include_queries_without_user_information

    @include_queries_without_user_information.setter
    def include_queries_without_user_information(self, include_queries_without_user_information):
        """Sets the include_queries_without_user_information of this UpdateQuerySuggestionsConfigRequest.


        :param include_queries_without_user_information: The include_queries_without_user_information of this UpdateQuerySuggestionsConfigRequest.
        :type include_queries_without_user_information: bool
        """

        self._include_queries_without_user_information = include_queries_without_user_information

    @property
    def minimum_number_of_querying_users(self):
        """Gets the minimum_number_of_querying_users of this UpdateQuerySuggestionsConfigRequest.


        :return: The minimum_number_of_querying_users of this UpdateQuerySuggestionsConfigRequest.
        :rtype: int
        """
        return self._minimum_number_of_querying_users

    @minimum_number_of_querying_users.setter
    def minimum_number_of_querying_users(self, minimum_number_of_querying_users):
        """Sets the minimum_number_of_querying_users of this UpdateQuerySuggestionsConfigRequest.


        :param minimum_number_of_querying_users: The minimum_number_of_querying_users of this UpdateQuerySuggestionsConfigRequest.
        :type minimum_number_of_querying_users: int
        """

        self._minimum_number_of_querying_users = minimum_number_of_querying_users

    @property
    def minimum_query_count(self):
        """Gets the minimum_query_count of this UpdateQuerySuggestionsConfigRequest.


        :return: The minimum_query_count of this UpdateQuerySuggestionsConfigRequest.
        :rtype: int
        """
        return self._minimum_query_count

    @minimum_query_count.setter
    def minimum_query_count(self, minimum_query_count):
        """Sets the minimum_query_count of this UpdateQuerySuggestionsConfigRequest.


        :param minimum_query_count: The minimum_query_count of this UpdateQuerySuggestionsConfigRequest.
        :type minimum_query_count: int
        """

        self._minimum_query_count = minimum_query_count

    @property
    def attribute_suggestions_config(self):
        """Gets the attribute_suggestions_config of this UpdateQuerySuggestionsConfigRequest.


        :return: The attribute_suggestions_config of this UpdateQuerySuggestionsConfigRequest.
        :rtype: UpdateQuerySuggestionsConfigRequestAttributeSuggestionsConfig
        """
        return self._attribute_suggestions_config

    @attribute_suggestions_config.setter
    def attribute_suggestions_config(self, attribute_suggestions_config):
        """Sets the attribute_suggestions_config of this UpdateQuerySuggestionsConfigRequest.


        :param attribute_suggestions_config: The attribute_suggestions_config of this UpdateQuerySuggestionsConfigRequest.
        :type attribute_suggestions_config: UpdateQuerySuggestionsConfigRequestAttributeSuggestionsConfig
        """

        self._attribute_suggestions_config = attribute_suggestions_config
