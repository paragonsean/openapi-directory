# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.experience_configuration_content_source_configuration import ExperienceConfigurationContentSourceConfiguration
from openapi_server.models.experience_configuration_user_identity_configuration import ExperienceConfigurationUserIdentityConfiguration
from openapi_server import util


class ExperienceConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content_source_configuration: ExperienceConfigurationContentSourceConfiguration=None, user_identity_configuration: ExperienceConfigurationUserIdentityConfiguration=None):
        """ExperienceConfiguration - a model defined in OpenAPI

        :param content_source_configuration: The content_source_configuration of this ExperienceConfiguration.
        :param user_identity_configuration: The user_identity_configuration of this ExperienceConfiguration.
        """
        self.openapi_types = {
            'content_source_configuration': ExperienceConfigurationContentSourceConfiguration,
            'user_identity_configuration': ExperienceConfigurationUserIdentityConfiguration
        }

        self.attribute_map = {
            'content_source_configuration': 'ContentSourceConfiguration',
            'user_identity_configuration': 'UserIdentityConfiguration'
        }

        self._content_source_configuration = content_source_configuration
        self._user_identity_configuration = user_identity_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExperienceConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExperienceConfiguration of this ExperienceConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content_source_configuration(self):
        """Gets the content_source_configuration of this ExperienceConfiguration.


        :return: The content_source_configuration of this ExperienceConfiguration.
        :rtype: ExperienceConfigurationContentSourceConfiguration
        """
        return self._content_source_configuration

    @content_source_configuration.setter
    def content_source_configuration(self, content_source_configuration):
        """Sets the content_source_configuration of this ExperienceConfiguration.


        :param content_source_configuration: The content_source_configuration of this ExperienceConfiguration.
        :type content_source_configuration: ExperienceConfigurationContentSourceConfiguration
        """

        self._content_source_configuration = content_source_configuration

    @property
    def user_identity_configuration(self):
        """Gets the user_identity_configuration of this ExperienceConfiguration.


        :return: The user_identity_configuration of this ExperienceConfiguration.
        :rtype: ExperienceConfigurationUserIdentityConfiguration
        """
        return self._user_identity_configuration

    @user_identity_configuration.setter
    def user_identity_configuration(self, user_identity_configuration):
        """Sets the user_identity_configuration of this ExperienceConfiguration.


        :param user_identity_configuration: The user_identity_configuration of this ExperienceConfiguration.
        :type user_identity_configuration: ExperienceConfigurationUserIdentityConfiguration
        """

        self._user_identity_configuration = user_identity_configuration
