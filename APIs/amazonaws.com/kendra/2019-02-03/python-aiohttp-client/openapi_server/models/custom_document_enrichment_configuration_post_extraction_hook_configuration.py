# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.hook_configuration_invocation_condition import HookConfigurationInvocationCondition
from openapi_server import util


class CustomDocumentEnrichmentConfigurationPostExtractionHookConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, invocation_condition: HookConfigurationInvocationCondition=None, lambda_arn: str=None, s3_bucket: str=None):
        """CustomDocumentEnrichmentConfigurationPostExtractionHookConfiguration - a model defined in OpenAPI

        :param invocation_condition: The invocation_condition of this CustomDocumentEnrichmentConfigurationPostExtractionHookConfiguration.
        :param lambda_arn: The lambda_arn of this CustomDocumentEnrichmentConfigurationPostExtractionHookConfiguration.
        :param s3_bucket: The s3_bucket of this CustomDocumentEnrichmentConfigurationPostExtractionHookConfiguration.
        """
        self.openapi_types = {
            'invocation_condition': HookConfigurationInvocationCondition,
            'lambda_arn': str,
            's3_bucket': str
        }

        self.attribute_map = {
            'invocation_condition': 'InvocationCondition',
            'lambda_arn': 'LambdaArn',
            's3_bucket': 'S3Bucket'
        }

        self._invocation_condition = invocation_condition
        self._lambda_arn = lambda_arn
        self._s3_bucket = s3_bucket

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomDocumentEnrichmentConfigurationPostExtractionHookConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomDocumentEnrichmentConfiguration_PostExtractionHookConfiguration of this CustomDocumentEnrichmentConfigurationPostExtractionHookConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def invocation_condition(self):
        """Gets the invocation_condition of this CustomDocumentEnrichmentConfigurationPostExtractionHookConfiguration.


        :return: The invocation_condition of this CustomDocumentEnrichmentConfigurationPostExtractionHookConfiguration.
        :rtype: HookConfigurationInvocationCondition
        """
        return self._invocation_condition

    @invocation_condition.setter
    def invocation_condition(self, invocation_condition):
        """Sets the invocation_condition of this CustomDocumentEnrichmentConfigurationPostExtractionHookConfiguration.


        :param invocation_condition: The invocation_condition of this CustomDocumentEnrichmentConfigurationPostExtractionHookConfiguration.
        :type invocation_condition: HookConfigurationInvocationCondition
        """

        self._invocation_condition = invocation_condition

    @property
    def lambda_arn(self):
        """Gets the lambda_arn of this CustomDocumentEnrichmentConfigurationPostExtractionHookConfiguration.


        :return: The lambda_arn of this CustomDocumentEnrichmentConfigurationPostExtractionHookConfiguration.
        :rtype: str
        """
        return self._lambda_arn

    @lambda_arn.setter
    def lambda_arn(self, lambda_arn):
        """Sets the lambda_arn of this CustomDocumentEnrichmentConfigurationPostExtractionHookConfiguration.


        :param lambda_arn: The lambda_arn of this CustomDocumentEnrichmentConfigurationPostExtractionHookConfiguration.
        :type lambda_arn: str
        """
        if lambda_arn is None:
            raise ValueError("Invalid value for `lambda_arn`, must not be `None`")

        self._lambda_arn = lambda_arn

    @property
    def s3_bucket(self):
        """Gets the s3_bucket of this CustomDocumentEnrichmentConfigurationPostExtractionHookConfiguration.


        :return: The s3_bucket of this CustomDocumentEnrichmentConfigurationPostExtractionHookConfiguration.
        :rtype: str
        """
        return self._s3_bucket

    @s3_bucket.setter
    def s3_bucket(self, s3_bucket):
        """Sets the s3_bucket of this CustomDocumentEnrichmentConfigurationPostExtractionHookConfiguration.


        :param s3_bucket: The s3_bucket of this CustomDocumentEnrichmentConfigurationPostExtractionHookConfiguration.
        :type s3_bucket: str
        """
        if s3_bucket is None:
            raise ValueError("Invalid value for `s3_bucket`, must not be `None`")

        self._s3_bucket = s3_bucket
