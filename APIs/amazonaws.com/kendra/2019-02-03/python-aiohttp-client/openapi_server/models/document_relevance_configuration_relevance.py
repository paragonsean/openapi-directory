# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.order import Order
from openapi_server import util


class DocumentRelevanceConfigurationRelevance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, freshness: bool=None, importance: int=None, duration: str=None, rank_order: Order=None, value_importance_map: Dict=None):
        """DocumentRelevanceConfigurationRelevance - a model defined in OpenAPI

        :param freshness: The freshness of this DocumentRelevanceConfigurationRelevance.
        :param importance: The importance of this DocumentRelevanceConfigurationRelevance.
        :param duration: The duration of this DocumentRelevanceConfigurationRelevance.
        :param rank_order: The rank_order of this DocumentRelevanceConfigurationRelevance.
        :param value_importance_map: The value_importance_map of this DocumentRelevanceConfigurationRelevance.
        """
        self.openapi_types = {
            'freshness': bool,
            'importance': int,
            'duration': str,
            'rank_order': Order,
            'value_importance_map': Dict
        }

        self.attribute_map = {
            'freshness': 'Freshness',
            'importance': 'Importance',
            'duration': 'Duration',
            'rank_order': 'RankOrder',
            'value_importance_map': 'ValueImportanceMap'
        }

        self._freshness = freshness
        self._importance = importance
        self._duration = duration
        self._rank_order = rank_order
        self._value_importance_map = value_importance_map

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DocumentRelevanceConfigurationRelevance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DocumentRelevanceConfiguration_Relevance of this DocumentRelevanceConfigurationRelevance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def freshness(self):
        """Gets the freshness of this DocumentRelevanceConfigurationRelevance.


        :return: The freshness of this DocumentRelevanceConfigurationRelevance.
        :rtype: bool
        """
        return self._freshness

    @freshness.setter
    def freshness(self, freshness):
        """Sets the freshness of this DocumentRelevanceConfigurationRelevance.


        :param freshness: The freshness of this DocumentRelevanceConfigurationRelevance.
        :type freshness: bool
        """

        self._freshness = freshness

    @property
    def importance(self):
        """Gets the importance of this DocumentRelevanceConfigurationRelevance.


        :return: The importance of this DocumentRelevanceConfigurationRelevance.
        :rtype: int
        """
        return self._importance

    @importance.setter
    def importance(self, importance):
        """Sets the importance of this DocumentRelevanceConfigurationRelevance.


        :param importance: The importance of this DocumentRelevanceConfigurationRelevance.
        :type importance: int
        """

        self._importance = importance

    @property
    def duration(self):
        """Gets the duration of this DocumentRelevanceConfigurationRelevance.


        :return: The duration of this DocumentRelevanceConfigurationRelevance.
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this DocumentRelevanceConfigurationRelevance.


        :param duration: The duration of this DocumentRelevanceConfigurationRelevance.
        :type duration: str
        """

        self._duration = duration

    @property
    def rank_order(self):
        """Gets the rank_order of this DocumentRelevanceConfigurationRelevance.


        :return: The rank_order of this DocumentRelevanceConfigurationRelevance.
        :rtype: Order
        """
        return self._rank_order

    @rank_order.setter
    def rank_order(self, rank_order):
        """Sets the rank_order of this DocumentRelevanceConfigurationRelevance.


        :param rank_order: The rank_order of this DocumentRelevanceConfigurationRelevance.
        :type rank_order: Order
        """

        self._rank_order = rank_order

    @property
    def value_importance_map(self):
        """Gets the value_importance_map of this DocumentRelevanceConfigurationRelevance.


        :return: The value_importance_map of this DocumentRelevanceConfigurationRelevance.
        :rtype: Dict
        """
        return self._value_importance_map

    @value_importance_map.setter
    def value_importance_map(self, value_importance_map):
        """Sets the value_importance_map of this DocumentRelevanceConfigurationRelevance.


        :param value_importance_map: The value_importance_map of this DocumentRelevanceConfigurationRelevance.
        :type value_importance_map: Dict
        """

        self._value_importance_map = value_importance_map
