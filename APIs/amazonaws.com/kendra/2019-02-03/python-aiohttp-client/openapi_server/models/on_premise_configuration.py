# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.on_premise_configuration_ssl_certificate_s3_path import OnPremiseConfigurationSslCertificateS3Path
from openapi_server import util


class OnPremiseConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, host_url: str=None, organization_name: str=None, ssl_certificate_s3_path: OnPremiseConfigurationSslCertificateS3Path=None):
        """OnPremiseConfiguration - a model defined in OpenAPI

        :param host_url: The host_url of this OnPremiseConfiguration.
        :param organization_name: The organization_name of this OnPremiseConfiguration.
        :param ssl_certificate_s3_path: The ssl_certificate_s3_path of this OnPremiseConfiguration.
        """
        self.openapi_types = {
            'host_url': str,
            'organization_name': str,
            'ssl_certificate_s3_path': OnPremiseConfigurationSslCertificateS3Path
        }

        self.attribute_map = {
            'host_url': 'HostUrl',
            'organization_name': 'OrganizationName',
            'ssl_certificate_s3_path': 'SslCertificateS3Path'
        }

        self._host_url = host_url
        self._organization_name = organization_name
        self._ssl_certificate_s3_path = ssl_certificate_s3_path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OnPremiseConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OnPremiseConfiguration of this OnPremiseConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def host_url(self):
        """Gets the host_url of this OnPremiseConfiguration.


        :return: The host_url of this OnPremiseConfiguration.
        :rtype: str
        """
        return self._host_url

    @host_url.setter
    def host_url(self, host_url):
        """Sets the host_url of this OnPremiseConfiguration.


        :param host_url: The host_url of this OnPremiseConfiguration.
        :type host_url: str
        """
        if host_url is None:
            raise ValueError("Invalid value for `host_url`, must not be `None`")

        self._host_url = host_url

    @property
    def organization_name(self):
        """Gets the organization_name of this OnPremiseConfiguration.


        :return: The organization_name of this OnPremiseConfiguration.
        :rtype: str
        """
        return self._organization_name

    @organization_name.setter
    def organization_name(self, organization_name):
        """Sets the organization_name of this OnPremiseConfiguration.


        :param organization_name: The organization_name of this OnPremiseConfiguration.
        :type organization_name: str
        """
        if organization_name is None:
            raise ValueError("Invalid value for `organization_name`, must not be `None`")

        self._organization_name = organization_name

    @property
    def ssl_certificate_s3_path(self):
        """Gets the ssl_certificate_s3_path of this OnPremiseConfiguration.


        :return: The ssl_certificate_s3_path of this OnPremiseConfiguration.
        :rtype: OnPremiseConfigurationSslCertificateS3Path
        """
        return self._ssl_certificate_s3_path

    @ssl_certificate_s3_path.setter
    def ssl_certificate_s3_path(self, ssl_certificate_s3_path):
        """Sets the ssl_certificate_s3_path of this OnPremiseConfiguration.


        :param ssl_certificate_s3_path: The ssl_certificate_s3_path of this OnPremiseConfiguration.
        :type ssl_certificate_s3_path: OnPremiseConfigurationSslCertificateS3Path
        """
        if ssl_certificate_s3_path is None:
            raise ValueError("Invalid value for `ssl_certificate_s3_path`, must not be `None`")

        self._ssl_certificate_s3_path = ssl_certificate_s3_path
