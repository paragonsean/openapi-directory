# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.relevance_type import RelevanceType
from openapi_server import util


class RelevanceFeedback(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, result_id: str=None, relevance_value: RelevanceType=None):
        """RelevanceFeedback - a model defined in OpenAPI

        :param result_id: The result_id of this RelevanceFeedback.
        :param relevance_value: The relevance_value of this RelevanceFeedback.
        """
        self.openapi_types = {
            'result_id': str,
            'relevance_value': RelevanceType
        }

        self.attribute_map = {
            'result_id': 'ResultId',
            'relevance_value': 'RelevanceValue'
        }

        self._result_id = result_id
        self._relevance_value = relevance_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RelevanceFeedback':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RelevanceFeedback of this RelevanceFeedback.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def result_id(self):
        """Gets the result_id of this RelevanceFeedback.


        :return: The result_id of this RelevanceFeedback.
        :rtype: str
        """
        return self._result_id

    @result_id.setter
    def result_id(self, result_id):
        """Sets the result_id of this RelevanceFeedback.


        :param result_id: The result_id of this RelevanceFeedback.
        :type result_id: str
        """
        if result_id is None:
            raise ValueError("Invalid value for `result_id`, must not be `None`")

        self._result_id = result_id

    @property
    def relevance_value(self):
        """Gets the relevance_value of this RelevanceFeedback.


        :return: The relevance_value of this RelevanceFeedback.
        :rtype: RelevanceType
        """
        return self._relevance_value

    @relevance_value.setter
    def relevance_value(self, relevance_value):
        """Sets the relevance_value of this RelevanceFeedback.


        :param relevance_value: The relevance_value of this RelevanceFeedback.
        :type relevance_value: RelevanceType
        """
        if relevance_value is None:
            raise ValueError("Invalid value for `relevance_value`, must not be `None`")

        self._relevance_value = relevance_value
