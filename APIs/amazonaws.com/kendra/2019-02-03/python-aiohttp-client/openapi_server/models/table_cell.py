# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TableCell(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, value: str=None, top_answer: bool=None, highlighted: bool=None, header: bool=None):
        """TableCell - a model defined in OpenAPI

        :param value: The value of this TableCell.
        :param top_answer: The top_answer of this TableCell.
        :param highlighted: The highlighted of this TableCell.
        :param header: The header of this TableCell.
        """
        self.openapi_types = {
            'value': str,
            'top_answer': bool,
            'highlighted': bool,
            'header': bool
        }

        self.attribute_map = {
            'value': 'Value',
            'top_answer': 'TopAnswer',
            'highlighted': 'Highlighted',
            'header': 'Header'
        }

        self._value = value
        self._top_answer = top_answer
        self._highlighted = highlighted
        self._header = header

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TableCell':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TableCell of this TableCell.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def value(self):
        """Gets the value of this TableCell.


        :return: The value of this TableCell.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this TableCell.


        :param value: The value of this TableCell.
        :type value: str
        """

        self._value = value

    @property
    def top_answer(self):
        """Gets the top_answer of this TableCell.


        :return: The top_answer of this TableCell.
        :rtype: bool
        """
        return self._top_answer

    @top_answer.setter
    def top_answer(self, top_answer):
        """Sets the top_answer of this TableCell.


        :param top_answer: The top_answer of this TableCell.
        :type top_answer: bool
        """

        self._top_answer = top_answer

    @property
    def highlighted(self):
        """Gets the highlighted of this TableCell.


        :return: The highlighted of this TableCell.
        :rtype: bool
        """
        return self._highlighted

    @highlighted.setter
    def highlighted(self, highlighted):
        """Sets the highlighted of this TableCell.


        :param highlighted: The highlighted of this TableCell.
        :type highlighted: bool
        """

        self._highlighted = highlighted

    @property
    def header(self):
        """Gets the header of this TableCell.


        :return: The header of this TableCell.
        :rtype: bool
        """
        return self._header

    @header.setter
    def header(self, header):
        """Sets the header of this TableCell.


        :param header: The header of this TableCell.
        :type header: bool
        """

        self._header = header
