# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.document_attribute_value_count_pair_document_attribute_value import DocumentAttributeValueCountPairDocumentAttributeValue
from openapi_server import util


class DocumentAttributeValueCountPair(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, document_attribute_value: DocumentAttributeValueCountPairDocumentAttributeValue=None, count: int=None, facet_results: List=None):
        """DocumentAttributeValueCountPair - a model defined in OpenAPI

        :param document_attribute_value: The document_attribute_value of this DocumentAttributeValueCountPair.
        :param count: The count of this DocumentAttributeValueCountPair.
        :param facet_results: The facet_results of this DocumentAttributeValueCountPair.
        """
        self.openapi_types = {
            'document_attribute_value': DocumentAttributeValueCountPairDocumentAttributeValue,
            'count': int,
            'facet_results': List
        }

        self.attribute_map = {
            'document_attribute_value': 'DocumentAttributeValue',
            'count': 'Count',
            'facet_results': 'FacetResults'
        }

        self._document_attribute_value = document_attribute_value
        self._count = count
        self._facet_results = facet_results

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DocumentAttributeValueCountPair':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DocumentAttributeValueCountPair of this DocumentAttributeValueCountPair.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def document_attribute_value(self):
        """Gets the document_attribute_value of this DocumentAttributeValueCountPair.


        :return: The document_attribute_value of this DocumentAttributeValueCountPair.
        :rtype: DocumentAttributeValueCountPairDocumentAttributeValue
        """
        return self._document_attribute_value

    @document_attribute_value.setter
    def document_attribute_value(self, document_attribute_value):
        """Sets the document_attribute_value of this DocumentAttributeValueCountPair.


        :param document_attribute_value: The document_attribute_value of this DocumentAttributeValueCountPair.
        :type document_attribute_value: DocumentAttributeValueCountPairDocumentAttributeValue
        """

        self._document_attribute_value = document_attribute_value

    @property
    def count(self):
        """Gets the count of this DocumentAttributeValueCountPair.


        :return: The count of this DocumentAttributeValueCountPair.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this DocumentAttributeValueCountPair.


        :param count: The count of this DocumentAttributeValueCountPair.
        :type count: int
        """

        self._count = count

    @property
    def facet_results(self):
        """Gets the facet_results of this DocumentAttributeValueCountPair.


        :return: The facet_results of this DocumentAttributeValueCountPair.
        :rtype: List
        """
        return self._facet_results

    @facet_results.setter
    def facet_results(self, facet_results):
        """Sets the facet_results of this DocumentAttributeValueCountPair.


        :param facet_results: The facet_results of this DocumentAttributeValueCountPair.
        :type facet_results: List
        """

        self._facet_results = facet_results
