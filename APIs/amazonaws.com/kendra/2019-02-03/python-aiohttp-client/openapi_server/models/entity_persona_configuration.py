# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.persona import Persona
from openapi_server import util


class EntityPersonaConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, entity_id: str=None, persona: Persona=None):
        """EntityPersonaConfiguration - a model defined in OpenAPI

        :param entity_id: The entity_id of this EntityPersonaConfiguration.
        :param persona: The persona of this EntityPersonaConfiguration.
        """
        self.openapi_types = {
            'entity_id': str,
            'persona': Persona
        }

        self.attribute_map = {
            'entity_id': 'EntityId',
            'persona': 'Persona'
        }

        self._entity_id = entity_id
        self._persona = persona

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EntityPersonaConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EntityPersonaConfiguration of this EntityPersonaConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entity_id(self):
        """Gets the entity_id of this EntityPersonaConfiguration.


        :return: The entity_id of this EntityPersonaConfiguration.
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this EntityPersonaConfiguration.


        :param entity_id: The entity_id of this EntityPersonaConfiguration.
        :type entity_id: str
        """
        if entity_id is None:
            raise ValueError("Invalid value for `entity_id`, must not be `None`")

        self._entity_id = entity_id

    @property
    def persona(self):
        """Gets the persona of this EntityPersonaConfiguration.


        :return: The persona of this EntityPersonaConfiguration.
        :rtype: Persona
        """
        return self._persona

    @persona.setter
    def persona(self, persona):
        """Sets the persona of this EntityPersonaConfiguration.


        :param persona: The persona of this EntityPersonaConfiguration.
        :type persona: Persona
        """
        if persona is None:
            raise ValueError("Invalid value for `persona`, must not be `None`")

        self._persona = persona
