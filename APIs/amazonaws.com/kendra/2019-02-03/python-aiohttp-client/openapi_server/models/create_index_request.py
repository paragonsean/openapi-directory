# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_index_request_server_side_encryption_configuration import CreateIndexRequestServerSideEncryptionConfiguration
from openapi_server.models.create_index_request_user_group_resolution_configuration import CreateIndexRequestUserGroupResolutionConfiguration
from openapi_server.models.index_edition import IndexEdition
from openapi_server.models.user_context_policy import UserContextPolicy
from openapi_server import util


class CreateIndexRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, edition: IndexEdition=None, role_arn: str=None, server_side_encryption_configuration: CreateIndexRequestServerSideEncryptionConfiguration=None, description: str=None, client_token: str=None, tags: List=None, user_token_configurations: List=None, user_context_policy: UserContextPolicy=None, user_group_resolution_configuration: CreateIndexRequestUserGroupResolutionConfiguration=None):
        """CreateIndexRequest - a model defined in OpenAPI

        :param name: The name of this CreateIndexRequest.
        :param edition: The edition of this CreateIndexRequest.
        :param role_arn: The role_arn of this CreateIndexRequest.
        :param server_side_encryption_configuration: The server_side_encryption_configuration of this CreateIndexRequest.
        :param description: The description of this CreateIndexRequest.
        :param client_token: The client_token of this CreateIndexRequest.
        :param tags: The tags of this CreateIndexRequest.
        :param user_token_configurations: The user_token_configurations of this CreateIndexRequest.
        :param user_context_policy: The user_context_policy of this CreateIndexRequest.
        :param user_group_resolution_configuration: The user_group_resolution_configuration of this CreateIndexRequest.
        """
        self.openapi_types = {
            'name': str,
            'edition': IndexEdition,
            'role_arn': str,
            'server_side_encryption_configuration': CreateIndexRequestServerSideEncryptionConfiguration,
            'description': str,
            'client_token': str,
            'tags': List,
            'user_token_configurations': List,
            'user_context_policy': UserContextPolicy,
            'user_group_resolution_configuration': CreateIndexRequestUserGroupResolutionConfiguration
        }

        self.attribute_map = {
            'name': 'Name',
            'edition': 'Edition',
            'role_arn': 'RoleArn',
            'server_side_encryption_configuration': 'ServerSideEncryptionConfiguration',
            'description': 'Description',
            'client_token': 'ClientToken',
            'tags': 'Tags',
            'user_token_configurations': 'UserTokenConfigurations',
            'user_context_policy': 'UserContextPolicy',
            'user_group_resolution_configuration': 'UserGroupResolutionConfiguration'
        }

        self._name = name
        self._edition = edition
        self._role_arn = role_arn
        self._server_side_encryption_configuration = server_side_encryption_configuration
        self._description = description
        self._client_token = client_token
        self._tags = tags
        self._user_token_configurations = user_token_configurations
        self._user_context_policy = user_context_policy
        self._user_group_resolution_configuration = user_group_resolution_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateIndexRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateIndexRequest of this CreateIndexRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateIndexRequest.


        :return: The name of this CreateIndexRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateIndexRequest.


        :param name: The name of this CreateIndexRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def edition(self):
        """Gets the edition of this CreateIndexRequest.


        :return: The edition of this CreateIndexRequest.
        :rtype: IndexEdition
        """
        return self._edition

    @edition.setter
    def edition(self, edition):
        """Sets the edition of this CreateIndexRequest.


        :param edition: The edition of this CreateIndexRequest.
        :type edition: IndexEdition
        """

        self._edition = edition

    @property
    def role_arn(self):
        """Gets the role_arn of this CreateIndexRequest.


        :return: The role_arn of this CreateIndexRequest.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this CreateIndexRequest.


        :param role_arn: The role_arn of this CreateIndexRequest.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")

        self._role_arn = role_arn

    @property
    def server_side_encryption_configuration(self):
        """Gets the server_side_encryption_configuration of this CreateIndexRequest.


        :return: The server_side_encryption_configuration of this CreateIndexRequest.
        :rtype: CreateIndexRequestServerSideEncryptionConfiguration
        """
        return self._server_side_encryption_configuration

    @server_side_encryption_configuration.setter
    def server_side_encryption_configuration(self, server_side_encryption_configuration):
        """Sets the server_side_encryption_configuration of this CreateIndexRequest.


        :param server_side_encryption_configuration: The server_side_encryption_configuration of this CreateIndexRequest.
        :type server_side_encryption_configuration: CreateIndexRequestServerSideEncryptionConfiguration
        """

        self._server_side_encryption_configuration = server_side_encryption_configuration

    @property
    def description(self):
        """Gets the description of this CreateIndexRequest.


        :return: The description of this CreateIndexRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateIndexRequest.


        :param description: The description of this CreateIndexRequest.
        :type description: str
        """

        self._description = description

    @property
    def client_token(self):
        """Gets the client_token of this CreateIndexRequest.


        :return: The client_token of this CreateIndexRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateIndexRequest.


        :param client_token: The client_token of this CreateIndexRequest.
        :type client_token: str
        """

        self._client_token = client_token

    @property
    def tags(self):
        """Gets the tags of this CreateIndexRequest.


        :return: The tags of this CreateIndexRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateIndexRequest.


        :param tags: The tags of this CreateIndexRequest.
        :type tags: List
        """

        self._tags = tags

    @property
    def user_token_configurations(self):
        """Gets the user_token_configurations of this CreateIndexRequest.


        :return: The user_token_configurations of this CreateIndexRequest.
        :rtype: List
        """
        return self._user_token_configurations

    @user_token_configurations.setter
    def user_token_configurations(self, user_token_configurations):
        """Sets the user_token_configurations of this CreateIndexRequest.


        :param user_token_configurations: The user_token_configurations of this CreateIndexRequest.
        :type user_token_configurations: List
        """

        self._user_token_configurations = user_token_configurations

    @property
    def user_context_policy(self):
        """Gets the user_context_policy of this CreateIndexRequest.


        :return: The user_context_policy of this CreateIndexRequest.
        :rtype: UserContextPolicy
        """
        return self._user_context_policy

    @user_context_policy.setter
    def user_context_policy(self, user_context_policy):
        """Sets the user_context_policy of this CreateIndexRequest.


        :param user_context_policy: The user_context_policy of this CreateIndexRequest.
        :type user_context_policy: UserContextPolicy
        """

        self._user_context_policy = user_context_policy

    @property
    def user_group_resolution_configuration(self):
        """Gets the user_group_resolution_configuration of this CreateIndexRequest.


        :return: The user_group_resolution_configuration of this CreateIndexRequest.
        :rtype: CreateIndexRequestUserGroupResolutionConfiguration
        """
        return self._user_group_resolution_configuration

    @user_group_resolution_configuration.setter
    def user_group_resolution_configuration(self, user_group_resolution_configuration):
        """Sets the user_group_resolution_configuration of this CreateIndexRequest.


        :param user_group_resolution_configuration: The user_group_resolution_configuration of this CreateIndexRequest.
        :type user_group_resolution_configuration: CreateIndexRequestUserGroupResolutionConfiguration
        """

        self._user_group_resolution_configuration = user_group_resolution_configuration
