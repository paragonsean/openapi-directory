# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_query_suggestions_request_attribute_suggestions_config import GetQuerySuggestionsRequestAttributeSuggestionsConfig
from openapi_server import util


class GetQuerySuggestionsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, index_id: str=None, query_text: str=None, max_suggestions_count: int=None, suggestion_types: List=None, attribute_suggestions_config: GetQuerySuggestionsRequestAttributeSuggestionsConfig=None):
        """GetQuerySuggestionsRequest - a model defined in OpenAPI

        :param index_id: The index_id of this GetQuerySuggestionsRequest.
        :param query_text: The query_text of this GetQuerySuggestionsRequest.
        :param max_suggestions_count: The max_suggestions_count of this GetQuerySuggestionsRequest.
        :param suggestion_types: The suggestion_types of this GetQuerySuggestionsRequest.
        :param attribute_suggestions_config: The attribute_suggestions_config of this GetQuerySuggestionsRequest.
        """
        self.openapi_types = {
            'index_id': str,
            'query_text': str,
            'max_suggestions_count': int,
            'suggestion_types': List,
            'attribute_suggestions_config': GetQuerySuggestionsRequestAttributeSuggestionsConfig
        }

        self.attribute_map = {
            'index_id': 'IndexId',
            'query_text': 'QueryText',
            'max_suggestions_count': 'MaxSuggestionsCount',
            'suggestion_types': 'SuggestionTypes',
            'attribute_suggestions_config': 'AttributeSuggestionsConfig'
        }

        self._index_id = index_id
        self._query_text = query_text
        self._max_suggestions_count = max_suggestions_count
        self._suggestion_types = suggestion_types
        self._attribute_suggestions_config = attribute_suggestions_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetQuerySuggestionsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetQuerySuggestionsRequest of this GetQuerySuggestionsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def index_id(self):
        """Gets the index_id of this GetQuerySuggestionsRequest.


        :return: The index_id of this GetQuerySuggestionsRequest.
        :rtype: str
        """
        return self._index_id

    @index_id.setter
    def index_id(self, index_id):
        """Sets the index_id of this GetQuerySuggestionsRequest.


        :param index_id: The index_id of this GetQuerySuggestionsRequest.
        :type index_id: str
        """
        if index_id is None:
            raise ValueError("Invalid value for `index_id`, must not be `None`")

        self._index_id = index_id

    @property
    def query_text(self):
        """Gets the query_text of this GetQuerySuggestionsRequest.


        :return: The query_text of this GetQuerySuggestionsRequest.
        :rtype: str
        """
        return self._query_text

    @query_text.setter
    def query_text(self, query_text):
        """Sets the query_text of this GetQuerySuggestionsRequest.


        :param query_text: The query_text of this GetQuerySuggestionsRequest.
        :type query_text: str
        """
        if query_text is None:
            raise ValueError("Invalid value for `query_text`, must not be `None`")

        self._query_text = query_text

    @property
    def max_suggestions_count(self):
        """Gets the max_suggestions_count of this GetQuerySuggestionsRequest.


        :return: The max_suggestions_count of this GetQuerySuggestionsRequest.
        :rtype: int
        """
        return self._max_suggestions_count

    @max_suggestions_count.setter
    def max_suggestions_count(self, max_suggestions_count):
        """Sets the max_suggestions_count of this GetQuerySuggestionsRequest.


        :param max_suggestions_count: The max_suggestions_count of this GetQuerySuggestionsRequest.
        :type max_suggestions_count: int
        """

        self._max_suggestions_count = max_suggestions_count

    @property
    def suggestion_types(self):
        """Gets the suggestion_types of this GetQuerySuggestionsRequest.


        :return: The suggestion_types of this GetQuerySuggestionsRequest.
        :rtype: List
        """
        return self._suggestion_types

    @suggestion_types.setter
    def suggestion_types(self, suggestion_types):
        """Sets the suggestion_types of this GetQuerySuggestionsRequest.


        :param suggestion_types: The suggestion_types of this GetQuerySuggestionsRequest.
        :type suggestion_types: List
        """

        self._suggestion_types = suggestion_types

    @property
    def attribute_suggestions_config(self):
        """Gets the attribute_suggestions_config of this GetQuerySuggestionsRequest.


        :return: The attribute_suggestions_config of this GetQuerySuggestionsRequest.
        :rtype: GetQuerySuggestionsRequestAttributeSuggestionsConfig
        """
        return self._attribute_suggestions_config

    @attribute_suggestions_config.setter
    def attribute_suggestions_config(self, attribute_suggestions_config):
        """Sets the attribute_suggestions_config of this GetQuerySuggestionsRequest.


        :param attribute_suggestions_config: The attribute_suggestions_config of this GetQuerySuggestionsRequest.
        :type attribute_suggestions_config: GetQuerySuggestionsRequestAttributeSuggestionsConfig
        """

        self._attribute_suggestions_config = attribute_suggestions_config
