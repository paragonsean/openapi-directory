/*
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AssociateEntitiesToExperienceRequest;
import org.openapitools.client.model.AssociateEntitiesToExperienceResponse;
import org.openapitools.client.model.AssociatePersonasToEntitiesRequest;
import org.openapitools.client.model.AssociatePersonasToEntitiesResponse;
import org.openapitools.client.model.BatchDeleteDocumentRequest;
import org.openapitools.client.model.BatchDeleteDocumentResponse;
import org.openapitools.client.model.BatchDeleteFeaturedResultsSetRequest;
import org.openapitools.client.model.BatchDeleteFeaturedResultsSetResponse;
import org.openapitools.client.model.BatchGetDocumentStatusRequest;
import org.openapitools.client.model.BatchGetDocumentStatusResponse;
import org.openapitools.client.model.BatchPutDocumentRequest;
import org.openapitools.client.model.BatchPutDocumentResponse;
import org.openapitools.client.model.ClearQuerySuggestionsRequest;
import org.openapitools.client.model.CreateAccessControlConfigurationRequest;
import org.openapitools.client.model.CreateAccessControlConfigurationResponse;
import org.openapitools.client.model.CreateDataSourceRequest;
import org.openapitools.client.model.CreateDataSourceResponse;
import org.openapitools.client.model.CreateExperienceRequest;
import org.openapitools.client.model.CreateExperienceResponse;
import org.openapitools.client.model.CreateFaqRequest;
import org.openapitools.client.model.CreateFaqResponse;
import org.openapitools.client.model.CreateFeaturedResultsSetRequest;
import org.openapitools.client.model.CreateFeaturedResultsSetResponse;
import org.openapitools.client.model.CreateIndexRequest;
import org.openapitools.client.model.CreateIndexResponse;
import org.openapitools.client.model.CreateQuerySuggestionsBlockListRequest;
import org.openapitools.client.model.CreateQuerySuggestionsBlockListResponse;
import org.openapitools.client.model.CreateThesaurusRequest;
import org.openapitools.client.model.CreateThesaurusResponse;
import org.openapitools.client.model.DeleteAccessControlConfigurationRequest;
import org.openapitools.client.model.DeleteDataSourceRequest;
import org.openapitools.client.model.DeleteExperienceRequest;
import org.openapitools.client.model.DeleteFaqRequest;
import org.openapitools.client.model.DeleteIndexRequest;
import org.openapitools.client.model.DeletePrincipalMappingRequest;
import org.openapitools.client.model.DeleteQuerySuggestionsBlockListRequest;
import org.openapitools.client.model.DeleteThesaurusRequest;
import org.openapitools.client.model.DescribeAccessControlConfigurationRequest;
import org.openapitools.client.model.DescribeAccessControlConfigurationResponse;
import org.openapitools.client.model.DescribeDataSourceRequest;
import org.openapitools.client.model.DescribeDataSourceResponse;
import org.openapitools.client.model.DescribeExperienceRequest;
import org.openapitools.client.model.DescribeExperienceResponse;
import org.openapitools.client.model.DescribeFaqRequest;
import org.openapitools.client.model.DescribeFaqResponse;
import org.openapitools.client.model.DescribeFeaturedResultsSetRequest;
import org.openapitools.client.model.DescribeFeaturedResultsSetResponse;
import org.openapitools.client.model.DescribeIndexRequest;
import org.openapitools.client.model.DescribeIndexResponse;
import org.openapitools.client.model.DescribePrincipalMappingRequest;
import org.openapitools.client.model.DescribePrincipalMappingResponse;
import org.openapitools.client.model.DescribeQuerySuggestionsBlockListRequest;
import org.openapitools.client.model.DescribeQuerySuggestionsBlockListResponse;
import org.openapitools.client.model.DescribeQuerySuggestionsConfigRequest;
import org.openapitools.client.model.DescribeQuerySuggestionsConfigResponse;
import org.openapitools.client.model.DescribeThesaurusRequest;
import org.openapitools.client.model.DescribeThesaurusResponse;
import org.openapitools.client.model.DisassociateEntitiesFromExperienceRequest;
import org.openapitools.client.model.DisassociateEntitiesFromExperienceResponse;
import org.openapitools.client.model.DisassociatePersonasFromEntitiesRequest;
import org.openapitools.client.model.DisassociatePersonasFromEntitiesResponse;
import org.openapitools.client.model.GetQuerySuggestionsRequest;
import org.openapitools.client.model.GetQuerySuggestionsResponse;
import org.openapitools.client.model.GetSnapshotsRequest;
import org.openapitools.client.model.GetSnapshotsResponse;
import org.openapitools.client.model.ListAccessControlConfigurationsRequest;
import org.openapitools.client.model.ListAccessControlConfigurationsResponse;
import org.openapitools.client.model.ListDataSourceSyncJobsRequest;
import org.openapitools.client.model.ListDataSourceSyncJobsResponse;
import org.openapitools.client.model.ListDataSourcesRequest;
import org.openapitools.client.model.ListDataSourcesResponse;
import org.openapitools.client.model.ListEntityPersonasRequest;
import org.openapitools.client.model.ListEntityPersonasResponse;
import org.openapitools.client.model.ListExperienceEntitiesRequest;
import org.openapitools.client.model.ListExperienceEntitiesResponse;
import org.openapitools.client.model.ListExperiencesRequest;
import org.openapitools.client.model.ListExperiencesResponse;
import org.openapitools.client.model.ListFaqsRequest;
import org.openapitools.client.model.ListFaqsResponse;
import org.openapitools.client.model.ListFeaturedResultsSetsRequest;
import org.openapitools.client.model.ListFeaturedResultsSetsResponse;
import org.openapitools.client.model.ListGroupsOlderThanOrderingIdRequest;
import org.openapitools.client.model.ListGroupsOlderThanOrderingIdResponse;
import org.openapitools.client.model.ListIndicesRequest;
import org.openapitools.client.model.ListIndicesResponse;
import org.openapitools.client.model.ListQuerySuggestionsBlockListsRequest;
import org.openapitools.client.model.ListQuerySuggestionsBlockListsResponse;
import org.openapitools.client.model.ListTagsForResourceRequest;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.ListThesauriRequest;
import org.openapitools.client.model.ListThesauriResponse;
import org.openapitools.client.model.PutPrincipalMappingRequest;
import org.openapitools.client.model.QueryRequest;
import org.openapitools.client.model.QueryResult;
import org.openapitools.client.model.RetrieveRequest;
import org.openapitools.client.model.RetrieveResult;
import org.openapitools.client.model.StartDataSourceSyncJobRequest;
import org.openapitools.client.model.StartDataSourceSyncJobResponse;
import org.openapitools.client.model.StopDataSourceSyncJobRequest;
import org.openapitools.client.model.SubmitFeedbackRequest;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UntagResourceRequest;
import org.openapitools.client.model.UpdateAccessControlConfigurationRequest;
import org.openapitools.client.model.UpdateDataSourceRequest;
import org.openapitools.client.model.UpdateExperienceRequest;
import org.openapitools.client.model.UpdateFeaturedResultsSetRequest;
import org.openapitools.client.model.UpdateFeaturedResultsSetResponse;
import org.openapitools.client.model.UpdateIndexRequest;
import org.openapitools.client.model.UpdateQuerySuggestionsBlockListRequest;
import org.openapitools.client.model.UpdateQuerySuggestionsConfigRequest;
import org.openapitools.client.model.UpdateThesaurusRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Grants users or groups in your IAM Identity Center identity source access to your Amazon Kendra experience. You can create an Amazon Kendra experience such as a search application. For more information on creating a search application experience, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html\&quot;&gt;Building a search experience with no code&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associateEntitiesToExperienceTest() throws ApiException {
        String xAmzTarget = null;
        AssociateEntitiesToExperienceRequest associateEntitiesToExperienceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AssociateEntitiesToExperienceResponse response = api.associateEntitiesToExperience(xAmzTarget, associateEntitiesToExperienceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Defines the specific permissions of users or groups in your IAM Identity Center identity source with access to your Amazon Kendra experience. You can create an Amazon Kendra experience such as a search application. For more information on creating a search application experience, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html\&quot;&gt;Building a search experience with no code&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associatePersonasToEntitiesTest() throws ApiException {
        String xAmzTarget = null;
        AssociatePersonasToEntitiesRequest associatePersonasToEntitiesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AssociatePersonasToEntitiesResponse response = api.associatePersonasToEntities(xAmzTarget, associatePersonasToEntitiesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Removes one or more documents from an index. The documents must have been added with the &lt;code&gt;BatchPutDocument&lt;/code&gt; API.&lt;/p&gt; &lt;p&gt;The documents are deleted asynchronously. You can see the progress of the deletion by using Amazon Web Services CloudWatch. Any error messages related to the processing of the batch are sent to you CloudWatch log.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchDeleteDocumentTest() throws ApiException {
        String xAmzTarget = null;
        BatchDeleteDocumentRequest batchDeleteDocumentRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchDeleteDocumentResponse response = api.batchDeleteDocument(xAmzTarget, batchDeleteDocumentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes one or more sets of featured results. Features results are placed above all other results for certain queries. If there&#39;s an exact match of a query, then one or more specific documents are featured in the search results.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchDeleteFeaturedResultsSetTest() throws ApiException {
        String xAmzTarget = null;
        BatchDeleteFeaturedResultsSetRequest batchDeleteFeaturedResultsSetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchDeleteFeaturedResultsSetResponse response = api.batchDeleteFeaturedResultsSet(xAmzTarget, batchDeleteFeaturedResultsSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns the indexing status for one or more documents submitted with the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kendra/latest/dg/API_BatchPutDocument.html\&quot;&gt; BatchPutDocument&lt;/a&gt; API.&lt;/p&gt; &lt;p&gt;When you use the &lt;code&gt;BatchPutDocument&lt;/code&gt; API, documents are indexed asynchronously. You can use the &lt;code&gt;BatchGetDocumentStatus&lt;/code&gt; API to get the current status of a list of documents so that you can determine if they have been successfully indexed.&lt;/p&gt; &lt;p&gt;You can also use the &lt;code&gt;BatchGetDocumentStatus&lt;/code&gt; API to check the status of the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kendra/latest/dg/API_BatchDeleteDocument.html\&quot;&gt; BatchDeleteDocument&lt;/a&gt; API. When a document is deleted from the index, Amazon Kendra returns &lt;code&gt;NOT_FOUND&lt;/code&gt; as the status.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchGetDocumentStatusTest() throws ApiException {
        String xAmzTarget = null;
        BatchGetDocumentStatusRequest batchGetDocumentStatusRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchGetDocumentStatusResponse response = api.batchGetDocumentStatus(xAmzTarget, batchGetDocumentStatusRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Adds one or more documents to an index.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;BatchPutDocument&lt;/code&gt; API enables you to ingest inline documents or a set of documents stored in an Amazon S3 bucket. Use this API to ingest your text and unstructured text into an index, add custom attributes to the documents, and to attach an access control list to the documents added to the index.&lt;/p&gt; &lt;p&gt;The documents are indexed asynchronously. You can see the progress of the batch using Amazon Web Services CloudWatch. Any error messages related to processing the batch are sent to your Amazon Web Services CloudWatch log.&lt;/p&gt; &lt;p&gt;For an example of ingesting inline documents using Python and Java SDKs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kendra/latest/dg/in-adding-binary-doc.html\&quot;&gt;Adding files directly to an index&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchPutDocumentTest() throws ApiException {
        String xAmzTarget = null;
        BatchPutDocumentRequest batchPutDocumentRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchPutDocumentResponse response = api.batchPutDocument(xAmzTarget, batchPutDocumentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Clears existing query suggestions from an index.&lt;/p&gt; &lt;p&gt;This deletes existing suggestions only, not the queries in the query log. After you clear suggestions, Amazon Kendra learns new suggestions based on new queries added to the query log from the time you cleared suggestions. If you do not see any new suggestions, then please allow Amazon Kendra to collect enough queries to learn new suggestions.&lt;/p&gt; &lt;p&gt; &lt;code&gt;ClearQuerySuggestions&lt;/code&gt; is currently not supported in the Amazon Web Services GovCloud (US-West) region.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clearQuerySuggestionsTest() throws ApiException {
        String xAmzTarget = null;
        ClearQuerySuggestionsRequest clearQuerySuggestionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.clearQuerySuggestions(xAmzTarget, clearQuerySuggestionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates an access configuration for your documents. This includes user and group access information for your documents. This is useful for user context filtering, where search results are filtered based on the user or their group access to documents.&lt;/p&gt; &lt;p&gt;You can use this to re-configure your existing document level access control without indexing all of your documents again. For example, your index contains top-secret company documents that only certain employees or users should access. One of these users leaves the company or switches to a team that should be blocked from accessing top-secret documents. The user still has access to top-secret documents because the user had access when your documents were previously indexed. You can create a specific access control configuration for the user with deny access. You can later update the access control configuration to allow access if the user returns to the company and re-joins the &#39;top-secret&#39; team. You can re-configure access control for your documents as circumstances change.&lt;/p&gt; &lt;p&gt;To apply your access control configuration to certain documents, you call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kendra/latest/dg/API_BatchPutDocument.html\&quot;&gt;BatchPutDocument&lt;/a&gt; API with the &lt;code&gt;AccessControlConfigurationId&lt;/code&gt; included in the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kendra/latest/dg/API_Document.html\&quot;&gt;Document&lt;/a&gt; object. If you use an S3 bucket as a data source, you update the &lt;code&gt;.metadata.json&lt;/code&gt; with the &lt;code&gt;AccessControlConfigurationId&lt;/code&gt; and synchronize your data source. Amazon Kendra currently only supports access control configuration for S3 data sources and documents indexed using the &lt;code&gt;BatchPutDocument&lt;/code&gt; API.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAccessControlConfigurationTest() throws ApiException {
        String xAmzTarget = null;
        CreateAccessControlConfigurationRequest createAccessControlConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateAccessControlConfigurationResponse response = api.createAccessControlConfiguration(xAmzTarget, createAccessControlConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a data source connector that you want to use with an Amazon Kendra index.&lt;/p&gt; &lt;p&gt;You specify a name, data source connector type and description for your data source. You also specify configuration information for the data source connector.&lt;/p&gt; &lt;p&gt; &lt;code&gt;CreateDataSource&lt;/code&gt; is a synchronous operation. The operation returns 200 if the data source was successfully created. Otherwise, an exception is raised.&lt;/p&gt; &lt;p&gt;For an example of creating an index and data source using the Python SDK, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kendra/latest/dg/gs-python.html\&quot;&gt;Getting started with Python SDK&lt;/a&gt;. For an example of creating an index and data source using the Java SDK, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kendra/latest/dg/gs-java.html\&quot;&gt;Getting started with Java SDK&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDataSourceTest() throws ApiException {
        String xAmzTarget = null;
        CreateDataSourceRequest createDataSourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateDataSourceResponse response = api.createDataSource(xAmzTarget, createDataSourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates an Amazon Kendra experience such as a search application. For more information on creating a search application experience, including using the Python and Java SDKs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html\&quot;&gt;Building a search experience with no code&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createExperienceTest() throws ApiException {
        String xAmzTarget = null;
        CreateExperienceRequest createExperienceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateExperienceResponse response = api.createExperience(xAmzTarget, createExperienceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a set of frequently ask questions (FAQs) using a specified FAQ file stored in an Amazon S3 bucket.&lt;/p&gt; &lt;p&gt;Adding FAQs to an index is an asynchronous operation.&lt;/p&gt; &lt;p&gt;For an example of adding an FAQ to an index using Python and Java SDKs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kendra/latest/dg/in-creating-faq.html#using-faq-file\&quot;&gt;Using your FAQ file&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createFaqTest() throws ApiException {
        String xAmzTarget = null;
        CreateFaqRequest createFaqRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateFaqResponse response = api.createFaq(xAmzTarget, createFaqRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a set of featured results to display at the top of the search results page. Featured results are placed above all other results for certain queries. You map specific queries to specific documents for featuring in the results. If a query contains an exact match, then one or more specific documents are featured in the search results.&lt;/p&gt; &lt;p&gt;You can create up to 50 sets of featured results per index. You can request to increase this limit by contacting &lt;a href&#x3D;\&quot;http://aws.amazon.com/contact-us/\&quot;&gt;Support&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createFeaturedResultsSetTest() throws ApiException {
        String xAmzTarget = null;
        CreateFeaturedResultsSetRequest createFeaturedResultsSetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateFeaturedResultsSetResponse response = api.createFeaturedResultsSet(xAmzTarget, createFeaturedResultsSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates an Amazon Kendra index. Index creation is an asynchronous API. To determine if index creation has completed, check the &lt;code&gt;Status&lt;/code&gt; field returned from a call to &lt;code&gt;DescribeIndex&lt;/code&gt;. The &lt;code&gt;Status&lt;/code&gt; field is set to &lt;code&gt;ACTIVE&lt;/code&gt; when the index is ready to use.&lt;/p&gt; &lt;p&gt;Once the index is active you can index your documents using the &lt;code&gt;BatchPutDocument&lt;/code&gt; API or using one of the supported data sources.&lt;/p&gt; &lt;p&gt;For an example of creating an index and data source using the Python SDK, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kendra/latest/dg/gs-python.html\&quot;&gt;Getting started with Python SDK&lt;/a&gt;. For an example of creating an index and data source using the Java SDK, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kendra/latest/dg/gs-java.html\&quot;&gt;Getting started with Java SDK&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createIndexTest() throws ApiException {
        String xAmzTarget = null;
        CreateIndexRequest createIndexRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateIndexResponse response = api.createIndex(xAmzTarget, createIndexRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a block list to exlcude certain queries from suggestions.&lt;/p&gt; &lt;p&gt;Any query that contains words or phrases specified in the block list is blocked or filtered out from being shown as a suggestion.&lt;/p&gt; &lt;p&gt;You need to provide the file location of your block list text file in your S3 bucket. In your text file, enter each block word or phrase on a separate line.&lt;/p&gt; &lt;p&gt;For information on the current quota limits for block lists, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kendra/latest/dg/quotas.html\&quot;&gt;Quotas for Amazon Kendra&lt;/a&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;CreateQuerySuggestionsBlockList&lt;/code&gt; is currently not supported in the Amazon Web Services GovCloud (US-West) region.&lt;/p&gt; &lt;p&gt;For an example of creating a block list for query suggestions using the Python SDK, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kendra/latest/dg/query-suggestions.html#query-suggestions-blocklist\&quot;&gt;Query suggestions block list&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createQuerySuggestionsBlockListTest() throws ApiException {
        String xAmzTarget = null;
        CreateQuerySuggestionsBlockListRequest createQuerySuggestionsBlockListRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateQuerySuggestionsBlockListResponse response = api.createQuerySuggestionsBlockList(xAmzTarget, createQuerySuggestionsBlockListRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a thesaurus for an index. The thesaurus contains a list of synonyms in Solr format.&lt;/p&gt; &lt;p&gt;For an example of adding a thesaurus file to an index, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kendra/latest/dg/index-synonyms-adding-thesaurus-file.html\&quot;&gt;Adding custom synonyms to an index&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createThesaurusTest() throws ApiException {
        String xAmzTarget = null;
        CreateThesaurusRequest createThesaurusRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateThesaurusResponse response = api.createThesaurus(xAmzTarget, createThesaurusRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an access control configuration that you created for your documents in an index. This includes user and group access information for your documents. This is useful for user context filtering, where search results are filtered based on the user or their group access to documents.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAccessControlConfigurationTest() throws ApiException {
        String xAmzTarget = null;
        DeleteAccessControlConfigurationRequest deleteAccessControlConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteAccessControlConfiguration(xAmzTarget, deleteAccessControlConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an Amazon Kendra data source connector. An exception is not thrown if the data source is already being deleted. While the data source is being deleted, the &lt;code&gt;Status&lt;/code&gt; field returned by a call to the &lt;code&gt;DescribeDataSource&lt;/code&gt; API is set to &lt;code&gt;DELETING&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kendra/latest/dg/delete-data-source.html\&quot;&gt;Deleting Data Sources&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDataSourceTest() throws ApiException {
        String xAmzTarget = null;
        DeleteDataSourceRequest deleteDataSourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteDataSource(xAmzTarget, deleteDataSourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes your Amazon Kendra experience such as a search application. For more information on creating a search application experience, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html\&quot;&gt;Building a search experience with no code&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteExperienceTest() throws ApiException {
        String xAmzTarget = null;
        DeleteExperienceRequest deleteExperienceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteExperience(xAmzTarget, deleteExperienceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes an FAQ from an index.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteFaqTest() throws ApiException {
        String xAmzTarget = null;
        DeleteFaqRequest deleteFaqRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteFaq(xAmzTarget, deleteFaqRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an existing Amazon Kendra index. An exception is not thrown if the index is already being deleted. While the index is being deleted, the &lt;code&gt;Status&lt;/code&gt; field returned by a call to the &lt;code&gt;DescribeIndex&lt;/code&gt; API is set to &lt;code&gt;DELETING&lt;/code&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteIndexTest() throws ApiException {
        String xAmzTarget = null;
        DeleteIndexRequest deleteIndexRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteIndex(xAmzTarget, deleteIndexRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a group so that all users and sub groups that belong to the group can no longer access documents only available to that group.&lt;/p&gt; &lt;p&gt;For example, after deleting the group \&quot;Summer Interns\&quot;, all interns who belonged to that group no longer see intern-only documents in their search results.&lt;/p&gt; &lt;p&gt;If you want to delete or replace users or sub groups of a group, you need to use the &lt;code&gt;PutPrincipalMapping&lt;/code&gt; operation. For example, if a user in the group \&quot;Engineering\&quot; leaves the engineering team and another user takes their place, you provide an updated list of users or sub groups that belong to the \&quot;Engineering\&quot; group when calling &lt;code&gt;PutPrincipalMapping&lt;/code&gt;. You can update your internal list of users or sub groups and input this list when calling &lt;code&gt;PutPrincipalMapping&lt;/code&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;DeletePrincipalMapping&lt;/code&gt; is currently not supported in the Amazon Web Services GovCloud (US-West) region.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePrincipalMappingTest() throws ApiException {
        String xAmzTarget = null;
        DeletePrincipalMappingRequest deletePrincipalMappingRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deletePrincipalMapping(xAmzTarget, deletePrincipalMappingRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a block list used for query suggestions for an index.&lt;/p&gt; &lt;p&gt;A deleted block list might not take effect right away. Amazon Kendra needs to refresh the entire suggestions list to add back the queries that were previously blocked.&lt;/p&gt; &lt;p&gt; &lt;code&gt;DeleteQuerySuggestionsBlockList&lt;/code&gt; is currently not supported in the Amazon Web Services GovCloud (US-West) region.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteQuerySuggestionsBlockListTest() throws ApiException {
        String xAmzTarget = null;
        DeleteQuerySuggestionsBlockListRequest deleteQuerySuggestionsBlockListRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteQuerySuggestionsBlockList(xAmzTarget, deleteQuerySuggestionsBlockListRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an existing Amazon Kendra thesaurus. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteThesaurusTest() throws ApiException {
        String xAmzTarget = null;
        DeleteThesaurusRequest deleteThesaurusRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteThesaurus(xAmzTarget, deleteThesaurusRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about an access control configuration that you created for your documents in an index. This includes user and group access information for your documents. This is useful for user context filtering, where search results are filtered based on the user or their group access to documents.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeAccessControlConfigurationTest() throws ApiException {
        String xAmzTarget = null;
        DescribeAccessControlConfigurationRequest describeAccessControlConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeAccessControlConfigurationResponse response = api.describeAccessControlConfiguration(xAmzTarget, describeAccessControlConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about an Amazon Kendra data source connector.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeDataSourceTest() throws ApiException {
        String xAmzTarget = null;
        DescribeDataSourceRequest describeDataSourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeDataSourceResponse response = api.describeDataSource(xAmzTarget, describeDataSourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about your Amazon Kendra experience such as a search application. For more information on creating a search application experience, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html\&quot;&gt;Building a search experience with no code&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeExperienceTest() throws ApiException {
        String xAmzTarget = null;
        DescribeExperienceRequest describeExperienceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeExperienceResponse response = api.describeExperience(xAmzTarget, describeExperienceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about an FAQ list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeFaqTest() throws ApiException {
        String xAmzTarget = null;
        DescribeFaqRequest describeFaqRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeFaqResponse response = api.describeFaq(xAmzTarget, describeFaqRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about a set of featured results. Features results are placed above all other results for certain queries. If there&#39;s an exact match of a query, then one or more specific documents are featured in the search results.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeFeaturedResultsSetTest() throws ApiException {
        String xAmzTarget = null;
        DescribeFeaturedResultsSetRequest describeFeaturedResultsSetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeFeaturedResultsSetResponse response = api.describeFeaturedResultsSet(xAmzTarget, describeFeaturedResultsSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about an existing Amazon Kendra index.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeIndexTest() throws ApiException {
        String xAmzTarget = null;
        DescribeIndexRequest describeIndexRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeIndexResponse response = api.describeIndex(xAmzTarget, describeIndexRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Describes the processing of &lt;code&gt;PUT&lt;/code&gt; and &lt;code&gt;DELETE&lt;/code&gt; actions for mapping users to their groups. This includes information on the status of actions currently processing or yet to be processed, when actions were last updated, when actions were received by Amazon Kendra, the latest action that should process and apply after other actions, and useful error messages if an action could not be processed.&lt;/p&gt; &lt;p&gt; &lt;code&gt;DescribePrincipalMapping&lt;/code&gt; is currently not supported in the Amazon Web Services GovCloud (US-West) region.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describePrincipalMappingTest() throws ApiException {
        String xAmzTarget = null;
        DescribePrincipalMappingRequest describePrincipalMappingRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribePrincipalMappingResponse response = api.describePrincipalMapping(xAmzTarget, describePrincipalMappingRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets information about a block list used for query suggestions for an index.&lt;/p&gt; &lt;p&gt;This is used to check the current settings that are applied to a block list.&lt;/p&gt; &lt;p&gt; &lt;code&gt;DescribeQuerySuggestionsBlockList&lt;/code&gt; is currently not supported in the Amazon Web Services GovCloud (US-West) region.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeQuerySuggestionsBlockListTest() throws ApiException {
        String xAmzTarget = null;
        DescribeQuerySuggestionsBlockListRequest describeQuerySuggestionsBlockListRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeQuerySuggestionsBlockListResponse response = api.describeQuerySuggestionsBlockList(xAmzTarget, describeQuerySuggestionsBlockListRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets information on the settings of query suggestions for an index.&lt;/p&gt; &lt;p&gt;This is used to check the current settings applied to query suggestions.&lt;/p&gt; &lt;p&gt; &lt;code&gt;DescribeQuerySuggestionsConfig&lt;/code&gt; is currently not supported in the Amazon Web Services GovCloud (US-West) region.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeQuerySuggestionsConfigTest() throws ApiException {
        String xAmzTarget = null;
        DescribeQuerySuggestionsConfigRequest describeQuerySuggestionsConfigRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeQuerySuggestionsConfigResponse response = api.describeQuerySuggestionsConfig(xAmzTarget, describeQuerySuggestionsConfigRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about an existing Amazon Kendra thesaurus.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeThesaurusTest() throws ApiException {
        String xAmzTarget = null;
        DescribeThesaurusRequest describeThesaurusRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeThesaurusResponse response = api.describeThesaurus(xAmzTarget, describeThesaurusRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Prevents users or groups in your IAM Identity Center identity source from accessing your Amazon Kendra experience. You can create an Amazon Kendra experience such as a search application. For more information on creating a search application experience, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html\&quot;&gt;Building a search experience with no code&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociateEntitiesFromExperienceTest() throws ApiException {
        String xAmzTarget = null;
        DisassociateEntitiesFromExperienceRequest disassociateEntitiesFromExperienceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DisassociateEntitiesFromExperienceResponse response = api.disassociateEntitiesFromExperience(xAmzTarget, disassociateEntitiesFromExperienceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes the specific permissions of users or groups in your IAM Identity Center identity source with access to your Amazon Kendra experience. You can create an Amazon Kendra experience such as a search application. For more information on creating a search application experience, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html\&quot;&gt;Building a search experience with no code&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociatePersonasFromEntitiesTest() throws ApiException {
        String xAmzTarget = null;
        DisassociatePersonasFromEntitiesRequest disassociatePersonasFromEntitiesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DisassociatePersonasFromEntitiesResponse response = api.disassociatePersonasFromEntities(xAmzTarget, disassociatePersonasFromEntitiesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Fetches the queries that are suggested to your users.&lt;/p&gt; &lt;p&gt; &lt;code&gt;GetQuerySuggestions&lt;/code&gt; is currently not supported in the Amazon Web Services GovCloud (US-West) region.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getQuerySuggestionsTest() throws ApiException {
        String xAmzTarget = null;
        GetQuerySuggestionsRequest getQuerySuggestionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetQuerySuggestionsResponse response = api.getQuerySuggestions(xAmzTarget, getQuerySuggestionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves search metrics data. The data provides a snapshot of how your users interact with your search application and how effective the application is.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSnapshotsTest() throws ApiException {
        String xAmzTarget = null;
        GetSnapshotsRequest getSnapshotsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetSnapshotsResponse response = api.getSnapshots(xAmzTarget, getSnapshotsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists one or more access control configurations for an index. This includes user and group access information for your documents. This is useful for user context filtering, where search results are filtered based on the user or their group access to documents.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAccessControlConfigurationsTest() throws ApiException {
        String xAmzTarget = null;
        ListAccessControlConfigurationsRequest listAccessControlConfigurationsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListAccessControlConfigurationsResponse response = api.listAccessControlConfigurations(xAmzTarget, listAccessControlConfigurationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Gets statistics about synchronizing a data source connector.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDataSourceSyncJobsTest() throws ApiException {
        String xAmzTarget = null;
        ListDataSourceSyncJobsRequest listDataSourceSyncJobsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListDataSourceSyncJobsResponse response = api.listDataSourceSyncJobs(xAmzTarget, listDataSourceSyncJobsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the data source connectors that you have created.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDataSourcesTest() throws ApiException {
        String xAmzTarget = null;
        ListDataSourcesRequest listDataSourcesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListDataSourcesResponse response = api.listDataSources(xAmzTarget, listDataSourcesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists specific permissions of users and groups with access to your Amazon Kendra experience.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listEntityPersonasTest() throws ApiException {
        String xAmzTarget = null;
        ListEntityPersonasRequest listEntityPersonasRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListEntityPersonasResponse response = api.listEntityPersonas(xAmzTarget, listEntityPersonasRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists users or groups in your IAM Identity Center identity source that are granted access to your Amazon Kendra experience. You can create an Amazon Kendra experience such as a search application. For more information on creating a search application experience, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html\&quot;&gt;Building a search experience with no code&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listExperienceEntitiesTest() throws ApiException {
        String xAmzTarget = null;
        ListExperienceEntitiesRequest listExperienceEntitiesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        ListExperienceEntitiesResponse response = api.listExperienceEntities(xAmzTarget, listExperienceEntitiesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        // TODO: test validations
    }

    /**
     * Lists one or more Amazon Kendra experiences. You can create an Amazon Kendra experience such as a search application. For more information on creating a search application experience, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html\&quot;&gt;Building a search experience with no code&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listExperiencesTest() throws ApiException {
        String xAmzTarget = null;
        ListExperiencesRequest listExperiencesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListExperiencesResponse response = api.listExperiences(xAmzTarget, listExperiencesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Gets a list of FAQ lists associated with an index.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listFaqsTest() throws ApiException {
        String xAmzTarget = null;
        ListFaqsRequest listFaqsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListFaqsResponse response = api.listFaqs(xAmzTarget, listFaqsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists all your sets of featured results for a given index. Features results are placed above all other results for certain queries. If there&#39;s an exact match of a query, then one or more specific documents are featured in the search results.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listFeaturedResultsSetsTest() throws ApiException {
        String xAmzTarget = null;
        ListFeaturedResultsSetsRequest listFeaturedResultsSetsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListFeaturedResultsSetsResponse response = api.listFeaturedResultsSets(xAmzTarget, listFeaturedResultsSetsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Provides a list of groups that are mapped to users before a given ordering or timestamp identifier.&lt;/p&gt; &lt;p&gt; &lt;code&gt;ListGroupsOlderThanOrderingId&lt;/code&gt; is currently not supported in the Amazon Web Services GovCloud (US-West) region.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listGroupsOlderThanOrderingIdTest() throws ApiException {
        String xAmzTarget = null;
        ListGroupsOlderThanOrderingIdRequest listGroupsOlderThanOrderingIdRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListGroupsOlderThanOrderingIdResponse response = api.listGroupsOlderThanOrderingId(xAmzTarget, listGroupsOlderThanOrderingIdRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the Amazon Kendra indexes that you created.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listIndicesTest() throws ApiException {
        String xAmzTarget = null;
        ListIndicesRequest listIndicesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListIndicesResponse response = api.listIndices(xAmzTarget, listIndicesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists the block lists used for query suggestions for an index.&lt;/p&gt; &lt;p&gt;For information on the current quota limits for block lists, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kendra/latest/dg/quotas.html\&quot;&gt;Quotas for Amazon Kendra&lt;/a&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;ListQuerySuggestionsBlockLists&lt;/code&gt; is currently not supported in the Amazon Web Services GovCloud (US-West) region.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listQuerySuggestionsBlockListsTest() throws ApiException {
        String xAmzTarget = null;
        ListQuerySuggestionsBlockListsRequest listQuerySuggestionsBlockListsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListQuerySuggestionsBlockListsResponse response = api.listQuerySuggestionsBlockLists(xAmzTarget, listQuerySuggestionsBlockListsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Gets a list of tags associated with a specified resource. Indexes, FAQs, and data sources can have tags associated with them.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String xAmzTarget = null;
        ListTagsForResourceRequest listTagsForResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceResponse response = api.listTagsForResource(xAmzTarget, listTagsForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists the thesauri for an index.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listThesauriTest() throws ApiException {
        String xAmzTarget = null;
        ListThesauriRequest listThesauriRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListThesauriResponse response = api.listThesauri(xAmzTarget, listThesauriRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Maps users to their groups so that you only need to provide the user ID when you issue the query.&lt;/p&gt; &lt;p&gt;You can also map sub groups to groups. For example, the group \&quot;Company Intellectual Property Teams\&quot; includes sub groups \&quot;Research\&quot; and \&quot;Engineering\&quot;. These sub groups include their own list of users or people who work in these teams. Only users who work in research and engineering, and therefore belong in the intellectual property group, can see top-secret company documents in their search results.&lt;/p&gt; &lt;p&gt;This is useful for user context filtering, where search results are filtered based on the user or their group access to documents. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kendra/latest/dg/user-context-filter.html\&quot;&gt;Filtering on user context&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If more than five &lt;code&gt;PUT&lt;/code&gt; actions for a group are currently processing, a validation exception is thrown.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putPrincipalMappingTest() throws ApiException {
        String xAmzTarget = null;
        PutPrincipalMappingRequest putPrincipalMappingRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.putPrincipalMapping(xAmzTarget, putPrincipalMappingRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Searches an index given an input query.&lt;/p&gt; &lt;p&gt;You can configure boosting or relevance tuning at the query level to override boosting at the index level, filter based on document fields/attributes and faceted search, and filter based on the user or their group access to documents. You can also include certain fields in the response that might provide useful additional information.&lt;/p&gt; &lt;p&gt;A query response contains three types of results.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Relevant suggested answers. The answers can be either a text excerpt or table excerpt. The answer can be highlighted in the excerpt.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Matching FAQs or questions-answer from your FAQ file.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Relevant documents. This result type includes an excerpt of the document with the document title. The searched terms can be highlighted in the excerpt.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You can specify that the query return only one type of result using the &lt;code&gt;QueryResultTypeFilter&lt;/code&gt; parameter. Each query returns the 100 most relevant results. If you filter result type to only question-answers, a maximum of four results are returned. If you filter result type to only answers, a maximum of three results are returned.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryTest() throws ApiException {
        String xAmzTarget = null;
        QueryRequest queryRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        QueryResult response = api.query(xAmzTarget, queryRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Retrieves relevant passages or text excerpts given an input query.&lt;/p&gt; &lt;p&gt;This API is similar to the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kendra/latest/APIReference/API_Query.html\&quot;&gt;Query&lt;/a&gt; API. However, by default, the &lt;code&gt;Query&lt;/code&gt; API only returns excerpt passages of up to 100 token words. With the &lt;code&gt;Retrieve&lt;/code&gt; API, you can retrieve longer passages of up to 200 token words and up to 100 semantically relevant passages. This doesn&#39;t include question-answer or FAQ type responses from your index. The passages are text excerpts that can be semantically extracted from multiple documents and multiple parts of the same document. If in extreme cases your documents produce no relevant passages using the &lt;code&gt;Retrieve&lt;/code&gt; API, you can alternatively use the &lt;code&gt;Query&lt;/code&gt; API.&lt;/p&gt; &lt;p&gt;You can also do the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Override boosting at the index level&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Filter based on document fields or attributes&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Filter based on the user or their group access to documents&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You can also include certain fields in the response that might provide useful additional information.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveTest() throws ApiException {
        String xAmzTarget = null;
        RetrieveRequest retrieveRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RetrieveResult response = api.retrieve(xAmzTarget, retrieveRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Starts a synchronization job for a data source connector. If a synchronization job is already in progress, Amazon Kendra returns a &lt;code&gt;ResourceInUseException&lt;/code&gt; exception.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startDataSourceSyncJobTest() throws ApiException {
        String xAmzTarget = null;
        StartDataSourceSyncJobRequest startDataSourceSyncJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartDataSourceSyncJobResponse response = api.startDataSourceSyncJob(xAmzTarget, startDataSourceSyncJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Stops a synchronization job that is currently running. You can&#39;t stop a scheduled synchronization job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopDataSourceSyncJobTest() throws ApiException {
        String xAmzTarget = null;
        StopDataSourceSyncJobRequest stopDataSourceSyncJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.stopDataSourceSyncJob(xAmzTarget, stopDataSourceSyncJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Enables you to provide feedback to Amazon Kendra to improve the performance of your index.&lt;/p&gt; &lt;p&gt; &lt;code&gt;SubmitFeedback&lt;/code&gt; is currently not supported in the Amazon Web Services GovCloud (US-West) region.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void submitFeedbackTest() throws ApiException {
        String xAmzTarget = null;
        SubmitFeedbackRequest submitFeedbackRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.submitFeedback(xAmzTarget, submitFeedbackRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Adds the specified tag to the specified index, FAQ, or data source resource. If the tag already exists, the existing value is replaced with the new value.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String xAmzTarget = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.tagResource(xAmzTarget, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes a tag from an index, FAQ, or a data source.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String xAmzTarget = null;
        UntagResourceRequest untagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.untagResource(xAmzTarget, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates an access control configuration for your documents in an index. This includes user and group access information for your documents. This is useful for user context filtering, where search results are filtered based on the user or their group access to documents.&lt;/p&gt; &lt;p&gt;You can update an access control configuration you created without indexing all of your documents again. For example, your index contains top-secret company documents that only certain employees or users should access. You created an &#39;allow&#39; access control configuration for one user who recently joined the &#39;top-secret&#39; team, switching from a team with &#39;deny&#39; access to top-secret documents. However, the user suddenly returns to their previous team and should no longer have access to top secret documents. You can update the access control configuration to re-configure access control for your documents as circumstances change.&lt;/p&gt; &lt;p&gt;You call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kendra/latest/dg/API_BatchPutDocument.html\&quot;&gt;BatchPutDocument&lt;/a&gt; API to apply the updated access control configuration, with the &lt;code&gt;AccessControlConfigurationId&lt;/code&gt; included in the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kendra/latest/dg/API_Document.html\&quot;&gt;Document&lt;/a&gt; object. If you use an S3 bucket as a data source, you synchronize your data source to apply the &lt;code&gt;AccessControlConfigurationId&lt;/code&gt; in the &lt;code&gt;.metadata.json&lt;/code&gt; file. Amazon Kendra currently only supports access control configuration for S3 data sources and documents indexed using the &lt;code&gt;BatchPutDocument&lt;/code&gt; API.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAccessControlConfigurationTest() throws ApiException {
        String xAmzTarget = null;
        UpdateAccessControlConfigurationRequest updateAccessControlConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateAccessControlConfiguration(xAmzTarget, updateAccessControlConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates an existing Amazon Kendra data source connector.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDataSourceTest() throws ApiException {
        String xAmzTarget = null;
        UpdateDataSourceRequest updateDataSourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.updateDataSource(xAmzTarget, updateDataSourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates your Amazon Kendra experience such as a search application. For more information on creating a search application experience, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html\&quot;&gt;Building a search experience with no code&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateExperienceTest() throws ApiException {
        String xAmzTarget = null;
        UpdateExperienceRequest updateExperienceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.updateExperience(xAmzTarget, updateExperienceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a set of featured results. Features results are placed above all other results for certain queries. You map specific queries to specific documents for featuring in the results. If a query contains an exact match of a query, then one or more specific documents are featured in the search results.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFeaturedResultsSetTest() throws ApiException {
        String xAmzTarget = null;
        UpdateFeaturedResultsSetRequest updateFeaturedResultsSetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateFeaturedResultsSetResponse response = api.updateFeaturedResultsSet(xAmzTarget, updateFeaturedResultsSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates an existing Amazon Kendra index.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateIndexTest() throws ApiException {
        String xAmzTarget = null;
        UpdateIndexRequest updateIndexRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.updateIndex(xAmzTarget, updateIndexRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates a block list used for query suggestions for an index.&lt;/p&gt; &lt;p&gt;Updates to a block list might not take effect right away. Amazon Kendra needs to refresh the entire suggestions list to apply any updates to the block list. Other changes not related to the block list apply immediately.&lt;/p&gt; &lt;p&gt;If a block list is updating, then you need to wait for the first update to finish before submitting another update.&lt;/p&gt; &lt;p&gt;Amazon Kendra supports partial updates, so you only need to provide the fields you want to update.&lt;/p&gt; &lt;p&gt; &lt;code&gt;UpdateQuerySuggestionsBlockList&lt;/code&gt; is currently not supported in the Amazon Web Services GovCloud (US-West) region.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateQuerySuggestionsBlockListTest() throws ApiException {
        String xAmzTarget = null;
        UpdateQuerySuggestionsBlockListRequest updateQuerySuggestionsBlockListRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.updateQuerySuggestionsBlockList(xAmzTarget, updateQuerySuggestionsBlockListRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates the settings of query suggestions for an index.&lt;/p&gt; &lt;p&gt;Amazon Kendra supports partial updates, so you only need to provide the fields you want to update.&lt;/p&gt; &lt;p&gt;If an update is currently processing, you need to wait for the update to finish before making another update.&lt;/p&gt; &lt;p&gt;Updates to query suggestions settings might not take effect right away. The time for your updated settings to take effect depends on the updates made and the number of search queries in your index.&lt;/p&gt; &lt;p&gt;You can still enable/disable query suggestions at any time.&lt;/p&gt; &lt;p&gt; &lt;code&gt;UpdateQuerySuggestionsConfig&lt;/code&gt; is currently not supported in the Amazon Web Services GovCloud (US-West) region.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateQuerySuggestionsConfigTest() throws ApiException {
        String xAmzTarget = null;
        UpdateQuerySuggestionsConfigRequest updateQuerySuggestionsConfigRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.updateQuerySuggestionsConfig(xAmzTarget, updateQuerySuggestionsConfigRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a thesaurus for an index.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateThesaurusTest() throws ApiException {
        String xAmzTarget = null;
        UpdateThesaurusRequest updateThesaurusRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.updateThesaurus(xAmzTarget, updateThesaurusRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
