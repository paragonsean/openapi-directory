/*
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A corrected misspelled word in a query.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:16.778416-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Correction {
  public static final String SERIALIZED_NAME_BEGIN_OFFSET = "BeginOffset";
  @SerializedName(SERIALIZED_NAME_BEGIN_OFFSET)
  private Integer beginOffset;

  public static final String SERIALIZED_NAME_END_OFFSET = "EndOffset";
  @SerializedName(SERIALIZED_NAME_END_OFFSET)
  private Integer endOffset;

  public static final String SERIALIZED_NAME_TERM = "Term";
  @SerializedName(SERIALIZED_NAME_TERM)
  private String term;

  public static final String SERIALIZED_NAME_CORRECTED_TERM = "CorrectedTerm";
  @SerializedName(SERIALIZED_NAME_CORRECTED_TERM)
  private String correctedTerm;

  public Correction() {
  }

  public Correction beginOffset(Integer beginOffset) {
    this.beginOffset = beginOffset;
    return this;
  }

  /**
   * Get beginOffset
   * @return beginOffset
   */
  @javax.annotation.Nullable
  public Integer getBeginOffset() {
    return beginOffset;
  }

  public void setBeginOffset(Integer beginOffset) {
    this.beginOffset = beginOffset;
  }


  public Correction endOffset(Integer endOffset) {
    this.endOffset = endOffset;
    return this;
  }

  /**
   * Get endOffset
   * @return endOffset
   */
  @javax.annotation.Nullable
  public Integer getEndOffset() {
    return endOffset;
  }

  public void setEndOffset(Integer endOffset) {
    this.endOffset = endOffset;
  }


  public Correction term(String term) {
    this.term = term;
    return this;
  }

  /**
   * Get term
   * @return term
   */
  @javax.annotation.Nullable
  public String getTerm() {
    return term;
  }

  public void setTerm(String term) {
    this.term = term;
  }


  public Correction correctedTerm(String correctedTerm) {
    this.correctedTerm = correctedTerm;
    return this;
  }

  /**
   * Get correctedTerm
   * @return correctedTerm
   */
  @javax.annotation.Nullable
  public String getCorrectedTerm() {
    return correctedTerm;
  }

  public void setCorrectedTerm(String correctedTerm) {
    this.correctedTerm = correctedTerm;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Correction correction = (Correction) o;
    return Objects.equals(this.beginOffset, correction.beginOffset) &&
        Objects.equals(this.endOffset, correction.endOffset) &&
        Objects.equals(this.term, correction.term) &&
        Objects.equals(this.correctedTerm, correction.correctedTerm);
  }

  @Override
  public int hashCode() {
    return Objects.hash(beginOffset, endOffset, term, correctedTerm);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Correction {\n");
    sb.append("    beginOffset: ").append(toIndentedString(beginOffset)).append("\n");
    sb.append("    endOffset: ").append(toIndentedString(endOffset)).append("\n");
    sb.append("    term: ").append(toIndentedString(term)).append("\n");
    sb.append("    correctedTerm: ").append(toIndentedString(correctedTerm)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BeginOffset");
    openapiFields.add("EndOffset");
    openapiFields.add("Term");
    openapiFields.add("CorrectedTerm");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Correction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Correction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Correction is not found in the empty JSON string", Correction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Correction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Correction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `BeginOffset`
      if (jsonObj.get("BeginOffset") != null && !jsonObj.get("BeginOffset").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("BeginOffset"));
      }
      // validate the optional field `EndOffset`
      if (jsonObj.get("EndOffset") != null && !jsonObj.get("EndOffset").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("EndOffset"));
      }
      // validate the optional field `Term`
      if (jsonObj.get("Term") != null && !jsonObj.get("Term").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Term"));
      }
      // validate the optional field `CorrectedTerm`
      if (jsonObj.get("CorrectedTerm") != null && !jsonObj.get("CorrectedTerm").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CorrectedTerm"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Correction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Correction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Correction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Correction.class));

       return (TypeAdapter<T>) new TypeAdapter<Correction>() {
           @Override
           public void write(JsonWriter out, Correction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Correction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Correction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Correction
   * @throws IOException if the JSON string is invalid with respect to Correction
   */
  public static Correction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Correction.class);
  }

  /**
   * Convert an instance of Correction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

