/*
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.QueryRequestAttributeFilter;
import org.openapitools.client.model.QueryRequestUserContext;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RetrieveRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:16.778416-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RetrieveRequest {
  public static final String SERIALIZED_NAME_INDEX_ID = "IndexId";
  @SerializedName(SERIALIZED_NAME_INDEX_ID)
  private String indexId;

  public static final String SERIALIZED_NAME_QUERY_TEXT = "QueryText";
  @SerializedName(SERIALIZED_NAME_QUERY_TEXT)
  private String queryText;

  public static final String SERIALIZED_NAME_ATTRIBUTE_FILTER = "AttributeFilter";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_FILTER)
  private QueryRequestAttributeFilter attributeFilter;

  public static final String SERIALIZED_NAME_REQUESTED_DOCUMENT_ATTRIBUTES = "RequestedDocumentAttributes";
  @SerializedName(SERIALIZED_NAME_REQUESTED_DOCUMENT_ATTRIBUTES)
  private List requestedDocumentAttributes;

  public static final String SERIALIZED_NAME_DOCUMENT_RELEVANCE_OVERRIDE_CONFIGURATIONS = "DocumentRelevanceOverrideConfigurations";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_RELEVANCE_OVERRIDE_CONFIGURATIONS)
  private List documentRelevanceOverrideConfigurations;

  public static final String SERIALIZED_NAME_PAGE_NUMBER = "PageNumber";
  @SerializedName(SERIALIZED_NAME_PAGE_NUMBER)
  private Integer pageNumber;

  public static final String SERIALIZED_NAME_PAGE_SIZE = "PageSize";
  @SerializedName(SERIALIZED_NAME_PAGE_SIZE)
  private Integer pageSize;

  public static final String SERIALIZED_NAME_USER_CONTEXT = "UserContext";
  @SerializedName(SERIALIZED_NAME_USER_CONTEXT)
  private QueryRequestUserContext userContext;

  public RetrieveRequest() {
  }

  public RetrieveRequest indexId(String indexId) {
    this.indexId = indexId;
    return this;
  }

  /**
   * Get indexId
   * @return indexId
   */
  @javax.annotation.Nonnull
  public String getIndexId() {
    return indexId;
  }

  public void setIndexId(String indexId) {
    this.indexId = indexId;
  }


  public RetrieveRequest queryText(String queryText) {
    this.queryText = queryText;
    return this;
  }

  /**
   * Get queryText
   * @return queryText
   */
  @javax.annotation.Nonnull
  public String getQueryText() {
    return queryText;
  }

  public void setQueryText(String queryText) {
    this.queryText = queryText;
  }


  public RetrieveRequest attributeFilter(QueryRequestAttributeFilter attributeFilter) {
    this.attributeFilter = attributeFilter;
    return this;
  }

  /**
   * Get attributeFilter
   * @return attributeFilter
   */
  @javax.annotation.Nullable
  public QueryRequestAttributeFilter getAttributeFilter() {
    return attributeFilter;
  }

  public void setAttributeFilter(QueryRequestAttributeFilter attributeFilter) {
    this.attributeFilter = attributeFilter;
  }


  public RetrieveRequest requestedDocumentAttributes(List requestedDocumentAttributes) {
    this.requestedDocumentAttributes = requestedDocumentAttributes;
    return this;
  }

  /**
   * Get requestedDocumentAttributes
   * @return requestedDocumentAttributes
   */
  @javax.annotation.Nullable
  public List getRequestedDocumentAttributes() {
    return requestedDocumentAttributes;
  }

  public void setRequestedDocumentAttributes(List requestedDocumentAttributes) {
    this.requestedDocumentAttributes = requestedDocumentAttributes;
  }


  public RetrieveRequest documentRelevanceOverrideConfigurations(List documentRelevanceOverrideConfigurations) {
    this.documentRelevanceOverrideConfigurations = documentRelevanceOverrideConfigurations;
    return this;
  }

  /**
   * Get documentRelevanceOverrideConfigurations
   * @return documentRelevanceOverrideConfigurations
   */
  @javax.annotation.Nullable
  public List getDocumentRelevanceOverrideConfigurations() {
    return documentRelevanceOverrideConfigurations;
  }

  public void setDocumentRelevanceOverrideConfigurations(List documentRelevanceOverrideConfigurations) {
    this.documentRelevanceOverrideConfigurations = documentRelevanceOverrideConfigurations;
  }


  public RetrieveRequest pageNumber(Integer pageNumber) {
    this.pageNumber = pageNumber;
    return this;
  }

  /**
   * Get pageNumber
   * @return pageNumber
   */
  @javax.annotation.Nullable
  public Integer getPageNumber() {
    return pageNumber;
  }

  public void setPageNumber(Integer pageNumber) {
    this.pageNumber = pageNumber;
  }


  public RetrieveRequest pageSize(Integer pageSize) {
    this.pageSize = pageSize;
    return this;
  }

  /**
   * Get pageSize
   * @return pageSize
   */
  @javax.annotation.Nullable
  public Integer getPageSize() {
    return pageSize;
  }

  public void setPageSize(Integer pageSize) {
    this.pageSize = pageSize;
  }


  public RetrieveRequest userContext(QueryRequestUserContext userContext) {
    this.userContext = userContext;
    return this;
  }

  /**
   * Get userContext
   * @return userContext
   */
  @javax.annotation.Nullable
  public QueryRequestUserContext getUserContext() {
    return userContext;
  }

  public void setUserContext(QueryRequestUserContext userContext) {
    this.userContext = userContext;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RetrieveRequest retrieveRequest = (RetrieveRequest) o;
    return Objects.equals(this.indexId, retrieveRequest.indexId) &&
        Objects.equals(this.queryText, retrieveRequest.queryText) &&
        Objects.equals(this.attributeFilter, retrieveRequest.attributeFilter) &&
        Objects.equals(this.requestedDocumentAttributes, retrieveRequest.requestedDocumentAttributes) &&
        Objects.equals(this.documentRelevanceOverrideConfigurations, retrieveRequest.documentRelevanceOverrideConfigurations) &&
        Objects.equals(this.pageNumber, retrieveRequest.pageNumber) &&
        Objects.equals(this.pageSize, retrieveRequest.pageSize) &&
        Objects.equals(this.userContext, retrieveRequest.userContext);
  }

  @Override
  public int hashCode() {
    return Objects.hash(indexId, queryText, attributeFilter, requestedDocumentAttributes, documentRelevanceOverrideConfigurations, pageNumber, pageSize, userContext);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RetrieveRequest {\n");
    sb.append("    indexId: ").append(toIndentedString(indexId)).append("\n");
    sb.append("    queryText: ").append(toIndentedString(queryText)).append("\n");
    sb.append("    attributeFilter: ").append(toIndentedString(attributeFilter)).append("\n");
    sb.append("    requestedDocumentAttributes: ").append(toIndentedString(requestedDocumentAttributes)).append("\n");
    sb.append("    documentRelevanceOverrideConfigurations: ").append(toIndentedString(documentRelevanceOverrideConfigurations)).append("\n");
    sb.append("    pageNumber: ").append(toIndentedString(pageNumber)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("    userContext: ").append(toIndentedString(userContext)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("IndexId");
    openapiFields.add("QueryText");
    openapiFields.add("AttributeFilter");
    openapiFields.add("RequestedDocumentAttributes");
    openapiFields.add("DocumentRelevanceOverrideConfigurations");
    openapiFields.add("PageNumber");
    openapiFields.add("PageSize");
    openapiFields.add("UserContext");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("IndexId");
    openapiRequiredFields.add("QueryText");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RetrieveRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RetrieveRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RetrieveRequest is not found in the empty JSON string", RetrieveRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RetrieveRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RetrieveRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RetrieveRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `IndexId`
      String.validateJsonElement(jsonObj.get("IndexId"));
      // validate the required field `QueryText`
      String.validateJsonElement(jsonObj.get("QueryText"));
      // validate the optional field `AttributeFilter`
      if (jsonObj.get("AttributeFilter") != null && !jsonObj.get("AttributeFilter").isJsonNull()) {
        QueryRequestAttributeFilter.validateJsonElement(jsonObj.get("AttributeFilter"));
      }
      // validate the optional field `RequestedDocumentAttributes`
      if (jsonObj.get("RequestedDocumentAttributes") != null && !jsonObj.get("RequestedDocumentAttributes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("RequestedDocumentAttributes"));
      }
      // validate the optional field `DocumentRelevanceOverrideConfigurations`
      if (jsonObj.get("DocumentRelevanceOverrideConfigurations") != null && !jsonObj.get("DocumentRelevanceOverrideConfigurations").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("DocumentRelevanceOverrideConfigurations"));
      }
      // validate the optional field `PageNumber`
      if (jsonObj.get("PageNumber") != null && !jsonObj.get("PageNumber").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("PageNumber"));
      }
      // validate the optional field `PageSize`
      if (jsonObj.get("PageSize") != null && !jsonObj.get("PageSize").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("PageSize"));
      }
      // validate the optional field `UserContext`
      if (jsonObj.get("UserContext") != null && !jsonObj.get("UserContext").isJsonNull()) {
        QueryRequestUserContext.validateJsonElement(jsonObj.get("UserContext"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RetrieveRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RetrieveRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RetrieveRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RetrieveRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<RetrieveRequest>() {
           @Override
           public void write(JsonWriter out, RetrieveRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RetrieveRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RetrieveRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RetrieveRequest
   * @throws IOException if the JSON string is invalid with respect to RetrieveRequest
   */
  public static RetrieveRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RetrieveRequest.class);
  }

  /**
   * Convert an instance of RetrieveRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

