/*
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * QueryResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:16.778416-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class QueryResult {
  public static final String SERIALIZED_NAME_QUERY_ID = "QueryId";
  @SerializedName(SERIALIZED_NAME_QUERY_ID)
  private String queryId;

  public static final String SERIALIZED_NAME_RESULT_ITEMS = "ResultItems";
  @SerializedName(SERIALIZED_NAME_RESULT_ITEMS)
  private List resultItems;

  public static final String SERIALIZED_NAME_FACET_RESULTS = "FacetResults";
  @SerializedName(SERIALIZED_NAME_FACET_RESULTS)
  private List facetResults;

  public static final String SERIALIZED_NAME_TOTAL_NUMBER_OF_RESULTS = "TotalNumberOfResults";
  @SerializedName(SERIALIZED_NAME_TOTAL_NUMBER_OF_RESULTS)
  private Integer totalNumberOfResults;

  public static final String SERIALIZED_NAME_WARNINGS = "Warnings";
  @SerializedName(SERIALIZED_NAME_WARNINGS)
  private List warnings;

  public static final String SERIALIZED_NAME_SPELL_CORRECTED_QUERIES = "SpellCorrectedQueries";
  @SerializedName(SERIALIZED_NAME_SPELL_CORRECTED_QUERIES)
  private List spellCorrectedQueries;

  public static final String SERIALIZED_NAME_FEATURED_RESULTS_ITEMS = "FeaturedResultsItems";
  @SerializedName(SERIALIZED_NAME_FEATURED_RESULTS_ITEMS)
  private List featuredResultsItems;

  public QueryResult() {
  }

  public QueryResult queryId(String queryId) {
    this.queryId = queryId;
    return this;
  }

  /**
   * Get queryId
   * @return queryId
   */
  @javax.annotation.Nullable
  public String getQueryId() {
    return queryId;
  }

  public void setQueryId(String queryId) {
    this.queryId = queryId;
  }


  public QueryResult resultItems(List resultItems) {
    this.resultItems = resultItems;
    return this;
  }

  /**
   * Get resultItems
   * @return resultItems
   */
  @javax.annotation.Nullable
  public List getResultItems() {
    return resultItems;
  }

  public void setResultItems(List resultItems) {
    this.resultItems = resultItems;
  }


  public QueryResult facetResults(List facetResults) {
    this.facetResults = facetResults;
    return this;
  }

  /**
   * Get facetResults
   * @return facetResults
   */
  @javax.annotation.Nullable
  public List getFacetResults() {
    return facetResults;
  }

  public void setFacetResults(List facetResults) {
    this.facetResults = facetResults;
  }


  public QueryResult totalNumberOfResults(Integer totalNumberOfResults) {
    this.totalNumberOfResults = totalNumberOfResults;
    return this;
  }

  /**
   * Get totalNumberOfResults
   * @return totalNumberOfResults
   */
  @javax.annotation.Nullable
  public Integer getTotalNumberOfResults() {
    return totalNumberOfResults;
  }

  public void setTotalNumberOfResults(Integer totalNumberOfResults) {
    this.totalNumberOfResults = totalNumberOfResults;
  }


  public QueryResult warnings(List warnings) {
    this.warnings = warnings;
    return this;
  }

  /**
   * Get warnings
   * @return warnings
   */
  @javax.annotation.Nullable
  public List getWarnings() {
    return warnings;
  }

  public void setWarnings(List warnings) {
    this.warnings = warnings;
  }


  public QueryResult spellCorrectedQueries(List spellCorrectedQueries) {
    this.spellCorrectedQueries = spellCorrectedQueries;
    return this;
  }

  /**
   * Get spellCorrectedQueries
   * @return spellCorrectedQueries
   */
  @javax.annotation.Nullable
  public List getSpellCorrectedQueries() {
    return spellCorrectedQueries;
  }

  public void setSpellCorrectedQueries(List spellCorrectedQueries) {
    this.spellCorrectedQueries = spellCorrectedQueries;
  }


  public QueryResult featuredResultsItems(List featuredResultsItems) {
    this.featuredResultsItems = featuredResultsItems;
    return this;
  }

  /**
   * Get featuredResultsItems
   * @return featuredResultsItems
   */
  @javax.annotation.Nullable
  public List getFeaturedResultsItems() {
    return featuredResultsItems;
  }

  public void setFeaturedResultsItems(List featuredResultsItems) {
    this.featuredResultsItems = featuredResultsItems;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueryResult queryResult = (QueryResult) o;
    return Objects.equals(this.queryId, queryResult.queryId) &&
        Objects.equals(this.resultItems, queryResult.resultItems) &&
        Objects.equals(this.facetResults, queryResult.facetResults) &&
        Objects.equals(this.totalNumberOfResults, queryResult.totalNumberOfResults) &&
        Objects.equals(this.warnings, queryResult.warnings) &&
        Objects.equals(this.spellCorrectedQueries, queryResult.spellCorrectedQueries) &&
        Objects.equals(this.featuredResultsItems, queryResult.featuredResultsItems);
  }

  @Override
  public int hashCode() {
    return Objects.hash(queryId, resultItems, facetResults, totalNumberOfResults, warnings, spellCorrectedQueries, featuredResultsItems);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueryResult {\n");
    sb.append("    queryId: ").append(toIndentedString(queryId)).append("\n");
    sb.append("    resultItems: ").append(toIndentedString(resultItems)).append("\n");
    sb.append("    facetResults: ").append(toIndentedString(facetResults)).append("\n");
    sb.append("    totalNumberOfResults: ").append(toIndentedString(totalNumberOfResults)).append("\n");
    sb.append("    warnings: ").append(toIndentedString(warnings)).append("\n");
    sb.append("    spellCorrectedQueries: ").append(toIndentedString(spellCorrectedQueries)).append("\n");
    sb.append("    featuredResultsItems: ").append(toIndentedString(featuredResultsItems)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("QueryId");
    openapiFields.add("ResultItems");
    openapiFields.add("FacetResults");
    openapiFields.add("TotalNumberOfResults");
    openapiFields.add("Warnings");
    openapiFields.add("SpellCorrectedQueries");
    openapiFields.add("FeaturedResultsItems");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QueryResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QueryResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QueryResult is not found in the empty JSON string", QueryResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QueryResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QueryResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `QueryId`
      if (jsonObj.get("QueryId") != null && !jsonObj.get("QueryId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("QueryId"));
      }
      // validate the optional field `ResultItems`
      if (jsonObj.get("ResultItems") != null && !jsonObj.get("ResultItems").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ResultItems"));
      }
      // validate the optional field `FacetResults`
      if (jsonObj.get("FacetResults") != null && !jsonObj.get("FacetResults").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("FacetResults"));
      }
      // validate the optional field `TotalNumberOfResults`
      if (jsonObj.get("TotalNumberOfResults") != null && !jsonObj.get("TotalNumberOfResults").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("TotalNumberOfResults"));
      }
      // validate the optional field `Warnings`
      if (jsonObj.get("Warnings") != null && !jsonObj.get("Warnings").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Warnings"));
      }
      // validate the optional field `SpellCorrectedQueries`
      if (jsonObj.get("SpellCorrectedQueries") != null && !jsonObj.get("SpellCorrectedQueries").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("SpellCorrectedQueries"));
      }
      // validate the optional field `FeaturedResultsItems`
      if (jsonObj.get("FeaturedResultsItems") != null && !jsonObj.get("FeaturedResultsItems").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("FeaturedResultsItems"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QueryResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QueryResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QueryResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QueryResult.class));

       return (TypeAdapter<T>) new TypeAdapter<QueryResult>() {
           @Override
           public void write(JsonWriter out, QueryResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QueryResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QueryResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QueryResult
   * @throws IOException if the JSON string is invalid with respect to QueryResult
   */
  public static QueryResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QueryResult.class);
  }

  /**
   * Convert an instance of QueryResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

