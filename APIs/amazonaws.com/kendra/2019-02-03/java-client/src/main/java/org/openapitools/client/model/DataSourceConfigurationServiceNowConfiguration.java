/*
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ServiceNowAuthenticationType;
import org.openapitools.client.model.ServiceNowBuildVersionType;
import org.openapitools.client.model.ServiceNowConfigurationKnowledgeArticleConfiguration;
import org.openapitools.client.model.ServiceNowConfigurationServiceCatalogConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DataSourceConfigurationServiceNowConfiguration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:16.778416-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DataSourceConfigurationServiceNowConfiguration {
  public static final String SERIALIZED_NAME_HOST_URL = "HostUrl";
  @SerializedName(SERIALIZED_NAME_HOST_URL)
  private String hostUrl;

  public static final String SERIALIZED_NAME_SECRET_ARN = "SecretArn";
  @SerializedName(SERIALIZED_NAME_SECRET_ARN)
  private String secretArn;

  public static final String SERIALIZED_NAME_SERVICE_NOW_BUILD_VERSION = "ServiceNowBuildVersion";
  @SerializedName(SERIALIZED_NAME_SERVICE_NOW_BUILD_VERSION)
  private ServiceNowBuildVersionType serviceNowBuildVersion;

  public static final String SERIALIZED_NAME_KNOWLEDGE_ARTICLE_CONFIGURATION = "KnowledgeArticleConfiguration";
  @SerializedName(SERIALIZED_NAME_KNOWLEDGE_ARTICLE_CONFIGURATION)
  private ServiceNowConfigurationKnowledgeArticleConfiguration knowledgeArticleConfiguration;

  public static final String SERIALIZED_NAME_SERVICE_CATALOG_CONFIGURATION = "ServiceCatalogConfiguration";
  @SerializedName(SERIALIZED_NAME_SERVICE_CATALOG_CONFIGURATION)
  private ServiceNowConfigurationServiceCatalogConfiguration serviceCatalogConfiguration;

  public static final String SERIALIZED_NAME_AUTHENTICATION_TYPE = "AuthenticationType";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_TYPE)
  private ServiceNowAuthenticationType authenticationType;

  public DataSourceConfigurationServiceNowConfiguration() {
  }

  public DataSourceConfigurationServiceNowConfiguration hostUrl(String hostUrl) {
    this.hostUrl = hostUrl;
    return this;
  }

  /**
   * Get hostUrl
   * @return hostUrl
   */
  @javax.annotation.Nonnull
  public String getHostUrl() {
    return hostUrl;
  }

  public void setHostUrl(String hostUrl) {
    this.hostUrl = hostUrl;
  }


  public DataSourceConfigurationServiceNowConfiguration secretArn(String secretArn) {
    this.secretArn = secretArn;
    return this;
  }

  /**
   * Get secretArn
   * @return secretArn
   */
  @javax.annotation.Nonnull
  public String getSecretArn() {
    return secretArn;
  }

  public void setSecretArn(String secretArn) {
    this.secretArn = secretArn;
  }


  public DataSourceConfigurationServiceNowConfiguration serviceNowBuildVersion(ServiceNowBuildVersionType serviceNowBuildVersion) {
    this.serviceNowBuildVersion = serviceNowBuildVersion;
    return this;
  }

  /**
   * Get serviceNowBuildVersion
   * @return serviceNowBuildVersion
   */
  @javax.annotation.Nonnull
  public ServiceNowBuildVersionType getServiceNowBuildVersion() {
    return serviceNowBuildVersion;
  }

  public void setServiceNowBuildVersion(ServiceNowBuildVersionType serviceNowBuildVersion) {
    this.serviceNowBuildVersion = serviceNowBuildVersion;
  }


  public DataSourceConfigurationServiceNowConfiguration knowledgeArticleConfiguration(ServiceNowConfigurationKnowledgeArticleConfiguration knowledgeArticleConfiguration) {
    this.knowledgeArticleConfiguration = knowledgeArticleConfiguration;
    return this;
  }

  /**
   * Get knowledgeArticleConfiguration
   * @return knowledgeArticleConfiguration
   */
  @javax.annotation.Nullable
  public ServiceNowConfigurationKnowledgeArticleConfiguration getKnowledgeArticleConfiguration() {
    return knowledgeArticleConfiguration;
  }

  public void setKnowledgeArticleConfiguration(ServiceNowConfigurationKnowledgeArticleConfiguration knowledgeArticleConfiguration) {
    this.knowledgeArticleConfiguration = knowledgeArticleConfiguration;
  }


  public DataSourceConfigurationServiceNowConfiguration serviceCatalogConfiguration(ServiceNowConfigurationServiceCatalogConfiguration serviceCatalogConfiguration) {
    this.serviceCatalogConfiguration = serviceCatalogConfiguration;
    return this;
  }

  /**
   * Get serviceCatalogConfiguration
   * @return serviceCatalogConfiguration
   */
  @javax.annotation.Nullable
  public ServiceNowConfigurationServiceCatalogConfiguration getServiceCatalogConfiguration() {
    return serviceCatalogConfiguration;
  }

  public void setServiceCatalogConfiguration(ServiceNowConfigurationServiceCatalogConfiguration serviceCatalogConfiguration) {
    this.serviceCatalogConfiguration = serviceCatalogConfiguration;
  }


  public DataSourceConfigurationServiceNowConfiguration authenticationType(ServiceNowAuthenticationType authenticationType) {
    this.authenticationType = authenticationType;
    return this;
  }

  /**
   * Get authenticationType
   * @return authenticationType
   */
  @javax.annotation.Nullable
  public ServiceNowAuthenticationType getAuthenticationType() {
    return authenticationType;
  }

  public void setAuthenticationType(ServiceNowAuthenticationType authenticationType) {
    this.authenticationType = authenticationType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataSourceConfigurationServiceNowConfiguration dataSourceConfigurationServiceNowConfiguration = (DataSourceConfigurationServiceNowConfiguration) o;
    return Objects.equals(this.hostUrl, dataSourceConfigurationServiceNowConfiguration.hostUrl) &&
        Objects.equals(this.secretArn, dataSourceConfigurationServiceNowConfiguration.secretArn) &&
        Objects.equals(this.serviceNowBuildVersion, dataSourceConfigurationServiceNowConfiguration.serviceNowBuildVersion) &&
        Objects.equals(this.knowledgeArticleConfiguration, dataSourceConfigurationServiceNowConfiguration.knowledgeArticleConfiguration) &&
        Objects.equals(this.serviceCatalogConfiguration, dataSourceConfigurationServiceNowConfiguration.serviceCatalogConfiguration) &&
        Objects.equals(this.authenticationType, dataSourceConfigurationServiceNowConfiguration.authenticationType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hostUrl, secretArn, serviceNowBuildVersion, knowledgeArticleConfiguration, serviceCatalogConfiguration, authenticationType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataSourceConfigurationServiceNowConfiguration {\n");
    sb.append("    hostUrl: ").append(toIndentedString(hostUrl)).append("\n");
    sb.append("    secretArn: ").append(toIndentedString(secretArn)).append("\n");
    sb.append("    serviceNowBuildVersion: ").append(toIndentedString(serviceNowBuildVersion)).append("\n");
    sb.append("    knowledgeArticleConfiguration: ").append(toIndentedString(knowledgeArticleConfiguration)).append("\n");
    sb.append("    serviceCatalogConfiguration: ").append(toIndentedString(serviceCatalogConfiguration)).append("\n");
    sb.append("    authenticationType: ").append(toIndentedString(authenticationType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("HostUrl");
    openapiFields.add("SecretArn");
    openapiFields.add("ServiceNowBuildVersion");
    openapiFields.add("KnowledgeArticleConfiguration");
    openapiFields.add("ServiceCatalogConfiguration");
    openapiFields.add("AuthenticationType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("HostUrl");
    openapiRequiredFields.add("SecretArn");
    openapiRequiredFields.add("ServiceNowBuildVersion");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataSourceConfigurationServiceNowConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataSourceConfigurationServiceNowConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataSourceConfigurationServiceNowConfiguration is not found in the empty JSON string", DataSourceConfigurationServiceNowConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataSourceConfigurationServiceNowConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataSourceConfigurationServiceNowConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DataSourceConfigurationServiceNowConfiguration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `HostUrl`
      String.validateJsonElement(jsonObj.get("HostUrl"));
      // validate the required field `SecretArn`
      String.validateJsonElement(jsonObj.get("SecretArn"));
      // validate the required field `ServiceNowBuildVersion`
      ServiceNowBuildVersionType.validateJsonElement(jsonObj.get("ServiceNowBuildVersion"));
      // validate the optional field `KnowledgeArticleConfiguration`
      if (jsonObj.get("KnowledgeArticleConfiguration") != null && !jsonObj.get("KnowledgeArticleConfiguration").isJsonNull()) {
        ServiceNowConfigurationKnowledgeArticleConfiguration.validateJsonElement(jsonObj.get("KnowledgeArticleConfiguration"));
      }
      // validate the optional field `ServiceCatalogConfiguration`
      if (jsonObj.get("ServiceCatalogConfiguration") != null && !jsonObj.get("ServiceCatalogConfiguration").isJsonNull()) {
        ServiceNowConfigurationServiceCatalogConfiguration.validateJsonElement(jsonObj.get("ServiceCatalogConfiguration"));
      }
      // validate the optional field `AuthenticationType`
      if (jsonObj.get("AuthenticationType") != null && !jsonObj.get("AuthenticationType").isJsonNull()) {
        ServiceNowAuthenticationType.validateJsonElement(jsonObj.get("AuthenticationType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataSourceConfigurationServiceNowConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataSourceConfigurationServiceNowConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataSourceConfigurationServiceNowConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataSourceConfigurationServiceNowConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<DataSourceConfigurationServiceNowConfiguration>() {
           @Override
           public void write(JsonWriter out, DataSourceConfigurationServiceNowConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataSourceConfigurationServiceNowConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DataSourceConfigurationServiceNowConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataSourceConfigurationServiceNowConfiguration
   * @throws IOException if the JSON string is invalid with respect to DataSourceConfigurationServiceNowConfiguration
   */
  public static DataSourceConfigurationServiceNowConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataSourceConfigurationServiceNowConfiguration.class);
  }

  /**
   * Convert an instance of DataSourceConfigurationServiceNowConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

