/*
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DataSourceSyncJobMetrics
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:16.778416-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DataSourceSyncJobMetrics {
  public static final String SERIALIZED_NAME_DOCUMENTS_ADDED = "DocumentsAdded";
  @SerializedName(SERIALIZED_NAME_DOCUMENTS_ADDED)
  private String documentsAdded;

  public static final String SERIALIZED_NAME_DOCUMENTS_MODIFIED = "DocumentsModified";
  @SerializedName(SERIALIZED_NAME_DOCUMENTS_MODIFIED)
  private String documentsModified;

  public static final String SERIALIZED_NAME_DOCUMENTS_DELETED = "DocumentsDeleted";
  @SerializedName(SERIALIZED_NAME_DOCUMENTS_DELETED)
  private String documentsDeleted;

  public static final String SERIALIZED_NAME_DOCUMENTS_FAILED = "DocumentsFailed";
  @SerializedName(SERIALIZED_NAME_DOCUMENTS_FAILED)
  private String documentsFailed;

  public static final String SERIALIZED_NAME_DOCUMENTS_SCANNED = "DocumentsScanned";
  @SerializedName(SERIALIZED_NAME_DOCUMENTS_SCANNED)
  private String documentsScanned;

  public DataSourceSyncJobMetrics() {
  }

  public DataSourceSyncJobMetrics documentsAdded(String documentsAdded) {
    this.documentsAdded = documentsAdded;
    return this;
  }

  /**
   * Get documentsAdded
   * @return documentsAdded
   */
  @javax.annotation.Nullable
  public String getDocumentsAdded() {
    return documentsAdded;
  }

  public void setDocumentsAdded(String documentsAdded) {
    this.documentsAdded = documentsAdded;
  }


  public DataSourceSyncJobMetrics documentsModified(String documentsModified) {
    this.documentsModified = documentsModified;
    return this;
  }

  /**
   * Get documentsModified
   * @return documentsModified
   */
  @javax.annotation.Nullable
  public String getDocumentsModified() {
    return documentsModified;
  }

  public void setDocumentsModified(String documentsModified) {
    this.documentsModified = documentsModified;
  }


  public DataSourceSyncJobMetrics documentsDeleted(String documentsDeleted) {
    this.documentsDeleted = documentsDeleted;
    return this;
  }

  /**
   * Get documentsDeleted
   * @return documentsDeleted
   */
  @javax.annotation.Nullable
  public String getDocumentsDeleted() {
    return documentsDeleted;
  }

  public void setDocumentsDeleted(String documentsDeleted) {
    this.documentsDeleted = documentsDeleted;
  }


  public DataSourceSyncJobMetrics documentsFailed(String documentsFailed) {
    this.documentsFailed = documentsFailed;
    return this;
  }

  /**
   * Get documentsFailed
   * @return documentsFailed
   */
  @javax.annotation.Nullable
  public String getDocumentsFailed() {
    return documentsFailed;
  }

  public void setDocumentsFailed(String documentsFailed) {
    this.documentsFailed = documentsFailed;
  }


  public DataSourceSyncJobMetrics documentsScanned(String documentsScanned) {
    this.documentsScanned = documentsScanned;
    return this;
  }

  /**
   * Get documentsScanned
   * @return documentsScanned
   */
  @javax.annotation.Nullable
  public String getDocumentsScanned() {
    return documentsScanned;
  }

  public void setDocumentsScanned(String documentsScanned) {
    this.documentsScanned = documentsScanned;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataSourceSyncJobMetrics dataSourceSyncJobMetrics = (DataSourceSyncJobMetrics) o;
    return Objects.equals(this.documentsAdded, dataSourceSyncJobMetrics.documentsAdded) &&
        Objects.equals(this.documentsModified, dataSourceSyncJobMetrics.documentsModified) &&
        Objects.equals(this.documentsDeleted, dataSourceSyncJobMetrics.documentsDeleted) &&
        Objects.equals(this.documentsFailed, dataSourceSyncJobMetrics.documentsFailed) &&
        Objects.equals(this.documentsScanned, dataSourceSyncJobMetrics.documentsScanned);
  }

  @Override
  public int hashCode() {
    return Objects.hash(documentsAdded, documentsModified, documentsDeleted, documentsFailed, documentsScanned);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataSourceSyncJobMetrics {\n");
    sb.append("    documentsAdded: ").append(toIndentedString(documentsAdded)).append("\n");
    sb.append("    documentsModified: ").append(toIndentedString(documentsModified)).append("\n");
    sb.append("    documentsDeleted: ").append(toIndentedString(documentsDeleted)).append("\n");
    sb.append("    documentsFailed: ").append(toIndentedString(documentsFailed)).append("\n");
    sb.append("    documentsScanned: ").append(toIndentedString(documentsScanned)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DocumentsAdded");
    openapiFields.add("DocumentsModified");
    openapiFields.add("DocumentsDeleted");
    openapiFields.add("DocumentsFailed");
    openapiFields.add("DocumentsScanned");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataSourceSyncJobMetrics
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataSourceSyncJobMetrics.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataSourceSyncJobMetrics is not found in the empty JSON string", DataSourceSyncJobMetrics.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataSourceSyncJobMetrics.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataSourceSyncJobMetrics` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `DocumentsAdded`
      if (jsonObj.get("DocumentsAdded") != null && !jsonObj.get("DocumentsAdded").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DocumentsAdded"));
      }
      // validate the optional field `DocumentsModified`
      if (jsonObj.get("DocumentsModified") != null && !jsonObj.get("DocumentsModified").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DocumentsModified"));
      }
      // validate the optional field `DocumentsDeleted`
      if (jsonObj.get("DocumentsDeleted") != null && !jsonObj.get("DocumentsDeleted").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DocumentsDeleted"));
      }
      // validate the optional field `DocumentsFailed`
      if (jsonObj.get("DocumentsFailed") != null && !jsonObj.get("DocumentsFailed").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DocumentsFailed"));
      }
      // validate the optional field `DocumentsScanned`
      if (jsonObj.get("DocumentsScanned") != null && !jsonObj.get("DocumentsScanned").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DocumentsScanned"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataSourceSyncJobMetrics.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataSourceSyncJobMetrics' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataSourceSyncJobMetrics> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataSourceSyncJobMetrics.class));

       return (TypeAdapter<T>) new TypeAdapter<DataSourceSyncJobMetrics>() {
           @Override
           public void write(JsonWriter out, DataSourceSyncJobMetrics value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataSourceSyncJobMetrics read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DataSourceSyncJobMetrics given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataSourceSyncJobMetrics
   * @throws IOException if the JSON string is invalid with respect to DataSourceSyncJobMetrics
   */
  public static DataSourceSyncJobMetrics fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataSourceSyncJobMetrics.class);
  }

  /**
   * Convert an instance of DataSourceSyncJobMetrics to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

