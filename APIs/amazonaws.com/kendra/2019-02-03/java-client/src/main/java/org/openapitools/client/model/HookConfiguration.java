/*
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.HookConfigurationInvocationCondition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;Provides the configuration information for invoking a Lambda function in Lambda to alter document metadata and content when ingesting documents into Amazon Kendra. You can configure your Lambda function using &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kendra/latest/dg/API_CustomDocumentEnrichmentConfiguration.html\&quot;&gt;PreExtractionHookConfiguration&lt;/a&gt; if you want to apply advanced alterations on the original or raw documents. If you want to apply advanced alterations on the Amazon Kendra structured documents, you must configure your Lambda function using &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kendra/latest/dg/API_CustomDocumentEnrichmentConfiguration.html\&quot;&gt;PostExtractionHookConfiguration&lt;/a&gt;. You can only invoke one Lambda function. However, this function can invoke other functions it requires.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kendra/latest/dg/custom-document-enrichment.html\&quot;&gt;Customizing document metadata during the ingestion process&lt;/a&gt;.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:16.778416-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HookConfiguration {
  public static final String SERIALIZED_NAME_INVOCATION_CONDITION = "InvocationCondition";
  @SerializedName(SERIALIZED_NAME_INVOCATION_CONDITION)
  private HookConfigurationInvocationCondition invocationCondition;

  public static final String SERIALIZED_NAME_LAMBDA_ARN = "LambdaArn";
  @SerializedName(SERIALIZED_NAME_LAMBDA_ARN)
  private String lambdaArn;

  public static final String SERIALIZED_NAME_S3_BUCKET = "S3Bucket";
  @SerializedName(SERIALIZED_NAME_S3_BUCKET)
  private String s3Bucket;

  public HookConfiguration() {
  }

  public HookConfiguration invocationCondition(HookConfigurationInvocationCondition invocationCondition) {
    this.invocationCondition = invocationCondition;
    return this;
  }

  /**
   * Get invocationCondition
   * @return invocationCondition
   */
  @javax.annotation.Nullable
  public HookConfigurationInvocationCondition getInvocationCondition() {
    return invocationCondition;
  }

  public void setInvocationCondition(HookConfigurationInvocationCondition invocationCondition) {
    this.invocationCondition = invocationCondition;
  }


  public HookConfiguration lambdaArn(String lambdaArn) {
    this.lambdaArn = lambdaArn;
    return this;
  }

  /**
   * Get lambdaArn
   * @return lambdaArn
   */
  @javax.annotation.Nonnull
  public String getLambdaArn() {
    return lambdaArn;
  }

  public void setLambdaArn(String lambdaArn) {
    this.lambdaArn = lambdaArn;
  }


  public HookConfiguration s3Bucket(String s3Bucket) {
    this.s3Bucket = s3Bucket;
    return this;
  }

  /**
   * Get s3Bucket
   * @return s3Bucket
   */
  @javax.annotation.Nonnull
  public String getS3Bucket() {
    return s3Bucket;
  }

  public void setS3Bucket(String s3Bucket) {
    this.s3Bucket = s3Bucket;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HookConfiguration hookConfiguration = (HookConfiguration) o;
    return Objects.equals(this.invocationCondition, hookConfiguration.invocationCondition) &&
        Objects.equals(this.lambdaArn, hookConfiguration.lambdaArn) &&
        Objects.equals(this.s3Bucket, hookConfiguration.s3Bucket);
  }

  @Override
  public int hashCode() {
    return Objects.hash(invocationCondition, lambdaArn, s3Bucket);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HookConfiguration {\n");
    sb.append("    invocationCondition: ").append(toIndentedString(invocationCondition)).append("\n");
    sb.append("    lambdaArn: ").append(toIndentedString(lambdaArn)).append("\n");
    sb.append("    s3Bucket: ").append(toIndentedString(s3Bucket)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("InvocationCondition");
    openapiFields.add("LambdaArn");
    openapiFields.add("S3Bucket");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("LambdaArn");
    openapiRequiredFields.add("S3Bucket");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HookConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HookConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HookConfiguration is not found in the empty JSON string", HookConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HookConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HookConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : HookConfiguration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `InvocationCondition`
      if (jsonObj.get("InvocationCondition") != null && !jsonObj.get("InvocationCondition").isJsonNull()) {
        HookConfigurationInvocationCondition.validateJsonElement(jsonObj.get("InvocationCondition"));
      }
      // validate the required field `LambdaArn`
      String.validateJsonElement(jsonObj.get("LambdaArn"));
      // validate the required field `S3Bucket`
      String.validateJsonElement(jsonObj.get("S3Bucket"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HookConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HookConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HookConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HookConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<HookConfiguration>() {
           @Override
           public void write(JsonWriter out, HookConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HookConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HookConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HookConfiguration
   * @throws IOException if the JSON string is invalid with respect to HookConfiguration
   */
  public static HookConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HookConfiguration.class);
  }

  /**
   * Convert an instance of HookConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

