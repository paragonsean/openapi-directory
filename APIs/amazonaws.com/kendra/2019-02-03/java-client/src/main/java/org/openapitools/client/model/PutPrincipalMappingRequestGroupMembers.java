/*
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GroupMembersS3PathforGroupMembers;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PutPrincipalMappingRequestGroupMembers
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:16.778416-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PutPrincipalMappingRequestGroupMembers {
  public static final String SERIALIZED_NAME_MEMBER_GROUPS = "MemberGroups";
  @SerializedName(SERIALIZED_NAME_MEMBER_GROUPS)
  private List memberGroups;

  public static final String SERIALIZED_NAME_MEMBER_USERS = "MemberUsers";
  @SerializedName(SERIALIZED_NAME_MEMBER_USERS)
  private List memberUsers;

  public static final String SERIALIZED_NAME_S3_PATHFOR_GROUP_MEMBERS = "S3PathforGroupMembers";
  @SerializedName(SERIALIZED_NAME_S3_PATHFOR_GROUP_MEMBERS)
  private GroupMembersS3PathforGroupMembers s3PathforGroupMembers;

  public PutPrincipalMappingRequestGroupMembers() {
  }

  public PutPrincipalMappingRequestGroupMembers memberGroups(List memberGroups) {
    this.memberGroups = memberGroups;
    return this;
  }

  /**
   * Get memberGroups
   * @return memberGroups
   */
  @javax.annotation.Nullable
  public List getMemberGroups() {
    return memberGroups;
  }

  public void setMemberGroups(List memberGroups) {
    this.memberGroups = memberGroups;
  }


  public PutPrincipalMappingRequestGroupMembers memberUsers(List memberUsers) {
    this.memberUsers = memberUsers;
    return this;
  }

  /**
   * Get memberUsers
   * @return memberUsers
   */
  @javax.annotation.Nullable
  public List getMemberUsers() {
    return memberUsers;
  }

  public void setMemberUsers(List memberUsers) {
    this.memberUsers = memberUsers;
  }


  public PutPrincipalMappingRequestGroupMembers s3PathforGroupMembers(GroupMembersS3PathforGroupMembers s3PathforGroupMembers) {
    this.s3PathforGroupMembers = s3PathforGroupMembers;
    return this;
  }

  /**
   * Get s3PathforGroupMembers
   * @return s3PathforGroupMembers
   */
  @javax.annotation.Nullable
  public GroupMembersS3PathforGroupMembers getS3PathforGroupMembers() {
    return s3PathforGroupMembers;
  }

  public void setS3PathforGroupMembers(GroupMembersS3PathforGroupMembers s3PathforGroupMembers) {
    this.s3PathforGroupMembers = s3PathforGroupMembers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PutPrincipalMappingRequestGroupMembers putPrincipalMappingRequestGroupMembers = (PutPrincipalMappingRequestGroupMembers) o;
    return Objects.equals(this.memberGroups, putPrincipalMappingRequestGroupMembers.memberGroups) &&
        Objects.equals(this.memberUsers, putPrincipalMappingRequestGroupMembers.memberUsers) &&
        Objects.equals(this.s3PathforGroupMembers, putPrincipalMappingRequestGroupMembers.s3PathforGroupMembers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(memberGroups, memberUsers, s3PathforGroupMembers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PutPrincipalMappingRequestGroupMembers {\n");
    sb.append("    memberGroups: ").append(toIndentedString(memberGroups)).append("\n");
    sb.append("    memberUsers: ").append(toIndentedString(memberUsers)).append("\n");
    sb.append("    s3PathforGroupMembers: ").append(toIndentedString(s3PathforGroupMembers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("MemberGroups");
    openapiFields.add("MemberUsers");
    openapiFields.add("S3PathforGroupMembers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PutPrincipalMappingRequestGroupMembers
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PutPrincipalMappingRequestGroupMembers.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PutPrincipalMappingRequestGroupMembers is not found in the empty JSON string", PutPrincipalMappingRequestGroupMembers.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PutPrincipalMappingRequestGroupMembers.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PutPrincipalMappingRequestGroupMembers` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `MemberGroups`
      if (jsonObj.get("MemberGroups") != null && !jsonObj.get("MemberGroups").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("MemberGroups"));
      }
      // validate the optional field `MemberUsers`
      if (jsonObj.get("MemberUsers") != null && !jsonObj.get("MemberUsers").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("MemberUsers"));
      }
      // validate the optional field `S3PathforGroupMembers`
      if (jsonObj.get("S3PathforGroupMembers") != null && !jsonObj.get("S3PathforGroupMembers").isJsonNull()) {
        GroupMembersS3PathforGroupMembers.validateJsonElement(jsonObj.get("S3PathforGroupMembers"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PutPrincipalMappingRequestGroupMembers.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PutPrincipalMappingRequestGroupMembers' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PutPrincipalMappingRequestGroupMembers> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PutPrincipalMappingRequestGroupMembers.class));

       return (TypeAdapter<T>) new TypeAdapter<PutPrincipalMappingRequestGroupMembers>() {
           @Override
           public void write(JsonWriter out, PutPrincipalMappingRequestGroupMembers value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PutPrincipalMappingRequestGroupMembers read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PutPrincipalMappingRequestGroupMembers given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PutPrincipalMappingRequestGroupMembers
   * @throws IOException if the JSON string is invalid with respect to PutPrincipalMappingRequestGroupMembers
   */
  public static PutPrincipalMappingRequestGroupMembers fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PutPrincipalMappingRequestGroupMembers.class);
  }

  /**
   * Convert an instance of PutPrincipalMappingRequestGroupMembers to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

