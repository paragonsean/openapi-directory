/*
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AttributeFilterContainsAll;
import org.openapitools.client.model.AttributeFilterContainsAny;
import org.openapitools.client.model.AttributeFilterEqualsTo;
import org.openapitools.client.model.AttributeFilterGreaterThan;
import org.openapitools.client.model.AttributeFilterGreaterThanOrEquals;
import org.openapitools.client.model.AttributeFilterLessThan;
import org.openapitools.client.model.AttributeFilterLessThanOrEquals;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AttributeFilterNotFilter
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:16.778416-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AttributeFilterNotFilter {
  public static final String SERIALIZED_NAME_AND_ALL_FILTERS = "AndAllFilters";
  @SerializedName(SERIALIZED_NAME_AND_ALL_FILTERS)
  private List andAllFilters;

  public static final String SERIALIZED_NAME_OR_ALL_FILTERS = "OrAllFilters";
  @SerializedName(SERIALIZED_NAME_OR_ALL_FILTERS)
  private List orAllFilters;

  public static final String SERIALIZED_NAME_NOT_FILTER = "NotFilter";
  @SerializedName(SERIALIZED_NAME_NOT_FILTER)
  private AttributeFilterNotFilter notFilter;

  public static final String SERIALIZED_NAME_EQUALS_TO = "EqualsTo";
  @SerializedName(SERIALIZED_NAME_EQUALS_TO)
  private AttributeFilterEqualsTo equalsTo;

  public static final String SERIALIZED_NAME_CONTAINS_ALL = "ContainsAll";
  @SerializedName(SERIALIZED_NAME_CONTAINS_ALL)
  private AttributeFilterContainsAll containsAll;

  public static final String SERIALIZED_NAME_CONTAINS_ANY = "ContainsAny";
  @SerializedName(SERIALIZED_NAME_CONTAINS_ANY)
  private AttributeFilterContainsAny containsAny;

  public static final String SERIALIZED_NAME_GREATER_THAN = "GreaterThan";
  @SerializedName(SERIALIZED_NAME_GREATER_THAN)
  private AttributeFilterGreaterThan greaterThan;

  public static final String SERIALIZED_NAME_GREATER_THAN_OR_EQUALS = "GreaterThanOrEquals";
  @SerializedName(SERIALIZED_NAME_GREATER_THAN_OR_EQUALS)
  private AttributeFilterGreaterThanOrEquals greaterThanOrEquals;

  public static final String SERIALIZED_NAME_LESS_THAN = "LessThan";
  @SerializedName(SERIALIZED_NAME_LESS_THAN)
  private AttributeFilterLessThan lessThan;

  public static final String SERIALIZED_NAME_LESS_THAN_OR_EQUALS = "LessThanOrEquals";
  @SerializedName(SERIALIZED_NAME_LESS_THAN_OR_EQUALS)
  private AttributeFilterLessThanOrEquals lessThanOrEquals;

  public AttributeFilterNotFilter() {
  }

  public AttributeFilterNotFilter andAllFilters(List andAllFilters) {
    this.andAllFilters = andAllFilters;
    return this;
  }

  /**
   * Get andAllFilters
   * @return andAllFilters
   */
  @javax.annotation.Nullable
  public List getAndAllFilters() {
    return andAllFilters;
  }

  public void setAndAllFilters(List andAllFilters) {
    this.andAllFilters = andAllFilters;
  }


  public AttributeFilterNotFilter orAllFilters(List orAllFilters) {
    this.orAllFilters = orAllFilters;
    return this;
  }

  /**
   * Get orAllFilters
   * @return orAllFilters
   */
  @javax.annotation.Nullable
  public List getOrAllFilters() {
    return orAllFilters;
  }

  public void setOrAllFilters(List orAllFilters) {
    this.orAllFilters = orAllFilters;
  }


  public AttributeFilterNotFilter notFilter(AttributeFilterNotFilter notFilter) {
    this.notFilter = notFilter;
    return this;
  }

  /**
   * Get notFilter
   * @return notFilter
   */
  @javax.annotation.Nullable
  public AttributeFilterNotFilter getNotFilter() {
    return notFilter;
  }

  public void setNotFilter(AttributeFilterNotFilter notFilter) {
    this.notFilter = notFilter;
  }


  public AttributeFilterNotFilter equalsTo(AttributeFilterEqualsTo equalsTo) {
    this.equalsTo = equalsTo;
    return this;
  }

  /**
   * Get equalsTo
   * @return equalsTo
   */
  @javax.annotation.Nullable
  public AttributeFilterEqualsTo getEqualsTo() {
    return equalsTo;
  }

  public void setEqualsTo(AttributeFilterEqualsTo equalsTo) {
    this.equalsTo = equalsTo;
  }


  public AttributeFilterNotFilter containsAll(AttributeFilterContainsAll containsAll) {
    this.containsAll = containsAll;
    return this;
  }

  /**
   * Get containsAll
   * @return containsAll
   */
  @javax.annotation.Nullable
  public AttributeFilterContainsAll getContainsAll() {
    return containsAll;
  }

  public void setContainsAll(AttributeFilterContainsAll containsAll) {
    this.containsAll = containsAll;
  }


  public AttributeFilterNotFilter containsAny(AttributeFilterContainsAny containsAny) {
    this.containsAny = containsAny;
    return this;
  }

  /**
   * Get containsAny
   * @return containsAny
   */
  @javax.annotation.Nullable
  public AttributeFilterContainsAny getContainsAny() {
    return containsAny;
  }

  public void setContainsAny(AttributeFilterContainsAny containsAny) {
    this.containsAny = containsAny;
  }


  public AttributeFilterNotFilter greaterThan(AttributeFilterGreaterThan greaterThan) {
    this.greaterThan = greaterThan;
    return this;
  }

  /**
   * Get greaterThan
   * @return greaterThan
   */
  @javax.annotation.Nullable
  public AttributeFilterGreaterThan getGreaterThan() {
    return greaterThan;
  }

  public void setGreaterThan(AttributeFilterGreaterThan greaterThan) {
    this.greaterThan = greaterThan;
  }


  public AttributeFilterNotFilter greaterThanOrEquals(AttributeFilterGreaterThanOrEquals greaterThanOrEquals) {
    this.greaterThanOrEquals = greaterThanOrEquals;
    return this;
  }

  /**
   * Get greaterThanOrEquals
   * @return greaterThanOrEquals
   */
  @javax.annotation.Nullable
  public AttributeFilterGreaterThanOrEquals getGreaterThanOrEquals() {
    return greaterThanOrEquals;
  }

  public void setGreaterThanOrEquals(AttributeFilterGreaterThanOrEquals greaterThanOrEquals) {
    this.greaterThanOrEquals = greaterThanOrEquals;
  }


  public AttributeFilterNotFilter lessThan(AttributeFilterLessThan lessThan) {
    this.lessThan = lessThan;
    return this;
  }

  /**
   * Get lessThan
   * @return lessThan
   */
  @javax.annotation.Nullable
  public AttributeFilterLessThan getLessThan() {
    return lessThan;
  }

  public void setLessThan(AttributeFilterLessThan lessThan) {
    this.lessThan = lessThan;
  }


  public AttributeFilterNotFilter lessThanOrEquals(AttributeFilterLessThanOrEquals lessThanOrEquals) {
    this.lessThanOrEquals = lessThanOrEquals;
    return this;
  }

  /**
   * Get lessThanOrEquals
   * @return lessThanOrEquals
   */
  @javax.annotation.Nullable
  public AttributeFilterLessThanOrEquals getLessThanOrEquals() {
    return lessThanOrEquals;
  }

  public void setLessThanOrEquals(AttributeFilterLessThanOrEquals lessThanOrEquals) {
    this.lessThanOrEquals = lessThanOrEquals;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AttributeFilterNotFilter attributeFilterNotFilter = (AttributeFilterNotFilter) o;
    return Objects.equals(this.andAllFilters, attributeFilterNotFilter.andAllFilters) &&
        Objects.equals(this.orAllFilters, attributeFilterNotFilter.orAllFilters) &&
        Objects.equals(this.notFilter, attributeFilterNotFilter.notFilter) &&
        Objects.equals(this.equalsTo, attributeFilterNotFilter.equalsTo) &&
        Objects.equals(this.containsAll, attributeFilterNotFilter.containsAll) &&
        Objects.equals(this.containsAny, attributeFilterNotFilter.containsAny) &&
        Objects.equals(this.greaterThan, attributeFilterNotFilter.greaterThan) &&
        Objects.equals(this.greaterThanOrEquals, attributeFilterNotFilter.greaterThanOrEquals) &&
        Objects.equals(this.lessThan, attributeFilterNotFilter.lessThan) &&
        Objects.equals(this.lessThanOrEquals, attributeFilterNotFilter.lessThanOrEquals);
  }

  @Override
  public int hashCode() {
    return Objects.hash(andAllFilters, orAllFilters, notFilter, equalsTo, containsAll, containsAny, greaterThan, greaterThanOrEquals, lessThan, lessThanOrEquals);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AttributeFilterNotFilter {\n");
    sb.append("    andAllFilters: ").append(toIndentedString(andAllFilters)).append("\n");
    sb.append("    orAllFilters: ").append(toIndentedString(orAllFilters)).append("\n");
    sb.append("    notFilter: ").append(toIndentedString(notFilter)).append("\n");
    sb.append("    equalsTo: ").append(toIndentedString(equalsTo)).append("\n");
    sb.append("    containsAll: ").append(toIndentedString(containsAll)).append("\n");
    sb.append("    containsAny: ").append(toIndentedString(containsAny)).append("\n");
    sb.append("    greaterThan: ").append(toIndentedString(greaterThan)).append("\n");
    sb.append("    greaterThanOrEquals: ").append(toIndentedString(greaterThanOrEquals)).append("\n");
    sb.append("    lessThan: ").append(toIndentedString(lessThan)).append("\n");
    sb.append("    lessThanOrEquals: ").append(toIndentedString(lessThanOrEquals)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AndAllFilters");
    openapiFields.add("OrAllFilters");
    openapiFields.add("NotFilter");
    openapiFields.add("EqualsTo");
    openapiFields.add("ContainsAll");
    openapiFields.add("ContainsAny");
    openapiFields.add("GreaterThan");
    openapiFields.add("GreaterThanOrEquals");
    openapiFields.add("LessThan");
    openapiFields.add("LessThanOrEquals");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AttributeFilterNotFilter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AttributeFilterNotFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AttributeFilterNotFilter is not found in the empty JSON string", AttributeFilterNotFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AttributeFilterNotFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AttributeFilterNotFilter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AndAllFilters`
      if (jsonObj.get("AndAllFilters") != null && !jsonObj.get("AndAllFilters").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("AndAllFilters"));
      }
      // validate the optional field `OrAllFilters`
      if (jsonObj.get("OrAllFilters") != null && !jsonObj.get("OrAllFilters").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("OrAllFilters"));
      }
      // validate the optional field `NotFilter`
      if (jsonObj.get("NotFilter") != null && !jsonObj.get("NotFilter").isJsonNull()) {
        AttributeFilterNotFilter.validateJsonElement(jsonObj.get("NotFilter"));
      }
      // validate the optional field `EqualsTo`
      if (jsonObj.get("EqualsTo") != null && !jsonObj.get("EqualsTo").isJsonNull()) {
        AttributeFilterEqualsTo.validateJsonElement(jsonObj.get("EqualsTo"));
      }
      // validate the optional field `ContainsAll`
      if (jsonObj.get("ContainsAll") != null && !jsonObj.get("ContainsAll").isJsonNull()) {
        AttributeFilterContainsAll.validateJsonElement(jsonObj.get("ContainsAll"));
      }
      // validate the optional field `ContainsAny`
      if (jsonObj.get("ContainsAny") != null && !jsonObj.get("ContainsAny").isJsonNull()) {
        AttributeFilterContainsAny.validateJsonElement(jsonObj.get("ContainsAny"));
      }
      // validate the optional field `GreaterThan`
      if (jsonObj.get("GreaterThan") != null && !jsonObj.get("GreaterThan").isJsonNull()) {
        AttributeFilterGreaterThan.validateJsonElement(jsonObj.get("GreaterThan"));
      }
      // validate the optional field `GreaterThanOrEquals`
      if (jsonObj.get("GreaterThanOrEquals") != null && !jsonObj.get("GreaterThanOrEquals").isJsonNull()) {
        AttributeFilterGreaterThanOrEquals.validateJsonElement(jsonObj.get("GreaterThanOrEquals"));
      }
      // validate the optional field `LessThan`
      if (jsonObj.get("LessThan") != null && !jsonObj.get("LessThan").isJsonNull()) {
        AttributeFilterLessThan.validateJsonElement(jsonObj.get("LessThan"));
      }
      // validate the optional field `LessThanOrEquals`
      if (jsonObj.get("LessThanOrEquals") != null && !jsonObj.get("LessThanOrEquals").isJsonNull()) {
        AttributeFilterLessThanOrEquals.validateJsonElement(jsonObj.get("LessThanOrEquals"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AttributeFilterNotFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AttributeFilterNotFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AttributeFilterNotFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AttributeFilterNotFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<AttributeFilterNotFilter>() {
           @Override
           public void write(JsonWriter out, AttributeFilterNotFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AttributeFilterNotFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AttributeFilterNotFilter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AttributeFilterNotFilter
   * @throws IOException if the JSON string is invalid with respect to AttributeFilterNotFilter
   */
  public static AttributeFilterNotFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AttributeFilterNotFilter.class);
  }

  /**
   * Convert an instance of AttributeFilterNotFilter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

