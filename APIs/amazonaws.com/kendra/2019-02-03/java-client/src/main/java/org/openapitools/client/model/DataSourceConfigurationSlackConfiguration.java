/*
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SlackConfigurationVpcConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DataSourceConfigurationSlackConfiguration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:16.778416-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DataSourceConfigurationSlackConfiguration {
  public static final String SERIALIZED_NAME_TEAM_ID = "TeamId";
  @SerializedName(SERIALIZED_NAME_TEAM_ID)
  private String teamId;

  public static final String SERIALIZED_NAME_SECRET_ARN = "SecretArn";
  @SerializedName(SERIALIZED_NAME_SECRET_ARN)
  private String secretArn;

  public static final String SERIALIZED_NAME_VPC_CONFIGURATION = "VpcConfiguration";
  @SerializedName(SERIALIZED_NAME_VPC_CONFIGURATION)
  private SlackConfigurationVpcConfiguration vpcConfiguration;

  public static final String SERIALIZED_NAME_SLACK_ENTITY_LIST = "SlackEntityList";
  @SerializedName(SERIALIZED_NAME_SLACK_ENTITY_LIST)
  private List slackEntityList;

  public static final String SERIALIZED_NAME_USE_CHANGE_LOG = "UseChangeLog";
  @SerializedName(SERIALIZED_NAME_USE_CHANGE_LOG)
  private Boolean useChangeLog;

  public static final String SERIALIZED_NAME_CRAWL_BOT_MESSAGE = "CrawlBotMessage";
  @SerializedName(SERIALIZED_NAME_CRAWL_BOT_MESSAGE)
  private Boolean crawlBotMessage;

  public static final String SERIALIZED_NAME_EXCLUDE_ARCHIVED = "ExcludeArchived";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_ARCHIVED)
  private Boolean excludeArchived;

  public static final String SERIALIZED_NAME_SINCE_CRAWL_DATE = "SinceCrawlDate";
  @SerializedName(SERIALIZED_NAME_SINCE_CRAWL_DATE)
  private String sinceCrawlDate;

  public static final String SERIALIZED_NAME_LOOK_BACK_PERIOD = "LookBackPeriod";
  @SerializedName(SERIALIZED_NAME_LOOK_BACK_PERIOD)
  private Integer lookBackPeriod;

  public static final String SERIALIZED_NAME_PRIVATE_CHANNEL_FILTER = "PrivateChannelFilter";
  @SerializedName(SERIALIZED_NAME_PRIVATE_CHANNEL_FILTER)
  private List privateChannelFilter;

  public static final String SERIALIZED_NAME_PUBLIC_CHANNEL_FILTER = "PublicChannelFilter";
  @SerializedName(SERIALIZED_NAME_PUBLIC_CHANNEL_FILTER)
  private List publicChannelFilter;

  public static final String SERIALIZED_NAME_INCLUSION_PATTERNS = "InclusionPatterns";
  @SerializedName(SERIALIZED_NAME_INCLUSION_PATTERNS)
  private List inclusionPatterns;

  public static final String SERIALIZED_NAME_EXCLUSION_PATTERNS = "ExclusionPatterns";
  @SerializedName(SERIALIZED_NAME_EXCLUSION_PATTERNS)
  private List exclusionPatterns;

  public static final String SERIALIZED_NAME_FIELD_MAPPINGS = "FieldMappings";
  @SerializedName(SERIALIZED_NAME_FIELD_MAPPINGS)
  private List fieldMappings;

  public DataSourceConfigurationSlackConfiguration() {
  }

  public DataSourceConfigurationSlackConfiguration teamId(String teamId) {
    this.teamId = teamId;
    return this;
  }

  /**
   * Get teamId
   * @return teamId
   */
  @javax.annotation.Nonnull
  public String getTeamId() {
    return teamId;
  }

  public void setTeamId(String teamId) {
    this.teamId = teamId;
  }


  public DataSourceConfigurationSlackConfiguration secretArn(String secretArn) {
    this.secretArn = secretArn;
    return this;
  }

  /**
   * Get secretArn
   * @return secretArn
   */
  @javax.annotation.Nonnull
  public String getSecretArn() {
    return secretArn;
  }

  public void setSecretArn(String secretArn) {
    this.secretArn = secretArn;
  }


  public DataSourceConfigurationSlackConfiguration vpcConfiguration(SlackConfigurationVpcConfiguration vpcConfiguration) {
    this.vpcConfiguration = vpcConfiguration;
    return this;
  }

  /**
   * Get vpcConfiguration
   * @return vpcConfiguration
   */
  @javax.annotation.Nullable
  public SlackConfigurationVpcConfiguration getVpcConfiguration() {
    return vpcConfiguration;
  }

  public void setVpcConfiguration(SlackConfigurationVpcConfiguration vpcConfiguration) {
    this.vpcConfiguration = vpcConfiguration;
  }


  public DataSourceConfigurationSlackConfiguration slackEntityList(List slackEntityList) {
    this.slackEntityList = slackEntityList;
    return this;
  }

  /**
   * Get slackEntityList
   * @return slackEntityList
   */
  @javax.annotation.Nonnull
  public List getSlackEntityList() {
    return slackEntityList;
  }

  public void setSlackEntityList(List slackEntityList) {
    this.slackEntityList = slackEntityList;
  }


  public DataSourceConfigurationSlackConfiguration useChangeLog(Boolean useChangeLog) {
    this.useChangeLog = useChangeLog;
    return this;
  }

  /**
   * Get useChangeLog
   * @return useChangeLog
   */
  @javax.annotation.Nullable
  public Boolean getUseChangeLog() {
    return useChangeLog;
  }

  public void setUseChangeLog(Boolean useChangeLog) {
    this.useChangeLog = useChangeLog;
  }


  public DataSourceConfigurationSlackConfiguration crawlBotMessage(Boolean crawlBotMessage) {
    this.crawlBotMessage = crawlBotMessage;
    return this;
  }

  /**
   * Get crawlBotMessage
   * @return crawlBotMessage
   */
  @javax.annotation.Nullable
  public Boolean getCrawlBotMessage() {
    return crawlBotMessage;
  }

  public void setCrawlBotMessage(Boolean crawlBotMessage) {
    this.crawlBotMessage = crawlBotMessage;
  }


  public DataSourceConfigurationSlackConfiguration excludeArchived(Boolean excludeArchived) {
    this.excludeArchived = excludeArchived;
    return this;
  }

  /**
   * Get excludeArchived
   * @return excludeArchived
   */
  @javax.annotation.Nullable
  public Boolean getExcludeArchived() {
    return excludeArchived;
  }

  public void setExcludeArchived(Boolean excludeArchived) {
    this.excludeArchived = excludeArchived;
  }


  public DataSourceConfigurationSlackConfiguration sinceCrawlDate(String sinceCrawlDate) {
    this.sinceCrawlDate = sinceCrawlDate;
    return this;
  }

  /**
   * Get sinceCrawlDate
   * @return sinceCrawlDate
   */
  @javax.annotation.Nonnull
  public String getSinceCrawlDate() {
    return sinceCrawlDate;
  }

  public void setSinceCrawlDate(String sinceCrawlDate) {
    this.sinceCrawlDate = sinceCrawlDate;
  }


  public DataSourceConfigurationSlackConfiguration lookBackPeriod(Integer lookBackPeriod) {
    this.lookBackPeriod = lookBackPeriod;
    return this;
  }

  /**
   * Get lookBackPeriod
   * @return lookBackPeriod
   */
  @javax.annotation.Nullable
  public Integer getLookBackPeriod() {
    return lookBackPeriod;
  }

  public void setLookBackPeriod(Integer lookBackPeriod) {
    this.lookBackPeriod = lookBackPeriod;
  }


  public DataSourceConfigurationSlackConfiguration privateChannelFilter(List privateChannelFilter) {
    this.privateChannelFilter = privateChannelFilter;
    return this;
  }

  /**
   * Get privateChannelFilter
   * @return privateChannelFilter
   */
  @javax.annotation.Nullable
  public List getPrivateChannelFilter() {
    return privateChannelFilter;
  }

  public void setPrivateChannelFilter(List privateChannelFilter) {
    this.privateChannelFilter = privateChannelFilter;
  }


  public DataSourceConfigurationSlackConfiguration publicChannelFilter(List publicChannelFilter) {
    this.publicChannelFilter = publicChannelFilter;
    return this;
  }

  /**
   * Get publicChannelFilter
   * @return publicChannelFilter
   */
  @javax.annotation.Nullable
  public List getPublicChannelFilter() {
    return publicChannelFilter;
  }

  public void setPublicChannelFilter(List publicChannelFilter) {
    this.publicChannelFilter = publicChannelFilter;
  }


  public DataSourceConfigurationSlackConfiguration inclusionPatterns(List inclusionPatterns) {
    this.inclusionPatterns = inclusionPatterns;
    return this;
  }

  /**
   * Get inclusionPatterns
   * @return inclusionPatterns
   */
  @javax.annotation.Nullable
  public List getInclusionPatterns() {
    return inclusionPatterns;
  }

  public void setInclusionPatterns(List inclusionPatterns) {
    this.inclusionPatterns = inclusionPatterns;
  }


  public DataSourceConfigurationSlackConfiguration exclusionPatterns(List exclusionPatterns) {
    this.exclusionPatterns = exclusionPatterns;
    return this;
  }

  /**
   * Get exclusionPatterns
   * @return exclusionPatterns
   */
  @javax.annotation.Nullable
  public List getExclusionPatterns() {
    return exclusionPatterns;
  }

  public void setExclusionPatterns(List exclusionPatterns) {
    this.exclusionPatterns = exclusionPatterns;
  }


  public DataSourceConfigurationSlackConfiguration fieldMappings(List fieldMappings) {
    this.fieldMappings = fieldMappings;
    return this;
  }

  /**
   * Get fieldMappings
   * @return fieldMappings
   */
  @javax.annotation.Nullable
  public List getFieldMappings() {
    return fieldMappings;
  }

  public void setFieldMappings(List fieldMappings) {
    this.fieldMappings = fieldMappings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataSourceConfigurationSlackConfiguration dataSourceConfigurationSlackConfiguration = (DataSourceConfigurationSlackConfiguration) o;
    return Objects.equals(this.teamId, dataSourceConfigurationSlackConfiguration.teamId) &&
        Objects.equals(this.secretArn, dataSourceConfigurationSlackConfiguration.secretArn) &&
        Objects.equals(this.vpcConfiguration, dataSourceConfigurationSlackConfiguration.vpcConfiguration) &&
        Objects.equals(this.slackEntityList, dataSourceConfigurationSlackConfiguration.slackEntityList) &&
        Objects.equals(this.useChangeLog, dataSourceConfigurationSlackConfiguration.useChangeLog) &&
        Objects.equals(this.crawlBotMessage, dataSourceConfigurationSlackConfiguration.crawlBotMessage) &&
        Objects.equals(this.excludeArchived, dataSourceConfigurationSlackConfiguration.excludeArchived) &&
        Objects.equals(this.sinceCrawlDate, dataSourceConfigurationSlackConfiguration.sinceCrawlDate) &&
        Objects.equals(this.lookBackPeriod, dataSourceConfigurationSlackConfiguration.lookBackPeriod) &&
        Objects.equals(this.privateChannelFilter, dataSourceConfigurationSlackConfiguration.privateChannelFilter) &&
        Objects.equals(this.publicChannelFilter, dataSourceConfigurationSlackConfiguration.publicChannelFilter) &&
        Objects.equals(this.inclusionPatterns, dataSourceConfigurationSlackConfiguration.inclusionPatterns) &&
        Objects.equals(this.exclusionPatterns, dataSourceConfigurationSlackConfiguration.exclusionPatterns) &&
        Objects.equals(this.fieldMappings, dataSourceConfigurationSlackConfiguration.fieldMappings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(teamId, secretArn, vpcConfiguration, slackEntityList, useChangeLog, crawlBotMessage, excludeArchived, sinceCrawlDate, lookBackPeriod, privateChannelFilter, publicChannelFilter, inclusionPatterns, exclusionPatterns, fieldMappings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataSourceConfigurationSlackConfiguration {\n");
    sb.append("    teamId: ").append(toIndentedString(teamId)).append("\n");
    sb.append("    secretArn: ").append(toIndentedString(secretArn)).append("\n");
    sb.append("    vpcConfiguration: ").append(toIndentedString(vpcConfiguration)).append("\n");
    sb.append("    slackEntityList: ").append(toIndentedString(slackEntityList)).append("\n");
    sb.append("    useChangeLog: ").append(toIndentedString(useChangeLog)).append("\n");
    sb.append("    crawlBotMessage: ").append(toIndentedString(crawlBotMessage)).append("\n");
    sb.append("    excludeArchived: ").append(toIndentedString(excludeArchived)).append("\n");
    sb.append("    sinceCrawlDate: ").append(toIndentedString(sinceCrawlDate)).append("\n");
    sb.append("    lookBackPeriod: ").append(toIndentedString(lookBackPeriod)).append("\n");
    sb.append("    privateChannelFilter: ").append(toIndentedString(privateChannelFilter)).append("\n");
    sb.append("    publicChannelFilter: ").append(toIndentedString(publicChannelFilter)).append("\n");
    sb.append("    inclusionPatterns: ").append(toIndentedString(inclusionPatterns)).append("\n");
    sb.append("    exclusionPatterns: ").append(toIndentedString(exclusionPatterns)).append("\n");
    sb.append("    fieldMappings: ").append(toIndentedString(fieldMappings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TeamId");
    openapiFields.add("SecretArn");
    openapiFields.add("VpcConfiguration");
    openapiFields.add("SlackEntityList");
    openapiFields.add("UseChangeLog");
    openapiFields.add("CrawlBotMessage");
    openapiFields.add("ExcludeArchived");
    openapiFields.add("SinceCrawlDate");
    openapiFields.add("LookBackPeriod");
    openapiFields.add("PrivateChannelFilter");
    openapiFields.add("PublicChannelFilter");
    openapiFields.add("InclusionPatterns");
    openapiFields.add("ExclusionPatterns");
    openapiFields.add("FieldMappings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("TeamId");
    openapiRequiredFields.add("SecretArn");
    openapiRequiredFields.add("SlackEntityList");
    openapiRequiredFields.add("SinceCrawlDate");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataSourceConfigurationSlackConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataSourceConfigurationSlackConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataSourceConfigurationSlackConfiguration is not found in the empty JSON string", DataSourceConfigurationSlackConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataSourceConfigurationSlackConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataSourceConfigurationSlackConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DataSourceConfigurationSlackConfiguration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `TeamId`
      String.validateJsonElement(jsonObj.get("TeamId"));
      // validate the required field `SecretArn`
      String.validateJsonElement(jsonObj.get("SecretArn"));
      // validate the optional field `VpcConfiguration`
      if (jsonObj.get("VpcConfiguration") != null && !jsonObj.get("VpcConfiguration").isJsonNull()) {
        SlackConfigurationVpcConfiguration.validateJsonElement(jsonObj.get("VpcConfiguration"));
      }
      // validate the required field `SlackEntityList`
      List.validateJsonElement(jsonObj.get("SlackEntityList"));
      // validate the optional field `UseChangeLog`
      if (jsonObj.get("UseChangeLog") != null && !jsonObj.get("UseChangeLog").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("UseChangeLog"));
      }
      // validate the optional field `CrawlBotMessage`
      if (jsonObj.get("CrawlBotMessage") != null && !jsonObj.get("CrawlBotMessage").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("CrawlBotMessage"));
      }
      // validate the optional field `ExcludeArchived`
      if (jsonObj.get("ExcludeArchived") != null && !jsonObj.get("ExcludeArchived").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("ExcludeArchived"));
      }
      // validate the required field `SinceCrawlDate`
      String.validateJsonElement(jsonObj.get("SinceCrawlDate"));
      // validate the optional field `LookBackPeriod`
      if (jsonObj.get("LookBackPeriod") != null && !jsonObj.get("LookBackPeriod").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("LookBackPeriod"));
      }
      // validate the optional field `PrivateChannelFilter`
      if (jsonObj.get("PrivateChannelFilter") != null && !jsonObj.get("PrivateChannelFilter").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("PrivateChannelFilter"));
      }
      // validate the optional field `PublicChannelFilter`
      if (jsonObj.get("PublicChannelFilter") != null && !jsonObj.get("PublicChannelFilter").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("PublicChannelFilter"));
      }
      // validate the optional field `InclusionPatterns`
      if (jsonObj.get("InclusionPatterns") != null && !jsonObj.get("InclusionPatterns").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("InclusionPatterns"));
      }
      // validate the optional field `ExclusionPatterns`
      if (jsonObj.get("ExclusionPatterns") != null && !jsonObj.get("ExclusionPatterns").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ExclusionPatterns"));
      }
      // validate the optional field `FieldMappings`
      if (jsonObj.get("FieldMappings") != null && !jsonObj.get("FieldMappings").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("FieldMappings"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataSourceConfigurationSlackConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataSourceConfigurationSlackConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataSourceConfigurationSlackConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataSourceConfigurationSlackConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<DataSourceConfigurationSlackConfiguration>() {
           @Override
           public void write(JsonWriter out, DataSourceConfigurationSlackConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataSourceConfigurationSlackConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DataSourceConfigurationSlackConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataSourceConfigurationSlackConfiguration
   * @throws IOException if the JSON string is invalid with respect to DataSourceConfigurationSlackConfiguration
   */
  public static DataSourceConfigurationSlackConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataSourceConfigurationSlackConfiguration.class);
  }

  /**
   * Convert an instance of DataSourceConfigurationSlackConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

