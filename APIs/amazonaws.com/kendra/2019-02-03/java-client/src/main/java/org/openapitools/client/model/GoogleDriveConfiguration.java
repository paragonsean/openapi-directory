/*
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Provides the configuration information to connect to Google Drive as your data source.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:16.778416-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleDriveConfiguration {
  public static final String SERIALIZED_NAME_SECRET_ARN = "SecretArn";
  @SerializedName(SERIALIZED_NAME_SECRET_ARN)
  private String secretArn;

  public static final String SERIALIZED_NAME_INCLUSION_PATTERNS = "InclusionPatterns";
  @SerializedName(SERIALIZED_NAME_INCLUSION_PATTERNS)
  private List inclusionPatterns;

  public static final String SERIALIZED_NAME_EXCLUSION_PATTERNS = "ExclusionPatterns";
  @SerializedName(SERIALIZED_NAME_EXCLUSION_PATTERNS)
  private List exclusionPatterns;

  public static final String SERIALIZED_NAME_FIELD_MAPPINGS = "FieldMappings";
  @SerializedName(SERIALIZED_NAME_FIELD_MAPPINGS)
  private List fieldMappings;

  public static final String SERIALIZED_NAME_EXCLUDE_MIME_TYPES = "ExcludeMimeTypes";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_MIME_TYPES)
  private List excludeMimeTypes;

  public static final String SERIALIZED_NAME_EXCLUDE_USER_ACCOUNTS = "ExcludeUserAccounts";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_USER_ACCOUNTS)
  private List excludeUserAccounts;

  public static final String SERIALIZED_NAME_EXCLUDE_SHARED_DRIVES = "ExcludeSharedDrives";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_SHARED_DRIVES)
  private List excludeSharedDrives;

  public GoogleDriveConfiguration() {
  }

  public GoogleDriveConfiguration secretArn(String secretArn) {
    this.secretArn = secretArn;
    return this;
  }

  /**
   * Get secretArn
   * @return secretArn
   */
  @javax.annotation.Nonnull
  public String getSecretArn() {
    return secretArn;
  }

  public void setSecretArn(String secretArn) {
    this.secretArn = secretArn;
  }


  public GoogleDriveConfiguration inclusionPatterns(List inclusionPatterns) {
    this.inclusionPatterns = inclusionPatterns;
    return this;
  }

  /**
   * Get inclusionPatterns
   * @return inclusionPatterns
   */
  @javax.annotation.Nullable
  public List getInclusionPatterns() {
    return inclusionPatterns;
  }

  public void setInclusionPatterns(List inclusionPatterns) {
    this.inclusionPatterns = inclusionPatterns;
  }


  public GoogleDriveConfiguration exclusionPatterns(List exclusionPatterns) {
    this.exclusionPatterns = exclusionPatterns;
    return this;
  }

  /**
   * Get exclusionPatterns
   * @return exclusionPatterns
   */
  @javax.annotation.Nullable
  public List getExclusionPatterns() {
    return exclusionPatterns;
  }

  public void setExclusionPatterns(List exclusionPatterns) {
    this.exclusionPatterns = exclusionPatterns;
  }


  public GoogleDriveConfiguration fieldMappings(List fieldMappings) {
    this.fieldMappings = fieldMappings;
    return this;
  }

  /**
   * Get fieldMappings
   * @return fieldMappings
   */
  @javax.annotation.Nullable
  public List getFieldMappings() {
    return fieldMappings;
  }

  public void setFieldMappings(List fieldMappings) {
    this.fieldMappings = fieldMappings;
  }


  public GoogleDriveConfiguration excludeMimeTypes(List excludeMimeTypes) {
    this.excludeMimeTypes = excludeMimeTypes;
    return this;
  }

  /**
   * Get excludeMimeTypes
   * @return excludeMimeTypes
   */
  @javax.annotation.Nullable
  public List getExcludeMimeTypes() {
    return excludeMimeTypes;
  }

  public void setExcludeMimeTypes(List excludeMimeTypes) {
    this.excludeMimeTypes = excludeMimeTypes;
  }


  public GoogleDriveConfiguration excludeUserAccounts(List excludeUserAccounts) {
    this.excludeUserAccounts = excludeUserAccounts;
    return this;
  }

  /**
   * Get excludeUserAccounts
   * @return excludeUserAccounts
   */
  @javax.annotation.Nullable
  public List getExcludeUserAccounts() {
    return excludeUserAccounts;
  }

  public void setExcludeUserAccounts(List excludeUserAccounts) {
    this.excludeUserAccounts = excludeUserAccounts;
  }


  public GoogleDriveConfiguration excludeSharedDrives(List excludeSharedDrives) {
    this.excludeSharedDrives = excludeSharedDrives;
    return this;
  }

  /**
   * Get excludeSharedDrives
   * @return excludeSharedDrives
   */
  @javax.annotation.Nullable
  public List getExcludeSharedDrives() {
    return excludeSharedDrives;
  }

  public void setExcludeSharedDrives(List excludeSharedDrives) {
    this.excludeSharedDrives = excludeSharedDrives;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleDriveConfiguration googleDriveConfiguration = (GoogleDriveConfiguration) o;
    return Objects.equals(this.secretArn, googleDriveConfiguration.secretArn) &&
        Objects.equals(this.inclusionPatterns, googleDriveConfiguration.inclusionPatterns) &&
        Objects.equals(this.exclusionPatterns, googleDriveConfiguration.exclusionPatterns) &&
        Objects.equals(this.fieldMappings, googleDriveConfiguration.fieldMappings) &&
        Objects.equals(this.excludeMimeTypes, googleDriveConfiguration.excludeMimeTypes) &&
        Objects.equals(this.excludeUserAccounts, googleDriveConfiguration.excludeUserAccounts) &&
        Objects.equals(this.excludeSharedDrives, googleDriveConfiguration.excludeSharedDrives);
  }

  @Override
  public int hashCode() {
    return Objects.hash(secretArn, inclusionPatterns, exclusionPatterns, fieldMappings, excludeMimeTypes, excludeUserAccounts, excludeSharedDrives);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleDriveConfiguration {\n");
    sb.append("    secretArn: ").append(toIndentedString(secretArn)).append("\n");
    sb.append("    inclusionPatterns: ").append(toIndentedString(inclusionPatterns)).append("\n");
    sb.append("    exclusionPatterns: ").append(toIndentedString(exclusionPatterns)).append("\n");
    sb.append("    fieldMappings: ").append(toIndentedString(fieldMappings)).append("\n");
    sb.append("    excludeMimeTypes: ").append(toIndentedString(excludeMimeTypes)).append("\n");
    sb.append("    excludeUserAccounts: ").append(toIndentedString(excludeUserAccounts)).append("\n");
    sb.append("    excludeSharedDrives: ").append(toIndentedString(excludeSharedDrives)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SecretArn");
    openapiFields.add("InclusionPatterns");
    openapiFields.add("ExclusionPatterns");
    openapiFields.add("FieldMappings");
    openapiFields.add("ExcludeMimeTypes");
    openapiFields.add("ExcludeUserAccounts");
    openapiFields.add("ExcludeSharedDrives");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("SecretArn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleDriveConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleDriveConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleDriveConfiguration is not found in the empty JSON string", GoogleDriveConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleDriveConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleDriveConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GoogleDriveConfiguration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `SecretArn`
      String.validateJsonElement(jsonObj.get("SecretArn"));
      // validate the optional field `InclusionPatterns`
      if (jsonObj.get("InclusionPatterns") != null && !jsonObj.get("InclusionPatterns").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("InclusionPatterns"));
      }
      // validate the optional field `ExclusionPatterns`
      if (jsonObj.get("ExclusionPatterns") != null && !jsonObj.get("ExclusionPatterns").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ExclusionPatterns"));
      }
      // validate the optional field `FieldMappings`
      if (jsonObj.get("FieldMappings") != null && !jsonObj.get("FieldMappings").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("FieldMappings"));
      }
      // validate the optional field `ExcludeMimeTypes`
      if (jsonObj.get("ExcludeMimeTypes") != null && !jsonObj.get("ExcludeMimeTypes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ExcludeMimeTypes"));
      }
      // validate the optional field `ExcludeUserAccounts`
      if (jsonObj.get("ExcludeUserAccounts") != null && !jsonObj.get("ExcludeUserAccounts").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ExcludeUserAccounts"));
      }
      // validate the optional field `ExcludeSharedDrives`
      if (jsonObj.get("ExcludeSharedDrives") != null && !jsonObj.get("ExcludeSharedDrives").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ExcludeSharedDrives"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleDriveConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleDriveConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleDriveConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleDriveConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleDriveConfiguration>() {
           @Override
           public void write(JsonWriter out, GoogleDriveConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleDriveConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleDriveConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleDriveConfiguration
   * @throws IOException if the JSON string is invalid with respect to GoogleDriveConfiguration
   */
  public static GoogleDriveConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleDriveConfiguration.class);
  }

  /**
   * Convert an instance of GoogleDriveConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

