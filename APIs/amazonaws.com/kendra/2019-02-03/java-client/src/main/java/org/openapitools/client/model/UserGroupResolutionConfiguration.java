/*
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.UserGroupResolutionMode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;Provides the configuration information to get users and groups from an IAM Identity Center (successor to Single Sign-On) identity source. This is useful for user context filtering, where search results are filtered based on the user or their group access to documents. You can also use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kendra/latest/dg/API_PutPrincipalMapping.html\&quot;&gt;PutPrincipalMapping&lt;/a&gt; API to map users to their groups so that you only need to provide the user ID when you issue the query.&lt;/p&gt; &lt;p&gt;To set up an IAM Identity Center identity source in the console to use with Amazon Kendra, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kendra/latest/dg/getting-started-aws-sso.html\&quot;&gt;Getting started with an IAM Identity Center identity source&lt;/a&gt;. You must also grant the required permissions to use IAM Identity Center with Amazon Kendra. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kendra/latest/dg/iam-roles.html#iam-roles-aws-sso\&quot;&gt;IAM roles for IAM Identity Center&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Amazon Kendra currently does not support using &lt;code&gt;UserGroupResolutionConfiguration&lt;/code&gt; with an Amazon Web Services organization member account for your IAM Identity Center identify source. You must create your index in the management account for the organization in order to use &lt;code&gt;UserGroupResolutionConfiguration&lt;/code&gt;.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:16.778416-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UserGroupResolutionConfiguration {
  public static final String SERIALIZED_NAME_USER_GROUP_RESOLUTION_MODE = "UserGroupResolutionMode";
  @SerializedName(SERIALIZED_NAME_USER_GROUP_RESOLUTION_MODE)
  private UserGroupResolutionMode userGroupResolutionMode;

  public UserGroupResolutionConfiguration() {
  }

  public UserGroupResolutionConfiguration userGroupResolutionMode(UserGroupResolutionMode userGroupResolutionMode) {
    this.userGroupResolutionMode = userGroupResolutionMode;
    return this;
  }

  /**
   * Get userGroupResolutionMode
   * @return userGroupResolutionMode
   */
  @javax.annotation.Nonnull
  public UserGroupResolutionMode getUserGroupResolutionMode() {
    return userGroupResolutionMode;
  }

  public void setUserGroupResolutionMode(UserGroupResolutionMode userGroupResolutionMode) {
    this.userGroupResolutionMode = userGroupResolutionMode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserGroupResolutionConfiguration userGroupResolutionConfiguration = (UserGroupResolutionConfiguration) o;
    return Objects.equals(this.userGroupResolutionMode, userGroupResolutionConfiguration.userGroupResolutionMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(userGroupResolutionMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserGroupResolutionConfiguration {\n");
    sb.append("    userGroupResolutionMode: ").append(toIndentedString(userGroupResolutionMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("UserGroupResolutionMode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("UserGroupResolutionMode");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserGroupResolutionConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserGroupResolutionConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserGroupResolutionConfiguration is not found in the empty JSON string", UserGroupResolutionConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserGroupResolutionConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserGroupResolutionConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UserGroupResolutionConfiguration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `UserGroupResolutionMode`
      UserGroupResolutionMode.validateJsonElement(jsonObj.get("UserGroupResolutionMode"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserGroupResolutionConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserGroupResolutionConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserGroupResolutionConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserGroupResolutionConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<UserGroupResolutionConfiguration>() {
           @Override
           public void write(JsonWriter out, UserGroupResolutionConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserGroupResolutionConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserGroupResolutionConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserGroupResolutionConfiguration
   * @throws IOException if the JSON string is invalid with respect to UserGroupResolutionConfiguration
   */
  public static UserGroupResolutionConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserGroupResolutionConfiguration.class);
  }

  /**
   * Convert an instance of UserGroupResolutionConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

