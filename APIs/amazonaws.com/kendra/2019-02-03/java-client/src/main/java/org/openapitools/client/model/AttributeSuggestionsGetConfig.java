/*
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AttributeSuggestionsGetConfigAttributeFilter;
import org.openapitools.client.model.AttributeSuggestionsGetConfigUserContext;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Provides the configuration information for the document fields/attributes that you want to base query suggestions on.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:16.778416-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AttributeSuggestionsGetConfig {
  public static final String SERIALIZED_NAME_SUGGESTION_ATTRIBUTES = "SuggestionAttributes";
  @SerializedName(SERIALIZED_NAME_SUGGESTION_ATTRIBUTES)
  private List suggestionAttributes;

  public static final String SERIALIZED_NAME_ADDITIONAL_RESPONSE_ATTRIBUTES = "AdditionalResponseAttributes";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_RESPONSE_ATTRIBUTES)
  private List additionalResponseAttributes;

  public static final String SERIALIZED_NAME_ATTRIBUTE_FILTER = "AttributeFilter";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_FILTER)
  private AttributeSuggestionsGetConfigAttributeFilter attributeFilter;

  public static final String SERIALIZED_NAME_USER_CONTEXT = "UserContext";
  @SerializedName(SERIALIZED_NAME_USER_CONTEXT)
  private AttributeSuggestionsGetConfigUserContext userContext;

  public AttributeSuggestionsGetConfig() {
  }

  public AttributeSuggestionsGetConfig suggestionAttributes(List suggestionAttributes) {
    this.suggestionAttributes = suggestionAttributes;
    return this;
  }

  /**
   * Get suggestionAttributes
   * @return suggestionAttributes
   */
  @javax.annotation.Nullable
  public List getSuggestionAttributes() {
    return suggestionAttributes;
  }

  public void setSuggestionAttributes(List suggestionAttributes) {
    this.suggestionAttributes = suggestionAttributes;
  }


  public AttributeSuggestionsGetConfig additionalResponseAttributes(List additionalResponseAttributes) {
    this.additionalResponseAttributes = additionalResponseAttributes;
    return this;
  }

  /**
   * Get additionalResponseAttributes
   * @return additionalResponseAttributes
   */
  @javax.annotation.Nullable
  public List getAdditionalResponseAttributes() {
    return additionalResponseAttributes;
  }

  public void setAdditionalResponseAttributes(List additionalResponseAttributes) {
    this.additionalResponseAttributes = additionalResponseAttributes;
  }


  public AttributeSuggestionsGetConfig attributeFilter(AttributeSuggestionsGetConfigAttributeFilter attributeFilter) {
    this.attributeFilter = attributeFilter;
    return this;
  }

  /**
   * Get attributeFilter
   * @return attributeFilter
   */
  @javax.annotation.Nullable
  public AttributeSuggestionsGetConfigAttributeFilter getAttributeFilter() {
    return attributeFilter;
  }

  public void setAttributeFilter(AttributeSuggestionsGetConfigAttributeFilter attributeFilter) {
    this.attributeFilter = attributeFilter;
  }


  public AttributeSuggestionsGetConfig userContext(AttributeSuggestionsGetConfigUserContext userContext) {
    this.userContext = userContext;
    return this;
  }

  /**
   * Get userContext
   * @return userContext
   */
  @javax.annotation.Nullable
  public AttributeSuggestionsGetConfigUserContext getUserContext() {
    return userContext;
  }

  public void setUserContext(AttributeSuggestionsGetConfigUserContext userContext) {
    this.userContext = userContext;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AttributeSuggestionsGetConfig attributeSuggestionsGetConfig = (AttributeSuggestionsGetConfig) o;
    return Objects.equals(this.suggestionAttributes, attributeSuggestionsGetConfig.suggestionAttributes) &&
        Objects.equals(this.additionalResponseAttributes, attributeSuggestionsGetConfig.additionalResponseAttributes) &&
        Objects.equals(this.attributeFilter, attributeSuggestionsGetConfig.attributeFilter) &&
        Objects.equals(this.userContext, attributeSuggestionsGetConfig.userContext);
  }

  @Override
  public int hashCode() {
    return Objects.hash(suggestionAttributes, additionalResponseAttributes, attributeFilter, userContext);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AttributeSuggestionsGetConfig {\n");
    sb.append("    suggestionAttributes: ").append(toIndentedString(suggestionAttributes)).append("\n");
    sb.append("    additionalResponseAttributes: ").append(toIndentedString(additionalResponseAttributes)).append("\n");
    sb.append("    attributeFilter: ").append(toIndentedString(attributeFilter)).append("\n");
    sb.append("    userContext: ").append(toIndentedString(userContext)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SuggestionAttributes");
    openapiFields.add("AdditionalResponseAttributes");
    openapiFields.add("AttributeFilter");
    openapiFields.add("UserContext");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AttributeSuggestionsGetConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AttributeSuggestionsGetConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AttributeSuggestionsGetConfig is not found in the empty JSON string", AttributeSuggestionsGetConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AttributeSuggestionsGetConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AttributeSuggestionsGetConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `SuggestionAttributes`
      if (jsonObj.get("SuggestionAttributes") != null && !jsonObj.get("SuggestionAttributes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("SuggestionAttributes"));
      }
      // validate the optional field `AdditionalResponseAttributes`
      if (jsonObj.get("AdditionalResponseAttributes") != null && !jsonObj.get("AdditionalResponseAttributes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("AdditionalResponseAttributes"));
      }
      // validate the optional field `AttributeFilter`
      if (jsonObj.get("AttributeFilter") != null && !jsonObj.get("AttributeFilter").isJsonNull()) {
        AttributeSuggestionsGetConfigAttributeFilter.validateJsonElement(jsonObj.get("AttributeFilter"));
      }
      // validate the optional field `UserContext`
      if (jsonObj.get("UserContext") != null && !jsonObj.get("UserContext").isJsonNull()) {
        AttributeSuggestionsGetConfigUserContext.validateJsonElement(jsonObj.get("UserContext"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AttributeSuggestionsGetConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AttributeSuggestionsGetConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AttributeSuggestionsGetConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AttributeSuggestionsGetConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<AttributeSuggestionsGetConfig>() {
           @Override
           public void write(JsonWriter out, AttributeSuggestionsGetConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AttributeSuggestionsGetConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AttributeSuggestionsGetConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AttributeSuggestionsGetConfig
   * @throws IOException if the JSON string is invalid with respect to AttributeSuggestionsGetConfig
   */
  public static AttributeSuggestionsGetConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AttributeSuggestionsGetConfig.class);
  }

  /**
   * Convert an instance of AttributeSuggestionsGetConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

