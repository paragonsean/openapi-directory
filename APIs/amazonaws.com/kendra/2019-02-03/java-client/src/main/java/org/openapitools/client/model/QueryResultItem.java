/*
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.QueryResultFormat;
import org.openapitools.client.model.QueryResultItemDocumentExcerpt;
import org.openapitools.client.model.QueryResultItemDocumentTitle;
import org.openapitools.client.model.QueryResultItemScoreAttributes;
import org.openapitools.client.model.QueryResultItemTableExcerpt;
import org.openapitools.client.model.QueryResultType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;A single query result.&lt;/p&gt; &lt;p&gt;A query result contains information about a document returned by the query. This includes the original location of the document, a list of attributes assigned to the document, and relevant text from the document that satisfies the query.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:16.778416-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class QueryResultItem {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private QueryResultType type;

  public static final String SERIALIZED_NAME_FORMAT = "Format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  private QueryResultFormat format;

  public static final String SERIALIZED_NAME_ADDITIONAL_ATTRIBUTES = "AdditionalAttributes";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_ATTRIBUTES)
  private List additionalAttributes;

  public static final String SERIALIZED_NAME_DOCUMENT_ID = "DocumentId";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_ID)
  private String documentId;

  public static final String SERIALIZED_NAME_DOCUMENT_TITLE = "DocumentTitle";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_TITLE)
  private QueryResultItemDocumentTitle documentTitle;

  public static final String SERIALIZED_NAME_DOCUMENT_EXCERPT = "DocumentExcerpt";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_EXCERPT)
  private QueryResultItemDocumentExcerpt documentExcerpt;

  public static final String SERIALIZED_NAME_DOCUMENT_U_R_I = "DocumentURI";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_U_R_I)
  private String documentURI;

  public static final String SERIALIZED_NAME_DOCUMENT_ATTRIBUTES = "DocumentAttributes";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_ATTRIBUTES)
  private List documentAttributes;

  public static final String SERIALIZED_NAME_SCORE_ATTRIBUTES = "ScoreAttributes";
  @SerializedName(SERIALIZED_NAME_SCORE_ATTRIBUTES)
  private QueryResultItemScoreAttributes scoreAttributes;

  public static final String SERIALIZED_NAME_FEEDBACK_TOKEN = "FeedbackToken";
  @SerializedName(SERIALIZED_NAME_FEEDBACK_TOKEN)
  private String feedbackToken;

  public static final String SERIALIZED_NAME_TABLE_EXCERPT = "TableExcerpt";
  @SerializedName(SERIALIZED_NAME_TABLE_EXCERPT)
  private QueryResultItemTableExcerpt tableExcerpt;

  public QueryResultItem() {
  }

  public QueryResultItem id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public QueryResultItem type(QueryResultType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public QueryResultType getType() {
    return type;
  }

  public void setType(QueryResultType type) {
    this.type = type;
  }


  public QueryResultItem format(QueryResultFormat format) {
    this.format = format;
    return this;
  }

  /**
   * Get format
   * @return format
   */
  @javax.annotation.Nullable
  public QueryResultFormat getFormat() {
    return format;
  }

  public void setFormat(QueryResultFormat format) {
    this.format = format;
  }


  public QueryResultItem additionalAttributes(List additionalAttributes) {
    this.additionalAttributes = additionalAttributes;
    return this;
  }

  /**
   * Get additionalAttributes
   * @return additionalAttributes
   */
  @javax.annotation.Nullable
  public List getAdditionalAttributes() {
    return additionalAttributes;
  }

  public void setAdditionalAttributes(List additionalAttributes) {
    this.additionalAttributes = additionalAttributes;
  }


  public QueryResultItem documentId(String documentId) {
    this.documentId = documentId;
    return this;
  }

  /**
   * Get documentId
   * @return documentId
   */
  @javax.annotation.Nullable
  public String getDocumentId() {
    return documentId;
  }

  public void setDocumentId(String documentId) {
    this.documentId = documentId;
  }


  public QueryResultItem documentTitle(QueryResultItemDocumentTitle documentTitle) {
    this.documentTitle = documentTitle;
    return this;
  }

  /**
   * Get documentTitle
   * @return documentTitle
   */
  @javax.annotation.Nullable
  public QueryResultItemDocumentTitle getDocumentTitle() {
    return documentTitle;
  }

  public void setDocumentTitle(QueryResultItemDocumentTitle documentTitle) {
    this.documentTitle = documentTitle;
  }


  public QueryResultItem documentExcerpt(QueryResultItemDocumentExcerpt documentExcerpt) {
    this.documentExcerpt = documentExcerpt;
    return this;
  }

  /**
   * Get documentExcerpt
   * @return documentExcerpt
   */
  @javax.annotation.Nullable
  public QueryResultItemDocumentExcerpt getDocumentExcerpt() {
    return documentExcerpt;
  }

  public void setDocumentExcerpt(QueryResultItemDocumentExcerpt documentExcerpt) {
    this.documentExcerpt = documentExcerpt;
  }


  public QueryResultItem documentURI(String documentURI) {
    this.documentURI = documentURI;
    return this;
  }

  /**
   * Get documentURI
   * @return documentURI
   */
  @javax.annotation.Nullable
  public String getDocumentURI() {
    return documentURI;
  }

  public void setDocumentURI(String documentURI) {
    this.documentURI = documentURI;
  }


  public QueryResultItem documentAttributes(List documentAttributes) {
    this.documentAttributes = documentAttributes;
    return this;
  }

  /**
   * Get documentAttributes
   * @return documentAttributes
   */
  @javax.annotation.Nullable
  public List getDocumentAttributes() {
    return documentAttributes;
  }

  public void setDocumentAttributes(List documentAttributes) {
    this.documentAttributes = documentAttributes;
  }


  public QueryResultItem scoreAttributes(QueryResultItemScoreAttributes scoreAttributes) {
    this.scoreAttributes = scoreAttributes;
    return this;
  }

  /**
   * Get scoreAttributes
   * @return scoreAttributes
   */
  @javax.annotation.Nullable
  public QueryResultItemScoreAttributes getScoreAttributes() {
    return scoreAttributes;
  }

  public void setScoreAttributes(QueryResultItemScoreAttributes scoreAttributes) {
    this.scoreAttributes = scoreAttributes;
  }


  public QueryResultItem feedbackToken(String feedbackToken) {
    this.feedbackToken = feedbackToken;
    return this;
  }

  /**
   * Get feedbackToken
   * @return feedbackToken
   */
  @javax.annotation.Nullable
  public String getFeedbackToken() {
    return feedbackToken;
  }

  public void setFeedbackToken(String feedbackToken) {
    this.feedbackToken = feedbackToken;
  }


  public QueryResultItem tableExcerpt(QueryResultItemTableExcerpt tableExcerpt) {
    this.tableExcerpt = tableExcerpt;
    return this;
  }

  /**
   * Get tableExcerpt
   * @return tableExcerpt
   */
  @javax.annotation.Nullable
  public QueryResultItemTableExcerpt getTableExcerpt() {
    return tableExcerpt;
  }

  public void setTableExcerpt(QueryResultItemTableExcerpt tableExcerpt) {
    this.tableExcerpt = tableExcerpt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueryResultItem queryResultItem = (QueryResultItem) o;
    return Objects.equals(this.id, queryResultItem.id) &&
        Objects.equals(this.type, queryResultItem.type) &&
        Objects.equals(this.format, queryResultItem.format) &&
        Objects.equals(this.additionalAttributes, queryResultItem.additionalAttributes) &&
        Objects.equals(this.documentId, queryResultItem.documentId) &&
        Objects.equals(this.documentTitle, queryResultItem.documentTitle) &&
        Objects.equals(this.documentExcerpt, queryResultItem.documentExcerpt) &&
        Objects.equals(this.documentURI, queryResultItem.documentURI) &&
        Objects.equals(this.documentAttributes, queryResultItem.documentAttributes) &&
        Objects.equals(this.scoreAttributes, queryResultItem.scoreAttributes) &&
        Objects.equals(this.feedbackToken, queryResultItem.feedbackToken) &&
        Objects.equals(this.tableExcerpt, queryResultItem.tableExcerpt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, format, additionalAttributes, documentId, documentTitle, documentExcerpt, documentURI, documentAttributes, scoreAttributes, feedbackToken, tableExcerpt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueryResultItem {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    additionalAttributes: ").append(toIndentedString(additionalAttributes)).append("\n");
    sb.append("    documentId: ").append(toIndentedString(documentId)).append("\n");
    sb.append("    documentTitle: ").append(toIndentedString(documentTitle)).append("\n");
    sb.append("    documentExcerpt: ").append(toIndentedString(documentExcerpt)).append("\n");
    sb.append("    documentURI: ").append(toIndentedString(documentURI)).append("\n");
    sb.append("    documentAttributes: ").append(toIndentedString(documentAttributes)).append("\n");
    sb.append("    scoreAttributes: ").append(toIndentedString(scoreAttributes)).append("\n");
    sb.append("    feedbackToken: ").append(toIndentedString(feedbackToken)).append("\n");
    sb.append("    tableExcerpt: ").append(toIndentedString(tableExcerpt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id");
    openapiFields.add("Type");
    openapiFields.add("Format");
    openapiFields.add("AdditionalAttributes");
    openapiFields.add("DocumentId");
    openapiFields.add("DocumentTitle");
    openapiFields.add("DocumentExcerpt");
    openapiFields.add("DocumentURI");
    openapiFields.add("DocumentAttributes");
    openapiFields.add("ScoreAttributes");
    openapiFields.add("FeedbackToken");
    openapiFields.add("TableExcerpt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QueryResultItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QueryResultItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QueryResultItem is not found in the empty JSON string", QueryResultItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QueryResultItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QueryResultItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Id`
      if (jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Id"));
      }
      // validate the optional field `Type`
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) {
        QueryResultType.validateJsonElement(jsonObj.get("Type"));
      }
      // validate the optional field `Format`
      if (jsonObj.get("Format") != null && !jsonObj.get("Format").isJsonNull()) {
        QueryResultFormat.validateJsonElement(jsonObj.get("Format"));
      }
      // validate the optional field `AdditionalAttributes`
      if (jsonObj.get("AdditionalAttributes") != null && !jsonObj.get("AdditionalAttributes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("AdditionalAttributes"));
      }
      // validate the optional field `DocumentId`
      if (jsonObj.get("DocumentId") != null && !jsonObj.get("DocumentId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DocumentId"));
      }
      // validate the optional field `DocumentTitle`
      if (jsonObj.get("DocumentTitle") != null && !jsonObj.get("DocumentTitle").isJsonNull()) {
        QueryResultItemDocumentTitle.validateJsonElement(jsonObj.get("DocumentTitle"));
      }
      // validate the optional field `DocumentExcerpt`
      if (jsonObj.get("DocumentExcerpt") != null && !jsonObj.get("DocumentExcerpt").isJsonNull()) {
        QueryResultItemDocumentExcerpt.validateJsonElement(jsonObj.get("DocumentExcerpt"));
      }
      // validate the optional field `DocumentURI`
      if (jsonObj.get("DocumentURI") != null && !jsonObj.get("DocumentURI").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DocumentURI"));
      }
      // validate the optional field `DocumentAttributes`
      if (jsonObj.get("DocumentAttributes") != null && !jsonObj.get("DocumentAttributes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("DocumentAttributes"));
      }
      // validate the optional field `ScoreAttributes`
      if (jsonObj.get("ScoreAttributes") != null && !jsonObj.get("ScoreAttributes").isJsonNull()) {
        QueryResultItemScoreAttributes.validateJsonElement(jsonObj.get("ScoreAttributes"));
      }
      // validate the optional field `FeedbackToken`
      if (jsonObj.get("FeedbackToken") != null && !jsonObj.get("FeedbackToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("FeedbackToken"));
      }
      // validate the optional field `TableExcerpt`
      if (jsonObj.get("TableExcerpt") != null && !jsonObj.get("TableExcerpt").isJsonNull()) {
        QueryResultItemTableExcerpt.validateJsonElement(jsonObj.get("TableExcerpt"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QueryResultItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QueryResultItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QueryResultItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QueryResultItem.class));

       return (TypeAdapter<T>) new TypeAdapter<QueryResultItem>() {
           @Override
           public void write(JsonWriter out, QueryResultItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QueryResultItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QueryResultItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QueryResultItem
   * @throws IOException if the JSON string is invalid with respect to QueryResultItem
   */
  public static QueryResultItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QueryResultItem.class);
  }

  /**
   * Convert an instance of QueryResultItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

