/*
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GitHubConfigurationGitHubDocumentCrawlProperties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:16.778416-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GitHubConfigurationGitHubDocumentCrawlProperties {
  public static final String SERIALIZED_NAME_CRAWL_REPOSITORY_DOCUMENTS = "CrawlRepositoryDocuments";
  @SerializedName(SERIALIZED_NAME_CRAWL_REPOSITORY_DOCUMENTS)
  private Boolean crawlRepositoryDocuments;

  public static final String SERIALIZED_NAME_CRAWL_ISSUE = "CrawlIssue";
  @SerializedName(SERIALIZED_NAME_CRAWL_ISSUE)
  private Boolean crawlIssue;

  public static final String SERIALIZED_NAME_CRAWL_ISSUE_COMMENT = "CrawlIssueComment";
  @SerializedName(SERIALIZED_NAME_CRAWL_ISSUE_COMMENT)
  private Boolean crawlIssueComment;

  public static final String SERIALIZED_NAME_CRAWL_ISSUE_COMMENT_ATTACHMENT = "CrawlIssueCommentAttachment";
  @SerializedName(SERIALIZED_NAME_CRAWL_ISSUE_COMMENT_ATTACHMENT)
  private Boolean crawlIssueCommentAttachment;

  public static final String SERIALIZED_NAME_CRAWL_PULL_REQUEST = "CrawlPullRequest";
  @SerializedName(SERIALIZED_NAME_CRAWL_PULL_REQUEST)
  private Boolean crawlPullRequest;

  public static final String SERIALIZED_NAME_CRAWL_PULL_REQUEST_COMMENT = "CrawlPullRequestComment";
  @SerializedName(SERIALIZED_NAME_CRAWL_PULL_REQUEST_COMMENT)
  private Boolean crawlPullRequestComment;

  public static final String SERIALIZED_NAME_CRAWL_PULL_REQUEST_COMMENT_ATTACHMENT = "CrawlPullRequestCommentAttachment";
  @SerializedName(SERIALIZED_NAME_CRAWL_PULL_REQUEST_COMMENT_ATTACHMENT)
  private Boolean crawlPullRequestCommentAttachment;

  public GitHubConfigurationGitHubDocumentCrawlProperties() {
  }

  public GitHubConfigurationGitHubDocumentCrawlProperties crawlRepositoryDocuments(Boolean crawlRepositoryDocuments) {
    this.crawlRepositoryDocuments = crawlRepositoryDocuments;
    return this;
  }

  /**
   * Get crawlRepositoryDocuments
   * @return crawlRepositoryDocuments
   */
  @javax.annotation.Nullable
  public Boolean getCrawlRepositoryDocuments() {
    return crawlRepositoryDocuments;
  }

  public void setCrawlRepositoryDocuments(Boolean crawlRepositoryDocuments) {
    this.crawlRepositoryDocuments = crawlRepositoryDocuments;
  }


  public GitHubConfigurationGitHubDocumentCrawlProperties crawlIssue(Boolean crawlIssue) {
    this.crawlIssue = crawlIssue;
    return this;
  }

  /**
   * Get crawlIssue
   * @return crawlIssue
   */
  @javax.annotation.Nullable
  public Boolean getCrawlIssue() {
    return crawlIssue;
  }

  public void setCrawlIssue(Boolean crawlIssue) {
    this.crawlIssue = crawlIssue;
  }


  public GitHubConfigurationGitHubDocumentCrawlProperties crawlIssueComment(Boolean crawlIssueComment) {
    this.crawlIssueComment = crawlIssueComment;
    return this;
  }

  /**
   * Get crawlIssueComment
   * @return crawlIssueComment
   */
  @javax.annotation.Nullable
  public Boolean getCrawlIssueComment() {
    return crawlIssueComment;
  }

  public void setCrawlIssueComment(Boolean crawlIssueComment) {
    this.crawlIssueComment = crawlIssueComment;
  }


  public GitHubConfigurationGitHubDocumentCrawlProperties crawlIssueCommentAttachment(Boolean crawlIssueCommentAttachment) {
    this.crawlIssueCommentAttachment = crawlIssueCommentAttachment;
    return this;
  }

  /**
   * Get crawlIssueCommentAttachment
   * @return crawlIssueCommentAttachment
   */
  @javax.annotation.Nullable
  public Boolean getCrawlIssueCommentAttachment() {
    return crawlIssueCommentAttachment;
  }

  public void setCrawlIssueCommentAttachment(Boolean crawlIssueCommentAttachment) {
    this.crawlIssueCommentAttachment = crawlIssueCommentAttachment;
  }


  public GitHubConfigurationGitHubDocumentCrawlProperties crawlPullRequest(Boolean crawlPullRequest) {
    this.crawlPullRequest = crawlPullRequest;
    return this;
  }

  /**
   * Get crawlPullRequest
   * @return crawlPullRequest
   */
  @javax.annotation.Nullable
  public Boolean getCrawlPullRequest() {
    return crawlPullRequest;
  }

  public void setCrawlPullRequest(Boolean crawlPullRequest) {
    this.crawlPullRequest = crawlPullRequest;
  }


  public GitHubConfigurationGitHubDocumentCrawlProperties crawlPullRequestComment(Boolean crawlPullRequestComment) {
    this.crawlPullRequestComment = crawlPullRequestComment;
    return this;
  }

  /**
   * Get crawlPullRequestComment
   * @return crawlPullRequestComment
   */
  @javax.annotation.Nullable
  public Boolean getCrawlPullRequestComment() {
    return crawlPullRequestComment;
  }

  public void setCrawlPullRequestComment(Boolean crawlPullRequestComment) {
    this.crawlPullRequestComment = crawlPullRequestComment;
  }


  public GitHubConfigurationGitHubDocumentCrawlProperties crawlPullRequestCommentAttachment(Boolean crawlPullRequestCommentAttachment) {
    this.crawlPullRequestCommentAttachment = crawlPullRequestCommentAttachment;
    return this;
  }

  /**
   * Get crawlPullRequestCommentAttachment
   * @return crawlPullRequestCommentAttachment
   */
  @javax.annotation.Nullable
  public Boolean getCrawlPullRequestCommentAttachment() {
    return crawlPullRequestCommentAttachment;
  }

  public void setCrawlPullRequestCommentAttachment(Boolean crawlPullRequestCommentAttachment) {
    this.crawlPullRequestCommentAttachment = crawlPullRequestCommentAttachment;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GitHubConfigurationGitHubDocumentCrawlProperties gitHubConfigurationGitHubDocumentCrawlProperties = (GitHubConfigurationGitHubDocumentCrawlProperties) o;
    return Objects.equals(this.crawlRepositoryDocuments, gitHubConfigurationGitHubDocumentCrawlProperties.crawlRepositoryDocuments) &&
        Objects.equals(this.crawlIssue, gitHubConfigurationGitHubDocumentCrawlProperties.crawlIssue) &&
        Objects.equals(this.crawlIssueComment, gitHubConfigurationGitHubDocumentCrawlProperties.crawlIssueComment) &&
        Objects.equals(this.crawlIssueCommentAttachment, gitHubConfigurationGitHubDocumentCrawlProperties.crawlIssueCommentAttachment) &&
        Objects.equals(this.crawlPullRequest, gitHubConfigurationGitHubDocumentCrawlProperties.crawlPullRequest) &&
        Objects.equals(this.crawlPullRequestComment, gitHubConfigurationGitHubDocumentCrawlProperties.crawlPullRequestComment) &&
        Objects.equals(this.crawlPullRequestCommentAttachment, gitHubConfigurationGitHubDocumentCrawlProperties.crawlPullRequestCommentAttachment);
  }

  @Override
  public int hashCode() {
    return Objects.hash(crawlRepositoryDocuments, crawlIssue, crawlIssueComment, crawlIssueCommentAttachment, crawlPullRequest, crawlPullRequestComment, crawlPullRequestCommentAttachment);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GitHubConfigurationGitHubDocumentCrawlProperties {\n");
    sb.append("    crawlRepositoryDocuments: ").append(toIndentedString(crawlRepositoryDocuments)).append("\n");
    sb.append("    crawlIssue: ").append(toIndentedString(crawlIssue)).append("\n");
    sb.append("    crawlIssueComment: ").append(toIndentedString(crawlIssueComment)).append("\n");
    sb.append("    crawlIssueCommentAttachment: ").append(toIndentedString(crawlIssueCommentAttachment)).append("\n");
    sb.append("    crawlPullRequest: ").append(toIndentedString(crawlPullRequest)).append("\n");
    sb.append("    crawlPullRequestComment: ").append(toIndentedString(crawlPullRequestComment)).append("\n");
    sb.append("    crawlPullRequestCommentAttachment: ").append(toIndentedString(crawlPullRequestCommentAttachment)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CrawlRepositoryDocuments");
    openapiFields.add("CrawlIssue");
    openapiFields.add("CrawlIssueComment");
    openapiFields.add("CrawlIssueCommentAttachment");
    openapiFields.add("CrawlPullRequest");
    openapiFields.add("CrawlPullRequestComment");
    openapiFields.add("CrawlPullRequestCommentAttachment");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GitHubConfigurationGitHubDocumentCrawlProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GitHubConfigurationGitHubDocumentCrawlProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GitHubConfigurationGitHubDocumentCrawlProperties is not found in the empty JSON string", GitHubConfigurationGitHubDocumentCrawlProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GitHubConfigurationGitHubDocumentCrawlProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GitHubConfigurationGitHubDocumentCrawlProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `CrawlRepositoryDocuments`
      if (jsonObj.get("CrawlRepositoryDocuments") != null && !jsonObj.get("CrawlRepositoryDocuments").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("CrawlRepositoryDocuments"));
      }
      // validate the optional field `CrawlIssue`
      if (jsonObj.get("CrawlIssue") != null && !jsonObj.get("CrawlIssue").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("CrawlIssue"));
      }
      // validate the optional field `CrawlIssueComment`
      if (jsonObj.get("CrawlIssueComment") != null && !jsonObj.get("CrawlIssueComment").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("CrawlIssueComment"));
      }
      // validate the optional field `CrawlIssueCommentAttachment`
      if (jsonObj.get("CrawlIssueCommentAttachment") != null && !jsonObj.get("CrawlIssueCommentAttachment").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("CrawlIssueCommentAttachment"));
      }
      // validate the optional field `CrawlPullRequest`
      if (jsonObj.get("CrawlPullRequest") != null && !jsonObj.get("CrawlPullRequest").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("CrawlPullRequest"));
      }
      // validate the optional field `CrawlPullRequestComment`
      if (jsonObj.get("CrawlPullRequestComment") != null && !jsonObj.get("CrawlPullRequestComment").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("CrawlPullRequestComment"));
      }
      // validate the optional field `CrawlPullRequestCommentAttachment`
      if (jsonObj.get("CrawlPullRequestCommentAttachment") != null && !jsonObj.get("CrawlPullRequestCommentAttachment").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("CrawlPullRequestCommentAttachment"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GitHubConfigurationGitHubDocumentCrawlProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GitHubConfigurationGitHubDocumentCrawlProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GitHubConfigurationGitHubDocumentCrawlProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GitHubConfigurationGitHubDocumentCrawlProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<GitHubConfigurationGitHubDocumentCrawlProperties>() {
           @Override
           public void write(JsonWriter out, GitHubConfigurationGitHubDocumentCrawlProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GitHubConfigurationGitHubDocumentCrawlProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GitHubConfigurationGitHubDocumentCrawlProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GitHubConfigurationGitHubDocumentCrawlProperties
   * @throws IOException if the JSON string is invalid with respect to GitHubConfigurationGitHubDocumentCrawlProperties
   */
  public static GitHubConfigurationGitHubDocumentCrawlProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GitHubConfigurationGitHubDocumentCrawlProperties.class);
  }

  /**
   * Convert an instance of GitHubConfigurationGitHubDocumentCrawlProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

