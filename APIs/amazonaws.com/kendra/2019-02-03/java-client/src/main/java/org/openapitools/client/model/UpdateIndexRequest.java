/*
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.UpdateIndexRequestCapacityUnits;
import org.openapitools.client.model.UpdateIndexRequestUserGroupResolutionConfiguration;
import org.openapitools.client.model.UserContextPolicy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateIndexRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:16.778416-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateIndexRequest {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ROLE_ARN = "RoleArn";
  @SerializedName(SERIALIZED_NAME_ROLE_ARN)
  private String roleArn;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DOCUMENT_METADATA_CONFIGURATION_UPDATES = "DocumentMetadataConfigurationUpdates";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_METADATA_CONFIGURATION_UPDATES)
  private List documentMetadataConfigurationUpdates;

  public static final String SERIALIZED_NAME_CAPACITY_UNITS = "CapacityUnits";
  @SerializedName(SERIALIZED_NAME_CAPACITY_UNITS)
  private UpdateIndexRequestCapacityUnits capacityUnits;

  public static final String SERIALIZED_NAME_USER_TOKEN_CONFIGURATIONS = "UserTokenConfigurations";
  @SerializedName(SERIALIZED_NAME_USER_TOKEN_CONFIGURATIONS)
  private List userTokenConfigurations;

  public static final String SERIALIZED_NAME_USER_CONTEXT_POLICY = "UserContextPolicy";
  @SerializedName(SERIALIZED_NAME_USER_CONTEXT_POLICY)
  private UserContextPolicy userContextPolicy;

  public static final String SERIALIZED_NAME_USER_GROUP_RESOLUTION_CONFIGURATION = "UserGroupResolutionConfiguration";
  @SerializedName(SERIALIZED_NAME_USER_GROUP_RESOLUTION_CONFIGURATION)
  private UpdateIndexRequestUserGroupResolutionConfiguration userGroupResolutionConfiguration;

  public UpdateIndexRequest() {
  }

  public UpdateIndexRequest id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public UpdateIndexRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public UpdateIndexRequest roleArn(String roleArn) {
    this.roleArn = roleArn;
    return this;
  }

  /**
   * Get roleArn
   * @return roleArn
   */
  @javax.annotation.Nullable
  public String getRoleArn() {
    return roleArn;
  }

  public void setRoleArn(String roleArn) {
    this.roleArn = roleArn;
  }


  public UpdateIndexRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public UpdateIndexRequest documentMetadataConfigurationUpdates(List documentMetadataConfigurationUpdates) {
    this.documentMetadataConfigurationUpdates = documentMetadataConfigurationUpdates;
    return this;
  }

  /**
   * Get documentMetadataConfigurationUpdates
   * @return documentMetadataConfigurationUpdates
   */
  @javax.annotation.Nullable
  public List getDocumentMetadataConfigurationUpdates() {
    return documentMetadataConfigurationUpdates;
  }

  public void setDocumentMetadataConfigurationUpdates(List documentMetadataConfigurationUpdates) {
    this.documentMetadataConfigurationUpdates = documentMetadataConfigurationUpdates;
  }


  public UpdateIndexRequest capacityUnits(UpdateIndexRequestCapacityUnits capacityUnits) {
    this.capacityUnits = capacityUnits;
    return this;
  }

  /**
   * Get capacityUnits
   * @return capacityUnits
   */
  @javax.annotation.Nullable
  public UpdateIndexRequestCapacityUnits getCapacityUnits() {
    return capacityUnits;
  }

  public void setCapacityUnits(UpdateIndexRequestCapacityUnits capacityUnits) {
    this.capacityUnits = capacityUnits;
  }


  public UpdateIndexRequest userTokenConfigurations(List userTokenConfigurations) {
    this.userTokenConfigurations = userTokenConfigurations;
    return this;
  }

  /**
   * Get userTokenConfigurations
   * @return userTokenConfigurations
   */
  @javax.annotation.Nullable
  public List getUserTokenConfigurations() {
    return userTokenConfigurations;
  }

  public void setUserTokenConfigurations(List userTokenConfigurations) {
    this.userTokenConfigurations = userTokenConfigurations;
  }


  public UpdateIndexRequest userContextPolicy(UserContextPolicy userContextPolicy) {
    this.userContextPolicy = userContextPolicy;
    return this;
  }

  /**
   * Get userContextPolicy
   * @return userContextPolicy
   */
  @javax.annotation.Nullable
  public UserContextPolicy getUserContextPolicy() {
    return userContextPolicy;
  }

  public void setUserContextPolicy(UserContextPolicy userContextPolicy) {
    this.userContextPolicy = userContextPolicy;
  }


  public UpdateIndexRequest userGroupResolutionConfiguration(UpdateIndexRequestUserGroupResolutionConfiguration userGroupResolutionConfiguration) {
    this.userGroupResolutionConfiguration = userGroupResolutionConfiguration;
    return this;
  }

  /**
   * Get userGroupResolutionConfiguration
   * @return userGroupResolutionConfiguration
   */
  @javax.annotation.Nullable
  public UpdateIndexRequestUserGroupResolutionConfiguration getUserGroupResolutionConfiguration() {
    return userGroupResolutionConfiguration;
  }

  public void setUserGroupResolutionConfiguration(UpdateIndexRequestUserGroupResolutionConfiguration userGroupResolutionConfiguration) {
    this.userGroupResolutionConfiguration = userGroupResolutionConfiguration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateIndexRequest updateIndexRequest = (UpdateIndexRequest) o;
    return Objects.equals(this.id, updateIndexRequest.id) &&
        Objects.equals(this.name, updateIndexRequest.name) &&
        Objects.equals(this.roleArn, updateIndexRequest.roleArn) &&
        Objects.equals(this.description, updateIndexRequest.description) &&
        Objects.equals(this.documentMetadataConfigurationUpdates, updateIndexRequest.documentMetadataConfigurationUpdates) &&
        Objects.equals(this.capacityUnits, updateIndexRequest.capacityUnits) &&
        Objects.equals(this.userTokenConfigurations, updateIndexRequest.userTokenConfigurations) &&
        Objects.equals(this.userContextPolicy, updateIndexRequest.userContextPolicy) &&
        Objects.equals(this.userGroupResolutionConfiguration, updateIndexRequest.userGroupResolutionConfiguration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, roleArn, description, documentMetadataConfigurationUpdates, capacityUnits, userTokenConfigurations, userContextPolicy, userGroupResolutionConfiguration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateIndexRequest {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    roleArn: ").append(toIndentedString(roleArn)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    documentMetadataConfigurationUpdates: ").append(toIndentedString(documentMetadataConfigurationUpdates)).append("\n");
    sb.append("    capacityUnits: ").append(toIndentedString(capacityUnits)).append("\n");
    sb.append("    userTokenConfigurations: ").append(toIndentedString(userTokenConfigurations)).append("\n");
    sb.append("    userContextPolicy: ").append(toIndentedString(userContextPolicy)).append("\n");
    sb.append("    userGroupResolutionConfiguration: ").append(toIndentedString(userGroupResolutionConfiguration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id");
    openapiFields.add("Name");
    openapiFields.add("RoleArn");
    openapiFields.add("Description");
    openapiFields.add("DocumentMetadataConfigurationUpdates");
    openapiFields.add("CapacityUnits");
    openapiFields.add("UserTokenConfigurations");
    openapiFields.add("UserContextPolicy");
    openapiFields.add("UserGroupResolutionConfiguration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateIndexRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateIndexRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateIndexRequest is not found in the empty JSON string", UpdateIndexRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateIndexRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateIndexRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateIndexRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Id`
      String.validateJsonElement(jsonObj.get("Id"));
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the optional field `RoleArn`
      if (jsonObj.get("RoleArn") != null && !jsonObj.get("RoleArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RoleArn"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `DocumentMetadataConfigurationUpdates`
      if (jsonObj.get("DocumentMetadataConfigurationUpdates") != null && !jsonObj.get("DocumentMetadataConfigurationUpdates").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("DocumentMetadataConfigurationUpdates"));
      }
      // validate the optional field `CapacityUnits`
      if (jsonObj.get("CapacityUnits") != null && !jsonObj.get("CapacityUnits").isJsonNull()) {
        UpdateIndexRequestCapacityUnits.validateJsonElement(jsonObj.get("CapacityUnits"));
      }
      // validate the optional field `UserTokenConfigurations`
      if (jsonObj.get("UserTokenConfigurations") != null && !jsonObj.get("UserTokenConfigurations").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("UserTokenConfigurations"));
      }
      // validate the optional field `UserContextPolicy`
      if (jsonObj.get("UserContextPolicy") != null && !jsonObj.get("UserContextPolicy").isJsonNull()) {
        UserContextPolicy.validateJsonElement(jsonObj.get("UserContextPolicy"));
      }
      // validate the optional field `UserGroupResolutionConfiguration`
      if (jsonObj.get("UserGroupResolutionConfiguration") != null && !jsonObj.get("UserGroupResolutionConfiguration").isJsonNull()) {
        UpdateIndexRequestUserGroupResolutionConfiguration.validateJsonElement(jsonObj.get("UserGroupResolutionConfiguration"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateIndexRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateIndexRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateIndexRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateIndexRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateIndexRequest>() {
           @Override
           public void write(JsonWriter out, UpdateIndexRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateIndexRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateIndexRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateIndexRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateIndexRequest
   */
  public static UpdateIndexRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateIndexRequest.class);
  }

  /**
   * Convert an instance of UpdateIndexRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

