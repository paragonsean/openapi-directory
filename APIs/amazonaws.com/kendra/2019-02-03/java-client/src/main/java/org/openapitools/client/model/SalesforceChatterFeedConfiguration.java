/*
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The configuration information for syncing a Salesforce chatter feed. The contents of the object comes from the Salesforce FeedItem table.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:16.778416-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SalesforceChatterFeedConfiguration {
  public static final String SERIALIZED_NAME_DOCUMENT_DATA_FIELD_NAME = "DocumentDataFieldName";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_DATA_FIELD_NAME)
  private String documentDataFieldName;

  public static final String SERIALIZED_NAME_DOCUMENT_TITLE_FIELD_NAME = "DocumentTitleFieldName";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_TITLE_FIELD_NAME)
  private String documentTitleFieldName;

  public static final String SERIALIZED_NAME_FIELD_MAPPINGS = "FieldMappings";
  @SerializedName(SERIALIZED_NAME_FIELD_MAPPINGS)
  private List fieldMappings;

  public static final String SERIALIZED_NAME_INCLUDE_FILTER_TYPES = "IncludeFilterTypes";
  @SerializedName(SERIALIZED_NAME_INCLUDE_FILTER_TYPES)
  private List includeFilterTypes;

  public SalesforceChatterFeedConfiguration() {
  }

  public SalesforceChatterFeedConfiguration documentDataFieldName(String documentDataFieldName) {
    this.documentDataFieldName = documentDataFieldName;
    return this;
  }

  /**
   * Get documentDataFieldName
   * @return documentDataFieldName
   */
  @javax.annotation.Nonnull
  public String getDocumentDataFieldName() {
    return documentDataFieldName;
  }

  public void setDocumentDataFieldName(String documentDataFieldName) {
    this.documentDataFieldName = documentDataFieldName;
  }


  public SalesforceChatterFeedConfiguration documentTitleFieldName(String documentTitleFieldName) {
    this.documentTitleFieldName = documentTitleFieldName;
    return this;
  }

  /**
   * Get documentTitleFieldName
   * @return documentTitleFieldName
   */
  @javax.annotation.Nullable
  public String getDocumentTitleFieldName() {
    return documentTitleFieldName;
  }

  public void setDocumentTitleFieldName(String documentTitleFieldName) {
    this.documentTitleFieldName = documentTitleFieldName;
  }


  public SalesforceChatterFeedConfiguration fieldMappings(List fieldMappings) {
    this.fieldMappings = fieldMappings;
    return this;
  }

  /**
   * Get fieldMappings
   * @return fieldMappings
   */
  @javax.annotation.Nullable
  public List getFieldMappings() {
    return fieldMappings;
  }

  public void setFieldMappings(List fieldMappings) {
    this.fieldMappings = fieldMappings;
  }


  public SalesforceChatterFeedConfiguration includeFilterTypes(List includeFilterTypes) {
    this.includeFilterTypes = includeFilterTypes;
    return this;
  }

  /**
   * Get includeFilterTypes
   * @return includeFilterTypes
   */
  @javax.annotation.Nullable
  public List getIncludeFilterTypes() {
    return includeFilterTypes;
  }

  public void setIncludeFilterTypes(List includeFilterTypes) {
    this.includeFilterTypes = includeFilterTypes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SalesforceChatterFeedConfiguration salesforceChatterFeedConfiguration = (SalesforceChatterFeedConfiguration) o;
    return Objects.equals(this.documentDataFieldName, salesforceChatterFeedConfiguration.documentDataFieldName) &&
        Objects.equals(this.documentTitleFieldName, salesforceChatterFeedConfiguration.documentTitleFieldName) &&
        Objects.equals(this.fieldMappings, salesforceChatterFeedConfiguration.fieldMappings) &&
        Objects.equals(this.includeFilterTypes, salesforceChatterFeedConfiguration.includeFilterTypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(documentDataFieldName, documentTitleFieldName, fieldMappings, includeFilterTypes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SalesforceChatterFeedConfiguration {\n");
    sb.append("    documentDataFieldName: ").append(toIndentedString(documentDataFieldName)).append("\n");
    sb.append("    documentTitleFieldName: ").append(toIndentedString(documentTitleFieldName)).append("\n");
    sb.append("    fieldMappings: ").append(toIndentedString(fieldMappings)).append("\n");
    sb.append("    includeFilterTypes: ").append(toIndentedString(includeFilterTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DocumentDataFieldName");
    openapiFields.add("DocumentTitleFieldName");
    openapiFields.add("FieldMappings");
    openapiFields.add("IncludeFilterTypes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DocumentDataFieldName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SalesforceChatterFeedConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SalesforceChatterFeedConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SalesforceChatterFeedConfiguration is not found in the empty JSON string", SalesforceChatterFeedConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SalesforceChatterFeedConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SalesforceChatterFeedConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SalesforceChatterFeedConfiguration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `DocumentDataFieldName`
      String.validateJsonElement(jsonObj.get("DocumentDataFieldName"));
      // validate the optional field `DocumentTitleFieldName`
      if (jsonObj.get("DocumentTitleFieldName") != null && !jsonObj.get("DocumentTitleFieldName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DocumentTitleFieldName"));
      }
      // validate the optional field `FieldMappings`
      if (jsonObj.get("FieldMappings") != null && !jsonObj.get("FieldMappings").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("FieldMappings"));
      }
      // validate the optional field `IncludeFilterTypes`
      if (jsonObj.get("IncludeFilterTypes") != null && !jsonObj.get("IncludeFilterTypes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("IncludeFilterTypes"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SalesforceChatterFeedConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SalesforceChatterFeedConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SalesforceChatterFeedConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SalesforceChatterFeedConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<SalesforceChatterFeedConfiguration>() {
           @Override
           public void write(JsonWriter out, SalesforceChatterFeedConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SalesforceChatterFeedConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SalesforceChatterFeedConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SalesforceChatterFeedConfiguration
   * @throws IOException if the JSON string is invalid with respect to SalesforceChatterFeedConfiguration
   */
  public static SalesforceChatterFeedConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SalesforceChatterFeedConfiguration.class);
  }

  /**
   * Convert an instance of SalesforceChatterFeedConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

