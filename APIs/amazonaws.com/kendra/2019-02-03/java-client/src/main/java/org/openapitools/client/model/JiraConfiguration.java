/*
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.JiraConfigurationVpcConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Provides the configuration information to connect to Jira as your data source.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:16.778416-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JiraConfiguration {
  public static final String SERIALIZED_NAME_JIRA_ACCOUNT_URL = "JiraAccountUrl";
  @SerializedName(SERIALIZED_NAME_JIRA_ACCOUNT_URL)
  private String jiraAccountUrl;

  public static final String SERIALIZED_NAME_SECRET_ARN = "SecretArn";
  @SerializedName(SERIALIZED_NAME_SECRET_ARN)
  private String secretArn;

  public static final String SERIALIZED_NAME_USE_CHANGE_LOG = "UseChangeLog";
  @SerializedName(SERIALIZED_NAME_USE_CHANGE_LOG)
  private Boolean useChangeLog;

  public static final String SERIALIZED_NAME_PROJECT = "Project";
  @SerializedName(SERIALIZED_NAME_PROJECT)
  private List project;

  public static final String SERIALIZED_NAME_ISSUE_TYPE = "IssueType";
  @SerializedName(SERIALIZED_NAME_ISSUE_TYPE)
  private List issueType;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private List status;

  public static final String SERIALIZED_NAME_ISSUE_SUB_ENTITY_FILTER = "IssueSubEntityFilter";
  @SerializedName(SERIALIZED_NAME_ISSUE_SUB_ENTITY_FILTER)
  private List issueSubEntityFilter;

  public static final String SERIALIZED_NAME_ATTACHMENT_FIELD_MAPPINGS = "AttachmentFieldMappings";
  @SerializedName(SERIALIZED_NAME_ATTACHMENT_FIELD_MAPPINGS)
  private List attachmentFieldMappings;

  public static final String SERIALIZED_NAME_COMMENT_FIELD_MAPPINGS = "CommentFieldMappings";
  @SerializedName(SERIALIZED_NAME_COMMENT_FIELD_MAPPINGS)
  private List commentFieldMappings;

  public static final String SERIALIZED_NAME_ISSUE_FIELD_MAPPINGS = "IssueFieldMappings";
  @SerializedName(SERIALIZED_NAME_ISSUE_FIELD_MAPPINGS)
  private List issueFieldMappings;

  public static final String SERIALIZED_NAME_PROJECT_FIELD_MAPPINGS = "ProjectFieldMappings";
  @SerializedName(SERIALIZED_NAME_PROJECT_FIELD_MAPPINGS)
  private List projectFieldMappings;

  public static final String SERIALIZED_NAME_WORK_LOG_FIELD_MAPPINGS = "WorkLogFieldMappings";
  @SerializedName(SERIALIZED_NAME_WORK_LOG_FIELD_MAPPINGS)
  private List workLogFieldMappings;

  public static final String SERIALIZED_NAME_INCLUSION_PATTERNS = "InclusionPatterns";
  @SerializedName(SERIALIZED_NAME_INCLUSION_PATTERNS)
  private List inclusionPatterns;

  public static final String SERIALIZED_NAME_EXCLUSION_PATTERNS = "ExclusionPatterns";
  @SerializedName(SERIALIZED_NAME_EXCLUSION_PATTERNS)
  private List exclusionPatterns;

  public static final String SERIALIZED_NAME_VPC_CONFIGURATION = "VpcConfiguration";
  @SerializedName(SERIALIZED_NAME_VPC_CONFIGURATION)
  private JiraConfigurationVpcConfiguration vpcConfiguration;

  public JiraConfiguration() {
  }

  public JiraConfiguration jiraAccountUrl(String jiraAccountUrl) {
    this.jiraAccountUrl = jiraAccountUrl;
    return this;
  }

  /**
   * Get jiraAccountUrl
   * @return jiraAccountUrl
   */
  @javax.annotation.Nonnull
  public String getJiraAccountUrl() {
    return jiraAccountUrl;
  }

  public void setJiraAccountUrl(String jiraAccountUrl) {
    this.jiraAccountUrl = jiraAccountUrl;
  }


  public JiraConfiguration secretArn(String secretArn) {
    this.secretArn = secretArn;
    return this;
  }

  /**
   * Get secretArn
   * @return secretArn
   */
  @javax.annotation.Nonnull
  public String getSecretArn() {
    return secretArn;
  }

  public void setSecretArn(String secretArn) {
    this.secretArn = secretArn;
  }


  public JiraConfiguration useChangeLog(Boolean useChangeLog) {
    this.useChangeLog = useChangeLog;
    return this;
  }

  /**
   * Get useChangeLog
   * @return useChangeLog
   */
  @javax.annotation.Nullable
  public Boolean getUseChangeLog() {
    return useChangeLog;
  }

  public void setUseChangeLog(Boolean useChangeLog) {
    this.useChangeLog = useChangeLog;
  }


  public JiraConfiguration project(List project) {
    this.project = project;
    return this;
  }

  /**
   * Get project
   * @return project
   */
  @javax.annotation.Nullable
  public List getProject() {
    return project;
  }

  public void setProject(List project) {
    this.project = project;
  }


  public JiraConfiguration issueType(List issueType) {
    this.issueType = issueType;
    return this;
  }

  /**
   * Get issueType
   * @return issueType
   */
  @javax.annotation.Nullable
  public List getIssueType() {
    return issueType;
  }

  public void setIssueType(List issueType) {
    this.issueType = issueType;
  }


  public JiraConfiguration status(List status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public List getStatus() {
    return status;
  }

  public void setStatus(List status) {
    this.status = status;
  }


  public JiraConfiguration issueSubEntityFilter(List issueSubEntityFilter) {
    this.issueSubEntityFilter = issueSubEntityFilter;
    return this;
  }

  /**
   * Get issueSubEntityFilter
   * @return issueSubEntityFilter
   */
  @javax.annotation.Nullable
  public List getIssueSubEntityFilter() {
    return issueSubEntityFilter;
  }

  public void setIssueSubEntityFilter(List issueSubEntityFilter) {
    this.issueSubEntityFilter = issueSubEntityFilter;
  }


  public JiraConfiguration attachmentFieldMappings(List attachmentFieldMappings) {
    this.attachmentFieldMappings = attachmentFieldMappings;
    return this;
  }

  /**
   * Get attachmentFieldMappings
   * @return attachmentFieldMappings
   */
  @javax.annotation.Nullable
  public List getAttachmentFieldMappings() {
    return attachmentFieldMappings;
  }

  public void setAttachmentFieldMappings(List attachmentFieldMappings) {
    this.attachmentFieldMappings = attachmentFieldMappings;
  }


  public JiraConfiguration commentFieldMappings(List commentFieldMappings) {
    this.commentFieldMappings = commentFieldMappings;
    return this;
  }

  /**
   * Get commentFieldMappings
   * @return commentFieldMappings
   */
  @javax.annotation.Nullable
  public List getCommentFieldMappings() {
    return commentFieldMappings;
  }

  public void setCommentFieldMappings(List commentFieldMappings) {
    this.commentFieldMappings = commentFieldMappings;
  }


  public JiraConfiguration issueFieldMappings(List issueFieldMappings) {
    this.issueFieldMappings = issueFieldMappings;
    return this;
  }

  /**
   * Get issueFieldMappings
   * @return issueFieldMappings
   */
  @javax.annotation.Nullable
  public List getIssueFieldMappings() {
    return issueFieldMappings;
  }

  public void setIssueFieldMappings(List issueFieldMappings) {
    this.issueFieldMappings = issueFieldMappings;
  }


  public JiraConfiguration projectFieldMappings(List projectFieldMappings) {
    this.projectFieldMappings = projectFieldMappings;
    return this;
  }

  /**
   * Get projectFieldMappings
   * @return projectFieldMappings
   */
  @javax.annotation.Nullable
  public List getProjectFieldMappings() {
    return projectFieldMappings;
  }

  public void setProjectFieldMappings(List projectFieldMappings) {
    this.projectFieldMappings = projectFieldMappings;
  }


  public JiraConfiguration workLogFieldMappings(List workLogFieldMappings) {
    this.workLogFieldMappings = workLogFieldMappings;
    return this;
  }

  /**
   * Get workLogFieldMappings
   * @return workLogFieldMappings
   */
  @javax.annotation.Nullable
  public List getWorkLogFieldMappings() {
    return workLogFieldMappings;
  }

  public void setWorkLogFieldMappings(List workLogFieldMappings) {
    this.workLogFieldMappings = workLogFieldMappings;
  }


  public JiraConfiguration inclusionPatterns(List inclusionPatterns) {
    this.inclusionPatterns = inclusionPatterns;
    return this;
  }

  /**
   * Get inclusionPatterns
   * @return inclusionPatterns
   */
  @javax.annotation.Nullable
  public List getInclusionPatterns() {
    return inclusionPatterns;
  }

  public void setInclusionPatterns(List inclusionPatterns) {
    this.inclusionPatterns = inclusionPatterns;
  }


  public JiraConfiguration exclusionPatterns(List exclusionPatterns) {
    this.exclusionPatterns = exclusionPatterns;
    return this;
  }

  /**
   * Get exclusionPatterns
   * @return exclusionPatterns
   */
  @javax.annotation.Nullable
  public List getExclusionPatterns() {
    return exclusionPatterns;
  }

  public void setExclusionPatterns(List exclusionPatterns) {
    this.exclusionPatterns = exclusionPatterns;
  }


  public JiraConfiguration vpcConfiguration(JiraConfigurationVpcConfiguration vpcConfiguration) {
    this.vpcConfiguration = vpcConfiguration;
    return this;
  }

  /**
   * Get vpcConfiguration
   * @return vpcConfiguration
   */
  @javax.annotation.Nullable
  public JiraConfigurationVpcConfiguration getVpcConfiguration() {
    return vpcConfiguration;
  }

  public void setVpcConfiguration(JiraConfigurationVpcConfiguration vpcConfiguration) {
    this.vpcConfiguration = vpcConfiguration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JiraConfiguration jiraConfiguration = (JiraConfiguration) o;
    return Objects.equals(this.jiraAccountUrl, jiraConfiguration.jiraAccountUrl) &&
        Objects.equals(this.secretArn, jiraConfiguration.secretArn) &&
        Objects.equals(this.useChangeLog, jiraConfiguration.useChangeLog) &&
        Objects.equals(this.project, jiraConfiguration.project) &&
        Objects.equals(this.issueType, jiraConfiguration.issueType) &&
        Objects.equals(this.status, jiraConfiguration.status) &&
        Objects.equals(this.issueSubEntityFilter, jiraConfiguration.issueSubEntityFilter) &&
        Objects.equals(this.attachmentFieldMappings, jiraConfiguration.attachmentFieldMappings) &&
        Objects.equals(this.commentFieldMappings, jiraConfiguration.commentFieldMappings) &&
        Objects.equals(this.issueFieldMappings, jiraConfiguration.issueFieldMappings) &&
        Objects.equals(this.projectFieldMappings, jiraConfiguration.projectFieldMappings) &&
        Objects.equals(this.workLogFieldMappings, jiraConfiguration.workLogFieldMappings) &&
        Objects.equals(this.inclusionPatterns, jiraConfiguration.inclusionPatterns) &&
        Objects.equals(this.exclusionPatterns, jiraConfiguration.exclusionPatterns) &&
        Objects.equals(this.vpcConfiguration, jiraConfiguration.vpcConfiguration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(jiraAccountUrl, secretArn, useChangeLog, project, issueType, status, issueSubEntityFilter, attachmentFieldMappings, commentFieldMappings, issueFieldMappings, projectFieldMappings, workLogFieldMappings, inclusionPatterns, exclusionPatterns, vpcConfiguration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JiraConfiguration {\n");
    sb.append("    jiraAccountUrl: ").append(toIndentedString(jiraAccountUrl)).append("\n");
    sb.append("    secretArn: ").append(toIndentedString(secretArn)).append("\n");
    sb.append("    useChangeLog: ").append(toIndentedString(useChangeLog)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    issueType: ").append(toIndentedString(issueType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    issueSubEntityFilter: ").append(toIndentedString(issueSubEntityFilter)).append("\n");
    sb.append("    attachmentFieldMappings: ").append(toIndentedString(attachmentFieldMappings)).append("\n");
    sb.append("    commentFieldMappings: ").append(toIndentedString(commentFieldMappings)).append("\n");
    sb.append("    issueFieldMappings: ").append(toIndentedString(issueFieldMappings)).append("\n");
    sb.append("    projectFieldMappings: ").append(toIndentedString(projectFieldMappings)).append("\n");
    sb.append("    workLogFieldMappings: ").append(toIndentedString(workLogFieldMappings)).append("\n");
    sb.append("    inclusionPatterns: ").append(toIndentedString(inclusionPatterns)).append("\n");
    sb.append("    exclusionPatterns: ").append(toIndentedString(exclusionPatterns)).append("\n");
    sb.append("    vpcConfiguration: ").append(toIndentedString(vpcConfiguration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("JiraAccountUrl");
    openapiFields.add("SecretArn");
    openapiFields.add("UseChangeLog");
    openapiFields.add("Project");
    openapiFields.add("IssueType");
    openapiFields.add("Status");
    openapiFields.add("IssueSubEntityFilter");
    openapiFields.add("AttachmentFieldMappings");
    openapiFields.add("CommentFieldMappings");
    openapiFields.add("IssueFieldMappings");
    openapiFields.add("ProjectFieldMappings");
    openapiFields.add("WorkLogFieldMappings");
    openapiFields.add("InclusionPatterns");
    openapiFields.add("ExclusionPatterns");
    openapiFields.add("VpcConfiguration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("JiraAccountUrl");
    openapiRequiredFields.add("SecretArn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JiraConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JiraConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JiraConfiguration is not found in the empty JSON string", JiraConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JiraConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JiraConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : JiraConfiguration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `JiraAccountUrl`
      String.validateJsonElement(jsonObj.get("JiraAccountUrl"));
      // validate the required field `SecretArn`
      String.validateJsonElement(jsonObj.get("SecretArn"));
      // validate the optional field `UseChangeLog`
      if (jsonObj.get("UseChangeLog") != null && !jsonObj.get("UseChangeLog").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("UseChangeLog"));
      }
      // validate the optional field `Project`
      if (jsonObj.get("Project") != null && !jsonObj.get("Project").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Project"));
      }
      // validate the optional field `IssueType`
      if (jsonObj.get("IssueType") != null && !jsonObj.get("IssueType").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("IssueType"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `IssueSubEntityFilter`
      if (jsonObj.get("IssueSubEntityFilter") != null && !jsonObj.get("IssueSubEntityFilter").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("IssueSubEntityFilter"));
      }
      // validate the optional field `AttachmentFieldMappings`
      if (jsonObj.get("AttachmentFieldMappings") != null && !jsonObj.get("AttachmentFieldMappings").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("AttachmentFieldMappings"));
      }
      // validate the optional field `CommentFieldMappings`
      if (jsonObj.get("CommentFieldMappings") != null && !jsonObj.get("CommentFieldMappings").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("CommentFieldMappings"));
      }
      // validate the optional field `IssueFieldMappings`
      if (jsonObj.get("IssueFieldMappings") != null && !jsonObj.get("IssueFieldMappings").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("IssueFieldMappings"));
      }
      // validate the optional field `ProjectFieldMappings`
      if (jsonObj.get("ProjectFieldMappings") != null && !jsonObj.get("ProjectFieldMappings").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ProjectFieldMappings"));
      }
      // validate the optional field `WorkLogFieldMappings`
      if (jsonObj.get("WorkLogFieldMappings") != null && !jsonObj.get("WorkLogFieldMappings").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("WorkLogFieldMappings"));
      }
      // validate the optional field `InclusionPatterns`
      if (jsonObj.get("InclusionPatterns") != null && !jsonObj.get("InclusionPatterns").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("InclusionPatterns"));
      }
      // validate the optional field `ExclusionPatterns`
      if (jsonObj.get("ExclusionPatterns") != null && !jsonObj.get("ExclusionPatterns").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ExclusionPatterns"));
      }
      // validate the optional field `VpcConfiguration`
      if (jsonObj.get("VpcConfiguration") != null && !jsonObj.get("VpcConfiguration").isJsonNull()) {
        JiraConfigurationVpcConfiguration.validateJsonElement(jsonObj.get("VpcConfiguration"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JiraConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JiraConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JiraConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JiraConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<JiraConfiguration>() {
           @Override
           public void write(JsonWriter out, JiraConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JiraConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JiraConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JiraConfiguration
   * @throws IOException if the JSON string is invalid with respect to JiraConfiguration
   */
  public static JiraConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JiraConfiguration.class);
  }

  /**
   * Convert an instance of JiraConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

