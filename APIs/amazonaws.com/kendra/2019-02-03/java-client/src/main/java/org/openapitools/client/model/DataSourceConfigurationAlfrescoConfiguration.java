/*
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AlfrescoConfigurationSslCertificateS3Path;
import org.openapitools.client.model.AlfrescoConfigurationVpcConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DataSourceConfigurationAlfrescoConfiguration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:16.778416-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DataSourceConfigurationAlfrescoConfiguration {
  public static final String SERIALIZED_NAME_SITE_URL = "SiteUrl";
  @SerializedName(SERIALIZED_NAME_SITE_URL)
  private String siteUrl;

  public static final String SERIALIZED_NAME_SITE_ID = "SiteId";
  @SerializedName(SERIALIZED_NAME_SITE_ID)
  private String siteId;

  public static final String SERIALIZED_NAME_SECRET_ARN = "SecretArn";
  @SerializedName(SERIALIZED_NAME_SECRET_ARN)
  private String secretArn;

  public static final String SERIALIZED_NAME_SSL_CERTIFICATE_S3_PATH = "SslCertificateS3Path";
  @SerializedName(SERIALIZED_NAME_SSL_CERTIFICATE_S3_PATH)
  private AlfrescoConfigurationSslCertificateS3Path sslCertificateS3Path;

  public static final String SERIALIZED_NAME_CRAWL_SYSTEM_FOLDERS = "CrawlSystemFolders";
  @SerializedName(SERIALIZED_NAME_CRAWL_SYSTEM_FOLDERS)
  private Boolean crawlSystemFolders;

  public static final String SERIALIZED_NAME_CRAWL_COMMENTS = "CrawlComments";
  @SerializedName(SERIALIZED_NAME_CRAWL_COMMENTS)
  private Boolean crawlComments;

  public static final String SERIALIZED_NAME_ENTITY_FILTER = "EntityFilter";
  @SerializedName(SERIALIZED_NAME_ENTITY_FILTER)
  private List entityFilter;

  public static final String SERIALIZED_NAME_DOCUMENT_LIBRARY_FIELD_MAPPINGS = "DocumentLibraryFieldMappings";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_LIBRARY_FIELD_MAPPINGS)
  private List documentLibraryFieldMappings;

  public static final String SERIALIZED_NAME_BLOG_FIELD_MAPPINGS = "BlogFieldMappings";
  @SerializedName(SERIALIZED_NAME_BLOG_FIELD_MAPPINGS)
  private List blogFieldMappings;

  public static final String SERIALIZED_NAME_WIKI_FIELD_MAPPINGS = "WikiFieldMappings";
  @SerializedName(SERIALIZED_NAME_WIKI_FIELD_MAPPINGS)
  private List wikiFieldMappings;

  public static final String SERIALIZED_NAME_INCLUSION_PATTERNS = "InclusionPatterns";
  @SerializedName(SERIALIZED_NAME_INCLUSION_PATTERNS)
  private List inclusionPatterns;

  public static final String SERIALIZED_NAME_EXCLUSION_PATTERNS = "ExclusionPatterns";
  @SerializedName(SERIALIZED_NAME_EXCLUSION_PATTERNS)
  private List exclusionPatterns;

  public static final String SERIALIZED_NAME_VPC_CONFIGURATION = "VpcConfiguration";
  @SerializedName(SERIALIZED_NAME_VPC_CONFIGURATION)
  private AlfrescoConfigurationVpcConfiguration vpcConfiguration;

  public DataSourceConfigurationAlfrescoConfiguration() {
  }

  public DataSourceConfigurationAlfrescoConfiguration siteUrl(String siteUrl) {
    this.siteUrl = siteUrl;
    return this;
  }

  /**
   * Get siteUrl
   * @return siteUrl
   */
  @javax.annotation.Nonnull
  public String getSiteUrl() {
    return siteUrl;
  }

  public void setSiteUrl(String siteUrl) {
    this.siteUrl = siteUrl;
  }


  public DataSourceConfigurationAlfrescoConfiguration siteId(String siteId) {
    this.siteId = siteId;
    return this;
  }

  /**
   * Get siteId
   * @return siteId
   */
  @javax.annotation.Nonnull
  public String getSiteId() {
    return siteId;
  }

  public void setSiteId(String siteId) {
    this.siteId = siteId;
  }


  public DataSourceConfigurationAlfrescoConfiguration secretArn(String secretArn) {
    this.secretArn = secretArn;
    return this;
  }

  /**
   * Get secretArn
   * @return secretArn
   */
  @javax.annotation.Nonnull
  public String getSecretArn() {
    return secretArn;
  }

  public void setSecretArn(String secretArn) {
    this.secretArn = secretArn;
  }


  public DataSourceConfigurationAlfrescoConfiguration sslCertificateS3Path(AlfrescoConfigurationSslCertificateS3Path sslCertificateS3Path) {
    this.sslCertificateS3Path = sslCertificateS3Path;
    return this;
  }

  /**
   * Get sslCertificateS3Path
   * @return sslCertificateS3Path
   */
  @javax.annotation.Nonnull
  public AlfrescoConfigurationSslCertificateS3Path getSslCertificateS3Path() {
    return sslCertificateS3Path;
  }

  public void setSslCertificateS3Path(AlfrescoConfigurationSslCertificateS3Path sslCertificateS3Path) {
    this.sslCertificateS3Path = sslCertificateS3Path;
  }


  public DataSourceConfigurationAlfrescoConfiguration crawlSystemFolders(Boolean crawlSystemFolders) {
    this.crawlSystemFolders = crawlSystemFolders;
    return this;
  }

  /**
   * Get crawlSystemFolders
   * @return crawlSystemFolders
   */
  @javax.annotation.Nullable
  public Boolean getCrawlSystemFolders() {
    return crawlSystemFolders;
  }

  public void setCrawlSystemFolders(Boolean crawlSystemFolders) {
    this.crawlSystemFolders = crawlSystemFolders;
  }


  public DataSourceConfigurationAlfrescoConfiguration crawlComments(Boolean crawlComments) {
    this.crawlComments = crawlComments;
    return this;
  }

  /**
   * Get crawlComments
   * @return crawlComments
   */
  @javax.annotation.Nullable
  public Boolean getCrawlComments() {
    return crawlComments;
  }

  public void setCrawlComments(Boolean crawlComments) {
    this.crawlComments = crawlComments;
  }


  public DataSourceConfigurationAlfrescoConfiguration entityFilter(List entityFilter) {
    this.entityFilter = entityFilter;
    return this;
  }

  /**
   * Get entityFilter
   * @return entityFilter
   */
  @javax.annotation.Nullable
  public List getEntityFilter() {
    return entityFilter;
  }

  public void setEntityFilter(List entityFilter) {
    this.entityFilter = entityFilter;
  }


  public DataSourceConfigurationAlfrescoConfiguration documentLibraryFieldMappings(List documentLibraryFieldMappings) {
    this.documentLibraryFieldMappings = documentLibraryFieldMappings;
    return this;
  }

  /**
   * Get documentLibraryFieldMappings
   * @return documentLibraryFieldMappings
   */
  @javax.annotation.Nullable
  public List getDocumentLibraryFieldMappings() {
    return documentLibraryFieldMappings;
  }

  public void setDocumentLibraryFieldMappings(List documentLibraryFieldMappings) {
    this.documentLibraryFieldMappings = documentLibraryFieldMappings;
  }


  public DataSourceConfigurationAlfrescoConfiguration blogFieldMappings(List blogFieldMappings) {
    this.blogFieldMappings = blogFieldMappings;
    return this;
  }

  /**
   * Get blogFieldMappings
   * @return blogFieldMappings
   */
  @javax.annotation.Nullable
  public List getBlogFieldMappings() {
    return blogFieldMappings;
  }

  public void setBlogFieldMappings(List blogFieldMappings) {
    this.blogFieldMappings = blogFieldMappings;
  }


  public DataSourceConfigurationAlfrescoConfiguration wikiFieldMappings(List wikiFieldMappings) {
    this.wikiFieldMappings = wikiFieldMappings;
    return this;
  }

  /**
   * Get wikiFieldMappings
   * @return wikiFieldMappings
   */
  @javax.annotation.Nullable
  public List getWikiFieldMappings() {
    return wikiFieldMappings;
  }

  public void setWikiFieldMappings(List wikiFieldMappings) {
    this.wikiFieldMappings = wikiFieldMappings;
  }


  public DataSourceConfigurationAlfrescoConfiguration inclusionPatterns(List inclusionPatterns) {
    this.inclusionPatterns = inclusionPatterns;
    return this;
  }

  /**
   * Get inclusionPatterns
   * @return inclusionPatterns
   */
  @javax.annotation.Nullable
  public List getInclusionPatterns() {
    return inclusionPatterns;
  }

  public void setInclusionPatterns(List inclusionPatterns) {
    this.inclusionPatterns = inclusionPatterns;
  }


  public DataSourceConfigurationAlfrescoConfiguration exclusionPatterns(List exclusionPatterns) {
    this.exclusionPatterns = exclusionPatterns;
    return this;
  }

  /**
   * Get exclusionPatterns
   * @return exclusionPatterns
   */
  @javax.annotation.Nullable
  public List getExclusionPatterns() {
    return exclusionPatterns;
  }

  public void setExclusionPatterns(List exclusionPatterns) {
    this.exclusionPatterns = exclusionPatterns;
  }


  public DataSourceConfigurationAlfrescoConfiguration vpcConfiguration(AlfrescoConfigurationVpcConfiguration vpcConfiguration) {
    this.vpcConfiguration = vpcConfiguration;
    return this;
  }

  /**
   * Get vpcConfiguration
   * @return vpcConfiguration
   */
  @javax.annotation.Nullable
  public AlfrescoConfigurationVpcConfiguration getVpcConfiguration() {
    return vpcConfiguration;
  }

  public void setVpcConfiguration(AlfrescoConfigurationVpcConfiguration vpcConfiguration) {
    this.vpcConfiguration = vpcConfiguration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataSourceConfigurationAlfrescoConfiguration dataSourceConfigurationAlfrescoConfiguration = (DataSourceConfigurationAlfrescoConfiguration) o;
    return Objects.equals(this.siteUrl, dataSourceConfigurationAlfrescoConfiguration.siteUrl) &&
        Objects.equals(this.siteId, dataSourceConfigurationAlfrescoConfiguration.siteId) &&
        Objects.equals(this.secretArn, dataSourceConfigurationAlfrescoConfiguration.secretArn) &&
        Objects.equals(this.sslCertificateS3Path, dataSourceConfigurationAlfrescoConfiguration.sslCertificateS3Path) &&
        Objects.equals(this.crawlSystemFolders, dataSourceConfigurationAlfrescoConfiguration.crawlSystemFolders) &&
        Objects.equals(this.crawlComments, dataSourceConfigurationAlfrescoConfiguration.crawlComments) &&
        Objects.equals(this.entityFilter, dataSourceConfigurationAlfrescoConfiguration.entityFilter) &&
        Objects.equals(this.documentLibraryFieldMappings, dataSourceConfigurationAlfrescoConfiguration.documentLibraryFieldMappings) &&
        Objects.equals(this.blogFieldMappings, dataSourceConfigurationAlfrescoConfiguration.blogFieldMappings) &&
        Objects.equals(this.wikiFieldMappings, dataSourceConfigurationAlfrescoConfiguration.wikiFieldMappings) &&
        Objects.equals(this.inclusionPatterns, dataSourceConfigurationAlfrescoConfiguration.inclusionPatterns) &&
        Objects.equals(this.exclusionPatterns, dataSourceConfigurationAlfrescoConfiguration.exclusionPatterns) &&
        Objects.equals(this.vpcConfiguration, dataSourceConfigurationAlfrescoConfiguration.vpcConfiguration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(siteUrl, siteId, secretArn, sslCertificateS3Path, crawlSystemFolders, crawlComments, entityFilter, documentLibraryFieldMappings, blogFieldMappings, wikiFieldMappings, inclusionPatterns, exclusionPatterns, vpcConfiguration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataSourceConfigurationAlfrescoConfiguration {\n");
    sb.append("    siteUrl: ").append(toIndentedString(siteUrl)).append("\n");
    sb.append("    siteId: ").append(toIndentedString(siteId)).append("\n");
    sb.append("    secretArn: ").append(toIndentedString(secretArn)).append("\n");
    sb.append("    sslCertificateS3Path: ").append(toIndentedString(sslCertificateS3Path)).append("\n");
    sb.append("    crawlSystemFolders: ").append(toIndentedString(crawlSystemFolders)).append("\n");
    sb.append("    crawlComments: ").append(toIndentedString(crawlComments)).append("\n");
    sb.append("    entityFilter: ").append(toIndentedString(entityFilter)).append("\n");
    sb.append("    documentLibraryFieldMappings: ").append(toIndentedString(documentLibraryFieldMappings)).append("\n");
    sb.append("    blogFieldMappings: ").append(toIndentedString(blogFieldMappings)).append("\n");
    sb.append("    wikiFieldMappings: ").append(toIndentedString(wikiFieldMappings)).append("\n");
    sb.append("    inclusionPatterns: ").append(toIndentedString(inclusionPatterns)).append("\n");
    sb.append("    exclusionPatterns: ").append(toIndentedString(exclusionPatterns)).append("\n");
    sb.append("    vpcConfiguration: ").append(toIndentedString(vpcConfiguration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SiteUrl");
    openapiFields.add("SiteId");
    openapiFields.add("SecretArn");
    openapiFields.add("SslCertificateS3Path");
    openapiFields.add("CrawlSystemFolders");
    openapiFields.add("CrawlComments");
    openapiFields.add("EntityFilter");
    openapiFields.add("DocumentLibraryFieldMappings");
    openapiFields.add("BlogFieldMappings");
    openapiFields.add("WikiFieldMappings");
    openapiFields.add("InclusionPatterns");
    openapiFields.add("ExclusionPatterns");
    openapiFields.add("VpcConfiguration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("SiteUrl");
    openapiRequiredFields.add("SiteId");
    openapiRequiredFields.add("SecretArn");
    openapiRequiredFields.add("SslCertificateS3Path");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataSourceConfigurationAlfrescoConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataSourceConfigurationAlfrescoConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataSourceConfigurationAlfrescoConfiguration is not found in the empty JSON string", DataSourceConfigurationAlfrescoConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataSourceConfigurationAlfrescoConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataSourceConfigurationAlfrescoConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DataSourceConfigurationAlfrescoConfiguration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `SiteUrl`
      String.validateJsonElement(jsonObj.get("SiteUrl"));
      // validate the required field `SiteId`
      String.validateJsonElement(jsonObj.get("SiteId"));
      // validate the required field `SecretArn`
      String.validateJsonElement(jsonObj.get("SecretArn"));
      // validate the required field `SslCertificateS3Path`
      AlfrescoConfigurationSslCertificateS3Path.validateJsonElement(jsonObj.get("SslCertificateS3Path"));
      // validate the optional field `CrawlSystemFolders`
      if (jsonObj.get("CrawlSystemFolders") != null && !jsonObj.get("CrawlSystemFolders").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("CrawlSystemFolders"));
      }
      // validate the optional field `CrawlComments`
      if (jsonObj.get("CrawlComments") != null && !jsonObj.get("CrawlComments").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("CrawlComments"));
      }
      // validate the optional field `EntityFilter`
      if (jsonObj.get("EntityFilter") != null && !jsonObj.get("EntityFilter").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("EntityFilter"));
      }
      // validate the optional field `DocumentLibraryFieldMappings`
      if (jsonObj.get("DocumentLibraryFieldMappings") != null && !jsonObj.get("DocumentLibraryFieldMappings").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("DocumentLibraryFieldMappings"));
      }
      // validate the optional field `BlogFieldMappings`
      if (jsonObj.get("BlogFieldMappings") != null && !jsonObj.get("BlogFieldMappings").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("BlogFieldMappings"));
      }
      // validate the optional field `WikiFieldMappings`
      if (jsonObj.get("WikiFieldMappings") != null && !jsonObj.get("WikiFieldMappings").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("WikiFieldMappings"));
      }
      // validate the optional field `InclusionPatterns`
      if (jsonObj.get("InclusionPatterns") != null && !jsonObj.get("InclusionPatterns").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("InclusionPatterns"));
      }
      // validate the optional field `ExclusionPatterns`
      if (jsonObj.get("ExclusionPatterns") != null && !jsonObj.get("ExclusionPatterns").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ExclusionPatterns"));
      }
      // validate the optional field `VpcConfiguration`
      if (jsonObj.get("VpcConfiguration") != null && !jsonObj.get("VpcConfiguration").isJsonNull()) {
        AlfrescoConfigurationVpcConfiguration.validateJsonElement(jsonObj.get("VpcConfiguration"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataSourceConfigurationAlfrescoConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataSourceConfigurationAlfrescoConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataSourceConfigurationAlfrescoConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataSourceConfigurationAlfrescoConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<DataSourceConfigurationAlfrescoConfiguration>() {
           @Override
           public void write(JsonWriter out, DataSourceConfigurationAlfrescoConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataSourceConfigurationAlfrescoConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DataSourceConfigurationAlfrescoConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataSourceConfigurationAlfrescoConfiguration
   * @throws IOException if the JSON string is invalid with respect to DataSourceConfigurationAlfrescoConfiguration
   */
  public static DataSourceConfigurationAlfrescoConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataSourceConfigurationAlfrescoConfiguration.class);
  }

  /**
   * Convert an instance of DataSourceConfigurationAlfrescoConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

