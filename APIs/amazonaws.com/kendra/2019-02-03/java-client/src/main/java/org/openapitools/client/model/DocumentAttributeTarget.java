/*
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DocumentAttributeTargetTargetDocumentAttributeValue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;The target document attribute or metadata field you want to alter when ingesting documents into Amazon Kendra.&lt;/p&gt; &lt;p&gt;For example, you can delete customer identification numbers associated with the documents, stored in the document metadata field called &#39;Customer_ID&#39;. You set the target key as &#39;Customer_ID&#39; and the deletion flag to &lt;code&gt;TRUE&lt;/code&gt;. This removes all customer ID values in the field &#39;Customer_ID&#39;. This would scrub personally identifiable information from each document&#39;s metadata.&lt;/p&gt; &lt;p&gt;Amazon Kendra cannot create a target field if it has not already been created as an index field. After you create your index field, you can create a document metadata field using &lt;code&gt;DocumentAttributeTarget&lt;/code&gt;. Amazon Kendra then will map your newly created metadata field to your index field.&lt;/p&gt; &lt;p&gt;You can also use this with &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kendra/latest/dg/API_DocumentAttributeCondition.html\&quot;&gt;DocumentAttributeCondition&lt;/a&gt;.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:16.778416-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DocumentAttributeTarget {
  public static final String SERIALIZED_NAME_TARGET_DOCUMENT_ATTRIBUTE_KEY = "TargetDocumentAttributeKey";
  @SerializedName(SERIALIZED_NAME_TARGET_DOCUMENT_ATTRIBUTE_KEY)
  private String targetDocumentAttributeKey;

  public static final String SERIALIZED_NAME_TARGET_DOCUMENT_ATTRIBUTE_VALUE_DELETION = "TargetDocumentAttributeValueDeletion";
  @SerializedName(SERIALIZED_NAME_TARGET_DOCUMENT_ATTRIBUTE_VALUE_DELETION)
  private Boolean targetDocumentAttributeValueDeletion;

  public static final String SERIALIZED_NAME_TARGET_DOCUMENT_ATTRIBUTE_VALUE = "TargetDocumentAttributeValue";
  @SerializedName(SERIALIZED_NAME_TARGET_DOCUMENT_ATTRIBUTE_VALUE)
  private DocumentAttributeTargetTargetDocumentAttributeValue targetDocumentAttributeValue;

  public DocumentAttributeTarget() {
  }

  public DocumentAttributeTarget targetDocumentAttributeKey(String targetDocumentAttributeKey) {
    this.targetDocumentAttributeKey = targetDocumentAttributeKey;
    return this;
  }

  /**
   * Get targetDocumentAttributeKey
   * @return targetDocumentAttributeKey
   */
  @javax.annotation.Nullable
  public String getTargetDocumentAttributeKey() {
    return targetDocumentAttributeKey;
  }

  public void setTargetDocumentAttributeKey(String targetDocumentAttributeKey) {
    this.targetDocumentAttributeKey = targetDocumentAttributeKey;
  }


  public DocumentAttributeTarget targetDocumentAttributeValueDeletion(Boolean targetDocumentAttributeValueDeletion) {
    this.targetDocumentAttributeValueDeletion = targetDocumentAttributeValueDeletion;
    return this;
  }

  /**
   * Get targetDocumentAttributeValueDeletion
   * @return targetDocumentAttributeValueDeletion
   */
  @javax.annotation.Nullable
  public Boolean getTargetDocumentAttributeValueDeletion() {
    return targetDocumentAttributeValueDeletion;
  }

  public void setTargetDocumentAttributeValueDeletion(Boolean targetDocumentAttributeValueDeletion) {
    this.targetDocumentAttributeValueDeletion = targetDocumentAttributeValueDeletion;
  }


  public DocumentAttributeTarget targetDocumentAttributeValue(DocumentAttributeTargetTargetDocumentAttributeValue targetDocumentAttributeValue) {
    this.targetDocumentAttributeValue = targetDocumentAttributeValue;
    return this;
  }

  /**
   * Get targetDocumentAttributeValue
   * @return targetDocumentAttributeValue
   */
  @javax.annotation.Nullable
  public DocumentAttributeTargetTargetDocumentAttributeValue getTargetDocumentAttributeValue() {
    return targetDocumentAttributeValue;
  }

  public void setTargetDocumentAttributeValue(DocumentAttributeTargetTargetDocumentAttributeValue targetDocumentAttributeValue) {
    this.targetDocumentAttributeValue = targetDocumentAttributeValue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentAttributeTarget documentAttributeTarget = (DocumentAttributeTarget) o;
    return Objects.equals(this.targetDocumentAttributeKey, documentAttributeTarget.targetDocumentAttributeKey) &&
        Objects.equals(this.targetDocumentAttributeValueDeletion, documentAttributeTarget.targetDocumentAttributeValueDeletion) &&
        Objects.equals(this.targetDocumentAttributeValue, documentAttributeTarget.targetDocumentAttributeValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(targetDocumentAttributeKey, targetDocumentAttributeValueDeletion, targetDocumentAttributeValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentAttributeTarget {\n");
    sb.append("    targetDocumentAttributeKey: ").append(toIndentedString(targetDocumentAttributeKey)).append("\n");
    sb.append("    targetDocumentAttributeValueDeletion: ").append(toIndentedString(targetDocumentAttributeValueDeletion)).append("\n");
    sb.append("    targetDocumentAttributeValue: ").append(toIndentedString(targetDocumentAttributeValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TargetDocumentAttributeKey");
    openapiFields.add("TargetDocumentAttributeValueDeletion");
    openapiFields.add("TargetDocumentAttributeValue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DocumentAttributeTarget
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DocumentAttributeTarget.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DocumentAttributeTarget is not found in the empty JSON string", DocumentAttributeTarget.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DocumentAttributeTarget.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DocumentAttributeTarget` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `TargetDocumentAttributeKey`
      if (jsonObj.get("TargetDocumentAttributeKey") != null && !jsonObj.get("TargetDocumentAttributeKey").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TargetDocumentAttributeKey"));
      }
      // validate the optional field `TargetDocumentAttributeValueDeletion`
      if (jsonObj.get("TargetDocumentAttributeValueDeletion") != null && !jsonObj.get("TargetDocumentAttributeValueDeletion").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("TargetDocumentAttributeValueDeletion"));
      }
      // validate the optional field `TargetDocumentAttributeValue`
      if (jsonObj.get("TargetDocumentAttributeValue") != null && !jsonObj.get("TargetDocumentAttributeValue").isJsonNull()) {
        DocumentAttributeTargetTargetDocumentAttributeValue.validateJsonElement(jsonObj.get("TargetDocumentAttributeValue"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DocumentAttributeTarget.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DocumentAttributeTarget' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DocumentAttributeTarget> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DocumentAttributeTarget.class));

       return (TypeAdapter<T>) new TypeAdapter<DocumentAttributeTarget>() {
           @Override
           public void write(JsonWriter out, DocumentAttributeTarget value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DocumentAttributeTarget read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DocumentAttributeTarget given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DocumentAttributeTarget
   * @throws IOException if the JSON string is invalid with respect to DocumentAttributeTarget
   */
  public static DocumentAttributeTarget fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DocumentAttributeTarget.class);
  }

  /**
   * Convert an instance of DocumentAttributeTarget to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

