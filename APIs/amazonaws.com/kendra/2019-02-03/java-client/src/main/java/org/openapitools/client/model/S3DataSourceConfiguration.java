/*
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DocumentsMetadataConfiguration;
import org.openapitools.client.model.S3DataSourceConfigurationAccessControlListConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Provides the configuration information to connect to an Amazon S3 bucket.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:16.778416-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class S3DataSourceConfiguration {
  public static final String SERIALIZED_NAME_BUCKET_NAME = "BucketName";
  @SerializedName(SERIALIZED_NAME_BUCKET_NAME)
  private String bucketName;

  public static final String SERIALIZED_NAME_INCLUSION_PREFIXES = "InclusionPrefixes";
  @SerializedName(SERIALIZED_NAME_INCLUSION_PREFIXES)
  private List inclusionPrefixes;

  public static final String SERIALIZED_NAME_INCLUSION_PATTERNS = "InclusionPatterns";
  @SerializedName(SERIALIZED_NAME_INCLUSION_PATTERNS)
  private List inclusionPatterns;

  public static final String SERIALIZED_NAME_EXCLUSION_PATTERNS = "ExclusionPatterns";
  @SerializedName(SERIALIZED_NAME_EXCLUSION_PATTERNS)
  private List exclusionPatterns;

  public static final String SERIALIZED_NAME_DOCUMENTS_METADATA_CONFIGURATION = "DocumentsMetadataConfiguration";
  @SerializedName(SERIALIZED_NAME_DOCUMENTS_METADATA_CONFIGURATION)
  private DocumentsMetadataConfiguration documentsMetadataConfiguration;

  public static final String SERIALIZED_NAME_ACCESS_CONTROL_LIST_CONFIGURATION = "AccessControlListConfiguration";
  @SerializedName(SERIALIZED_NAME_ACCESS_CONTROL_LIST_CONFIGURATION)
  private S3DataSourceConfigurationAccessControlListConfiguration accessControlListConfiguration;

  public S3DataSourceConfiguration() {
  }

  public S3DataSourceConfiguration bucketName(String bucketName) {
    this.bucketName = bucketName;
    return this;
  }

  /**
   * Get bucketName
   * @return bucketName
   */
  @javax.annotation.Nonnull
  public String getBucketName() {
    return bucketName;
  }

  public void setBucketName(String bucketName) {
    this.bucketName = bucketName;
  }


  public S3DataSourceConfiguration inclusionPrefixes(List inclusionPrefixes) {
    this.inclusionPrefixes = inclusionPrefixes;
    return this;
  }

  /**
   * Get inclusionPrefixes
   * @return inclusionPrefixes
   */
  @javax.annotation.Nullable
  public List getInclusionPrefixes() {
    return inclusionPrefixes;
  }

  public void setInclusionPrefixes(List inclusionPrefixes) {
    this.inclusionPrefixes = inclusionPrefixes;
  }


  public S3DataSourceConfiguration inclusionPatterns(List inclusionPatterns) {
    this.inclusionPatterns = inclusionPatterns;
    return this;
  }

  /**
   * Get inclusionPatterns
   * @return inclusionPatterns
   */
  @javax.annotation.Nullable
  public List getInclusionPatterns() {
    return inclusionPatterns;
  }

  public void setInclusionPatterns(List inclusionPatterns) {
    this.inclusionPatterns = inclusionPatterns;
  }


  public S3DataSourceConfiguration exclusionPatterns(List exclusionPatterns) {
    this.exclusionPatterns = exclusionPatterns;
    return this;
  }

  /**
   * Get exclusionPatterns
   * @return exclusionPatterns
   */
  @javax.annotation.Nullable
  public List getExclusionPatterns() {
    return exclusionPatterns;
  }

  public void setExclusionPatterns(List exclusionPatterns) {
    this.exclusionPatterns = exclusionPatterns;
  }


  public S3DataSourceConfiguration documentsMetadataConfiguration(DocumentsMetadataConfiguration documentsMetadataConfiguration) {
    this.documentsMetadataConfiguration = documentsMetadataConfiguration;
    return this;
  }

  /**
   * Get documentsMetadataConfiguration
   * @return documentsMetadataConfiguration
   */
  @javax.annotation.Nullable
  public DocumentsMetadataConfiguration getDocumentsMetadataConfiguration() {
    return documentsMetadataConfiguration;
  }

  public void setDocumentsMetadataConfiguration(DocumentsMetadataConfiguration documentsMetadataConfiguration) {
    this.documentsMetadataConfiguration = documentsMetadataConfiguration;
  }


  public S3DataSourceConfiguration accessControlListConfiguration(S3DataSourceConfigurationAccessControlListConfiguration accessControlListConfiguration) {
    this.accessControlListConfiguration = accessControlListConfiguration;
    return this;
  }

  /**
   * Get accessControlListConfiguration
   * @return accessControlListConfiguration
   */
  @javax.annotation.Nullable
  public S3DataSourceConfigurationAccessControlListConfiguration getAccessControlListConfiguration() {
    return accessControlListConfiguration;
  }

  public void setAccessControlListConfiguration(S3DataSourceConfigurationAccessControlListConfiguration accessControlListConfiguration) {
    this.accessControlListConfiguration = accessControlListConfiguration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    S3DataSourceConfiguration s3DataSourceConfiguration = (S3DataSourceConfiguration) o;
    return Objects.equals(this.bucketName, s3DataSourceConfiguration.bucketName) &&
        Objects.equals(this.inclusionPrefixes, s3DataSourceConfiguration.inclusionPrefixes) &&
        Objects.equals(this.inclusionPatterns, s3DataSourceConfiguration.inclusionPatterns) &&
        Objects.equals(this.exclusionPatterns, s3DataSourceConfiguration.exclusionPatterns) &&
        Objects.equals(this.documentsMetadataConfiguration, s3DataSourceConfiguration.documentsMetadataConfiguration) &&
        Objects.equals(this.accessControlListConfiguration, s3DataSourceConfiguration.accessControlListConfiguration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bucketName, inclusionPrefixes, inclusionPatterns, exclusionPatterns, documentsMetadataConfiguration, accessControlListConfiguration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class S3DataSourceConfiguration {\n");
    sb.append("    bucketName: ").append(toIndentedString(bucketName)).append("\n");
    sb.append("    inclusionPrefixes: ").append(toIndentedString(inclusionPrefixes)).append("\n");
    sb.append("    inclusionPatterns: ").append(toIndentedString(inclusionPatterns)).append("\n");
    sb.append("    exclusionPatterns: ").append(toIndentedString(exclusionPatterns)).append("\n");
    sb.append("    documentsMetadataConfiguration: ").append(toIndentedString(documentsMetadataConfiguration)).append("\n");
    sb.append("    accessControlListConfiguration: ").append(toIndentedString(accessControlListConfiguration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BucketName");
    openapiFields.add("InclusionPrefixes");
    openapiFields.add("InclusionPatterns");
    openapiFields.add("ExclusionPatterns");
    openapiFields.add("DocumentsMetadataConfiguration");
    openapiFields.add("AccessControlListConfiguration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("BucketName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to S3DataSourceConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!S3DataSourceConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in S3DataSourceConfiguration is not found in the empty JSON string", S3DataSourceConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!S3DataSourceConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `S3DataSourceConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : S3DataSourceConfiguration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `BucketName`
      String.validateJsonElement(jsonObj.get("BucketName"));
      // validate the optional field `InclusionPrefixes`
      if (jsonObj.get("InclusionPrefixes") != null && !jsonObj.get("InclusionPrefixes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("InclusionPrefixes"));
      }
      // validate the optional field `InclusionPatterns`
      if (jsonObj.get("InclusionPatterns") != null && !jsonObj.get("InclusionPatterns").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("InclusionPatterns"));
      }
      // validate the optional field `ExclusionPatterns`
      if (jsonObj.get("ExclusionPatterns") != null && !jsonObj.get("ExclusionPatterns").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ExclusionPatterns"));
      }
      // validate the optional field `DocumentsMetadataConfiguration`
      if (jsonObj.get("DocumentsMetadataConfiguration") != null && !jsonObj.get("DocumentsMetadataConfiguration").isJsonNull()) {
        DocumentsMetadataConfiguration.validateJsonElement(jsonObj.get("DocumentsMetadataConfiguration"));
      }
      // validate the optional field `AccessControlListConfiguration`
      if (jsonObj.get("AccessControlListConfiguration") != null && !jsonObj.get("AccessControlListConfiguration").isJsonNull()) {
        S3DataSourceConfigurationAccessControlListConfiguration.validateJsonElement(jsonObj.get("AccessControlListConfiguration"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!S3DataSourceConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'S3DataSourceConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<S3DataSourceConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(S3DataSourceConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<S3DataSourceConfiguration>() {
           @Override
           public void write(JsonWriter out, S3DataSourceConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public S3DataSourceConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of S3DataSourceConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of S3DataSourceConfiguration
   * @throws IOException if the JSON string is invalid with respect to S3DataSourceConfiguration
   */
  public static S3DataSourceConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, S3DataSourceConfiguration.class);
  }

  /**
   * Convert an instance of S3DataSourceConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

