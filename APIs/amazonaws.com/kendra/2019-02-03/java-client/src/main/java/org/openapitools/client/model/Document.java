/*
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ContentType;
import org.openapitools.client.model.S3Path;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A document in an index.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:16.778416-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Document {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_TITLE = "Title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_BLOB = "Blob";
  @SerializedName(SERIALIZED_NAME_BLOB)
  private String blob;

  public static final String SERIALIZED_NAME_S3_PATH = "S3Path";
  @SerializedName(SERIALIZED_NAME_S3_PATH)
  private S3Path s3Path;

  public static final String SERIALIZED_NAME_ATTRIBUTES = "Attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private List attributes;

  public static final String SERIALIZED_NAME_ACCESS_CONTROL_LIST = "AccessControlList";
  @SerializedName(SERIALIZED_NAME_ACCESS_CONTROL_LIST)
  private List accessControlList;

  public static final String SERIALIZED_NAME_HIERARCHICAL_ACCESS_CONTROL_LIST = "HierarchicalAccessControlList";
  @SerializedName(SERIALIZED_NAME_HIERARCHICAL_ACCESS_CONTROL_LIST)
  private List hierarchicalAccessControlList;

  public static final String SERIALIZED_NAME_CONTENT_TYPE = "ContentType";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPE)
  private ContentType contentType;

  public static final String SERIALIZED_NAME_ACCESS_CONTROL_CONFIGURATION_ID = "AccessControlConfigurationId";
  @SerializedName(SERIALIZED_NAME_ACCESS_CONTROL_CONFIGURATION_ID)
  private String accessControlConfigurationId;

  public Document() {
  }

  public Document id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Document title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public Document blob(String blob) {
    this.blob = blob;
    return this;
  }

  /**
   * Get blob
   * @return blob
   */
  @javax.annotation.Nullable
  public String getBlob() {
    return blob;
  }

  public void setBlob(String blob) {
    this.blob = blob;
  }


  public Document s3Path(S3Path s3Path) {
    this.s3Path = s3Path;
    return this;
  }

  /**
   * Get s3Path
   * @return s3Path
   */
  @javax.annotation.Nullable
  public S3Path getS3Path() {
    return s3Path;
  }

  public void setS3Path(S3Path s3Path) {
    this.s3Path = s3Path;
  }


  public Document attributes(List attributes) {
    this.attributes = attributes;
    return this;
  }

  /**
   * Get attributes
   * @return attributes
   */
  @javax.annotation.Nullable
  public List getAttributes() {
    return attributes;
  }

  public void setAttributes(List attributes) {
    this.attributes = attributes;
  }


  public Document accessControlList(List accessControlList) {
    this.accessControlList = accessControlList;
    return this;
  }

  /**
   * Get accessControlList
   * @return accessControlList
   */
  @javax.annotation.Nullable
  public List getAccessControlList() {
    return accessControlList;
  }

  public void setAccessControlList(List accessControlList) {
    this.accessControlList = accessControlList;
  }


  public Document hierarchicalAccessControlList(List hierarchicalAccessControlList) {
    this.hierarchicalAccessControlList = hierarchicalAccessControlList;
    return this;
  }

  /**
   * Get hierarchicalAccessControlList
   * @return hierarchicalAccessControlList
   */
  @javax.annotation.Nullable
  public List getHierarchicalAccessControlList() {
    return hierarchicalAccessControlList;
  }

  public void setHierarchicalAccessControlList(List hierarchicalAccessControlList) {
    this.hierarchicalAccessControlList = hierarchicalAccessControlList;
  }


  public Document contentType(ContentType contentType) {
    this.contentType = contentType;
    return this;
  }

  /**
   * Get contentType
   * @return contentType
   */
  @javax.annotation.Nullable
  public ContentType getContentType() {
    return contentType;
  }

  public void setContentType(ContentType contentType) {
    this.contentType = contentType;
  }


  public Document accessControlConfigurationId(String accessControlConfigurationId) {
    this.accessControlConfigurationId = accessControlConfigurationId;
    return this;
  }

  /**
   * Get accessControlConfigurationId
   * @return accessControlConfigurationId
   */
  @javax.annotation.Nullable
  public String getAccessControlConfigurationId() {
    return accessControlConfigurationId;
  }

  public void setAccessControlConfigurationId(String accessControlConfigurationId) {
    this.accessControlConfigurationId = accessControlConfigurationId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Document document = (Document) o;
    return Objects.equals(this.id, document.id) &&
        Objects.equals(this.title, document.title) &&
        Objects.equals(this.blob, document.blob) &&
        Objects.equals(this.s3Path, document.s3Path) &&
        Objects.equals(this.attributes, document.attributes) &&
        Objects.equals(this.accessControlList, document.accessControlList) &&
        Objects.equals(this.hierarchicalAccessControlList, document.hierarchicalAccessControlList) &&
        Objects.equals(this.contentType, document.contentType) &&
        Objects.equals(this.accessControlConfigurationId, document.accessControlConfigurationId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, title, blob, s3Path, attributes, accessControlList, hierarchicalAccessControlList, contentType, accessControlConfigurationId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Document {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    blob: ").append(toIndentedString(blob)).append("\n");
    sb.append("    s3Path: ").append(toIndentedString(s3Path)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    accessControlList: ").append(toIndentedString(accessControlList)).append("\n");
    sb.append("    hierarchicalAccessControlList: ").append(toIndentedString(hierarchicalAccessControlList)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    accessControlConfigurationId: ").append(toIndentedString(accessControlConfigurationId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id");
    openapiFields.add("Title");
    openapiFields.add("Blob");
    openapiFields.add("S3Path");
    openapiFields.add("Attributes");
    openapiFields.add("AccessControlList");
    openapiFields.add("HierarchicalAccessControlList");
    openapiFields.add("ContentType");
    openapiFields.add("AccessControlConfigurationId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Document
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Document.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Document is not found in the empty JSON string", Document.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Document.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Document` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Document.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Id`
      String.validateJsonElement(jsonObj.get("Id"));
      // validate the optional field `Title`
      if (jsonObj.get("Title") != null && !jsonObj.get("Title").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Title"));
      }
      // validate the optional field `Blob`
      if (jsonObj.get("Blob") != null && !jsonObj.get("Blob").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Blob"));
      }
      // validate the optional field `S3Path`
      if (jsonObj.get("S3Path") != null && !jsonObj.get("S3Path").isJsonNull()) {
        S3Path.validateJsonElement(jsonObj.get("S3Path"));
      }
      // validate the optional field `Attributes`
      if (jsonObj.get("Attributes") != null && !jsonObj.get("Attributes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Attributes"));
      }
      // validate the optional field `AccessControlList`
      if (jsonObj.get("AccessControlList") != null && !jsonObj.get("AccessControlList").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("AccessControlList"));
      }
      // validate the optional field `HierarchicalAccessControlList`
      if (jsonObj.get("HierarchicalAccessControlList") != null && !jsonObj.get("HierarchicalAccessControlList").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("HierarchicalAccessControlList"));
      }
      // validate the optional field `ContentType`
      if (jsonObj.get("ContentType") != null && !jsonObj.get("ContentType").isJsonNull()) {
        ContentType.validateJsonElement(jsonObj.get("ContentType"));
      }
      // validate the optional field `AccessControlConfigurationId`
      if (jsonObj.get("AccessControlConfigurationId") != null && !jsonObj.get("AccessControlConfigurationId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AccessControlConfigurationId"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Document.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Document' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Document> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Document.class));

       return (TypeAdapter<T>) new TypeAdapter<Document>() {
           @Override
           public void write(JsonWriter out, Document value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Document read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Document given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Document
   * @throws IOException if the JSON string is invalid with respect to Document
   */
  public static Document fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Document.class);
  }

  /**
   * Convert an instance of Document to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

