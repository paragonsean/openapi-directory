/*
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GitHubConfigurationGitHubDocumentCrawlProperties;
import org.openapitools.client.model.GitHubConfigurationOnPremiseConfiguration;
import org.openapitools.client.model.GitHubConfigurationSaaSConfiguration;
import org.openapitools.client.model.GitHubConfigurationVpcConfiguration;
import org.openapitools.client.model.Type;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DataSourceConfigurationGitHubConfiguration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:16.778416-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DataSourceConfigurationGitHubConfiguration {
  public static final String SERIALIZED_NAME_SAA_S_CONFIGURATION = "SaaSConfiguration";
  @SerializedName(SERIALIZED_NAME_SAA_S_CONFIGURATION)
  private GitHubConfigurationSaaSConfiguration saaSConfiguration;

  public static final String SERIALIZED_NAME_ON_PREMISE_CONFIGURATION = "OnPremiseConfiguration";
  @SerializedName(SERIALIZED_NAME_ON_PREMISE_CONFIGURATION)
  private GitHubConfigurationOnPremiseConfiguration onPremiseConfiguration;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private Type type;

  public static final String SERIALIZED_NAME_SECRET_ARN = "SecretArn";
  @SerializedName(SERIALIZED_NAME_SECRET_ARN)
  private String secretArn;

  public static final String SERIALIZED_NAME_USE_CHANGE_LOG = "UseChangeLog";
  @SerializedName(SERIALIZED_NAME_USE_CHANGE_LOG)
  private Boolean useChangeLog;

  public static final String SERIALIZED_NAME_GIT_HUB_DOCUMENT_CRAWL_PROPERTIES = "GitHubDocumentCrawlProperties";
  @SerializedName(SERIALIZED_NAME_GIT_HUB_DOCUMENT_CRAWL_PROPERTIES)
  private GitHubConfigurationGitHubDocumentCrawlProperties gitHubDocumentCrawlProperties;

  public static final String SERIALIZED_NAME_REPOSITORY_FILTER = "RepositoryFilter";
  @SerializedName(SERIALIZED_NAME_REPOSITORY_FILTER)
  private List repositoryFilter;

  public static final String SERIALIZED_NAME_INCLUSION_FOLDER_NAME_PATTERNS = "InclusionFolderNamePatterns";
  @SerializedName(SERIALIZED_NAME_INCLUSION_FOLDER_NAME_PATTERNS)
  private List inclusionFolderNamePatterns;

  public static final String SERIALIZED_NAME_INCLUSION_FILE_TYPE_PATTERNS = "InclusionFileTypePatterns";
  @SerializedName(SERIALIZED_NAME_INCLUSION_FILE_TYPE_PATTERNS)
  private List inclusionFileTypePatterns;

  public static final String SERIALIZED_NAME_INCLUSION_FILE_NAME_PATTERNS = "InclusionFileNamePatterns";
  @SerializedName(SERIALIZED_NAME_INCLUSION_FILE_NAME_PATTERNS)
  private List inclusionFileNamePatterns;

  public static final String SERIALIZED_NAME_EXCLUSION_FOLDER_NAME_PATTERNS = "ExclusionFolderNamePatterns";
  @SerializedName(SERIALIZED_NAME_EXCLUSION_FOLDER_NAME_PATTERNS)
  private List exclusionFolderNamePatterns;

  public static final String SERIALIZED_NAME_EXCLUSION_FILE_TYPE_PATTERNS = "ExclusionFileTypePatterns";
  @SerializedName(SERIALIZED_NAME_EXCLUSION_FILE_TYPE_PATTERNS)
  private List exclusionFileTypePatterns;

  public static final String SERIALIZED_NAME_EXCLUSION_FILE_NAME_PATTERNS = "ExclusionFileNamePatterns";
  @SerializedName(SERIALIZED_NAME_EXCLUSION_FILE_NAME_PATTERNS)
  private List exclusionFileNamePatterns;

  public static final String SERIALIZED_NAME_VPC_CONFIGURATION = "VpcConfiguration";
  @SerializedName(SERIALIZED_NAME_VPC_CONFIGURATION)
  private GitHubConfigurationVpcConfiguration vpcConfiguration;

  public static final String SERIALIZED_NAME_GIT_HUB_REPOSITORY_CONFIGURATION_FIELD_MAPPINGS = "GitHubRepositoryConfigurationFieldMappings";
  @SerializedName(SERIALIZED_NAME_GIT_HUB_REPOSITORY_CONFIGURATION_FIELD_MAPPINGS)
  private List gitHubRepositoryConfigurationFieldMappings;

  public static final String SERIALIZED_NAME_GIT_HUB_COMMIT_CONFIGURATION_FIELD_MAPPINGS = "GitHubCommitConfigurationFieldMappings";
  @SerializedName(SERIALIZED_NAME_GIT_HUB_COMMIT_CONFIGURATION_FIELD_MAPPINGS)
  private List gitHubCommitConfigurationFieldMappings;

  public static final String SERIALIZED_NAME_GIT_HUB_ISSUE_DOCUMENT_CONFIGURATION_FIELD_MAPPINGS = "GitHubIssueDocumentConfigurationFieldMappings";
  @SerializedName(SERIALIZED_NAME_GIT_HUB_ISSUE_DOCUMENT_CONFIGURATION_FIELD_MAPPINGS)
  private List gitHubIssueDocumentConfigurationFieldMappings;

  public static final String SERIALIZED_NAME_GIT_HUB_ISSUE_COMMENT_CONFIGURATION_FIELD_MAPPINGS = "GitHubIssueCommentConfigurationFieldMappings";
  @SerializedName(SERIALIZED_NAME_GIT_HUB_ISSUE_COMMENT_CONFIGURATION_FIELD_MAPPINGS)
  private List gitHubIssueCommentConfigurationFieldMappings;

  public static final String SERIALIZED_NAME_GIT_HUB_ISSUE_ATTACHMENT_CONFIGURATION_FIELD_MAPPINGS = "GitHubIssueAttachmentConfigurationFieldMappings";
  @SerializedName(SERIALIZED_NAME_GIT_HUB_ISSUE_ATTACHMENT_CONFIGURATION_FIELD_MAPPINGS)
  private List gitHubIssueAttachmentConfigurationFieldMappings;

  public static final String SERIALIZED_NAME_GIT_HUB_PULL_REQUEST_COMMENT_CONFIGURATION_FIELD_MAPPINGS = "GitHubPullRequestCommentConfigurationFieldMappings";
  @SerializedName(SERIALIZED_NAME_GIT_HUB_PULL_REQUEST_COMMENT_CONFIGURATION_FIELD_MAPPINGS)
  private List gitHubPullRequestCommentConfigurationFieldMappings;

  public static final String SERIALIZED_NAME_GIT_HUB_PULL_REQUEST_DOCUMENT_CONFIGURATION_FIELD_MAPPINGS = "GitHubPullRequestDocumentConfigurationFieldMappings";
  @SerializedName(SERIALIZED_NAME_GIT_HUB_PULL_REQUEST_DOCUMENT_CONFIGURATION_FIELD_MAPPINGS)
  private List gitHubPullRequestDocumentConfigurationFieldMappings;

  public static final String SERIALIZED_NAME_GIT_HUB_PULL_REQUEST_DOCUMENT_ATTACHMENT_CONFIGURATION_FIELD_MAPPINGS = "GitHubPullRequestDocumentAttachmentConfigurationFieldMappings";
  @SerializedName(SERIALIZED_NAME_GIT_HUB_PULL_REQUEST_DOCUMENT_ATTACHMENT_CONFIGURATION_FIELD_MAPPINGS)
  private List gitHubPullRequestDocumentAttachmentConfigurationFieldMappings;

  public DataSourceConfigurationGitHubConfiguration() {
  }

  public DataSourceConfigurationGitHubConfiguration saaSConfiguration(GitHubConfigurationSaaSConfiguration saaSConfiguration) {
    this.saaSConfiguration = saaSConfiguration;
    return this;
  }

  /**
   * Get saaSConfiguration
   * @return saaSConfiguration
   */
  @javax.annotation.Nullable
  public GitHubConfigurationSaaSConfiguration getSaaSConfiguration() {
    return saaSConfiguration;
  }

  public void setSaaSConfiguration(GitHubConfigurationSaaSConfiguration saaSConfiguration) {
    this.saaSConfiguration = saaSConfiguration;
  }


  public DataSourceConfigurationGitHubConfiguration onPremiseConfiguration(GitHubConfigurationOnPremiseConfiguration onPremiseConfiguration) {
    this.onPremiseConfiguration = onPremiseConfiguration;
    return this;
  }

  /**
   * Get onPremiseConfiguration
   * @return onPremiseConfiguration
   */
  @javax.annotation.Nullable
  public GitHubConfigurationOnPremiseConfiguration getOnPremiseConfiguration() {
    return onPremiseConfiguration;
  }

  public void setOnPremiseConfiguration(GitHubConfigurationOnPremiseConfiguration onPremiseConfiguration) {
    this.onPremiseConfiguration = onPremiseConfiguration;
  }


  public DataSourceConfigurationGitHubConfiguration type(Type type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public Type getType() {
    return type;
  }

  public void setType(Type type) {
    this.type = type;
  }


  public DataSourceConfigurationGitHubConfiguration secretArn(String secretArn) {
    this.secretArn = secretArn;
    return this;
  }

  /**
   * Get secretArn
   * @return secretArn
   */
  @javax.annotation.Nonnull
  public String getSecretArn() {
    return secretArn;
  }

  public void setSecretArn(String secretArn) {
    this.secretArn = secretArn;
  }


  public DataSourceConfigurationGitHubConfiguration useChangeLog(Boolean useChangeLog) {
    this.useChangeLog = useChangeLog;
    return this;
  }

  /**
   * Get useChangeLog
   * @return useChangeLog
   */
  @javax.annotation.Nullable
  public Boolean getUseChangeLog() {
    return useChangeLog;
  }

  public void setUseChangeLog(Boolean useChangeLog) {
    this.useChangeLog = useChangeLog;
  }


  public DataSourceConfigurationGitHubConfiguration gitHubDocumentCrawlProperties(GitHubConfigurationGitHubDocumentCrawlProperties gitHubDocumentCrawlProperties) {
    this.gitHubDocumentCrawlProperties = gitHubDocumentCrawlProperties;
    return this;
  }

  /**
   * Get gitHubDocumentCrawlProperties
   * @return gitHubDocumentCrawlProperties
   */
  @javax.annotation.Nullable
  public GitHubConfigurationGitHubDocumentCrawlProperties getGitHubDocumentCrawlProperties() {
    return gitHubDocumentCrawlProperties;
  }

  public void setGitHubDocumentCrawlProperties(GitHubConfigurationGitHubDocumentCrawlProperties gitHubDocumentCrawlProperties) {
    this.gitHubDocumentCrawlProperties = gitHubDocumentCrawlProperties;
  }


  public DataSourceConfigurationGitHubConfiguration repositoryFilter(List repositoryFilter) {
    this.repositoryFilter = repositoryFilter;
    return this;
  }

  /**
   * Get repositoryFilter
   * @return repositoryFilter
   */
  @javax.annotation.Nullable
  public List getRepositoryFilter() {
    return repositoryFilter;
  }

  public void setRepositoryFilter(List repositoryFilter) {
    this.repositoryFilter = repositoryFilter;
  }


  public DataSourceConfigurationGitHubConfiguration inclusionFolderNamePatterns(List inclusionFolderNamePatterns) {
    this.inclusionFolderNamePatterns = inclusionFolderNamePatterns;
    return this;
  }

  /**
   * Get inclusionFolderNamePatterns
   * @return inclusionFolderNamePatterns
   */
  @javax.annotation.Nullable
  public List getInclusionFolderNamePatterns() {
    return inclusionFolderNamePatterns;
  }

  public void setInclusionFolderNamePatterns(List inclusionFolderNamePatterns) {
    this.inclusionFolderNamePatterns = inclusionFolderNamePatterns;
  }


  public DataSourceConfigurationGitHubConfiguration inclusionFileTypePatterns(List inclusionFileTypePatterns) {
    this.inclusionFileTypePatterns = inclusionFileTypePatterns;
    return this;
  }

  /**
   * Get inclusionFileTypePatterns
   * @return inclusionFileTypePatterns
   */
  @javax.annotation.Nullable
  public List getInclusionFileTypePatterns() {
    return inclusionFileTypePatterns;
  }

  public void setInclusionFileTypePatterns(List inclusionFileTypePatterns) {
    this.inclusionFileTypePatterns = inclusionFileTypePatterns;
  }


  public DataSourceConfigurationGitHubConfiguration inclusionFileNamePatterns(List inclusionFileNamePatterns) {
    this.inclusionFileNamePatterns = inclusionFileNamePatterns;
    return this;
  }

  /**
   * Get inclusionFileNamePatterns
   * @return inclusionFileNamePatterns
   */
  @javax.annotation.Nullable
  public List getInclusionFileNamePatterns() {
    return inclusionFileNamePatterns;
  }

  public void setInclusionFileNamePatterns(List inclusionFileNamePatterns) {
    this.inclusionFileNamePatterns = inclusionFileNamePatterns;
  }


  public DataSourceConfigurationGitHubConfiguration exclusionFolderNamePatterns(List exclusionFolderNamePatterns) {
    this.exclusionFolderNamePatterns = exclusionFolderNamePatterns;
    return this;
  }

  /**
   * Get exclusionFolderNamePatterns
   * @return exclusionFolderNamePatterns
   */
  @javax.annotation.Nullable
  public List getExclusionFolderNamePatterns() {
    return exclusionFolderNamePatterns;
  }

  public void setExclusionFolderNamePatterns(List exclusionFolderNamePatterns) {
    this.exclusionFolderNamePatterns = exclusionFolderNamePatterns;
  }


  public DataSourceConfigurationGitHubConfiguration exclusionFileTypePatterns(List exclusionFileTypePatterns) {
    this.exclusionFileTypePatterns = exclusionFileTypePatterns;
    return this;
  }

  /**
   * Get exclusionFileTypePatterns
   * @return exclusionFileTypePatterns
   */
  @javax.annotation.Nullable
  public List getExclusionFileTypePatterns() {
    return exclusionFileTypePatterns;
  }

  public void setExclusionFileTypePatterns(List exclusionFileTypePatterns) {
    this.exclusionFileTypePatterns = exclusionFileTypePatterns;
  }


  public DataSourceConfigurationGitHubConfiguration exclusionFileNamePatterns(List exclusionFileNamePatterns) {
    this.exclusionFileNamePatterns = exclusionFileNamePatterns;
    return this;
  }

  /**
   * Get exclusionFileNamePatterns
   * @return exclusionFileNamePatterns
   */
  @javax.annotation.Nullable
  public List getExclusionFileNamePatterns() {
    return exclusionFileNamePatterns;
  }

  public void setExclusionFileNamePatterns(List exclusionFileNamePatterns) {
    this.exclusionFileNamePatterns = exclusionFileNamePatterns;
  }


  public DataSourceConfigurationGitHubConfiguration vpcConfiguration(GitHubConfigurationVpcConfiguration vpcConfiguration) {
    this.vpcConfiguration = vpcConfiguration;
    return this;
  }

  /**
   * Get vpcConfiguration
   * @return vpcConfiguration
   */
  @javax.annotation.Nullable
  public GitHubConfigurationVpcConfiguration getVpcConfiguration() {
    return vpcConfiguration;
  }

  public void setVpcConfiguration(GitHubConfigurationVpcConfiguration vpcConfiguration) {
    this.vpcConfiguration = vpcConfiguration;
  }


  public DataSourceConfigurationGitHubConfiguration gitHubRepositoryConfigurationFieldMappings(List gitHubRepositoryConfigurationFieldMappings) {
    this.gitHubRepositoryConfigurationFieldMappings = gitHubRepositoryConfigurationFieldMappings;
    return this;
  }

  /**
   * Get gitHubRepositoryConfigurationFieldMappings
   * @return gitHubRepositoryConfigurationFieldMappings
   */
  @javax.annotation.Nullable
  public List getGitHubRepositoryConfigurationFieldMappings() {
    return gitHubRepositoryConfigurationFieldMappings;
  }

  public void setGitHubRepositoryConfigurationFieldMappings(List gitHubRepositoryConfigurationFieldMappings) {
    this.gitHubRepositoryConfigurationFieldMappings = gitHubRepositoryConfigurationFieldMappings;
  }


  public DataSourceConfigurationGitHubConfiguration gitHubCommitConfigurationFieldMappings(List gitHubCommitConfigurationFieldMappings) {
    this.gitHubCommitConfigurationFieldMappings = gitHubCommitConfigurationFieldMappings;
    return this;
  }

  /**
   * Get gitHubCommitConfigurationFieldMappings
   * @return gitHubCommitConfigurationFieldMappings
   */
  @javax.annotation.Nullable
  public List getGitHubCommitConfigurationFieldMappings() {
    return gitHubCommitConfigurationFieldMappings;
  }

  public void setGitHubCommitConfigurationFieldMappings(List gitHubCommitConfigurationFieldMappings) {
    this.gitHubCommitConfigurationFieldMappings = gitHubCommitConfigurationFieldMappings;
  }


  public DataSourceConfigurationGitHubConfiguration gitHubIssueDocumentConfigurationFieldMappings(List gitHubIssueDocumentConfigurationFieldMappings) {
    this.gitHubIssueDocumentConfigurationFieldMappings = gitHubIssueDocumentConfigurationFieldMappings;
    return this;
  }

  /**
   * Get gitHubIssueDocumentConfigurationFieldMappings
   * @return gitHubIssueDocumentConfigurationFieldMappings
   */
  @javax.annotation.Nullable
  public List getGitHubIssueDocumentConfigurationFieldMappings() {
    return gitHubIssueDocumentConfigurationFieldMappings;
  }

  public void setGitHubIssueDocumentConfigurationFieldMappings(List gitHubIssueDocumentConfigurationFieldMappings) {
    this.gitHubIssueDocumentConfigurationFieldMappings = gitHubIssueDocumentConfigurationFieldMappings;
  }


  public DataSourceConfigurationGitHubConfiguration gitHubIssueCommentConfigurationFieldMappings(List gitHubIssueCommentConfigurationFieldMappings) {
    this.gitHubIssueCommentConfigurationFieldMappings = gitHubIssueCommentConfigurationFieldMappings;
    return this;
  }

  /**
   * Get gitHubIssueCommentConfigurationFieldMappings
   * @return gitHubIssueCommentConfigurationFieldMappings
   */
  @javax.annotation.Nullable
  public List getGitHubIssueCommentConfigurationFieldMappings() {
    return gitHubIssueCommentConfigurationFieldMappings;
  }

  public void setGitHubIssueCommentConfigurationFieldMappings(List gitHubIssueCommentConfigurationFieldMappings) {
    this.gitHubIssueCommentConfigurationFieldMappings = gitHubIssueCommentConfigurationFieldMappings;
  }


  public DataSourceConfigurationGitHubConfiguration gitHubIssueAttachmentConfigurationFieldMappings(List gitHubIssueAttachmentConfigurationFieldMappings) {
    this.gitHubIssueAttachmentConfigurationFieldMappings = gitHubIssueAttachmentConfigurationFieldMappings;
    return this;
  }

  /**
   * Get gitHubIssueAttachmentConfigurationFieldMappings
   * @return gitHubIssueAttachmentConfigurationFieldMappings
   */
  @javax.annotation.Nullable
  public List getGitHubIssueAttachmentConfigurationFieldMappings() {
    return gitHubIssueAttachmentConfigurationFieldMappings;
  }

  public void setGitHubIssueAttachmentConfigurationFieldMappings(List gitHubIssueAttachmentConfigurationFieldMappings) {
    this.gitHubIssueAttachmentConfigurationFieldMappings = gitHubIssueAttachmentConfigurationFieldMappings;
  }


  public DataSourceConfigurationGitHubConfiguration gitHubPullRequestCommentConfigurationFieldMappings(List gitHubPullRequestCommentConfigurationFieldMappings) {
    this.gitHubPullRequestCommentConfigurationFieldMappings = gitHubPullRequestCommentConfigurationFieldMappings;
    return this;
  }

  /**
   * Get gitHubPullRequestCommentConfigurationFieldMappings
   * @return gitHubPullRequestCommentConfigurationFieldMappings
   */
  @javax.annotation.Nullable
  public List getGitHubPullRequestCommentConfigurationFieldMappings() {
    return gitHubPullRequestCommentConfigurationFieldMappings;
  }

  public void setGitHubPullRequestCommentConfigurationFieldMappings(List gitHubPullRequestCommentConfigurationFieldMappings) {
    this.gitHubPullRequestCommentConfigurationFieldMappings = gitHubPullRequestCommentConfigurationFieldMappings;
  }


  public DataSourceConfigurationGitHubConfiguration gitHubPullRequestDocumentConfigurationFieldMappings(List gitHubPullRequestDocumentConfigurationFieldMappings) {
    this.gitHubPullRequestDocumentConfigurationFieldMappings = gitHubPullRequestDocumentConfigurationFieldMappings;
    return this;
  }

  /**
   * Get gitHubPullRequestDocumentConfigurationFieldMappings
   * @return gitHubPullRequestDocumentConfigurationFieldMappings
   */
  @javax.annotation.Nullable
  public List getGitHubPullRequestDocumentConfigurationFieldMappings() {
    return gitHubPullRequestDocumentConfigurationFieldMappings;
  }

  public void setGitHubPullRequestDocumentConfigurationFieldMappings(List gitHubPullRequestDocumentConfigurationFieldMappings) {
    this.gitHubPullRequestDocumentConfigurationFieldMappings = gitHubPullRequestDocumentConfigurationFieldMappings;
  }


  public DataSourceConfigurationGitHubConfiguration gitHubPullRequestDocumentAttachmentConfigurationFieldMappings(List gitHubPullRequestDocumentAttachmentConfigurationFieldMappings) {
    this.gitHubPullRequestDocumentAttachmentConfigurationFieldMappings = gitHubPullRequestDocumentAttachmentConfigurationFieldMappings;
    return this;
  }

  /**
   * Get gitHubPullRequestDocumentAttachmentConfigurationFieldMappings
   * @return gitHubPullRequestDocumentAttachmentConfigurationFieldMappings
   */
  @javax.annotation.Nullable
  public List getGitHubPullRequestDocumentAttachmentConfigurationFieldMappings() {
    return gitHubPullRequestDocumentAttachmentConfigurationFieldMappings;
  }

  public void setGitHubPullRequestDocumentAttachmentConfigurationFieldMappings(List gitHubPullRequestDocumentAttachmentConfigurationFieldMappings) {
    this.gitHubPullRequestDocumentAttachmentConfigurationFieldMappings = gitHubPullRequestDocumentAttachmentConfigurationFieldMappings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataSourceConfigurationGitHubConfiguration dataSourceConfigurationGitHubConfiguration = (DataSourceConfigurationGitHubConfiguration) o;
    return Objects.equals(this.saaSConfiguration, dataSourceConfigurationGitHubConfiguration.saaSConfiguration) &&
        Objects.equals(this.onPremiseConfiguration, dataSourceConfigurationGitHubConfiguration.onPremiseConfiguration) &&
        Objects.equals(this.type, dataSourceConfigurationGitHubConfiguration.type) &&
        Objects.equals(this.secretArn, dataSourceConfigurationGitHubConfiguration.secretArn) &&
        Objects.equals(this.useChangeLog, dataSourceConfigurationGitHubConfiguration.useChangeLog) &&
        Objects.equals(this.gitHubDocumentCrawlProperties, dataSourceConfigurationGitHubConfiguration.gitHubDocumentCrawlProperties) &&
        Objects.equals(this.repositoryFilter, dataSourceConfigurationGitHubConfiguration.repositoryFilter) &&
        Objects.equals(this.inclusionFolderNamePatterns, dataSourceConfigurationGitHubConfiguration.inclusionFolderNamePatterns) &&
        Objects.equals(this.inclusionFileTypePatterns, dataSourceConfigurationGitHubConfiguration.inclusionFileTypePatterns) &&
        Objects.equals(this.inclusionFileNamePatterns, dataSourceConfigurationGitHubConfiguration.inclusionFileNamePatterns) &&
        Objects.equals(this.exclusionFolderNamePatterns, dataSourceConfigurationGitHubConfiguration.exclusionFolderNamePatterns) &&
        Objects.equals(this.exclusionFileTypePatterns, dataSourceConfigurationGitHubConfiguration.exclusionFileTypePatterns) &&
        Objects.equals(this.exclusionFileNamePatterns, dataSourceConfigurationGitHubConfiguration.exclusionFileNamePatterns) &&
        Objects.equals(this.vpcConfiguration, dataSourceConfigurationGitHubConfiguration.vpcConfiguration) &&
        Objects.equals(this.gitHubRepositoryConfigurationFieldMappings, dataSourceConfigurationGitHubConfiguration.gitHubRepositoryConfigurationFieldMappings) &&
        Objects.equals(this.gitHubCommitConfigurationFieldMappings, dataSourceConfigurationGitHubConfiguration.gitHubCommitConfigurationFieldMappings) &&
        Objects.equals(this.gitHubIssueDocumentConfigurationFieldMappings, dataSourceConfigurationGitHubConfiguration.gitHubIssueDocumentConfigurationFieldMappings) &&
        Objects.equals(this.gitHubIssueCommentConfigurationFieldMappings, dataSourceConfigurationGitHubConfiguration.gitHubIssueCommentConfigurationFieldMappings) &&
        Objects.equals(this.gitHubIssueAttachmentConfigurationFieldMappings, dataSourceConfigurationGitHubConfiguration.gitHubIssueAttachmentConfigurationFieldMappings) &&
        Objects.equals(this.gitHubPullRequestCommentConfigurationFieldMappings, dataSourceConfigurationGitHubConfiguration.gitHubPullRequestCommentConfigurationFieldMappings) &&
        Objects.equals(this.gitHubPullRequestDocumentConfigurationFieldMappings, dataSourceConfigurationGitHubConfiguration.gitHubPullRequestDocumentConfigurationFieldMappings) &&
        Objects.equals(this.gitHubPullRequestDocumentAttachmentConfigurationFieldMappings, dataSourceConfigurationGitHubConfiguration.gitHubPullRequestDocumentAttachmentConfigurationFieldMappings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(saaSConfiguration, onPremiseConfiguration, type, secretArn, useChangeLog, gitHubDocumentCrawlProperties, repositoryFilter, inclusionFolderNamePatterns, inclusionFileTypePatterns, inclusionFileNamePatterns, exclusionFolderNamePatterns, exclusionFileTypePatterns, exclusionFileNamePatterns, vpcConfiguration, gitHubRepositoryConfigurationFieldMappings, gitHubCommitConfigurationFieldMappings, gitHubIssueDocumentConfigurationFieldMappings, gitHubIssueCommentConfigurationFieldMappings, gitHubIssueAttachmentConfigurationFieldMappings, gitHubPullRequestCommentConfigurationFieldMappings, gitHubPullRequestDocumentConfigurationFieldMappings, gitHubPullRequestDocumentAttachmentConfigurationFieldMappings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataSourceConfigurationGitHubConfiguration {\n");
    sb.append("    saaSConfiguration: ").append(toIndentedString(saaSConfiguration)).append("\n");
    sb.append("    onPremiseConfiguration: ").append(toIndentedString(onPremiseConfiguration)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    secretArn: ").append(toIndentedString(secretArn)).append("\n");
    sb.append("    useChangeLog: ").append(toIndentedString(useChangeLog)).append("\n");
    sb.append("    gitHubDocumentCrawlProperties: ").append(toIndentedString(gitHubDocumentCrawlProperties)).append("\n");
    sb.append("    repositoryFilter: ").append(toIndentedString(repositoryFilter)).append("\n");
    sb.append("    inclusionFolderNamePatterns: ").append(toIndentedString(inclusionFolderNamePatterns)).append("\n");
    sb.append("    inclusionFileTypePatterns: ").append(toIndentedString(inclusionFileTypePatterns)).append("\n");
    sb.append("    inclusionFileNamePatterns: ").append(toIndentedString(inclusionFileNamePatterns)).append("\n");
    sb.append("    exclusionFolderNamePatterns: ").append(toIndentedString(exclusionFolderNamePatterns)).append("\n");
    sb.append("    exclusionFileTypePatterns: ").append(toIndentedString(exclusionFileTypePatterns)).append("\n");
    sb.append("    exclusionFileNamePatterns: ").append(toIndentedString(exclusionFileNamePatterns)).append("\n");
    sb.append("    vpcConfiguration: ").append(toIndentedString(vpcConfiguration)).append("\n");
    sb.append("    gitHubRepositoryConfigurationFieldMappings: ").append(toIndentedString(gitHubRepositoryConfigurationFieldMappings)).append("\n");
    sb.append("    gitHubCommitConfigurationFieldMappings: ").append(toIndentedString(gitHubCommitConfigurationFieldMappings)).append("\n");
    sb.append("    gitHubIssueDocumentConfigurationFieldMappings: ").append(toIndentedString(gitHubIssueDocumentConfigurationFieldMappings)).append("\n");
    sb.append("    gitHubIssueCommentConfigurationFieldMappings: ").append(toIndentedString(gitHubIssueCommentConfigurationFieldMappings)).append("\n");
    sb.append("    gitHubIssueAttachmentConfigurationFieldMappings: ").append(toIndentedString(gitHubIssueAttachmentConfigurationFieldMappings)).append("\n");
    sb.append("    gitHubPullRequestCommentConfigurationFieldMappings: ").append(toIndentedString(gitHubPullRequestCommentConfigurationFieldMappings)).append("\n");
    sb.append("    gitHubPullRequestDocumentConfigurationFieldMappings: ").append(toIndentedString(gitHubPullRequestDocumentConfigurationFieldMappings)).append("\n");
    sb.append("    gitHubPullRequestDocumentAttachmentConfigurationFieldMappings: ").append(toIndentedString(gitHubPullRequestDocumentAttachmentConfigurationFieldMappings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SaaSConfiguration");
    openapiFields.add("OnPremiseConfiguration");
    openapiFields.add("Type");
    openapiFields.add("SecretArn");
    openapiFields.add("UseChangeLog");
    openapiFields.add("GitHubDocumentCrawlProperties");
    openapiFields.add("RepositoryFilter");
    openapiFields.add("InclusionFolderNamePatterns");
    openapiFields.add("InclusionFileTypePatterns");
    openapiFields.add("InclusionFileNamePatterns");
    openapiFields.add("ExclusionFolderNamePatterns");
    openapiFields.add("ExclusionFileTypePatterns");
    openapiFields.add("ExclusionFileNamePatterns");
    openapiFields.add("VpcConfiguration");
    openapiFields.add("GitHubRepositoryConfigurationFieldMappings");
    openapiFields.add("GitHubCommitConfigurationFieldMappings");
    openapiFields.add("GitHubIssueDocumentConfigurationFieldMappings");
    openapiFields.add("GitHubIssueCommentConfigurationFieldMappings");
    openapiFields.add("GitHubIssueAttachmentConfigurationFieldMappings");
    openapiFields.add("GitHubPullRequestCommentConfigurationFieldMappings");
    openapiFields.add("GitHubPullRequestDocumentConfigurationFieldMappings");
    openapiFields.add("GitHubPullRequestDocumentAttachmentConfigurationFieldMappings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("SecretArn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataSourceConfigurationGitHubConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataSourceConfigurationGitHubConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataSourceConfigurationGitHubConfiguration is not found in the empty JSON string", DataSourceConfigurationGitHubConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataSourceConfigurationGitHubConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataSourceConfigurationGitHubConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DataSourceConfigurationGitHubConfiguration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `SaaSConfiguration`
      if (jsonObj.get("SaaSConfiguration") != null && !jsonObj.get("SaaSConfiguration").isJsonNull()) {
        GitHubConfigurationSaaSConfiguration.validateJsonElement(jsonObj.get("SaaSConfiguration"));
      }
      // validate the optional field `OnPremiseConfiguration`
      if (jsonObj.get("OnPremiseConfiguration") != null && !jsonObj.get("OnPremiseConfiguration").isJsonNull()) {
        GitHubConfigurationOnPremiseConfiguration.validateJsonElement(jsonObj.get("OnPremiseConfiguration"));
      }
      // validate the optional field `Type`
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) {
        Type.validateJsonElement(jsonObj.get("Type"));
      }
      // validate the required field `SecretArn`
      String.validateJsonElement(jsonObj.get("SecretArn"));
      // validate the optional field `UseChangeLog`
      if (jsonObj.get("UseChangeLog") != null && !jsonObj.get("UseChangeLog").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("UseChangeLog"));
      }
      // validate the optional field `GitHubDocumentCrawlProperties`
      if (jsonObj.get("GitHubDocumentCrawlProperties") != null && !jsonObj.get("GitHubDocumentCrawlProperties").isJsonNull()) {
        GitHubConfigurationGitHubDocumentCrawlProperties.validateJsonElement(jsonObj.get("GitHubDocumentCrawlProperties"));
      }
      // validate the optional field `RepositoryFilter`
      if (jsonObj.get("RepositoryFilter") != null && !jsonObj.get("RepositoryFilter").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("RepositoryFilter"));
      }
      // validate the optional field `InclusionFolderNamePatterns`
      if (jsonObj.get("InclusionFolderNamePatterns") != null && !jsonObj.get("InclusionFolderNamePatterns").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("InclusionFolderNamePatterns"));
      }
      // validate the optional field `InclusionFileTypePatterns`
      if (jsonObj.get("InclusionFileTypePatterns") != null && !jsonObj.get("InclusionFileTypePatterns").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("InclusionFileTypePatterns"));
      }
      // validate the optional field `InclusionFileNamePatterns`
      if (jsonObj.get("InclusionFileNamePatterns") != null && !jsonObj.get("InclusionFileNamePatterns").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("InclusionFileNamePatterns"));
      }
      // validate the optional field `ExclusionFolderNamePatterns`
      if (jsonObj.get("ExclusionFolderNamePatterns") != null && !jsonObj.get("ExclusionFolderNamePatterns").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ExclusionFolderNamePatterns"));
      }
      // validate the optional field `ExclusionFileTypePatterns`
      if (jsonObj.get("ExclusionFileTypePatterns") != null && !jsonObj.get("ExclusionFileTypePatterns").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ExclusionFileTypePatterns"));
      }
      // validate the optional field `ExclusionFileNamePatterns`
      if (jsonObj.get("ExclusionFileNamePatterns") != null && !jsonObj.get("ExclusionFileNamePatterns").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ExclusionFileNamePatterns"));
      }
      // validate the optional field `VpcConfiguration`
      if (jsonObj.get("VpcConfiguration") != null && !jsonObj.get("VpcConfiguration").isJsonNull()) {
        GitHubConfigurationVpcConfiguration.validateJsonElement(jsonObj.get("VpcConfiguration"));
      }
      // validate the optional field `GitHubRepositoryConfigurationFieldMappings`
      if (jsonObj.get("GitHubRepositoryConfigurationFieldMappings") != null && !jsonObj.get("GitHubRepositoryConfigurationFieldMappings").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("GitHubRepositoryConfigurationFieldMappings"));
      }
      // validate the optional field `GitHubCommitConfigurationFieldMappings`
      if (jsonObj.get("GitHubCommitConfigurationFieldMappings") != null && !jsonObj.get("GitHubCommitConfigurationFieldMappings").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("GitHubCommitConfigurationFieldMappings"));
      }
      // validate the optional field `GitHubIssueDocumentConfigurationFieldMappings`
      if (jsonObj.get("GitHubIssueDocumentConfigurationFieldMappings") != null && !jsonObj.get("GitHubIssueDocumentConfigurationFieldMappings").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("GitHubIssueDocumentConfigurationFieldMappings"));
      }
      // validate the optional field `GitHubIssueCommentConfigurationFieldMappings`
      if (jsonObj.get("GitHubIssueCommentConfigurationFieldMappings") != null && !jsonObj.get("GitHubIssueCommentConfigurationFieldMappings").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("GitHubIssueCommentConfigurationFieldMappings"));
      }
      // validate the optional field `GitHubIssueAttachmentConfigurationFieldMappings`
      if (jsonObj.get("GitHubIssueAttachmentConfigurationFieldMappings") != null && !jsonObj.get("GitHubIssueAttachmentConfigurationFieldMappings").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("GitHubIssueAttachmentConfigurationFieldMappings"));
      }
      // validate the optional field `GitHubPullRequestCommentConfigurationFieldMappings`
      if (jsonObj.get("GitHubPullRequestCommentConfigurationFieldMappings") != null && !jsonObj.get("GitHubPullRequestCommentConfigurationFieldMappings").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("GitHubPullRequestCommentConfigurationFieldMappings"));
      }
      // validate the optional field `GitHubPullRequestDocumentConfigurationFieldMappings`
      if (jsonObj.get("GitHubPullRequestDocumentConfigurationFieldMappings") != null && !jsonObj.get("GitHubPullRequestDocumentConfigurationFieldMappings").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("GitHubPullRequestDocumentConfigurationFieldMappings"));
      }
      // validate the optional field `GitHubPullRequestDocumentAttachmentConfigurationFieldMappings`
      if (jsonObj.get("GitHubPullRequestDocumentAttachmentConfigurationFieldMappings") != null && !jsonObj.get("GitHubPullRequestDocumentAttachmentConfigurationFieldMappings").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("GitHubPullRequestDocumentAttachmentConfigurationFieldMappings"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataSourceConfigurationGitHubConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataSourceConfigurationGitHubConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataSourceConfigurationGitHubConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataSourceConfigurationGitHubConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<DataSourceConfigurationGitHubConfiguration>() {
           @Override
           public void write(JsonWriter out, DataSourceConfigurationGitHubConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataSourceConfigurationGitHubConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DataSourceConfigurationGitHubConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataSourceConfigurationGitHubConfiguration
   * @throws IOException if the JSON string is invalid with respect to DataSourceConfigurationGitHubConfiguration
   */
  public static DataSourceConfigurationGitHubConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataSourceConfigurationGitHubConfiguration.class);
  }

  /**
   * Convert an instance of DataSourceConfigurationGitHubConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

