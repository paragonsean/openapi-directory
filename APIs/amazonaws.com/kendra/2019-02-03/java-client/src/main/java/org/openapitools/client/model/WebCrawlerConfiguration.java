/*
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.WebCrawlerConfigurationAuthenticationConfiguration;
import org.openapitools.client.model.WebCrawlerConfigurationProxyConfiguration;
import org.openapitools.client.model.WebCrawlerConfigurationUrls;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Provides the configuration information required for Amazon Kendra Web Crawler.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:16.778416-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WebCrawlerConfiguration {
  public static final String SERIALIZED_NAME_URLS = "Urls";
  @SerializedName(SERIALIZED_NAME_URLS)
  private WebCrawlerConfigurationUrls urls;

  public static final String SERIALIZED_NAME_CRAWL_DEPTH = "CrawlDepth";
  @SerializedName(SERIALIZED_NAME_CRAWL_DEPTH)
  private Integer crawlDepth;

  public static final String SERIALIZED_NAME_MAX_LINKS_PER_PAGE = "MaxLinksPerPage";
  @SerializedName(SERIALIZED_NAME_MAX_LINKS_PER_PAGE)
  private Integer maxLinksPerPage;

  public static final String SERIALIZED_NAME_MAX_CONTENT_SIZE_PER_PAGE_IN_MEGA_BYTES = "MaxContentSizePerPageInMegaBytes";
  @SerializedName(SERIALIZED_NAME_MAX_CONTENT_SIZE_PER_PAGE_IN_MEGA_BYTES)
  private Float maxContentSizePerPageInMegaBytes;

  public static final String SERIALIZED_NAME_MAX_URLS_PER_MINUTE_CRAWL_RATE = "MaxUrlsPerMinuteCrawlRate";
  @SerializedName(SERIALIZED_NAME_MAX_URLS_PER_MINUTE_CRAWL_RATE)
  private Integer maxUrlsPerMinuteCrawlRate;

  public static final String SERIALIZED_NAME_URL_INCLUSION_PATTERNS = "UrlInclusionPatterns";
  @SerializedName(SERIALIZED_NAME_URL_INCLUSION_PATTERNS)
  private List urlInclusionPatterns;

  public static final String SERIALIZED_NAME_URL_EXCLUSION_PATTERNS = "UrlExclusionPatterns";
  @SerializedName(SERIALIZED_NAME_URL_EXCLUSION_PATTERNS)
  private List urlExclusionPatterns;

  public static final String SERIALIZED_NAME_PROXY_CONFIGURATION = "ProxyConfiguration";
  @SerializedName(SERIALIZED_NAME_PROXY_CONFIGURATION)
  private WebCrawlerConfigurationProxyConfiguration proxyConfiguration;

  public static final String SERIALIZED_NAME_AUTHENTICATION_CONFIGURATION = "AuthenticationConfiguration";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_CONFIGURATION)
  private WebCrawlerConfigurationAuthenticationConfiguration authenticationConfiguration;

  public WebCrawlerConfiguration() {
  }

  public WebCrawlerConfiguration urls(WebCrawlerConfigurationUrls urls) {
    this.urls = urls;
    return this;
  }

  /**
   * Get urls
   * @return urls
   */
  @javax.annotation.Nonnull
  public WebCrawlerConfigurationUrls getUrls() {
    return urls;
  }

  public void setUrls(WebCrawlerConfigurationUrls urls) {
    this.urls = urls;
  }


  public WebCrawlerConfiguration crawlDepth(Integer crawlDepth) {
    this.crawlDepth = crawlDepth;
    return this;
  }

  /**
   * Get crawlDepth
   * @return crawlDepth
   */
  @javax.annotation.Nullable
  public Integer getCrawlDepth() {
    return crawlDepth;
  }

  public void setCrawlDepth(Integer crawlDepth) {
    this.crawlDepth = crawlDepth;
  }


  public WebCrawlerConfiguration maxLinksPerPage(Integer maxLinksPerPage) {
    this.maxLinksPerPage = maxLinksPerPage;
    return this;
  }

  /**
   * Get maxLinksPerPage
   * @return maxLinksPerPage
   */
  @javax.annotation.Nullable
  public Integer getMaxLinksPerPage() {
    return maxLinksPerPage;
  }

  public void setMaxLinksPerPage(Integer maxLinksPerPage) {
    this.maxLinksPerPage = maxLinksPerPage;
  }


  public WebCrawlerConfiguration maxContentSizePerPageInMegaBytes(Float maxContentSizePerPageInMegaBytes) {
    this.maxContentSizePerPageInMegaBytes = maxContentSizePerPageInMegaBytes;
    return this;
  }

  /**
   * Get maxContentSizePerPageInMegaBytes
   * @return maxContentSizePerPageInMegaBytes
   */
  @javax.annotation.Nullable
  public Float getMaxContentSizePerPageInMegaBytes() {
    return maxContentSizePerPageInMegaBytes;
  }

  public void setMaxContentSizePerPageInMegaBytes(Float maxContentSizePerPageInMegaBytes) {
    this.maxContentSizePerPageInMegaBytes = maxContentSizePerPageInMegaBytes;
  }


  public WebCrawlerConfiguration maxUrlsPerMinuteCrawlRate(Integer maxUrlsPerMinuteCrawlRate) {
    this.maxUrlsPerMinuteCrawlRate = maxUrlsPerMinuteCrawlRate;
    return this;
  }

  /**
   * Get maxUrlsPerMinuteCrawlRate
   * @return maxUrlsPerMinuteCrawlRate
   */
  @javax.annotation.Nullable
  public Integer getMaxUrlsPerMinuteCrawlRate() {
    return maxUrlsPerMinuteCrawlRate;
  }

  public void setMaxUrlsPerMinuteCrawlRate(Integer maxUrlsPerMinuteCrawlRate) {
    this.maxUrlsPerMinuteCrawlRate = maxUrlsPerMinuteCrawlRate;
  }


  public WebCrawlerConfiguration urlInclusionPatterns(List urlInclusionPatterns) {
    this.urlInclusionPatterns = urlInclusionPatterns;
    return this;
  }

  /**
   * Get urlInclusionPatterns
   * @return urlInclusionPatterns
   */
  @javax.annotation.Nullable
  public List getUrlInclusionPatterns() {
    return urlInclusionPatterns;
  }

  public void setUrlInclusionPatterns(List urlInclusionPatterns) {
    this.urlInclusionPatterns = urlInclusionPatterns;
  }


  public WebCrawlerConfiguration urlExclusionPatterns(List urlExclusionPatterns) {
    this.urlExclusionPatterns = urlExclusionPatterns;
    return this;
  }

  /**
   * Get urlExclusionPatterns
   * @return urlExclusionPatterns
   */
  @javax.annotation.Nullable
  public List getUrlExclusionPatterns() {
    return urlExclusionPatterns;
  }

  public void setUrlExclusionPatterns(List urlExclusionPatterns) {
    this.urlExclusionPatterns = urlExclusionPatterns;
  }


  public WebCrawlerConfiguration proxyConfiguration(WebCrawlerConfigurationProxyConfiguration proxyConfiguration) {
    this.proxyConfiguration = proxyConfiguration;
    return this;
  }

  /**
   * Get proxyConfiguration
   * @return proxyConfiguration
   */
  @javax.annotation.Nullable
  public WebCrawlerConfigurationProxyConfiguration getProxyConfiguration() {
    return proxyConfiguration;
  }

  public void setProxyConfiguration(WebCrawlerConfigurationProxyConfiguration proxyConfiguration) {
    this.proxyConfiguration = proxyConfiguration;
  }


  public WebCrawlerConfiguration authenticationConfiguration(WebCrawlerConfigurationAuthenticationConfiguration authenticationConfiguration) {
    this.authenticationConfiguration = authenticationConfiguration;
    return this;
  }

  /**
   * Get authenticationConfiguration
   * @return authenticationConfiguration
   */
  @javax.annotation.Nullable
  public WebCrawlerConfigurationAuthenticationConfiguration getAuthenticationConfiguration() {
    return authenticationConfiguration;
  }

  public void setAuthenticationConfiguration(WebCrawlerConfigurationAuthenticationConfiguration authenticationConfiguration) {
    this.authenticationConfiguration = authenticationConfiguration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebCrawlerConfiguration webCrawlerConfiguration = (WebCrawlerConfiguration) o;
    return Objects.equals(this.urls, webCrawlerConfiguration.urls) &&
        Objects.equals(this.crawlDepth, webCrawlerConfiguration.crawlDepth) &&
        Objects.equals(this.maxLinksPerPage, webCrawlerConfiguration.maxLinksPerPage) &&
        Objects.equals(this.maxContentSizePerPageInMegaBytes, webCrawlerConfiguration.maxContentSizePerPageInMegaBytes) &&
        Objects.equals(this.maxUrlsPerMinuteCrawlRate, webCrawlerConfiguration.maxUrlsPerMinuteCrawlRate) &&
        Objects.equals(this.urlInclusionPatterns, webCrawlerConfiguration.urlInclusionPatterns) &&
        Objects.equals(this.urlExclusionPatterns, webCrawlerConfiguration.urlExclusionPatterns) &&
        Objects.equals(this.proxyConfiguration, webCrawlerConfiguration.proxyConfiguration) &&
        Objects.equals(this.authenticationConfiguration, webCrawlerConfiguration.authenticationConfiguration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(urls, crawlDepth, maxLinksPerPage, maxContentSizePerPageInMegaBytes, maxUrlsPerMinuteCrawlRate, urlInclusionPatterns, urlExclusionPatterns, proxyConfiguration, authenticationConfiguration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebCrawlerConfiguration {\n");
    sb.append("    urls: ").append(toIndentedString(urls)).append("\n");
    sb.append("    crawlDepth: ").append(toIndentedString(crawlDepth)).append("\n");
    sb.append("    maxLinksPerPage: ").append(toIndentedString(maxLinksPerPage)).append("\n");
    sb.append("    maxContentSizePerPageInMegaBytes: ").append(toIndentedString(maxContentSizePerPageInMegaBytes)).append("\n");
    sb.append("    maxUrlsPerMinuteCrawlRate: ").append(toIndentedString(maxUrlsPerMinuteCrawlRate)).append("\n");
    sb.append("    urlInclusionPatterns: ").append(toIndentedString(urlInclusionPatterns)).append("\n");
    sb.append("    urlExclusionPatterns: ").append(toIndentedString(urlExclusionPatterns)).append("\n");
    sb.append("    proxyConfiguration: ").append(toIndentedString(proxyConfiguration)).append("\n");
    sb.append("    authenticationConfiguration: ").append(toIndentedString(authenticationConfiguration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Urls");
    openapiFields.add("CrawlDepth");
    openapiFields.add("MaxLinksPerPage");
    openapiFields.add("MaxContentSizePerPageInMegaBytes");
    openapiFields.add("MaxUrlsPerMinuteCrawlRate");
    openapiFields.add("UrlInclusionPatterns");
    openapiFields.add("UrlExclusionPatterns");
    openapiFields.add("ProxyConfiguration");
    openapiFields.add("AuthenticationConfiguration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Urls");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WebCrawlerConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WebCrawlerConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebCrawlerConfiguration is not found in the empty JSON string", WebCrawlerConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WebCrawlerConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WebCrawlerConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WebCrawlerConfiguration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Urls`
      WebCrawlerConfigurationUrls.validateJsonElement(jsonObj.get("Urls"));
      // validate the optional field `CrawlDepth`
      if (jsonObj.get("CrawlDepth") != null && !jsonObj.get("CrawlDepth").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("CrawlDepth"));
      }
      // validate the optional field `MaxLinksPerPage`
      if (jsonObj.get("MaxLinksPerPage") != null && !jsonObj.get("MaxLinksPerPage").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxLinksPerPage"));
      }
      // validate the optional field `MaxContentSizePerPageInMegaBytes`
      if (jsonObj.get("MaxContentSizePerPageInMegaBytes") != null && !jsonObj.get("MaxContentSizePerPageInMegaBytes").isJsonNull()) {
        Float.validateJsonElement(jsonObj.get("MaxContentSizePerPageInMegaBytes"));
      }
      // validate the optional field `MaxUrlsPerMinuteCrawlRate`
      if (jsonObj.get("MaxUrlsPerMinuteCrawlRate") != null && !jsonObj.get("MaxUrlsPerMinuteCrawlRate").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxUrlsPerMinuteCrawlRate"));
      }
      // validate the optional field `UrlInclusionPatterns`
      if (jsonObj.get("UrlInclusionPatterns") != null && !jsonObj.get("UrlInclusionPatterns").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("UrlInclusionPatterns"));
      }
      // validate the optional field `UrlExclusionPatterns`
      if (jsonObj.get("UrlExclusionPatterns") != null && !jsonObj.get("UrlExclusionPatterns").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("UrlExclusionPatterns"));
      }
      // validate the optional field `ProxyConfiguration`
      if (jsonObj.get("ProxyConfiguration") != null && !jsonObj.get("ProxyConfiguration").isJsonNull()) {
        WebCrawlerConfigurationProxyConfiguration.validateJsonElement(jsonObj.get("ProxyConfiguration"));
      }
      // validate the optional field `AuthenticationConfiguration`
      if (jsonObj.get("AuthenticationConfiguration") != null && !jsonObj.get("AuthenticationConfiguration").isJsonNull()) {
        WebCrawlerConfigurationAuthenticationConfiguration.validateJsonElement(jsonObj.get("AuthenticationConfiguration"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebCrawlerConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebCrawlerConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebCrawlerConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebCrawlerConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<WebCrawlerConfiguration>() {
           @Override
           public void write(JsonWriter out, WebCrawlerConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WebCrawlerConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WebCrawlerConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WebCrawlerConfiguration
   * @throws IOException if the JSON string is invalid with respect to WebCrawlerConfiguration
   */
  public static WebCrawlerConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebCrawlerConfiguration.class);
  }

  /**
   * Convert an instance of WebCrawlerConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

