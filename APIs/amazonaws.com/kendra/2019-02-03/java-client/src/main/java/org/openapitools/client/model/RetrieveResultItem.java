/*
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A single retrieved relevant passage result.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:16.778416-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RetrieveResultItem {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_DOCUMENT_ID = "DocumentId";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_ID)
  private String documentId;

  public static final String SERIALIZED_NAME_DOCUMENT_TITLE = "DocumentTitle";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_TITLE)
  private String documentTitle;

  public static final String SERIALIZED_NAME_CONTENT = "Content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private String content;

  public static final String SERIALIZED_NAME_DOCUMENT_U_R_I = "DocumentURI";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_U_R_I)
  private String documentURI;

  public static final String SERIALIZED_NAME_DOCUMENT_ATTRIBUTES = "DocumentAttributes";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_ATTRIBUTES)
  private List documentAttributes;

  public RetrieveResultItem() {
  }

  public RetrieveResultItem id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public RetrieveResultItem documentId(String documentId) {
    this.documentId = documentId;
    return this;
  }

  /**
   * Get documentId
   * @return documentId
   */
  @javax.annotation.Nullable
  public String getDocumentId() {
    return documentId;
  }

  public void setDocumentId(String documentId) {
    this.documentId = documentId;
  }


  public RetrieveResultItem documentTitle(String documentTitle) {
    this.documentTitle = documentTitle;
    return this;
  }

  /**
   * Get documentTitle
   * @return documentTitle
   */
  @javax.annotation.Nullable
  public String getDocumentTitle() {
    return documentTitle;
  }

  public void setDocumentTitle(String documentTitle) {
    this.documentTitle = documentTitle;
  }


  public RetrieveResultItem content(String content) {
    this.content = content;
    return this;
  }

  /**
   * Get content
   * @return content
   */
  @javax.annotation.Nullable
  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content = content;
  }


  public RetrieveResultItem documentURI(String documentURI) {
    this.documentURI = documentURI;
    return this;
  }

  /**
   * Get documentURI
   * @return documentURI
   */
  @javax.annotation.Nullable
  public String getDocumentURI() {
    return documentURI;
  }

  public void setDocumentURI(String documentURI) {
    this.documentURI = documentURI;
  }


  public RetrieveResultItem documentAttributes(List documentAttributes) {
    this.documentAttributes = documentAttributes;
    return this;
  }

  /**
   * Get documentAttributes
   * @return documentAttributes
   */
  @javax.annotation.Nullable
  public List getDocumentAttributes() {
    return documentAttributes;
  }

  public void setDocumentAttributes(List documentAttributes) {
    this.documentAttributes = documentAttributes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RetrieveResultItem retrieveResultItem = (RetrieveResultItem) o;
    return Objects.equals(this.id, retrieveResultItem.id) &&
        Objects.equals(this.documentId, retrieveResultItem.documentId) &&
        Objects.equals(this.documentTitle, retrieveResultItem.documentTitle) &&
        Objects.equals(this.content, retrieveResultItem.content) &&
        Objects.equals(this.documentURI, retrieveResultItem.documentURI) &&
        Objects.equals(this.documentAttributes, retrieveResultItem.documentAttributes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, documentId, documentTitle, content, documentURI, documentAttributes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RetrieveResultItem {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    documentId: ").append(toIndentedString(documentId)).append("\n");
    sb.append("    documentTitle: ").append(toIndentedString(documentTitle)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    documentURI: ").append(toIndentedString(documentURI)).append("\n");
    sb.append("    documentAttributes: ").append(toIndentedString(documentAttributes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id");
    openapiFields.add("DocumentId");
    openapiFields.add("DocumentTitle");
    openapiFields.add("Content");
    openapiFields.add("DocumentURI");
    openapiFields.add("DocumentAttributes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RetrieveResultItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RetrieveResultItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RetrieveResultItem is not found in the empty JSON string", RetrieveResultItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RetrieveResultItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RetrieveResultItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Id`
      if (jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Id"));
      }
      // validate the optional field `DocumentId`
      if (jsonObj.get("DocumentId") != null && !jsonObj.get("DocumentId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DocumentId"));
      }
      // validate the optional field `DocumentTitle`
      if (jsonObj.get("DocumentTitle") != null && !jsonObj.get("DocumentTitle").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DocumentTitle"));
      }
      // validate the optional field `Content`
      if (jsonObj.get("Content") != null && !jsonObj.get("Content").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Content"));
      }
      // validate the optional field `DocumentURI`
      if (jsonObj.get("DocumentURI") != null && !jsonObj.get("DocumentURI").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DocumentURI"));
      }
      // validate the optional field `DocumentAttributes`
      if (jsonObj.get("DocumentAttributes") != null && !jsonObj.get("DocumentAttributes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("DocumentAttributes"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RetrieveResultItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RetrieveResultItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RetrieveResultItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RetrieveResultItem.class));

       return (TypeAdapter<T>) new TypeAdapter<RetrieveResultItem>() {
           @Override
           public void write(JsonWriter out, RetrieveResultItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RetrieveResultItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RetrieveResultItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RetrieveResultItem
   * @throws IOException if the JSON string is invalid with respect to RetrieveResultItem
   */
  public static RetrieveResultItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RetrieveResultItem.class);
  }

  /**
   * Convert an instance of RetrieveResultItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

