/*
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SalesforceConfigurationChatterFeedConfiguration;
import org.openapitools.client.model.SalesforceConfigurationKnowledgeArticleConfiguration;
import org.openapitools.client.model.SalesforceConfigurationStandardObjectAttachmentConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Provides the configuration information to connect to Salesforce as your data source.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:16.778416-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SalesforceConfiguration {
  public static final String SERIALIZED_NAME_SERVER_URL = "ServerUrl";
  @SerializedName(SERIALIZED_NAME_SERVER_URL)
  private String serverUrl;

  public static final String SERIALIZED_NAME_SECRET_ARN = "SecretArn";
  @SerializedName(SERIALIZED_NAME_SECRET_ARN)
  private String secretArn;

  public static final String SERIALIZED_NAME_STANDARD_OBJECT_CONFIGURATIONS = "StandardObjectConfigurations";
  @SerializedName(SERIALIZED_NAME_STANDARD_OBJECT_CONFIGURATIONS)
  private List standardObjectConfigurations;

  public static final String SERIALIZED_NAME_KNOWLEDGE_ARTICLE_CONFIGURATION = "KnowledgeArticleConfiguration";
  @SerializedName(SERIALIZED_NAME_KNOWLEDGE_ARTICLE_CONFIGURATION)
  private SalesforceConfigurationKnowledgeArticleConfiguration knowledgeArticleConfiguration;

  public static final String SERIALIZED_NAME_CHATTER_FEED_CONFIGURATION = "ChatterFeedConfiguration";
  @SerializedName(SERIALIZED_NAME_CHATTER_FEED_CONFIGURATION)
  private SalesforceConfigurationChatterFeedConfiguration chatterFeedConfiguration;

  public static final String SERIALIZED_NAME_CRAWL_ATTACHMENTS = "CrawlAttachments";
  @SerializedName(SERIALIZED_NAME_CRAWL_ATTACHMENTS)
  private Boolean crawlAttachments;

  public static final String SERIALIZED_NAME_STANDARD_OBJECT_ATTACHMENT_CONFIGURATION = "StandardObjectAttachmentConfiguration";
  @SerializedName(SERIALIZED_NAME_STANDARD_OBJECT_ATTACHMENT_CONFIGURATION)
  private SalesforceConfigurationStandardObjectAttachmentConfiguration standardObjectAttachmentConfiguration;

  public static final String SERIALIZED_NAME_INCLUDE_ATTACHMENT_FILE_PATTERNS = "IncludeAttachmentFilePatterns";
  @SerializedName(SERIALIZED_NAME_INCLUDE_ATTACHMENT_FILE_PATTERNS)
  private List includeAttachmentFilePatterns;

  public static final String SERIALIZED_NAME_EXCLUDE_ATTACHMENT_FILE_PATTERNS = "ExcludeAttachmentFilePatterns";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_ATTACHMENT_FILE_PATTERNS)
  private List excludeAttachmentFilePatterns;

  public SalesforceConfiguration() {
  }

  public SalesforceConfiguration serverUrl(String serverUrl) {
    this.serverUrl = serverUrl;
    return this;
  }

  /**
   * Get serverUrl
   * @return serverUrl
   */
  @javax.annotation.Nonnull
  public String getServerUrl() {
    return serverUrl;
  }

  public void setServerUrl(String serverUrl) {
    this.serverUrl = serverUrl;
  }


  public SalesforceConfiguration secretArn(String secretArn) {
    this.secretArn = secretArn;
    return this;
  }

  /**
   * Get secretArn
   * @return secretArn
   */
  @javax.annotation.Nonnull
  public String getSecretArn() {
    return secretArn;
  }

  public void setSecretArn(String secretArn) {
    this.secretArn = secretArn;
  }


  public SalesforceConfiguration standardObjectConfigurations(List standardObjectConfigurations) {
    this.standardObjectConfigurations = standardObjectConfigurations;
    return this;
  }

  /**
   * Get standardObjectConfigurations
   * @return standardObjectConfigurations
   */
  @javax.annotation.Nullable
  public List getStandardObjectConfigurations() {
    return standardObjectConfigurations;
  }

  public void setStandardObjectConfigurations(List standardObjectConfigurations) {
    this.standardObjectConfigurations = standardObjectConfigurations;
  }


  public SalesforceConfiguration knowledgeArticleConfiguration(SalesforceConfigurationKnowledgeArticleConfiguration knowledgeArticleConfiguration) {
    this.knowledgeArticleConfiguration = knowledgeArticleConfiguration;
    return this;
  }

  /**
   * Get knowledgeArticleConfiguration
   * @return knowledgeArticleConfiguration
   */
  @javax.annotation.Nullable
  public SalesforceConfigurationKnowledgeArticleConfiguration getKnowledgeArticleConfiguration() {
    return knowledgeArticleConfiguration;
  }

  public void setKnowledgeArticleConfiguration(SalesforceConfigurationKnowledgeArticleConfiguration knowledgeArticleConfiguration) {
    this.knowledgeArticleConfiguration = knowledgeArticleConfiguration;
  }


  public SalesforceConfiguration chatterFeedConfiguration(SalesforceConfigurationChatterFeedConfiguration chatterFeedConfiguration) {
    this.chatterFeedConfiguration = chatterFeedConfiguration;
    return this;
  }

  /**
   * Get chatterFeedConfiguration
   * @return chatterFeedConfiguration
   */
  @javax.annotation.Nullable
  public SalesforceConfigurationChatterFeedConfiguration getChatterFeedConfiguration() {
    return chatterFeedConfiguration;
  }

  public void setChatterFeedConfiguration(SalesforceConfigurationChatterFeedConfiguration chatterFeedConfiguration) {
    this.chatterFeedConfiguration = chatterFeedConfiguration;
  }


  public SalesforceConfiguration crawlAttachments(Boolean crawlAttachments) {
    this.crawlAttachments = crawlAttachments;
    return this;
  }

  /**
   * Get crawlAttachments
   * @return crawlAttachments
   */
  @javax.annotation.Nullable
  public Boolean getCrawlAttachments() {
    return crawlAttachments;
  }

  public void setCrawlAttachments(Boolean crawlAttachments) {
    this.crawlAttachments = crawlAttachments;
  }


  public SalesforceConfiguration standardObjectAttachmentConfiguration(SalesforceConfigurationStandardObjectAttachmentConfiguration standardObjectAttachmentConfiguration) {
    this.standardObjectAttachmentConfiguration = standardObjectAttachmentConfiguration;
    return this;
  }

  /**
   * Get standardObjectAttachmentConfiguration
   * @return standardObjectAttachmentConfiguration
   */
  @javax.annotation.Nullable
  public SalesforceConfigurationStandardObjectAttachmentConfiguration getStandardObjectAttachmentConfiguration() {
    return standardObjectAttachmentConfiguration;
  }

  public void setStandardObjectAttachmentConfiguration(SalesforceConfigurationStandardObjectAttachmentConfiguration standardObjectAttachmentConfiguration) {
    this.standardObjectAttachmentConfiguration = standardObjectAttachmentConfiguration;
  }


  public SalesforceConfiguration includeAttachmentFilePatterns(List includeAttachmentFilePatterns) {
    this.includeAttachmentFilePatterns = includeAttachmentFilePatterns;
    return this;
  }

  /**
   * Get includeAttachmentFilePatterns
   * @return includeAttachmentFilePatterns
   */
  @javax.annotation.Nullable
  public List getIncludeAttachmentFilePatterns() {
    return includeAttachmentFilePatterns;
  }

  public void setIncludeAttachmentFilePatterns(List includeAttachmentFilePatterns) {
    this.includeAttachmentFilePatterns = includeAttachmentFilePatterns;
  }


  public SalesforceConfiguration excludeAttachmentFilePatterns(List excludeAttachmentFilePatterns) {
    this.excludeAttachmentFilePatterns = excludeAttachmentFilePatterns;
    return this;
  }

  /**
   * Get excludeAttachmentFilePatterns
   * @return excludeAttachmentFilePatterns
   */
  @javax.annotation.Nullable
  public List getExcludeAttachmentFilePatterns() {
    return excludeAttachmentFilePatterns;
  }

  public void setExcludeAttachmentFilePatterns(List excludeAttachmentFilePatterns) {
    this.excludeAttachmentFilePatterns = excludeAttachmentFilePatterns;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SalesforceConfiguration salesforceConfiguration = (SalesforceConfiguration) o;
    return Objects.equals(this.serverUrl, salesforceConfiguration.serverUrl) &&
        Objects.equals(this.secretArn, salesforceConfiguration.secretArn) &&
        Objects.equals(this.standardObjectConfigurations, salesforceConfiguration.standardObjectConfigurations) &&
        Objects.equals(this.knowledgeArticleConfiguration, salesforceConfiguration.knowledgeArticleConfiguration) &&
        Objects.equals(this.chatterFeedConfiguration, salesforceConfiguration.chatterFeedConfiguration) &&
        Objects.equals(this.crawlAttachments, salesforceConfiguration.crawlAttachments) &&
        Objects.equals(this.standardObjectAttachmentConfiguration, salesforceConfiguration.standardObjectAttachmentConfiguration) &&
        Objects.equals(this.includeAttachmentFilePatterns, salesforceConfiguration.includeAttachmentFilePatterns) &&
        Objects.equals(this.excludeAttachmentFilePatterns, salesforceConfiguration.excludeAttachmentFilePatterns);
  }

  @Override
  public int hashCode() {
    return Objects.hash(serverUrl, secretArn, standardObjectConfigurations, knowledgeArticleConfiguration, chatterFeedConfiguration, crawlAttachments, standardObjectAttachmentConfiguration, includeAttachmentFilePatterns, excludeAttachmentFilePatterns);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SalesforceConfiguration {\n");
    sb.append("    serverUrl: ").append(toIndentedString(serverUrl)).append("\n");
    sb.append("    secretArn: ").append(toIndentedString(secretArn)).append("\n");
    sb.append("    standardObjectConfigurations: ").append(toIndentedString(standardObjectConfigurations)).append("\n");
    sb.append("    knowledgeArticleConfiguration: ").append(toIndentedString(knowledgeArticleConfiguration)).append("\n");
    sb.append("    chatterFeedConfiguration: ").append(toIndentedString(chatterFeedConfiguration)).append("\n");
    sb.append("    crawlAttachments: ").append(toIndentedString(crawlAttachments)).append("\n");
    sb.append("    standardObjectAttachmentConfiguration: ").append(toIndentedString(standardObjectAttachmentConfiguration)).append("\n");
    sb.append("    includeAttachmentFilePatterns: ").append(toIndentedString(includeAttachmentFilePatterns)).append("\n");
    sb.append("    excludeAttachmentFilePatterns: ").append(toIndentedString(excludeAttachmentFilePatterns)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ServerUrl");
    openapiFields.add("SecretArn");
    openapiFields.add("StandardObjectConfigurations");
    openapiFields.add("KnowledgeArticleConfiguration");
    openapiFields.add("ChatterFeedConfiguration");
    openapiFields.add("CrawlAttachments");
    openapiFields.add("StandardObjectAttachmentConfiguration");
    openapiFields.add("IncludeAttachmentFilePatterns");
    openapiFields.add("ExcludeAttachmentFilePatterns");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ServerUrl");
    openapiRequiredFields.add("SecretArn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SalesforceConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SalesforceConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SalesforceConfiguration is not found in the empty JSON string", SalesforceConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SalesforceConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SalesforceConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SalesforceConfiguration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `ServerUrl`
      String.validateJsonElement(jsonObj.get("ServerUrl"));
      // validate the required field `SecretArn`
      String.validateJsonElement(jsonObj.get("SecretArn"));
      // validate the optional field `StandardObjectConfigurations`
      if (jsonObj.get("StandardObjectConfigurations") != null && !jsonObj.get("StandardObjectConfigurations").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("StandardObjectConfigurations"));
      }
      // validate the optional field `KnowledgeArticleConfiguration`
      if (jsonObj.get("KnowledgeArticleConfiguration") != null && !jsonObj.get("KnowledgeArticleConfiguration").isJsonNull()) {
        SalesforceConfigurationKnowledgeArticleConfiguration.validateJsonElement(jsonObj.get("KnowledgeArticleConfiguration"));
      }
      // validate the optional field `ChatterFeedConfiguration`
      if (jsonObj.get("ChatterFeedConfiguration") != null && !jsonObj.get("ChatterFeedConfiguration").isJsonNull()) {
        SalesforceConfigurationChatterFeedConfiguration.validateJsonElement(jsonObj.get("ChatterFeedConfiguration"));
      }
      // validate the optional field `CrawlAttachments`
      if (jsonObj.get("CrawlAttachments") != null && !jsonObj.get("CrawlAttachments").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("CrawlAttachments"));
      }
      // validate the optional field `StandardObjectAttachmentConfiguration`
      if (jsonObj.get("StandardObjectAttachmentConfiguration") != null && !jsonObj.get("StandardObjectAttachmentConfiguration").isJsonNull()) {
        SalesforceConfigurationStandardObjectAttachmentConfiguration.validateJsonElement(jsonObj.get("StandardObjectAttachmentConfiguration"));
      }
      // validate the optional field `IncludeAttachmentFilePatterns`
      if (jsonObj.get("IncludeAttachmentFilePatterns") != null && !jsonObj.get("IncludeAttachmentFilePatterns").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("IncludeAttachmentFilePatterns"));
      }
      // validate the optional field `ExcludeAttachmentFilePatterns`
      if (jsonObj.get("ExcludeAttachmentFilePatterns") != null && !jsonObj.get("ExcludeAttachmentFilePatterns").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ExcludeAttachmentFilePatterns"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SalesforceConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SalesforceConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SalesforceConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SalesforceConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<SalesforceConfiguration>() {
           @Override
           public void write(JsonWriter out, SalesforceConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SalesforceConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SalesforceConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SalesforceConfiguration
   * @throws IOException if the JSON string is invalid with respect to SalesforceConfiguration
   */
  public static SalesforceConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SalesforceConfiguration.class);
  }

  /**
   * Convert an instance of SalesforceConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

