/*
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DataSourceVpcConfiguration;
import org.openapitools.client.model.DatabaseConfigurationAclConfiguration;
import org.openapitools.client.model.DatabaseConfigurationColumnConfiguration;
import org.openapitools.client.model.DatabaseConfigurationConnectionConfiguration;
import org.openapitools.client.model.DatabaseConfigurationSqlConfiguration;
import org.openapitools.client.model.DatabaseEngineType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DataSourceConfigurationDatabaseConfiguration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:16.778416-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DataSourceConfigurationDatabaseConfiguration {
  public static final String SERIALIZED_NAME_DATABASE_ENGINE_TYPE = "DatabaseEngineType";
  @SerializedName(SERIALIZED_NAME_DATABASE_ENGINE_TYPE)
  private DatabaseEngineType databaseEngineType;

  public static final String SERIALIZED_NAME_CONNECTION_CONFIGURATION = "ConnectionConfiguration";
  @SerializedName(SERIALIZED_NAME_CONNECTION_CONFIGURATION)
  private DatabaseConfigurationConnectionConfiguration connectionConfiguration;

  public static final String SERIALIZED_NAME_VPC_CONFIGURATION = "VpcConfiguration";
  @SerializedName(SERIALIZED_NAME_VPC_CONFIGURATION)
  private DataSourceVpcConfiguration vpcConfiguration;

  public static final String SERIALIZED_NAME_COLUMN_CONFIGURATION = "ColumnConfiguration";
  @SerializedName(SERIALIZED_NAME_COLUMN_CONFIGURATION)
  private DatabaseConfigurationColumnConfiguration columnConfiguration;

  public static final String SERIALIZED_NAME_ACL_CONFIGURATION = "AclConfiguration";
  @SerializedName(SERIALIZED_NAME_ACL_CONFIGURATION)
  private DatabaseConfigurationAclConfiguration aclConfiguration;

  public static final String SERIALIZED_NAME_SQL_CONFIGURATION = "SqlConfiguration";
  @SerializedName(SERIALIZED_NAME_SQL_CONFIGURATION)
  private DatabaseConfigurationSqlConfiguration sqlConfiguration;

  public DataSourceConfigurationDatabaseConfiguration() {
  }

  public DataSourceConfigurationDatabaseConfiguration databaseEngineType(DatabaseEngineType databaseEngineType) {
    this.databaseEngineType = databaseEngineType;
    return this;
  }

  /**
   * Get databaseEngineType
   * @return databaseEngineType
   */
  @javax.annotation.Nonnull
  public DatabaseEngineType getDatabaseEngineType() {
    return databaseEngineType;
  }

  public void setDatabaseEngineType(DatabaseEngineType databaseEngineType) {
    this.databaseEngineType = databaseEngineType;
  }


  public DataSourceConfigurationDatabaseConfiguration connectionConfiguration(DatabaseConfigurationConnectionConfiguration connectionConfiguration) {
    this.connectionConfiguration = connectionConfiguration;
    return this;
  }

  /**
   * Get connectionConfiguration
   * @return connectionConfiguration
   */
  @javax.annotation.Nonnull
  public DatabaseConfigurationConnectionConfiguration getConnectionConfiguration() {
    return connectionConfiguration;
  }

  public void setConnectionConfiguration(DatabaseConfigurationConnectionConfiguration connectionConfiguration) {
    this.connectionConfiguration = connectionConfiguration;
  }


  public DataSourceConfigurationDatabaseConfiguration vpcConfiguration(DataSourceVpcConfiguration vpcConfiguration) {
    this.vpcConfiguration = vpcConfiguration;
    return this;
  }

  /**
   * Get vpcConfiguration
   * @return vpcConfiguration
   */
  @javax.annotation.Nullable
  public DataSourceVpcConfiguration getVpcConfiguration() {
    return vpcConfiguration;
  }

  public void setVpcConfiguration(DataSourceVpcConfiguration vpcConfiguration) {
    this.vpcConfiguration = vpcConfiguration;
  }


  public DataSourceConfigurationDatabaseConfiguration columnConfiguration(DatabaseConfigurationColumnConfiguration columnConfiguration) {
    this.columnConfiguration = columnConfiguration;
    return this;
  }

  /**
   * Get columnConfiguration
   * @return columnConfiguration
   */
  @javax.annotation.Nonnull
  public DatabaseConfigurationColumnConfiguration getColumnConfiguration() {
    return columnConfiguration;
  }

  public void setColumnConfiguration(DatabaseConfigurationColumnConfiguration columnConfiguration) {
    this.columnConfiguration = columnConfiguration;
  }


  public DataSourceConfigurationDatabaseConfiguration aclConfiguration(DatabaseConfigurationAclConfiguration aclConfiguration) {
    this.aclConfiguration = aclConfiguration;
    return this;
  }

  /**
   * Get aclConfiguration
   * @return aclConfiguration
   */
  @javax.annotation.Nullable
  public DatabaseConfigurationAclConfiguration getAclConfiguration() {
    return aclConfiguration;
  }

  public void setAclConfiguration(DatabaseConfigurationAclConfiguration aclConfiguration) {
    this.aclConfiguration = aclConfiguration;
  }


  public DataSourceConfigurationDatabaseConfiguration sqlConfiguration(DatabaseConfigurationSqlConfiguration sqlConfiguration) {
    this.sqlConfiguration = sqlConfiguration;
    return this;
  }

  /**
   * Get sqlConfiguration
   * @return sqlConfiguration
   */
  @javax.annotation.Nullable
  public DatabaseConfigurationSqlConfiguration getSqlConfiguration() {
    return sqlConfiguration;
  }

  public void setSqlConfiguration(DatabaseConfigurationSqlConfiguration sqlConfiguration) {
    this.sqlConfiguration = sqlConfiguration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataSourceConfigurationDatabaseConfiguration dataSourceConfigurationDatabaseConfiguration = (DataSourceConfigurationDatabaseConfiguration) o;
    return Objects.equals(this.databaseEngineType, dataSourceConfigurationDatabaseConfiguration.databaseEngineType) &&
        Objects.equals(this.connectionConfiguration, dataSourceConfigurationDatabaseConfiguration.connectionConfiguration) &&
        Objects.equals(this.vpcConfiguration, dataSourceConfigurationDatabaseConfiguration.vpcConfiguration) &&
        Objects.equals(this.columnConfiguration, dataSourceConfigurationDatabaseConfiguration.columnConfiguration) &&
        Objects.equals(this.aclConfiguration, dataSourceConfigurationDatabaseConfiguration.aclConfiguration) &&
        Objects.equals(this.sqlConfiguration, dataSourceConfigurationDatabaseConfiguration.sqlConfiguration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(databaseEngineType, connectionConfiguration, vpcConfiguration, columnConfiguration, aclConfiguration, sqlConfiguration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataSourceConfigurationDatabaseConfiguration {\n");
    sb.append("    databaseEngineType: ").append(toIndentedString(databaseEngineType)).append("\n");
    sb.append("    connectionConfiguration: ").append(toIndentedString(connectionConfiguration)).append("\n");
    sb.append("    vpcConfiguration: ").append(toIndentedString(vpcConfiguration)).append("\n");
    sb.append("    columnConfiguration: ").append(toIndentedString(columnConfiguration)).append("\n");
    sb.append("    aclConfiguration: ").append(toIndentedString(aclConfiguration)).append("\n");
    sb.append("    sqlConfiguration: ").append(toIndentedString(sqlConfiguration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DatabaseEngineType");
    openapiFields.add("ConnectionConfiguration");
    openapiFields.add("VpcConfiguration");
    openapiFields.add("ColumnConfiguration");
    openapiFields.add("AclConfiguration");
    openapiFields.add("SqlConfiguration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DatabaseEngineType");
    openapiRequiredFields.add("ConnectionConfiguration");
    openapiRequiredFields.add("ColumnConfiguration");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataSourceConfigurationDatabaseConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataSourceConfigurationDatabaseConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataSourceConfigurationDatabaseConfiguration is not found in the empty JSON string", DataSourceConfigurationDatabaseConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataSourceConfigurationDatabaseConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataSourceConfigurationDatabaseConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DataSourceConfigurationDatabaseConfiguration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `DatabaseEngineType`
      DatabaseEngineType.validateJsonElement(jsonObj.get("DatabaseEngineType"));
      // validate the required field `ConnectionConfiguration`
      DatabaseConfigurationConnectionConfiguration.validateJsonElement(jsonObj.get("ConnectionConfiguration"));
      // validate the optional field `VpcConfiguration`
      if (jsonObj.get("VpcConfiguration") != null && !jsonObj.get("VpcConfiguration").isJsonNull()) {
        DataSourceVpcConfiguration.validateJsonElement(jsonObj.get("VpcConfiguration"));
      }
      // validate the required field `ColumnConfiguration`
      DatabaseConfigurationColumnConfiguration.validateJsonElement(jsonObj.get("ColumnConfiguration"));
      // validate the optional field `AclConfiguration`
      if (jsonObj.get("AclConfiguration") != null && !jsonObj.get("AclConfiguration").isJsonNull()) {
        DatabaseConfigurationAclConfiguration.validateJsonElement(jsonObj.get("AclConfiguration"));
      }
      // validate the optional field `SqlConfiguration`
      if (jsonObj.get("SqlConfiguration") != null && !jsonObj.get("SqlConfiguration").isJsonNull()) {
        DatabaseConfigurationSqlConfiguration.validateJsonElement(jsonObj.get("SqlConfiguration"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataSourceConfigurationDatabaseConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataSourceConfigurationDatabaseConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataSourceConfigurationDatabaseConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataSourceConfigurationDatabaseConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<DataSourceConfigurationDatabaseConfiguration>() {
           @Override
           public void write(JsonWriter out, DataSourceConfigurationDatabaseConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataSourceConfigurationDatabaseConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DataSourceConfigurationDatabaseConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataSourceConfigurationDatabaseConfiguration
   * @throws IOException if the JSON string is invalid with respect to DataSourceConfigurationDatabaseConfiguration
   */
  public static DataSourceConfigurationDatabaseConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataSourceConfigurationDatabaseConfiguration.class);
  }

  /**
   * Convert an instance of DataSourceConfigurationDatabaseConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

