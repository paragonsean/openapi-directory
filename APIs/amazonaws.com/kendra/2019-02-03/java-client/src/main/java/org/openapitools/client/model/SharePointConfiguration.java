/*
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SharePointConfigurationProxyConfiguration;
import org.openapitools.client.model.SharePointConfigurationSslCertificateS3Path;
import org.openapitools.client.model.SharePointConfigurationVpcConfiguration;
import org.openapitools.client.model.SharePointOnlineAuthenticationType;
import org.openapitools.client.model.SharePointVersion;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Provides the configuration information to connect to Microsoft SharePoint as your data source.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:16.778416-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SharePointConfiguration {
  public static final String SERIALIZED_NAME_SHARE_POINT_VERSION = "SharePointVersion";
  @SerializedName(SERIALIZED_NAME_SHARE_POINT_VERSION)
  private SharePointVersion sharePointVersion;

  public static final String SERIALIZED_NAME_URLS = "Urls";
  @SerializedName(SERIALIZED_NAME_URLS)
  private List urls;

  public static final String SERIALIZED_NAME_SECRET_ARN = "SecretArn";
  @SerializedName(SERIALIZED_NAME_SECRET_ARN)
  private String secretArn;

  public static final String SERIALIZED_NAME_CRAWL_ATTACHMENTS = "CrawlAttachments";
  @SerializedName(SERIALIZED_NAME_CRAWL_ATTACHMENTS)
  private Boolean crawlAttachments;

  public static final String SERIALIZED_NAME_USE_CHANGE_LOG = "UseChangeLog";
  @SerializedName(SERIALIZED_NAME_USE_CHANGE_LOG)
  private Boolean useChangeLog;

  public static final String SERIALIZED_NAME_INCLUSION_PATTERNS = "InclusionPatterns";
  @SerializedName(SERIALIZED_NAME_INCLUSION_PATTERNS)
  private List inclusionPatterns;

  public static final String SERIALIZED_NAME_EXCLUSION_PATTERNS = "ExclusionPatterns";
  @SerializedName(SERIALIZED_NAME_EXCLUSION_PATTERNS)
  private List exclusionPatterns;

  public static final String SERIALIZED_NAME_VPC_CONFIGURATION = "VpcConfiguration";
  @SerializedName(SERIALIZED_NAME_VPC_CONFIGURATION)
  private SharePointConfigurationVpcConfiguration vpcConfiguration;

  public static final String SERIALIZED_NAME_FIELD_MAPPINGS = "FieldMappings";
  @SerializedName(SERIALIZED_NAME_FIELD_MAPPINGS)
  private List fieldMappings;

  public static final String SERIALIZED_NAME_DOCUMENT_TITLE_FIELD_NAME = "DocumentTitleFieldName";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_TITLE_FIELD_NAME)
  private String documentTitleFieldName;

  public static final String SERIALIZED_NAME_DISABLE_LOCAL_GROUPS = "DisableLocalGroups";
  @SerializedName(SERIALIZED_NAME_DISABLE_LOCAL_GROUPS)
  private Boolean disableLocalGroups;

  public static final String SERIALIZED_NAME_SSL_CERTIFICATE_S3_PATH = "SslCertificateS3Path";
  @SerializedName(SERIALIZED_NAME_SSL_CERTIFICATE_S3_PATH)
  private SharePointConfigurationSslCertificateS3Path sslCertificateS3Path;

  public static final String SERIALIZED_NAME_AUTHENTICATION_TYPE = "AuthenticationType";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_TYPE)
  private SharePointOnlineAuthenticationType authenticationType;

  public static final String SERIALIZED_NAME_PROXY_CONFIGURATION = "ProxyConfiguration";
  @SerializedName(SERIALIZED_NAME_PROXY_CONFIGURATION)
  private SharePointConfigurationProxyConfiguration proxyConfiguration;

  public SharePointConfiguration() {
  }

  public SharePointConfiguration sharePointVersion(SharePointVersion sharePointVersion) {
    this.sharePointVersion = sharePointVersion;
    return this;
  }

  /**
   * Get sharePointVersion
   * @return sharePointVersion
   */
  @javax.annotation.Nonnull
  public SharePointVersion getSharePointVersion() {
    return sharePointVersion;
  }

  public void setSharePointVersion(SharePointVersion sharePointVersion) {
    this.sharePointVersion = sharePointVersion;
  }


  public SharePointConfiguration urls(List urls) {
    this.urls = urls;
    return this;
  }

  /**
   * Get urls
   * @return urls
   */
  @javax.annotation.Nonnull
  public List getUrls() {
    return urls;
  }

  public void setUrls(List urls) {
    this.urls = urls;
  }


  public SharePointConfiguration secretArn(String secretArn) {
    this.secretArn = secretArn;
    return this;
  }

  /**
   * Get secretArn
   * @return secretArn
   */
  @javax.annotation.Nonnull
  public String getSecretArn() {
    return secretArn;
  }

  public void setSecretArn(String secretArn) {
    this.secretArn = secretArn;
  }


  public SharePointConfiguration crawlAttachments(Boolean crawlAttachments) {
    this.crawlAttachments = crawlAttachments;
    return this;
  }

  /**
   * Get crawlAttachments
   * @return crawlAttachments
   */
  @javax.annotation.Nullable
  public Boolean getCrawlAttachments() {
    return crawlAttachments;
  }

  public void setCrawlAttachments(Boolean crawlAttachments) {
    this.crawlAttachments = crawlAttachments;
  }


  public SharePointConfiguration useChangeLog(Boolean useChangeLog) {
    this.useChangeLog = useChangeLog;
    return this;
  }

  /**
   * Get useChangeLog
   * @return useChangeLog
   */
  @javax.annotation.Nullable
  public Boolean getUseChangeLog() {
    return useChangeLog;
  }

  public void setUseChangeLog(Boolean useChangeLog) {
    this.useChangeLog = useChangeLog;
  }


  public SharePointConfiguration inclusionPatterns(List inclusionPatterns) {
    this.inclusionPatterns = inclusionPatterns;
    return this;
  }

  /**
   * Get inclusionPatterns
   * @return inclusionPatterns
   */
  @javax.annotation.Nullable
  public List getInclusionPatterns() {
    return inclusionPatterns;
  }

  public void setInclusionPatterns(List inclusionPatterns) {
    this.inclusionPatterns = inclusionPatterns;
  }


  public SharePointConfiguration exclusionPatterns(List exclusionPatterns) {
    this.exclusionPatterns = exclusionPatterns;
    return this;
  }

  /**
   * Get exclusionPatterns
   * @return exclusionPatterns
   */
  @javax.annotation.Nullable
  public List getExclusionPatterns() {
    return exclusionPatterns;
  }

  public void setExclusionPatterns(List exclusionPatterns) {
    this.exclusionPatterns = exclusionPatterns;
  }


  public SharePointConfiguration vpcConfiguration(SharePointConfigurationVpcConfiguration vpcConfiguration) {
    this.vpcConfiguration = vpcConfiguration;
    return this;
  }

  /**
   * Get vpcConfiguration
   * @return vpcConfiguration
   */
  @javax.annotation.Nullable
  public SharePointConfigurationVpcConfiguration getVpcConfiguration() {
    return vpcConfiguration;
  }

  public void setVpcConfiguration(SharePointConfigurationVpcConfiguration vpcConfiguration) {
    this.vpcConfiguration = vpcConfiguration;
  }


  public SharePointConfiguration fieldMappings(List fieldMappings) {
    this.fieldMappings = fieldMappings;
    return this;
  }

  /**
   * Get fieldMappings
   * @return fieldMappings
   */
  @javax.annotation.Nullable
  public List getFieldMappings() {
    return fieldMappings;
  }

  public void setFieldMappings(List fieldMappings) {
    this.fieldMappings = fieldMappings;
  }


  public SharePointConfiguration documentTitleFieldName(String documentTitleFieldName) {
    this.documentTitleFieldName = documentTitleFieldName;
    return this;
  }

  /**
   * Get documentTitleFieldName
   * @return documentTitleFieldName
   */
  @javax.annotation.Nullable
  public String getDocumentTitleFieldName() {
    return documentTitleFieldName;
  }

  public void setDocumentTitleFieldName(String documentTitleFieldName) {
    this.documentTitleFieldName = documentTitleFieldName;
  }


  public SharePointConfiguration disableLocalGroups(Boolean disableLocalGroups) {
    this.disableLocalGroups = disableLocalGroups;
    return this;
  }

  /**
   * Get disableLocalGroups
   * @return disableLocalGroups
   */
  @javax.annotation.Nullable
  public Boolean getDisableLocalGroups() {
    return disableLocalGroups;
  }

  public void setDisableLocalGroups(Boolean disableLocalGroups) {
    this.disableLocalGroups = disableLocalGroups;
  }


  public SharePointConfiguration sslCertificateS3Path(SharePointConfigurationSslCertificateS3Path sslCertificateS3Path) {
    this.sslCertificateS3Path = sslCertificateS3Path;
    return this;
  }

  /**
   * Get sslCertificateS3Path
   * @return sslCertificateS3Path
   */
  @javax.annotation.Nullable
  public SharePointConfigurationSslCertificateS3Path getSslCertificateS3Path() {
    return sslCertificateS3Path;
  }

  public void setSslCertificateS3Path(SharePointConfigurationSslCertificateS3Path sslCertificateS3Path) {
    this.sslCertificateS3Path = sslCertificateS3Path;
  }


  public SharePointConfiguration authenticationType(SharePointOnlineAuthenticationType authenticationType) {
    this.authenticationType = authenticationType;
    return this;
  }

  /**
   * Get authenticationType
   * @return authenticationType
   */
  @javax.annotation.Nullable
  public SharePointOnlineAuthenticationType getAuthenticationType() {
    return authenticationType;
  }

  public void setAuthenticationType(SharePointOnlineAuthenticationType authenticationType) {
    this.authenticationType = authenticationType;
  }


  public SharePointConfiguration proxyConfiguration(SharePointConfigurationProxyConfiguration proxyConfiguration) {
    this.proxyConfiguration = proxyConfiguration;
    return this;
  }

  /**
   * Get proxyConfiguration
   * @return proxyConfiguration
   */
  @javax.annotation.Nullable
  public SharePointConfigurationProxyConfiguration getProxyConfiguration() {
    return proxyConfiguration;
  }

  public void setProxyConfiguration(SharePointConfigurationProxyConfiguration proxyConfiguration) {
    this.proxyConfiguration = proxyConfiguration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SharePointConfiguration sharePointConfiguration = (SharePointConfiguration) o;
    return Objects.equals(this.sharePointVersion, sharePointConfiguration.sharePointVersion) &&
        Objects.equals(this.urls, sharePointConfiguration.urls) &&
        Objects.equals(this.secretArn, sharePointConfiguration.secretArn) &&
        Objects.equals(this.crawlAttachments, sharePointConfiguration.crawlAttachments) &&
        Objects.equals(this.useChangeLog, sharePointConfiguration.useChangeLog) &&
        Objects.equals(this.inclusionPatterns, sharePointConfiguration.inclusionPatterns) &&
        Objects.equals(this.exclusionPatterns, sharePointConfiguration.exclusionPatterns) &&
        Objects.equals(this.vpcConfiguration, sharePointConfiguration.vpcConfiguration) &&
        Objects.equals(this.fieldMappings, sharePointConfiguration.fieldMappings) &&
        Objects.equals(this.documentTitleFieldName, sharePointConfiguration.documentTitleFieldName) &&
        Objects.equals(this.disableLocalGroups, sharePointConfiguration.disableLocalGroups) &&
        Objects.equals(this.sslCertificateS3Path, sharePointConfiguration.sslCertificateS3Path) &&
        Objects.equals(this.authenticationType, sharePointConfiguration.authenticationType) &&
        Objects.equals(this.proxyConfiguration, sharePointConfiguration.proxyConfiguration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sharePointVersion, urls, secretArn, crawlAttachments, useChangeLog, inclusionPatterns, exclusionPatterns, vpcConfiguration, fieldMappings, documentTitleFieldName, disableLocalGroups, sslCertificateS3Path, authenticationType, proxyConfiguration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SharePointConfiguration {\n");
    sb.append("    sharePointVersion: ").append(toIndentedString(sharePointVersion)).append("\n");
    sb.append("    urls: ").append(toIndentedString(urls)).append("\n");
    sb.append("    secretArn: ").append(toIndentedString(secretArn)).append("\n");
    sb.append("    crawlAttachments: ").append(toIndentedString(crawlAttachments)).append("\n");
    sb.append("    useChangeLog: ").append(toIndentedString(useChangeLog)).append("\n");
    sb.append("    inclusionPatterns: ").append(toIndentedString(inclusionPatterns)).append("\n");
    sb.append("    exclusionPatterns: ").append(toIndentedString(exclusionPatterns)).append("\n");
    sb.append("    vpcConfiguration: ").append(toIndentedString(vpcConfiguration)).append("\n");
    sb.append("    fieldMappings: ").append(toIndentedString(fieldMappings)).append("\n");
    sb.append("    documentTitleFieldName: ").append(toIndentedString(documentTitleFieldName)).append("\n");
    sb.append("    disableLocalGroups: ").append(toIndentedString(disableLocalGroups)).append("\n");
    sb.append("    sslCertificateS3Path: ").append(toIndentedString(sslCertificateS3Path)).append("\n");
    sb.append("    authenticationType: ").append(toIndentedString(authenticationType)).append("\n");
    sb.append("    proxyConfiguration: ").append(toIndentedString(proxyConfiguration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SharePointVersion");
    openapiFields.add("Urls");
    openapiFields.add("SecretArn");
    openapiFields.add("CrawlAttachments");
    openapiFields.add("UseChangeLog");
    openapiFields.add("InclusionPatterns");
    openapiFields.add("ExclusionPatterns");
    openapiFields.add("VpcConfiguration");
    openapiFields.add("FieldMappings");
    openapiFields.add("DocumentTitleFieldName");
    openapiFields.add("DisableLocalGroups");
    openapiFields.add("SslCertificateS3Path");
    openapiFields.add("AuthenticationType");
    openapiFields.add("ProxyConfiguration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("SharePointVersion");
    openapiRequiredFields.add("Urls");
    openapiRequiredFields.add("SecretArn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SharePointConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SharePointConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SharePointConfiguration is not found in the empty JSON string", SharePointConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SharePointConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SharePointConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SharePointConfiguration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `SharePointVersion`
      SharePointVersion.validateJsonElement(jsonObj.get("SharePointVersion"));
      // validate the required field `Urls`
      List.validateJsonElement(jsonObj.get("Urls"));
      // validate the required field `SecretArn`
      String.validateJsonElement(jsonObj.get("SecretArn"));
      // validate the optional field `CrawlAttachments`
      if (jsonObj.get("CrawlAttachments") != null && !jsonObj.get("CrawlAttachments").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("CrawlAttachments"));
      }
      // validate the optional field `UseChangeLog`
      if (jsonObj.get("UseChangeLog") != null && !jsonObj.get("UseChangeLog").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("UseChangeLog"));
      }
      // validate the optional field `InclusionPatterns`
      if (jsonObj.get("InclusionPatterns") != null && !jsonObj.get("InclusionPatterns").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("InclusionPatterns"));
      }
      // validate the optional field `ExclusionPatterns`
      if (jsonObj.get("ExclusionPatterns") != null && !jsonObj.get("ExclusionPatterns").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ExclusionPatterns"));
      }
      // validate the optional field `VpcConfiguration`
      if (jsonObj.get("VpcConfiguration") != null && !jsonObj.get("VpcConfiguration").isJsonNull()) {
        SharePointConfigurationVpcConfiguration.validateJsonElement(jsonObj.get("VpcConfiguration"));
      }
      // validate the optional field `FieldMappings`
      if (jsonObj.get("FieldMappings") != null && !jsonObj.get("FieldMappings").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("FieldMappings"));
      }
      // validate the optional field `DocumentTitleFieldName`
      if (jsonObj.get("DocumentTitleFieldName") != null && !jsonObj.get("DocumentTitleFieldName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DocumentTitleFieldName"));
      }
      // validate the optional field `DisableLocalGroups`
      if (jsonObj.get("DisableLocalGroups") != null && !jsonObj.get("DisableLocalGroups").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("DisableLocalGroups"));
      }
      // validate the optional field `SslCertificateS3Path`
      if (jsonObj.get("SslCertificateS3Path") != null && !jsonObj.get("SslCertificateS3Path").isJsonNull()) {
        SharePointConfigurationSslCertificateS3Path.validateJsonElement(jsonObj.get("SslCertificateS3Path"));
      }
      // validate the optional field `AuthenticationType`
      if (jsonObj.get("AuthenticationType") != null && !jsonObj.get("AuthenticationType").isJsonNull()) {
        SharePointOnlineAuthenticationType.validateJsonElement(jsonObj.get("AuthenticationType"));
      }
      // validate the optional field `ProxyConfiguration`
      if (jsonObj.get("ProxyConfiguration") != null && !jsonObj.get("ProxyConfiguration").isJsonNull()) {
        SharePointConfigurationProxyConfiguration.validateJsonElement(jsonObj.get("ProxyConfiguration"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SharePointConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SharePointConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SharePointConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SharePointConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<SharePointConfiguration>() {
           @Override
           public void write(JsonWriter out, SharePointConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SharePointConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SharePointConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SharePointConfiguration
   * @throws IOException if the JSON string is invalid with respect to SharePointConfiguration
   */
  public static SharePointConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SharePointConfiguration.class);
  }

  /**
   * Convert an instance of SharePointConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

