/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFeaturedResultsItem.h
 *
 * A single featured result item. A featured result is displayed at the top of the search results page, placed above all other results for certain queries. If there&#39;s an exact match of a query, then certain documents are featured in the search results.
 */

#ifndef OAIFeaturedResultsItem_H
#define OAIFeaturedResultsItem_H

#include <QJsonObject>

#include "OAIQueryResultType.h"
#include "OAITextWithHighlights.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAITextWithHighlights;

class OAIFeaturedResultsItem : public OAIObject {
public:
    OAIFeaturedResultsItem();
    OAIFeaturedResultsItem(QString json);
    ~OAIFeaturedResultsItem() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    OAIQueryResultType getType() const;
    void setType(const OAIQueryResultType &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QList getAdditionalAttributes() const;
    void setAdditionalAttributes(const QList &additional_attributes);
    bool is_additional_attributes_Set() const;
    bool is_additional_attributes_Valid() const;

    QString getDocumentId() const;
    void setDocumentId(const QString &document_id);
    bool is_document_id_Set() const;
    bool is_document_id_Valid() const;

    OAITextWithHighlights getDocumentTitle() const;
    void setDocumentTitle(const OAITextWithHighlights &document_title);
    bool is_document_title_Set() const;
    bool is_document_title_Valid() const;

    OAITextWithHighlights getDocumentExcerpt() const;
    void setDocumentExcerpt(const OAITextWithHighlights &document_excerpt);
    bool is_document_excerpt_Set() const;
    bool is_document_excerpt_Valid() const;

    QString getDocumentUri() const;
    void setDocumentUri(const QString &document_uri);
    bool is_document_uri_Set() const;
    bool is_document_uri_Valid() const;

    QList getDocumentAttributes() const;
    void setDocumentAttributes(const QList &document_attributes);
    bool is_document_attributes_Set() const;
    bool is_document_attributes_Valid() const;

    QString getFeedbackToken() const;
    void setFeedbackToken(const QString &feedback_token);
    bool is_feedback_token_Set() const;
    bool is_feedback_token_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    OAIQueryResultType m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QList m_additional_attributes;
    bool m_additional_attributes_isSet;
    bool m_additional_attributes_isValid;

    QString m_document_id;
    bool m_document_id_isSet;
    bool m_document_id_isValid;

    OAITextWithHighlights m_document_title;
    bool m_document_title_isSet;
    bool m_document_title_isValid;

    OAITextWithHighlights m_document_excerpt;
    bool m_document_excerpt_isSet;
    bool m_document_excerpt_isValid;

    QString m_document_uri;
    bool m_document_uri_isSet;
    bool m_document_uri_isValid;

    QList m_document_attributes;
    bool m_document_attributes_isSet;
    bool m_document_attributes_isValid;

    QString m_feedback_token;
    bool m_feedback_token_isSet;
    bool m_feedback_token_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFeaturedResultsItem)

#endif // OAIFeaturedResultsItem_H
