/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataSourceConfiguration_SlackConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataSourceConfiguration_SlackConfiguration::OAIDataSourceConfiguration_SlackConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataSourceConfiguration_SlackConfiguration::OAIDataSourceConfiguration_SlackConfiguration() {
    this->initializeModel();
}

OAIDataSourceConfiguration_SlackConfiguration::~OAIDataSourceConfiguration_SlackConfiguration() {}

void OAIDataSourceConfiguration_SlackConfiguration::initializeModel() {

    m_team_id_isSet = false;
    m_team_id_isValid = false;

    m_secret_arn_isSet = false;
    m_secret_arn_isValid = false;

    m_vpc_configuration_isSet = false;
    m_vpc_configuration_isValid = false;

    m_slack_entity_list_isSet = false;
    m_slack_entity_list_isValid = false;

    m_use_change_log_isSet = false;
    m_use_change_log_isValid = false;

    m_crawl_bot_message_isSet = false;
    m_crawl_bot_message_isValid = false;

    m_exclude_archived_isSet = false;
    m_exclude_archived_isValid = false;

    m_since_crawl_date_isSet = false;
    m_since_crawl_date_isValid = false;

    m_look_back_period_isSet = false;
    m_look_back_period_isValid = false;

    m_private_channel_filter_isSet = false;
    m_private_channel_filter_isValid = false;

    m_public_channel_filter_isSet = false;
    m_public_channel_filter_isValid = false;

    m_inclusion_patterns_isSet = false;
    m_inclusion_patterns_isValid = false;

    m_exclusion_patterns_isSet = false;
    m_exclusion_patterns_isValid = false;

    m_field_mappings_isSet = false;
    m_field_mappings_isValid = false;
}

void OAIDataSourceConfiguration_SlackConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataSourceConfiguration_SlackConfiguration::fromJsonObject(QJsonObject json) {

    m_team_id_isValid = ::OpenAPI::fromJsonValue(m_team_id, json[QString("TeamId")]);
    m_team_id_isSet = !json[QString("TeamId")].isNull() && m_team_id_isValid;

    m_secret_arn_isValid = ::OpenAPI::fromJsonValue(m_secret_arn, json[QString("SecretArn")]);
    m_secret_arn_isSet = !json[QString("SecretArn")].isNull() && m_secret_arn_isValid;

    m_vpc_configuration_isValid = ::OpenAPI::fromJsonValue(m_vpc_configuration, json[QString("VpcConfiguration")]);
    m_vpc_configuration_isSet = !json[QString("VpcConfiguration")].isNull() && m_vpc_configuration_isValid;

    m_slack_entity_list_isValid = ::OpenAPI::fromJsonValue(m_slack_entity_list, json[QString("SlackEntityList")]);
    m_slack_entity_list_isSet = !json[QString("SlackEntityList")].isNull() && m_slack_entity_list_isValid;

    m_use_change_log_isValid = ::OpenAPI::fromJsonValue(m_use_change_log, json[QString("UseChangeLog")]);
    m_use_change_log_isSet = !json[QString("UseChangeLog")].isNull() && m_use_change_log_isValid;

    m_crawl_bot_message_isValid = ::OpenAPI::fromJsonValue(m_crawl_bot_message, json[QString("CrawlBotMessage")]);
    m_crawl_bot_message_isSet = !json[QString("CrawlBotMessage")].isNull() && m_crawl_bot_message_isValid;

    m_exclude_archived_isValid = ::OpenAPI::fromJsonValue(m_exclude_archived, json[QString("ExcludeArchived")]);
    m_exclude_archived_isSet = !json[QString("ExcludeArchived")].isNull() && m_exclude_archived_isValid;

    m_since_crawl_date_isValid = ::OpenAPI::fromJsonValue(m_since_crawl_date, json[QString("SinceCrawlDate")]);
    m_since_crawl_date_isSet = !json[QString("SinceCrawlDate")].isNull() && m_since_crawl_date_isValid;

    m_look_back_period_isValid = ::OpenAPI::fromJsonValue(m_look_back_period, json[QString("LookBackPeriod")]);
    m_look_back_period_isSet = !json[QString("LookBackPeriod")].isNull() && m_look_back_period_isValid;

    m_private_channel_filter_isValid = ::OpenAPI::fromJsonValue(m_private_channel_filter, json[QString("PrivateChannelFilter")]);
    m_private_channel_filter_isSet = !json[QString("PrivateChannelFilter")].isNull() && m_private_channel_filter_isValid;

    m_public_channel_filter_isValid = ::OpenAPI::fromJsonValue(m_public_channel_filter, json[QString("PublicChannelFilter")]);
    m_public_channel_filter_isSet = !json[QString("PublicChannelFilter")].isNull() && m_public_channel_filter_isValid;

    m_inclusion_patterns_isValid = ::OpenAPI::fromJsonValue(m_inclusion_patterns, json[QString("InclusionPatterns")]);
    m_inclusion_patterns_isSet = !json[QString("InclusionPatterns")].isNull() && m_inclusion_patterns_isValid;

    m_exclusion_patterns_isValid = ::OpenAPI::fromJsonValue(m_exclusion_patterns, json[QString("ExclusionPatterns")]);
    m_exclusion_patterns_isSet = !json[QString("ExclusionPatterns")].isNull() && m_exclusion_patterns_isValid;

    m_field_mappings_isValid = ::OpenAPI::fromJsonValue(m_field_mappings, json[QString("FieldMappings")]);
    m_field_mappings_isSet = !json[QString("FieldMappings")].isNull() && m_field_mappings_isValid;
}

QString OAIDataSourceConfiguration_SlackConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataSourceConfiguration_SlackConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_team_id_isSet) {
        obj.insert(QString("TeamId"), ::OpenAPI::toJsonValue(m_team_id));
    }
    if (m_secret_arn_isSet) {
        obj.insert(QString("SecretArn"), ::OpenAPI::toJsonValue(m_secret_arn));
    }
    if (m_vpc_configuration.isSet()) {
        obj.insert(QString("VpcConfiguration"), ::OpenAPI::toJsonValue(m_vpc_configuration));
    }
    if (m_slack_entity_list.isSet()) {
        obj.insert(QString("SlackEntityList"), ::OpenAPI::toJsonValue(m_slack_entity_list));
    }
    if (m_use_change_log_isSet) {
        obj.insert(QString("UseChangeLog"), ::OpenAPI::toJsonValue(m_use_change_log));
    }
    if (m_crawl_bot_message_isSet) {
        obj.insert(QString("CrawlBotMessage"), ::OpenAPI::toJsonValue(m_crawl_bot_message));
    }
    if (m_exclude_archived_isSet) {
        obj.insert(QString("ExcludeArchived"), ::OpenAPI::toJsonValue(m_exclude_archived));
    }
    if (m_since_crawl_date_isSet) {
        obj.insert(QString("SinceCrawlDate"), ::OpenAPI::toJsonValue(m_since_crawl_date));
    }
    if (m_look_back_period_isSet) {
        obj.insert(QString("LookBackPeriod"), ::OpenAPI::toJsonValue(m_look_back_period));
    }
    if (m_private_channel_filter.isSet()) {
        obj.insert(QString("PrivateChannelFilter"), ::OpenAPI::toJsonValue(m_private_channel_filter));
    }
    if (m_public_channel_filter.isSet()) {
        obj.insert(QString("PublicChannelFilter"), ::OpenAPI::toJsonValue(m_public_channel_filter));
    }
    if (m_inclusion_patterns.isSet()) {
        obj.insert(QString("InclusionPatterns"), ::OpenAPI::toJsonValue(m_inclusion_patterns));
    }
    if (m_exclusion_patterns.isSet()) {
        obj.insert(QString("ExclusionPatterns"), ::OpenAPI::toJsonValue(m_exclusion_patterns));
    }
    if (m_field_mappings.isSet()) {
        obj.insert(QString("FieldMappings"), ::OpenAPI::toJsonValue(m_field_mappings));
    }
    return obj;
}

QString OAIDataSourceConfiguration_SlackConfiguration::getTeamId() const {
    return m_team_id;
}
void OAIDataSourceConfiguration_SlackConfiguration::setTeamId(const QString &team_id) {
    m_team_id = team_id;
    m_team_id_isSet = true;
}

bool OAIDataSourceConfiguration_SlackConfiguration::is_team_id_Set() const{
    return m_team_id_isSet;
}

bool OAIDataSourceConfiguration_SlackConfiguration::is_team_id_Valid() const{
    return m_team_id_isValid;
}

QString OAIDataSourceConfiguration_SlackConfiguration::getSecretArn() const {
    return m_secret_arn;
}
void OAIDataSourceConfiguration_SlackConfiguration::setSecretArn(const QString &secret_arn) {
    m_secret_arn = secret_arn;
    m_secret_arn_isSet = true;
}

bool OAIDataSourceConfiguration_SlackConfiguration::is_secret_arn_Set() const{
    return m_secret_arn_isSet;
}

bool OAIDataSourceConfiguration_SlackConfiguration::is_secret_arn_Valid() const{
    return m_secret_arn_isValid;
}

OAISlackConfiguration_VpcConfiguration OAIDataSourceConfiguration_SlackConfiguration::getVpcConfiguration() const {
    return m_vpc_configuration;
}
void OAIDataSourceConfiguration_SlackConfiguration::setVpcConfiguration(const OAISlackConfiguration_VpcConfiguration &vpc_configuration) {
    m_vpc_configuration = vpc_configuration;
    m_vpc_configuration_isSet = true;
}

bool OAIDataSourceConfiguration_SlackConfiguration::is_vpc_configuration_Set() const{
    return m_vpc_configuration_isSet;
}

bool OAIDataSourceConfiguration_SlackConfiguration::is_vpc_configuration_Valid() const{
    return m_vpc_configuration_isValid;
}

QList OAIDataSourceConfiguration_SlackConfiguration::getSlackEntityList() const {
    return m_slack_entity_list;
}
void OAIDataSourceConfiguration_SlackConfiguration::setSlackEntityList(const QList &slack_entity_list) {
    m_slack_entity_list = slack_entity_list;
    m_slack_entity_list_isSet = true;
}

bool OAIDataSourceConfiguration_SlackConfiguration::is_slack_entity_list_Set() const{
    return m_slack_entity_list_isSet;
}

bool OAIDataSourceConfiguration_SlackConfiguration::is_slack_entity_list_Valid() const{
    return m_slack_entity_list_isValid;
}

bool OAIDataSourceConfiguration_SlackConfiguration::getUseChangeLog() const {
    return m_use_change_log;
}
void OAIDataSourceConfiguration_SlackConfiguration::setUseChangeLog(const bool &use_change_log) {
    m_use_change_log = use_change_log;
    m_use_change_log_isSet = true;
}

bool OAIDataSourceConfiguration_SlackConfiguration::is_use_change_log_Set() const{
    return m_use_change_log_isSet;
}

bool OAIDataSourceConfiguration_SlackConfiguration::is_use_change_log_Valid() const{
    return m_use_change_log_isValid;
}

bool OAIDataSourceConfiguration_SlackConfiguration::getCrawlBotMessage() const {
    return m_crawl_bot_message;
}
void OAIDataSourceConfiguration_SlackConfiguration::setCrawlBotMessage(const bool &crawl_bot_message) {
    m_crawl_bot_message = crawl_bot_message;
    m_crawl_bot_message_isSet = true;
}

bool OAIDataSourceConfiguration_SlackConfiguration::is_crawl_bot_message_Set() const{
    return m_crawl_bot_message_isSet;
}

bool OAIDataSourceConfiguration_SlackConfiguration::is_crawl_bot_message_Valid() const{
    return m_crawl_bot_message_isValid;
}

bool OAIDataSourceConfiguration_SlackConfiguration::getExcludeArchived() const {
    return m_exclude_archived;
}
void OAIDataSourceConfiguration_SlackConfiguration::setExcludeArchived(const bool &exclude_archived) {
    m_exclude_archived = exclude_archived;
    m_exclude_archived_isSet = true;
}

bool OAIDataSourceConfiguration_SlackConfiguration::is_exclude_archived_Set() const{
    return m_exclude_archived_isSet;
}

bool OAIDataSourceConfiguration_SlackConfiguration::is_exclude_archived_Valid() const{
    return m_exclude_archived_isValid;
}

QString OAIDataSourceConfiguration_SlackConfiguration::getSinceCrawlDate() const {
    return m_since_crawl_date;
}
void OAIDataSourceConfiguration_SlackConfiguration::setSinceCrawlDate(const QString &since_crawl_date) {
    m_since_crawl_date = since_crawl_date;
    m_since_crawl_date_isSet = true;
}

bool OAIDataSourceConfiguration_SlackConfiguration::is_since_crawl_date_Set() const{
    return m_since_crawl_date_isSet;
}

bool OAIDataSourceConfiguration_SlackConfiguration::is_since_crawl_date_Valid() const{
    return m_since_crawl_date_isValid;
}

qint32 OAIDataSourceConfiguration_SlackConfiguration::getLookBackPeriod() const {
    return m_look_back_period;
}
void OAIDataSourceConfiguration_SlackConfiguration::setLookBackPeriod(const qint32 &look_back_period) {
    m_look_back_period = look_back_period;
    m_look_back_period_isSet = true;
}

bool OAIDataSourceConfiguration_SlackConfiguration::is_look_back_period_Set() const{
    return m_look_back_period_isSet;
}

bool OAIDataSourceConfiguration_SlackConfiguration::is_look_back_period_Valid() const{
    return m_look_back_period_isValid;
}

QList OAIDataSourceConfiguration_SlackConfiguration::getPrivateChannelFilter() const {
    return m_private_channel_filter;
}
void OAIDataSourceConfiguration_SlackConfiguration::setPrivateChannelFilter(const QList &private_channel_filter) {
    m_private_channel_filter = private_channel_filter;
    m_private_channel_filter_isSet = true;
}

bool OAIDataSourceConfiguration_SlackConfiguration::is_private_channel_filter_Set() const{
    return m_private_channel_filter_isSet;
}

bool OAIDataSourceConfiguration_SlackConfiguration::is_private_channel_filter_Valid() const{
    return m_private_channel_filter_isValid;
}

QList OAIDataSourceConfiguration_SlackConfiguration::getPublicChannelFilter() const {
    return m_public_channel_filter;
}
void OAIDataSourceConfiguration_SlackConfiguration::setPublicChannelFilter(const QList &public_channel_filter) {
    m_public_channel_filter = public_channel_filter;
    m_public_channel_filter_isSet = true;
}

bool OAIDataSourceConfiguration_SlackConfiguration::is_public_channel_filter_Set() const{
    return m_public_channel_filter_isSet;
}

bool OAIDataSourceConfiguration_SlackConfiguration::is_public_channel_filter_Valid() const{
    return m_public_channel_filter_isValid;
}

QList OAIDataSourceConfiguration_SlackConfiguration::getInclusionPatterns() const {
    return m_inclusion_patterns;
}
void OAIDataSourceConfiguration_SlackConfiguration::setInclusionPatterns(const QList &inclusion_patterns) {
    m_inclusion_patterns = inclusion_patterns;
    m_inclusion_patterns_isSet = true;
}

bool OAIDataSourceConfiguration_SlackConfiguration::is_inclusion_patterns_Set() const{
    return m_inclusion_patterns_isSet;
}

bool OAIDataSourceConfiguration_SlackConfiguration::is_inclusion_patterns_Valid() const{
    return m_inclusion_patterns_isValid;
}

QList OAIDataSourceConfiguration_SlackConfiguration::getExclusionPatterns() const {
    return m_exclusion_patterns;
}
void OAIDataSourceConfiguration_SlackConfiguration::setExclusionPatterns(const QList &exclusion_patterns) {
    m_exclusion_patterns = exclusion_patterns;
    m_exclusion_patterns_isSet = true;
}

bool OAIDataSourceConfiguration_SlackConfiguration::is_exclusion_patterns_Set() const{
    return m_exclusion_patterns_isSet;
}

bool OAIDataSourceConfiguration_SlackConfiguration::is_exclusion_patterns_Valid() const{
    return m_exclusion_patterns_isValid;
}

QList OAIDataSourceConfiguration_SlackConfiguration::getFieldMappings() const {
    return m_field_mappings;
}
void OAIDataSourceConfiguration_SlackConfiguration::setFieldMappings(const QList &field_mappings) {
    m_field_mappings = field_mappings;
    m_field_mappings_isSet = true;
}

bool OAIDataSourceConfiguration_SlackConfiguration::is_field_mappings_Set() const{
    return m_field_mappings_isSet;
}

bool OAIDataSourceConfiguration_SlackConfiguration::is_field_mappings_Valid() const{
    return m_field_mappings_isValid;
}

bool OAIDataSourceConfiguration_SlackConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_slack_entity_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_change_log_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crawl_bot_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclude_archived_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_since_crawl_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_look_back_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_channel_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_channel_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inclusion_patterns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclusion_patterns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_mappings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataSourceConfiguration_SlackConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_team_id_isValid && m_secret_arn_isValid && m_slack_entity_list_isValid && m_since_crawl_date_isValid && true;
}

} // namespace OpenAPI
