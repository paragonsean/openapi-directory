/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataSourceSyncJobStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataSourceSyncJobStatus::OAIDataSourceSyncJobStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataSourceSyncJobStatus::OAIDataSourceSyncJobStatus() {
    this->initializeModel();
}

OAIDataSourceSyncJobStatus::~OAIDataSourceSyncJobStatus() {}

void OAIDataSourceSyncJobStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIDataSourceSyncJobStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIDataSourceSyncJobStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceSyncJobStatus::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SUCCEEDED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceSyncJobStatus::SUCCEEDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SYNCING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceSyncJobStatus::SYNCING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INCOMPLETE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceSyncJobStatus::INCOMPLETE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("STOPPING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceSyncJobStatus::STOPPING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ABORTED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceSyncJobStatus::ABORTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SYNCING_INDEXING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceSyncJobStatus::SYNCING_INDEXING;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIDataSourceSyncJobStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIDataSourceSyncJobStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIDataSourceSyncJobStatus::FAILED:
            val = "FAILED";
            break;
        case eOAIDataSourceSyncJobStatus::SUCCEEDED:
            val = "SUCCEEDED";
            break;
        case eOAIDataSourceSyncJobStatus::SYNCING:
            val = "SYNCING";
            break;
        case eOAIDataSourceSyncJobStatus::INCOMPLETE:
            val = "INCOMPLETE";
            break;
        case eOAIDataSourceSyncJobStatus::STOPPING:
            val = "STOPPING";
            break;
        case eOAIDataSourceSyncJobStatus::ABORTED:
            val = "ABORTED";
            break;
        case eOAIDataSourceSyncJobStatus::SYNCING_INDEXING:
            val = "SYNCING_INDEXING";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIDataSourceSyncJobStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIDataSourceSyncJobStatus::eOAIDataSourceSyncJobStatus OAIDataSourceSyncJobStatus::getValue() const {
    return m_value;
}

void OAIDataSourceSyncJobStatus::setValue(const OAIDataSourceSyncJobStatus::eOAIDataSourceSyncJobStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIDataSourceSyncJobStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAIDataSourceSyncJobStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
