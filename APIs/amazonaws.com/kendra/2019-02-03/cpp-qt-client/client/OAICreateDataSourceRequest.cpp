/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDataSourceRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDataSourceRequest::OAICreateDataSourceRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDataSourceRequest::OAICreateDataSourceRequest() {
    this->initializeModel();
}

OAICreateDataSourceRequest::~OAICreateDataSourceRequest() {}

void OAICreateDataSourceRequest::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_index_id_isSet = false;
    m_index_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_configuration_isSet = false;
    m_configuration_isValid = false;

    m_vpc_configuration_isSet = false;
    m_vpc_configuration_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_schedule_isSet = false;
    m_schedule_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_language_code_isSet = false;
    m_language_code_isValid = false;

    m_custom_document_enrichment_configuration_isSet = false;
    m_custom_document_enrichment_configuration_isValid = false;
}

void OAICreateDataSourceRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDataSourceRequest::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_index_id_isValid = ::OpenAPI::fromJsonValue(m_index_id, json[QString("IndexId")]);
    m_index_id_isSet = !json[QString("IndexId")].isNull() && m_index_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_configuration_isValid = ::OpenAPI::fromJsonValue(m_configuration, json[QString("Configuration")]);
    m_configuration_isSet = !json[QString("Configuration")].isNull() && m_configuration_isValid;

    m_vpc_configuration_isValid = ::OpenAPI::fromJsonValue(m_vpc_configuration, json[QString("VpcConfiguration")]);
    m_vpc_configuration_isSet = !json[QString("VpcConfiguration")].isNull() && m_vpc_configuration_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_schedule_isValid = ::OpenAPI::fromJsonValue(m_schedule, json[QString("Schedule")]);
    m_schedule_isSet = !json[QString("Schedule")].isNull() && m_schedule_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("ClientToken")]);
    m_client_token_isSet = !json[QString("ClientToken")].isNull() && m_client_token_isValid;

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("LanguageCode")]);
    m_language_code_isSet = !json[QString("LanguageCode")].isNull() && m_language_code_isValid;

    m_custom_document_enrichment_configuration_isValid = ::OpenAPI::fromJsonValue(m_custom_document_enrichment_configuration, json[QString("CustomDocumentEnrichmentConfiguration")]);
    m_custom_document_enrichment_configuration_isSet = !json[QString("CustomDocumentEnrichmentConfiguration")].isNull() && m_custom_document_enrichment_configuration_isValid;
}

QString OAICreateDataSourceRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDataSourceRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_index_id_isSet) {
        obj.insert(QString("IndexId"), ::OpenAPI::toJsonValue(m_index_id));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_configuration.isSet()) {
        obj.insert(QString("Configuration"), ::OpenAPI::toJsonValue(m_configuration));
    }
    if (m_vpc_configuration.isSet()) {
        obj.insert(QString("VpcConfiguration"), ::OpenAPI::toJsonValue(m_vpc_configuration));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_schedule_isSet) {
        obj.insert(QString("Schedule"), ::OpenAPI::toJsonValue(m_schedule));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("ClientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_language_code_isSet) {
        obj.insert(QString("LanguageCode"), ::OpenAPI::toJsonValue(m_language_code));
    }
    if (m_custom_document_enrichment_configuration.isSet()) {
        obj.insert(QString("CustomDocumentEnrichmentConfiguration"), ::OpenAPI::toJsonValue(m_custom_document_enrichment_configuration));
    }
    return obj;
}

QString OAICreateDataSourceRequest::getName() const {
    return m_name;
}
void OAICreateDataSourceRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateDataSourceRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateDataSourceRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateDataSourceRequest::getIndexId() const {
    return m_index_id;
}
void OAICreateDataSourceRequest::setIndexId(const QString &index_id) {
    m_index_id = index_id;
    m_index_id_isSet = true;
}

bool OAICreateDataSourceRequest::is_index_id_Set() const{
    return m_index_id_isSet;
}

bool OAICreateDataSourceRequest::is_index_id_Valid() const{
    return m_index_id_isValid;
}

OAIDataSourceType OAICreateDataSourceRequest::getType() const {
    return m_type;
}
void OAICreateDataSourceRequest::setType(const OAIDataSourceType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICreateDataSourceRequest::is_type_Set() const{
    return m_type_isSet;
}

bool OAICreateDataSourceRequest::is_type_Valid() const{
    return m_type_isValid;
}

OAICreateDataSourceRequest_Configuration OAICreateDataSourceRequest::getConfiguration() const {
    return m_configuration;
}
void OAICreateDataSourceRequest::setConfiguration(const OAICreateDataSourceRequest_Configuration &configuration) {
    m_configuration = configuration;
    m_configuration_isSet = true;
}

bool OAICreateDataSourceRequest::is_configuration_Set() const{
    return m_configuration_isSet;
}

bool OAICreateDataSourceRequest::is_configuration_Valid() const{
    return m_configuration_isValid;
}

OAICreateDataSourceRequest_VpcConfiguration OAICreateDataSourceRequest::getVpcConfiguration() const {
    return m_vpc_configuration;
}
void OAICreateDataSourceRequest::setVpcConfiguration(const OAICreateDataSourceRequest_VpcConfiguration &vpc_configuration) {
    m_vpc_configuration = vpc_configuration;
    m_vpc_configuration_isSet = true;
}

bool OAICreateDataSourceRequest::is_vpc_configuration_Set() const{
    return m_vpc_configuration_isSet;
}

bool OAICreateDataSourceRequest::is_vpc_configuration_Valid() const{
    return m_vpc_configuration_isValid;
}

QString OAICreateDataSourceRequest::getDescription() const {
    return m_description;
}
void OAICreateDataSourceRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateDataSourceRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateDataSourceRequest::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICreateDataSourceRequest::getSchedule() const {
    return m_schedule;
}
void OAICreateDataSourceRequest::setSchedule(const QString &schedule) {
    m_schedule = schedule;
    m_schedule_isSet = true;
}

bool OAICreateDataSourceRequest::is_schedule_Set() const{
    return m_schedule_isSet;
}

bool OAICreateDataSourceRequest::is_schedule_Valid() const{
    return m_schedule_isValid;
}

QString OAICreateDataSourceRequest::getRoleArn() const {
    return m_role_arn;
}
void OAICreateDataSourceRequest::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAICreateDataSourceRequest::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAICreateDataSourceRequest::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

QList OAICreateDataSourceRequest::getTags() const {
    return m_tags;
}
void OAICreateDataSourceRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateDataSourceRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateDataSourceRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAICreateDataSourceRequest::getClientToken() const {
    return m_client_token;
}
void OAICreateDataSourceRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateDataSourceRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateDataSourceRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QString OAICreateDataSourceRequest::getLanguageCode() const {
    return m_language_code;
}
void OAICreateDataSourceRequest::setLanguageCode(const QString &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAICreateDataSourceRequest::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAICreateDataSourceRequest::is_language_code_Valid() const{
    return m_language_code_isValid;
}

OAICreateDataSourceRequest_CustomDocumentEnrichmentConfiguration OAICreateDataSourceRequest::getCustomDocumentEnrichmentConfiguration() const {
    return m_custom_document_enrichment_configuration;
}
void OAICreateDataSourceRequest::setCustomDocumentEnrichmentConfiguration(const OAICreateDataSourceRequest_CustomDocumentEnrichmentConfiguration &custom_document_enrichment_configuration) {
    m_custom_document_enrichment_configuration = custom_document_enrichment_configuration;
    m_custom_document_enrichment_configuration_isSet = true;
}

bool OAICreateDataSourceRequest::is_custom_document_enrichment_configuration_Set() const{
    return m_custom_document_enrichment_configuration_isSet;
}

bool OAICreateDataSourceRequest::is_custom_document_enrichment_configuration_Valid() const{
    return m_custom_document_enrichment_configuration_isValid;
}

bool OAICreateDataSourceRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_document_enrichment_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDataSourceRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_index_id_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
