/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGroupOrderingIdSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGroupOrderingIdSummary::OAIGroupOrderingIdSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGroupOrderingIdSummary::OAIGroupOrderingIdSummary() {
    this->initializeModel();
}

OAIGroupOrderingIdSummary::~OAIGroupOrderingIdSummary() {}

void OAIGroupOrderingIdSummary::initializeModel() {

    m_status_isSet = false;
    m_status_isValid = false;

    m_last_updated_at_isSet = false;
    m_last_updated_at_isValid = false;

    m_received_at_isSet = false;
    m_received_at_isValid = false;

    m_ordering_id_isSet = false;
    m_ordering_id_isValid = false;

    m_failure_reason_isSet = false;
    m_failure_reason_isValid = false;
}

void OAIGroupOrderingIdSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGroupOrderingIdSummary::fromJsonObject(QJsonObject json) {

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_last_updated_at_isValid = ::OpenAPI::fromJsonValue(m_last_updated_at, json[QString("LastUpdatedAt")]);
    m_last_updated_at_isSet = !json[QString("LastUpdatedAt")].isNull() && m_last_updated_at_isValid;

    m_received_at_isValid = ::OpenAPI::fromJsonValue(m_received_at, json[QString("ReceivedAt")]);
    m_received_at_isSet = !json[QString("ReceivedAt")].isNull() && m_received_at_isValid;

    m_ordering_id_isValid = ::OpenAPI::fromJsonValue(m_ordering_id, json[QString("OrderingId")]);
    m_ordering_id_isSet = !json[QString("OrderingId")].isNull() && m_ordering_id_isValid;

    m_failure_reason_isValid = ::OpenAPI::fromJsonValue(m_failure_reason, json[QString("FailureReason")]);
    m_failure_reason_isSet = !json[QString("FailureReason")].isNull() && m_failure_reason_isValid;
}

QString OAIGroupOrderingIdSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGroupOrderingIdSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_last_updated_at_isSet) {
        obj.insert(QString("LastUpdatedAt"), ::OpenAPI::toJsonValue(m_last_updated_at));
    }
    if (m_received_at_isSet) {
        obj.insert(QString("ReceivedAt"), ::OpenAPI::toJsonValue(m_received_at));
    }
    if (m_ordering_id_isSet) {
        obj.insert(QString("OrderingId"), ::OpenAPI::toJsonValue(m_ordering_id));
    }
    if (m_failure_reason_isSet) {
        obj.insert(QString("FailureReason"), ::OpenAPI::toJsonValue(m_failure_reason));
    }
    return obj;
}

OAIPrincipalMappingStatus OAIGroupOrderingIdSummary::getStatus() const {
    return m_status;
}
void OAIGroupOrderingIdSummary::setStatus(const OAIPrincipalMappingStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGroupOrderingIdSummary::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGroupOrderingIdSummary::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIGroupOrderingIdSummary::getLastUpdatedAt() const {
    return m_last_updated_at;
}
void OAIGroupOrderingIdSummary::setLastUpdatedAt(const QDateTime &last_updated_at) {
    m_last_updated_at = last_updated_at;
    m_last_updated_at_isSet = true;
}

bool OAIGroupOrderingIdSummary::is_last_updated_at_Set() const{
    return m_last_updated_at_isSet;
}

bool OAIGroupOrderingIdSummary::is_last_updated_at_Valid() const{
    return m_last_updated_at_isValid;
}

QDateTime OAIGroupOrderingIdSummary::getReceivedAt() const {
    return m_received_at;
}
void OAIGroupOrderingIdSummary::setReceivedAt(const QDateTime &received_at) {
    m_received_at = received_at;
    m_received_at_isSet = true;
}

bool OAIGroupOrderingIdSummary::is_received_at_Set() const{
    return m_received_at_isSet;
}

bool OAIGroupOrderingIdSummary::is_received_at_Valid() const{
    return m_received_at_isValid;
}

qint32 OAIGroupOrderingIdSummary::getOrderingId() const {
    return m_ordering_id;
}
void OAIGroupOrderingIdSummary::setOrderingId(const qint32 &ordering_id) {
    m_ordering_id = ordering_id;
    m_ordering_id_isSet = true;
}

bool OAIGroupOrderingIdSummary::is_ordering_id_Set() const{
    return m_ordering_id_isSet;
}

bool OAIGroupOrderingIdSummary::is_ordering_id_Valid() const{
    return m_ordering_id_isValid;
}

QString OAIGroupOrderingIdSummary::getFailureReason() const {
    return m_failure_reason;
}
void OAIGroupOrderingIdSummary::setFailureReason(const QString &failure_reason) {
    m_failure_reason = failure_reason;
    m_failure_reason_isSet = true;
}

bool OAIGroupOrderingIdSummary::is_failure_reason_Set() const{
    return m_failure_reason_isSet;
}

bool OAIGroupOrderingIdSummary::is_failure_reason_Valid() const{
    return m_failure_reason_isValid;
}

bool OAIGroupOrderingIdSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_received_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ordering_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_reason_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGroupOrderingIdSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
