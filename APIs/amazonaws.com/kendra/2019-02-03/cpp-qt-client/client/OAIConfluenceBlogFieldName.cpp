/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfluenceBlogFieldName.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfluenceBlogFieldName::OAIConfluenceBlogFieldName(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfluenceBlogFieldName::OAIConfluenceBlogFieldName() {
    this->initializeModel();
}

OAIConfluenceBlogFieldName::~OAIConfluenceBlogFieldName() {}

void OAIConfluenceBlogFieldName::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIConfluenceBlogFieldName::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIConfluenceBlogFieldName::fromJson(QString jsonString) {
    
    if ( jsonString.compare("AUTHOR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConfluenceBlogFieldName::AUTHOR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DISPLAY_URL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConfluenceBlogFieldName::DISPLAY_URL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ITEM_TYPE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConfluenceBlogFieldName::ITEM_TYPE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LABELS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConfluenceBlogFieldName::LABELS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PUBLISH_DATE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConfluenceBlogFieldName::PUBLISH_DATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SPACE_KEY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConfluenceBlogFieldName::SPACE_KEY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SPACE_NAME", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConfluenceBlogFieldName::SPACE_NAME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("URL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConfluenceBlogFieldName::URL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VERSION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConfluenceBlogFieldName::VERSION;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIConfluenceBlogFieldName::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIConfluenceBlogFieldName::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIConfluenceBlogFieldName::AUTHOR:
            val = "AUTHOR";
            break;
        case eOAIConfluenceBlogFieldName::DISPLAY_URL:
            val = "DISPLAY_URL";
            break;
        case eOAIConfluenceBlogFieldName::ITEM_TYPE:
            val = "ITEM_TYPE";
            break;
        case eOAIConfluenceBlogFieldName::LABELS:
            val = "LABELS";
            break;
        case eOAIConfluenceBlogFieldName::PUBLISH_DATE:
            val = "PUBLISH_DATE";
            break;
        case eOAIConfluenceBlogFieldName::SPACE_KEY:
            val = "SPACE_KEY";
            break;
        case eOAIConfluenceBlogFieldName::SPACE_NAME:
            val = "SPACE_NAME";
            break;
        case eOAIConfluenceBlogFieldName::URL:
            val = "URL";
            break;
        case eOAIConfluenceBlogFieldName::VERSION:
            val = "VERSION";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIConfluenceBlogFieldName::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIConfluenceBlogFieldName::eOAIConfluenceBlogFieldName OAIConfluenceBlogFieldName::getValue() const {
    return m_value;
}

void OAIConfluenceBlogFieldName::setValue(const OAIConfluenceBlogFieldName::eOAIConfluenceBlogFieldName& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIConfluenceBlogFieldName::isSet() const {
    
    return m_value_isSet;
}

bool OAIConfluenceBlogFieldName::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
