/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetQuerySuggestionsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetQuerySuggestionsRequest::OAIGetQuerySuggestionsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetQuerySuggestionsRequest::OAIGetQuerySuggestionsRequest() {
    this->initializeModel();
}

OAIGetQuerySuggestionsRequest::~OAIGetQuerySuggestionsRequest() {}

void OAIGetQuerySuggestionsRequest::initializeModel() {

    m_index_id_isSet = false;
    m_index_id_isValid = false;

    m_query_text_isSet = false;
    m_query_text_isValid = false;

    m_max_suggestions_count_isSet = false;
    m_max_suggestions_count_isValid = false;

    m_suggestion_types_isSet = false;
    m_suggestion_types_isValid = false;

    m_attribute_suggestions_config_isSet = false;
    m_attribute_suggestions_config_isValid = false;
}

void OAIGetQuerySuggestionsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetQuerySuggestionsRequest::fromJsonObject(QJsonObject json) {

    m_index_id_isValid = ::OpenAPI::fromJsonValue(m_index_id, json[QString("IndexId")]);
    m_index_id_isSet = !json[QString("IndexId")].isNull() && m_index_id_isValid;

    m_query_text_isValid = ::OpenAPI::fromJsonValue(m_query_text, json[QString("QueryText")]);
    m_query_text_isSet = !json[QString("QueryText")].isNull() && m_query_text_isValid;

    m_max_suggestions_count_isValid = ::OpenAPI::fromJsonValue(m_max_suggestions_count, json[QString("MaxSuggestionsCount")]);
    m_max_suggestions_count_isSet = !json[QString("MaxSuggestionsCount")].isNull() && m_max_suggestions_count_isValid;

    m_suggestion_types_isValid = ::OpenAPI::fromJsonValue(m_suggestion_types, json[QString("SuggestionTypes")]);
    m_suggestion_types_isSet = !json[QString("SuggestionTypes")].isNull() && m_suggestion_types_isValid;

    m_attribute_suggestions_config_isValid = ::OpenAPI::fromJsonValue(m_attribute_suggestions_config, json[QString("AttributeSuggestionsConfig")]);
    m_attribute_suggestions_config_isSet = !json[QString("AttributeSuggestionsConfig")].isNull() && m_attribute_suggestions_config_isValid;
}

QString OAIGetQuerySuggestionsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetQuerySuggestionsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_index_id_isSet) {
        obj.insert(QString("IndexId"), ::OpenAPI::toJsonValue(m_index_id));
    }
    if (m_query_text_isSet) {
        obj.insert(QString("QueryText"), ::OpenAPI::toJsonValue(m_query_text));
    }
    if (m_max_suggestions_count_isSet) {
        obj.insert(QString("MaxSuggestionsCount"), ::OpenAPI::toJsonValue(m_max_suggestions_count));
    }
    if (m_suggestion_types.isSet()) {
        obj.insert(QString("SuggestionTypes"), ::OpenAPI::toJsonValue(m_suggestion_types));
    }
    if (m_attribute_suggestions_config.isSet()) {
        obj.insert(QString("AttributeSuggestionsConfig"), ::OpenAPI::toJsonValue(m_attribute_suggestions_config));
    }
    return obj;
}

QString OAIGetQuerySuggestionsRequest::getIndexId() const {
    return m_index_id;
}
void OAIGetQuerySuggestionsRequest::setIndexId(const QString &index_id) {
    m_index_id = index_id;
    m_index_id_isSet = true;
}

bool OAIGetQuerySuggestionsRequest::is_index_id_Set() const{
    return m_index_id_isSet;
}

bool OAIGetQuerySuggestionsRequest::is_index_id_Valid() const{
    return m_index_id_isValid;
}

QString OAIGetQuerySuggestionsRequest::getQueryText() const {
    return m_query_text;
}
void OAIGetQuerySuggestionsRequest::setQueryText(const QString &query_text) {
    m_query_text = query_text;
    m_query_text_isSet = true;
}

bool OAIGetQuerySuggestionsRequest::is_query_text_Set() const{
    return m_query_text_isSet;
}

bool OAIGetQuerySuggestionsRequest::is_query_text_Valid() const{
    return m_query_text_isValid;
}

qint32 OAIGetQuerySuggestionsRequest::getMaxSuggestionsCount() const {
    return m_max_suggestions_count;
}
void OAIGetQuerySuggestionsRequest::setMaxSuggestionsCount(const qint32 &max_suggestions_count) {
    m_max_suggestions_count = max_suggestions_count;
    m_max_suggestions_count_isSet = true;
}

bool OAIGetQuerySuggestionsRequest::is_max_suggestions_count_Set() const{
    return m_max_suggestions_count_isSet;
}

bool OAIGetQuerySuggestionsRequest::is_max_suggestions_count_Valid() const{
    return m_max_suggestions_count_isValid;
}

QList OAIGetQuerySuggestionsRequest::getSuggestionTypes() const {
    return m_suggestion_types;
}
void OAIGetQuerySuggestionsRequest::setSuggestionTypes(const QList &suggestion_types) {
    m_suggestion_types = suggestion_types;
    m_suggestion_types_isSet = true;
}

bool OAIGetQuerySuggestionsRequest::is_suggestion_types_Set() const{
    return m_suggestion_types_isSet;
}

bool OAIGetQuerySuggestionsRequest::is_suggestion_types_Valid() const{
    return m_suggestion_types_isValid;
}

OAIGetQuerySuggestionsRequest_AttributeSuggestionsConfig OAIGetQuerySuggestionsRequest::getAttributeSuggestionsConfig() const {
    return m_attribute_suggestions_config;
}
void OAIGetQuerySuggestionsRequest::setAttributeSuggestionsConfig(const OAIGetQuerySuggestionsRequest_AttributeSuggestionsConfig &attribute_suggestions_config) {
    m_attribute_suggestions_config = attribute_suggestions_config;
    m_attribute_suggestions_config_isSet = true;
}

bool OAIGetQuerySuggestionsRequest::is_attribute_suggestions_config_Set() const{
    return m_attribute_suggestions_config_isSet;
}

bool OAIGetQuerySuggestionsRequest::is_attribute_suggestions_config_Valid() const{
    return m_attribute_suggestions_config_isValid;
}

bool OAIGetQuerySuggestionsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_index_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_suggestions_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suggestion_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_attribute_suggestions_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetQuerySuggestionsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_index_id_isValid && m_query_text_isValid && true;
}

} // namespace OpenAPI
