/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateQuerySuggestionsBlockListRequest_SourceS3Path.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateQuerySuggestionsBlockListRequest_SourceS3Path::OAIUpdateQuerySuggestionsBlockListRequest_SourceS3Path(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateQuerySuggestionsBlockListRequest_SourceS3Path::OAIUpdateQuerySuggestionsBlockListRequest_SourceS3Path() {
    this->initializeModel();
}

OAIUpdateQuerySuggestionsBlockListRequest_SourceS3Path::~OAIUpdateQuerySuggestionsBlockListRequest_SourceS3Path() {}

void OAIUpdateQuerySuggestionsBlockListRequest_SourceS3Path::initializeModel() {

    m_bucket_isSet = false;
    m_bucket_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;
}

void OAIUpdateQuerySuggestionsBlockListRequest_SourceS3Path::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateQuerySuggestionsBlockListRequest_SourceS3Path::fromJsonObject(QJsonObject json) {

    m_bucket_isValid = ::OpenAPI::fromJsonValue(m_bucket, json[QString("Bucket")]);
    m_bucket_isSet = !json[QString("Bucket")].isNull() && m_bucket_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("Key")]);
    m_key_isSet = !json[QString("Key")].isNull() && m_key_isValid;
}

QString OAIUpdateQuerySuggestionsBlockListRequest_SourceS3Path::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateQuerySuggestionsBlockListRequest_SourceS3Path::asJsonObject() const {
    QJsonObject obj;
    if (m_bucket_isSet) {
        obj.insert(QString("Bucket"), ::OpenAPI::toJsonValue(m_bucket));
    }
    if (m_key_isSet) {
        obj.insert(QString("Key"), ::OpenAPI::toJsonValue(m_key));
    }
    return obj;
}

QString OAIUpdateQuerySuggestionsBlockListRequest_SourceS3Path::getBucket() const {
    return m_bucket;
}
void OAIUpdateQuerySuggestionsBlockListRequest_SourceS3Path::setBucket(const QString &bucket) {
    m_bucket = bucket;
    m_bucket_isSet = true;
}

bool OAIUpdateQuerySuggestionsBlockListRequest_SourceS3Path::is_bucket_Set() const{
    return m_bucket_isSet;
}

bool OAIUpdateQuerySuggestionsBlockListRequest_SourceS3Path::is_bucket_Valid() const{
    return m_bucket_isValid;
}

QString OAIUpdateQuerySuggestionsBlockListRequest_SourceS3Path::getKey() const {
    return m_key;
}
void OAIUpdateQuerySuggestionsBlockListRequest_SourceS3Path::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIUpdateQuerySuggestionsBlockListRequest_SourceS3Path::is_key_Set() const{
    return m_key_isSet;
}

bool OAIUpdateQuerySuggestionsBlockListRequest_SourceS3Path::is_key_Valid() const{
    return m_key_isValid;
}

bool OAIUpdateQuerySuggestionsBlockListRequest_SourceS3Path::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateQuerySuggestionsBlockListRequest_SourceS3Path::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bucket_isValid && m_key_isValid && true;
}

} // namespace OpenAPI
