/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExperiencesSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExperiencesSummary::OAIExperiencesSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExperiencesSummary::OAIExperiencesSummary() {
    this->initializeModel();
}

OAIExperiencesSummary::~OAIExperiencesSummary() {}

void OAIExperiencesSummary::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_endpoints_isSet = false;
    m_endpoints_isValid = false;
}

void OAIExperiencesSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExperiencesSummary::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("CreatedAt")]);
    m_created_at_isSet = !json[QString("CreatedAt")].isNull() && m_created_at_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_endpoints_isValid = ::OpenAPI::fromJsonValue(m_endpoints, json[QString("Endpoints")]);
    m_endpoints_isSet = !json[QString("Endpoints")].isNull() && m_endpoints_isValid;
}

QString OAIExperiencesSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExperiencesSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("CreatedAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_endpoints.isSet()) {
        obj.insert(QString("Endpoints"), ::OpenAPI::toJsonValue(m_endpoints));
    }
    return obj;
}

QString OAIExperiencesSummary::getName() const {
    return m_name;
}
void OAIExperiencesSummary::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIExperiencesSummary::is_name_Set() const{
    return m_name_isSet;
}

bool OAIExperiencesSummary::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIExperiencesSummary::getId() const {
    return m_id;
}
void OAIExperiencesSummary::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIExperiencesSummary::is_id_Set() const{
    return m_id_isSet;
}

bool OAIExperiencesSummary::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIExperiencesSummary::getCreatedAt() const {
    return m_created_at;
}
void OAIExperiencesSummary::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIExperiencesSummary::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIExperiencesSummary::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAIExperienceStatus OAIExperiencesSummary::getStatus() const {
    return m_status;
}
void OAIExperiencesSummary::setStatus(const OAIExperienceStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIExperiencesSummary::is_status_Set() const{
    return m_status_isSet;
}

bool OAIExperiencesSummary::is_status_Valid() const{
    return m_status_isValid;
}

QList OAIExperiencesSummary::getEndpoints() const {
    return m_endpoints;
}
void OAIExperiencesSummary::setEndpoints(const QList &endpoints) {
    m_endpoints = endpoints;
    m_endpoints_isSet = true;
}

bool OAIExperiencesSummary::is_endpoints_Set() const{
    return m_endpoints_isSet;
}

bool OAIExperiencesSummary::is_endpoints_Valid() const{
    return m_endpoints_isValid;
}

bool OAIExperiencesSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoints.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExperiencesSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
