/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAttributeFilter.h
 *
 * &lt;p&gt;Provides filtering the query results based on document attributes or metadata fields.&lt;/p&gt; &lt;p&gt;When you use the &lt;code&gt;AndAllFilters&lt;/code&gt; or &lt;code&gt;OrAllFilters&lt;/code&gt;, filters you can use 2 layers under the first attribute filter. For example, you can use:&lt;/p&gt; &lt;p&gt; &lt;code&gt;&amp;lt;AndAllFilters&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt; &amp;lt;OrAllFilters&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt; &amp;lt;EqualsTo&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;If you use more than 2 layers, you receive a &lt;code&gt;ValidationException&lt;/code&gt; exception with the message \&quot;&lt;code&gt;AttributeFilter&lt;/code&gt; cannot have a depth of more than 2.\&quot;&lt;/p&gt; &lt;p&gt;If you use more than 10 attribute filters in a given list for &lt;code&gt;AndAllFilters&lt;/code&gt; or &lt;code&gt;OrAllFilters&lt;/code&gt;, you receive a &lt;code&gt;ValidationException&lt;/code&gt; with the message \&quot;&lt;code&gt;AttributeFilter&lt;/code&gt; cannot have a length of more than 10\&quot;.&lt;/p&gt;
 */

#ifndef OAIAttributeFilter_H
#define OAIAttributeFilter_H

#include <QJsonObject>

#include "OAIAttributeFilter_ContainsAll.h"
#include "OAIAttributeFilter_ContainsAny.h"
#include "OAIAttributeFilter_EqualsTo.h"
#include "OAIAttributeFilter_GreaterThan.h"
#include "OAIAttributeFilter_GreaterThanOrEquals.h"
#include "OAIAttributeFilter_LessThan.h"
#include "OAIAttributeFilter_LessThanOrEquals.h"
#include "OAIAttributeFilter_NotFilter.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAttributeFilter_NotFilter;
class OAIAttributeFilter_EqualsTo;
class OAIAttributeFilter_ContainsAll;
class OAIAttributeFilter_ContainsAny;
class OAIAttributeFilter_GreaterThan;
class OAIAttributeFilter_GreaterThanOrEquals;
class OAIAttributeFilter_LessThan;
class OAIAttributeFilter_LessThanOrEquals;

class OAIAttributeFilter : public OAIObject {
public:
    OAIAttributeFilter();
    OAIAttributeFilter(QString json);
    ~OAIAttributeFilter() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList getAndAllFilters() const;
    void setAndAllFilters(const QList &and_all_filters);
    bool is_and_all_filters_Set() const;
    bool is_and_all_filters_Valid() const;

    QList getOrAllFilters() const;
    void setOrAllFilters(const QList &or_all_filters);
    bool is_or_all_filters_Set() const;
    bool is_or_all_filters_Valid() const;

    OAIAttributeFilter_NotFilter getNotFilter() const;
    void setNotFilter(const OAIAttributeFilter_NotFilter &not_filter);
    bool is_not_filter_Set() const;
    bool is_not_filter_Valid() const;

    OAIAttributeFilter_EqualsTo getEqualsTo() const;
    void setEqualsTo(const OAIAttributeFilter_EqualsTo &equals_to);
    bool is_equals_to_Set() const;
    bool is_equals_to_Valid() const;

    OAIAttributeFilter_ContainsAll getContainsAll() const;
    void setContainsAll(const OAIAttributeFilter_ContainsAll &contains_all);
    bool is_contains_all_Set() const;
    bool is_contains_all_Valid() const;

    OAIAttributeFilter_ContainsAny getContainsAny() const;
    void setContainsAny(const OAIAttributeFilter_ContainsAny &contains_any);
    bool is_contains_any_Set() const;
    bool is_contains_any_Valid() const;

    OAIAttributeFilter_GreaterThan getGreaterThan() const;
    void setGreaterThan(const OAIAttributeFilter_GreaterThan &greater_than);
    bool is_greater_than_Set() const;
    bool is_greater_than_Valid() const;

    OAIAttributeFilter_GreaterThanOrEquals getGreaterThanOrEquals() const;
    void setGreaterThanOrEquals(const OAIAttributeFilter_GreaterThanOrEquals &greater_than_or_equals);
    bool is_greater_than_or_equals_Set() const;
    bool is_greater_than_or_equals_Valid() const;

    OAIAttributeFilter_LessThan getLessThan() const;
    void setLessThan(const OAIAttributeFilter_LessThan &less_than);
    bool is_less_than_Set() const;
    bool is_less_than_Valid() const;

    OAIAttributeFilter_LessThanOrEquals getLessThanOrEquals() const;
    void setLessThanOrEquals(const OAIAttributeFilter_LessThanOrEquals &less_than_or_equals);
    bool is_less_than_or_equals_Set() const;
    bool is_less_than_or_equals_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList m_and_all_filters;
    bool m_and_all_filters_isSet;
    bool m_and_all_filters_isValid;

    QList m_or_all_filters;
    bool m_or_all_filters_isSet;
    bool m_or_all_filters_isValid;

    OAIAttributeFilter_NotFilter m_not_filter;
    bool m_not_filter_isSet;
    bool m_not_filter_isValid;

    OAIAttributeFilter_EqualsTo m_equals_to;
    bool m_equals_to_isSet;
    bool m_equals_to_isValid;

    OAIAttributeFilter_ContainsAll m_contains_all;
    bool m_contains_all_isSet;
    bool m_contains_all_isValid;

    OAIAttributeFilter_ContainsAny m_contains_any;
    bool m_contains_any_isSet;
    bool m_contains_any_isValid;

    OAIAttributeFilter_GreaterThan m_greater_than;
    bool m_greater_than_isSet;
    bool m_greater_than_isValid;

    OAIAttributeFilter_GreaterThanOrEquals m_greater_than_or_equals;
    bool m_greater_than_or_equals_isSet;
    bool m_greater_than_or_equals_isValid;

    OAIAttributeFilter_LessThan m_less_than;
    bool m_less_than_isSet;
    bool m_less_than_isValid;

    OAIAttributeFilter_LessThanOrEquals m_less_than_or_equals;
    bool m_less_than_or_equals_isSet;
    bool m_less_than_or_equals_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAttributeFilter)

#endif // OAIAttributeFilter_H
