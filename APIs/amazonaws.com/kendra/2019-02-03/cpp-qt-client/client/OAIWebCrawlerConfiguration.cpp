/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebCrawlerConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWebCrawlerConfiguration::OAIWebCrawlerConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWebCrawlerConfiguration::OAIWebCrawlerConfiguration() {
    this->initializeModel();
}

OAIWebCrawlerConfiguration::~OAIWebCrawlerConfiguration() {}

void OAIWebCrawlerConfiguration::initializeModel() {

    m_urls_isSet = false;
    m_urls_isValid = false;

    m_crawl_depth_isSet = false;
    m_crawl_depth_isValid = false;

    m_max_links_per_page_isSet = false;
    m_max_links_per_page_isValid = false;

    m_max_content_size_per_page_in_mega_bytes_isSet = false;
    m_max_content_size_per_page_in_mega_bytes_isValid = false;

    m_max_urls_per_minute_crawl_rate_isSet = false;
    m_max_urls_per_minute_crawl_rate_isValid = false;

    m_url_inclusion_patterns_isSet = false;
    m_url_inclusion_patterns_isValid = false;

    m_url_exclusion_patterns_isSet = false;
    m_url_exclusion_patterns_isValid = false;

    m_proxy_configuration_isSet = false;
    m_proxy_configuration_isValid = false;

    m_authentication_configuration_isSet = false;
    m_authentication_configuration_isValid = false;
}

void OAIWebCrawlerConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWebCrawlerConfiguration::fromJsonObject(QJsonObject json) {

    m_urls_isValid = ::OpenAPI::fromJsonValue(m_urls, json[QString("Urls")]);
    m_urls_isSet = !json[QString("Urls")].isNull() && m_urls_isValid;

    m_crawl_depth_isValid = ::OpenAPI::fromJsonValue(m_crawl_depth, json[QString("CrawlDepth")]);
    m_crawl_depth_isSet = !json[QString("CrawlDepth")].isNull() && m_crawl_depth_isValid;

    m_max_links_per_page_isValid = ::OpenAPI::fromJsonValue(m_max_links_per_page, json[QString("MaxLinksPerPage")]);
    m_max_links_per_page_isSet = !json[QString("MaxLinksPerPage")].isNull() && m_max_links_per_page_isValid;

    m_max_content_size_per_page_in_mega_bytes_isValid = ::OpenAPI::fromJsonValue(m_max_content_size_per_page_in_mega_bytes, json[QString("MaxContentSizePerPageInMegaBytes")]);
    m_max_content_size_per_page_in_mega_bytes_isSet = !json[QString("MaxContentSizePerPageInMegaBytes")].isNull() && m_max_content_size_per_page_in_mega_bytes_isValid;

    m_max_urls_per_minute_crawl_rate_isValid = ::OpenAPI::fromJsonValue(m_max_urls_per_minute_crawl_rate, json[QString("MaxUrlsPerMinuteCrawlRate")]);
    m_max_urls_per_minute_crawl_rate_isSet = !json[QString("MaxUrlsPerMinuteCrawlRate")].isNull() && m_max_urls_per_minute_crawl_rate_isValid;

    m_url_inclusion_patterns_isValid = ::OpenAPI::fromJsonValue(m_url_inclusion_patterns, json[QString("UrlInclusionPatterns")]);
    m_url_inclusion_patterns_isSet = !json[QString("UrlInclusionPatterns")].isNull() && m_url_inclusion_patterns_isValid;

    m_url_exclusion_patterns_isValid = ::OpenAPI::fromJsonValue(m_url_exclusion_patterns, json[QString("UrlExclusionPatterns")]);
    m_url_exclusion_patterns_isSet = !json[QString("UrlExclusionPatterns")].isNull() && m_url_exclusion_patterns_isValid;

    m_proxy_configuration_isValid = ::OpenAPI::fromJsonValue(m_proxy_configuration, json[QString("ProxyConfiguration")]);
    m_proxy_configuration_isSet = !json[QString("ProxyConfiguration")].isNull() && m_proxy_configuration_isValid;

    m_authentication_configuration_isValid = ::OpenAPI::fromJsonValue(m_authentication_configuration, json[QString("AuthenticationConfiguration")]);
    m_authentication_configuration_isSet = !json[QString("AuthenticationConfiguration")].isNull() && m_authentication_configuration_isValid;
}

QString OAIWebCrawlerConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWebCrawlerConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_urls.isSet()) {
        obj.insert(QString("Urls"), ::OpenAPI::toJsonValue(m_urls));
    }
    if (m_crawl_depth_isSet) {
        obj.insert(QString("CrawlDepth"), ::OpenAPI::toJsonValue(m_crawl_depth));
    }
    if (m_max_links_per_page_isSet) {
        obj.insert(QString("MaxLinksPerPage"), ::OpenAPI::toJsonValue(m_max_links_per_page));
    }
    if (m_max_content_size_per_page_in_mega_bytes_isSet) {
        obj.insert(QString("MaxContentSizePerPageInMegaBytes"), ::OpenAPI::toJsonValue(m_max_content_size_per_page_in_mega_bytes));
    }
    if (m_max_urls_per_minute_crawl_rate_isSet) {
        obj.insert(QString("MaxUrlsPerMinuteCrawlRate"), ::OpenAPI::toJsonValue(m_max_urls_per_minute_crawl_rate));
    }
    if (m_url_inclusion_patterns.isSet()) {
        obj.insert(QString("UrlInclusionPatterns"), ::OpenAPI::toJsonValue(m_url_inclusion_patterns));
    }
    if (m_url_exclusion_patterns.isSet()) {
        obj.insert(QString("UrlExclusionPatterns"), ::OpenAPI::toJsonValue(m_url_exclusion_patterns));
    }
    if (m_proxy_configuration.isSet()) {
        obj.insert(QString("ProxyConfiguration"), ::OpenAPI::toJsonValue(m_proxy_configuration));
    }
    if (m_authentication_configuration.isSet()) {
        obj.insert(QString("AuthenticationConfiguration"), ::OpenAPI::toJsonValue(m_authentication_configuration));
    }
    return obj;
}

OAIWebCrawlerConfiguration_Urls OAIWebCrawlerConfiguration::getUrls() const {
    return m_urls;
}
void OAIWebCrawlerConfiguration::setUrls(const OAIWebCrawlerConfiguration_Urls &urls) {
    m_urls = urls;
    m_urls_isSet = true;
}

bool OAIWebCrawlerConfiguration::is_urls_Set() const{
    return m_urls_isSet;
}

bool OAIWebCrawlerConfiguration::is_urls_Valid() const{
    return m_urls_isValid;
}

qint32 OAIWebCrawlerConfiguration::getCrawlDepth() const {
    return m_crawl_depth;
}
void OAIWebCrawlerConfiguration::setCrawlDepth(const qint32 &crawl_depth) {
    m_crawl_depth = crawl_depth;
    m_crawl_depth_isSet = true;
}

bool OAIWebCrawlerConfiguration::is_crawl_depth_Set() const{
    return m_crawl_depth_isSet;
}

bool OAIWebCrawlerConfiguration::is_crawl_depth_Valid() const{
    return m_crawl_depth_isValid;
}

qint32 OAIWebCrawlerConfiguration::getMaxLinksPerPage() const {
    return m_max_links_per_page;
}
void OAIWebCrawlerConfiguration::setMaxLinksPerPage(const qint32 &max_links_per_page) {
    m_max_links_per_page = max_links_per_page;
    m_max_links_per_page_isSet = true;
}

bool OAIWebCrawlerConfiguration::is_max_links_per_page_Set() const{
    return m_max_links_per_page_isSet;
}

bool OAIWebCrawlerConfiguration::is_max_links_per_page_Valid() const{
    return m_max_links_per_page_isValid;
}

float OAIWebCrawlerConfiguration::getMaxContentSizePerPageInMegaBytes() const {
    return m_max_content_size_per_page_in_mega_bytes;
}
void OAIWebCrawlerConfiguration::setMaxContentSizePerPageInMegaBytes(const float &max_content_size_per_page_in_mega_bytes) {
    m_max_content_size_per_page_in_mega_bytes = max_content_size_per_page_in_mega_bytes;
    m_max_content_size_per_page_in_mega_bytes_isSet = true;
}

bool OAIWebCrawlerConfiguration::is_max_content_size_per_page_in_mega_bytes_Set() const{
    return m_max_content_size_per_page_in_mega_bytes_isSet;
}

bool OAIWebCrawlerConfiguration::is_max_content_size_per_page_in_mega_bytes_Valid() const{
    return m_max_content_size_per_page_in_mega_bytes_isValid;
}

qint32 OAIWebCrawlerConfiguration::getMaxUrlsPerMinuteCrawlRate() const {
    return m_max_urls_per_minute_crawl_rate;
}
void OAIWebCrawlerConfiguration::setMaxUrlsPerMinuteCrawlRate(const qint32 &max_urls_per_minute_crawl_rate) {
    m_max_urls_per_minute_crawl_rate = max_urls_per_minute_crawl_rate;
    m_max_urls_per_minute_crawl_rate_isSet = true;
}

bool OAIWebCrawlerConfiguration::is_max_urls_per_minute_crawl_rate_Set() const{
    return m_max_urls_per_minute_crawl_rate_isSet;
}

bool OAIWebCrawlerConfiguration::is_max_urls_per_minute_crawl_rate_Valid() const{
    return m_max_urls_per_minute_crawl_rate_isValid;
}

QList OAIWebCrawlerConfiguration::getUrlInclusionPatterns() const {
    return m_url_inclusion_patterns;
}
void OAIWebCrawlerConfiguration::setUrlInclusionPatterns(const QList &url_inclusion_patterns) {
    m_url_inclusion_patterns = url_inclusion_patterns;
    m_url_inclusion_patterns_isSet = true;
}

bool OAIWebCrawlerConfiguration::is_url_inclusion_patterns_Set() const{
    return m_url_inclusion_patterns_isSet;
}

bool OAIWebCrawlerConfiguration::is_url_inclusion_patterns_Valid() const{
    return m_url_inclusion_patterns_isValid;
}

QList OAIWebCrawlerConfiguration::getUrlExclusionPatterns() const {
    return m_url_exclusion_patterns;
}
void OAIWebCrawlerConfiguration::setUrlExclusionPatterns(const QList &url_exclusion_patterns) {
    m_url_exclusion_patterns = url_exclusion_patterns;
    m_url_exclusion_patterns_isSet = true;
}

bool OAIWebCrawlerConfiguration::is_url_exclusion_patterns_Set() const{
    return m_url_exclusion_patterns_isSet;
}

bool OAIWebCrawlerConfiguration::is_url_exclusion_patterns_Valid() const{
    return m_url_exclusion_patterns_isValid;
}

OAIWebCrawlerConfiguration_ProxyConfiguration OAIWebCrawlerConfiguration::getProxyConfiguration() const {
    return m_proxy_configuration;
}
void OAIWebCrawlerConfiguration::setProxyConfiguration(const OAIWebCrawlerConfiguration_ProxyConfiguration &proxy_configuration) {
    m_proxy_configuration = proxy_configuration;
    m_proxy_configuration_isSet = true;
}

bool OAIWebCrawlerConfiguration::is_proxy_configuration_Set() const{
    return m_proxy_configuration_isSet;
}

bool OAIWebCrawlerConfiguration::is_proxy_configuration_Valid() const{
    return m_proxy_configuration_isValid;
}

OAIWebCrawlerConfiguration_AuthenticationConfiguration OAIWebCrawlerConfiguration::getAuthenticationConfiguration() const {
    return m_authentication_configuration;
}
void OAIWebCrawlerConfiguration::setAuthenticationConfiguration(const OAIWebCrawlerConfiguration_AuthenticationConfiguration &authentication_configuration) {
    m_authentication_configuration = authentication_configuration;
    m_authentication_configuration_isSet = true;
}

bool OAIWebCrawlerConfiguration::is_authentication_configuration_Set() const{
    return m_authentication_configuration_isSet;
}

bool OAIWebCrawlerConfiguration::is_authentication_configuration_Valid() const{
    return m_authentication_configuration_isValid;
}

bool OAIWebCrawlerConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_urls.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_crawl_depth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_links_per_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_content_size_per_page_in_mega_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_urls_per_minute_crawl_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_inclusion_patterns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_exclusion_patterns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_proxy_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_authentication_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWebCrawlerConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_urls_isValid && true;
}

} // namespace OpenAPI
