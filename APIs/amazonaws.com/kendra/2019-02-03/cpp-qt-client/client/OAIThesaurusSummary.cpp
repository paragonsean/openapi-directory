/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIThesaurusSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIThesaurusSummary::OAIThesaurusSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIThesaurusSummary::OAIThesaurusSummary() {
    this->initializeModel();
}

OAIThesaurusSummary::~OAIThesaurusSummary() {}

void OAIThesaurusSummary::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIThesaurusSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIThesaurusSummary::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("CreatedAt")]);
    m_created_at_isSet = !json[QString("CreatedAt")].isNull() && m_created_at_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("UpdatedAt")]);
    m_updated_at_isSet = !json[QString("UpdatedAt")].isNull() && m_updated_at_isValid;
}

QString OAIThesaurusSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIThesaurusSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("CreatedAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("UpdatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QString OAIThesaurusSummary::getId() const {
    return m_id;
}
void OAIThesaurusSummary::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIThesaurusSummary::is_id_Set() const{
    return m_id_isSet;
}

bool OAIThesaurusSummary::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIThesaurusSummary::getName() const {
    return m_name;
}
void OAIThesaurusSummary::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIThesaurusSummary::is_name_Set() const{
    return m_name_isSet;
}

bool OAIThesaurusSummary::is_name_Valid() const{
    return m_name_isValid;
}

OAIThesaurusStatus OAIThesaurusSummary::getStatus() const {
    return m_status;
}
void OAIThesaurusSummary::setStatus(const OAIThesaurusStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIThesaurusSummary::is_status_Set() const{
    return m_status_isSet;
}

bool OAIThesaurusSummary::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIThesaurusSummary::getCreatedAt() const {
    return m_created_at;
}
void OAIThesaurusSummary::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIThesaurusSummary::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIThesaurusSummary::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAIThesaurusSummary::getUpdatedAt() const {
    return m_updated_at;
}
void OAIThesaurusSummary::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIThesaurusSummary::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIThesaurusSummary::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIThesaurusSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIThesaurusSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
