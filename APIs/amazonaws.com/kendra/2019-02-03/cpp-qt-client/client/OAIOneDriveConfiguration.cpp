/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOneDriveConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOneDriveConfiguration::OAIOneDriveConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOneDriveConfiguration::OAIOneDriveConfiguration() {
    this->initializeModel();
}

OAIOneDriveConfiguration::~OAIOneDriveConfiguration() {}

void OAIOneDriveConfiguration::initializeModel() {

    m_tenant_domain_isSet = false;
    m_tenant_domain_isValid = false;

    m_secret_arn_isSet = false;
    m_secret_arn_isValid = false;

    m_one_drive_users_isSet = false;
    m_one_drive_users_isValid = false;

    m_inclusion_patterns_isSet = false;
    m_inclusion_patterns_isValid = false;

    m_exclusion_patterns_isSet = false;
    m_exclusion_patterns_isValid = false;

    m_field_mappings_isSet = false;
    m_field_mappings_isValid = false;

    m_disable_local_groups_isSet = false;
    m_disable_local_groups_isValid = false;
}

void OAIOneDriveConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOneDriveConfiguration::fromJsonObject(QJsonObject json) {

    m_tenant_domain_isValid = ::OpenAPI::fromJsonValue(m_tenant_domain, json[QString("TenantDomain")]);
    m_tenant_domain_isSet = !json[QString("TenantDomain")].isNull() && m_tenant_domain_isValid;

    m_secret_arn_isValid = ::OpenAPI::fromJsonValue(m_secret_arn, json[QString("SecretArn")]);
    m_secret_arn_isSet = !json[QString("SecretArn")].isNull() && m_secret_arn_isValid;

    m_one_drive_users_isValid = ::OpenAPI::fromJsonValue(m_one_drive_users, json[QString("OneDriveUsers")]);
    m_one_drive_users_isSet = !json[QString("OneDriveUsers")].isNull() && m_one_drive_users_isValid;

    m_inclusion_patterns_isValid = ::OpenAPI::fromJsonValue(m_inclusion_patterns, json[QString("InclusionPatterns")]);
    m_inclusion_patterns_isSet = !json[QString("InclusionPatterns")].isNull() && m_inclusion_patterns_isValid;

    m_exclusion_patterns_isValid = ::OpenAPI::fromJsonValue(m_exclusion_patterns, json[QString("ExclusionPatterns")]);
    m_exclusion_patterns_isSet = !json[QString("ExclusionPatterns")].isNull() && m_exclusion_patterns_isValid;

    m_field_mappings_isValid = ::OpenAPI::fromJsonValue(m_field_mappings, json[QString("FieldMappings")]);
    m_field_mappings_isSet = !json[QString("FieldMappings")].isNull() && m_field_mappings_isValid;

    m_disable_local_groups_isValid = ::OpenAPI::fromJsonValue(m_disable_local_groups, json[QString("DisableLocalGroups")]);
    m_disable_local_groups_isSet = !json[QString("DisableLocalGroups")].isNull() && m_disable_local_groups_isValid;
}

QString OAIOneDriveConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOneDriveConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_tenant_domain_isSet) {
        obj.insert(QString("TenantDomain"), ::OpenAPI::toJsonValue(m_tenant_domain));
    }
    if (m_secret_arn_isSet) {
        obj.insert(QString("SecretArn"), ::OpenAPI::toJsonValue(m_secret_arn));
    }
    if (m_one_drive_users.isSet()) {
        obj.insert(QString("OneDriveUsers"), ::OpenAPI::toJsonValue(m_one_drive_users));
    }
    if (m_inclusion_patterns.isSet()) {
        obj.insert(QString("InclusionPatterns"), ::OpenAPI::toJsonValue(m_inclusion_patterns));
    }
    if (m_exclusion_patterns.isSet()) {
        obj.insert(QString("ExclusionPatterns"), ::OpenAPI::toJsonValue(m_exclusion_patterns));
    }
    if (m_field_mappings.isSet()) {
        obj.insert(QString("FieldMappings"), ::OpenAPI::toJsonValue(m_field_mappings));
    }
    if (m_disable_local_groups_isSet) {
        obj.insert(QString("DisableLocalGroups"), ::OpenAPI::toJsonValue(m_disable_local_groups));
    }
    return obj;
}

QString OAIOneDriveConfiguration::getTenantDomain() const {
    return m_tenant_domain;
}
void OAIOneDriveConfiguration::setTenantDomain(const QString &tenant_domain) {
    m_tenant_domain = tenant_domain;
    m_tenant_domain_isSet = true;
}

bool OAIOneDriveConfiguration::is_tenant_domain_Set() const{
    return m_tenant_domain_isSet;
}

bool OAIOneDriveConfiguration::is_tenant_domain_Valid() const{
    return m_tenant_domain_isValid;
}

QString OAIOneDriveConfiguration::getSecretArn() const {
    return m_secret_arn;
}
void OAIOneDriveConfiguration::setSecretArn(const QString &secret_arn) {
    m_secret_arn = secret_arn;
    m_secret_arn_isSet = true;
}

bool OAIOneDriveConfiguration::is_secret_arn_Set() const{
    return m_secret_arn_isSet;
}

bool OAIOneDriveConfiguration::is_secret_arn_Valid() const{
    return m_secret_arn_isValid;
}

OAIOneDriveConfiguration_OneDriveUsers OAIOneDriveConfiguration::getOneDriveUsers() const {
    return m_one_drive_users;
}
void OAIOneDriveConfiguration::setOneDriveUsers(const OAIOneDriveConfiguration_OneDriveUsers &one_drive_users) {
    m_one_drive_users = one_drive_users;
    m_one_drive_users_isSet = true;
}

bool OAIOneDriveConfiguration::is_one_drive_users_Set() const{
    return m_one_drive_users_isSet;
}

bool OAIOneDriveConfiguration::is_one_drive_users_Valid() const{
    return m_one_drive_users_isValid;
}

QList OAIOneDriveConfiguration::getInclusionPatterns() const {
    return m_inclusion_patterns;
}
void OAIOneDriveConfiguration::setInclusionPatterns(const QList &inclusion_patterns) {
    m_inclusion_patterns = inclusion_patterns;
    m_inclusion_patterns_isSet = true;
}

bool OAIOneDriveConfiguration::is_inclusion_patterns_Set() const{
    return m_inclusion_patterns_isSet;
}

bool OAIOneDriveConfiguration::is_inclusion_patterns_Valid() const{
    return m_inclusion_patterns_isValid;
}

QList OAIOneDriveConfiguration::getExclusionPatterns() const {
    return m_exclusion_patterns;
}
void OAIOneDriveConfiguration::setExclusionPatterns(const QList &exclusion_patterns) {
    m_exclusion_patterns = exclusion_patterns;
    m_exclusion_patterns_isSet = true;
}

bool OAIOneDriveConfiguration::is_exclusion_patterns_Set() const{
    return m_exclusion_patterns_isSet;
}

bool OAIOneDriveConfiguration::is_exclusion_patterns_Valid() const{
    return m_exclusion_patterns_isValid;
}

QList OAIOneDriveConfiguration::getFieldMappings() const {
    return m_field_mappings;
}
void OAIOneDriveConfiguration::setFieldMappings(const QList &field_mappings) {
    m_field_mappings = field_mappings;
    m_field_mappings_isSet = true;
}

bool OAIOneDriveConfiguration::is_field_mappings_Set() const{
    return m_field_mappings_isSet;
}

bool OAIOneDriveConfiguration::is_field_mappings_Valid() const{
    return m_field_mappings_isValid;
}

bool OAIOneDriveConfiguration::getDisableLocalGroups() const {
    return m_disable_local_groups;
}
void OAIOneDriveConfiguration::setDisableLocalGroups(const bool &disable_local_groups) {
    m_disable_local_groups = disable_local_groups;
    m_disable_local_groups_isSet = true;
}

bool OAIOneDriveConfiguration::is_disable_local_groups_Set() const{
    return m_disable_local_groups_isSet;
}

bool OAIOneDriveConfiguration::is_disable_local_groups_Valid() const{
    return m_disable_local_groups_isValid;
}

bool OAIOneDriveConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_tenant_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_one_drive_users.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inclusion_patterns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclusion_patterns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_mappings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_local_groups_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOneDriveConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_tenant_domain_isValid && m_secret_arn_isValid && m_one_drive_users_isValid && true;
}

} // namespace OpenAPI
