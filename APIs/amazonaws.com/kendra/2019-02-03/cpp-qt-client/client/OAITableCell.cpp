/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITableCell.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITableCell::OAITableCell(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITableCell::OAITableCell() {
    this->initializeModel();
}

OAITableCell::~OAITableCell() {}

void OAITableCell::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;

    m_top_answer_isSet = false;
    m_top_answer_isValid = false;

    m_highlighted_isSet = false;
    m_highlighted_isValid = false;

    m_header_isSet = false;
    m_header_isValid = false;
}

void OAITableCell::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITableCell::fromJsonObject(QJsonObject json) {

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;

    m_top_answer_isValid = ::OpenAPI::fromJsonValue(m_top_answer, json[QString("TopAnswer")]);
    m_top_answer_isSet = !json[QString("TopAnswer")].isNull() && m_top_answer_isValid;

    m_highlighted_isValid = ::OpenAPI::fromJsonValue(m_highlighted, json[QString("Highlighted")]);
    m_highlighted_isSet = !json[QString("Highlighted")].isNull() && m_highlighted_isValid;

    m_header_isValid = ::OpenAPI::fromJsonValue(m_header, json[QString("Header")]);
    m_header_isSet = !json[QString("Header")].isNull() && m_header_isValid;
}

QString OAITableCell::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITableCell::asJsonObject() const {
    QJsonObject obj;
    if (m_value_isSet) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_top_answer_isSet) {
        obj.insert(QString("TopAnswer"), ::OpenAPI::toJsonValue(m_top_answer));
    }
    if (m_highlighted_isSet) {
        obj.insert(QString("Highlighted"), ::OpenAPI::toJsonValue(m_highlighted));
    }
    if (m_header_isSet) {
        obj.insert(QString("Header"), ::OpenAPI::toJsonValue(m_header));
    }
    return obj;
}

QString OAITableCell::getValue() const {
    return m_value;
}
void OAITableCell::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAITableCell::is_value_Set() const{
    return m_value_isSet;
}

bool OAITableCell::is_value_Valid() const{
    return m_value_isValid;
}

bool OAITableCell::getTopAnswer() const {
    return m_top_answer;
}
void OAITableCell::setTopAnswer(const bool &top_answer) {
    m_top_answer = top_answer;
    m_top_answer_isSet = true;
}

bool OAITableCell::is_top_answer_Set() const{
    return m_top_answer_isSet;
}

bool OAITableCell::is_top_answer_Valid() const{
    return m_top_answer_isValid;
}

bool OAITableCell::getHighlighted() const {
    return m_highlighted;
}
void OAITableCell::setHighlighted(const bool &highlighted) {
    m_highlighted = highlighted;
    m_highlighted_isSet = true;
}

bool OAITableCell::is_highlighted_Set() const{
    return m_highlighted_isSet;
}

bool OAITableCell::is_highlighted_Valid() const{
    return m_highlighted_isValid;
}

bool OAITableCell::getHeader() const {
    return m_header;
}
void OAITableCell::setHeader(const bool &header) {
    m_header = header;
    m_header_isSet = true;
}

bool OAITableCell::is_header_Set() const{
    return m_header_isSet;
}

bool OAITableCell::is_header_Valid() const{
    return m_header_isValid;
}

bool OAITableCell::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_answer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_highlighted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_header_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITableCell::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
