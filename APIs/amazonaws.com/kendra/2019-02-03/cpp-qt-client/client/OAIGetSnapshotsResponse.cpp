/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetSnapshotsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetSnapshotsResponse::OAIGetSnapshotsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetSnapshotsResponse::OAIGetSnapshotsResponse() {
    this->initializeModel();
}

OAIGetSnapshotsResponse::~OAIGetSnapshotsResponse() {}

void OAIGetSnapshotsResponse::initializeModel() {

    m_snap_shot_time_filter_isSet = false;
    m_snap_shot_time_filter_isValid = false;

    m_snapshots_data_header_isSet = false;
    m_snapshots_data_header_isValid = false;

    m_snapshots_data_isSet = false;
    m_snapshots_data_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIGetSnapshotsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetSnapshotsResponse::fromJsonObject(QJsonObject json) {

    m_snap_shot_time_filter_isValid = ::OpenAPI::fromJsonValue(m_snap_shot_time_filter, json[QString("SnapShotTimeFilter")]);
    m_snap_shot_time_filter_isSet = !json[QString("SnapShotTimeFilter")].isNull() && m_snap_shot_time_filter_isValid;

    m_snapshots_data_header_isValid = ::OpenAPI::fromJsonValue(m_snapshots_data_header, json[QString("SnapshotsDataHeader")]);
    m_snapshots_data_header_isSet = !json[QString("SnapshotsDataHeader")].isNull() && m_snapshots_data_header_isValid;

    m_snapshots_data_isValid = ::OpenAPI::fromJsonValue(m_snapshots_data, json[QString("SnapshotsData")]);
    m_snapshots_data_isSet = !json[QString("SnapshotsData")].isNull() && m_snapshots_data_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIGetSnapshotsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetSnapshotsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_snap_shot_time_filter.isSet()) {
        obj.insert(QString("SnapShotTimeFilter"), ::OpenAPI::toJsonValue(m_snap_shot_time_filter));
    }
    if (m_snapshots_data_header.isSet()) {
        obj.insert(QString("SnapshotsDataHeader"), ::OpenAPI::toJsonValue(m_snapshots_data_header));
    }
    if (m_snapshots_data.isSet()) {
        obj.insert(QString("SnapshotsData"), ::OpenAPI::toJsonValue(m_snapshots_data));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

OAIGetSnapshotsResponse_SnapShotTimeFilter OAIGetSnapshotsResponse::getSnapShotTimeFilter() const {
    return m_snap_shot_time_filter;
}
void OAIGetSnapshotsResponse::setSnapShotTimeFilter(const OAIGetSnapshotsResponse_SnapShotTimeFilter &snap_shot_time_filter) {
    m_snap_shot_time_filter = snap_shot_time_filter;
    m_snap_shot_time_filter_isSet = true;
}

bool OAIGetSnapshotsResponse::is_snap_shot_time_filter_Set() const{
    return m_snap_shot_time_filter_isSet;
}

bool OAIGetSnapshotsResponse::is_snap_shot_time_filter_Valid() const{
    return m_snap_shot_time_filter_isValid;
}

QList OAIGetSnapshotsResponse::getSnapshotsDataHeader() const {
    return m_snapshots_data_header;
}
void OAIGetSnapshotsResponse::setSnapshotsDataHeader(const QList &snapshots_data_header) {
    m_snapshots_data_header = snapshots_data_header;
    m_snapshots_data_header_isSet = true;
}

bool OAIGetSnapshotsResponse::is_snapshots_data_header_Set() const{
    return m_snapshots_data_header_isSet;
}

bool OAIGetSnapshotsResponse::is_snapshots_data_header_Valid() const{
    return m_snapshots_data_header_isValid;
}

QList OAIGetSnapshotsResponse::getSnapshotsData() const {
    return m_snapshots_data;
}
void OAIGetSnapshotsResponse::setSnapshotsData(const QList &snapshots_data) {
    m_snapshots_data = snapshots_data;
    m_snapshots_data_isSet = true;
}

bool OAIGetSnapshotsResponse::is_snapshots_data_Set() const{
    return m_snapshots_data_isSet;
}

bool OAIGetSnapshotsResponse::is_snapshots_data_Valid() const{
    return m_snapshots_data_isValid;
}

QString OAIGetSnapshotsResponse::getNextToken() const {
    return m_next_token;
}
void OAIGetSnapshotsResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIGetSnapshotsResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIGetSnapshotsResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIGetSnapshotsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_snap_shot_time_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshots_data_header.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshots_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetSnapshotsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
