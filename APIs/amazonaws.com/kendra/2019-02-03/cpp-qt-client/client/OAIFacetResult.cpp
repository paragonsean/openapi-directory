/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFacetResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFacetResult::OAIFacetResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFacetResult::OAIFacetResult() {
    this->initializeModel();
}

OAIFacetResult::~OAIFacetResult() {}

void OAIFacetResult::initializeModel() {

    m_document_attribute_key_isSet = false;
    m_document_attribute_key_isValid = false;

    m_document_attribute_value_type_isSet = false;
    m_document_attribute_value_type_isValid = false;

    m_document_attribute_value_count_pairs_isSet = false;
    m_document_attribute_value_count_pairs_isValid = false;
}

void OAIFacetResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFacetResult::fromJsonObject(QJsonObject json) {

    m_document_attribute_key_isValid = ::OpenAPI::fromJsonValue(m_document_attribute_key, json[QString("DocumentAttributeKey")]);
    m_document_attribute_key_isSet = !json[QString("DocumentAttributeKey")].isNull() && m_document_attribute_key_isValid;

    m_document_attribute_value_type_isValid = ::OpenAPI::fromJsonValue(m_document_attribute_value_type, json[QString("DocumentAttributeValueType")]);
    m_document_attribute_value_type_isSet = !json[QString("DocumentAttributeValueType")].isNull() && m_document_attribute_value_type_isValid;

    m_document_attribute_value_count_pairs_isValid = ::OpenAPI::fromJsonValue(m_document_attribute_value_count_pairs, json[QString("DocumentAttributeValueCountPairs")]);
    m_document_attribute_value_count_pairs_isSet = !json[QString("DocumentAttributeValueCountPairs")].isNull() && m_document_attribute_value_count_pairs_isValid;
}

QString OAIFacetResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFacetResult::asJsonObject() const {
    QJsonObject obj;
    if (m_document_attribute_key_isSet) {
        obj.insert(QString("DocumentAttributeKey"), ::OpenAPI::toJsonValue(m_document_attribute_key));
    }
    if (m_document_attribute_value_type.isSet()) {
        obj.insert(QString("DocumentAttributeValueType"), ::OpenAPI::toJsonValue(m_document_attribute_value_type));
    }
    if (m_document_attribute_value_count_pairs.isSet()) {
        obj.insert(QString("DocumentAttributeValueCountPairs"), ::OpenAPI::toJsonValue(m_document_attribute_value_count_pairs));
    }
    return obj;
}

QString OAIFacetResult::getDocumentAttributeKey() const {
    return m_document_attribute_key;
}
void OAIFacetResult::setDocumentAttributeKey(const QString &document_attribute_key) {
    m_document_attribute_key = document_attribute_key;
    m_document_attribute_key_isSet = true;
}

bool OAIFacetResult::is_document_attribute_key_Set() const{
    return m_document_attribute_key_isSet;
}

bool OAIFacetResult::is_document_attribute_key_Valid() const{
    return m_document_attribute_key_isValid;
}

OAIDocumentAttributeValueType OAIFacetResult::getDocumentAttributeValueType() const {
    return m_document_attribute_value_type;
}
void OAIFacetResult::setDocumentAttributeValueType(const OAIDocumentAttributeValueType &document_attribute_value_type) {
    m_document_attribute_value_type = document_attribute_value_type;
    m_document_attribute_value_type_isSet = true;
}

bool OAIFacetResult::is_document_attribute_value_type_Set() const{
    return m_document_attribute_value_type_isSet;
}

bool OAIFacetResult::is_document_attribute_value_type_Valid() const{
    return m_document_attribute_value_type_isValid;
}

QList OAIFacetResult::getDocumentAttributeValueCountPairs() const {
    return m_document_attribute_value_count_pairs;
}
void OAIFacetResult::setDocumentAttributeValueCountPairs(const QList &document_attribute_value_count_pairs) {
    m_document_attribute_value_count_pairs = document_attribute_value_count_pairs;
    m_document_attribute_value_count_pairs_isSet = true;
}

bool OAIFacetResult::is_document_attribute_value_count_pairs_Set() const{
    return m_document_attribute_value_count_pairs_isSet;
}

bool OAIFacetResult::is_document_attribute_value_count_pairs_Valid() const{
    return m_document_attribute_value_count_pairs_isValid;
}

bool OAIFacetResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_document_attribute_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_attribute_value_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_attribute_value_count_pairs.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFacetResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
