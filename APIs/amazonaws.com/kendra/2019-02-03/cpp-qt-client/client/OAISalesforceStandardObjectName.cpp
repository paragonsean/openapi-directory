/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISalesforceStandardObjectName.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISalesforceStandardObjectName::OAISalesforceStandardObjectName(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISalesforceStandardObjectName::OAISalesforceStandardObjectName() {
    this->initializeModel();
}

OAISalesforceStandardObjectName::~OAISalesforceStandardObjectName() {}

void OAISalesforceStandardObjectName::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAISalesforceStandardObjectName::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAISalesforceStandardObjectName::fromJson(QString jsonString) {
    
    if ( jsonString.compare("ACCOUNT", Qt::CaseInsensitive) == 0) {
        m_value = eOAISalesforceStandardObjectName::ACCOUNT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CAMPAIGN", Qt::CaseInsensitive) == 0) {
        m_value = eOAISalesforceStandardObjectName::CAMPAIGN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CASE", Qt::CaseInsensitive) == 0) {
        m_value = eOAISalesforceStandardObjectName::CASE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CONTACT", Qt::CaseInsensitive) == 0) {
        m_value = eOAISalesforceStandardObjectName::CONTACT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CONTRACT", Qt::CaseInsensitive) == 0) {
        m_value = eOAISalesforceStandardObjectName::CONTRACT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DOCUMENT", Qt::CaseInsensitive) == 0) {
        m_value = eOAISalesforceStandardObjectName::DOCUMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GROUP", Qt::CaseInsensitive) == 0) {
        m_value = eOAISalesforceStandardObjectName::GROUP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IDEA", Qt::CaseInsensitive) == 0) {
        m_value = eOAISalesforceStandardObjectName::IDEA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LEAD", Qt::CaseInsensitive) == 0) {
        m_value = eOAISalesforceStandardObjectName::LEAD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OPPORTUNITY", Qt::CaseInsensitive) == 0) {
        m_value = eOAISalesforceStandardObjectName::OPPORTUNITY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PARTNER", Qt::CaseInsensitive) == 0) {
        m_value = eOAISalesforceStandardObjectName::PARTNER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PRICEBOOK", Qt::CaseInsensitive) == 0) {
        m_value = eOAISalesforceStandardObjectName::PRICEBOOK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PRODUCT", Qt::CaseInsensitive) == 0) {
        m_value = eOAISalesforceStandardObjectName::PRODUCT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PROFILE", Qt::CaseInsensitive) == 0) {
        m_value = eOAISalesforceStandardObjectName::PROFILE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SOLUTION", Qt::CaseInsensitive) == 0) {
        m_value = eOAISalesforceStandardObjectName::SOLUTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TASK", Qt::CaseInsensitive) == 0) {
        m_value = eOAISalesforceStandardObjectName::TASK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("USER", Qt::CaseInsensitive) == 0) {
        m_value = eOAISalesforceStandardObjectName::USER;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAISalesforceStandardObjectName::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAISalesforceStandardObjectName::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAISalesforceStandardObjectName::ACCOUNT:
            val = "ACCOUNT";
            break;
        case eOAISalesforceStandardObjectName::CAMPAIGN:
            val = "CAMPAIGN";
            break;
        case eOAISalesforceStandardObjectName::CASE:
            val = "CASE";
            break;
        case eOAISalesforceStandardObjectName::CONTACT:
            val = "CONTACT";
            break;
        case eOAISalesforceStandardObjectName::CONTRACT:
            val = "CONTRACT";
            break;
        case eOAISalesforceStandardObjectName::DOCUMENT:
            val = "DOCUMENT";
            break;
        case eOAISalesforceStandardObjectName::GROUP:
            val = "GROUP";
            break;
        case eOAISalesforceStandardObjectName::IDEA:
            val = "IDEA";
            break;
        case eOAISalesforceStandardObjectName::LEAD:
            val = "LEAD";
            break;
        case eOAISalesforceStandardObjectName::OPPORTUNITY:
            val = "OPPORTUNITY";
            break;
        case eOAISalesforceStandardObjectName::PARTNER:
            val = "PARTNER";
            break;
        case eOAISalesforceStandardObjectName::PRICEBOOK:
            val = "PRICEBOOK";
            break;
        case eOAISalesforceStandardObjectName::PRODUCT:
            val = "PRODUCT";
            break;
        case eOAISalesforceStandardObjectName::PROFILE:
            val = "PROFILE";
            break;
        case eOAISalesforceStandardObjectName::SOLUTION:
            val = "SOLUTION";
            break;
        case eOAISalesforceStandardObjectName::TASK:
            val = "TASK";
            break;
        case eOAISalesforceStandardObjectName::USER:
            val = "USER";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAISalesforceStandardObjectName::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAISalesforceStandardObjectName::eOAISalesforceStandardObjectName OAISalesforceStandardObjectName::getValue() const {
    return m_value;
}

void OAISalesforceStandardObjectName::setValue(const OAISalesforceStandardObjectName::eOAISalesforceStandardObjectName& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAISalesforceStandardObjectName::isSet() const {
    
    return m_value_isSet;
}

bool OAISalesforceStandardObjectName::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
