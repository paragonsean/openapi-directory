/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetSnapshotsResponse.h
 *
 * 
 */

#ifndef OAIGetSnapshotsResponse_H
#define OAIGetSnapshotsResponse_H

#include <QJsonObject>

#include "OAIGetSnapshotsResponse_SnapShotTimeFilter.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGetSnapshotsResponse_SnapShotTimeFilter;

class OAIGetSnapshotsResponse : public OAIObject {
public:
    OAIGetSnapshotsResponse();
    OAIGetSnapshotsResponse(QString json);
    ~OAIGetSnapshotsResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIGetSnapshotsResponse_SnapShotTimeFilter getSnapShotTimeFilter() const;
    void setSnapShotTimeFilter(const OAIGetSnapshotsResponse_SnapShotTimeFilter &snap_shot_time_filter);
    bool is_snap_shot_time_filter_Set() const;
    bool is_snap_shot_time_filter_Valid() const;

    QList getSnapshotsDataHeader() const;
    void setSnapshotsDataHeader(const QList &snapshots_data_header);
    bool is_snapshots_data_header_Set() const;
    bool is_snapshots_data_header_Valid() const;

    QList getSnapshotsData() const;
    void setSnapshotsData(const QList &snapshots_data);
    bool is_snapshots_data_Set() const;
    bool is_snapshots_data_Valid() const;

    QString getNextToken() const;
    void setNextToken(const QString &next_token);
    bool is_next_token_Set() const;
    bool is_next_token_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIGetSnapshotsResponse_SnapShotTimeFilter m_snap_shot_time_filter;
    bool m_snap_shot_time_filter_isSet;
    bool m_snap_shot_time_filter_isValid;

    QList m_snapshots_data_header;
    bool m_snapshots_data_header_isSet;
    bool m_snapshots_data_header_isValid;

    QList m_snapshots_data;
    bool m_snapshots_data_isSet;
    bool m_snapshots_data_isValid;

    QString m_next_token;
    bool m_next_token_isSet;
    bool m_next_token_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetSnapshotsResponse)

#endif // OAIGetSnapshotsResponse_H
