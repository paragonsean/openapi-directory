/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataSourceSyncJob.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataSourceSyncJob::OAIDataSourceSyncJob(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataSourceSyncJob::OAIDataSourceSyncJob() {
    this->initializeModel();
}

OAIDataSourceSyncJob::~OAIDataSourceSyncJob() {}

void OAIDataSourceSyncJob::initializeModel() {

    m_execution_id_isSet = false;
    m_execution_id_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_error_code_isSet = false;
    m_error_code_isValid = false;

    m_data_source_error_code_isSet = false;
    m_data_source_error_code_isValid = false;

    m_metrics_isSet = false;
    m_metrics_isValid = false;
}

void OAIDataSourceSyncJob::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataSourceSyncJob::fromJsonObject(QJsonObject json) {

    m_execution_id_isValid = ::OpenAPI::fromJsonValue(m_execution_id, json[QString("ExecutionId")]);
    m_execution_id_isSet = !json[QString("ExecutionId")].isNull() && m_execution_id_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("EndTime")]);
    m_end_time_isSet = !json[QString("EndTime")].isNull() && m_end_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("ErrorMessage")]);
    m_error_message_isSet = !json[QString("ErrorMessage")].isNull() && m_error_message_isValid;

    m_error_code_isValid = ::OpenAPI::fromJsonValue(m_error_code, json[QString("ErrorCode")]);
    m_error_code_isSet = !json[QString("ErrorCode")].isNull() && m_error_code_isValid;

    m_data_source_error_code_isValid = ::OpenAPI::fromJsonValue(m_data_source_error_code, json[QString("DataSourceErrorCode")]);
    m_data_source_error_code_isSet = !json[QString("DataSourceErrorCode")].isNull() && m_data_source_error_code_isValid;

    m_metrics_isValid = ::OpenAPI::fromJsonValue(m_metrics, json[QString("Metrics")]);
    m_metrics_isSet = !json[QString("Metrics")].isNull() && m_metrics_isValid;
}

QString OAIDataSourceSyncJob::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataSourceSyncJob::asJsonObject() const {
    QJsonObject obj;
    if (m_execution_id_isSet) {
        obj.insert(QString("ExecutionId"), ::OpenAPI::toJsonValue(m_execution_id));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("EndTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("ErrorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_error_code.isSet()) {
        obj.insert(QString("ErrorCode"), ::OpenAPI::toJsonValue(m_error_code));
    }
    if (m_data_source_error_code_isSet) {
        obj.insert(QString("DataSourceErrorCode"), ::OpenAPI::toJsonValue(m_data_source_error_code));
    }
    if (m_metrics.isSet()) {
        obj.insert(QString("Metrics"), ::OpenAPI::toJsonValue(m_metrics));
    }
    return obj;
}

QString OAIDataSourceSyncJob::getExecutionId() const {
    return m_execution_id;
}
void OAIDataSourceSyncJob::setExecutionId(const QString &execution_id) {
    m_execution_id = execution_id;
    m_execution_id_isSet = true;
}

bool OAIDataSourceSyncJob::is_execution_id_Set() const{
    return m_execution_id_isSet;
}

bool OAIDataSourceSyncJob::is_execution_id_Valid() const{
    return m_execution_id_isValid;
}

QDateTime OAIDataSourceSyncJob::getStartTime() const {
    return m_start_time;
}
void OAIDataSourceSyncJob::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIDataSourceSyncJob::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIDataSourceSyncJob::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QDateTime OAIDataSourceSyncJob::getEndTime() const {
    return m_end_time;
}
void OAIDataSourceSyncJob::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIDataSourceSyncJob::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIDataSourceSyncJob::is_end_time_Valid() const{
    return m_end_time_isValid;
}

OAIDataSourceSyncJobStatus OAIDataSourceSyncJob::getStatus() const {
    return m_status;
}
void OAIDataSourceSyncJob::setStatus(const OAIDataSourceSyncJobStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDataSourceSyncJob::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDataSourceSyncJob::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDataSourceSyncJob::getErrorMessage() const {
    return m_error_message;
}
void OAIDataSourceSyncJob::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIDataSourceSyncJob::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIDataSourceSyncJob::is_error_message_Valid() const{
    return m_error_message_isValid;
}

OAIErrorCode OAIDataSourceSyncJob::getErrorCode() const {
    return m_error_code;
}
void OAIDataSourceSyncJob::setErrorCode(const OAIErrorCode &error_code) {
    m_error_code = error_code;
    m_error_code_isSet = true;
}

bool OAIDataSourceSyncJob::is_error_code_Set() const{
    return m_error_code_isSet;
}

bool OAIDataSourceSyncJob::is_error_code_Valid() const{
    return m_error_code_isValid;
}

QString OAIDataSourceSyncJob::getDataSourceErrorCode() const {
    return m_data_source_error_code;
}
void OAIDataSourceSyncJob::setDataSourceErrorCode(const QString &data_source_error_code) {
    m_data_source_error_code = data_source_error_code;
    m_data_source_error_code_isSet = true;
}

bool OAIDataSourceSyncJob::is_data_source_error_code_Set() const{
    return m_data_source_error_code_isSet;
}

bool OAIDataSourceSyncJob::is_data_source_error_code_Valid() const{
    return m_data_source_error_code_isValid;
}

OAIDataSourceSyncJob_Metrics OAIDataSourceSyncJob::getMetrics() const {
    return m_metrics;
}
void OAIDataSourceSyncJob::setMetrics(const OAIDataSourceSyncJob_Metrics &metrics) {
    m_metrics = metrics;
    m_metrics_isSet = true;
}

bool OAIDataSourceSyncJob::is_metrics_Set() const{
    return m_metrics_isSet;
}

bool OAIDataSourceSyncJob::is_metrics_Valid() const{
    return m_metrics_isValid;
}

bool OAIDataSourceSyncJob::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_execution_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_source_error_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataSourceSyncJob::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
