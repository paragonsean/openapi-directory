/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISalesforceStandardObjectConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISalesforceStandardObjectConfiguration::OAISalesforceStandardObjectConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISalesforceStandardObjectConfiguration::OAISalesforceStandardObjectConfiguration() {
    this->initializeModel();
}

OAISalesforceStandardObjectConfiguration::~OAISalesforceStandardObjectConfiguration() {}

void OAISalesforceStandardObjectConfiguration::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_document_data_field_name_isSet = false;
    m_document_data_field_name_isValid = false;

    m_document_title_field_name_isSet = false;
    m_document_title_field_name_isValid = false;

    m_field_mappings_isSet = false;
    m_field_mappings_isValid = false;
}

void OAISalesforceStandardObjectConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISalesforceStandardObjectConfiguration::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_document_data_field_name_isValid = ::OpenAPI::fromJsonValue(m_document_data_field_name, json[QString("DocumentDataFieldName")]);
    m_document_data_field_name_isSet = !json[QString("DocumentDataFieldName")].isNull() && m_document_data_field_name_isValid;

    m_document_title_field_name_isValid = ::OpenAPI::fromJsonValue(m_document_title_field_name, json[QString("DocumentTitleFieldName")]);
    m_document_title_field_name_isSet = !json[QString("DocumentTitleFieldName")].isNull() && m_document_title_field_name_isValid;

    m_field_mappings_isValid = ::OpenAPI::fromJsonValue(m_field_mappings, json[QString("FieldMappings")]);
    m_field_mappings_isSet = !json[QString("FieldMappings")].isNull() && m_field_mappings_isValid;
}

QString OAISalesforceStandardObjectConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISalesforceStandardObjectConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_name.isSet()) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_document_data_field_name_isSet) {
        obj.insert(QString("DocumentDataFieldName"), ::OpenAPI::toJsonValue(m_document_data_field_name));
    }
    if (m_document_title_field_name_isSet) {
        obj.insert(QString("DocumentTitleFieldName"), ::OpenAPI::toJsonValue(m_document_title_field_name));
    }
    if (m_field_mappings.isSet()) {
        obj.insert(QString("FieldMappings"), ::OpenAPI::toJsonValue(m_field_mappings));
    }
    return obj;
}

OAISalesforceStandardObjectName OAISalesforceStandardObjectConfiguration::getName() const {
    return m_name;
}
void OAISalesforceStandardObjectConfiguration::setName(const OAISalesforceStandardObjectName &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISalesforceStandardObjectConfiguration::is_name_Set() const{
    return m_name_isSet;
}

bool OAISalesforceStandardObjectConfiguration::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISalesforceStandardObjectConfiguration::getDocumentDataFieldName() const {
    return m_document_data_field_name;
}
void OAISalesforceStandardObjectConfiguration::setDocumentDataFieldName(const QString &document_data_field_name) {
    m_document_data_field_name = document_data_field_name;
    m_document_data_field_name_isSet = true;
}

bool OAISalesforceStandardObjectConfiguration::is_document_data_field_name_Set() const{
    return m_document_data_field_name_isSet;
}

bool OAISalesforceStandardObjectConfiguration::is_document_data_field_name_Valid() const{
    return m_document_data_field_name_isValid;
}

QString OAISalesforceStandardObjectConfiguration::getDocumentTitleFieldName() const {
    return m_document_title_field_name;
}
void OAISalesforceStandardObjectConfiguration::setDocumentTitleFieldName(const QString &document_title_field_name) {
    m_document_title_field_name = document_title_field_name;
    m_document_title_field_name_isSet = true;
}

bool OAISalesforceStandardObjectConfiguration::is_document_title_field_name_Set() const{
    return m_document_title_field_name_isSet;
}

bool OAISalesforceStandardObjectConfiguration::is_document_title_field_name_Valid() const{
    return m_document_title_field_name_isValid;
}

QList OAISalesforceStandardObjectConfiguration::getFieldMappings() const {
    return m_field_mappings;
}
void OAISalesforceStandardObjectConfiguration::setFieldMappings(const QList &field_mappings) {
    m_field_mappings = field_mappings;
    m_field_mappings_isSet = true;
}

bool OAISalesforceStandardObjectConfiguration::is_field_mappings_Set() const{
    return m_field_mappings_isSet;
}

bool OAISalesforceStandardObjectConfiguration::is_field_mappings_Valid() const{
    return m_field_mappings_isValid;
}

bool OAISalesforceStandardObjectConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_data_field_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_title_field_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_mappings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISalesforceStandardObjectConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_document_data_field_name_isValid && true;
}

} // namespace OpenAPI
