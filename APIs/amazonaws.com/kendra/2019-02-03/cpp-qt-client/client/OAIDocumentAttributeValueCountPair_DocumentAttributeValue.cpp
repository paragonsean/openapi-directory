/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocumentAttributeValueCountPair_DocumentAttributeValue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocumentAttributeValueCountPair_DocumentAttributeValue::OAIDocumentAttributeValueCountPair_DocumentAttributeValue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocumentAttributeValueCountPair_DocumentAttributeValue::OAIDocumentAttributeValueCountPair_DocumentAttributeValue() {
    this->initializeModel();
}

OAIDocumentAttributeValueCountPair_DocumentAttributeValue::~OAIDocumentAttributeValueCountPair_DocumentAttributeValue() {}

void OAIDocumentAttributeValueCountPair_DocumentAttributeValue::initializeModel() {

    m_string_value_isSet = false;
    m_string_value_isValid = false;

    m_string_list_value_isSet = false;
    m_string_list_value_isValid = false;

    m_long_value_isSet = false;
    m_long_value_isValid = false;

    m_date_value_isSet = false;
    m_date_value_isValid = false;
}

void OAIDocumentAttributeValueCountPair_DocumentAttributeValue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocumentAttributeValueCountPair_DocumentAttributeValue::fromJsonObject(QJsonObject json) {

    m_string_value_isValid = ::OpenAPI::fromJsonValue(m_string_value, json[QString("StringValue")]);
    m_string_value_isSet = !json[QString("StringValue")].isNull() && m_string_value_isValid;

    m_string_list_value_isValid = ::OpenAPI::fromJsonValue(m_string_list_value, json[QString("StringListValue")]);
    m_string_list_value_isSet = !json[QString("StringListValue")].isNull() && m_string_list_value_isValid;

    m_long_value_isValid = ::OpenAPI::fromJsonValue(m_long_value, json[QString("LongValue")]);
    m_long_value_isSet = !json[QString("LongValue")].isNull() && m_long_value_isValid;

    m_date_value_isValid = ::OpenAPI::fromJsonValue(m_date_value, json[QString("DateValue")]);
    m_date_value_isSet = !json[QString("DateValue")].isNull() && m_date_value_isValid;
}

QString OAIDocumentAttributeValueCountPair_DocumentAttributeValue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocumentAttributeValueCountPair_DocumentAttributeValue::asJsonObject() const {
    QJsonObject obj;
    if (m_string_value_isSet) {
        obj.insert(QString("StringValue"), ::OpenAPI::toJsonValue(m_string_value));
    }
    if (m_string_list_value.isSet()) {
        obj.insert(QString("StringListValue"), ::OpenAPI::toJsonValue(m_string_list_value));
    }
    if (m_long_value_isSet) {
        obj.insert(QString("LongValue"), ::OpenAPI::toJsonValue(m_long_value));
    }
    if (m_date_value_isSet) {
        obj.insert(QString("DateValue"), ::OpenAPI::toJsonValue(m_date_value));
    }
    return obj;
}

QString OAIDocumentAttributeValueCountPair_DocumentAttributeValue::getStringValue() const {
    return m_string_value;
}
void OAIDocumentAttributeValueCountPair_DocumentAttributeValue::setStringValue(const QString &string_value) {
    m_string_value = string_value;
    m_string_value_isSet = true;
}

bool OAIDocumentAttributeValueCountPair_DocumentAttributeValue::is_string_value_Set() const{
    return m_string_value_isSet;
}

bool OAIDocumentAttributeValueCountPair_DocumentAttributeValue::is_string_value_Valid() const{
    return m_string_value_isValid;
}

QList OAIDocumentAttributeValueCountPair_DocumentAttributeValue::getStringListValue() const {
    return m_string_list_value;
}
void OAIDocumentAttributeValueCountPair_DocumentAttributeValue::setStringListValue(const QList &string_list_value) {
    m_string_list_value = string_list_value;
    m_string_list_value_isSet = true;
}

bool OAIDocumentAttributeValueCountPair_DocumentAttributeValue::is_string_list_value_Set() const{
    return m_string_list_value_isSet;
}

bool OAIDocumentAttributeValueCountPair_DocumentAttributeValue::is_string_list_value_Valid() const{
    return m_string_list_value_isValid;
}

qint32 OAIDocumentAttributeValueCountPair_DocumentAttributeValue::getLongValue() const {
    return m_long_value;
}
void OAIDocumentAttributeValueCountPair_DocumentAttributeValue::setLongValue(const qint32 &long_value) {
    m_long_value = long_value;
    m_long_value_isSet = true;
}

bool OAIDocumentAttributeValueCountPair_DocumentAttributeValue::is_long_value_Set() const{
    return m_long_value_isSet;
}

bool OAIDocumentAttributeValueCountPair_DocumentAttributeValue::is_long_value_Valid() const{
    return m_long_value_isValid;
}

QDateTime OAIDocumentAttributeValueCountPair_DocumentAttributeValue::getDateValue() const {
    return m_date_value;
}
void OAIDocumentAttributeValueCountPair_DocumentAttributeValue::setDateValue(const QDateTime &date_value) {
    m_date_value = date_value;
    m_date_value_isSet = true;
}

bool OAIDocumentAttributeValueCountPair_DocumentAttributeValue::is_date_value_Set() const{
    return m_date_value_isSet;
}

bool OAIDocumentAttributeValueCountPair_DocumentAttributeValue::is_date_value_Valid() const{
    return m_date_value_isValid;
}

bool OAIDocumentAttributeValueCountPair_DocumentAttributeValue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_string_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_string_list_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_long_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocumentAttributeValueCountPair_DocumentAttributeValue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
