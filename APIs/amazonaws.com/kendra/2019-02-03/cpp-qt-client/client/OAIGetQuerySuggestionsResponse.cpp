/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetQuerySuggestionsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetQuerySuggestionsResponse::OAIGetQuerySuggestionsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetQuerySuggestionsResponse::OAIGetQuerySuggestionsResponse() {
    this->initializeModel();
}

OAIGetQuerySuggestionsResponse::~OAIGetQuerySuggestionsResponse() {}

void OAIGetQuerySuggestionsResponse::initializeModel() {

    m_query_suggestions_id_isSet = false;
    m_query_suggestions_id_isValid = false;

    m_suggestions_isSet = false;
    m_suggestions_isValid = false;
}

void OAIGetQuerySuggestionsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetQuerySuggestionsResponse::fromJsonObject(QJsonObject json) {

    m_query_suggestions_id_isValid = ::OpenAPI::fromJsonValue(m_query_suggestions_id, json[QString("QuerySuggestionsId")]);
    m_query_suggestions_id_isSet = !json[QString("QuerySuggestionsId")].isNull() && m_query_suggestions_id_isValid;

    m_suggestions_isValid = ::OpenAPI::fromJsonValue(m_suggestions, json[QString("Suggestions")]);
    m_suggestions_isSet = !json[QString("Suggestions")].isNull() && m_suggestions_isValid;
}

QString OAIGetQuerySuggestionsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetQuerySuggestionsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_query_suggestions_id_isSet) {
        obj.insert(QString("QuerySuggestionsId"), ::OpenAPI::toJsonValue(m_query_suggestions_id));
    }
    if (m_suggestions.isSet()) {
        obj.insert(QString("Suggestions"), ::OpenAPI::toJsonValue(m_suggestions));
    }
    return obj;
}

QString OAIGetQuerySuggestionsResponse::getQuerySuggestionsId() const {
    return m_query_suggestions_id;
}
void OAIGetQuerySuggestionsResponse::setQuerySuggestionsId(const QString &query_suggestions_id) {
    m_query_suggestions_id = query_suggestions_id;
    m_query_suggestions_id_isSet = true;
}

bool OAIGetQuerySuggestionsResponse::is_query_suggestions_id_Set() const{
    return m_query_suggestions_id_isSet;
}

bool OAIGetQuerySuggestionsResponse::is_query_suggestions_id_Valid() const{
    return m_query_suggestions_id_isValid;
}

QList OAIGetQuerySuggestionsResponse::getSuggestions() const {
    return m_suggestions;
}
void OAIGetQuerySuggestionsResponse::setSuggestions(const QList &suggestions) {
    m_suggestions = suggestions;
    m_suggestions_isSet = true;
}

bool OAIGetQuerySuggestionsResponse::is_suggestions_Set() const{
    return m_suggestions_isSet;
}

bool OAIGetQuerySuggestionsResponse::is_suggestions_Valid() const{
    return m_suggestions_isValid;
}

bool OAIGetQuerySuggestionsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_query_suggestions_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suggestions.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetQuerySuggestionsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
