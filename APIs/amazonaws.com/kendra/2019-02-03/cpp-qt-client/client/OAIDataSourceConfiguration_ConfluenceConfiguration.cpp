/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataSourceConfiguration_ConfluenceConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataSourceConfiguration_ConfluenceConfiguration::OAIDataSourceConfiguration_ConfluenceConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataSourceConfiguration_ConfluenceConfiguration::OAIDataSourceConfiguration_ConfluenceConfiguration() {
    this->initializeModel();
}

OAIDataSourceConfiguration_ConfluenceConfiguration::~OAIDataSourceConfiguration_ConfluenceConfiguration() {}

void OAIDataSourceConfiguration_ConfluenceConfiguration::initializeModel() {

    m_server_url_isSet = false;
    m_server_url_isValid = false;

    m_secret_arn_isSet = false;
    m_secret_arn_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_space_configuration_isSet = false;
    m_space_configuration_isValid = false;

    m_page_configuration_isSet = false;
    m_page_configuration_isValid = false;

    m_blog_configuration_isSet = false;
    m_blog_configuration_isValid = false;

    m_attachment_configuration_isSet = false;
    m_attachment_configuration_isValid = false;

    m_vpc_configuration_isSet = false;
    m_vpc_configuration_isValid = false;

    m_inclusion_patterns_isSet = false;
    m_inclusion_patterns_isValid = false;

    m_exclusion_patterns_isSet = false;
    m_exclusion_patterns_isValid = false;

    m_proxy_configuration_isSet = false;
    m_proxy_configuration_isValid = false;

    m_authentication_type_isSet = false;
    m_authentication_type_isValid = false;
}

void OAIDataSourceConfiguration_ConfluenceConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataSourceConfiguration_ConfluenceConfiguration::fromJsonObject(QJsonObject json) {

    m_server_url_isValid = ::OpenAPI::fromJsonValue(m_server_url, json[QString("ServerUrl")]);
    m_server_url_isSet = !json[QString("ServerUrl")].isNull() && m_server_url_isValid;

    m_secret_arn_isValid = ::OpenAPI::fromJsonValue(m_secret_arn, json[QString("SecretArn")]);
    m_secret_arn_isSet = !json[QString("SecretArn")].isNull() && m_secret_arn_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("Version")]);
    m_version_isSet = !json[QString("Version")].isNull() && m_version_isValid;

    m_space_configuration_isValid = ::OpenAPI::fromJsonValue(m_space_configuration, json[QString("SpaceConfiguration")]);
    m_space_configuration_isSet = !json[QString("SpaceConfiguration")].isNull() && m_space_configuration_isValid;

    m_page_configuration_isValid = ::OpenAPI::fromJsonValue(m_page_configuration, json[QString("PageConfiguration")]);
    m_page_configuration_isSet = !json[QString("PageConfiguration")].isNull() && m_page_configuration_isValid;

    m_blog_configuration_isValid = ::OpenAPI::fromJsonValue(m_blog_configuration, json[QString("BlogConfiguration")]);
    m_blog_configuration_isSet = !json[QString("BlogConfiguration")].isNull() && m_blog_configuration_isValid;

    m_attachment_configuration_isValid = ::OpenAPI::fromJsonValue(m_attachment_configuration, json[QString("AttachmentConfiguration")]);
    m_attachment_configuration_isSet = !json[QString("AttachmentConfiguration")].isNull() && m_attachment_configuration_isValid;

    m_vpc_configuration_isValid = ::OpenAPI::fromJsonValue(m_vpc_configuration, json[QString("VpcConfiguration")]);
    m_vpc_configuration_isSet = !json[QString("VpcConfiguration")].isNull() && m_vpc_configuration_isValid;

    m_inclusion_patterns_isValid = ::OpenAPI::fromJsonValue(m_inclusion_patterns, json[QString("InclusionPatterns")]);
    m_inclusion_patterns_isSet = !json[QString("InclusionPatterns")].isNull() && m_inclusion_patterns_isValid;

    m_exclusion_patterns_isValid = ::OpenAPI::fromJsonValue(m_exclusion_patterns, json[QString("ExclusionPatterns")]);
    m_exclusion_patterns_isSet = !json[QString("ExclusionPatterns")].isNull() && m_exclusion_patterns_isValid;

    m_proxy_configuration_isValid = ::OpenAPI::fromJsonValue(m_proxy_configuration, json[QString("ProxyConfiguration")]);
    m_proxy_configuration_isSet = !json[QString("ProxyConfiguration")].isNull() && m_proxy_configuration_isValid;

    m_authentication_type_isValid = ::OpenAPI::fromJsonValue(m_authentication_type, json[QString("AuthenticationType")]);
    m_authentication_type_isSet = !json[QString("AuthenticationType")].isNull() && m_authentication_type_isValid;
}

QString OAIDataSourceConfiguration_ConfluenceConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataSourceConfiguration_ConfluenceConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_server_url_isSet) {
        obj.insert(QString("ServerUrl"), ::OpenAPI::toJsonValue(m_server_url));
    }
    if (m_secret_arn_isSet) {
        obj.insert(QString("SecretArn"), ::OpenAPI::toJsonValue(m_secret_arn));
    }
    if (m_version.isSet()) {
        obj.insert(QString("Version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_space_configuration.isSet()) {
        obj.insert(QString("SpaceConfiguration"), ::OpenAPI::toJsonValue(m_space_configuration));
    }
    if (m_page_configuration.isSet()) {
        obj.insert(QString("PageConfiguration"), ::OpenAPI::toJsonValue(m_page_configuration));
    }
    if (m_blog_configuration.isSet()) {
        obj.insert(QString("BlogConfiguration"), ::OpenAPI::toJsonValue(m_blog_configuration));
    }
    if (m_attachment_configuration.isSet()) {
        obj.insert(QString("AttachmentConfiguration"), ::OpenAPI::toJsonValue(m_attachment_configuration));
    }
    if (m_vpc_configuration.isSet()) {
        obj.insert(QString("VpcConfiguration"), ::OpenAPI::toJsonValue(m_vpc_configuration));
    }
    if (m_inclusion_patterns.isSet()) {
        obj.insert(QString("InclusionPatterns"), ::OpenAPI::toJsonValue(m_inclusion_patterns));
    }
    if (m_exclusion_patterns.isSet()) {
        obj.insert(QString("ExclusionPatterns"), ::OpenAPI::toJsonValue(m_exclusion_patterns));
    }
    if (m_proxy_configuration.isSet()) {
        obj.insert(QString("ProxyConfiguration"), ::OpenAPI::toJsonValue(m_proxy_configuration));
    }
    if (m_authentication_type.isSet()) {
        obj.insert(QString("AuthenticationType"), ::OpenAPI::toJsonValue(m_authentication_type));
    }
    return obj;
}

QString OAIDataSourceConfiguration_ConfluenceConfiguration::getServerUrl() const {
    return m_server_url;
}
void OAIDataSourceConfiguration_ConfluenceConfiguration::setServerUrl(const QString &server_url) {
    m_server_url = server_url;
    m_server_url_isSet = true;
}

bool OAIDataSourceConfiguration_ConfluenceConfiguration::is_server_url_Set() const{
    return m_server_url_isSet;
}

bool OAIDataSourceConfiguration_ConfluenceConfiguration::is_server_url_Valid() const{
    return m_server_url_isValid;
}

QString OAIDataSourceConfiguration_ConfluenceConfiguration::getSecretArn() const {
    return m_secret_arn;
}
void OAIDataSourceConfiguration_ConfluenceConfiguration::setSecretArn(const QString &secret_arn) {
    m_secret_arn = secret_arn;
    m_secret_arn_isSet = true;
}

bool OAIDataSourceConfiguration_ConfluenceConfiguration::is_secret_arn_Set() const{
    return m_secret_arn_isSet;
}

bool OAIDataSourceConfiguration_ConfluenceConfiguration::is_secret_arn_Valid() const{
    return m_secret_arn_isValid;
}

OAIConfluenceVersion OAIDataSourceConfiguration_ConfluenceConfiguration::getVersion() const {
    return m_version;
}
void OAIDataSourceConfiguration_ConfluenceConfiguration::setVersion(const OAIConfluenceVersion &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIDataSourceConfiguration_ConfluenceConfiguration::is_version_Set() const{
    return m_version_isSet;
}

bool OAIDataSourceConfiguration_ConfluenceConfiguration::is_version_Valid() const{
    return m_version_isValid;
}

OAIConfluenceConfiguration_SpaceConfiguration OAIDataSourceConfiguration_ConfluenceConfiguration::getSpaceConfiguration() const {
    return m_space_configuration;
}
void OAIDataSourceConfiguration_ConfluenceConfiguration::setSpaceConfiguration(const OAIConfluenceConfiguration_SpaceConfiguration &space_configuration) {
    m_space_configuration = space_configuration;
    m_space_configuration_isSet = true;
}

bool OAIDataSourceConfiguration_ConfluenceConfiguration::is_space_configuration_Set() const{
    return m_space_configuration_isSet;
}

bool OAIDataSourceConfiguration_ConfluenceConfiguration::is_space_configuration_Valid() const{
    return m_space_configuration_isValid;
}

OAIConfluenceConfiguration_PageConfiguration OAIDataSourceConfiguration_ConfluenceConfiguration::getPageConfiguration() const {
    return m_page_configuration;
}
void OAIDataSourceConfiguration_ConfluenceConfiguration::setPageConfiguration(const OAIConfluenceConfiguration_PageConfiguration &page_configuration) {
    m_page_configuration = page_configuration;
    m_page_configuration_isSet = true;
}

bool OAIDataSourceConfiguration_ConfluenceConfiguration::is_page_configuration_Set() const{
    return m_page_configuration_isSet;
}

bool OAIDataSourceConfiguration_ConfluenceConfiguration::is_page_configuration_Valid() const{
    return m_page_configuration_isValid;
}

OAIConfluenceConfiguration_BlogConfiguration OAIDataSourceConfiguration_ConfluenceConfiguration::getBlogConfiguration() const {
    return m_blog_configuration;
}
void OAIDataSourceConfiguration_ConfluenceConfiguration::setBlogConfiguration(const OAIConfluenceConfiguration_BlogConfiguration &blog_configuration) {
    m_blog_configuration = blog_configuration;
    m_blog_configuration_isSet = true;
}

bool OAIDataSourceConfiguration_ConfluenceConfiguration::is_blog_configuration_Set() const{
    return m_blog_configuration_isSet;
}

bool OAIDataSourceConfiguration_ConfluenceConfiguration::is_blog_configuration_Valid() const{
    return m_blog_configuration_isValid;
}

OAIConfluenceConfiguration_AttachmentConfiguration OAIDataSourceConfiguration_ConfluenceConfiguration::getAttachmentConfiguration() const {
    return m_attachment_configuration;
}
void OAIDataSourceConfiguration_ConfluenceConfiguration::setAttachmentConfiguration(const OAIConfluenceConfiguration_AttachmentConfiguration &attachment_configuration) {
    m_attachment_configuration = attachment_configuration;
    m_attachment_configuration_isSet = true;
}

bool OAIDataSourceConfiguration_ConfluenceConfiguration::is_attachment_configuration_Set() const{
    return m_attachment_configuration_isSet;
}

bool OAIDataSourceConfiguration_ConfluenceConfiguration::is_attachment_configuration_Valid() const{
    return m_attachment_configuration_isValid;
}

OAIConfluenceConfiguration_VpcConfiguration OAIDataSourceConfiguration_ConfluenceConfiguration::getVpcConfiguration() const {
    return m_vpc_configuration;
}
void OAIDataSourceConfiguration_ConfluenceConfiguration::setVpcConfiguration(const OAIConfluenceConfiguration_VpcConfiguration &vpc_configuration) {
    m_vpc_configuration = vpc_configuration;
    m_vpc_configuration_isSet = true;
}

bool OAIDataSourceConfiguration_ConfluenceConfiguration::is_vpc_configuration_Set() const{
    return m_vpc_configuration_isSet;
}

bool OAIDataSourceConfiguration_ConfluenceConfiguration::is_vpc_configuration_Valid() const{
    return m_vpc_configuration_isValid;
}

QList OAIDataSourceConfiguration_ConfluenceConfiguration::getInclusionPatterns() const {
    return m_inclusion_patterns;
}
void OAIDataSourceConfiguration_ConfluenceConfiguration::setInclusionPatterns(const QList &inclusion_patterns) {
    m_inclusion_patterns = inclusion_patterns;
    m_inclusion_patterns_isSet = true;
}

bool OAIDataSourceConfiguration_ConfluenceConfiguration::is_inclusion_patterns_Set() const{
    return m_inclusion_patterns_isSet;
}

bool OAIDataSourceConfiguration_ConfluenceConfiguration::is_inclusion_patterns_Valid() const{
    return m_inclusion_patterns_isValid;
}

QList OAIDataSourceConfiguration_ConfluenceConfiguration::getExclusionPatterns() const {
    return m_exclusion_patterns;
}
void OAIDataSourceConfiguration_ConfluenceConfiguration::setExclusionPatterns(const QList &exclusion_patterns) {
    m_exclusion_patterns = exclusion_patterns;
    m_exclusion_patterns_isSet = true;
}

bool OAIDataSourceConfiguration_ConfluenceConfiguration::is_exclusion_patterns_Set() const{
    return m_exclusion_patterns_isSet;
}

bool OAIDataSourceConfiguration_ConfluenceConfiguration::is_exclusion_patterns_Valid() const{
    return m_exclusion_patterns_isValid;
}

OAIConfluenceConfiguration_ProxyConfiguration OAIDataSourceConfiguration_ConfluenceConfiguration::getProxyConfiguration() const {
    return m_proxy_configuration;
}
void OAIDataSourceConfiguration_ConfluenceConfiguration::setProxyConfiguration(const OAIConfluenceConfiguration_ProxyConfiguration &proxy_configuration) {
    m_proxy_configuration = proxy_configuration;
    m_proxy_configuration_isSet = true;
}

bool OAIDataSourceConfiguration_ConfluenceConfiguration::is_proxy_configuration_Set() const{
    return m_proxy_configuration_isSet;
}

bool OAIDataSourceConfiguration_ConfluenceConfiguration::is_proxy_configuration_Valid() const{
    return m_proxy_configuration_isValid;
}

OAIConfluenceAuthenticationType OAIDataSourceConfiguration_ConfluenceConfiguration::getAuthenticationType() const {
    return m_authentication_type;
}
void OAIDataSourceConfiguration_ConfluenceConfiguration::setAuthenticationType(const OAIConfluenceAuthenticationType &authentication_type) {
    m_authentication_type = authentication_type;
    m_authentication_type_isSet = true;
}

bool OAIDataSourceConfiguration_ConfluenceConfiguration::is_authentication_type_Set() const{
    return m_authentication_type_isSet;
}

bool OAIDataSourceConfiguration_ConfluenceConfiguration::is_authentication_type_Valid() const{
    return m_authentication_type_isValid;
}

bool OAIDataSourceConfiguration_ConfluenceConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_server_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_space_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_blog_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_attachment_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inclusion_patterns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclusion_patterns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_proxy_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_authentication_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataSourceConfiguration_ConfluenceConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_server_url_isValid && m_secret_arn_isValid && m_version_isValid && true;
}

} // namespace OpenAPI
