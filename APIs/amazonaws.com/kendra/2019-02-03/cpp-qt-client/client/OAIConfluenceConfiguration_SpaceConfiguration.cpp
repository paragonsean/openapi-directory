/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfluenceConfiguration_SpaceConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfluenceConfiguration_SpaceConfiguration::OAIConfluenceConfiguration_SpaceConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfluenceConfiguration_SpaceConfiguration::OAIConfluenceConfiguration_SpaceConfiguration() {
    this->initializeModel();
}

OAIConfluenceConfiguration_SpaceConfiguration::~OAIConfluenceConfiguration_SpaceConfiguration() {}

void OAIConfluenceConfiguration_SpaceConfiguration::initializeModel() {

    m_crawl_personal_spaces_isSet = false;
    m_crawl_personal_spaces_isValid = false;

    m_crawl_archived_spaces_isSet = false;
    m_crawl_archived_spaces_isValid = false;

    m_include_spaces_isSet = false;
    m_include_spaces_isValid = false;

    m_exclude_spaces_isSet = false;
    m_exclude_spaces_isValid = false;

    m_space_field_mappings_isSet = false;
    m_space_field_mappings_isValid = false;
}

void OAIConfluenceConfiguration_SpaceConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfluenceConfiguration_SpaceConfiguration::fromJsonObject(QJsonObject json) {

    m_crawl_personal_spaces_isValid = ::OpenAPI::fromJsonValue(m_crawl_personal_spaces, json[QString("CrawlPersonalSpaces")]);
    m_crawl_personal_spaces_isSet = !json[QString("CrawlPersonalSpaces")].isNull() && m_crawl_personal_spaces_isValid;

    m_crawl_archived_spaces_isValid = ::OpenAPI::fromJsonValue(m_crawl_archived_spaces, json[QString("CrawlArchivedSpaces")]);
    m_crawl_archived_spaces_isSet = !json[QString("CrawlArchivedSpaces")].isNull() && m_crawl_archived_spaces_isValid;

    m_include_spaces_isValid = ::OpenAPI::fromJsonValue(m_include_spaces, json[QString("IncludeSpaces")]);
    m_include_spaces_isSet = !json[QString("IncludeSpaces")].isNull() && m_include_spaces_isValid;

    m_exclude_spaces_isValid = ::OpenAPI::fromJsonValue(m_exclude_spaces, json[QString("ExcludeSpaces")]);
    m_exclude_spaces_isSet = !json[QString("ExcludeSpaces")].isNull() && m_exclude_spaces_isValid;

    m_space_field_mappings_isValid = ::OpenAPI::fromJsonValue(m_space_field_mappings, json[QString("SpaceFieldMappings")]);
    m_space_field_mappings_isSet = !json[QString("SpaceFieldMappings")].isNull() && m_space_field_mappings_isValid;
}

QString OAIConfluenceConfiguration_SpaceConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfluenceConfiguration_SpaceConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_crawl_personal_spaces_isSet) {
        obj.insert(QString("CrawlPersonalSpaces"), ::OpenAPI::toJsonValue(m_crawl_personal_spaces));
    }
    if (m_crawl_archived_spaces_isSet) {
        obj.insert(QString("CrawlArchivedSpaces"), ::OpenAPI::toJsonValue(m_crawl_archived_spaces));
    }
    if (m_include_spaces.isSet()) {
        obj.insert(QString("IncludeSpaces"), ::OpenAPI::toJsonValue(m_include_spaces));
    }
    if (m_exclude_spaces.isSet()) {
        obj.insert(QString("ExcludeSpaces"), ::OpenAPI::toJsonValue(m_exclude_spaces));
    }
    if (m_space_field_mappings.isSet()) {
        obj.insert(QString("SpaceFieldMappings"), ::OpenAPI::toJsonValue(m_space_field_mappings));
    }
    return obj;
}

bool OAIConfluenceConfiguration_SpaceConfiguration::getCrawlPersonalSpaces() const {
    return m_crawl_personal_spaces;
}
void OAIConfluenceConfiguration_SpaceConfiguration::setCrawlPersonalSpaces(const bool &crawl_personal_spaces) {
    m_crawl_personal_spaces = crawl_personal_spaces;
    m_crawl_personal_spaces_isSet = true;
}

bool OAIConfluenceConfiguration_SpaceConfiguration::is_crawl_personal_spaces_Set() const{
    return m_crawl_personal_spaces_isSet;
}

bool OAIConfluenceConfiguration_SpaceConfiguration::is_crawl_personal_spaces_Valid() const{
    return m_crawl_personal_spaces_isValid;
}

bool OAIConfluenceConfiguration_SpaceConfiguration::getCrawlArchivedSpaces() const {
    return m_crawl_archived_spaces;
}
void OAIConfluenceConfiguration_SpaceConfiguration::setCrawlArchivedSpaces(const bool &crawl_archived_spaces) {
    m_crawl_archived_spaces = crawl_archived_spaces;
    m_crawl_archived_spaces_isSet = true;
}

bool OAIConfluenceConfiguration_SpaceConfiguration::is_crawl_archived_spaces_Set() const{
    return m_crawl_archived_spaces_isSet;
}

bool OAIConfluenceConfiguration_SpaceConfiguration::is_crawl_archived_spaces_Valid() const{
    return m_crawl_archived_spaces_isValid;
}

QList OAIConfluenceConfiguration_SpaceConfiguration::getIncludeSpaces() const {
    return m_include_spaces;
}
void OAIConfluenceConfiguration_SpaceConfiguration::setIncludeSpaces(const QList &include_spaces) {
    m_include_spaces = include_spaces;
    m_include_spaces_isSet = true;
}

bool OAIConfluenceConfiguration_SpaceConfiguration::is_include_spaces_Set() const{
    return m_include_spaces_isSet;
}

bool OAIConfluenceConfiguration_SpaceConfiguration::is_include_spaces_Valid() const{
    return m_include_spaces_isValid;
}

QList OAIConfluenceConfiguration_SpaceConfiguration::getExcludeSpaces() const {
    return m_exclude_spaces;
}
void OAIConfluenceConfiguration_SpaceConfiguration::setExcludeSpaces(const QList &exclude_spaces) {
    m_exclude_spaces = exclude_spaces;
    m_exclude_spaces_isSet = true;
}

bool OAIConfluenceConfiguration_SpaceConfiguration::is_exclude_spaces_Set() const{
    return m_exclude_spaces_isSet;
}

bool OAIConfluenceConfiguration_SpaceConfiguration::is_exclude_spaces_Valid() const{
    return m_exclude_spaces_isValid;
}

QList OAIConfluenceConfiguration_SpaceConfiguration::getSpaceFieldMappings() const {
    return m_space_field_mappings;
}
void OAIConfluenceConfiguration_SpaceConfiguration::setSpaceFieldMappings(const QList &space_field_mappings) {
    m_space_field_mappings = space_field_mappings;
    m_space_field_mappings_isSet = true;
}

bool OAIConfluenceConfiguration_SpaceConfiguration::is_space_field_mappings_Set() const{
    return m_space_field_mappings_isSet;
}

bool OAIConfluenceConfiguration_SpaceConfiguration::is_space_field_mappings_Valid() const{
    return m_space_field_mappings_isValid;
}

bool OAIConfluenceConfiguration_SpaceConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_crawl_personal_spaces_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crawl_archived_spaces_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_spaces.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclude_spaces.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_space_field_mappings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfluenceConfiguration_SpaceConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
