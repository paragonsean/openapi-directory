/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataSourceConfiguration_S3Configuration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataSourceConfiguration_S3Configuration::OAIDataSourceConfiguration_S3Configuration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataSourceConfiguration_S3Configuration::OAIDataSourceConfiguration_S3Configuration() {
    this->initializeModel();
}

OAIDataSourceConfiguration_S3Configuration::~OAIDataSourceConfiguration_S3Configuration() {}

void OAIDataSourceConfiguration_S3Configuration::initializeModel() {

    m_bucket_name_isSet = false;
    m_bucket_name_isValid = false;

    m_inclusion_prefixes_isSet = false;
    m_inclusion_prefixes_isValid = false;

    m_inclusion_patterns_isSet = false;
    m_inclusion_patterns_isValid = false;

    m_exclusion_patterns_isSet = false;
    m_exclusion_patterns_isValid = false;

    m_documents_metadata_configuration_isSet = false;
    m_documents_metadata_configuration_isValid = false;

    m_access_control_list_configuration_isSet = false;
    m_access_control_list_configuration_isValid = false;
}

void OAIDataSourceConfiguration_S3Configuration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataSourceConfiguration_S3Configuration::fromJsonObject(QJsonObject json) {

    m_bucket_name_isValid = ::OpenAPI::fromJsonValue(m_bucket_name, json[QString("BucketName")]);
    m_bucket_name_isSet = !json[QString("BucketName")].isNull() && m_bucket_name_isValid;

    m_inclusion_prefixes_isValid = ::OpenAPI::fromJsonValue(m_inclusion_prefixes, json[QString("InclusionPrefixes")]);
    m_inclusion_prefixes_isSet = !json[QString("InclusionPrefixes")].isNull() && m_inclusion_prefixes_isValid;

    m_inclusion_patterns_isValid = ::OpenAPI::fromJsonValue(m_inclusion_patterns, json[QString("InclusionPatterns")]);
    m_inclusion_patterns_isSet = !json[QString("InclusionPatterns")].isNull() && m_inclusion_patterns_isValid;

    m_exclusion_patterns_isValid = ::OpenAPI::fromJsonValue(m_exclusion_patterns, json[QString("ExclusionPatterns")]);
    m_exclusion_patterns_isSet = !json[QString("ExclusionPatterns")].isNull() && m_exclusion_patterns_isValid;

    m_documents_metadata_configuration_isValid = ::OpenAPI::fromJsonValue(m_documents_metadata_configuration, json[QString("DocumentsMetadataConfiguration")]);
    m_documents_metadata_configuration_isSet = !json[QString("DocumentsMetadataConfiguration")].isNull() && m_documents_metadata_configuration_isValid;

    m_access_control_list_configuration_isValid = ::OpenAPI::fromJsonValue(m_access_control_list_configuration, json[QString("AccessControlListConfiguration")]);
    m_access_control_list_configuration_isSet = !json[QString("AccessControlListConfiguration")].isNull() && m_access_control_list_configuration_isValid;
}

QString OAIDataSourceConfiguration_S3Configuration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataSourceConfiguration_S3Configuration::asJsonObject() const {
    QJsonObject obj;
    if (m_bucket_name_isSet) {
        obj.insert(QString("BucketName"), ::OpenAPI::toJsonValue(m_bucket_name));
    }
    if (m_inclusion_prefixes.isSet()) {
        obj.insert(QString("InclusionPrefixes"), ::OpenAPI::toJsonValue(m_inclusion_prefixes));
    }
    if (m_inclusion_patterns.isSet()) {
        obj.insert(QString("InclusionPatterns"), ::OpenAPI::toJsonValue(m_inclusion_patterns));
    }
    if (m_exclusion_patterns.isSet()) {
        obj.insert(QString("ExclusionPatterns"), ::OpenAPI::toJsonValue(m_exclusion_patterns));
    }
    if (m_documents_metadata_configuration.isSet()) {
        obj.insert(QString("DocumentsMetadataConfiguration"), ::OpenAPI::toJsonValue(m_documents_metadata_configuration));
    }
    if (m_access_control_list_configuration.isSet()) {
        obj.insert(QString("AccessControlListConfiguration"), ::OpenAPI::toJsonValue(m_access_control_list_configuration));
    }
    return obj;
}

QString OAIDataSourceConfiguration_S3Configuration::getBucketName() const {
    return m_bucket_name;
}
void OAIDataSourceConfiguration_S3Configuration::setBucketName(const QString &bucket_name) {
    m_bucket_name = bucket_name;
    m_bucket_name_isSet = true;
}

bool OAIDataSourceConfiguration_S3Configuration::is_bucket_name_Set() const{
    return m_bucket_name_isSet;
}

bool OAIDataSourceConfiguration_S3Configuration::is_bucket_name_Valid() const{
    return m_bucket_name_isValid;
}

QList OAIDataSourceConfiguration_S3Configuration::getInclusionPrefixes() const {
    return m_inclusion_prefixes;
}
void OAIDataSourceConfiguration_S3Configuration::setInclusionPrefixes(const QList &inclusion_prefixes) {
    m_inclusion_prefixes = inclusion_prefixes;
    m_inclusion_prefixes_isSet = true;
}

bool OAIDataSourceConfiguration_S3Configuration::is_inclusion_prefixes_Set() const{
    return m_inclusion_prefixes_isSet;
}

bool OAIDataSourceConfiguration_S3Configuration::is_inclusion_prefixes_Valid() const{
    return m_inclusion_prefixes_isValid;
}

QList OAIDataSourceConfiguration_S3Configuration::getInclusionPatterns() const {
    return m_inclusion_patterns;
}
void OAIDataSourceConfiguration_S3Configuration::setInclusionPatterns(const QList &inclusion_patterns) {
    m_inclusion_patterns = inclusion_patterns;
    m_inclusion_patterns_isSet = true;
}

bool OAIDataSourceConfiguration_S3Configuration::is_inclusion_patterns_Set() const{
    return m_inclusion_patterns_isSet;
}

bool OAIDataSourceConfiguration_S3Configuration::is_inclusion_patterns_Valid() const{
    return m_inclusion_patterns_isValid;
}

QList OAIDataSourceConfiguration_S3Configuration::getExclusionPatterns() const {
    return m_exclusion_patterns;
}
void OAIDataSourceConfiguration_S3Configuration::setExclusionPatterns(const QList &exclusion_patterns) {
    m_exclusion_patterns = exclusion_patterns;
    m_exclusion_patterns_isSet = true;
}

bool OAIDataSourceConfiguration_S3Configuration::is_exclusion_patterns_Set() const{
    return m_exclusion_patterns_isSet;
}

bool OAIDataSourceConfiguration_S3Configuration::is_exclusion_patterns_Valid() const{
    return m_exclusion_patterns_isValid;
}

OAIDocumentsMetadataConfiguration OAIDataSourceConfiguration_S3Configuration::getDocumentsMetadataConfiguration() const {
    return m_documents_metadata_configuration;
}
void OAIDataSourceConfiguration_S3Configuration::setDocumentsMetadataConfiguration(const OAIDocumentsMetadataConfiguration &documents_metadata_configuration) {
    m_documents_metadata_configuration = documents_metadata_configuration;
    m_documents_metadata_configuration_isSet = true;
}

bool OAIDataSourceConfiguration_S3Configuration::is_documents_metadata_configuration_Set() const{
    return m_documents_metadata_configuration_isSet;
}

bool OAIDataSourceConfiguration_S3Configuration::is_documents_metadata_configuration_Valid() const{
    return m_documents_metadata_configuration_isValid;
}

OAIS3DataSourceConfiguration_AccessControlListConfiguration OAIDataSourceConfiguration_S3Configuration::getAccessControlListConfiguration() const {
    return m_access_control_list_configuration;
}
void OAIDataSourceConfiguration_S3Configuration::setAccessControlListConfiguration(const OAIS3DataSourceConfiguration_AccessControlListConfiguration &access_control_list_configuration) {
    m_access_control_list_configuration = access_control_list_configuration;
    m_access_control_list_configuration_isSet = true;
}

bool OAIDataSourceConfiguration_S3Configuration::is_access_control_list_configuration_Set() const{
    return m_access_control_list_configuration_isSet;
}

bool OAIDataSourceConfiguration_S3Configuration::is_access_control_list_configuration_Valid() const{
    return m_access_control_list_configuration_isValid;
}

bool OAIDataSourceConfiguration_S3Configuration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bucket_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inclusion_prefixes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inclusion_patterns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclusion_patterns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_documents_metadata_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_control_list_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataSourceConfiguration_S3Configuration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bucket_name_isValid && true;
}

} // namespace OpenAPI
