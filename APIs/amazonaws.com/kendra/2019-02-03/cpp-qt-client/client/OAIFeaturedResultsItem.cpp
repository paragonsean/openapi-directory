/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFeaturedResultsItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFeaturedResultsItem::OAIFeaturedResultsItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFeaturedResultsItem::OAIFeaturedResultsItem() {
    this->initializeModel();
}

OAIFeaturedResultsItem::~OAIFeaturedResultsItem() {}

void OAIFeaturedResultsItem::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_additional_attributes_isSet = false;
    m_additional_attributes_isValid = false;

    m_document_id_isSet = false;
    m_document_id_isValid = false;

    m_document_title_isSet = false;
    m_document_title_isValid = false;

    m_document_excerpt_isSet = false;
    m_document_excerpt_isValid = false;

    m_document_uri_isSet = false;
    m_document_uri_isValid = false;

    m_document_attributes_isSet = false;
    m_document_attributes_isValid = false;

    m_feedback_token_isSet = false;
    m_feedback_token_isValid = false;
}

void OAIFeaturedResultsItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFeaturedResultsItem::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_additional_attributes_isValid = ::OpenAPI::fromJsonValue(m_additional_attributes, json[QString("AdditionalAttributes")]);
    m_additional_attributes_isSet = !json[QString("AdditionalAttributes")].isNull() && m_additional_attributes_isValid;

    m_document_id_isValid = ::OpenAPI::fromJsonValue(m_document_id, json[QString("DocumentId")]);
    m_document_id_isSet = !json[QString("DocumentId")].isNull() && m_document_id_isValid;

    m_document_title_isValid = ::OpenAPI::fromJsonValue(m_document_title, json[QString("DocumentTitle")]);
    m_document_title_isSet = !json[QString("DocumentTitle")].isNull() && m_document_title_isValid;

    m_document_excerpt_isValid = ::OpenAPI::fromJsonValue(m_document_excerpt, json[QString("DocumentExcerpt")]);
    m_document_excerpt_isSet = !json[QString("DocumentExcerpt")].isNull() && m_document_excerpt_isValid;

    m_document_uri_isValid = ::OpenAPI::fromJsonValue(m_document_uri, json[QString("DocumentURI")]);
    m_document_uri_isSet = !json[QString("DocumentURI")].isNull() && m_document_uri_isValid;

    m_document_attributes_isValid = ::OpenAPI::fromJsonValue(m_document_attributes, json[QString("DocumentAttributes")]);
    m_document_attributes_isSet = !json[QString("DocumentAttributes")].isNull() && m_document_attributes_isValid;

    m_feedback_token_isValid = ::OpenAPI::fromJsonValue(m_feedback_token, json[QString("FeedbackToken")]);
    m_feedback_token_isSet = !json[QString("FeedbackToken")].isNull() && m_feedback_token_isValid;
}

QString OAIFeaturedResultsItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFeaturedResultsItem::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_additional_attributes.isSet()) {
        obj.insert(QString("AdditionalAttributes"), ::OpenAPI::toJsonValue(m_additional_attributes));
    }
    if (m_document_id_isSet) {
        obj.insert(QString("DocumentId"), ::OpenAPI::toJsonValue(m_document_id));
    }
    if (m_document_title.isSet()) {
        obj.insert(QString("DocumentTitle"), ::OpenAPI::toJsonValue(m_document_title));
    }
    if (m_document_excerpt.isSet()) {
        obj.insert(QString("DocumentExcerpt"), ::OpenAPI::toJsonValue(m_document_excerpt));
    }
    if (m_document_uri_isSet) {
        obj.insert(QString("DocumentURI"), ::OpenAPI::toJsonValue(m_document_uri));
    }
    if (m_document_attributes.isSet()) {
        obj.insert(QString("DocumentAttributes"), ::OpenAPI::toJsonValue(m_document_attributes));
    }
    if (m_feedback_token_isSet) {
        obj.insert(QString("FeedbackToken"), ::OpenAPI::toJsonValue(m_feedback_token));
    }
    return obj;
}

QString OAIFeaturedResultsItem::getId() const {
    return m_id;
}
void OAIFeaturedResultsItem::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIFeaturedResultsItem::is_id_Set() const{
    return m_id_isSet;
}

bool OAIFeaturedResultsItem::is_id_Valid() const{
    return m_id_isValid;
}

OAIQueryResultType OAIFeaturedResultsItem::getType() const {
    return m_type;
}
void OAIFeaturedResultsItem::setType(const OAIQueryResultType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIFeaturedResultsItem::is_type_Set() const{
    return m_type_isSet;
}

bool OAIFeaturedResultsItem::is_type_Valid() const{
    return m_type_isValid;
}

QList OAIFeaturedResultsItem::getAdditionalAttributes() const {
    return m_additional_attributes;
}
void OAIFeaturedResultsItem::setAdditionalAttributes(const QList &additional_attributes) {
    m_additional_attributes = additional_attributes;
    m_additional_attributes_isSet = true;
}

bool OAIFeaturedResultsItem::is_additional_attributes_Set() const{
    return m_additional_attributes_isSet;
}

bool OAIFeaturedResultsItem::is_additional_attributes_Valid() const{
    return m_additional_attributes_isValid;
}

QString OAIFeaturedResultsItem::getDocumentId() const {
    return m_document_id;
}
void OAIFeaturedResultsItem::setDocumentId(const QString &document_id) {
    m_document_id = document_id;
    m_document_id_isSet = true;
}

bool OAIFeaturedResultsItem::is_document_id_Set() const{
    return m_document_id_isSet;
}

bool OAIFeaturedResultsItem::is_document_id_Valid() const{
    return m_document_id_isValid;
}

OAITextWithHighlights OAIFeaturedResultsItem::getDocumentTitle() const {
    return m_document_title;
}
void OAIFeaturedResultsItem::setDocumentTitle(const OAITextWithHighlights &document_title) {
    m_document_title = document_title;
    m_document_title_isSet = true;
}

bool OAIFeaturedResultsItem::is_document_title_Set() const{
    return m_document_title_isSet;
}

bool OAIFeaturedResultsItem::is_document_title_Valid() const{
    return m_document_title_isValid;
}

OAITextWithHighlights OAIFeaturedResultsItem::getDocumentExcerpt() const {
    return m_document_excerpt;
}
void OAIFeaturedResultsItem::setDocumentExcerpt(const OAITextWithHighlights &document_excerpt) {
    m_document_excerpt = document_excerpt;
    m_document_excerpt_isSet = true;
}

bool OAIFeaturedResultsItem::is_document_excerpt_Set() const{
    return m_document_excerpt_isSet;
}

bool OAIFeaturedResultsItem::is_document_excerpt_Valid() const{
    return m_document_excerpt_isValid;
}

QString OAIFeaturedResultsItem::getDocumentUri() const {
    return m_document_uri;
}
void OAIFeaturedResultsItem::setDocumentUri(const QString &document_uri) {
    m_document_uri = document_uri;
    m_document_uri_isSet = true;
}

bool OAIFeaturedResultsItem::is_document_uri_Set() const{
    return m_document_uri_isSet;
}

bool OAIFeaturedResultsItem::is_document_uri_Valid() const{
    return m_document_uri_isValid;
}

QList OAIFeaturedResultsItem::getDocumentAttributes() const {
    return m_document_attributes;
}
void OAIFeaturedResultsItem::setDocumentAttributes(const QList &document_attributes) {
    m_document_attributes = document_attributes;
    m_document_attributes_isSet = true;
}

bool OAIFeaturedResultsItem::is_document_attributes_Set() const{
    return m_document_attributes_isSet;
}

bool OAIFeaturedResultsItem::is_document_attributes_Valid() const{
    return m_document_attributes_isValid;
}

QString OAIFeaturedResultsItem::getFeedbackToken() const {
    return m_feedback_token;
}
void OAIFeaturedResultsItem::setFeedbackToken(const QString &feedback_token) {
    m_feedback_token = feedback_token;
    m_feedback_token_isSet = true;
}

bool OAIFeaturedResultsItem::is_feedback_token_Set() const{
    return m_feedback_token_isSet;
}

bool OAIFeaturedResultsItem::is_feedback_token_Valid() const{
    return m_feedback_token_isValid;
}

bool OAIFeaturedResultsItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_title.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_excerpt.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_feedback_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFeaturedResultsItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
