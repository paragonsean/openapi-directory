/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJiraConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJiraConfiguration::OAIJiraConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJiraConfiguration::OAIJiraConfiguration() {
    this->initializeModel();
}

OAIJiraConfiguration::~OAIJiraConfiguration() {}

void OAIJiraConfiguration::initializeModel() {

    m_jira_account_url_isSet = false;
    m_jira_account_url_isValid = false;

    m_secret_arn_isSet = false;
    m_secret_arn_isValid = false;

    m_use_change_log_isSet = false;
    m_use_change_log_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_issue_type_isSet = false;
    m_issue_type_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_issue_sub_entity_filter_isSet = false;
    m_issue_sub_entity_filter_isValid = false;

    m_attachment_field_mappings_isSet = false;
    m_attachment_field_mappings_isValid = false;

    m_comment_field_mappings_isSet = false;
    m_comment_field_mappings_isValid = false;

    m_issue_field_mappings_isSet = false;
    m_issue_field_mappings_isValid = false;

    m_project_field_mappings_isSet = false;
    m_project_field_mappings_isValid = false;

    m_work_log_field_mappings_isSet = false;
    m_work_log_field_mappings_isValid = false;

    m_inclusion_patterns_isSet = false;
    m_inclusion_patterns_isValid = false;

    m_exclusion_patterns_isSet = false;
    m_exclusion_patterns_isValid = false;

    m_vpc_configuration_isSet = false;
    m_vpc_configuration_isValid = false;
}

void OAIJiraConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJiraConfiguration::fromJsonObject(QJsonObject json) {

    m_jira_account_url_isValid = ::OpenAPI::fromJsonValue(m_jira_account_url, json[QString("JiraAccountUrl")]);
    m_jira_account_url_isSet = !json[QString("JiraAccountUrl")].isNull() && m_jira_account_url_isValid;

    m_secret_arn_isValid = ::OpenAPI::fromJsonValue(m_secret_arn, json[QString("SecretArn")]);
    m_secret_arn_isSet = !json[QString("SecretArn")].isNull() && m_secret_arn_isValid;

    m_use_change_log_isValid = ::OpenAPI::fromJsonValue(m_use_change_log, json[QString("UseChangeLog")]);
    m_use_change_log_isSet = !json[QString("UseChangeLog")].isNull() && m_use_change_log_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("Project")]);
    m_project_isSet = !json[QString("Project")].isNull() && m_project_isValid;

    m_issue_type_isValid = ::OpenAPI::fromJsonValue(m_issue_type, json[QString("IssueType")]);
    m_issue_type_isSet = !json[QString("IssueType")].isNull() && m_issue_type_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_issue_sub_entity_filter_isValid = ::OpenAPI::fromJsonValue(m_issue_sub_entity_filter, json[QString("IssueSubEntityFilter")]);
    m_issue_sub_entity_filter_isSet = !json[QString("IssueSubEntityFilter")].isNull() && m_issue_sub_entity_filter_isValid;

    m_attachment_field_mappings_isValid = ::OpenAPI::fromJsonValue(m_attachment_field_mappings, json[QString("AttachmentFieldMappings")]);
    m_attachment_field_mappings_isSet = !json[QString("AttachmentFieldMappings")].isNull() && m_attachment_field_mappings_isValid;

    m_comment_field_mappings_isValid = ::OpenAPI::fromJsonValue(m_comment_field_mappings, json[QString("CommentFieldMappings")]);
    m_comment_field_mappings_isSet = !json[QString("CommentFieldMappings")].isNull() && m_comment_field_mappings_isValid;

    m_issue_field_mappings_isValid = ::OpenAPI::fromJsonValue(m_issue_field_mappings, json[QString("IssueFieldMappings")]);
    m_issue_field_mappings_isSet = !json[QString("IssueFieldMappings")].isNull() && m_issue_field_mappings_isValid;

    m_project_field_mappings_isValid = ::OpenAPI::fromJsonValue(m_project_field_mappings, json[QString("ProjectFieldMappings")]);
    m_project_field_mappings_isSet = !json[QString("ProjectFieldMappings")].isNull() && m_project_field_mappings_isValid;

    m_work_log_field_mappings_isValid = ::OpenAPI::fromJsonValue(m_work_log_field_mappings, json[QString("WorkLogFieldMappings")]);
    m_work_log_field_mappings_isSet = !json[QString("WorkLogFieldMappings")].isNull() && m_work_log_field_mappings_isValid;

    m_inclusion_patterns_isValid = ::OpenAPI::fromJsonValue(m_inclusion_patterns, json[QString("InclusionPatterns")]);
    m_inclusion_patterns_isSet = !json[QString("InclusionPatterns")].isNull() && m_inclusion_patterns_isValid;

    m_exclusion_patterns_isValid = ::OpenAPI::fromJsonValue(m_exclusion_patterns, json[QString("ExclusionPatterns")]);
    m_exclusion_patterns_isSet = !json[QString("ExclusionPatterns")].isNull() && m_exclusion_patterns_isValid;

    m_vpc_configuration_isValid = ::OpenAPI::fromJsonValue(m_vpc_configuration, json[QString("VpcConfiguration")]);
    m_vpc_configuration_isSet = !json[QString("VpcConfiguration")].isNull() && m_vpc_configuration_isValid;
}

QString OAIJiraConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJiraConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_jira_account_url_isSet) {
        obj.insert(QString("JiraAccountUrl"), ::OpenAPI::toJsonValue(m_jira_account_url));
    }
    if (m_secret_arn_isSet) {
        obj.insert(QString("SecretArn"), ::OpenAPI::toJsonValue(m_secret_arn));
    }
    if (m_use_change_log_isSet) {
        obj.insert(QString("UseChangeLog"), ::OpenAPI::toJsonValue(m_use_change_log));
    }
    if (m_project.isSet()) {
        obj.insert(QString("Project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_issue_type.isSet()) {
        obj.insert(QString("IssueType"), ::OpenAPI::toJsonValue(m_issue_type));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_issue_sub_entity_filter.isSet()) {
        obj.insert(QString("IssueSubEntityFilter"), ::OpenAPI::toJsonValue(m_issue_sub_entity_filter));
    }
    if (m_attachment_field_mappings.isSet()) {
        obj.insert(QString("AttachmentFieldMappings"), ::OpenAPI::toJsonValue(m_attachment_field_mappings));
    }
    if (m_comment_field_mappings.isSet()) {
        obj.insert(QString("CommentFieldMappings"), ::OpenAPI::toJsonValue(m_comment_field_mappings));
    }
    if (m_issue_field_mappings.isSet()) {
        obj.insert(QString("IssueFieldMappings"), ::OpenAPI::toJsonValue(m_issue_field_mappings));
    }
    if (m_project_field_mappings.isSet()) {
        obj.insert(QString("ProjectFieldMappings"), ::OpenAPI::toJsonValue(m_project_field_mappings));
    }
    if (m_work_log_field_mappings.isSet()) {
        obj.insert(QString("WorkLogFieldMappings"), ::OpenAPI::toJsonValue(m_work_log_field_mappings));
    }
    if (m_inclusion_patterns.isSet()) {
        obj.insert(QString("InclusionPatterns"), ::OpenAPI::toJsonValue(m_inclusion_patterns));
    }
    if (m_exclusion_patterns.isSet()) {
        obj.insert(QString("ExclusionPatterns"), ::OpenAPI::toJsonValue(m_exclusion_patterns));
    }
    if (m_vpc_configuration.isSet()) {
        obj.insert(QString("VpcConfiguration"), ::OpenAPI::toJsonValue(m_vpc_configuration));
    }
    return obj;
}

QString OAIJiraConfiguration::getJiraAccountUrl() const {
    return m_jira_account_url;
}
void OAIJiraConfiguration::setJiraAccountUrl(const QString &jira_account_url) {
    m_jira_account_url = jira_account_url;
    m_jira_account_url_isSet = true;
}

bool OAIJiraConfiguration::is_jira_account_url_Set() const{
    return m_jira_account_url_isSet;
}

bool OAIJiraConfiguration::is_jira_account_url_Valid() const{
    return m_jira_account_url_isValid;
}

QString OAIJiraConfiguration::getSecretArn() const {
    return m_secret_arn;
}
void OAIJiraConfiguration::setSecretArn(const QString &secret_arn) {
    m_secret_arn = secret_arn;
    m_secret_arn_isSet = true;
}

bool OAIJiraConfiguration::is_secret_arn_Set() const{
    return m_secret_arn_isSet;
}

bool OAIJiraConfiguration::is_secret_arn_Valid() const{
    return m_secret_arn_isValid;
}

bool OAIJiraConfiguration::getUseChangeLog() const {
    return m_use_change_log;
}
void OAIJiraConfiguration::setUseChangeLog(const bool &use_change_log) {
    m_use_change_log = use_change_log;
    m_use_change_log_isSet = true;
}

bool OAIJiraConfiguration::is_use_change_log_Set() const{
    return m_use_change_log_isSet;
}

bool OAIJiraConfiguration::is_use_change_log_Valid() const{
    return m_use_change_log_isValid;
}

QList OAIJiraConfiguration::getProject() const {
    return m_project;
}
void OAIJiraConfiguration::setProject(const QList &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAIJiraConfiguration::is_project_Set() const{
    return m_project_isSet;
}

bool OAIJiraConfiguration::is_project_Valid() const{
    return m_project_isValid;
}

QList OAIJiraConfiguration::getIssueType() const {
    return m_issue_type;
}
void OAIJiraConfiguration::setIssueType(const QList &issue_type) {
    m_issue_type = issue_type;
    m_issue_type_isSet = true;
}

bool OAIJiraConfiguration::is_issue_type_Set() const{
    return m_issue_type_isSet;
}

bool OAIJiraConfiguration::is_issue_type_Valid() const{
    return m_issue_type_isValid;
}

QList OAIJiraConfiguration::getStatus() const {
    return m_status;
}
void OAIJiraConfiguration::setStatus(const QList &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIJiraConfiguration::is_status_Set() const{
    return m_status_isSet;
}

bool OAIJiraConfiguration::is_status_Valid() const{
    return m_status_isValid;
}

QList OAIJiraConfiguration::getIssueSubEntityFilter() const {
    return m_issue_sub_entity_filter;
}
void OAIJiraConfiguration::setIssueSubEntityFilter(const QList &issue_sub_entity_filter) {
    m_issue_sub_entity_filter = issue_sub_entity_filter;
    m_issue_sub_entity_filter_isSet = true;
}

bool OAIJiraConfiguration::is_issue_sub_entity_filter_Set() const{
    return m_issue_sub_entity_filter_isSet;
}

bool OAIJiraConfiguration::is_issue_sub_entity_filter_Valid() const{
    return m_issue_sub_entity_filter_isValid;
}

QList OAIJiraConfiguration::getAttachmentFieldMappings() const {
    return m_attachment_field_mappings;
}
void OAIJiraConfiguration::setAttachmentFieldMappings(const QList &attachment_field_mappings) {
    m_attachment_field_mappings = attachment_field_mappings;
    m_attachment_field_mappings_isSet = true;
}

bool OAIJiraConfiguration::is_attachment_field_mappings_Set() const{
    return m_attachment_field_mappings_isSet;
}

bool OAIJiraConfiguration::is_attachment_field_mappings_Valid() const{
    return m_attachment_field_mappings_isValid;
}

QList OAIJiraConfiguration::getCommentFieldMappings() const {
    return m_comment_field_mappings;
}
void OAIJiraConfiguration::setCommentFieldMappings(const QList &comment_field_mappings) {
    m_comment_field_mappings = comment_field_mappings;
    m_comment_field_mappings_isSet = true;
}

bool OAIJiraConfiguration::is_comment_field_mappings_Set() const{
    return m_comment_field_mappings_isSet;
}

bool OAIJiraConfiguration::is_comment_field_mappings_Valid() const{
    return m_comment_field_mappings_isValid;
}

QList OAIJiraConfiguration::getIssueFieldMappings() const {
    return m_issue_field_mappings;
}
void OAIJiraConfiguration::setIssueFieldMappings(const QList &issue_field_mappings) {
    m_issue_field_mappings = issue_field_mappings;
    m_issue_field_mappings_isSet = true;
}

bool OAIJiraConfiguration::is_issue_field_mappings_Set() const{
    return m_issue_field_mappings_isSet;
}

bool OAIJiraConfiguration::is_issue_field_mappings_Valid() const{
    return m_issue_field_mappings_isValid;
}

QList OAIJiraConfiguration::getProjectFieldMappings() const {
    return m_project_field_mappings;
}
void OAIJiraConfiguration::setProjectFieldMappings(const QList &project_field_mappings) {
    m_project_field_mappings = project_field_mappings;
    m_project_field_mappings_isSet = true;
}

bool OAIJiraConfiguration::is_project_field_mappings_Set() const{
    return m_project_field_mappings_isSet;
}

bool OAIJiraConfiguration::is_project_field_mappings_Valid() const{
    return m_project_field_mappings_isValid;
}

QList OAIJiraConfiguration::getWorkLogFieldMappings() const {
    return m_work_log_field_mappings;
}
void OAIJiraConfiguration::setWorkLogFieldMappings(const QList &work_log_field_mappings) {
    m_work_log_field_mappings = work_log_field_mappings;
    m_work_log_field_mappings_isSet = true;
}

bool OAIJiraConfiguration::is_work_log_field_mappings_Set() const{
    return m_work_log_field_mappings_isSet;
}

bool OAIJiraConfiguration::is_work_log_field_mappings_Valid() const{
    return m_work_log_field_mappings_isValid;
}

QList OAIJiraConfiguration::getInclusionPatterns() const {
    return m_inclusion_patterns;
}
void OAIJiraConfiguration::setInclusionPatterns(const QList &inclusion_patterns) {
    m_inclusion_patterns = inclusion_patterns;
    m_inclusion_patterns_isSet = true;
}

bool OAIJiraConfiguration::is_inclusion_patterns_Set() const{
    return m_inclusion_patterns_isSet;
}

bool OAIJiraConfiguration::is_inclusion_patterns_Valid() const{
    return m_inclusion_patterns_isValid;
}

QList OAIJiraConfiguration::getExclusionPatterns() const {
    return m_exclusion_patterns;
}
void OAIJiraConfiguration::setExclusionPatterns(const QList &exclusion_patterns) {
    m_exclusion_patterns = exclusion_patterns;
    m_exclusion_patterns_isSet = true;
}

bool OAIJiraConfiguration::is_exclusion_patterns_Set() const{
    return m_exclusion_patterns_isSet;
}

bool OAIJiraConfiguration::is_exclusion_patterns_Valid() const{
    return m_exclusion_patterns_isValid;
}

OAIJiraConfiguration_VpcConfiguration OAIJiraConfiguration::getVpcConfiguration() const {
    return m_vpc_configuration;
}
void OAIJiraConfiguration::setVpcConfiguration(const OAIJiraConfiguration_VpcConfiguration &vpc_configuration) {
    m_vpc_configuration = vpc_configuration;
    m_vpc_configuration_isSet = true;
}

bool OAIJiraConfiguration::is_vpc_configuration_Set() const{
    return m_vpc_configuration_isSet;
}

bool OAIJiraConfiguration::is_vpc_configuration_Valid() const{
    return m_vpc_configuration_isValid;
}

bool OAIJiraConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_jira_account_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_change_log_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_sub_entity_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_attachment_field_mappings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_field_mappings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_field_mappings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_field_mappings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_work_log_field_mappings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inclusion_patterns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclusion_patterns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJiraConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_jira_account_url_isValid && m_secret_arn_isValid && true;
}

} // namespace OpenAPI
