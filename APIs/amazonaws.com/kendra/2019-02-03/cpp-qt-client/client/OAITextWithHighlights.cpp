/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITextWithHighlights.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITextWithHighlights::OAITextWithHighlights(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITextWithHighlights::OAITextWithHighlights() {
    this->initializeModel();
}

OAITextWithHighlights::~OAITextWithHighlights() {}

void OAITextWithHighlights::initializeModel() {

    m_text_isSet = false;
    m_text_isValid = false;

    m_highlights_isSet = false;
    m_highlights_isValid = false;
}

void OAITextWithHighlights::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITextWithHighlights::fromJsonObject(QJsonObject json) {

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("Text")]);
    m_text_isSet = !json[QString("Text")].isNull() && m_text_isValid;

    m_highlights_isValid = ::OpenAPI::fromJsonValue(m_highlights, json[QString("Highlights")]);
    m_highlights_isSet = !json[QString("Highlights")].isNull() && m_highlights_isValid;
}

QString OAITextWithHighlights::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITextWithHighlights::asJsonObject() const {
    QJsonObject obj;
    if (m_text_isSet) {
        obj.insert(QString("Text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_highlights.isSet()) {
        obj.insert(QString("Highlights"), ::OpenAPI::toJsonValue(m_highlights));
    }
    return obj;
}

QString OAITextWithHighlights::getText() const {
    return m_text;
}
void OAITextWithHighlights::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAITextWithHighlights::is_text_Set() const{
    return m_text_isSet;
}

bool OAITextWithHighlights::is_text_Valid() const{
    return m_text_isValid;
}

QList OAITextWithHighlights::getHighlights() const {
    return m_highlights;
}
void OAITextWithHighlights::setHighlights(const QList &highlights) {
    m_highlights = highlights;
    m_highlights_isSet = true;
}

bool OAITextWithHighlights::is_highlights_Set() const{
    return m_highlights_isSet;
}

bool OAITextWithHighlights::is_highlights_Valid() const{
    return m_highlights_isValid;
}

bool OAITextWithHighlights::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_highlights.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITextWithHighlights::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
