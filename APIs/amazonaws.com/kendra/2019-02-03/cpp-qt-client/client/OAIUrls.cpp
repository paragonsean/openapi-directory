/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUrls.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUrls::OAIUrls(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUrls::OAIUrls() {
    this->initializeModel();
}

OAIUrls::~OAIUrls() {}

void OAIUrls::initializeModel() {

    m_seed_url_configuration_isSet = false;
    m_seed_url_configuration_isValid = false;

    m_site_maps_configuration_isSet = false;
    m_site_maps_configuration_isValid = false;
}

void OAIUrls::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUrls::fromJsonObject(QJsonObject json) {

    m_seed_url_configuration_isValid = ::OpenAPI::fromJsonValue(m_seed_url_configuration, json[QString("SeedUrlConfiguration")]);
    m_seed_url_configuration_isSet = !json[QString("SeedUrlConfiguration")].isNull() && m_seed_url_configuration_isValid;

    m_site_maps_configuration_isValid = ::OpenAPI::fromJsonValue(m_site_maps_configuration, json[QString("SiteMapsConfiguration")]);
    m_site_maps_configuration_isSet = !json[QString("SiteMapsConfiguration")].isNull() && m_site_maps_configuration_isValid;
}

QString OAIUrls::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUrls::asJsonObject() const {
    QJsonObject obj;
    if (m_seed_url_configuration.isSet()) {
        obj.insert(QString("SeedUrlConfiguration"), ::OpenAPI::toJsonValue(m_seed_url_configuration));
    }
    if (m_site_maps_configuration.isSet()) {
        obj.insert(QString("SiteMapsConfiguration"), ::OpenAPI::toJsonValue(m_site_maps_configuration));
    }
    return obj;
}

OAIUrls_SeedUrlConfiguration OAIUrls::getSeedUrlConfiguration() const {
    return m_seed_url_configuration;
}
void OAIUrls::setSeedUrlConfiguration(const OAIUrls_SeedUrlConfiguration &seed_url_configuration) {
    m_seed_url_configuration = seed_url_configuration;
    m_seed_url_configuration_isSet = true;
}

bool OAIUrls::is_seed_url_configuration_Set() const{
    return m_seed_url_configuration_isSet;
}

bool OAIUrls::is_seed_url_configuration_Valid() const{
    return m_seed_url_configuration_isValid;
}

OAIUrls_SiteMapsConfiguration OAIUrls::getSiteMapsConfiguration() const {
    return m_site_maps_configuration;
}
void OAIUrls::setSiteMapsConfiguration(const OAIUrls_SiteMapsConfiguration &site_maps_configuration) {
    m_site_maps_configuration = site_maps_configuration;
    m_site_maps_configuration_isSet = true;
}

bool OAIUrls::is_site_maps_configuration_Set() const{
    return m_site_maps_configuration_isSet;
}

bool OAIUrls::is_site_maps_configuration_Valid() const{
    return m_site_maps_configuration_isValid;
}

bool OAIUrls::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_seed_url_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_maps_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUrls::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
