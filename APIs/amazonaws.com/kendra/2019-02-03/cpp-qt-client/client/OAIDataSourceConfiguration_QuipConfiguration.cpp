/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataSourceConfiguration_QuipConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataSourceConfiguration_QuipConfiguration::OAIDataSourceConfiguration_QuipConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataSourceConfiguration_QuipConfiguration::OAIDataSourceConfiguration_QuipConfiguration() {
    this->initializeModel();
}

OAIDataSourceConfiguration_QuipConfiguration::~OAIDataSourceConfiguration_QuipConfiguration() {}

void OAIDataSourceConfiguration_QuipConfiguration::initializeModel() {

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_secret_arn_isSet = false;
    m_secret_arn_isValid = false;

    m_crawl_file_comments_isSet = false;
    m_crawl_file_comments_isValid = false;

    m_crawl_chat_rooms_isSet = false;
    m_crawl_chat_rooms_isValid = false;

    m_crawl_attachments_isSet = false;
    m_crawl_attachments_isValid = false;

    m_folder_ids_isSet = false;
    m_folder_ids_isValid = false;

    m_thread_field_mappings_isSet = false;
    m_thread_field_mappings_isValid = false;

    m_message_field_mappings_isSet = false;
    m_message_field_mappings_isValid = false;

    m_attachment_field_mappings_isSet = false;
    m_attachment_field_mappings_isValid = false;

    m_inclusion_patterns_isSet = false;
    m_inclusion_patterns_isValid = false;

    m_exclusion_patterns_isSet = false;
    m_exclusion_patterns_isValid = false;

    m_vpc_configuration_isSet = false;
    m_vpc_configuration_isValid = false;
}

void OAIDataSourceConfiguration_QuipConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataSourceConfiguration_QuipConfiguration::fromJsonObject(QJsonObject json) {

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("Domain")]);
    m_domain_isSet = !json[QString("Domain")].isNull() && m_domain_isValid;

    m_secret_arn_isValid = ::OpenAPI::fromJsonValue(m_secret_arn, json[QString("SecretArn")]);
    m_secret_arn_isSet = !json[QString("SecretArn")].isNull() && m_secret_arn_isValid;

    m_crawl_file_comments_isValid = ::OpenAPI::fromJsonValue(m_crawl_file_comments, json[QString("CrawlFileComments")]);
    m_crawl_file_comments_isSet = !json[QString("CrawlFileComments")].isNull() && m_crawl_file_comments_isValid;

    m_crawl_chat_rooms_isValid = ::OpenAPI::fromJsonValue(m_crawl_chat_rooms, json[QString("CrawlChatRooms")]);
    m_crawl_chat_rooms_isSet = !json[QString("CrawlChatRooms")].isNull() && m_crawl_chat_rooms_isValid;

    m_crawl_attachments_isValid = ::OpenAPI::fromJsonValue(m_crawl_attachments, json[QString("CrawlAttachments")]);
    m_crawl_attachments_isSet = !json[QString("CrawlAttachments")].isNull() && m_crawl_attachments_isValid;

    m_folder_ids_isValid = ::OpenAPI::fromJsonValue(m_folder_ids, json[QString("FolderIds")]);
    m_folder_ids_isSet = !json[QString("FolderIds")].isNull() && m_folder_ids_isValid;

    m_thread_field_mappings_isValid = ::OpenAPI::fromJsonValue(m_thread_field_mappings, json[QString("ThreadFieldMappings")]);
    m_thread_field_mappings_isSet = !json[QString("ThreadFieldMappings")].isNull() && m_thread_field_mappings_isValid;

    m_message_field_mappings_isValid = ::OpenAPI::fromJsonValue(m_message_field_mappings, json[QString("MessageFieldMappings")]);
    m_message_field_mappings_isSet = !json[QString("MessageFieldMappings")].isNull() && m_message_field_mappings_isValid;

    m_attachment_field_mappings_isValid = ::OpenAPI::fromJsonValue(m_attachment_field_mappings, json[QString("AttachmentFieldMappings")]);
    m_attachment_field_mappings_isSet = !json[QString("AttachmentFieldMappings")].isNull() && m_attachment_field_mappings_isValid;

    m_inclusion_patterns_isValid = ::OpenAPI::fromJsonValue(m_inclusion_patterns, json[QString("InclusionPatterns")]);
    m_inclusion_patterns_isSet = !json[QString("InclusionPatterns")].isNull() && m_inclusion_patterns_isValid;

    m_exclusion_patterns_isValid = ::OpenAPI::fromJsonValue(m_exclusion_patterns, json[QString("ExclusionPatterns")]);
    m_exclusion_patterns_isSet = !json[QString("ExclusionPatterns")].isNull() && m_exclusion_patterns_isValid;

    m_vpc_configuration_isValid = ::OpenAPI::fromJsonValue(m_vpc_configuration, json[QString("VpcConfiguration")]);
    m_vpc_configuration_isSet = !json[QString("VpcConfiguration")].isNull() && m_vpc_configuration_isValid;
}

QString OAIDataSourceConfiguration_QuipConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataSourceConfiguration_QuipConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_isSet) {
        obj.insert(QString("Domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_secret_arn_isSet) {
        obj.insert(QString("SecretArn"), ::OpenAPI::toJsonValue(m_secret_arn));
    }
    if (m_crawl_file_comments_isSet) {
        obj.insert(QString("CrawlFileComments"), ::OpenAPI::toJsonValue(m_crawl_file_comments));
    }
    if (m_crawl_chat_rooms_isSet) {
        obj.insert(QString("CrawlChatRooms"), ::OpenAPI::toJsonValue(m_crawl_chat_rooms));
    }
    if (m_crawl_attachments_isSet) {
        obj.insert(QString("CrawlAttachments"), ::OpenAPI::toJsonValue(m_crawl_attachments));
    }
    if (m_folder_ids.isSet()) {
        obj.insert(QString("FolderIds"), ::OpenAPI::toJsonValue(m_folder_ids));
    }
    if (m_thread_field_mappings.isSet()) {
        obj.insert(QString("ThreadFieldMappings"), ::OpenAPI::toJsonValue(m_thread_field_mappings));
    }
    if (m_message_field_mappings.isSet()) {
        obj.insert(QString("MessageFieldMappings"), ::OpenAPI::toJsonValue(m_message_field_mappings));
    }
    if (m_attachment_field_mappings.isSet()) {
        obj.insert(QString("AttachmentFieldMappings"), ::OpenAPI::toJsonValue(m_attachment_field_mappings));
    }
    if (m_inclusion_patterns.isSet()) {
        obj.insert(QString("InclusionPatterns"), ::OpenAPI::toJsonValue(m_inclusion_patterns));
    }
    if (m_exclusion_patterns.isSet()) {
        obj.insert(QString("ExclusionPatterns"), ::OpenAPI::toJsonValue(m_exclusion_patterns));
    }
    if (m_vpc_configuration.isSet()) {
        obj.insert(QString("VpcConfiguration"), ::OpenAPI::toJsonValue(m_vpc_configuration));
    }
    return obj;
}

QString OAIDataSourceConfiguration_QuipConfiguration::getDomain() const {
    return m_domain;
}
void OAIDataSourceConfiguration_QuipConfiguration::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIDataSourceConfiguration_QuipConfiguration::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIDataSourceConfiguration_QuipConfiguration::is_domain_Valid() const{
    return m_domain_isValid;
}

QString OAIDataSourceConfiguration_QuipConfiguration::getSecretArn() const {
    return m_secret_arn;
}
void OAIDataSourceConfiguration_QuipConfiguration::setSecretArn(const QString &secret_arn) {
    m_secret_arn = secret_arn;
    m_secret_arn_isSet = true;
}

bool OAIDataSourceConfiguration_QuipConfiguration::is_secret_arn_Set() const{
    return m_secret_arn_isSet;
}

bool OAIDataSourceConfiguration_QuipConfiguration::is_secret_arn_Valid() const{
    return m_secret_arn_isValid;
}

bool OAIDataSourceConfiguration_QuipConfiguration::getCrawlFileComments() const {
    return m_crawl_file_comments;
}
void OAIDataSourceConfiguration_QuipConfiguration::setCrawlFileComments(const bool &crawl_file_comments) {
    m_crawl_file_comments = crawl_file_comments;
    m_crawl_file_comments_isSet = true;
}

bool OAIDataSourceConfiguration_QuipConfiguration::is_crawl_file_comments_Set() const{
    return m_crawl_file_comments_isSet;
}

bool OAIDataSourceConfiguration_QuipConfiguration::is_crawl_file_comments_Valid() const{
    return m_crawl_file_comments_isValid;
}

bool OAIDataSourceConfiguration_QuipConfiguration::getCrawlChatRooms() const {
    return m_crawl_chat_rooms;
}
void OAIDataSourceConfiguration_QuipConfiguration::setCrawlChatRooms(const bool &crawl_chat_rooms) {
    m_crawl_chat_rooms = crawl_chat_rooms;
    m_crawl_chat_rooms_isSet = true;
}

bool OAIDataSourceConfiguration_QuipConfiguration::is_crawl_chat_rooms_Set() const{
    return m_crawl_chat_rooms_isSet;
}

bool OAIDataSourceConfiguration_QuipConfiguration::is_crawl_chat_rooms_Valid() const{
    return m_crawl_chat_rooms_isValid;
}

bool OAIDataSourceConfiguration_QuipConfiguration::getCrawlAttachments() const {
    return m_crawl_attachments;
}
void OAIDataSourceConfiguration_QuipConfiguration::setCrawlAttachments(const bool &crawl_attachments) {
    m_crawl_attachments = crawl_attachments;
    m_crawl_attachments_isSet = true;
}

bool OAIDataSourceConfiguration_QuipConfiguration::is_crawl_attachments_Set() const{
    return m_crawl_attachments_isSet;
}

bool OAIDataSourceConfiguration_QuipConfiguration::is_crawl_attachments_Valid() const{
    return m_crawl_attachments_isValid;
}

QList OAIDataSourceConfiguration_QuipConfiguration::getFolderIds() const {
    return m_folder_ids;
}
void OAIDataSourceConfiguration_QuipConfiguration::setFolderIds(const QList &folder_ids) {
    m_folder_ids = folder_ids;
    m_folder_ids_isSet = true;
}

bool OAIDataSourceConfiguration_QuipConfiguration::is_folder_ids_Set() const{
    return m_folder_ids_isSet;
}

bool OAIDataSourceConfiguration_QuipConfiguration::is_folder_ids_Valid() const{
    return m_folder_ids_isValid;
}

QList OAIDataSourceConfiguration_QuipConfiguration::getThreadFieldMappings() const {
    return m_thread_field_mappings;
}
void OAIDataSourceConfiguration_QuipConfiguration::setThreadFieldMappings(const QList &thread_field_mappings) {
    m_thread_field_mappings = thread_field_mappings;
    m_thread_field_mappings_isSet = true;
}

bool OAIDataSourceConfiguration_QuipConfiguration::is_thread_field_mappings_Set() const{
    return m_thread_field_mappings_isSet;
}

bool OAIDataSourceConfiguration_QuipConfiguration::is_thread_field_mappings_Valid() const{
    return m_thread_field_mappings_isValid;
}

QList OAIDataSourceConfiguration_QuipConfiguration::getMessageFieldMappings() const {
    return m_message_field_mappings;
}
void OAIDataSourceConfiguration_QuipConfiguration::setMessageFieldMappings(const QList &message_field_mappings) {
    m_message_field_mappings = message_field_mappings;
    m_message_field_mappings_isSet = true;
}

bool OAIDataSourceConfiguration_QuipConfiguration::is_message_field_mappings_Set() const{
    return m_message_field_mappings_isSet;
}

bool OAIDataSourceConfiguration_QuipConfiguration::is_message_field_mappings_Valid() const{
    return m_message_field_mappings_isValid;
}

QList OAIDataSourceConfiguration_QuipConfiguration::getAttachmentFieldMappings() const {
    return m_attachment_field_mappings;
}
void OAIDataSourceConfiguration_QuipConfiguration::setAttachmentFieldMappings(const QList &attachment_field_mappings) {
    m_attachment_field_mappings = attachment_field_mappings;
    m_attachment_field_mappings_isSet = true;
}

bool OAIDataSourceConfiguration_QuipConfiguration::is_attachment_field_mappings_Set() const{
    return m_attachment_field_mappings_isSet;
}

bool OAIDataSourceConfiguration_QuipConfiguration::is_attachment_field_mappings_Valid() const{
    return m_attachment_field_mappings_isValid;
}

QList OAIDataSourceConfiguration_QuipConfiguration::getInclusionPatterns() const {
    return m_inclusion_patterns;
}
void OAIDataSourceConfiguration_QuipConfiguration::setInclusionPatterns(const QList &inclusion_patterns) {
    m_inclusion_patterns = inclusion_patterns;
    m_inclusion_patterns_isSet = true;
}

bool OAIDataSourceConfiguration_QuipConfiguration::is_inclusion_patterns_Set() const{
    return m_inclusion_patterns_isSet;
}

bool OAIDataSourceConfiguration_QuipConfiguration::is_inclusion_patterns_Valid() const{
    return m_inclusion_patterns_isValid;
}

QList OAIDataSourceConfiguration_QuipConfiguration::getExclusionPatterns() const {
    return m_exclusion_patterns;
}
void OAIDataSourceConfiguration_QuipConfiguration::setExclusionPatterns(const QList &exclusion_patterns) {
    m_exclusion_patterns = exclusion_patterns;
    m_exclusion_patterns_isSet = true;
}

bool OAIDataSourceConfiguration_QuipConfiguration::is_exclusion_patterns_Set() const{
    return m_exclusion_patterns_isSet;
}

bool OAIDataSourceConfiguration_QuipConfiguration::is_exclusion_patterns_Valid() const{
    return m_exclusion_patterns_isValid;
}

OAIQuipConfiguration_VpcConfiguration OAIDataSourceConfiguration_QuipConfiguration::getVpcConfiguration() const {
    return m_vpc_configuration;
}
void OAIDataSourceConfiguration_QuipConfiguration::setVpcConfiguration(const OAIQuipConfiguration_VpcConfiguration &vpc_configuration) {
    m_vpc_configuration = vpc_configuration;
    m_vpc_configuration_isSet = true;
}

bool OAIDataSourceConfiguration_QuipConfiguration::is_vpc_configuration_Set() const{
    return m_vpc_configuration_isSet;
}

bool OAIDataSourceConfiguration_QuipConfiguration::is_vpc_configuration_Valid() const{
    return m_vpc_configuration_isValid;
}

bool OAIDataSourceConfiguration_QuipConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crawl_file_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crawl_chat_rooms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crawl_attachments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_folder_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_thread_field_mappings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_field_mappings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_attachment_field_mappings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inclusion_patterns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclusion_patterns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataSourceConfiguration_QuipConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_domain_isValid && m_secret_arn_isValid && true;
}

} // namespace OpenAPI
