/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryResultItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryResultItem::OAIQueryResultItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryResultItem::OAIQueryResultItem() {
    this->initializeModel();
}

OAIQueryResultItem::~OAIQueryResultItem() {}

void OAIQueryResultItem::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_additional_attributes_isSet = false;
    m_additional_attributes_isValid = false;

    m_document_id_isSet = false;
    m_document_id_isValid = false;

    m_document_title_isSet = false;
    m_document_title_isValid = false;

    m_document_excerpt_isSet = false;
    m_document_excerpt_isValid = false;

    m_document_uri_isSet = false;
    m_document_uri_isValid = false;

    m_document_attributes_isSet = false;
    m_document_attributes_isValid = false;

    m_score_attributes_isSet = false;
    m_score_attributes_isValid = false;

    m_feedback_token_isSet = false;
    m_feedback_token_isValid = false;

    m_table_excerpt_isSet = false;
    m_table_excerpt_isValid = false;
}

void OAIQueryResultItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryResultItem::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("Format")]);
    m_format_isSet = !json[QString("Format")].isNull() && m_format_isValid;

    m_additional_attributes_isValid = ::OpenAPI::fromJsonValue(m_additional_attributes, json[QString("AdditionalAttributes")]);
    m_additional_attributes_isSet = !json[QString("AdditionalAttributes")].isNull() && m_additional_attributes_isValid;

    m_document_id_isValid = ::OpenAPI::fromJsonValue(m_document_id, json[QString("DocumentId")]);
    m_document_id_isSet = !json[QString("DocumentId")].isNull() && m_document_id_isValid;

    m_document_title_isValid = ::OpenAPI::fromJsonValue(m_document_title, json[QString("DocumentTitle")]);
    m_document_title_isSet = !json[QString("DocumentTitle")].isNull() && m_document_title_isValid;

    m_document_excerpt_isValid = ::OpenAPI::fromJsonValue(m_document_excerpt, json[QString("DocumentExcerpt")]);
    m_document_excerpt_isSet = !json[QString("DocumentExcerpt")].isNull() && m_document_excerpt_isValid;

    m_document_uri_isValid = ::OpenAPI::fromJsonValue(m_document_uri, json[QString("DocumentURI")]);
    m_document_uri_isSet = !json[QString("DocumentURI")].isNull() && m_document_uri_isValid;

    m_document_attributes_isValid = ::OpenAPI::fromJsonValue(m_document_attributes, json[QString("DocumentAttributes")]);
    m_document_attributes_isSet = !json[QString("DocumentAttributes")].isNull() && m_document_attributes_isValid;

    m_score_attributes_isValid = ::OpenAPI::fromJsonValue(m_score_attributes, json[QString("ScoreAttributes")]);
    m_score_attributes_isSet = !json[QString("ScoreAttributes")].isNull() && m_score_attributes_isValid;

    m_feedback_token_isValid = ::OpenAPI::fromJsonValue(m_feedback_token, json[QString("FeedbackToken")]);
    m_feedback_token_isSet = !json[QString("FeedbackToken")].isNull() && m_feedback_token_isValid;

    m_table_excerpt_isValid = ::OpenAPI::fromJsonValue(m_table_excerpt, json[QString("TableExcerpt")]);
    m_table_excerpt_isSet = !json[QString("TableExcerpt")].isNull() && m_table_excerpt_isValid;
}

QString OAIQueryResultItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryResultItem::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_format.isSet()) {
        obj.insert(QString("Format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_additional_attributes.isSet()) {
        obj.insert(QString("AdditionalAttributes"), ::OpenAPI::toJsonValue(m_additional_attributes));
    }
    if (m_document_id_isSet) {
        obj.insert(QString("DocumentId"), ::OpenAPI::toJsonValue(m_document_id));
    }
    if (m_document_title.isSet()) {
        obj.insert(QString("DocumentTitle"), ::OpenAPI::toJsonValue(m_document_title));
    }
    if (m_document_excerpt.isSet()) {
        obj.insert(QString("DocumentExcerpt"), ::OpenAPI::toJsonValue(m_document_excerpt));
    }
    if (m_document_uri_isSet) {
        obj.insert(QString("DocumentURI"), ::OpenAPI::toJsonValue(m_document_uri));
    }
    if (m_document_attributes.isSet()) {
        obj.insert(QString("DocumentAttributes"), ::OpenAPI::toJsonValue(m_document_attributes));
    }
    if (m_score_attributes.isSet()) {
        obj.insert(QString("ScoreAttributes"), ::OpenAPI::toJsonValue(m_score_attributes));
    }
    if (m_feedback_token_isSet) {
        obj.insert(QString("FeedbackToken"), ::OpenAPI::toJsonValue(m_feedback_token));
    }
    if (m_table_excerpt.isSet()) {
        obj.insert(QString("TableExcerpt"), ::OpenAPI::toJsonValue(m_table_excerpt));
    }
    return obj;
}

QString OAIQueryResultItem::getId() const {
    return m_id;
}
void OAIQueryResultItem::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIQueryResultItem::is_id_Set() const{
    return m_id_isSet;
}

bool OAIQueryResultItem::is_id_Valid() const{
    return m_id_isValid;
}

OAIQueryResultType OAIQueryResultItem::getType() const {
    return m_type;
}
void OAIQueryResultItem::setType(const OAIQueryResultType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIQueryResultItem::is_type_Set() const{
    return m_type_isSet;
}

bool OAIQueryResultItem::is_type_Valid() const{
    return m_type_isValid;
}

OAIQueryResultFormat OAIQueryResultItem::getFormat() const {
    return m_format;
}
void OAIQueryResultItem::setFormat(const OAIQueryResultFormat &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIQueryResultItem::is_format_Set() const{
    return m_format_isSet;
}

bool OAIQueryResultItem::is_format_Valid() const{
    return m_format_isValid;
}

QList OAIQueryResultItem::getAdditionalAttributes() const {
    return m_additional_attributes;
}
void OAIQueryResultItem::setAdditionalAttributes(const QList &additional_attributes) {
    m_additional_attributes = additional_attributes;
    m_additional_attributes_isSet = true;
}

bool OAIQueryResultItem::is_additional_attributes_Set() const{
    return m_additional_attributes_isSet;
}

bool OAIQueryResultItem::is_additional_attributes_Valid() const{
    return m_additional_attributes_isValid;
}

QString OAIQueryResultItem::getDocumentId() const {
    return m_document_id;
}
void OAIQueryResultItem::setDocumentId(const QString &document_id) {
    m_document_id = document_id;
    m_document_id_isSet = true;
}

bool OAIQueryResultItem::is_document_id_Set() const{
    return m_document_id_isSet;
}

bool OAIQueryResultItem::is_document_id_Valid() const{
    return m_document_id_isValid;
}

OAIQueryResultItem_DocumentTitle OAIQueryResultItem::getDocumentTitle() const {
    return m_document_title;
}
void OAIQueryResultItem::setDocumentTitle(const OAIQueryResultItem_DocumentTitle &document_title) {
    m_document_title = document_title;
    m_document_title_isSet = true;
}

bool OAIQueryResultItem::is_document_title_Set() const{
    return m_document_title_isSet;
}

bool OAIQueryResultItem::is_document_title_Valid() const{
    return m_document_title_isValid;
}

OAIQueryResultItem_DocumentExcerpt OAIQueryResultItem::getDocumentExcerpt() const {
    return m_document_excerpt;
}
void OAIQueryResultItem::setDocumentExcerpt(const OAIQueryResultItem_DocumentExcerpt &document_excerpt) {
    m_document_excerpt = document_excerpt;
    m_document_excerpt_isSet = true;
}

bool OAIQueryResultItem::is_document_excerpt_Set() const{
    return m_document_excerpt_isSet;
}

bool OAIQueryResultItem::is_document_excerpt_Valid() const{
    return m_document_excerpt_isValid;
}

QString OAIQueryResultItem::getDocumentUri() const {
    return m_document_uri;
}
void OAIQueryResultItem::setDocumentUri(const QString &document_uri) {
    m_document_uri = document_uri;
    m_document_uri_isSet = true;
}

bool OAIQueryResultItem::is_document_uri_Set() const{
    return m_document_uri_isSet;
}

bool OAIQueryResultItem::is_document_uri_Valid() const{
    return m_document_uri_isValid;
}

QList OAIQueryResultItem::getDocumentAttributes() const {
    return m_document_attributes;
}
void OAIQueryResultItem::setDocumentAttributes(const QList &document_attributes) {
    m_document_attributes = document_attributes;
    m_document_attributes_isSet = true;
}

bool OAIQueryResultItem::is_document_attributes_Set() const{
    return m_document_attributes_isSet;
}

bool OAIQueryResultItem::is_document_attributes_Valid() const{
    return m_document_attributes_isValid;
}

OAIQueryResultItem_ScoreAttributes OAIQueryResultItem::getScoreAttributes() const {
    return m_score_attributes;
}
void OAIQueryResultItem::setScoreAttributes(const OAIQueryResultItem_ScoreAttributes &score_attributes) {
    m_score_attributes = score_attributes;
    m_score_attributes_isSet = true;
}

bool OAIQueryResultItem::is_score_attributes_Set() const{
    return m_score_attributes_isSet;
}

bool OAIQueryResultItem::is_score_attributes_Valid() const{
    return m_score_attributes_isValid;
}

QString OAIQueryResultItem::getFeedbackToken() const {
    return m_feedback_token;
}
void OAIQueryResultItem::setFeedbackToken(const QString &feedback_token) {
    m_feedback_token = feedback_token;
    m_feedback_token_isSet = true;
}

bool OAIQueryResultItem::is_feedback_token_Set() const{
    return m_feedback_token_isSet;
}

bool OAIQueryResultItem::is_feedback_token_Valid() const{
    return m_feedback_token_isValid;
}

OAIQueryResultItem_TableExcerpt OAIQueryResultItem::getTableExcerpt() const {
    return m_table_excerpt;
}
void OAIQueryResultItem::setTableExcerpt(const OAIQueryResultItem_TableExcerpt &table_excerpt) {
    m_table_excerpt = table_excerpt;
    m_table_excerpt_isSet = true;
}

bool OAIQueryResultItem::is_table_excerpt_Set() const{
    return m_table_excerpt_isSet;
}

bool OAIQueryResultItem::is_table_excerpt_Valid() const{
    return m_table_excerpt_isValid;
}

bool OAIQueryResultItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_title.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_excerpt.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_feedback_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_excerpt.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryResultItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
