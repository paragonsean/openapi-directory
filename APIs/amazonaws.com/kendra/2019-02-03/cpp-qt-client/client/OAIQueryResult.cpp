/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryResult::OAIQueryResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryResult::OAIQueryResult() {
    this->initializeModel();
}

OAIQueryResult::~OAIQueryResult() {}

void OAIQueryResult::initializeModel() {

    m_query_id_isSet = false;
    m_query_id_isValid = false;

    m_result_items_isSet = false;
    m_result_items_isValid = false;

    m_facet_results_isSet = false;
    m_facet_results_isValid = false;

    m_total_number_of_results_isSet = false;
    m_total_number_of_results_isValid = false;

    m_warnings_isSet = false;
    m_warnings_isValid = false;

    m_spell_corrected_queries_isSet = false;
    m_spell_corrected_queries_isValid = false;

    m_featured_results_items_isSet = false;
    m_featured_results_items_isValid = false;
}

void OAIQueryResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryResult::fromJsonObject(QJsonObject json) {

    m_query_id_isValid = ::OpenAPI::fromJsonValue(m_query_id, json[QString("QueryId")]);
    m_query_id_isSet = !json[QString("QueryId")].isNull() && m_query_id_isValid;

    m_result_items_isValid = ::OpenAPI::fromJsonValue(m_result_items, json[QString("ResultItems")]);
    m_result_items_isSet = !json[QString("ResultItems")].isNull() && m_result_items_isValid;

    m_facet_results_isValid = ::OpenAPI::fromJsonValue(m_facet_results, json[QString("FacetResults")]);
    m_facet_results_isSet = !json[QString("FacetResults")].isNull() && m_facet_results_isValid;

    m_total_number_of_results_isValid = ::OpenAPI::fromJsonValue(m_total_number_of_results, json[QString("TotalNumberOfResults")]);
    m_total_number_of_results_isSet = !json[QString("TotalNumberOfResults")].isNull() && m_total_number_of_results_isValid;

    m_warnings_isValid = ::OpenAPI::fromJsonValue(m_warnings, json[QString("Warnings")]);
    m_warnings_isSet = !json[QString("Warnings")].isNull() && m_warnings_isValid;

    m_spell_corrected_queries_isValid = ::OpenAPI::fromJsonValue(m_spell_corrected_queries, json[QString("SpellCorrectedQueries")]);
    m_spell_corrected_queries_isSet = !json[QString("SpellCorrectedQueries")].isNull() && m_spell_corrected_queries_isValid;

    m_featured_results_items_isValid = ::OpenAPI::fromJsonValue(m_featured_results_items, json[QString("FeaturedResultsItems")]);
    m_featured_results_items_isSet = !json[QString("FeaturedResultsItems")].isNull() && m_featured_results_items_isValid;
}

QString OAIQueryResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryResult::asJsonObject() const {
    QJsonObject obj;
    if (m_query_id_isSet) {
        obj.insert(QString("QueryId"), ::OpenAPI::toJsonValue(m_query_id));
    }
    if (m_result_items.isSet()) {
        obj.insert(QString("ResultItems"), ::OpenAPI::toJsonValue(m_result_items));
    }
    if (m_facet_results.isSet()) {
        obj.insert(QString("FacetResults"), ::OpenAPI::toJsonValue(m_facet_results));
    }
    if (m_total_number_of_results_isSet) {
        obj.insert(QString("TotalNumberOfResults"), ::OpenAPI::toJsonValue(m_total_number_of_results));
    }
    if (m_warnings.isSet()) {
        obj.insert(QString("Warnings"), ::OpenAPI::toJsonValue(m_warnings));
    }
    if (m_spell_corrected_queries.isSet()) {
        obj.insert(QString("SpellCorrectedQueries"), ::OpenAPI::toJsonValue(m_spell_corrected_queries));
    }
    if (m_featured_results_items.isSet()) {
        obj.insert(QString("FeaturedResultsItems"), ::OpenAPI::toJsonValue(m_featured_results_items));
    }
    return obj;
}

QString OAIQueryResult::getQueryId() const {
    return m_query_id;
}
void OAIQueryResult::setQueryId(const QString &query_id) {
    m_query_id = query_id;
    m_query_id_isSet = true;
}

bool OAIQueryResult::is_query_id_Set() const{
    return m_query_id_isSet;
}

bool OAIQueryResult::is_query_id_Valid() const{
    return m_query_id_isValid;
}

QList OAIQueryResult::getResultItems() const {
    return m_result_items;
}
void OAIQueryResult::setResultItems(const QList &result_items) {
    m_result_items = result_items;
    m_result_items_isSet = true;
}

bool OAIQueryResult::is_result_items_Set() const{
    return m_result_items_isSet;
}

bool OAIQueryResult::is_result_items_Valid() const{
    return m_result_items_isValid;
}

QList OAIQueryResult::getFacetResults() const {
    return m_facet_results;
}
void OAIQueryResult::setFacetResults(const QList &facet_results) {
    m_facet_results = facet_results;
    m_facet_results_isSet = true;
}

bool OAIQueryResult::is_facet_results_Set() const{
    return m_facet_results_isSet;
}

bool OAIQueryResult::is_facet_results_Valid() const{
    return m_facet_results_isValid;
}

qint32 OAIQueryResult::getTotalNumberOfResults() const {
    return m_total_number_of_results;
}
void OAIQueryResult::setTotalNumberOfResults(const qint32 &total_number_of_results) {
    m_total_number_of_results = total_number_of_results;
    m_total_number_of_results_isSet = true;
}

bool OAIQueryResult::is_total_number_of_results_Set() const{
    return m_total_number_of_results_isSet;
}

bool OAIQueryResult::is_total_number_of_results_Valid() const{
    return m_total_number_of_results_isValid;
}

QList OAIQueryResult::getWarnings() const {
    return m_warnings;
}
void OAIQueryResult::setWarnings(const QList &warnings) {
    m_warnings = warnings;
    m_warnings_isSet = true;
}

bool OAIQueryResult::is_warnings_Set() const{
    return m_warnings_isSet;
}

bool OAIQueryResult::is_warnings_Valid() const{
    return m_warnings_isValid;
}

QList OAIQueryResult::getSpellCorrectedQueries() const {
    return m_spell_corrected_queries;
}
void OAIQueryResult::setSpellCorrectedQueries(const QList &spell_corrected_queries) {
    m_spell_corrected_queries = spell_corrected_queries;
    m_spell_corrected_queries_isSet = true;
}

bool OAIQueryResult::is_spell_corrected_queries_Set() const{
    return m_spell_corrected_queries_isSet;
}

bool OAIQueryResult::is_spell_corrected_queries_Valid() const{
    return m_spell_corrected_queries_isValid;
}

QList OAIQueryResult::getFeaturedResultsItems() const {
    return m_featured_results_items;
}
void OAIQueryResult::setFeaturedResultsItems(const QList &featured_results_items) {
    m_featured_results_items = featured_results_items;
    m_featured_results_items_isSet = true;
}

bool OAIQueryResult::is_featured_results_items_Set() const{
    return m_featured_results_items_isSet;
}

bool OAIQueryResult::is_featured_results_items_Valid() const{
    return m_featured_results_items_isValid;
}

bool OAIQueryResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_query_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_items.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_facet_results.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_number_of_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warnings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_spell_corrected_queries.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_featured_results_items.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
