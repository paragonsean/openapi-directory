/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUrls_SiteMapsConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUrls_SiteMapsConfiguration::OAIUrls_SiteMapsConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUrls_SiteMapsConfiguration::OAIUrls_SiteMapsConfiguration() {
    this->initializeModel();
}

OAIUrls_SiteMapsConfiguration::~OAIUrls_SiteMapsConfiguration() {}

void OAIUrls_SiteMapsConfiguration::initializeModel() {

    m_site_maps_isSet = false;
    m_site_maps_isValid = false;
}

void OAIUrls_SiteMapsConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUrls_SiteMapsConfiguration::fromJsonObject(QJsonObject json) {

    m_site_maps_isValid = ::OpenAPI::fromJsonValue(m_site_maps, json[QString("SiteMaps")]);
    m_site_maps_isSet = !json[QString("SiteMaps")].isNull() && m_site_maps_isValid;
}

QString OAIUrls_SiteMapsConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUrls_SiteMapsConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_site_maps.isSet()) {
        obj.insert(QString("SiteMaps"), ::OpenAPI::toJsonValue(m_site_maps));
    }
    return obj;
}

QList OAIUrls_SiteMapsConfiguration::getSiteMaps() const {
    return m_site_maps;
}
void OAIUrls_SiteMapsConfiguration::setSiteMaps(const QList &site_maps) {
    m_site_maps = site_maps;
    m_site_maps_isSet = true;
}

bool OAIUrls_SiteMapsConfiguration::is_site_maps_Set() const{
    return m_site_maps_isSet;
}

bool OAIUrls_SiteMapsConfiguration::is_site_maps_Valid() const{
    return m_site_maps_isValid;
}

bool OAIUrls_SiteMapsConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_site_maps.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUrls_SiteMapsConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_site_maps_isValid && true;
}

} // namespace OpenAPI
