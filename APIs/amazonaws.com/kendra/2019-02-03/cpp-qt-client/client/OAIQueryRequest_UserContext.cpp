/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryRequest_UserContext.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryRequest_UserContext::OAIQueryRequest_UserContext(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryRequest_UserContext::OAIQueryRequest_UserContext() {
    this->initializeModel();
}

OAIQueryRequest_UserContext::~OAIQueryRequest_UserContext() {}

void OAIQueryRequest_UserContext::initializeModel() {

    m_token_isSet = false;
    m_token_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_groups_isSet = false;
    m_groups_isValid = false;

    m_data_source_groups_isSet = false;
    m_data_source_groups_isValid = false;
}

void OAIQueryRequest_UserContext::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryRequest_UserContext::fromJsonObject(QJsonObject json) {

    m_token_isValid = ::OpenAPI::fromJsonValue(m_token, json[QString("Token")]);
    m_token_isSet = !json[QString("Token")].isNull() && m_token_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("UserId")]);
    m_user_id_isSet = !json[QString("UserId")].isNull() && m_user_id_isValid;

    m_groups_isValid = ::OpenAPI::fromJsonValue(m_groups, json[QString("Groups")]);
    m_groups_isSet = !json[QString("Groups")].isNull() && m_groups_isValid;

    m_data_source_groups_isValid = ::OpenAPI::fromJsonValue(m_data_source_groups, json[QString("DataSourceGroups")]);
    m_data_source_groups_isSet = !json[QString("DataSourceGroups")].isNull() && m_data_source_groups_isValid;
}

QString OAIQueryRequest_UserContext::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryRequest_UserContext::asJsonObject() const {
    QJsonObject obj;
    if (m_token_isSet) {
        obj.insert(QString("Token"), ::OpenAPI::toJsonValue(m_token));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("UserId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_groups.isSet()) {
        obj.insert(QString("Groups"), ::OpenAPI::toJsonValue(m_groups));
    }
    if (m_data_source_groups.isSet()) {
        obj.insert(QString("DataSourceGroups"), ::OpenAPI::toJsonValue(m_data_source_groups));
    }
    return obj;
}

QString OAIQueryRequest_UserContext::getToken() const {
    return m_token;
}
void OAIQueryRequest_UserContext::setToken(const QString &token) {
    m_token = token;
    m_token_isSet = true;
}

bool OAIQueryRequest_UserContext::is_token_Set() const{
    return m_token_isSet;
}

bool OAIQueryRequest_UserContext::is_token_Valid() const{
    return m_token_isValid;
}

QString OAIQueryRequest_UserContext::getUserId() const {
    return m_user_id;
}
void OAIQueryRequest_UserContext::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIQueryRequest_UserContext::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIQueryRequest_UserContext::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QList OAIQueryRequest_UserContext::getGroups() const {
    return m_groups;
}
void OAIQueryRequest_UserContext::setGroups(const QList &groups) {
    m_groups = groups;
    m_groups_isSet = true;
}

bool OAIQueryRequest_UserContext::is_groups_Set() const{
    return m_groups_isSet;
}

bool OAIQueryRequest_UserContext::is_groups_Valid() const{
    return m_groups_isValid;
}

QList OAIQueryRequest_UserContext::getDataSourceGroups() const {
    return m_data_source_groups;
}
void OAIQueryRequest_UserContext::setDataSourceGroups(const QList &data_source_groups) {
    m_data_source_groups = data_source_groups;
    m_data_source_groups_isSet = true;
}

bool OAIQueryRequest_UserContext::is_data_source_groups_Set() const{
    return m_data_source_groups_isSet;
}

bool OAIQueryRequest_UserContext::is_data_source_groups_Valid() const{
    return m_data_source_groups_isValid;
}

bool OAIQueryRequest_UserContext::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_source_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryRequest_UserContext::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
