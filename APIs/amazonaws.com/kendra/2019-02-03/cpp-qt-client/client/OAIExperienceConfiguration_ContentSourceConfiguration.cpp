/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExperienceConfiguration_ContentSourceConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExperienceConfiguration_ContentSourceConfiguration::OAIExperienceConfiguration_ContentSourceConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExperienceConfiguration_ContentSourceConfiguration::OAIExperienceConfiguration_ContentSourceConfiguration() {
    this->initializeModel();
}

OAIExperienceConfiguration_ContentSourceConfiguration::~OAIExperienceConfiguration_ContentSourceConfiguration() {}

void OAIExperienceConfiguration_ContentSourceConfiguration::initializeModel() {

    m_data_source_ids_isSet = false;
    m_data_source_ids_isValid = false;

    m_faq_ids_isSet = false;
    m_faq_ids_isValid = false;

    m_direct_put_content_isSet = false;
    m_direct_put_content_isValid = false;
}

void OAIExperienceConfiguration_ContentSourceConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExperienceConfiguration_ContentSourceConfiguration::fromJsonObject(QJsonObject json) {

    m_data_source_ids_isValid = ::OpenAPI::fromJsonValue(m_data_source_ids, json[QString("DataSourceIds")]);
    m_data_source_ids_isSet = !json[QString("DataSourceIds")].isNull() && m_data_source_ids_isValid;

    m_faq_ids_isValid = ::OpenAPI::fromJsonValue(m_faq_ids, json[QString("FaqIds")]);
    m_faq_ids_isSet = !json[QString("FaqIds")].isNull() && m_faq_ids_isValid;

    m_direct_put_content_isValid = ::OpenAPI::fromJsonValue(m_direct_put_content, json[QString("DirectPutContent")]);
    m_direct_put_content_isSet = !json[QString("DirectPutContent")].isNull() && m_direct_put_content_isValid;
}

QString OAIExperienceConfiguration_ContentSourceConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExperienceConfiguration_ContentSourceConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_data_source_ids.isSet()) {
        obj.insert(QString("DataSourceIds"), ::OpenAPI::toJsonValue(m_data_source_ids));
    }
    if (m_faq_ids.isSet()) {
        obj.insert(QString("FaqIds"), ::OpenAPI::toJsonValue(m_faq_ids));
    }
    if (m_direct_put_content_isSet) {
        obj.insert(QString("DirectPutContent"), ::OpenAPI::toJsonValue(m_direct_put_content));
    }
    return obj;
}

QList OAIExperienceConfiguration_ContentSourceConfiguration::getDataSourceIds() const {
    return m_data_source_ids;
}
void OAIExperienceConfiguration_ContentSourceConfiguration::setDataSourceIds(const QList &data_source_ids) {
    m_data_source_ids = data_source_ids;
    m_data_source_ids_isSet = true;
}

bool OAIExperienceConfiguration_ContentSourceConfiguration::is_data_source_ids_Set() const{
    return m_data_source_ids_isSet;
}

bool OAIExperienceConfiguration_ContentSourceConfiguration::is_data_source_ids_Valid() const{
    return m_data_source_ids_isValid;
}

QList OAIExperienceConfiguration_ContentSourceConfiguration::getFaqIds() const {
    return m_faq_ids;
}
void OAIExperienceConfiguration_ContentSourceConfiguration::setFaqIds(const QList &faq_ids) {
    m_faq_ids = faq_ids;
    m_faq_ids_isSet = true;
}

bool OAIExperienceConfiguration_ContentSourceConfiguration::is_faq_ids_Set() const{
    return m_faq_ids_isSet;
}

bool OAIExperienceConfiguration_ContentSourceConfiguration::is_faq_ids_Valid() const{
    return m_faq_ids_isValid;
}

bool OAIExperienceConfiguration_ContentSourceConfiguration::getDirectPutContent() const {
    return m_direct_put_content;
}
void OAIExperienceConfiguration_ContentSourceConfiguration::setDirectPutContent(const bool &direct_put_content) {
    m_direct_put_content = direct_put_content;
    m_direct_put_content_isSet = true;
}

bool OAIExperienceConfiguration_ContentSourceConfiguration::is_direct_put_content_Set() const{
    return m_direct_put_content_isSet;
}

bool OAIExperienceConfiguration_ContentSourceConfiguration::is_direct_put_content_Valid() const{
    return m_direct_put_content_isValid;
}

bool OAIExperienceConfiguration_ContentSourceConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_source_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_faq_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_direct_put_content_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExperienceConfiguration_ContentSourceConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
