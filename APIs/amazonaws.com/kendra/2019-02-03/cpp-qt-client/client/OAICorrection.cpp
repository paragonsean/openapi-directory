/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICorrection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICorrection::OAICorrection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICorrection::OAICorrection() {
    this->initializeModel();
}

OAICorrection::~OAICorrection() {}

void OAICorrection::initializeModel() {

    m_begin_offset_isSet = false;
    m_begin_offset_isValid = false;

    m_end_offset_isSet = false;
    m_end_offset_isValid = false;

    m_term_isSet = false;
    m_term_isValid = false;

    m_corrected_term_isSet = false;
    m_corrected_term_isValid = false;
}

void OAICorrection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICorrection::fromJsonObject(QJsonObject json) {

    m_begin_offset_isValid = ::OpenAPI::fromJsonValue(m_begin_offset, json[QString("BeginOffset")]);
    m_begin_offset_isSet = !json[QString("BeginOffset")].isNull() && m_begin_offset_isValid;

    m_end_offset_isValid = ::OpenAPI::fromJsonValue(m_end_offset, json[QString("EndOffset")]);
    m_end_offset_isSet = !json[QString("EndOffset")].isNull() && m_end_offset_isValid;

    m_term_isValid = ::OpenAPI::fromJsonValue(m_term, json[QString("Term")]);
    m_term_isSet = !json[QString("Term")].isNull() && m_term_isValid;

    m_corrected_term_isValid = ::OpenAPI::fromJsonValue(m_corrected_term, json[QString("CorrectedTerm")]);
    m_corrected_term_isSet = !json[QString("CorrectedTerm")].isNull() && m_corrected_term_isValid;
}

QString OAICorrection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICorrection::asJsonObject() const {
    QJsonObject obj;
    if (m_begin_offset_isSet) {
        obj.insert(QString("BeginOffset"), ::OpenAPI::toJsonValue(m_begin_offset));
    }
    if (m_end_offset_isSet) {
        obj.insert(QString("EndOffset"), ::OpenAPI::toJsonValue(m_end_offset));
    }
    if (m_term_isSet) {
        obj.insert(QString("Term"), ::OpenAPI::toJsonValue(m_term));
    }
    if (m_corrected_term_isSet) {
        obj.insert(QString("CorrectedTerm"), ::OpenAPI::toJsonValue(m_corrected_term));
    }
    return obj;
}

qint32 OAICorrection::getBeginOffset() const {
    return m_begin_offset;
}
void OAICorrection::setBeginOffset(const qint32 &begin_offset) {
    m_begin_offset = begin_offset;
    m_begin_offset_isSet = true;
}

bool OAICorrection::is_begin_offset_Set() const{
    return m_begin_offset_isSet;
}

bool OAICorrection::is_begin_offset_Valid() const{
    return m_begin_offset_isValid;
}

qint32 OAICorrection::getEndOffset() const {
    return m_end_offset;
}
void OAICorrection::setEndOffset(const qint32 &end_offset) {
    m_end_offset = end_offset;
    m_end_offset_isSet = true;
}

bool OAICorrection::is_end_offset_Set() const{
    return m_end_offset_isSet;
}

bool OAICorrection::is_end_offset_Valid() const{
    return m_end_offset_isValid;
}

QString OAICorrection::getTerm() const {
    return m_term;
}
void OAICorrection::setTerm(const QString &term) {
    m_term = term;
    m_term_isSet = true;
}

bool OAICorrection::is_term_Set() const{
    return m_term_isSet;
}

bool OAICorrection::is_term_Valid() const{
    return m_term_isValid;
}

QString OAICorrection::getCorrectedTerm() const {
    return m_corrected_term;
}
void OAICorrection::setCorrectedTerm(const QString &corrected_term) {
    m_corrected_term = corrected_term;
    m_corrected_term_isSet = true;
}

bool OAICorrection::is_corrected_term_Set() const{
    return m_corrected_term_isSet;
}

bool OAICorrection::is_corrected_term_Valid() const{
    return m_corrected_term_isValid;
}

bool OAICorrection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_begin_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_term_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_corrected_term_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICorrection::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
