/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetSnapshotsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetSnapshotsRequest::OAIGetSnapshotsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetSnapshotsRequest::OAIGetSnapshotsRequest() {
    this->initializeModel();
}

OAIGetSnapshotsRequest::~OAIGetSnapshotsRequest() {}

void OAIGetSnapshotsRequest::initializeModel() {

    m_index_id_isSet = false;
    m_index_id_isValid = false;

    m_interval_isSet = false;
    m_interval_isValid = false;

    m_metric_type_isSet = false;
    m_metric_type_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;
}

void OAIGetSnapshotsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetSnapshotsRequest::fromJsonObject(QJsonObject json) {

    m_index_id_isValid = ::OpenAPI::fromJsonValue(m_index_id, json[QString("IndexId")]);
    m_index_id_isSet = !json[QString("IndexId")].isNull() && m_index_id_isValid;

    m_interval_isValid = ::OpenAPI::fromJsonValue(m_interval, json[QString("Interval")]);
    m_interval_isSet = !json[QString("Interval")].isNull() && m_interval_isValid;

    m_metric_type_isValid = ::OpenAPI::fromJsonValue(m_metric_type, json[QString("MetricType")]);
    m_metric_type_isSet = !json[QString("MetricType")].isNull() && m_metric_type_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;
}

QString OAIGetSnapshotsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetSnapshotsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_index_id_isSet) {
        obj.insert(QString("IndexId"), ::OpenAPI::toJsonValue(m_index_id));
    }
    if (m_interval.isSet()) {
        obj.insert(QString("Interval"), ::OpenAPI::toJsonValue(m_interval));
    }
    if (m_metric_type.isSet()) {
        obj.insert(QString("MetricType"), ::OpenAPI::toJsonValue(m_metric_type));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    return obj;
}

QString OAIGetSnapshotsRequest::getIndexId() const {
    return m_index_id;
}
void OAIGetSnapshotsRequest::setIndexId(const QString &index_id) {
    m_index_id = index_id;
    m_index_id_isSet = true;
}

bool OAIGetSnapshotsRequest::is_index_id_Set() const{
    return m_index_id_isSet;
}

bool OAIGetSnapshotsRequest::is_index_id_Valid() const{
    return m_index_id_isValid;
}

OAIInterval OAIGetSnapshotsRequest::getInterval() const {
    return m_interval;
}
void OAIGetSnapshotsRequest::setInterval(const OAIInterval &interval) {
    m_interval = interval;
    m_interval_isSet = true;
}

bool OAIGetSnapshotsRequest::is_interval_Set() const{
    return m_interval_isSet;
}

bool OAIGetSnapshotsRequest::is_interval_Valid() const{
    return m_interval_isValid;
}

OAIMetricType OAIGetSnapshotsRequest::getMetricType() const {
    return m_metric_type;
}
void OAIGetSnapshotsRequest::setMetricType(const OAIMetricType &metric_type) {
    m_metric_type = metric_type;
    m_metric_type_isSet = true;
}

bool OAIGetSnapshotsRequest::is_metric_type_Set() const{
    return m_metric_type_isSet;
}

bool OAIGetSnapshotsRequest::is_metric_type_Valid() const{
    return m_metric_type_isValid;
}

QString OAIGetSnapshotsRequest::getNextToken() const {
    return m_next_token;
}
void OAIGetSnapshotsRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIGetSnapshotsRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIGetSnapshotsRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIGetSnapshotsRequest::getMaxResults() const {
    return m_max_results;
}
void OAIGetSnapshotsRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIGetSnapshotsRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIGetSnapshotsRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

bool OAIGetSnapshotsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_index_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetSnapshotsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_index_id_isValid && m_interval_isValid && m_metric_type_isValid && true;
}

} // namespace OpenAPI
