/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHighlight.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHighlight::OAIHighlight(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHighlight::OAIHighlight() {
    this->initializeModel();
}

OAIHighlight::~OAIHighlight() {}

void OAIHighlight::initializeModel() {

    m_begin_offset_isSet = false;
    m_begin_offset_isValid = false;

    m_end_offset_isSet = false;
    m_end_offset_isValid = false;

    m_top_answer_isSet = false;
    m_top_answer_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIHighlight::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHighlight::fromJsonObject(QJsonObject json) {

    m_begin_offset_isValid = ::OpenAPI::fromJsonValue(m_begin_offset, json[QString("BeginOffset")]);
    m_begin_offset_isSet = !json[QString("BeginOffset")].isNull() && m_begin_offset_isValid;

    m_end_offset_isValid = ::OpenAPI::fromJsonValue(m_end_offset, json[QString("EndOffset")]);
    m_end_offset_isSet = !json[QString("EndOffset")].isNull() && m_end_offset_isValid;

    m_top_answer_isValid = ::OpenAPI::fromJsonValue(m_top_answer, json[QString("TopAnswer")]);
    m_top_answer_isSet = !json[QString("TopAnswer")].isNull() && m_top_answer_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;
}

QString OAIHighlight::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHighlight::asJsonObject() const {
    QJsonObject obj;
    if (m_begin_offset_isSet) {
        obj.insert(QString("BeginOffset"), ::OpenAPI::toJsonValue(m_begin_offset));
    }
    if (m_end_offset_isSet) {
        obj.insert(QString("EndOffset"), ::OpenAPI::toJsonValue(m_end_offset));
    }
    if (m_top_answer_isSet) {
        obj.insert(QString("TopAnswer"), ::OpenAPI::toJsonValue(m_top_answer));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

qint32 OAIHighlight::getBeginOffset() const {
    return m_begin_offset;
}
void OAIHighlight::setBeginOffset(const qint32 &begin_offset) {
    m_begin_offset = begin_offset;
    m_begin_offset_isSet = true;
}

bool OAIHighlight::is_begin_offset_Set() const{
    return m_begin_offset_isSet;
}

bool OAIHighlight::is_begin_offset_Valid() const{
    return m_begin_offset_isValid;
}

qint32 OAIHighlight::getEndOffset() const {
    return m_end_offset;
}
void OAIHighlight::setEndOffset(const qint32 &end_offset) {
    m_end_offset = end_offset;
    m_end_offset_isSet = true;
}

bool OAIHighlight::is_end_offset_Set() const{
    return m_end_offset_isSet;
}

bool OAIHighlight::is_end_offset_Valid() const{
    return m_end_offset_isValid;
}

bool OAIHighlight::getTopAnswer() const {
    return m_top_answer;
}
void OAIHighlight::setTopAnswer(const bool &top_answer) {
    m_top_answer = top_answer;
    m_top_answer_isSet = true;
}

bool OAIHighlight::is_top_answer_Set() const{
    return m_top_answer_isSet;
}

bool OAIHighlight::is_top_answer_Valid() const{
    return m_top_answer_isValid;
}

OAIHighlightType OAIHighlight::getType() const {
    return m_type;
}
void OAIHighlight::setType(const OAIHighlightType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIHighlight::is_type_Set() const{
    return m_type_isSet;
}

bool OAIHighlight::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIHighlight::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_begin_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_answer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHighlight::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_begin_offset_isValid && m_end_offset_isValid && true;
}

} // namespace OpenAPI
