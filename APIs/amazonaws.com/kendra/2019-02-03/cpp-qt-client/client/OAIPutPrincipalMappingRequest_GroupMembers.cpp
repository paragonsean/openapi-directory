/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutPrincipalMappingRequest_GroupMembers.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutPrincipalMappingRequest_GroupMembers::OAIPutPrincipalMappingRequest_GroupMembers(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutPrincipalMappingRequest_GroupMembers::OAIPutPrincipalMappingRequest_GroupMembers() {
    this->initializeModel();
}

OAIPutPrincipalMappingRequest_GroupMembers::~OAIPutPrincipalMappingRequest_GroupMembers() {}

void OAIPutPrincipalMappingRequest_GroupMembers::initializeModel() {

    m_member_groups_isSet = false;
    m_member_groups_isValid = false;

    m_member_users_isSet = false;
    m_member_users_isValid = false;

    m_s3_pathfor_group_members_isSet = false;
    m_s3_pathfor_group_members_isValid = false;
}

void OAIPutPrincipalMappingRequest_GroupMembers::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutPrincipalMappingRequest_GroupMembers::fromJsonObject(QJsonObject json) {

    m_member_groups_isValid = ::OpenAPI::fromJsonValue(m_member_groups, json[QString("MemberGroups")]);
    m_member_groups_isSet = !json[QString("MemberGroups")].isNull() && m_member_groups_isValid;

    m_member_users_isValid = ::OpenAPI::fromJsonValue(m_member_users, json[QString("MemberUsers")]);
    m_member_users_isSet = !json[QString("MemberUsers")].isNull() && m_member_users_isValid;

    m_s3_pathfor_group_members_isValid = ::OpenAPI::fromJsonValue(m_s3_pathfor_group_members, json[QString("S3PathforGroupMembers")]);
    m_s3_pathfor_group_members_isSet = !json[QString("S3PathforGroupMembers")].isNull() && m_s3_pathfor_group_members_isValid;
}

QString OAIPutPrincipalMappingRequest_GroupMembers::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutPrincipalMappingRequest_GroupMembers::asJsonObject() const {
    QJsonObject obj;
    if (m_member_groups.isSet()) {
        obj.insert(QString("MemberGroups"), ::OpenAPI::toJsonValue(m_member_groups));
    }
    if (m_member_users.isSet()) {
        obj.insert(QString("MemberUsers"), ::OpenAPI::toJsonValue(m_member_users));
    }
    if (m_s3_pathfor_group_members.isSet()) {
        obj.insert(QString("S3PathforGroupMembers"), ::OpenAPI::toJsonValue(m_s3_pathfor_group_members));
    }
    return obj;
}

QList OAIPutPrincipalMappingRequest_GroupMembers::getMemberGroups() const {
    return m_member_groups;
}
void OAIPutPrincipalMappingRequest_GroupMembers::setMemberGroups(const QList &member_groups) {
    m_member_groups = member_groups;
    m_member_groups_isSet = true;
}

bool OAIPutPrincipalMappingRequest_GroupMembers::is_member_groups_Set() const{
    return m_member_groups_isSet;
}

bool OAIPutPrincipalMappingRequest_GroupMembers::is_member_groups_Valid() const{
    return m_member_groups_isValid;
}

QList OAIPutPrincipalMappingRequest_GroupMembers::getMemberUsers() const {
    return m_member_users;
}
void OAIPutPrincipalMappingRequest_GroupMembers::setMemberUsers(const QList &member_users) {
    m_member_users = member_users;
    m_member_users_isSet = true;
}

bool OAIPutPrincipalMappingRequest_GroupMembers::is_member_users_Set() const{
    return m_member_users_isSet;
}

bool OAIPutPrincipalMappingRequest_GroupMembers::is_member_users_Valid() const{
    return m_member_users_isValid;
}

OAIGroupMembers_S3PathforGroupMembers OAIPutPrincipalMappingRequest_GroupMembers::getS3PathforGroupMembers() const {
    return m_s3_pathfor_group_members;
}
void OAIPutPrincipalMappingRequest_GroupMembers::setS3PathforGroupMembers(const OAIGroupMembers_S3PathforGroupMembers &s3_pathfor_group_members) {
    m_s3_pathfor_group_members = s3_pathfor_group_members;
    m_s3_pathfor_group_members_isSet = true;
}

bool OAIPutPrincipalMappingRequest_GroupMembers::is_s3_pathfor_group_members_Set() const{
    return m_s3_pathfor_group_members_isSet;
}

bool OAIPutPrincipalMappingRequest_GroupMembers::is_s3_pathfor_group_members_Valid() const{
    return m_s3_pathfor_group_members_isValid;
}

bool OAIPutPrincipalMappingRequest_GroupMembers::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_member_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_member_users.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_pathfor_group_members.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutPrincipalMappingRequest_GroupMembers::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
