/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGitHubConfiguration_GitHubDocumentCrawlProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGitHubConfiguration_GitHubDocumentCrawlProperties::OAIGitHubConfiguration_GitHubDocumentCrawlProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGitHubConfiguration_GitHubDocumentCrawlProperties::OAIGitHubConfiguration_GitHubDocumentCrawlProperties() {
    this->initializeModel();
}

OAIGitHubConfiguration_GitHubDocumentCrawlProperties::~OAIGitHubConfiguration_GitHubDocumentCrawlProperties() {}

void OAIGitHubConfiguration_GitHubDocumentCrawlProperties::initializeModel() {

    m_crawl_repository_documents_isSet = false;
    m_crawl_repository_documents_isValid = false;

    m_crawl_issue_isSet = false;
    m_crawl_issue_isValid = false;

    m_crawl_issue_comment_isSet = false;
    m_crawl_issue_comment_isValid = false;

    m_crawl_issue_comment_attachment_isSet = false;
    m_crawl_issue_comment_attachment_isValid = false;

    m_crawl_pull_request_isSet = false;
    m_crawl_pull_request_isValid = false;

    m_crawl_pull_request_comment_isSet = false;
    m_crawl_pull_request_comment_isValid = false;

    m_crawl_pull_request_comment_attachment_isSet = false;
    m_crawl_pull_request_comment_attachment_isValid = false;
}

void OAIGitHubConfiguration_GitHubDocumentCrawlProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGitHubConfiguration_GitHubDocumentCrawlProperties::fromJsonObject(QJsonObject json) {

    m_crawl_repository_documents_isValid = ::OpenAPI::fromJsonValue(m_crawl_repository_documents, json[QString("CrawlRepositoryDocuments")]);
    m_crawl_repository_documents_isSet = !json[QString("CrawlRepositoryDocuments")].isNull() && m_crawl_repository_documents_isValid;

    m_crawl_issue_isValid = ::OpenAPI::fromJsonValue(m_crawl_issue, json[QString("CrawlIssue")]);
    m_crawl_issue_isSet = !json[QString("CrawlIssue")].isNull() && m_crawl_issue_isValid;

    m_crawl_issue_comment_isValid = ::OpenAPI::fromJsonValue(m_crawl_issue_comment, json[QString("CrawlIssueComment")]);
    m_crawl_issue_comment_isSet = !json[QString("CrawlIssueComment")].isNull() && m_crawl_issue_comment_isValid;

    m_crawl_issue_comment_attachment_isValid = ::OpenAPI::fromJsonValue(m_crawl_issue_comment_attachment, json[QString("CrawlIssueCommentAttachment")]);
    m_crawl_issue_comment_attachment_isSet = !json[QString("CrawlIssueCommentAttachment")].isNull() && m_crawl_issue_comment_attachment_isValid;

    m_crawl_pull_request_isValid = ::OpenAPI::fromJsonValue(m_crawl_pull_request, json[QString("CrawlPullRequest")]);
    m_crawl_pull_request_isSet = !json[QString("CrawlPullRequest")].isNull() && m_crawl_pull_request_isValid;

    m_crawl_pull_request_comment_isValid = ::OpenAPI::fromJsonValue(m_crawl_pull_request_comment, json[QString("CrawlPullRequestComment")]);
    m_crawl_pull_request_comment_isSet = !json[QString("CrawlPullRequestComment")].isNull() && m_crawl_pull_request_comment_isValid;

    m_crawl_pull_request_comment_attachment_isValid = ::OpenAPI::fromJsonValue(m_crawl_pull_request_comment_attachment, json[QString("CrawlPullRequestCommentAttachment")]);
    m_crawl_pull_request_comment_attachment_isSet = !json[QString("CrawlPullRequestCommentAttachment")].isNull() && m_crawl_pull_request_comment_attachment_isValid;
}

QString OAIGitHubConfiguration_GitHubDocumentCrawlProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGitHubConfiguration_GitHubDocumentCrawlProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_crawl_repository_documents_isSet) {
        obj.insert(QString("CrawlRepositoryDocuments"), ::OpenAPI::toJsonValue(m_crawl_repository_documents));
    }
    if (m_crawl_issue_isSet) {
        obj.insert(QString("CrawlIssue"), ::OpenAPI::toJsonValue(m_crawl_issue));
    }
    if (m_crawl_issue_comment_isSet) {
        obj.insert(QString("CrawlIssueComment"), ::OpenAPI::toJsonValue(m_crawl_issue_comment));
    }
    if (m_crawl_issue_comment_attachment_isSet) {
        obj.insert(QString("CrawlIssueCommentAttachment"), ::OpenAPI::toJsonValue(m_crawl_issue_comment_attachment));
    }
    if (m_crawl_pull_request_isSet) {
        obj.insert(QString("CrawlPullRequest"), ::OpenAPI::toJsonValue(m_crawl_pull_request));
    }
    if (m_crawl_pull_request_comment_isSet) {
        obj.insert(QString("CrawlPullRequestComment"), ::OpenAPI::toJsonValue(m_crawl_pull_request_comment));
    }
    if (m_crawl_pull_request_comment_attachment_isSet) {
        obj.insert(QString("CrawlPullRequestCommentAttachment"), ::OpenAPI::toJsonValue(m_crawl_pull_request_comment_attachment));
    }
    return obj;
}

bool OAIGitHubConfiguration_GitHubDocumentCrawlProperties::getCrawlRepositoryDocuments() const {
    return m_crawl_repository_documents;
}
void OAIGitHubConfiguration_GitHubDocumentCrawlProperties::setCrawlRepositoryDocuments(const bool &crawl_repository_documents) {
    m_crawl_repository_documents = crawl_repository_documents;
    m_crawl_repository_documents_isSet = true;
}

bool OAIGitHubConfiguration_GitHubDocumentCrawlProperties::is_crawl_repository_documents_Set() const{
    return m_crawl_repository_documents_isSet;
}

bool OAIGitHubConfiguration_GitHubDocumentCrawlProperties::is_crawl_repository_documents_Valid() const{
    return m_crawl_repository_documents_isValid;
}

bool OAIGitHubConfiguration_GitHubDocumentCrawlProperties::getCrawlIssue() const {
    return m_crawl_issue;
}
void OAIGitHubConfiguration_GitHubDocumentCrawlProperties::setCrawlIssue(const bool &crawl_issue) {
    m_crawl_issue = crawl_issue;
    m_crawl_issue_isSet = true;
}

bool OAIGitHubConfiguration_GitHubDocumentCrawlProperties::is_crawl_issue_Set() const{
    return m_crawl_issue_isSet;
}

bool OAIGitHubConfiguration_GitHubDocumentCrawlProperties::is_crawl_issue_Valid() const{
    return m_crawl_issue_isValid;
}

bool OAIGitHubConfiguration_GitHubDocumentCrawlProperties::getCrawlIssueComment() const {
    return m_crawl_issue_comment;
}
void OAIGitHubConfiguration_GitHubDocumentCrawlProperties::setCrawlIssueComment(const bool &crawl_issue_comment) {
    m_crawl_issue_comment = crawl_issue_comment;
    m_crawl_issue_comment_isSet = true;
}

bool OAIGitHubConfiguration_GitHubDocumentCrawlProperties::is_crawl_issue_comment_Set() const{
    return m_crawl_issue_comment_isSet;
}

bool OAIGitHubConfiguration_GitHubDocumentCrawlProperties::is_crawl_issue_comment_Valid() const{
    return m_crawl_issue_comment_isValid;
}

bool OAIGitHubConfiguration_GitHubDocumentCrawlProperties::getCrawlIssueCommentAttachment() const {
    return m_crawl_issue_comment_attachment;
}
void OAIGitHubConfiguration_GitHubDocumentCrawlProperties::setCrawlIssueCommentAttachment(const bool &crawl_issue_comment_attachment) {
    m_crawl_issue_comment_attachment = crawl_issue_comment_attachment;
    m_crawl_issue_comment_attachment_isSet = true;
}

bool OAIGitHubConfiguration_GitHubDocumentCrawlProperties::is_crawl_issue_comment_attachment_Set() const{
    return m_crawl_issue_comment_attachment_isSet;
}

bool OAIGitHubConfiguration_GitHubDocumentCrawlProperties::is_crawl_issue_comment_attachment_Valid() const{
    return m_crawl_issue_comment_attachment_isValid;
}

bool OAIGitHubConfiguration_GitHubDocumentCrawlProperties::getCrawlPullRequest() const {
    return m_crawl_pull_request;
}
void OAIGitHubConfiguration_GitHubDocumentCrawlProperties::setCrawlPullRequest(const bool &crawl_pull_request) {
    m_crawl_pull_request = crawl_pull_request;
    m_crawl_pull_request_isSet = true;
}

bool OAIGitHubConfiguration_GitHubDocumentCrawlProperties::is_crawl_pull_request_Set() const{
    return m_crawl_pull_request_isSet;
}

bool OAIGitHubConfiguration_GitHubDocumentCrawlProperties::is_crawl_pull_request_Valid() const{
    return m_crawl_pull_request_isValid;
}

bool OAIGitHubConfiguration_GitHubDocumentCrawlProperties::getCrawlPullRequestComment() const {
    return m_crawl_pull_request_comment;
}
void OAIGitHubConfiguration_GitHubDocumentCrawlProperties::setCrawlPullRequestComment(const bool &crawl_pull_request_comment) {
    m_crawl_pull_request_comment = crawl_pull_request_comment;
    m_crawl_pull_request_comment_isSet = true;
}

bool OAIGitHubConfiguration_GitHubDocumentCrawlProperties::is_crawl_pull_request_comment_Set() const{
    return m_crawl_pull_request_comment_isSet;
}

bool OAIGitHubConfiguration_GitHubDocumentCrawlProperties::is_crawl_pull_request_comment_Valid() const{
    return m_crawl_pull_request_comment_isValid;
}

bool OAIGitHubConfiguration_GitHubDocumentCrawlProperties::getCrawlPullRequestCommentAttachment() const {
    return m_crawl_pull_request_comment_attachment;
}
void OAIGitHubConfiguration_GitHubDocumentCrawlProperties::setCrawlPullRequestCommentAttachment(const bool &crawl_pull_request_comment_attachment) {
    m_crawl_pull_request_comment_attachment = crawl_pull_request_comment_attachment;
    m_crawl_pull_request_comment_attachment_isSet = true;
}

bool OAIGitHubConfiguration_GitHubDocumentCrawlProperties::is_crawl_pull_request_comment_attachment_Set() const{
    return m_crawl_pull_request_comment_attachment_isSet;
}

bool OAIGitHubConfiguration_GitHubDocumentCrawlProperties::is_crawl_pull_request_comment_attachment_Valid() const{
    return m_crawl_pull_request_comment_attachment_isValid;
}

bool OAIGitHubConfiguration_GitHubDocumentCrawlProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_crawl_repository_documents_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crawl_issue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crawl_issue_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crawl_issue_comment_attachment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crawl_pull_request_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crawl_pull_request_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crawl_pull_request_comment_attachment_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGitHubConfiguration_GitHubDocumentCrawlProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
