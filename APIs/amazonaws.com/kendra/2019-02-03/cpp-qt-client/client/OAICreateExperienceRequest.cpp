/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateExperienceRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateExperienceRequest::OAICreateExperienceRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateExperienceRequest::OAICreateExperienceRequest() {
    this->initializeModel();
}

OAICreateExperienceRequest::~OAICreateExperienceRequest() {}

void OAICreateExperienceRequest::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_index_id_isSet = false;
    m_index_id_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_configuration_isSet = false;
    m_configuration_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;
}

void OAICreateExperienceRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateExperienceRequest::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_index_id_isValid = ::OpenAPI::fromJsonValue(m_index_id, json[QString("IndexId")]);
    m_index_id_isSet = !json[QString("IndexId")].isNull() && m_index_id_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;

    m_configuration_isValid = ::OpenAPI::fromJsonValue(m_configuration, json[QString("Configuration")]);
    m_configuration_isSet = !json[QString("Configuration")].isNull() && m_configuration_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("ClientToken")]);
    m_client_token_isSet = !json[QString("ClientToken")].isNull() && m_client_token_isValid;
}

QString OAICreateExperienceRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateExperienceRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_index_id_isSet) {
        obj.insert(QString("IndexId"), ::OpenAPI::toJsonValue(m_index_id));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_configuration.isSet()) {
        obj.insert(QString("Configuration"), ::OpenAPI::toJsonValue(m_configuration));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("ClientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    return obj;
}

QString OAICreateExperienceRequest::getName() const {
    return m_name;
}
void OAICreateExperienceRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateExperienceRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateExperienceRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateExperienceRequest::getIndexId() const {
    return m_index_id;
}
void OAICreateExperienceRequest::setIndexId(const QString &index_id) {
    m_index_id = index_id;
    m_index_id_isSet = true;
}

bool OAICreateExperienceRequest::is_index_id_Set() const{
    return m_index_id_isSet;
}

bool OAICreateExperienceRequest::is_index_id_Valid() const{
    return m_index_id_isValid;
}

QString OAICreateExperienceRequest::getRoleArn() const {
    return m_role_arn;
}
void OAICreateExperienceRequest::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAICreateExperienceRequest::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAICreateExperienceRequest::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

OAICreateExperienceRequest_Configuration OAICreateExperienceRequest::getConfiguration() const {
    return m_configuration;
}
void OAICreateExperienceRequest::setConfiguration(const OAICreateExperienceRequest_Configuration &configuration) {
    m_configuration = configuration;
    m_configuration_isSet = true;
}

bool OAICreateExperienceRequest::is_configuration_Set() const{
    return m_configuration_isSet;
}

bool OAICreateExperienceRequest::is_configuration_Valid() const{
    return m_configuration_isValid;
}

QString OAICreateExperienceRequest::getDescription() const {
    return m_description;
}
void OAICreateExperienceRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateExperienceRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateExperienceRequest::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICreateExperienceRequest::getClientToken() const {
    return m_client_token;
}
void OAICreateExperienceRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateExperienceRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateExperienceRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

bool OAICreateExperienceRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateExperienceRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_index_id_isValid && true;
}

} // namespace OpenAPI
