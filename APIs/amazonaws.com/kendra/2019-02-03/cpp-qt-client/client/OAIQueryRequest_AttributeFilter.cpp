/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryRequest_AttributeFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryRequest_AttributeFilter::OAIQueryRequest_AttributeFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryRequest_AttributeFilter::OAIQueryRequest_AttributeFilter() {
    this->initializeModel();
}

OAIQueryRequest_AttributeFilter::~OAIQueryRequest_AttributeFilter() {}

void OAIQueryRequest_AttributeFilter::initializeModel() {

    m_and_all_filters_isSet = false;
    m_and_all_filters_isValid = false;

    m_or_all_filters_isSet = false;
    m_or_all_filters_isValid = false;

    m_not_filter_isSet = false;
    m_not_filter_isValid = false;

    m_equals_to_isSet = false;
    m_equals_to_isValid = false;

    m_contains_all_isSet = false;
    m_contains_all_isValid = false;

    m_contains_any_isSet = false;
    m_contains_any_isValid = false;

    m_greater_than_isSet = false;
    m_greater_than_isValid = false;

    m_greater_than_or_equals_isSet = false;
    m_greater_than_or_equals_isValid = false;

    m_less_than_isSet = false;
    m_less_than_isValid = false;

    m_less_than_or_equals_isSet = false;
    m_less_than_or_equals_isValid = false;
}

void OAIQueryRequest_AttributeFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryRequest_AttributeFilter::fromJsonObject(QJsonObject json) {

    m_and_all_filters_isValid = ::OpenAPI::fromJsonValue(m_and_all_filters, json[QString("AndAllFilters")]);
    m_and_all_filters_isSet = !json[QString("AndAllFilters")].isNull() && m_and_all_filters_isValid;

    m_or_all_filters_isValid = ::OpenAPI::fromJsonValue(m_or_all_filters, json[QString("OrAllFilters")]);
    m_or_all_filters_isSet = !json[QString("OrAllFilters")].isNull() && m_or_all_filters_isValid;

    m_not_filter_isValid = ::OpenAPI::fromJsonValue(m_not_filter, json[QString("NotFilter")]);
    m_not_filter_isSet = !json[QString("NotFilter")].isNull() && m_not_filter_isValid;

    m_equals_to_isValid = ::OpenAPI::fromJsonValue(m_equals_to, json[QString("EqualsTo")]);
    m_equals_to_isSet = !json[QString("EqualsTo")].isNull() && m_equals_to_isValid;

    m_contains_all_isValid = ::OpenAPI::fromJsonValue(m_contains_all, json[QString("ContainsAll")]);
    m_contains_all_isSet = !json[QString("ContainsAll")].isNull() && m_contains_all_isValid;

    m_contains_any_isValid = ::OpenAPI::fromJsonValue(m_contains_any, json[QString("ContainsAny")]);
    m_contains_any_isSet = !json[QString("ContainsAny")].isNull() && m_contains_any_isValid;

    m_greater_than_isValid = ::OpenAPI::fromJsonValue(m_greater_than, json[QString("GreaterThan")]);
    m_greater_than_isSet = !json[QString("GreaterThan")].isNull() && m_greater_than_isValid;

    m_greater_than_or_equals_isValid = ::OpenAPI::fromJsonValue(m_greater_than_or_equals, json[QString("GreaterThanOrEquals")]);
    m_greater_than_or_equals_isSet = !json[QString("GreaterThanOrEquals")].isNull() && m_greater_than_or_equals_isValid;

    m_less_than_isValid = ::OpenAPI::fromJsonValue(m_less_than, json[QString("LessThan")]);
    m_less_than_isSet = !json[QString("LessThan")].isNull() && m_less_than_isValid;

    m_less_than_or_equals_isValid = ::OpenAPI::fromJsonValue(m_less_than_or_equals, json[QString("LessThanOrEquals")]);
    m_less_than_or_equals_isSet = !json[QString("LessThanOrEquals")].isNull() && m_less_than_or_equals_isValid;
}

QString OAIQueryRequest_AttributeFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryRequest_AttributeFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_and_all_filters.isSet()) {
        obj.insert(QString("AndAllFilters"), ::OpenAPI::toJsonValue(m_and_all_filters));
    }
    if (m_or_all_filters.isSet()) {
        obj.insert(QString("OrAllFilters"), ::OpenAPI::toJsonValue(m_or_all_filters));
    }
    if (m_not_filter.isSet()) {
        obj.insert(QString("NotFilter"), ::OpenAPI::toJsonValue(m_not_filter));
    }
    if (m_equals_to.isSet()) {
        obj.insert(QString("EqualsTo"), ::OpenAPI::toJsonValue(m_equals_to));
    }
    if (m_contains_all.isSet()) {
        obj.insert(QString("ContainsAll"), ::OpenAPI::toJsonValue(m_contains_all));
    }
    if (m_contains_any.isSet()) {
        obj.insert(QString("ContainsAny"), ::OpenAPI::toJsonValue(m_contains_any));
    }
    if (m_greater_than.isSet()) {
        obj.insert(QString("GreaterThan"), ::OpenAPI::toJsonValue(m_greater_than));
    }
    if (m_greater_than_or_equals.isSet()) {
        obj.insert(QString("GreaterThanOrEquals"), ::OpenAPI::toJsonValue(m_greater_than_or_equals));
    }
    if (m_less_than.isSet()) {
        obj.insert(QString("LessThan"), ::OpenAPI::toJsonValue(m_less_than));
    }
    if (m_less_than_or_equals.isSet()) {
        obj.insert(QString("LessThanOrEquals"), ::OpenAPI::toJsonValue(m_less_than_or_equals));
    }
    return obj;
}

QList OAIQueryRequest_AttributeFilter::getAndAllFilters() const {
    return m_and_all_filters;
}
void OAIQueryRequest_AttributeFilter::setAndAllFilters(const QList &and_all_filters) {
    m_and_all_filters = and_all_filters;
    m_and_all_filters_isSet = true;
}

bool OAIQueryRequest_AttributeFilter::is_and_all_filters_Set() const{
    return m_and_all_filters_isSet;
}

bool OAIQueryRequest_AttributeFilter::is_and_all_filters_Valid() const{
    return m_and_all_filters_isValid;
}

QList OAIQueryRequest_AttributeFilter::getOrAllFilters() const {
    return m_or_all_filters;
}
void OAIQueryRequest_AttributeFilter::setOrAllFilters(const QList &or_all_filters) {
    m_or_all_filters = or_all_filters;
    m_or_all_filters_isSet = true;
}

bool OAIQueryRequest_AttributeFilter::is_or_all_filters_Set() const{
    return m_or_all_filters_isSet;
}

bool OAIQueryRequest_AttributeFilter::is_or_all_filters_Valid() const{
    return m_or_all_filters_isValid;
}

OAIAttributeFilter_NotFilter OAIQueryRequest_AttributeFilter::getNotFilter() const {
    return m_not_filter;
}
void OAIQueryRequest_AttributeFilter::setNotFilter(const OAIAttributeFilter_NotFilter &not_filter) {
    m_not_filter = not_filter;
    m_not_filter_isSet = true;
}

bool OAIQueryRequest_AttributeFilter::is_not_filter_Set() const{
    return m_not_filter_isSet;
}

bool OAIQueryRequest_AttributeFilter::is_not_filter_Valid() const{
    return m_not_filter_isValid;
}

OAIAttributeFilter_EqualsTo OAIQueryRequest_AttributeFilter::getEqualsTo() const {
    return m_equals_to;
}
void OAIQueryRequest_AttributeFilter::setEqualsTo(const OAIAttributeFilter_EqualsTo &equals_to) {
    m_equals_to = equals_to;
    m_equals_to_isSet = true;
}

bool OAIQueryRequest_AttributeFilter::is_equals_to_Set() const{
    return m_equals_to_isSet;
}

bool OAIQueryRequest_AttributeFilter::is_equals_to_Valid() const{
    return m_equals_to_isValid;
}

OAIAttributeFilter_ContainsAll OAIQueryRequest_AttributeFilter::getContainsAll() const {
    return m_contains_all;
}
void OAIQueryRequest_AttributeFilter::setContainsAll(const OAIAttributeFilter_ContainsAll &contains_all) {
    m_contains_all = contains_all;
    m_contains_all_isSet = true;
}

bool OAIQueryRequest_AttributeFilter::is_contains_all_Set() const{
    return m_contains_all_isSet;
}

bool OAIQueryRequest_AttributeFilter::is_contains_all_Valid() const{
    return m_contains_all_isValid;
}

OAIAttributeFilter_ContainsAny OAIQueryRequest_AttributeFilter::getContainsAny() const {
    return m_contains_any;
}
void OAIQueryRequest_AttributeFilter::setContainsAny(const OAIAttributeFilter_ContainsAny &contains_any) {
    m_contains_any = contains_any;
    m_contains_any_isSet = true;
}

bool OAIQueryRequest_AttributeFilter::is_contains_any_Set() const{
    return m_contains_any_isSet;
}

bool OAIQueryRequest_AttributeFilter::is_contains_any_Valid() const{
    return m_contains_any_isValid;
}

OAIAttributeFilter_GreaterThan OAIQueryRequest_AttributeFilter::getGreaterThan() const {
    return m_greater_than;
}
void OAIQueryRequest_AttributeFilter::setGreaterThan(const OAIAttributeFilter_GreaterThan &greater_than) {
    m_greater_than = greater_than;
    m_greater_than_isSet = true;
}

bool OAIQueryRequest_AttributeFilter::is_greater_than_Set() const{
    return m_greater_than_isSet;
}

bool OAIQueryRequest_AttributeFilter::is_greater_than_Valid() const{
    return m_greater_than_isValid;
}

OAIAttributeFilter_GreaterThanOrEquals OAIQueryRequest_AttributeFilter::getGreaterThanOrEquals() const {
    return m_greater_than_or_equals;
}
void OAIQueryRequest_AttributeFilter::setGreaterThanOrEquals(const OAIAttributeFilter_GreaterThanOrEquals &greater_than_or_equals) {
    m_greater_than_or_equals = greater_than_or_equals;
    m_greater_than_or_equals_isSet = true;
}

bool OAIQueryRequest_AttributeFilter::is_greater_than_or_equals_Set() const{
    return m_greater_than_or_equals_isSet;
}

bool OAIQueryRequest_AttributeFilter::is_greater_than_or_equals_Valid() const{
    return m_greater_than_or_equals_isValid;
}

OAIAttributeFilter_LessThan OAIQueryRequest_AttributeFilter::getLessThan() const {
    return m_less_than;
}
void OAIQueryRequest_AttributeFilter::setLessThan(const OAIAttributeFilter_LessThan &less_than) {
    m_less_than = less_than;
    m_less_than_isSet = true;
}

bool OAIQueryRequest_AttributeFilter::is_less_than_Set() const{
    return m_less_than_isSet;
}

bool OAIQueryRequest_AttributeFilter::is_less_than_Valid() const{
    return m_less_than_isValid;
}

OAIAttributeFilter_LessThanOrEquals OAIQueryRequest_AttributeFilter::getLessThanOrEquals() const {
    return m_less_than_or_equals;
}
void OAIQueryRequest_AttributeFilter::setLessThanOrEquals(const OAIAttributeFilter_LessThanOrEquals &less_than_or_equals) {
    m_less_than_or_equals = less_than_or_equals;
    m_less_than_or_equals_isSet = true;
}

bool OAIQueryRequest_AttributeFilter::is_less_than_or_equals_Set() const{
    return m_less_than_or_equals_isSet;
}

bool OAIQueryRequest_AttributeFilter::is_less_than_or_equals_Valid() const{
    return m_less_than_or_equals_isValid;
}

bool OAIQueryRequest_AttributeFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_and_all_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_or_all_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_not_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_equals_to.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_contains_all.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_contains_any.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_greater_than.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_greater_than_or_equals.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_less_than.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_less_than_or_equals.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryRequest_AttributeFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
