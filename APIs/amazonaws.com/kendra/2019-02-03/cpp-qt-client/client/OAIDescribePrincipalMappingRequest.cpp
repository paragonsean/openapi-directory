/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribePrincipalMappingRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribePrincipalMappingRequest::OAIDescribePrincipalMappingRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribePrincipalMappingRequest::OAIDescribePrincipalMappingRequest() {
    this->initializeModel();
}

OAIDescribePrincipalMappingRequest::~OAIDescribePrincipalMappingRequest() {}

void OAIDescribePrincipalMappingRequest::initializeModel() {

    m_index_id_isSet = false;
    m_index_id_isValid = false;

    m_data_source_id_isSet = false;
    m_data_source_id_isValid = false;

    m_group_id_isSet = false;
    m_group_id_isValid = false;
}

void OAIDescribePrincipalMappingRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribePrincipalMappingRequest::fromJsonObject(QJsonObject json) {

    m_index_id_isValid = ::OpenAPI::fromJsonValue(m_index_id, json[QString("IndexId")]);
    m_index_id_isSet = !json[QString("IndexId")].isNull() && m_index_id_isValid;

    m_data_source_id_isValid = ::OpenAPI::fromJsonValue(m_data_source_id, json[QString("DataSourceId")]);
    m_data_source_id_isSet = !json[QString("DataSourceId")].isNull() && m_data_source_id_isValid;

    m_group_id_isValid = ::OpenAPI::fromJsonValue(m_group_id, json[QString("GroupId")]);
    m_group_id_isSet = !json[QString("GroupId")].isNull() && m_group_id_isValid;
}

QString OAIDescribePrincipalMappingRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribePrincipalMappingRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_index_id_isSet) {
        obj.insert(QString("IndexId"), ::OpenAPI::toJsonValue(m_index_id));
    }
    if (m_data_source_id_isSet) {
        obj.insert(QString("DataSourceId"), ::OpenAPI::toJsonValue(m_data_source_id));
    }
    if (m_group_id_isSet) {
        obj.insert(QString("GroupId"), ::OpenAPI::toJsonValue(m_group_id));
    }
    return obj;
}

QString OAIDescribePrincipalMappingRequest::getIndexId() const {
    return m_index_id;
}
void OAIDescribePrincipalMappingRequest::setIndexId(const QString &index_id) {
    m_index_id = index_id;
    m_index_id_isSet = true;
}

bool OAIDescribePrincipalMappingRequest::is_index_id_Set() const{
    return m_index_id_isSet;
}

bool OAIDescribePrincipalMappingRequest::is_index_id_Valid() const{
    return m_index_id_isValid;
}

QString OAIDescribePrincipalMappingRequest::getDataSourceId() const {
    return m_data_source_id;
}
void OAIDescribePrincipalMappingRequest::setDataSourceId(const QString &data_source_id) {
    m_data_source_id = data_source_id;
    m_data_source_id_isSet = true;
}

bool OAIDescribePrincipalMappingRequest::is_data_source_id_Set() const{
    return m_data_source_id_isSet;
}

bool OAIDescribePrincipalMappingRequest::is_data_source_id_Valid() const{
    return m_data_source_id_isValid;
}

QString OAIDescribePrincipalMappingRequest::getGroupId() const {
    return m_group_id;
}
void OAIDescribePrincipalMappingRequest::setGroupId(const QString &group_id) {
    m_group_id = group_id;
    m_group_id_isSet = true;
}

bool OAIDescribePrincipalMappingRequest::is_group_id_Set() const{
    return m_group_id_isSet;
}

bool OAIDescribePrincipalMappingRequest::is_group_id_Valid() const{
    return m_group_id_isValid;
}

bool OAIDescribePrincipalMappingRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_index_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribePrincipalMappingRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_index_id_isValid && m_group_id_isValid && true;
}

} // namespace OpenAPI
