/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeQuerySuggestionsBlockListResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeQuerySuggestionsBlockListResponse::OAIDescribeQuerySuggestionsBlockListResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeQuerySuggestionsBlockListResponse::OAIDescribeQuerySuggestionsBlockListResponse() {
    this->initializeModel();
}

OAIDescribeQuerySuggestionsBlockListResponse::~OAIDescribeQuerySuggestionsBlockListResponse() {}

void OAIDescribeQuerySuggestionsBlockListResponse::initializeModel() {

    m_index_id_isSet = false;
    m_index_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_source_s3_path_isSet = false;
    m_source_s3_path_isValid = false;

    m_item_count_isSet = false;
    m_item_count_isValid = false;

    m_file_size_bytes_isSet = false;
    m_file_size_bytes_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;
}

void OAIDescribeQuerySuggestionsBlockListResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeQuerySuggestionsBlockListResponse::fromJsonObject(QJsonObject json) {

    m_index_id_isValid = ::OpenAPI::fromJsonValue(m_index_id, json[QString("IndexId")]);
    m_index_id_isSet = !json[QString("IndexId")].isNull() && m_index_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("ErrorMessage")]);
    m_error_message_isSet = !json[QString("ErrorMessage")].isNull() && m_error_message_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("CreatedAt")]);
    m_created_at_isSet = !json[QString("CreatedAt")].isNull() && m_created_at_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("UpdatedAt")]);
    m_updated_at_isSet = !json[QString("UpdatedAt")].isNull() && m_updated_at_isValid;

    m_source_s3_path_isValid = ::OpenAPI::fromJsonValue(m_source_s3_path, json[QString("SourceS3Path")]);
    m_source_s3_path_isSet = !json[QString("SourceS3Path")].isNull() && m_source_s3_path_isValid;

    m_item_count_isValid = ::OpenAPI::fromJsonValue(m_item_count, json[QString("ItemCount")]);
    m_item_count_isSet = !json[QString("ItemCount")].isNull() && m_item_count_isValid;

    m_file_size_bytes_isValid = ::OpenAPI::fromJsonValue(m_file_size_bytes, json[QString("FileSizeBytes")]);
    m_file_size_bytes_isSet = !json[QString("FileSizeBytes")].isNull() && m_file_size_bytes_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;
}

QString OAIDescribeQuerySuggestionsBlockListResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeQuerySuggestionsBlockListResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_index_id_isSet) {
        obj.insert(QString("IndexId"), ::OpenAPI::toJsonValue(m_index_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("ErrorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("CreatedAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("UpdatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_source_s3_path.isSet()) {
        obj.insert(QString("SourceS3Path"), ::OpenAPI::toJsonValue(m_source_s3_path));
    }
    if (m_item_count_isSet) {
        obj.insert(QString("ItemCount"), ::OpenAPI::toJsonValue(m_item_count));
    }
    if (m_file_size_bytes_isSet) {
        obj.insert(QString("FileSizeBytes"), ::OpenAPI::toJsonValue(m_file_size_bytes));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    return obj;
}

QString OAIDescribeQuerySuggestionsBlockListResponse::getIndexId() const {
    return m_index_id;
}
void OAIDescribeQuerySuggestionsBlockListResponse::setIndexId(const QString &index_id) {
    m_index_id = index_id;
    m_index_id_isSet = true;
}

bool OAIDescribeQuerySuggestionsBlockListResponse::is_index_id_Set() const{
    return m_index_id_isSet;
}

bool OAIDescribeQuerySuggestionsBlockListResponse::is_index_id_Valid() const{
    return m_index_id_isValid;
}

QString OAIDescribeQuerySuggestionsBlockListResponse::getId() const {
    return m_id;
}
void OAIDescribeQuerySuggestionsBlockListResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDescribeQuerySuggestionsBlockListResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDescribeQuerySuggestionsBlockListResponse::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIDescribeQuerySuggestionsBlockListResponse::getName() const {
    return m_name;
}
void OAIDescribeQuerySuggestionsBlockListResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDescribeQuerySuggestionsBlockListResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDescribeQuerySuggestionsBlockListResponse::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDescribeQuerySuggestionsBlockListResponse::getDescription() const {
    return m_description;
}
void OAIDescribeQuerySuggestionsBlockListResponse::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDescribeQuerySuggestionsBlockListResponse::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDescribeQuerySuggestionsBlockListResponse::is_description_Valid() const{
    return m_description_isValid;
}

OAIQuerySuggestionsBlockListStatus OAIDescribeQuerySuggestionsBlockListResponse::getStatus() const {
    return m_status;
}
void OAIDescribeQuerySuggestionsBlockListResponse::setStatus(const OAIQuerySuggestionsBlockListStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeQuerySuggestionsBlockListResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeQuerySuggestionsBlockListResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDescribeQuerySuggestionsBlockListResponse::getErrorMessage() const {
    return m_error_message;
}
void OAIDescribeQuerySuggestionsBlockListResponse::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIDescribeQuerySuggestionsBlockListResponse::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIDescribeQuerySuggestionsBlockListResponse::is_error_message_Valid() const{
    return m_error_message_isValid;
}

QDateTime OAIDescribeQuerySuggestionsBlockListResponse::getCreatedAt() const {
    return m_created_at;
}
void OAIDescribeQuerySuggestionsBlockListResponse::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIDescribeQuerySuggestionsBlockListResponse::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIDescribeQuerySuggestionsBlockListResponse::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAIDescribeQuerySuggestionsBlockListResponse::getUpdatedAt() const {
    return m_updated_at;
}
void OAIDescribeQuerySuggestionsBlockListResponse::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIDescribeQuerySuggestionsBlockListResponse::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIDescribeQuerySuggestionsBlockListResponse::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

OAIDescribeQuerySuggestionsBlockListResponse_SourceS3Path OAIDescribeQuerySuggestionsBlockListResponse::getSourceS3Path() const {
    return m_source_s3_path;
}
void OAIDescribeQuerySuggestionsBlockListResponse::setSourceS3Path(const OAIDescribeQuerySuggestionsBlockListResponse_SourceS3Path &source_s3_path) {
    m_source_s3_path = source_s3_path;
    m_source_s3_path_isSet = true;
}

bool OAIDescribeQuerySuggestionsBlockListResponse::is_source_s3_path_Set() const{
    return m_source_s3_path_isSet;
}

bool OAIDescribeQuerySuggestionsBlockListResponse::is_source_s3_path_Valid() const{
    return m_source_s3_path_isValid;
}

qint32 OAIDescribeQuerySuggestionsBlockListResponse::getItemCount() const {
    return m_item_count;
}
void OAIDescribeQuerySuggestionsBlockListResponse::setItemCount(const qint32 &item_count) {
    m_item_count = item_count;
    m_item_count_isSet = true;
}

bool OAIDescribeQuerySuggestionsBlockListResponse::is_item_count_Set() const{
    return m_item_count_isSet;
}

bool OAIDescribeQuerySuggestionsBlockListResponse::is_item_count_Valid() const{
    return m_item_count_isValid;
}

qint32 OAIDescribeQuerySuggestionsBlockListResponse::getFileSizeBytes() const {
    return m_file_size_bytes;
}
void OAIDescribeQuerySuggestionsBlockListResponse::setFileSizeBytes(const qint32 &file_size_bytes) {
    m_file_size_bytes = file_size_bytes;
    m_file_size_bytes_isSet = true;
}

bool OAIDescribeQuerySuggestionsBlockListResponse::is_file_size_bytes_Set() const{
    return m_file_size_bytes_isSet;
}

bool OAIDescribeQuerySuggestionsBlockListResponse::is_file_size_bytes_Valid() const{
    return m_file_size_bytes_isValid;
}

QString OAIDescribeQuerySuggestionsBlockListResponse::getRoleArn() const {
    return m_role_arn;
}
void OAIDescribeQuerySuggestionsBlockListResponse::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIDescribeQuerySuggestionsBlockListResponse::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIDescribeQuerySuggestionsBlockListResponse::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

bool OAIDescribeQuerySuggestionsBlockListResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_index_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_s3_path.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_size_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeQuerySuggestionsBlockListResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
