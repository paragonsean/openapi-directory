/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDatabaseConfiguration.h
 *
 * Provides the configuration information to connect to a index. 
 */

#ifndef OAIDatabaseConfiguration_H
#define OAIDatabaseConfiguration_H

#include <QJsonObject>

#include "OAIDataSourceVpcConfiguration.h"
#include "OAIDatabaseConfiguration_AclConfiguration.h"
#include "OAIDatabaseConfiguration_ColumnConfiguration.h"
#include "OAIDatabaseConfiguration_ConnectionConfiguration.h"
#include "OAIDatabaseConfiguration_SqlConfiguration.h"
#include "OAIDatabaseEngineType.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDatabaseConfiguration_ConnectionConfiguration;
class OAIDataSourceVpcConfiguration;
class OAIDatabaseConfiguration_ColumnConfiguration;
class OAIDatabaseConfiguration_AclConfiguration;
class OAIDatabaseConfiguration_SqlConfiguration;

class OAIDatabaseConfiguration : public OAIObject {
public:
    OAIDatabaseConfiguration();
    OAIDatabaseConfiguration(QString json);
    ~OAIDatabaseConfiguration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIDatabaseEngineType getDatabaseEngineType() const;
    void setDatabaseEngineType(const OAIDatabaseEngineType &database_engine_type);
    bool is_database_engine_type_Set() const;
    bool is_database_engine_type_Valid() const;

    OAIDatabaseConfiguration_ConnectionConfiguration getConnectionConfiguration() const;
    void setConnectionConfiguration(const OAIDatabaseConfiguration_ConnectionConfiguration &connection_configuration);
    bool is_connection_configuration_Set() const;
    bool is_connection_configuration_Valid() const;

    OAIDataSourceVpcConfiguration getVpcConfiguration() const;
    void setVpcConfiguration(const OAIDataSourceVpcConfiguration &vpc_configuration);
    bool is_vpc_configuration_Set() const;
    bool is_vpc_configuration_Valid() const;

    OAIDatabaseConfiguration_ColumnConfiguration getColumnConfiguration() const;
    void setColumnConfiguration(const OAIDatabaseConfiguration_ColumnConfiguration &column_configuration);
    bool is_column_configuration_Set() const;
    bool is_column_configuration_Valid() const;

    OAIDatabaseConfiguration_AclConfiguration getAclConfiguration() const;
    void setAclConfiguration(const OAIDatabaseConfiguration_AclConfiguration &acl_configuration);
    bool is_acl_configuration_Set() const;
    bool is_acl_configuration_Valid() const;

    OAIDatabaseConfiguration_SqlConfiguration getSqlConfiguration() const;
    void setSqlConfiguration(const OAIDatabaseConfiguration_SqlConfiguration &sql_configuration);
    bool is_sql_configuration_Set() const;
    bool is_sql_configuration_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIDatabaseEngineType m_database_engine_type;
    bool m_database_engine_type_isSet;
    bool m_database_engine_type_isValid;

    OAIDatabaseConfiguration_ConnectionConfiguration m_connection_configuration;
    bool m_connection_configuration_isSet;
    bool m_connection_configuration_isValid;

    OAIDataSourceVpcConfiguration m_vpc_configuration;
    bool m_vpc_configuration_isSet;
    bool m_vpc_configuration_isValid;

    OAIDatabaseConfiguration_ColumnConfiguration m_column_configuration;
    bool m_column_configuration_isSet;
    bool m_column_configuration_isValid;

    OAIDatabaseConfiguration_AclConfiguration m_acl_configuration;
    bool m_acl_configuration_isSet;
    bool m_acl_configuration_isValid;

    OAIDatabaseConfiguration_SqlConfiguration m_sql_configuration;
    bool m_sql_configuration_isSet;
    bool m_sql_configuration_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDatabaseConfiguration)

#endif // OAIDatabaseConfiguration_H
