/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOneDriveUsers.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOneDriveUsers::OAIOneDriveUsers(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOneDriveUsers::OAIOneDriveUsers() {
    this->initializeModel();
}

OAIOneDriveUsers::~OAIOneDriveUsers() {}

void OAIOneDriveUsers::initializeModel() {

    m_one_drive_user_list_isSet = false;
    m_one_drive_user_list_isValid = false;

    m_one_drive_user_s3_path_isSet = false;
    m_one_drive_user_s3_path_isValid = false;
}

void OAIOneDriveUsers::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOneDriveUsers::fromJsonObject(QJsonObject json) {

    m_one_drive_user_list_isValid = ::OpenAPI::fromJsonValue(m_one_drive_user_list, json[QString("OneDriveUserList")]);
    m_one_drive_user_list_isSet = !json[QString("OneDriveUserList")].isNull() && m_one_drive_user_list_isValid;

    m_one_drive_user_s3_path_isValid = ::OpenAPI::fromJsonValue(m_one_drive_user_s3_path, json[QString("OneDriveUserS3Path")]);
    m_one_drive_user_s3_path_isSet = !json[QString("OneDriveUserS3Path")].isNull() && m_one_drive_user_s3_path_isValid;
}

QString OAIOneDriveUsers::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOneDriveUsers::asJsonObject() const {
    QJsonObject obj;
    if (m_one_drive_user_list.isSet()) {
        obj.insert(QString("OneDriveUserList"), ::OpenAPI::toJsonValue(m_one_drive_user_list));
    }
    if (m_one_drive_user_s3_path.isSet()) {
        obj.insert(QString("OneDriveUserS3Path"), ::OpenAPI::toJsonValue(m_one_drive_user_s3_path));
    }
    return obj;
}

QList OAIOneDriveUsers::getOneDriveUserList() const {
    return m_one_drive_user_list;
}
void OAIOneDriveUsers::setOneDriveUserList(const QList &one_drive_user_list) {
    m_one_drive_user_list = one_drive_user_list;
    m_one_drive_user_list_isSet = true;
}

bool OAIOneDriveUsers::is_one_drive_user_list_Set() const{
    return m_one_drive_user_list_isSet;
}

bool OAIOneDriveUsers::is_one_drive_user_list_Valid() const{
    return m_one_drive_user_list_isValid;
}

OAIOneDriveUsers_OneDriveUserS3Path OAIOneDriveUsers::getOneDriveUserS3Path() const {
    return m_one_drive_user_s3_path;
}
void OAIOneDriveUsers::setOneDriveUserS3Path(const OAIOneDriveUsers_OneDriveUserS3Path &one_drive_user_s3_path) {
    m_one_drive_user_s3_path = one_drive_user_s3_path;
    m_one_drive_user_s3_path_isSet = true;
}

bool OAIOneDriveUsers::is_one_drive_user_s3_path_Set() const{
    return m_one_drive_user_s3_path_isSet;
}

bool OAIOneDriveUsers::is_one_drive_user_s3_path_Valid() const{
    return m_one_drive_user_s3_path_isValid;
}

bool OAIOneDriveUsers::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_one_drive_user_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_one_drive_user_s3_path.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOneDriveUsers::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
