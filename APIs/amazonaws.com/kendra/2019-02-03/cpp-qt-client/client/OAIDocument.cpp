/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocument.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocument::OAIDocument(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocument::OAIDocument() {
    this->initializeModel();
}

OAIDocument::~OAIDocument() {}

void OAIDocument::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_blob_isSet = false;
    m_blob_isValid = false;

    m_s3_path_isSet = false;
    m_s3_path_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_access_control_list_isSet = false;
    m_access_control_list_isValid = false;

    m_hierarchical_access_control_list_isSet = false;
    m_hierarchical_access_control_list_isValid = false;

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_access_control_configuration_id_isSet = false;
    m_access_control_configuration_id_isValid = false;
}

void OAIDocument::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocument::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("Title")]);
    m_title_isSet = !json[QString("Title")].isNull() && m_title_isValid;

    m_blob_isValid = ::OpenAPI::fromJsonValue(m_blob, json[QString("Blob")]);
    m_blob_isSet = !json[QString("Blob")].isNull() && m_blob_isValid;

    m_s3_path_isValid = ::OpenAPI::fromJsonValue(m_s3_path, json[QString("S3Path")]);
    m_s3_path_isSet = !json[QString("S3Path")].isNull() && m_s3_path_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("Attributes")]);
    m_attributes_isSet = !json[QString("Attributes")].isNull() && m_attributes_isValid;

    m_access_control_list_isValid = ::OpenAPI::fromJsonValue(m_access_control_list, json[QString("AccessControlList")]);
    m_access_control_list_isSet = !json[QString("AccessControlList")].isNull() && m_access_control_list_isValid;

    m_hierarchical_access_control_list_isValid = ::OpenAPI::fromJsonValue(m_hierarchical_access_control_list, json[QString("HierarchicalAccessControlList")]);
    m_hierarchical_access_control_list_isSet = !json[QString("HierarchicalAccessControlList")].isNull() && m_hierarchical_access_control_list_isValid;

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("ContentType")]);
    m_content_type_isSet = !json[QString("ContentType")].isNull() && m_content_type_isValid;

    m_access_control_configuration_id_isValid = ::OpenAPI::fromJsonValue(m_access_control_configuration_id, json[QString("AccessControlConfigurationId")]);
    m_access_control_configuration_id_isSet = !json[QString("AccessControlConfigurationId")].isNull() && m_access_control_configuration_id_isValid;
}

QString OAIDocument::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocument::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_title_isSet) {
        obj.insert(QString("Title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_blob_isSet) {
        obj.insert(QString("Blob"), ::OpenAPI::toJsonValue(m_blob));
    }
    if (m_s3_path.isSet()) {
        obj.insert(QString("S3Path"), ::OpenAPI::toJsonValue(m_s3_path));
    }
    if (m_attributes.isSet()) {
        obj.insert(QString("Attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_access_control_list.isSet()) {
        obj.insert(QString("AccessControlList"), ::OpenAPI::toJsonValue(m_access_control_list));
    }
    if (m_hierarchical_access_control_list.isSet()) {
        obj.insert(QString("HierarchicalAccessControlList"), ::OpenAPI::toJsonValue(m_hierarchical_access_control_list));
    }
    if (m_content_type.isSet()) {
        obj.insert(QString("ContentType"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_access_control_configuration_id_isSet) {
        obj.insert(QString("AccessControlConfigurationId"), ::OpenAPI::toJsonValue(m_access_control_configuration_id));
    }
    return obj;
}

QString OAIDocument::getId() const {
    return m_id;
}
void OAIDocument::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDocument::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDocument::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIDocument::getTitle() const {
    return m_title;
}
void OAIDocument::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIDocument::is_title_Set() const{
    return m_title_isSet;
}

bool OAIDocument::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIDocument::getBlob() const {
    return m_blob;
}
void OAIDocument::setBlob(const QString &blob) {
    m_blob = blob;
    m_blob_isSet = true;
}

bool OAIDocument::is_blob_Set() const{
    return m_blob_isSet;
}

bool OAIDocument::is_blob_Valid() const{
    return m_blob_isValid;
}

OAIS3Path OAIDocument::getS3Path() const {
    return m_s3_path;
}
void OAIDocument::setS3Path(const OAIS3Path &s3_path) {
    m_s3_path = s3_path;
    m_s3_path_isSet = true;
}

bool OAIDocument::is_s3_path_Set() const{
    return m_s3_path_isSet;
}

bool OAIDocument::is_s3_path_Valid() const{
    return m_s3_path_isValid;
}

QList OAIDocument::getAttributes() const {
    return m_attributes;
}
void OAIDocument::setAttributes(const QList &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIDocument::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIDocument::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QList OAIDocument::getAccessControlList() const {
    return m_access_control_list;
}
void OAIDocument::setAccessControlList(const QList &access_control_list) {
    m_access_control_list = access_control_list;
    m_access_control_list_isSet = true;
}

bool OAIDocument::is_access_control_list_Set() const{
    return m_access_control_list_isSet;
}

bool OAIDocument::is_access_control_list_Valid() const{
    return m_access_control_list_isValid;
}

QList OAIDocument::getHierarchicalAccessControlList() const {
    return m_hierarchical_access_control_list;
}
void OAIDocument::setHierarchicalAccessControlList(const QList &hierarchical_access_control_list) {
    m_hierarchical_access_control_list = hierarchical_access_control_list;
    m_hierarchical_access_control_list_isSet = true;
}

bool OAIDocument::is_hierarchical_access_control_list_Set() const{
    return m_hierarchical_access_control_list_isSet;
}

bool OAIDocument::is_hierarchical_access_control_list_Valid() const{
    return m_hierarchical_access_control_list_isValid;
}

OAIContentType OAIDocument::getContentType() const {
    return m_content_type;
}
void OAIDocument::setContentType(const OAIContentType &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAIDocument::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIDocument::is_content_type_Valid() const{
    return m_content_type_isValid;
}

QString OAIDocument::getAccessControlConfigurationId() const {
    return m_access_control_configuration_id;
}
void OAIDocument::setAccessControlConfigurationId(const QString &access_control_configuration_id) {
    m_access_control_configuration_id = access_control_configuration_id;
    m_access_control_configuration_id_isSet = true;
}

bool OAIDocument::is_access_control_configuration_id_Set() const{
    return m_access_control_configuration_id_isSet;
}

bool OAIDocument::is_access_control_configuration_id_Valid() const{
    return m_access_control_configuration_id_isValid;
}

bool OAIDocument::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blob_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_path.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_control_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hierarchical_access_control_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_control_configuration_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocument::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && true;
}

} // namespace OpenAPI
