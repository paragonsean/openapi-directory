/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateThesaurusRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateThesaurusRequest::OAIUpdateThesaurusRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateThesaurusRequest::OAIUpdateThesaurusRequest() {
    this->initializeModel();
}

OAIUpdateThesaurusRequest::~OAIUpdateThesaurusRequest() {}

void OAIUpdateThesaurusRequest::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_index_id_isSet = false;
    m_index_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_source_s3_path_isSet = false;
    m_source_s3_path_isValid = false;
}

void OAIUpdateThesaurusRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateThesaurusRequest::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_index_id_isValid = ::OpenAPI::fromJsonValue(m_index_id, json[QString("IndexId")]);
    m_index_id_isSet = !json[QString("IndexId")].isNull() && m_index_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;

    m_source_s3_path_isValid = ::OpenAPI::fromJsonValue(m_source_s3_path, json[QString("SourceS3Path")]);
    m_source_s3_path_isSet = !json[QString("SourceS3Path")].isNull() && m_source_s3_path_isValid;
}

QString OAIUpdateThesaurusRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateThesaurusRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_index_id_isSet) {
        obj.insert(QString("IndexId"), ::OpenAPI::toJsonValue(m_index_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_source_s3_path.isSet()) {
        obj.insert(QString("SourceS3Path"), ::OpenAPI::toJsonValue(m_source_s3_path));
    }
    return obj;
}

QString OAIUpdateThesaurusRequest::getId() const {
    return m_id;
}
void OAIUpdateThesaurusRequest::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUpdateThesaurusRequest::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUpdateThesaurusRequest::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIUpdateThesaurusRequest::getName() const {
    return m_name;
}
void OAIUpdateThesaurusRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdateThesaurusRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateThesaurusRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUpdateThesaurusRequest::getIndexId() const {
    return m_index_id;
}
void OAIUpdateThesaurusRequest::setIndexId(const QString &index_id) {
    m_index_id = index_id;
    m_index_id_isSet = true;
}

bool OAIUpdateThesaurusRequest::is_index_id_Set() const{
    return m_index_id_isSet;
}

bool OAIUpdateThesaurusRequest::is_index_id_Valid() const{
    return m_index_id_isValid;
}

QString OAIUpdateThesaurusRequest::getDescription() const {
    return m_description;
}
void OAIUpdateThesaurusRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpdateThesaurusRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdateThesaurusRequest::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIUpdateThesaurusRequest::getRoleArn() const {
    return m_role_arn;
}
void OAIUpdateThesaurusRequest::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIUpdateThesaurusRequest::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIUpdateThesaurusRequest::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

OAIS3Path OAIUpdateThesaurusRequest::getSourceS3Path() const {
    return m_source_s3_path;
}
void OAIUpdateThesaurusRequest::setSourceS3Path(const OAIS3Path &source_s3_path) {
    m_source_s3_path = source_s3_path;
    m_source_s3_path_isSet = true;
}

bool OAIUpdateThesaurusRequest::is_source_s3_path_Set() const{
    return m_source_s3_path_isSet;
}

bool OAIUpdateThesaurusRequest::is_source_s3_path_Valid() const{
    return m_source_s3_path_isValid;
}

bool OAIUpdateThesaurusRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_s3_path.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateThesaurusRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_index_id_isValid && true;
}

} // namespace OpenAPI
