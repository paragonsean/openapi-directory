/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISourceDocument.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISourceDocument::OAISourceDocument(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISourceDocument::OAISourceDocument() {
    this->initializeModel();
}

OAISourceDocument::~OAISourceDocument() {}

void OAISourceDocument::initializeModel() {

    m_document_id_isSet = false;
    m_document_id_isValid = false;

    m_suggestion_attributes_isSet = false;
    m_suggestion_attributes_isValid = false;

    m_additional_attributes_isSet = false;
    m_additional_attributes_isValid = false;
}

void OAISourceDocument::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISourceDocument::fromJsonObject(QJsonObject json) {

    m_document_id_isValid = ::OpenAPI::fromJsonValue(m_document_id, json[QString("DocumentId")]);
    m_document_id_isSet = !json[QString("DocumentId")].isNull() && m_document_id_isValid;

    m_suggestion_attributes_isValid = ::OpenAPI::fromJsonValue(m_suggestion_attributes, json[QString("SuggestionAttributes")]);
    m_suggestion_attributes_isSet = !json[QString("SuggestionAttributes")].isNull() && m_suggestion_attributes_isValid;

    m_additional_attributes_isValid = ::OpenAPI::fromJsonValue(m_additional_attributes, json[QString("AdditionalAttributes")]);
    m_additional_attributes_isSet = !json[QString("AdditionalAttributes")].isNull() && m_additional_attributes_isValid;
}

QString OAISourceDocument::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISourceDocument::asJsonObject() const {
    QJsonObject obj;
    if (m_document_id_isSet) {
        obj.insert(QString("DocumentId"), ::OpenAPI::toJsonValue(m_document_id));
    }
    if (m_suggestion_attributes.isSet()) {
        obj.insert(QString("SuggestionAttributes"), ::OpenAPI::toJsonValue(m_suggestion_attributes));
    }
    if (m_additional_attributes.isSet()) {
        obj.insert(QString("AdditionalAttributes"), ::OpenAPI::toJsonValue(m_additional_attributes));
    }
    return obj;
}

QString OAISourceDocument::getDocumentId() const {
    return m_document_id;
}
void OAISourceDocument::setDocumentId(const QString &document_id) {
    m_document_id = document_id;
    m_document_id_isSet = true;
}

bool OAISourceDocument::is_document_id_Set() const{
    return m_document_id_isSet;
}

bool OAISourceDocument::is_document_id_Valid() const{
    return m_document_id_isValid;
}

QList OAISourceDocument::getSuggestionAttributes() const {
    return m_suggestion_attributes;
}
void OAISourceDocument::setSuggestionAttributes(const QList &suggestion_attributes) {
    m_suggestion_attributes = suggestion_attributes;
    m_suggestion_attributes_isSet = true;
}

bool OAISourceDocument::is_suggestion_attributes_Set() const{
    return m_suggestion_attributes_isSet;
}

bool OAISourceDocument::is_suggestion_attributes_Valid() const{
    return m_suggestion_attributes_isValid;
}

QList OAISourceDocument::getAdditionalAttributes() const {
    return m_additional_attributes;
}
void OAISourceDocument::setAdditionalAttributes(const QList &additional_attributes) {
    m_additional_attributes = additional_attributes;
    m_additional_attributes_isSet = true;
}

bool OAISourceDocument::is_additional_attributes_Set() const{
    return m_additional_attributes_isSet;
}

bool OAISourceDocument::is_additional_attributes_Valid() const{
    return m_additional_attributes_isValid;
}

bool OAISourceDocument::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_document_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suggestion_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISourceDocument::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
