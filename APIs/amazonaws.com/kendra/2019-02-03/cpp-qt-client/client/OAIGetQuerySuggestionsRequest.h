/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetQuerySuggestionsRequest.h
 *
 * 
 */

#ifndef OAIGetQuerySuggestionsRequest_H
#define OAIGetQuerySuggestionsRequest_H

#include <QJsonObject>

#include "OAIGetQuerySuggestionsRequest_AttributeSuggestionsConfig.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGetQuerySuggestionsRequest_AttributeSuggestionsConfig;

class OAIGetQuerySuggestionsRequest : public OAIObject {
public:
    OAIGetQuerySuggestionsRequest();
    OAIGetQuerySuggestionsRequest(QString json);
    ~OAIGetQuerySuggestionsRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getIndexId() const;
    void setIndexId(const QString &index_id);
    bool is_index_id_Set() const;
    bool is_index_id_Valid() const;

    QString getQueryText() const;
    void setQueryText(const QString &query_text);
    bool is_query_text_Set() const;
    bool is_query_text_Valid() const;

    qint32 getMaxSuggestionsCount() const;
    void setMaxSuggestionsCount(const qint32 &max_suggestions_count);
    bool is_max_suggestions_count_Set() const;
    bool is_max_suggestions_count_Valid() const;

    QList getSuggestionTypes() const;
    void setSuggestionTypes(const QList &suggestion_types);
    bool is_suggestion_types_Set() const;
    bool is_suggestion_types_Valid() const;

    OAIGetQuerySuggestionsRequest_AttributeSuggestionsConfig getAttributeSuggestionsConfig() const;
    void setAttributeSuggestionsConfig(const OAIGetQuerySuggestionsRequest_AttributeSuggestionsConfig &attribute_suggestions_config);
    bool is_attribute_suggestions_config_Set() const;
    bool is_attribute_suggestions_config_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_index_id;
    bool m_index_id_isSet;
    bool m_index_id_isValid;

    QString m_query_text;
    bool m_query_text_isSet;
    bool m_query_text_isValid;

    qint32 m_max_suggestions_count;
    bool m_max_suggestions_count_isSet;
    bool m_max_suggestions_count_isValid;

    QList m_suggestion_types;
    bool m_suggestion_types_isSet;
    bool m_suggestion_types_isValid;

    OAIGetQuerySuggestionsRequest_AttributeSuggestionsConfig m_attribute_suggestions_config;
    bool m_attribute_suggestions_config_isSet;
    bool m_attribute_suggestions_config_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetQuerySuggestionsRequest)

#endif // OAIGetQuerySuggestionsRequest_H
