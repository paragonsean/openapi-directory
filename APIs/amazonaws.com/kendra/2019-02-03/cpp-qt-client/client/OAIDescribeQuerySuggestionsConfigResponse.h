/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDescribeQuerySuggestionsConfigResponse.h
 *
 * 
 */

#ifndef OAIDescribeQuerySuggestionsConfigResponse_H
#define OAIDescribeQuerySuggestionsConfigResponse_H

#include <QJsonObject>

#include "OAIDescribeQuerySuggestionsConfigResponse_AttributeSuggestionsConfig.h"
#include "OAIMode.h"
#include "OAIQuerySuggestionsStatus.h"
#include <QDateTime>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDescribeQuerySuggestionsConfigResponse_AttributeSuggestionsConfig;

class OAIDescribeQuerySuggestionsConfigResponse : public OAIObject {
public:
    OAIDescribeQuerySuggestionsConfigResponse();
    OAIDescribeQuerySuggestionsConfigResponse(QString json);
    ~OAIDescribeQuerySuggestionsConfigResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIMode getMode() const;
    void setMode(const OAIMode &mode);
    bool is_mode_Set() const;
    bool is_mode_Valid() const;

    OAIQuerySuggestionsStatus getStatus() const;
    void setStatus(const OAIQuerySuggestionsStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    qint32 getQueryLogLookBackWindowInDays() const;
    void setQueryLogLookBackWindowInDays(const qint32 &query_log_look_back_window_in_days);
    bool is_query_log_look_back_window_in_days_Set() const;
    bool is_query_log_look_back_window_in_days_Valid() const;

    bool getIncludeQueriesWithoutUserInformation() const;
    void setIncludeQueriesWithoutUserInformation(const bool &include_queries_without_user_information);
    bool is_include_queries_without_user_information_Set() const;
    bool is_include_queries_without_user_information_Valid() const;

    qint32 getMinimumNumberOfQueryingUsers() const;
    void setMinimumNumberOfQueryingUsers(const qint32 &minimum_number_of_querying_users);
    bool is_minimum_number_of_querying_users_Set() const;
    bool is_minimum_number_of_querying_users_Valid() const;

    qint32 getMinimumQueryCount() const;
    void setMinimumQueryCount(const qint32 &minimum_query_count);
    bool is_minimum_query_count_Set() const;
    bool is_minimum_query_count_Valid() const;

    QDateTime getLastSuggestionsBuildTime() const;
    void setLastSuggestionsBuildTime(const QDateTime &last_suggestions_build_time);
    bool is_last_suggestions_build_time_Set() const;
    bool is_last_suggestions_build_time_Valid() const;

    QDateTime getLastClearTime() const;
    void setLastClearTime(const QDateTime &last_clear_time);
    bool is_last_clear_time_Set() const;
    bool is_last_clear_time_Valid() const;

    qint32 getTotalSuggestionsCount() const;
    void setTotalSuggestionsCount(const qint32 &total_suggestions_count);
    bool is_total_suggestions_count_Set() const;
    bool is_total_suggestions_count_Valid() const;

    OAIDescribeQuerySuggestionsConfigResponse_AttributeSuggestionsConfig getAttributeSuggestionsConfig() const;
    void setAttributeSuggestionsConfig(const OAIDescribeQuerySuggestionsConfigResponse_AttributeSuggestionsConfig &attribute_suggestions_config);
    bool is_attribute_suggestions_config_Set() const;
    bool is_attribute_suggestions_config_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIMode m_mode;
    bool m_mode_isSet;
    bool m_mode_isValid;

    OAIQuerySuggestionsStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    qint32 m_query_log_look_back_window_in_days;
    bool m_query_log_look_back_window_in_days_isSet;
    bool m_query_log_look_back_window_in_days_isValid;

    bool m_include_queries_without_user_information;
    bool m_include_queries_without_user_information_isSet;
    bool m_include_queries_without_user_information_isValid;

    qint32 m_minimum_number_of_querying_users;
    bool m_minimum_number_of_querying_users_isSet;
    bool m_minimum_number_of_querying_users_isValid;

    qint32 m_minimum_query_count;
    bool m_minimum_query_count_isSet;
    bool m_minimum_query_count_isValid;

    QDateTime m_last_suggestions_build_time;
    bool m_last_suggestions_build_time_isSet;
    bool m_last_suggestions_build_time_isValid;

    QDateTime m_last_clear_time;
    bool m_last_clear_time_isSet;
    bool m_last_clear_time_isValid;

    qint32 m_total_suggestions_count;
    bool m_total_suggestions_count_isSet;
    bool m_total_suggestions_count_isValid;

    OAIDescribeQuerySuggestionsConfigResponse_AttributeSuggestionsConfig m_attribute_suggestions_config;
    bool m_attribute_suggestions_config_isSet;
    bool m_attribute_suggestions_config_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDescribeQuerySuggestionsConfigResponse)

#endif // OAIDescribeQuerySuggestionsConfigResponse_H
