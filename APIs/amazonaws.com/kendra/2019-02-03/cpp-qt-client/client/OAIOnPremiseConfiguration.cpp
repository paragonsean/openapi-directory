/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOnPremiseConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOnPremiseConfiguration::OAIOnPremiseConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOnPremiseConfiguration::OAIOnPremiseConfiguration() {
    this->initializeModel();
}

OAIOnPremiseConfiguration::~OAIOnPremiseConfiguration() {}

void OAIOnPremiseConfiguration::initializeModel() {

    m_host_url_isSet = false;
    m_host_url_isValid = false;

    m_organization_name_isSet = false;
    m_organization_name_isValid = false;

    m_ssl_certificate_s3_path_isSet = false;
    m_ssl_certificate_s3_path_isValid = false;
}

void OAIOnPremiseConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOnPremiseConfiguration::fromJsonObject(QJsonObject json) {

    m_host_url_isValid = ::OpenAPI::fromJsonValue(m_host_url, json[QString("HostUrl")]);
    m_host_url_isSet = !json[QString("HostUrl")].isNull() && m_host_url_isValid;

    m_organization_name_isValid = ::OpenAPI::fromJsonValue(m_organization_name, json[QString("OrganizationName")]);
    m_organization_name_isSet = !json[QString("OrganizationName")].isNull() && m_organization_name_isValid;

    m_ssl_certificate_s3_path_isValid = ::OpenAPI::fromJsonValue(m_ssl_certificate_s3_path, json[QString("SslCertificateS3Path")]);
    m_ssl_certificate_s3_path_isSet = !json[QString("SslCertificateS3Path")].isNull() && m_ssl_certificate_s3_path_isValid;
}

QString OAIOnPremiseConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOnPremiseConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_host_url_isSet) {
        obj.insert(QString("HostUrl"), ::OpenAPI::toJsonValue(m_host_url));
    }
    if (m_organization_name_isSet) {
        obj.insert(QString("OrganizationName"), ::OpenAPI::toJsonValue(m_organization_name));
    }
    if (m_ssl_certificate_s3_path.isSet()) {
        obj.insert(QString("SslCertificateS3Path"), ::OpenAPI::toJsonValue(m_ssl_certificate_s3_path));
    }
    return obj;
}

QString OAIOnPremiseConfiguration::getHostUrl() const {
    return m_host_url;
}
void OAIOnPremiseConfiguration::setHostUrl(const QString &host_url) {
    m_host_url = host_url;
    m_host_url_isSet = true;
}

bool OAIOnPremiseConfiguration::is_host_url_Set() const{
    return m_host_url_isSet;
}

bool OAIOnPremiseConfiguration::is_host_url_Valid() const{
    return m_host_url_isValid;
}

QString OAIOnPremiseConfiguration::getOrganizationName() const {
    return m_organization_name;
}
void OAIOnPremiseConfiguration::setOrganizationName(const QString &organization_name) {
    m_organization_name = organization_name;
    m_organization_name_isSet = true;
}

bool OAIOnPremiseConfiguration::is_organization_name_Set() const{
    return m_organization_name_isSet;
}

bool OAIOnPremiseConfiguration::is_organization_name_Valid() const{
    return m_organization_name_isValid;
}

OAIOnPremiseConfiguration_SslCertificateS3Path OAIOnPremiseConfiguration::getSslCertificateS3Path() const {
    return m_ssl_certificate_s3_path;
}
void OAIOnPremiseConfiguration::setSslCertificateS3Path(const OAIOnPremiseConfiguration_SslCertificateS3Path &ssl_certificate_s3_path) {
    m_ssl_certificate_s3_path = ssl_certificate_s3_path;
    m_ssl_certificate_s3_path_isSet = true;
}

bool OAIOnPremiseConfiguration::is_ssl_certificate_s3_path_Set() const{
    return m_ssl_certificate_s3_path_isSet;
}

bool OAIOnPremiseConfiguration::is_ssl_certificate_s3_path_Valid() const{
    return m_ssl_certificate_s3_path_isValid;
}

bool OAIOnPremiseConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_host_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssl_certificate_s3_path.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOnPremiseConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_host_url_isValid && m_organization_name_isValid && m_ssl_certificate_s3_path_isValid && true;
}

} // namespace OpenAPI
