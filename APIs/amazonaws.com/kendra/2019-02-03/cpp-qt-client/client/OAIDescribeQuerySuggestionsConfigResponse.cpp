/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeQuerySuggestionsConfigResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeQuerySuggestionsConfigResponse::OAIDescribeQuerySuggestionsConfigResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeQuerySuggestionsConfigResponse::OAIDescribeQuerySuggestionsConfigResponse() {
    this->initializeModel();
}

OAIDescribeQuerySuggestionsConfigResponse::~OAIDescribeQuerySuggestionsConfigResponse() {}

void OAIDescribeQuerySuggestionsConfigResponse::initializeModel() {

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_query_log_look_back_window_in_days_isSet = false;
    m_query_log_look_back_window_in_days_isValid = false;

    m_include_queries_without_user_information_isSet = false;
    m_include_queries_without_user_information_isValid = false;

    m_minimum_number_of_querying_users_isSet = false;
    m_minimum_number_of_querying_users_isValid = false;

    m_minimum_query_count_isSet = false;
    m_minimum_query_count_isValid = false;

    m_last_suggestions_build_time_isSet = false;
    m_last_suggestions_build_time_isValid = false;

    m_last_clear_time_isSet = false;
    m_last_clear_time_isValid = false;

    m_total_suggestions_count_isSet = false;
    m_total_suggestions_count_isValid = false;

    m_attribute_suggestions_config_isSet = false;
    m_attribute_suggestions_config_isValid = false;
}

void OAIDescribeQuerySuggestionsConfigResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeQuerySuggestionsConfigResponse::fromJsonObject(QJsonObject json) {

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("Mode")]);
    m_mode_isSet = !json[QString("Mode")].isNull() && m_mode_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_query_log_look_back_window_in_days_isValid = ::OpenAPI::fromJsonValue(m_query_log_look_back_window_in_days, json[QString("QueryLogLookBackWindowInDays")]);
    m_query_log_look_back_window_in_days_isSet = !json[QString("QueryLogLookBackWindowInDays")].isNull() && m_query_log_look_back_window_in_days_isValid;

    m_include_queries_without_user_information_isValid = ::OpenAPI::fromJsonValue(m_include_queries_without_user_information, json[QString("IncludeQueriesWithoutUserInformation")]);
    m_include_queries_without_user_information_isSet = !json[QString("IncludeQueriesWithoutUserInformation")].isNull() && m_include_queries_without_user_information_isValid;

    m_minimum_number_of_querying_users_isValid = ::OpenAPI::fromJsonValue(m_minimum_number_of_querying_users, json[QString("MinimumNumberOfQueryingUsers")]);
    m_minimum_number_of_querying_users_isSet = !json[QString("MinimumNumberOfQueryingUsers")].isNull() && m_minimum_number_of_querying_users_isValid;

    m_minimum_query_count_isValid = ::OpenAPI::fromJsonValue(m_minimum_query_count, json[QString("MinimumQueryCount")]);
    m_minimum_query_count_isSet = !json[QString("MinimumQueryCount")].isNull() && m_minimum_query_count_isValid;

    m_last_suggestions_build_time_isValid = ::OpenAPI::fromJsonValue(m_last_suggestions_build_time, json[QString("LastSuggestionsBuildTime")]);
    m_last_suggestions_build_time_isSet = !json[QString("LastSuggestionsBuildTime")].isNull() && m_last_suggestions_build_time_isValid;

    m_last_clear_time_isValid = ::OpenAPI::fromJsonValue(m_last_clear_time, json[QString("LastClearTime")]);
    m_last_clear_time_isSet = !json[QString("LastClearTime")].isNull() && m_last_clear_time_isValid;

    m_total_suggestions_count_isValid = ::OpenAPI::fromJsonValue(m_total_suggestions_count, json[QString("TotalSuggestionsCount")]);
    m_total_suggestions_count_isSet = !json[QString("TotalSuggestionsCount")].isNull() && m_total_suggestions_count_isValid;

    m_attribute_suggestions_config_isValid = ::OpenAPI::fromJsonValue(m_attribute_suggestions_config, json[QString("AttributeSuggestionsConfig")]);
    m_attribute_suggestions_config_isSet = !json[QString("AttributeSuggestionsConfig")].isNull() && m_attribute_suggestions_config_isValid;
}

QString OAIDescribeQuerySuggestionsConfigResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeQuerySuggestionsConfigResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_mode.isSet()) {
        obj.insert(QString("Mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_query_log_look_back_window_in_days_isSet) {
        obj.insert(QString("QueryLogLookBackWindowInDays"), ::OpenAPI::toJsonValue(m_query_log_look_back_window_in_days));
    }
    if (m_include_queries_without_user_information_isSet) {
        obj.insert(QString("IncludeQueriesWithoutUserInformation"), ::OpenAPI::toJsonValue(m_include_queries_without_user_information));
    }
    if (m_minimum_number_of_querying_users_isSet) {
        obj.insert(QString("MinimumNumberOfQueryingUsers"), ::OpenAPI::toJsonValue(m_minimum_number_of_querying_users));
    }
    if (m_minimum_query_count_isSet) {
        obj.insert(QString("MinimumQueryCount"), ::OpenAPI::toJsonValue(m_minimum_query_count));
    }
    if (m_last_suggestions_build_time_isSet) {
        obj.insert(QString("LastSuggestionsBuildTime"), ::OpenAPI::toJsonValue(m_last_suggestions_build_time));
    }
    if (m_last_clear_time_isSet) {
        obj.insert(QString("LastClearTime"), ::OpenAPI::toJsonValue(m_last_clear_time));
    }
    if (m_total_suggestions_count_isSet) {
        obj.insert(QString("TotalSuggestionsCount"), ::OpenAPI::toJsonValue(m_total_suggestions_count));
    }
    if (m_attribute_suggestions_config.isSet()) {
        obj.insert(QString("AttributeSuggestionsConfig"), ::OpenAPI::toJsonValue(m_attribute_suggestions_config));
    }
    return obj;
}

OAIMode OAIDescribeQuerySuggestionsConfigResponse::getMode() const {
    return m_mode;
}
void OAIDescribeQuerySuggestionsConfigResponse::setMode(const OAIMode &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAIDescribeQuerySuggestionsConfigResponse::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAIDescribeQuerySuggestionsConfigResponse::is_mode_Valid() const{
    return m_mode_isValid;
}

OAIQuerySuggestionsStatus OAIDescribeQuerySuggestionsConfigResponse::getStatus() const {
    return m_status;
}
void OAIDescribeQuerySuggestionsConfigResponse::setStatus(const OAIQuerySuggestionsStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeQuerySuggestionsConfigResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeQuerySuggestionsConfigResponse::is_status_Valid() const{
    return m_status_isValid;
}

qint32 OAIDescribeQuerySuggestionsConfigResponse::getQueryLogLookBackWindowInDays() const {
    return m_query_log_look_back_window_in_days;
}
void OAIDescribeQuerySuggestionsConfigResponse::setQueryLogLookBackWindowInDays(const qint32 &query_log_look_back_window_in_days) {
    m_query_log_look_back_window_in_days = query_log_look_back_window_in_days;
    m_query_log_look_back_window_in_days_isSet = true;
}

bool OAIDescribeQuerySuggestionsConfigResponse::is_query_log_look_back_window_in_days_Set() const{
    return m_query_log_look_back_window_in_days_isSet;
}

bool OAIDescribeQuerySuggestionsConfigResponse::is_query_log_look_back_window_in_days_Valid() const{
    return m_query_log_look_back_window_in_days_isValid;
}

bool OAIDescribeQuerySuggestionsConfigResponse::getIncludeQueriesWithoutUserInformation() const {
    return m_include_queries_without_user_information;
}
void OAIDescribeQuerySuggestionsConfigResponse::setIncludeQueriesWithoutUserInformation(const bool &include_queries_without_user_information) {
    m_include_queries_without_user_information = include_queries_without_user_information;
    m_include_queries_without_user_information_isSet = true;
}

bool OAIDescribeQuerySuggestionsConfigResponse::is_include_queries_without_user_information_Set() const{
    return m_include_queries_without_user_information_isSet;
}

bool OAIDescribeQuerySuggestionsConfigResponse::is_include_queries_without_user_information_Valid() const{
    return m_include_queries_without_user_information_isValid;
}

qint32 OAIDescribeQuerySuggestionsConfigResponse::getMinimumNumberOfQueryingUsers() const {
    return m_minimum_number_of_querying_users;
}
void OAIDescribeQuerySuggestionsConfigResponse::setMinimumNumberOfQueryingUsers(const qint32 &minimum_number_of_querying_users) {
    m_minimum_number_of_querying_users = minimum_number_of_querying_users;
    m_minimum_number_of_querying_users_isSet = true;
}

bool OAIDescribeQuerySuggestionsConfigResponse::is_minimum_number_of_querying_users_Set() const{
    return m_minimum_number_of_querying_users_isSet;
}

bool OAIDescribeQuerySuggestionsConfigResponse::is_minimum_number_of_querying_users_Valid() const{
    return m_minimum_number_of_querying_users_isValid;
}

qint32 OAIDescribeQuerySuggestionsConfigResponse::getMinimumQueryCount() const {
    return m_minimum_query_count;
}
void OAIDescribeQuerySuggestionsConfigResponse::setMinimumQueryCount(const qint32 &minimum_query_count) {
    m_minimum_query_count = minimum_query_count;
    m_minimum_query_count_isSet = true;
}

bool OAIDescribeQuerySuggestionsConfigResponse::is_minimum_query_count_Set() const{
    return m_minimum_query_count_isSet;
}

bool OAIDescribeQuerySuggestionsConfigResponse::is_minimum_query_count_Valid() const{
    return m_minimum_query_count_isValid;
}

QDateTime OAIDescribeQuerySuggestionsConfigResponse::getLastSuggestionsBuildTime() const {
    return m_last_suggestions_build_time;
}
void OAIDescribeQuerySuggestionsConfigResponse::setLastSuggestionsBuildTime(const QDateTime &last_suggestions_build_time) {
    m_last_suggestions_build_time = last_suggestions_build_time;
    m_last_suggestions_build_time_isSet = true;
}

bool OAIDescribeQuerySuggestionsConfigResponse::is_last_suggestions_build_time_Set() const{
    return m_last_suggestions_build_time_isSet;
}

bool OAIDescribeQuerySuggestionsConfigResponse::is_last_suggestions_build_time_Valid() const{
    return m_last_suggestions_build_time_isValid;
}

QDateTime OAIDescribeQuerySuggestionsConfigResponse::getLastClearTime() const {
    return m_last_clear_time;
}
void OAIDescribeQuerySuggestionsConfigResponse::setLastClearTime(const QDateTime &last_clear_time) {
    m_last_clear_time = last_clear_time;
    m_last_clear_time_isSet = true;
}

bool OAIDescribeQuerySuggestionsConfigResponse::is_last_clear_time_Set() const{
    return m_last_clear_time_isSet;
}

bool OAIDescribeQuerySuggestionsConfigResponse::is_last_clear_time_Valid() const{
    return m_last_clear_time_isValid;
}

qint32 OAIDescribeQuerySuggestionsConfigResponse::getTotalSuggestionsCount() const {
    return m_total_suggestions_count;
}
void OAIDescribeQuerySuggestionsConfigResponse::setTotalSuggestionsCount(const qint32 &total_suggestions_count) {
    m_total_suggestions_count = total_suggestions_count;
    m_total_suggestions_count_isSet = true;
}

bool OAIDescribeQuerySuggestionsConfigResponse::is_total_suggestions_count_Set() const{
    return m_total_suggestions_count_isSet;
}

bool OAIDescribeQuerySuggestionsConfigResponse::is_total_suggestions_count_Valid() const{
    return m_total_suggestions_count_isValid;
}

OAIDescribeQuerySuggestionsConfigResponse_AttributeSuggestionsConfig OAIDescribeQuerySuggestionsConfigResponse::getAttributeSuggestionsConfig() const {
    return m_attribute_suggestions_config;
}
void OAIDescribeQuerySuggestionsConfigResponse::setAttributeSuggestionsConfig(const OAIDescribeQuerySuggestionsConfigResponse_AttributeSuggestionsConfig &attribute_suggestions_config) {
    m_attribute_suggestions_config = attribute_suggestions_config;
    m_attribute_suggestions_config_isSet = true;
}

bool OAIDescribeQuerySuggestionsConfigResponse::is_attribute_suggestions_config_Set() const{
    return m_attribute_suggestions_config_isSet;
}

bool OAIDescribeQuerySuggestionsConfigResponse::is_attribute_suggestions_config_Valid() const{
    return m_attribute_suggestions_config_isValid;
}

bool OAIDescribeQuerySuggestionsConfigResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_log_look_back_window_in_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_queries_without_user_information_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_number_of_querying_users_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_query_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_suggestions_build_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_clear_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_suggestions_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attribute_suggestions_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeQuerySuggestionsConfigResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
