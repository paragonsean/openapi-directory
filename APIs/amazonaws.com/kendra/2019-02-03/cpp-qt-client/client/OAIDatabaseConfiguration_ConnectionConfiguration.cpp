/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatabaseConfiguration_ConnectionConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatabaseConfiguration_ConnectionConfiguration::OAIDatabaseConfiguration_ConnectionConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatabaseConfiguration_ConnectionConfiguration::OAIDatabaseConfiguration_ConnectionConfiguration() {
    this->initializeModel();
}

OAIDatabaseConfiguration_ConnectionConfiguration::~OAIDatabaseConfiguration_ConnectionConfiguration() {}

void OAIDatabaseConfiguration_ConnectionConfiguration::initializeModel() {

    m_database_host_isSet = false;
    m_database_host_isValid = false;

    m_database_port_isSet = false;
    m_database_port_isValid = false;

    m_database_name_isSet = false;
    m_database_name_isValid = false;

    m_table_name_isSet = false;
    m_table_name_isValid = false;

    m_secret_arn_isSet = false;
    m_secret_arn_isValid = false;
}

void OAIDatabaseConfiguration_ConnectionConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatabaseConfiguration_ConnectionConfiguration::fromJsonObject(QJsonObject json) {

    m_database_host_isValid = ::OpenAPI::fromJsonValue(m_database_host, json[QString("DatabaseHost")]);
    m_database_host_isSet = !json[QString("DatabaseHost")].isNull() && m_database_host_isValid;

    m_database_port_isValid = ::OpenAPI::fromJsonValue(m_database_port, json[QString("DatabasePort")]);
    m_database_port_isSet = !json[QString("DatabasePort")].isNull() && m_database_port_isValid;

    m_database_name_isValid = ::OpenAPI::fromJsonValue(m_database_name, json[QString("DatabaseName")]);
    m_database_name_isSet = !json[QString("DatabaseName")].isNull() && m_database_name_isValid;

    m_table_name_isValid = ::OpenAPI::fromJsonValue(m_table_name, json[QString("TableName")]);
    m_table_name_isSet = !json[QString("TableName")].isNull() && m_table_name_isValid;

    m_secret_arn_isValid = ::OpenAPI::fromJsonValue(m_secret_arn, json[QString("SecretArn")]);
    m_secret_arn_isSet = !json[QString("SecretArn")].isNull() && m_secret_arn_isValid;
}

QString OAIDatabaseConfiguration_ConnectionConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatabaseConfiguration_ConnectionConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_database_host_isSet) {
        obj.insert(QString("DatabaseHost"), ::OpenAPI::toJsonValue(m_database_host));
    }
    if (m_database_port_isSet) {
        obj.insert(QString("DatabasePort"), ::OpenAPI::toJsonValue(m_database_port));
    }
    if (m_database_name_isSet) {
        obj.insert(QString("DatabaseName"), ::OpenAPI::toJsonValue(m_database_name));
    }
    if (m_table_name_isSet) {
        obj.insert(QString("TableName"), ::OpenAPI::toJsonValue(m_table_name));
    }
    if (m_secret_arn_isSet) {
        obj.insert(QString("SecretArn"), ::OpenAPI::toJsonValue(m_secret_arn));
    }
    return obj;
}

QString OAIDatabaseConfiguration_ConnectionConfiguration::getDatabaseHost() const {
    return m_database_host;
}
void OAIDatabaseConfiguration_ConnectionConfiguration::setDatabaseHost(const QString &database_host) {
    m_database_host = database_host;
    m_database_host_isSet = true;
}

bool OAIDatabaseConfiguration_ConnectionConfiguration::is_database_host_Set() const{
    return m_database_host_isSet;
}

bool OAIDatabaseConfiguration_ConnectionConfiguration::is_database_host_Valid() const{
    return m_database_host_isValid;
}

qint32 OAIDatabaseConfiguration_ConnectionConfiguration::getDatabasePort() const {
    return m_database_port;
}
void OAIDatabaseConfiguration_ConnectionConfiguration::setDatabasePort(const qint32 &database_port) {
    m_database_port = database_port;
    m_database_port_isSet = true;
}

bool OAIDatabaseConfiguration_ConnectionConfiguration::is_database_port_Set() const{
    return m_database_port_isSet;
}

bool OAIDatabaseConfiguration_ConnectionConfiguration::is_database_port_Valid() const{
    return m_database_port_isValid;
}

QString OAIDatabaseConfiguration_ConnectionConfiguration::getDatabaseName() const {
    return m_database_name;
}
void OAIDatabaseConfiguration_ConnectionConfiguration::setDatabaseName(const QString &database_name) {
    m_database_name = database_name;
    m_database_name_isSet = true;
}

bool OAIDatabaseConfiguration_ConnectionConfiguration::is_database_name_Set() const{
    return m_database_name_isSet;
}

bool OAIDatabaseConfiguration_ConnectionConfiguration::is_database_name_Valid() const{
    return m_database_name_isValid;
}

QString OAIDatabaseConfiguration_ConnectionConfiguration::getTableName() const {
    return m_table_name;
}
void OAIDatabaseConfiguration_ConnectionConfiguration::setTableName(const QString &table_name) {
    m_table_name = table_name;
    m_table_name_isSet = true;
}

bool OAIDatabaseConfiguration_ConnectionConfiguration::is_table_name_Set() const{
    return m_table_name_isSet;
}

bool OAIDatabaseConfiguration_ConnectionConfiguration::is_table_name_Valid() const{
    return m_table_name_isValid;
}

QString OAIDatabaseConfiguration_ConnectionConfiguration::getSecretArn() const {
    return m_secret_arn;
}
void OAIDatabaseConfiguration_ConnectionConfiguration::setSecretArn(const QString &secret_arn) {
    m_secret_arn = secret_arn;
    m_secret_arn_isSet = true;
}

bool OAIDatabaseConfiguration_ConnectionConfiguration::is_secret_arn_Set() const{
    return m_secret_arn_isSet;
}

bool OAIDatabaseConfiguration_ConnectionConfiguration::is_secret_arn_Valid() const{
    return m_secret_arn_isValid;
}

bool OAIDatabaseConfiguration_ConnectionConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_database_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatabaseConfiguration_ConnectionConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_database_host_isValid && m_database_port_isValid && m_database_name_isValid && m_table_name_isValid && m_secret_arn_isValid && true;
}

} // namespace OpenAPI
