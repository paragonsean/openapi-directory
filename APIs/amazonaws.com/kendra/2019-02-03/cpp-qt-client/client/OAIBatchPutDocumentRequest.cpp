/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchPutDocumentRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchPutDocumentRequest::OAIBatchPutDocumentRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchPutDocumentRequest::OAIBatchPutDocumentRequest() {
    this->initializeModel();
}

OAIBatchPutDocumentRequest::~OAIBatchPutDocumentRequest() {}

void OAIBatchPutDocumentRequest::initializeModel() {

    m_index_id_isSet = false;
    m_index_id_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_documents_isSet = false;
    m_documents_isValid = false;

    m_custom_document_enrichment_configuration_isSet = false;
    m_custom_document_enrichment_configuration_isValid = false;
}

void OAIBatchPutDocumentRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchPutDocumentRequest::fromJsonObject(QJsonObject json) {

    m_index_id_isValid = ::OpenAPI::fromJsonValue(m_index_id, json[QString("IndexId")]);
    m_index_id_isSet = !json[QString("IndexId")].isNull() && m_index_id_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;

    m_documents_isValid = ::OpenAPI::fromJsonValue(m_documents, json[QString("Documents")]);
    m_documents_isSet = !json[QString("Documents")].isNull() && m_documents_isValid;

    m_custom_document_enrichment_configuration_isValid = ::OpenAPI::fromJsonValue(m_custom_document_enrichment_configuration, json[QString("CustomDocumentEnrichmentConfiguration")]);
    m_custom_document_enrichment_configuration_isSet = !json[QString("CustomDocumentEnrichmentConfiguration")].isNull() && m_custom_document_enrichment_configuration_isValid;
}

QString OAIBatchPutDocumentRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchPutDocumentRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_index_id_isSet) {
        obj.insert(QString("IndexId"), ::OpenAPI::toJsonValue(m_index_id));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_documents.isSet()) {
        obj.insert(QString("Documents"), ::OpenAPI::toJsonValue(m_documents));
    }
    if (m_custom_document_enrichment_configuration.isSet()) {
        obj.insert(QString("CustomDocumentEnrichmentConfiguration"), ::OpenAPI::toJsonValue(m_custom_document_enrichment_configuration));
    }
    return obj;
}

QString OAIBatchPutDocumentRequest::getIndexId() const {
    return m_index_id;
}
void OAIBatchPutDocumentRequest::setIndexId(const QString &index_id) {
    m_index_id = index_id;
    m_index_id_isSet = true;
}

bool OAIBatchPutDocumentRequest::is_index_id_Set() const{
    return m_index_id_isSet;
}

bool OAIBatchPutDocumentRequest::is_index_id_Valid() const{
    return m_index_id_isValid;
}

QString OAIBatchPutDocumentRequest::getRoleArn() const {
    return m_role_arn;
}
void OAIBatchPutDocumentRequest::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIBatchPutDocumentRequest::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIBatchPutDocumentRequest::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

QList OAIBatchPutDocumentRequest::getDocuments() const {
    return m_documents;
}
void OAIBatchPutDocumentRequest::setDocuments(const QList &documents) {
    m_documents = documents;
    m_documents_isSet = true;
}

bool OAIBatchPutDocumentRequest::is_documents_Set() const{
    return m_documents_isSet;
}

bool OAIBatchPutDocumentRequest::is_documents_Valid() const{
    return m_documents_isValid;
}

OAIBatchPutDocumentRequest_CustomDocumentEnrichmentConfiguration OAIBatchPutDocumentRequest::getCustomDocumentEnrichmentConfiguration() const {
    return m_custom_document_enrichment_configuration;
}
void OAIBatchPutDocumentRequest::setCustomDocumentEnrichmentConfiguration(const OAIBatchPutDocumentRequest_CustomDocumentEnrichmentConfiguration &custom_document_enrichment_configuration) {
    m_custom_document_enrichment_configuration = custom_document_enrichment_configuration;
    m_custom_document_enrichment_configuration_isSet = true;
}

bool OAIBatchPutDocumentRequest::is_custom_document_enrichment_configuration_Set() const{
    return m_custom_document_enrichment_configuration_isSet;
}

bool OAIBatchPutDocumentRequest::is_custom_document_enrichment_configuration_Valid() const{
    return m_custom_document_enrichment_configuration_isValid;
}

bool OAIBatchPutDocumentRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_index_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_documents.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_document_enrichment_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchPutDocumentRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_index_id_isValid && m_documents_isValid && true;
}

} // namespace OpenAPI
