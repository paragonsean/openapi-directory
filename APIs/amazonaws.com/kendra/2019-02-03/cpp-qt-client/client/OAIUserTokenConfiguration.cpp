/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserTokenConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserTokenConfiguration::OAIUserTokenConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserTokenConfiguration::OAIUserTokenConfiguration() {
    this->initializeModel();
}

OAIUserTokenConfiguration::~OAIUserTokenConfiguration() {}

void OAIUserTokenConfiguration::initializeModel() {

    m_jwt_token_type_configuration_isSet = false;
    m_jwt_token_type_configuration_isValid = false;

    m_json_token_type_configuration_isSet = false;
    m_json_token_type_configuration_isValid = false;
}

void OAIUserTokenConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserTokenConfiguration::fromJsonObject(QJsonObject json) {

    m_jwt_token_type_configuration_isValid = ::OpenAPI::fromJsonValue(m_jwt_token_type_configuration, json[QString("JwtTokenTypeConfiguration")]);
    m_jwt_token_type_configuration_isSet = !json[QString("JwtTokenTypeConfiguration")].isNull() && m_jwt_token_type_configuration_isValid;

    m_json_token_type_configuration_isValid = ::OpenAPI::fromJsonValue(m_json_token_type_configuration, json[QString("JsonTokenTypeConfiguration")]);
    m_json_token_type_configuration_isSet = !json[QString("JsonTokenTypeConfiguration")].isNull() && m_json_token_type_configuration_isValid;
}

QString OAIUserTokenConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserTokenConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_jwt_token_type_configuration.isSet()) {
        obj.insert(QString("JwtTokenTypeConfiguration"), ::OpenAPI::toJsonValue(m_jwt_token_type_configuration));
    }
    if (m_json_token_type_configuration.isSet()) {
        obj.insert(QString("JsonTokenTypeConfiguration"), ::OpenAPI::toJsonValue(m_json_token_type_configuration));
    }
    return obj;
}

OAIUserTokenConfiguration_JwtTokenTypeConfiguration OAIUserTokenConfiguration::getJwtTokenTypeConfiguration() const {
    return m_jwt_token_type_configuration;
}
void OAIUserTokenConfiguration::setJwtTokenTypeConfiguration(const OAIUserTokenConfiguration_JwtTokenTypeConfiguration &jwt_token_type_configuration) {
    m_jwt_token_type_configuration = jwt_token_type_configuration;
    m_jwt_token_type_configuration_isSet = true;
}

bool OAIUserTokenConfiguration::is_jwt_token_type_configuration_Set() const{
    return m_jwt_token_type_configuration_isSet;
}

bool OAIUserTokenConfiguration::is_jwt_token_type_configuration_Valid() const{
    return m_jwt_token_type_configuration_isValid;
}

OAIUserTokenConfiguration_JsonTokenTypeConfiguration OAIUserTokenConfiguration::getJsonTokenTypeConfiguration() const {
    return m_json_token_type_configuration;
}
void OAIUserTokenConfiguration::setJsonTokenTypeConfiguration(const OAIUserTokenConfiguration_JsonTokenTypeConfiguration &json_token_type_configuration) {
    m_json_token_type_configuration = json_token_type_configuration;
    m_json_token_type_configuration_isSet = true;
}

bool OAIUserTokenConfiguration::is_json_token_type_configuration_Set() const{
    return m_json_token_type_configuration_isSet;
}

bool OAIUserTokenConfiguration::is_json_token_type_configuration_Valid() const{
    return m_json_token_type_configuration_isValid;
}

bool OAIUserTokenConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_jwt_token_type_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_json_token_type_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserTokenConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
