/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataSourceConfiguration_BoxConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataSourceConfiguration_BoxConfiguration::OAIDataSourceConfiguration_BoxConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataSourceConfiguration_BoxConfiguration::OAIDataSourceConfiguration_BoxConfiguration() {
    this->initializeModel();
}

OAIDataSourceConfiguration_BoxConfiguration::~OAIDataSourceConfiguration_BoxConfiguration() {}

void OAIDataSourceConfiguration_BoxConfiguration::initializeModel() {

    m_enterprise_id_isSet = false;
    m_enterprise_id_isValid = false;

    m_secret_arn_isSet = false;
    m_secret_arn_isValid = false;

    m_use_change_log_isSet = false;
    m_use_change_log_isValid = false;

    m_crawl_comments_isSet = false;
    m_crawl_comments_isValid = false;

    m_crawl_tasks_isSet = false;
    m_crawl_tasks_isValid = false;

    m_crawl_web_links_isSet = false;
    m_crawl_web_links_isValid = false;

    m_file_field_mappings_isSet = false;
    m_file_field_mappings_isValid = false;

    m_task_field_mappings_isSet = false;
    m_task_field_mappings_isValid = false;

    m_comment_field_mappings_isSet = false;
    m_comment_field_mappings_isValid = false;

    m_web_link_field_mappings_isSet = false;
    m_web_link_field_mappings_isValid = false;

    m_inclusion_patterns_isSet = false;
    m_inclusion_patterns_isValid = false;

    m_exclusion_patterns_isSet = false;
    m_exclusion_patterns_isValid = false;

    m_vpc_configuration_isSet = false;
    m_vpc_configuration_isValid = false;
}

void OAIDataSourceConfiguration_BoxConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataSourceConfiguration_BoxConfiguration::fromJsonObject(QJsonObject json) {

    m_enterprise_id_isValid = ::OpenAPI::fromJsonValue(m_enterprise_id, json[QString("EnterpriseId")]);
    m_enterprise_id_isSet = !json[QString("EnterpriseId")].isNull() && m_enterprise_id_isValid;

    m_secret_arn_isValid = ::OpenAPI::fromJsonValue(m_secret_arn, json[QString("SecretArn")]);
    m_secret_arn_isSet = !json[QString("SecretArn")].isNull() && m_secret_arn_isValid;

    m_use_change_log_isValid = ::OpenAPI::fromJsonValue(m_use_change_log, json[QString("UseChangeLog")]);
    m_use_change_log_isSet = !json[QString("UseChangeLog")].isNull() && m_use_change_log_isValid;

    m_crawl_comments_isValid = ::OpenAPI::fromJsonValue(m_crawl_comments, json[QString("CrawlComments")]);
    m_crawl_comments_isSet = !json[QString("CrawlComments")].isNull() && m_crawl_comments_isValid;

    m_crawl_tasks_isValid = ::OpenAPI::fromJsonValue(m_crawl_tasks, json[QString("CrawlTasks")]);
    m_crawl_tasks_isSet = !json[QString("CrawlTasks")].isNull() && m_crawl_tasks_isValid;

    m_crawl_web_links_isValid = ::OpenAPI::fromJsonValue(m_crawl_web_links, json[QString("CrawlWebLinks")]);
    m_crawl_web_links_isSet = !json[QString("CrawlWebLinks")].isNull() && m_crawl_web_links_isValid;

    m_file_field_mappings_isValid = ::OpenAPI::fromJsonValue(m_file_field_mappings, json[QString("FileFieldMappings")]);
    m_file_field_mappings_isSet = !json[QString("FileFieldMappings")].isNull() && m_file_field_mappings_isValid;

    m_task_field_mappings_isValid = ::OpenAPI::fromJsonValue(m_task_field_mappings, json[QString("TaskFieldMappings")]);
    m_task_field_mappings_isSet = !json[QString("TaskFieldMappings")].isNull() && m_task_field_mappings_isValid;

    m_comment_field_mappings_isValid = ::OpenAPI::fromJsonValue(m_comment_field_mappings, json[QString("CommentFieldMappings")]);
    m_comment_field_mappings_isSet = !json[QString("CommentFieldMappings")].isNull() && m_comment_field_mappings_isValid;

    m_web_link_field_mappings_isValid = ::OpenAPI::fromJsonValue(m_web_link_field_mappings, json[QString("WebLinkFieldMappings")]);
    m_web_link_field_mappings_isSet = !json[QString("WebLinkFieldMappings")].isNull() && m_web_link_field_mappings_isValid;

    m_inclusion_patterns_isValid = ::OpenAPI::fromJsonValue(m_inclusion_patterns, json[QString("InclusionPatterns")]);
    m_inclusion_patterns_isSet = !json[QString("InclusionPatterns")].isNull() && m_inclusion_patterns_isValid;

    m_exclusion_patterns_isValid = ::OpenAPI::fromJsonValue(m_exclusion_patterns, json[QString("ExclusionPatterns")]);
    m_exclusion_patterns_isSet = !json[QString("ExclusionPatterns")].isNull() && m_exclusion_patterns_isValid;

    m_vpc_configuration_isValid = ::OpenAPI::fromJsonValue(m_vpc_configuration, json[QString("VpcConfiguration")]);
    m_vpc_configuration_isSet = !json[QString("VpcConfiguration")].isNull() && m_vpc_configuration_isValid;
}

QString OAIDataSourceConfiguration_BoxConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataSourceConfiguration_BoxConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_enterprise_id_isSet) {
        obj.insert(QString("EnterpriseId"), ::OpenAPI::toJsonValue(m_enterprise_id));
    }
    if (m_secret_arn_isSet) {
        obj.insert(QString("SecretArn"), ::OpenAPI::toJsonValue(m_secret_arn));
    }
    if (m_use_change_log_isSet) {
        obj.insert(QString("UseChangeLog"), ::OpenAPI::toJsonValue(m_use_change_log));
    }
    if (m_crawl_comments_isSet) {
        obj.insert(QString("CrawlComments"), ::OpenAPI::toJsonValue(m_crawl_comments));
    }
    if (m_crawl_tasks_isSet) {
        obj.insert(QString("CrawlTasks"), ::OpenAPI::toJsonValue(m_crawl_tasks));
    }
    if (m_crawl_web_links_isSet) {
        obj.insert(QString("CrawlWebLinks"), ::OpenAPI::toJsonValue(m_crawl_web_links));
    }
    if (m_file_field_mappings.isSet()) {
        obj.insert(QString("FileFieldMappings"), ::OpenAPI::toJsonValue(m_file_field_mappings));
    }
    if (m_task_field_mappings.isSet()) {
        obj.insert(QString("TaskFieldMappings"), ::OpenAPI::toJsonValue(m_task_field_mappings));
    }
    if (m_comment_field_mappings.isSet()) {
        obj.insert(QString("CommentFieldMappings"), ::OpenAPI::toJsonValue(m_comment_field_mappings));
    }
    if (m_web_link_field_mappings.isSet()) {
        obj.insert(QString("WebLinkFieldMappings"), ::OpenAPI::toJsonValue(m_web_link_field_mappings));
    }
    if (m_inclusion_patterns.isSet()) {
        obj.insert(QString("InclusionPatterns"), ::OpenAPI::toJsonValue(m_inclusion_patterns));
    }
    if (m_exclusion_patterns.isSet()) {
        obj.insert(QString("ExclusionPatterns"), ::OpenAPI::toJsonValue(m_exclusion_patterns));
    }
    if (m_vpc_configuration.isSet()) {
        obj.insert(QString("VpcConfiguration"), ::OpenAPI::toJsonValue(m_vpc_configuration));
    }
    return obj;
}

QString OAIDataSourceConfiguration_BoxConfiguration::getEnterpriseId() const {
    return m_enterprise_id;
}
void OAIDataSourceConfiguration_BoxConfiguration::setEnterpriseId(const QString &enterprise_id) {
    m_enterprise_id = enterprise_id;
    m_enterprise_id_isSet = true;
}

bool OAIDataSourceConfiguration_BoxConfiguration::is_enterprise_id_Set() const{
    return m_enterprise_id_isSet;
}

bool OAIDataSourceConfiguration_BoxConfiguration::is_enterprise_id_Valid() const{
    return m_enterprise_id_isValid;
}

QString OAIDataSourceConfiguration_BoxConfiguration::getSecretArn() const {
    return m_secret_arn;
}
void OAIDataSourceConfiguration_BoxConfiguration::setSecretArn(const QString &secret_arn) {
    m_secret_arn = secret_arn;
    m_secret_arn_isSet = true;
}

bool OAIDataSourceConfiguration_BoxConfiguration::is_secret_arn_Set() const{
    return m_secret_arn_isSet;
}

bool OAIDataSourceConfiguration_BoxConfiguration::is_secret_arn_Valid() const{
    return m_secret_arn_isValid;
}

bool OAIDataSourceConfiguration_BoxConfiguration::getUseChangeLog() const {
    return m_use_change_log;
}
void OAIDataSourceConfiguration_BoxConfiguration::setUseChangeLog(const bool &use_change_log) {
    m_use_change_log = use_change_log;
    m_use_change_log_isSet = true;
}

bool OAIDataSourceConfiguration_BoxConfiguration::is_use_change_log_Set() const{
    return m_use_change_log_isSet;
}

bool OAIDataSourceConfiguration_BoxConfiguration::is_use_change_log_Valid() const{
    return m_use_change_log_isValid;
}

bool OAIDataSourceConfiguration_BoxConfiguration::getCrawlComments() const {
    return m_crawl_comments;
}
void OAIDataSourceConfiguration_BoxConfiguration::setCrawlComments(const bool &crawl_comments) {
    m_crawl_comments = crawl_comments;
    m_crawl_comments_isSet = true;
}

bool OAIDataSourceConfiguration_BoxConfiguration::is_crawl_comments_Set() const{
    return m_crawl_comments_isSet;
}

bool OAIDataSourceConfiguration_BoxConfiguration::is_crawl_comments_Valid() const{
    return m_crawl_comments_isValid;
}

bool OAIDataSourceConfiguration_BoxConfiguration::getCrawlTasks() const {
    return m_crawl_tasks;
}
void OAIDataSourceConfiguration_BoxConfiguration::setCrawlTasks(const bool &crawl_tasks) {
    m_crawl_tasks = crawl_tasks;
    m_crawl_tasks_isSet = true;
}

bool OAIDataSourceConfiguration_BoxConfiguration::is_crawl_tasks_Set() const{
    return m_crawl_tasks_isSet;
}

bool OAIDataSourceConfiguration_BoxConfiguration::is_crawl_tasks_Valid() const{
    return m_crawl_tasks_isValid;
}

bool OAIDataSourceConfiguration_BoxConfiguration::getCrawlWebLinks() const {
    return m_crawl_web_links;
}
void OAIDataSourceConfiguration_BoxConfiguration::setCrawlWebLinks(const bool &crawl_web_links) {
    m_crawl_web_links = crawl_web_links;
    m_crawl_web_links_isSet = true;
}

bool OAIDataSourceConfiguration_BoxConfiguration::is_crawl_web_links_Set() const{
    return m_crawl_web_links_isSet;
}

bool OAIDataSourceConfiguration_BoxConfiguration::is_crawl_web_links_Valid() const{
    return m_crawl_web_links_isValid;
}

QList OAIDataSourceConfiguration_BoxConfiguration::getFileFieldMappings() const {
    return m_file_field_mappings;
}
void OAIDataSourceConfiguration_BoxConfiguration::setFileFieldMappings(const QList &file_field_mappings) {
    m_file_field_mappings = file_field_mappings;
    m_file_field_mappings_isSet = true;
}

bool OAIDataSourceConfiguration_BoxConfiguration::is_file_field_mappings_Set() const{
    return m_file_field_mappings_isSet;
}

bool OAIDataSourceConfiguration_BoxConfiguration::is_file_field_mappings_Valid() const{
    return m_file_field_mappings_isValid;
}

QList OAIDataSourceConfiguration_BoxConfiguration::getTaskFieldMappings() const {
    return m_task_field_mappings;
}
void OAIDataSourceConfiguration_BoxConfiguration::setTaskFieldMappings(const QList &task_field_mappings) {
    m_task_field_mappings = task_field_mappings;
    m_task_field_mappings_isSet = true;
}

bool OAIDataSourceConfiguration_BoxConfiguration::is_task_field_mappings_Set() const{
    return m_task_field_mappings_isSet;
}

bool OAIDataSourceConfiguration_BoxConfiguration::is_task_field_mappings_Valid() const{
    return m_task_field_mappings_isValid;
}

QList OAIDataSourceConfiguration_BoxConfiguration::getCommentFieldMappings() const {
    return m_comment_field_mappings;
}
void OAIDataSourceConfiguration_BoxConfiguration::setCommentFieldMappings(const QList &comment_field_mappings) {
    m_comment_field_mappings = comment_field_mappings;
    m_comment_field_mappings_isSet = true;
}

bool OAIDataSourceConfiguration_BoxConfiguration::is_comment_field_mappings_Set() const{
    return m_comment_field_mappings_isSet;
}

bool OAIDataSourceConfiguration_BoxConfiguration::is_comment_field_mappings_Valid() const{
    return m_comment_field_mappings_isValid;
}

QList OAIDataSourceConfiguration_BoxConfiguration::getWebLinkFieldMappings() const {
    return m_web_link_field_mappings;
}
void OAIDataSourceConfiguration_BoxConfiguration::setWebLinkFieldMappings(const QList &web_link_field_mappings) {
    m_web_link_field_mappings = web_link_field_mappings;
    m_web_link_field_mappings_isSet = true;
}

bool OAIDataSourceConfiguration_BoxConfiguration::is_web_link_field_mappings_Set() const{
    return m_web_link_field_mappings_isSet;
}

bool OAIDataSourceConfiguration_BoxConfiguration::is_web_link_field_mappings_Valid() const{
    return m_web_link_field_mappings_isValid;
}

QList OAIDataSourceConfiguration_BoxConfiguration::getInclusionPatterns() const {
    return m_inclusion_patterns;
}
void OAIDataSourceConfiguration_BoxConfiguration::setInclusionPatterns(const QList &inclusion_patterns) {
    m_inclusion_patterns = inclusion_patterns;
    m_inclusion_patterns_isSet = true;
}

bool OAIDataSourceConfiguration_BoxConfiguration::is_inclusion_patterns_Set() const{
    return m_inclusion_patterns_isSet;
}

bool OAIDataSourceConfiguration_BoxConfiguration::is_inclusion_patterns_Valid() const{
    return m_inclusion_patterns_isValid;
}

QList OAIDataSourceConfiguration_BoxConfiguration::getExclusionPatterns() const {
    return m_exclusion_patterns;
}
void OAIDataSourceConfiguration_BoxConfiguration::setExclusionPatterns(const QList &exclusion_patterns) {
    m_exclusion_patterns = exclusion_patterns;
    m_exclusion_patterns_isSet = true;
}

bool OAIDataSourceConfiguration_BoxConfiguration::is_exclusion_patterns_Set() const{
    return m_exclusion_patterns_isSet;
}

bool OAIDataSourceConfiguration_BoxConfiguration::is_exclusion_patterns_Valid() const{
    return m_exclusion_patterns_isValid;
}

OAIBoxConfiguration_VpcConfiguration OAIDataSourceConfiguration_BoxConfiguration::getVpcConfiguration() const {
    return m_vpc_configuration;
}
void OAIDataSourceConfiguration_BoxConfiguration::setVpcConfiguration(const OAIBoxConfiguration_VpcConfiguration &vpc_configuration) {
    m_vpc_configuration = vpc_configuration;
    m_vpc_configuration_isSet = true;
}

bool OAIDataSourceConfiguration_BoxConfiguration::is_vpc_configuration_Set() const{
    return m_vpc_configuration_isSet;
}

bool OAIDataSourceConfiguration_BoxConfiguration::is_vpc_configuration_Valid() const{
    return m_vpc_configuration_isValid;
}

bool OAIDataSourceConfiguration_BoxConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enterprise_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_change_log_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crawl_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crawl_tasks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crawl_web_links_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_field_mappings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_field_mappings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_field_mappings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_link_field_mappings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inclusion_patterns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclusion_patterns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataSourceConfiguration_BoxConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_enterprise_id_isValid && m_secret_arn_isValid && true;
}

} // namespace OpenAPI
