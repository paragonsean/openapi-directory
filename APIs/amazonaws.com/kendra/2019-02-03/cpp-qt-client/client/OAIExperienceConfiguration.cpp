/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExperienceConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExperienceConfiguration::OAIExperienceConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExperienceConfiguration::OAIExperienceConfiguration() {
    this->initializeModel();
}

OAIExperienceConfiguration::~OAIExperienceConfiguration() {}

void OAIExperienceConfiguration::initializeModel() {

    m_content_source_configuration_isSet = false;
    m_content_source_configuration_isValid = false;

    m_user_identity_configuration_isSet = false;
    m_user_identity_configuration_isValid = false;
}

void OAIExperienceConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExperienceConfiguration::fromJsonObject(QJsonObject json) {

    m_content_source_configuration_isValid = ::OpenAPI::fromJsonValue(m_content_source_configuration, json[QString("ContentSourceConfiguration")]);
    m_content_source_configuration_isSet = !json[QString("ContentSourceConfiguration")].isNull() && m_content_source_configuration_isValid;

    m_user_identity_configuration_isValid = ::OpenAPI::fromJsonValue(m_user_identity_configuration, json[QString("UserIdentityConfiguration")]);
    m_user_identity_configuration_isSet = !json[QString("UserIdentityConfiguration")].isNull() && m_user_identity_configuration_isValid;
}

QString OAIExperienceConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExperienceConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_content_source_configuration.isSet()) {
        obj.insert(QString("ContentSourceConfiguration"), ::OpenAPI::toJsonValue(m_content_source_configuration));
    }
    if (m_user_identity_configuration.isSet()) {
        obj.insert(QString("UserIdentityConfiguration"), ::OpenAPI::toJsonValue(m_user_identity_configuration));
    }
    return obj;
}

OAIExperienceConfiguration_ContentSourceConfiguration OAIExperienceConfiguration::getContentSourceConfiguration() const {
    return m_content_source_configuration;
}
void OAIExperienceConfiguration::setContentSourceConfiguration(const OAIExperienceConfiguration_ContentSourceConfiguration &content_source_configuration) {
    m_content_source_configuration = content_source_configuration;
    m_content_source_configuration_isSet = true;
}

bool OAIExperienceConfiguration::is_content_source_configuration_Set() const{
    return m_content_source_configuration_isSet;
}

bool OAIExperienceConfiguration::is_content_source_configuration_Valid() const{
    return m_content_source_configuration_isValid;
}

OAIExperienceConfiguration_UserIdentityConfiguration OAIExperienceConfiguration::getUserIdentityConfiguration() const {
    return m_user_identity_configuration;
}
void OAIExperienceConfiguration::setUserIdentityConfiguration(const OAIExperienceConfiguration_UserIdentityConfiguration &user_identity_configuration) {
    m_user_identity_configuration = user_identity_configuration;
    m_user_identity_configuration_isSet = true;
}

bool OAIExperienceConfiguration::is_user_identity_configuration_Set() const{
    return m_user_identity_configuration_isSet;
}

bool OAIExperienceConfiguration::is_user_identity_configuration_Valid() const{
    return m_user_identity_configuration_isValid;
}

bool OAIExperienceConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_source_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_identity_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExperienceConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
