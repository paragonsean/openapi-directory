/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISaaSConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISaaSConfiguration::OAISaaSConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISaaSConfiguration::OAISaaSConfiguration() {
    this->initializeModel();
}

OAISaaSConfiguration::~OAISaaSConfiguration() {}

void OAISaaSConfiguration::initializeModel() {

    m_organization_name_isSet = false;
    m_organization_name_isValid = false;

    m_host_url_isSet = false;
    m_host_url_isValid = false;
}

void OAISaaSConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISaaSConfiguration::fromJsonObject(QJsonObject json) {

    m_organization_name_isValid = ::OpenAPI::fromJsonValue(m_organization_name, json[QString("OrganizationName")]);
    m_organization_name_isSet = !json[QString("OrganizationName")].isNull() && m_organization_name_isValid;

    m_host_url_isValid = ::OpenAPI::fromJsonValue(m_host_url, json[QString("HostUrl")]);
    m_host_url_isSet = !json[QString("HostUrl")].isNull() && m_host_url_isValid;
}

QString OAISaaSConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISaaSConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_organization_name_isSet) {
        obj.insert(QString("OrganizationName"), ::OpenAPI::toJsonValue(m_organization_name));
    }
    if (m_host_url_isSet) {
        obj.insert(QString("HostUrl"), ::OpenAPI::toJsonValue(m_host_url));
    }
    return obj;
}

QString OAISaaSConfiguration::getOrganizationName() const {
    return m_organization_name;
}
void OAISaaSConfiguration::setOrganizationName(const QString &organization_name) {
    m_organization_name = organization_name;
    m_organization_name_isSet = true;
}

bool OAISaaSConfiguration::is_organization_name_Set() const{
    return m_organization_name_isSet;
}

bool OAISaaSConfiguration::is_organization_name_Valid() const{
    return m_organization_name_isValid;
}

QString OAISaaSConfiguration::getHostUrl() const {
    return m_host_url;
}
void OAISaaSConfiguration::setHostUrl(const QString &host_url) {
    m_host_url = host_url;
    m_host_url_isSet = true;
}

bool OAISaaSConfiguration::is_host_url_Set() const{
    return m_host_url_isSet;
}

bool OAISaaSConfiguration::is_host_url_Valid() const{
    return m_host_url_isValid;
}

bool OAISaaSConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_organization_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISaaSConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_organization_name_isValid && m_host_url_isValid && true;
}

} // namespace OpenAPI
