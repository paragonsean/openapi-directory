/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISlackConfiguration.h
 *
 * Provides the configuration information to connect to Slack as your data source.
 */

#ifndef OAISlackConfiguration_H
#define OAISlackConfiguration_H

#include <QJsonObject>

#include "OAISlackConfiguration_VpcConfiguration.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISlackConfiguration_VpcConfiguration;

class OAISlackConfiguration : public OAIObject {
public:
    OAISlackConfiguration();
    OAISlackConfiguration(QString json);
    ~OAISlackConfiguration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getTeamId() const;
    void setTeamId(const QString &team_id);
    bool is_team_id_Set() const;
    bool is_team_id_Valid() const;

    QString getSecretArn() const;
    void setSecretArn(const QString &secret_arn);
    bool is_secret_arn_Set() const;
    bool is_secret_arn_Valid() const;

    OAISlackConfiguration_VpcConfiguration getVpcConfiguration() const;
    void setVpcConfiguration(const OAISlackConfiguration_VpcConfiguration &vpc_configuration);
    bool is_vpc_configuration_Set() const;
    bool is_vpc_configuration_Valid() const;

    QList getSlackEntityList() const;
    void setSlackEntityList(const QList &slack_entity_list);
    bool is_slack_entity_list_Set() const;
    bool is_slack_entity_list_Valid() const;

    bool getUseChangeLog() const;
    void setUseChangeLog(const bool &use_change_log);
    bool is_use_change_log_Set() const;
    bool is_use_change_log_Valid() const;

    bool getCrawlBotMessage() const;
    void setCrawlBotMessage(const bool &crawl_bot_message);
    bool is_crawl_bot_message_Set() const;
    bool is_crawl_bot_message_Valid() const;

    bool getExcludeArchived() const;
    void setExcludeArchived(const bool &exclude_archived);
    bool is_exclude_archived_Set() const;
    bool is_exclude_archived_Valid() const;

    QString getSinceCrawlDate() const;
    void setSinceCrawlDate(const QString &since_crawl_date);
    bool is_since_crawl_date_Set() const;
    bool is_since_crawl_date_Valid() const;

    qint32 getLookBackPeriod() const;
    void setLookBackPeriod(const qint32 &look_back_period);
    bool is_look_back_period_Set() const;
    bool is_look_back_period_Valid() const;

    QList getPrivateChannelFilter() const;
    void setPrivateChannelFilter(const QList &private_channel_filter);
    bool is_private_channel_filter_Set() const;
    bool is_private_channel_filter_Valid() const;

    QList getPublicChannelFilter() const;
    void setPublicChannelFilter(const QList &public_channel_filter);
    bool is_public_channel_filter_Set() const;
    bool is_public_channel_filter_Valid() const;

    QList getInclusionPatterns() const;
    void setInclusionPatterns(const QList &inclusion_patterns);
    bool is_inclusion_patterns_Set() const;
    bool is_inclusion_patterns_Valid() const;

    QList getExclusionPatterns() const;
    void setExclusionPatterns(const QList &exclusion_patterns);
    bool is_exclusion_patterns_Set() const;
    bool is_exclusion_patterns_Valid() const;

    QList getFieldMappings() const;
    void setFieldMappings(const QList &field_mappings);
    bool is_field_mappings_Set() const;
    bool is_field_mappings_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_team_id;
    bool m_team_id_isSet;
    bool m_team_id_isValid;

    QString m_secret_arn;
    bool m_secret_arn_isSet;
    bool m_secret_arn_isValid;

    OAISlackConfiguration_VpcConfiguration m_vpc_configuration;
    bool m_vpc_configuration_isSet;
    bool m_vpc_configuration_isValid;

    QList m_slack_entity_list;
    bool m_slack_entity_list_isSet;
    bool m_slack_entity_list_isValid;

    bool m_use_change_log;
    bool m_use_change_log_isSet;
    bool m_use_change_log_isValid;

    bool m_crawl_bot_message;
    bool m_crawl_bot_message_isSet;
    bool m_crawl_bot_message_isValid;

    bool m_exclude_archived;
    bool m_exclude_archived_isSet;
    bool m_exclude_archived_isValid;

    QString m_since_crawl_date;
    bool m_since_crawl_date_isSet;
    bool m_since_crawl_date_isValid;

    qint32 m_look_back_period;
    bool m_look_back_period_isSet;
    bool m_look_back_period_isValid;

    QList m_private_channel_filter;
    bool m_private_channel_filter_isSet;
    bool m_private_channel_filter_isValid;

    QList m_public_channel_filter;
    bool m_public_channel_filter_isSet;
    bool m_public_channel_filter_isValid;

    QList m_inclusion_patterns;
    bool m_inclusion_patterns_isSet;
    bool m_inclusion_patterns_isValid;

    QList m_exclusion_patterns;
    bool m_exclusion_patterns_isSet;
    bool m_exclusion_patterns_isValid;

    QList m_field_mappings;
    bool m_field_mappings_isSet;
    bool m_field_mappings_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISlackConfiguration)

#endif // OAISlackConfiguration_H
