/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExperienceEndpoint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExperienceEndpoint::OAIExperienceEndpoint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExperienceEndpoint::OAIExperienceEndpoint() {
    this->initializeModel();
}

OAIExperienceEndpoint::~OAIExperienceEndpoint() {}

void OAIExperienceEndpoint::initializeModel() {

    m_endpoint_type_isSet = false;
    m_endpoint_type_isValid = false;

    m_endpoint_isSet = false;
    m_endpoint_isValid = false;
}

void OAIExperienceEndpoint::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExperienceEndpoint::fromJsonObject(QJsonObject json) {

    m_endpoint_type_isValid = ::OpenAPI::fromJsonValue(m_endpoint_type, json[QString("EndpointType")]);
    m_endpoint_type_isSet = !json[QString("EndpointType")].isNull() && m_endpoint_type_isValid;

    m_endpoint_isValid = ::OpenAPI::fromJsonValue(m_endpoint, json[QString("Endpoint")]);
    m_endpoint_isSet = !json[QString("Endpoint")].isNull() && m_endpoint_isValid;
}

QString OAIExperienceEndpoint::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExperienceEndpoint::asJsonObject() const {
    QJsonObject obj;
    if (m_endpoint_type.isSet()) {
        obj.insert(QString("EndpointType"), ::OpenAPI::toJsonValue(m_endpoint_type));
    }
    if (m_endpoint_isSet) {
        obj.insert(QString("Endpoint"), ::OpenAPI::toJsonValue(m_endpoint));
    }
    return obj;
}

OAIEndpointType OAIExperienceEndpoint::getEndpointType() const {
    return m_endpoint_type;
}
void OAIExperienceEndpoint::setEndpointType(const OAIEndpointType &endpoint_type) {
    m_endpoint_type = endpoint_type;
    m_endpoint_type_isSet = true;
}

bool OAIExperienceEndpoint::is_endpoint_type_Set() const{
    return m_endpoint_type_isSet;
}

bool OAIExperienceEndpoint::is_endpoint_type_Valid() const{
    return m_endpoint_type_isValid;
}

QString OAIExperienceEndpoint::getEndpoint() const {
    return m_endpoint;
}
void OAIExperienceEndpoint::setEndpoint(const QString &endpoint) {
    m_endpoint = endpoint;
    m_endpoint_isSet = true;
}

bool OAIExperienceEndpoint::is_endpoint_Set() const{
    return m_endpoint_isSet;
}

bool OAIExperienceEndpoint::is_endpoint_Valid() const{
    return m_endpoint_isValid;
}

bool OAIExperienceEndpoint::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_endpoint_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExperienceEndpoint::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
