/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISpellCorrectedQuery.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISpellCorrectedQuery::OAISpellCorrectedQuery(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISpellCorrectedQuery::OAISpellCorrectedQuery() {
    this->initializeModel();
}

OAISpellCorrectedQuery::~OAISpellCorrectedQuery() {}

void OAISpellCorrectedQuery::initializeModel() {

    m_suggested_query_text_isSet = false;
    m_suggested_query_text_isValid = false;

    m_corrections_isSet = false;
    m_corrections_isValid = false;
}

void OAISpellCorrectedQuery::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISpellCorrectedQuery::fromJsonObject(QJsonObject json) {

    m_suggested_query_text_isValid = ::OpenAPI::fromJsonValue(m_suggested_query_text, json[QString("SuggestedQueryText")]);
    m_suggested_query_text_isSet = !json[QString("SuggestedQueryText")].isNull() && m_suggested_query_text_isValid;

    m_corrections_isValid = ::OpenAPI::fromJsonValue(m_corrections, json[QString("Corrections")]);
    m_corrections_isSet = !json[QString("Corrections")].isNull() && m_corrections_isValid;
}

QString OAISpellCorrectedQuery::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISpellCorrectedQuery::asJsonObject() const {
    QJsonObject obj;
    if (m_suggested_query_text_isSet) {
        obj.insert(QString("SuggestedQueryText"), ::OpenAPI::toJsonValue(m_suggested_query_text));
    }
    if (m_corrections.isSet()) {
        obj.insert(QString("Corrections"), ::OpenAPI::toJsonValue(m_corrections));
    }
    return obj;
}

QString OAISpellCorrectedQuery::getSuggestedQueryText() const {
    return m_suggested_query_text;
}
void OAISpellCorrectedQuery::setSuggestedQueryText(const QString &suggested_query_text) {
    m_suggested_query_text = suggested_query_text;
    m_suggested_query_text_isSet = true;
}

bool OAISpellCorrectedQuery::is_suggested_query_text_Set() const{
    return m_suggested_query_text_isSet;
}

bool OAISpellCorrectedQuery::is_suggested_query_text_Valid() const{
    return m_suggested_query_text_isValid;
}

QList OAISpellCorrectedQuery::getCorrections() const {
    return m_corrections;
}
void OAISpellCorrectedQuery::setCorrections(const QList &corrections) {
    m_corrections = corrections;
    m_corrections_isSet = true;
}

bool OAISpellCorrectedQuery::is_corrections_Set() const{
    return m_corrections_isSet;
}

bool OAISpellCorrectedQuery::is_corrections_Valid() const{
    return m_corrections_isValid;
}

bool OAISpellCorrectedQuery::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_suggested_query_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_corrections.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISpellCorrectedQuery::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
