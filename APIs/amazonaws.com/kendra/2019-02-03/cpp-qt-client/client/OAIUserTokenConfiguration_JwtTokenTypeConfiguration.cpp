/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserTokenConfiguration_JwtTokenTypeConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserTokenConfiguration_JwtTokenTypeConfiguration::OAIUserTokenConfiguration_JwtTokenTypeConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserTokenConfiguration_JwtTokenTypeConfiguration::OAIUserTokenConfiguration_JwtTokenTypeConfiguration() {
    this->initializeModel();
}

OAIUserTokenConfiguration_JwtTokenTypeConfiguration::~OAIUserTokenConfiguration_JwtTokenTypeConfiguration() {}

void OAIUserTokenConfiguration_JwtTokenTypeConfiguration::initializeModel() {

    m_key_location_isSet = false;
    m_key_location_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_secret_manager_arn_isSet = false;
    m_secret_manager_arn_isValid = false;

    m_user_name_attribute_field_isSet = false;
    m_user_name_attribute_field_isValid = false;

    m_group_attribute_field_isSet = false;
    m_group_attribute_field_isValid = false;

    m_issuer_isSet = false;
    m_issuer_isValid = false;

    m_claim_regex_isSet = false;
    m_claim_regex_isValid = false;
}

void OAIUserTokenConfiguration_JwtTokenTypeConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserTokenConfiguration_JwtTokenTypeConfiguration::fromJsonObject(QJsonObject json) {

    m_key_location_isValid = ::OpenAPI::fromJsonValue(m_key_location, json[QString("KeyLocation")]);
    m_key_location_isSet = !json[QString("KeyLocation")].isNull() && m_key_location_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("URL")]);
    m_url_isSet = !json[QString("URL")].isNull() && m_url_isValid;

    m_secret_manager_arn_isValid = ::OpenAPI::fromJsonValue(m_secret_manager_arn, json[QString("SecretManagerArn")]);
    m_secret_manager_arn_isSet = !json[QString("SecretManagerArn")].isNull() && m_secret_manager_arn_isValid;

    m_user_name_attribute_field_isValid = ::OpenAPI::fromJsonValue(m_user_name_attribute_field, json[QString("UserNameAttributeField")]);
    m_user_name_attribute_field_isSet = !json[QString("UserNameAttributeField")].isNull() && m_user_name_attribute_field_isValid;

    m_group_attribute_field_isValid = ::OpenAPI::fromJsonValue(m_group_attribute_field, json[QString("GroupAttributeField")]);
    m_group_attribute_field_isSet = !json[QString("GroupAttributeField")].isNull() && m_group_attribute_field_isValid;

    m_issuer_isValid = ::OpenAPI::fromJsonValue(m_issuer, json[QString("Issuer")]);
    m_issuer_isSet = !json[QString("Issuer")].isNull() && m_issuer_isValid;

    m_claim_regex_isValid = ::OpenAPI::fromJsonValue(m_claim_regex, json[QString("ClaimRegex")]);
    m_claim_regex_isSet = !json[QString("ClaimRegex")].isNull() && m_claim_regex_isValid;
}

QString OAIUserTokenConfiguration_JwtTokenTypeConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserTokenConfiguration_JwtTokenTypeConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_key_location.isSet()) {
        obj.insert(QString("KeyLocation"), ::OpenAPI::toJsonValue(m_key_location));
    }
    if (m_url_isSet) {
        obj.insert(QString("URL"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_secret_manager_arn_isSet) {
        obj.insert(QString("SecretManagerArn"), ::OpenAPI::toJsonValue(m_secret_manager_arn));
    }
    if (m_user_name_attribute_field_isSet) {
        obj.insert(QString("UserNameAttributeField"), ::OpenAPI::toJsonValue(m_user_name_attribute_field));
    }
    if (m_group_attribute_field_isSet) {
        obj.insert(QString("GroupAttributeField"), ::OpenAPI::toJsonValue(m_group_attribute_field));
    }
    if (m_issuer_isSet) {
        obj.insert(QString("Issuer"), ::OpenAPI::toJsonValue(m_issuer));
    }
    if (m_claim_regex_isSet) {
        obj.insert(QString("ClaimRegex"), ::OpenAPI::toJsonValue(m_claim_regex));
    }
    return obj;
}

OAIKeyLocation OAIUserTokenConfiguration_JwtTokenTypeConfiguration::getKeyLocation() const {
    return m_key_location;
}
void OAIUserTokenConfiguration_JwtTokenTypeConfiguration::setKeyLocation(const OAIKeyLocation &key_location) {
    m_key_location = key_location;
    m_key_location_isSet = true;
}

bool OAIUserTokenConfiguration_JwtTokenTypeConfiguration::is_key_location_Set() const{
    return m_key_location_isSet;
}

bool OAIUserTokenConfiguration_JwtTokenTypeConfiguration::is_key_location_Valid() const{
    return m_key_location_isValid;
}

QString OAIUserTokenConfiguration_JwtTokenTypeConfiguration::getUrl() const {
    return m_url;
}
void OAIUserTokenConfiguration_JwtTokenTypeConfiguration::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIUserTokenConfiguration_JwtTokenTypeConfiguration::is_url_Set() const{
    return m_url_isSet;
}

bool OAIUserTokenConfiguration_JwtTokenTypeConfiguration::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIUserTokenConfiguration_JwtTokenTypeConfiguration::getSecretManagerArn() const {
    return m_secret_manager_arn;
}
void OAIUserTokenConfiguration_JwtTokenTypeConfiguration::setSecretManagerArn(const QString &secret_manager_arn) {
    m_secret_manager_arn = secret_manager_arn;
    m_secret_manager_arn_isSet = true;
}

bool OAIUserTokenConfiguration_JwtTokenTypeConfiguration::is_secret_manager_arn_Set() const{
    return m_secret_manager_arn_isSet;
}

bool OAIUserTokenConfiguration_JwtTokenTypeConfiguration::is_secret_manager_arn_Valid() const{
    return m_secret_manager_arn_isValid;
}

QString OAIUserTokenConfiguration_JwtTokenTypeConfiguration::getUserNameAttributeField() const {
    return m_user_name_attribute_field;
}
void OAIUserTokenConfiguration_JwtTokenTypeConfiguration::setUserNameAttributeField(const QString &user_name_attribute_field) {
    m_user_name_attribute_field = user_name_attribute_field;
    m_user_name_attribute_field_isSet = true;
}

bool OAIUserTokenConfiguration_JwtTokenTypeConfiguration::is_user_name_attribute_field_Set() const{
    return m_user_name_attribute_field_isSet;
}

bool OAIUserTokenConfiguration_JwtTokenTypeConfiguration::is_user_name_attribute_field_Valid() const{
    return m_user_name_attribute_field_isValid;
}

QString OAIUserTokenConfiguration_JwtTokenTypeConfiguration::getGroupAttributeField() const {
    return m_group_attribute_field;
}
void OAIUserTokenConfiguration_JwtTokenTypeConfiguration::setGroupAttributeField(const QString &group_attribute_field) {
    m_group_attribute_field = group_attribute_field;
    m_group_attribute_field_isSet = true;
}

bool OAIUserTokenConfiguration_JwtTokenTypeConfiguration::is_group_attribute_field_Set() const{
    return m_group_attribute_field_isSet;
}

bool OAIUserTokenConfiguration_JwtTokenTypeConfiguration::is_group_attribute_field_Valid() const{
    return m_group_attribute_field_isValid;
}

QString OAIUserTokenConfiguration_JwtTokenTypeConfiguration::getIssuer() const {
    return m_issuer;
}
void OAIUserTokenConfiguration_JwtTokenTypeConfiguration::setIssuer(const QString &issuer) {
    m_issuer = issuer;
    m_issuer_isSet = true;
}

bool OAIUserTokenConfiguration_JwtTokenTypeConfiguration::is_issuer_Set() const{
    return m_issuer_isSet;
}

bool OAIUserTokenConfiguration_JwtTokenTypeConfiguration::is_issuer_Valid() const{
    return m_issuer_isValid;
}

QString OAIUserTokenConfiguration_JwtTokenTypeConfiguration::getClaimRegex() const {
    return m_claim_regex;
}
void OAIUserTokenConfiguration_JwtTokenTypeConfiguration::setClaimRegex(const QString &claim_regex) {
    m_claim_regex = claim_regex;
    m_claim_regex_isSet = true;
}

bool OAIUserTokenConfiguration_JwtTokenTypeConfiguration::is_claim_regex_Set() const{
    return m_claim_regex_isSet;
}

bool OAIUserTokenConfiguration_JwtTokenTypeConfiguration::is_claim_regex_Valid() const{
    return m_claim_regex_isValid;
}

bool OAIUserTokenConfiguration_JwtTokenTypeConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_manager_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_name_attribute_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_attribute_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_claim_regex_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserTokenConfiguration_JwtTokenTypeConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_key_location_isValid && true;
}

} // namespace OpenAPI
