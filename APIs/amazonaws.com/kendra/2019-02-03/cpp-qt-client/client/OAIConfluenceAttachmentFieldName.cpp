/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfluenceAttachmentFieldName.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfluenceAttachmentFieldName::OAIConfluenceAttachmentFieldName(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfluenceAttachmentFieldName::OAIConfluenceAttachmentFieldName() {
    this->initializeModel();
}

OAIConfluenceAttachmentFieldName::~OAIConfluenceAttachmentFieldName() {}

void OAIConfluenceAttachmentFieldName::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIConfluenceAttachmentFieldName::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIConfluenceAttachmentFieldName::fromJson(QString jsonString) {
    
    if ( jsonString.compare("AUTHOR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConfluenceAttachmentFieldName::AUTHOR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CONTENT_TYPE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConfluenceAttachmentFieldName::CONTENT_TYPE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CREATED_DATE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConfluenceAttachmentFieldName::CREATED_DATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DISPLAY_URL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConfluenceAttachmentFieldName::DISPLAY_URL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FILE_SIZE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConfluenceAttachmentFieldName::FILE_SIZE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ITEM_TYPE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConfluenceAttachmentFieldName::ITEM_TYPE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PARENT_ID", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConfluenceAttachmentFieldName::PARENT_ID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SPACE_KEY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConfluenceAttachmentFieldName::SPACE_KEY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SPACE_NAME", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConfluenceAttachmentFieldName::SPACE_NAME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("URL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConfluenceAttachmentFieldName::URL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VERSION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConfluenceAttachmentFieldName::VERSION;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIConfluenceAttachmentFieldName::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIConfluenceAttachmentFieldName::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIConfluenceAttachmentFieldName::AUTHOR:
            val = "AUTHOR";
            break;
        case eOAIConfluenceAttachmentFieldName::CONTENT_TYPE:
            val = "CONTENT_TYPE";
            break;
        case eOAIConfluenceAttachmentFieldName::CREATED_DATE:
            val = "CREATED_DATE";
            break;
        case eOAIConfluenceAttachmentFieldName::DISPLAY_URL:
            val = "DISPLAY_URL";
            break;
        case eOAIConfluenceAttachmentFieldName::FILE_SIZE:
            val = "FILE_SIZE";
            break;
        case eOAIConfluenceAttachmentFieldName::ITEM_TYPE:
            val = "ITEM_TYPE";
            break;
        case eOAIConfluenceAttachmentFieldName::PARENT_ID:
            val = "PARENT_ID";
            break;
        case eOAIConfluenceAttachmentFieldName::SPACE_KEY:
            val = "SPACE_KEY";
            break;
        case eOAIConfluenceAttachmentFieldName::SPACE_NAME:
            val = "SPACE_NAME";
            break;
        case eOAIConfluenceAttachmentFieldName::URL:
            val = "URL";
            break;
        case eOAIConfluenceAttachmentFieldName::VERSION:
            val = "VERSION";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIConfluenceAttachmentFieldName::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIConfluenceAttachmentFieldName::eOAIConfluenceAttachmentFieldName OAIConfluenceAttachmentFieldName::getValue() const {
    return m_value;
}

void OAIConfluenceAttachmentFieldName::setValue(const OAIConfluenceAttachmentFieldName::eOAIConfluenceAttachmentFieldName& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIConfluenceAttachmentFieldName::isSet() const {
    
    return m_value_isSet;
}

bool OAIConfluenceAttachmentFieldName::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
