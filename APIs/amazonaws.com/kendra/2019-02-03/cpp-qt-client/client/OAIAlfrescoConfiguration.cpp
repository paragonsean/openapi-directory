/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAlfrescoConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAlfrescoConfiguration::OAIAlfrescoConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAlfrescoConfiguration::OAIAlfrescoConfiguration() {
    this->initializeModel();
}

OAIAlfrescoConfiguration::~OAIAlfrescoConfiguration() {}

void OAIAlfrescoConfiguration::initializeModel() {

    m_site_url_isSet = false;
    m_site_url_isValid = false;

    m_site_id_isSet = false;
    m_site_id_isValid = false;

    m_secret_arn_isSet = false;
    m_secret_arn_isValid = false;

    m_ssl_certificate_s3_path_isSet = false;
    m_ssl_certificate_s3_path_isValid = false;

    m_crawl_system_folders_isSet = false;
    m_crawl_system_folders_isValid = false;

    m_crawl_comments_isSet = false;
    m_crawl_comments_isValid = false;

    m_entity_filter_isSet = false;
    m_entity_filter_isValid = false;

    m_document_library_field_mappings_isSet = false;
    m_document_library_field_mappings_isValid = false;

    m_blog_field_mappings_isSet = false;
    m_blog_field_mappings_isValid = false;

    m_wiki_field_mappings_isSet = false;
    m_wiki_field_mappings_isValid = false;

    m_inclusion_patterns_isSet = false;
    m_inclusion_patterns_isValid = false;

    m_exclusion_patterns_isSet = false;
    m_exclusion_patterns_isValid = false;

    m_vpc_configuration_isSet = false;
    m_vpc_configuration_isValid = false;
}

void OAIAlfrescoConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAlfrescoConfiguration::fromJsonObject(QJsonObject json) {

    m_site_url_isValid = ::OpenAPI::fromJsonValue(m_site_url, json[QString("SiteUrl")]);
    m_site_url_isSet = !json[QString("SiteUrl")].isNull() && m_site_url_isValid;

    m_site_id_isValid = ::OpenAPI::fromJsonValue(m_site_id, json[QString("SiteId")]);
    m_site_id_isSet = !json[QString("SiteId")].isNull() && m_site_id_isValid;

    m_secret_arn_isValid = ::OpenAPI::fromJsonValue(m_secret_arn, json[QString("SecretArn")]);
    m_secret_arn_isSet = !json[QString("SecretArn")].isNull() && m_secret_arn_isValid;

    m_ssl_certificate_s3_path_isValid = ::OpenAPI::fromJsonValue(m_ssl_certificate_s3_path, json[QString("SslCertificateS3Path")]);
    m_ssl_certificate_s3_path_isSet = !json[QString("SslCertificateS3Path")].isNull() && m_ssl_certificate_s3_path_isValid;

    m_crawl_system_folders_isValid = ::OpenAPI::fromJsonValue(m_crawl_system_folders, json[QString("CrawlSystemFolders")]);
    m_crawl_system_folders_isSet = !json[QString("CrawlSystemFolders")].isNull() && m_crawl_system_folders_isValid;

    m_crawl_comments_isValid = ::OpenAPI::fromJsonValue(m_crawl_comments, json[QString("CrawlComments")]);
    m_crawl_comments_isSet = !json[QString("CrawlComments")].isNull() && m_crawl_comments_isValid;

    m_entity_filter_isValid = ::OpenAPI::fromJsonValue(m_entity_filter, json[QString("EntityFilter")]);
    m_entity_filter_isSet = !json[QString("EntityFilter")].isNull() && m_entity_filter_isValid;

    m_document_library_field_mappings_isValid = ::OpenAPI::fromJsonValue(m_document_library_field_mappings, json[QString("DocumentLibraryFieldMappings")]);
    m_document_library_field_mappings_isSet = !json[QString("DocumentLibraryFieldMappings")].isNull() && m_document_library_field_mappings_isValid;

    m_blog_field_mappings_isValid = ::OpenAPI::fromJsonValue(m_blog_field_mappings, json[QString("BlogFieldMappings")]);
    m_blog_field_mappings_isSet = !json[QString("BlogFieldMappings")].isNull() && m_blog_field_mappings_isValid;

    m_wiki_field_mappings_isValid = ::OpenAPI::fromJsonValue(m_wiki_field_mappings, json[QString("WikiFieldMappings")]);
    m_wiki_field_mappings_isSet = !json[QString("WikiFieldMappings")].isNull() && m_wiki_field_mappings_isValid;

    m_inclusion_patterns_isValid = ::OpenAPI::fromJsonValue(m_inclusion_patterns, json[QString("InclusionPatterns")]);
    m_inclusion_patterns_isSet = !json[QString("InclusionPatterns")].isNull() && m_inclusion_patterns_isValid;

    m_exclusion_patterns_isValid = ::OpenAPI::fromJsonValue(m_exclusion_patterns, json[QString("ExclusionPatterns")]);
    m_exclusion_patterns_isSet = !json[QString("ExclusionPatterns")].isNull() && m_exclusion_patterns_isValid;

    m_vpc_configuration_isValid = ::OpenAPI::fromJsonValue(m_vpc_configuration, json[QString("VpcConfiguration")]);
    m_vpc_configuration_isSet = !json[QString("VpcConfiguration")].isNull() && m_vpc_configuration_isValid;
}

QString OAIAlfrescoConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAlfrescoConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_site_url_isSet) {
        obj.insert(QString("SiteUrl"), ::OpenAPI::toJsonValue(m_site_url));
    }
    if (m_site_id_isSet) {
        obj.insert(QString("SiteId"), ::OpenAPI::toJsonValue(m_site_id));
    }
    if (m_secret_arn_isSet) {
        obj.insert(QString("SecretArn"), ::OpenAPI::toJsonValue(m_secret_arn));
    }
    if (m_ssl_certificate_s3_path.isSet()) {
        obj.insert(QString("SslCertificateS3Path"), ::OpenAPI::toJsonValue(m_ssl_certificate_s3_path));
    }
    if (m_crawl_system_folders_isSet) {
        obj.insert(QString("CrawlSystemFolders"), ::OpenAPI::toJsonValue(m_crawl_system_folders));
    }
    if (m_crawl_comments_isSet) {
        obj.insert(QString("CrawlComments"), ::OpenAPI::toJsonValue(m_crawl_comments));
    }
    if (m_entity_filter.isSet()) {
        obj.insert(QString("EntityFilter"), ::OpenAPI::toJsonValue(m_entity_filter));
    }
    if (m_document_library_field_mappings.isSet()) {
        obj.insert(QString("DocumentLibraryFieldMappings"), ::OpenAPI::toJsonValue(m_document_library_field_mappings));
    }
    if (m_blog_field_mappings.isSet()) {
        obj.insert(QString("BlogFieldMappings"), ::OpenAPI::toJsonValue(m_blog_field_mappings));
    }
    if (m_wiki_field_mappings.isSet()) {
        obj.insert(QString("WikiFieldMappings"), ::OpenAPI::toJsonValue(m_wiki_field_mappings));
    }
    if (m_inclusion_patterns.isSet()) {
        obj.insert(QString("InclusionPatterns"), ::OpenAPI::toJsonValue(m_inclusion_patterns));
    }
    if (m_exclusion_patterns.isSet()) {
        obj.insert(QString("ExclusionPatterns"), ::OpenAPI::toJsonValue(m_exclusion_patterns));
    }
    if (m_vpc_configuration.isSet()) {
        obj.insert(QString("VpcConfiguration"), ::OpenAPI::toJsonValue(m_vpc_configuration));
    }
    return obj;
}

QString OAIAlfrescoConfiguration::getSiteUrl() const {
    return m_site_url;
}
void OAIAlfrescoConfiguration::setSiteUrl(const QString &site_url) {
    m_site_url = site_url;
    m_site_url_isSet = true;
}

bool OAIAlfrescoConfiguration::is_site_url_Set() const{
    return m_site_url_isSet;
}

bool OAIAlfrescoConfiguration::is_site_url_Valid() const{
    return m_site_url_isValid;
}

QString OAIAlfrescoConfiguration::getSiteId() const {
    return m_site_id;
}
void OAIAlfrescoConfiguration::setSiteId(const QString &site_id) {
    m_site_id = site_id;
    m_site_id_isSet = true;
}

bool OAIAlfrescoConfiguration::is_site_id_Set() const{
    return m_site_id_isSet;
}

bool OAIAlfrescoConfiguration::is_site_id_Valid() const{
    return m_site_id_isValid;
}

QString OAIAlfrescoConfiguration::getSecretArn() const {
    return m_secret_arn;
}
void OAIAlfrescoConfiguration::setSecretArn(const QString &secret_arn) {
    m_secret_arn = secret_arn;
    m_secret_arn_isSet = true;
}

bool OAIAlfrescoConfiguration::is_secret_arn_Set() const{
    return m_secret_arn_isSet;
}

bool OAIAlfrescoConfiguration::is_secret_arn_Valid() const{
    return m_secret_arn_isValid;
}

OAIAlfrescoConfiguration_SslCertificateS3Path OAIAlfrescoConfiguration::getSslCertificateS3Path() const {
    return m_ssl_certificate_s3_path;
}
void OAIAlfrescoConfiguration::setSslCertificateS3Path(const OAIAlfrescoConfiguration_SslCertificateS3Path &ssl_certificate_s3_path) {
    m_ssl_certificate_s3_path = ssl_certificate_s3_path;
    m_ssl_certificate_s3_path_isSet = true;
}

bool OAIAlfrescoConfiguration::is_ssl_certificate_s3_path_Set() const{
    return m_ssl_certificate_s3_path_isSet;
}

bool OAIAlfrescoConfiguration::is_ssl_certificate_s3_path_Valid() const{
    return m_ssl_certificate_s3_path_isValid;
}

bool OAIAlfrescoConfiguration::getCrawlSystemFolders() const {
    return m_crawl_system_folders;
}
void OAIAlfrescoConfiguration::setCrawlSystemFolders(const bool &crawl_system_folders) {
    m_crawl_system_folders = crawl_system_folders;
    m_crawl_system_folders_isSet = true;
}

bool OAIAlfrescoConfiguration::is_crawl_system_folders_Set() const{
    return m_crawl_system_folders_isSet;
}

bool OAIAlfrescoConfiguration::is_crawl_system_folders_Valid() const{
    return m_crawl_system_folders_isValid;
}

bool OAIAlfrescoConfiguration::getCrawlComments() const {
    return m_crawl_comments;
}
void OAIAlfrescoConfiguration::setCrawlComments(const bool &crawl_comments) {
    m_crawl_comments = crawl_comments;
    m_crawl_comments_isSet = true;
}

bool OAIAlfrescoConfiguration::is_crawl_comments_Set() const{
    return m_crawl_comments_isSet;
}

bool OAIAlfrescoConfiguration::is_crawl_comments_Valid() const{
    return m_crawl_comments_isValid;
}

QList OAIAlfrescoConfiguration::getEntityFilter() const {
    return m_entity_filter;
}
void OAIAlfrescoConfiguration::setEntityFilter(const QList &entity_filter) {
    m_entity_filter = entity_filter;
    m_entity_filter_isSet = true;
}

bool OAIAlfrescoConfiguration::is_entity_filter_Set() const{
    return m_entity_filter_isSet;
}

bool OAIAlfrescoConfiguration::is_entity_filter_Valid() const{
    return m_entity_filter_isValid;
}

QList OAIAlfrescoConfiguration::getDocumentLibraryFieldMappings() const {
    return m_document_library_field_mappings;
}
void OAIAlfrescoConfiguration::setDocumentLibraryFieldMappings(const QList &document_library_field_mappings) {
    m_document_library_field_mappings = document_library_field_mappings;
    m_document_library_field_mappings_isSet = true;
}

bool OAIAlfrescoConfiguration::is_document_library_field_mappings_Set() const{
    return m_document_library_field_mappings_isSet;
}

bool OAIAlfrescoConfiguration::is_document_library_field_mappings_Valid() const{
    return m_document_library_field_mappings_isValid;
}

QList OAIAlfrescoConfiguration::getBlogFieldMappings() const {
    return m_blog_field_mappings;
}
void OAIAlfrescoConfiguration::setBlogFieldMappings(const QList &blog_field_mappings) {
    m_blog_field_mappings = blog_field_mappings;
    m_blog_field_mappings_isSet = true;
}

bool OAIAlfrescoConfiguration::is_blog_field_mappings_Set() const{
    return m_blog_field_mappings_isSet;
}

bool OAIAlfrescoConfiguration::is_blog_field_mappings_Valid() const{
    return m_blog_field_mappings_isValid;
}

QList OAIAlfrescoConfiguration::getWikiFieldMappings() const {
    return m_wiki_field_mappings;
}
void OAIAlfrescoConfiguration::setWikiFieldMappings(const QList &wiki_field_mappings) {
    m_wiki_field_mappings = wiki_field_mappings;
    m_wiki_field_mappings_isSet = true;
}

bool OAIAlfrescoConfiguration::is_wiki_field_mappings_Set() const{
    return m_wiki_field_mappings_isSet;
}

bool OAIAlfrescoConfiguration::is_wiki_field_mappings_Valid() const{
    return m_wiki_field_mappings_isValid;
}

QList OAIAlfrescoConfiguration::getInclusionPatterns() const {
    return m_inclusion_patterns;
}
void OAIAlfrescoConfiguration::setInclusionPatterns(const QList &inclusion_patterns) {
    m_inclusion_patterns = inclusion_patterns;
    m_inclusion_patterns_isSet = true;
}

bool OAIAlfrescoConfiguration::is_inclusion_patterns_Set() const{
    return m_inclusion_patterns_isSet;
}

bool OAIAlfrescoConfiguration::is_inclusion_patterns_Valid() const{
    return m_inclusion_patterns_isValid;
}

QList OAIAlfrescoConfiguration::getExclusionPatterns() const {
    return m_exclusion_patterns;
}
void OAIAlfrescoConfiguration::setExclusionPatterns(const QList &exclusion_patterns) {
    m_exclusion_patterns = exclusion_patterns;
    m_exclusion_patterns_isSet = true;
}

bool OAIAlfrescoConfiguration::is_exclusion_patterns_Set() const{
    return m_exclusion_patterns_isSet;
}

bool OAIAlfrescoConfiguration::is_exclusion_patterns_Valid() const{
    return m_exclusion_patterns_isValid;
}

OAIAlfrescoConfiguration_VpcConfiguration OAIAlfrescoConfiguration::getVpcConfiguration() const {
    return m_vpc_configuration;
}
void OAIAlfrescoConfiguration::setVpcConfiguration(const OAIAlfrescoConfiguration_VpcConfiguration &vpc_configuration) {
    m_vpc_configuration = vpc_configuration;
    m_vpc_configuration_isSet = true;
}

bool OAIAlfrescoConfiguration::is_vpc_configuration_Set() const{
    return m_vpc_configuration_isSet;
}

bool OAIAlfrescoConfiguration::is_vpc_configuration_Valid() const{
    return m_vpc_configuration_isValid;
}

bool OAIAlfrescoConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_site_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssl_certificate_s3_path.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_crawl_system_folders_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crawl_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_library_field_mappings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_blog_field_mappings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_wiki_field_mappings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inclusion_patterns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclusion_patterns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAlfrescoConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_site_url_isValid && m_site_id_isValid && m_secret_arn_isValid && m_ssl_certificate_s3_path_isValid && true;
}

} // namespace OpenAPI
