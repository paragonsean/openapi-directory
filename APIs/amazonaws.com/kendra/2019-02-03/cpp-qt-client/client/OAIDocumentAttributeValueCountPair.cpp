/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocumentAttributeValueCountPair.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocumentAttributeValueCountPair::OAIDocumentAttributeValueCountPair(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocumentAttributeValueCountPair::OAIDocumentAttributeValueCountPair() {
    this->initializeModel();
}

OAIDocumentAttributeValueCountPair::~OAIDocumentAttributeValueCountPair() {}

void OAIDocumentAttributeValueCountPair::initializeModel() {

    m_document_attribute_value_isSet = false;
    m_document_attribute_value_isValid = false;

    m_count_isSet = false;
    m_count_isValid = false;

    m_facet_results_isSet = false;
    m_facet_results_isValid = false;
}

void OAIDocumentAttributeValueCountPair::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocumentAttributeValueCountPair::fromJsonObject(QJsonObject json) {

    m_document_attribute_value_isValid = ::OpenAPI::fromJsonValue(m_document_attribute_value, json[QString("DocumentAttributeValue")]);
    m_document_attribute_value_isSet = !json[QString("DocumentAttributeValue")].isNull() && m_document_attribute_value_isValid;

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("Count")]);
    m_count_isSet = !json[QString("Count")].isNull() && m_count_isValid;

    m_facet_results_isValid = ::OpenAPI::fromJsonValue(m_facet_results, json[QString("FacetResults")]);
    m_facet_results_isSet = !json[QString("FacetResults")].isNull() && m_facet_results_isValid;
}

QString OAIDocumentAttributeValueCountPair::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocumentAttributeValueCountPair::asJsonObject() const {
    QJsonObject obj;
    if (m_document_attribute_value.isSet()) {
        obj.insert(QString("DocumentAttributeValue"), ::OpenAPI::toJsonValue(m_document_attribute_value));
    }
    if (m_count_isSet) {
        obj.insert(QString("Count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_facet_results.isSet()) {
        obj.insert(QString("FacetResults"), ::OpenAPI::toJsonValue(m_facet_results));
    }
    return obj;
}

OAIDocumentAttributeValueCountPair_DocumentAttributeValue OAIDocumentAttributeValueCountPair::getDocumentAttributeValue() const {
    return m_document_attribute_value;
}
void OAIDocumentAttributeValueCountPair::setDocumentAttributeValue(const OAIDocumentAttributeValueCountPair_DocumentAttributeValue &document_attribute_value) {
    m_document_attribute_value = document_attribute_value;
    m_document_attribute_value_isSet = true;
}

bool OAIDocumentAttributeValueCountPair::is_document_attribute_value_Set() const{
    return m_document_attribute_value_isSet;
}

bool OAIDocumentAttributeValueCountPair::is_document_attribute_value_Valid() const{
    return m_document_attribute_value_isValid;
}

qint32 OAIDocumentAttributeValueCountPair::getCount() const {
    return m_count;
}
void OAIDocumentAttributeValueCountPair::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIDocumentAttributeValueCountPair::is_count_Set() const{
    return m_count_isSet;
}

bool OAIDocumentAttributeValueCountPair::is_count_Valid() const{
    return m_count_isValid;
}

QList OAIDocumentAttributeValueCountPair::getFacetResults() const {
    return m_facet_results;
}
void OAIDocumentAttributeValueCountPair::setFacetResults(const QList &facet_results) {
    m_facet_results = facet_results;
    m_facet_results_isSet = true;
}

bool OAIDocumentAttributeValueCountPair::is_facet_results_Set() const{
    return m_facet_results_isSet;
}

bool OAIDocumentAttributeValueCountPair::is_facet_results_Valid() const{
    return m_facet_results_isValid;
}

bool OAIDocumentAttributeValueCountPair::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_document_attribute_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_facet_results.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocumentAttributeValueCountPair::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
