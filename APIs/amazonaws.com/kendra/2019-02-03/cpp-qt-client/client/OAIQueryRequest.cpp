/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryRequest::OAIQueryRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryRequest::OAIQueryRequest() {
    this->initializeModel();
}

OAIQueryRequest::~OAIQueryRequest() {}

void OAIQueryRequest::initializeModel() {

    m_index_id_isSet = false;
    m_index_id_isValid = false;

    m_query_text_isSet = false;
    m_query_text_isValid = false;

    m_attribute_filter_isSet = false;
    m_attribute_filter_isValid = false;

    m_facets_isSet = false;
    m_facets_isValid = false;

    m_requested_document_attributes_isSet = false;
    m_requested_document_attributes_isValid = false;

    m_query_result_type_filter_isSet = false;
    m_query_result_type_filter_isValid = false;

    m_document_relevance_override_configurations_isSet = false;
    m_document_relevance_override_configurations_isValid = false;

    m_page_number_isSet = false;
    m_page_number_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_sorting_configuration_isSet = false;
    m_sorting_configuration_isValid = false;

    m_user_context_isSet = false;
    m_user_context_isValid = false;

    m_visitor_id_isSet = false;
    m_visitor_id_isValid = false;

    m_spell_correction_configuration_isSet = false;
    m_spell_correction_configuration_isValid = false;
}

void OAIQueryRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryRequest::fromJsonObject(QJsonObject json) {

    m_index_id_isValid = ::OpenAPI::fromJsonValue(m_index_id, json[QString("IndexId")]);
    m_index_id_isSet = !json[QString("IndexId")].isNull() && m_index_id_isValid;

    m_query_text_isValid = ::OpenAPI::fromJsonValue(m_query_text, json[QString("QueryText")]);
    m_query_text_isSet = !json[QString("QueryText")].isNull() && m_query_text_isValid;

    m_attribute_filter_isValid = ::OpenAPI::fromJsonValue(m_attribute_filter, json[QString("AttributeFilter")]);
    m_attribute_filter_isSet = !json[QString("AttributeFilter")].isNull() && m_attribute_filter_isValid;

    m_facets_isValid = ::OpenAPI::fromJsonValue(m_facets, json[QString("Facets")]);
    m_facets_isSet = !json[QString("Facets")].isNull() && m_facets_isValid;

    m_requested_document_attributes_isValid = ::OpenAPI::fromJsonValue(m_requested_document_attributes, json[QString("RequestedDocumentAttributes")]);
    m_requested_document_attributes_isSet = !json[QString("RequestedDocumentAttributes")].isNull() && m_requested_document_attributes_isValid;

    m_query_result_type_filter_isValid = ::OpenAPI::fromJsonValue(m_query_result_type_filter, json[QString("QueryResultTypeFilter")]);
    m_query_result_type_filter_isSet = !json[QString("QueryResultTypeFilter")].isNull() && m_query_result_type_filter_isValid;

    m_document_relevance_override_configurations_isValid = ::OpenAPI::fromJsonValue(m_document_relevance_override_configurations, json[QString("DocumentRelevanceOverrideConfigurations")]);
    m_document_relevance_override_configurations_isSet = !json[QString("DocumentRelevanceOverrideConfigurations")].isNull() && m_document_relevance_override_configurations_isValid;

    m_page_number_isValid = ::OpenAPI::fromJsonValue(m_page_number, json[QString("PageNumber")]);
    m_page_number_isSet = !json[QString("PageNumber")].isNull() && m_page_number_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("PageSize")]);
    m_page_size_isSet = !json[QString("PageSize")].isNull() && m_page_size_isValid;

    m_sorting_configuration_isValid = ::OpenAPI::fromJsonValue(m_sorting_configuration, json[QString("SortingConfiguration")]);
    m_sorting_configuration_isSet = !json[QString("SortingConfiguration")].isNull() && m_sorting_configuration_isValid;

    m_user_context_isValid = ::OpenAPI::fromJsonValue(m_user_context, json[QString("UserContext")]);
    m_user_context_isSet = !json[QString("UserContext")].isNull() && m_user_context_isValid;

    m_visitor_id_isValid = ::OpenAPI::fromJsonValue(m_visitor_id, json[QString("VisitorId")]);
    m_visitor_id_isSet = !json[QString("VisitorId")].isNull() && m_visitor_id_isValid;

    m_spell_correction_configuration_isValid = ::OpenAPI::fromJsonValue(m_spell_correction_configuration, json[QString("SpellCorrectionConfiguration")]);
    m_spell_correction_configuration_isSet = !json[QString("SpellCorrectionConfiguration")].isNull() && m_spell_correction_configuration_isValid;
}

QString OAIQueryRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_index_id_isSet) {
        obj.insert(QString("IndexId"), ::OpenAPI::toJsonValue(m_index_id));
    }
    if (m_query_text_isSet) {
        obj.insert(QString("QueryText"), ::OpenAPI::toJsonValue(m_query_text));
    }
    if (m_attribute_filter.isSet()) {
        obj.insert(QString("AttributeFilter"), ::OpenAPI::toJsonValue(m_attribute_filter));
    }
    if (m_facets.isSet()) {
        obj.insert(QString("Facets"), ::OpenAPI::toJsonValue(m_facets));
    }
    if (m_requested_document_attributes.isSet()) {
        obj.insert(QString("RequestedDocumentAttributes"), ::OpenAPI::toJsonValue(m_requested_document_attributes));
    }
    if (m_query_result_type_filter.isSet()) {
        obj.insert(QString("QueryResultTypeFilter"), ::OpenAPI::toJsonValue(m_query_result_type_filter));
    }
    if (m_document_relevance_override_configurations.isSet()) {
        obj.insert(QString("DocumentRelevanceOverrideConfigurations"), ::OpenAPI::toJsonValue(m_document_relevance_override_configurations));
    }
    if (m_page_number_isSet) {
        obj.insert(QString("PageNumber"), ::OpenAPI::toJsonValue(m_page_number));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("PageSize"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_sorting_configuration.isSet()) {
        obj.insert(QString("SortingConfiguration"), ::OpenAPI::toJsonValue(m_sorting_configuration));
    }
    if (m_user_context.isSet()) {
        obj.insert(QString("UserContext"), ::OpenAPI::toJsonValue(m_user_context));
    }
    if (m_visitor_id_isSet) {
        obj.insert(QString("VisitorId"), ::OpenAPI::toJsonValue(m_visitor_id));
    }
    if (m_spell_correction_configuration.isSet()) {
        obj.insert(QString("SpellCorrectionConfiguration"), ::OpenAPI::toJsonValue(m_spell_correction_configuration));
    }
    return obj;
}

QString OAIQueryRequest::getIndexId() const {
    return m_index_id;
}
void OAIQueryRequest::setIndexId(const QString &index_id) {
    m_index_id = index_id;
    m_index_id_isSet = true;
}

bool OAIQueryRequest::is_index_id_Set() const{
    return m_index_id_isSet;
}

bool OAIQueryRequest::is_index_id_Valid() const{
    return m_index_id_isValid;
}

QString OAIQueryRequest::getQueryText() const {
    return m_query_text;
}
void OAIQueryRequest::setQueryText(const QString &query_text) {
    m_query_text = query_text;
    m_query_text_isSet = true;
}

bool OAIQueryRequest::is_query_text_Set() const{
    return m_query_text_isSet;
}

bool OAIQueryRequest::is_query_text_Valid() const{
    return m_query_text_isValid;
}

OAIQueryRequest_AttributeFilter OAIQueryRequest::getAttributeFilter() const {
    return m_attribute_filter;
}
void OAIQueryRequest::setAttributeFilter(const OAIQueryRequest_AttributeFilter &attribute_filter) {
    m_attribute_filter = attribute_filter;
    m_attribute_filter_isSet = true;
}

bool OAIQueryRequest::is_attribute_filter_Set() const{
    return m_attribute_filter_isSet;
}

bool OAIQueryRequest::is_attribute_filter_Valid() const{
    return m_attribute_filter_isValid;
}

QList OAIQueryRequest::getFacets() const {
    return m_facets;
}
void OAIQueryRequest::setFacets(const QList &facets) {
    m_facets = facets;
    m_facets_isSet = true;
}

bool OAIQueryRequest::is_facets_Set() const{
    return m_facets_isSet;
}

bool OAIQueryRequest::is_facets_Valid() const{
    return m_facets_isValid;
}

QList OAIQueryRequest::getRequestedDocumentAttributes() const {
    return m_requested_document_attributes;
}
void OAIQueryRequest::setRequestedDocumentAttributes(const QList &requested_document_attributes) {
    m_requested_document_attributes = requested_document_attributes;
    m_requested_document_attributes_isSet = true;
}

bool OAIQueryRequest::is_requested_document_attributes_Set() const{
    return m_requested_document_attributes_isSet;
}

bool OAIQueryRequest::is_requested_document_attributes_Valid() const{
    return m_requested_document_attributes_isValid;
}

OAIQueryResultType OAIQueryRequest::getQueryResultTypeFilter() const {
    return m_query_result_type_filter;
}
void OAIQueryRequest::setQueryResultTypeFilter(const OAIQueryResultType &query_result_type_filter) {
    m_query_result_type_filter = query_result_type_filter;
    m_query_result_type_filter_isSet = true;
}

bool OAIQueryRequest::is_query_result_type_filter_Set() const{
    return m_query_result_type_filter_isSet;
}

bool OAIQueryRequest::is_query_result_type_filter_Valid() const{
    return m_query_result_type_filter_isValid;
}

QList OAIQueryRequest::getDocumentRelevanceOverrideConfigurations() const {
    return m_document_relevance_override_configurations;
}
void OAIQueryRequest::setDocumentRelevanceOverrideConfigurations(const QList &document_relevance_override_configurations) {
    m_document_relevance_override_configurations = document_relevance_override_configurations;
    m_document_relevance_override_configurations_isSet = true;
}

bool OAIQueryRequest::is_document_relevance_override_configurations_Set() const{
    return m_document_relevance_override_configurations_isSet;
}

bool OAIQueryRequest::is_document_relevance_override_configurations_Valid() const{
    return m_document_relevance_override_configurations_isValid;
}

qint32 OAIQueryRequest::getPageNumber() const {
    return m_page_number;
}
void OAIQueryRequest::setPageNumber(const qint32 &page_number) {
    m_page_number = page_number;
    m_page_number_isSet = true;
}

bool OAIQueryRequest::is_page_number_Set() const{
    return m_page_number_isSet;
}

bool OAIQueryRequest::is_page_number_Valid() const{
    return m_page_number_isValid;
}

qint32 OAIQueryRequest::getPageSize() const {
    return m_page_size;
}
void OAIQueryRequest::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAIQueryRequest::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAIQueryRequest::is_page_size_Valid() const{
    return m_page_size_isValid;
}

OAIQueryRequest_SortingConfiguration OAIQueryRequest::getSortingConfiguration() const {
    return m_sorting_configuration;
}
void OAIQueryRequest::setSortingConfiguration(const OAIQueryRequest_SortingConfiguration &sorting_configuration) {
    m_sorting_configuration = sorting_configuration;
    m_sorting_configuration_isSet = true;
}

bool OAIQueryRequest::is_sorting_configuration_Set() const{
    return m_sorting_configuration_isSet;
}

bool OAIQueryRequest::is_sorting_configuration_Valid() const{
    return m_sorting_configuration_isValid;
}

OAIQueryRequest_UserContext OAIQueryRequest::getUserContext() const {
    return m_user_context;
}
void OAIQueryRequest::setUserContext(const OAIQueryRequest_UserContext &user_context) {
    m_user_context = user_context;
    m_user_context_isSet = true;
}

bool OAIQueryRequest::is_user_context_Set() const{
    return m_user_context_isSet;
}

bool OAIQueryRequest::is_user_context_Valid() const{
    return m_user_context_isValid;
}

QString OAIQueryRequest::getVisitorId() const {
    return m_visitor_id;
}
void OAIQueryRequest::setVisitorId(const QString &visitor_id) {
    m_visitor_id = visitor_id;
    m_visitor_id_isSet = true;
}

bool OAIQueryRequest::is_visitor_id_Set() const{
    return m_visitor_id_isSet;
}

bool OAIQueryRequest::is_visitor_id_Valid() const{
    return m_visitor_id_isValid;
}

OAIQueryRequest_SpellCorrectionConfiguration OAIQueryRequest::getSpellCorrectionConfiguration() const {
    return m_spell_correction_configuration;
}
void OAIQueryRequest::setSpellCorrectionConfiguration(const OAIQueryRequest_SpellCorrectionConfiguration &spell_correction_configuration) {
    m_spell_correction_configuration = spell_correction_configuration;
    m_spell_correction_configuration_isSet = true;
}

bool OAIQueryRequest::is_spell_correction_configuration_Set() const{
    return m_spell_correction_configuration_isSet;
}

bool OAIQueryRequest::is_spell_correction_configuration_Valid() const{
    return m_spell_correction_configuration_isValid;
}

bool OAIQueryRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_index_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attribute_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_facets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_document_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_result_type_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_relevance_override_configurations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sorting_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_visitor_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spell_correction_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_index_id_isValid && true;
}

} // namespace OpenAPI
