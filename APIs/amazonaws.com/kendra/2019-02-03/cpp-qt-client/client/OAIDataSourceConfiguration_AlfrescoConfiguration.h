/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDataSourceConfiguration_AlfrescoConfiguration.h
 *
 * 
 */

#ifndef OAIDataSourceConfiguration_AlfrescoConfiguration_H
#define OAIDataSourceConfiguration_AlfrescoConfiguration_H

#include <QJsonObject>

#include "OAIAlfrescoConfiguration_SslCertificateS3Path.h"
#include "OAIAlfrescoConfiguration_VpcConfiguration.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAlfrescoConfiguration_SslCertificateS3Path;
class OAIAlfrescoConfiguration_VpcConfiguration;

class OAIDataSourceConfiguration_AlfrescoConfiguration : public OAIObject {
public:
    OAIDataSourceConfiguration_AlfrescoConfiguration();
    OAIDataSourceConfiguration_AlfrescoConfiguration(QString json);
    ~OAIDataSourceConfiguration_AlfrescoConfiguration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getSiteUrl() const;
    void setSiteUrl(const QString &site_url);
    bool is_site_url_Set() const;
    bool is_site_url_Valid() const;

    QString getSiteId() const;
    void setSiteId(const QString &site_id);
    bool is_site_id_Set() const;
    bool is_site_id_Valid() const;

    QString getSecretArn() const;
    void setSecretArn(const QString &secret_arn);
    bool is_secret_arn_Set() const;
    bool is_secret_arn_Valid() const;

    OAIAlfrescoConfiguration_SslCertificateS3Path getSslCertificateS3Path() const;
    void setSslCertificateS3Path(const OAIAlfrescoConfiguration_SslCertificateS3Path &ssl_certificate_s3_path);
    bool is_ssl_certificate_s3_path_Set() const;
    bool is_ssl_certificate_s3_path_Valid() const;

    bool getCrawlSystemFolders() const;
    void setCrawlSystemFolders(const bool &crawl_system_folders);
    bool is_crawl_system_folders_Set() const;
    bool is_crawl_system_folders_Valid() const;

    bool getCrawlComments() const;
    void setCrawlComments(const bool &crawl_comments);
    bool is_crawl_comments_Set() const;
    bool is_crawl_comments_Valid() const;

    QList getEntityFilter() const;
    void setEntityFilter(const QList &entity_filter);
    bool is_entity_filter_Set() const;
    bool is_entity_filter_Valid() const;

    QList getDocumentLibraryFieldMappings() const;
    void setDocumentLibraryFieldMappings(const QList &document_library_field_mappings);
    bool is_document_library_field_mappings_Set() const;
    bool is_document_library_field_mappings_Valid() const;

    QList getBlogFieldMappings() const;
    void setBlogFieldMappings(const QList &blog_field_mappings);
    bool is_blog_field_mappings_Set() const;
    bool is_blog_field_mappings_Valid() const;

    QList getWikiFieldMappings() const;
    void setWikiFieldMappings(const QList &wiki_field_mappings);
    bool is_wiki_field_mappings_Set() const;
    bool is_wiki_field_mappings_Valid() const;

    QList getInclusionPatterns() const;
    void setInclusionPatterns(const QList &inclusion_patterns);
    bool is_inclusion_patterns_Set() const;
    bool is_inclusion_patterns_Valid() const;

    QList getExclusionPatterns() const;
    void setExclusionPatterns(const QList &exclusion_patterns);
    bool is_exclusion_patterns_Set() const;
    bool is_exclusion_patterns_Valid() const;

    OAIAlfrescoConfiguration_VpcConfiguration getVpcConfiguration() const;
    void setVpcConfiguration(const OAIAlfrescoConfiguration_VpcConfiguration &vpc_configuration);
    bool is_vpc_configuration_Set() const;
    bool is_vpc_configuration_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_site_url;
    bool m_site_url_isSet;
    bool m_site_url_isValid;

    QString m_site_id;
    bool m_site_id_isSet;
    bool m_site_id_isValid;

    QString m_secret_arn;
    bool m_secret_arn_isSet;
    bool m_secret_arn_isValid;

    OAIAlfrescoConfiguration_SslCertificateS3Path m_ssl_certificate_s3_path;
    bool m_ssl_certificate_s3_path_isSet;
    bool m_ssl_certificate_s3_path_isValid;

    bool m_crawl_system_folders;
    bool m_crawl_system_folders_isSet;
    bool m_crawl_system_folders_isValid;

    bool m_crawl_comments;
    bool m_crawl_comments_isSet;
    bool m_crawl_comments_isValid;

    QList m_entity_filter;
    bool m_entity_filter_isSet;
    bool m_entity_filter_isValid;

    QList m_document_library_field_mappings;
    bool m_document_library_field_mappings_isSet;
    bool m_document_library_field_mappings_isValid;

    QList m_blog_field_mappings;
    bool m_blog_field_mappings_isSet;
    bool m_blog_field_mappings_isValid;

    QList m_wiki_field_mappings;
    bool m_wiki_field_mappings_isSet;
    bool m_wiki_field_mappings_isValid;

    QList m_inclusion_patterns;
    bool m_inclusion_patterns_isSet;
    bool m_inclusion_patterns_isValid;

    QList m_exclusion_patterns;
    bool m_exclusion_patterns_isSet;
    bool m_exclusion_patterns_isValid;

    OAIAlfrescoConfiguration_VpcConfiguration m_vpc_configuration;
    bool m_vpc_configuration_isSet;
    bool m_vpc_configuration_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDataSourceConfiguration_AlfrescoConfiguration)

#endif // OAIDataSourceConfiguration_AlfrescoConfiguration_H
