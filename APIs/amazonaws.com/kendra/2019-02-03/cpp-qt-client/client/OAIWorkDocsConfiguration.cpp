/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkDocsConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkDocsConfiguration::OAIWorkDocsConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkDocsConfiguration::OAIWorkDocsConfiguration() {
    this->initializeModel();
}

OAIWorkDocsConfiguration::~OAIWorkDocsConfiguration() {}

void OAIWorkDocsConfiguration::initializeModel() {

    m_organization_id_isSet = false;
    m_organization_id_isValid = false;

    m_crawl_comments_isSet = false;
    m_crawl_comments_isValid = false;

    m_use_change_log_isSet = false;
    m_use_change_log_isValid = false;

    m_inclusion_patterns_isSet = false;
    m_inclusion_patterns_isValid = false;

    m_exclusion_patterns_isSet = false;
    m_exclusion_patterns_isValid = false;

    m_field_mappings_isSet = false;
    m_field_mappings_isValid = false;
}

void OAIWorkDocsConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkDocsConfiguration::fromJsonObject(QJsonObject json) {

    m_organization_id_isValid = ::OpenAPI::fromJsonValue(m_organization_id, json[QString("OrganizationId")]);
    m_organization_id_isSet = !json[QString("OrganizationId")].isNull() && m_organization_id_isValid;

    m_crawl_comments_isValid = ::OpenAPI::fromJsonValue(m_crawl_comments, json[QString("CrawlComments")]);
    m_crawl_comments_isSet = !json[QString("CrawlComments")].isNull() && m_crawl_comments_isValid;

    m_use_change_log_isValid = ::OpenAPI::fromJsonValue(m_use_change_log, json[QString("UseChangeLog")]);
    m_use_change_log_isSet = !json[QString("UseChangeLog")].isNull() && m_use_change_log_isValid;

    m_inclusion_patterns_isValid = ::OpenAPI::fromJsonValue(m_inclusion_patterns, json[QString("InclusionPatterns")]);
    m_inclusion_patterns_isSet = !json[QString("InclusionPatterns")].isNull() && m_inclusion_patterns_isValid;

    m_exclusion_patterns_isValid = ::OpenAPI::fromJsonValue(m_exclusion_patterns, json[QString("ExclusionPatterns")]);
    m_exclusion_patterns_isSet = !json[QString("ExclusionPatterns")].isNull() && m_exclusion_patterns_isValid;

    m_field_mappings_isValid = ::OpenAPI::fromJsonValue(m_field_mappings, json[QString("FieldMappings")]);
    m_field_mappings_isSet = !json[QString("FieldMappings")].isNull() && m_field_mappings_isValid;
}

QString OAIWorkDocsConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkDocsConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_organization_id_isSet) {
        obj.insert(QString("OrganizationId"), ::OpenAPI::toJsonValue(m_organization_id));
    }
    if (m_crawl_comments_isSet) {
        obj.insert(QString("CrawlComments"), ::OpenAPI::toJsonValue(m_crawl_comments));
    }
    if (m_use_change_log_isSet) {
        obj.insert(QString("UseChangeLog"), ::OpenAPI::toJsonValue(m_use_change_log));
    }
    if (m_inclusion_patterns.isSet()) {
        obj.insert(QString("InclusionPatterns"), ::OpenAPI::toJsonValue(m_inclusion_patterns));
    }
    if (m_exclusion_patterns.isSet()) {
        obj.insert(QString("ExclusionPatterns"), ::OpenAPI::toJsonValue(m_exclusion_patterns));
    }
    if (m_field_mappings.isSet()) {
        obj.insert(QString("FieldMappings"), ::OpenAPI::toJsonValue(m_field_mappings));
    }
    return obj;
}

QString OAIWorkDocsConfiguration::getOrganizationId() const {
    return m_organization_id;
}
void OAIWorkDocsConfiguration::setOrganizationId(const QString &organization_id) {
    m_organization_id = organization_id;
    m_organization_id_isSet = true;
}

bool OAIWorkDocsConfiguration::is_organization_id_Set() const{
    return m_organization_id_isSet;
}

bool OAIWorkDocsConfiguration::is_organization_id_Valid() const{
    return m_organization_id_isValid;
}

bool OAIWorkDocsConfiguration::getCrawlComments() const {
    return m_crawl_comments;
}
void OAIWorkDocsConfiguration::setCrawlComments(const bool &crawl_comments) {
    m_crawl_comments = crawl_comments;
    m_crawl_comments_isSet = true;
}

bool OAIWorkDocsConfiguration::is_crawl_comments_Set() const{
    return m_crawl_comments_isSet;
}

bool OAIWorkDocsConfiguration::is_crawl_comments_Valid() const{
    return m_crawl_comments_isValid;
}

bool OAIWorkDocsConfiguration::getUseChangeLog() const {
    return m_use_change_log;
}
void OAIWorkDocsConfiguration::setUseChangeLog(const bool &use_change_log) {
    m_use_change_log = use_change_log;
    m_use_change_log_isSet = true;
}

bool OAIWorkDocsConfiguration::is_use_change_log_Set() const{
    return m_use_change_log_isSet;
}

bool OAIWorkDocsConfiguration::is_use_change_log_Valid() const{
    return m_use_change_log_isValid;
}

QList OAIWorkDocsConfiguration::getInclusionPatterns() const {
    return m_inclusion_patterns;
}
void OAIWorkDocsConfiguration::setInclusionPatterns(const QList &inclusion_patterns) {
    m_inclusion_patterns = inclusion_patterns;
    m_inclusion_patterns_isSet = true;
}

bool OAIWorkDocsConfiguration::is_inclusion_patterns_Set() const{
    return m_inclusion_patterns_isSet;
}

bool OAIWorkDocsConfiguration::is_inclusion_patterns_Valid() const{
    return m_inclusion_patterns_isValid;
}

QList OAIWorkDocsConfiguration::getExclusionPatterns() const {
    return m_exclusion_patterns;
}
void OAIWorkDocsConfiguration::setExclusionPatterns(const QList &exclusion_patterns) {
    m_exclusion_patterns = exclusion_patterns;
    m_exclusion_patterns_isSet = true;
}

bool OAIWorkDocsConfiguration::is_exclusion_patterns_Set() const{
    return m_exclusion_patterns_isSet;
}

bool OAIWorkDocsConfiguration::is_exclusion_patterns_Valid() const{
    return m_exclusion_patterns_isValid;
}

QList OAIWorkDocsConfiguration::getFieldMappings() const {
    return m_field_mappings;
}
void OAIWorkDocsConfiguration::setFieldMappings(const QList &field_mappings) {
    m_field_mappings = field_mappings;
    m_field_mappings_isSet = true;
}

bool OAIWorkDocsConfiguration::is_field_mappings_Set() const{
    return m_field_mappings_isSet;
}

bool OAIWorkDocsConfiguration::is_field_mappings_Valid() const{
    return m_field_mappings_isValid;
}

bool OAIWorkDocsConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_organization_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crawl_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_change_log_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inclusion_patterns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclusion_patterns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_mappings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkDocsConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_organization_id_isValid && true;
}

} // namespace OpenAPI
