/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIWebCrawlerConfiguration.h
 *
 * Provides the configuration information required for Amazon Kendra Web Crawler.
 */

#ifndef OAIWebCrawlerConfiguration_H
#define OAIWebCrawlerConfiguration_H

#include <QJsonObject>

#include "OAIWebCrawlerConfiguration_AuthenticationConfiguration.h"
#include "OAIWebCrawlerConfiguration_ProxyConfiguration.h"
#include "OAIWebCrawlerConfiguration_Urls.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIWebCrawlerConfiguration_Urls;
class OAIWebCrawlerConfiguration_ProxyConfiguration;
class OAIWebCrawlerConfiguration_AuthenticationConfiguration;

class OAIWebCrawlerConfiguration : public OAIObject {
public:
    OAIWebCrawlerConfiguration();
    OAIWebCrawlerConfiguration(QString json);
    ~OAIWebCrawlerConfiguration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIWebCrawlerConfiguration_Urls getUrls() const;
    void setUrls(const OAIWebCrawlerConfiguration_Urls &urls);
    bool is_urls_Set() const;
    bool is_urls_Valid() const;

    qint32 getCrawlDepth() const;
    void setCrawlDepth(const qint32 &crawl_depth);
    bool is_crawl_depth_Set() const;
    bool is_crawl_depth_Valid() const;

    qint32 getMaxLinksPerPage() const;
    void setMaxLinksPerPage(const qint32 &max_links_per_page);
    bool is_max_links_per_page_Set() const;
    bool is_max_links_per_page_Valid() const;

    float getMaxContentSizePerPageInMegaBytes() const;
    void setMaxContentSizePerPageInMegaBytes(const float &max_content_size_per_page_in_mega_bytes);
    bool is_max_content_size_per_page_in_mega_bytes_Set() const;
    bool is_max_content_size_per_page_in_mega_bytes_Valid() const;

    qint32 getMaxUrlsPerMinuteCrawlRate() const;
    void setMaxUrlsPerMinuteCrawlRate(const qint32 &max_urls_per_minute_crawl_rate);
    bool is_max_urls_per_minute_crawl_rate_Set() const;
    bool is_max_urls_per_minute_crawl_rate_Valid() const;

    QList getUrlInclusionPatterns() const;
    void setUrlInclusionPatterns(const QList &url_inclusion_patterns);
    bool is_url_inclusion_patterns_Set() const;
    bool is_url_inclusion_patterns_Valid() const;

    QList getUrlExclusionPatterns() const;
    void setUrlExclusionPatterns(const QList &url_exclusion_patterns);
    bool is_url_exclusion_patterns_Set() const;
    bool is_url_exclusion_patterns_Valid() const;

    OAIWebCrawlerConfiguration_ProxyConfiguration getProxyConfiguration() const;
    void setProxyConfiguration(const OAIWebCrawlerConfiguration_ProxyConfiguration &proxy_configuration);
    bool is_proxy_configuration_Set() const;
    bool is_proxy_configuration_Valid() const;

    OAIWebCrawlerConfiguration_AuthenticationConfiguration getAuthenticationConfiguration() const;
    void setAuthenticationConfiguration(const OAIWebCrawlerConfiguration_AuthenticationConfiguration &authentication_configuration);
    bool is_authentication_configuration_Set() const;
    bool is_authentication_configuration_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIWebCrawlerConfiguration_Urls m_urls;
    bool m_urls_isSet;
    bool m_urls_isValid;

    qint32 m_crawl_depth;
    bool m_crawl_depth_isSet;
    bool m_crawl_depth_isValid;

    qint32 m_max_links_per_page;
    bool m_max_links_per_page_isSet;
    bool m_max_links_per_page_isValid;

    float m_max_content_size_per_page_in_mega_bytes;
    bool m_max_content_size_per_page_in_mega_bytes_isSet;
    bool m_max_content_size_per_page_in_mega_bytes_isValid;

    qint32 m_max_urls_per_minute_crawl_rate;
    bool m_max_urls_per_minute_crawl_rate_isSet;
    bool m_max_urls_per_minute_crawl_rate_isValid;

    QList m_url_inclusion_patterns;
    bool m_url_inclusion_patterns_isSet;
    bool m_url_inclusion_patterns_isValid;

    QList m_url_exclusion_patterns;
    bool m_url_exclusion_patterns_isSet;
    bool m_url_exclusion_patterns_isValid;

    OAIWebCrawlerConfiguration_ProxyConfiguration m_proxy_configuration;
    bool m_proxy_configuration_isSet;
    bool m_proxy_configuration_isValid;

    OAIWebCrawlerConfiguration_AuthenticationConfiguration m_authentication_configuration;
    bool m_authentication_configuration_isSet;
    bool m_authentication_configuration_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIWebCrawlerConfiguration)

#endif // OAIWebCrawlerConfiguration_H
