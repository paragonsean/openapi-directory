/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocumentMetadataConfiguration_Search.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocumentMetadataConfiguration_Search::OAIDocumentMetadataConfiguration_Search(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocumentMetadataConfiguration_Search::OAIDocumentMetadataConfiguration_Search() {
    this->initializeModel();
}

OAIDocumentMetadataConfiguration_Search::~OAIDocumentMetadataConfiguration_Search() {}

void OAIDocumentMetadataConfiguration_Search::initializeModel() {

    m_facetable_isSet = false;
    m_facetable_isValid = false;

    m_searchable_isSet = false;
    m_searchable_isValid = false;

    m_displayable_isSet = false;
    m_displayable_isValid = false;

    m_sortable_isSet = false;
    m_sortable_isValid = false;
}

void OAIDocumentMetadataConfiguration_Search::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocumentMetadataConfiguration_Search::fromJsonObject(QJsonObject json) {

    m_facetable_isValid = ::OpenAPI::fromJsonValue(m_facetable, json[QString("Facetable")]);
    m_facetable_isSet = !json[QString("Facetable")].isNull() && m_facetable_isValid;

    m_searchable_isValid = ::OpenAPI::fromJsonValue(m_searchable, json[QString("Searchable")]);
    m_searchable_isSet = !json[QString("Searchable")].isNull() && m_searchable_isValid;

    m_displayable_isValid = ::OpenAPI::fromJsonValue(m_displayable, json[QString("Displayable")]);
    m_displayable_isSet = !json[QString("Displayable")].isNull() && m_displayable_isValid;

    m_sortable_isValid = ::OpenAPI::fromJsonValue(m_sortable, json[QString("Sortable")]);
    m_sortable_isSet = !json[QString("Sortable")].isNull() && m_sortable_isValid;
}

QString OAIDocumentMetadataConfiguration_Search::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocumentMetadataConfiguration_Search::asJsonObject() const {
    QJsonObject obj;
    if (m_facetable_isSet) {
        obj.insert(QString("Facetable"), ::OpenAPI::toJsonValue(m_facetable));
    }
    if (m_searchable_isSet) {
        obj.insert(QString("Searchable"), ::OpenAPI::toJsonValue(m_searchable));
    }
    if (m_displayable_isSet) {
        obj.insert(QString("Displayable"), ::OpenAPI::toJsonValue(m_displayable));
    }
    if (m_sortable_isSet) {
        obj.insert(QString("Sortable"), ::OpenAPI::toJsonValue(m_sortable));
    }
    return obj;
}

bool OAIDocumentMetadataConfiguration_Search::getFacetable() const {
    return m_facetable;
}
void OAIDocumentMetadataConfiguration_Search::setFacetable(const bool &facetable) {
    m_facetable = facetable;
    m_facetable_isSet = true;
}

bool OAIDocumentMetadataConfiguration_Search::is_facetable_Set() const{
    return m_facetable_isSet;
}

bool OAIDocumentMetadataConfiguration_Search::is_facetable_Valid() const{
    return m_facetable_isValid;
}

bool OAIDocumentMetadataConfiguration_Search::getSearchable() const {
    return m_searchable;
}
void OAIDocumentMetadataConfiguration_Search::setSearchable(const bool &searchable) {
    m_searchable = searchable;
    m_searchable_isSet = true;
}

bool OAIDocumentMetadataConfiguration_Search::is_searchable_Set() const{
    return m_searchable_isSet;
}

bool OAIDocumentMetadataConfiguration_Search::is_searchable_Valid() const{
    return m_searchable_isValid;
}

bool OAIDocumentMetadataConfiguration_Search::getDisplayable() const {
    return m_displayable;
}
void OAIDocumentMetadataConfiguration_Search::setDisplayable(const bool &displayable) {
    m_displayable = displayable;
    m_displayable_isSet = true;
}

bool OAIDocumentMetadataConfiguration_Search::is_displayable_Set() const{
    return m_displayable_isSet;
}

bool OAIDocumentMetadataConfiguration_Search::is_displayable_Valid() const{
    return m_displayable_isValid;
}

bool OAIDocumentMetadataConfiguration_Search::getSortable() const {
    return m_sortable;
}
void OAIDocumentMetadataConfiguration_Search::setSortable(const bool &sortable) {
    m_sortable = sortable;
    m_sortable_isSet = true;
}

bool OAIDocumentMetadataConfiguration_Search::is_sortable_Set() const{
    return m_sortable_isSet;
}

bool OAIDocumentMetadataConfiguration_Search::is_sortable_Valid() const{
    return m_sortable_isValid;
}

bool OAIDocumentMetadataConfiguration_Search::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_facetable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_searchable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_displayable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sortable_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocumentMetadataConfiguration_Search::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
