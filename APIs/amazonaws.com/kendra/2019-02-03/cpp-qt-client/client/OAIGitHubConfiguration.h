/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGitHubConfiguration.h
 *
 * Provides the configuration information to connect to GitHub as your data source.
 */

#ifndef OAIGitHubConfiguration_H
#define OAIGitHubConfiguration_H

#include <QJsonObject>

#include "OAIGitHubConfiguration_GitHubDocumentCrawlProperties.h"
#include "OAIGitHubConfiguration_OnPremiseConfiguration.h"
#include "OAIGitHubConfiguration_SaaSConfiguration.h"
#include "OAIGitHubConfiguration_VpcConfiguration.h"
#include "OAIType.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGitHubConfiguration_SaaSConfiguration;
class OAIGitHubConfiguration_OnPremiseConfiguration;
class OAIGitHubConfiguration_GitHubDocumentCrawlProperties;
class OAIGitHubConfiguration_VpcConfiguration;

class OAIGitHubConfiguration : public OAIObject {
public:
    OAIGitHubConfiguration();
    OAIGitHubConfiguration(QString json);
    ~OAIGitHubConfiguration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIGitHubConfiguration_SaaSConfiguration getSaaSConfiguration() const;
    void setSaaSConfiguration(const OAIGitHubConfiguration_SaaSConfiguration &saa_s_configuration);
    bool is_saa_s_configuration_Set() const;
    bool is_saa_s_configuration_Valid() const;

    OAIGitHubConfiguration_OnPremiseConfiguration getOnPremiseConfiguration() const;
    void setOnPremiseConfiguration(const OAIGitHubConfiguration_OnPremiseConfiguration &on_premise_configuration);
    bool is_on_premise_configuration_Set() const;
    bool is_on_premise_configuration_Valid() const;

    OAIType getType() const;
    void setType(const OAIType &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getSecretArn() const;
    void setSecretArn(const QString &secret_arn);
    bool is_secret_arn_Set() const;
    bool is_secret_arn_Valid() const;

    bool getUseChangeLog() const;
    void setUseChangeLog(const bool &use_change_log);
    bool is_use_change_log_Set() const;
    bool is_use_change_log_Valid() const;

    OAIGitHubConfiguration_GitHubDocumentCrawlProperties getGitHubDocumentCrawlProperties() const;
    void setGitHubDocumentCrawlProperties(const OAIGitHubConfiguration_GitHubDocumentCrawlProperties &git_hub_document_crawl_properties);
    bool is_git_hub_document_crawl_properties_Set() const;
    bool is_git_hub_document_crawl_properties_Valid() const;

    QList getRepositoryFilter() const;
    void setRepositoryFilter(const QList &repository_filter);
    bool is_repository_filter_Set() const;
    bool is_repository_filter_Valid() const;

    QList getInclusionFolderNamePatterns() const;
    void setInclusionFolderNamePatterns(const QList &inclusion_folder_name_patterns);
    bool is_inclusion_folder_name_patterns_Set() const;
    bool is_inclusion_folder_name_patterns_Valid() const;

    QList getInclusionFileTypePatterns() const;
    void setInclusionFileTypePatterns(const QList &inclusion_file_type_patterns);
    bool is_inclusion_file_type_patterns_Set() const;
    bool is_inclusion_file_type_patterns_Valid() const;

    QList getInclusionFileNamePatterns() const;
    void setInclusionFileNamePatterns(const QList &inclusion_file_name_patterns);
    bool is_inclusion_file_name_patterns_Set() const;
    bool is_inclusion_file_name_patterns_Valid() const;

    QList getExclusionFolderNamePatterns() const;
    void setExclusionFolderNamePatterns(const QList &exclusion_folder_name_patterns);
    bool is_exclusion_folder_name_patterns_Set() const;
    bool is_exclusion_folder_name_patterns_Valid() const;

    QList getExclusionFileTypePatterns() const;
    void setExclusionFileTypePatterns(const QList &exclusion_file_type_patterns);
    bool is_exclusion_file_type_patterns_Set() const;
    bool is_exclusion_file_type_patterns_Valid() const;

    QList getExclusionFileNamePatterns() const;
    void setExclusionFileNamePatterns(const QList &exclusion_file_name_patterns);
    bool is_exclusion_file_name_patterns_Set() const;
    bool is_exclusion_file_name_patterns_Valid() const;

    OAIGitHubConfiguration_VpcConfiguration getVpcConfiguration() const;
    void setVpcConfiguration(const OAIGitHubConfiguration_VpcConfiguration &vpc_configuration);
    bool is_vpc_configuration_Set() const;
    bool is_vpc_configuration_Valid() const;

    QList getGitHubRepositoryConfigurationFieldMappings() const;
    void setGitHubRepositoryConfigurationFieldMappings(const QList &git_hub_repository_configuration_field_mappings);
    bool is_git_hub_repository_configuration_field_mappings_Set() const;
    bool is_git_hub_repository_configuration_field_mappings_Valid() const;

    QList getGitHubCommitConfigurationFieldMappings() const;
    void setGitHubCommitConfigurationFieldMappings(const QList &git_hub_commit_configuration_field_mappings);
    bool is_git_hub_commit_configuration_field_mappings_Set() const;
    bool is_git_hub_commit_configuration_field_mappings_Valid() const;

    QList getGitHubIssueDocumentConfigurationFieldMappings() const;
    void setGitHubIssueDocumentConfigurationFieldMappings(const QList &git_hub_issue_document_configuration_field_mappings);
    bool is_git_hub_issue_document_configuration_field_mappings_Set() const;
    bool is_git_hub_issue_document_configuration_field_mappings_Valid() const;

    QList getGitHubIssueCommentConfigurationFieldMappings() const;
    void setGitHubIssueCommentConfigurationFieldMappings(const QList &git_hub_issue_comment_configuration_field_mappings);
    bool is_git_hub_issue_comment_configuration_field_mappings_Set() const;
    bool is_git_hub_issue_comment_configuration_field_mappings_Valid() const;

    QList getGitHubIssueAttachmentConfigurationFieldMappings() const;
    void setGitHubIssueAttachmentConfigurationFieldMappings(const QList &git_hub_issue_attachment_configuration_field_mappings);
    bool is_git_hub_issue_attachment_configuration_field_mappings_Set() const;
    bool is_git_hub_issue_attachment_configuration_field_mappings_Valid() const;

    QList getGitHubPullRequestCommentConfigurationFieldMappings() const;
    void setGitHubPullRequestCommentConfigurationFieldMappings(const QList &git_hub_pull_request_comment_configuration_field_mappings);
    bool is_git_hub_pull_request_comment_configuration_field_mappings_Set() const;
    bool is_git_hub_pull_request_comment_configuration_field_mappings_Valid() const;

    QList getGitHubPullRequestDocumentConfigurationFieldMappings() const;
    void setGitHubPullRequestDocumentConfigurationFieldMappings(const QList &git_hub_pull_request_document_configuration_field_mappings);
    bool is_git_hub_pull_request_document_configuration_field_mappings_Set() const;
    bool is_git_hub_pull_request_document_configuration_field_mappings_Valid() const;

    QList getGitHubPullRequestDocumentAttachmentConfigurationFieldMappings() const;
    void setGitHubPullRequestDocumentAttachmentConfigurationFieldMappings(const QList &git_hub_pull_request_document_attachment_configuration_field_mappings);
    bool is_git_hub_pull_request_document_attachment_configuration_field_mappings_Set() const;
    bool is_git_hub_pull_request_document_attachment_configuration_field_mappings_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIGitHubConfiguration_SaaSConfiguration m_saa_s_configuration;
    bool m_saa_s_configuration_isSet;
    bool m_saa_s_configuration_isValid;

    OAIGitHubConfiguration_OnPremiseConfiguration m_on_premise_configuration;
    bool m_on_premise_configuration_isSet;
    bool m_on_premise_configuration_isValid;

    OAIType m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_secret_arn;
    bool m_secret_arn_isSet;
    bool m_secret_arn_isValid;

    bool m_use_change_log;
    bool m_use_change_log_isSet;
    bool m_use_change_log_isValid;

    OAIGitHubConfiguration_GitHubDocumentCrawlProperties m_git_hub_document_crawl_properties;
    bool m_git_hub_document_crawl_properties_isSet;
    bool m_git_hub_document_crawl_properties_isValid;

    QList m_repository_filter;
    bool m_repository_filter_isSet;
    bool m_repository_filter_isValid;

    QList m_inclusion_folder_name_patterns;
    bool m_inclusion_folder_name_patterns_isSet;
    bool m_inclusion_folder_name_patterns_isValid;

    QList m_inclusion_file_type_patterns;
    bool m_inclusion_file_type_patterns_isSet;
    bool m_inclusion_file_type_patterns_isValid;

    QList m_inclusion_file_name_patterns;
    bool m_inclusion_file_name_patterns_isSet;
    bool m_inclusion_file_name_patterns_isValid;

    QList m_exclusion_folder_name_patterns;
    bool m_exclusion_folder_name_patterns_isSet;
    bool m_exclusion_folder_name_patterns_isValid;

    QList m_exclusion_file_type_patterns;
    bool m_exclusion_file_type_patterns_isSet;
    bool m_exclusion_file_type_patterns_isValid;

    QList m_exclusion_file_name_patterns;
    bool m_exclusion_file_name_patterns_isSet;
    bool m_exclusion_file_name_patterns_isValid;

    OAIGitHubConfiguration_VpcConfiguration m_vpc_configuration;
    bool m_vpc_configuration_isSet;
    bool m_vpc_configuration_isValid;

    QList m_git_hub_repository_configuration_field_mappings;
    bool m_git_hub_repository_configuration_field_mappings_isSet;
    bool m_git_hub_repository_configuration_field_mappings_isValid;

    QList m_git_hub_commit_configuration_field_mappings;
    bool m_git_hub_commit_configuration_field_mappings_isSet;
    bool m_git_hub_commit_configuration_field_mappings_isValid;

    QList m_git_hub_issue_document_configuration_field_mappings;
    bool m_git_hub_issue_document_configuration_field_mappings_isSet;
    bool m_git_hub_issue_document_configuration_field_mappings_isValid;

    QList m_git_hub_issue_comment_configuration_field_mappings;
    bool m_git_hub_issue_comment_configuration_field_mappings_isSet;
    bool m_git_hub_issue_comment_configuration_field_mappings_isValid;

    QList m_git_hub_issue_attachment_configuration_field_mappings;
    bool m_git_hub_issue_attachment_configuration_field_mappings_isSet;
    bool m_git_hub_issue_attachment_configuration_field_mappings_isValid;

    QList m_git_hub_pull_request_comment_configuration_field_mappings;
    bool m_git_hub_pull_request_comment_configuration_field_mappings_isSet;
    bool m_git_hub_pull_request_comment_configuration_field_mappings_isValid;

    QList m_git_hub_pull_request_document_configuration_field_mappings;
    bool m_git_hub_pull_request_document_configuration_field_mappings_isSet;
    bool m_git_hub_pull_request_document_configuration_field_mappings_isValid;

    QList m_git_hub_pull_request_document_attachment_configuration_field_mappings;
    bool m_git_hub_pull_request_document_attachment_configuration_field_mappings_isSet;
    bool m_git_hub_pull_request_document_attachment_configuration_field_mappings_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGitHubConfiguration)

#endif // OAIGitHubConfiguration_H
