/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryResultItem_TableExcerpt.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryResultItem_TableExcerpt::OAIQueryResultItem_TableExcerpt(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryResultItem_TableExcerpt::OAIQueryResultItem_TableExcerpt() {
    this->initializeModel();
}

OAIQueryResultItem_TableExcerpt::~OAIQueryResultItem_TableExcerpt() {}

void OAIQueryResultItem_TableExcerpt::initializeModel() {

    m_rows_isSet = false;
    m_rows_isValid = false;

    m_total_number_of_rows_isSet = false;
    m_total_number_of_rows_isValid = false;
}

void OAIQueryResultItem_TableExcerpt::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryResultItem_TableExcerpt::fromJsonObject(QJsonObject json) {

    m_rows_isValid = ::OpenAPI::fromJsonValue(m_rows, json[QString("Rows")]);
    m_rows_isSet = !json[QString("Rows")].isNull() && m_rows_isValid;

    m_total_number_of_rows_isValid = ::OpenAPI::fromJsonValue(m_total_number_of_rows, json[QString("TotalNumberOfRows")]);
    m_total_number_of_rows_isSet = !json[QString("TotalNumberOfRows")].isNull() && m_total_number_of_rows_isValid;
}

QString OAIQueryResultItem_TableExcerpt::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryResultItem_TableExcerpt::asJsonObject() const {
    QJsonObject obj;
    if (m_rows.isSet()) {
        obj.insert(QString("Rows"), ::OpenAPI::toJsonValue(m_rows));
    }
    if (m_total_number_of_rows_isSet) {
        obj.insert(QString("TotalNumberOfRows"), ::OpenAPI::toJsonValue(m_total_number_of_rows));
    }
    return obj;
}

QList OAIQueryResultItem_TableExcerpt::getRows() const {
    return m_rows;
}
void OAIQueryResultItem_TableExcerpt::setRows(const QList &rows) {
    m_rows = rows;
    m_rows_isSet = true;
}

bool OAIQueryResultItem_TableExcerpt::is_rows_Set() const{
    return m_rows_isSet;
}

bool OAIQueryResultItem_TableExcerpt::is_rows_Valid() const{
    return m_rows_isValid;
}

qint32 OAIQueryResultItem_TableExcerpt::getTotalNumberOfRows() const {
    return m_total_number_of_rows;
}
void OAIQueryResultItem_TableExcerpt::setTotalNumberOfRows(const qint32 &total_number_of_rows) {
    m_total_number_of_rows = total_number_of_rows;
    m_total_number_of_rows_isSet = true;
}

bool OAIQueryResultItem_TableExcerpt::is_total_number_of_rows_Set() const{
    return m_total_number_of_rows_isSet;
}

bool OAIQueryResultItem_TableExcerpt::is_total_number_of_rows_Valid() const{
    return m_total_number_of_rows_isValid;
}

bool OAIQueryResultItem_TableExcerpt::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rows.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_number_of_rows_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryResultItem_TableExcerpt::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
