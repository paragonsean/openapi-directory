/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStatus::OAIStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStatus::OAIStatus() {
    this->initializeModel();
}

OAIStatus::~OAIStatus() {}

void OAIStatus::initializeModel() {

    m_document_id_isSet = false;
    m_document_id_isValid = false;

    m_document_status_isSet = false;
    m_document_status_isValid = false;

    m_failure_code_isSet = false;
    m_failure_code_isValid = false;

    m_failure_reason_isSet = false;
    m_failure_reason_isValid = false;
}

void OAIStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStatus::fromJsonObject(QJsonObject json) {

    m_document_id_isValid = ::OpenAPI::fromJsonValue(m_document_id, json[QString("DocumentId")]);
    m_document_id_isSet = !json[QString("DocumentId")].isNull() && m_document_id_isValid;

    m_document_status_isValid = ::OpenAPI::fromJsonValue(m_document_status, json[QString("DocumentStatus")]);
    m_document_status_isSet = !json[QString("DocumentStatus")].isNull() && m_document_status_isValid;

    m_failure_code_isValid = ::OpenAPI::fromJsonValue(m_failure_code, json[QString("FailureCode")]);
    m_failure_code_isSet = !json[QString("FailureCode")].isNull() && m_failure_code_isValid;

    m_failure_reason_isValid = ::OpenAPI::fromJsonValue(m_failure_reason, json[QString("FailureReason")]);
    m_failure_reason_isSet = !json[QString("FailureReason")].isNull() && m_failure_reason_isValid;
}

QString OAIStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_document_id_isSet) {
        obj.insert(QString("DocumentId"), ::OpenAPI::toJsonValue(m_document_id));
    }
    if (m_document_status.isSet()) {
        obj.insert(QString("DocumentStatus"), ::OpenAPI::toJsonValue(m_document_status));
    }
    if (m_failure_code_isSet) {
        obj.insert(QString("FailureCode"), ::OpenAPI::toJsonValue(m_failure_code));
    }
    if (m_failure_reason_isSet) {
        obj.insert(QString("FailureReason"), ::OpenAPI::toJsonValue(m_failure_reason));
    }
    return obj;
}

QString OAIStatus::getDocumentId() const {
    return m_document_id;
}
void OAIStatus::setDocumentId(const QString &document_id) {
    m_document_id = document_id;
    m_document_id_isSet = true;
}

bool OAIStatus::is_document_id_Set() const{
    return m_document_id_isSet;
}

bool OAIStatus::is_document_id_Valid() const{
    return m_document_id_isValid;
}

OAIDocumentStatus OAIStatus::getDocumentStatus() const {
    return m_document_status;
}
void OAIStatus::setDocumentStatus(const OAIDocumentStatus &document_status) {
    m_document_status = document_status;
    m_document_status_isSet = true;
}

bool OAIStatus::is_document_status_Set() const{
    return m_document_status_isSet;
}

bool OAIStatus::is_document_status_Valid() const{
    return m_document_status_isValid;
}

QString OAIStatus::getFailureCode() const {
    return m_failure_code;
}
void OAIStatus::setFailureCode(const QString &failure_code) {
    m_failure_code = failure_code;
    m_failure_code_isSet = true;
}

bool OAIStatus::is_failure_code_Set() const{
    return m_failure_code_isSet;
}

bool OAIStatus::is_failure_code_Valid() const{
    return m_failure_code_isValid;
}

QString OAIStatus::getFailureReason() const {
    return m_failure_reason;
}
void OAIStatus::setFailureReason(const QString &failure_reason) {
    m_failure_reason = failure_reason;
    m_failure_reason_isSet = true;
}

bool OAIStatus::is_failure_reason_Set() const{
    return m_failure_reason_isSet;
}

bool OAIStatus::is_failure_reason_Valid() const{
    return m_failure_reason_isValid;
}

bool OAIStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_document_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_reason_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
