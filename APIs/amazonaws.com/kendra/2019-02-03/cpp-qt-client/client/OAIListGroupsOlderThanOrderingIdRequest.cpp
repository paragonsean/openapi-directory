/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListGroupsOlderThanOrderingIdRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListGroupsOlderThanOrderingIdRequest::OAIListGroupsOlderThanOrderingIdRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListGroupsOlderThanOrderingIdRequest::OAIListGroupsOlderThanOrderingIdRequest() {
    this->initializeModel();
}

OAIListGroupsOlderThanOrderingIdRequest::~OAIListGroupsOlderThanOrderingIdRequest() {}

void OAIListGroupsOlderThanOrderingIdRequest::initializeModel() {

    m_index_id_isSet = false;
    m_index_id_isValid = false;

    m_data_source_id_isSet = false;
    m_data_source_id_isValid = false;

    m_ordering_id_isSet = false;
    m_ordering_id_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;
}

void OAIListGroupsOlderThanOrderingIdRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListGroupsOlderThanOrderingIdRequest::fromJsonObject(QJsonObject json) {

    m_index_id_isValid = ::OpenAPI::fromJsonValue(m_index_id, json[QString("IndexId")]);
    m_index_id_isSet = !json[QString("IndexId")].isNull() && m_index_id_isValid;

    m_data_source_id_isValid = ::OpenAPI::fromJsonValue(m_data_source_id, json[QString("DataSourceId")]);
    m_data_source_id_isSet = !json[QString("DataSourceId")].isNull() && m_data_source_id_isValid;

    m_ordering_id_isValid = ::OpenAPI::fromJsonValue(m_ordering_id, json[QString("OrderingId")]);
    m_ordering_id_isSet = !json[QString("OrderingId")].isNull() && m_ordering_id_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;
}

QString OAIListGroupsOlderThanOrderingIdRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListGroupsOlderThanOrderingIdRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_index_id_isSet) {
        obj.insert(QString("IndexId"), ::OpenAPI::toJsonValue(m_index_id));
    }
    if (m_data_source_id_isSet) {
        obj.insert(QString("DataSourceId"), ::OpenAPI::toJsonValue(m_data_source_id));
    }
    if (m_ordering_id_isSet) {
        obj.insert(QString("OrderingId"), ::OpenAPI::toJsonValue(m_ordering_id));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    return obj;
}

QString OAIListGroupsOlderThanOrderingIdRequest::getIndexId() const {
    return m_index_id;
}
void OAIListGroupsOlderThanOrderingIdRequest::setIndexId(const QString &index_id) {
    m_index_id = index_id;
    m_index_id_isSet = true;
}

bool OAIListGroupsOlderThanOrderingIdRequest::is_index_id_Set() const{
    return m_index_id_isSet;
}

bool OAIListGroupsOlderThanOrderingIdRequest::is_index_id_Valid() const{
    return m_index_id_isValid;
}

QString OAIListGroupsOlderThanOrderingIdRequest::getDataSourceId() const {
    return m_data_source_id;
}
void OAIListGroupsOlderThanOrderingIdRequest::setDataSourceId(const QString &data_source_id) {
    m_data_source_id = data_source_id;
    m_data_source_id_isSet = true;
}

bool OAIListGroupsOlderThanOrderingIdRequest::is_data_source_id_Set() const{
    return m_data_source_id_isSet;
}

bool OAIListGroupsOlderThanOrderingIdRequest::is_data_source_id_Valid() const{
    return m_data_source_id_isValid;
}

qint32 OAIListGroupsOlderThanOrderingIdRequest::getOrderingId() const {
    return m_ordering_id;
}
void OAIListGroupsOlderThanOrderingIdRequest::setOrderingId(const qint32 &ordering_id) {
    m_ordering_id = ordering_id;
    m_ordering_id_isSet = true;
}

bool OAIListGroupsOlderThanOrderingIdRequest::is_ordering_id_Set() const{
    return m_ordering_id_isSet;
}

bool OAIListGroupsOlderThanOrderingIdRequest::is_ordering_id_Valid() const{
    return m_ordering_id_isValid;
}

QString OAIListGroupsOlderThanOrderingIdRequest::getNextToken() const {
    return m_next_token;
}
void OAIListGroupsOlderThanOrderingIdRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListGroupsOlderThanOrderingIdRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListGroupsOlderThanOrderingIdRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIListGroupsOlderThanOrderingIdRequest::getMaxResults() const {
    return m_max_results;
}
void OAIListGroupsOlderThanOrderingIdRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListGroupsOlderThanOrderingIdRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListGroupsOlderThanOrderingIdRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

bool OAIListGroupsOlderThanOrderingIdRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_index_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ordering_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListGroupsOlderThanOrderingIdRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_index_id_isValid && m_ordering_id_isValid && true;
}

} // namespace OpenAPI
