/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataSourceConfiguration_DatabaseConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataSourceConfiguration_DatabaseConfiguration::OAIDataSourceConfiguration_DatabaseConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataSourceConfiguration_DatabaseConfiguration::OAIDataSourceConfiguration_DatabaseConfiguration() {
    this->initializeModel();
}

OAIDataSourceConfiguration_DatabaseConfiguration::~OAIDataSourceConfiguration_DatabaseConfiguration() {}

void OAIDataSourceConfiguration_DatabaseConfiguration::initializeModel() {

    m_database_engine_type_isSet = false;
    m_database_engine_type_isValid = false;

    m_connection_configuration_isSet = false;
    m_connection_configuration_isValid = false;

    m_vpc_configuration_isSet = false;
    m_vpc_configuration_isValid = false;

    m_column_configuration_isSet = false;
    m_column_configuration_isValid = false;

    m_acl_configuration_isSet = false;
    m_acl_configuration_isValid = false;

    m_sql_configuration_isSet = false;
    m_sql_configuration_isValid = false;
}

void OAIDataSourceConfiguration_DatabaseConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataSourceConfiguration_DatabaseConfiguration::fromJsonObject(QJsonObject json) {

    m_database_engine_type_isValid = ::OpenAPI::fromJsonValue(m_database_engine_type, json[QString("DatabaseEngineType")]);
    m_database_engine_type_isSet = !json[QString("DatabaseEngineType")].isNull() && m_database_engine_type_isValid;

    m_connection_configuration_isValid = ::OpenAPI::fromJsonValue(m_connection_configuration, json[QString("ConnectionConfiguration")]);
    m_connection_configuration_isSet = !json[QString("ConnectionConfiguration")].isNull() && m_connection_configuration_isValid;

    m_vpc_configuration_isValid = ::OpenAPI::fromJsonValue(m_vpc_configuration, json[QString("VpcConfiguration")]);
    m_vpc_configuration_isSet = !json[QString("VpcConfiguration")].isNull() && m_vpc_configuration_isValid;

    m_column_configuration_isValid = ::OpenAPI::fromJsonValue(m_column_configuration, json[QString("ColumnConfiguration")]);
    m_column_configuration_isSet = !json[QString("ColumnConfiguration")].isNull() && m_column_configuration_isValid;

    m_acl_configuration_isValid = ::OpenAPI::fromJsonValue(m_acl_configuration, json[QString("AclConfiguration")]);
    m_acl_configuration_isSet = !json[QString("AclConfiguration")].isNull() && m_acl_configuration_isValid;

    m_sql_configuration_isValid = ::OpenAPI::fromJsonValue(m_sql_configuration, json[QString("SqlConfiguration")]);
    m_sql_configuration_isSet = !json[QString("SqlConfiguration")].isNull() && m_sql_configuration_isValid;
}

QString OAIDataSourceConfiguration_DatabaseConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataSourceConfiguration_DatabaseConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_database_engine_type.isSet()) {
        obj.insert(QString("DatabaseEngineType"), ::OpenAPI::toJsonValue(m_database_engine_type));
    }
    if (m_connection_configuration.isSet()) {
        obj.insert(QString("ConnectionConfiguration"), ::OpenAPI::toJsonValue(m_connection_configuration));
    }
    if (m_vpc_configuration.isSet()) {
        obj.insert(QString("VpcConfiguration"), ::OpenAPI::toJsonValue(m_vpc_configuration));
    }
    if (m_column_configuration.isSet()) {
        obj.insert(QString("ColumnConfiguration"), ::OpenAPI::toJsonValue(m_column_configuration));
    }
    if (m_acl_configuration.isSet()) {
        obj.insert(QString("AclConfiguration"), ::OpenAPI::toJsonValue(m_acl_configuration));
    }
    if (m_sql_configuration.isSet()) {
        obj.insert(QString("SqlConfiguration"), ::OpenAPI::toJsonValue(m_sql_configuration));
    }
    return obj;
}

OAIDatabaseEngineType OAIDataSourceConfiguration_DatabaseConfiguration::getDatabaseEngineType() const {
    return m_database_engine_type;
}
void OAIDataSourceConfiguration_DatabaseConfiguration::setDatabaseEngineType(const OAIDatabaseEngineType &database_engine_type) {
    m_database_engine_type = database_engine_type;
    m_database_engine_type_isSet = true;
}

bool OAIDataSourceConfiguration_DatabaseConfiguration::is_database_engine_type_Set() const{
    return m_database_engine_type_isSet;
}

bool OAIDataSourceConfiguration_DatabaseConfiguration::is_database_engine_type_Valid() const{
    return m_database_engine_type_isValid;
}

OAIDatabaseConfiguration_ConnectionConfiguration OAIDataSourceConfiguration_DatabaseConfiguration::getConnectionConfiguration() const {
    return m_connection_configuration;
}
void OAIDataSourceConfiguration_DatabaseConfiguration::setConnectionConfiguration(const OAIDatabaseConfiguration_ConnectionConfiguration &connection_configuration) {
    m_connection_configuration = connection_configuration;
    m_connection_configuration_isSet = true;
}

bool OAIDataSourceConfiguration_DatabaseConfiguration::is_connection_configuration_Set() const{
    return m_connection_configuration_isSet;
}

bool OAIDataSourceConfiguration_DatabaseConfiguration::is_connection_configuration_Valid() const{
    return m_connection_configuration_isValid;
}

OAIDataSourceVpcConfiguration OAIDataSourceConfiguration_DatabaseConfiguration::getVpcConfiguration() const {
    return m_vpc_configuration;
}
void OAIDataSourceConfiguration_DatabaseConfiguration::setVpcConfiguration(const OAIDataSourceVpcConfiguration &vpc_configuration) {
    m_vpc_configuration = vpc_configuration;
    m_vpc_configuration_isSet = true;
}

bool OAIDataSourceConfiguration_DatabaseConfiguration::is_vpc_configuration_Set() const{
    return m_vpc_configuration_isSet;
}

bool OAIDataSourceConfiguration_DatabaseConfiguration::is_vpc_configuration_Valid() const{
    return m_vpc_configuration_isValid;
}

OAIDatabaseConfiguration_ColumnConfiguration OAIDataSourceConfiguration_DatabaseConfiguration::getColumnConfiguration() const {
    return m_column_configuration;
}
void OAIDataSourceConfiguration_DatabaseConfiguration::setColumnConfiguration(const OAIDatabaseConfiguration_ColumnConfiguration &column_configuration) {
    m_column_configuration = column_configuration;
    m_column_configuration_isSet = true;
}

bool OAIDataSourceConfiguration_DatabaseConfiguration::is_column_configuration_Set() const{
    return m_column_configuration_isSet;
}

bool OAIDataSourceConfiguration_DatabaseConfiguration::is_column_configuration_Valid() const{
    return m_column_configuration_isValid;
}

OAIDatabaseConfiguration_AclConfiguration OAIDataSourceConfiguration_DatabaseConfiguration::getAclConfiguration() const {
    return m_acl_configuration;
}
void OAIDataSourceConfiguration_DatabaseConfiguration::setAclConfiguration(const OAIDatabaseConfiguration_AclConfiguration &acl_configuration) {
    m_acl_configuration = acl_configuration;
    m_acl_configuration_isSet = true;
}

bool OAIDataSourceConfiguration_DatabaseConfiguration::is_acl_configuration_Set() const{
    return m_acl_configuration_isSet;
}

bool OAIDataSourceConfiguration_DatabaseConfiguration::is_acl_configuration_Valid() const{
    return m_acl_configuration_isValid;
}

OAIDatabaseConfiguration_SqlConfiguration OAIDataSourceConfiguration_DatabaseConfiguration::getSqlConfiguration() const {
    return m_sql_configuration;
}
void OAIDataSourceConfiguration_DatabaseConfiguration::setSqlConfiguration(const OAIDatabaseConfiguration_SqlConfiguration &sql_configuration) {
    m_sql_configuration = sql_configuration;
    m_sql_configuration_isSet = true;
}

bool OAIDataSourceConfiguration_DatabaseConfiguration::is_sql_configuration_Set() const{
    return m_sql_configuration_isSet;
}

bool OAIDataSourceConfiguration_DatabaseConfiguration::is_sql_configuration_Valid() const{
    return m_sql_configuration_isValid;
}

bool OAIDataSourceConfiguration_DatabaseConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_database_engine_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_acl_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sql_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataSourceConfiguration_DatabaseConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_database_engine_type_isValid && m_connection_configuration_isValid && m_column_configuration_isValid && true;
}

} // namespace OpenAPI
