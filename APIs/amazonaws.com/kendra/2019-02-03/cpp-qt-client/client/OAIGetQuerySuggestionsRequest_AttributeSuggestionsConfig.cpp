/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetQuerySuggestionsRequest_AttributeSuggestionsConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetQuerySuggestionsRequest_AttributeSuggestionsConfig::OAIGetQuerySuggestionsRequest_AttributeSuggestionsConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetQuerySuggestionsRequest_AttributeSuggestionsConfig::OAIGetQuerySuggestionsRequest_AttributeSuggestionsConfig() {
    this->initializeModel();
}

OAIGetQuerySuggestionsRequest_AttributeSuggestionsConfig::~OAIGetQuerySuggestionsRequest_AttributeSuggestionsConfig() {}

void OAIGetQuerySuggestionsRequest_AttributeSuggestionsConfig::initializeModel() {

    m_suggestion_attributes_isSet = false;
    m_suggestion_attributes_isValid = false;

    m_additional_response_attributes_isSet = false;
    m_additional_response_attributes_isValid = false;

    m_attribute_filter_isSet = false;
    m_attribute_filter_isValid = false;

    m_user_context_isSet = false;
    m_user_context_isValid = false;
}

void OAIGetQuerySuggestionsRequest_AttributeSuggestionsConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetQuerySuggestionsRequest_AttributeSuggestionsConfig::fromJsonObject(QJsonObject json) {

    m_suggestion_attributes_isValid = ::OpenAPI::fromJsonValue(m_suggestion_attributes, json[QString("SuggestionAttributes")]);
    m_suggestion_attributes_isSet = !json[QString("SuggestionAttributes")].isNull() && m_suggestion_attributes_isValid;

    m_additional_response_attributes_isValid = ::OpenAPI::fromJsonValue(m_additional_response_attributes, json[QString("AdditionalResponseAttributes")]);
    m_additional_response_attributes_isSet = !json[QString("AdditionalResponseAttributes")].isNull() && m_additional_response_attributes_isValid;

    m_attribute_filter_isValid = ::OpenAPI::fromJsonValue(m_attribute_filter, json[QString("AttributeFilter")]);
    m_attribute_filter_isSet = !json[QString("AttributeFilter")].isNull() && m_attribute_filter_isValid;

    m_user_context_isValid = ::OpenAPI::fromJsonValue(m_user_context, json[QString("UserContext")]);
    m_user_context_isSet = !json[QString("UserContext")].isNull() && m_user_context_isValid;
}

QString OAIGetQuerySuggestionsRequest_AttributeSuggestionsConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetQuerySuggestionsRequest_AttributeSuggestionsConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_suggestion_attributes.isSet()) {
        obj.insert(QString("SuggestionAttributes"), ::OpenAPI::toJsonValue(m_suggestion_attributes));
    }
    if (m_additional_response_attributes.isSet()) {
        obj.insert(QString("AdditionalResponseAttributes"), ::OpenAPI::toJsonValue(m_additional_response_attributes));
    }
    if (m_attribute_filter.isSet()) {
        obj.insert(QString("AttributeFilter"), ::OpenAPI::toJsonValue(m_attribute_filter));
    }
    if (m_user_context.isSet()) {
        obj.insert(QString("UserContext"), ::OpenAPI::toJsonValue(m_user_context));
    }
    return obj;
}

QList OAIGetQuerySuggestionsRequest_AttributeSuggestionsConfig::getSuggestionAttributes() const {
    return m_suggestion_attributes;
}
void OAIGetQuerySuggestionsRequest_AttributeSuggestionsConfig::setSuggestionAttributes(const QList &suggestion_attributes) {
    m_suggestion_attributes = suggestion_attributes;
    m_suggestion_attributes_isSet = true;
}

bool OAIGetQuerySuggestionsRequest_AttributeSuggestionsConfig::is_suggestion_attributes_Set() const{
    return m_suggestion_attributes_isSet;
}

bool OAIGetQuerySuggestionsRequest_AttributeSuggestionsConfig::is_suggestion_attributes_Valid() const{
    return m_suggestion_attributes_isValid;
}

QList OAIGetQuerySuggestionsRequest_AttributeSuggestionsConfig::getAdditionalResponseAttributes() const {
    return m_additional_response_attributes;
}
void OAIGetQuerySuggestionsRequest_AttributeSuggestionsConfig::setAdditionalResponseAttributes(const QList &additional_response_attributes) {
    m_additional_response_attributes = additional_response_attributes;
    m_additional_response_attributes_isSet = true;
}

bool OAIGetQuerySuggestionsRequest_AttributeSuggestionsConfig::is_additional_response_attributes_Set() const{
    return m_additional_response_attributes_isSet;
}

bool OAIGetQuerySuggestionsRequest_AttributeSuggestionsConfig::is_additional_response_attributes_Valid() const{
    return m_additional_response_attributes_isValid;
}

OAIAttributeSuggestionsGetConfig_AttributeFilter OAIGetQuerySuggestionsRequest_AttributeSuggestionsConfig::getAttributeFilter() const {
    return m_attribute_filter;
}
void OAIGetQuerySuggestionsRequest_AttributeSuggestionsConfig::setAttributeFilter(const OAIAttributeSuggestionsGetConfig_AttributeFilter &attribute_filter) {
    m_attribute_filter = attribute_filter;
    m_attribute_filter_isSet = true;
}

bool OAIGetQuerySuggestionsRequest_AttributeSuggestionsConfig::is_attribute_filter_Set() const{
    return m_attribute_filter_isSet;
}

bool OAIGetQuerySuggestionsRequest_AttributeSuggestionsConfig::is_attribute_filter_Valid() const{
    return m_attribute_filter_isValid;
}

OAIAttributeSuggestionsGetConfig_UserContext OAIGetQuerySuggestionsRequest_AttributeSuggestionsConfig::getUserContext() const {
    return m_user_context;
}
void OAIGetQuerySuggestionsRequest_AttributeSuggestionsConfig::setUserContext(const OAIAttributeSuggestionsGetConfig_UserContext &user_context) {
    m_user_context = user_context;
    m_user_context_isSet = true;
}

bool OAIGetQuerySuggestionsRequest_AttributeSuggestionsConfig::is_user_context_Set() const{
    return m_user_context_isSet;
}

bool OAIGetQuerySuggestionsRequest_AttributeSuggestionsConfig::is_user_context_Valid() const{
    return m_user_context_isValid;
}

bool OAIGetQuerySuggestionsRequest_AttributeSuggestionsConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_suggestion_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_response_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_attribute_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_context.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetQuerySuggestionsRequest_AttributeSuggestionsConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
