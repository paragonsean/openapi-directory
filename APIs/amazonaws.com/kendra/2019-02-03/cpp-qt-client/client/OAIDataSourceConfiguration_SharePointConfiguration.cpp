/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataSourceConfiguration_SharePointConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataSourceConfiguration_SharePointConfiguration::OAIDataSourceConfiguration_SharePointConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataSourceConfiguration_SharePointConfiguration::OAIDataSourceConfiguration_SharePointConfiguration() {
    this->initializeModel();
}

OAIDataSourceConfiguration_SharePointConfiguration::~OAIDataSourceConfiguration_SharePointConfiguration() {}

void OAIDataSourceConfiguration_SharePointConfiguration::initializeModel() {

    m_share_point_version_isSet = false;
    m_share_point_version_isValid = false;

    m_urls_isSet = false;
    m_urls_isValid = false;

    m_secret_arn_isSet = false;
    m_secret_arn_isValid = false;

    m_crawl_attachments_isSet = false;
    m_crawl_attachments_isValid = false;

    m_use_change_log_isSet = false;
    m_use_change_log_isValid = false;

    m_inclusion_patterns_isSet = false;
    m_inclusion_patterns_isValid = false;

    m_exclusion_patterns_isSet = false;
    m_exclusion_patterns_isValid = false;

    m_vpc_configuration_isSet = false;
    m_vpc_configuration_isValid = false;

    m_field_mappings_isSet = false;
    m_field_mappings_isValid = false;

    m_document_title_field_name_isSet = false;
    m_document_title_field_name_isValid = false;

    m_disable_local_groups_isSet = false;
    m_disable_local_groups_isValid = false;

    m_ssl_certificate_s3_path_isSet = false;
    m_ssl_certificate_s3_path_isValid = false;

    m_authentication_type_isSet = false;
    m_authentication_type_isValid = false;

    m_proxy_configuration_isSet = false;
    m_proxy_configuration_isValid = false;
}

void OAIDataSourceConfiguration_SharePointConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataSourceConfiguration_SharePointConfiguration::fromJsonObject(QJsonObject json) {

    m_share_point_version_isValid = ::OpenAPI::fromJsonValue(m_share_point_version, json[QString("SharePointVersion")]);
    m_share_point_version_isSet = !json[QString("SharePointVersion")].isNull() && m_share_point_version_isValid;

    m_urls_isValid = ::OpenAPI::fromJsonValue(m_urls, json[QString("Urls")]);
    m_urls_isSet = !json[QString("Urls")].isNull() && m_urls_isValid;

    m_secret_arn_isValid = ::OpenAPI::fromJsonValue(m_secret_arn, json[QString("SecretArn")]);
    m_secret_arn_isSet = !json[QString("SecretArn")].isNull() && m_secret_arn_isValid;

    m_crawl_attachments_isValid = ::OpenAPI::fromJsonValue(m_crawl_attachments, json[QString("CrawlAttachments")]);
    m_crawl_attachments_isSet = !json[QString("CrawlAttachments")].isNull() && m_crawl_attachments_isValid;

    m_use_change_log_isValid = ::OpenAPI::fromJsonValue(m_use_change_log, json[QString("UseChangeLog")]);
    m_use_change_log_isSet = !json[QString("UseChangeLog")].isNull() && m_use_change_log_isValid;

    m_inclusion_patterns_isValid = ::OpenAPI::fromJsonValue(m_inclusion_patterns, json[QString("InclusionPatterns")]);
    m_inclusion_patterns_isSet = !json[QString("InclusionPatterns")].isNull() && m_inclusion_patterns_isValid;

    m_exclusion_patterns_isValid = ::OpenAPI::fromJsonValue(m_exclusion_patterns, json[QString("ExclusionPatterns")]);
    m_exclusion_patterns_isSet = !json[QString("ExclusionPatterns")].isNull() && m_exclusion_patterns_isValid;

    m_vpc_configuration_isValid = ::OpenAPI::fromJsonValue(m_vpc_configuration, json[QString("VpcConfiguration")]);
    m_vpc_configuration_isSet = !json[QString("VpcConfiguration")].isNull() && m_vpc_configuration_isValid;

    m_field_mappings_isValid = ::OpenAPI::fromJsonValue(m_field_mappings, json[QString("FieldMappings")]);
    m_field_mappings_isSet = !json[QString("FieldMappings")].isNull() && m_field_mappings_isValid;

    m_document_title_field_name_isValid = ::OpenAPI::fromJsonValue(m_document_title_field_name, json[QString("DocumentTitleFieldName")]);
    m_document_title_field_name_isSet = !json[QString("DocumentTitleFieldName")].isNull() && m_document_title_field_name_isValid;

    m_disable_local_groups_isValid = ::OpenAPI::fromJsonValue(m_disable_local_groups, json[QString("DisableLocalGroups")]);
    m_disable_local_groups_isSet = !json[QString("DisableLocalGroups")].isNull() && m_disable_local_groups_isValid;

    m_ssl_certificate_s3_path_isValid = ::OpenAPI::fromJsonValue(m_ssl_certificate_s3_path, json[QString("SslCertificateS3Path")]);
    m_ssl_certificate_s3_path_isSet = !json[QString("SslCertificateS3Path")].isNull() && m_ssl_certificate_s3_path_isValid;

    m_authentication_type_isValid = ::OpenAPI::fromJsonValue(m_authentication_type, json[QString("AuthenticationType")]);
    m_authentication_type_isSet = !json[QString("AuthenticationType")].isNull() && m_authentication_type_isValid;

    m_proxy_configuration_isValid = ::OpenAPI::fromJsonValue(m_proxy_configuration, json[QString("ProxyConfiguration")]);
    m_proxy_configuration_isSet = !json[QString("ProxyConfiguration")].isNull() && m_proxy_configuration_isValid;
}

QString OAIDataSourceConfiguration_SharePointConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataSourceConfiguration_SharePointConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_share_point_version.isSet()) {
        obj.insert(QString("SharePointVersion"), ::OpenAPI::toJsonValue(m_share_point_version));
    }
    if (m_urls.isSet()) {
        obj.insert(QString("Urls"), ::OpenAPI::toJsonValue(m_urls));
    }
    if (m_secret_arn_isSet) {
        obj.insert(QString("SecretArn"), ::OpenAPI::toJsonValue(m_secret_arn));
    }
    if (m_crawl_attachments_isSet) {
        obj.insert(QString("CrawlAttachments"), ::OpenAPI::toJsonValue(m_crawl_attachments));
    }
    if (m_use_change_log_isSet) {
        obj.insert(QString("UseChangeLog"), ::OpenAPI::toJsonValue(m_use_change_log));
    }
    if (m_inclusion_patterns.isSet()) {
        obj.insert(QString("InclusionPatterns"), ::OpenAPI::toJsonValue(m_inclusion_patterns));
    }
    if (m_exclusion_patterns.isSet()) {
        obj.insert(QString("ExclusionPatterns"), ::OpenAPI::toJsonValue(m_exclusion_patterns));
    }
    if (m_vpc_configuration.isSet()) {
        obj.insert(QString("VpcConfiguration"), ::OpenAPI::toJsonValue(m_vpc_configuration));
    }
    if (m_field_mappings.isSet()) {
        obj.insert(QString("FieldMappings"), ::OpenAPI::toJsonValue(m_field_mappings));
    }
    if (m_document_title_field_name_isSet) {
        obj.insert(QString("DocumentTitleFieldName"), ::OpenAPI::toJsonValue(m_document_title_field_name));
    }
    if (m_disable_local_groups_isSet) {
        obj.insert(QString("DisableLocalGroups"), ::OpenAPI::toJsonValue(m_disable_local_groups));
    }
    if (m_ssl_certificate_s3_path.isSet()) {
        obj.insert(QString("SslCertificateS3Path"), ::OpenAPI::toJsonValue(m_ssl_certificate_s3_path));
    }
    if (m_authentication_type.isSet()) {
        obj.insert(QString("AuthenticationType"), ::OpenAPI::toJsonValue(m_authentication_type));
    }
    if (m_proxy_configuration.isSet()) {
        obj.insert(QString("ProxyConfiguration"), ::OpenAPI::toJsonValue(m_proxy_configuration));
    }
    return obj;
}

OAISharePointVersion OAIDataSourceConfiguration_SharePointConfiguration::getSharePointVersion() const {
    return m_share_point_version;
}
void OAIDataSourceConfiguration_SharePointConfiguration::setSharePointVersion(const OAISharePointVersion &share_point_version) {
    m_share_point_version = share_point_version;
    m_share_point_version_isSet = true;
}

bool OAIDataSourceConfiguration_SharePointConfiguration::is_share_point_version_Set() const{
    return m_share_point_version_isSet;
}

bool OAIDataSourceConfiguration_SharePointConfiguration::is_share_point_version_Valid() const{
    return m_share_point_version_isValid;
}

QList OAIDataSourceConfiguration_SharePointConfiguration::getUrls() const {
    return m_urls;
}
void OAIDataSourceConfiguration_SharePointConfiguration::setUrls(const QList &urls) {
    m_urls = urls;
    m_urls_isSet = true;
}

bool OAIDataSourceConfiguration_SharePointConfiguration::is_urls_Set() const{
    return m_urls_isSet;
}

bool OAIDataSourceConfiguration_SharePointConfiguration::is_urls_Valid() const{
    return m_urls_isValid;
}

QString OAIDataSourceConfiguration_SharePointConfiguration::getSecretArn() const {
    return m_secret_arn;
}
void OAIDataSourceConfiguration_SharePointConfiguration::setSecretArn(const QString &secret_arn) {
    m_secret_arn = secret_arn;
    m_secret_arn_isSet = true;
}

bool OAIDataSourceConfiguration_SharePointConfiguration::is_secret_arn_Set() const{
    return m_secret_arn_isSet;
}

bool OAIDataSourceConfiguration_SharePointConfiguration::is_secret_arn_Valid() const{
    return m_secret_arn_isValid;
}

bool OAIDataSourceConfiguration_SharePointConfiguration::getCrawlAttachments() const {
    return m_crawl_attachments;
}
void OAIDataSourceConfiguration_SharePointConfiguration::setCrawlAttachments(const bool &crawl_attachments) {
    m_crawl_attachments = crawl_attachments;
    m_crawl_attachments_isSet = true;
}

bool OAIDataSourceConfiguration_SharePointConfiguration::is_crawl_attachments_Set() const{
    return m_crawl_attachments_isSet;
}

bool OAIDataSourceConfiguration_SharePointConfiguration::is_crawl_attachments_Valid() const{
    return m_crawl_attachments_isValid;
}

bool OAIDataSourceConfiguration_SharePointConfiguration::getUseChangeLog() const {
    return m_use_change_log;
}
void OAIDataSourceConfiguration_SharePointConfiguration::setUseChangeLog(const bool &use_change_log) {
    m_use_change_log = use_change_log;
    m_use_change_log_isSet = true;
}

bool OAIDataSourceConfiguration_SharePointConfiguration::is_use_change_log_Set() const{
    return m_use_change_log_isSet;
}

bool OAIDataSourceConfiguration_SharePointConfiguration::is_use_change_log_Valid() const{
    return m_use_change_log_isValid;
}

QList OAIDataSourceConfiguration_SharePointConfiguration::getInclusionPatterns() const {
    return m_inclusion_patterns;
}
void OAIDataSourceConfiguration_SharePointConfiguration::setInclusionPatterns(const QList &inclusion_patterns) {
    m_inclusion_patterns = inclusion_patterns;
    m_inclusion_patterns_isSet = true;
}

bool OAIDataSourceConfiguration_SharePointConfiguration::is_inclusion_patterns_Set() const{
    return m_inclusion_patterns_isSet;
}

bool OAIDataSourceConfiguration_SharePointConfiguration::is_inclusion_patterns_Valid() const{
    return m_inclusion_patterns_isValid;
}

QList OAIDataSourceConfiguration_SharePointConfiguration::getExclusionPatterns() const {
    return m_exclusion_patterns;
}
void OAIDataSourceConfiguration_SharePointConfiguration::setExclusionPatterns(const QList &exclusion_patterns) {
    m_exclusion_patterns = exclusion_patterns;
    m_exclusion_patterns_isSet = true;
}

bool OAIDataSourceConfiguration_SharePointConfiguration::is_exclusion_patterns_Set() const{
    return m_exclusion_patterns_isSet;
}

bool OAIDataSourceConfiguration_SharePointConfiguration::is_exclusion_patterns_Valid() const{
    return m_exclusion_patterns_isValid;
}

OAISharePointConfiguration_VpcConfiguration OAIDataSourceConfiguration_SharePointConfiguration::getVpcConfiguration() const {
    return m_vpc_configuration;
}
void OAIDataSourceConfiguration_SharePointConfiguration::setVpcConfiguration(const OAISharePointConfiguration_VpcConfiguration &vpc_configuration) {
    m_vpc_configuration = vpc_configuration;
    m_vpc_configuration_isSet = true;
}

bool OAIDataSourceConfiguration_SharePointConfiguration::is_vpc_configuration_Set() const{
    return m_vpc_configuration_isSet;
}

bool OAIDataSourceConfiguration_SharePointConfiguration::is_vpc_configuration_Valid() const{
    return m_vpc_configuration_isValid;
}

QList OAIDataSourceConfiguration_SharePointConfiguration::getFieldMappings() const {
    return m_field_mappings;
}
void OAIDataSourceConfiguration_SharePointConfiguration::setFieldMappings(const QList &field_mappings) {
    m_field_mappings = field_mappings;
    m_field_mappings_isSet = true;
}

bool OAIDataSourceConfiguration_SharePointConfiguration::is_field_mappings_Set() const{
    return m_field_mappings_isSet;
}

bool OAIDataSourceConfiguration_SharePointConfiguration::is_field_mappings_Valid() const{
    return m_field_mappings_isValid;
}

QString OAIDataSourceConfiguration_SharePointConfiguration::getDocumentTitleFieldName() const {
    return m_document_title_field_name;
}
void OAIDataSourceConfiguration_SharePointConfiguration::setDocumentTitleFieldName(const QString &document_title_field_name) {
    m_document_title_field_name = document_title_field_name;
    m_document_title_field_name_isSet = true;
}

bool OAIDataSourceConfiguration_SharePointConfiguration::is_document_title_field_name_Set() const{
    return m_document_title_field_name_isSet;
}

bool OAIDataSourceConfiguration_SharePointConfiguration::is_document_title_field_name_Valid() const{
    return m_document_title_field_name_isValid;
}

bool OAIDataSourceConfiguration_SharePointConfiguration::getDisableLocalGroups() const {
    return m_disable_local_groups;
}
void OAIDataSourceConfiguration_SharePointConfiguration::setDisableLocalGroups(const bool &disable_local_groups) {
    m_disable_local_groups = disable_local_groups;
    m_disable_local_groups_isSet = true;
}

bool OAIDataSourceConfiguration_SharePointConfiguration::is_disable_local_groups_Set() const{
    return m_disable_local_groups_isSet;
}

bool OAIDataSourceConfiguration_SharePointConfiguration::is_disable_local_groups_Valid() const{
    return m_disable_local_groups_isValid;
}

OAISharePointConfiguration_SslCertificateS3Path OAIDataSourceConfiguration_SharePointConfiguration::getSslCertificateS3Path() const {
    return m_ssl_certificate_s3_path;
}
void OAIDataSourceConfiguration_SharePointConfiguration::setSslCertificateS3Path(const OAISharePointConfiguration_SslCertificateS3Path &ssl_certificate_s3_path) {
    m_ssl_certificate_s3_path = ssl_certificate_s3_path;
    m_ssl_certificate_s3_path_isSet = true;
}

bool OAIDataSourceConfiguration_SharePointConfiguration::is_ssl_certificate_s3_path_Set() const{
    return m_ssl_certificate_s3_path_isSet;
}

bool OAIDataSourceConfiguration_SharePointConfiguration::is_ssl_certificate_s3_path_Valid() const{
    return m_ssl_certificate_s3_path_isValid;
}

OAISharePointOnlineAuthenticationType OAIDataSourceConfiguration_SharePointConfiguration::getAuthenticationType() const {
    return m_authentication_type;
}
void OAIDataSourceConfiguration_SharePointConfiguration::setAuthenticationType(const OAISharePointOnlineAuthenticationType &authentication_type) {
    m_authentication_type = authentication_type;
    m_authentication_type_isSet = true;
}

bool OAIDataSourceConfiguration_SharePointConfiguration::is_authentication_type_Set() const{
    return m_authentication_type_isSet;
}

bool OAIDataSourceConfiguration_SharePointConfiguration::is_authentication_type_Valid() const{
    return m_authentication_type_isValid;
}

OAISharePointConfiguration_ProxyConfiguration OAIDataSourceConfiguration_SharePointConfiguration::getProxyConfiguration() const {
    return m_proxy_configuration;
}
void OAIDataSourceConfiguration_SharePointConfiguration::setProxyConfiguration(const OAISharePointConfiguration_ProxyConfiguration &proxy_configuration) {
    m_proxy_configuration = proxy_configuration;
    m_proxy_configuration_isSet = true;
}

bool OAIDataSourceConfiguration_SharePointConfiguration::is_proxy_configuration_Set() const{
    return m_proxy_configuration_isSet;
}

bool OAIDataSourceConfiguration_SharePointConfiguration::is_proxy_configuration_Valid() const{
    return m_proxy_configuration_isValid;
}

bool OAIDataSourceConfiguration_SharePointConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_share_point_version.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_urls.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crawl_attachments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_change_log_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inclusion_patterns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclusion_patterns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_mappings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_title_field_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_local_groups_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssl_certificate_s3_path.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_authentication_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_proxy_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataSourceConfiguration_SharePointConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_share_point_version_isValid && m_urls_isValid && m_secret_arn_isValid && true;
}

} // namespace OpenAPI
