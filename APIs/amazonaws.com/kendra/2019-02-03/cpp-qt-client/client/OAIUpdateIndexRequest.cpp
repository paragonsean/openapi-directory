/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateIndexRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateIndexRequest::OAIUpdateIndexRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateIndexRequest::OAIUpdateIndexRequest() {
    this->initializeModel();
}

OAIUpdateIndexRequest::~OAIUpdateIndexRequest() {}

void OAIUpdateIndexRequest::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_document_metadata_configuration_updates_isSet = false;
    m_document_metadata_configuration_updates_isValid = false;

    m_capacity_units_isSet = false;
    m_capacity_units_isValid = false;

    m_user_token_configurations_isSet = false;
    m_user_token_configurations_isValid = false;

    m_user_context_policy_isSet = false;
    m_user_context_policy_isValid = false;

    m_user_group_resolution_configuration_isSet = false;
    m_user_group_resolution_configuration_isValid = false;
}

void OAIUpdateIndexRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateIndexRequest::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_document_metadata_configuration_updates_isValid = ::OpenAPI::fromJsonValue(m_document_metadata_configuration_updates, json[QString("DocumentMetadataConfigurationUpdates")]);
    m_document_metadata_configuration_updates_isSet = !json[QString("DocumentMetadataConfigurationUpdates")].isNull() && m_document_metadata_configuration_updates_isValid;

    m_capacity_units_isValid = ::OpenAPI::fromJsonValue(m_capacity_units, json[QString("CapacityUnits")]);
    m_capacity_units_isSet = !json[QString("CapacityUnits")].isNull() && m_capacity_units_isValid;

    m_user_token_configurations_isValid = ::OpenAPI::fromJsonValue(m_user_token_configurations, json[QString("UserTokenConfigurations")]);
    m_user_token_configurations_isSet = !json[QString("UserTokenConfigurations")].isNull() && m_user_token_configurations_isValid;

    m_user_context_policy_isValid = ::OpenAPI::fromJsonValue(m_user_context_policy, json[QString("UserContextPolicy")]);
    m_user_context_policy_isSet = !json[QString("UserContextPolicy")].isNull() && m_user_context_policy_isValid;

    m_user_group_resolution_configuration_isValid = ::OpenAPI::fromJsonValue(m_user_group_resolution_configuration, json[QString("UserGroupResolutionConfiguration")]);
    m_user_group_resolution_configuration_isSet = !json[QString("UserGroupResolutionConfiguration")].isNull() && m_user_group_resolution_configuration_isValid;
}

QString OAIUpdateIndexRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateIndexRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_document_metadata_configuration_updates.isSet()) {
        obj.insert(QString("DocumentMetadataConfigurationUpdates"), ::OpenAPI::toJsonValue(m_document_metadata_configuration_updates));
    }
    if (m_capacity_units.isSet()) {
        obj.insert(QString("CapacityUnits"), ::OpenAPI::toJsonValue(m_capacity_units));
    }
    if (m_user_token_configurations.isSet()) {
        obj.insert(QString("UserTokenConfigurations"), ::OpenAPI::toJsonValue(m_user_token_configurations));
    }
    if (m_user_context_policy.isSet()) {
        obj.insert(QString("UserContextPolicy"), ::OpenAPI::toJsonValue(m_user_context_policy));
    }
    if (m_user_group_resolution_configuration.isSet()) {
        obj.insert(QString("UserGroupResolutionConfiguration"), ::OpenAPI::toJsonValue(m_user_group_resolution_configuration));
    }
    return obj;
}

QString OAIUpdateIndexRequest::getId() const {
    return m_id;
}
void OAIUpdateIndexRequest::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUpdateIndexRequest::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUpdateIndexRequest::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIUpdateIndexRequest::getName() const {
    return m_name;
}
void OAIUpdateIndexRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdateIndexRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateIndexRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUpdateIndexRequest::getRoleArn() const {
    return m_role_arn;
}
void OAIUpdateIndexRequest::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIUpdateIndexRequest::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIUpdateIndexRequest::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

QString OAIUpdateIndexRequest::getDescription() const {
    return m_description;
}
void OAIUpdateIndexRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpdateIndexRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdateIndexRequest::is_description_Valid() const{
    return m_description_isValid;
}

QList OAIUpdateIndexRequest::getDocumentMetadataConfigurationUpdates() const {
    return m_document_metadata_configuration_updates;
}
void OAIUpdateIndexRequest::setDocumentMetadataConfigurationUpdates(const QList &document_metadata_configuration_updates) {
    m_document_metadata_configuration_updates = document_metadata_configuration_updates;
    m_document_metadata_configuration_updates_isSet = true;
}

bool OAIUpdateIndexRequest::is_document_metadata_configuration_updates_Set() const{
    return m_document_metadata_configuration_updates_isSet;
}

bool OAIUpdateIndexRequest::is_document_metadata_configuration_updates_Valid() const{
    return m_document_metadata_configuration_updates_isValid;
}

OAIUpdateIndexRequest_CapacityUnits OAIUpdateIndexRequest::getCapacityUnits() const {
    return m_capacity_units;
}
void OAIUpdateIndexRequest::setCapacityUnits(const OAIUpdateIndexRequest_CapacityUnits &capacity_units) {
    m_capacity_units = capacity_units;
    m_capacity_units_isSet = true;
}

bool OAIUpdateIndexRequest::is_capacity_units_Set() const{
    return m_capacity_units_isSet;
}

bool OAIUpdateIndexRequest::is_capacity_units_Valid() const{
    return m_capacity_units_isValid;
}

QList OAIUpdateIndexRequest::getUserTokenConfigurations() const {
    return m_user_token_configurations;
}
void OAIUpdateIndexRequest::setUserTokenConfigurations(const QList &user_token_configurations) {
    m_user_token_configurations = user_token_configurations;
    m_user_token_configurations_isSet = true;
}

bool OAIUpdateIndexRequest::is_user_token_configurations_Set() const{
    return m_user_token_configurations_isSet;
}

bool OAIUpdateIndexRequest::is_user_token_configurations_Valid() const{
    return m_user_token_configurations_isValid;
}

OAIUserContextPolicy OAIUpdateIndexRequest::getUserContextPolicy() const {
    return m_user_context_policy;
}
void OAIUpdateIndexRequest::setUserContextPolicy(const OAIUserContextPolicy &user_context_policy) {
    m_user_context_policy = user_context_policy;
    m_user_context_policy_isSet = true;
}

bool OAIUpdateIndexRequest::is_user_context_policy_Set() const{
    return m_user_context_policy_isSet;
}

bool OAIUpdateIndexRequest::is_user_context_policy_Valid() const{
    return m_user_context_policy_isValid;
}

OAIUpdateIndexRequest_UserGroupResolutionConfiguration OAIUpdateIndexRequest::getUserGroupResolutionConfiguration() const {
    return m_user_group_resolution_configuration;
}
void OAIUpdateIndexRequest::setUserGroupResolutionConfiguration(const OAIUpdateIndexRequest_UserGroupResolutionConfiguration &user_group_resolution_configuration) {
    m_user_group_resolution_configuration = user_group_resolution_configuration;
    m_user_group_resolution_configuration_isSet = true;
}

bool OAIUpdateIndexRequest::is_user_group_resolution_configuration_Set() const{
    return m_user_group_resolution_configuration_isSet;
}

bool OAIUpdateIndexRequest::is_user_group_resolution_configuration_Valid() const{
    return m_user_group_resolution_configuration_isValid;
}

bool OAIUpdateIndexRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_metadata_configuration_updates.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_capacity_units.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_token_configurations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_context_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_group_resolution_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateIndexRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && true;
}

} // namespace OpenAPI
