/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISuggestion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISuggestion::OAISuggestion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISuggestion::OAISuggestion() {
    this->initializeModel();
}

OAISuggestion::~OAISuggestion() {}

void OAISuggestion::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_source_documents_isSet = false;
    m_source_documents_isValid = false;
}

void OAISuggestion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISuggestion::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;

    m_source_documents_isValid = ::OpenAPI::fromJsonValue(m_source_documents, json[QString("SourceDocuments")]);
    m_source_documents_isSet = !json[QString("SourceDocuments")].isNull() && m_source_documents_isValid;
}

QString OAISuggestion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISuggestion::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_value.isSet()) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_source_documents.isSet()) {
        obj.insert(QString("SourceDocuments"), ::OpenAPI::toJsonValue(m_source_documents));
    }
    return obj;
}

QString OAISuggestion::getId() const {
    return m_id;
}
void OAISuggestion::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISuggestion::is_id_Set() const{
    return m_id_isSet;
}

bool OAISuggestion::is_id_Valid() const{
    return m_id_isValid;
}

OAISuggestion_Value OAISuggestion::getValue() const {
    return m_value;
}
void OAISuggestion::setValue(const OAISuggestion_Value &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAISuggestion::is_value_Set() const{
    return m_value_isSet;
}

bool OAISuggestion::is_value_Valid() const{
    return m_value_isValid;
}

QList OAISuggestion::getSourceDocuments() const {
    return m_source_documents;
}
void OAISuggestion::setSourceDocuments(const QList &source_documents) {
    m_source_documents = source_documents;
    m_source_documents_isSet = true;
}

bool OAISuggestion::is_source_documents_Set() const{
    return m_source_documents_isSet;
}

bool OAISuggestion::is_source_documents_Valid() const{
    return m_source_documents_isValid;
}

bool OAISuggestion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_documents.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISuggestion::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
