/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFsxConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFsxConfiguration::OAIFsxConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFsxConfiguration::OAIFsxConfiguration() {
    this->initializeModel();
}

OAIFsxConfiguration::~OAIFsxConfiguration() {}

void OAIFsxConfiguration::initializeModel() {

    m_file_system_id_isSet = false;
    m_file_system_id_isValid = false;

    m_file_system_type_isSet = false;
    m_file_system_type_isValid = false;

    m_vpc_configuration_isSet = false;
    m_vpc_configuration_isValid = false;

    m_secret_arn_isSet = false;
    m_secret_arn_isValid = false;

    m_inclusion_patterns_isSet = false;
    m_inclusion_patterns_isValid = false;

    m_exclusion_patterns_isSet = false;
    m_exclusion_patterns_isValid = false;

    m_field_mappings_isSet = false;
    m_field_mappings_isValid = false;
}

void OAIFsxConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFsxConfiguration::fromJsonObject(QJsonObject json) {

    m_file_system_id_isValid = ::OpenAPI::fromJsonValue(m_file_system_id, json[QString("FileSystemId")]);
    m_file_system_id_isSet = !json[QString("FileSystemId")].isNull() && m_file_system_id_isValid;

    m_file_system_type_isValid = ::OpenAPI::fromJsonValue(m_file_system_type, json[QString("FileSystemType")]);
    m_file_system_type_isSet = !json[QString("FileSystemType")].isNull() && m_file_system_type_isValid;

    m_vpc_configuration_isValid = ::OpenAPI::fromJsonValue(m_vpc_configuration, json[QString("VpcConfiguration")]);
    m_vpc_configuration_isSet = !json[QString("VpcConfiguration")].isNull() && m_vpc_configuration_isValid;

    m_secret_arn_isValid = ::OpenAPI::fromJsonValue(m_secret_arn, json[QString("SecretArn")]);
    m_secret_arn_isSet = !json[QString("SecretArn")].isNull() && m_secret_arn_isValid;

    m_inclusion_patterns_isValid = ::OpenAPI::fromJsonValue(m_inclusion_patterns, json[QString("InclusionPatterns")]);
    m_inclusion_patterns_isSet = !json[QString("InclusionPatterns")].isNull() && m_inclusion_patterns_isValid;

    m_exclusion_patterns_isValid = ::OpenAPI::fromJsonValue(m_exclusion_patterns, json[QString("ExclusionPatterns")]);
    m_exclusion_patterns_isSet = !json[QString("ExclusionPatterns")].isNull() && m_exclusion_patterns_isValid;

    m_field_mappings_isValid = ::OpenAPI::fromJsonValue(m_field_mappings, json[QString("FieldMappings")]);
    m_field_mappings_isSet = !json[QString("FieldMappings")].isNull() && m_field_mappings_isValid;
}

QString OAIFsxConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFsxConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_file_system_id_isSet) {
        obj.insert(QString("FileSystemId"), ::OpenAPI::toJsonValue(m_file_system_id));
    }
    if (m_file_system_type.isSet()) {
        obj.insert(QString("FileSystemType"), ::OpenAPI::toJsonValue(m_file_system_type));
    }
    if (m_vpc_configuration.isSet()) {
        obj.insert(QString("VpcConfiguration"), ::OpenAPI::toJsonValue(m_vpc_configuration));
    }
    if (m_secret_arn_isSet) {
        obj.insert(QString("SecretArn"), ::OpenAPI::toJsonValue(m_secret_arn));
    }
    if (m_inclusion_patterns.isSet()) {
        obj.insert(QString("InclusionPatterns"), ::OpenAPI::toJsonValue(m_inclusion_patterns));
    }
    if (m_exclusion_patterns.isSet()) {
        obj.insert(QString("ExclusionPatterns"), ::OpenAPI::toJsonValue(m_exclusion_patterns));
    }
    if (m_field_mappings.isSet()) {
        obj.insert(QString("FieldMappings"), ::OpenAPI::toJsonValue(m_field_mappings));
    }
    return obj;
}

QString OAIFsxConfiguration::getFileSystemId() const {
    return m_file_system_id;
}
void OAIFsxConfiguration::setFileSystemId(const QString &file_system_id) {
    m_file_system_id = file_system_id;
    m_file_system_id_isSet = true;
}

bool OAIFsxConfiguration::is_file_system_id_Set() const{
    return m_file_system_id_isSet;
}

bool OAIFsxConfiguration::is_file_system_id_Valid() const{
    return m_file_system_id_isValid;
}

OAIFsxFileSystemType OAIFsxConfiguration::getFileSystemType() const {
    return m_file_system_type;
}
void OAIFsxConfiguration::setFileSystemType(const OAIFsxFileSystemType &file_system_type) {
    m_file_system_type = file_system_type;
    m_file_system_type_isSet = true;
}

bool OAIFsxConfiguration::is_file_system_type_Set() const{
    return m_file_system_type_isSet;
}

bool OAIFsxConfiguration::is_file_system_type_Valid() const{
    return m_file_system_type_isValid;
}

OAIFsxConfiguration_VpcConfiguration OAIFsxConfiguration::getVpcConfiguration() const {
    return m_vpc_configuration;
}
void OAIFsxConfiguration::setVpcConfiguration(const OAIFsxConfiguration_VpcConfiguration &vpc_configuration) {
    m_vpc_configuration = vpc_configuration;
    m_vpc_configuration_isSet = true;
}

bool OAIFsxConfiguration::is_vpc_configuration_Set() const{
    return m_vpc_configuration_isSet;
}

bool OAIFsxConfiguration::is_vpc_configuration_Valid() const{
    return m_vpc_configuration_isValid;
}

QString OAIFsxConfiguration::getSecretArn() const {
    return m_secret_arn;
}
void OAIFsxConfiguration::setSecretArn(const QString &secret_arn) {
    m_secret_arn = secret_arn;
    m_secret_arn_isSet = true;
}

bool OAIFsxConfiguration::is_secret_arn_Set() const{
    return m_secret_arn_isSet;
}

bool OAIFsxConfiguration::is_secret_arn_Valid() const{
    return m_secret_arn_isValid;
}

QList OAIFsxConfiguration::getInclusionPatterns() const {
    return m_inclusion_patterns;
}
void OAIFsxConfiguration::setInclusionPatterns(const QList &inclusion_patterns) {
    m_inclusion_patterns = inclusion_patterns;
    m_inclusion_patterns_isSet = true;
}

bool OAIFsxConfiguration::is_inclusion_patterns_Set() const{
    return m_inclusion_patterns_isSet;
}

bool OAIFsxConfiguration::is_inclusion_patterns_Valid() const{
    return m_inclusion_patterns_isValid;
}

QList OAIFsxConfiguration::getExclusionPatterns() const {
    return m_exclusion_patterns;
}
void OAIFsxConfiguration::setExclusionPatterns(const QList &exclusion_patterns) {
    m_exclusion_patterns = exclusion_patterns;
    m_exclusion_patterns_isSet = true;
}

bool OAIFsxConfiguration::is_exclusion_patterns_Set() const{
    return m_exclusion_patterns_isSet;
}

bool OAIFsxConfiguration::is_exclusion_patterns_Valid() const{
    return m_exclusion_patterns_isValid;
}

QList OAIFsxConfiguration::getFieldMappings() const {
    return m_field_mappings;
}
void OAIFsxConfiguration::setFieldMappings(const QList &field_mappings) {
    m_field_mappings = field_mappings;
    m_field_mappings_isSet = true;
}

bool OAIFsxConfiguration::is_field_mappings_Set() const{
    return m_field_mappings_isSet;
}

bool OAIFsxConfiguration::is_field_mappings_Valid() const{
    return m_field_mappings_isValid;
}

bool OAIFsxConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_system_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_system_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inclusion_patterns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclusion_patterns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_mappings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFsxConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_file_system_id_isValid && m_file_system_type_isValid && m_vpc_configuration_isValid && true;
}

} // namespace OpenAPI
