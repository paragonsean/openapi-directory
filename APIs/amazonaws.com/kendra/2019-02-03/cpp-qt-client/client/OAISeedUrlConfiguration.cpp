/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISeedUrlConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISeedUrlConfiguration::OAISeedUrlConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISeedUrlConfiguration::OAISeedUrlConfiguration() {
    this->initializeModel();
}

OAISeedUrlConfiguration::~OAISeedUrlConfiguration() {}

void OAISeedUrlConfiguration::initializeModel() {

    m_seed_urls_isSet = false;
    m_seed_urls_isValid = false;

    m_web_crawler_mode_isSet = false;
    m_web_crawler_mode_isValid = false;
}

void OAISeedUrlConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISeedUrlConfiguration::fromJsonObject(QJsonObject json) {

    m_seed_urls_isValid = ::OpenAPI::fromJsonValue(m_seed_urls, json[QString("SeedUrls")]);
    m_seed_urls_isSet = !json[QString("SeedUrls")].isNull() && m_seed_urls_isValid;

    m_web_crawler_mode_isValid = ::OpenAPI::fromJsonValue(m_web_crawler_mode, json[QString("WebCrawlerMode")]);
    m_web_crawler_mode_isSet = !json[QString("WebCrawlerMode")].isNull() && m_web_crawler_mode_isValid;
}

QString OAISeedUrlConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISeedUrlConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_seed_urls.isSet()) {
        obj.insert(QString("SeedUrls"), ::OpenAPI::toJsonValue(m_seed_urls));
    }
    if (m_web_crawler_mode.isSet()) {
        obj.insert(QString("WebCrawlerMode"), ::OpenAPI::toJsonValue(m_web_crawler_mode));
    }
    return obj;
}

QList OAISeedUrlConfiguration::getSeedUrls() const {
    return m_seed_urls;
}
void OAISeedUrlConfiguration::setSeedUrls(const QList &seed_urls) {
    m_seed_urls = seed_urls;
    m_seed_urls_isSet = true;
}

bool OAISeedUrlConfiguration::is_seed_urls_Set() const{
    return m_seed_urls_isSet;
}

bool OAISeedUrlConfiguration::is_seed_urls_Valid() const{
    return m_seed_urls_isValid;
}

OAIWebCrawlerMode OAISeedUrlConfiguration::getWebCrawlerMode() const {
    return m_web_crawler_mode;
}
void OAISeedUrlConfiguration::setWebCrawlerMode(const OAIWebCrawlerMode &web_crawler_mode) {
    m_web_crawler_mode = web_crawler_mode;
    m_web_crawler_mode_isSet = true;
}

bool OAISeedUrlConfiguration::is_web_crawler_mode_Set() const{
    return m_web_crawler_mode_isSet;
}

bool OAISeedUrlConfiguration::is_web_crawler_mode_Valid() const{
    return m_web_crawler_mode_isValid;
}

bool OAISeedUrlConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_seed_urls.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_crawler_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISeedUrlConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_seed_urls_isValid && true;
}

} // namespace OpenAPI
