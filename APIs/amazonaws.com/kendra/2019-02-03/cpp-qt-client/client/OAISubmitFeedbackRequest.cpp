/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubmitFeedbackRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubmitFeedbackRequest::OAISubmitFeedbackRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubmitFeedbackRequest::OAISubmitFeedbackRequest() {
    this->initializeModel();
}

OAISubmitFeedbackRequest::~OAISubmitFeedbackRequest() {}

void OAISubmitFeedbackRequest::initializeModel() {

    m_index_id_isSet = false;
    m_index_id_isValid = false;

    m_query_id_isSet = false;
    m_query_id_isValid = false;

    m_click_feedback_items_isSet = false;
    m_click_feedback_items_isValid = false;

    m_relevance_feedback_items_isSet = false;
    m_relevance_feedback_items_isValid = false;
}

void OAISubmitFeedbackRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubmitFeedbackRequest::fromJsonObject(QJsonObject json) {

    m_index_id_isValid = ::OpenAPI::fromJsonValue(m_index_id, json[QString("IndexId")]);
    m_index_id_isSet = !json[QString("IndexId")].isNull() && m_index_id_isValid;

    m_query_id_isValid = ::OpenAPI::fromJsonValue(m_query_id, json[QString("QueryId")]);
    m_query_id_isSet = !json[QString("QueryId")].isNull() && m_query_id_isValid;

    m_click_feedback_items_isValid = ::OpenAPI::fromJsonValue(m_click_feedback_items, json[QString("ClickFeedbackItems")]);
    m_click_feedback_items_isSet = !json[QString("ClickFeedbackItems")].isNull() && m_click_feedback_items_isValid;

    m_relevance_feedback_items_isValid = ::OpenAPI::fromJsonValue(m_relevance_feedback_items, json[QString("RelevanceFeedbackItems")]);
    m_relevance_feedback_items_isSet = !json[QString("RelevanceFeedbackItems")].isNull() && m_relevance_feedback_items_isValid;
}

QString OAISubmitFeedbackRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubmitFeedbackRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_index_id_isSet) {
        obj.insert(QString("IndexId"), ::OpenAPI::toJsonValue(m_index_id));
    }
    if (m_query_id_isSet) {
        obj.insert(QString("QueryId"), ::OpenAPI::toJsonValue(m_query_id));
    }
    if (m_click_feedback_items.isSet()) {
        obj.insert(QString("ClickFeedbackItems"), ::OpenAPI::toJsonValue(m_click_feedback_items));
    }
    if (m_relevance_feedback_items.isSet()) {
        obj.insert(QString("RelevanceFeedbackItems"), ::OpenAPI::toJsonValue(m_relevance_feedback_items));
    }
    return obj;
}

QString OAISubmitFeedbackRequest::getIndexId() const {
    return m_index_id;
}
void OAISubmitFeedbackRequest::setIndexId(const QString &index_id) {
    m_index_id = index_id;
    m_index_id_isSet = true;
}

bool OAISubmitFeedbackRequest::is_index_id_Set() const{
    return m_index_id_isSet;
}

bool OAISubmitFeedbackRequest::is_index_id_Valid() const{
    return m_index_id_isValid;
}

QString OAISubmitFeedbackRequest::getQueryId() const {
    return m_query_id;
}
void OAISubmitFeedbackRequest::setQueryId(const QString &query_id) {
    m_query_id = query_id;
    m_query_id_isSet = true;
}

bool OAISubmitFeedbackRequest::is_query_id_Set() const{
    return m_query_id_isSet;
}

bool OAISubmitFeedbackRequest::is_query_id_Valid() const{
    return m_query_id_isValid;
}

QList OAISubmitFeedbackRequest::getClickFeedbackItems() const {
    return m_click_feedback_items;
}
void OAISubmitFeedbackRequest::setClickFeedbackItems(const QList &click_feedback_items) {
    m_click_feedback_items = click_feedback_items;
    m_click_feedback_items_isSet = true;
}

bool OAISubmitFeedbackRequest::is_click_feedback_items_Set() const{
    return m_click_feedback_items_isSet;
}

bool OAISubmitFeedbackRequest::is_click_feedback_items_Valid() const{
    return m_click_feedback_items_isValid;
}

QList OAISubmitFeedbackRequest::getRelevanceFeedbackItems() const {
    return m_relevance_feedback_items;
}
void OAISubmitFeedbackRequest::setRelevanceFeedbackItems(const QList &relevance_feedback_items) {
    m_relevance_feedback_items = relevance_feedback_items;
    m_relevance_feedback_items_isSet = true;
}

bool OAISubmitFeedbackRequest::is_relevance_feedback_items_Set() const{
    return m_relevance_feedback_items_isSet;
}

bool OAISubmitFeedbackRequest::is_relevance_feedback_items_Valid() const{
    return m_relevance_feedback_items_isValid;
}

bool OAISubmitFeedbackRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_index_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_click_feedback_items.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_relevance_feedback_items.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubmitFeedbackRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_index_id_isValid && m_query_id_isValid && true;
}

} // namespace OpenAPI
