/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleDriveConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleDriveConfiguration::OAIGoogleDriveConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleDriveConfiguration::OAIGoogleDriveConfiguration() {
    this->initializeModel();
}

OAIGoogleDriveConfiguration::~OAIGoogleDriveConfiguration() {}

void OAIGoogleDriveConfiguration::initializeModel() {

    m_secret_arn_isSet = false;
    m_secret_arn_isValid = false;

    m_inclusion_patterns_isSet = false;
    m_inclusion_patterns_isValid = false;

    m_exclusion_patterns_isSet = false;
    m_exclusion_patterns_isValid = false;

    m_field_mappings_isSet = false;
    m_field_mappings_isValid = false;

    m_exclude_mime_types_isSet = false;
    m_exclude_mime_types_isValid = false;

    m_exclude_user_accounts_isSet = false;
    m_exclude_user_accounts_isValid = false;

    m_exclude_shared_drives_isSet = false;
    m_exclude_shared_drives_isValid = false;
}

void OAIGoogleDriveConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleDriveConfiguration::fromJsonObject(QJsonObject json) {

    m_secret_arn_isValid = ::OpenAPI::fromJsonValue(m_secret_arn, json[QString("SecretArn")]);
    m_secret_arn_isSet = !json[QString("SecretArn")].isNull() && m_secret_arn_isValid;

    m_inclusion_patterns_isValid = ::OpenAPI::fromJsonValue(m_inclusion_patterns, json[QString("InclusionPatterns")]);
    m_inclusion_patterns_isSet = !json[QString("InclusionPatterns")].isNull() && m_inclusion_patterns_isValid;

    m_exclusion_patterns_isValid = ::OpenAPI::fromJsonValue(m_exclusion_patterns, json[QString("ExclusionPatterns")]);
    m_exclusion_patterns_isSet = !json[QString("ExclusionPatterns")].isNull() && m_exclusion_patterns_isValid;

    m_field_mappings_isValid = ::OpenAPI::fromJsonValue(m_field_mappings, json[QString("FieldMappings")]);
    m_field_mappings_isSet = !json[QString("FieldMappings")].isNull() && m_field_mappings_isValid;

    m_exclude_mime_types_isValid = ::OpenAPI::fromJsonValue(m_exclude_mime_types, json[QString("ExcludeMimeTypes")]);
    m_exclude_mime_types_isSet = !json[QString("ExcludeMimeTypes")].isNull() && m_exclude_mime_types_isValid;

    m_exclude_user_accounts_isValid = ::OpenAPI::fromJsonValue(m_exclude_user_accounts, json[QString("ExcludeUserAccounts")]);
    m_exclude_user_accounts_isSet = !json[QString("ExcludeUserAccounts")].isNull() && m_exclude_user_accounts_isValid;

    m_exclude_shared_drives_isValid = ::OpenAPI::fromJsonValue(m_exclude_shared_drives, json[QString("ExcludeSharedDrives")]);
    m_exclude_shared_drives_isSet = !json[QString("ExcludeSharedDrives")].isNull() && m_exclude_shared_drives_isValid;
}

QString OAIGoogleDriveConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleDriveConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_secret_arn_isSet) {
        obj.insert(QString("SecretArn"), ::OpenAPI::toJsonValue(m_secret_arn));
    }
    if (m_inclusion_patterns.isSet()) {
        obj.insert(QString("InclusionPatterns"), ::OpenAPI::toJsonValue(m_inclusion_patterns));
    }
    if (m_exclusion_patterns.isSet()) {
        obj.insert(QString("ExclusionPatterns"), ::OpenAPI::toJsonValue(m_exclusion_patterns));
    }
    if (m_field_mappings.isSet()) {
        obj.insert(QString("FieldMappings"), ::OpenAPI::toJsonValue(m_field_mappings));
    }
    if (m_exclude_mime_types.isSet()) {
        obj.insert(QString("ExcludeMimeTypes"), ::OpenAPI::toJsonValue(m_exclude_mime_types));
    }
    if (m_exclude_user_accounts.isSet()) {
        obj.insert(QString("ExcludeUserAccounts"), ::OpenAPI::toJsonValue(m_exclude_user_accounts));
    }
    if (m_exclude_shared_drives.isSet()) {
        obj.insert(QString("ExcludeSharedDrives"), ::OpenAPI::toJsonValue(m_exclude_shared_drives));
    }
    return obj;
}

QString OAIGoogleDriveConfiguration::getSecretArn() const {
    return m_secret_arn;
}
void OAIGoogleDriveConfiguration::setSecretArn(const QString &secret_arn) {
    m_secret_arn = secret_arn;
    m_secret_arn_isSet = true;
}

bool OAIGoogleDriveConfiguration::is_secret_arn_Set() const{
    return m_secret_arn_isSet;
}

bool OAIGoogleDriveConfiguration::is_secret_arn_Valid() const{
    return m_secret_arn_isValid;
}

QList OAIGoogleDriveConfiguration::getInclusionPatterns() const {
    return m_inclusion_patterns;
}
void OAIGoogleDriveConfiguration::setInclusionPatterns(const QList &inclusion_patterns) {
    m_inclusion_patterns = inclusion_patterns;
    m_inclusion_patterns_isSet = true;
}

bool OAIGoogleDriveConfiguration::is_inclusion_patterns_Set() const{
    return m_inclusion_patterns_isSet;
}

bool OAIGoogleDriveConfiguration::is_inclusion_patterns_Valid() const{
    return m_inclusion_patterns_isValid;
}

QList OAIGoogleDriveConfiguration::getExclusionPatterns() const {
    return m_exclusion_patterns;
}
void OAIGoogleDriveConfiguration::setExclusionPatterns(const QList &exclusion_patterns) {
    m_exclusion_patterns = exclusion_patterns;
    m_exclusion_patterns_isSet = true;
}

bool OAIGoogleDriveConfiguration::is_exclusion_patterns_Set() const{
    return m_exclusion_patterns_isSet;
}

bool OAIGoogleDriveConfiguration::is_exclusion_patterns_Valid() const{
    return m_exclusion_patterns_isValid;
}

QList OAIGoogleDriveConfiguration::getFieldMappings() const {
    return m_field_mappings;
}
void OAIGoogleDriveConfiguration::setFieldMappings(const QList &field_mappings) {
    m_field_mappings = field_mappings;
    m_field_mappings_isSet = true;
}

bool OAIGoogleDriveConfiguration::is_field_mappings_Set() const{
    return m_field_mappings_isSet;
}

bool OAIGoogleDriveConfiguration::is_field_mappings_Valid() const{
    return m_field_mappings_isValid;
}

QList OAIGoogleDriveConfiguration::getExcludeMimeTypes() const {
    return m_exclude_mime_types;
}
void OAIGoogleDriveConfiguration::setExcludeMimeTypes(const QList &exclude_mime_types) {
    m_exclude_mime_types = exclude_mime_types;
    m_exclude_mime_types_isSet = true;
}

bool OAIGoogleDriveConfiguration::is_exclude_mime_types_Set() const{
    return m_exclude_mime_types_isSet;
}

bool OAIGoogleDriveConfiguration::is_exclude_mime_types_Valid() const{
    return m_exclude_mime_types_isValid;
}

QList OAIGoogleDriveConfiguration::getExcludeUserAccounts() const {
    return m_exclude_user_accounts;
}
void OAIGoogleDriveConfiguration::setExcludeUserAccounts(const QList &exclude_user_accounts) {
    m_exclude_user_accounts = exclude_user_accounts;
    m_exclude_user_accounts_isSet = true;
}

bool OAIGoogleDriveConfiguration::is_exclude_user_accounts_Set() const{
    return m_exclude_user_accounts_isSet;
}

bool OAIGoogleDriveConfiguration::is_exclude_user_accounts_Valid() const{
    return m_exclude_user_accounts_isValid;
}

QList OAIGoogleDriveConfiguration::getExcludeSharedDrives() const {
    return m_exclude_shared_drives;
}
void OAIGoogleDriveConfiguration::setExcludeSharedDrives(const QList &exclude_shared_drives) {
    m_exclude_shared_drives = exclude_shared_drives;
    m_exclude_shared_drives_isSet = true;
}

bool OAIGoogleDriveConfiguration::is_exclude_shared_drives_Set() const{
    return m_exclude_shared_drives_isSet;
}

bool OAIGoogleDriveConfiguration::is_exclude_shared_drives_Valid() const{
    return m_exclude_shared_drives_isValid;
}

bool OAIGoogleDriveConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_secret_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inclusion_patterns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclusion_patterns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_mappings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclude_mime_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclude_user_accounts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclude_shared_drives.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleDriveConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_secret_arn_isValid && true;
}

} // namespace OpenAPI
