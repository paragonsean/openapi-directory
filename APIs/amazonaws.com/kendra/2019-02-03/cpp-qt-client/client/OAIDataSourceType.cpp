/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataSourceType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataSourceType::OAIDataSourceType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataSourceType::OAIDataSourceType() {
    this->initializeModel();
}

OAIDataSourceType::~OAIDataSourceType() {}

void OAIDataSourceType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIDataSourceType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIDataSourceType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("S3", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceType::S3;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SHAREPOINT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceType::SHAREPOINT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DATABASE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceType::DATABASE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SALESFORCE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceType::SALESFORCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ONEDRIVE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceType::ONEDRIVE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SERVICENOW", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceType::SERVICENOW;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CUSTOM", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceType::CUSTOM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CONFLUENCE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceType::CONFLUENCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GOOGLEDRIVE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceType::GOOGLEDRIVE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WEBCRAWLER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceType::WEBCRAWLER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WORKDOCS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceType::WORKDOCS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FSX", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceType::FSX;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SLACK", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceType::SLACK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BOX", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceType::BOX;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("QUIP", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceType::QUIP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("JIRA", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceType::JIRA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GITHUB", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceType::GITHUB;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ALFRESCO", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceType::ALFRESCO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TEMPLATE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceType::TEMPLATE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIDataSourceType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIDataSourceType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIDataSourceType::S3:
            val = "S3";
            break;
        case eOAIDataSourceType::SHAREPOINT:
            val = "SHAREPOINT";
            break;
        case eOAIDataSourceType::DATABASE:
            val = "DATABASE";
            break;
        case eOAIDataSourceType::SALESFORCE:
            val = "SALESFORCE";
            break;
        case eOAIDataSourceType::ONEDRIVE:
            val = "ONEDRIVE";
            break;
        case eOAIDataSourceType::SERVICENOW:
            val = "SERVICENOW";
            break;
        case eOAIDataSourceType::CUSTOM:
            val = "CUSTOM";
            break;
        case eOAIDataSourceType::CONFLUENCE:
            val = "CONFLUENCE";
            break;
        case eOAIDataSourceType::GOOGLEDRIVE:
            val = "GOOGLEDRIVE";
            break;
        case eOAIDataSourceType::WEBCRAWLER:
            val = "WEBCRAWLER";
            break;
        case eOAIDataSourceType::WORKDOCS:
            val = "WORKDOCS";
            break;
        case eOAIDataSourceType::FSX:
            val = "FSX";
            break;
        case eOAIDataSourceType::SLACK:
            val = "SLACK";
            break;
        case eOAIDataSourceType::BOX:
            val = "BOX";
            break;
        case eOAIDataSourceType::QUIP:
            val = "QUIP";
            break;
        case eOAIDataSourceType::JIRA:
            val = "JIRA";
            break;
        case eOAIDataSourceType::GITHUB:
            val = "GITHUB";
            break;
        case eOAIDataSourceType::ALFRESCO:
            val = "ALFRESCO";
            break;
        case eOAIDataSourceType::TEMPLATE:
            val = "TEMPLATE";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIDataSourceType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIDataSourceType::eOAIDataSourceType OAIDataSourceType::getValue() const {
    return m_value;
}

void OAIDataSourceType::setValue(const OAIDataSourceType::eOAIDataSourceType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIDataSourceType::isSet() const {
    
    return m_value_isSet;
}

bool OAIDataSourceType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
