/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGitHubConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGitHubConfiguration::OAIGitHubConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGitHubConfiguration::OAIGitHubConfiguration() {
    this->initializeModel();
}

OAIGitHubConfiguration::~OAIGitHubConfiguration() {}

void OAIGitHubConfiguration::initializeModel() {

    m_saa_s_configuration_isSet = false;
    m_saa_s_configuration_isValid = false;

    m_on_premise_configuration_isSet = false;
    m_on_premise_configuration_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_secret_arn_isSet = false;
    m_secret_arn_isValid = false;

    m_use_change_log_isSet = false;
    m_use_change_log_isValid = false;

    m_git_hub_document_crawl_properties_isSet = false;
    m_git_hub_document_crawl_properties_isValid = false;

    m_repository_filter_isSet = false;
    m_repository_filter_isValid = false;

    m_inclusion_folder_name_patterns_isSet = false;
    m_inclusion_folder_name_patterns_isValid = false;

    m_inclusion_file_type_patterns_isSet = false;
    m_inclusion_file_type_patterns_isValid = false;

    m_inclusion_file_name_patterns_isSet = false;
    m_inclusion_file_name_patterns_isValid = false;

    m_exclusion_folder_name_patterns_isSet = false;
    m_exclusion_folder_name_patterns_isValid = false;

    m_exclusion_file_type_patterns_isSet = false;
    m_exclusion_file_type_patterns_isValid = false;

    m_exclusion_file_name_patterns_isSet = false;
    m_exclusion_file_name_patterns_isValid = false;

    m_vpc_configuration_isSet = false;
    m_vpc_configuration_isValid = false;

    m_git_hub_repository_configuration_field_mappings_isSet = false;
    m_git_hub_repository_configuration_field_mappings_isValid = false;

    m_git_hub_commit_configuration_field_mappings_isSet = false;
    m_git_hub_commit_configuration_field_mappings_isValid = false;

    m_git_hub_issue_document_configuration_field_mappings_isSet = false;
    m_git_hub_issue_document_configuration_field_mappings_isValid = false;

    m_git_hub_issue_comment_configuration_field_mappings_isSet = false;
    m_git_hub_issue_comment_configuration_field_mappings_isValid = false;

    m_git_hub_issue_attachment_configuration_field_mappings_isSet = false;
    m_git_hub_issue_attachment_configuration_field_mappings_isValid = false;

    m_git_hub_pull_request_comment_configuration_field_mappings_isSet = false;
    m_git_hub_pull_request_comment_configuration_field_mappings_isValid = false;

    m_git_hub_pull_request_document_configuration_field_mappings_isSet = false;
    m_git_hub_pull_request_document_configuration_field_mappings_isValid = false;

    m_git_hub_pull_request_document_attachment_configuration_field_mappings_isSet = false;
    m_git_hub_pull_request_document_attachment_configuration_field_mappings_isValid = false;
}

void OAIGitHubConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGitHubConfiguration::fromJsonObject(QJsonObject json) {

    m_saa_s_configuration_isValid = ::OpenAPI::fromJsonValue(m_saa_s_configuration, json[QString("SaaSConfiguration")]);
    m_saa_s_configuration_isSet = !json[QString("SaaSConfiguration")].isNull() && m_saa_s_configuration_isValid;

    m_on_premise_configuration_isValid = ::OpenAPI::fromJsonValue(m_on_premise_configuration, json[QString("OnPremiseConfiguration")]);
    m_on_premise_configuration_isSet = !json[QString("OnPremiseConfiguration")].isNull() && m_on_premise_configuration_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_secret_arn_isValid = ::OpenAPI::fromJsonValue(m_secret_arn, json[QString("SecretArn")]);
    m_secret_arn_isSet = !json[QString("SecretArn")].isNull() && m_secret_arn_isValid;

    m_use_change_log_isValid = ::OpenAPI::fromJsonValue(m_use_change_log, json[QString("UseChangeLog")]);
    m_use_change_log_isSet = !json[QString("UseChangeLog")].isNull() && m_use_change_log_isValid;

    m_git_hub_document_crawl_properties_isValid = ::OpenAPI::fromJsonValue(m_git_hub_document_crawl_properties, json[QString("GitHubDocumentCrawlProperties")]);
    m_git_hub_document_crawl_properties_isSet = !json[QString("GitHubDocumentCrawlProperties")].isNull() && m_git_hub_document_crawl_properties_isValid;

    m_repository_filter_isValid = ::OpenAPI::fromJsonValue(m_repository_filter, json[QString("RepositoryFilter")]);
    m_repository_filter_isSet = !json[QString("RepositoryFilter")].isNull() && m_repository_filter_isValid;

    m_inclusion_folder_name_patterns_isValid = ::OpenAPI::fromJsonValue(m_inclusion_folder_name_patterns, json[QString("InclusionFolderNamePatterns")]);
    m_inclusion_folder_name_patterns_isSet = !json[QString("InclusionFolderNamePatterns")].isNull() && m_inclusion_folder_name_patterns_isValid;

    m_inclusion_file_type_patterns_isValid = ::OpenAPI::fromJsonValue(m_inclusion_file_type_patterns, json[QString("InclusionFileTypePatterns")]);
    m_inclusion_file_type_patterns_isSet = !json[QString("InclusionFileTypePatterns")].isNull() && m_inclusion_file_type_patterns_isValid;

    m_inclusion_file_name_patterns_isValid = ::OpenAPI::fromJsonValue(m_inclusion_file_name_patterns, json[QString("InclusionFileNamePatterns")]);
    m_inclusion_file_name_patterns_isSet = !json[QString("InclusionFileNamePatterns")].isNull() && m_inclusion_file_name_patterns_isValid;

    m_exclusion_folder_name_patterns_isValid = ::OpenAPI::fromJsonValue(m_exclusion_folder_name_patterns, json[QString("ExclusionFolderNamePatterns")]);
    m_exclusion_folder_name_patterns_isSet = !json[QString("ExclusionFolderNamePatterns")].isNull() && m_exclusion_folder_name_patterns_isValid;

    m_exclusion_file_type_patterns_isValid = ::OpenAPI::fromJsonValue(m_exclusion_file_type_patterns, json[QString("ExclusionFileTypePatterns")]);
    m_exclusion_file_type_patterns_isSet = !json[QString("ExclusionFileTypePatterns")].isNull() && m_exclusion_file_type_patterns_isValid;

    m_exclusion_file_name_patterns_isValid = ::OpenAPI::fromJsonValue(m_exclusion_file_name_patterns, json[QString("ExclusionFileNamePatterns")]);
    m_exclusion_file_name_patterns_isSet = !json[QString("ExclusionFileNamePatterns")].isNull() && m_exclusion_file_name_patterns_isValid;

    m_vpc_configuration_isValid = ::OpenAPI::fromJsonValue(m_vpc_configuration, json[QString("VpcConfiguration")]);
    m_vpc_configuration_isSet = !json[QString("VpcConfiguration")].isNull() && m_vpc_configuration_isValid;

    m_git_hub_repository_configuration_field_mappings_isValid = ::OpenAPI::fromJsonValue(m_git_hub_repository_configuration_field_mappings, json[QString("GitHubRepositoryConfigurationFieldMappings")]);
    m_git_hub_repository_configuration_field_mappings_isSet = !json[QString("GitHubRepositoryConfigurationFieldMappings")].isNull() && m_git_hub_repository_configuration_field_mappings_isValid;

    m_git_hub_commit_configuration_field_mappings_isValid = ::OpenAPI::fromJsonValue(m_git_hub_commit_configuration_field_mappings, json[QString("GitHubCommitConfigurationFieldMappings")]);
    m_git_hub_commit_configuration_field_mappings_isSet = !json[QString("GitHubCommitConfigurationFieldMappings")].isNull() && m_git_hub_commit_configuration_field_mappings_isValid;

    m_git_hub_issue_document_configuration_field_mappings_isValid = ::OpenAPI::fromJsonValue(m_git_hub_issue_document_configuration_field_mappings, json[QString("GitHubIssueDocumentConfigurationFieldMappings")]);
    m_git_hub_issue_document_configuration_field_mappings_isSet = !json[QString("GitHubIssueDocumentConfigurationFieldMappings")].isNull() && m_git_hub_issue_document_configuration_field_mappings_isValid;

    m_git_hub_issue_comment_configuration_field_mappings_isValid = ::OpenAPI::fromJsonValue(m_git_hub_issue_comment_configuration_field_mappings, json[QString("GitHubIssueCommentConfigurationFieldMappings")]);
    m_git_hub_issue_comment_configuration_field_mappings_isSet = !json[QString("GitHubIssueCommentConfigurationFieldMappings")].isNull() && m_git_hub_issue_comment_configuration_field_mappings_isValid;

    m_git_hub_issue_attachment_configuration_field_mappings_isValid = ::OpenAPI::fromJsonValue(m_git_hub_issue_attachment_configuration_field_mappings, json[QString("GitHubIssueAttachmentConfigurationFieldMappings")]);
    m_git_hub_issue_attachment_configuration_field_mappings_isSet = !json[QString("GitHubIssueAttachmentConfigurationFieldMappings")].isNull() && m_git_hub_issue_attachment_configuration_field_mappings_isValid;

    m_git_hub_pull_request_comment_configuration_field_mappings_isValid = ::OpenAPI::fromJsonValue(m_git_hub_pull_request_comment_configuration_field_mappings, json[QString("GitHubPullRequestCommentConfigurationFieldMappings")]);
    m_git_hub_pull_request_comment_configuration_field_mappings_isSet = !json[QString("GitHubPullRequestCommentConfigurationFieldMappings")].isNull() && m_git_hub_pull_request_comment_configuration_field_mappings_isValid;

    m_git_hub_pull_request_document_configuration_field_mappings_isValid = ::OpenAPI::fromJsonValue(m_git_hub_pull_request_document_configuration_field_mappings, json[QString("GitHubPullRequestDocumentConfigurationFieldMappings")]);
    m_git_hub_pull_request_document_configuration_field_mappings_isSet = !json[QString("GitHubPullRequestDocumentConfigurationFieldMappings")].isNull() && m_git_hub_pull_request_document_configuration_field_mappings_isValid;

    m_git_hub_pull_request_document_attachment_configuration_field_mappings_isValid = ::OpenAPI::fromJsonValue(m_git_hub_pull_request_document_attachment_configuration_field_mappings, json[QString("GitHubPullRequestDocumentAttachmentConfigurationFieldMappings")]);
    m_git_hub_pull_request_document_attachment_configuration_field_mappings_isSet = !json[QString("GitHubPullRequestDocumentAttachmentConfigurationFieldMappings")].isNull() && m_git_hub_pull_request_document_attachment_configuration_field_mappings_isValid;
}

QString OAIGitHubConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGitHubConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_saa_s_configuration.isSet()) {
        obj.insert(QString("SaaSConfiguration"), ::OpenAPI::toJsonValue(m_saa_s_configuration));
    }
    if (m_on_premise_configuration.isSet()) {
        obj.insert(QString("OnPremiseConfiguration"), ::OpenAPI::toJsonValue(m_on_premise_configuration));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_secret_arn_isSet) {
        obj.insert(QString("SecretArn"), ::OpenAPI::toJsonValue(m_secret_arn));
    }
    if (m_use_change_log_isSet) {
        obj.insert(QString("UseChangeLog"), ::OpenAPI::toJsonValue(m_use_change_log));
    }
    if (m_git_hub_document_crawl_properties.isSet()) {
        obj.insert(QString("GitHubDocumentCrawlProperties"), ::OpenAPI::toJsonValue(m_git_hub_document_crawl_properties));
    }
    if (m_repository_filter.isSet()) {
        obj.insert(QString("RepositoryFilter"), ::OpenAPI::toJsonValue(m_repository_filter));
    }
    if (m_inclusion_folder_name_patterns.isSet()) {
        obj.insert(QString("InclusionFolderNamePatterns"), ::OpenAPI::toJsonValue(m_inclusion_folder_name_patterns));
    }
    if (m_inclusion_file_type_patterns.isSet()) {
        obj.insert(QString("InclusionFileTypePatterns"), ::OpenAPI::toJsonValue(m_inclusion_file_type_patterns));
    }
    if (m_inclusion_file_name_patterns.isSet()) {
        obj.insert(QString("InclusionFileNamePatterns"), ::OpenAPI::toJsonValue(m_inclusion_file_name_patterns));
    }
    if (m_exclusion_folder_name_patterns.isSet()) {
        obj.insert(QString("ExclusionFolderNamePatterns"), ::OpenAPI::toJsonValue(m_exclusion_folder_name_patterns));
    }
    if (m_exclusion_file_type_patterns.isSet()) {
        obj.insert(QString("ExclusionFileTypePatterns"), ::OpenAPI::toJsonValue(m_exclusion_file_type_patterns));
    }
    if (m_exclusion_file_name_patterns.isSet()) {
        obj.insert(QString("ExclusionFileNamePatterns"), ::OpenAPI::toJsonValue(m_exclusion_file_name_patterns));
    }
    if (m_vpc_configuration.isSet()) {
        obj.insert(QString("VpcConfiguration"), ::OpenAPI::toJsonValue(m_vpc_configuration));
    }
    if (m_git_hub_repository_configuration_field_mappings.isSet()) {
        obj.insert(QString("GitHubRepositoryConfigurationFieldMappings"), ::OpenAPI::toJsonValue(m_git_hub_repository_configuration_field_mappings));
    }
    if (m_git_hub_commit_configuration_field_mappings.isSet()) {
        obj.insert(QString("GitHubCommitConfigurationFieldMappings"), ::OpenAPI::toJsonValue(m_git_hub_commit_configuration_field_mappings));
    }
    if (m_git_hub_issue_document_configuration_field_mappings.isSet()) {
        obj.insert(QString("GitHubIssueDocumentConfigurationFieldMappings"), ::OpenAPI::toJsonValue(m_git_hub_issue_document_configuration_field_mappings));
    }
    if (m_git_hub_issue_comment_configuration_field_mappings.isSet()) {
        obj.insert(QString("GitHubIssueCommentConfigurationFieldMappings"), ::OpenAPI::toJsonValue(m_git_hub_issue_comment_configuration_field_mappings));
    }
    if (m_git_hub_issue_attachment_configuration_field_mappings.isSet()) {
        obj.insert(QString("GitHubIssueAttachmentConfigurationFieldMappings"), ::OpenAPI::toJsonValue(m_git_hub_issue_attachment_configuration_field_mappings));
    }
    if (m_git_hub_pull_request_comment_configuration_field_mappings.isSet()) {
        obj.insert(QString("GitHubPullRequestCommentConfigurationFieldMappings"), ::OpenAPI::toJsonValue(m_git_hub_pull_request_comment_configuration_field_mappings));
    }
    if (m_git_hub_pull_request_document_configuration_field_mappings.isSet()) {
        obj.insert(QString("GitHubPullRequestDocumentConfigurationFieldMappings"), ::OpenAPI::toJsonValue(m_git_hub_pull_request_document_configuration_field_mappings));
    }
    if (m_git_hub_pull_request_document_attachment_configuration_field_mappings.isSet()) {
        obj.insert(QString("GitHubPullRequestDocumentAttachmentConfigurationFieldMappings"), ::OpenAPI::toJsonValue(m_git_hub_pull_request_document_attachment_configuration_field_mappings));
    }
    return obj;
}

OAIGitHubConfiguration_SaaSConfiguration OAIGitHubConfiguration::getSaaSConfiguration() const {
    return m_saa_s_configuration;
}
void OAIGitHubConfiguration::setSaaSConfiguration(const OAIGitHubConfiguration_SaaSConfiguration &saa_s_configuration) {
    m_saa_s_configuration = saa_s_configuration;
    m_saa_s_configuration_isSet = true;
}

bool OAIGitHubConfiguration::is_saa_s_configuration_Set() const{
    return m_saa_s_configuration_isSet;
}

bool OAIGitHubConfiguration::is_saa_s_configuration_Valid() const{
    return m_saa_s_configuration_isValid;
}

OAIGitHubConfiguration_OnPremiseConfiguration OAIGitHubConfiguration::getOnPremiseConfiguration() const {
    return m_on_premise_configuration;
}
void OAIGitHubConfiguration::setOnPremiseConfiguration(const OAIGitHubConfiguration_OnPremiseConfiguration &on_premise_configuration) {
    m_on_premise_configuration = on_premise_configuration;
    m_on_premise_configuration_isSet = true;
}

bool OAIGitHubConfiguration::is_on_premise_configuration_Set() const{
    return m_on_premise_configuration_isSet;
}

bool OAIGitHubConfiguration::is_on_premise_configuration_Valid() const{
    return m_on_premise_configuration_isValid;
}

OAIType OAIGitHubConfiguration::getType() const {
    return m_type;
}
void OAIGitHubConfiguration::setType(const OAIType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGitHubConfiguration::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGitHubConfiguration::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIGitHubConfiguration::getSecretArn() const {
    return m_secret_arn;
}
void OAIGitHubConfiguration::setSecretArn(const QString &secret_arn) {
    m_secret_arn = secret_arn;
    m_secret_arn_isSet = true;
}

bool OAIGitHubConfiguration::is_secret_arn_Set() const{
    return m_secret_arn_isSet;
}

bool OAIGitHubConfiguration::is_secret_arn_Valid() const{
    return m_secret_arn_isValid;
}

bool OAIGitHubConfiguration::getUseChangeLog() const {
    return m_use_change_log;
}
void OAIGitHubConfiguration::setUseChangeLog(const bool &use_change_log) {
    m_use_change_log = use_change_log;
    m_use_change_log_isSet = true;
}

bool OAIGitHubConfiguration::is_use_change_log_Set() const{
    return m_use_change_log_isSet;
}

bool OAIGitHubConfiguration::is_use_change_log_Valid() const{
    return m_use_change_log_isValid;
}

OAIGitHubConfiguration_GitHubDocumentCrawlProperties OAIGitHubConfiguration::getGitHubDocumentCrawlProperties() const {
    return m_git_hub_document_crawl_properties;
}
void OAIGitHubConfiguration::setGitHubDocumentCrawlProperties(const OAIGitHubConfiguration_GitHubDocumentCrawlProperties &git_hub_document_crawl_properties) {
    m_git_hub_document_crawl_properties = git_hub_document_crawl_properties;
    m_git_hub_document_crawl_properties_isSet = true;
}

bool OAIGitHubConfiguration::is_git_hub_document_crawl_properties_Set() const{
    return m_git_hub_document_crawl_properties_isSet;
}

bool OAIGitHubConfiguration::is_git_hub_document_crawl_properties_Valid() const{
    return m_git_hub_document_crawl_properties_isValid;
}

QList OAIGitHubConfiguration::getRepositoryFilter() const {
    return m_repository_filter;
}
void OAIGitHubConfiguration::setRepositoryFilter(const QList &repository_filter) {
    m_repository_filter = repository_filter;
    m_repository_filter_isSet = true;
}

bool OAIGitHubConfiguration::is_repository_filter_Set() const{
    return m_repository_filter_isSet;
}

bool OAIGitHubConfiguration::is_repository_filter_Valid() const{
    return m_repository_filter_isValid;
}

QList OAIGitHubConfiguration::getInclusionFolderNamePatterns() const {
    return m_inclusion_folder_name_patterns;
}
void OAIGitHubConfiguration::setInclusionFolderNamePatterns(const QList &inclusion_folder_name_patterns) {
    m_inclusion_folder_name_patterns = inclusion_folder_name_patterns;
    m_inclusion_folder_name_patterns_isSet = true;
}

bool OAIGitHubConfiguration::is_inclusion_folder_name_patterns_Set() const{
    return m_inclusion_folder_name_patterns_isSet;
}

bool OAIGitHubConfiguration::is_inclusion_folder_name_patterns_Valid() const{
    return m_inclusion_folder_name_patterns_isValid;
}

QList OAIGitHubConfiguration::getInclusionFileTypePatterns() const {
    return m_inclusion_file_type_patterns;
}
void OAIGitHubConfiguration::setInclusionFileTypePatterns(const QList &inclusion_file_type_patterns) {
    m_inclusion_file_type_patterns = inclusion_file_type_patterns;
    m_inclusion_file_type_patterns_isSet = true;
}

bool OAIGitHubConfiguration::is_inclusion_file_type_patterns_Set() const{
    return m_inclusion_file_type_patterns_isSet;
}

bool OAIGitHubConfiguration::is_inclusion_file_type_patterns_Valid() const{
    return m_inclusion_file_type_patterns_isValid;
}

QList OAIGitHubConfiguration::getInclusionFileNamePatterns() const {
    return m_inclusion_file_name_patterns;
}
void OAIGitHubConfiguration::setInclusionFileNamePatterns(const QList &inclusion_file_name_patterns) {
    m_inclusion_file_name_patterns = inclusion_file_name_patterns;
    m_inclusion_file_name_patterns_isSet = true;
}

bool OAIGitHubConfiguration::is_inclusion_file_name_patterns_Set() const{
    return m_inclusion_file_name_patterns_isSet;
}

bool OAIGitHubConfiguration::is_inclusion_file_name_patterns_Valid() const{
    return m_inclusion_file_name_patterns_isValid;
}

QList OAIGitHubConfiguration::getExclusionFolderNamePatterns() const {
    return m_exclusion_folder_name_patterns;
}
void OAIGitHubConfiguration::setExclusionFolderNamePatterns(const QList &exclusion_folder_name_patterns) {
    m_exclusion_folder_name_patterns = exclusion_folder_name_patterns;
    m_exclusion_folder_name_patterns_isSet = true;
}

bool OAIGitHubConfiguration::is_exclusion_folder_name_patterns_Set() const{
    return m_exclusion_folder_name_patterns_isSet;
}

bool OAIGitHubConfiguration::is_exclusion_folder_name_patterns_Valid() const{
    return m_exclusion_folder_name_patterns_isValid;
}

QList OAIGitHubConfiguration::getExclusionFileTypePatterns() const {
    return m_exclusion_file_type_patterns;
}
void OAIGitHubConfiguration::setExclusionFileTypePatterns(const QList &exclusion_file_type_patterns) {
    m_exclusion_file_type_patterns = exclusion_file_type_patterns;
    m_exclusion_file_type_patterns_isSet = true;
}

bool OAIGitHubConfiguration::is_exclusion_file_type_patterns_Set() const{
    return m_exclusion_file_type_patterns_isSet;
}

bool OAIGitHubConfiguration::is_exclusion_file_type_patterns_Valid() const{
    return m_exclusion_file_type_patterns_isValid;
}

QList OAIGitHubConfiguration::getExclusionFileNamePatterns() const {
    return m_exclusion_file_name_patterns;
}
void OAIGitHubConfiguration::setExclusionFileNamePatterns(const QList &exclusion_file_name_patterns) {
    m_exclusion_file_name_patterns = exclusion_file_name_patterns;
    m_exclusion_file_name_patterns_isSet = true;
}

bool OAIGitHubConfiguration::is_exclusion_file_name_patterns_Set() const{
    return m_exclusion_file_name_patterns_isSet;
}

bool OAIGitHubConfiguration::is_exclusion_file_name_patterns_Valid() const{
    return m_exclusion_file_name_patterns_isValid;
}

OAIGitHubConfiguration_VpcConfiguration OAIGitHubConfiguration::getVpcConfiguration() const {
    return m_vpc_configuration;
}
void OAIGitHubConfiguration::setVpcConfiguration(const OAIGitHubConfiguration_VpcConfiguration &vpc_configuration) {
    m_vpc_configuration = vpc_configuration;
    m_vpc_configuration_isSet = true;
}

bool OAIGitHubConfiguration::is_vpc_configuration_Set() const{
    return m_vpc_configuration_isSet;
}

bool OAIGitHubConfiguration::is_vpc_configuration_Valid() const{
    return m_vpc_configuration_isValid;
}

QList OAIGitHubConfiguration::getGitHubRepositoryConfigurationFieldMappings() const {
    return m_git_hub_repository_configuration_field_mappings;
}
void OAIGitHubConfiguration::setGitHubRepositoryConfigurationFieldMappings(const QList &git_hub_repository_configuration_field_mappings) {
    m_git_hub_repository_configuration_field_mappings = git_hub_repository_configuration_field_mappings;
    m_git_hub_repository_configuration_field_mappings_isSet = true;
}

bool OAIGitHubConfiguration::is_git_hub_repository_configuration_field_mappings_Set() const{
    return m_git_hub_repository_configuration_field_mappings_isSet;
}

bool OAIGitHubConfiguration::is_git_hub_repository_configuration_field_mappings_Valid() const{
    return m_git_hub_repository_configuration_field_mappings_isValid;
}

QList OAIGitHubConfiguration::getGitHubCommitConfigurationFieldMappings() const {
    return m_git_hub_commit_configuration_field_mappings;
}
void OAIGitHubConfiguration::setGitHubCommitConfigurationFieldMappings(const QList &git_hub_commit_configuration_field_mappings) {
    m_git_hub_commit_configuration_field_mappings = git_hub_commit_configuration_field_mappings;
    m_git_hub_commit_configuration_field_mappings_isSet = true;
}

bool OAIGitHubConfiguration::is_git_hub_commit_configuration_field_mappings_Set() const{
    return m_git_hub_commit_configuration_field_mappings_isSet;
}

bool OAIGitHubConfiguration::is_git_hub_commit_configuration_field_mappings_Valid() const{
    return m_git_hub_commit_configuration_field_mappings_isValid;
}

QList OAIGitHubConfiguration::getGitHubIssueDocumentConfigurationFieldMappings() const {
    return m_git_hub_issue_document_configuration_field_mappings;
}
void OAIGitHubConfiguration::setGitHubIssueDocumentConfigurationFieldMappings(const QList &git_hub_issue_document_configuration_field_mappings) {
    m_git_hub_issue_document_configuration_field_mappings = git_hub_issue_document_configuration_field_mappings;
    m_git_hub_issue_document_configuration_field_mappings_isSet = true;
}

bool OAIGitHubConfiguration::is_git_hub_issue_document_configuration_field_mappings_Set() const{
    return m_git_hub_issue_document_configuration_field_mappings_isSet;
}

bool OAIGitHubConfiguration::is_git_hub_issue_document_configuration_field_mappings_Valid() const{
    return m_git_hub_issue_document_configuration_field_mappings_isValid;
}

QList OAIGitHubConfiguration::getGitHubIssueCommentConfigurationFieldMappings() const {
    return m_git_hub_issue_comment_configuration_field_mappings;
}
void OAIGitHubConfiguration::setGitHubIssueCommentConfigurationFieldMappings(const QList &git_hub_issue_comment_configuration_field_mappings) {
    m_git_hub_issue_comment_configuration_field_mappings = git_hub_issue_comment_configuration_field_mappings;
    m_git_hub_issue_comment_configuration_field_mappings_isSet = true;
}

bool OAIGitHubConfiguration::is_git_hub_issue_comment_configuration_field_mappings_Set() const{
    return m_git_hub_issue_comment_configuration_field_mappings_isSet;
}

bool OAIGitHubConfiguration::is_git_hub_issue_comment_configuration_field_mappings_Valid() const{
    return m_git_hub_issue_comment_configuration_field_mappings_isValid;
}

QList OAIGitHubConfiguration::getGitHubIssueAttachmentConfigurationFieldMappings() const {
    return m_git_hub_issue_attachment_configuration_field_mappings;
}
void OAIGitHubConfiguration::setGitHubIssueAttachmentConfigurationFieldMappings(const QList &git_hub_issue_attachment_configuration_field_mappings) {
    m_git_hub_issue_attachment_configuration_field_mappings = git_hub_issue_attachment_configuration_field_mappings;
    m_git_hub_issue_attachment_configuration_field_mappings_isSet = true;
}

bool OAIGitHubConfiguration::is_git_hub_issue_attachment_configuration_field_mappings_Set() const{
    return m_git_hub_issue_attachment_configuration_field_mappings_isSet;
}

bool OAIGitHubConfiguration::is_git_hub_issue_attachment_configuration_field_mappings_Valid() const{
    return m_git_hub_issue_attachment_configuration_field_mappings_isValid;
}

QList OAIGitHubConfiguration::getGitHubPullRequestCommentConfigurationFieldMappings() const {
    return m_git_hub_pull_request_comment_configuration_field_mappings;
}
void OAIGitHubConfiguration::setGitHubPullRequestCommentConfigurationFieldMappings(const QList &git_hub_pull_request_comment_configuration_field_mappings) {
    m_git_hub_pull_request_comment_configuration_field_mappings = git_hub_pull_request_comment_configuration_field_mappings;
    m_git_hub_pull_request_comment_configuration_field_mappings_isSet = true;
}

bool OAIGitHubConfiguration::is_git_hub_pull_request_comment_configuration_field_mappings_Set() const{
    return m_git_hub_pull_request_comment_configuration_field_mappings_isSet;
}

bool OAIGitHubConfiguration::is_git_hub_pull_request_comment_configuration_field_mappings_Valid() const{
    return m_git_hub_pull_request_comment_configuration_field_mappings_isValid;
}

QList OAIGitHubConfiguration::getGitHubPullRequestDocumentConfigurationFieldMappings() const {
    return m_git_hub_pull_request_document_configuration_field_mappings;
}
void OAIGitHubConfiguration::setGitHubPullRequestDocumentConfigurationFieldMappings(const QList &git_hub_pull_request_document_configuration_field_mappings) {
    m_git_hub_pull_request_document_configuration_field_mappings = git_hub_pull_request_document_configuration_field_mappings;
    m_git_hub_pull_request_document_configuration_field_mappings_isSet = true;
}

bool OAIGitHubConfiguration::is_git_hub_pull_request_document_configuration_field_mappings_Set() const{
    return m_git_hub_pull_request_document_configuration_field_mappings_isSet;
}

bool OAIGitHubConfiguration::is_git_hub_pull_request_document_configuration_field_mappings_Valid() const{
    return m_git_hub_pull_request_document_configuration_field_mappings_isValid;
}

QList OAIGitHubConfiguration::getGitHubPullRequestDocumentAttachmentConfigurationFieldMappings() const {
    return m_git_hub_pull_request_document_attachment_configuration_field_mappings;
}
void OAIGitHubConfiguration::setGitHubPullRequestDocumentAttachmentConfigurationFieldMappings(const QList &git_hub_pull_request_document_attachment_configuration_field_mappings) {
    m_git_hub_pull_request_document_attachment_configuration_field_mappings = git_hub_pull_request_document_attachment_configuration_field_mappings;
    m_git_hub_pull_request_document_attachment_configuration_field_mappings_isSet = true;
}

bool OAIGitHubConfiguration::is_git_hub_pull_request_document_attachment_configuration_field_mappings_Set() const{
    return m_git_hub_pull_request_document_attachment_configuration_field_mappings_isSet;
}

bool OAIGitHubConfiguration::is_git_hub_pull_request_document_attachment_configuration_field_mappings_Valid() const{
    return m_git_hub_pull_request_document_attachment_configuration_field_mappings_isValid;
}

bool OAIGitHubConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_saa_s_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_premise_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_change_log_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_git_hub_document_crawl_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inclusion_folder_name_patterns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inclusion_file_type_patterns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inclusion_file_name_patterns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclusion_folder_name_patterns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclusion_file_type_patterns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclusion_file_name_patterns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_git_hub_repository_configuration_field_mappings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_git_hub_commit_configuration_field_mappings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_git_hub_issue_document_configuration_field_mappings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_git_hub_issue_comment_configuration_field_mappings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_git_hub_issue_attachment_configuration_field_mappings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_git_hub_pull_request_comment_configuration_field_mappings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_git_hub_pull_request_document_configuration_field_mappings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_git_hub_pull_request_document_attachment_configuration_field_mappings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGitHubConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_secret_arn_isValid && true;
}

} // namespace OpenAPI
