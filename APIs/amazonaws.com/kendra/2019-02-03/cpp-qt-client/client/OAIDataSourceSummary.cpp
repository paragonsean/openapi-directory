/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataSourceSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataSourceSummary::OAIDataSourceSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataSourceSummary::OAIDataSourceSummary() {
    this->initializeModel();
}

OAIDataSourceSummary::~OAIDataSourceSummary() {}

void OAIDataSourceSummary::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_language_code_isSet = false;
    m_language_code_isValid = false;
}

void OAIDataSourceSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataSourceSummary::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("CreatedAt")]);
    m_created_at_isSet = !json[QString("CreatedAt")].isNull() && m_created_at_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("UpdatedAt")]);
    m_updated_at_isSet = !json[QString("UpdatedAt")].isNull() && m_updated_at_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("LanguageCode")]);
    m_language_code_isSet = !json[QString("LanguageCode")].isNull() && m_language_code_isValid;
}

QString OAIDataSourceSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataSourceSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("CreatedAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("UpdatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_language_code_isSet) {
        obj.insert(QString("LanguageCode"), ::OpenAPI::toJsonValue(m_language_code));
    }
    return obj;
}

QString OAIDataSourceSummary::getName() const {
    return m_name;
}
void OAIDataSourceSummary::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDataSourceSummary::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDataSourceSummary::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDataSourceSummary::getId() const {
    return m_id;
}
void OAIDataSourceSummary::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDataSourceSummary::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDataSourceSummary::is_id_Valid() const{
    return m_id_isValid;
}

OAIDataSourceType OAIDataSourceSummary::getType() const {
    return m_type;
}
void OAIDataSourceSummary::setType(const OAIDataSourceType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDataSourceSummary::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDataSourceSummary::is_type_Valid() const{
    return m_type_isValid;
}

QDateTime OAIDataSourceSummary::getCreatedAt() const {
    return m_created_at;
}
void OAIDataSourceSummary::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIDataSourceSummary::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIDataSourceSummary::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAIDataSourceSummary::getUpdatedAt() const {
    return m_updated_at;
}
void OAIDataSourceSummary::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIDataSourceSummary::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIDataSourceSummary::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

OAIDataSourceStatus OAIDataSourceSummary::getStatus() const {
    return m_status;
}
void OAIDataSourceSummary::setStatus(const OAIDataSourceStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDataSourceSummary::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDataSourceSummary::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDataSourceSummary::getLanguageCode() const {
    return m_language_code;
}
void OAIDataSourceSummary::setLanguageCode(const QString &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAIDataSourceSummary::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAIDataSourceSummary::is_language_code_Valid() const{
    return m_language_code_isValid;
}

bool OAIDataSourceSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataSourceSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
