/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRetrieveResultItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRetrieveResultItem::OAIRetrieveResultItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRetrieveResultItem::OAIRetrieveResultItem() {
    this->initializeModel();
}

OAIRetrieveResultItem::~OAIRetrieveResultItem() {}

void OAIRetrieveResultItem::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_document_id_isSet = false;
    m_document_id_isValid = false;

    m_document_title_isSet = false;
    m_document_title_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_document_uri_isSet = false;
    m_document_uri_isValid = false;

    m_document_attributes_isSet = false;
    m_document_attributes_isValid = false;
}

void OAIRetrieveResultItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRetrieveResultItem::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_document_id_isValid = ::OpenAPI::fromJsonValue(m_document_id, json[QString("DocumentId")]);
    m_document_id_isSet = !json[QString("DocumentId")].isNull() && m_document_id_isValid;

    m_document_title_isValid = ::OpenAPI::fromJsonValue(m_document_title, json[QString("DocumentTitle")]);
    m_document_title_isSet = !json[QString("DocumentTitle")].isNull() && m_document_title_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("Content")]);
    m_content_isSet = !json[QString("Content")].isNull() && m_content_isValid;

    m_document_uri_isValid = ::OpenAPI::fromJsonValue(m_document_uri, json[QString("DocumentURI")]);
    m_document_uri_isSet = !json[QString("DocumentURI")].isNull() && m_document_uri_isValid;

    m_document_attributes_isValid = ::OpenAPI::fromJsonValue(m_document_attributes, json[QString("DocumentAttributes")]);
    m_document_attributes_isSet = !json[QString("DocumentAttributes")].isNull() && m_document_attributes_isValid;
}

QString OAIRetrieveResultItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRetrieveResultItem::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_document_id_isSet) {
        obj.insert(QString("DocumentId"), ::OpenAPI::toJsonValue(m_document_id));
    }
    if (m_document_title_isSet) {
        obj.insert(QString("DocumentTitle"), ::OpenAPI::toJsonValue(m_document_title));
    }
    if (m_content_isSet) {
        obj.insert(QString("Content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_document_uri_isSet) {
        obj.insert(QString("DocumentURI"), ::OpenAPI::toJsonValue(m_document_uri));
    }
    if (m_document_attributes.isSet()) {
        obj.insert(QString("DocumentAttributes"), ::OpenAPI::toJsonValue(m_document_attributes));
    }
    return obj;
}

QString OAIRetrieveResultItem::getId() const {
    return m_id;
}
void OAIRetrieveResultItem::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRetrieveResultItem::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRetrieveResultItem::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIRetrieveResultItem::getDocumentId() const {
    return m_document_id;
}
void OAIRetrieveResultItem::setDocumentId(const QString &document_id) {
    m_document_id = document_id;
    m_document_id_isSet = true;
}

bool OAIRetrieveResultItem::is_document_id_Set() const{
    return m_document_id_isSet;
}

bool OAIRetrieveResultItem::is_document_id_Valid() const{
    return m_document_id_isValid;
}

QString OAIRetrieveResultItem::getDocumentTitle() const {
    return m_document_title;
}
void OAIRetrieveResultItem::setDocumentTitle(const QString &document_title) {
    m_document_title = document_title;
    m_document_title_isSet = true;
}

bool OAIRetrieveResultItem::is_document_title_Set() const{
    return m_document_title_isSet;
}

bool OAIRetrieveResultItem::is_document_title_Valid() const{
    return m_document_title_isValid;
}

QString OAIRetrieveResultItem::getContent() const {
    return m_content;
}
void OAIRetrieveResultItem::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIRetrieveResultItem::is_content_Set() const{
    return m_content_isSet;
}

bool OAIRetrieveResultItem::is_content_Valid() const{
    return m_content_isValid;
}

QString OAIRetrieveResultItem::getDocumentUri() const {
    return m_document_uri;
}
void OAIRetrieveResultItem::setDocumentUri(const QString &document_uri) {
    m_document_uri = document_uri;
    m_document_uri_isSet = true;
}

bool OAIRetrieveResultItem::is_document_uri_Set() const{
    return m_document_uri_isSet;
}

bool OAIRetrieveResultItem::is_document_uri_Valid() const{
    return m_document_uri_isValid;
}

QList OAIRetrieveResultItem::getDocumentAttributes() const {
    return m_document_attributes;
}
void OAIRetrieveResultItem::setDocumentAttributes(const QList &document_attributes) {
    m_document_attributes = document_attributes;
    m_document_attributes_isSet = true;
}

bool OAIRetrieveResultItem::is_document_attributes_Set() const{
    return m_document_attributes_isSet;
}

bool OAIRetrieveResultItem::is_document_attributes_Valid() const{
    return m_document_attributes_isValid;
}

bool OAIRetrieveResultItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRetrieveResultItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
