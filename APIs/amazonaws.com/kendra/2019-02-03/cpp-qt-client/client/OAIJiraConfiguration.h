/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIJiraConfiguration.h
 *
 * Provides the configuration information to connect to Jira as your data source.
 */

#ifndef OAIJiraConfiguration_H
#define OAIJiraConfiguration_H

#include <QJsonObject>

#include "OAIJiraConfiguration_VpcConfiguration.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIJiraConfiguration_VpcConfiguration;

class OAIJiraConfiguration : public OAIObject {
public:
    OAIJiraConfiguration();
    OAIJiraConfiguration(QString json);
    ~OAIJiraConfiguration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getJiraAccountUrl() const;
    void setJiraAccountUrl(const QString &jira_account_url);
    bool is_jira_account_url_Set() const;
    bool is_jira_account_url_Valid() const;

    QString getSecretArn() const;
    void setSecretArn(const QString &secret_arn);
    bool is_secret_arn_Set() const;
    bool is_secret_arn_Valid() const;

    bool getUseChangeLog() const;
    void setUseChangeLog(const bool &use_change_log);
    bool is_use_change_log_Set() const;
    bool is_use_change_log_Valid() const;

    QList getProject() const;
    void setProject(const QList &project);
    bool is_project_Set() const;
    bool is_project_Valid() const;

    QList getIssueType() const;
    void setIssueType(const QList &issue_type);
    bool is_issue_type_Set() const;
    bool is_issue_type_Valid() const;

    QList getStatus() const;
    void setStatus(const QList &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QList getIssueSubEntityFilter() const;
    void setIssueSubEntityFilter(const QList &issue_sub_entity_filter);
    bool is_issue_sub_entity_filter_Set() const;
    bool is_issue_sub_entity_filter_Valid() const;

    QList getAttachmentFieldMappings() const;
    void setAttachmentFieldMappings(const QList &attachment_field_mappings);
    bool is_attachment_field_mappings_Set() const;
    bool is_attachment_field_mappings_Valid() const;

    QList getCommentFieldMappings() const;
    void setCommentFieldMappings(const QList &comment_field_mappings);
    bool is_comment_field_mappings_Set() const;
    bool is_comment_field_mappings_Valid() const;

    QList getIssueFieldMappings() const;
    void setIssueFieldMappings(const QList &issue_field_mappings);
    bool is_issue_field_mappings_Set() const;
    bool is_issue_field_mappings_Valid() const;

    QList getProjectFieldMappings() const;
    void setProjectFieldMappings(const QList &project_field_mappings);
    bool is_project_field_mappings_Set() const;
    bool is_project_field_mappings_Valid() const;

    QList getWorkLogFieldMappings() const;
    void setWorkLogFieldMappings(const QList &work_log_field_mappings);
    bool is_work_log_field_mappings_Set() const;
    bool is_work_log_field_mappings_Valid() const;

    QList getInclusionPatterns() const;
    void setInclusionPatterns(const QList &inclusion_patterns);
    bool is_inclusion_patterns_Set() const;
    bool is_inclusion_patterns_Valid() const;

    QList getExclusionPatterns() const;
    void setExclusionPatterns(const QList &exclusion_patterns);
    bool is_exclusion_patterns_Set() const;
    bool is_exclusion_patterns_Valid() const;

    OAIJiraConfiguration_VpcConfiguration getVpcConfiguration() const;
    void setVpcConfiguration(const OAIJiraConfiguration_VpcConfiguration &vpc_configuration);
    bool is_vpc_configuration_Set() const;
    bool is_vpc_configuration_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_jira_account_url;
    bool m_jira_account_url_isSet;
    bool m_jira_account_url_isValid;

    QString m_secret_arn;
    bool m_secret_arn_isSet;
    bool m_secret_arn_isValid;

    bool m_use_change_log;
    bool m_use_change_log_isSet;
    bool m_use_change_log_isValid;

    QList m_project;
    bool m_project_isSet;
    bool m_project_isValid;

    QList m_issue_type;
    bool m_issue_type_isSet;
    bool m_issue_type_isValid;

    QList m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QList m_issue_sub_entity_filter;
    bool m_issue_sub_entity_filter_isSet;
    bool m_issue_sub_entity_filter_isValid;

    QList m_attachment_field_mappings;
    bool m_attachment_field_mappings_isSet;
    bool m_attachment_field_mappings_isValid;

    QList m_comment_field_mappings;
    bool m_comment_field_mappings_isSet;
    bool m_comment_field_mappings_isValid;

    QList m_issue_field_mappings;
    bool m_issue_field_mappings_isSet;
    bool m_issue_field_mappings_isValid;

    QList m_project_field_mappings;
    bool m_project_field_mappings_isSet;
    bool m_project_field_mappings_isValid;

    QList m_work_log_field_mappings;
    bool m_work_log_field_mappings_isSet;
    bool m_work_log_field_mappings_isValid;

    QList m_inclusion_patterns;
    bool m_inclusion_patterns_isSet;
    bool m_inclusion_patterns_isValid;

    QList m_exclusion_patterns;
    bool m_exclusion_patterns_isSet;
    bool m_exclusion_patterns_isValid;

    OAIJiraConfiguration_VpcConfiguration m_vpc_configuration;
    bool m_vpc_configuration_isSet;
    bool m_vpc_configuration_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIJiraConfiguration)

#endif // OAIJiraConfiguration_H
