/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPrincipal.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPrincipal::OAIPrincipal(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPrincipal::OAIPrincipal() {
    this->initializeModel();
}

OAIPrincipal::~OAIPrincipal() {}

void OAIPrincipal::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_access_isSet = false;
    m_access_isValid = false;

    m_data_source_id_isSet = false;
    m_data_source_id_isValid = false;
}

void OAIPrincipal::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPrincipal::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_access_isValid = ::OpenAPI::fromJsonValue(m_access, json[QString("Access")]);
    m_access_isSet = !json[QString("Access")].isNull() && m_access_isValid;

    m_data_source_id_isValid = ::OpenAPI::fromJsonValue(m_data_source_id, json[QString("DataSourceId")]);
    m_data_source_id_isSet = !json[QString("DataSourceId")].isNull() && m_data_source_id_isValid;
}

QString OAIPrincipal::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPrincipal::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_access.isSet()) {
        obj.insert(QString("Access"), ::OpenAPI::toJsonValue(m_access));
    }
    if (m_data_source_id_isSet) {
        obj.insert(QString("DataSourceId"), ::OpenAPI::toJsonValue(m_data_source_id));
    }
    return obj;
}

QString OAIPrincipal::getName() const {
    return m_name;
}
void OAIPrincipal::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPrincipal::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPrincipal::is_name_Valid() const{
    return m_name_isValid;
}

OAIPrincipalType OAIPrincipal::getType() const {
    return m_type;
}
void OAIPrincipal::setType(const OAIPrincipalType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPrincipal::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPrincipal::is_type_Valid() const{
    return m_type_isValid;
}

OAIReadAccessType OAIPrincipal::getAccess() const {
    return m_access;
}
void OAIPrincipal::setAccess(const OAIReadAccessType &access) {
    m_access = access;
    m_access_isSet = true;
}

bool OAIPrincipal::is_access_Set() const{
    return m_access_isSet;
}

bool OAIPrincipal::is_access_Valid() const{
    return m_access_isValid;
}

QString OAIPrincipal::getDataSourceId() const {
    return m_data_source_id;
}
void OAIPrincipal::setDataSourceId(const QString &data_source_id) {
    m_data_source_id = data_source_id;
    m_data_source_id_isSet = true;
}

bool OAIPrincipal::is_data_source_id_Set() const{
    return m_data_source_id_isSet;
}

bool OAIPrincipal::is_data_source_id_Valid() const{
    return m_data_source_id_isValid;
}

bool OAIPrincipal::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_access.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPrincipal::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_type_isValid && m_access_isValid && true;
}

} // namespace OpenAPI
