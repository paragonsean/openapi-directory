/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProxyConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProxyConfiguration::OAIProxyConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProxyConfiguration::OAIProxyConfiguration() {
    this->initializeModel();
}

OAIProxyConfiguration::~OAIProxyConfiguration() {}

void OAIProxyConfiguration::initializeModel() {

    m_host_isSet = false;
    m_host_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_credentials_isSet = false;
    m_credentials_isValid = false;
}

void OAIProxyConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProxyConfiguration::fromJsonObject(QJsonObject json) {

    m_host_isValid = ::OpenAPI::fromJsonValue(m_host, json[QString("Host")]);
    m_host_isSet = !json[QString("Host")].isNull() && m_host_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("Port")]);
    m_port_isSet = !json[QString("Port")].isNull() && m_port_isValid;

    m_credentials_isValid = ::OpenAPI::fromJsonValue(m_credentials, json[QString("Credentials")]);
    m_credentials_isSet = !json[QString("Credentials")].isNull() && m_credentials_isValid;
}

QString OAIProxyConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProxyConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_host_isSet) {
        obj.insert(QString("Host"), ::OpenAPI::toJsonValue(m_host));
    }
    if (m_port_isSet) {
        obj.insert(QString("Port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_credentials_isSet) {
        obj.insert(QString("Credentials"), ::OpenAPI::toJsonValue(m_credentials));
    }
    return obj;
}

QString OAIProxyConfiguration::getHost() const {
    return m_host;
}
void OAIProxyConfiguration::setHost(const QString &host) {
    m_host = host;
    m_host_isSet = true;
}

bool OAIProxyConfiguration::is_host_Set() const{
    return m_host_isSet;
}

bool OAIProxyConfiguration::is_host_Valid() const{
    return m_host_isValid;
}

qint32 OAIProxyConfiguration::getPort() const {
    return m_port;
}
void OAIProxyConfiguration::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIProxyConfiguration::is_port_Set() const{
    return m_port_isSet;
}

bool OAIProxyConfiguration::is_port_Valid() const{
    return m_port_isValid;
}

QString OAIProxyConfiguration::getCredentials() const {
    return m_credentials;
}
void OAIProxyConfiguration::setCredentials(const QString &credentials) {
    m_credentials = credentials;
    m_credentials_isSet = true;
}

bool OAIProxyConfiguration::is_credentials_Set() const{
    return m_credentials_isSet;
}

bool OAIProxyConfiguration::is_credentials_Valid() const{
    return m_credentials_isValid;
}

bool OAIProxyConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credentials_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProxyConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_host_isValid && m_port_isValid && true;
}

} // namespace OpenAPI
