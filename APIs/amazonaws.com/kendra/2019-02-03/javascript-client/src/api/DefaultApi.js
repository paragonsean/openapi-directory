/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AssociateEntitiesToExperienceRequest from '../model/AssociateEntitiesToExperienceRequest';
import AssociateEntitiesToExperienceResponse from '../model/AssociateEntitiesToExperienceResponse';
import AssociatePersonasToEntitiesRequest from '../model/AssociatePersonasToEntitiesRequest';
import AssociatePersonasToEntitiesResponse from '../model/AssociatePersonasToEntitiesResponse';
import BatchDeleteDocumentRequest from '../model/BatchDeleteDocumentRequest';
import BatchDeleteDocumentResponse from '../model/BatchDeleteDocumentResponse';
import BatchDeleteFeaturedResultsSetRequest from '../model/BatchDeleteFeaturedResultsSetRequest';
import BatchDeleteFeaturedResultsSetResponse from '../model/BatchDeleteFeaturedResultsSetResponse';
import BatchGetDocumentStatusRequest from '../model/BatchGetDocumentStatusRequest';
import BatchGetDocumentStatusResponse from '../model/BatchGetDocumentStatusResponse';
import BatchPutDocumentRequest from '../model/BatchPutDocumentRequest';
import BatchPutDocumentResponse from '../model/BatchPutDocumentResponse';
import ClearQuerySuggestionsRequest from '../model/ClearQuerySuggestionsRequest';
import CreateAccessControlConfigurationRequest from '../model/CreateAccessControlConfigurationRequest';
import CreateAccessControlConfigurationResponse from '../model/CreateAccessControlConfigurationResponse';
import CreateDataSourceRequest from '../model/CreateDataSourceRequest';
import CreateDataSourceResponse from '../model/CreateDataSourceResponse';
import CreateExperienceRequest from '../model/CreateExperienceRequest';
import CreateExperienceResponse from '../model/CreateExperienceResponse';
import CreateFaqRequest from '../model/CreateFaqRequest';
import CreateFaqResponse from '../model/CreateFaqResponse';
import CreateFeaturedResultsSetRequest from '../model/CreateFeaturedResultsSetRequest';
import CreateFeaturedResultsSetResponse from '../model/CreateFeaturedResultsSetResponse';
import CreateIndexRequest from '../model/CreateIndexRequest';
import CreateIndexResponse from '../model/CreateIndexResponse';
import CreateQuerySuggestionsBlockListRequest from '../model/CreateQuerySuggestionsBlockListRequest';
import CreateQuerySuggestionsBlockListResponse from '../model/CreateQuerySuggestionsBlockListResponse';
import CreateThesaurusRequest from '../model/CreateThesaurusRequest';
import CreateThesaurusResponse from '../model/CreateThesaurusResponse';
import DeleteAccessControlConfigurationRequest from '../model/DeleteAccessControlConfigurationRequest';
import DeleteDataSourceRequest from '../model/DeleteDataSourceRequest';
import DeleteExperienceRequest from '../model/DeleteExperienceRequest';
import DeleteFaqRequest from '../model/DeleteFaqRequest';
import DeleteIndexRequest from '../model/DeleteIndexRequest';
import DeletePrincipalMappingRequest from '../model/DeletePrincipalMappingRequest';
import DeleteQuerySuggestionsBlockListRequest from '../model/DeleteQuerySuggestionsBlockListRequest';
import DeleteThesaurusRequest from '../model/DeleteThesaurusRequest';
import DescribeAccessControlConfigurationRequest from '../model/DescribeAccessControlConfigurationRequest';
import DescribeAccessControlConfigurationResponse from '../model/DescribeAccessControlConfigurationResponse';
import DescribeDataSourceRequest from '../model/DescribeDataSourceRequest';
import DescribeDataSourceResponse from '../model/DescribeDataSourceResponse';
import DescribeExperienceRequest from '../model/DescribeExperienceRequest';
import DescribeExperienceResponse from '../model/DescribeExperienceResponse';
import DescribeFaqRequest from '../model/DescribeFaqRequest';
import DescribeFaqResponse from '../model/DescribeFaqResponse';
import DescribeFeaturedResultsSetRequest from '../model/DescribeFeaturedResultsSetRequest';
import DescribeFeaturedResultsSetResponse from '../model/DescribeFeaturedResultsSetResponse';
import DescribeIndexRequest from '../model/DescribeIndexRequest';
import DescribeIndexResponse from '../model/DescribeIndexResponse';
import DescribePrincipalMappingRequest from '../model/DescribePrincipalMappingRequest';
import DescribePrincipalMappingResponse from '../model/DescribePrincipalMappingResponse';
import DescribeQuerySuggestionsBlockListRequest from '../model/DescribeQuerySuggestionsBlockListRequest';
import DescribeQuerySuggestionsBlockListResponse from '../model/DescribeQuerySuggestionsBlockListResponse';
import DescribeQuerySuggestionsConfigRequest from '../model/DescribeQuerySuggestionsConfigRequest';
import DescribeQuerySuggestionsConfigResponse from '../model/DescribeQuerySuggestionsConfigResponse';
import DescribeThesaurusRequest from '../model/DescribeThesaurusRequest';
import DescribeThesaurusResponse from '../model/DescribeThesaurusResponse';
import DisassociateEntitiesFromExperienceRequest from '../model/DisassociateEntitiesFromExperienceRequest';
import DisassociateEntitiesFromExperienceResponse from '../model/DisassociateEntitiesFromExperienceResponse';
import DisassociatePersonasFromEntitiesRequest from '../model/DisassociatePersonasFromEntitiesRequest';
import DisassociatePersonasFromEntitiesResponse from '../model/DisassociatePersonasFromEntitiesResponse';
import GetQuerySuggestionsRequest from '../model/GetQuerySuggestionsRequest';
import GetQuerySuggestionsResponse from '../model/GetQuerySuggestionsResponse';
import GetSnapshotsRequest from '../model/GetSnapshotsRequest';
import GetSnapshotsResponse from '../model/GetSnapshotsResponse';
import ListAccessControlConfigurationsRequest from '../model/ListAccessControlConfigurationsRequest';
import ListAccessControlConfigurationsResponse from '../model/ListAccessControlConfigurationsResponse';
import ListDataSourceSyncJobsRequest from '../model/ListDataSourceSyncJobsRequest';
import ListDataSourceSyncJobsResponse from '../model/ListDataSourceSyncJobsResponse';
import ListDataSourcesRequest from '../model/ListDataSourcesRequest';
import ListDataSourcesResponse from '../model/ListDataSourcesResponse';
import ListEntityPersonasRequest from '../model/ListEntityPersonasRequest';
import ListEntityPersonasResponse from '../model/ListEntityPersonasResponse';
import ListExperienceEntitiesRequest from '../model/ListExperienceEntitiesRequest';
import ListExperienceEntitiesResponse from '../model/ListExperienceEntitiesResponse';
import ListExperiencesRequest from '../model/ListExperiencesRequest';
import ListExperiencesResponse from '../model/ListExperiencesResponse';
import ListFaqsRequest from '../model/ListFaqsRequest';
import ListFaqsResponse from '../model/ListFaqsResponse';
import ListFeaturedResultsSetsRequest from '../model/ListFeaturedResultsSetsRequest';
import ListFeaturedResultsSetsResponse from '../model/ListFeaturedResultsSetsResponse';
import ListGroupsOlderThanOrderingIdRequest from '../model/ListGroupsOlderThanOrderingIdRequest';
import ListGroupsOlderThanOrderingIdResponse from '../model/ListGroupsOlderThanOrderingIdResponse';
import ListIndicesRequest from '../model/ListIndicesRequest';
import ListIndicesResponse from '../model/ListIndicesResponse';
import ListQuerySuggestionsBlockListsRequest from '../model/ListQuerySuggestionsBlockListsRequest';
import ListQuerySuggestionsBlockListsResponse from '../model/ListQuerySuggestionsBlockListsResponse';
import ListTagsForResourceRequest from '../model/ListTagsForResourceRequest';
import ListTagsForResourceResponse from '../model/ListTagsForResourceResponse';
import ListThesauriRequest from '../model/ListThesauriRequest';
import ListThesauriResponse from '../model/ListThesauriResponse';
import PutPrincipalMappingRequest from '../model/PutPrincipalMappingRequest';
import QueryRequest from '../model/QueryRequest';
import QueryResult from '../model/QueryResult';
import RetrieveRequest from '../model/RetrieveRequest';
import RetrieveResult from '../model/RetrieveResult';
import StartDataSourceSyncJobRequest from '../model/StartDataSourceSyncJobRequest';
import StartDataSourceSyncJobResponse from '../model/StartDataSourceSyncJobResponse';
import StopDataSourceSyncJobRequest from '../model/StopDataSourceSyncJobRequest';
import SubmitFeedbackRequest from '../model/SubmitFeedbackRequest';
import TagResourceRequest from '../model/TagResourceRequest';
import UntagResourceRequest from '../model/UntagResourceRequest';
import UpdateAccessControlConfigurationRequest from '../model/UpdateAccessControlConfigurationRequest';
import UpdateDataSourceRequest from '../model/UpdateDataSourceRequest';
import UpdateExperienceRequest from '../model/UpdateExperienceRequest';
import UpdateFeaturedResultsSetRequest from '../model/UpdateFeaturedResultsSetRequest';
import UpdateFeaturedResultsSetResponse from '../model/UpdateFeaturedResultsSetResponse';
import UpdateIndexRequest from '../model/UpdateIndexRequest';
import UpdateQuerySuggestionsBlockListRequest from '../model/UpdateQuerySuggestionsBlockListRequest';
import UpdateQuerySuggestionsConfigRequest from '../model/UpdateQuerySuggestionsConfigRequest';
import UpdateThesaurusRequest from '../model/UpdateThesaurusRequest';

/**
* Default service.
* @module api/DefaultApi
* @version 2019-02-03
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the associateEntitiesToExperience operation.
     * @callback module:api/DefaultApi~associateEntitiesToExperienceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociateEntitiesToExperienceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Grants users or groups in your IAM Identity Center identity source access to your Amazon Kendra experience. You can create an Amazon Kendra experience such as a search application. For more information on creating a search application experience, see <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html\">Building a search experience with no code</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/AssociateEntitiesToExperienceRequest} associateEntitiesToExperienceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~associateEntitiesToExperienceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociateEntitiesToExperienceResponse}
     */
    associateEntitiesToExperience(xAmzTarget, associateEntitiesToExperienceRequest, opts, callback) {
      opts = opts || {};
      let postBody = associateEntitiesToExperienceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling associateEntitiesToExperience");
      }
      // verify the required parameter 'associateEntitiesToExperienceRequest' is set
      if (associateEntitiesToExperienceRequest === undefined || associateEntitiesToExperienceRequest === null) {
        throw new Error("Missing the required parameter 'associateEntitiesToExperienceRequest' when calling associateEntitiesToExperience");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AssociateEntitiesToExperienceResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSKendraFrontendService.AssociateEntitiesToExperience', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the associatePersonasToEntities operation.
     * @callback module:api/DefaultApi~associatePersonasToEntitiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociatePersonasToEntitiesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Defines the specific permissions of users or groups in your IAM Identity Center identity source with access to your Amazon Kendra experience. You can create an Amazon Kendra experience such as a search application. For more information on creating a search application experience, see <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html\">Building a search experience with no code</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/AssociatePersonasToEntitiesRequest} associatePersonasToEntitiesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~associatePersonasToEntitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociatePersonasToEntitiesResponse}
     */
    associatePersonasToEntities(xAmzTarget, associatePersonasToEntitiesRequest, opts, callback) {
      opts = opts || {};
      let postBody = associatePersonasToEntitiesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling associatePersonasToEntities");
      }
      // verify the required parameter 'associatePersonasToEntitiesRequest' is set
      if (associatePersonasToEntitiesRequest === undefined || associatePersonasToEntitiesRequest === null) {
        throw new Error("Missing the required parameter 'associatePersonasToEntitiesRequest' when calling associatePersonasToEntities");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AssociatePersonasToEntitiesResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSKendraFrontendService.AssociatePersonasToEntities', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchDeleteDocument operation.
     * @callback module:api/DefaultApi~batchDeleteDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchDeleteDocumentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Removes one or more documents from an index. The documents must have been added with the <code>BatchPutDocument</code> API.</p> <p>The documents are deleted asynchronously. You can see the progress of the deletion by using Amazon Web Services CloudWatch. Any error messages related to the processing of the batch are sent to you CloudWatch log.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/BatchDeleteDocumentRequest} batchDeleteDocumentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchDeleteDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchDeleteDocumentResponse}
     */
    batchDeleteDocument(xAmzTarget, batchDeleteDocumentRequest, opts, callback) {
      opts = opts || {};
      let postBody = batchDeleteDocumentRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling batchDeleteDocument");
      }
      // verify the required parameter 'batchDeleteDocumentRequest' is set
      if (batchDeleteDocumentRequest === undefined || batchDeleteDocumentRequest === null) {
        throw new Error("Missing the required parameter 'batchDeleteDocumentRequest' when calling batchDeleteDocument");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchDeleteDocumentResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSKendraFrontendService.BatchDeleteDocument', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchDeleteFeaturedResultsSet operation.
     * @callback module:api/DefaultApi~batchDeleteFeaturedResultsSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchDeleteFeaturedResultsSetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes one or more sets of featured results. Features results are placed above all other results for certain queries. If there's an exact match of a query, then one or more specific documents are featured in the search results.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/BatchDeleteFeaturedResultsSetRequest} batchDeleteFeaturedResultsSetRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchDeleteFeaturedResultsSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchDeleteFeaturedResultsSetResponse}
     */
    batchDeleteFeaturedResultsSet(xAmzTarget, batchDeleteFeaturedResultsSetRequest, opts, callback) {
      opts = opts || {};
      let postBody = batchDeleteFeaturedResultsSetRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling batchDeleteFeaturedResultsSet");
      }
      // verify the required parameter 'batchDeleteFeaturedResultsSetRequest' is set
      if (batchDeleteFeaturedResultsSetRequest === undefined || batchDeleteFeaturedResultsSetRequest === null) {
        throw new Error("Missing the required parameter 'batchDeleteFeaturedResultsSetRequest' when calling batchDeleteFeaturedResultsSet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchDeleteFeaturedResultsSetResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSKendraFrontendService.BatchDeleteFeaturedResultsSet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchGetDocumentStatus operation.
     * @callback module:api/DefaultApi~batchGetDocumentStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchGetDocumentStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns the indexing status for one or more documents submitted with the <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/API_BatchPutDocument.html\"> BatchPutDocument</a> API.</p> <p>When you use the <code>BatchPutDocument</code> API, documents are indexed asynchronously. You can use the <code>BatchGetDocumentStatus</code> API to get the current status of a list of documents so that you can determine if they have been successfully indexed.</p> <p>You can also use the <code>BatchGetDocumentStatus</code> API to check the status of the <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/API_BatchDeleteDocument.html\"> BatchDeleteDocument</a> API. When a document is deleted from the index, Amazon Kendra returns <code>NOT_FOUND</code> as the status.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/BatchGetDocumentStatusRequest} batchGetDocumentStatusRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchGetDocumentStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchGetDocumentStatusResponse}
     */
    batchGetDocumentStatus(xAmzTarget, batchGetDocumentStatusRequest, opts, callback) {
      opts = opts || {};
      let postBody = batchGetDocumentStatusRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling batchGetDocumentStatus");
      }
      // verify the required parameter 'batchGetDocumentStatusRequest' is set
      if (batchGetDocumentStatusRequest === undefined || batchGetDocumentStatusRequest === null) {
        throw new Error("Missing the required parameter 'batchGetDocumentStatusRequest' when calling batchGetDocumentStatus");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchGetDocumentStatusResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSKendraFrontendService.BatchGetDocumentStatus', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchPutDocument operation.
     * @callback module:api/DefaultApi~batchPutDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchPutDocumentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Adds one or more documents to an index.</p> <p>The <code>BatchPutDocument</code> API enables you to ingest inline documents or a set of documents stored in an Amazon S3 bucket. Use this API to ingest your text and unstructured text into an index, add custom attributes to the documents, and to attach an access control list to the documents added to the index.</p> <p>The documents are indexed asynchronously. You can see the progress of the batch using Amazon Web Services CloudWatch. Any error messages related to processing the batch are sent to your Amazon Web Services CloudWatch log.</p> <p>For an example of ingesting inline documents using Python and Java SDKs, see <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/in-adding-binary-doc.html\">Adding files directly to an index</a>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/BatchPutDocumentRequest} batchPutDocumentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchPutDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchPutDocumentResponse}
     */
    batchPutDocument(xAmzTarget, batchPutDocumentRequest, opts, callback) {
      opts = opts || {};
      let postBody = batchPutDocumentRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling batchPutDocument");
      }
      // verify the required parameter 'batchPutDocumentRequest' is set
      if (batchPutDocumentRequest === undefined || batchPutDocumentRequest === null) {
        throw new Error("Missing the required parameter 'batchPutDocumentRequest' when calling batchPutDocument");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchPutDocumentResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSKendraFrontendService.BatchPutDocument', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clearQuerySuggestions operation.
     * @callback module:api/DefaultApi~clearQuerySuggestionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Clears existing query suggestions from an index.</p> <p>This deletes existing suggestions only, not the queries in the query log. After you clear suggestions, Amazon Kendra learns new suggestions based on new queries added to the query log from the time you cleared suggestions. If you do not see any new suggestions, then please allow Amazon Kendra to collect enough queries to learn new suggestions.</p> <p> <code>ClearQuerySuggestions</code> is currently not supported in the Amazon Web Services GovCloud (US-West) region.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ClearQuerySuggestionsRequest} clearQuerySuggestionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~clearQuerySuggestionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    clearQuerySuggestions(xAmzTarget, clearQuerySuggestionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = clearQuerySuggestionsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling clearQuerySuggestions");
      }
      // verify the required parameter 'clearQuerySuggestionsRequest' is set
      if (clearQuerySuggestionsRequest === undefined || clearQuerySuggestionsRequest === null) {
        throw new Error("Missing the required parameter 'clearQuerySuggestionsRequest' when calling clearQuerySuggestions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSKendraFrontendService.ClearQuerySuggestions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAccessControlConfiguration operation.
     * @callback module:api/DefaultApi~createAccessControlConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAccessControlConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates an access configuration for your documents. This includes user and group access information for your documents. This is useful for user context filtering, where search results are filtered based on the user or their group access to documents.</p> <p>You can use this to re-configure your existing document level access control without indexing all of your documents again. For example, your index contains top-secret company documents that only certain employees or users should access. One of these users leaves the company or switches to a team that should be blocked from accessing top-secret documents. The user still has access to top-secret documents because the user had access when your documents were previously indexed. You can create a specific access control configuration for the user with deny access. You can later update the access control configuration to allow access if the user returns to the company and re-joins the 'top-secret' team. You can re-configure access control for your documents as circumstances change.</p> <p>To apply your access control configuration to certain documents, you call the <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/API_BatchPutDocument.html\">BatchPutDocument</a> API with the <code>AccessControlConfigurationId</code> included in the <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/API_Document.html\">Document</a> object. If you use an S3 bucket as a data source, you update the <code>.metadata.json</code> with the <code>AccessControlConfigurationId</code> and synchronize your data source. Amazon Kendra currently only supports access control configuration for S3 data sources and documents indexed using the <code>BatchPutDocument</code> API.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateAccessControlConfigurationRequest} createAccessControlConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createAccessControlConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAccessControlConfigurationResponse}
     */
    createAccessControlConfiguration(xAmzTarget, createAccessControlConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = createAccessControlConfigurationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createAccessControlConfiguration");
      }
      // verify the required parameter 'createAccessControlConfigurationRequest' is set
      if (createAccessControlConfigurationRequest === undefined || createAccessControlConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'createAccessControlConfigurationRequest' when calling createAccessControlConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAccessControlConfigurationResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSKendraFrontendService.CreateAccessControlConfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createDataSource operation.
     * @callback module:api/DefaultApi~createDataSourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDataSourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a data source connector that you want to use with an Amazon Kendra index.</p> <p>You specify a name, data source connector type and description for your data source. You also specify configuration information for the data source connector.</p> <p> <code>CreateDataSource</code> is a synchronous operation. The operation returns 200 if the data source was successfully created. Otherwise, an exception is raised.</p> <p>For an example of creating an index and data source using the Python SDK, see <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/gs-python.html\">Getting started with Python SDK</a>. For an example of creating an index and data source using the Java SDK, see <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/gs-java.html\">Getting started with Java SDK</a>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateDataSourceRequest} createDataSourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createDataSourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDataSourceResponse}
     */
    createDataSource(xAmzTarget, createDataSourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = createDataSourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createDataSource");
      }
      // verify the required parameter 'createDataSourceRequest' is set
      if (createDataSourceRequest === undefined || createDataSourceRequest === null) {
        throw new Error("Missing the required parameter 'createDataSourceRequest' when calling createDataSource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateDataSourceResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSKendraFrontendService.CreateDataSource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createExperience operation.
     * @callback module:api/DefaultApi~createExperienceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateExperienceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an Amazon Kendra experience such as a search application. For more information on creating a search application experience, including using the Python and Java SDKs, see <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html\">Building a search experience with no code</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateExperienceRequest} createExperienceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createExperienceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateExperienceResponse}
     */
    createExperience(xAmzTarget, createExperienceRequest, opts, callback) {
      opts = opts || {};
      let postBody = createExperienceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createExperience");
      }
      // verify the required parameter 'createExperienceRequest' is set
      if (createExperienceRequest === undefined || createExperienceRequest === null) {
        throw new Error("Missing the required parameter 'createExperienceRequest' when calling createExperience");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateExperienceResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSKendraFrontendService.CreateExperience', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createFaq operation.
     * @callback module:api/DefaultApi~createFaqCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateFaqResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a set of frequently ask questions (FAQs) using a specified FAQ file stored in an Amazon S3 bucket.</p> <p>Adding FAQs to an index is an asynchronous operation.</p> <p>For an example of adding an FAQ to an index using Python and Java SDKs, see <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/in-creating-faq.html#using-faq-file\">Using your FAQ file</a>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateFaqRequest} createFaqRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createFaqCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateFaqResponse}
     */
    createFaq(xAmzTarget, createFaqRequest, opts, callback) {
      opts = opts || {};
      let postBody = createFaqRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createFaq");
      }
      // verify the required parameter 'createFaqRequest' is set
      if (createFaqRequest === undefined || createFaqRequest === null) {
        throw new Error("Missing the required parameter 'createFaqRequest' when calling createFaq");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateFaqResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSKendraFrontendService.CreateFaq', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createFeaturedResultsSet operation.
     * @callback module:api/DefaultApi~createFeaturedResultsSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateFeaturedResultsSetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a set of featured results to display at the top of the search results page. Featured results are placed above all other results for certain queries. You map specific queries to specific documents for featuring in the results. If a query contains an exact match, then one or more specific documents are featured in the search results.</p> <p>You can create up to 50 sets of featured results per index. You can request to increase this limit by contacting <a href=\"http://aws.amazon.com/contact-us/\">Support</a>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateFeaturedResultsSetRequest} createFeaturedResultsSetRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createFeaturedResultsSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateFeaturedResultsSetResponse}
     */
    createFeaturedResultsSet(xAmzTarget, createFeaturedResultsSetRequest, opts, callback) {
      opts = opts || {};
      let postBody = createFeaturedResultsSetRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createFeaturedResultsSet");
      }
      // verify the required parameter 'createFeaturedResultsSetRequest' is set
      if (createFeaturedResultsSetRequest === undefined || createFeaturedResultsSetRequest === null) {
        throw new Error("Missing the required parameter 'createFeaturedResultsSetRequest' when calling createFeaturedResultsSet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateFeaturedResultsSetResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSKendraFrontendService.CreateFeaturedResultsSet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createIndex operation.
     * @callback module:api/DefaultApi~createIndexCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateIndexResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates an Amazon Kendra index. Index creation is an asynchronous API. To determine if index creation has completed, check the <code>Status</code> field returned from a call to <code>DescribeIndex</code>. The <code>Status</code> field is set to <code>ACTIVE</code> when the index is ready to use.</p> <p>Once the index is active you can index your documents using the <code>BatchPutDocument</code> API or using one of the supported data sources.</p> <p>For an example of creating an index and data source using the Python SDK, see <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/gs-python.html\">Getting started with Python SDK</a>. For an example of creating an index and data source using the Java SDK, see <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/gs-java.html\">Getting started with Java SDK</a>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateIndexRequest} createIndexRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createIndexCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateIndexResponse}
     */
    createIndex(xAmzTarget, createIndexRequest, opts, callback) {
      opts = opts || {};
      let postBody = createIndexRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createIndex");
      }
      // verify the required parameter 'createIndexRequest' is set
      if (createIndexRequest === undefined || createIndexRequest === null) {
        throw new Error("Missing the required parameter 'createIndexRequest' when calling createIndex");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateIndexResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSKendraFrontendService.CreateIndex', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createQuerySuggestionsBlockList operation.
     * @callback module:api/DefaultApi~createQuerySuggestionsBlockListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateQuerySuggestionsBlockListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a block list to exlcude certain queries from suggestions.</p> <p>Any query that contains words or phrases specified in the block list is blocked or filtered out from being shown as a suggestion.</p> <p>You need to provide the file location of your block list text file in your S3 bucket. In your text file, enter each block word or phrase on a separate line.</p> <p>For information on the current quota limits for block lists, see <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/quotas.html\">Quotas for Amazon Kendra</a>.</p> <p> <code>CreateQuerySuggestionsBlockList</code> is currently not supported in the Amazon Web Services GovCloud (US-West) region.</p> <p>For an example of creating a block list for query suggestions using the Python SDK, see <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/query-suggestions.html#query-suggestions-blocklist\">Query suggestions block list</a>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateQuerySuggestionsBlockListRequest} createQuerySuggestionsBlockListRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createQuerySuggestionsBlockListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateQuerySuggestionsBlockListResponse}
     */
    createQuerySuggestionsBlockList(xAmzTarget, createQuerySuggestionsBlockListRequest, opts, callback) {
      opts = opts || {};
      let postBody = createQuerySuggestionsBlockListRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createQuerySuggestionsBlockList");
      }
      // verify the required parameter 'createQuerySuggestionsBlockListRequest' is set
      if (createQuerySuggestionsBlockListRequest === undefined || createQuerySuggestionsBlockListRequest === null) {
        throw new Error("Missing the required parameter 'createQuerySuggestionsBlockListRequest' when calling createQuerySuggestionsBlockList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateQuerySuggestionsBlockListResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSKendraFrontendService.CreateQuerySuggestionsBlockList', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createThesaurus operation.
     * @callback module:api/DefaultApi~createThesaurusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateThesaurusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a thesaurus for an index. The thesaurus contains a list of synonyms in Solr format.</p> <p>For an example of adding a thesaurus file to an index, see <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/index-synonyms-adding-thesaurus-file.html\">Adding custom synonyms to an index</a>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateThesaurusRequest} createThesaurusRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createThesaurusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateThesaurusResponse}
     */
    createThesaurus(xAmzTarget, createThesaurusRequest, opts, callback) {
      opts = opts || {};
      let postBody = createThesaurusRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createThesaurus");
      }
      // verify the required parameter 'createThesaurusRequest' is set
      if (createThesaurusRequest === undefined || createThesaurusRequest === null) {
        throw new Error("Missing the required parameter 'createThesaurusRequest' when calling createThesaurus");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateThesaurusResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSKendraFrontendService.CreateThesaurus', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAccessControlConfiguration operation.
     * @callback module:api/DefaultApi~deleteAccessControlConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an access control configuration that you created for your documents in an index. This includes user and group access information for your documents. This is useful for user context filtering, where search results are filtered based on the user or their group access to documents.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteAccessControlConfigurationRequest} deleteAccessControlConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteAccessControlConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteAccessControlConfiguration(xAmzTarget, deleteAccessControlConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteAccessControlConfigurationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteAccessControlConfiguration");
      }
      // verify the required parameter 'deleteAccessControlConfigurationRequest' is set
      if (deleteAccessControlConfigurationRequest === undefined || deleteAccessControlConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'deleteAccessControlConfigurationRequest' when calling deleteAccessControlConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSKendraFrontendService.DeleteAccessControlConfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDataSource operation.
     * @callback module:api/DefaultApi~deleteDataSourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an Amazon Kendra data source connector. An exception is not thrown if the data source is already being deleted. While the data source is being deleted, the <code>Status</code> field returned by a call to the <code>DescribeDataSource</code> API is set to <code>DELETING</code>. For more information, see <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/delete-data-source.html\">Deleting Data Sources</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteDataSourceRequest} deleteDataSourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteDataSourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDataSource(xAmzTarget, deleteDataSourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteDataSourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteDataSource");
      }
      // verify the required parameter 'deleteDataSourceRequest' is set
      if (deleteDataSourceRequest === undefined || deleteDataSourceRequest === null) {
        throw new Error("Missing the required parameter 'deleteDataSourceRequest' when calling deleteDataSource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSKendraFrontendService.DeleteDataSource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteExperience operation.
     * @callback module:api/DefaultApi~deleteExperienceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes your Amazon Kendra experience such as a search application. For more information on creating a search application experience, see <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html\">Building a search experience with no code</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteExperienceRequest} deleteExperienceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteExperienceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteExperience(xAmzTarget, deleteExperienceRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteExperienceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteExperience");
      }
      // verify the required parameter 'deleteExperienceRequest' is set
      if (deleteExperienceRequest === undefined || deleteExperienceRequest === null) {
        throw new Error("Missing the required parameter 'deleteExperienceRequest' when calling deleteExperience");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSKendraFrontendService.DeleteExperience', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFaq operation.
     * @callback module:api/DefaultApi~deleteFaqCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes an FAQ from an index.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteFaqRequest} deleteFaqRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteFaqCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteFaq(xAmzTarget, deleteFaqRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteFaqRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteFaq");
      }
      // verify the required parameter 'deleteFaqRequest' is set
      if (deleteFaqRequest === undefined || deleteFaqRequest === null) {
        throw new Error("Missing the required parameter 'deleteFaqRequest' when calling deleteFaq");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSKendraFrontendService.DeleteFaq', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteIndex operation.
     * @callback module:api/DefaultApi~deleteIndexCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an existing Amazon Kendra index. An exception is not thrown if the index is already being deleted. While the index is being deleted, the <code>Status</code> field returned by a call to the <code>DescribeIndex</code> API is set to <code>DELETING</code>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteIndexRequest} deleteIndexRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteIndexCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteIndex(xAmzTarget, deleteIndexRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteIndexRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteIndex");
      }
      // verify the required parameter 'deleteIndexRequest' is set
      if (deleteIndexRequest === undefined || deleteIndexRequest === null) {
        throw new Error("Missing the required parameter 'deleteIndexRequest' when calling deleteIndex");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSKendraFrontendService.DeleteIndex', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePrincipalMapping operation.
     * @callback module:api/DefaultApi~deletePrincipalMappingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes a group so that all users and sub groups that belong to the group can no longer access documents only available to that group.</p> <p>For example, after deleting the group \"Summer Interns\", all interns who belonged to that group no longer see intern-only documents in their search results.</p> <p>If you want to delete or replace users or sub groups of a group, you need to use the <code>PutPrincipalMapping</code> operation. For example, if a user in the group \"Engineering\" leaves the engineering team and another user takes their place, you provide an updated list of users or sub groups that belong to the \"Engineering\" group when calling <code>PutPrincipalMapping</code>. You can update your internal list of users or sub groups and input this list when calling <code>PutPrincipalMapping</code>.</p> <p> <code>DeletePrincipalMapping</code> is currently not supported in the Amazon Web Services GovCloud (US-West) region.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeletePrincipalMappingRequest} deletePrincipalMappingRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deletePrincipalMappingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePrincipalMapping(xAmzTarget, deletePrincipalMappingRequest, opts, callback) {
      opts = opts || {};
      let postBody = deletePrincipalMappingRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deletePrincipalMapping");
      }
      // verify the required parameter 'deletePrincipalMappingRequest' is set
      if (deletePrincipalMappingRequest === undefined || deletePrincipalMappingRequest === null) {
        throw new Error("Missing the required parameter 'deletePrincipalMappingRequest' when calling deletePrincipalMapping");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSKendraFrontendService.DeletePrincipalMapping', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteQuerySuggestionsBlockList operation.
     * @callback module:api/DefaultApi~deleteQuerySuggestionsBlockListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes a block list used for query suggestions for an index.</p> <p>A deleted block list might not take effect right away. Amazon Kendra needs to refresh the entire suggestions list to add back the queries that were previously blocked.</p> <p> <code>DeleteQuerySuggestionsBlockList</code> is currently not supported in the Amazon Web Services GovCloud (US-West) region.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteQuerySuggestionsBlockListRequest} deleteQuerySuggestionsBlockListRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteQuerySuggestionsBlockListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteQuerySuggestionsBlockList(xAmzTarget, deleteQuerySuggestionsBlockListRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteQuerySuggestionsBlockListRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteQuerySuggestionsBlockList");
      }
      // verify the required parameter 'deleteQuerySuggestionsBlockListRequest' is set
      if (deleteQuerySuggestionsBlockListRequest === undefined || deleteQuerySuggestionsBlockListRequest === null) {
        throw new Error("Missing the required parameter 'deleteQuerySuggestionsBlockListRequest' when calling deleteQuerySuggestionsBlockList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSKendraFrontendService.DeleteQuerySuggestionsBlockList', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteThesaurus operation.
     * @callback module:api/DefaultApi~deleteThesaurusCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an existing Amazon Kendra thesaurus. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteThesaurusRequest} deleteThesaurusRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteThesaurusCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteThesaurus(xAmzTarget, deleteThesaurusRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteThesaurusRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteThesaurus");
      }
      // verify the required parameter 'deleteThesaurusRequest' is set
      if (deleteThesaurusRequest === undefined || deleteThesaurusRequest === null) {
        throw new Error("Missing the required parameter 'deleteThesaurusRequest' when calling deleteThesaurus");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSKendraFrontendService.DeleteThesaurus', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeAccessControlConfiguration operation.
     * @callback module:api/DefaultApi~describeAccessControlConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeAccessControlConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about an access control configuration that you created for your documents in an index. This includes user and group access information for your documents. This is useful for user context filtering, where search results are filtered based on the user or their group access to documents.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeAccessControlConfigurationRequest} describeAccessControlConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeAccessControlConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeAccessControlConfigurationResponse}
     */
    describeAccessControlConfiguration(xAmzTarget, describeAccessControlConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeAccessControlConfigurationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeAccessControlConfiguration");
      }
      // verify the required parameter 'describeAccessControlConfigurationRequest' is set
      if (describeAccessControlConfigurationRequest === undefined || describeAccessControlConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'describeAccessControlConfigurationRequest' when calling describeAccessControlConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeAccessControlConfigurationResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSKendraFrontendService.DescribeAccessControlConfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeDataSource operation.
     * @callback module:api/DefaultApi~describeDataSourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeDataSourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about an Amazon Kendra data source connector.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeDataSourceRequest} describeDataSourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeDataSourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeDataSourceResponse}
     */
    describeDataSource(xAmzTarget, describeDataSourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeDataSourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeDataSource");
      }
      // verify the required parameter 'describeDataSourceRequest' is set
      if (describeDataSourceRequest === undefined || describeDataSourceRequest === null) {
        throw new Error("Missing the required parameter 'describeDataSourceRequest' when calling describeDataSource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeDataSourceResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSKendraFrontendService.DescribeDataSource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeExperience operation.
     * @callback module:api/DefaultApi~describeExperienceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeExperienceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about your Amazon Kendra experience such as a search application. For more information on creating a search application experience, see <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html\">Building a search experience with no code</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeExperienceRequest} describeExperienceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeExperienceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeExperienceResponse}
     */
    describeExperience(xAmzTarget, describeExperienceRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeExperienceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeExperience");
      }
      // verify the required parameter 'describeExperienceRequest' is set
      if (describeExperienceRequest === undefined || describeExperienceRequest === null) {
        throw new Error("Missing the required parameter 'describeExperienceRequest' when calling describeExperience");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeExperienceResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSKendraFrontendService.DescribeExperience', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeFaq operation.
     * @callback module:api/DefaultApi~describeFaqCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeFaqResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about an FAQ list.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeFaqRequest} describeFaqRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeFaqCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeFaqResponse}
     */
    describeFaq(xAmzTarget, describeFaqRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeFaqRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeFaq");
      }
      // verify the required parameter 'describeFaqRequest' is set
      if (describeFaqRequest === undefined || describeFaqRequest === null) {
        throw new Error("Missing the required parameter 'describeFaqRequest' when calling describeFaq");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeFaqResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSKendraFrontendService.DescribeFaq', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeFeaturedResultsSet operation.
     * @callback module:api/DefaultApi~describeFeaturedResultsSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeFeaturedResultsSetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a set of featured results. Features results are placed above all other results for certain queries. If there's an exact match of a query, then one or more specific documents are featured in the search results.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeFeaturedResultsSetRequest} describeFeaturedResultsSetRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeFeaturedResultsSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeFeaturedResultsSetResponse}
     */
    describeFeaturedResultsSet(xAmzTarget, describeFeaturedResultsSetRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeFeaturedResultsSetRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeFeaturedResultsSet");
      }
      // verify the required parameter 'describeFeaturedResultsSetRequest' is set
      if (describeFeaturedResultsSetRequest === undefined || describeFeaturedResultsSetRequest === null) {
        throw new Error("Missing the required parameter 'describeFeaturedResultsSetRequest' when calling describeFeaturedResultsSet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeFeaturedResultsSetResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSKendraFrontendService.DescribeFeaturedResultsSet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeIndex operation.
     * @callback module:api/DefaultApi~describeIndexCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeIndexResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about an existing Amazon Kendra index.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeIndexRequest} describeIndexRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeIndexCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeIndexResponse}
     */
    describeIndex(xAmzTarget, describeIndexRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeIndexRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeIndex");
      }
      // verify the required parameter 'describeIndexRequest' is set
      if (describeIndexRequest === undefined || describeIndexRequest === null) {
        throw new Error("Missing the required parameter 'describeIndexRequest' when calling describeIndex");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeIndexResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSKendraFrontendService.DescribeIndex', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describePrincipalMapping operation.
     * @callback module:api/DefaultApi~describePrincipalMappingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribePrincipalMappingResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Describes the processing of <code>PUT</code> and <code>DELETE</code> actions for mapping users to their groups. This includes information on the status of actions currently processing or yet to be processed, when actions were last updated, when actions were received by Amazon Kendra, the latest action that should process and apply after other actions, and useful error messages if an action could not be processed.</p> <p> <code>DescribePrincipalMapping</code> is currently not supported in the Amazon Web Services GovCloud (US-West) region.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribePrincipalMappingRequest} describePrincipalMappingRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describePrincipalMappingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribePrincipalMappingResponse}
     */
    describePrincipalMapping(xAmzTarget, describePrincipalMappingRequest, opts, callback) {
      opts = opts || {};
      let postBody = describePrincipalMappingRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describePrincipalMapping");
      }
      // verify the required parameter 'describePrincipalMappingRequest' is set
      if (describePrincipalMappingRequest === undefined || describePrincipalMappingRequest === null) {
        throw new Error("Missing the required parameter 'describePrincipalMappingRequest' when calling describePrincipalMapping");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribePrincipalMappingResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSKendraFrontendService.DescribePrincipalMapping', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeQuerySuggestionsBlockList operation.
     * @callback module:api/DefaultApi~describeQuerySuggestionsBlockListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeQuerySuggestionsBlockListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets information about a block list used for query suggestions for an index.</p> <p>This is used to check the current settings that are applied to a block list.</p> <p> <code>DescribeQuerySuggestionsBlockList</code> is currently not supported in the Amazon Web Services GovCloud (US-West) region.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeQuerySuggestionsBlockListRequest} describeQuerySuggestionsBlockListRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeQuerySuggestionsBlockListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeQuerySuggestionsBlockListResponse}
     */
    describeQuerySuggestionsBlockList(xAmzTarget, describeQuerySuggestionsBlockListRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeQuerySuggestionsBlockListRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeQuerySuggestionsBlockList");
      }
      // verify the required parameter 'describeQuerySuggestionsBlockListRequest' is set
      if (describeQuerySuggestionsBlockListRequest === undefined || describeQuerySuggestionsBlockListRequest === null) {
        throw new Error("Missing the required parameter 'describeQuerySuggestionsBlockListRequest' when calling describeQuerySuggestionsBlockList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeQuerySuggestionsBlockListResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSKendraFrontendService.DescribeQuerySuggestionsBlockList', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeQuerySuggestionsConfig operation.
     * @callback module:api/DefaultApi~describeQuerySuggestionsConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeQuerySuggestionsConfigResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets information on the settings of query suggestions for an index.</p> <p>This is used to check the current settings applied to query suggestions.</p> <p> <code>DescribeQuerySuggestionsConfig</code> is currently not supported in the Amazon Web Services GovCloud (US-West) region.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeQuerySuggestionsConfigRequest} describeQuerySuggestionsConfigRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeQuerySuggestionsConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeQuerySuggestionsConfigResponse}
     */
    describeQuerySuggestionsConfig(xAmzTarget, describeQuerySuggestionsConfigRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeQuerySuggestionsConfigRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeQuerySuggestionsConfig");
      }
      // verify the required parameter 'describeQuerySuggestionsConfigRequest' is set
      if (describeQuerySuggestionsConfigRequest === undefined || describeQuerySuggestionsConfigRequest === null) {
        throw new Error("Missing the required parameter 'describeQuerySuggestionsConfigRequest' when calling describeQuerySuggestionsConfig");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeQuerySuggestionsConfigResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSKendraFrontendService.DescribeQuerySuggestionsConfig', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeThesaurus operation.
     * @callback module:api/DefaultApi~describeThesaurusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeThesaurusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about an existing Amazon Kendra thesaurus.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeThesaurusRequest} describeThesaurusRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeThesaurusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeThesaurusResponse}
     */
    describeThesaurus(xAmzTarget, describeThesaurusRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeThesaurusRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeThesaurus");
      }
      // verify the required parameter 'describeThesaurusRequest' is set
      if (describeThesaurusRequest === undefined || describeThesaurusRequest === null) {
        throw new Error("Missing the required parameter 'describeThesaurusRequest' when calling describeThesaurus");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeThesaurusResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSKendraFrontendService.DescribeThesaurus', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disassociateEntitiesFromExperience operation.
     * @callback module:api/DefaultApi~disassociateEntitiesFromExperienceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DisassociateEntitiesFromExperienceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Prevents users or groups in your IAM Identity Center identity source from accessing your Amazon Kendra experience. You can create an Amazon Kendra experience such as a search application. For more information on creating a search application experience, see <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html\">Building a search experience with no code</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DisassociateEntitiesFromExperienceRequest} disassociateEntitiesFromExperienceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~disassociateEntitiesFromExperienceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DisassociateEntitiesFromExperienceResponse}
     */
    disassociateEntitiesFromExperience(xAmzTarget, disassociateEntitiesFromExperienceRequest, opts, callback) {
      opts = opts || {};
      let postBody = disassociateEntitiesFromExperienceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling disassociateEntitiesFromExperience");
      }
      // verify the required parameter 'disassociateEntitiesFromExperienceRequest' is set
      if (disassociateEntitiesFromExperienceRequest === undefined || disassociateEntitiesFromExperienceRequest === null) {
        throw new Error("Missing the required parameter 'disassociateEntitiesFromExperienceRequest' when calling disassociateEntitiesFromExperience");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DisassociateEntitiesFromExperienceResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSKendraFrontendService.DisassociateEntitiesFromExperience', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disassociatePersonasFromEntities operation.
     * @callback module:api/DefaultApi~disassociatePersonasFromEntitiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DisassociatePersonasFromEntitiesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the specific permissions of users or groups in your IAM Identity Center identity source with access to your Amazon Kendra experience. You can create an Amazon Kendra experience such as a search application. For more information on creating a search application experience, see <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html\">Building a search experience with no code</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DisassociatePersonasFromEntitiesRequest} disassociatePersonasFromEntitiesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~disassociatePersonasFromEntitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DisassociatePersonasFromEntitiesResponse}
     */
    disassociatePersonasFromEntities(xAmzTarget, disassociatePersonasFromEntitiesRequest, opts, callback) {
      opts = opts || {};
      let postBody = disassociatePersonasFromEntitiesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling disassociatePersonasFromEntities");
      }
      // verify the required parameter 'disassociatePersonasFromEntitiesRequest' is set
      if (disassociatePersonasFromEntitiesRequest === undefined || disassociatePersonasFromEntitiesRequest === null) {
        throw new Error("Missing the required parameter 'disassociatePersonasFromEntitiesRequest' when calling disassociatePersonasFromEntities");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DisassociatePersonasFromEntitiesResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSKendraFrontendService.DisassociatePersonasFromEntities', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getQuerySuggestions operation.
     * @callback module:api/DefaultApi~getQuerySuggestionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetQuerySuggestionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Fetches the queries that are suggested to your users.</p> <p> <code>GetQuerySuggestions</code> is currently not supported in the Amazon Web Services GovCloud (US-West) region.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetQuerySuggestionsRequest} getQuerySuggestionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getQuerySuggestionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetQuerySuggestionsResponse}
     */
    getQuerySuggestions(xAmzTarget, getQuerySuggestionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = getQuerySuggestionsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getQuerySuggestions");
      }
      // verify the required parameter 'getQuerySuggestionsRequest' is set
      if (getQuerySuggestionsRequest === undefined || getQuerySuggestionsRequest === null) {
        throw new Error("Missing the required parameter 'getQuerySuggestionsRequest' when calling getQuerySuggestions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetQuerySuggestionsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSKendraFrontendService.GetQuerySuggestions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSnapshots operation.
     * @callback module:api/DefaultApi~getSnapshotsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSnapshotsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves search metrics data. The data provides a snapshot of how your users interact with your search application and how effective the application is.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetSnapshotsRequest} getSnapshotsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~getSnapshotsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSnapshotsResponse}
     */
    getSnapshots(xAmzTarget, getSnapshotsRequest, opts, callback) {
      opts = opts || {};
      let postBody = getSnapshotsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getSnapshots");
      }
      // verify the required parameter 'getSnapshotsRequest' is set
      if (getSnapshotsRequest === undefined || getSnapshotsRequest === null) {
        throw new Error("Missing the required parameter 'getSnapshotsRequest' when calling getSnapshots");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetSnapshotsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSKendraFrontendService.GetSnapshots', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAccessControlConfigurations operation.
     * @callback module:api/DefaultApi~listAccessControlConfigurationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAccessControlConfigurationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists one or more access control configurations for an index. This includes user and group access information for your documents. This is useful for user context filtering, where search results are filtered based on the user or their group access to documents.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListAccessControlConfigurationsRequest} listAccessControlConfigurationsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listAccessControlConfigurationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAccessControlConfigurationsResponse}
     */
    listAccessControlConfigurations(xAmzTarget, listAccessControlConfigurationsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listAccessControlConfigurationsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listAccessControlConfigurations");
      }
      // verify the required parameter 'listAccessControlConfigurationsRequest' is set
      if (listAccessControlConfigurationsRequest === undefined || listAccessControlConfigurationsRequest === null) {
        throw new Error("Missing the required parameter 'listAccessControlConfigurationsRequest' when calling listAccessControlConfigurations");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListAccessControlConfigurationsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSKendraFrontendService.ListAccessControlConfigurations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDataSourceSyncJobs operation.
     * @callback module:api/DefaultApi~listDataSourceSyncJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDataSourceSyncJobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets statistics about synchronizing a data source connector.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListDataSourceSyncJobsRequest} listDataSourceSyncJobsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listDataSourceSyncJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDataSourceSyncJobsResponse}
     */
    listDataSourceSyncJobs(xAmzTarget, listDataSourceSyncJobsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listDataSourceSyncJobsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listDataSourceSyncJobs");
      }
      // verify the required parameter 'listDataSourceSyncJobsRequest' is set
      if (listDataSourceSyncJobsRequest === undefined || listDataSourceSyncJobsRequest === null) {
        throw new Error("Missing the required parameter 'listDataSourceSyncJobsRequest' when calling listDataSourceSyncJobs");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListDataSourceSyncJobsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSKendraFrontendService.ListDataSourceSyncJobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDataSources operation.
     * @callback module:api/DefaultApi~listDataSourcesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDataSourcesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the data source connectors that you have created.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListDataSourcesRequest} listDataSourcesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listDataSourcesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDataSourcesResponse}
     */
    listDataSources(xAmzTarget, listDataSourcesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listDataSourcesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listDataSources");
      }
      // verify the required parameter 'listDataSourcesRequest' is set
      if (listDataSourcesRequest === undefined || listDataSourcesRequest === null) {
        throw new Error("Missing the required parameter 'listDataSourcesRequest' when calling listDataSources");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListDataSourcesResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSKendraFrontendService.ListDataSources', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listEntityPersonas operation.
     * @callback module:api/DefaultApi~listEntityPersonasCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListEntityPersonasResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists specific permissions of users and groups with access to your Amazon Kendra experience.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListEntityPersonasRequest} listEntityPersonasRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listEntityPersonasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListEntityPersonasResponse}
     */
    listEntityPersonas(xAmzTarget, listEntityPersonasRequest, opts, callback) {
      opts = opts || {};
      let postBody = listEntityPersonasRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listEntityPersonas");
      }
      // verify the required parameter 'listEntityPersonasRequest' is set
      if (listEntityPersonasRequest === undefined || listEntityPersonasRequest === null) {
        throw new Error("Missing the required parameter 'listEntityPersonasRequest' when calling listEntityPersonas");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListEntityPersonasResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSKendraFrontendService.ListEntityPersonas', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listExperienceEntities operation.
     * @callback module:api/DefaultApi~listExperienceEntitiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListExperienceEntitiesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists users or groups in your IAM Identity Center identity source that are granted access to your Amazon Kendra experience. You can create an Amazon Kendra experience such as a search application. For more information on creating a search application experience, see <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html\">Building a search experience with no code</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListExperienceEntitiesRequest} listExperienceEntitiesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listExperienceEntitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListExperienceEntitiesResponse}
     */
    listExperienceEntities(xAmzTarget, listExperienceEntitiesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listExperienceEntitiesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listExperienceEntities");
      }
      // verify the required parameter 'listExperienceEntitiesRequest' is set
      if (listExperienceEntitiesRequest === undefined || listExperienceEntitiesRequest === null) {
        throw new Error("Missing the required parameter 'listExperienceEntitiesRequest' when calling listExperienceEntities");
      }

      let pathParams = {
      };
      let queryParams = {
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListExperienceEntitiesResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSKendraFrontendService.ListExperienceEntities', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listExperiences operation.
     * @callback module:api/DefaultApi~listExperiencesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListExperiencesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists one or more Amazon Kendra experiences. You can create an Amazon Kendra experience such as a search application. For more information on creating a search application experience, see <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html\">Building a search experience with no code</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListExperiencesRequest} listExperiencesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listExperiencesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListExperiencesResponse}
     */
    listExperiences(xAmzTarget, listExperiencesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listExperiencesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listExperiences");
      }
      // verify the required parameter 'listExperiencesRequest' is set
      if (listExperiencesRequest === undefined || listExperiencesRequest === null) {
        throw new Error("Missing the required parameter 'listExperiencesRequest' when calling listExperiences");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListExperiencesResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSKendraFrontendService.ListExperiences', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listFaqs operation.
     * @callback module:api/DefaultApi~listFaqsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListFaqsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of FAQ lists associated with an index.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListFaqsRequest} listFaqsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listFaqsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListFaqsResponse}
     */
    listFaqs(xAmzTarget, listFaqsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listFaqsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listFaqs");
      }
      // verify the required parameter 'listFaqsRequest' is set
      if (listFaqsRequest === undefined || listFaqsRequest === null) {
        throw new Error("Missing the required parameter 'listFaqsRequest' when calling listFaqs");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListFaqsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSKendraFrontendService.ListFaqs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listFeaturedResultsSets operation.
     * @callback module:api/DefaultApi~listFeaturedResultsSetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListFeaturedResultsSetsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all your sets of featured results for a given index. Features results are placed above all other results for certain queries. If there's an exact match of a query, then one or more specific documents are featured in the search results.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListFeaturedResultsSetsRequest} listFeaturedResultsSetsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listFeaturedResultsSetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListFeaturedResultsSetsResponse}
     */
    listFeaturedResultsSets(xAmzTarget, listFeaturedResultsSetsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listFeaturedResultsSetsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listFeaturedResultsSets");
      }
      // verify the required parameter 'listFeaturedResultsSetsRequest' is set
      if (listFeaturedResultsSetsRequest === undefined || listFeaturedResultsSetsRequest === null) {
        throw new Error("Missing the required parameter 'listFeaturedResultsSetsRequest' when calling listFeaturedResultsSets");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListFeaturedResultsSetsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSKendraFrontendService.ListFeaturedResultsSets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listGroupsOlderThanOrderingId operation.
     * @callback module:api/DefaultApi~listGroupsOlderThanOrderingIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListGroupsOlderThanOrderingIdResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Provides a list of groups that are mapped to users before a given ordering or timestamp identifier.</p> <p> <code>ListGroupsOlderThanOrderingId</code> is currently not supported in the Amazon Web Services GovCloud (US-West) region.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListGroupsOlderThanOrderingIdRequest} listGroupsOlderThanOrderingIdRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listGroupsOlderThanOrderingIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListGroupsOlderThanOrderingIdResponse}
     */
    listGroupsOlderThanOrderingId(xAmzTarget, listGroupsOlderThanOrderingIdRequest, opts, callback) {
      opts = opts || {};
      let postBody = listGroupsOlderThanOrderingIdRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listGroupsOlderThanOrderingId");
      }
      // verify the required parameter 'listGroupsOlderThanOrderingIdRequest' is set
      if (listGroupsOlderThanOrderingIdRequest === undefined || listGroupsOlderThanOrderingIdRequest === null) {
        throw new Error("Missing the required parameter 'listGroupsOlderThanOrderingIdRequest' when calling listGroupsOlderThanOrderingId");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListGroupsOlderThanOrderingIdResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSKendraFrontendService.ListGroupsOlderThanOrderingId', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listIndices operation.
     * @callback module:api/DefaultApi~listIndicesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListIndicesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the Amazon Kendra indexes that you created.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListIndicesRequest} listIndicesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listIndicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListIndicesResponse}
     */
    listIndices(xAmzTarget, listIndicesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listIndicesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listIndices");
      }
      // verify the required parameter 'listIndicesRequest' is set
      if (listIndicesRequest === undefined || listIndicesRequest === null) {
        throw new Error("Missing the required parameter 'listIndicesRequest' when calling listIndices");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListIndicesResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSKendraFrontendService.ListIndices', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listQuerySuggestionsBlockLists operation.
     * @callback module:api/DefaultApi~listQuerySuggestionsBlockListsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListQuerySuggestionsBlockListsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Lists the block lists used for query suggestions for an index.</p> <p>For information on the current quota limits for block lists, see <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/quotas.html\">Quotas for Amazon Kendra</a>.</p> <p> <code>ListQuerySuggestionsBlockLists</code> is currently not supported in the Amazon Web Services GovCloud (US-West) region.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListQuerySuggestionsBlockListsRequest} listQuerySuggestionsBlockListsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listQuerySuggestionsBlockListsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListQuerySuggestionsBlockListsResponse}
     */
    listQuerySuggestionsBlockLists(xAmzTarget, listQuerySuggestionsBlockListsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listQuerySuggestionsBlockListsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listQuerySuggestionsBlockLists");
      }
      // verify the required parameter 'listQuerySuggestionsBlockListsRequest' is set
      if (listQuerySuggestionsBlockListsRequest === undefined || listQuerySuggestionsBlockListsRequest === null) {
        throw new Error("Missing the required parameter 'listQuerySuggestionsBlockListsRequest' when calling listQuerySuggestionsBlockLists");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListQuerySuggestionsBlockListsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSKendraFrontendService.ListQuerySuggestionsBlockLists', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of tags associated with a specified resource. Indexes, FAQs, and data sources can have tags associated with them.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListTagsForResourceRequest} listTagsForResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceResponse}
     */
    listTagsForResource(xAmzTarget, listTagsForResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = listTagsForResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listTagsForResource");
      }
      // verify the required parameter 'listTagsForResourceRequest' is set
      if (listTagsForResourceRequest === undefined || listTagsForResourceRequest === null) {
        throw new Error("Missing the required parameter 'listTagsForResourceRequest' when calling listTagsForResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSKendraFrontendService.ListTagsForResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listThesauri operation.
     * @callback module:api/DefaultApi~listThesauriCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListThesauriResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the thesauri for an index.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListThesauriRequest} listThesauriRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listThesauriCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListThesauriResponse}
     */
    listThesauri(xAmzTarget, listThesauriRequest, opts, callback) {
      opts = opts || {};
      let postBody = listThesauriRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listThesauri");
      }
      // verify the required parameter 'listThesauriRequest' is set
      if (listThesauriRequest === undefined || listThesauriRequest === null) {
        throw new Error("Missing the required parameter 'listThesauriRequest' when calling listThesauri");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListThesauriResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSKendraFrontendService.ListThesauri', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putPrincipalMapping operation.
     * @callback module:api/DefaultApi~putPrincipalMappingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Maps users to their groups so that you only need to provide the user ID when you issue the query.</p> <p>You can also map sub groups to groups. For example, the group \"Company Intellectual Property Teams\" includes sub groups \"Research\" and \"Engineering\". These sub groups include their own list of users or people who work in these teams. Only users who work in research and engineering, and therefore belong in the intellectual property group, can see top-secret company documents in their search results.</p> <p>This is useful for user context filtering, where search results are filtered based on the user or their group access to documents. For more information, see <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/user-context-filter.html\">Filtering on user context</a>.</p> <p>If more than five <code>PUT</code> actions for a group are currently processing, a validation exception is thrown.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/PutPrincipalMappingRequest} putPrincipalMappingRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putPrincipalMappingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putPrincipalMapping(xAmzTarget, putPrincipalMappingRequest, opts, callback) {
      opts = opts || {};
      let postBody = putPrincipalMappingRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling putPrincipalMapping");
      }
      // verify the required parameter 'putPrincipalMappingRequest' is set
      if (putPrincipalMappingRequest === undefined || putPrincipalMappingRequest === null) {
        throw new Error("Missing the required parameter 'putPrincipalMappingRequest' when calling putPrincipalMapping");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSKendraFrontendService.PutPrincipalMapping', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the query operation.
     * @callback module:api/DefaultApi~queryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QueryResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Searches an index given an input query.</p> <p>You can configure boosting or relevance tuning at the query level to override boosting at the index level, filter based on document fields/attributes and faceted search, and filter based on the user or their group access to documents. You can also include certain fields in the response that might provide useful additional information.</p> <p>A query response contains three types of results.</p> <ul> <li> <p>Relevant suggested answers. The answers can be either a text excerpt or table excerpt. The answer can be highlighted in the excerpt.</p> </li> <li> <p>Matching FAQs or questions-answer from your FAQ file.</p> </li> <li> <p>Relevant documents. This result type includes an excerpt of the document with the document title. The searched terms can be highlighted in the excerpt.</p> </li> </ul> <p>You can specify that the query return only one type of result using the <code>QueryResultTypeFilter</code> parameter. Each query returns the 100 most relevant results. If you filter result type to only question-answers, a maximum of four results are returned. If you filter result type to only answers, a maximum of three results are returned.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/QueryRequest} queryRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~queryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QueryResult}
     */
    query(xAmzTarget, queryRequest, opts, callback) {
      opts = opts || {};
      let postBody = queryRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling query");
      }
      // verify the required parameter 'queryRequest' is set
      if (queryRequest === undefined || queryRequest === null) {
        throw new Error("Missing the required parameter 'queryRequest' when calling query");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = QueryResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSKendraFrontendService.Query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieve operation.
     * @callback module:api/DefaultApi~retrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RetrieveResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Retrieves relevant passages or text excerpts given an input query.</p> <p>This API is similar to the <a href=\"https://docs.aws.amazon.com/kendra/latest/APIReference/API_Query.html\">Query</a> API. However, by default, the <code>Query</code> API only returns excerpt passages of up to 100 token words. With the <code>Retrieve</code> API, you can retrieve longer passages of up to 200 token words and up to 100 semantically relevant passages. This doesn't include question-answer or FAQ type responses from your index. The passages are text excerpts that can be semantically extracted from multiple documents and multiple parts of the same document. If in extreme cases your documents produce no relevant passages using the <code>Retrieve</code> API, you can alternatively use the <code>Query</code> API.</p> <p>You can also do the following:</p> <ul> <li> <p>Override boosting at the index level</p> </li> <li> <p>Filter based on document fields or attributes</p> </li> <li> <p>Filter based on the user or their group access to documents</p> </li> </ul> <p>You can also include certain fields in the response that might provide useful additional information.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/RetrieveRequest} retrieveRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~retrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RetrieveResult}
     */
    retrieve(xAmzTarget, retrieveRequest, opts, callback) {
      opts = opts || {};
      let postBody = retrieveRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling retrieve");
      }
      // verify the required parameter 'retrieveRequest' is set
      if (retrieveRequest === undefined || retrieveRequest === null) {
        throw new Error("Missing the required parameter 'retrieveRequest' when calling retrieve");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RetrieveResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSKendraFrontendService.Retrieve', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startDataSourceSyncJob operation.
     * @callback module:api/DefaultApi~startDataSourceSyncJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartDataSourceSyncJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts a synchronization job for a data source connector. If a synchronization job is already in progress, Amazon Kendra returns a <code>ResourceInUseException</code> exception.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StartDataSourceSyncJobRequest} startDataSourceSyncJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startDataSourceSyncJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartDataSourceSyncJobResponse}
     */
    startDataSourceSyncJob(xAmzTarget, startDataSourceSyncJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = startDataSourceSyncJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling startDataSourceSyncJob");
      }
      // verify the required parameter 'startDataSourceSyncJobRequest' is set
      if (startDataSourceSyncJobRequest === undefined || startDataSourceSyncJobRequest === null) {
        throw new Error("Missing the required parameter 'startDataSourceSyncJobRequest' when calling startDataSourceSyncJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartDataSourceSyncJobResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSKendraFrontendService.StartDataSourceSyncJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopDataSourceSyncJob operation.
     * @callback module:api/DefaultApi~stopDataSourceSyncJobCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stops a synchronization job that is currently running. You can't stop a scheduled synchronization job.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StopDataSourceSyncJobRequest} stopDataSourceSyncJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~stopDataSourceSyncJobCallback} callback The callback function, accepting three arguments: error, data, response
     */
    stopDataSourceSyncJob(xAmzTarget, stopDataSourceSyncJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = stopDataSourceSyncJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling stopDataSourceSyncJob");
      }
      // verify the required parameter 'stopDataSourceSyncJobRequest' is set
      if (stopDataSourceSyncJobRequest === undefined || stopDataSourceSyncJobRequest === null) {
        throw new Error("Missing the required parameter 'stopDataSourceSyncJobRequest' when calling stopDataSourceSyncJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSKendraFrontendService.StopDataSourceSyncJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitFeedback operation.
     * @callback module:api/DefaultApi~submitFeedbackCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Enables you to provide feedback to Amazon Kendra to improve the performance of your index.</p> <p> <code>SubmitFeedback</code> is currently not supported in the Amazon Web Services GovCloud (US-West) region.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/SubmitFeedbackRequest} submitFeedbackRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~submitFeedbackCallback} callback The callback function, accepting three arguments: error, data, response
     */
    submitFeedback(xAmzTarget, submitFeedbackRequest, opts, callback) {
      opts = opts || {};
      let postBody = submitFeedbackRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling submitFeedback");
      }
      // verify the required parameter 'submitFeedbackRequest' is set
      if (submitFeedbackRequest === undefined || submitFeedbackRequest === null) {
        throw new Error("Missing the required parameter 'submitFeedbackRequest' when calling submitFeedback");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSKendraFrontendService.SubmitFeedback', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds the specified tag to the specified index, FAQ, or data source resource. If the tag already exists, the existing value is replaced with the new value.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    tagResource(xAmzTarget, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSKendraFrontendService.TagResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a tag from an index, FAQ, or a data source.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UntagResourceRequest} untagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    untagResource(xAmzTarget, untagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = untagResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling untagResource");
      }
      // verify the required parameter 'untagResourceRequest' is set
      if (untagResourceRequest === undefined || untagResourceRequest === null) {
        throw new Error("Missing the required parameter 'untagResourceRequest' when calling untagResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSKendraFrontendService.UntagResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAccessControlConfiguration operation.
     * @callback module:api/DefaultApi~updateAccessControlConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Updates an access control configuration for your documents in an index. This includes user and group access information for your documents. This is useful for user context filtering, where search results are filtered based on the user or their group access to documents.</p> <p>You can update an access control configuration you created without indexing all of your documents again. For example, your index contains top-secret company documents that only certain employees or users should access. You created an 'allow' access control configuration for one user who recently joined the 'top-secret' team, switching from a team with 'deny' access to top-secret documents. However, the user suddenly returns to their previous team and should no longer have access to top secret documents. You can update the access control configuration to re-configure access control for your documents as circumstances change.</p> <p>You call the <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/API_BatchPutDocument.html\">BatchPutDocument</a> API to apply the updated access control configuration, with the <code>AccessControlConfigurationId</code> included in the <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/API_Document.html\">Document</a> object. If you use an S3 bucket as a data source, you synchronize your data source to apply the <code>AccessControlConfigurationId</code> in the <code>.metadata.json</code> file. Amazon Kendra currently only supports access control configuration for S3 data sources and documents indexed using the <code>BatchPutDocument</code> API.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateAccessControlConfigurationRequest} updateAccessControlConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateAccessControlConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateAccessControlConfiguration(xAmzTarget, updateAccessControlConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateAccessControlConfigurationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateAccessControlConfiguration");
      }
      // verify the required parameter 'updateAccessControlConfigurationRequest' is set
      if (updateAccessControlConfigurationRequest === undefined || updateAccessControlConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'updateAccessControlConfigurationRequest' when calling updateAccessControlConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSKendraFrontendService.UpdateAccessControlConfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDataSource operation.
     * @callback module:api/DefaultApi~updateDataSourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing Amazon Kendra data source connector.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateDataSourceRequest} updateDataSourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateDataSourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateDataSource(xAmzTarget, updateDataSourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateDataSourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateDataSource");
      }
      // verify the required parameter 'updateDataSourceRequest' is set
      if (updateDataSourceRequest === undefined || updateDataSourceRequest === null) {
        throw new Error("Missing the required parameter 'updateDataSourceRequest' when calling updateDataSource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSKendraFrontendService.UpdateDataSource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateExperience operation.
     * @callback module:api/DefaultApi~updateExperienceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates your Amazon Kendra experience such as a search application. For more information on creating a search application experience, see <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html\">Building a search experience with no code</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateExperienceRequest} updateExperienceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateExperienceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateExperience(xAmzTarget, updateExperienceRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateExperienceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateExperience");
      }
      // verify the required parameter 'updateExperienceRequest' is set
      if (updateExperienceRequest === undefined || updateExperienceRequest === null) {
        throw new Error("Missing the required parameter 'updateExperienceRequest' when calling updateExperience");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSKendraFrontendService.UpdateExperience', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFeaturedResultsSet operation.
     * @callback module:api/DefaultApi~updateFeaturedResultsSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateFeaturedResultsSetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a set of featured results. Features results are placed above all other results for certain queries. You map specific queries to specific documents for featuring in the results. If a query contains an exact match of a query, then one or more specific documents are featured in the search results.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateFeaturedResultsSetRequest} updateFeaturedResultsSetRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateFeaturedResultsSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateFeaturedResultsSetResponse}
     */
    updateFeaturedResultsSet(xAmzTarget, updateFeaturedResultsSetRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateFeaturedResultsSetRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateFeaturedResultsSet");
      }
      // verify the required parameter 'updateFeaturedResultsSetRequest' is set
      if (updateFeaturedResultsSetRequest === undefined || updateFeaturedResultsSetRequest === null) {
        throw new Error("Missing the required parameter 'updateFeaturedResultsSetRequest' when calling updateFeaturedResultsSet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateFeaturedResultsSetResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSKendraFrontendService.UpdateFeaturedResultsSet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateIndex operation.
     * @callback module:api/DefaultApi~updateIndexCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing Amazon Kendra index.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateIndexRequest} updateIndexRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateIndexCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateIndex(xAmzTarget, updateIndexRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateIndexRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateIndex");
      }
      // verify the required parameter 'updateIndexRequest' is set
      if (updateIndexRequest === undefined || updateIndexRequest === null) {
        throw new Error("Missing the required parameter 'updateIndexRequest' when calling updateIndex");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSKendraFrontendService.UpdateIndex', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateQuerySuggestionsBlockList operation.
     * @callback module:api/DefaultApi~updateQuerySuggestionsBlockListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Updates a block list used for query suggestions for an index.</p> <p>Updates to a block list might not take effect right away. Amazon Kendra needs to refresh the entire suggestions list to apply any updates to the block list. Other changes not related to the block list apply immediately.</p> <p>If a block list is updating, then you need to wait for the first update to finish before submitting another update.</p> <p>Amazon Kendra supports partial updates, so you only need to provide the fields you want to update.</p> <p> <code>UpdateQuerySuggestionsBlockList</code> is currently not supported in the Amazon Web Services GovCloud (US-West) region.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateQuerySuggestionsBlockListRequest} updateQuerySuggestionsBlockListRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateQuerySuggestionsBlockListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateQuerySuggestionsBlockList(xAmzTarget, updateQuerySuggestionsBlockListRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateQuerySuggestionsBlockListRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateQuerySuggestionsBlockList");
      }
      // verify the required parameter 'updateQuerySuggestionsBlockListRequest' is set
      if (updateQuerySuggestionsBlockListRequest === undefined || updateQuerySuggestionsBlockListRequest === null) {
        throw new Error("Missing the required parameter 'updateQuerySuggestionsBlockListRequest' when calling updateQuerySuggestionsBlockList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSKendraFrontendService.UpdateQuerySuggestionsBlockList', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateQuerySuggestionsConfig operation.
     * @callback module:api/DefaultApi~updateQuerySuggestionsConfigCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Updates the settings of query suggestions for an index.</p> <p>Amazon Kendra supports partial updates, so you only need to provide the fields you want to update.</p> <p>If an update is currently processing, you need to wait for the update to finish before making another update.</p> <p>Updates to query suggestions settings might not take effect right away. The time for your updated settings to take effect depends on the updates made and the number of search queries in your index.</p> <p>You can still enable/disable query suggestions at any time.</p> <p> <code>UpdateQuerySuggestionsConfig</code> is currently not supported in the Amazon Web Services GovCloud (US-West) region.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateQuerySuggestionsConfigRequest} updateQuerySuggestionsConfigRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateQuerySuggestionsConfigCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateQuerySuggestionsConfig(xAmzTarget, updateQuerySuggestionsConfigRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateQuerySuggestionsConfigRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateQuerySuggestionsConfig");
      }
      // verify the required parameter 'updateQuerySuggestionsConfigRequest' is set
      if (updateQuerySuggestionsConfigRequest === undefined || updateQuerySuggestionsConfigRequest === null) {
        throw new Error("Missing the required parameter 'updateQuerySuggestionsConfigRequest' when calling updateQuerySuggestionsConfig");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSKendraFrontendService.UpdateQuerySuggestionsConfig', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateThesaurus operation.
     * @callback module:api/DefaultApi~updateThesaurusCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a thesaurus for an index.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateThesaurusRequest} updateThesaurusRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateThesaurusCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateThesaurus(xAmzTarget, updateThesaurusRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateThesaurusRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateThesaurus");
      }
      // verify the required parameter 'updateThesaurusRequest' is set
      if (updateThesaurusRequest === undefined || updateThesaurusRequest === null) {
        throw new Error("Missing the required parameter 'updateThesaurusRequest' when calling updateThesaurus");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSKendraFrontendService.UpdateThesaurus', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
