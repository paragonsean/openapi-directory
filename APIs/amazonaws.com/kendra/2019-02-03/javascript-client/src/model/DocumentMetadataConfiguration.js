/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DocumentAttributeValueType from './DocumentAttributeValueType';
import DocumentMetadataConfigurationRelevance from './DocumentMetadataConfigurationRelevance';
import DocumentMetadataConfigurationSearch from './DocumentMetadataConfigurationSearch';

/**
 * The DocumentMetadataConfiguration model module.
 * @module model/DocumentMetadataConfiguration
 * @version 2019-02-03
 */
class DocumentMetadataConfiguration {
    /**
     * Constructs a new <code>DocumentMetadataConfiguration</code>.
     * Specifies the properties, such as relevance tuning and searchability, of an index field.
     * @alias module:model/DocumentMetadataConfiguration
     * @param name {String} 
     * @param type {module:model/DocumentAttributeValueType} 
     */
    constructor(name, type) { 
        
        DocumentMetadataConfiguration.initialize(this, name, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, type) { 
        obj['Name'] = name;
        obj['Type'] = type;
    }

    /**
     * Constructs a <code>DocumentMetadataConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DocumentMetadataConfiguration} obj Optional instance to populate.
     * @return {module:model/DocumentMetadataConfiguration} The populated <code>DocumentMetadataConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DocumentMetadataConfiguration();

            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Type')) {
                obj['Type'] = ApiClient.convertToType(data['Type'], DocumentAttributeValueType);
            }
            if (data.hasOwnProperty('Relevance')) {
                obj['Relevance'] = DocumentMetadataConfigurationRelevance.constructFromObject(data['Relevance']);
            }
            if (data.hasOwnProperty('Search')) {
                obj['Search'] = DocumentMetadataConfigurationSearch.constructFromObject(data['Search']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DocumentMetadataConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DocumentMetadataConfiguration</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DocumentMetadataConfiguration.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `Name`
        if (data['Name']) { // data not null
          String.validateJSON(data['Name']);
        }
        // validate the optional field `Type`
        if (data['Type']) { // data not null
          DocumentAttributeValueType.validateJSON(data['Type']);
        }
        // validate the optional field `Relevance`
        if (data['Relevance']) { // data not null
          DocumentMetadataConfigurationRelevance.validateJSON(data['Relevance']);
        }
        // validate the optional field `Search`
        if (data['Search']) { // data not null
          DocumentMetadataConfigurationSearch.validateJSON(data['Search']);
        }

        return true;
    }


}

DocumentMetadataConfiguration.RequiredProperties = ["Name", "Type"];

/**
 * @member {String} Name
 */
DocumentMetadataConfiguration.prototype['Name'] = undefined;

/**
 * @member {module:model/DocumentAttributeValueType} Type
 */
DocumentMetadataConfiguration.prototype['Type'] = undefined;

/**
 * @member {module:model/DocumentMetadataConfigurationRelevance} Relevance
 */
DocumentMetadataConfiguration.prototype['Relevance'] = undefined;

/**
 * @member {module:model/DocumentMetadataConfigurationSearch} Search
 */
DocumentMetadataConfiguration.prototype['Search'] = undefined;






export default DocumentMetadataConfiguration;

