/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HookConfigurationInvocationCondition from './HookConfigurationInvocationCondition';

/**
 * The HookConfiguration model module.
 * @module model/HookConfiguration
 * @version 2019-02-03
 */
class HookConfiguration {
    /**
     * Constructs a new <code>HookConfiguration</code>.
     * &lt;p&gt;Provides the configuration information for invoking a Lambda function in Lambda to alter document metadata and content when ingesting documents into Amazon Kendra. You can configure your Lambda function using &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kendra/latest/dg/API_CustomDocumentEnrichmentConfiguration.html\&quot;&gt;PreExtractionHookConfiguration&lt;/a&gt; if you want to apply advanced alterations on the original or raw documents. If you want to apply advanced alterations on the Amazon Kendra structured documents, you must configure your Lambda function using &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kendra/latest/dg/API_CustomDocumentEnrichmentConfiguration.html\&quot;&gt;PostExtractionHookConfiguration&lt;/a&gt;. You can only invoke one Lambda function. However, this function can invoke other functions it requires.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kendra/latest/dg/custom-document-enrichment.html\&quot;&gt;Customizing document metadata during the ingestion process&lt;/a&gt;.&lt;/p&gt;
     * @alias module:model/HookConfiguration
     * @param lambdaArn {String} 
     * @param s3Bucket {String} 
     */
    constructor(lambdaArn, s3Bucket) { 
        
        HookConfiguration.initialize(this, lambdaArn, s3Bucket);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, lambdaArn, s3Bucket) { 
        obj['LambdaArn'] = lambdaArn;
        obj['S3Bucket'] = s3Bucket;
    }

    /**
     * Constructs a <code>HookConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HookConfiguration} obj Optional instance to populate.
     * @return {module:model/HookConfiguration} The populated <code>HookConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HookConfiguration();

            if (data.hasOwnProperty('InvocationCondition')) {
                obj['InvocationCondition'] = HookConfigurationInvocationCondition.constructFromObject(data['InvocationCondition']);
            }
            if (data.hasOwnProperty('LambdaArn')) {
                obj['LambdaArn'] = ApiClient.convertToType(data['LambdaArn'], 'String');
            }
            if (data.hasOwnProperty('S3Bucket')) {
                obj['S3Bucket'] = ApiClient.convertToType(data['S3Bucket'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HookConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HookConfiguration</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of HookConfiguration.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `InvocationCondition`
        if (data['InvocationCondition']) { // data not null
          HookConfigurationInvocationCondition.validateJSON(data['InvocationCondition']);
        }
        // validate the optional field `LambdaArn`
        if (data['LambdaArn']) { // data not null
          String.validateJSON(data['LambdaArn']);
        }
        // validate the optional field `S3Bucket`
        if (data['S3Bucket']) { // data not null
          String.validateJSON(data['S3Bucket']);
        }

        return true;
    }


}

HookConfiguration.RequiredProperties = ["LambdaArn", "S3Bucket"];

/**
 * @member {module:model/HookConfigurationInvocationCondition} InvocationCondition
 */
HookConfiguration.prototype['InvocationCondition'] = undefined;

/**
 * @member {String} LambdaArn
 */
HookConfiguration.prototype['LambdaArn'] = undefined;

/**
 * @member {String} S3Bucket
 */
HookConfiguration.prototype['S3Bucket'] = undefined;






export default HookConfiguration;

