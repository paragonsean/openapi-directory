/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ColumnConfiguration from './ColumnConfiguration';

/**
 * The DatabaseConfigurationColumnConfiguration model module.
 * @module model/DatabaseConfigurationColumnConfiguration
 * @version 2019-02-03
 */
class DatabaseConfigurationColumnConfiguration {
    /**
     * Constructs a new <code>DatabaseConfigurationColumnConfiguration</code>.
     * @alias module:model/DatabaseConfigurationColumnConfiguration
     * @implements module:model/ColumnConfiguration
     * @param documentIdColumnName {String} 
     * @param documentDataColumnName {String} 
     * @param changeDetectingColumns {Array} 
     */
    constructor(documentIdColumnName, documentDataColumnName, changeDetectingColumns) { 
        ColumnConfiguration.initialize(this, documentIdColumnName, documentDataColumnName, changeDetectingColumns);
        DatabaseConfigurationColumnConfiguration.initialize(this, documentIdColumnName, documentDataColumnName, changeDetectingColumns);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, documentIdColumnName, documentDataColumnName, changeDetectingColumns) { 
        obj['DocumentIdColumnName'] = documentIdColumnName;
        obj['DocumentDataColumnName'] = documentDataColumnName;
        obj['ChangeDetectingColumns'] = changeDetectingColumns;
    }

    /**
     * Constructs a <code>DatabaseConfigurationColumnConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DatabaseConfigurationColumnConfiguration} obj Optional instance to populate.
     * @return {module:model/DatabaseConfigurationColumnConfiguration} The populated <code>DatabaseConfigurationColumnConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DatabaseConfigurationColumnConfiguration();
            ColumnConfiguration.constructFromObject(data, obj);

            if (data.hasOwnProperty('DocumentIdColumnName')) {
                obj['DocumentIdColumnName'] = ApiClient.convertToType(data['DocumentIdColumnName'], 'String');
            }
            if (data.hasOwnProperty('DocumentDataColumnName')) {
                obj['DocumentDataColumnName'] = ApiClient.convertToType(data['DocumentDataColumnName'], 'String');
            }
            if (data.hasOwnProperty('DocumentTitleColumnName')) {
                obj['DocumentTitleColumnName'] = ApiClient.convertToType(data['DocumentTitleColumnName'], 'String');
            }
            if (data.hasOwnProperty('FieldMappings')) {
                obj['FieldMappings'] = ApiClient.convertToType(data['FieldMappings'], Array);
            }
            if (data.hasOwnProperty('ChangeDetectingColumns')) {
                obj['ChangeDetectingColumns'] = ApiClient.convertToType(data['ChangeDetectingColumns'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DatabaseConfigurationColumnConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DatabaseConfigurationColumnConfiguration</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DatabaseConfigurationColumnConfiguration.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `DocumentIdColumnName`
        if (data['DocumentIdColumnName']) { // data not null
          String.validateJSON(data['DocumentIdColumnName']);
        }
        // validate the optional field `DocumentDataColumnName`
        if (data['DocumentDataColumnName']) { // data not null
          String.validateJSON(data['DocumentDataColumnName']);
        }
        // validate the optional field `DocumentTitleColumnName`
        if (data['DocumentTitleColumnName']) { // data not null
          String.validateJSON(data['DocumentTitleColumnName']);
        }
        // validate the optional field `FieldMappings`
        if (data['FieldMappings']) { // data not null
          Array.validateJSON(data['FieldMappings']);
        }
        // validate the optional field `ChangeDetectingColumns`
        if (data['ChangeDetectingColumns']) { // data not null
          Array.validateJSON(data['ChangeDetectingColumns']);
        }

        return true;
    }


}

DatabaseConfigurationColumnConfiguration.RequiredProperties = ["DocumentIdColumnName", "DocumentDataColumnName", "ChangeDetectingColumns"];

/**
 * @member {String} DocumentIdColumnName
 */
DatabaseConfigurationColumnConfiguration.prototype['DocumentIdColumnName'] = undefined;

/**
 * @member {String} DocumentDataColumnName
 */
DatabaseConfigurationColumnConfiguration.prototype['DocumentDataColumnName'] = undefined;

/**
 * @member {String} DocumentTitleColumnName
 */
DatabaseConfigurationColumnConfiguration.prototype['DocumentTitleColumnName'] = undefined;

/**
 * @member {Array} FieldMappings
 */
DatabaseConfigurationColumnConfiguration.prototype['FieldMappings'] = undefined;

/**
 * @member {Array} ChangeDetectingColumns
 */
DatabaseConfigurationColumnConfiguration.prototype['ChangeDetectingColumns'] = undefined;


// Implement ColumnConfiguration interface:
/**
 * @member {String} DocumentIdColumnName
 */
ColumnConfiguration.prototype['DocumentIdColumnName'] = undefined;
/**
 * @member {String} DocumentDataColumnName
 */
ColumnConfiguration.prototype['DocumentDataColumnName'] = undefined;
/**
 * @member {String} DocumentTitleColumnName
 */
ColumnConfiguration.prototype['DocumentTitleColumnName'] = undefined;
/**
 * @member {Array} FieldMappings
 */
ColumnConfiguration.prototype['FieldMappings'] = undefined;
/**
 * @member {Array} ChangeDetectingColumns
 */
ColumnConfiguration.prototype['ChangeDetectingColumns'] = undefined;




export default DatabaseConfigurationColumnConfiguration;

