/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DocumentInfo model module.
 * @module model/DocumentInfo
 * @version 2019-02-03
 */
class DocumentInfo {
    /**
     * Constructs a new <code>DocumentInfo</code>.
     * Identifies a document for which to retrieve status information
     * @alias module:model/DocumentInfo
     * @param documentId {String} 
     */
    constructor(documentId) { 
        
        DocumentInfo.initialize(this, documentId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, documentId) { 
        obj['DocumentId'] = documentId;
    }

    /**
     * Constructs a <code>DocumentInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DocumentInfo} obj Optional instance to populate.
     * @return {module:model/DocumentInfo} The populated <code>DocumentInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DocumentInfo();

            if (data.hasOwnProperty('DocumentId')) {
                obj['DocumentId'] = ApiClient.convertToType(data['DocumentId'], 'String');
            }
            if (data.hasOwnProperty('Attributes')) {
                obj['Attributes'] = ApiClient.convertToType(data['Attributes'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DocumentInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DocumentInfo</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DocumentInfo.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `DocumentId`
        if (data['DocumentId']) { // data not null
          String.validateJSON(data['DocumentId']);
        }
        // validate the optional field `Attributes`
        if (data['Attributes']) { // data not null
          Array.validateJSON(data['Attributes']);
        }

        return true;
    }


}

DocumentInfo.RequiredProperties = ["DocumentId"];

/**
 * @member {String} DocumentId
 */
DocumentInfo.prototype['DocumentId'] = undefined;

/**
 * @member {Array} Attributes
 */
DocumentInfo.prototype['Attributes'] = undefined;






export default DocumentInfo;

