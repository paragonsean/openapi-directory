/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConditionOperator from './ConditionOperator';
import DocumentAttributeConditionConditionOnValue from './DocumentAttributeConditionConditionOnValue';

/**
 * The DocumentAttributeCondition model module.
 * @module model/DocumentAttributeCondition
 * @version 2019-02-03
 */
class DocumentAttributeCondition {
    /**
     * Constructs a new <code>DocumentAttributeCondition</code>.
     * &lt;p&gt;The condition used for the target document attribute or metadata field when ingesting documents into Amazon Kendra. You use this with &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kendra/latest/dg/API_DocumentAttributeTarget.html\&quot;&gt;DocumentAttributeTarget to apply the condition&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For example, you can create the &#39;Department&#39; target field and have it prefill department names associated with the documents based on information in the &#39;Source_URI&#39; field. Set the condition that if the &#39;Source_URI&#39; field contains &#39;financial&#39; in its URI value, then prefill the target field &#39;Department&#39; with the target value &#39;Finance&#39; for the document.&lt;/p&gt; &lt;p&gt;Amazon Kendra cannot create a target field if it has not already been created as an index field. After you create your index field, you can create a document metadata field using &lt;code&gt;DocumentAttributeTarget&lt;/code&gt;. Amazon Kendra then will map your newly created metadata field to your index field.&lt;/p&gt;
     * @alias module:model/DocumentAttributeCondition
     * @param conditionDocumentAttributeKey {String} 
     * @param operator {module:model/ConditionOperator} 
     */
    constructor(conditionDocumentAttributeKey, operator) { 
        
        DocumentAttributeCondition.initialize(this, conditionDocumentAttributeKey, operator);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, conditionDocumentAttributeKey, operator) { 
        obj['ConditionDocumentAttributeKey'] = conditionDocumentAttributeKey;
        obj['Operator'] = operator;
    }

    /**
     * Constructs a <code>DocumentAttributeCondition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DocumentAttributeCondition} obj Optional instance to populate.
     * @return {module:model/DocumentAttributeCondition} The populated <code>DocumentAttributeCondition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DocumentAttributeCondition();

            if (data.hasOwnProperty('ConditionDocumentAttributeKey')) {
                obj['ConditionDocumentAttributeKey'] = ApiClient.convertToType(data['ConditionDocumentAttributeKey'], 'String');
            }
            if (data.hasOwnProperty('Operator')) {
                obj['Operator'] = ApiClient.convertToType(data['Operator'], ConditionOperator);
            }
            if (data.hasOwnProperty('ConditionOnValue')) {
                obj['ConditionOnValue'] = DocumentAttributeConditionConditionOnValue.constructFromObject(data['ConditionOnValue']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DocumentAttributeCondition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DocumentAttributeCondition</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DocumentAttributeCondition.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `ConditionDocumentAttributeKey`
        if (data['ConditionDocumentAttributeKey']) { // data not null
          String.validateJSON(data['ConditionDocumentAttributeKey']);
        }
        // validate the optional field `Operator`
        if (data['Operator']) { // data not null
          ConditionOperator.validateJSON(data['Operator']);
        }
        // validate the optional field `ConditionOnValue`
        if (data['ConditionOnValue']) { // data not null
          DocumentAttributeConditionConditionOnValue.validateJSON(data['ConditionOnValue']);
        }

        return true;
    }


}

DocumentAttributeCondition.RequiredProperties = ["ConditionDocumentAttributeKey", "Operator"];

/**
 * @member {String} ConditionDocumentAttributeKey
 */
DocumentAttributeCondition.prototype['ConditionDocumentAttributeKey'] = undefined;

/**
 * @member {module:model/ConditionOperator} Operator
 */
DocumentAttributeCondition.prototype['Operator'] = undefined;

/**
 * @member {module:model/DocumentAttributeConditionConditionOnValue} ConditionOnValue
 */
DocumentAttributeCondition.prototype['ConditionOnValue'] = undefined;






export default DocumentAttributeCondition;

