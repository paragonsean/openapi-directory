/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SlackConfigurationVpcConfiguration from './SlackConfigurationVpcConfiguration';

/**
 * The SlackConfiguration model module.
 * @module model/SlackConfiguration
 * @version 2019-02-03
 */
class SlackConfiguration {
    /**
     * Constructs a new <code>SlackConfiguration</code>.
     * Provides the configuration information to connect to Slack as your data source.
     * @alias module:model/SlackConfiguration
     * @param teamId {String} 
     * @param secretArn {String} 
     * @param slackEntityList {Array} 
     * @param sinceCrawlDate {String} 
     */
    constructor(teamId, secretArn, slackEntityList, sinceCrawlDate) { 
        
        SlackConfiguration.initialize(this, teamId, secretArn, slackEntityList, sinceCrawlDate);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, teamId, secretArn, slackEntityList, sinceCrawlDate) { 
        obj['TeamId'] = teamId;
        obj['SecretArn'] = secretArn;
        obj['SlackEntityList'] = slackEntityList;
        obj['SinceCrawlDate'] = sinceCrawlDate;
    }

    /**
     * Constructs a <code>SlackConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SlackConfiguration} obj Optional instance to populate.
     * @return {module:model/SlackConfiguration} The populated <code>SlackConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SlackConfiguration();

            if (data.hasOwnProperty('TeamId')) {
                obj['TeamId'] = ApiClient.convertToType(data['TeamId'], 'String');
            }
            if (data.hasOwnProperty('SecretArn')) {
                obj['SecretArn'] = ApiClient.convertToType(data['SecretArn'], 'String');
            }
            if (data.hasOwnProperty('VpcConfiguration')) {
                obj['VpcConfiguration'] = SlackConfigurationVpcConfiguration.constructFromObject(data['VpcConfiguration']);
            }
            if (data.hasOwnProperty('SlackEntityList')) {
                obj['SlackEntityList'] = ApiClient.convertToType(data['SlackEntityList'], Array);
            }
            if (data.hasOwnProperty('UseChangeLog')) {
                obj['UseChangeLog'] = ApiClient.convertToType(data['UseChangeLog'], 'Boolean');
            }
            if (data.hasOwnProperty('CrawlBotMessage')) {
                obj['CrawlBotMessage'] = ApiClient.convertToType(data['CrawlBotMessage'], 'Boolean');
            }
            if (data.hasOwnProperty('ExcludeArchived')) {
                obj['ExcludeArchived'] = ApiClient.convertToType(data['ExcludeArchived'], 'Boolean');
            }
            if (data.hasOwnProperty('SinceCrawlDate')) {
                obj['SinceCrawlDate'] = ApiClient.convertToType(data['SinceCrawlDate'], 'String');
            }
            if (data.hasOwnProperty('LookBackPeriod')) {
                obj['LookBackPeriod'] = ApiClient.convertToType(data['LookBackPeriod'], 'Number');
            }
            if (data.hasOwnProperty('PrivateChannelFilter')) {
                obj['PrivateChannelFilter'] = ApiClient.convertToType(data['PrivateChannelFilter'], Array);
            }
            if (data.hasOwnProperty('PublicChannelFilter')) {
                obj['PublicChannelFilter'] = ApiClient.convertToType(data['PublicChannelFilter'], Array);
            }
            if (data.hasOwnProperty('InclusionPatterns')) {
                obj['InclusionPatterns'] = ApiClient.convertToType(data['InclusionPatterns'], Array);
            }
            if (data.hasOwnProperty('ExclusionPatterns')) {
                obj['ExclusionPatterns'] = ApiClient.convertToType(data['ExclusionPatterns'], Array);
            }
            if (data.hasOwnProperty('FieldMappings')) {
                obj['FieldMappings'] = ApiClient.convertToType(data['FieldMappings'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SlackConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SlackConfiguration</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SlackConfiguration.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `TeamId`
        if (data['TeamId']) { // data not null
          String.validateJSON(data['TeamId']);
        }
        // validate the optional field `SecretArn`
        if (data['SecretArn']) { // data not null
          String.validateJSON(data['SecretArn']);
        }
        // validate the optional field `VpcConfiguration`
        if (data['VpcConfiguration']) { // data not null
          SlackConfigurationVpcConfiguration.validateJSON(data['VpcConfiguration']);
        }
        // validate the optional field `SlackEntityList`
        if (data['SlackEntityList']) { // data not null
          Array.validateJSON(data['SlackEntityList']);
        }
        // validate the optional field `UseChangeLog`
        if (data['UseChangeLog']) { // data not null
          Boolean.validateJSON(data['UseChangeLog']);
        }
        // validate the optional field `CrawlBotMessage`
        if (data['CrawlBotMessage']) { // data not null
          Boolean.validateJSON(data['CrawlBotMessage']);
        }
        // validate the optional field `ExcludeArchived`
        if (data['ExcludeArchived']) { // data not null
          Boolean.validateJSON(data['ExcludeArchived']);
        }
        // validate the optional field `SinceCrawlDate`
        if (data['SinceCrawlDate']) { // data not null
          String.validateJSON(data['SinceCrawlDate']);
        }
        // validate the optional field `LookBackPeriod`
        if (data['LookBackPeriod']) { // data not null
          Number.validateJSON(data['LookBackPeriod']);
        }
        // validate the optional field `PrivateChannelFilter`
        if (data['PrivateChannelFilter']) { // data not null
          Array.validateJSON(data['PrivateChannelFilter']);
        }
        // validate the optional field `PublicChannelFilter`
        if (data['PublicChannelFilter']) { // data not null
          Array.validateJSON(data['PublicChannelFilter']);
        }
        // validate the optional field `InclusionPatterns`
        if (data['InclusionPatterns']) { // data not null
          Array.validateJSON(data['InclusionPatterns']);
        }
        // validate the optional field `ExclusionPatterns`
        if (data['ExclusionPatterns']) { // data not null
          Array.validateJSON(data['ExclusionPatterns']);
        }
        // validate the optional field `FieldMappings`
        if (data['FieldMappings']) { // data not null
          Array.validateJSON(data['FieldMappings']);
        }

        return true;
    }


}

SlackConfiguration.RequiredProperties = ["TeamId", "SecretArn", "SlackEntityList", "SinceCrawlDate"];

/**
 * @member {String} TeamId
 */
SlackConfiguration.prototype['TeamId'] = undefined;

/**
 * @member {String} SecretArn
 */
SlackConfiguration.prototype['SecretArn'] = undefined;

/**
 * @member {module:model/SlackConfigurationVpcConfiguration} VpcConfiguration
 */
SlackConfiguration.prototype['VpcConfiguration'] = undefined;

/**
 * @member {Array} SlackEntityList
 */
SlackConfiguration.prototype['SlackEntityList'] = undefined;

/**
 * @member {Boolean} UseChangeLog
 */
SlackConfiguration.prototype['UseChangeLog'] = undefined;

/**
 * @member {Boolean} CrawlBotMessage
 */
SlackConfiguration.prototype['CrawlBotMessage'] = undefined;

/**
 * @member {Boolean} ExcludeArchived
 */
SlackConfiguration.prototype['ExcludeArchived'] = undefined;

/**
 * @member {String} SinceCrawlDate
 */
SlackConfiguration.prototype['SinceCrawlDate'] = undefined;

/**
 * @member {Number} LookBackPeriod
 */
SlackConfiguration.prototype['LookBackPeriod'] = undefined;

/**
 * @member {Array} PrivateChannelFilter
 */
SlackConfiguration.prototype['PrivateChannelFilter'] = undefined;

/**
 * @member {Array} PublicChannelFilter
 */
SlackConfiguration.prototype['PublicChannelFilter'] = undefined;

/**
 * @member {Array} InclusionPatterns
 */
SlackConfiguration.prototype['InclusionPatterns'] = undefined;

/**
 * @member {Array} ExclusionPatterns
 */
SlackConfiguration.prototype['ExclusionPatterns'] = undefined;

/**
 * @member {Array} FieldMappings
 */
SlackConfiguration.prototype['FieldMappings'] = undefined;






export default SlackConfiguration;

