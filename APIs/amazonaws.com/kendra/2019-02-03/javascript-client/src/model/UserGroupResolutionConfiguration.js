/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UserGroupResolutionMode from './UserGroupResolutionMode';

/**
 * The UserGroupResolutionConfiguration model module.
 * @module model/UserGroupResolutionConfiguration
 * @version 2019-02-03
 */
class UserGroupResolutionConfiguration {
    /**
     * Constructs a new <code>UserGroupResolutionConfiguration</code>.
     * &lt;p&gt;Provides the configuration information to get users and groups from an IAM Identity Center (successor to Single Sign-On) identity source. This is useful for user context filtering, where search results are filtered based on the user or their group access to documents. You can also use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kendra/latest/dg/API_PutPrincipalMapping.html\&quot;&gt;PutPrincipalMapping&lt;/a&gt; API to map users to their groups so that you only need to provide the user ID when you issue the query.&lt;/p&gt; &lt;p&gt;To set up an IAM Identity Center identity source in the console to use with Amazon Kendra, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kendra/latest/dg/getting-started-aws-sso.html\&quot;&gt;Getting started with an IAM Identity Center identity source&lt;/a&gt;. You must also grant the required permissions to use IAM Identity Center with Amazon Kendra. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kendra/latest/dg/iam-roles.html#iam-roles-aws-sso\&quot;&gt;IAM roles for IAM Identity Center&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Amazon Kendra currently does not support using &lt;code&gt;UserGroupResolutionConfiguration&lt;/code&gt; with an Amazon Web Services organization member account for your IAM Identity Center identify source. You must create your index in the management account for the organization in order to use &lt;code&gt;UserGroupResolutionConfiguration&lt;/code&gt;.&lt;/p&gt;
     * @alias module:model/UserGroupResolutionConfiguration
     * @param userGroupResolutionMode {module:model/UserGroupResolutionMode} 
     */
    constructor(userGroupResolutionMode) { 
        
        UserGroupResolutionConfiguration.initialize(this, userGroupResolutionMode);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, userGroupResolutionMode) { 
        obj['UserGroupResolutionMode'] = userGroupResolutionMode;
    }

    /**
     * Constructs a <code>UserGroupResolutionConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserGroupResolutionConfiguration} obj Optional instance to populate.
     * @return {module:model/UserGroupResolutionConfiguration} The populated <code>UserGroupResolutionConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserGroupResolutionConfiguration();

            if (data.hasOwnProperty('UserGroupResolutionMode')) {
                obj['UserGroupResolutionMode'] = ApiClient.convertToType(data['UserGroupResolutionMode'], UserGroupResolutionMode);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserGroupResolutionConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserGroupResolutionConfiguration</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UserGroupResolutionConfiguration.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `UserGroupResolutionMode`
        if (data['UserGroupResolutionMode']) { // data not null
          UserGroupResolutionMode.validateJSON(data['UserGroupResolutionMode']);
        }

        return true;
    }


}

UserGroupResolutionConfiguration.RequiredProperties = ["UserGroupResolutionMode"];

/**
 * @member {module:model/UserGroupResolutionMode} UserGroupResolutionMode
 */
UserGroupResolutionConfiguration.prototype['UserGroupResolutionMode'] = undefined;






export default UserGroupResolutionConfiguration;

