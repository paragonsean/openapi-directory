/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SharePointConfigurationProxyConfiguration from './SharePointConfigurationProxyConfiguration';
import SharePointConfigurationSslCertificateS3Path from './SharePointConfigurationSslCertificateS3Path';
import SharePointConfigurationVpcConfiguration from './SharePointConfigurationVpcConfiguration';
import SharePointOnlineAuthenticationType from './SharePointOnlineAuthenticationType';
import SharePointVersion from './SharePointVersion';

/**
 * The SharePointConfiguration model module.
 * @module model/SharePointConfiguration
 * @version 2019-02-03
 */
class SharePointConfiguration {
    /**
     * Constructs a new <code>SharePointConfiguration</code>.
     * Provides the configuration information to connect to Microsoft SharePoint as your data source.
     * @alias module:model/SharePointConfiguration
     * @param sharePointVersion {module:model/SharePointVersion} 
     * @param urls {Array} 
     * @param secretArn {String} 
     */
    constructor(sharePointVersion, urls, secretArn) { 
        
        SharePointConfiguration.initialize(this, sharePointVersion, urls, secretArn);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, sharePointVersion, urls, secretArn) { 
        obj['SharePointVersion'] = sharePointVersion;
        obj['Urls'] = urls;
        obj['SecretArn'] = secretArn;
    }

    /**
     * Constructs a <code>SharePointConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SharePointConfiguration} obj Optional instance to populate.
     * @return {module:model/SharePointConfiguration} The populated <code>SharePointConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SharePointConfiguration();

            if (data.hasOwnProperty('SharePointVersion')) {
                obj['SharePointVersion'] = ApiClient.convertToType(data['SharePointVersion'], SharePointVersion);
            }
            if (data.hasOwnProperty('Urls')) {
                obj['Urls'] = ApiClient.convertToType(data['Urls'], Array);
            }
            if (data.hasOwnProperty('SecretArn')) {
                obj['SecretArn'] = ApiClient.convertToType(data['SecretArn'], 'String');
            }
            if (data.hasOwnProperty('CrawlAttachments')) {
                obj['CrawlAttachments'] = ApiClient.convertToType(data['CrawlAttachments'], 'Boolean');
            }
            if (data.hasOwnProperty('UseChangeLog')) {
                obj['UseChangeLog'] = ApiClient.convertToType(data['UseChangeLog'], 'Boolean');
            }
            if (data.hasOwnProperty('InclusionPatterns')) {
                obj['InclusionPatterns'] = ApiClient.convertToType(data['InclusionPatterns'], Array);
            }
            if (data.hasOwnProperty('ExclusionPatterns')) {
                obj['ExclusionPatterns'] = ApiClient.convertToType(data['ExclusionPatterns'], Array);
            }
            if (data.hasOwnProperty('VpcConfiguration')) {
                obj['VpcConfiguration'] = SharePointConfigurationVpcConfiguration.constructFromObject(data['VpcConfiguration']);
            }
            if (data.hasOwnProperty('FieldMappings')) {
                obj['FieldMappings'] = ApiClient.convertToType(data['FieldMappings'], Array);
            }
            if (data.hasOwnProperty('DocumentTitleFieldName')) {
                obj['DocumentTitleFieldName'] = ApiClient.convertToType(data['DocumentTitleFieldName'], 'String');
            }
            if (data.hasOwnProperty('DisableLocalGroups')) {
                obj['DisableLocalGroups'] = ApiClient.convertToType(data['DisableLocalGroups'], 'Boolean');
            }
            if (data.hasOwnProperty('SslCertificateS3Path')) {
                obj['SslCertificateS3Path'] = SharePointConfigurationSslCertificateS3Path.constructFromObject(data['SslCertificateS3Path']);
            }
            if (data.hasOwnProperty('AuthenticationType')) {
                obj['AuthenticationType'] = ApiClient.convertToType(data['AuthenticationType'], SharePointOnlineAuthenticationType);
            }
            if (data.hasOwnProperty('ProxyConfiguration')) {
                obj['ProxyConfiguration'] = SharePointConfigurationProxyConfiguration.constructFromObject(data['ProxyConfiguration']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SharePointConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SharePointConfiguration</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SharePointConfiguration.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `SharePointVersion`
        if (data['SharePointVersion']) { // data not null
          SharePointVersion.validateJSON(data['SharePointVersion']);
        }
        // validate the optional field `Urls`
        if (data['Urls']) { // data not null
          Array.validateJSON(data['Urls']);
        }
        // validate the optional field `SecretArn`
        if (data['SecretArn']) { // data not null
          String.validateJSON(data['SecretArn']);
        }
        // validate the optional field `CrawlAttachments`
        if (data['CrawlAttachments']) { // data not null
          Boolean.validateJSON(data['CrawlAttachments']);
        }
        // validate the optional field `UseChangeLog`
        if (data['UseChangeLog']) { // data not null
          Boolean.validateJSON(data['UseChangeLog']);
        }
        // validate the optional field `InclusionPatterns`
        if (data['InclusionPatterns']) { // data not null
          Array.validateJSON(data['InclusionPatterns']);
        }
        // validate the optional field `ExclusionPatterns`
        if (data['ExclusionPatterns']) { // data not null
          Array.validateJSON(data['ExclusionPatterns']);
        }
        // validate the optional field `VpcConfiguration`
        if (data['VpcConfiguration']) { // data not null
          SharePointConfigurationVpcConfiguration.validateJSON(data['VpcConfiguration']);
        }
        // validate the optional field `FieldMappings`
        if (data['FieldMappings']) { // data not null
          Array.validateJSON(data['FieldMappings']);
        }
        // validate the optional field `DocumentTitleFieldName`
        if (data['DocumentTitleFieldName']) { // data not null
          String.validateJSON(data['DocumentTitleFieldName']);
        }
        // validate the optional field `DisableLocalGroups`
        if (data['DisableLocalGroups']) { // data not null
          Boolean.validateJSON(data['DisableLocalGroups']);
        }
        // validate the optional field `SslCertificateS3Path`
        if (data['SslCertificateS3Path']) { // data not null
          SharePointConfigurationSslCertificateS3Path.validateJSON(data['SslCertificateS3Path']);
        }
        // validate the optional field `AuthenticationType`
        if (data['AuthenticationType']) { // data not null
          SharePointOnlineAuthenticationType.validateJSON(data['AuthenticationType']);
        }
        // validate the optional field `ProxyConfiguration`
        if (data['ProxyConfiguration']) { // data not null
          SharePointConfigurationProxyConfiguration.validateJSON(data['ProxyConfiguration']);
        }

        return true;
    }


}

SharePointConfiguration.RequiredProperties = ["SharePointVersion", "Urls", "SecretArn"];

/**
 * @member {module:model/SharePointVersion} SharePointVersion
 */
SharePointConfiguration.prototype['SharePointVersion'] = undefined;

/**
 * @member {Array} Urls
 */
SharePointConfiguration.prototype['Urls'] = undefined;

/**
 * @member {String} SecretArn
 */
SharePointConfiguration.prototype['SecretArn'] = undefined;

/**
 * @member {Boolean} CrawlAttachments
 */
SharePointConfiguration.prototype['CrawlAttachments'] = undefined;

/**
 * @member {Boolean} UseChangeLog
 */
SharePointConfiguration.prototype['UseChangeLog'] = undefined;

/**
 * @member {Array} InclusionPatterns
 */
SharePointConfiguration.prototype['InclusionPatterns'] = undefined;

/**
 * @member {Array} ExclusionPatterns
 */
SharePointConfiguration.prototype['ExclusionPatterns'] = undefined;

/**
 * @member {module:model/SharePointConfigurationVpcConfiguration} VpcConfiguration
 */
SharePointConfiguration.prototype['VpcConfiguration'] = undefined;

/**
 * @member {Array} FieldMappings
 */
SharePointConfiguration.prototype['FieldMappings'] = undefined;

/**
 * @member {String} DocumentTitleFieldName
 */
SharePointConfiguration.prototype['DocumentTitleFieldName'] = undefined;

/**
 * @member {Boolean} DisableLocalGroups
 */
SharePointConfiguration.prototype['DisableLocalGroups'] = undefined;

/**
 * @member {module:model/SharePointConfigurationSslCertificateS3Path} SslCertificateS3Path
 */
SharePointConfiguration.prototype['SslCertificateS3Path'] = undefined;

/**
 * @member {module:model/SharePointOnlineAuthenticationType} AuthenticationType
 */
SharePointConfiguration.prototype['AuthenticationType'] = undefined;

/**
 * @member {module:model/SharePointConfigurationProxyConfiguration} ProxyConfiguration
 */
SharePointConfiguration.prototype['ProxyConfiguration'] = undefined;






export default SharePointConfiguration;

