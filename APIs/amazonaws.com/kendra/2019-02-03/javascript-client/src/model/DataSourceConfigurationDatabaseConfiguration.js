/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DataSourceVpcConfiguration from './DataSourceVpcConfiguration';
import DatabaseConfiguration from './DatabaseConfiguration';
import DatabaseConfigurationAclConfiguration from './DatabaseConfigurationAclConfiguration';
import DatabaseConfigurationColumnConfiguration from './DatabaseConfigurationColumnConfiguration';
import DatabaseConfigurationConnectionConfiguration from './DatabaseConfigurationConnectionConfiguration';
import DatabaseConfigurationSqlConfiguration from './DatabaseConfigurationSqlConfiguration';
import DatabaseEngineType from './DatabaseEngineType';

/**
 * The DataSourceConfigurationDatabaseConfiguration model module.
 * @module model/DataSourceConfigurationDatabaseConfiguration
 * @version 2019-02-03
 */
class DataSourceConfigurationDatabaseConfiguration {
    /**
     * Constructs a new <code>DataSourceConfigurationDatabaseConfiguration</code>.
     * @alias module:model/DataSourceConfigurationDatabaseConfiguration
     * @implements module:model/DatabaseConfiguration
     * @param databaseEngineType {module:model/DatabaseEngineType} 
     * @param connectionConfiguration {module:model/DatabaseConfigurationConnectionConfiguration} 
     * @param columnConfiguration {module:model/DatabaseConfigurationColumnConfiguration} 
     */
    constructor(databaseEngineType, connectionConfiguration, columnConfiguration) { 
        DatabaseConfiguration.initialize(this, databaseEngineType, connectionConfiguration, columnConfiguration);
        DataSourceConfigurationDatabaseConfiguration.initialize(this, databaseEngineType, connectionConfiguration, columnConfiguration);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, databaseEngineType, connectionConfiguration, columnConfiguration) { 
        obj['DatabaseEngineType'] = databaseEngineType;
        obj['ConnectionConfiguration'] = connectionConfiguration;
        obj['ColumnConfiguration'] = columnConfiguration;
    }

    /**
     * Constructs a <code>DataSourceConfigurationDatabaseConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataSourceConfigurationDatabaseConfiguration} obj Optional instance to populate.
     * @return {module:model/DataSourceConfigurationDatabaseConfiguration} The populated <code>DataSourceConfigurationDatabaseConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataSourceConfigurationDatabaseConfiguration();
            DatabaseConfiguration.constructFromObject(data, obj);

            if (data.hasOwnProperty('DatabaseEngineType')) {
                obj['DatabaseEngineType'] = ApiClient.convertToType(data['DatabaseEngineType'], DatabaseEngineType);
            }
            if (data.hasOwnProperty('ConnectionConfiguration')) {
                obj['ConnectionConfiguration'] = DatabaseConfigurationConnectionConfiguration.constructFromObject(data['ConnectionConfiguration']);
            }
            if (data.hasOwnProperty('VpcConfiguration')) {
                obj['VpcConfiguration'] = DataSourceVpcConfiguration.constructFromObject(data['VpcConfiguration']);
            }
            if (data.hasOwnProperty('ColumnConfiguration')) {
                obj['ColumnConfiguration'] = DatabaseConfigurationColumnConfiguration.constructFromObject(data['ColumnConfiguration']);
            }
            if (data.hasOwnProperty('AclConfiguration')) {
                obj['AclConfiguration'] = DatabaseConfigurationAclConfiguration.constructFromObject(data['AclConfiguration']);
            }
            if (data.hasOwnProperty('SqlConfiguration')) {
                obj['SqlConfiguration'] = DatabaseConfigurationSqlConfiguration.constructFromObject(data['SqlConfiguration']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DataSourceConfigurationDatabaseConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataSourceConfigurationDatabaseConfiguration</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DataSourceConfigurationDatabaseConfiguration.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `DatabaseEngineType`
        if (data['DatabaseEngineType']) { // data not null
          DatabaseEngineType.validateJSON(data['DatabaseEngineType']);
        }
        // validate the optional field `ConnectionConfiguration`
        if (data['ConnectionConfiguration']) { // data not null
          DatabaseConfigurationConnectionConfiguration.validateJSON(data['ConnectionConfiguration']);
        }
        // validate the optional field `VpcConfiguration`
        if (data['VpcConfiguration']) { // data not null
          DataSourceVpcConfiguration.validateJSON(data['VpcConfiguration']);
        }
        // validate the optional field `ColumnConfiguration`
        if (data['ColumnConfiguration']) { // data not null
          DatabaseConfigurationColumnConfiguration.validateJSON(data['ColumnConfiguration']);
        }
        // validate the optional field `AclConfiguration`
        if (data['AclConfiguration']) { // data not null
          DatabaseConfigurationAclConfiguration.validateJSON(data['AclConfiguration']);
        }
        // validate the optional field `SqlConfiguration`
        if (data['SqlConfiguration']) { // data not null
          DatabaseConfigurationSqlConfiguration.validateJSON(data['SqlConfiguration']);
        }

        return true;
    }


}

DataSourceConfigurationDatabaseConfiguration.RequiredProperties = ["DatabaseEngineType", "ConnectionConfiguration", "ColumnConfiguration"];

/**
 * @member {module:model/DatabaseEngineType} DatabaseEngineType
 */
DataSourceConfigurationDatabaseConfiguration.prototype['DatabaseEngineType'] = undefined;

/**
 * @member {module:model/DatabaseConfigurationConnectionConfiguration} ConnectionConfiguration
 */
DataSourceConfigurationDatabaseConfiguration.prototype['ConnectionConfiguration'] = undefined;

/**
 * @member {module:model/DataSourceVpcConfiguration} VpcConfiguration
 */
DataSourceConfigurationDatabaseConfiguration.prototype['VpcConfiguration'] = undefined;

/**
 * @member {module:model/DatabaseConfigurationColumnConfiguration} ColumnConfiguration
 */
DataSourceConfigurationDatabaseConfiguration.prototype['ColumnConfiguration'] = undefined;

/**
 * @member {module:model/DatabaseConfigurationAclConfiguration} AclConfiguration
 */
DataSourceConfigurationDatabaseConfiguration.prototype['AclConfiguration'] = undefined;

/**
 * @member {module:model/DatabaseConfigurationSqlConfiguration} SqlConfiguration
 */
DataSourceConfigurationDatabaseConfiguration.prototype['SqlConfiguration'] = undefined;


// Implement DatabaseConfiguration interface:
/**
 * @member {module:model/DatabaseEngineType} DatabaseEngineType
 */
DatabaseConfiguration.prototype['DatabaseEngineType'] = undefined;
/**
 * @member {module:model/DatabaseConfigurationConnectionConfiguration} ConnectionConfiguration
 */
DatabaseConfiguration.prototype['ConnectionConfiguration'] = undefined;
/**
 * @member {module:model/DataSourceVpcConfiguration} VpcConfiguration
 */
DatabaseConfiguration.prototype['VpcConfiguration'] = undefined;
/**
 * @member {module:model/DatabaseConfigurationColumnConfiguration} ColumnConfiguration
 */
DatabaseConfiguration.prototype['ColumnConfiguration'] = undefined;
/**
 * @member {module:model/DatabaseConfigurationAclConfiguration} AclConfiguration
 */
DatabaseConfiguration.prototype['AclConfiguration'] = undefined;
/**
 * @member {module:model/DatabaseConfigurationSqlConfiguration} SqlConfiguration
 */
DatabaseConfiguration.prototype['SqlConfiguration'] = undefined;




export default DataSourceConfigurationDatabaseConfiguration;

