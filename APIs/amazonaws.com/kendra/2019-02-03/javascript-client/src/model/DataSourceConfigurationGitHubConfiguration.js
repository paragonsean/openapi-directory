/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GitHubConfiguration from './GitHubConfiguration';
import GitHubConfigurationGitHubDocumentCrawlProperties from './GitHubConfigurationGitHubDocumentCrawlProperties';
import GitHubConfigurationOnPremiseConfiguration from './GitHubConfigurationOnPremiseConfiguration';
import GitHubConfigurationSaaSConfiguration from './GitHubConfigurationSaaSConfiguration';
import GitHubConfigurationVpcConfiguration from './GitHubConfigurationVpcConfiguration';
import Type from './Type';

/**
 * The DataSourceConfigurationGitHubConfiguration model module.
 * @module model/DataSourceConfigurationGitHubConfiguration
 * @version 2019-02-03
 */
class DataSourceConfigurationGitHubConfiguration {
    /**
     * Constructs a new <code>DataSourceConfigurationGitHubConfiguration</code>.
     * @alias module:model/DataSourceConfigurationGitHubConfiguration
     * @implements module:model/GitHubConfiguration
     * @param secretArn {String} 
     */
    constructor(secretArn) { 
        GitHubConfiguration.initialize(this, secretArn);
        DataSourceConfigurationGitHubConfiguration.initialize(this, secretArn);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, secretArn) { 
        obj['SecretArn'] = secretArn;
    }

    /**
     * Constructs a <code>DataSourceConfigurationGitHubConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataSourceConfigurationGitHubConfiguration} obj Optional instance to populate.
     * @return {module:model/DataSourceConfigurationGitHubConfiguration} The populated <code>DataSourceConfigurationGitHubConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataSourceConfigurationGitHubConfiguration();
            GitHubConfiguration.constructFromObject(data, obj);

            if (data.hasOwnProperty('SaaSConfiguration')) {
                obj['SaaSConfiguration'] = GitHubConfigurationSaaSConfiguration.constructFromObject(data['SaaSConfiguration']);
            }
            if (data.hasOwnProperty('OnPremiseConfiguration')) {
                obj['OnPremiseConfiguration'] = GitHubConfigurationOnPremiseConfiguration.constructFromObject(data['OnPremiseConfiguration']);
            }
            if (data.hasOwnProperty('Type')) {
                obj['Type'] = ApiClient.convertToType(data['Type'], Type);
            }
            if (data.hasOwnProperty('SecretArn')) {
                obj['SecretArn'] = ApiClient.convertToType(data['SecretArn'], 'String');
            }
            if (data.hasOwnProperty('UseChangeLog')) {
                obj['UseChangeLog'] = ApiClient.convertToType(data['UseChangeLog'], 'Boolean');
            }
            if (data.hasOwnProperty('GitHubDocumentCrawlProperties')) {
                obj['GitHubDocumentCrawlProperties'] = GitHubConfigurationGitHubDocumentCrawlProperties.constructFromObject(data['GitHubDocumentCrawlProperties']);
            }
            if (data.hasOwnProperty('RepositoryFilter')) {
                obj['RepositoryFilter'] = ApiClient.convertToType(data['RepositoryFilter'], Array);
            }
            if (data.hasOwnProperty('InclusionFolderNamePatterns')) {
                obj['InclusionFolderNamePatterns'] = ApiClient.convertToType(data['InclusionFolderNamePatterns'], Array);
            }
            if (data.hasOwnProperty('InclusionFileTypePatterns')) {
                obj['InclusionFileTypePatterns'] = ApiClient.convertToType(data['InclusionFileTypePatterns'], Array);
            }
            if (data.hasOwnProperty('InclusionFileNamePatterns')) {
                obj['InclusionFileNamePatterns'] = ApiClient.convertToType(data['InclusionFileNamePatterns'], Array);
            }
            if (data.hasOwnProperty('ExclusionFolderNamePatterns')) {
                obj['ExclusionFolderNamePatterns'] = ApiClient.convertToType(data['ExclusionFolderNamePatterns'], Array);
            }
            if (data.hasOwnProperty('ExclusionFileTypePatterns')) {
                obj['ExclusionFileTypePatterns'] = ApiClient.convertToType(data['ExclusionFileTypePatterns'], Array);
            }
            if (data.hasOwnProperty('ExclusionFileNamePatterns')) {
                obj['ExclusionFileNamePatterns'] = ApiClient.convertToType(data['ExclusionFileNamePatterns'], Array);
            }
            if (data.hasOwnProperty('VpcConfiguration')) {
                obj['VpcConfiguration'] = GitHubConfigurationVpcConfiguration.constructFromObject(data['VpcConfiguration']);
            }
            if (data.hasOwnProperty('GitHubRepositoryConfigurationFieldMappings')) {
                obj['GitHubRepositoryConfigurationFieldMappings'] = ApiClient.convertToType(data['GitHubRepositoryConfigurationFieldMappings'], Array);
            }
            if (data.hasOwnProperty('GitHubCommitConfigurationFieldMappings')) {
                obj['GitHubCommitConfigurationFieldMappings'] = ApiClient.convertToType(data['GitHubCommitConfigurationFieldMappings'], Array);
            }
            if (data.hasOwnProperty('GitHubIssueDocumentConfigurationFieldMappings')) {
                obj['GitHubIssueDocumentConfigurationFieldMappings'] = ApiClient.convertToType(data['GitHubIssueDocumentConfigurationFieldMappings'], Array);
            }
            if (data.hasOwnProperty('GitHubIssueCommentConfigurationFieldMappings')) {
                obj['GitHubIssueCommentConfigurationFieldMappings'] = ApiClient.convertToType(data['GitHubIssueCommentConfigurationFieldMappings'], Array);
            }
            if (data.hasOwnProperty('GitHubIssueAttachmentConfigurationFieldMappings')) {
                obj['GitHubIssueAttachmentConfigurationFieldMappings'] = ApiClient.convertToType(data['GitHubIssueAttachmentConfigurationFieldMappings'], Array);
            }
            if (data.hasOwnProperty('GitHubPullRequestCommentConfigurationFieldMappings')) {
                obj['GitHubPullRequestCommentConfigurationFieldMappings'] = ApiClient.convertToType(data['GitHubPullRequestCommentConfigurationFieldMappings'], Array);
            }
            if (data.hasOwnProperty('GitHubPullRequestDocumentConfigurationFieldMappings')) {
                obj['GitHubPullRequestDocumentConfigurationFieldMappings'] = ApiClient.convertToType(data['GitHubPullRequestDocumentConfigurationFieldMappings'], Array);
            }
            if (data.hasOwnProperty('GitHubPullRequestDocumentAttachmentConfigurationFieldMappings')) {
                obj['GitHubPullRequestDocumentAttachmentConfigurationFieldMappings'] = ApiClient.convertToType(data['GitHubPullRequestDocumentAttachmentConfigurationFieldMappings'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DataSourceConfigurationGitHubConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataSourceConfigurationGitHubConfiguration</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DataSourceConfigurationGitHubConfiguration.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `SaaSConfiguration`
        if (data['SaaSConfiguration']) { // data not null
          GitHubConfigurationSaaSConfiguration.validateJSON(data['SaaSConfiguration']);
        }
        // validate the optional field `OnPremiseConfiguration`
        if (data['OnPremiseConfiguration']) { // data not null
          GitHubConfigurationOnPremiseConfiguration.validateJSON(data['OnPremiseConfiguration']);
        }
        // validate the optional field `Type`
        if (data['Type']) { // data not null
          Type.validateJSON(data['Type']);
        }
        // validate the optional field `SecretArn`
        if (data['SecretArn']) { // data not null
          String.validateJSON(data['SecretArn']);
        }
        // validate the optional field `UseChangeLog`
        if (data['UseChangeLog']) { // data not null
          Boolean.validateJSON(data['UseChangeLog']);
        }
        // validate the optional field `GitHubDocumentCrawlProperties`
        if (data['GitHubDocumentCrawlProperties']) { // data not null
          GitHubConfigurationGitHubDocumentCrawlProperties.validateJSON(data['GitHubDocumentCrawlProperties']);
        }
        // validate the optional field `RepositoryFilter`
        if (data['RepositoryFilter']) { // data not null
          Array.validateJSON(data['RepositoryFilter']);
        }
        // validate the optional field `InclusionFolderNamePatterns`
        if (data['InclusionFolderNamePatterns']) { // data not null
          Array.validateJSON(data['InclusionFolderNamePatterns']);
        }
        // validate the optional field `InclusionFileTypePatterns`
        if (data['InclusionFileTypePatterns']) { // data not null
          Array.validateJSON(data['InclusionFileTypePatterns']);
        }
        // validate the optional field `InclusionFileNamePatterns`
        if (data['InclusionFileNamePatterns']) { // data not null
          Array.validateJSON(data['InclusionFileNamePatterns']);
        }
        // validate the optional field `ExclusionFolderNamePatterns`
        if (data['ExclusionFolderNamePatterns']) { // data not null
          Array.validateJSON(data['ExclusionFolderNamePatterns']);
        }
        // validate the optional field `ExclusionFileTypePatterns`
        if (data['ExclusionFileTypePatterns']) { // data not null
          Array.validateJSON(data['ExclusionFileTypePatterns']);
        }
        // validate the optional field `ExclusionFileNamePatterns`
        if (data['ExclusionFileNamePatterns']) { // data not null
          Array.validateJSON(data['ExclusionFileNamePatterns']);
        }
        // validate the optional field `VpcConfiguration`
        if (data['VpcConfiguration']) { // data not null
          GitHubConfigurationVpcConfiguration.validateJSON(data['VpcConfiguration']);
        }
        // validate the optional field `GitHubRepositoryConfigurationFieldMappings`
        if (data['GitHubRepositoryConfigurationFieldMappings']) { // data not null
          Array.validateJSON(data['GitHubRepositoryConfigurationFieldMappings']);
        }
        // validate the optional field `GitHubCommitConfigurationFieldMappings`
        if (data['GitHubCommitConfigurationFieldMappings']) { // data not null
          Array.validateJSON(data['GitHubCommitConfigurationFieldMappings']);
        }
        // validate the optional field `GitHubIssueDocumentConfigurationFieldMappings`
        if (data['GitHubIssueDocumentConfigurationFieldMappings']) { // data not null
          Array.validateJSON(data['GitHubIssueDocumentConfigurationFieldMappings']);
        }
        // validate the optional field `GitHubIssueCommentConfigurationFieldMappings`
        if (data['GitHubIssueCommentConfigurationFieldMappings']) { // data not null
          Array.validateJSON(data['GitHubIssueCommentConfigurationFieldMappings']);
        }
        // validate the optional field `GitHubIssueAttachmentConfigurationFieldMappings`
        if (data['GitHubIssueAttachmentConfigurationFieldMappings']) { // data not null
          Array.validateJSON(data['GitHubIssueAttachmentConfigurationFieldMappings']);
        }
        // validate the optional field `GitHubPullRequestCommentConfigurationFieldMappings`
        if (data['GitHubPullRequestCommentConfigurationFieldMappings']) { // data not null
          Array.validateJSON(data['GitHubPullRequestCommentConfigurationFieldMappings']);
        }
        // validate the optional field `GitHubPullRequestDocumentConfigurationFieldMappings`
        if (data['GitHubPullRequestDocumentConfigurationFieldMappings']) { // data not null
          Array.validateJSON(data['GitHubPullRequestDocumentConfigurationFieldMappings']);
        }
        // validate the optional field `GitHubPullRequestDocumentAttachmentConfigurationFieldMappings`
        if (data['GitHubPullRequestDocumentAttachmentConfigurationFieldMappings']) { // data not null
          Array.validateJSON(data['GitHubPullRequestDocumentAttachmentConfigurationFieldMappings']);
        }

        return true;
    }


}

DataSourceConfigurationGitHubConfiguration.RequiredProperties = ["SecretArn"];

/**
 * @member {module:model/GitHubConfigurationSaaSConfiguration} SaaSConfiguration
 */
DataSourceConfigurationGitHubConfiguration.prototype['SaaSConfiguration'] = undefined;

/**
 * @member {module:model/GitHubConfigurationOnPremiseConfiguration} OnPremiseConfiguration
 */
DataSourceConfigurationGitHubConfiguration.prototype['OnPremiseConfiguration'] = undefined;

/**
 * @member {module:model/Type} Type
 */
DataSourceConfigurationGitHubConfiguration.prototype['Type'] = undefined;

/**
 * @member {String} SecretArn
 */
DataSourceConfigurationGitHubConfiguration.prototype['SecretArn'] = undefined;

/**
 * @member {Boolean} UseChangeLog
 */
DataSourceConfigurationGitHubConfiguration.prototype['UseChangeLog'] = undefined;

/**
 * @member {module:model/GitHubConfigurationGitHubDocumentCrawlProperties} GitHubDocumentCrawlProperties
 */
DataSourceConfigurationGitHubConfiguration.prototype['GitHubDocumentCrawlProperties'] = undefined;

/**
 * @member {Array} RepositoryFilter
 */
DataSourceConfigurationGitHubConfiguration.prototype['RepositoryFilter'] = undefined;

/**
 * @member {Array} InclusionFolderNamePatterns
 */
DataSourceConfigurationGitHubConfiguration.prototype['InclusionFolderNamePatterns'] = undefined;

/**
 * @member {Array} InclusionFileTypePatterns
 */
DataSourceConfigurationGitHubConfiguration.prototype['InclusionFileTypePatterns'] = undefined;

/**
 * @member {Array} InclusionFileNamePatterns
 */
DataSourceConfigurationGitHubConfiguration.prototype['InclusionFileNamePatterns'] = undefined;

/**
 * @member {Array} ExclusionFolderNamePatterns
 */
DataSourceConfigurationGitHubConfiguration.prototype['ExclusionFolderNamePatterns'] = undefined;

/**
 * @member {Array} ExclusionFileTypePatterns
 */
DataSourceConfigurationGitHubConfiguration.prototype['ExclusionFileTypePatterns'] = undefined;

/**
 * @member {Array} ExclusionFileNamePatterns
 */
DataSourceConfigurationGitHubConfiguration.prototype['ExclusionFileNamePatterns'] = undefined;

/**
 * @member {module:model/GitHubConfigurationVpcConfiguration} VpcConfiguration
 */
DataSourceConfigurationGitHubConfiguration.prototype['VpcConfiguration'] = undefined;

/**
 * @member {Array} GitHubRepositoryConfigurationFieldMappings
 */
DataSourceConfigurationGitHubConfiguration.prototype['GitHubRepositoryConfigurationFieldMappings'] = undefined;

/**
 * @member {Array} GitHubCommitConfigurationFieldMappings
 */
DataSourceConfigurationGitHubConfiguration.prototype['GitHubCommitConfigurationFieldMappings'] = undefined;

/**
 * @member {Array} GitHubIssueDocumentConfigurationFieldMappings
 */
DataSourceConfigurationGitHubConfiguration.prototype['GitHubIssueDocumentConfigurationFieldMappings'] = undefined;

/**
 * @member {Array} GitHubIssueCommentConfigurationFieldMappings
 */
DataSourceConfigurationGitHubConfiguration.prototype['GitHubIssueCommentConfigurationFieldMappings'] = undefined;

/**
 * @member {Array} GitHubIssueAttachmentConfigurationFieldMappings
 */
DataSourceConfigurationGitHubConfiguration.prototype['GitHubIssueAttachmentConfigurationFieldMappings'] = undefined;

/**
 * @member {Array} GitHubPullRequestCommentConfigurationFieldMappings
 */
DataSourceConfigurationGitHubConfiguration.prototype['GitHubPullRequestCommentConfigurationFieldMappings'] = undefined;

/**
 * @member {Array} GitHubPullRequestDocumentConfigurationFieldMappings
 */
DataSourceConfigurationGitHubConfiguration.prototype['GitHubPullRequestDocumentConfigurationFieldMappings'] = undefined;

/**
 * @member {Array} GitHubPullRequestDocumentAttachmentConfigurationFieldMappings
 */
DataSourceConfigurationGitHubConfiguration.prototype['GitHubPullRequestDocumentAttachmentConfigurationFieldMappings'] = undefined;


// Implement GitHubConfiguration interface:
/**
 * @member {module:model/GitHubConfigurationSaaSConfiguration} SaaSConfiguration
 */
GitHubConfiguration.prototype['SaaSConfiguration'] = undefined;
/**
 * @member {module:model/GitHubConfigurationOnPremiseConfiguration} OnPremiseConfiguration
 */
GitHubConfiguration.prototype['OnPremiseConfiguration'] = undefined;
/**
 * @member {module:model/Type} Type
 */
GitHubConfiguration.prototype['Type'] = undefined;
/**
 * @member {String} SecretArn
 */
GitHubConfiguration.prototype['SecretArn'] = undefined;
/**
 * @member {Boolean} UseChangeLog
 */
GitHubConfiguration.prototype['UseChangeLog'] = undefined;
/**
 * @member {module:model/GitHubConfigurationGitHubDocumentCrawlProperties} GitHubDocumentCrawlProperties
 */
GitHubConfiguration.prototype['GitHubDocumentCrawlProperties'] = undefined;
/**
 * @member {Array} RepositoryFilter
 */
GitHubConfiguration.prototype['RepositoryFilter'] = undefined;
/**
 * @member {Array} InclusionFolderNamePatterns
 */
GitHubConfiguration.prototype['InclusionFolderNamePatterns'] = undefined;
/**
 * @member {Array} InclusionFileTypePatterns
 */
GitHubConfiguration.prototype['InclusionFileTypePatterns'] = undefined;
/**
 * @member {Array} InclusionFileNamePatterns
 */
GitHubConfiguration.prototype['InclusionFileNamePatterns'] = undefined;
/**
 * @member {Array} ExclusionFolderNamePatterns
 */
GitHubConfiguration.prototype['ExclusionFolderNamePatterns'] = undefined;
/**
 * @member {Array} ExclusionFileTypePatterns
 */
GitHubConfiguration.prototype['ExclusionFileTypePatterns'] = undefined;
/**
 * @member {Array} ExclusionFileNamePatterns
 */
GitHubConfiguration.prototype['ExclusionFileNamePatterns'] = undefined;
/**
 * @member {module:model/GitHubConfigurationVpcConfiguration} VpcConfiguration
 */
GitHubConfiguration.prototype['VpcConfiguration'] = undefined;
/**
 * @member {Array} GitHubRepositoryConfigurationFieldMappings
 */
GitHubConfiguration.prototype['GitHubRepositoryConfigurationFieldMappings'] = undefined;
/**
 * @member {Array} GitHubCommitConfigurationFieldMappings
 */
GitHubConfiguration.prototype['GitHubCommitConfigurationFieldMappings'] = undefined;
/**
 * @member {Array} GitHubIssueDocumentConfigurationFieldMappings
 */
GitHubConfiguration.prototype['GitHubIssueDocumentConfigurationFieldMappings'] = undefined;
/**
 * @member {Array} GitHubIssueCommentConfigurationFieldMappings
 */
GitHubConfiguration.prototype['GitHubIssueCommentConfigurationFieldMappings'] = undefined;
/**
 * @member {Array} GitHubIssueAttachmentConfigurationFieldMappings
 */
GitHubConfiguration.prototype['GitHubIssueAttachmentConfigurationFieldMappings'] = undefined;
/**
 * @member {Array} GitHubPullRequestCommentConfigurationFieldMappings
 */
GitHubConfiguration.prototype['GitHubPullRequestCommentConfigurationFieldMappings'] = undefined;
/**
 * @member {Array} GitHubPullRequestDocumentConfigurationFieldMappings
 */
GitHubConfiguration.prototype['GitHubPullRequestDocumentConfigurationFieldMappings'] = undefined;
/**
 * @member {Array} GitHubPullRequestDocumentAttachmentConfigurationFieldMappings
 */
GitHubConfiguration.prototype['GitHubPullRequestDocumentAttachmentConfigurationFieldMappings'] = undefined;




export default DataSourceConfigurationGitHubConfiguration;

