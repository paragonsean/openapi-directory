/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import JwtTokenTypeConfiguration from './JwtTokenTypeConfiguration';
import KeyLocation from './KeyLocation';

/**
 * The UserTokenConfigurationJwtTokenTypeConfiguration model module.
 * @module model/UserTokenConfigurationJwtTokenTypeConfiguration
 * @version 2019-02-03
 */
class UserTokenConfigurationJwtTokenTypeConfiguration {
    /**
     * Constructs a new <code>UserTokenConfigurationJwtTokenTypeConfiguration</code>.
     * @alias module:model/UserTokenConfigurationJwtTokenTypeConfiguration
     * @implements module:model/JwtTokenTypeConfiguration
     * @param keyLocation {module:model/KeyLocation} 
     */
    constructor(keyLocation) { 
        JwtTokenTypeConfiguration.initialize(this, keyLocation);
        UserTokenConfigurationJwtTokenTypeConfiguration.initialize(this, keyLocation);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, keyLocation) { 
        obj['KeyLocation'] = keyLocation;
    }

    /**
     * Constructs a <code>UserTokenConfigurationJwtTokenTypeConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserTokenConfigurationJwtTokenTypeConfiguration} obj Optional instance to populate.
     * @return {module:model/UserTokenConfigurationJwtTokenTypeConfiguration} The populated <code>UserTokenConfigurationJwtTokenTypeConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserTokenConfigurationJwtTokenTypeConfiguration();
            JwtTokenTypeConfiguration.constructFromObject(data, obj);

            if (data.hasOwnProperty('KeyLocation')) {
                obj['KeyLocation'] = ApiClient.convertToType(data['KeyLocation'], KeyLocation);
            }
            if (data.hasOwnProperty('URL')) {
                obj['URL'] = ApiClient.convertToType(data['URL'], 'String');
            }
            if (data.hasOwnProperty('SecretManagerArn')) {
                obj['SecretManagerArn'] = ApiClient.convertToType(data['SecretManagerArn'], 'String');
            }
            if (data.hasOwnProperty('UserNameAttributeField')) {
                obj['UserNameAttributeField'] = ApiClient.convertToType(data['UserNameAttributeField'], 'String');
            }
            if (data.hasOwnProperty('GroupAttributeField')) {
                obj['GroupAttributeField'] = ApiClient.convertToType(data['GroupAttributeField'], 'String');
            }
            if (data.hasOwnProperty('Issuer')) {
                obj['Issuer'] = ApiClient.convertToType(data['Issuer'], 'String');
            }
            if (data.hasOwnProperty('ClaimRegex')) {
                obj['ClaimRegex'] = ApiClient.convertToType(data['ClaimRegex'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserTokenConfigurationJwtTokenTypeConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserTokenConfigurationJwtTokenTypeConfiguration</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UserTokenConfigurationJwtTokenTypeConfiguration.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `KeyLocation`
        if (data['KeyLocation']) { // data not null
          KeyLocation.validateJSON(data['KeyLocation']);
        }
        // validate the optional field `URL`
        if (data['URL']) { // data not null
          String.validateJSON(data['URL']);
        }
        // validate the optional field `SecretManagerArn`
        if (data['SecretManagerArn']) { // data not null
          String.validateJSON(data['SecretManagerArn']);
        }
        // validate the optional field `UserNameAttributeField`
        if (data['UserNameAttributeField']) { // data not null
          String.validateJSON(data['UserNameAttributeField']);
        }
        // validate the optional field `GroupAttributeField`
        if (data['GroupAttributeField']) { // data not null
          String.validateJSON(data['GroupAttributeField']);
        }
        // validate the optional field `Issuer`
        if (data['Issuer']) { // data not null
          String.validateJSON(data['Issuer']);
        }
        // validate the optional field `ClaimRegex`
        if (data['ClaimRegex']) { // data not null
          String.validateJSON(data['ClaimRegex']);
        }

        return true;
    }


}

UserTokenConfigurationJwtTokenTypeConfiguration.RequiredProperties = ["KeyLocation"];

/**
 * @member {module:model/KeyLocation} KeyLocation
 */
UserTokenConfigurationJwtTokenTypeConfiguration.prototype['KeyLocation'] = undefined;

/**
 * @member {String} URL
 */
UserTokenConfigurationJwtTokenTypeConfiguration.prototype['URL'] = undefined;

/**
 * @member {String} SecretManagerArn
 */
UserTokenConfigurationJwtTokenTypeConfiguration.prototype['SecretManagerArn'] = undefined;

/**
 * @member {String} UserNameAttributeField
 */
UserTokenConfigurationJwtTokenTypeConfiguration.prototype['UserNameAttributeField'] = undefined;

/**
 * @member {String} GroupAttributeField
 */
UserTokenConfigurationJwtTokenTypeConfiguration.prototype['GroupAttributeField'] = undefined;

/**
 * @member {String} Issuer
 */
UserTokenConfigurationJwtTokenTypeConfiguration.prototype['Issuer'] = undefined;

/**
 * @member {String} ClaimRegex
 */
UserTokenConfigurationJwtTokenTypeConfiguration.prototype['ClaimRegex'] = undefined;


// Implement JwtTokenTypeConfiguration interface:
/**
 * @member {module:model/KeyLocation} KeyLocation
 */
JwtTokenTypeConfiguration.prototype['KeyLocation'] = undefined;
/**
 * @member {String} URL
 */
JwtTokenTypeConfiguration.prototype['URL'] = undefined;
/**
 * @member {String} SecretManagerArn
 */
JwtTokenTypeConfiguration.prototype['SecretManagerArn'] = undefined;
/**
 * @member {String} UserNameAttributeField
 */
JwtTokenTypeConfiguration.prototype['UserNameAttributeField'] = undefined;
/**
 * @member {String} GroupAttributeField
 */
JwtTokenTypeConfiguration.prototype['GroupAttributeField'] = undefined;
/**
 * @member {String} Issuer
 */
JwtTokenTypeConfiguration.prototype['Issuer'] = undefined;
/**
 * @member {String} ClaimRegex
 */
JwtTokenTypeConfiguration.prototype['ClaimRegex'] = undefined;




export default UserTokenConfigurationJwtTokenTypeConfiguration;

