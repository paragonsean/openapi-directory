/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SeedUrlConfiguration from './SeedUrlConfiguration';
import WebCrawlerMode from './WebCrawlerMode';

/**
 * The UrlsSeedUrlConfiguration model module.
 * @module model/UrlsSeedUrlConfiguration
 * @version 2019-02-03
 */
class UrlsSeedUrlConfiguration {
    /**
     * Constructs a new <code>UrlsSeedUrlConfiguration</code>.
     * @alias module:model/UrlsSeedUrlConfiguration
     * @implements module:model/SeedUrlConfiguration
     * @param seedUrls {Array} 
     */
    constructor(seedUrls) { 
        SeedUrlConfiguration.initialize(this, seedUrls);
        UrlsSeedUrlConfiguration.initialize(this, seedUrls);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, seedUrls) { 
        obj['SeedUrls'] = seedUrls;
    }

    /**
     * Constructs a <code>UrlsSeedUrlConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UrlsSeedUrlConfiguration} obj Optional instance to populate.
     * @return {module:model/UrlsSeedUrlConfiguration} The populated <code>UrlsSeedUrlConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UrlsSeedUrlConfiguration();
            SeedUrlConfiguration.constructFromObject(data, obj);

            if (data.hasOwnProperty('SeedUrls')) {
                obj['SeedUrls'] = ApiClient.convertToType(data['SeedUrls'], Array);
            }
            if (data.hasOwnProperty('WebCrawlerMode')) {
                obj['WebCrawlerMode'] = ApiClient.convertToType(data['WebCrawlerMode'], WebCrawlerMode);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UrlsSeedUrlConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UrlsSeedUrlConfiguration</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UrlsSeedUrlConfiguration.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `SeedUrls`
        if (data['SeedUrls']) { // data not null
          Array.validateJSON(data['SeedUrls']);
        }
        // validate the optional field `WebCrawlerMode`
        if (data['WebCrawlerMode']) { // data not null
          WebCrawlerMode.validateJSON(data['WebCrawlerMode']);
        }

        return true;
    }


}

UrlsSeedUrlConfiguration.RequiredProperties = ["SeedUrls"];

/**
 * @member {Array} SeedUrls
 */
UrlsSeedUrlConfiguration.prototype['SeedUrls'] = undefined;

/**
 * @member {module:model/WebCrawlerMode} WebCrawlerMode
 */
UrlsSeedUrlConfiguration.prototype['WebCrawlerMode'] = undefined;


// Implement SeedUrlConfiguration interface:
/**
 * @member {Array} SeedUrls
 */
SeedUrlConfiguration.prototype['SeedUrls'] = undefined;
/**
 * @member {module:model/WebCrawlerMode} WebCrawlerMode
 */
SeedUrlConfiguration.prototype['WebCrawlerMode'] = undefined;




export default UrlsSeedUrlConfiguration;

