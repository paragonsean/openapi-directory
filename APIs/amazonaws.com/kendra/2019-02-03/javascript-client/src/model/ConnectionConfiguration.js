/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ConnectionConfiguration model module.
 * @module model/ConnectionConfiguration
 * @version 2019-02-03
 */
class ConnectionConfiguration {
    /**
     * Constructs a new <code>ConnectionConfiguration</code>.
     * Provides the configuration information that&#39;s required to connect to a database.
     * @alias module:model/ConnectionConfiguration
     * @param databaseHost {String} 
     * @param databasePort {Number} 
     * @param databaseName {String} 
     * @param tableName {String} 
     * @param secretArn {String} 
     */
    constructor(databaseHost, databasePort, databaseName, tableName, secretArn) { 
        
        ConnectionConfiguration.initialize(this, databaseHost, databasePort, databaseName, tableName, secretArn);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, databaseHost, databasePort, databaseName, tableName, secretArn) { 
        obj['DatabaseHost'] = databaseHost;
        obj['DatabasePort'] = databasePort;
        obj['DatabaseName'] = databaseName;
        obj['TableName'] = tableName;
        obj['SecretArn'] = secretArn;
    }

    /**
     * Constructs a <code>ConnectionConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConnectionConfiguration} obj Optional instance to populate.
     * @return {module:model/ConnectionConfiguration} The populated <code>ConnectionConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConnectionConfiguration();

            if (data.hasOwnProperty('DatabaseHost')) {
                obj['DatabaseHost'] = ApiClient.convertToType(data['DatabaseHost'], 'String');
            }
            if (data.hasOwnProperty('DatabasePort')) {
                obj['DatabasePort'] = ApiClient.convertToType(data['DatabasePort'], 'Number');
            }
            if (data.hasOwnProperty('DatabaseName')) {
                obj['DatabaseName'] = ApiClient.convertToType(data['DatabaseName'], 'String');
            }
            if (data.hasOwnProperty('TableName')) {
                obj['TableName'] = ApiClient.convertToType(data['TableName'], 'String');
            }
            if (data.hasOwnProperty('SecretArn')) {
                obj['SecretArn'] = ApiClient.convertToType(data['SecretArn'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConnectionConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConnectionConfiguration</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ConnectionConfiguration.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `DatabaseHost`
        if (data['DatabaseHost']) { // data not null
          String.validateJSON(data['DatabaseHost']);
        }
        // validate the optional field `DatabasePort`
        if (data['DatabasePort']) { // data not null
          Number.validateJSON(data['DatabasePort']);
        }
        // validate the optional field `DatabaseName`
        if (data['DatabaseName']) { // data not null
          String.validateJSON(data['DatabaseName']);
        }
        // validate the optional field `TableName`
        if (data['TableName']) { // data not null
          String.validateJSON(data['TableName']);
        }
        // validate the optional field `SecretArn`
        if (data['SecretArn']) { // data not null
          String.validateJSON(data['SecretArn']);
        }

        return true;
    }


}

ConnectionConfiguration.RequiredProperties = ["DatabaseHost", "DatabasePort", "DatabaseName", "TableName", "SecretArn"];

/**
 * @member {String} DatabaseHost
 */
ConnectionConfiguration.prototype['DatabaseHost'] = undefined;

/**
 * @member {Number} DatabasePort
 */
ConnectionConfiguration.prototype['DatabasePort'] = undefined;

/**
 * @member {String} DatabaseName
 */
ConnectionConfiguration.prototype['DatabaseName'] = undefined;

/**
 * @member {String} TableName
 */
ConnectionConfiguration.prototype['TableName'] = undefined;

/**
 * @member {String} SecretArn
 */
ConnectionConfiguration.prototype['SecretArn'] = undefined;






export default ConnectionConfiguration;

