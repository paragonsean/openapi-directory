/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AlfrescoConfigurationSslCertificateS3Path from './AlfrescoConfigurationSslCertificateS3Path';
import AlfrescoConfigurationVpcConfiguration from './AlfrescoConfigurationVpcConfiguration';

/**
 * The AlfrescoConfiguration model module.
 * @module model/AlfrescoConfiguration
 * @version 2019-02-03
 */
class AlfrescoConfiguration {
    /**
     * Constructs a new <code>AlfrescoConfiguration</code>.
     * &lt;p&gt;Provides the configuration information to connect to Alfresco as your data source.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Support for &lt;code&gt;AlfrescoConfiguration&lt;/code&gt; ended May 2023. We recommend migrating to or using the Alfresco data source template schema / &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kendra/latest/APIReference/API_TemplateConfiguration.html\&quot;&gt;TemplateConfiguration&lt;/a&gt; API.&lt;/p&gt; &lt;/note&gt;
     * @alias module:model/AlfrescoConfiguration
     * @param siteUrl {String} 
     * @param siteId {String} 
     * @param secretArn {String} 
     * @param sslCertificateS3Path {module:model/AlfrescoConfigurationSslCertificateS3Path} 
     */
    constructor(siteUrl, siteId, secretArn, sslCertificateS3Path) { 
        
        AlfrescoConfiguration.initialize(this, siteUrl, siteId, secretArn, sslCertificateS3Path);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, siteUrl, siteId, secretArn, sslCertificateS3Path) { 
        obj['SiteUrl'] = siteUrl;
        obj['SiteId'] = siteId;
        obj['SecretArn'] = secretArn;
        obj['SslCertificateS3Path'] = sslCertificateS3Path;
    }

    /**
     * Constructs a <code>AlfrescoConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AlfrescoConfiguration} obj Optional instance to populate.
     * @return {module:model/AlfrescoConfiguration} The populated <code>AlfrescoConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AlfrescoConfiguration();

            if (data.hasOwnProperty('SiteUrl')) {
                obj['SiteUrl'] = ApiClient.convertToType(data['SiteUrl'], 'String');
            }
            if (data.hasOwnProperty('SiteId')) {
                obj['SiteId'] = ApiClient.convertToType(data['SiteId'], 'String');
            }
            if (data.hasOwnProperty('SecretArn')) {
                obj['SecretArn'] = ApiClient.convertToType(data['SecretArn'], 'String');
            }
            if (data.hasOwnProperty('SslCertificateS3Path')) {
                obj['SslCertificateS3Path'] = AlfrescoConfigurationSslCertificateS3Path.constructFromObject(data['SslCertificateS3Path']);
            }
            if (data.hasOwnProperty('CrawlSystemFolders')) {
                obj['CrawlSystemFolders'] = ApiClient.convertToType(data['CrawlSystemFolders'], 'Boolean');
            }
            if (data.hasOwnProperty('CrawlComments')) {
                obj['CrawlComments'] = ApiClient.convertToType(data['CrawlComments'], 'Boolean');
            }
            if (data.hasOwnProperty('EntityFilter')) {
                obj['EntityFilter'] = ApiClient.convertToType(data['EntityFilter'], Array);
            }
            if (data.hasOwnProperty('DocumentLibraryFieldMappings')) {
                obj['DocumentLibraryFieldMappings'] = ApiClient.convertToType(data['DocumentLibraryFieldMappings'], Array);
            }
            if (data.hasOwnProperty('BlogFieldMappings')) {
                obj['BlogFieldMappings'] = ApiClient.convertToType(data['BlogFieldMappings'], Array);
            }
            if (data.hasOwnProperty('WikiFieldMappings')) {
                obj['WikiFieldMappings'] = ApiClient.convertToType(data['WikiFieldMappings'], Array);
            }
            if (data.hasOwnProperty('InclusionPatterns')) {
                obj['InclusionPatterns'] = ApiClient.convertToType(data['InclusionPatterns'], Array);
            }
            if (data.hasOwnProperty('ExclusionPatterns')) {
                obj['ExclusionPatterns'] = ApiClient.convertToType(data['ExclusionPatterns'], Array);
            }
            if (data.hasOwnProperty('VpcConfiguration')) {
                obj['VpcConfiguration'] = AlfrescoConfigurationVpcConfiguration.constructFromObject(data['VpcConfiguration']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AlfrescoConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AlfrescoConfiguration</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AlfrescoConfiguration.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `SiteUrl`
        if (data['SiteUrl']) { // data not null
          String.validateJSON(data['SiteUrl']);
        }
        // validate the optional field `SiteId`
        if (data['SiteId']) { // data not null
          String.validateJSON(data['SiteId']);
        }
        // validate the optional field `SecretArn`
        if (data['SecretArn']) { // data not null
          String.validateJSON(data['SecretArn']);
        }
        // validate the optional field `SslCertificateS3Path`
        if (data['SslCertificateS3Path']) { // data not null
          AlfrescoConfigurationSslCertificateS3Path.validateJSON(data['SslCertificateS3Path']);
        }
        // validate the optional field `CrawlSystemFolders`
        if (data['CrawlSystemFolders']) { // data not null
          Boolean.validateJSON(data['CrawlSystemFolders']);
        }
        // validate the optional field `CrawlComments`
        if (data['CrawlComments']) { // data not null
          Boolean.validateJSON(data['CrawlComments']);
        }
        // validate the optional field `EntityFilter`
        if (data['EntityFilter']) { // data not null
          Array.validateJSON(data['EntityFilter']);
        }
        // validate the optional field `DocumentLibraryFieldMappings`
        if (data['DocumentLibraryFieldMappings']) { // data not null
          Array.validateJSON(data['DocumentLibraryFieldMappings']);
        }
        // validate the optional field `BlogFieldMappings`
        if (data['BlogFieldMappings']) { // data not null
          Array.validateJSON(data['BlogFieldMappings']);
        }
        // validate the optional field `WikiFieldMappings`
        if (data['WikiFieldMappings']) { // data not null
          Array.validateJSON(data['WikiFieldMappings']);
        }
        // validate the optional field `InclusionPatterns`
        if (data['InclusionPatterns']) { // data not null
          Array.validateJSON(data['InclusionPatterns']);
        }
        // validate the optional field `ExclusionPatterns`
        if (data['ExclusionPatterns']) { // data not null
          Array.validateJSON(data['ExclusionPatterns']);
        }
        // validate the optional field `VpcConfiguration`
        if (data['VpcConfiguration']) { // data not null
          AlfrescoConfigurationVpcConfiguration.validateJSON(data['VpcConfiguration']);
        }

        return true;
    }


}

AlfrescoConfiguration.RequiredProperties = ["SiteUrl", "SiteId", "SecretArn", "SslCertificateS3Path"];

/**
 * @member {String} SiteUrl
 */
AlfrescoConfiguration.prototype['SiteUrl'] = undefined;

/**
 * @member {String} SiteId
 */
AlfrescoConfiguration.prototype['SiteId'] = undefined;

/**
 * @member {String} SecretArn
 */
AlfrescoConfiguration.prototype['SecretArn'] = undefined;

/**
 * @member {module:model/AlfrescoConfigurationSslCertificateS3Path} SslCertificateS3Path
 */
AlfrescoConfiguration.prototype['SslCertificateS3Path'] = undefined;

/**
 * @member {Boolean} CrawlSystemFolders
 */
AlfrescoConfiguration.prototype['CrawlSystemFolders'] = undefined;

/**
 * @member {Boolean} CrawlComments
 */
AlfrescoConfiguration.prototype['CrawlComments'] = undefined;

/**
 * @member {Array} EntityFilter
 */
AlfrescoConfiguration.prototype['EntityFilter'] = undefined;

/**
 * @member {Array} DocumentLibraryFieldMappings
 */
AlfrescoConfiguration.prototype['DocumentLibraryFieldMappings'] = undefined;

/**
 * @member {Array} BlogFieldMappings
 */
AlfrescoConfiguration.prototype['BlogFieldMappings'] = undefined;

/**
 * @member {Array} WikiFieldMappings
 */
AlfrescoConfiguration.prototype['WikiFieldMappings'] = undefined;

/**
 * @member {Array} InclusionPatterns
 */
AlfrescoConfiguration.prototype['InclusionPatterns'] = undefined;

/**
 * @member {Array} ExclusionPatterns
 */
AlfrescoConfiguration.prototype['ExclusionPatterns'] = undefined;

/**
 * @member {module:model/AlfrescoConfigurationVpcConfiguration} VpcConfiguration
 */
AlfrescoConfiguration.prototype['VpcConfiguration'] = undefined;






export default AlfrescoConfiguration;

