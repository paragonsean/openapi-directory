/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DocumentsMetadataConfiguration from './DocumentsMetadataConfiguration';
import S3DataSourceConfiguration from './S3DataSourceConfiguration';
import S3DataSourceConfigurationAccessControlListConfiguration from './S3DataSourceConfigurationAccessControlListConfiguration';

/**
 * The DataSourceConfigurationS3Configuration model module.
 * @module model/DataSourceConfigurationS3Configuration
 * @version 2019-02-03
 */
class DataSourceConfigurationS3Configuration {
    /**
     * Constructs a new <code>DataSourceConfigurationS3Configuration</code>.
     * @alias module:model/DataSourceConfigurationS3Configuration
     * @implements module:model/S3DataSourceConfiguration
     * @param bucketName {String} 
     */
    constructor(bucketName) { 
        S3DataSourceConfiguration.initialize(this, bucketName);
        DataSourceConfigurationS3Configuration.initialize(this, bucketName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, bucketName) { 
        obj['BucketName'] = bucketName;
    }

    /**
     * Constructs a <code>DataSourceConfigurationS3Configuration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataSourceConfigurationS3Configuration} obj Optional instance to populate.
     * @return {module:model/DataSourceConfigurationS3Configuration} The populated <code>DataSourceConfigurationS3Configuration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataSourceConfigurationS3Configuration();
            S3DataSourceConfiguration.constructFromObject(data, obj);

            if (data.hasOwnProperty('BucketName')) {
                obj['BucketName'] = ApiClient.convertToType(data['BucketName'], 'String');
            }
            if (data.hasOwnProperty('InclusionPrefixes')) {
                obj['InclusionPrefixes'] = ApiClient.convertToType(data['InclusionPrefixes'], Array);
            }
            if (data.hasOwnProperty('InclusionPatterns')) {
                obj['InclusionPatterns'] = ApiClient.convertToType(data['InclusionPatterns'], Array);
            }
            if (data.hasOwnProperty('ExclusionPatterns')) {
                obj['ExclusionPatterns'] = ApiClient.convertToType(data['ExclusionPatterns'], Array);
            }
            if (data.hasOwnProperty('DocumentsMetadataConfiguration')) {
                obj['DocumentsMetadataConfiguration'] = DocumentsMetadataConfiguration.constructFromObject(data['DocumentsMetadataConfiguration']);
            }
            if (data.hasOwnProperty('AccessControlListConfiguration')) {
                obj['AccessControlListConfiguration'] = S3DataSourceConfigurationAccessControlListConfiguration.constructFromObject(data['AccessControlListConfiguration']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DataSourceConfigurationS3Configuration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataSourceConfigurationS3Configuration</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DataSourceConfigurationS3Configuration.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `BucketName`
        if (data['BucketName']) { // data not null
          String.validateJSON(data['BucketName']);
        }
        // validate the optional field `InclusionPrefixes`
        if (data['InclusionPrefixes']) { // data not null
          Array.validateJSON(data['InclusionPrefixes']);
        }
        // validate the optional field `InclusionPatterns`
        if (data['InclusionPatterns']) { // data not null
          Array.validateJSON(data['InclusionPatterns']);
        }
        // validate the optional field `ExclusionPatterns`
        if (data['ExclusionPatterns']) { // data not null
          Array.validateJSON(data['ExclusionPatterns']);
        }
        // validate the optional field `DocumentsMetadataConfiguration`
        if (data['DocumentsMetadataConfiguration']) { // data not null
          DocumentsMetadataConfiguration.validateJSON(data['DocumentsMetadataConfiguration']);
        }
        // validate the optional field `AccessControlListConfiguration`
        if (data['AccessControlListConfiguration']) { // data not null
          S3DataSourceConfigurationAccessControlListConfiguration.validateJSON(data['AccessControlListConfiguration']);
        }

        return true;
    }


}

DataSourceConfigurationS3Configuration.RequiredProperties = ["BucketName"];

/**
 * @member {String} BucketName
 */
DataSourceConfigurationS3Configuration.prototype['BucketName'] = undefined;

/**
 * @member {Array} InclusionPrefixes
 */
DataSourceConfigurationS3Configuration.prototype['InclusionPrefixes'] = undefined;

/**
 * @member {Array} InclusionPatterns
 */
DataSourceConfigurationS3Configuration.prototype['InclusionPatterns'] = undefined;

/**
 * @member {Array} ExclusionPatterns
 */
DataSourceConfigurationS3Configuration.prototype['ExclusionPatterns'] = undefined;

/**
 * @member {module:model/DocumentsMetadataConfiguration} DocumentsMetadataConfiguration
 */
DataSourceConfigurationS3Configuration.prototype['DocumentsMetadataConfiguration'] = undefined;

/**
 * @member {module:model/S3DataSourceConfigurationAccessControlListConfiguration} AccessControlListConfiguration
 */
DataSourceConfigurationS3Configuration.prototype['AccessControlListConfiguration'] = undefined;


// Implement S3DataSourceConfiguration interface:
/**
 * @member {String} BucketName
 */
S3DataSourceConfiguration.prototype['BucketName'] = undefined;
/**
 * @member {Array} InclusionPrefixes
 */
S3DataSourceConfiguration.prototype['InclusionPrefixes'] = undefined;
/**
 * @member {Array} InclusionPatterns
 */
S3DataSourceConfiguration.prototype['InclusionPatterns'] = undefined;
/**
 * @member {Array} ExclusionPatterns
 */
S3DataSourceConfiguration.prototype['ExclusionPatterns'] = undefined;
/**
 * @member {module:model/DocumentsMetadataConfiguration} DocumentsMetadataConfiguration
 */
S3DataSourceConfiguration.prototype['DocumentsMetadataConfiguration'] = undefined;
/**
 * @member {module:model/S3DataSourceConfigurationAccessControlListConfiguration} AccessControlListConfiguration
 */
S3DataSourceConfiguration.prototype['AccessControlListConfiguration'] = undefined;




export default DataSourceConfigurationS3Configuration;

