/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContentType from './ContentType';
import S3Path from './S3Path';

/**
 * The Document model module.
 * @module model/Document
 * @version 2019-02-03
 */
class Document {
    /**
     * Constructs a new <code>Document</code>.
     * A document in an index.
     * @alias module:model/Document
     * @param id {String} 
     */
    constructor(id) { 
        
        Document.initialize(this, id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id) { 
        obj['Id'] = id;
    }

    /**
     * Constructs a <code>Document</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Document} obj Optional instance to populate.
     * @return {module:model/Document} The populated <code>Document</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Document();

            if (data.hasOwnProperty('Id')) {
                obj['Id'] = ApiClient.convertToType(data['Id'], 'String');
            }
            if (data.hasOwnProperty('Title')) {
                obj['Title'] = ApiClient.convertToType(data['Title'], 'String');
            }
            if (data.hasOwnProperty('Blob')) {
                obj['Blob'] = ApiClient.convertToType(data['Blob'], 'String');
            }
            if (data.hasOwnProperty('S3Path')) {
                obj['S3Path'] = S3Path.constructFromObject(data['S3Path']);
            }
            if (data.hasOwnProperty('Attributes')) {
                obj['Attributes'] = ApiClient.convertToType(data['Attributes'], Array);
            }
            if (data.hasOwnProperty('AccessControlList')) {
                obj['AccessControlList'] = ApiClient.convertToType(data['AccessControlList'], Array);
            }
            if (data.hasOwnProperty('HierarchicalAccessControlList')) {
                obj['HierarchicalAccessControlList'] = ApiClient.convertToType(data['HierarchicalAccessControlList'], Array);
            }
            if (data.hasOwnProperty('ContentType')) {
                obj['ContentType'] = ApiClient.convertToType(data['ContentType'], ContentType);
            }
            if (data.hasOwnProperty('AccessControlConfigurationId')) {
                obj['AccessControlConfigurationId'] = ApiClient.convertToType(data['AccessControlConfigurationId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Document</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Document</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Document.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `Id`
        if (data['Id']) { // data not null
          String.validateJSON(data['Id']);
        }
        // validate the optional field `Title`
        if (data['Title']) { // data not null
          String.validateJSON(data['Title']);
        }
        // validate the optional field `Blob`
        if (data['Blob']) { // data not null
          String.validateJSON(data['Blob']);
        }
        // validate the optional field `S3Path`
        if (data['S3Path']) { // data not null
          S3Path.validateJSON(data['S3Path']);
        }
        // validate the optional field `Attributes`
        if (data['Attributes']) { // data not null
          Array.validateJSON(data['Attributes']);
        }
        // validate the optional field `AccessControlList`
        if (data['AccessControlList']) { // data not null
          Array.validateJSON(data['AccessControlList']);
        }
        // validate the optional field `HierarchicalAccessControlList`
        if (data['HierarchicalAccessControlList']) { // data not null
          Array.validateJSON(data['HierarchicalAccessControlList']);
        }
        // validate the optional field `ContentType`
        if (data['ContentType']) { // data not null
          ContentType.validateJSON(data['ContentType']);
        }
        // validate the optional field `AccessControlConfigurationId`
        if (data['AccessControlConfigurationId']) { // data not null
          String.validateJSON(data['AccessControlConfigurationId']);
        }

        return true;
    }


}

Document.RequiredProperties = ["Id"];

/**
 * @member {String} Id
 */
Document.prototype['Id'] = undefined;

/**
 * @member {String} Title
 */
Document.prototype['Title'] = undefined;

/**
 * @member {String} Blob
 */
Document.prototype['Blob'] = undefined;

/**
 * @member {module:model/S3Path} S3Path
 */
Document.prototype['S3Path'] = undefined;

/**
 * @member {Array} Attributes
 */
Document.prototype['Attributes'] = undefined;

/**
 * @member {Array} AccessControlList
 */
Document.prototype['AccessControlList'] = undefined;

/**
 * @member {Array} HierarchicalAccessControlList
 */
Document.prototype['HierarchicalAccessControlList'] = undefined;

/**
 * @member {module:model/ContentType} ContentType
 */
Document.prototype['ContentType'] = undefined;

/**
 * @member {String} AccessControlConfigurationId
 */
Document.prototype['AccessControlConfigurationId'] = undefined;






export default Document;

