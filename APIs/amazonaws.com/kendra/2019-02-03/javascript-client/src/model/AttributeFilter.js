/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AttributeFilterContainsAll from './AttributeFilterContainsAll';
import AttributeFilterContainsAny from './AttributeFilterContainsAny';
import AttributeFilterEqualsTo from './AttributeFilterEqualsTo';
import AttributeFilterGreaterThan from './AttributeFilterGreaterThan';
import AttributeFilterGreaterThanOrEquals from './AttributeFilterGreaterThanOrEquals';
import AttributeFilterLessThan from './AttributeFilterLessThan';
import AttributeFilterLessThanOrEquals from './AttributeFilterLessThanOrEquals';
import AttributeFilterNotFilter from './AttributeFilterNotFilter';

/**
 * The AttributeFilter model module.
 * @module model/AttributeFilter
 * @version 2019-02-03
 */
class AttributeFilter {
    /**
     * Constructs a new <code>AttributeFilter</code>.
     * &lt;p&gt;Provides filtering the query results based on document attributes or metadata fields.&lt;/p&gt; &lt;p&gt;When you use the &lt;code&gt;AndAllFilters&lt;/code&gt; or &lt;code&gt;OrAllFilters&lt;/code&gt;, filters you can use 2 layers under the first attribute filter. For example, you can use:&lt;/p&gt; &lt;p&gt; &lt;code&gt;&amp;lt;AndAllFilters&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt; &amp;lt;OrAllFilters&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt; &amp;lt;EqualsTo&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;If you use more than 2 layers, you receive a &lt;code&gt;ValidationException&lt;/code&gt; exception with the message \&quot;&lt;code&gt;AttributeFilter&lt;/code&gt; cannot have a depth of more than 2.\&quot;&lt;/p&gt; &lt;p&gt;If you use more than 10 attribute filters in a given list for &lt;code&gt;AndAllFilters&lt;/code&gt; or &lt;code&gt;OrAllFilters&lt;/code&gt;, you receive a &lt;code&gt;ValidationException&lt;/code&gt; with the message \&quot;&lt;code&gt;AttributeFilter&lt;/code&gt; cannot have a length of more than 10\&quot;.&lt;/p&gt;
     * @alias module:model/AttributeFilter
     */
    constructor() { 
        
        AttributeFilter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AttributeFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AttributeFilter} obj Optional instance to populate.
     * @return {module:model/AttributeFilter} The populated <code>AttributeFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AttributeFilter();

            if (data.hasOwnProperty('AndAllFilters')) {
                obj['AndAllFilters'] = ApiClient.convertToType(data['AndAllFilters'], Array);
            }
            if (data.hasOwnProperty('OrAllFilters')) {
                obj['OrAllFilters'] = ApiClient.convertToType(data['OrAllFilters'], Array);
            }
            if (data.hasOwnProperty('NotFilter')) {
                obj['NotFilter'] = AttributeFilterNotFilter.constructFromObject(data['NotFilter']);
            }
            if (data.hasOwnProperty('EqualsTo')) {
                obj['EqualsTo'] = AttributeFilterEqualsTo.constructFromObject(data['EqualsTo']);
            }
            if (data.hasOwnProperty('ContainsAll')) {
                obj['ContainsAll'] = AttributeFilterContainsAll.constructFromObject(data['ContainsAll']);
            }
            if (data.hasOwnProperty('ContainsAny')) {
                obj['ContainsAny'] = AttributeFilterContainsAny.constructFromObject(data['ContainsAny']);
            }
            if (data.hasOwnProperty('GreaterThan')) {
                obj['GreaterThan'] = AttributeFilterGreaterThan.constructFromObject(data['GreaterThan']);
            }
            if (data.hasOwnProperty('GreaterThanOrEquals')) {
                obj['GreaterThanOrEquals'] = AttributeFilterGreaterThanOrEquals.constructFromObject(data['GreaterThanOrEquals']);
            }
            if (data.hasOwnProperty('LessThan')) {
                obj['LessThan'] = AttributeFilterLessThan.constructFromObject(data['LessThan']);
            }
            if (data.hasOwnProperty('LessThanOrEquals')) {
                obj['LessThanOrEquals'] = AttributeFilterLessThanOrEquals.constructFromObject(data['LessThanOrEquals']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AttributeFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AttributeFilter</code>.
     */
    static validateJSON(data) {
        // validate the optional field `AndAllFilters`
        if (data['AndAllFilters']) { // data not null
          Array.validateJSON(data['AndAllFilters']);
        }
        // validate the optional field `OrAllFilters`
        if (data['OrAllFilters']) { // data not null
          Array.validateJSON(data['OrAllFilters']);
        }
        // validate the optional field `NotFilter`
        if (data['NotFilter']) { // data not null
          AttributeFilterNotFilter.validateJSON(data['NotFilter']);
        }
        // validate the optional field `EqualsTo`
        if (data['EqualsTo']) { // data not null
          AttributeFilterEqualsTo.validateJSON(data['EqualsTo']);
        }
        // validate the optional field `ContainsAll`
        if (data['ContainsAll']) { // data not null
          AttributeFilterContainsAll.validateJSON(data['ContainsAll']);
        }
        // validate the optional field `ContainsAny`
        if (data['ContainsAny']) { // data not null
          AttributeFilterContainsAny.validateJSON(data['ContainsAny']);
        }
        // validate the optional field `GreaterThan`
        if (data['GreaterThan']) { // data not null
          AttributeFilterGreaterThan.validateJSON(data['GreaterThan']);
        }
        // validate the optional field `GreaterThanOrEquals`
        if (data['GreaterThanOrEquals']) { // data not null
          AttributeFilterGreaterThanOrEquals.validateJSON(data['GreaterThanOrEquals']);
        }
        // validate the optional field `LessThan`
        if (data['LessThan']) { // data not null
          AttributeFilterLessThan.validateJSON(data['LessThan']);
        }
        // validate the optional field `LessThanOrEquals`
        if (data['LessThanOrEquals']) { // data not null
          AttributeFilterLessThanOrEquals.validateJSON(data['LessThanOrEquals']);
        }

        return true;
    }


}



/**
 * @member {Array} AndAllFilters
 */
AttributeFilter.prototype['AndAllFilters'] = undefined;

/**
 * @member {Array} OrAllFilters
 */
AttributeFilter.prototype['OrAllFilters'] = undefined;

/**
 * @member {module:model/AttributeFilterNotFilter} NotFilter
 */
AttributeFilter.prototype['NotFilter'] = undefined;

/**
 * @member {module:model/AttributeFilterEqualsTo} EqualsTo
 */
AttributeFilter.prototype['EqualsTo'] = undefined;

/**
 * @member {module:model/AttributeFilterContainsAll} ContainsAll
 */
AttributeFilter.prototype['ContainsAll'] = undefined;

/**
 * @member {module:model/AttributeFilterContainsAny} ContainsAny
 */
AttributeFilter.prototype['ContainsAny'] = undefined;

/**
 * @member {module:model/AttributeFilterGreaterThan} GreaterThan
 */
AttributeFilter.prototype['GreaterThan'] = undefined;

/**
 * @member {module:model/AttributeFilterGreaterThanOrEquals} GreaterThanOrEquals
 */
AttributeFilter.prototype['GreaterThanOrEquals'] = undefined;

/**
 * @member {module:model/AttributeFilterLessThan} LessThan
 */
AttributeFilter.prototype['LessThan'] = undefined;

/**
 * @member {module:model/AttributeFilterLessThanOrEquals} LessThanOrEquals
 */
AttributeFilter.prototype['LessThanOrEquals'] = undefined;






export default AttributeFilter;

