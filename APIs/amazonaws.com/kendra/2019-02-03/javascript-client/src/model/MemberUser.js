/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MemberUser model module.
 * @module model/MemberUser
 * @version 2019-02-03
 */
class MemberUser {
    /**
     * Constructs a new <code>MemberUser</code>.
     * The users that belong to a group.
     * @alias module:model/MemberUser
     * @param userId {String} 
     */
    constructor(userId) { 
        
        MemberUser.initialize(this, userId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, userId) { 
        obj['UserId'] = userId;
    }

    /**
     * Constructs a <code>MemberUser</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MemberUser} obj Optional instance to populate.
     * @return {module:model/MemberUser} The populated <code>MemberUser</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MemberUser();

            if (data.hasOwnProperty('UserId')) {
                obj['UserId'] = ApiClient.convertToType(data['UserId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MemberUser</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MemberUser</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MemberUser.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `UserId`
        if (data['UserId']) { // data not null
          String.validateJSON(data['UserId']);
        }

        return true;
    }


}

MemberUser.RequiredProperties = ["UserId"];

/**
 * @member {String} UserId
 */
MemberUser.prototype['UserId'] = undefined;






export default MemberUser;

