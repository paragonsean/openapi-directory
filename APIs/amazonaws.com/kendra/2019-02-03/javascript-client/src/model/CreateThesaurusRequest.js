/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateThesaurusRequestSourceS3Path from './CreateThesaurusRequestSourceS3Path';

/**
 * The CreateThesaurusRequest model module.
 * @module model/CreateThesaurusRequest
 * @version 2019-02-03
 */
class CreateThesaurusRequest {
    /**
     * Constructs a new <code>CreateThesaurusRequest</code>.
     * @alias module:model/CreateThesaurusRequest
     * @param indexId {String} 
     * @param name {String} 
     * @param roleArn {String} 
     * @param sourceS3Path {module:model/CreateThesaurusRequestSourceS3Path} 
     */
    constructor(indexId, name, roleArn, sourceS3Path) { 
        
        CreateThesaurusRequest.initialize(this, indexId, name, roleArn, sourceS3Path);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, indexId, name, roleArn, sourceS3Path) { 
        obj['IndexId'] = indexId;
        obj['Name'] = name;
        obj['RoleArn'] = roleArn;
        obj['SourceS3Path'] = sourceS3Path;
    }

    /**
     * Constructs a <code>CreateThesaurusRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateThesaurusRequest} obj Optional instance to populate.
     * @return {module:model/CreateThesaurusRequest} The populated <code>CreateThesaurusRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateThesaurusRequest();

            if (data.hasOwnProperty('IndexId')) {
                obj['IndexId'] = ApiClient.convertToType(data['IndexId'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('RoleArn')) {
                obj['RoleArn'] = ApiClient.convertToType(data['RoleArn'], 'String');
            }
            if (data.hasOwnProperty('Tags')) {
                obj['Tags'] = ApiClient.convertToType(data['Tags'], Array);
            }
            if (data.hasOwnProperty('SourceS3Path')) {
                obj['SourceS3Path'] = CreateThesaurusRequestSourceS3Path.constructFromObject(data['SourceS3Path']);
            }
            if (data.hasOwnProperty('ClientToken')) {
                obj['ClientToken'] = ApiClient.convertToType(data['ClientToken'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateThesaurusRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateThesaurusRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateThesaurusRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `IndexId`
        if (data['IndexId']) { // data not null
          String.validateJSON(data['IndexId']);
        }
        // validate the optional field `Name`
        if (data['Name']) { // data not null
          String.validateJSON(data['Name']);
        }
        // validate the optional field `Description`
        if (data['Description']) { // data not null
          String.validateJSON(data['Description']);
        }
        // validate the optional field `RoleArn`
        if (data['RoleArn']) { // data not null
          String.validateJSON(data['RoleArn']);
        }
        // validate the optional field `Tags`
        if (data['Tags']) { // data not null
          Array.validateJSON(data['Tags']);
        }
        // validate the optional field `SourceS3Path`
        if (data['SourceS3Path']) { // data not null
          CreateThesaurusRequestSourceS3Path.validateJSON(data['SourceS3Path']);
        }
        // validate the optional field `ClientToken`
        if (data['ClientToken']) { // data not null
          String.validateJSON(data['ClientToken']);
        }

        return true;
    }


}

CreateThesaurusRequest.RequiredProperties = ["IndexId", "Name", "RoleArn", "SourceS3Path"];

/**
 * @member {String} IndexId
 */
CreateThesaurusRequest.prototype['IndexId'] = undefined;

/**
 * @member {String} Name
 */
CreateThesaurusRequest.prototype['Name'] = undefined;

/**
 * @member {String} Description
 */
CreateThesaurusRequest.prototype['Description'] = undefined;

/**
 * @member {String} RoleArn
 */
CreateThesaurusRequest.prototype['RoleArn'] = undefined;

/**
 * @member {Array} Tags
 */
CreateThesaurusRequest.prototype['Tags'] = undefined;

/**
 * @member {module:model/CreateThesaurusRequestSourceS3Path} SourceS3Path
 */
CreateThesaurusRequest.prototype['SourceS3Path'] = undefined;

/**
 * @member {String} ClientToken
 */
CreateThesaurusRequest.prototype['ClientToken'] = undefined;






export default CreateThesaurusRequest;

