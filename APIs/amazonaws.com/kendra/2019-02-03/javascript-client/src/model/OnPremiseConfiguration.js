/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OnPremiseConfigurationSslCertificateS3Path from './OnPremiseConfigurationSslCertificateS3Path';

/**
 * The OnPremiseConfiguration model module.
 * @module model/OnPremiseConfiguration
 * @version 2019-02-03
 */
class OnPremiseConfiguration {
    /**
     * Constructs a new <code>OnPremiseConfiguration</code>.
     * Provides the configuration information to connect to GitHub Enterprise Server (on premises).
     * @alias module:model/OnPremiseConfiguration
     * @param hostUrl {String} 
     * @param organizationName {String} 
     * @param sslCertificateS3Path {module:model/OnPremiseConfigurationSslCertificateS3Path} 
     */
    constructor(hostUrl, organizationName, sslCertificateS3Path) { 
        
        OnPremiseConfiguration.initialize(this, hostUrl, organizationName, sslCertificateS3Path);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, hostUrl, organizationName, sslCertificateS3Path) { 
        obj['HostUrl'] = hostUrl;
        obj['OrganizationName'] = organizationName;
        obj['SslCertificateS3Path'] = sslCertificateS3Path;
    }

    /**
     * Constructs a <code>OnPremiseConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OnPremiseConfiguration} obj Optional instance to populate.
     * @return {module:model/OnPremiseConfiguration} The populated <code>OnPremiseConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OnPremiseConfiguration();

            if (data.hasOwnProperty('HostUrl')) {
                obj['HostUrl'] = ApiClient.convertToType(data['HostUrl'], 'String');
            }
            if (data.hasOwnProperty('OrganizationName')) {
                obj['OrganizationName'] = ApiClient.convertToType(data['OrganizationName'], 'String');
            }
            if (data.hasOwnProperty('SslCertificateS3Path')) {
                obj['SslCertificateS3Path'] = OnPremiseConfigurationSslCertificateS3Path.constructFromObject(data['SslCertificateS3Path']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OnPremiseConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OnPremiseConfiguration</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OnPremiseConfiguration.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `HostUrl`
        if (data['HostUrl']) { // data not null
          String.validateJSON(data['HostUrl']);
        }
        // validate the optional field `OrganizationName`
        if (data['OrganizationName']) { // data not null
          String.validateJSON(data['OrganizationName']);
        }
        // validate the optional field `SslCertificateS3Path`
        if (data['SslCertificateS3Path']) { // data not null
          OnPremiseConfigurationSslCertificateS3Path.validateJSON(data['SslCertificateS3Path']);
        }

        return true;
    }


}

OnPremiseConfiguration.RequiredProperties = ["HostUrl", "OrganizationName", "SslCertificateS3Path"];

/**
 * @member {String} HostUrl
 */
OnPremiseConfiguration.prototype['HostUrl'] = undefined;

/**
 * @member {String} OrganizationName
 */
OnPremiseConfiguration.prototype['OrganizationName'] = undefined;

/**
 * @member {module:model/OnPremiseConfigurationSslCertificateS3Path} SslCertificateS3Path
 */
OnPremiseConfiguration.prototype['SslCertificateS3Path'] = undefined;






export default OnPremiseConfiguration;

