/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PrincipalType from './PrincipalType';
import ReadAccessType from './ReadAccessType';

/**
 * The Principal model module.
 * @module model/Principal
 * @version 2019-02-03
 */
class Principal {
    /**
     * Constructs a new <code>Principal</code>.
     * Provides user and group information for &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kendra/latest/dg/user-context-filter.html\&quot;&gt;user context filtering&lt;/a&gt;.
     * @alias module:model/Principal
     * @param name {String} 
     * @param type {module:model/PrincipalType} 
     * @param access {module:model/ReadAccessType} 
     */
    constructor(name, type, access) { 
        
        Principal.initialize(this, name, type, access);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, type, access) { 
        obj['Name'] = name;
        obj['Type'] = type;
        obj['Access'] = access;
    }

    /**
     * Constructs a <code>Principal</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Principal} obj Optional instance to populate.
     * @return {module:model/Principal} The populated <code>Principal</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Principal();

            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Type')) {
                obj['Type'] = ApiClient.convertToType(data['Type'], PrincipalType);
            }
            if (data.hasOwnProperty('Access')) {
                obj['Access'] = ApiClient.convertToType(data['Access'], ReadAccessType);
            }
            if (data.hasOwnProperty('DataSourceId')) {
                obj['DataSourceId'] = ApiClient.convertToType(data['DataSourceId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Principal</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Principal</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Principal.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `Name`
        if (data['Name']) { // data not null
          String.validateJSON(data['Name']);
        }
        // validate the optional field `Type`
        if (data['Type']) { // data not null
          PrincipalType.validateJSON(data['Type']);
        }
        // validate the optional field `Access`
        if (data['Access']) { // data not null
          ReadAccessType.validateJSON(data['Access']);
        }
        // validate the optional field `DataSourceId`
        if (data['DataSourceId']) { // data not null
          String.validateJSON(data['DataSourceId']);
        }

        return true;
    }


}

Principal.RequiredProperties = ["Name", "Type", "Access"];

/**
 * @member {String} Name
 */
Principal.prototype['Name'] = undefined;

/**
 * @member {module:model/PrincipalType} Type
 */
Principal.prototype['Type'] = undefined;

/**
 * @member {module:model/ReadAccessType} Access
 */
Principal.prototype['Access'] = undefined;

/**
 * @member {String} DataSourceId
 */
Principal.prototype['DataSourceId'] = undefined;






export default Principal;

