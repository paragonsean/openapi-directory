/**
 * AWSKendraFrontendService
 * Amazon Kendra is a service for indexing large document sets.
 *
 * The version of the OpenAPI document: 2019-02-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Search from './Search';

/**
 * The DocumentMetadataConfigurationSearch model module.
 * @module model/DocumentMetadataConfigurationSearch
 * @version 2019-02-03
 */
class DocumentMetadataConfigurationSearch {
    /**
     * Constructs a new <code>DocumentMetadataConfigurationSearch</code>.
     * @alias module:model/DocumentMetadataConfigurationSearch
     * @implements module:model/Search
     */
    constructor() { 
        Search.initialize(this);
        DocumentMetadataConfigurationSearch.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DocumentMetadataConfigurationSearch</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DocumentMetadataConfigurationSearch} obj Optional instance to populate.
     * @return {module:model/DocumentMetadataConfigurationSearch} The populated <code>DocumentMetadataConfigurationSearch</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DocumentMetadataConfigurationSearch();
            Search.constructFromObject(data, obj);

            if (data.hasOwnProperty('Facetable')) {
                obj['Facetable'] = ApiClient.convertToType(data['Facetable'], 'Boolean');
            }
            if (data.hasOwnProperty('Searchable')) {
                obj['Searchable'] = ApiClient.convertToType(data['Searchable'], 'Boolean');
            }
            if (data.hasOwnProperty('Displayable')) {
                obj['Displayable'] = ApiClient.convertToType(data['Displayable'], 'Boolean');
            }
            if (data.hasOwnProperty('Sortable')) {
                obj['Sortable'] = ApiClient.convertToType(data['Sortable'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DocumentMetadataConfigurationSearch</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DocumentMetadataConfigurationSearch</code>.
     */
    static validateJSON(data) {
        // validate the optional field `Facetable`
        if (data['Facetable']) { // data not null
          Boolean.validateJSON(data['Facetable']);
        }
        // validate the optional field `Searchable`
        if (data['Searchable']) { // data not null
          Boolean.validateJSON(data['Searchable']);
        }
        // validate the optional field `Displayable`
        if (data['Displayable']) { // data not null
          Boolean.validateJSON(data['Displayable']);
        }
        // validate the optional field `Sortable`
        if (data['Sortable']) { // data not null
          Boolean.validateJSON(data['Sortable']);
        }

        return true;
    }


}



/**
 * @member {Boolean} Facetable
 */
DocumentMetadataConfigurationSearch.prototype['Facetable'] = undefined;

/**
 * @member {Boolean} Searchable
 */
DocumentMetadataConfigurationSearch.prototype['Searchable'] = undefined;

/**
 * @member {Boolean} Displayable
 */
DocumentMetadataConfigurationSearch.prototype['Displayable'] = undefined;

/**
 * @member {Boolean} Sortable
 */
DocumentMetadataConfigurationSearch.prototype['Sortable'] = undefined;


// Implement Search interface:
/**
 * @member {Boolean} Facetable
 */
Search.prototype['Facetable'] = undefined;
/**
 * @member {Boolean} Searchable
 */
Search.prototype['Searchable'] = undefined;
/**
 * @member {Boolean} Displayable
 */
Search.prototype['Displayable'] = undefined;
/**
 * @member {Boolean} Sortable
 */
Search.prototype['Sortable'] = undefined;




export default DocumentMetadataConfigurationSearch;

