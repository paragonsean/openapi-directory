# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.repository_provider import RepositoryProvider
from openapi_server import util


class AccountSettingsPipelineProvisioningRepository(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arn: str=None, branch: str=None, name: str=None, provider: RepositoryProvider=None):
        """AccountSettingsPipelineProvisioningRepository - a model defined in OpenAPI

        :param arn: The arn of this AccountSettingsPipelineProvisioningRepository.
        :param branch: The branch of this AccountSettingsPipelineProvisioningRepository.
        :param name: The name of this AccountSettingsPipelineProvisioningRepository.
        :param provider: The provider of this AccountSettingsPipelineProvisioningRepository.
        """
        self.openapi_types = {
            'arn': str,
            'branch': str,
            'name': str,
            'provider': RepositoryProvider
        }

        self.attribute_map = {
            'arn': 'arn',
            'branch': 'branch',
            'name': 'name',
            'provider': 'provider'
        }

        self._arn = arn
        self._branch = branch
        self._name = name
        self._provider = provider

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountSettingsPipelineProvisioningRepository':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountSettings_pipelineProvisioningRepository of this AccountSettingsPipelineProvisioningRepository.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arn(self):
        """Gets the arn of this AccountSettingsPipelineProvisioningRepository.


        :return: The arn of this AccountSettingsPipelineProvisioningRepository.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this AccountSettingsPipelineProvisioningRepository.


        :param arn: The arn of this AccountSettingsPipelineProvisioningRepository.
        :type arn: str
        """
        if arn is None:
            raise ValueError("Invalid value for `arn`, must not be `None`")

        self._arn = arn

    @property
    def branch(self):
        """Gets the branch of this AccountSettingsPipelineProvisioningRepository.


        :return: The branch of this AccountSettingsPipelineProvisioningRepository.
        :rtype: str
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this AccountSettingsPipelineProvisioningRepository.


        :param branch: The branch of this AccountSettingsPipelineProvisioningRepository.
        :type branch: str
        """
        if branch is None:
            raise ValueError("Invalid value for `branch`, must not be `None`")

        self._branch = branch

    @property
    def name(self):
        """Gets the name of this AccountSettingsPipelineProvisioningRepository.


        :return: The name of this AccountSettingsPipelineProvisioningRepository.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AccountSettingsPipelineProvisioningRepository.


        :param name: The name of this AccountSettingsPipelineProvisioningRepository.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def provider(self):
        """Gets the provider of this AccountSettingsPipelineProvisioningRepository.


        :return: The provider of this AccountSettingsPipelineProvisioningRepository.
        :rtype: RepositoryProvider
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this AccountSettingsPipelineProvisioningRepository.


        :param provider: The provider of this AccountSettingsPipelineProvisioningRepository.
        :type provider: RepositoryProvider
        """
        if provider is None:
            raise ValueError("Invalid value for `provider`, must not be `None`")

        self._provider = provider
