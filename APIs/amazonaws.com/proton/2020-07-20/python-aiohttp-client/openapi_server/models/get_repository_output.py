# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_repository_output_repository import CreateRepositoryOutputRepository
from openapi_server import util


class GetRepositoryOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, repository: CreateRepositoryOutputRepository=None):
        """GetRepositoryOutput - a model defined in OpenAPI

        :param repository: The repository of this GetRepositoryOutput.
        """
        self.openapi_types = {
            'repository': CreateRepositoryOutputRepository
        }

        self.attribute_map = {
            'repository': 'repository'
        }

        self._repository = repository

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetRepositoryOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetRepositoryOutput of this GetRepositoryOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def repository(self):
        """Gets the repository of this GetRepositoryOutput.


        :return: The repository of this GetRepositoryOutput.
        :rtype: CreateRepositoryOutputRepository
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """Sets the repository of this GetRepositoryOutput.


        :param repository: The repository of this GetRepositoryOutput.
        :type repository: CreateRepositoryOutputRepository
        """
        if repository is None:
            raise ValueError("Invalid value for `repository`, must not be `None`")

        self._repository = repository
