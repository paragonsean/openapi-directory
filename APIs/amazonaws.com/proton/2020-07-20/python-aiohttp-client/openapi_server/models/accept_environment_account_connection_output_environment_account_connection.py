# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.environment_account_connection_status import EnvironmentAccountConnectionStatus
from openapi_server import util


class AcceptEnvironmentAccountConnectionOutputEnvironmentAccountConnection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arn: str=None, codebuild_role_arn: str=None, component_role_arn: str=None, environment_account_id: str=None, environment_name: str=None, id: str=None, last_modified_at: datetime=None, management_account_id: str=None, requested_at: datetime=None, role_arn: str=None, status: EnvironmentAccountConnectionStatus=None):
        """AcceptEnvironmentAccountConnectionOutputEnvironmentAccountConnection - a model defined in OpenAPI

        :param arn: The arn of this AcceptEnvironmentAccountConnectionOutputEnvironmentAccountConnection.
        :param codebuild_role_arn: The codebuild_role_arn of this AcceptEnvironmentAccountConnectionOutputEnvironmentAccountConnection.
        :param component_role_arn: The component_role_arn of this AcceptEnvironmentAccountConnectionOutputEnvironmentAccountConnection.
        :param environment_account_id: The environment_account_id of this AcceptEnvironmentAccountConnectionOutputEnvironmentAccountConnection.
        :param environment_name: The environment_name of this AcceptEnvironmentAccountConnectionOutputEnvironmentAccountConnection.
        :param id: The id of this AcceptEnvironmentAccountConnectionOutputEnvironmentAccountConnection.
        :param last_modified_at: The last_modified_at of this AcceptEnvironmentAccountConnectionOutputEnvironmentAccountConnection.
        :param management_account_id: The management_account_id of this AcceptEnvironmentAccountConnectionOutputEnvironmentAccountConnection.
        :param requested_at: The requested_at of this AcceptEnvironmentAccountConnectionOutputEnvironmentAccountConnection.
        :param role_arn: The role_arn of this AcceptEnvironmentAccountConnectionOutputEnvironmentAccountConnection.
        :param status: The status of this AcceptEnvironmentAccountConnectionOutputEnvironmentAccountConnection.
        """
        self.openapi_types = {
            'arn': str,
            'codebuild_role_arn': str,
            'component_role_arn': str,
            'environment_account_id': str,
            'environment_name': str,
            'id': str,
            'last_modified_at': datetime,
            'management_account_id': str,
            'requested_at': datetime,
            'role_arn': str,
            'status': EnvironmentAccountConnectionStatus
        }

        self.attribute_map = {
            'arn': 'arn',
            'codebuild_role_arn': 'codebuildRoleArn',
            'component_role_arn': 'componentRoleArn',
            'environment_account_id': 'environmentAccountId',
            'environment_name': 'environmentName',
            'id': 'id',
            'last_modified_at': 'lastModifiedAt',
            'management_account_id': 'managementAccountId',
            'requested_at': 'requestedAt',
            'role_arn': 'roleArn',
            'status': 'status'
        }

        self._arn = arn
        self._codebuild_role_arn = codebuild_role_arn
        self._component_role_arn = component_role_arn
        self._environment_account_id = environment_account_id
        self._environment_name = environment_name
        self._id = id
        self._last_modified_at = last_modified_at
        self._management_account_id = management_account_id
        self._requested_at = requested_at
        self._role_arn = role_arn
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AcceptEnvironmentAccountConnectionOutputEnvironmentAccountConnection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AcceptEnvironmentAccountConnectionOutput_environmentAccountConnection of this AcceptEnvironmentAccountConnectionOutputEnvironmentAccountConnection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arn(self):
        """Gets the arn of this AcceptEnvironmentAccountConnectionOutputEnvironmentAccountConnection.


        :return: The arn of this AcceptEnvironmentAccountConnectionOutputEnvironmentAccountConnection.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this AcceptEnvironmentAccountConnectionOutputEnvironmentAccountConnection.


        :param arn: The arn of this AcceptEnvironmentAccountConnectionOutputEnvironmentAccountConnection.
        :type arn: str
        """
        if arn is None:
            raise ValueError("Invalid value for `arn`, must not be `None`")

        self._arn = arn

    @property
    def codebuild_role_arn(self):
        """Gets the codebuild_role_arn of this AcceptEnvironmentAccountConnectionOutputEnvironmentAccountConnection.


        :return: The codebuild_role_arn of this AcceptEnvironmentAccountConnectionOutputEnvironmentAccountConnection.
        :rtype: str
        """
        return self._codebuild_role_arn

    @codebuild_role_arn.setter
    def codebuild_role_arn(self, codebuild_role_arn):
        """Sets the codebuild_role_arn of this AcceptEnvironmentAccountConnectionOutputEnvironmentAccountConnection.


        :param codebuild_role_arn: The codebuild_role_arn of this AcceptEnvironmentAccountConnectionOutputEnvironmentAccountConnection.
        :type codebuild_role_arn: str
        """

        self._codebuild_role_arn = codebuild_role_arn

    @property
    def component_role_arn(self):
        """Gets the component_role_arn of this AcceptEnvironmentAccountConnectionOutputEnvironmentAccountConnection.


        :return: The component_role_arn of this AcceptEnvironmentAccountConnectionOutputEnvironmentAccountConnection.
        :rtype: str
        """
        return self._component_role_arn

    @component_role_arn.setter
    def component_role_arn(self, component_role_arn):
        """Sets the component_role_arn of this AcceptEnvironmentAccountConnectionOutputEnvironmentAccountConnection.


        :param component_role_arn: The component_role_arn of this AcceptEnvironmentAccountConnectionOutputEnvironmentAccountConnection.
        :type component_role_arn: str
        """

        self._component_role_arn = component_role_arn

    @property
    def environment_account_id(self):
        """Gets the environment_account_id of this AcceptEnvironmentAccountConnectionOutputEnvironmentAccountConnection.


        :return: The environment_account_id of this AcceptEnvironmentAccountConnectionOutputEnvironmentAccountConnection.
        :rtype: str
        """
        return self._environment_account_id

    @environment_account_id.setter
    def environment_account_id(self, environment_account_id):
        """Sets the environment_account_id of this AcceptEnvironmentAccountConnectionOutputEnvironmentAccountConnection.


        :param environment_account_id: The environment_account_id of this AcceptEnvironmentAccountConnectionOutputEnvironmentAccountConnection.
        :type environment_account_id: str
        """
        if environment_account_id is None:
            raise ValueError("Invalid value for `environment_account_id`, must not be `None`")

        self._environment_account_id = environment_account_id

    @property
    def environment_name(self):
        """Gets the environment_name of this AcceptEnvironmentAccountConnectionOutputEnvironmentAccountConnection.


        :return: The environment_name of this AcceptEnvironmentAccountConnectionOutputEnvironmentAccountConnection.
        :rtype: str
        """
        return self._environment_name

    @environment_name.setter
    def environment_name(self, environment_name):
        """Sets the environment_name of this AcceptEnvironmentAccountConnectionOutputEnvironmentAccountConnection.


        :param environment_name: The environment_name of this AcceptEnvironmentAccountConnectionOutputEnvironmentAccountConnection.
        :type environment_name: str
        """
        if environment_name is None:
            raise ValueError("Invalid value for `environment_name`, must not be `None`")

        self._environment_name = environment_name

    @property
    def id(self):
        """Gets the id of this AcceptEnvironmentAccountConnectionOutputEnvironmentAccountConnection.


        :return: The id of this AcceptEnvironmentAccountConnectionOutputEnvironmentAccountConnection.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AcceptEnvironmentAccountConnectionOutputEnvironmentAccountConnection.


        :param id: The id of this AcceptEnvironmentAccountConnectionOutputEnvironmentAccountConnection.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def last_modified_at(self):
        """Gets the last_modified_at of this AcceptEnvironmentAccountConnectionOutputEnvironmentAccountConnection.


        :return: The last_modified_at of this AcceptEnvironmentAccountConnectionOutputEnvironmentAccountConnection.
        :rtype: datetime
        """
        return self._last_modified_at

    @last_modified_at.setter
    def last_modified_at(self, last_modified_at):
        """Sets the last_modified_at of this AcceptEnvironmentAccountConnectionOutputEnvironmentAccountConnection.


        :param last_modified_at: The last_modified_at of this AcceptEnvironmentAccountConnectionOutputEnvironmentAccountConnection.
        :type last_modified_at: datetime
        """
        if last_modified_at is None:
            raise ValueError("Invalid value for `last_modified_at`, must not be `None`")

        self._last_modified_at = last_modified_at

    @property
    def management_account_id(self):
        """Gets the management_account_id of this AcceptEnvironmentAccountConnectionOutputEnvironmentAccountConnection.


        :return: The management_account_id of this AcceptEnvironmentAccountConnectionOutputEnvironmentAccountConnection.
        :rtype: str
        """
        return self._management_account_id

    @management_account_id.setter
    def management_account_id(self, management_account_id):
        """Sets the management_account_id of this AcceptEnvironmentAccountConnectionOutputEnvironmentAccountConnection.


        :param management_account_id: The management_account_id of this AcceptEnvironmentAccountConnectionOutputEnvironmentAccountConnection.
        :type management_account_id: str
        """
        if management_account_id is None:
            raise ValueError("Invalid value for `management_account_id`, must not be `None`")

        self._management_account_id = management_account_id

    @property
    def requested_at(self):
        """Gets the requested_at of this AcceptEnvironmentAccountConnectionOutputEnvironmentAccountConnection.


        :return: The requested_at of this AcceptEnvironmentAccountConnectionOutputEnvironmentAccountConnection.
        :rtype: datetime
        """
        return self._requested_at

    @requested_at.setter
    def requested_at(self, requested_at):
        """Sets the requested_at of this AcceptEnvironmentAccountConnectionOutputEnvironmentAccountConnection.


        :param requested_at: The requested_at of this AcceptEnvironmentAccountConnectionOutputEnvironmentAccountConnection.
        :type requested_at: datetime
        """
        if requested_at is None:
            raise ValueError("Invalid value for `requested_at`, must not be `None`")

        self._requested_at = requested_at

    @property
    def role_arn(self):
        """Gets the role_arn of this AcceptEnvironmentAccountConnectionOutputEnvironmentAccountConnection.


        :return: The role_arn of this AcceptEnvironmentAccountConnectionOutputEnvironmentAccountConnection.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this AcceptEnvironmentAccountConnectionOutputEnvironmentAccountConnection.


        :param role_arn: The role_arn of this AcceptEnvironmentAccountConnectionOutputEnvironmentAccountConnection.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")

        self._role_arn = role_arn

    @property
    def status(self):
        """Gets the status of this AcceptEnvironmentAccountConnectionOutputEnvironmentAccountConnection.


        :return: The status of this AcceptEnvironmentAccountConnectionOutputEnvironmentAccountConnection.
        :rtype: EnvironmentAccountConnectionStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AcceptEnvironmentAccountConnectionOutputEnvironmentAccountConnection.


        :param status: The status of this AcceptEnvironmentAccountConnectionOutputEnvironmentAccountConnection.
        :type status: EnvironmentAccountConnectionStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
