# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.repository_provider import RepositoryProvider
from openapi_server import util


class CreateRepositoryInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connection_arn: str=None, encryption_key: str=None, name: str=None, provider: RepositoryProvider=None, tags: List=None):
        """CreateRepositoryInput - a model defined in OpenAPI

        :param connection_arn: The connection_arn of this CreateRepositoryInput.
        :param encryption_key: The encryption_key of this CreateRepositoryInput.
        :param name: The name of this CreateRepositoryInput.
        :param provider: The provider of this CreateRepositoryInput.
        :param tags: The tags of this CreateRepositoryInput.
        """
        self.openapi_types = {
            'connection_arn': str,
            'encryption_key': str,
            'name': str,
            'provider': RepositoryProvider,
            'tags': List
        }

        self.attribute_map = {
            'connection_arn': 'connectionArn',
            'encryption_key': 'encryptionKey',
            'name': 'name',
            'provider': 'provider',
            'tags': 'tags'
        }

        self._connection_arn = connection_arn
        self._encryption_key = encryption_key
        self._name = name
        self._provider = provider
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateRepositoryInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateRepositoryInput of this CreateRepositoryInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connection_arn(self):
        """Gets the connection_arn of this CreateRepositoryInput.


        :return: The connection_arn of this CreateRepositoryInput.
        :rtype: str
        """
        return self._connection_arn

    @connection_arn.setter
    def connection_arn(self, connection_arn):
        """Sets the connection_arn of this CreateRepositoryInput.


        :param connection_arn: The connection_arn of this CreateRepositoryInput.
        :type connection_arn: str
        """
        if connection_arn is None:
            raise ValueError("Invalid value for `connection_arn`, must not be `None`")

        self._connection_arn = connection_arn

    @property
    def encryption_key(self):
        """Gets the encryption_key of this CreateRepositoryInput.


        :return: The encryption_key of this CreateRepositoryInput.
        :rtype: str
        """
        return self._encryption_key

    @encryption_key.setter
    def encryption_key(self, encryption_key):
        """Sets the encryption_key of this CreateRepositoryInput.


        :param encryption_key: The encryption_key of this CreateRepositoryInput.
        :type encryption_key: str
        """

        self._encryption_key = encryption_key

    @property
    def name(self):
        """Gets the name of this CreateRepositoryInput.


        :return: The name of this CreateRepositoryInput.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateRepositoryInput.


        :param name: The name of this CreateRepositoryInput.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def provider(self):
        """Gets the provider of this CreateRepositoryInput.


        :return: The provider of this CreateRepositoryInput.
        :rtype: RepositoryProvider
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this CreateRepositoryInput.


        :param provider: The provider of this CreateRepositoryInput.
        :type provider: RepositoryProvider
        """
        if provider is None:
            raise ValueError("Invalid value for `provider`, must not be `None`")

        self._provider = provider

    @property
    def tags(self):
        """Gets the tags of this CreateRepositoryInput.


        :return: The tags of this CreateRepositoryInput.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateRepositoryInput.


        :param tags: The tags of this CreateRepositoryInput.
        :type tags: List
        """

        self._tags = tags
