# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RepositorySyncDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, branch: str=None, directory: str=None, parent: str=None, target: str=None):
        """RepositorySyncDefinition - a model defined in OpenAPI

        :param branch: The branch of this RepositorySyncDefinition.
        :param directory: The directory of this RepositorySyncDefinition.
        :param parent: The parent of this RepositorySyncDefinition.
        :param target: The target of this RepositorySyncDefinition.
        """
        self.openapi_types = {
            'branch': str,
            'directory': str,
            'parent': str,
            'target': str
        }

        self.attribute_map = {
            'branch': 'branch',
            'directory': 'directory',
            'parent': 'parent',
            'target': 'target'
        }

        self._branch = branch
        self._directory = directory
        self._parent = parent
        self._target = target

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RepositorySyncDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RepositorySyncDefinition of this RepositorySyncDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def branch(self):
        """Gets the branch of this RepositorySyncDefinition.


        :return: The branch of this RepositorySyncDefinition.
        :rtype: str
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this RepositorySyncDefinition.


        :param branch: The branch of this RepositorySyncDefinition.
        :type branch: str
        """
        if branch is None:
            raise ValueError("Invalid value for `branch`, must not be `None`")

        self._branch = branch

    @property
    def directory(self):
        """Gets the directory of this RepositorySyncDefinition.


        :return: The directory of this RepositorySyncDefinition.
        :rtype: str
        """
        return self._directory

    @directory.setter
    def directory(self, directory):
        """Sets the directory of this RepositorySyncDefinition.


        :param directory: The directory of this RepositorySyncDefinition.
        :type directory: str
        """
        if directory is None:
            raise ValueError("Invalid value for `directory`, must not be `None`")

        self._directory = directory

    @property
    def parent(self):
        """Gets the parent of this RepositorySyncDefinition.


        :return: The parent of this RepositorySyncDefinition.
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this RepositorySyncDefinition.


        :param parent: The parent of this RepositorySyncDefinition.
        :type parent: str
        """
        if parent is None:
            raise ValueError("Invalid value for `parent`, must not be `None`")

        self._parent = parent

    @property
    def target(self):
        """Gets the target of this RepositorySyncDefinition.


        :return: The target of this RepositorySyncDefinition.
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this RepositorySyncDefinition.


        :param target: The target of this RepositorySyncDefinition.
        :type target: str
        """
        if target is None:
            raise ValueError("Invalid value for `target`, must not be `None`")

        self._target = target
