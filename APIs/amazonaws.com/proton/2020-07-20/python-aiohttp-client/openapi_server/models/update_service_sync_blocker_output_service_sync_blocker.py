# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.blocker_status import BlockerStatus
from openapi_server.models.blocker_type import BlockerType
from openapi_server import util


class UpdateServiceSyncBlockerOutputServiceSyncBlocker(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contexts: List=None, created_at: datetime=None, created_reason: str=None, id: str=None, resolved_at: datetime=None, resolved_reason: str=None, status: BlockerStatus=None, type: BlockerType=None):
        """UpdateServiceSyncBlockerOutputServiceSyncBlocker - a model defined in OpenAPI

        :param contexts: The contexts of this UpdateServiceSyncBlockerOutputServiceSyncBlocker.
        :param created_at: The created_at of this UpdateServiceSyncBlockerOutputServiceSyncBlocker.
        :param created_reason: The created_reason of this UpdateServiceSyncBlockerOutputServiceSyncBlocker.
        :param id: The id of this UpdateServiceSyncBlockerOutputServiceSyncBlocker.
        :param resolved_at: The resolved_at of this UpdateServiceSyncBlockerOutputServiceSyncBlocker.
        :param resolved_reason: The resolved_reason of this UpdateServiceSyncBlockerOutputServiceSyncBlocker.
        :param status: The status of this UpdateServiceSyncBlockerOutputServiceSyncBlocker.
        :param type: The type of this UpdateServiceSyncBlockerOutputServiceSyncBlocker.
        """
        self.openapi_types = {
            'contexts': List,
            'created_at': datetime,
            'created_reason': str,
            'id': str,
            'resolved_at': datetime,
            'resolved_reason': str,
            'status': BlockerStatus,
            'type': BlockerType
        }

        self.attribute_map = {
            'contexts': 'contexts',
            'created_at': 'createdAt',
            'created_reason': 'createdReason',
            'id': 'id',
            'resolved_at': 'resolvedAt',
            'resolved_reason': 'resolvedReason',
            'status': 'status',
            'type': 'type'
        }

        self._contexts = contexts
        self._created_at = created_at
        self._created_reason = created_reason
        self._id = id
        self._resolved_at = resolved_at
        self._resolved_reason = resolved_reason
        self._status = status
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateServiceSyncBlockerOutputServiceSyncBlocker':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateServiceSyncBlockerOutput_serviceSyncBlocker of this UpdateServiceSyncBlockerOutputServiceSyncBlocker.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contexts(self):
        """Gets the contexts of this UpdateServiceSyncBlockerOutputServiceSyncBlocker.


        :return: The contexts of this UpdateServiceSyncBlockerOutputServiceSyncBlocker.
        :rtype: List
        """
        return self._contexts

    @contexts.setter
    def contexts(self, contexts):
        """Sets the contexts of this UpdateServiceSyncBlockerOutputServiceSyncBlocker.


        :param contexts: The contexts of this UpdateServiceSyncBlockerOutputServiceSyncBlocker.
        :type contexts: List
        """

        self._contexts = contexts

    @property
    def created_at(self):
        """Gets the created_at of this UpdateServiceSyncBlockerOutputServiceSyncBlocker.


        :return: The created_at of this UpdateServiceSyncBlockerOutputServiceSyncBlocker.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this UpdateServiceSyncBlockerOutputServiceSyncBlocker.


        :param created_at: The created_at of this UpdateServiceSyncBlockerOutputServiceSyncBlocker.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def created_reason(self):
        """Gets the created_reason of this UpdateServiceSyncBlockerOutputServiceSyncBlocker.


        :return: The created_reason of this UpdateServiceSyncBlockerOutputServiceSyncBlocker.
        :rtype: str
        """
        return self._created_reason

    @created_reason.setter
    def created_reason(self, created_reason):
        """Sets the created_reason of this UpdateServiceSyncBlockerOutputServiceSyncBlocker.


        :param created_reason: The created_reason of this UpdateServiceSyncBlockerOutputServiceSyncBlocker.
        :type created_reason: str
        """
        if created_reason is None:
            raise ValueError("Invalid value for `created_reason`, must not be `None`")

        self._created_reason = created_reason

    @property
    def id(self):
        """Gets the id of this UpdateServiceSyncBlockerOutputServiceSyncBlocker.


        :return: The id of this UpdateServiceSyncBlockerOutputServiceSyncBlocker.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UpdateServiceSyncBlockerOutputServiceSyncBlocker.


        :param id: The id of this UpdateServiceSyncBlockerOutputServiceSyncBlocker.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def resolved_at(self):
        """Gets the resolved_at of this UpdateServiceSyncBlockerOutputServiceSyncBlocker.


        :return: The resolved_at of this UpdateServiceSyncBlockerOutputServiceSyncBlocker.
        :rtype: datetime
        """
        return self._resolved_at

    @resolved_at.setter
    def resolved_at(self, resolved_at):
        """Sets the resolved_at of this UpdateServiceSyncBlockerOutputServiceSyncBlocker.


        :param resolved_at: The resolved_at of this UpdateServiceSyncBlockerOutputServiceSyncBlocker.
        :type resolved_at: datetime
        """

        self._resolved_at = resolved_at

    @property
    def resolved_reason(self):
        """Gets the resolved_reason of this UpdateServiceSyncBlockerOutputServiceSyncBlocker.


        :return: The resolved_reason of this UpdateServiceSyncBlockerOutputServiceSyncBlocker.
        :rtype: str
        """
        return self._resolved_reason

    @resolved_reason.setter
    def resolved_reason(self, resolved_reason):
        """Sets the resolved_reason of this UpdateServiceSyncBlockerOutputServiceSyncBlocker.


        :param resolved_reason: The resolved_reason of this UpdateServiceSyncBlockerOutputServiceSyncBlocker.
        :type resolved_reason: str
        """

        self._resolved_reason = resolved_reason

    @property
    def status(self):
        """Gets the status of this UpdateServiceSyncBlockerOutputServiceSyncBlocker.


        :return: The status of this UpdateServiceSyncBlockerOutputServiceSyncBlocker.
        :rtype: BlockerStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this UpdateServiceSyncBlockerOutputServiceSyncBlocker.


        :param status: The status of this UpdateServiceSyncBlockerOutputServiceSyncBlocker.
        :type status: BlockerStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def type(self):
        """Gets the type of this UpdateServiceSyncBlockerOutputServiceSyncBlocker.


        :return: The type of this UpdateServiceSyncBlockerOutputServiceSyncBlocker.
        :rtype: BlockerType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this UpdateServiceSyncBlockerOutputServiceSyncBlocker.


        :param type: The type of this UpdateServiceSyncBlockerOutputServiceSyncBlocker.
        :type type: BlockerType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
