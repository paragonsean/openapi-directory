# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.repository_sync_status import RepositorySyncStatus
from openapi_server import util


class GetRepositorySyncStatusOutputLatestSync(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, events: List=None, started_at: datetime=None, status: RepositorySyncStatus=None):
        """GetRepositorySyncStatusOutputLatestSync - a model defined in OpenAPI

        :param events: The events of this GetRepositorySyncStatusOutputLatestSync.
        :param started_at: The started_at of this GetRepositorySyncStatusOutputLatestSync.
        :param status: The status of this GetRepositorySyncStatusOutputLatestSync.
        """
        self.openapi_types = {
            'events': List,
            'started_at': datetime,
            'status': RepositorySyncStatus
        }

        self.attribute_map = {
            'events': 'events',
            'started_at': 'startedAt',
            'status': 'status'
        }

        self._events = events
        self._started_at = started_at
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetRepositorySyncStatusOutputLatestSync':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetRepositorySyncStatusOutput_latestSync of this GetRepositorySyncStatusOutputLatestSync.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def events(self):
        """Gets the events of this GetRepositorySyncStatusOutputLatestSync.


        :return: The events of this GetRepositorySyncStatusOutputLatestSync.
        :rtype: List
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this GetRepositorySyncStatusOutputLatestSync.


        :param events: The events of this GetRepositorySyncStatusOutputLatestSync.
        :type events: List
        """
        if events is None:
            raise ValueError("Invalid value for `events`, must not be `None`")

        self._events = events

    @property
    def started_at(self):
        """Gets the started_at of this GetRepositorySyncStatusOutputLatestSync.


        :return: The started_at of this GetRepositorySyncStatusOutputLatestSync.
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this GetRepositorySyncStatusOutputLatestSync.


        :param started_at: The started_at of this GetRepositorySyncStatusOutputLatestSync.
        :type started_at: datetime
        """
        if started_at is None:
            raise ValueError("Invalid value for `started_at`, must not be `None`")

        self._started_at = started_at

    @property
    def status(self):
        """Gets the status of this GetRepositorySyncStatusOutputLatestSync.


        :return: The status of this GetRepositorySyncStatusOutputLatestSync.
        :rtype: RepositorySyncStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GetRepositorySyncStatusOutputLatestSync.


        :param status: The status of this GetRepositorySyncStatusOutputLatestSync.
        :type status: RepositorySyncStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
