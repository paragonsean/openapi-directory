# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_service_template_version_input_source import CreateServiceTemplateVersionInputSource
from openapi_server import util


class CreateServiceTemplateVersionInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_token: str=None, compatible_environment_templates: List=None, description: str=None, major_version: str=None, source: CreateServiceTemplateVersionInputSource=None, supported_component_sources: List=None, tags: List=None, template_name: str=None):
        """CreateServiceTemplateVersionInput - a model defined in OpenAPI

        :param client_token: The client_token of this CreateServiceTemplateVersionInput.
        :param compatible_environment_templates: The compatible_environment_templates of this CreateServiceTemplateVersionInput.
        :param description: The description of this CreateServiceTemplateVersionInput.
        :param major_version: The major_version of this CreateServiceTemplateVersionInput.
        :param source: The source of this CreateServiceTemplateVersionInput.
        :param supported_component_sources: The supported_component_sources of this CreateServiceTemplateVersionInput.
        :param tags: The tags of this CreateServiceTemplateVersionInput.
        :param template_name: The template_name of this CreateServiceTemplateVersionInput.
        """
        self.openapi_types = {
            'client_token': str,
            'compatible_environment_templates': List,
            'description': str,
            'major_version': str,
            'source': CreateServiceTemplateVersionInputSource,
            'supported_component_sources': List,
            'tags': List,
            'template_name': str
        }

        self.attribute_map = {
            'client_token': 'clientToken',
            'compatible_environment_templates': 'compatibleEnvironmentTemplates',
            'description': 'description',
            'major_version': 'majorVersion',
            'source': 'source',
            'supported_component_sources': 'supportedComponentSources',
            'tags': 'tags',
            'template_name': 'templateName'
        }

        self._client_token = client_token
        self._compatible_environment_templates = compatible_environment_templates
        self._description = description
        self._major_version = major_version
        self._source = source
        self._supported_component_sources = supported_component_sources
        self._tags = tags
        self._template_name = template_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateServiceTemplateVersionInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateServiceTemplateVersionInput of this CreateServiceTemplateVersionInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_token(self):
        """Gets the client_token of this CreateServiceTemplateVersionInput.


        :return: The client_token of this CreateServiceTemplateVersionInput.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateServiceTemplateVersionInput.


        :param client_token: The client_token of this CreateServiceTemplateVersionInput.
        :type client_token: str
        """

        self._client_token = client_token

    @property
    def compatible_environment_templates(self):
        """Gets the compatible_environment_templates of this CreateServiceTemplateVersionInput.


        :return: The compatible_environment_templates of this CreateServiceTemplateVersionInput.
        :rtype: List
        """
        return self._compatible_environment_templates

    @compatible_environment_templates.setter
    def compatible_environment_templates(self, compatible_environment_templates):
        """Sets the compatible_environment_templates of this CreateServiceTemplateVersionInput.


        :param compatible_environment_templates: The compatible_environment_templates of this CreateServiceTemplateVersionInput.
        :type compatible_environment_templates: List
        """
        if compatible_environment_templates is None:
            raise ValueError("Invalid value for `compatible_environment_templates`, must not be `None`")

        self._compatible_environment_templates = compatible_environment_templates

    @property
    def description(self):
        """Gets the description of this CreateServiceTemplateVersionInput.


        :return: The description of this CreateServiceTemplateVersionInput.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateServiceTemplateVersionInput.


        :param description: The description of this CreateServiceTemplateVersionInput.
        :type description: str
        """

        self._description = description

    @property
    def major_version(self):
        """Gets the major_version of this CreateServiceTemplateVersionInput.


        :return: The major_version of this CreateServiceTemplateVersionInput.
        :rtype: str
        """
        return self._major_version

    @major_version.setter
    def major_version(self, major_version):
        """Sets the major_version of this CreateServiceTemplateVersionInput.


        :param major_version: The major_version of this CreateServiceTemplateVersionInput.
        :type major_version: str
        """

        self._major_version = major_version

    @property
    def source(self):
        """Gets the source of this CreateServiceTemplateVersionInput.


        :return: The source of this CreateServiceTemplateVersionInput.
        :rtype: CreateServiceTemplateVersionInputSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this CreateServiceTemplateVersionInput.


        :param source: The source of this CreateServiceTemplateVersionInput.
        :type source: CreateServiceTemplateVersionInputSource
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")

        self._source = source

    @property
    def supported_component_sources(self):
        """Gets the supported_component_sources of this CreateServiceTemplateVersionInput.


        :return: The supported_component_sources of this CreateServiceTemplateVersionInput.
        :rtype: List
        """
        return self._supported_component_sources

    @supported_component_sources.setter
    def supported_component_sources(self, supported_component_sources):
        """Sets the supported_component_sources of this CreateServiceTemplateVersionInput.


        :param supported_component_sources: The supported_component_sources of this CreateServiceTemplateVersionInput.
        :type supported_component_sources: List
        """

        self._supported_component_sources = supported_component_sources

    @property
    def tags(self):
        """Gets the tags of this CreateServiceTemplateVersionInput.


        :return: The tags of this CreateServiceTemplateVersionInput.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateServiceTemplateVersionInput.


        :param tags: The tags of this CreateServiceTemplateVersionInput.
        :type tags: List
        """

        self._tags = tags

    @property
    def template_name(self):
        """Gets the template_name of this CreateServiceTemplateVersionInput.


        :return: The template_name of this CreateServiceTemplateVersionInput.
        :rtype: str
        """
        return self._template_name

    @template_name.setter
    def template_name(self, template_name):
        """Sets the template_name of this CreateServiceTemplateVersionInput.


        :param template_name: The template_name of this CreateServiceTemplateVersionInput.
        :type template_name: str
        """
        if template_name is None:
            raise ValueError("Invalid value for `template_name`, must not be `None`")

        self._template_name = template_name
