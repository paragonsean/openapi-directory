# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.counts_summary_components import CountsSummaryComponents
from openapi_server.models.counts_summary_environment_templates import CountsSummaryEnvironmentTemplates
from openapi_server.models.counts_summary_environments import CountsSummaryEnvironments
from openapi_server.models.counts_summary_pipelines import CountsSummaryPipelines
from openapi_server.models.counts_summary_service_instances import CountsSummaryServiceInstances
from openapi_server.models.counts_summary_service_templates import CountsSummaryServiceTemplates
from openapi_server.models.counts_summary_services import CountsSummaryServices
from openapi_server import util


class CountsSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, components: CountsSummaryComponents=None, environment_templates: CountsSummaryEnvironmentTemplates=None, environments: CountsSummaryEnvironments=None, pipelines: CountsSummaryPipelines=None, service_instances: CountsSummaryServiceInstances=None, service_templates: CountsSummaryServiceTemplates=None, services: CountsSummaryServices=None):
        """CountsSummary - a model defined in OpenAPI

        :param components: The components of this CountsSummary.
        :param environment_templates: The environment_templates of this CountsSummary.
        :param environments: The environments of this CountsSummary.
        :param pipelines: The pipelines of this CountsSummary.
        :param service_instances: The service_instances of this CountsSummary.
        :param service_templates: The service_templates of this CountsSummary.
        :param services: The services of this CountsSummary.
        """
        self.openapi_types = {
            'components': CountsSummaryComponents,
            'environment_templates': CountsSummaryEnvironmentTemplates,
            'environments': CountsSummaryEnvironments,
            'pipelines': CountsSummaryPipelines,
            'service_instances': CountsSummaryServiceInstances,
            'service_templates': CountsSummaryServiceTemplates,
            'services': CountsSummaryServices
        }

        self.attribute_map = {
            'components': 'components',
            'environment_templates': 'environmentTemplates',
            'environments': 'environments',
            'pipelines': 'pipelines',
            'service_instances': 'serviceInstances',
            'service_templates': 'serviceTemplates',
            'services': 'services'
        }

        self._components = components
        self._environment_templates = environment_templates
        self._environments = environments
        self._pipelines = pipelines
        self._service_instances = service_instances
        self._service_templates = service_templates
        self._services = services

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CountsSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CountsSummary of this CountsSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def components(self):
        """Gets the components of this CountsSummary.


        :return: The components of this CountsSummary.
        :rtype: CountsSummaryComponents
        """
        return self._components

    @components.setter
    def components(self, components):
        """Sets the components of this CountsSummary.


        :param components: The components of this CountsSummary.
        :type components: CountsSummaryComponents
        """

        self._components = components

    @property
    def environment_templates(self):
        """Gets the environment_templates of this CountsSummary.


        :return: The environment_templates of this CountsSummary.
        :rtype: CountsSummaryEnvironmentTemplates
        """
        return self._environment_templates

    @environment_templates.setter
    def environment_templates(self, environment_templates):
        """Sets the environment_templates of this CountsSummary.


        :param environment_templates: The environment_templates of this CountsSummary.
        :type environment_templates: CountsSummaryEnvironmentTemplates
        """

        self._environment_templates = environment_templates

    @property
    def environments(self):
        """Gets the environments of this CountsSummary.


        :return: The environments of this CountsSummary.
        :rtype: CountsSummaryEnvironments
        """
        return self._environments

    @environments.setter
    def environments(self, environments):
        """Sets the environments of this CountsSummary.


        :param environments: The environments of this CountsSummary.
        :type environments: CountsSummaryEnvironments
        """

        self._environments = environments

    @property
    def pipelines(self):
        """Gets the pipelines of this CountsSummary.


        :return: The pipelines of this CountsSummary.
        :rtype: CountsSummaryPipelines
        """
        return self._pipelines

    @pipelines.setter
    def pipelines(self, pipelines):
        """Sets the pipelines of this CountsSummary.


        :param pipelines: The pipelines of this CountsSummary.
        :type pipelines: CountsSummaryPipelines
        """

        self._pipelines = pipelines

    @property
    def service_instances(self):
        """Gets the service_instances of this CountsSummary.


        :return: The service_instances of this CountsSummary.
        :rtype: CountsSummaryServiceInstances
        """
        return self._service_instances

    @service_instances.setter
    def service_instances(self, service_instances):
        """Sets the service_instances of this CountsSummary.


        :param service_instances: The service_instances of this CountsSummary.
        :type service_instances: CountsSummaryServiceInstances
        """

        self._service_instances = service_instances

    @property
    def service_templates(self):
        """Gets the service_templates of this CountsSummary.


        :return: The service_templates of this CountsSummary.
        :rtype: CountsSummaryServiceTemplates
        """
        return self._service_templates

    @service_templates.setter
    def service_templates(self, service_templates):
        """Sets the service_templates of this CountsSummary.


        :param service_templates: The service_templates of this CountsSummary.
        :type service_templates: CountsSummaryServiceTemplates
        """

        self._service_templates = service_templates

    @property
    def services(self):
        """Gets the services of this CountsSummary.


        :return: The services of this CountsSummary.
        :rtype: CountsSummaryServices
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this CountsSummary.


        :param services: The services of this CountsSummary.
        :type services: CountsSummaryServices
        """

        self._services = services
