# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateEnvironmentAccountConnectionInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_token: str=None, codebuild_role_arn: str=None, component_role_arn: str=None, environment_name: str=None, management_account_id: str=None, role_arn: str=None, tags: List=None):
        """CreateEnvironmentAccountConnectionInput - a model defined in OpenAPI

        :param client_token: The client_token of this CreateEnvironmentAccountConnectionInput.
        :param codebuild_role_arn: The codebuild_role_arn of this CreateEnvironmentAccountConnectionInput.
        :param component_role_arn: The component_role_arn of this CreateEnvironmentAccountConnectionInput.
        :param environment_name: The environment_name of this CreateEnvironmentAccountConnectionInput.
        :param management_account_id: The management_account_id of this CreateEnvironmentAccountConnectionInput.
        :param role_arn: The role_arn of this CreateEnvironmentAccountConnectionInput.
        :param tags: The tags of this CreateEnvironmentAccountConnectionInput.
        """
        self.openapi_types = {
            'client_token': str,
            'codebuild_role_arn': str,
            'component_role_arn': str,
            'environment_name': str,
            'management_account_id': str,
            'role_arn': str,
            'tags': List
        }

        self.attribute_map = {
            'client_token': 'clientToken',
            'codebuild_role_arn': 'codebuildRoleArn',
            'component_role_arn': 'componentRoleArn',
            'environment_name': 'environmentName',
            'management_account_id': 'managementAccountId',
            'role_arn': 'roleArn',
            'tags': 'tags'
        }

        self._client_token = client_token
        self._codebuild_role_arn = codebuild_role_arn
        self._component_role_arn = component_role_arn
        self._environment_name = environment_name
        self._management_account_id = management_account_id
        self._role_arn = role_arn
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateEnvironmentAccountConnectionInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateEnvironmentAccountConnectionInput of this CreateEnvironmentAccountConnectionInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_token(self):
        """Gets the client_token of this CreateEnvironmentAccountConnectionInput.


        :return: The client_token of this CreateEnvironmentAccountConnectionInput.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateEnvironmentAccountConnectionInput.


        :param client_token: The client_token of this CreateEnvironmentAccountConnectionInput.
        :type client_token: str
        """

        self._client_token = client_token

    @property
    def codebuild_role_arn(self):
        """Gets the codebuild_role_arn of this CreateEnvironmentAccountConnectionInput.


        :return: The codebuild_role_arn of this CreateEnvironmentAccountConnectionInput.
        :rtype: str
        """
        return self._codebuild_role_arn

    @codebuild_role_arn.setter
    def codebuild_role_arn(self, codebuild_role_arn):
        """Sets the codebuild_role_arn of this CreateEnvironmentAccountConnectionInput.


        :param codebuild_role_arn: The codebuild_role_arn of this CreateEnvironmentAccountConnectionInput.
        :type codebuild_role_arn: str
        """

        self._codebuild_role_arn = codebuild_role_arn

    @property
    def component_role_arn(self):
        """Gets the component_role_arn of this CreateEnvironmentAccountConnectionInput.


        :return: The component_role_arn of this CreateEnvironmentAccountConnectionInput.
        :rtype: str
        """
        return self._component_role_arn

    @component_role_arn.setter
    def component_role_arn(self, component_role_arn):
        """Sets the component_role_arn of this CreateEnvironmentAccountConnectionInput.


        :param component_role_arn: The component_role_arn of this CreateEnvironmentAccountConnectionInput.
        :type component_role_arn: str
        """

        self._component_role_arn = component_role_arn

    @property
    def environment_name(self):
        """Gets the environment_name of this CreateEnvironmentAccountConnectionInput.


        :return: The environment_name of this CreateEnvironmentAccountConnectionInput.
        :rtype: str
        """
        return self._environment_name

    @environment_name.setter
    def environment_name(self, environment_name):
        """Sets the environment_name of this CreateEnvironmentAccountConnectionInput.


        :param environment_name: The environment_name of this CreateEnvironmentAccountConnectionInput.
        :type environment_name: str
        """
        if environment_name is None:
            raise ValueError("Invalid value for `environment_name`, must not be `None`")

        self._environment_name = environment_name

    @property
    def management_account_id(self):
        """Gets the management_account_id of this CreateEnvironmentAccountConnectionInput.


        :return: The management_account_id of this CreateEnvironmentAccountConnectionInput.
        :rtype: str
        """
        return self._management_account_id

    @management_account_id.setter
    def management_account_id(self, management_account_id):
        """Sets the management_account_id of this CreateEnvironmentAccountConnectionInput.


        :param management_account_id: The management_account_id of this CreateEnvironmentAccountConnectionInput.
        :type management_account_id: str
        """
        if management_account_id is None:
            raise ValueError("Invalid value for `management_account_id`, must not be `None`")

        self._management_account_id = management_account_id

    @property
    def role_arn(self):
        """Gets the role_arn of this CreateEnvironmentAccountConnectionInput.


        :return: The role_arn of this CreateEnvironmentAccountConnectionInput.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this CreateEnvironmentAccountConnectionInput.


        :param role_arn: The role_arn of this CreateEnvironmentAccountConnectionInput.
        :type role_arn: str
        """

        self._role_arn = role_arn

    @property
    def tags(self):
        """Gets the tags of this CreateEnvironmentAccountConnectionInput.


        :return: The tags of this CreateEnvironmentAccountConnectionInput.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateEnvironmentAccountConnectionInput.


        :param tags: The tags of this CreateEnvironmentAccountConnectionInput.
        :type tags: List
        """

        self._tags = tags
