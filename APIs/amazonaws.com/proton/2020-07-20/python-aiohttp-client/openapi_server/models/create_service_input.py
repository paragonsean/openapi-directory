# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateServiceInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, branch_name: str=None, description: str=None, name: str=None, repository_connection_arn: str=None, repository_id: str=None, spec: str=None, tags: List=None, template_major_version: str=None, template_minor_version: str=None, template_name: str=None):
        """CreateServiceInput - a model defined in OpenAPI

        :param branch_name: The branch_name of this CreateServiceInput.
        :param description: The description of this CreateServiceInput.
        :param name: The name of this CreateServiceInput.
        :param repository_connection_arn: The repository_connection_arn of this CreateServiceInput.
        :param repository_id: The repository_id of this CreateServiceInput.
        :param spec: The spec of this CreateServiceInput.
        :param tags: The tags of this CreateServiceInput.
        :param template_major_version: The template_major_version of this CreateServiceInput.
        :param template_minor_version: The template_minor_version of this CreateServiceInput.
        :param template_name: The template_name of this CreateServiceInput.
        """
        self.openapi_types = {
            'branch_name': str,
            'description': str,
            'name': str,
            'repository_connection_arn': str,
            'repository_id': str,
            'spec': str,
            'tags': List,
            'template_major_version': str,
            'template_minor_version': str,
            'template_name': str
        }

        self.attribute_map = {
            'branch_name': 'branchName',
            'description': 'description',
            'name': 'name',
            'repository_connection_arn': 'repositoryConnectionArn',
            'repository_id': 'repositoryId',
            'spec': 'spec',
            'tags': 'tags',
            'template_major_version': 'templateMajorVersion',
            'template_minor_version': 'templateMinorVersion',
            'template_name': 'templateName'
        }

        self._branch_name = branch_name
        self._description = description
        self._name = name
        self._repository_connection_arn = repository_connection_arn
        self._repository_id = repository_id
        self._spec = spec
        self._tags = tags
        self._template_major_version = template_major_version
        self._template_minor_version = template_minor_version
        self._template_name = template_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateServiceInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateServiceInput of this CreateServiceInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def branch_name(self):
        """Gets the branch_name of this CreateServiceInput.


        :return: The branch_name of this CreateServiceInput.
        :rtype: str
        """
        return self._branch_name

    @branch_name.setter
    def branch_name(self, branch_name):
        """Sets the branch_name of this CreateServiceInput.


        :param branch_name: The branch_name of this CreateServiceInput.
        :type branch_name: str
        """

        self._branch_name = branch_name

    @property
    def description(self):
        """Gets the description of this CreateServiceInput.


        :return: The description of this CreateServiceInput.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateServiceInput.


        :param description: The description of this CreateServiceInput.
        :type description: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this CreateServiceInput.


        :return: The name of this CreateServiceInput.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateServiceInput.


        :param name: The name of this CreateServiceInput.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def repository_connection_arn(self):
        """Gets the repository_connection_arn of this CreateServiceInput.


        :return: The repository_connection_arn of this CreateServiceInput.
        :rtype: str
        """
        return self._repository_connection_arn

    @repository_connection_arn.setter
    def repository_connection_arn(self, repository_connection_arn):
        """Sets the repository_connection_arn of this CreateServiceInput.


        :param repository_connection_arn: The repository_connection_arn of this CreateServiceInput.
        :type repository_connection_arn: str
        """

        self._repository_connection_arn = repository_connection_arn

    @property
    def repository_id(self):
        """Gets the repository_id of this CreateServiceInput.


        :return: The repository_id of this CreateServiceInput.
        :rtype: str
        """
        return self._repository_id

    @repository_id.setter
    def repository_id(self, repository_id):
        """Sets the repository_id of this CreateServiceInput.


        :param repository_id: The repository_id of this CreateServiceInput.
        :type repository_id: str
        """

        self._repository_id = repository_id

    @property
    def spec(self):
        """Gets the spec of this CreateServiceInput.


        :return: The spec of this CreateServiceInput.
        :rtype: str
        """
        return self._spec

    @spec.setter
    def spec(self, spec):
        """Sets the spec of this CreateServiceInput.


        :param spec: The spec of this CreateServiceInput.
        :type spec: str
        """
        if spec is None:
            raise ValueError("Invalid value for `spec`, must not be `None`")

        self._spec = spec

    @property
    def tags(self):
        """Gets the tags of this CreateServiceInput.


        :return: The tags of this CreateServiceInput.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateServiceInput.


        :param tags: The tags of this CreateServiceInput.
        :type tags: List
        """

        self._tags = tags

    @property
    def template_major_version(self):
        """Gets the template_major_version of this CreateServiceInput.


        :return: The template_major_version of this CreateServiceInput.
        :rtype: str
        """
        return self._template_major_version

    @template_major_version.setter
    def template_major_version(self, template_major_version):
        """Sets the template_major_version of this CreateServiceInput.


        :param template_major_version: The template_major_version of this CreateServiceInput.
        :type template_major_version: str
        """
        if template_major_version is None:
            raise ValueError("Invalid value for `template_major_version`, must not be `None`")

        self._template_major_version = template_major_version

    @property
    def template_minor_version(self):
        """Gets the template_minor_version of this CreateServiceInput.


        :return: The template_minor_version of this CreateServiceInput.
        :rtype: str
        """
        return self._template_minor_version

    @template_minor_version.setter
    def template_minor_version(self, template_minor_version):
        """Sets the template_minor_version of this CreateServiceInput.


        :param template_minor_version: The template_minor_version of this CreateServiceInput.
        :type template_minor_version: str
        """

        self._template_minor_version = template_minor_version

    @property
    def template_name(self):
        """Gets the template_name of this CreateServiceInput.


        :return: The template_name of this CreateServiceInput.
        :rtype: str
        """
        return self._template_name

    @template_name.setter
    def template_name(self, template_name):
        """Sets the template_name of this CreateServiceInput.


        :param template_name: The template_name of this CreateServiceInput.
        :type template_name: str
        """
        if template_name is None:
            raise ValueError("Invalid value for `template_name`, must not be `None`")

        self._template_name = template_name
