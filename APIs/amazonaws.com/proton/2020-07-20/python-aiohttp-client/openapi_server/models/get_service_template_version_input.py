# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetServiceTemplateVersionInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, major_version: str=None, minor_version: str=None, template_name: str=None):
        """GetServiceTemplateVersionInput - a model defined in OpenAPI

        :param major_version: The major_version of this GetServiceTemplateVersionInput.
        :param minor_version: The minor_version of this GetServiceTemplateVersionInput.
        :param template_name: The template_name of this GetServiceTemplateVersionInput.
        """
        self.openapi_types = {
            'major_version': str,
            'minor_version': str,
            'template_name': str
        }

        self.attribute_map = {
            'major_version': 'majorVersion',
            'minor_version': 'minorVersion',
            'template_name': 'templateName'
        }

        self._major_version = major_version
        self._minor_version = minor_version
        self._template_name = template_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetServiceTemplateVersionInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetServiceTemplateVersionInput of this GetServiceTemplateVersionInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def major_version(self):
        """Gets the major_version of this GetServiceTemplateVersionInput.


        :return: The major_version of this GetServiceTemplateVersionInput.
        :rtype: str
        """
        return self._major_version

    @major_version.setter
    def major_version(self, major_version):
        """Sets the major_version of this GetServiceTemplateVersionInput.


        :param major_version: The major_version of this GetServiceTemplateVersionInput.
        :type major_version: str
        """
        if major_version is None:
            raise ValueError("Invalid value for `major_version`, must not be `None`")

        self._major_version = major_version

    @property
    def minor_version(self):
        """Gets the minor_version of this GetServiceTemplateVersionInput.


        :return: The minor_version of this GetServiceTemplateVersionInput.
        :rtype: str
        """
        return self._minor_version

    @minor_version.setter
    def minor_version(self, minor_version):
        """Sets the minor_version of this GetServiceTemplateVersionInput.


        :param minor_version: The minor_version of this GetServiceTemplateVersionInput.
        :type minor_version: str
        """
        if minor_version is None:
            raise ValueError("Invalid value for `minor_version`, must not be `None`")

        self._minor_version = minor_version

    @property
    def template_name(self):
        """Gets the template_name of this GetServiceTemplateVersionInput.


        :return: The template_name of this GetServiceTemplateVersionInput.
        :rtype: str
        """
        return self._template_name

    @template_name.setter
    def template_name(self, template_name):
        """Sets the template_name of this GetServiceTemplateVersionInput.


        :param template_name: The template_name of this GetServiceTemplateVersionInput.
        :type template_name: str
        """
        if template_name is None:
            raise ValueError("Invalid value for `template_name`, must not be `None`")

        self._template_name = template_name
