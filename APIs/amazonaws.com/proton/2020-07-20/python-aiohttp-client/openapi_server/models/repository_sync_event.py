# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RepositorySyncEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event: str=None, external_id: str=None, time: datetime=None, type: str=None):
        """RepositorySyncEvent - a model defined in OpenAPI

        :param event: The event of this RepositorySyncEvent.
        :param external_id: The external_id of this RepositorySyncEvent.
        :param time: The time of this RepositorySyncEvent.
        :param type: The type of this RepositorySyncEvent.
        """
        self.openapi_types = {
            'event': str,
            'external_id': str,
            'time': datetime,
            'type': str
        }

        self.attribute_map = {
            'event': 'event',
            'external_id': 'externalId',
            'time': 'time',
            'type': 'type'
        }

        self._event = event
        self._external_id = external_id
        self._time = time
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RepositorySyncEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RepositorySyncEvent of this RepositorySyncEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event(self):
        """Gets the event of this RepositorySyncEvent.


        :return: The event of this RepositorySyncEvent.
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this RepositorySyncEvent.


        :param event: The event of this RepositorySyncEvent.
        :type event: str
        """
        if event is None:
            raise ValueError("Invalid value for `event`, must not be `None`")

        self._event = event

    @property
    def external_id(self):
        """Gets the external_id of this RepositorySyncEvent.


        :return: The external_id of this RepositorySyncEvent.
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this RepositorySyncEvent.


        :param external_id: The external_id of this RepositorySyncEvent.
        :type external_id: str
        """

        self._external_id = external_id

    @property
    def time(self):
        """Gets the time of this RepositorySyncEvent.


        :return: The time of this RepositorySyncEvent.
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this RepositorySyncEvent.


        :param time: The time of this RepositorySyncEvent.
        :type time: datetime
        """
        if time is None:
            raise ValueError("Invalid value for `time`, must not be `None`")

        self._time = time

    @property
    def type(self):
        """Gets the type of this RepositorySyncEvent.


        :return: The type of this RepositorySyncEvent.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RepositorySyncEvent.


        :param type: The type of this RepositorySyncEvent.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
