# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.template_version_status import TemplateVersionStatus
from openapi_server import util


class DeleteServiceTemplateVersionOutputServiceTemplateVersion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arn: str=None, compatible_environment_templates: List=None, created_at: datetime=None, description: str=None, last_modified_at: datetime=None, major_version: str=None, minor_version: str=None, recommended_minor_version: str=None, _schema: str=None, status: TemplateVersionStatus=None, status_message: str=None, supported_component_sources: List=None, template_name: str=None):
        """DeleteServiceTemplateVersionOutputServiceTemplateVersion - a model defined in OpenAPI

        :param arn: The arn of this DeleteServiceTemplateVersionOutputServiceTemplateVersion.
        :param compatible_environment_templates: The compatible_environment_templates of this DeleteServiceTemplateVersionOutputServiceTemplateVersion.
        :param created_at: The created_at of this DeleteServiceTemplateVersionOutputServiceTemplateVersion.
        :param description: The description of this DeleteServiceTemplateVersionOutputServiceTemplateVersion.
        :param last_modified_at: The last_modified_at of this DeleteServiceTemplateVersionOutputServiceTemplateVersion.
        :param major_version: The major_version of this DeleteServiceTemplateVersionOutputServiceTemplateVersion.
        :param minor_version: The minor_version of this DeleteServiceTemplateVersionOutputServiceTemplateVersion.
        :param recommended_minor_version: The recommended_minor_version of this DeleteServiceTemplateVersionOutputServiceTemplateVersion.
        :param _schema: The _schema of this DeleteServiceTemplateVersionOutputServiceTemplateVersion.
        :param status: The status of this DeleteServiceTemplateVersionOutputServiceTemplateVersion.
        :param status_message: The status_message of this DeleteServiceTemplateVersionOutputServiceTemplateVersion.
        :param supported_component_sources: The supported_component_sources of this DeleteServiceTemplateVersionOutputServiceTemplateVersion.
        :param template_name: The template_name of this DeleteServiceTemplateVersionOutputServiceTemplateVersion.
        """
        self.openapi_types = {
            'arn': str,
            'compatible_environment_templates': List,
            'created_at': datetime,
            'description': str,
            'last_modified_at': datetime,
            'major_version': str,
            'minor_version': str,
            'recommended_minor_version': str,
            '_schema': str,
            'status': TemplateVersionStatus,
            'status_message': str,
            'supported_component_sources': List,
            'template_name': str
        }

        self.attribute_map = {
            'arn': 'arn',
            'compatible_environment_templates': 'compatibleEnvironmentTemplates',
            'created_at': 'createdAt',
            'description': 'description',
            'last_modified_at': 'lastModifiedAt',
            'major_version': 'majorVersion',
            'minor_version': 'minorVersion',
            'recommended_minor_version': 'recommendedMinorVersion',
            '_schema': 'schema',
            'status': 'status',
            'status_message': 'statusMessage',
            'supported_component_sources': 'supportedComponentSources',
            'template_name': 'templateName'
        }

        self._arn = arn
        self._compatible_environment_templates = compatible_environment_templates
        self._created_at = created_at
        self._description = description
        self._last_modified_at = last_modified_at
        self._major_version = major_version
        self._minor_version = minor_version
        self._recommended_minor_version = recommended_minor_version
        self.__schema = _schema
        self._status = status
        self._status_message = status_message
        self._supported_component_sources = supported_component_sources
        self._template_name = template_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeleteServiceTemplateVersionOutputServiceTemplateVersion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeleteServiceTemplateVersionOutput_serviceTemplateVersion of this DeleteServiceTemplateVersionOutputServiceTemplateVersion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arn(self):
        """Gets the arn of this DeleteServiceTemplateVersionOutputServiceTemplateVersion.


        :return: The arn of this DeleteServiceTemplateVersionOutputServiceTemplateVersion.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this DeleteServiceTemplateVersionOutputServiceTemplateVersion.


        :param arn: The arn of this DeleteServiceTemplateVersionOutputServiceTemplateVersion.
        :type arn: str
        """
        if arn is None:
            raise ValueError("Invalid value for `arn`, must not be `None`")

        self._arn = arn

    @property
    def compatible_environment_templates(self):
        """Gets the compatible_environment_templates of this DeleteServiceTemplateVersionOutputServiceTemplateVersion.


        :return: The compatible_environment_templates of this DeleteServiceTemplateVersionOutputServiceTemplateVersion.
        :rtype: List
        """
        return self._compatible_environment_templates

    @compatible_environment_templates.setter
    def compatible_environment_templates(self, compatible_environment_templates):
        """Sets the compatible_environment_templates of this DeleteServiceTemplateVersionOutputServiceTemplateVersion.


        :param compatible_environment_templates: The compatible_environment_templates of this DeleteServiceTemplateVersionOutputServiceTemplateVersion.
        :type compatible_environment_templates: List
        """
        if compatible_environment_templates is None:
            raise ValueError("Invalid value for `compatible_environment_templates`, must not be `None`")

        self._compatible_environment_templates = compatible_environment_templates

    @property
    def created_at(self):
        """Gets the created_at of this DeleteServiceTemplateVersionOutputServiceTemplateVersion.


        :return: The created_at of this DeleteServiceTemplateVersionOutputServiceTemplateVersion.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this DeleteServiceTemplateVersionOutputServiceTemplateVersion.


        :param created_at: The created_at of this DeleteServiceTemplateVersionOutputServiceTemplateVersion.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this DeleteServiceTemplateVersionOutputServiceTemplateVersion.


        :return: The description of this DeleteServiceTemplateVersionOutputServiceTemplateVersion.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DeleteServiceTemplateVersionOutputServiceTemplateVersion.


        :param description: The description of this DeleteServiceTemplateVersionOutputServiceTemplateVersion.
        :type description: str
        """

        self._description = description

    @property
    def last_modified_at(self):
        """Gets the last_modified_at of this DeleteServiceTemplateVersionOutputServiceTemplateVersion.


        :return: The last_modified_at of this DeleteServiceTemplateVersionOutputServiceTemplateVersion.
        :rtype: datetime
        """
        return self._last_modified_at

    @last_modified_at.setter
    def last_modified_at(self, last_modified_at):
        """Sets the last_modified_at of this DeleteServiceTemplateVersionOutputServiceTemplateVersion.


        :param last_modified_at: The last_modified_at of this DeleteServiceTemplateVersionOutputServiceTemplateVersion.
        :type last_modified_at: datetime
        """
        if last_modified_at is None:
            raise ValueError("Invalid value for `last_modified_at`, must not be `None`")

        self._last_modified_at = last_modified_at

    @property
    def major_version(self):
        """Gets the major_version of this DeleteServiceTemplateVersionOutputServiceTemplateVersion.


        :return: The major_version of this DeleteServiceTemplateVersionOutputServiceTemplateVersion.
        :rtype: str
        """
        return self._major_version

    @major_version.setter
    def major_version(self, major_version):
        """Sets the major_version of this DeleteServiceTemplateVersionOutputServiceTemplateVersion.


        :param major_version: The major_version of this DeleteServiceTemplateVersionOutputServiceTemplateVersion.
        :type major_version: str
        """
        if major_version is None:
            raise ValueError("Invalid value for `major_version`, must not be `None`")

        self._major_version = major_version

    @property
    def minor_version(self):
        """Gets the minor_version of this DeleteServiceTemplateVersionOutputServiceTemplateVersion.


        :return: The minor_version of this DeleteServiceTemplateVersionOutputServiceTemplateVersion.
        :rtype: str
        """
        return self._minor_version

    @minor_version.setter
    def minor_version(self, minor_version):
        """Sets the minor_version of this DeleteServiceTemplateVersionOutputServiceTemplateVersion.


        :param minor_version: The minor_version of this DeleteServiceTemplateVersionOutputServiceTemplateVersion.
        :type minor_version: str
        """
        if minor_version is None:
            raise ValueError("Invalid value for `minor_version`, must not be `None`")

        self._minor_version = minor_version

    @property
    def recommended_minor_version(self):
        """Gets the recommended_minor_version of this DeleteServiceTemplateVersionOutputServiceTemplateVersion.


        :return: The recommended_minor_version of this DeleteServiceTemplateVersionOutputServiceTemplateVersion.
        :rtype: str
        """
        return self._recommended_minor_version

    @recommended_minor_version.setter
    def recommended_minor_version(self, recommended_minor_version):
        """Sets the recommended_minor_version of this DeleteServiceTemplateVersionOutputServiceTemplateVersion.


        :param recommended_minor_version: The recommended_minor_version of this DeleteServiceTemplateVersionOutputServiceTemplateVersion.
        :type recommended_minor_version: str
        """

        self._recommended_minor_version = recommended_minor_version

    @property
    def _schema(self):
        """Gets the _schema of this DeleteServiceTemplateVersionOutputServiceTemplateVersion.


        :return: The _schema of this DeleteServiceTemplateVersionOutputServiceTemplateVersion.
        :rtype: str
        """
        return self.__schema

    @_schema.setter
    def _schema(self, _schema):
        """Sets the _schema of this DeleteServiceTemplateVersionOutputServiceTemplateVersion.


        :param _schema: The _schema of this DeleteServiceTemplateVersionOutputServiceTemplateVersion.
        :type _schema: str
        """

        self.__schema = _schema

    @property
    def status(self):
        """Gets the status of this DeleteServiceTemplateVersionOutputServiceTemplateVersion.


        :return: The status of this DeleteServiceTemplateVersionOutputServiceTemplateVersion.
        :rtype: TemplateVersionStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DeleteServiceTemplateVersionOutputServiceTemplateVersion.


        :param status: The status of this DeleteServiceTemplateVersionOutputServiceTemplateVersion.
        :type status: TemplateVersionStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def status_message(self):
        """Gets the status_message of this DeleteServiceTemplateVersionOutputServiceTemplateVersion.


        :return: The status_message of this DeleteServiceTemplateVersionOutputServiceTemplateVersion.
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this DeleteServiceTemplateVersionOutputServiceTemplateVersion.


        :param status_message: The status_message of this DeleteServiceTemplateVersionOutputServiceTemplateVersion.
        :type status_message: str
        """

        self._status_message = status_message

    @property
    def supported_component_sources(self):
        """Gets the supported_component_sources of this DeleteServiceTemplateVersionOutputServiceTemplateVersion.


        :return: The supported_component_sources of this DeleteServiceTemplateVersionOutputServiceTemplateVersion.
        :rtype: List
        """
        return self._supported_component_sources

    @supported_component_sources.setter
    def supported_component_sources(self, supported_component_sources):
        """Sets the supported_component_sources of this DeleteServiceTemplateVersionOutputServiceTemplateVersion.


        :param supported_component_sources: The supported_component_sources of this DeleteServiceTemplateVersionOutputServiceTemplateVersion.
        :type supported_component_sources: List
        """

        self._supported_component_sources = supported_component_sources

    @property
    def template_name(self):
        """Gets the template_name of this DeleteServiceTemplateVersionOutputServiceTemplateVersion.


        :return: The template_name of this DeleteServiceTemplateVersionOutputServiceTemplateVersion.
        :rtype: str
        """
        return self._template_name

    @template_name.setter
    def template_name(self, template_name):
        """Sets the template_name of this DeleteServiceTemplateVersionOutputServiceTemplateVersion.


        :param template_name: The template_name of this DeleteServiceTemplateVersionOutputServiceTemplateVersion.
        :type template_name: str
        """
        if template_name is None:
            raise ValueError("Invalid value for `template_name`, must not be `None`")

        self._template_name = template_name
