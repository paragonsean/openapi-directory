# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.provisioning import Provisioning
from openapi_server import util


class EnvironmentTemplateSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arn: str=None, created_at: datetime=None, description: str=None, display_name: str=None, last_modified_at: datetime=None, name: str=None, provisioning: Provisioning=None, recommended_version: str=None):
        """EnvironmentTemplateSummary - a model defined in OpenAPI

        :param arn: The arn of this EnvironmentTemplateSummary.
        :param created_at: The created_at of this EnvironmentTemplateSummary.
        :param description: The description of this EnvironmentTemplateSummary.
        :param display_name: The display_name of this EnvironmentTemplateSummary.
        :param last_modified_at: The last_modified_at of this EnvironmentTemplateSummary.
        :param name: The name of this EnvironmentTemplateSummary.
        :param provisioning: The provisioning of this EnvironmentTemplateSummary.
        :param recommended_version: The recommended_version of this EnvironmentTemplateSummary.
        """
        self.openapi_types = {
            'arn': str,
            'created_at': datetime,
            'description': str,
            'display_name': str,
            'last_modified_at': datetime,
            'name': str,
            'provisioning': Provisioning,
            'recommended_version': str
        }

        self.attribute_map = {
            'arn': 'arn',
            'created_at': 'createdAt',
            'description': 'description',
            'display_name': 'displayName',
            'last_modified_at': 'lastModifiedAt',
            'name': 'name',
            'provisioning': 'provisioning',
            'recommended_version': 'recommendedVersion'
        }

        self._arn = arn
        self._created_at = created_at
        self._description = description
        self._display_name = display_name
        self._last_modified_at = last_modified_at
        self._name = name
        self._provisioning = provisioning
        self._recommended_version = recommended_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnvironmentTemplateSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EnvironmentTemplateSummary of this EnvironmentTemplateSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arn(self):
        """Gets the arn of this EnvironmentTemplateSummary.


        :return: The arn of this EnvironmentTemplateSummary.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this EnvironmentTemplateSummary.


        :param arn: The arn of this EnvironmentTemplateSummary.
        :type arn: str
        """
        if arn is None:
            raise ValueError("Invalid value for `arn`, must not be `None`")

        self._arn = arn

    @property
    def created_at(self):
        """Gets the created_at of this EnvironmentTemplateSummary.


        :return: The created_at of this EnvironmentTemplateSummary.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this EnvironmentTemplateSummary.


        :param created_at: The created_at of this EnvironmentTemplateSummary.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this EnvironmentTemplateSummary.


        :return: The description of this EnvironmentTemplateSummary.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EnvironmentTemplateSummary.


        :param description: The description of this EnvironmentTemplateSummary.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this EnvironmentTemplateSummary.


        :return: The display_name of this EnvironmentTemplateSummary.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this EnvironmentTemplateSummary.


        :param display_name: The display_name of this EnvironmentTemplateSummary.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def last_modified_at(self):
        """Gets the last_modified_at of this EnvironmentTemplateSummary.


        :return: The last_modified_at of this EnvironmentTemplateSummary.
        :rtype: datetime
        """
        return self._last_modified_at

    @last_modified_at.setter
    def last_modified_at(self, last_modified_at):
        """Sets the last_modified_at of this EnvironmentTemplateSummary.


        :param last_modified_at: The last_modified_at of this EnvironmentTemplateSummary.
        :type last_modified_at: datetime
        """
        if last_modified_at is None:
            raise ValueError("Invalid value for `last_modified_at`, must not be `None`")

        self._last_modified_at = last_modified_at

    @property
    def name(self):
        """Gets the name of this EnvironmentTemplateSummary.


        :return: The name of this EnvironmentTemplateSummary.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EnvironmentTemplateSummary.


        :param name: The name of this EnvironmentTemplateSummary.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def provisioning(self):
        """Gets the provisioning of this EnvironmentTemplateSummary.


        :return: The provisioning of this EnvironmentTemplateSummary.
        :rtype: Provisioning
        """
        return self._provisioning

    @provisioning.setter
    def provisioning(self, provisioning):
        """Sets the provisioning of this EnvironmentTemplateSummary.


        :param provisioning: The provisioning of this EnvironmentTemplateSummary.
        :type provisioning: Provisioning
        """

        self._provisioning = provisioning

    @property
    def recommended_version(self):
        """Gets the recommended_version of this EnvironmentTemplateSummary.


        :return: The recommended_version of this EnvironmentTemplateSummary.
        :rtype: str
        """
        return self._recommended_version

    @recommended_version.setter
    def recommended_version(self, recommended_version):
        """Sets the recommended_version of this EnvironmentTemplateSummary.


        :param recommended_version: The recommended_version of this EnvironmentTemplateSummary.
        :type recommended_version: str
        """

        self._recommended_version = recommended_version
