# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_service_sync_blocker_output_service_sync_blocker import UpdateServiceSyncBlockerOutputServiceSyncBlocker
from openapi_server import util


class UpdateServiceSyncBlockerOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, service_instance_name: str=None, service_name: str=None, service_sync_blocker: UpdateServiceSyncBlockerOutputServiceSyncBlocker=None):
        """UpdateServiceSyncBlockerOutput - a model defined in OpenAPI

        :param service_instance_name: The service_instance_name of this UpdateServiceSyncBlockerOutput.
        :param service_name: The service_name of this UpdateServiceSyncBlockerOutput.
        :param service_sync_blocker: The service_sync_blocker of this UpdateServiceSyncBlockerOutput.
        """
        self.openapi_types = {
            'service_instance_name': str,
            'service_name': str,
            'service_sync_blocker': UpdateServiceSyncBlockerOutputServiceSyncBlocker
        }

        self.attribute_map = {
            'service_instance_name': 'serviceInstanceName',
            'service_name': 'serviceName',
            'service_sync_blocker': 'serviceSyncBlocker'
        }

        self._service_instance_name = service_instance_name
        self._service_name = service_name
        self._service_sync_blocker = service_sync_blocker

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateServiceSyncBlockerOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateServiceSyncBlockerOutput of this UpdateServiceSyncBlockerOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def service_instance_name(self):
        """Gets the service_instance_name of this UpdateServiceSyncBlockerOutput.


        :return: The service_instance_name of this UpdateServiceSyncBlockerOutput.
        :rtype: str
        """
        return self._service_instance_name

    @service_instance_name.setter
    def service_instance_name(self, service_instance_name):
        """Sets the service_instance_name of this UpdateServiceSyncBlockerOutput.


        :param service_instance_name: The service_instance_name of this UpdateServiceSyncBlockerOutput.
        :type service_instance_name: str
        """

        self._service_instance_name = service_instance_name

    @property
    def service_name(self):
        """Gets the service_name of this UpdateServiceSyncBlockerOutput.


        :return: The service_name of this UpdateServiceSyncBlockerOutput.
        :rtype: str
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this UpdateServiceSyncBlockerOutput.


        :param service_name: The service_name of this UpdateServiceSyncBlockerOutput.
        :type service_name: str
        """
        if service_name is None:
            raise ValueError("Invalid value for `service_name`, must not be `None`")

        self._service_name = service_name

    @property
    def service_sync_blocker(self):
        """Gets the service_sync_blocker of this UpdateServiceSyncBlockerOutput.


        :return: The service_sync_blocker of this UpdateServiceSyncBlockerOutput.
        :rtype: UpdateServiceSyncBlockerOutputServiceSyncBlocker
        """
        return self._service_sync_blocker

    @service_sync_blocker.setter
    def service_sync_blocker(self, service_sync_blocker):
        """Sets the service_sync_blocker of this UpdateServiceSyncBlockerOutput.


        :param service_sync_blocker: The service_sync_blocker of this UpdateServiceSyncBlockerOutput.
        :type service_sync_blocker: UpdateServiceSyncBlockerOutputServiceSyncBlocker
        """
        if service_sync_blocker is None:
            raise ValueError("Invalid value for `service_sync_blocker`, must not be `None`")

        self._service_sync_blocker = service_sync_blocker
