# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CountsSummaryServices(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, behind_major: int=None, behind_minor: int=None, failed: int=None, total: int=None, up_to_date: int=None):
        """CountsSummaryServices - a model defined in OpenAPI

        :param behind_major: The behind_major of this CountsSummaryServices.
        :param behind_minor: The behind_minor of this CountsSummaryServices.
        :param failed: The failed of this CountsSummaryServices.
        :param total: The total of this CountsSummaryServices.
        :param up_to_date: The up_to_date of this CountsSummaryServices.
        """
        self.openapi_types = {
            'behind_major': int,
            'behind_minor': int,
            'failed': int,
            'total': int,
            'up_to_date': int
        }

        self.attribute_map = {
            'behind_major': 'behindMajor',
            'behind_minor': 'behindMinor',
            'failed': 'failed',
            'total': 'total',
            'up_to_date': 'upToDate'
        }

        self._behind_major = behind_major
        self._behind_minor = behind_minor
        self._failed = failed
        self._total = total
        self._up_to_date = up_to_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CountsSummaryServices':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CountsSummary_services of this CountsSummaryServices.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def behind_major(self):
        """Gets the behind_major of this CountsSummaryServices.


        :return: The behind_major of this CountsSummaryServices.
        :rtype: int
        """
        return self._behind_major

    @behind_major.setter
    def behind_major(self, behind_major):
        """Sets the behind_major of this CountsSummaryServices.


        :param behind_major: The behind_major of this CountsSummaryServices.
        :type behind_major: int
        """

        self._behind_major = behind_major

    @property
    def behind_minor(self):
        """Gets the behind_minor of this CountsSummaryServices.


        :return: The behind_minor of this CountsSummaryServices.
        :rtype: int
        """
        return self._behind_minor

    @behind_minor.setter
    def behind_minor(self, behind_minor):
        """Sets the behind_minor of this CountsSummaryServices.


        :param behind_minor: The behind_minor of this CountsSummaryServices.
        :type behind_minor: int
        """

        self._behind_minor = behind_minor

    @property
    def failed(self):
        """Gets the failed of this CountsSummaryServices.


        :return: The failed of this CountsSummaryServices.
        :rtype: int
        """
        return self._failed

    @failed.setter
    def failed(self, failed):
        """Sets the failed of this CountsSummaryServices.


        :param failed: The failed of this CountsSummaryServices.
        :type failed: int
        """

        self._failed = failed

    @property
    def total(self):
        """Gets the total of this CountsSummaryServices.


        :return: The total of this CountsSummaryServices.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this CountsSummaryServices.


        :param total: The total of this CountsSummaryServices.
        :type total: int
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")

        self._total = total

    @property
    def up_to_date(self):
        """Gets the up_to_date of this CountsSummaryServices.


        :return: The up_to_date of this CountsSummaryServices.
        :rtype: int
        """
        return self._up_to_date

    @up_to_date.setter
    def up_to_date(self, up_to_date):
        """Sets the up_to_date of this CountsSummaryServices.


        :param up_to_date: The up_to_date of this CountsSummaryServices.
        :type up_to_date: int
        """

        self._up_to_date = up_to_date
