# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListEnvironmentTemplateVersionsInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, major_version: str=None, max_results: int=None, next_token: str=None, template_name: str=None):
        """ListEnvironmentTemplateVersionsInput - a model defined in OpenAPI

        :param major_version: The major_version of this ListEnvironmentTemplateVersionsInput.
        :param max_results: The max_results of this ListEnvironmentTemplateVersionsInput.
        :param next_token: The next_token of this ListEnvironmentTemplateVersionsInput.
        :param template_name: The template_name of this ListEnvironmentTemplateVersionsInput.
        """
        self.openapi_types = {
            'major_version': str,
            'max_results': int,
            'next_token': str,
            'template_name': str
        }

        self.attribute_map = {
            'major_version': 'majorVersion',
            'max_results': 'maxResults',
            'next_token': 'nextToken',
            'template_name': 'templateName'
        }

        self._major_version = major_version
        self._max_results = max_results
        self._next_token = next_token
        self._template_name = template_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListEnvironmentTemplateVersionsInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListEnvironmentTemplateVersionsInput of this ListEnvironmentTemplateVersionsInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def major_version(self):
        """Gets the major_version of this ListEnvironmentTemplateVersionsInput.


        :return: The major_version of this ListEnvironmentTemplateVersionsInput.
        :rtype: str
        """
        return self._major_version

    @major_version.setter
    def major_version(self, major_version):
        """Sets the major_version of this ListEnvironmentTemplateVersionsInput.


        :param major_version: The major_version of this ListEnvironmentTemplateVersionsInput.
        :type major_version: str
        """

        self._major_version = major_version

    @property
    def max_results(self):
        """Gets the max_results of this ListEnvironmentTemplateVersionsInput.


        :return: The max_results of this ListEnvironmentTemplateVersionsInput.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListEnvironmentTemplateVersionsInput.


        :param max_results: The max_results of this ListEnvironmentTemplateVersionsInput.
        :type max_results: int
        """

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this ListEnvironmentTemplateVersionsInput.


        :return: The next_token of this ListEnvironmentTemplateVersionsInput.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListEnvironmentTemplateVersionsInput.


        :param next_token: The next_token of this ListEnvironmentTemplateVersionsInput.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def template_name(self):
        """Gets the template_name of this ListEnvironmentTemplateVersionsInput.


        :return: The template_name of this ListEnvironmentTemplateVersionsInput.
        :rtype: str
        """
        return self._template_name

    @template_name.setter
    def template_name(self, template_name):
        """Sets the template_name of this ListEnvironmentTemplateVersionsInput.


        :param template_name: The template_name of this ListEnvironmentTemplateVersionsInput.
        :type template_name: str
        """
        if template_name is None:
            raise ValueError("Invalid value for `template_name`, must not be `None`")

        self._template_name = template_name
