# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.deployment_update_type import DeploymentUpdateType
from openapi_server import util


class UpdateServicePipelineInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deployment_type: DeploymentUpdateType=None, service_name: str=None, spec: str=None, template_major_version: str=None, template_minor_version: str=None):
        """UpdateServicePipelineInput - a model defined in OpenAPI

        :param deployment_type: The deployment_type of this UpdateServicePipelineInput.
        :param service_name: The service_name of this UpdateServicePipelineInput.
        :param spec: The spec of this UpdateServicePipelineInput.
        :param template_major_version: The template_major_version of this UpdateServicePipelineInput.
        :param template_minor_version: The template_minor_version of this UpdateServicePipelineInput.
        """
        self.openapi_types = {
            'deployment_type': DeploymentUpdateType,
            'service_name': str,
            'spec': str,
            'template_major_version': str,
            'template_minor_version': str
        }

        self.attribute_map = {
            'deployment_type': 'deploymentType',
            'service_name': 'serviceName',
            'spec': 'spec',
            'template_major_version': 'templateMajorVersion',
            'template_minor_version': 'templateMinorVersion'
        }

        self._deployment_type = deployment_type
        self._service_name = service_name
        self._spec = spec
        self._template_major_version = template_major_version
        self._template_minor_version = template_minor_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateServicePipelineInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateServicePipelineInput of this UpdateServicePipelineInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deployment_type(self):
        """Gets the deployment_type of this UpdateServicePipelineInput.


        :return: The deployment_type of this UpdateServicePipelineInput.
        :rtype: DeploymentUpdateType
        """
        return self._deployment_type

    @deployment_type.setter
    def deployment_type(self, deployment_type):
        """Sets the deployment_type of this UpdateServicePipelineInput.


        :param deployment_type: The deployment_type of this UpdateServicePipelineInput.
        :type deployment_type: DeploymentUpdateType
        """
        if deployment_type is None:
            raise ValueError("Invalid value for `deployment_type`, must not be `None`")

        self._deployment_type = deployment_type

    @property
    def service_name(self):
        """Gets the service_name of this UpdateServicePipelineInput.


        :return: The service_name of this UpdateServicePipelineInput.
        :rtype: str
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this UpdateServicePipelineInput.


        :param service_name: The service_name of this UpdateServicePipelineInput.
        :type service_name: str
        """
        if service_name is None:
            raise ValueError("Invalid value for `service_name`, must not be `None`")

        self._service_name = service_name

    @property
    def spec(self):
        """Gets the spec of this UpdateServicePipelineInput.


        :return: The spec of this UpdateServicePipelineInput.
        :rtype: str
        """
        return self._spec

    @spec.setter
    def spec(self, spec):
        """Sets the spec of this UpdateServicePipelineInput.


        :param spec: The spec of this UpdateServicePipelineInput.
        :type spec: str
        """
        if spec is None:
            raise ValueError("Invalid value for `spec`, must not be `None`")

        self._spec = spec

    @property
    def template_major_version(self):
        """Gets the template_major_version of this UpdateServicePipelineInput.


        :return: The template_major_version of this UpdateServicePipelineInput.
        :rtype: str
        """
        return self._template_major_version

    @template_major_version.setter
    def template_major_version(self, template_major_version):
        """Sets the template_major_version of this UpdateServicePipelineInput.


        :param template_major_version: The template_major_version of this UpdateServicePipelineInput.
        :type template_major_version: str
        """

        self._template_major_version = template_major_version

    @property
    def template_minor_version(self):
        """Gets the template_minor_version of this UpdateServicePipelineInput.


        :return: The template_minor_version of this UpdateServicePipelineInput.
        :rtype: str
        """
        return self._template_minor_version

    @template_minor_version.setter
    def template_minor_version(self, template_minor_version):
        """Sets the template_minor_version of this UpdateServicePipelineInput.


        :param template_minor_version: The template_minor_version of this UpdateServicePipelineInput.
        :type template_minor_version: str
        """

        self._template_minor_version = template_minor_version
