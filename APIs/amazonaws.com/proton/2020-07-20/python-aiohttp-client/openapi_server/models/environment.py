# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.deployment_status import DeploymentStatus
from openapi_server.models.environment_provisioning_repository import EnvironmentProvisioningRepository
from openapi_server.models.provisioning import Provisioning
from openapi_server import util


class Environment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arn: str=None, codebuild_role_arn: str=None, component_role_arn: str=None, created_at: datetime=None, deployment_status: DeploymentStatus=None, deployment_status_message: str=None, description: str=None, environment_account_connection_id: str=None, environment_account_id: str=None, last_attempted_deployment_id: str=None, last_deployment_attempted_at: datetime=None, last_deployment_succeeded_at: datetime=None, last_succeeded_deployment_id: str=None, name: str=None, proton_service_role_arn: str=None, provisioning: Provisioning=None, provisioning_repository: EnvironmentProvisioningRepository=None, spec: str=None, template_major_version: str=None, template_minor_version: str=None, template_name: str=None):
        """Environment - a model defined in OpenAPI

        :param arn: The arn of this Environment.
        :param codebuild_role_arn: The codebuild_role_arn of this Environment.
        :param component_role_arn: The component_role_arn of this Environment.
        :param created_at: The created_at of this Environment.
        :param deployment_status: The deployment_status of this Environment.
        :param deployment_status_message: The deployment_status_message of this Environment.
        :param description: The description of this Environment.
        :param environment_account_connection_id: The environment_account_connection_id of this Environment.
        :param environment_account_id: The environment_account_id of this Environment.
        :param last_attempted_deployment_id: The last_attempted_deployment_id of this Environment.
        :param last_deployment_attempted_at: The last_deployment_attempted_at of this Environment.
        :param last_deployment_succeeded_at: The last_deployment_succeeded_at of this Environment.
        :param last_succeeded_deployment_id: The last_succeeded_deployment_id of this Environment.
        :param name: The name of this Environment.
        :param proton_service_role_arn: The proton_service_role_arn of this Environment.
        :param provisioning: The provisioning of this Environment.
        :param provisioning_repository: The provisioning_repository of this Environment.
        :param spec: The spec of this Environment.
        :param template_major_version: The template_major_version of this Environment.
        :param template_minor_version: The template_minor_version of this Environment.
        :param template_name: The template_name of this Environment.
        """
        self.openapi_types = {
            'arn': str,
            'codebuild_role_arn': str,
            'component_role_arn': str,
            'created_at': datetime,
            'deployment_status': DeploymentStatus,
            'deployment_status_message': str,
            'description': str,
            'environment_account_connection_id': str,
            'environment_account_id': str,
            'last_attempted_deployment_id': str,
            'last_deployment_attempted_at': datetime,
            'last_deployment_succeeded_at': datetime,
            'last_succeeded_deployment_id': str,
            'name': str,
            'proton_service_role_arn': str,
            'provisioning': Provisioning,
            'provisioning_repository': EnvironmentProvisioningRepository,
            'spec': str,
            'template_major_version': str,
            'template_minor_version': str,
            'template_name': str
        }

        self.attribute_map = {
            'arn': 'arn',
            'codebuild_role_arn': 'codebuildRoleArn',
            'component_role_arn': 'componentRoleArn',
            'created_at': 'createdAt',
            'deployment_status': 'deploymentStatus',
            'deployment_status_message': 'deploymentStatusMessage',
            'description': 'description',
            'environment_account_connection_id': 'environmentAccountConnectionId',
            'environment_account_id': 'environmentAccountId',
            'last_attempted_deployment_id': 'lastAttemptedDeploymentId',
            'last_deployment_attempted_at': 'lastDeploymentAttemptedAt',
            'last_deployment_succeeded_at': 'lastDeploymentSucceededAt',
            'last_succeeded_deployment_id': 'lastSucceededDeploymentId',
            'name': 'name',
            'proton_service_role_arn': 'protonServiceRoleArn',
            'provisioning': 'provisioning',
            'provisioning_repository': 'provisioningRepository',
            'spec': 'spec',
            'template_major_version': 'templateMajorVersion',
            'template_minor_version': 'templateMinorVersion',
            'template_name': 'templateName'
        }

        self._arn = arn
        self._codebuild_role_arn = codebuild_role_arn
        self._component_role_arn = component_role_arn
        self._created_at = created_at
        self._deployment_status = deployment_status
        self._deployment_status_message = deployment_status_message
        self._description = description
        self._environment_account_connection_id = environment_account_connection_id
        self._environment_account_id = environment_account_id
        self._last_attempted_deployment_id = last_attempted_deployment_id
        self._last_deployment_attempted_at = last_deployment_attempted_at
        self._last_deployment_succeeded_at = last_deployment_succeeded_at
        self._last_succeeded_deployment_id = last_succeeded_deployment_id
        self._name = name
        self._proton_service_role_arn = proton_service_role_arn
        self._provisioning = provisioning
        self._provisioning_repository = provisioning_repository
        self._spec = spec
        self._template_major_version = template_major_version
        self._template_minor_version = template_minor_version
        self._template_name = template_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Environment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Environment of this Environment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arn(self):
        """Gets the arn of this Environment.


        :return: The arn of this Environment.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this Environment.


        :param arn: The arn of this Environment.
        :type arn: str
        """
        if arn is None:
            raise ValueError("Invalid value for `arn`, must not be `None`")

        self._arn = arn

    @property
    def codebuild_role_arn(self):
        """Gets the codebuild_role_arn of this Environment.


        :return: The codebuild_role_arn of this Environment.
        :rtype: str
        """
        return self._codebuild_role_arn

    @codebuild_role_arn.setter
    def codebuild_role_arn(self, codebuild_role_arn):
        """Sets the codebuild_role_arn of this Environment.


        :param codebuild_role_arn: The codebuild_role_arn of this Environment.
        :type codebuild_role_arn: str
        """

        self._codebuild_role_arn = codebuild_role_arn

    @property
    def component_role_arn(self):
        """Gets the component_role_arn of this Environment.


        :return: The component_role_arn of this Environment.
        :rtype: str
        """
        return self._component_role_arn

    @component_role_arn.setter
    def component_role_arn(self, component_role_arn):
        """Sets the component_role_arn of this Environment.


        :param component_role_arn: The component_role_arn of this Environment.
        :type component_role_arn: str
        """

        self._component_role_arn = component_role_arn

    @property
    def created_at(self):
        """Gets the created_at of this Environment.


        :return: The created_at of this Environment.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Environment.


        :param created_at: The created_at of this Environment.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def deployment_status(self):
        """Gets the deployment_status of this Environment.


        :return: The deployment_status of this Environment.
        :rtype: DeploymentStatus
        """
        return self._deployment_status

    @deployment_status.setter
    def deployment_status(self, deployment_status):
        """Sets the deployment_status of this Environment.


        :param deployment_status: The deployment_status of this Environment.
        :type deployment_status: DeploymentStatus
        """
        if deployment_status is None:
            raise ValueError("Invalid value for `deployment_status`, must not be `None`")

        self._deployment_status = deployment_status

    @property
    def deployment_status_message(self):
        """Gets the deployment_status_message of this Environment.


        :return: The deployment_status_message of this Environment.
        :rtype: str
        """
        return self._deployment_status_message

    @deployment_status_message.setter
    def deployment_status_message(self, deployment_status_message):
        """Sets the deployment_status_message of this Environment.


        :param deployment_status_message: The deployment_status_message of this Environment.
        :type deployment_status_message: str
        """

        self._deployment_status_message = deployment_status_message

    @property
    def description(self):
        """Gets the description of this Environment.


        :return: The description of this Environment.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Environment.


        :param description: The description of this Environment.
        :type description: str
        """

        self._description = description

    @property
    def environment_account_connection_id(self):
        """Gets the environment_account_connection_id of this Environment.


        :return: The environment_account_connection_id of this Environment.
        :rtype: str
        """
        return self._environment_account_connection_id

    @environment_account_connection_id.setter
    def environment_account_connection_id(self, environment_account_connection_id):
        """Sets the environment_account_connection_id of this Environment.


        :param environment_account_connection_id: The environment_account_connection_id of this Environment.
        :type environment_account_connection_id: str
        """

        self._environment_account_connection_id = environment_account_connection_id

    @property
    def environment_account_id(self):
        """Gets the environment_account_id of this Environment.


        :return: The environment_account_id of this Environment.
        :rtype: str
        """
        return self._environment_account_id

    @environment_account_id.setter
    def environment_account_id(self, environment_account_id):
        """Sets the environment_account_id of this Environment.


        :param environment_account_id: The environment_account_id of this Environment.
        :type environment_account_id: str
        """

        self._environment_account_id = environment_account_id

    @property
    def last_attempted_deployment_id(self):
        """Gets the last_attempted_deployment_id of this Environment.


        :return: The last_attempted_deployment_id of this Environment.
        :rtype: str
        """
        return self._last_attempted_deployment_id

    @last_attempted_deployment_id.setter
    def last_attempted_deployment_id(self, last_attempted_deployment_id):
        """Sets the last_attempted_deployment_id of this Environment.


        :param last_attempted_deployment_id: The last_attempted_deployment_id of this Environment.
        :type last_attempted_deployment_id: str
        """

        self._last_attempted_deployment_id = last_attempted_deployment_id

    @property
    def last_deployment_attempted_at(self):
        """Gets the last_deployment_attempted_at of this Environment.


        :return: The last_deployment_attempted_at of this Environment.
        :rtype: datetime
        """
        return self._last_deployment_attempted_at

    @last_deployment_attempted_at.setter
    def last_deployment_attempted_at(self, last_deployment_attempted_at):
        """Sets the last_deployment_attempted_at of this Environment.


        :param last_deployment_attempted_at: The last_deployment_attempted_at of this Environment.
        :type last_deployment_attempted_at: datetime
        """
        if last_deployment_attempted_at is None:
            raise ValueError("Invalid value for `last_deployment_attempted_at`, must not be `None`")

        self._last_deployment_attempted_at = last_deployment_attempted_at

    @property
    def last_deployment_succeeded_at(self):
        """Gets the last_deployment_succeeded_at of this Environment.


        :return: The last_deployment_succeeded_at of this Environment.
        :rtype: datetime
        """
        return self._last_deployment_succeeded_at

    @last_deployment_succeeded_at.setter
    def last_deployment_succeeded_at(self, last_deployment_succeeded_at):
        """Sets the last_deployment_succeeded_at of this Environment.


        :param last_deployment_succeeded_at: The last_deployment_succeeded_at of this Environment.
        :type last_deployment_succeeded_at: datetime
        """
        if last_deployment_succeeded_at is None:
            raise ValueError("Invalid value for `last_deployment_succeeded_at`, must not be `None`")

        self._last_deployment_succeeded_at = last_deployment_succeeded_at

    @property
    def last_succeeded_deployment_id(self):
        """Gets the last_succeeded_deployment_id of this Environment.


        :return: The last_succeeded_deployment_id of this Environment.
        :rtype: str
        """
        return self._last_succeeded_deployment_id

    @last_succeeded_deployment_id.setter
    def last_succeeded_deployment_id(self, last_succeeded_deployment_id):
        """Sets the last_succeeded_deployment_id of this Environment.


        :param last_succeeded_deployment_id: The last_succeeded_deployment_id of this Environment.
        :type last_succeeded_deployment_id: str
        """

        self._last_succeeded_deployment_id = last_succeeded_deployment_id

    @property
    def name(self):
        """Gets the name of this Environment.


        :return: The name of this Environment.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Environment.


        :param name: The name of this Environment.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def proton_service_role_arn(self):
        """Gets the proton_service_role_arn of this Environment.


        :return: The proton_service_role_arn of this Environment.
        :rtype: str
        """
        return self._proton_service_role_arn

    @proton_service_role_arn.setter
    def proton_service_role_arn(self, proton_service_role_arn):
        """Sets the proton_service_role_arn of this Environment.


        :param proton_service_role_arn: The proton_service_role_arn of this Environment.
        :type proton_service_role_arn: str
        """

        self._proton_service_role_arn = proton_service_role_arn

    @property
    def provisioning(self):
        """Gets the provisioning of this Environment.


        :return: The provisioning of this Environment.
        :rtype: Provisioning
        """
        return self._provisioning

    @provisioning.setter
    def provisioning(self, provisioning):
        """Sets the provisioning of this Environment.


        :param provisioning: The provisioning of this Environment.
        :type provisioning: Provisioning
        """

        self._provisioning = provisioning

    @property
    def provisioning_repository(self):
        """Gets the provisioning_repository of this Environment.


        :return: The provisioning_repository of this Environment.
        :rtype: EnvironmentProvisioningRepository
        """
        return self._provisioning_repository

    @provisioning_repository.setter
    def provisioning_repository(self, provisioning_repository):
        """Sets the provisioning_repository of this Environment.


        :param provisioning_repository: The provisioning_repository of this Environment.
        :type provisioning_repository: EnvironmentProvisioningRepository
        """

        self._provisioning_repository = provisioning_repository

    @property
    def spec(self):
        """Gets the spec of this Environment.


        :return: The spec of this Environment.
        :rtype: str
        """
        return self._spec

    @spec.setter
    def spec(self, spec):
        """Sets the spec of this Environment.


        :param spec: The spec of this Environment.
        :type spec: str
        """

        self._spec = spec

    @property
    def template_major_version(self):
        """Gets the template_major_version of this Environment.


        :return: The template_major_version of this Environment.
        :rtype: str
        """
        return self._template_major_version

    @template_major_version.setter
    def template_major_version(self, template_major_version):
        """Sets the template_major_version of this Environment.


        :param template_major_version: The template_major_version of this Environment.
        :type template_major_version: str
        """
        if template_major_version is None:
            raise ValueError("Invalid value for `template_major_version`, must not be `None`")

        self._template_major_version = template_major_version

    @property
    def template_minor_version(self):
        """Gets the template_minor_version of this Environment.


        :return: The template_minor_version of this Environment.
        :rtype: str
        """
        return self._template_minor_version

    @template_minor_version.setter
    def template_minor_version(self, template_minor_version):
        """Sets the template_minor_version of this Environment.


        :param template_minor_version: The template_minor_version of this Environment.
        :type template_minor_version: str
        """
        if template_minor_version is None:
            raise ValueError("Invalid value for `template_minor_version`, must not be `None`")

        self._template_minor_version = template_minor_version

    @property
    def template_name(self):
        """Gets the template_name of this Environment.


        :return: The template_name of this Environment.
        :rtype: str
        """
        return self._template_name

    @template_name.setter
    def template_name(self, template_name):
        """Sets the template_name of this Environment.


        :param template_name: The template_name of this Environment.
        :type template_name: str
        """
        if template_name is None:
            raise ValueError("Invalid value for `template_name`, must not be `None`")

        self._template_name = template_name
