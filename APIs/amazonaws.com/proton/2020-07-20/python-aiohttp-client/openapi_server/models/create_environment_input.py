# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_environment_input_provisioning_repository import CreateEnvironmentInputProvisioningRepository
from openapi_server import util


class CreateEnvironmentInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, codebuild_role_arn: str=None, component_role_arn: str=None, description: str=None, environment_account_connection_id: str=None, name: str=None, proton_service_role_arn: str=None, provisioning_repository: CreateEnvironmentInputProvisioningRepository=None, spec: str=None, tags: List=None, template_major_version: str=None, template_minor_version: str=None, template_name: str=None):
        """CreateEnvironmentInput - a model defined in OpenAPI

        :param codebuild_role_arn: The codebuild_role_arn of this CreateEnvironmentInput.
        :param component_role_arn: The component_role_arn of this CreateEnvironmentInput.
        :param description: The description of this CreateEnvironmentInput.
        :param environment_account_connection_id: The environment_account_connection_id of this CreateEnvironmentInput.
        :param name: The name of this CreateEnvironmentInput.
        :param proton_service_role_arn: The proton_service_role_arn of this CreateEnvironmentInput.
        :param provisioning_repository: The provisioning_repository of this CreateEnvironmentInput.
        :param spec: The spec of this CreateEnvironmentInput.
        :param tags: The tags of this CreateEnvironmentInput.
        :param template_major_version: The template_major_version of this CreateEnvironmentInput.
        :param template_minor_version: The template_minor_version of this CreateEnvironmentInput.
        :param template_name: The template_name of this CreateEnvironmentInput.
        """
        self.openapi_types = {
            'codebuild_role_arn': str,
            'component_role_arn': str,
            'description': str,
            'environment_account_connection_id': str,
            'name': str,
            'proton_service_role_arn': str,
            'provisioning_repository': CreateEnvironmentInputProvisioningRepository,
            'spec': str,
            'tags': List,
            'template_major_version': str,
            'template_minor_version': str,
            'template_name': str
        }

        self.attribute_map = {
            'codebuild_role_arn': 'codebuildRoleArn',
            'component_role_arn': 'componentRoleArn',
            'description': 'description',
            'environment_account_connection_id': 'environmentAccountConnectionId',
            'name': 'name',
            'proton_service_role_arn': 'protonServiceRoleArn',
            'provisioning_repository': 'provisioningRepository',
            'spec': 'spec',
            'tags': 'tags',
            'template_major_version': 'templateMajorVersion',
            'template_minor_version': 'templateMinorVersion',
            'template_name': 'templateName'
        }

        self._codebuild_role_arn = codebuild_role_arn
        self._component_role_arn = component_role_arn
        self._description = description
        self._environment_account_connection_id = environment_account_connection_id
        self._name = name
        self._proton_service_role_arn = proton_service_role_arn
        self._provisioning_repository = provisioning_repository
        self._spec = spec
        self._tags = tags
        self._template_major_version = template_major_version
        self._template_minor_version = template_minor_version
        self._template_name = template_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateEnvironmentInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateEnvironmentInput of this CreateEnvironmentInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def codebuild_role_arn(self):
        """Gets the codebuild_role_arn of this CreateEnvironmentInput.


        :return: The codebuild_role_arn of this CreateEnvironmentInput.
        :rtype: str
        """
        return self._codebuild_role_arn

    @codebuild_role_arn.setter
    def codebuild_role_arn(self, codebuild_role_arn):
        """Sets the codebuild_role_arn of this CreateEnvironmentInput.


        :param codebuild_role_arn: The codebuild_role_arn of this CreateEnvironmentInput.
        :type codebuild_role_arn: str
        """

        self._codebuild_role_arn = codebuild_role_arn

    @property
    def component_role_arn(self):
        """Gets the component_role_arn of this CreateEnvironmentInput.


        :return: The component_role_arn of this CreateEnvironmentInput.
        :rtype: str
        """
        return self._component_role_arn

    @component_role_arn.setter
    def component_role_arn(self, component_role_arn):
        """Sets the component_role_arn of this CreateEnvironmentInput.


        :param component_role_arn: The component_role_arn of this CreateEnvironmentInput.
        :type component_role_arn: str
        """

        self._component_role_arn = component_role_arn

    @property
    def description(self):
        """Gets the description of this CreateEnvironmentInput.


        :return: The description of this CreateEnvironmentInput.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateEnvironmentInput.


        :param description: The description of this CreateEnvironmentInput.
        :type description: str
        """

        self._description = description

    @property
    def environment_account_connection_id(self):
        """Gets the environment_account_connection_id of this CreateEnvironmentInput.


        :return: The environment_account_connection_id of this CreateEnvironmentInput.
        :rtype: str
        """
        return self._environment_account_connection_id

    @environment_account_connection_id.setter
    def environment_account_connection_id(self, environment_account_connection_id):
        """Sets the environment_account_connection_id of this CreateEnvironmentInput.


        :param environment_account_connection_id: The environment_account_connection_id of this CreateEnvironmentInput.
        :type environment_account_connection_id: str
        """

        self._environment_account_connection_id = environment_account_connection_id

    @property
    def name(self):
        """Gets the name of this CreateEnvironmentInput.


        :return: The name of this CreateEnvironmentInput.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateEnvironmentInput.


        :param name: The name of this CreateEnvironmentInput.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def proton_service_role_arn(self):
        """Gets the proton_service_role_arn of this CreateEnvironmentInput.


        :return: The proton_service_role_arn of this CreateEnvironmentInput.
        :rtype: str
        """
        return self._proton_service_role_arn

    @proton_service_role_arn.setter
    def proton_service_role_arn(self, proton_service_role_arn):
        """Sets the proton_service_role_arn of this CreateEnvironmentInput.


        :param proton_service_role_arn: The proton_service_role_arn of this CreateEnvironmentInput.
        :type proton_service_role_arn: str
        """

        self._proton_service_role_arn = proton_service_role_arn

    @property
    def provisioning_repository(self):
        """Gets the provisioning_repository of this CreateEnvironmentInput.


        :return: The provisioning_repository of this CreateEnvironmentInput.
        :rtype: CreateEnvironmentInputProvisioningRepository
        """
        return self._provisioning_repository

    @provisioning_repository.setter
    def provisioning_repository(self, provisioning_repository):
        """Sets the provisioning_repository of this CreateEnvironmentInput.


        :param provisioning_repository: The provisioning_repository of this CreateEnvironmentInput.
        :type provisioning_repository: CreateEnvironmentInputProvisioningRepository
        """

        self._provisioning_repository = provisioning_repository

    @property
    def spec(self):
        """Gets the spec of this CreateEnvironmentInput.


        :return: The spec of this CreateEnvironmentInput.
        :rtype: str
        """
        return self._spec

    @spec.setter
    def spec(self, spec):
        """Sets the spec of this CreateEnvironmentInput.


        :param spec: The spec of this CreateEnvironmentInput.
        :type spec: str
        """
        if spec is None:
            raise ValueError("Invalid value for `spec`, must not be `None`")

        self._spec = spec

    @property
    def tags(self):
        """Gets the tags of this CreateEnvironmentInput.


        :return: The tags of this CreateEnvironmentInput.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateEnvironmentInput.


        :param tags: The tags of this CreateEnvironmentInput.
        :type tags: List
        """

        self._tags = tags

    @property
    def template_major_version(self):
        """Gets the template_major_version of this CreateEnvironmentInput.


        :return: The template_major_version of this CreateEnvironmentInput.
        :rtype: str
        """
        return self._template_major_version

    @template_major_version.setter
    def template_major_version(self, template_major_version):
        """Sets the template_major_version of this CreateEnvironmentInput.


        :param template_major_version: The template_major_version of this CreateEnvironmentInput.
        :type template_major_version: str
        """
        if template_major_version is None:
            raise ValueError("Invalid value for `template_major_version`, must not be `None`")

        self._template_major_version = template_major_version

    @property
    def template_minor_version(self):
        """Gets the template_minor_version of this CreateEnvironmentInput.


        :return: The template_minor_version of this CreateEnvironmentInput.
        :rtype: str
        """
        return self._template_minor_version

    @template_minor_version.setter
    def template_minor_version(self, template_minor_version):
        """Sets the template_minor_version of this CreateEnvironmentInput.


        :param template_minor_version: The template_minor_version of this CreateEnvironmentInput.
        :type template_minor_version: str
        """

        self._template_minor_version = template_minor_version

    @property
    def template_name(self):
        """Gets the template_name of this CreateEnvironmentInput.


        :return: The template_name of this CreateEnvironmentInput.
        :rtype: str
        """
        return self._template_name

    @template_name.setter
    def template_name(self, template_name):
        """Sets the template_name of this CreateEnvironmentInput.


        :param template_name: The template_name of this CreateEnvironmentInput.
        :type template_name: str
        """
        if template_name is None:
            raise ValueError("Invalid value for `template_name`, must not be `None`")

        self._template_name = template_name
