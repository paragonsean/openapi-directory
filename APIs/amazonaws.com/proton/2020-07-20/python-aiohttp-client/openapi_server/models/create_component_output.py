# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_component_output_component import CreateComponentOutputComponent
from openapi_server import util


class CreateComponentOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, component: CreateComponentOutputComponent=None):
        """CreateComponentOutput - a model defined in OpenAPI

        :param component: The component of this CreateComponentOutput.
        """
        self.openapi_types = {
            'component': CreateComponentOutputComponent
        }

        self.attribute_map = {
            'component': 'component'
        }

        self._component = component

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateComponentOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateComponentOutput of this CreateComponentOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def component(self):
        """Gets the component of this CreateComponentOutput.


        :return: The component of this CreateComponentOutput.
        :rtype: CreateComponentOutputComponent
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this CreateComponentOutput.


        :param component: The component of this CreateComponentOutput.
        :type component: CreateComponentOutputComponent
        """
        if component is None:
            raise ValueError("Invalid value for `component`, must not be `None`")

        self._component = component
