# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_environment_template_output_environment_template import CreateEnvironmentTemplateOutputEnvironmentTemplate
from openapi_server import util


class CreateEnvironmentTemplateOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, environment_template: CreateEnvironmentTemplateOutputEnvironmentTemplate=None):
        """CreateEnvironmentTemplateOutput - a model defined in OpenAPI

        :param environment_template: The environment_template of this CreateEnvironmentTemplateOutput.
        """
        self.openapi_types = {
            'environment_template': CreateEnvironmentTemplateOutputEnvironmentTemplate
        }

        self.attribute_map = {
            'environment_template': 'environmentTemplate'
        }

        self._environment_template = environment_template

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateEnvironmentTemplateOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateEnvironmentTemplateOutput of this CreateEnvironmentTemplateOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def environment_template(self):
        """Gets the environment_template of this CreateEnvironmentTemplateOutput.


        :return: The environment_template of this CreateEnvironmentTemplateOutput.
        :rtype: CreateEnvironmentTemplateOutputEnvironmentTemplate
        """
        return self._environment_template

    @environment_template.setter
    def environment_template(self, environment_template):
        """Sets the environment_template of this CreateEnvironmentTemplateOutput.


        :param environment_template: The environment_template of this CreateEnvironmentTemplateOutput.
        :type environment_template: CreateEnvironmentTemplateOutputEnvironmentTemplate
        """
        if environment_template is None:
            raise ValueError("Invalid value for `environment_template`, must not be `None`")

        self._environment_template = environment_template
