# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateComponentInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_token: str=None, description: str=None, environment_name: str=None, manifest: str=None, name: str=None, service_instance_name: str=None, service_name: str=None, service_spec: str=None, tags: List=None, template_file: str=None):
        """CreateComponentInput - a model defined in OpenAPI

        :param client_token: The client_token of this CreateComponentInput.
        :param description: The description of this CreateComponentInput.
        :param environment_name: The environment_name of this CreateComponentInput.
        :param manifest: The manifest of this CreateComponentInput.
        :param name: The name of this CreateComponentInput.
        :param service_instance_name: The service_instance_name of this CreateComponentInput.
        :param service_name: The service_name of this CreateComponentInput.
        :param service_spec: The service_spec of this CreateComponentInput.
        :param tags: The tags of this CreateComponentInput.
        :param template_file: The template_file of this CreateComponentInput.
        """
        self.openapi_types = {
            'client_token': str,
            'description': str,
            'environment_name': str,
            'manifest': str,
            'name': str,
            'service_instance_name': str,
            'service_name': str,
            'service_spec': str,
            'tags': List,
            'template_file': str
        }

        self.attribute_map = {
            'client_token': 'clientToken',
            'description': 'description',
            'environment_name': 'environmentName',
            'manifest': 'manifest',
            'name': 'name',
            'service_instance_name': 'serviceInstanceName',
            'service_name': 'serviceName',
            'service_spec': 'serviceSpec',
            'tags': 'tags',
            'template_file': 'templateFile'
        }

        self._client_token = client_token
        self._description = description
        self._environment_name = environment_name
        self._manifest = manifest
        self._name = name
        self._service_instance_name = service_instance_name
        self._service_name = service_name
        self._service_spec = service_spec
        self._tags = tags
        self._template_file = template_file

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateComponentInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateComponentInput of this CreateComponentInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_token(self):
        """Gets the client_token of this CreateComponentInput.


        :return: The client_token of this CreateComponentInput.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateComponentInput.


        :param client_token: The client_token of this CreateComponentInput.
        :type client_token: str
        """

        self._client_token = client_token

    @property
    def description(self):
        """Gets the description of this CreateComponentInput.


        :return: The description of this CreateComponentInput.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateComponentInput.


        :param description: The description of this CreateComponentInput.
        :type description: str
        """

        self._description = description

    @property
    def environment_name(self):
        """Gets the environment_name of this CreateComponentInput.


        :return: The environment_name of this CreateComponentInput.
        :rtype: str
        """
        return self._environment_name

    @environment_name.setter
    def environment_name(self, environment_name):
        """Sets the environment_name of this CreateComponentInput.


        :param environment_name: The environment_name of this CreateComponentInput.
        :type environment_name: str
        """

        self._environment_name = environment_name

    @property
    def manifest(self):
        """Gets the manifest of this CreateComponentInput.


        :return: The manifest of this CreateComponentInput.
        :rtype: str
        """
        return self._manifest

    @manifest.setter
    def manifest(self, manifest):
        """Sets the manifest of this CreateComponentInput.


        :param manifest: The manifest of this CreateComponentInput.
        :type manifest: str
        """
        if manifest is None:
            raise ValueError("Invalid value for `manifest`, must not be `None`")

        self._manifest = manifest

    @property
    def name(self):
        """Gets the name of this CreateComponentInput.


        :return: The name of this CreateComponentInput.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateComponentInput.


        :param name: The name of this CreateComponentInput.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def service_instance_name(self):
        """Gets the service_instance_name of this CreateComponentInput.


        :return: The service_instance_name of this CreateComponentInput.
        :rtype: str
        """
        return self._service_instance_name

    @service_instance_name.setter
    def service_instance_name(self, service_instance_name):
        """Sets the service_instance_name of this CreateComponentInput.


        :param service_instance_name: The service_instance_name of this CreateComponentInput.
        :type service_instance_name: str
        """

        self._service_instance_name = service_instance_name

    @property
    def service_name(self):
        """Gets the service_name of this CreateComponentInput.


        :return: The service_name of this CreateComponentInput.
        :rtype: str
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this CreateComponentInput.


        :param service_name: The service_name of this CreateComponentInput.
        :type service_name: str
        """

        self._service_name = service_name

    @property
    def service_spec(self):
        """Gets the service_spec of this CreateComponentInput.


        :return: The service_spec of this CreateComponentInput.
        :rtype: str
        """
        return self._service_spec

    @service_spec.setter
    def service_spec(self, service_spec):
        """Sets the service_spec of this CreateComponentInput.


        :param service_spec: The service_spec of this CreateComponentInput.
        :type service_spec: str
        """

        self._service_spec = service_spec

    @property
    def tags(self):
        """Gets the tags of this CreateComponentInput.


        :return: The tags of this CreateComponentInput.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateComponentInput.


        :param tags: The tags of this CreateComponentInput.
        :type tags: List
        """

        self._tags = tags

    @property
    def template_file(self):
        """Gets the template_file of this CreateComponentInput.


        :return: The template_file of this CreateComponentInput.
        :rtype: str
        """
        return self._template_file

    @template_file.setter
    def template_file(self, template_file):
        """Sets the template_file of this CreateComponentInput.


        :param template_file: The template_file of this CreateComponentInput.
        :type template_file: str
        """
        if template_file is None:
            raise ValueError("Invalid value for `template_file`, must not be `None`")

        self._template_file = template_file
