# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.environment_account_connection_requester_account_type import EnvironmentAccountConnectionRequesterAccountType
from openapi_server import util


class ListEnvironmentAccountConnectionsInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, environment_name: str=None, max_results: int=None, next_token: str=None, requested_by: EnvironmentAccountConnectionRequesterAccountType=None, statuses: List=None):
        """ListEnvironmentAccountConnectionsInput - a model defined in OpenAPI

        :param environment_name: The environment_name of this ListEnvironmentAccountConnectionsInput.
        :param max_results: The max_results of this ListEnvironmentAccountConnectionsInput.
        :param next_token: The next_token of this ListEnvironmentAccountConnectionsInput.
        :param requested_by: The requested_by of this ListEnvironmentAccountConnectionsInput.
        :param statuses: The statuses of this ListEnvironmentAccountConnectionsInput.
        """
        self.openapi_types = {
            'environment_name': str,
            'max_results': int,
            'next_token': str,
            'requested_by': EnvironmentAccountConnectionRequesterAccountType,
            'statuses': List
        }

        self.attribute_map = {
            'environment_name': 'environmentName',
            'max_results': 'maxResults',
            'next_token': 'nextToken',
            'requested_by': 'requestedBy',
            'statuses': 'statuses'
        }

        self._environment_name = environment_name
        self._max_results = max_results
        self._next_token = next_token
        self._requested_by = requested_by
        self._statuses = statuses

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListEnvironmentAccountConnectionsInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListEnvironmentAccountConnectionsInput of this ListEnvironmentAccountConnectionsInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def environment_name(self):
        """Gets the environment_name of this ListEnvironmentAccountConnectionsInput.


        :return: The environment_name of this ListEnvironmentAccountConnectionsInput.
        :rtype: str
        """
        return self._environment_name

    @environment_name.setter
    def environment_name(self, environment_name):
        """Sets the environment_name of this ListEnvironmentAccountConnectionsInput.


        :param environment_name: The environment_name of this ListEnvironmentAccountConnectionsInput.
        :type environment_name: str
        """

        self._environment_name = environment_name

    @property
    def max_results(self):
        """Gets the max_results of this ListEnvironmentAccountConnectionsInput.


        :return: The max_results of this ListEnvironmentAccountConnectionsInput.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListEnvironmentAccountConnectionsInput.


        :param max_results: The max_results of this ListEnvironmentAccountConnectionsInput.
        :type max_results: int
        """

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this ListEnvironmentAccountConnectionsInput.


        :return: The next_token of this ListEnvironmentAccountConnectionsInput.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListEnvironmentAccountConnectionsInput.


        :param next_token: The next_token of this ListEnvironmentAccountConnectionsInput.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def requested_by(self):
        """Gets the requested_by of this ListEnvironmentAccountConnectionsInput.


        :return: The requested_by of this ListEnvironmentAccountConnectionsInput.
        :rtype: EnvironmentAccountConnectionRequesterAccountType
        """
        return self._requested_by

    @requested_by.setter
    def requested_by(self, requested_by):
        """Sets the requested_by of this ListEnvironmentAccountConnectionsInput.


        :param requested_by: The requested_by of this ListEnvironmentAccountConnectionsInput.
        :type requested_by: EnvironmentAccountConnectionRequesterAccountType
        """
        if requested_by is None:
            raise ValueError("Invalid value for `requested_by`, must not be `None`")

        self._requested_by = requested_by

    @property
    def statuses(self):
        """Gets the statuses of this ListEnvironmentAccountConnectionsInput.


        :return: The statuses of this ListEnvironmentAccountConnectionsInput.
        :rtype: List
        """
        return self._statuses

    @statuses.setter
    def statuses(self, statuses):
        """Sets the statuses of this ListEnvironmentAccountConnectionsInput.


        :param statuses: The statuses of this ListEnvironmentAccountConnectionsInput.
        :type statuses: List
        """

        self._statuses = statuses
