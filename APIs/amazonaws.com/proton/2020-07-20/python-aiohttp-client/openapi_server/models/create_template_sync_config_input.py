# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.repository_provider import RepositoryProvider
from openapi_server.models.template_type import TemplateType
from openapi_server import util


class CreateTemplateSyncConfigInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, branch: str=None, repository_name: str=None, repository_provider: RepositoryProvider=None, subdirectory: str=None, template_name: str=None, template_type: TemplateType=None):
        """CreateTemplateSyncConfigInput - a model defined in OpenAPI

        :param branch: The branch of this CreateTemplateSyncConfigInput.
        :param repository_name: The repository_name of this CreateTemplateSyncConfigInput.
        :param repository_provider: The repository_provider of this CreateTemplateSyncConfigInput.
        :param subdirectory: The subdirectory of this CreateTemplateSyncConfigInput.
        :param template_name: The template_name of this CreateTemplateSyncConfigInput.
        :param template_type: The template_type of this CreateTemplateSyncConfigInput.
        """
        self.openapi_types = {
            'branch': str,
            'repository_name': str,
            'repository_provider': RepositoryProvider,
            'subdirectory': str,
            'template_name': str,
            'template_type': TemplateType
        }

        self.attribute_map = {
            'branch': 'branch',
            'repository_name': 'repositoryName',
            'repository_provider': 'repositoryProvider',
            'subdirectory': 'subdirectory',
            'template_name': 'templateName',
            'template_type': 'templateType'
        }

        self._branch = branch
        self._repository_name = repository_name
        self._repository_provider = repository_provider
        self._subdirectory = subdirectory
        self._template_name = template_name
        self._template_type = template_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateTemplateSyncConfigInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateTemplateSyncConfigInput of this CreateTemplateSyncConfigInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def branch(self):
        """Gets the branch of this CreateTemplateSyncConfigInput.


        :return: The branch of this CreateTemplateSyncConfigInput.
        :rtype: str
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this CreateTemplateSyncConfigInput.


        :param branch: The branch of this CreateTemplateSyncConfigInput.
        :type branch: str
        """
        if branch is None:
            raise ValueError("Invalid value for `branch`, must not be `None`")

        self._branch = branch

    @property
    def repository_name(self):
        """Gets the repository_name of this CreateTemplateSyncConfigInput.


        :return: The repository_name of this CreateTemplateSyncConfigInput.
        :rtype: str
        """
        return self._repository_name

    @repository_name.setter
    def repository_name(self, repository_name):
        """Sets the repository_name of this CreateTemplateSyncConfigInput.


        :param repository_name: The repository_name of this CreateTemplateSyncConfigInput.
        :type repository_name: str
        """
        if repository_name is None:
            raise ValueError("Invalid value for `repository_name`, must not be `None`")

        self._repository_name = repository_name

    @property
    def repository_provider(self):
        """Gets the repository_provider of this CreateTemplateSyncConfigInput.


        :return: The repository_provider of this CreateTemplateSyncConfigInput.
        :rtype: RepositoryProvider
        """
        return self._repository_provider

    @repository_provider.setter
    def repository_provider(self, repository_provider):
        """Sets the repository_provider of this CreateTemplateSyncConfigInput.


        :param repository_provider: The repository_provider of this CreateTemplateSyncConfigInput.
        :type repository_provider: RepositoryProvider
        """
        if repository_provider is None:
            raise ValueError("Invalid value for `repository_provider`, must not be `None`")

        self._repository_provider = repository_provider

    @property
    def subdirectory(self):
        """Gets the subdirectory of this CreateTemplateSyncConfigInput.


        :return: The subdirectory of this CreateTemplateSyncConfigInput.
        :rtype: str
        """
        return self._subdirectory

    @subdirectory.setter
    def subdirectory(self, subdirectory):
        """Sets the subdirectory of this CreateTemplateSyncConfigInput.


        :param subdirectory: The subdirectory of this CreateTemplateSyncConfigInput.
        :type subdirectory: str
        """

        self._subdirectory = subdirectory

    @property
    def template_name(self):
        """Gets the template_name of this CreateTemplateSyncConfigInput.


        :return: The template_name of this CreateTemplateSyncConfigInput.
        :rtype: str
        """
        return self._template_name

    @template_name.setter
    def template_name(self, template_name):
        """Sets the template_name of this CreateTemplateSyncConfigInput.


        :param template_name: The template_name of this CreateTemplateSyncConfigInput.
        :type template_name: str
        """
        if template_name is None:
            raise ValueError("Invalid value for `template_name`, must not be `None`")

        self._template_name = template_name

    @property
    def template_type(self):
        """Gets the template_type of this CreateTemplateSyncConfigInput.


        :return: The template_type of this CreateTemplateSyncConfigInput.
        :rtype: TemplateType
        """
        return self._template_type

    @template_type.setter
    def template_type(self, template_type):
        """Sets the template_type of this CreateTemplateSyncConfigInput.


        :param template_type: The template_type of this CreateTemplateSyncConfigInput.
        :type template_type: TemplateType
        """
        if template_type is None:
            raise ValueError("Invalid value for `template_type`, must not be `None`")

        self._template_type = template_type
