# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListServiceInstanceOutputsInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deployment_id: str=None, next_token: str=None, service_instance_name: str=None, service_name: str=None):
        """ListServiceInstanceOutputsInput - a model defined in OpenAPI

        :param deployment_id: The deployment_id of this ListServiceInstanceOutputsInput.
        :param next_token: The next_token of this ListServiceInstanceOutputsInput.
        :param service_instance_name: The service_instance_name of this ListServiceInstanceOutputsInput.
        :param service_name: The service_name of this ListServiceInstanceOutputsInput.
        """
        self.openapi_types = {
            'deployment_id': str,
            'next_token': str,
            'service_instance_name': str,
            'service_name': str
        }

        self.attribute_map = {
            'deployment_id': 'deploymentId',
            'next_token': 'nextToken',
            'service_instance_name': 'serviceInstanceName',
            'service_name': 'serviceName'
        }

        self._deployment_id = deployment_id
        self._next_token = next_token
        self._service_instance_name = service_instance_name
        self._service_name = service_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListServiceInstanceOutputsInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListServiceInstanceOutputsInput of this ListServiceInstanceOutputsInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deployment_id(self):
        """Gets the deployment_id of this ListServiceInstanceOutputsInput.


        :return: The deployment_id of this ListServiceInstanceOutputsInput.
        :rtype: str
        """
        return self._deployment_id

    @deployment_id.setter
    def deployment_id(self, deployment_id):
        """Sets the deployment_id of this ListServiceInstanceOutputsInput.


        :param deployment_id: The deployment_id of this ListServiceInstanceOutputsInput.
        :type deployment_id: str
        """

        self._deployment_id = deployment_id

    @property
    def next_token(self):
        """Gets the next_token of this ListServiceInstanceOutputsInput.


        :return: The next_token of this ListServiceInstanceOutputsInput.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListServiceInstanceOutputsInput.


        :param next_token: The next_token of this ListServiceInstanceOutputsInput.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def service_instance_name(self):
        """Gets the service_instance_name of this ListServiceInstanceOutputsInput.


        :return: The service_instance_name of this ListServiceInstanceOutputsInput.
        :rtype: str
        """
        return self._service_instance_name

    @service_instance_name.setter
    def service_instance_name(self, service_instance_name):
        """Sets the service_instance_name of this ListServiceInstanceOutputsInput.


        :param service_instance_name: The service_instance_name of this ListServiceInstanceOutputsInput.
        :type service_instance_name: str
        """
        if service_instance_name is None:
            raise ValueError("Invalid value for `service_instance_name`, must not be `None`")

        self._service_instance_name = service_instance_name

    @property
    def service_name(self):
        """Gets the service_name of this ListServiceInstanceOutputsInput.


        :return: The service_name of this ListServiceInstanceOutputsInput.
        :rtype: str
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this ListServiceInstanceOutputsInput.


        :param service_name: The service_name of this ListServiceInstanceOutputsInput.
        :type service_name: str
        """
        if service_name is None:
            raise ValueError("Invalid value for `service_name`, must not be `None`")

        self._service_name = service_name
