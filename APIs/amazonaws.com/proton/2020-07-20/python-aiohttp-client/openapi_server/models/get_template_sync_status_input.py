# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.template_type import TemplateType
from openapi_server import util


class GetTemplateSyncStatusInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, template_name: str=None, template_type: TemplateType=None, template_version: str=None):
        """GetTemplateSyncStatusInput - a model defined in OpenAPI

        :param template_name: The template_name of this GetTemplateSyncStatusInput.
        :param template_type: The template_type of this GetTemplateSyncStatusInput.
        :param template_version: The template_version of this GetTemplateSyncStatusInput.
        """
        self.openapi_types = {
            'template_name': str,
            'template_type': TemplateType,
            'template_version': str
        }

        self.attribute_map = {
            'template_name': 'templateName',
            'template_type': 'templateType',
            'template_version': 'templateVersion'
        }

        self._template_name = template_name
        self._template_type = template_type
        self._template_version = template_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetTemplateSyncStatusInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetTemplateSyncStatusInput of this GetTemplateSyncStatusInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def template_name(self):
        """Gets the template_name of this GetTemplateSyncStatusInput.


        :return: The template_name of this GetTemplateSyncStatusInput.
        :rtype: str
        """
        return self._template_name

    @template_name.setter
    def template_name(self, template_name):
        """Sets the template_name of this GetTemplateSyncStatusInput.


        :param template_name: The template_name of this GetTemplateSyncStatusInput.
        :type template_name: str
        """
        if template_name is None:
            raise ValueError("Invalid value for `template_name`, must not be `None`")

        self._template_name = template_name

    @property
    def template_type(self):
        """Gets the template_type of this GetTemplateSyncStatusInput.


        :return: The template_type of this GetTemplateSyncStatusInput.
        :rtype: TemplateType
        """
        return self._template_type

    @template_type.setter
    def template_type(self, template_type):
        """Sets the template_type of this GetTemplateSyncStatusInput.


        :param template_type: The template_type of this GetTemplateSyncStatusInput.
        :type template_type: TemplateType
        """
        if template_type is None:
            raise ValueError("Invalid value for `template_type`, must not be `None`")

        self._template_type = template_type

    @property
    def template_version(self):
        """Gets the template_version of this GetTemplateSyncStatusInput.


        :return: The template_version of this GetTemplateSyncStatusInput.
        :rtype: str
        """
        return self._template_version

    @template_version.setter
    def template_version(self, template_version):
        """Sets the template_version of this GetTemplateSyncStatusInput.


        :param template_version: The template_version of this GetTemplateSyncStatusInput.
        :type template_version: str
        """
        if template_version is None:
            raise ValueError("Invalid value for `template_version`, must not be `None`")

        self._template_version = template_version
