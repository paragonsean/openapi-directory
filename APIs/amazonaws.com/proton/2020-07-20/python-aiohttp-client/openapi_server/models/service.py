# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.service_pipeline import ServicePipeline
from openapi_server.models.service_status import ServiceStatus
from openapi_server import util


class Service(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arn: str=None, branch_name: str=None, created_at: datetime=None, description: str=None, last_modified_at: datetime=None, name: str=None, pipeline: ServicePipeline=None, repository_connection_arn: str=None, repository_id: str=None, spec: str=None, status: ServiceStatus=None, status_message: str=None, template_name: str=None):
        """Service - a model defined in OpenAPI

        :param arn: The arn of this Service.
        :param branch_name: The branch_name of this Service.
        :param created_at: The created_at of this Service.
        :param description: The description of this Service.
        :param last_modified_at: The last_modified_at of this Service.
        :param name: The name of this Service.
        :param pipeline: The pipeline of this Service.
        :param repository_connection_arn: The repository_connection_arn of this Service.
        :param repository_id: The repository_id of this Service.
        :param spec: The spec of this Service.
        :param status: The status of this Service.
        :param status_message: The status_message of this Service.
        :param template_name: The template_name of this Service.
        """
        self.openapi_types = {
            'arn': str,
            'branch_name': str,
            'created_at': datetime,
            'description': str,
            'last_modified_at': datetime,
            'name': str,
            'pipeline': ServicePipeline,
            'repository_connection_arn': str,
            'repository_id': str,
            'spec': str,
            'status': ServiceStatus,
            'status_message': str,
            'template_name': str
        }

        self.attribute_map = {
            'arn': 'arn',
            'branch_name': 'branchName',
            'created_at': 'createdAt',
            'description': 'description',
            'last_modified_at': 'lastModifiedAt',
            'name': 'name',
            'pipeline': 'pipeline',
            'repository_connection_arn': 'repositoryConnectionArn',
            'repository_id': 'repositoryId',
            'spec': 'spec',
            'status': 'status',
            'status_message': 'statusMessage',
            'template_name': 'templateName'
        }

        self._arn = arn
        self._branch_name = branch_name
        self._created_at = created_at
        self._description = description
        self._last_modified_at = last_modified_at
        self._name = name
        self._pipeline = pipeline
        self._repository_connection_arn = repository_connection_arn
        self._repository_id = repository_id
        self._spec = spec
        self._status = status
        self._status_message = status_message
        self._template_name = template_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Service':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Service of this Service.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arn(self):
        """Gets the arn of this Service.


        :return: The arn of this Service.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this Service.


        :param arn: The arn of this Service.
        :type arn: str
        """
        if arn is None:
            raise ValueError("Invalid value for `arn`, must not be `None`")

        self._arn = arn

    @property
    def branch_name(self):
        """Gets the branch_name of this Service.


        :return: The branch_name of this Service.
        :rtype: str
        """
        return self._branch_name

    @branch_name.setter
    def branch_name(self, branch_name):
        """Sets the branch_name of this Service.


        :param branch_name: The branch_name of this Service.
        :type branch_name: str
        """

        self._branch_name = branch_name

    @property
    def created_at(self):
        """Gets the created_at of this Service.


        :return: The created_at of this Service.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Service.


        :param created_at: The created_at of this Service.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this Service.


        :return: The description of this Service.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Service.


        :param description: The description of this Service.
        :type description: str
        """

        self._description = description

    @property
    def last_modified_at(self):
        """Gets the last_modified_at of this Service.


        :return: The last_modified_at of this Service.
        :rtype: datetime
        """
        return self._last_modified_at

    @last_modified_at.setter
    def last_modified_at(self, last_modified_at):
        """Sets the last_modified_at of this Service.


        :param last_modified_at: The last_modified_at of this Service.
        :type last_modified_at: datetime
        """
        if last_modified_at is None:
            raise ValueError("Invalid value for `last_modified_at`, must not be `None`")

        self._last_modified_at = last_modified_at

    @property
    def name(self):
        """Gets the name of this Service.


        :return: The name of this Service.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Service.


        :param name: The name of this Service.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def pipeline(self):
        """Gets the pipeline of this Service.


        :return: The pipeline of this Service.
        :rtype: ServicePipeline
        """
        return self._pipeline

    @pipeline.setter
    def pipeline(self, pipeline):
        """Sets the pipeline of this Service.


        :param pipeline: The pipeline of this Service.
        :type pipeline: ServicePipeline
        """

        self._pipeline = pipeline

    @property
    def repository_connection_arn(self):
        """Gets the repository_connection_arn of this Service.


        :return: The repository_connection_arn of this Service.
        :rtype: str
        """
        return self._repository_connection_arn

    @repository_connection_arn.setter
    def repository_connection_arn(self, repository_connection_arn):
        """Sets the repository_connection_arn of this Service.


        :param repository_connection_arn: The repository_connection_arn of this Service.
        :type repository_connection_arn: str
        """

        self._repository_connection_arn = repository_connection_arn

    @property
    def repository_id(self):
        """Gets the repository_id of this Service.


        :return: The repository_id of this Service.
        :rtype: str
        """
        return self._repository_id

    @repository_id.setter
    def repository_id(self, repository_id):
        """Sets the repository_id of this Service.


        :param repository_id: The repository_id of this Service.
        :type repository_id: str
        """

        self._repository_id = repository_id

    @property
    def spec(self):
        """Gets the spec of this Service.


        :return: The spec of this Service.
        :rtype: str
        """
        return self._spec

    @spec.setter
    def spec(self, spec):
        """Sets the spec of this Service.


        :param spec: The spec of this Service.
        :type spec: str
        """
        if spec is None:
            raise ValueError("Invalid value for `spec`, must not be `None`")

        self._spec = spec

    @property
    def status(self):
        """Gets the status of this Service.


        :return: The status of this Service.
        :rtype: ServiceStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Service.


        :param status: The status of this Service.
        :type status: ServiceStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def status_message(self):
        """Gets the status_message of this Service.


        :return: The status_message of this Service.
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this Service.


        :param status_message: The status_message of this Service.
        :type status_message: str
        """

        self._status_message = status_message

    @property
    def template_name(self):
        """Gets the template_name of this Service.


        :return: The template_name of this Service.
        :rtype: str
        """
        return self._template_name

    @template_name.setter
    def template_name(self, template_name):
        """Sets the template_name of this Service.


        :param template_name: The template_name of this Service.
        :type template_name: str
        """
        if template_name is None:
            raise ValueError("Invalid value for `template_name`, must not be `None`")

        self._template_name = template_name
