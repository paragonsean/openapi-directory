# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.reject_environment_account_connection_output_environment_account_connection import RejectEnvironmentAccountConnectionOutputEnvironmentAccountConnection
from openapi_server import util


class RejectEnvironmentAccountConnectionOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, environment_account_connection: RejectEnvironmentAccountConnectionOutputEnvironmentAccountConnection=None):
        """RejectEnvironmentAccountConnectionOutput - a model defined in OpenAPI

        :param environment_account_connection: The environment_account_connection of this RejectEnvironmentAccountConnectionOutput.
        """
        self.openapi_types = {
            'environment_account_connection': RejectEnvironmentAccountConnectionOutputEnvironmentAccountConnection
        }

        self.attribute_map = {
            'environment_account_connection': 'environmentAccountConnection'
        }

        self._environment_account_connection = environment_account_connection

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RejectEnvironmentAccountConnectionOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RejectEnvironmentAccountConnectionOutput of this RejectEnvironmentAccountConnectionOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def environment_account_connection(self):
        """Gets the environment_account_connection of this RejectEnvironmentAccountConnectionOutput.


        :return: The environment_account_connection of this RejectEnvironmentAccountConnectionOutput.
        :rtype: RejectEnvironmentAccountConnectionOutputEnvironmentAccountConnection
        """
        return self._environment_account_connection

    @environment_account_connection.setter
    def environment_account_connection(self, environment_account_connection):
        """Sets the environment_account_connection of this RejectEnvironmentAccountConnectionOutput.


        :param environment_account_connection: The environment_account_connection of this RejectEnvironmentAccountConnectionOutput.
        :type environment_account_connection: RejectEnvironmentAccountConnectionOutputEnvironmentAccountConnection
        """
        if environment_account_connection is None:
            raise ValueError("Invalid value for `environment_account_connection`, must not be `None`")

        self._environment_account_connection = environment_account_connection
