# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.repository_provider import RepositoryProvider
from openapi_server import util


class GetTemplateSyncStatusOutputDesiredState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, branch: str=None, directory: str=None, repository_name: str=None, repository_provider: RepositoryProvider=None, sha: str=None):
        """GetTemplateSyncStatusOutputDesiredState - a model defined in OpenAPI

        :param branch: The branch of this GetTemplateSyncStatusOutputDesiredState.
        :param directory: The directory of this GetTemplateSyncStatusOutputDesiredState.
        :param repository_name: The repository_name of this GetTemplateSyncStatusOutputDesiredState.
        :param repository_provider: The repository_provider of this GetTemplateSyncStatusOutputDesiredState.
        :param sha: The sha of this GetTemplateSyncStatusOutputDesiredState.
        """
        self.openapi_types = {
            'branch': str,
            'directory': str,
            'repository_name': str,
            'repository_provider': RepositoryProvider,
            'sha': str
        }

        self.attribute_map = {
            'branch': 'branch',
            'directory': 'directory',
            'repository_name': 'repositoryName',
            'repository_provider': 'repositoryProvider',
            'sha': 'sha'
        }

        self._branch = branch
        self._directory = directory
        self._repository_name = repository_name
        self._repository_provider = repository_provider
        self._sha = sha

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetTemplateSyncStatusOutputDesiredState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetTemplateSyncStatusOutput_desiredState of this GetTemplateSyncStatusOutputDesiredState.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def branch(self):
        """Gets the branch of this GetTemplateSyncStatusOutputDesiredState.


        :return: The branch of this GetTemplateSyncStatusOutputDesiredState.
        :rtype: str
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this GetTemplateSyncStatusOutputDesiredState.


        :param branch: The branch of this GetTemplateSyncStatusOutputDesiredState.
        :type branch: str
        """
        if branch is None:
            raise ValueError("Invalid value for `branch`, must not be `None`")

        self._branch = branch

    @property
    def directory(self):
        """Gets the directory of this GetTemplateSyncStatusOutputDesiredState.


        :return: The directory of this GetTemplateSyncStatusOutputDesiredState.
        :rtype: str
        """
        return self._directory

    @directory.setter
    def directory(self, directory):
        """Sets the directory of this GetTemplateSyncStatusOutputDesiredState.


        :param directory: The directory of this GetTemplateSyncStatusOutputDesiredState.
        :type directory: str
        """
        if directory is None:
            raise ValueError("Invalid value for `directory`, must not be `None`")

        self._directory = directory

    @property
    def repository_name(self):
        """Gets the repository_name of this GetTemplateSyncStatusOutputDesiredState.


        :return: The repository_name of this GetTemplateSyncStatusOutputDesiredState.
        :rtype: str
        """
        return self._repository_name

    @repository_name.setter
    def repository_name(self, repository_name):
        """Sets the repository_name of this GetTemplateSyncStatusOutputDesiredState.


        :param repository_name: The repository_name of this GetTemplateSyncStatusOutputDesiredState.
        :type repository_name: str
        """
        if repository_name is None:
            raise ValueError("Invalid value for `repository_name`, must not be `None`")

        self._repository_name = repository_name

    @property
    def repository_provider(self):
        """Gets the repository_provider of this GetTemplateSyncStatusOutputDesiredState.


        :return: The repository_provider of this GetTemplateSyncStatusOutputDesiredState.
        :rtype: RepositoryProvider
        """
        return self._repository_provider

    @repository_provider.setter
    def repository_provider(self, repository_provider):
        """Sets the repository_provider of this GetTemplateSyncStatusOutputDesiredState.


        :param repository_provider: The repository_provider of this GetTemplateSyncStatusOutputDesiredState.
        :type repository_provider: RepositoryProvider
        """
        if repository_provider is None:
            raise ValueError("Invalid value for `repository_provider`, must not be `None`")

        self._repository_provider = repository_provider

    @property
    def sha(self):
        """Gets the sha of this GetTemplateSyncStatusOutputDesiredState.


        :return: The sha of this GetTemplateSyncStatusOutputDesiredState.
        :rtype: str
        """
        return self._sha

    @sha.setter
    def sha(self, sha):
        """Sets the sha of this GetTemplateSyncStatusOutputDesiredState.


        :param sha: The sha of this GetTemplateSyncStatusOutputDesiredState.
        :type sha: str
        """
        if sha is None:
            raise ValueError("Invalid value for `sha`, must not be `None`")

        self._sha = sha
