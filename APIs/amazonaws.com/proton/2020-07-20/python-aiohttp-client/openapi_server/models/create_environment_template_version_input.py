# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_environment_template_version_input_source import CreateEnvironmentTemplateVersionInputSource
from openapi_server import util


class CreateEnvironmentTemplateVersionInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_token: str=None, description: str=None, major_version: str=None, source: CreateEnvironmentTemplateVersionInputSource=None, tags: List=None, template_name: str=None):
        """CreateEnvironmentTemplateVersionInput - a model defined in OpenAPI

        :param client_token: The client_token of this CreateEnvironmentTemplateVersionInput.
        :param description: The description of this CreateEnvironmentTemplateVersionInput.
        :param major_version: The major_version of this CreateEnvironmentTemplateVersionInput.
        :param source: The source of this CreateEnvironmentTemplateVersionInput.
        :param tags: The tags of this CreateEnvironmentTemplateVersionInput.
        :param template_name: The template_name of this CreateEnvironmentTemplateVersionInput.
        """
        self.openapi_types = {
            'client_token': str,
            'description': str,
            'major_version': str,
            'source': CreateEnvironmentTemplateVersionInputSource,
            'tags': List,
            'template_name': str
        }

        self.attribute_map = {
            'client_token': 'clientToken',
            'description': 'description',
            'major_version': 'majorVersion',
            'source': 'source',
            'tags': 'tags',
            'template_name': 'templateName'
        }

        self._client_token = client_token
        self._description = description
        self._major_version = major_version
        self._source = source
        self._tags = tags
        self._template_name = template_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateEnvironmentTemplateVersionInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateEnvironmentTemplateVersionInput of this CreateEnvironmentTemplateVersionInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_token(self):
        """Gets the client_token of this CreateEnvironmentTemplateVersionInput.


        :return: The client_token of this CreateEnvironmentTemplateVersionInput.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateEnvironmentTemplateVersionInput.


        :param client_token: The client_token of this CreateEnvironmentTemplateVersionInput.
        :type client_token: str
        """

        self._client_token = client_token

    @property
    def description(self):
        """Gets the description of this CreateEnvironmentTemplateVersionInput.


        :return: The description of this CreateEnvironmentTemplateVersionInput.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateEnvironmentTemplateVersionInput.


        :param description: The description of this CreateEnvironmentTemplateVersionInput.
        :type description: str
        """

        self._description = description

    @property
    def major_version(self):
        """Gets the major_version of this CreateEnvironmentTemplateVersionInput.


        :return: The major_version of this CreateEnvironmentTemplateVersionInput.
        :rtype: str
        """
        return self._major_version

    @major_version.setter
    def major_version(self, major_version):
        """Sets the major_version of this CreateEnvironmentTemplateVersionInput.


        :param major_version: The major_version of this CreateEnvironmentTemplateVersionInput.
        :type major_version: str
        """

        self._major_version = major_version

    @property
    def source(self):
        """Gets the source of this CreateEnvironmentTemplateVersionInput.


        :return: The source of this CreateEnvironmentTemplateVersionInput.
        :rtype: CreateEnvironmentTemplateVersionInputSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this CreateEnvironmentTemplateVersionInput.


        :param source: The source of this CreateEnvironmentTemplateVersionInput.
        :type source: CreateEnvironmentTemplateVersionInputSource
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")

        self._source = source

    @property
    def tags(self):
        """Gets the tags of this CreateEnvironmentTemplateVersionInput.


        :return: The tags of this CreateEnvironmentTemplateVersionInput.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateEnvironmentTemplateVersionInput.


        :param tags: The tags of this CreateEnvironmentTemplateVersionInput.
        :type tags: List
        """

        self._tags = tags

    @property
    def template_name(self):
        """Gets the template_name of this CreateEnvironmentTemplateVersionInput.


        :return: The template_name of this CreateEnvironmentTemplateVersionInput.
        :rtype: str
        """
        return self._template_name

    @template_name.setter
    def template_name(self, template_name):
        """Sets the template_name of this CreateEnvironmentTemplateVersionInput.


        :param template_name: The template_name of this CreateEnvironmentTemplateVersionInput.
        :type template_name: str
        """
        if template_name is None:
            raise ValueError("Invalid value for `template_name`, must not be `None`")

        self._template_name = template_name
