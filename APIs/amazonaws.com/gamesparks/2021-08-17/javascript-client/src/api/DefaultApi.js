/**
 * GameSparks
 * <p/>
 *
 * The version of the OpenAPI document: 2021-08-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateGameRequest from '../model/CreateGameRequest';
import CreateGameResult from '../model/CreateGameResult';
import CreateSnapshotRequest from '../model/CreateSnapshotRequest';
import CreateSnapshotResult from '../model/CreateSnapshotResult';
import CreateStageRequest from '../model/CreateStageRequest';
import CreateStageResult from '../model/CreateStageResult';
import DisconnectPlayerResult from '../model/DisconnectPlayerResult';
import ExportSnapshotResult from '../model/ExportSnapshotResult';
import GetExtensionResult from '../model/GetExtensionResult';
import GetExtensionVersionResult from '../model/GetExtensionVersionResult';
import GetGameConfigurationResult from '../model/GetGameConfigurationResult';
import GetGameResult from '../model/GetGameResult';
import GetGeneratedCodeJobResult from '../model/GetGeneratedCodeJobResult';
import GetPlayerConnectionStatusResult from '../model/GetPlayerConnectionStatusResult';
import GetSnapshotResult from '../model/GetSnapshotResult';
import GetStageDeploymentResult from '../model/GetStageDeploymentResult';
import GetStageResult from '../model/GetStageResult';
import ImportGameConfigurationRequest from '../model/ImportGameConfigurationRequest';
import ImportGameConfigurationResult from '../model/ImportGameConfigurationResult';
import ListExtensionVersionsResult from '../model/ListExtensionVersionsResult';
import ListExtensionsResult from '../model/ListExtensionsResult';
import ListGamesResult from '../model/ListGamesResult';
import ListGeneratedCodeJobsResult from '../model/ListGeneratedCodeJobsResult';
import ListSnapshotsResult from '../model/ListSnapshotsResult';
import ListStageDeploymentsResult from '../model/ListStageDeploymentsResult';
import ListStagesResult from '../model/ListStagesResult';
import ListTagsForResourceResult from '../model/ListTagsForResourceResult';
import StartGeneratedCodeJobRequest from '../model/StartGeneratedCodeJobRequest';
import StartGeneratedCodeJobResult from '../model/StartGeneratedCodeJobResult';
import StartStageDeploymentRequest from '../model/StartStageDeploymentRequest';
import StartStageDeploymentResult from '../model/StartStageDeploymentResult';
import TagResourceRequest from '../model/TagResourceRequest';
import UpdateGameConfigurationRequest from '../model/UpdateGameConfigurationRequest';
import UpdateGameConfigurationResult from '../model/UpdateGameConfigurationResult';
import UpdateGameRequest from '../model/UpdateGameRequest';
import UpdateGameResult from '../model/UpdateGameResult';
import UpdateSnapshotResult from '../model/UpdateSnapshotResult';
import UpdateStageRequest from '../model/UpdateStageRequest';
import UpdateStageResult from '../model/UpdateStageResult';

/**
* Default service.
* @module api/DefaultApi
* @version 2021-08-17
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createGame operation.
     * @callback module:api/DefaultApi~createGameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateGameResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Creates a new game with an empty configuration. After creating your game, you can update the configuration using <code>UpdateGameConfiguration</code> or <code>ImportGameConfiguration</code>. 
     * @param {module:model/CreateGameRequest} createGameRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createGameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateGameResult}
     */
    createGame(createGameRequest, opts, callback) {
      opts = opts || {};
      let postBody = createGameRequest;
      // verify the required parameter 'createGameRequest' is set
      if (createGameRequest === undefined || createGameRequest === null) {
        throw new Error("Missing the required parameter 'createGameRequest' when calling createGame");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateGameResult;
      return this.apiClient.callApi(
        '/game', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSnapshot operation.
     * @callback module:api/DefaultApi~createSnapshotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateSnapshotResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a snapshot of the game configuration.
     * @param {String} gameName The name of the game.
     * @param {module:model/CreateSnapshotRequest} createSnapshotRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createSnapshotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateSnapshotResult}
     */
    createSnapshot(gameName, createSnapshotRequest, opts, callback) {
      opts = opts || {};
      let postBody = createSnapshotRequest;
      // verify the required parameter 'gameName' is set
      if (gameName === undefined || gameName === null) {
        throw new Error("Missing the required parameter 'gameName' when calling createSnapshot");
      }
      // verify the required parameter 'createSnapshotRequest' is set
      if (createSnapshotRequest === undefined || createSnapshotRequest === null) {
        throw new Error("Missing the required parameter 'createSnapshotRequest' when calling createSnapshot");
      }

      let pathParams = {
        'GameName': gameName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateSnapshotResult;
      return this.apiClient.callApi(
        '/game/{GameName}/snapshot', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createStage operation.
     * @callback module:api/DefaultApi~createStageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateStageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new stage for stage-by-stage game development and deployment.
     * @param {String} gameName The name of the game.
     * @param {module:model/CreateStageRequest} createStageRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createStageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateStageResult}
     */
    createStage(gameName, createStageRequest, opts, callback) {
      opts = opts || {};
      let postBody = createStageRequest;
      // verify the required parameter 'gameName' is set
      if (gameName === undefined || gameName === null) {
        throw new Error("Missing the required parameter 'gameName' when calling createStage");
      }
      // verify the required parameter 'createStageRequest' is set
      if (createStageRequest === undefined || createStageRequest === null) {
        throw new Error("Missing the required parameter 'createStageRequest' when calling createStage");
      }

      let pathParams = {
        'GameName': gameName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateStageResult;
      return this.apiClient.callApi(
        '/game/{GameName}/stage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteGame operation.
     * @callback module:api/DefaultApi~deleteGameCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a game.
     * @param {String} gameName The name of the game to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteGameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteGame(gameName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'gameName' is set
      if (gameName === undefined || gameName === null) {
        throw new Error("Missing the required parameter 'gameName' when calling deleteGame");
      }

      let pathParams = {
        'GameName': gameName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/game/{GameName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteStage operation.
     * @callback module:api/DefaultApi~deleteStageCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a stage from a game, along with the associated game runtime.
     * @param {String} gameName The name of the game.
     * @param {String} stageName The name of the stage to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteStageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteStage(gameName, stageName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'gameName' is set
      if (gameName === undefined || gameName === null) {
        throw new Error("Missing the required parameter 'gameName' when calling deleteStage");
      }
      // verify the required parameter 'stageName' is set
      if (stageName === undefined || stageName === null) {
        throw new Error("Missing the required parameter 'stageName' when calling deleteStage");
      }

      let pathParams = {
        'GameName': gameName,
        'StageName': stageName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/game/{GameName}/stage/{StageName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disconnectPlayer operation.
     * @callback module:api/DefaultApi~disconnectPlayerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DisconnectPlayerResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Disconnects a player from the game runtime.</p> <p> If a player has multiple connections, this operation attempts to close all of them. </p>
     * @param {String} gameName The name of the game.
     * @param {String} playerId The unique identifier representing a player.
     * @param {String} stageName The name of the stage.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~disconnectPlayerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DisconnectPlayerResult}
     */
    disconnectPlayer(gameName, playerId, stageName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'gameName' is set
      if (gameName === undefined || gameName === null) {
        throw new Error("Missing the required parameter 'gameName' when calling disconnectPlayer");
      }
      // verify the required parameter 'playerId' is set
      if (playerId === undefined || playerId === null) {
        throw new Error("Missing the required parameter 'playerId' when calling disconnectPlayer");
      }
      // verify the required parameter 'stageName' is set
      if (stageName === undefined || stageName === null) {
        throw new Error("Missing the required parameter 'stageName' when calling disconnectPlayer");
      }

      let pathParams = {
        'GameName': gameName,
        'PlayerId': playerId,
        'StageName': stageName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DisconnectPlayerResult;
      return this.apiClient.callApi(
        '/runtime/game/{GameName}/stage/{StageName}/player/{PlayerId}/disconnect', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportSnapshot operation.
     * @callback module:api/DefaultApi~exportSnapshotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExportSnapshotResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Exports a game configuration snapshot.
     * @param {String} gameName The name of the game.
     * @param {String} snapshotId The identifier of the snapshot to export.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~exportSnapshotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExportSnapshotResult}
     */
    exportSnapshot(gameName, snapshotId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'gameName' is set
      if (gameName === undefined || gameName === null) {
        throw new Error("Missing the required parameter 'gameName' when calling exportSnapshot");
      }
      // verify the required parameter 'snapshotId' is set
      if (snapshotId === undefined || snapshotId === null) {
        throw new Error("Missing the required parameter 'snapshotId' when calling exportSnapshot");
      }

      let pathParams = {
        'GameName': gameName,
        'SnapshotId': snapshotId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExportSnapshotResult;
      return this.apiClient.callApi(
        '/game/{GameName}/snapshot/{SnapshotId}/export', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getExtension operation.
     * @callback module:api/DefaultApi~getExtensionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetExtensionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets details about a specified extension.
     * @param {String} name The name of the extension.
     * @param {String} namespace The namespace (qualifier) of the extension.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getExtensionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetExtensionResult}
     */
    getExtension(name, namespace, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getExtension");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling getExtension");
      }

      let pathParams = {
        'Name': name,
        'Namespace': namespace
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetExtensionResult;
      return this.apiClient.callApi(
        '/extension/{Namespace}/{Name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getExtensionVersion operation.
     * @callback module:api/DefaultApi~getExtensionVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetExtensionVersionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets details about a specified extension version.
     * @param {String} extensionVersion The version of the extension.
     * @param {String} name The name of the extension.
     * @param {String} namespace The namespace (qualifier) of the extension.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getExtensionVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetExtensionVersionResult}
     */
    getExtensionVersion(extensionVersion, name, namespace, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'extensionVersion' is set
      if (extensionVersion === undefined || extensionVersion === null) {
        throw new Error("Missing the required parameter 'extensionVersion' when calling getExtensionVersion");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getExtensionVersion");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling getExtensionVersion");
      }

      let pathParams = {
        'ExtensionVersion': extensionVersion,
        'Name': name,
        'Namespace': namespace
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetExtensionVersionResult;
      return this.apiClient.callApi(
        '/extension/{Namespace}/{Name}/version/{ExtensionVersion}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGame operation.
     * @callback module:api/DefaultApi~getGameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetGameResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets details about a game.
     * @param {String} gameName The name of the game.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getGameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetGameResult}
     */
    getGame(gameName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'gameName' is set
      if (gameName === undefined || gameName === null) {
        throw new Error("Missing the required parameter 'gameName' when calling getGame");
      }

      let pathParams = {
        'GameName': gameName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetGameResult;
      return this.apiClient.callApi(
        '/game/{GameName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGameConfiguration operation.
     * @callback module:api/DefaultApi~getGameConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetGameConfigurationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the configuration of the game.
     * @param {String} gameName The name of the game.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Array.<String>} [sections] The list of sections to return.
     * @param {module:api/DefaultApi~getGameConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetGameConfigurationResult}
     */
    getGameConfiguration(gameName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'gameName' is set
      if (gameName === undefined || gameName === null) {
        throw new Error("Missing the required parameter 'gameName' when calling getGameConfiguration");
      }

      let pathParams = {
        'GameName': gameName
      };
      let queryParams = {
        'Sections': this.apiClient.buildCollectionParam(opts['sections'], 'multi')
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetGameConfigurationResult;
      return this.apiClient.callApi(
        '/game/{GameName}/configuration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGeneratedCodeJob operation.
     * @callback module:api/DefaultApi~getGeneratedCodeJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetGeneratedCodeJobResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets details about a job that is generating code for a snapshot.
     * @param {String} gameName The name of the game.
     * @param {String} jobId The identifier of the code generation job.
     * @param {String} snapshotId The identifier of the snapshot for the code generation job.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getGeneratedCodeJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetGeneratedCodeJobResult}
     */
    getGeneratedCodeJob(gameName, jobId, snapshotId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'gameName' is set
      if (gameName === undefined || gameName === null) {
        throw new Error("Missing the required parameter 'gameName' when calling getGeneratedCodeJob");
      }
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling getGeneratedCodeJob");
      }
      // verify the required parameter 'snapshotId' is set
      if (snapshotId === undefined || snapshotId === null) {
        throw new Error("Missing the required parameter 'snapshotId' when calling getGeneratedCodeJob");
      }

      let pathParams = {
        'GameName': gameName,
        'JobId': jobId,
        'SnapshotId': snapshotId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetGeneratedCodeJobResult;
      return this.apiClient.callApi(
        '/game/{GameName}/snapshot/{SnapshotId}/generated-sdk-code-job/{JobId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPlayerConnectionStatus operation.
     * @callback module:api/DefaultApi~getPlayerConnectionStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPlayerConnectionStatusResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets the status of a player's connection to the game runtime.</p> <p> It's possible for a single player to have multiple connections to the game runtime. If a player is not connected, this operation returns an empty list. </p>
     * @param {String} gameName The name of the game.
     * @param {String} playerId The unique identifier representing a player.
     * @param {String} stageName The name of the stage.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getPlayerConnectionStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPlayerConnectionStatusResult}
     */
    getPlayerConnectionStatus(gameName, playerId, stageName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'gameName' is set
      if (gameName === undefined || gameName === null) {
        throw new Error("Missing the required parameter 'gameName' when calling getPlayerConnectionStatus");
      }
      // verify the required parameter 'playerId' is set
      if (playerId === undefined || playerId === null) {
        throw new Error("Missing the required parameter 'playerId' when calling getPlayerConnectionStatus");
      }
      // verify the required parameter 'stageName' is set
      if (stageName === undefined || stageName === null) {
        throw new Error("Missing the required parameter 'stageName' when calling getPlayerConnectionStatus");
      }

      let pathParams = {
        'GameName': gameName,
        'PlayerId': playerId,
        'StageName': stageName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetPlayerConnectionStatusResult;
      return this.apiClient.callApi(
        '/runtime/game/{GameName}/stage/{StageName}/player/{PlayerId}/connection', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSnapshot operation.
     * @callback module:api/DefaultApi~getSnapshotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSnapshotResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a copy of the game configuration in a snapshot.
     * @param {String} gameName The name of the game.
     * @param {String} snapshotId The identifier of the snapshot.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Array.<String>} [sections] The list of game configuration sections to be described.
     * @param {module:api/DefaultApi~getSnapshotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSnapshotResult}
     */
    getSnapshot(gameName, snapshotId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'gameName' is set
      if (gameName === undefined || gameName === null) {
        throw new Error("Missing the required parameter 'gameName' when calling getSnapshot");
      }
      // verify the required parameter 'snapshotId' is set
      if (snapshotId === undefined || snapshotId === null) {
        throw new Error("Missing the required parameter 'snapshotId' when calling getSnapshot");
      }

      let pathParams = {
        'GameName': gameName,
        'SnapshotId': snapshotId
      };
      let queryParams = {
        'Sections': this.apiClient.buildCollectionParam(opts['sections'], 'multi')
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSnapshotResult;
      return this.apiClient.callApi(
        '/game/{GameName}/snapshot/{SnapshotId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStage operation.
     * @callback module:api/DefaultApi~getStageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetStageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a stage.
     * @param {String} gameName The name of the game.
     * @param {String} stageName The name of the stage.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getStageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetStageResult}
     */
    getStage(gameName, stageName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'gameName' is set
      if (gameName === undefined || gameName === null) {
        throw new Error("Missing the required parameter 'gameName' when calling getStage");
      }
      // verify the required parameter 'stageName' is set
      if (stageName === undefined || stageName === null) {
        throw new Error("Missing the required parameter 'stageName' when calling getStage");
      }

      let pathParams = {
        'GameName': gameName,
        'StageName': stageName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetStageResult;
      return this.apiClient.callApi(
        '/game/{GameName}/stage/{StageName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStageDeployment operation.
     * @callback module:api/DefaultApi~getStageDeploymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetStageDeploymentResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a stage deployment.
     * @param {String} gameName The name of the game.
     * @param {String} stageName The name of the stage.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [deploymentId]  The identifier of the stage deployment. <code>StartStageDeployment</code> returns the identifier that you use here. 
     * @param {module:api/DefaultApi~getStageDeploymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetStageDeploymentResult}
     */
    getStageDeployment(gameName, stageName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'gameName' is set
      if (gameName === undefined || gameName === null) {
        throw new Error("Missing the required parameter 'gameName' when calling getStageDeployment");
      }
      // verify the required parameter 'stageName' is set
      if (stageName === undefined || stageName === null) {
        throw new Error("Missing the required parameter 'stageName' when calling getStageDeployment");
      }

      let pathParams = {
        'GameName': gameName,
        'StageName': stageName
      };
      let queryParams = {
        'DeploymentId': opts['deploymentId']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetStageDeploymentResult;
      return this.apiClient.callApi(
        '/game/{GameName}/stage/{StageName}/deployment', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importGameConfiguration operation.
     * @callback module:api/DefaultApi~importGameConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImportGameConfigurationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Imports a game configuration.</p> <p> This operation replaces the current configuration of the game with the provided input. This is not a reversible operation. If you want to preserve the previous configuration, use <code>CreateSnapshot</code> to make a new snapshot before importing. </p>
     * @param {String} gameName The name of the game.
     * @param {module:model/ImportGameConfigurationRequest} importGameConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~importGameConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImportGameConfigurationResult}
     */
    importGameConfiguration(gameName, importGameConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = importGameConfigurationRequest;
      // verify the required parameter 'gameName' is set
      if (gameName === undefined || gameName === null) {
        throw new Error("Missing the required parameter 'gameName' when calling importGameConfiguration");
      }
      // verify the required parameter 'importGameConfigurationRequest' is set
      if (importGameConfigurationRequest === undefined || importGameConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'importGameConfigurationRequest' when calling importGameConfiguration");
      }

      let pathParams = {
        'GameName': gameName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ImportGameConfigurationResult;
      return this.apiClient.callApi(
        '/game/{GameName}/configuration', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listExtensionVersions operation.
     * @callback module:api/DefaultApi~listExtensionVersionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListExtensionVersionsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets a paginated list of available versions for the extension.</p> <p> Each time an API change is made to an extension, the version is incremented. The list retrieved by this operation shows the versions that are currently available. </p>
     * @param {String} name The name of the extension.
     * @param {String} namespace The namespace (qualifier) of the extension.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] <p>The maximum number of results to return.</p> <p> Use this parameter with NextToken to get results as a set of sequential pages. </p>
     * @param {String} [nextToken] <p>The token that indicates the start of the next sequential page of results.</p> <p> Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value. </p>
     * @param {module:api/DefaultApi~listExtensionVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListExtensionVersionsResult}
     */
    listExtensionVersions(name, namespace, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling listExtensionVersions");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling listExtensionVersions");
      }

      let pathParams = {
        'Name': name,
        'Namespace': namespace
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListExtensionVersionsResult;
      return this.apiClient.callApi(
        '/extension/{Namespace}/{Name}/version', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listExtensions operation.
     * @callback module:api/DefaultApi~listExtensionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListExtensionsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets a paginated list of available extensions.</p> <p> Extensions provide features that games can use from scripts. </p>
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] <p>The maximum number of results to return.</p> <p> Use this parameter with NextToken to get results as a set of sequential pages. </p>
     * @param {String} [nextToken] <p>The token that indicates the start of the next sequential page of results.</p> <p> Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value. </p>
     * @param {module:api/DefaultApi~listExtensionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListExtensionsResult}
     */
    listExtensions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListExtensionsResult;
      return this.apiClient.callApi(
        '/extension', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listGames operation.
     * @callback module:api/DefaultApi~listGamesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListGamesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a paginated list of games.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] <p>The maximum number of results to return.</p> <p> Use this parameter with NextToken to get results as a set of sequential pages. </p>
     * @param {String} [nextToken] <p>The token that indicates the start of the next sequential page of results.</p> <p> Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value. </p>
     * @param {module:api/DefaultApi~listGamesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListGamesResult}
     */
    listGames(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListGamesResult;
      return this.apiClient.callApi(
        '/game', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listGeneratedCodeJobs operation.
     * @callback module:api/DefaultApi~listGeneratedCodeJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListGeneratedCodeJobsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a paginated list of code generation jobs for a snapshot.
     * @param {String} gameName The name of the game.
     * @param {String} snapshotId The identifier of the snapshot.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] <p>The maximum number of results to return.</p> <p> Use this parameter with NextToken to get results as a set of sequential pages. </p>
     * @param {String} [nextToken] <p>The token that indicates the start of the next sequential page of results.</p> <p> Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value. </p>
     * @param {module:api/DefaultApi~listGeneratedCodeJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListGeneratedCodeJobsResult}
     */
    listGeneratedCodeJobs(gameName, snapshotId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'gameName' is set
      if (gameName === undefined || gameName === null) {
        throw new Error("Missing the required parameter 'gameName' when calling listGeneratedCodeJobs");
      }
      // verify the required parameter 'snapshotId' is set
      if (snapshotId === undefined || snapshotId === null) {
        throw new Error("Missing the required parameter 'snapshotId' when calling listGeneratedCodeJobs");
      }

      let pathParams = {
        'GameName': gameName,
        'SnapshotId': snapshotId
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListGeneratedCodeJobsResult;
      return this.apiClient.callApi(
        '/game/{GameName}/snapshot/{SnapshotId}/generated-sdk-code-jobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSnapshots operation.
     * @callback module:api/DefaultApi~listSnapshotsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSnapshotsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a paginated list of snapshot summaries from the game.
     * @param {String} gameName The name of the game.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] <p>The maximum number of results to return.</p> <p> Use this parameter with NextToken to get results as a set of sequential pages. </p>
     * @param {String} [nextToken] <p>The token that indicates the start of the next sequential page of results.</p> <p> Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value. </p>
     * @param {module:api/DefaultApi~listSnapshotsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSnapshotsResult}
     */
    listSnapshots(gameName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'gameName' is set
      if (gameName === undefined || gameName === null) {
        throw new Error("Missing the required parameter 'gameName' when calling listSnapshots");
      }

      let pathParams = {
        'GameName': gameName
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListSnapshotsResult;
      return this.apiClient.callApi(
        '/game/{GameName}/snapshot', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listStageDeployments operation.
     * @callback module:api/DefaultApi~listStageDeploymentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListStageDeploymentsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a paginated list of stage deployment summaries from the game.
     * @param {String} gameName The name of the game.
     * @param {String} stageName The name of the stage.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] <p>The maximum number of results to return.</p> <p> Use this parameter with NextToken to get results as a set of sequential pages. </p>
     * @param {String} [nextToken] <p>The token that indicates the start of the next sequential page of results.</p> <p> Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value. </p>
     * @param {module:api/DefaultApi~listStageDeploymentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListStageDeploymentsResult}
     */
    listStageDeployments(gameName, stageName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'gameName' is set
      if (gameName === undefined || gameName === null) {
        throw new Error("Missing the required parameter 'gameName' when calling listStageDeployments");
      }
      // verify the required parameter 'stageName' is set
      if (stageName === undefined || stageName === null) {
        throw new Error("Missing the required parameter 'stageName' when calling listStageDeployments");
      }

      let pathParams = {
        'GameName': gameName,
        'StageName': stageName
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListStageDeploymentsResult;
      return this.apiClient.callApi(
        '/game/{GameName}/stage/{StageName}/deployments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listStages operation.
     * @callback module:api/DefaultApi~listStagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListStagesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a paginated list of stage summaries from the game.
     * @param {String} gameName The name of the game.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] <p>The maximum number of results to return.</p> <p> Use this parameter with NextToken to get results as a set of sequential pages. </p>
     * @param {String} [nextToken] <p>The token that indicates the start of the next sequential page of results.</p> <p> Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value. </p>
     * @param {module:api/DefaultApi~listStagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListStagesResult}
     */
    listStages(gameName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'gameName' is set
      if (gameName === undefined || gameName === null) {
        throw new Error("Missing the required parameter 'gameName' when calling listStages");
      }

      let pathParams = {
        'GameName': gameName
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListStagesResult;
      return this.apiClient.callApi(
        '/game/{GameName}/stage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the tags associated with a GameSparks resource.
     * @param {String} resourceArn The Amazon Resource Name (ARN) of the GameSparks resource.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceResult}
     */
    listTagsForResource(resourceArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling listTagsForResource");
      }

      let pathParams = {
        'ResourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceResult;
      return this.apiClient.callApi(
        '/tags/{ResourceArn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startGeneratedCodeJob operation.
     * @callback module:api/DefaultApi~startGeneratedCodeJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartGeneratedCodeJobResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Starts an asynchronous process that generates client code for system-defined and custom messages. The resulting code is collected as a .zip file and uploaded to a pre-signed Amazon S3 URL. 
     * @param {String} gameName The name of the game.
     * @param {String} snapshotId The identifier of the snapshot for which to generate code.
     * @param {module:model/StartGeneratedCodeJobRequest} startGeneratedCodeJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startGeneratedCodeJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartGeneratedCodeJobResult}
     */
    startGeneratedCodeJob(gameName, snapshotId, startGeneratedCodeJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = startGeneratedCodeJobRequest;
      // verify the required parameter 'gameName' is set
      if (gameName === undefined || gameName === null) {
        throw new Error("Missing the required parameter 'gameName' when calling startGeneratedCodeJob");
      }
      // verify the required parameter 'snapshotId' is set
      if (snapshotId === undefined || snapshotId === null) {
        throw new Error("Missing the required parameter 'snapshotId' when calling startGeneratedCodeJob");
      }
      // verify the required parameter 'startGeneratedCodeJobRequest' is set
      if (startGeneratedCodeJobRequest === undefined || startGeneratedCodeJobRequest === null) {
        throw new Error("Missing the required parameter 'startGeneratedCodeJobRequest' when calling startGeneratedCodeJob");
      }

      let pathParams = {
        'GameName': gameName,
        'SnapshotId': snapshotId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartGeneratedCodeJobResult;
      return this.apiClient.callApi(
        '/game/{GameName}/snapshot/{SnapshotId}/generated-sdk-code-job', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startStageDeployment operation.
     * @callback module:api/DefaultApi~startStageDeploymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartStageDeploymentResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deploys a snapshot to the stage and creates a new game runtime.</p> <p> After you call this operation, you can check the deployment status by using <code>GetStageDeployment</code>. </p> <p> If there are any players connected to the previous game runtime, then both runtimes persist. Existing connections to the previous runtime are maintained. When players disconnect and reconnect, they connect to the new runtime. After there are no connections to the previous game runtime, it is deleted. </p>
     * @param {String} gameName The name of the game.
     * @param {String} stageName The name of the stage to deploy the snapshot onto.
     * @param {module:model/StartStageDeploymentRequest} startStageDeploymentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startStageDeploymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartStageDeploymentResult}
     */
    startStageDeployment(gameName, stageName, startStageDeploymentRequest, opts, callback) {
      opts = opts || {};
      let postBody = startStageDeploymentRequest;
      // verify the required parameter 'gameName' is set
      if (gameName === undefined || gameName === null) {
        throw new Error("Missing the required parameter 'gameName' when calling startStageDeployment");
      }
      // verify the required parameter 'stageName' is set
      if (stageName === undefined || stageName === null) {
        throw new Error("Missing the required parameter 'stageName' when calling startStageDeployment");
      }
      // verify the required parameter 'startStageDeploymentRequest' is set
      if (startStageDeploymentRequest === undefined || startStageDeploymentRequest === null) {
        throw new Error("Missing the required parameter 'startStageDeploymentRequest' when calling startStageDeployment");
      }

      let pathParams = {
        'GameName': gameName,
        'StageName': stageName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartStageDeploymentResult;
      return this.apiClient.callApi(
        '/game/{GameName}/stage/{StageName}/deployment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds tags to a GameSparks resource.
     * @param {String} resourceArn The Amazon Resource Name (ARN) of the resource to add the tags to.
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    tagResource(resourceArn, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
        'ResourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/tags/{ResourceArn}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes tags from a GameSparks resource.
     * @param {String} resourceArn The Amazon Resource Name (ARN) of the resource to remove the tags from.
     * @param {Array.<String>} tagKeys The keys of the tags to remove.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    untagResource(resourceArn, tagKeys, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling untagResource");
      }
      // verify the required parameter 'tagKeys' is set
      if (tagKeys === undefined || tagKeys === null) {
        throw new Error("Missing the required parameter 'tagKeys' when calling untagResource");
      }

      let pathParams = {
        'ResourceArn': resourceArn
      };
      let queryParams = {
        'tagKeys': this.apiClient.buildCollectionParam(tagKeys, 'multi')
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/tags/{ResourceArn}#tagKeys', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateGame operation.
     * @callback module:api/DefaultApi~updateGameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateGameResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates details of the game.
     * @param {String} gameName The name of the game.
     * @param {module:model/UpdateGameRequest} updateGameRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateGameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateGameResult}
     */
    updateGame(gameName, updateGameRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateGameRequest;
      // verify the required parameter 'gameName' is set
      if (gameName === undefined || gameName === null) {
        throw new Error("Missing the required parameter 'gameName' when calling updateGame");
      }
      // verify the required parameter 'updateGameRequest' is set
      if (updateGameRequest === undefined || updateGameRequest === null) {
        throw new Error("Missing the required parameter 'updateGameRequest' when calling updateGame");
      }

      let pathParams = {
        'GameName': gameName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateGameResult;
      return this.apiClient.callApi(
        '/game/{GameName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateGameConfiguration operation.
     * @callback module:api/DefaultApi~updateGameConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateGameConfigurationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates one or more sections of the game configuration.
     * @param {String} gameName The name of the game.
     * @param {module:model/UpdateGameConfigurationRequest} updateGameConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateGameConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateGameConfigurationResult}
     */
    updateGameConfiguration(gameName, updateGameConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateGameConfigurationRequest;
      // verify the required parameter 'gameName' is set
      if (gameName === undefined || gameName === null) {
        throw new Error("Missing the required parameter 'gameName' when calling updateGameConfiguration");
      }
      // verify the required parameter 'updateGameConfigurationRequest' is set
      if (updateGameConfigurationRequest === undefined || updateGameConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'updateGameConfigurationRequest' when calling updateGameConfiguration");
      }

      let pathParams = {
        'GameName': gameName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateGameConfigurationResult;
      return this.apiClient.callApi(
        '/game/{GameName}/configuration', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSnapshot operation.
     * @callback module:api/DefaultApi~updateSnapshotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateSnapshotResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the metadata of a GameSparks snapshot.
     * @param {String} gameName The name of the game.
     * @param {String} snapshotId The identifier of the snapshot.
     * @param {module:model/CreateSnapshotRequest} createSnapshotRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateSnapshotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateSnapshotResult}
     */
    updateSnapshot(gameName, snapshotId, createSnapshotRequest, opts, callback) {
      opts = opts || {};
      let postBody = createSnapshotRequest;
      // verify the required parameter 'gameName' is set
      if (gameName === undefined || gameName === null) {
        throw new Error("Missing the required parameter 'gameName' when calling updateSnapshot");
      }
      // verify the required parameter 'snapshotId' is set
      if (snapshotId === undefined || snapshotId === null) {
        throw new Error("Missing the required parameter 'snapshotId' when calling updateSnapshot");
      }
      // verify the required parameter 'createSnapshotRequest' is set
      if (createSnapshotRequest === undefined || createSnapshotRequest === null) {
        throw new Error("Missing the required parameter 'createSnapshotRequest' when calling updateSnapshot");
      }

      let pathParams = {
        'GameName': gameName,
        'SnapshotId': snapshotId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateSnapshotResult;
      return this.apiClient.callApi(
        '/game/{GameName}/snapshot/{SnapshotId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateStage operation.
     * @callback module:api/DefaultApi~updateStageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateStageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the metadata of a stage.
     * @param {String} gameName The name of the game.
     * @param {String} stageName The name of the stage.
     * @param {module:model/UpdateStageRequest} updateStageRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateStageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateStageResult}
     */
    updateStage(gameName, stageName, updateStageRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateStageRequest;
      // verify the required parameter 'gameName' is set
      if (gameName === undefined || gameName === null) {
        throw new Error("Missing the required parameter 'gameName' when calling updateStage");
      }
      // verify the required parameter 'stageName' is set
      if (stageName === undefined || stageName === null) {
        throw new Error("Missing the required parameter 'stageName' when calling updateStage");
      }
      // verify the required parameter 'updateStageRequest' is set
      if (updateStageRequest === undefined || updateStageRequest === null) {
        throw new Error("Missing the required parameter 'updateStageRequest' when calling updateStage");
      }

      let pathParams = {
        'GameName': gameName,
        'StageName': stageName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateStageResult;
      return this.apiClient.callApi(
        '/game/{GameName}/stage/{StageName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
