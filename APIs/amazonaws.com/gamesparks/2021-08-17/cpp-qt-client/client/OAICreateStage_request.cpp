/**
 * GameSparks
 * <p/>
 *
 * The version of the OpenAPI document: 2021-08-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateStage_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateStage_request::OAICreateStage_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateStage_request::OAICreateStage_request() {
    this->initializeModel();
}

OAICreateStage_request::~OAICreateStage_request() {}

void OAICreateStage_request::initializeModel() {

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_stage_name_isSet = false;
    m_stage_name_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateStage_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateStage_request::fromJsonObject(QJsonObject json) {

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("ClientToken")]);
    m_client_token_isSet = !json[QString("ClientToken")].isNull() && m_client_token_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("Role")]);
    m_role_isSet = !json[QString("Role")].isNull() && m_role_isValid;

    m_stage_name_isValid = ::OpenAPI::fromJsonValue(m_stage_name, json[QString("StageName")]);
    m_stage_name_isSet = !json[QString("StageName")].isNull() && m_stage_name_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateStage_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateStage_request::asJsonObject() const {
    QJsonObject obj;
    if (m_client_token_isSet) {
        obj.insert(QString("ClientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_role_isSet) {
        obj.insert(QString("Role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_stage_name_isSet) {
        obj.insert(QString("StageName"), ::OpenAPI::toJsonValue(m_stage_name));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateStage_request::getClientToken() const {
    return m_client_token;
}
void OAICreateStage_request::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateStage_request::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateStage_request::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QString OAICreateStage_request::getDescription() const {
    return m_description;
}
void OAICreateStage_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateStage_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateStage_request::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICreateStage_request::getRole() const {
    return m_role;
}
void OAICreateStage_request::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAICreateStage_request::is_role_Set() const{
    return m_role_isSet;
}

bool OAICreateStage_request::is_role_Valid() const{
    return m_role_isValid;
}

QString OAICreateStage_request::getStageName() const {
    return m_stage_name;
}
void OAICreateStage_request::setStageName(const QString &stage_name) {
    m_stage_name = stage_name;
    m_stage_name_isSet = true;
}

bool OAICreateStage_request::is_stage_name_Set() const{
    return m_stage_name_isSet;
}

bool OAICreateStage_request::is_stage_name_Valid() const{
    return m_stage_name_isValid;
}

QMap<QString, QString> OAICreateStage_request::getTags() const {
    return m_tags;
}
void OAICreateStage_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateStage_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateStage_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateStage_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stage_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateStage_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_role_isValid && m_stage_name_isValid && true;
}

} // namespace OpenAPI
