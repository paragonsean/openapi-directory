/**
 * GameSparks
 * <p/>
 *
 * The version of the OpenAPI document: 2021-08-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDisconnectPlayerResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDisconnectPlayerResult::OAIDisconnectPlayerResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDisconnectPlayerResult::OAIDisconnectPlayerResult() {
    this->initializeModel();
}

OAIDisconnectPlayerResult::~OAIDisconnectPlayerResult() {}

void OAIDisconnectPlayerResult::initializeModel() {

    m_disconnect_failures_isSet = false;
    m_disconnect_failures_isValid = false;

    m_disconnect_successes_isSet = false;
    m_disconnect_successes_isValid = false;
}

void OAIDisconnectPlayerResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDisconnectPlayerResult::fromJsonObject(QJsonObject json) {

    m_disconnect_failures_isValid = ::OpenAPI::fromJsonValue(m_disconnect_failures, json[QString("DisconnectFailures")]);
    m_disconnect_failures_isSet = !json[QString("DisconnectFailures")].isNull() && m_disconnect_failures_isValid;

    m_disconnect_successes_isValid = ::OpenAPI::fromJsonValue(m_disconnect_successes, json[QString("DisconnectSuccesses")]);
    m_disconnect_successes_isSet = !json[QString("DisconnectSuccesses")].isNull() && m_disconnect_successes_isValid;
}

QString OAIDisconnectPlayerResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDisconnectPlayerResult::asJsonObject() const {
    QJsonObject obj;
    if (m_disconnect_failures.isSet()) {
        obj.insert(QString("DisconnectFailures"), ::OpenAPI::toJsonValue(m_disconnect_failures));
    }
    if (m_disconnect_successes.isSet()) {
        obj.insert(QString("DisconnectSuccesses"), ::OpenAPI::toJsonValue(m_disconnect_successes));
    }
    return obj;
}

QList OAIDisconnectPlayerResult::getDisconnectFailures() const {
    return m_disconnect_failures;
}
void OAIDisconnectPlayerResult::setDisconnectFailures(const QList &disconnect_failures) {
    m_disconnect_failures = disconnect_failures;
    m_disconnect_failures_isSet = true;
}

bool OAIDisconnectPlayerResult::is_disconnect_failures_Set() const{
    return m_disconnect_failures_isSet;
}

bool OAIDisconnectPlayerResult::is_disconnect_failures_Valid() const{
    return m_disconnect_failures_isValid;
}

QList OAIDisconnectPlayerResult::getDisconnectSuccesses() const {
    return m_disconnect_successes;
}
void OAIDisconnectPlayerResult::setDisconnectSuccesses(const QList &disconnect_successes) {
    m_disconnect_successes = disconnect_successes;
    m_disconnect_successes_isSet = true;
}

bool OAIDisconnectPlayerResult::is_disconnect_successes_Set() const{
    return m_disconnect_successes_isSet;
}

bool OAIDisconnectPlayerResult::is_disconnect_successes_Valid() const{
    return m_disconnect_successes_isValid;
}

bool OAIDisconnectPlayerResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disconnect_failures.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_disconnect_successes.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDisconnectPlayerResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
