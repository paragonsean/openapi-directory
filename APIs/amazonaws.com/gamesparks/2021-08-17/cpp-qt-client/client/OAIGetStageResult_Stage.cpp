/**
 * GameSparks
 * <p/>
 *
 * The version of the OpenAPI document: 2021-08-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetStageResult_Stage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetStageResult_Stage::OAIGetStageResult_Stage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetStageResult_Stage::OAIGetStageResult_Stage() {
    this->initializeModel();
}

OAIGetStageResult_Stage::~OAIGetStageResult_Stage() {}

void OAIGetStageResult_Stage::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_game_key_isSet = false;
    m_game_key_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_log_group_isSet = false;
    m_log_group_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIGetStageResult_Stage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetStageResult_Stage::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("Created")]);
    m_created_isSet = !json[QString("Created")].isNull() && m_created_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_game_key_isValid = ::OpenAPI::fromJsonValue(m_game_key, json[QString("GameKey")]);
    m_game_key_isSet = !json[QString("GameKey")].isNull() && m_game_key_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("LastUpdated")]);
    m_last_updated_isSet = !json[QString("LastUpdated")].isNull() && m_last_updated_isValid;

    m_log_group_isValid = ::OpenAPI::fromJsonValue(m_log_group, json[QString("LogGroup")]);
    m_log_group_isSet = !json[QString("LogGroup")].isNull() && m_log_group_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("Role")]);
    m_role_isSet = !json[QString("Role")].isNull() && m_role_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIGetStageResult_Stage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetStageResult_Stage::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_created_isSet) {
        obj.insert(QString("Created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_game_key_isSet) {
        obj.insert(QString("GameKey"), ::OpenAPI::toJsonValue(m_game_key));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("LastUpdated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_log_group_isSet) {
        obj.insert(QString("LogGroup"), ::OpenAPI::toJsonValue(m_log_group));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_role_isSet) {
        obj.insert(QString("Role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_state.isSet()) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIGetStageResult_Stage::getArn() const {
    return m_arn;
}
void OAIGetStageResult_Stage::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIGetStageResult_Stage::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIGetStageResult_Stage::is_arn_Valid() const{
    return m_arn_isValid;
}

QDateTime OAIGetStageResult_Stage::getCreated() const {
    return m_created;
}
void OAIGetStageResult_Stage::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIGetStageResult_Stage::is_created_Set() const{
    return m_created_isSet;
}

bool OAIGetStageResult_Stage::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIGetStageResult_Stage::getDescription() const {
    return m_description;
}
void OAIGetStageResult_Stage::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGetStageResult_Stage::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGetStageResult_Stage::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIGetStageResult_Stage::getGameKey() const {
    return m_game_key;
}
void OAIGetStageResult_Stage::setGameKey(const QString &game_key) {
    m_game_key = game_key;
    m_game_key_isSet = true;
}

bool OAIGetStageResult_Stage::is_game_key_Set() const{
    return m_game_key_isSet;
}

bool OAIGetStageResult_Stage::is_game_key_Valid() const{
    return m_game_key_isValid;
}

QDateTime OAIGetStageResult_Stage::getLastUpdated() const {
    return m_last_updated;
}
void OAIGetStageResult_Stage::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIGetStageResult_Stage::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIGetStageResult_Stage::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QString OAIGetStageResult_Stage::getLogGroup() const {
    return m_log_group;
}
void OAIGetStageResult_Stage::setLogGroup(const QString &log_group) {
    m_log_group = log_group;
    m_log_group_isSet = true;
}

bool OAIGetStageResult_Stage::is_log_group_Set() const{
    return m_log_group_isSet;
}

bool OAIGetStageResult_Stage::is_log_group_Valid() const{
    return m_log_group_isValid;
}

QString OAIGetStageResult_Stage::getName() const {
    return m_name;
}
void OAIGetStageResult_Stage::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetStageResult_Stage::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetStageResult_Stage::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGetStageResult_Stage::getRole() const {
    return m_role;
}
void OAIGetStageResult_Stage::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIGetStageResult_Stage::is_role_Set() const{
    return m_role_isSet;
}

bool OAIGetStageResult_Stage::is_role_Valid() const{
    return m_role_isValid;
}

OAIStageState OAIGetStageResult_Stage::getState() const {
    return m_state;
}
void OAIGetStageResult_Stage::setState(const OAIStageState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIGetStageResult_Stage::is_state_Set() const{
    return m_state_isSet;
}

bool OAIGetStageResult_Stage::is_state_Valid() const{
    return m_state_isValid;
}

QMap OAIGetStageResult_Stage::getTags() const {
    return m_tags;
}
void OAIGetStageResult_Stage::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIGetStageResult_Stage::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIGetStageResult_Stage::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIGetStageResult_Stage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_game_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetStageResult_Stage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
