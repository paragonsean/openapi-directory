/**
 * GameSparks
 * <p/>
 *
 * The version of the OpenAPI document: 2021-08-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISection::OAISection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISection::OAISection() {
    this->initializeModel();
}

OAISection::~OAISection() {}

void OAISection::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;
}

void OAISection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISection::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("Attributes")]);
    m_attributes_isSet = !json[QString("Attributes")].isNull() && m_attributes_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("Size")]);
    m_size_isSet = !json[QString("Size")].isNull() && m_size_isValid;
}

QString OAISection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISection::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes.isSet()) {
        obj.insert(QString("Attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_size_isSet) {
        obj.insert(QString("Size"), ::OpenAPI::toJsonValue(m_size));
    }
    return obj;
}

OAIObject OAISection::getAttributes() const {
    return m_attributes;
}
void OAISection::setAttributes(const OAIObject &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAISection::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAISection::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QString OAISection::getName() const {
    return m_name;
}
void OAISection::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISection::is_name_Set() const{
    return m_name_isSet;
}

bool OAISection::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAISection::getSize() const {
    return m_size;
}
void OAISection::setSize(const qint32 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAISection::is_size_Set() const{
    return m_size_isSet;
}

bool OAISection::is_size_Valid() const{
    return m_size_isValid;
}

bool OAISection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISection::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
