/**
 * GameSparks
 * <p/>
 *
 * The version of the OpenAPI document: 2021-08-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGameConfigurationDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGameConfigurationDetails::OAIGameConfigurationDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGameConfigurationDetails::OAIGameConfigurationDetails() {
    this->initializeModel();
}

OAIGameConfigurationDetails::~OAIGameConfigurationDetails() {}

void OAIGameConfigurationDetails::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_sections_isSet = false;
    m_sections_isValid = false;
}

void OAIGameConfigurationDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGameConfigurationDetails::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("Created")]);
    m_created_isSet = !json[QString("Created")].isNull() && m_created_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("LastUpdated")]);
    m_last_updated_isSet = !json[QString("LastUpdated")].isNull() && m_last_updated_isValid;

    m_sections_isValid = ::OpenAPI::fromJsonValue(m_sections, json[QString("Sections")]);
    m_sections_isSet = !json[QString("Sections")].isNull() && m_sections_isValid;
}

QString OAIGameConfigurationDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGameConfigurationDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("Created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("LastUpdated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_sections.isSet()) {
        obj.insert(QString("Sections"), ::OpenAPI::toJsonValue(m_sections));
    }
    return obj;
}

QDateTime OAIGameConfigurationDetails::getCreated() const {
    return m_created;
}
void OAIGameConfigurationDetails::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIGameConfigurationDetails::is_created_Set() const{
    return m_created_isSet;
}

bool OAIGameConfigurationDetails::is_created_Valid() const{
    return m_created_isValid;
}

QDateTime OAIGameConfigurationDetails::getLastUpdated() const {
    return m_last_updated;
}
void OAIGameConfigurationDetails::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIGameConfigurationDetails::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIGameConfigurationDetails::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QMap OAIGameConfigurationDetails::getSections() const {
    return m_sections;
}
void OAIGameConfigurationDetails::setSections(const QMap &sections) {
    m_sections = sections;
    m_sections_isSet = true;
}

bool OAIGameConfigurationDetails::is_sections_Set() const{
    return m_sections_isSet;
}

bool OAIGameConfigurationDetails::is_sections_Valid() const{
    return m_sections_isValid;
}

bool OAIGameConfigurationDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sections.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGameConfigurationDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
