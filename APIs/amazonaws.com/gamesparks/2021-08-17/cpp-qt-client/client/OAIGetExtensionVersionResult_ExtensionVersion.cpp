/**
 * GameSparks
 * <p/>
 *
 * The version of the OpenAPI document: 2021-08-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetExtensionVersionResult_ExtensionVersion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetExtensionVersionResult_ExtensionVersion::OAIGetExtensionVersionResult_ExtensionVersion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetExtensionVersionResult_ExtensionVersion::OAIGetExtensionVersionResult_ExtensionVersion() {
    this->initializeModel();
}

OAIGetExtensionVersionResult_ExtensionVersion::~OAIGetExtensionVersionResult_ExtensionVersion() {}

void OAIGetExtensionVersionResult_ExtensionVersion::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_r_namespace_isSet = false;
    m_r_namespace_isValid = false;

    m_schema_isSet = false;
    m_schema_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIGetExtensionVersionResult_ExtensionVersion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetExtensionVersionResult_ExtensionVersion::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_r_namespace_isValid = ::OpenAPI::fromJsonValue(m_r_namespace, json[QString("Namespace")]);
    m_r_namespace_isSet = !json[QString("Namespace")].isNull() && m_r_namespace_isValid;

    m_schema_isValid = ::OpenAPI::fromJsonValue(m_schema, json[QString("Schema")]);
    m_schema_isSet = !json[QString("Schema")].isNull() && m_schema_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("Version")]);
    m_version_isSet = !json[QString("Version")].isNull() && m_version_isValid;
}

QString OAIGetExtensionVersionResult_ExtensionVersion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetExtensionVersionResult_ExtensionVersion::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_r_namespace_isSet) {
        obj.insert(QString("Namespace"), ::OpenAPI::toJsonValue(m_r_namespace));
    }
    if (m_schema_isSet) {
        obj.insert(QString("Schema"), ::OpenAPI::toJsonValue(m_schema));
    }
    if (m_version_isSet) {
        obj.insert(QString("Version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIGetExtensionVersionResult_ExtensionVersion::getName() const {
    return m_name;
}
void OAIGetExtensionVersionResult_ExtensionVersion::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetExtensionVersionResult_ExtensionVersion::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetExtensionVersionResult_ExtensionVersion::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGetExtensionVersionResult_ExtensionVersion::getRNamespace() const {
    return m_r_namespace;
}
void OAIGetExtensionVersionResult_ExtensionVersion::setRNamespace(const QString &r_namespace) {
    m_r_namespace = r_namespace;
    m_r_namespace_isSet = true;
}

bool OAIGetExtensionVersionResult_ExtensionVersion::is_r_namespace_Set() const{
    return m_r_namespace_isSet;
}

bool OAIGetExtensionVersionResult_ExtensionVersion::is_r_namespace_Valid() const{
    return m_r_namespace_isValid;
}

QString OAIGetExtensionVersionResult_ExtensionVersion::getSchema() const {
    return m_schema;
}
void OAIGetExtensionVersionResult_ExtensionVersion::setSchema(const QString &schema) {
    m_schema = schema;
    m_schema_isSet = true;
}

bool OAIGetExtensionVersionResult_ExtensionVersion::is_schema_Set() const{
    return m_schema_isSet;
}

bool OAIGetExtensionVersionResult_ExtensionVersion::is_schema_Valid() const{
    return m_schema_isValid;
}

QString OAIGetExtensionVersionResult_ExtensionVersion::getVersion() const {
    return m_version;
}
void OAIGetExtensionVersionResult_ExtensionVersion::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIGetExtensionVersionResult_ExtensionVersion::is_version_Set() const{
    return m_version_isSet;
}

bool OAIGetExtensionVersionResult_ExtensionVersion::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIGetExtensionVersionResult_ExtensionVersion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetExtensionVersionResult_ExtensionVersion::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
