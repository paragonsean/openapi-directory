/*
 * GameSparks
 * <p/>
 *
 * The version of the OpenAPI document: 2021-08-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateGameRequest;
import org.openapitools.client.model.CreateGameResult;
import org.openapitools.client.model.CreateSnapshotRequest;
import org.openapitools.client.model.CreateSnapshotResult;
import org.openapitools.client.model.CreateStageRequest;
import org.openapitools.client.model.CreateStageResult;
import org.openapitools.client.model.DisconnectPlayerResult;
import org.openapitools.client.model.ExportSnapshotResult;
import org.openapitools.client.model.GetExtensionResult;
import org.openapitools.client.model.GetExtensionVersionResult;
import org.openapitools.client.model.GetGameConfigurationResult;
import org.openapitools.client.model.GetGameResult;
import org.openapitools.client.model.GetGeneratedCodeJobResult;
import org.openapitools.client.model.GetPlayerConnectionStatusResult;
import org.openapitools.client.model.GetSnapshotResult;
import org.openapitools.client.model.GetStageDeploymentResult;
import org.openapitools.client.model.GetStageResult;
import org.openapitools.client.model.ImportGameConfigurationRequest;
import org.openapitools.client.model.ImportGameConfigurationResult;
import org.openapitools.client.model.ListExtensionVersionsResult;
import org.openapitools.client.model.ListExtensionsResult;
import org.openapitools.client.model.ListGamesResult;
import org.openapitools.client.model.ListGeneratedCodeJobsResult;
import org.openapitools.client.model.ListSnapshotsResult;
import org.openapitools.client.model.ListStageDeploymentsResult;
import org.openapitools.client.model.ListStagesResult;
import org.openapitools.client.model.ListTagsForResourceResult;
import org.openapitools.client.model.StartGeneratedCodeJobRequest;
import org.openapitools.client.model.StartGeneratedCodeJobResult;
import org.openapitools.client.model.StartStageDeploymentRequest;
import org.openapitools.client.model.StartStageDeploymentResult;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UpdateGameConfigurationRequest;
import org.openapitools.client.model.UpdateGameConfigurationResult;
import org.openapitools.client.model.UpdateGameRequest;
import org.openapitools.client.model.UpdateGameResult;
import org.openapitools.client.model.UpdateSnapshotResult;
import org.openapitools.client.model.UpdateStageRequest;
import org.openapitools.client.model.UpdateStageResult;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     *  Creates a new game with an empty configuration. After creating your game, you can update the configuration using &lt;code&gt;UpdateGameConfiguration&lt;/code&gt; or &lt;code&gt;ImportGameConfiguration&lt;/code&gt;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createGameTest() throws ApiException {
        CreateGameRequest createGameRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateGameResult response = api.createGame(createGameRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a snapshot of the game configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSnapshotTest() throws ApiException {
        String gameName = null;
        CreateSnapshotRequest createSnapshotRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateSnapshotResult response = api.createSnapshot(gameName, createSnapshotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new stage for stage-by-stage game development and deployment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createStageTest() throws ApiException {
        String gameName = null;
        CreateStageRequest createStageRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateStageResult response = api.createStage(gameName, createStageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a game.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteGameTest() throws ApiException {
        String gameName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteGame(gameName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a stage from a game, along with the associated game runtime.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteStageTest() throws ApiException {
        String gameName = null;
        String stageName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteStage(gameName, stageName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Disconnects a player from the game runtime.&lt;/p&gt; &lt;p&gt; If a player has multiple connections, this operation attempts to close all of them. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disconnectPlayerTest() throws ApiException {
        String gameName = null;
        String playerId = null;
        String stageName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DisconnectPlayerResult response = api.disconnectPlayer(gameName, playerId, stageName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Exports a game configuration snapshot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void exportSnapshotTest() throws ApiException {
        String gameName = null;
        String snapshotId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ExportSnapshotResult response = api.exportSnapshot(gameName, snapshotId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets details about a specified extension.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getExtensionTest() throws ApiException {
        String name = null;
        String namespace = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetExtensionResult response = api.getExtension(name, namespace, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets details about a specified extension version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getExtensionVersionTest() throws ApiException {
        String extensionVersion = null;
        String name = null;
        String namespace = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetExtensionVersionResult response = api.getExtensionVersion(extensionVersion, name, namespace, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets details about a game.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGameTest() throws ApiException {
        String gameName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetGameResult response = api.getGame(gameName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets the configuration of the game.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGameConfigurationTest() throws ApiException {
        String gameName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<String> sections = null;
        GetGameConfigurationResult response = api.getGameConfiguration(gameName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sections);
        // TODO: test validations
    }

    /**
     * Gets details about a job that is generating code for a snapshot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGeneratedCodeJobTest() throws ApiException {
        String gameName = null;
        String jobId = null;
        String snapshotId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetGeneratedCodeJobResult response = api.getGeneratedCodeJob(gameName, jobId, snapshotId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets the status of a player&#39;s connection to the game runtime.&lt;/p&gt; &lt;p&gt; It&#39;s possible for a single player to have multiple connections to the game runtime. If a player is not connected, this operation returns an empty list. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPlayerConnectionStatusTest() throws ApiException {
        String gameName = null;
        String playerId = null;
        String stageName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetPlayerConnectionStatusResult response = api.getPlayerConnectionStatus(gameName, playerId, stageName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets a copy of the game configuration in a snapshot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSnapshotTest() throws ApiException {
        String gameName = null;
        String snapshotId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<String> sections = null;
        GetSnapshotResult response = api.getSnapshot(gameName, snapshotId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sections);
        // TODO: test validations
    }

    /**
     * Gets information about a stage.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStageTest() throws ApiException {
        String gameName = null;
        String stageName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetStageResult response = api.getStage(gameName, stageName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about a stage deployment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStageDeploymentTest() throws ApiException {
        String gameName = null;
        String stageName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String deploymentId = null;
        GetStageDeploymentResult response = api.getStageDeployment(gameName, stageName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deploymentId);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Imports a game configuration.&lt;/p&gt; &lt;p&gt; This operation replaces the current configuration of the game with the provided input. This is not a reversible operation. If you want to preserve the previous configuration, use &lt;code&gt;CreateSnapshot&lt;/code&gt; to make a new snapshot before importing. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void importGameConfigurationTest() throws ApiException {
        String gameName = null;
        ImportGameConfigurationRequest importGameConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ImportGameConfigurationResult response = api.importGameConfiguration(gameName, importGameConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets a paginated list of available versions for the extension.&lt;/p&gt; &lt;p&gt; Each time an API change is made to an extension, the version is incremented. The list retrieved by this operation shows the versions that are currently available. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listExtensionVersionsTest() throws ApiException {
        String name = null;
        String namespace = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListExtensionVersionsResult response = api.listExtensionVersions(name, namespace, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets a paginated list of available extensions.&lt;/p&gt; &lt;p&gt; Extensions provide features that games can use from scripts. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listExtensionsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListExtensionsResult response = api.listExtensions(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Gets a paginated list of games.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listGamesTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListGamesResult response = api.listGames(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Gets a paginated list of code generation jobs for a snapshot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listGeneratedCodeJobsTest() throws ApiException {
        String gameName = null;
        String snapshotId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListGeneratedCodeJobsResult response = api.listGeneratedCodeJobs(gameName, snapshotId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Gets a paginated list of snapshot summaries from the game.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSnapshotsTest() throws ApiException {
        String gameName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListSnapshotsResult response = api.listSnapshots(gameName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Gets a paginated list of stage deployment summaries from the game.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listStageDeploymentsTest() throws ApiException {
        String gameName = null;
        String stageName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListStageDeploymentsResult response = api.listStageDeployments(gameName, stageName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Gets a paginated list of stage summaries from the game.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listStagesTest() throws ApiException {
        String gameName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListStagesResult response = api.listStages(gameName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the tags associated with a GameSparks resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String resourceArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceResult response = api.listTagsForResource(resourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Starts an asynchronous process that generates client code for system-defined and custom messages. The resulting code is collected as a .zip file and uploaded to a pre-signed Amazon S3 URL. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startGeneratedCodeJobTest() throws ApiException {
        String gameName = null;
        String snapshotId = null;
        StartGeneratedCodeJobRequest startGeneratedCodeJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartGeneratedCodeJobResult response = api.startGeneratedCodeJob(gameName, snapshotId, startGeneratedCodeJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deploys a snapshot to the stage and creates a new game runtime.&lt;/p&gt; &lt;p&gt; After you call this operation, you can check the deployment status by using &lt;code&gt;GetStageDeployment&lt;/code&gt;. &lt;/p&gt; &lt;p&gt; If there are any players connected to the previous game runtime, then both runtimes persist. Existing connections to the previous runtime are maintained. When players disconnect and reconnect, they connect to the new runtime. After there are no connections to the previous game runtime, it is deleted. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startStageDeploymentTest() throws ApiException {
        String gameName = null;
        String stageName = null;
        StartStageDeploymentRequest startStageDeploymentRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartStageDeploymentResult response = api.startStageDeployment(gameName, stageName, startStageDeploymentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Adds tags to a GameSparks resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String resourceArn = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.tagResource(resourceArn, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes tags from a GameSparks resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String resourceArn = null;
        List<String> tagKeys = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.untagResource(resourceArn, tagKeys, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates details of the game.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateGameTest() throws ApiException {
        String gameName = null;
        UpdateGameRequest updateGameRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateGameResult response = api.updateGame(gameName, updateGameRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates one or more sections of the game configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateGameConfigurationTest() throws ApiException {
        String gameName = null;
        UpdateGameConfigurationRequest updateGameConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateGameConfigurationResult response = api.updateGameConfiguration(gameName, updateGameConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the metadata of a GameSparks snapshot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSnapshotTest() throws ApiException {
        String gameName = null;
        String snapshotId = null;
        CreateSnapshotRequest createSnapshotRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateSnapshotResult response = api.updateSnapshot(gameName, snapshotId, createSnapshotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the metadata of a stage.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateStageTest() throws ApiException {
        String gameName = null;
        String stageName = null;
        UpdateStageRequest updateStageRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateStageResult response = api.updateStage(gameName, stageName, updateStageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
