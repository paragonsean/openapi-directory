# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExtensionVersionDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, namespace: str=None, _schema: str=None, version: str=None):
        """ExtensionVersionDetails - a model defined in OpenAPI

        :param name: The name of this ExtensionVersionDetails.
        :param namespace: The namespace of this ExtensionVersionDetails.
        :param _schema: The _schema of this ExtensionVersionDetails.
        :param version: The version of this ExtensionVersionDetails.
        """
        self.openapi_types = {
            'name': str,
            'namespace': str,
            '_schema': str,
            'version': str
        }

        self.attribute_map = {
            'name': 'Name',
            'namespace': 'Namespace',
            '_schema': 'Schema',
            'version': 'Version'
        }

        self._name = name
        self._namespace = namespace
        self.__schema = _schema
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExtensionVersionDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExtensionVersionDetails of this ExtensionVersionDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this ExtensionVersionDetails.


        :return: The name of this ExtensionVersionDetails.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ExtensionVersionDetails.


        :param name: The name of this ExtensionVersionDetails.
        :type name: str
        """

        self._name = name

    @property
    def namespace(self):
        """Gets the namespace of this ExtensionVersionDetails.


        :return: The namespace of this ExtensionVersionDetails.
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this ExtensionVersionDetails.


        :param namespace: The namespace of this ExtensionVersionDetails.
        :type namespace: str
        """

        self._namespace = namespace

    @property
    def _schema(self):
        """Gets the _schema of this ExtensionVersionDetails.


        :return: The _schema of this ExtensionVersionDetails.
        :rtype: str
        """
        return self.__schema

    @_schema.setter
    def _schema(self, _schema):
        """Sets the _schema of this ExtensionVersionDetails.


        :param _schema: The _schema of this ExtensionVersionDetails.
        :type _schema: str
        """

        self.__schema = _schema

    @property
    def version(self):
        """Gets the version of this ExtensionVersionDetails.


        :return: The version of this ExtensionVersionDetails.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ExtensionVersionDetails.


        :param version: The version of this ExtensionVersionDetails.
        :type version: str
        """

        self._version = version
