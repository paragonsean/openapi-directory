# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.section_modification import SectionModification
from openapi_server import util


class UpdateGameConfigurationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, modifications: List[SectionModification]=None):
        """UpdateGameConfigurationRequest - a model defined in OpenAPI

        :param modifications: The modifications of this UpdateGameConfigurationRequest.
        """
        self.openapi_types = {
            'modifications': List[SectionModification]
        }

        self.attribute_map = {
            'modifications': 'Modifications'
        }

        self._modifications = modifications

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateGameConfigurationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateGameConfiguration_request of this UpdateGameConfigurationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def modifications(self):
        """Gets the modifications of this UpdateGameConfigurationRequest.

        The list of modifications to make.

        :return: The modifications of this UpdateGameConfigurationRequest.
        :rtype: List[SectionModification]
        """
        return self._modifications

    @modifications.setter
    def modifications(self, modifications):
        """Sets the modifications of this UpdateGameConfigurationRequest.

        The list of modifications to make.

        :param modifications: The modifications of this UpdateGameConfigurationRequest.
        :type modifications: List[SectionModification]
        """
        if modifications is None:
            raise ValueError("Invalid value for `modifications`, must not be `None`")
        if modifications is not None and len(modifications) > 100:
            raise ValueError("Invalid value for `modifications`, number of items must be less than or equal to `100`")
        if modifications is not None and len(modifications) < 1:
            raise ValueError("Invalid value for `modifications`, number of items must be greater than or equal to `1`")

        self._modifications = modifications
