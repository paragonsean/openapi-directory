# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class UpdateStageRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, role: str=None):
        """UpdateStageRequest - a model defined in OpenAPI

        :param description: The description of this UpdateStageRequest.
        :param role: The role of this UpdateStageRequest.
        """
        self.openapi_types = {
            'description': str,
            'role': str
        }

        self.attribute_map = {
            'description': 'Description',
            'role': 'Role'
        }

        self._description = description
        self._role = role

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateStageRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateStage_request of this UpdateStageRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this UpdateStageRequest.

        The description of the stage.

        :return: The description of this UpdateStageRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateStageRequest.

        The description of the stage.

        :param description: The description of this UpdateStageRequest.
        :type description: str
        """
        if description is not None and len(description) > 250:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `250`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")
        if description is not None and not re.search(r'^\S(.*\S)?$|^$', description):
            raise ValueError("Invalid value for `description`, must be a follow pattern or equal to `/^\S(.*\S)?$|^$/`")

        self._description = description

    @property
    def role(self):
        """Gets the role of this UpdateStageRequest.

        The Amazon Resource Name (ARN) of the role to use for the game snapshots deployed to this stage.

        :return: The role of this UpdateStageRequest.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this UpdateStageRequest.

        The Amazon Resource Name (ARN) of the role to use for the game snapshots deployed to this stage.

        :param role: The role of this UpdateStageRequest.
        :type role: str
        """
        if role is not None and len(role) > 2048:
            raise ValueError("Invalid value for `role`, length must be less than or equal to `2048`")
        if role is not None and len(role) < 20:
            raise ValueError("Invalid value for `role`, length must be greater than or equal to `20`")
        if role is not None and not re.search(r'^arn:(aws[a-zA-Z-]*)?:iam::\d{12}:role\/.+$', role):
            raise ValueError("Invalid value for `role`, must be a follow pattern or equal to `/^arn:(aws[a-zA-Z-]*)?:iam::\d{12}:role\/.+$/`")

        self._role = role
