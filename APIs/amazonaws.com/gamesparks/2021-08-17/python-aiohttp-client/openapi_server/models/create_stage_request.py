# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CreateStageRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_token: str=None, description: str=None, role: str=None, stage_name: str=None, tags: Dict[str, str]=None):
        """CreateStageRequest - a model defined in OpenAPI

        :param client_token: The client_token of this CreateStageRequest.
        :param description: The description of this CreateStageRequest.
        :param role: The role of this CreateStageRequest.
        :param stage_name: The stage_name of this CreateStageRequest.
        :param tags: The tags of this CreateStageRequest.
        """
        self.openapi_types = {
            'client_token': str,
            'description': str,
            'role': str,
            'stage_name': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'client_token': 'ClientToken',
            'description': 'Description',
            'role': 'Role',
            'stage_name': 'StageName',
            'tags': 'Tags'
        }

        self._client_token = client_token
        self._description = description
        self._role = role
        self._stage_name = stage_name
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateStageRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateStage_request of this CreateStageRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_token(self):
        """Gets the client_token of this CreateStageRequest.

         A client-defined token. With an active client token in the request, this action is idempotent. 

        :return: The client_token of this CreateStageRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateStageRequest.

         A client-defined token. With an active client token in the request, this action is idempotent. 

        :param client_token: The client_token of this CreateStageRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 126:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `126`")
        if client_token is not None and len(client_token) < 33:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `33`")

        self._client_token = client_token

    @property
    def description(self):
        """Gets the description of this CreateStageRequest.

        The description of the stage.

        :return: The description of this CreateStageRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateStageRequest.

        The description of the stage.

        :param description: The description of this CreateStageRequest.
        :type description: str
        """
        if description is not None and len(description) > 250:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `250`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")
        if description is not None and not re.search(r'^\S(.*\S)?$|^$', description):
            raise ValueError("Invalid value for `description`, must be a follow pattern or equal to `/^\S(.*\S)?$|^$/`")

        self._description = description

    @property
    def role(self):
        """Gets the role of this CreateStageRequest.

         The Amazon Resource Name (ARN) of the role to run the game with. This role can be a game-defined role or the default role that GameSparks created. 

        :return: The role of this CreateStageRequest.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this CreateStageRequest.

         The Amazon Resource Name (ARN) of the role to run the game with. This role can be a game-defined role or the default role that GameSparks created. 

        :param role: The role of this CreateStageRequest.
        :type role: str
        """
        if role is None:
            raise ValueError("Invalid value for `role`, must not be `None`")
        if role is not None and len(role) > 2048:
            raise ValueError("Invalid value for `role`, length must be less than or equal to `2048`")
        if role is not None and len(role) < 20:
            raise ValueError("Invalid value for `role`, length must be greater than or equal to `20`")
        if role is not None and not re.search(r'^arn:(aws[a-zA-Z-]*)?:iam::\d{12}:role\/.+$', role):
            raise ValueError("Invalid value for `role`, must be a follow pattern or equal to `/^arn:(aws[a-zA-Z-]*)?:iam::\d{12}:role\/.+$/`")

        self._role = role

    @property
    def stage_name(self):
        """Gets the stage_name of this CreateStageRequest.

        The name of the stage.

        :return: The stage_name of this CreateStageRequest.
        :rtype: str
        """
        return self._stage_name

    @stage_name.setter
    def stage_name(self, stage_name):
        """Sets the stage_name of this CreateStageRequest.

        The name of the stage.

        :param stage_name: The stage_name of this CreateStageRequest.
        :type stage_name: str
        """
        if stage_name is None:
            raise ValueError("Invalid value for `stage_name`, must not be `None`")
        if stage_name is not None and len(stage_name) > 36:
            raise ValueError("Invalid value for `stage_name`, length must be less than or equal to `36`")
        if stage_name is not None and len(stage_name) < 1:
            raise ValueError("Invalid value for `stage_name`, length must be greater than or equal to `1`")
        if stage_name is not None and not re.search(r'^[a-zA-Z0-9_-]+$', stage_name):
            raise ValueError("Invalid value for `stage_name`, must be a follow pattern or equal to `/^[a-zA-Z0-9_-]+$/`")

        self._stage_name = stage_name

    @property
    def tags(self):
        """Gets the tags of this CreateStageRequest.

        The list of tags to apply to the stage.

        :return: The tags of this CreateStageRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateStageRequest.

        The list of tags to apply to the stage.

        :param tags: The tags of this CreateStageRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 1:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `1`")

        self._tags = tags
