# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.operation import Operation
from openapi_server import util


class SectionModification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, operation: Operation=None, path: str=None, section: str=None, value: object=None):
        """SectionModification - a model defined in OpenAPI

        :param operation: The operation of this SectionModification.
        :param path: The path of this SectionModification.
        :param section: The section of this SectionModification.
        :param value: The value of this SectionModification.
        """
        self.openapi_types = {
            'operation': Operation,
            'path': str,
            'section': str,
            'value': object
        }

        self.attribute_map = {
            'operation': 'Operation',
            'path': 'Path',
            'section': 'Section',
            'value': 'Value'
        }

        self._operation = operation
        self._path = path
        self._section = section
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SectionModification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SectionModification of this SectionModification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def operation(self):
        """Gets the operation of this SectionModification.


        :return: The operation of this SectionModification.
        :rtype: Operation
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this SectionModification.


        :param operation: The operation of this SectionModification.
        :type operation: Operation
        """
        if operation is None:
            raise ValueError("Invalid value for `operation`, must not be `None`")

        self._operation = operation

    @property
    def path(self):
        """Gets the path of this SectionModification.


        :return: The path of this SectionModification.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this SectionModification.


        :param path: The path of this SectionModification.
        :type path: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")

        self._path = path

    @property
    def section(self):
        """Gets the section of this SectionModification.


        :return: The section of this SectionModification.
        :rtype: str
        """
        return self._section

    @section.setter
    def section(self, section):
        """Sets the section of this SectionModification.


        :param section: The section of this SectionModification.
        :type section: str
        """
        if section is None:
            raise ValueError("Invalid value for `section`, must not be `None`")

        self._section = section

    @property
    def value(self):
        """Gets the value of this SectionModification.


        :return: The value of this SectionModification.
        :rtype: object
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this SectionModification.


        :param value: The value of this SectionModification.
        :type value: object
        """

        self._value = value
