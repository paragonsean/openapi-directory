# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class StartStageDeploymentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_token: str=None, snapshot_id: str=None):
        """StartStageDeploymentRequest - a model defined in OpenAPI

        :param client_token: The client_token of this StartStageDeploymentRequest.
        :param snapshot_id: The snapshot_id of this StartStageDeploymentRequest.
        """
        self.openapi_types = {
            'client_token': str,
            'snapshot_id': str
        }

        self.attribute_map = {
            'client_token': 'ClientToken',
            'snapshot_id': 'SnapshotId'
        }

        self._client_token = client_token
        self._snapshot_id = snapshot_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartStageDeploymentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartStageDeployment_request of this StartStageDeploymentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_token(self):
        """Gets the client_token of this StartStageDeploymentRequest.

         A client-defined token. With an active client token in the request, this action is idempotent. 

        :return: The client_token of this StartStageDeploymentRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this StartStageDeploymentRequest.

         A client-defined token. With an active client token in the request, this action is idempotent. 

        :param client_token: The client_token of this StartStageDeploymentRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 126:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `126`")
        if client_token is not None and len(client_token) < 33:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `33`")

        self._client_token = client_token

    @property
    def snapshot_id(self):
        """Gets the snapshot_id of this StartStageDeploymentRequest.

        The identifier of the snapshot to deploy.

        :return: The snapshot_id of this StartStageDeploymentRequest.
        :rtype: str
        """
        return self._snapshot_id

    @snapshot_id.setter
    def snapshot_id(self, snapshot_id):
        """Sets the snapshot_id of this StartStageDeploymentRequest.

        The identifier of the snapshot to deploy.

        :param snapshot_id: The snapshot_id of this StartStageDeploymentRequest.
        :type snapshot_id: str
        """
        if snapshot_id is None:
            raise ValueError("Invalid value for `snapshot_id`, must not be `None`")
        if snapshot_id is not None and len(snapshot_id) > 36:
            raise ValueError("Invalid value for `snapshot_id`, length must be less than or equal to `36`")
        if snapshot_id is not None and len(snapshot_id) < 33:
            raise ValueError("Invalid value for `snapshot_id`, length must be greater than or equal to `33`")
        if snapshot_id is not None and not re.search(r'^Snapshot_\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3,6}Z$', snapshot_id):
            raise ValueError("Invalid value for `snapshot_id`, must be a follow pattern or equal to `/^Snapshot_\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3,6}Z$/`")

        self._snapshot_id = snapshot_id
