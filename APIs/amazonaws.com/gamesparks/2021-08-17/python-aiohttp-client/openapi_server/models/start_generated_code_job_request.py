# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.start_generated_code_job_request_generator import StartGeneratedCodeJobRequestGenerator
from openapi_server import util


class StartGeneratedCodeJobRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, generator: StartGeneratedCodeJobRequestGenerator=None):
        """StartGeneratedCodeJobRequest - a model defined in OpenAPI

        :param generator: The generator of this StartGeneratedCodeJobRequest.
        """
        self.openapi_types = {
            'generator': StartGeneratedCodeJobRequestGenerator
        }

        self.attribute_map = {
            'generator': 'Generator'
        }

        self._generator = generator

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartGeneratedCodeJobRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartGeneratedCodeJob_request of this StartGeneratedCodeJobRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def generator(self):
        """Gets the generator of this StartGeneratedCodeJobRequest.


        :return: The generator of this StartGeneratedCodeJobRequest.
        :rtype: StartGeneratedCodeJobRequestGenerator
        """
        return self._generator

    @generator.setter
    def generator(self, generator):
        """Sets the generator of this StartGeneratedCodeJobRequest.


        :param generator: The generator of this StartGeneratedCodeJobRequest.
        :type generator: StartGeneratedCodeJobRequestGenerator
        """
        if generator is None:
            raise ValueError("Invalid value for `generator`, must not be `None`")

        self._generator = generator
