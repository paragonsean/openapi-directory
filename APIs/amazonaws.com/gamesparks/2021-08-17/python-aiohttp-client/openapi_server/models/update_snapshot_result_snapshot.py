# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateSnapshotResultSnapshot(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: datetime=None, description: str=None, id: str=None, last_updated: datetime=None, sections: Dict=None):
        """UpdateSnapshotResultSnapshot - a model defined in OpenAPI

        :param created: The created of this UpdateSnapshotResultSnapshot.
        :param description: The description of this UpdateSnapshotResultSnapshot.
        :param id: The id of this UpdateSnapshotResultSnapshot.
        :param last_updated: The last_updated of this UpdateSnapshotResultSnapshot.
        :param sections: The sections of this UpdateSnapshotResultSnapshot.
        """
        self.openapi_types = {
            'created': datetime,
            'description': str,
            'id': str,
            'last_updated': datetime,
            'sections': Dict
        }

        self.attribute_map = {
            'created': 'Created',
            'description': 'Description',
            'id': 'Id',
            'last_updated': 'LastUpdated',
            'sections': 'Sections'
        }

        self._created = created
        self._description = description
        self._id = id
        self._last_updated = last_updated
        self._sections = sections

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateSnapshotResultSnapshot':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateSnapshotResult_Snapshot of this UpdateSnapshotResultSnapshot.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this UpdateSnapshotResultSnapshot.


        :return: The created of this UpdateSnapshotResultSnapshot.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this UpdateSnapshotResultSnapshot.


        :param created: The created of this UpdateSnapshotResultSnapshot.
        :type created: datetime
        """

        self._created = created

    @property
    def description(self):
        """Gets the description of this UpdateSnapshotResultSnapshot.


        :return: The description of this UpdateSnapshotResultSnapshot.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateSnapshotResultSnapshot.


        :param description: The description of this UpdateSnapshotResultSnapshot.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this UpdateSnapshotResultSnapshot.


        :return: The id of this UpdateSnapshotResultSnapshot.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UpdateSnapshotResultSnapshot.


        :param id: The id of this UpdateSnapshotResultSnapshot.
        :type id: str
        """

        self._id = id

    @property
    def last_updated(self):
        """Gets the last_updated of this UpdateSnapshotResultSnapshot.


        :return: The last_updated of this UpdateSnapshotResultSnapshot.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this UpdateSnapshotResultSnapshot.


        :param last_updated: The last_updated of this UpdateSnapshotResultSnapshot.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def sections(self):
        """Gets the sections of this UpdateSnapshotResultSnapshot.


        :return: The sections of this UpdateSnapshotResultSnapshot.
        :rtype: Dict
        """
        return self._sections

    @sections.setter
    def sections(self, sections):
        """Sets the sections of this UpdateSnapshotResultSnapshot.


        :param sections: The sections of this UpdateSnapshotResultSnapshot.
        :type sections: Dict
        """

        self._sections = sections
