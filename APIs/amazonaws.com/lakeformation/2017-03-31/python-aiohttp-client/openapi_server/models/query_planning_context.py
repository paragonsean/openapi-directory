# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class QueryPlanningContext(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, catalog_id: str=None, database_name: str=None, query_as_of_time: datetime=None, query_parameters: Dict=None, transaction_id: str=None):
        """QueryPlanningContext - a model defined in OpenAPI

        :param catalog_id: The catalog_id of this QueryPlanningContext.
        :param database_name: The database_name of this QueryPlanningContext.
        :param query_as_of_time: The query_as_of_time of this QueryPlanningContext.
        :param query_parameters: The query_parameters of this QueryPlanningContext.
        :param transaction_id: The transaction_id of this QueryPlanningContext.
        """
        self.openapi_types = {
            'catalog_id': str,
            'database_name': str,
            'query_as_of_time': datetime,
            'query_parameters': Dict,
            'transaction_id': str
        }

        self.attribute_map = {
            'catalog_id': 'CatalogId',
            'database_name': 'DatabaseName',
            'query_as_of_time': 'QueryAsOfTime',
            'query_parameters': 'QueryParameters',
            'transaction_id': 'TransactionId'
        }

        self._catalog_id = catalog_id
        self._database_name = database_name
        self._query_as_of_time = query_as_of_time
        self._query_parameters = query_parameters
        self._transaction_id = transaction_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QueryPlanningContext':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QueryPlanningContext of this QueryPlanningContext.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def catalog_id(self):
        """Gets the catalog_id of this QueryPlanningContext.


        :return: The catalog_id of this QueryPlanningContext.
        :rtype: str
        """
        return self._catalog_id

    @catalog_id.setter
    def catalog_id(self, catalog_id):
        """Sets the catalog_id of this QueryPlanningContext.


        :param catalog_id: The catalog_id of this QueryPlanningContext.
        :type catalog_id: str
        """

        self._catalog_id = catalog_id

    @property
    def database_name(self):
        """Gets the database_name of this QueryPlanningContext.


        :return: The database_name of this QueryPlanningContext.
        :rtype: str
        """
        return self._database_name

    @database_name.setter
    def database_name(self, database_name):
        """Sets the database_name of this QueryPlanningContext.


        :param database_name: The database_name of this QueryPlanningContext.
        :type database_name: str
        """
        if database_name is None:
            raise ValueError("Invalid value for `database_name`, must not be `None`")

        self._database_name = database_name

    @property
    def query_as_of_time(self):
        """Gets the query_as_of_time of this QueryPlanningContext.


        :return: The query_as_of_time of this QueryPlanningContext.
        :rtype: datetime
        """
        return self._query_as_of_time

    @query_as_of_time.setter
    def query_as_of_time(self, query_as_of_time):
        """Sets the query_as_of_time of this QueryPlanningContext.


        :param query_as_of_time: The query_as_of_time of this QueryPlanningContext.
        :type query_as_of_time: datetime
        """

        self._query_as_of_time = query_as_of_time

    @property
    def query_parameters(self):
        """Gets the query_parameters of this QueryPlanningContext.


        :return: The query_parameters of this QueryPlanningContext.
        :rtype: Dict
        """
        return self._query_parameters

    @query_parameters.setter
    def query_parameters(self, query_parameters):
        """Sets the query_parameters of this QueryPlanningContext.


        :param query_parameters: The query_parameters of this QueryPlanningContext.
        :type query_parameters: Dict
        """

        self._query_parameters = query_parameters

    @property
    def transaction_id(self):
        """Gets the transaction_id of this QueryPlanningContext.


        :return: The transaction_id of this QueryPlanningContext.
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this QueryPlanningContext.


        :param transaction_id: The transaction_id of this QueryPlanningContext.
        :type transaction_id: str
        """

        self._transaction_id = transaction_id
