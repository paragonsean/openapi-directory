# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class GetTableObjectsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, catalog_id: str=None, database_name: str=None, table_name: str=None, transaction_id: str=None, query_as_of_time: datetime=None, partition_predicate: str=None, max_results: int=None, next_token: str=None):
        """GetTableObjectsRequest - a model defined in OpenAPI

        :param catalog_id: The catalog_id of this GetTableObjectsRequest.
        :param database_name: The database_name of this GetTableObjectsRequest.
        :param table_name: The table_name of this GetTableObjectsRequest.
        :param transaction_id: The transaction_id of this GetTableObjectsRequest.
        :param query_as_of_time: The query_as_of_time of this GetTableObjectsRequest.
        :param partition_predicate: The partition_predicate of this GetTableObjectsRequest.
        :param max_results: The max_results of this GetTableObjectsRequest.
        :param next_token: The next_token of this GetTableObjectsRequest.
        """
        self.openapi_types = {
            'catalog_id': str,
            'database_name': str,
            'table_name': str,
            'transaction_id': str,
            'query_as_of_time': datetime,
            'partition_predicate': str,
            'max_results': int,
            'next_token': str
        }

        self.attribute_map = {
            'catalog_id': 'CatalogId',
            'database_name': 'DatabaseName',
            'table_name': 'TableName',
            'transaction_id': 'TransactionId',
            'query_as_of_time': 'QueryAsOfTime',
            'partition_predicate': 'PartitionPredicate',
            'max_results': 'MaxResults',
            'next_token': 'NextToken'
        }

        self._catalog_id = catalog_id
        self._database_name = database_name
        self._table_name = table_name
        self._transaction_id = transaction_id
        self._query_as_of_time = query_as_of_time
        self._partition_predicate = partition_predicate
        self._max_results = max_results
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetTableObjectsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetTableObjects_request of this GetTableObjectsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def catalog_id(self):
        """Gets the catalog_id of this GetTableObjectsRequest.

        The catalog containing the governed table. Defaults to the caller’s account.

        :return: The catalog_id of this GetTableObjectsRequest.
        :rtype: str
        """
        return self._catalog_id

    @catalog_id.setter
    def catalog_id(self, catalog_id):
        """Sets the catalog_id of this GetTableObjectsRequest.

        The catalog containing the governed table. Defaults to the caller’s account.

        :param catalog_id: The catalog_id of this GetTableObjectsRequest.
        :type catalog_id: str
        """
        if catalog_id is not None and len(catalog_id) > 255:
            raise ValueError("Invalid value for `catalog_id`, length must be less than or equal to `255`")
        if catalog_id is not None and len(catalog_id) < 1:
            raise ValueError("Invalid value for `catalog_id`, length must be greater than or equal to `1`")

        self._catalog_id = catalog_id

    @property
    def database_name(self):
        """Gets the database_name of this GetTableObjectsRequest.

        The database containing the governed table.

        :return: The database_name of this GetTableObjectsRequest.
        :rtype: str
        """
        return self._database_name

    @database_name.setter
    def database_name(self, database_name):
        """Sets the database_name of this GetTableObjectsRequest.

        The database containing the governed table.

        :param database_name: The database_name of this GetTableObjectsRequest.
        :type database_name: str
        """
        if database_name is None:
            raise ValueError("Invalid value for `database_name`, must not be `None`")
        if database_name is not None and len(database_name) > 255:
            raise ValueError("Invalid value for `database_name`, length must be less than or equal to `255`")
        if database_name is not None and len(database_name) < 1:
            raise ValueError("Invalid value for `database_name`, length must be greater than or equal to `1`")

        self._database_name = database_name

    @property
    def table_name(self):
        """Gets the table_name of this GetTableObjectsRequest.

        The governed table for which to retrieve objects.

        :return: The table_name of this GetTableObjectsRequest.
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this GetTableObjectsRequest.

        The governed table for which to retrieve objects.

        :param table_name: The table_name of this GetTableObjectsRequest.
        :type table_name: str
        """
        if table_name is None:
            raise ValueError("Invalid value for `table_name`, must not be `None`")
        if table_name is not None and len(table_name) > 255:
            raise ValueError("Invalid value for `table_name`, length must be less than or equal to `255`")
        if table_name is not None and len(table_name) < 1:
            raise ValueError("Invalid value for `table_name`, length must be greater than or equal to `1`")

        self._table_name = table_name

    @property
    def transaction_id(self):
        """Gets the transaction_id of this GetTableObjectsRequest.

        The transaction ID at which to read the governed table contents. If this transaction has aborted, an error is returned. If not set, defaults to the most recent committed transaction. Cannot be specified along with <code>QueryAsOfTime</code>.

        :return: The transaction_id of this GetTableObjectsRequest.
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this GetTableObjectsRequest.

        The transaction ID at which to read the governed table contents. If this transaction has aborted, an error is returned. If not set, defaults to the most recent committed transaction. Cannot be specified along with <code>QueryAsOfTime</code>.

        :param transaction_id: The transaction_id of this GetTableObjectsRequest.
        :type transaction_id: str
        """
        if transaction_id is not None and len(transaction_id) > 255:
            raise ValueError("Invalid value for `transaction_id`, length must be less than or equal to `255`")
        if transaction_id is not None and len(transaction_id) < 1:
            raise ValueError("Invalid value for `transaction_id`, length must be greater than or equal to `1`")
        if transaction_id is not None and not re.search(r'[\p{L}\p{N}\p{P}]*', transaction_id):
            raise ValueError("Invalid value for `transaction_id`, must be a follow pattern or equal to `/[\p{L}\p{N}\p{P}]*/`")

        self._transaction_id = transaction_id

    @property
    def query_as_of_time(self):
        """Gets the query_as_of_time of this GetTableObjectsRequest.

        The time as of when to read the governed table contents. If not set, the most recent transaction commit time is used. Cannot be specified along with <code>TransactionId</code>.

        :return: The query_as_of_time of this GetTableObjectsRequest.
        :rtype: datetime
        """
        return self._query_as_of_time

    @query_as_of_time.setter
    def query_as_of_time(self, query_as_of_time):
        """Sets the query_as_of_time of this GetTableObjectsRequest.

        The time as of when to read the governed table contents. If not set, the most recent transaction commit time is used. Cannot be specified along with <code>TransactionId</code>.

        :param query_as_of_time: The query_as_of_time of this GetTableObjectsRequest.
        :type query_as_of_time: datetime
        """

        self._query_as_of_time = query_as_of_time

    @property
    def partition_predicate(self):
        """Gets the partition_predicate of this GetTableObjectsRequest.

        <p>A predicate to filter the objects returned based on the partition keys defined in the governed table.</p> <ul> <li> <p>The comparison operators supported are: =, &gt;, &lt;, &gt;=, &lt;=</p> </li> <li> <p>The logical operators supported are: AND</p> </li> <li> <p>The data types supported are integer, long, date(yyyy-MM-dd), timestamp(yyyy-MM-dd HH:mm:ssXXX or yyyy-MM-dd HH:mm:ss\"), string and decimal.</p> </li> </ul>

        :return: The partition_predicate of this GetTableObjectsRequest.
        :rtype: str
        """
        return self._partition_predicate

    @partition_predicate.setter
    def partition_predicate(self, partition_predicate):
        """Sets the partition_predicate of this GetTableObjectsRequest.

        <p>A predicate to filter the objects returned based on the partition keys defined in the governed table.</p> <ul> <li> <p>The comparison operators supported are: =, &gt;, &lt;, &gt;=, &lt;=</p> </li> <li> <p>The logical operators supported are: AND</p> </li> <li> <p>The data types supported are integer, long, date(yyyy-MM-dd), timestamp(yyyy-MM-dd HH:mm:ssXXX or yyyy-MM-dd HH:mm:ss\"), string and decimal.</p> </li> </ul>

        :param partition_predicate: The partition_predicate of this GetTableObjectsRequest.
        :type partition_predicate: str
        """
        if partition_predicate is not None and len(partition_predicate) > 2048:
            raise ValueError("Invalid value for `partition_predicate`, length must be less than or equal to `2048`")
        if partition_predicate is not None and len(partition_predicate) < 0:
            raise ValueError("Invalid value for `partition_predicate`, length must be greater than or equal to `0`")

        self._partition_predicate = partition_predicate

    @property
    def max_results(self):
        """Gets the max_results of this GetTableObjectsRequest.

        Specifies how many values to return in a page.

        :return: The max_results of this GetTableObjectsRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this GetTableObjectsRequest.

        Specifies how many values to return in a page.

        :param max_results: The max_results of this GetTableObjectsRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 1000:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `1000`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this GetTableObjectsRequest.

        A continuation token if this is not the first call to retrieve these objects.

        :return: The next_token of this GetTableObjectsRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this GetTableObjectsRequest.

        A continuation token if this is not the first call to retrieve these objects.

        :param next_token: The next_token of this GetTableObjectsRequest.
        :type next_token: str
        """
        if next_token is not None and len(next_token) > 4096:
            raise ValueError("Invalid value for `next_token`, length must be less than or equal to `4096`")

        self._next_token = next_token
