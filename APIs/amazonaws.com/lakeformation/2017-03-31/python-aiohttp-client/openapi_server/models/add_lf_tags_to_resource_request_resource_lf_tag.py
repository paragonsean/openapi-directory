# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AddLFTagsToResourceRequestResourceLFTag(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, catalog_id: str=None, tag_key: str=None, tag_values: List=None):
        """AddLFTagsToResourceRequestResourceLFTag - a model defined in OpenAPI

        :param catalog_id: The catalog_id of this AddLFTagsToResourceRequestResourceLFTag.
        :param tag_key: The tag_key of this AddLFTagsToResourceRequestResourceLFTag.
        :param tag_values: The tag_values of this AddLFTagsToResourceRequestResourceLFTag.
        """
        self.openapi_types = {
            'catalog_id': str,
            'tag_key': str,
            'tag_values': List
        }

        self.attribute_map = {
            'catalog_id': 'CatalogId',
            'tag_key': 'TagKey',
            'tag_values': 'TagValues'
        }

        self._catalog_id = catalog_id
        self._tag_key = tag_key
        self._tag_values = tag_values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddLFTagsToResourceRequestResourceLFTag':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AddLFTagsToResource_request_Resource_LFTag of this AddLFTagsToResourceRequestResourceLFTag.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def catalog_id(self):
        """Gets the catalog_id of this AddLFTagsToResourceRequestResourceLFTag.


        :return: The catalog_id of this AddLFTagsToResourceRequestResourceLFTag.
        :rtype: str
        """
        return self._catalog_id

    @catalog_id.setter
    def catalog_id(self, catalog_id):
        """Sets the catalog_id of this AddLFTagsToResourceRequestResourceLFTag.


        :param catalog_id: The catalog_id of this AddLFTagsToResourceRequestResourceLFTag.
        :type catalog_id: str
        """

        self._catalog_id = catalog_id

    @property
    def tag_key(self):
        """Gets the tag_key of this AddLFTagsToResourceRequestResourceLFTag.


        :return: The tag_key of this AddLFTagsToResourceRequestResourceLFTag.
        :rtype: str
        """
        return self._tag_key

    @tag_key.setter
    def tag_key(self, tag_key):
        """Sets the tag_key of this AddLFTagsToResourceRequestResourceLFTag.


        :param tag_key: The tag_key of this AddLFTagsToResourceRequestResourceLFTag.
        :type tag_key: str
        """
        if tag_key is None:
            raise ValueError("Invalid value for `tag_key`, must not be `None`")

        self._tag_key = tag_key

    @property
    def tag_values(self):
        """Gets the tag_values of this AddLFTagsToResourceRequestResourceLFTag.


        :return: The tag_values of this AddLFTagsToResourceRequestResourceLFTag.
        :rtype: List
        """
        return self._tag_values

    @tag_values.setter
    def tag_values(self, tag_values):
        """Sets the tag_values of this AddLFTagsToResourceRequestResourceLFTag.


        :param tag_values: The tag_values of this AddLFTagsToResourceRequestResourceLFTag.
        :type tag_values: List
        """
        if tag_values is None:
            raise ValueError("Invalid value for `tag_values`, must not be `None`")

        self._tag_values = tag_values
