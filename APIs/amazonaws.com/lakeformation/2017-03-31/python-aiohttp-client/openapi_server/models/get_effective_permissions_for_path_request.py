# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetEffectivePermissionsForPathRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, catalog_id: str=None, resource_arn: str=None, next_token: str=None, max_results: int=None):
        """GetEffectivePermissionsForPathRequest - a model defined in OpenAPI

        :param catalog_id: The catalog_id of this GetEffectivePermissionsForPathRequest.
        :param resource_arn: The resource_arn of this GetEffectivePermissionsForPathRequest.
        :param next_token: The next_token of this GetEffectivePermissionsForPathRequest.
        :param max_results: The max_results of this GetEffectivePermissionsForPathRequest.
        """
        self.openapi_types = {
            'catalog_id': str,
            'resource_arn': str,
            'next_token': str,
            'max_results': int
        }

        self.attribute_map = {
            'catalog_id': 'CatalogId',
            'resource_arn': 'ResourceArn',
            'next_token': 'NextToken',
            'max_results': 'MaxResults'
        }

        self._catalog_id = catalog_id
        self._resource_arn = resource_arn
        self._next_token = next_token
        self._max_results = max_results

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetEffectivePermissionsForPathRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetEffectivePermissionsForPath_request of this GetEffectivePermissionsForPathRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def catalog_id(self):
        """Gets the catalog_id of this GetEffectivePermissionsForPathRequest.

        The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. 

        :return: The catalog_id of this GetEffectivePermissionsForPathRequest.
        :rtype: str
        """
        return self._catalog_id

    @catalog_id.setter
    def catalog_id(self, catalog_id):
        """Sets the catalog_id of this GetEffectivePermissionsForPathRequest.

        The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. 

        :param catalog_id: The catalog_id of this GetEffectivePermissionsForPathRequest.
        :type catalog_id: str
        """
        if catalog_id is not None and len(catalog_id) > 255:
            raise ValueError("Invalid value for `catalog_id`, length must be less than or equal to `255`")
        if catalog_id is not None and len(catalog_id) < 1:
            raise ValueError("Invalid value for `catalog_id`, length must be greater than or equal to `1`")

        self._catalog_id = catalog_id

    @property
    def resource_arn(self):
        """Gets the resource_arn of this GetEffectivePermissionsForPathRequest.

        The Amazon Resource Name (ARN) of the resource for which you want to get permissions.

        :return: The resource_arn of this GetEffectivePermissionsForPathRequest.
        :rtype: str
        """
        return self._resource_arn

    @resource_arn.setter
    def resource_arn(self, resource_arn):
        """Sets the resource_arn of this GetEffectivePermissionsForPathRequest.

        The Amazon Resource Name (ARN) of the resource for which you want to get permissions.

        :param resource_arn: The resource_arn of this GetEffectivePermissionsForPathRequest.
        :type resource_arn: str
        """
        if resource_arn is None:
            raise ValueError("Invalid value for `resource_arn`, must not be `None`")

        self._resource_arn = resource_arn

    @property
    def next_token(self):
        """Gets the next_token of this GetEffectivePermissionsForPathRequest.

        A continuation token, if this is not the first call to retrieve this list.

        :return: The next_token of this GetEffectivePermissionsForPathRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this GetEffectivePermissionsForPathRequest.

        A continuation token, if this is not the first call to retrieve this list.

        :param next_token: The next_token of this GetEffectivePermissionsForPathRequest.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def max_results(self):
        """Gets the max_results of this GetEffectivePermissionsForPathRequest.

        The maximum number of results to return.

        :return: The max_results of this GetEffectivePermissionsForPathRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this GetEffectivePermissionsForPathRequest.

        The maximum number of results to return.

        :param max_results: The max_results of this GetEffectivePermissionsForPathRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 1000:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `1000`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results
