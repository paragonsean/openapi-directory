# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.comparison_operator import ComparisonOperator
from openapi_server.models.field_name_string import FieldNameString
from openapi_server import util


class FilterCondition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _field: FieldNameString=None, comparison_operator: ComparisonOperator=None, string_value_list: List=None):
        """FilterCondition - a model defined in OpenAPI

        :param _field: The _field of this FilterCondition.
        :param comparison_operator: The comparison_operator of this FilterCondition.
        :param string_value_list: The string_value_list of this FilterCondition.
        """
        self.openapi_types = {
            '_field': FieldNameString,
            'comparison_operator': ComparisonOperator,
            'string_value_list': List
        }

        self.attribute_map = {
            '_field': 'Field',
            'comparison_operator': 'ComparisonOperator',
            'string_value_list': 'StringValueList'
        }

        self.__field = _field
        self._comparison_operator = comparison_operator
        self._string_value_list = string_value_list

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FilterCondition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FilterCondition of this FilterCondition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _field(self):
        """Gets the _field of this FilterCondition.


        :return: The _field of this FilterCondition.
        :rtype: FieldNameString
        """
        return self.__field

    @_field.setter
    def _field(self, _field):
        """Sets the _field of this FilterCondition.


        :param _field: The _field of this FilterCondition.
        :type _field: FieldNameString
        """

        self.__field = _field

    @property
    def comparison_operator(self):
        """Gets the comparison_operator of this FilterCondition.


        :return: The comparison_operator of this FilterCondition.
        :rtype: ComparisonOperator
        """
        return self._comparison_operator

    @comparison_operator.setter
    def comparison_operator(self, comparison_operator):
        """Sets the comparison_operator of this FilterCondition.


        :param comparison_operator: The comparison_operator of this FilterCondition.
        :type comparison_operator: ComparisonOperator
        """

        self._comparison_operator = comparison_operator

    @property
    def string_value_list(self):
        """Gets the string_value_list of this FilterCondition.


        :return: The string_value_list of this FilterCondition.
        :rtype: List
        """
        return self._string_value_list

    @string_value_list.setter
    def string_value_list(self, string_value_list):
        """Sets the string_value_list of this FilterCondition.


        :param string_value_list: The string_value_list of this FilterCondition.
        :type string_value_list: List
        """

        self._string_value_list = string_value_list
