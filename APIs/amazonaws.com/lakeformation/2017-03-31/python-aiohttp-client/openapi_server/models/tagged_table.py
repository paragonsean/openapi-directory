# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tagged_table_table import TaggedTableTable
from openapi_server import util


class TaggedTable(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, table: TaggedTableTable=None, lf_tag_on_database: List=None, lf_tags_on_table: List=None, lf_tags_on_columns: List=None):
        """TaggedTable - a model defined in OpenAPI

        :param table: The table of this TaggedTable.
        :param lf_tag_on_database: The lf_tag_on_database of this TaggedTable.
        :param lf_tags_on_table: The lf_tags_on_table of this TaggedTable.
        :param lf_tags_on_columns: The lf_tags_on_columns of this TaggedTable.
        """
        self.openapi_types = {
            'table': TaggedTableTable,
            'lf_tag_on_database': List,
            'lf_tags_on_table': List,
            'lf_tags_on_columns': List
        }

        self.attribute_map = {
            'table': 'Table',
            'lf_tag_on_database': 'LFTagOnDatabase',
            'lf_tags_on_table': 'LFTagsOnTable',
            'lf_tags_on_columns': 'LFTagsOnColumns'
        }

        self._table = table
        self._lf_tag_on_database = lf_tag_on_database
        self._lf_tags_on_table = lf_tags_on_table
        self._lf_tags_on_columns = lf_tags_on_columns

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaggedTable':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TaggedTable of this TaggedTable.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def table(self):
        """Gets the table of this TaggedTable.


        :return: The table of this TaggedTable.
        :rtype: TaggedTableTable
        """
        return self._table

    @table.setter
    def table(self, table):
        """Sets the table of this TaggedTable.


        :param table: The table of this TaggedTable.
        :type table: TaggedTableTable
        """

        self._table = table

    @property
    def lf_tag_on_database(self):
        """Gets the lf_tag_on_database of this TaggedTable.


        :return: The lf_tag_on_database of this TaggedTable.
        :rtype: List
        """
        return self._lf_tag_on_database

    @lf_tag_on_database.setter
    def lf_tag_on_database(self, lf_tag_on_database):
        """Sets the lf_tag_on_database of this TaggedTable.


        :param lf_tag_on_database: The lf_tag_on_database of this TaggedTable.
        :type lf_tag_on_database: List
        """

        self._lf_tag_on_database = lf_tag_on_database

    @property
    def lf_tags_on_table(self):
        """Gets the lf_tags_on_table of this TaggedTable.


        :return: The lf_tags_on_table of this TaggedTable.
        :rtype: List
        """
        return self._lf_tags_on_table

    @lf_tags_on_table.setter
    def lf_tags_on_table(self, lf_tags_on_table):
        """Sets the lf_tags_on_table of this TaggedTable.


        :param lf_tags_on_table: The lf_tags_on_table of this TaggedTable.
        :type lf_tags_on_table: List
        """

        self._lf_tags_on_table = lf_tags_on_table

    @property
    def lf_tags_on_columns(self):
        """Gets the lf_tags_on_columns of this TaggedTable.


        :return: The lf_tags_on_columns of this TaggedTable.
        :rtype: List
        """
        return self._lf_tags_on_columns

    @lf_tags_on_columns.setter
    def lf_tags_on_columns(self, lf_tags_on_columns):
        """Sets the lf_tags_on_columns of this TaggedTable.


        :param lf_tags_on_columns: The lf_tags_on_columns of this TaggedTable.
        :type lf_tags_on_columns: List
        """

        self._lf_tags_on_columns = lf_tags_on_columns
