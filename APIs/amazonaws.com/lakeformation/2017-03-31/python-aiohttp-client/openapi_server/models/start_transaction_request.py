# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StartTransactionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, transaction_type: str=None):
        """StartTransactionRequest - a model defined in OpenAPI

        :param transaction_type: The transaction_type of this StartTransactionRequest.
        """
        self.openapi_types = {
            'transaction_type': str
        }

        self.attribute_map = {
            'transaction_type': 'TransactionType'
        }

        self._transaction_type = transaction_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartTransactionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartTransaction_request of this StartTransactionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def transaction_type(self):
        """Gets the transaction_type of this StartTransactionRequest.

        Indicates whether this transaction should be read only or read and write. Writes made using a read-only transaction ID will be rejected. Read-only transactions do not need to be committed. 

        :return: The transaction_type of this StartTransactionRequest.
        :rtype: str
        """
        return self._transaction_type

    @transaction_type.setter
    def transaction_type(self, transaction_type):
        """Sets the transaction_type of this StartTransactionRequest.

        Indicates whether this transaction should be read only or read and write. Writes made using a read-only transaction ID will be rejected. Read-only transactions do not need to be committed. 

        :param transaction_type: The transaction_type of this StartTransactionRequest.
        :type transaction_type: str
        """
        allowed_values = ["READ_AND_WRITE", "READ_ONLY"]  # noqa: E501
        if transaction_type not in allowed_values:
            raise ValueError(
                "Invalid value for `transaction_type` ({0}), must be one of {1}"
                .format(transaction_type, allowed_values)
            )

        self._transaction_type = transaction_type
