# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.add_lf_tags_to_resource_request_resource import AddLFTagsToResourceRequestResource
from openapi_server.models.grant_permissions_request_principal import GrantPermissionsRequestPrincipal
from openapi_server.models.permission import Permission
from openapi_server import util


class RevokePermissionsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, catalog_id: str=None, principal: GrantPermissionsRequestPrincipal=None, resource: AddLFTagsToResourceRequestResource=None, permissions: List[Permission]=None, permissions_with_grant_option: List[Permission]=None):
        """RevokePermissionsRequest - a model defined in OpenAPI

        :param catalog_id: The catalog_id of this RevokePermissionsRequest.
        :param principal: The principal of this RevokePermissionsRequest.
        :param resource: The resource of this RevokePermissionsRequest.
        :param permissions: The permissions of this RevokePermissionsRequest.
        :param permissions_with_grant_option: The permissions_with_grant_option of this RevokePermissionsRequest.
        """
        self.openapi_types = {
            'catalog_id': str,
            'principal': GrantPermissionsRequestPrincipal,
            'resource': AddLFTagsToResourceRequestResource,
            'permissions': List[Permission],
            'permissions_with_grant_option': List[Permission]
        }

        self.attribute_map = {
            'catalog_id': 'CatalogId',
            'principal': 'Principal',
            'resource': 'Resource',
            'permissions': 'Permissions',
            'permissions_with_grant_option': 'PermissionsWithGrantOption'
        }

        self._catalog_id = catalog_id
        self._principal = principal
        self._resource = resource
        self._permissions = permissions
        self._permissions_with_grant_option = permissions_with_grant_option

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RevokePermissionsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RevokePermissions_request of this RevokePermissionsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def catalog_id(self):
        """Gets the catalog_id of this RevokePermissionsRequest.

        The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. 

        :return: The catalog_id of this RevokePermissionsRequest.
        :rtype: str
        """
        return self._catalog_id

    @catalog_id.setter
    def catalog_id(self, catalog_id):
        """Sets the catalog_id of this RevokePermissionsRequest.

        The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. 

        :param catalog_id: The catalog_id of this RevokePermissionsRequest.
        :type catalog_id: str
        """
        if catalog_id is not None and len(catalog_id) > 255:
            raise ValueError("Invalid value for `catalog_id`, length must be less than or equal to `255`")
        if catalog_id is not None and len(catalog_id) < 1:
            raise ValueError("Invalid value for `catalog_id`, length must be greater than or equal to `1`")

        self._catalog_id = catalog_id

    @property
    def principal(self):
        """Gets the principal of this RevokePermissionsRequest.


        :return: The principal of this RevokePermissionsRequest.
        :rtype: GrantPermissionsRequestPrincipal
        """
        return self._principal

    @principal.setter
    def principal(self, principal):
        """Sets the principal of this RevokePermissionsRequest.


        :param principal: The principal of this RevokePermissionsRequest.
        :type principal: GrantPermissionsRequestPrincipal
        """
        if principal is None:
            raise ValueError("Invalid value for `principal`, must not be `None`")

        self._principal = principal

    @property
    def resource(self):
        """Gets the resource of this RevokePermissionsRequest.


        :return: The resource of this RevokePermissionsRequest.
        :rtype: AddLFTagsToResourceRequestResource
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this RevokePermissionsRequest.


        :param resource: The resource of this RevokePermissionsRequest.
        :type resource: AddLFTagsToResourceRequestResource
        """
        if resource is None:
            raise ValueError("Invalid value for `resource`, must not be `None`")

        self._resource = resource

    @property
    def permissions(self):
        """Gets the permissions of this RevokePermissionsRequest.

        The permissions revoked to the principal on the resource. For information about permissions, see <a href=\"https://docs.aws.amazon.com/lake-formation/latest/dg/security-data-access.html\">Security and Access Control to Metadata and Data</a>.

        :return: The permissions of this RevokePermissionsRequest.
        :rtype: List[Permission]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this RevokePermissionsRequest.

        The permissions revoked to the principal on the resource. For information about permissions, see <a href=\"https://docs.aws.amazon.com/lake-formation/latest/dg/security-data-access.html\">Security and Access Control to Metadata and Data</a>.

        :param permissions: The permissions of this RevokePermissionsRequest.
        :type permissions: List[Permission]
        """
        if permissions is None:
            raise ValueError("Invalid value for `permissions`, must not be `None`")

        self._permissions = permissions

    @property
    def permissions_with_grant_option(self):
        """Gets the permissions_with_grant_option of this RevokePermissionsRequest.

        Indicates a list of permissions for which to revoke the grant option allowing the principal to pass permissions to other principals.

        :return: The permissions_with_grant_option of this RevokePermissionsRequest.
        :rtype: List[Permission]
        """
        return self._permissions_with_grant_option

    @permissions_with_grant_option.setter
    def permissions_with_grant_option(self, permissions_with_grant_option):
        """Sets the permissions_with_grant_option of this RevokePermissionsRequest.

        Indicates a list of permissions for which to revoke the grant option allowing the principal to pass permissions to other principals.

        :param permissions_with_grant_option: The permissions_with_grant_option of this RevokePermissionsRequest.
        :type permissions_with_grant_option: List[Permission]
        """

        self._permissions_with_grant_option = permissions_with_grant_option
