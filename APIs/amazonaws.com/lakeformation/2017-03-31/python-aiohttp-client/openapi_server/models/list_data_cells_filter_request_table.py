# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListDataCellsFilterRequestTable(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, catalog_id: str=None, database_name: str=None, name: str=None, table_wildcard: object=None):
        """ListDataCellsFilterRequestTable - a model defined in OpenAPI

        :param catalog_id: The catalog_id of this ListDataCellsFilterRequestTable.
        :param database_name: The database_name of this ListDataCellsFilterRequestTable.
        :param name: The name of this ListDataCellsFilterRequestTable.
        :param table_wildcard: The table_wildcard of this ListDataCellsFilterRequestTable.
        """
        self.openapi_types = {
            'catalog_id': str,
            'database_name': str,
            'name': str,
            'table_wildcard': object
        }

        self.attribute_map = {
            'catalog_id': 'CatalogId',
            'database_name': 'DatabaseName',
            'name': 'Name',
            'table_wildcard': 'TableWildcard'
        }

        self._catalog_id = catalog_id
        self._database_name = database_name
        self._name = name
        self._table_wildcard = table_wildcard

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListDataCellsFilterRequestTable':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListDataCellsFilterRequest_Table of this ListDataCellsFilterRequestTable.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def catalog_id(self):
        """Gets the catalog_id of this ListDataCellsFilterRequestTable.


        :return: The catalog_id of this ListDataCellsFilterRequestTable.
        :rtype: str
        """
        return self._catalog_id

    @catalog_id.setter
    def catalog_id(self, catalog_id):
        """Sets the catalog_id of this ListDataCellsFilterRequestTable.


        :param catalog_id: The catalog_id of this ListDataCellsFilterRequestTable.
        :type catalog_id: str
        """

        self._catalog_id = catalog_id

    @property
    def database_name(self):
        """Gets the database_name of this ListDataCellsFilterRequestTable.


        :return: The database_name of this ListDataCellsFilterRequestTable.
        :rtype: str
        """
        return self._database_name

    @database_name.setter
    def database_name(self, database_name):
        """Sets the database_name of this ListDataCellsFilterRequestTable.


        :param database_name: The database_name of this ListDataCellsFilterRequestTable.
        :type database_name: str
        """
        if database_name is None:
            raise ValueError("Invalid value for `database_name`, must not be `None`")

        self._database_name = database_name

    @property
    def name(self):
        """Gets the name of this ListDataCellsFilterRequestTable.


        :return: The name of this ListDataCellsFilterRequestTable.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ListDataCellsFilterRequestTable.


        :param name: The name of this ListDataCellsFilterRequestTable.
        :type name: str
        """

        self._name = name

    @property
    def table_wildcard(self):
        """Gets the table_wildcard of this ListDataCellsFilterRequestTable.


        :return: The table_wildcard of this ListDataCellsFilterRequestTable.
        :rtype: object
        """
        return self._table_wildcard

    @table_wildcard.setter
    def table_wildcard(self, table_wildcard):
        """Sets the table_wildcard of this ListDataCellsFilterRequestTable.


        :param table_wildcard: The table_wildcard of this ListDataCellsFilterRequestTable.
        :type table_wildcard: object
        """

        self._table_wildcard = table_wildcard
