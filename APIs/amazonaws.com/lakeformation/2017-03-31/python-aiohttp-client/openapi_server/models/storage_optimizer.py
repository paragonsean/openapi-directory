# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.optimizer_type import OptimizerType
from openapi_server import util


class StorageOptimizer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, storage_optimizer_type: OptimizerType=None, config: Dict=None, error_message: str=None, warnings: str=None, last_run_details: str=None):
        """StorageOptimizer - a model defined in OpenAPI

        :param storage_optimizer_type: The storage_optimizer_type of this StorageOptimizer.
        :param config: The config of this StorageOptimizer.
        :param error_message: The error_message of this StorageOptimizer.
        :param warnings: The warnings of this StorageOptimizer.
        :param last_run_details: The last_run_details of this StorageOptimizer.
        """
        self.openapi_types = {
            'storage_optimizer_type': OptimizerType,
            'config': Dict,
            'error_message': str,
            'warnings': str,
            'last_run_details': str
        }

        self.attribute_map = {
            'storage_optimizer_type': 'StorageOptimizerType',
            'config': 'Config',
            'error_message': 'ErrorMessage',
            'warnings': 'Warnings',
            'last_run_details': 'LastRunDetails'
        }

        self._storage_optimizer_type = storage_optimizer_type
        self._config = config
        self._error_message = error_message
        self._warnings = warnings
        self._last_run_details = last_run_details

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StorageOptimizer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StorageOptimizer of this StorageOptimizer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def storage_optimizer_type(self):
        """Gets the storage_optimizer_type of this StorageOptimizer.


        :return: The storage_optimizer_type of this StorageOptimizer.
        :rtype: OptimizerType
        """
        return self._storage_optimizer_type

    @storage_optimizer_type.setter
    def storage_optimizer_type(self, storage_optimizer_type):
        """Sets the storage_optimizer_type of this StorageOptimizer.


        :param storage_optimizer_type: The storage_optimizer_type of this StorageOptimizer.
        :type storage_optimizer_type: OptimizerType
        """

        self._storage_optimizer_type = storage_optimizer_type

    @property
    def config(self):
        """Gets the config of this StorageOptimizer.


        :return: The config of this StorageOptimizer.
        :rtype: Dict
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this StorageOptimizer.


        :param config: The config of this StorageOptimizer.
        :type config: Dict
        """

        self._config = config

    @property
    def error_message(self):
        """Gets the error_message of this StorageOptimizer.


        :return: The error_message of this StorageOptimizer.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this StorageOptimizer.


        :param error_message: The error_message of this StorageOptimizer.
        :type error_message: str
        """

        self._error_message = error_message

    @property
    def warnings(self):
        """Gets the warnings of this StorageOptimizer.


        :return: The warnings of this StorageOptimizer.
        :rtype: str
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this StorageOptimizer.


        :param warnings: The warnings of this StorageOptimizer.
        :type warnings: str
        """

        self._warnings = warnings

    @property
    def last_run_details(self):
        """Gets the last_run_details of this StorageOptimizer.


        :return: The last_run_details of this StorageOptimizer.
        :rtype: str
        """
        return self._last_run_details

    @last_run_details.setter
    def last_run_details(self, last_run_details):
        """Sets the last_run_details of this StorageOptimizer.


        :param last_run_details: The last_run_details of this StorageOptimizer.
        :type last_run_details: str
        """

        self._last_run_details = last_run_details
