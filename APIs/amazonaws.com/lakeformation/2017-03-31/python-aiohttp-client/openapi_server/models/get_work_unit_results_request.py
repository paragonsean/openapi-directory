# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetWorkUnitResultsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, query_id: str=None, work_unit_id: int=None, work_unit_token: str=None):
        """GetWorkUnitResultsRequest - a model defined in OpenAPI

        :param query_id: The query_id of this GetWorkUnitResultsRequest.
        :param work_unit_id: The work_unit_id of this GetWorkUnitResultsRequest.
        :param work_unit_token: The work_unit_token of this GetWorkUnitResultsRequest.
        """
        self.openapi_types = {
            'query_id': str,
            'work_unit_id': int,
            'work_unit_token': str
        }

        self.attribute_map = {
            'query_id': 'QueryId',
            'work_unit_id': 'WorkUnitId',
            'work_unit_token': 'WorkUnitToken'
        }

        self._query_id = query_id
        self._work_unit_id = work_unit_id
        self._work_unit_token = work_unit_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetWorkUnitResultsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetWorkUnitResults_request of this GetWorkUnitResultsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def query_id(self):
        """Gets the query_id of this GetWorkUnitResultsRequest.

        The ID of the plan query operation for which to get results.

        :return: The query_id of this GetWorkUnitResultsRequest.
        :rtype: str
        """
        return self._query_id

    @query_id.setter
    def query_id(self, query_id):
        """Sets the query_id of this GetWorkUnitResultsRequest.

        The ID of the plan query operation for which to get results.

        :param query_id: The query_id of this GetWorkUnitResultsRequest.
        :type query_id: str
        """
        if query_id is None:
            raise ValueError("Invalid value for `query_id`, must not be `None`")
        if query_id is not None and len(query_id) > 36:
            raise ValueError("Invalid value for `query_id`, length must be less than or equal to `36`")
        if query_id is not None and len(query_id) < 36:
            raise ValueError("Invalid value for `query_id`, length must be greater than or equal to `36`")

        self._query_id = query_id

    @property
    def work_unit_id(self):
        """Gets the work_unit_id of this GetWorkUnitResultsRequest.

        The work unit ID for which to get results. Value generated by enumerating <code>WorkUnitIdMin</code> to <code>WorkUnitIdMax</code> (inclusive) from the <code>WorkUnitRange</code> in the output of <code>GetWorkUnits</code>.

        :return: The work_unit_id of this GetWorkUnitResultsRequest.
        :rtype: int
        """
        return self._work_unit_id

    @work_unit_id.setter
    def work_unit_id(self, work_unit_id):
        """Sets the work_unit_id of this GetWorkUnitResultsRequest.

        The work unit ID for which to get results. Value generated by enumerating <code>WorkUnitIdMin</code> to <code>WorkUnitIdMax</code> (inclusive) from the <code>WorkUnitRange</code> in the output of <code>GetWorkUnits</code>.

        :param work_unit_id: The work_unit_id of this GetWorkUnitResultsRequest.
        :type work_unit_id: int
        """
        if work_unit_id is None:
            raise ValueError("Invalid value for `work_unit_id`, must not be `None`")
        if work_unit_id is not None and work_unit_id < 0:
            raise ValueError("Invalid value for `work_unit_id`, must be a value greater than or equal to `0`")

        self._work_unit_id = work_unit_id

    @property
    def work_unit_token(self):
        """Gets the work_unit_token of this GetWorkUnitResultsRequest.

        A work token used to query the execution service. Token output from <code>GetWorkUnits</code>.

        :return: The work_unit_token of this GetWorkUnitResultsRequest.
        :rtype: str
        """
        return self._work_unit_token

    @work_unit_token.setter
    def work_unit_token(self, work_unit_token):
        """Sets the work_unit_token of this GetWorkUnitResultsRequest.

        A work token used to query the execution service. Token output from <code>GetWorkUnits</code>.

        :param work_unit_token: The work_unit_token of this GetWorkUnitResultsRequest.
        :type work_unit_token: str
        """
        if work_unit_token is None:
            raise ValueError("Invalid value for `work_unit_token`, must not be `None`")
        if work_unit_token is not None and len(work_unit_token) < 1:
            raise ValueError("Invalid value for `work_unit_token`, length must be greater than or equal to `1`")

        self._work_unit_token = work_unit_token
