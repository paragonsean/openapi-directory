# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.put_data_lake_settings_request_data_lake_settings import PutDataLakeSettingsRequestDataLakeSettings
from openapi_server import util


class PutDataLakeSettingsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, catalog_id: str=None, data_lake_settings: PutDataLakeSettingsRequestDataLakeSettings=None):
        """PutDataLakeSettingsRequest - a model defined in OpenAPI

        :param catalog_id: The catalog_id of this PutDataLakeSettingsRequest.
        :param data_lake_settings: The data_lake_settings of this PutDataLakeSettingsRequest.
        """
        self.openapi_types = {
            'catalog_id': str,
            'data_lake_settings': PutDataLakeSettingsRequestDataLakeSettings
        }

        self.attribute_map = {
            'catalog_id': 'CatalogId',
            'data_lake_settings': 'DataLakeSettings'
        }

        self._catalog_id = catalog_id
        self._data_lake_settings = data_lake_settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutDataLakeSettingsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutDataLakeSettings_request of this PutDataLakeSettingsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def catalog_id(self):
        """Gets the catalog_id of this PutDataLakeSettingsRequest.

        The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. 

        :return: The catalog_id of this PutDataLakeSettingsRequest.
        :rtype: str
        """
        return self._catalog_id

    @catalog_id.setter
    def catalog_id(self, catalog_id):
        """Sets the catalog_id of this PutDataLakeSettingsRequest.

        The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. 

        :param catalog_id: The catalog_id of this PutDataLakeSettingsRequest.
        :type catalog_id: str
        """
        if catalog_id is not None and len(catalog_id) > 255:
            raise ValueError("Invalid value for `catalog_id`, length must be less than or equal to `255`")
        if catalog_id is not None and len(catalog_id) < 1:
            raise ValueError("Invalid value for `catalog_id`, length must be greater than or equal to `1`")

        self._catalog_id = catalog_id

    @property
    def data_lake_settings(self):
        """Gets the data_lake_settings of this PutDataLakeSettingsRequest.


        :return: The data_lake_settings of this PutDataLakeSettingsRequest.
        :rtype: PutDataLakeSettingsRequestDataLakeSettings
        """
        return self._data_lake_settings

    @data_lake_settings.setter
    def data_lake_settings(self, data_lake_settings):
        """Sets the data_lake_settings of this PutDataLakeSettingsRequest.


        :param data_lake_settings: The data_lake_settings of this PutDataLakeSettingsRequest.
        :type data_lake_settings: PutDataLakeSettingsRequestDataLakeSettings
        """
        if data_lake_settings is None:
            raise ValueError("Invalid value for `data_lake_settings`, must not be `None`")

        self._data_lake_settings = data_lake_settings
