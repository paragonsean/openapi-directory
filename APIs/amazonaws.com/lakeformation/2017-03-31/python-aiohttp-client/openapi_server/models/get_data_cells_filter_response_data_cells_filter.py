# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_data_cells_filter_request_table_data_column_wildcard import CreateDataCellsFilterRequestTableDataColumnWildcard
from openapi_server.models.create_data_cells_filter_request_table_data_row_filter import CreateDataCellsFilterRequestTableDataRowFilter
from openapi_server import util


class GetDataCellsFilterResponseDataCellsFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, table_catalog_id: str=None, database_name: str=None, table_name: str=None, name: str=None, row_filter: CreateDataCellsFilterRequestTableDataRowFilter=None, column_names: List=None, column_wildcard: CreateDataCellsFilterRequestTableDataColumnWildcard=None, version_id: str=None):
        """GetDataCellsFilterResponseDataCellsFilter - a model defined in OpenAPI

        :param table_catalog_id: The table_catalog_id of this GetDataCellsFilterResponseDataCellsFilter.
        :param database_name: The database_name of this GetDataCellsFilterResponseDataCellsFilter.
        :param table_name: The table_name of this GetDataCellsFilterResponseDataCellsFilter.
        :param name: The name of this GetDataCellsFilterResponseDataCellsFilter.
        :param row_filter: The row_filter of this GetDataCellsFilterResponseDataCellsFilter.
        :param column_names: The column_names of this GetDataCellsFilterResponseDataCellsFilter.
        :param column_wildcard: The column_wildcard of this GetDataCellsFilterResponseDataCellsFilter.
        :param version_id: The version_id of this GetDataCellsFilterResponseDataCellsFilter.
        """
        self.openapi_types = {
            'table_catalog_id': str,
            'database_name': str,
            'table_name': str,
            'name': str,
            'row_filter': CreateDataCellsFilterRequestTableDataRowFilter,
            'column_names': List,
            'column_wildcard': CreateDataCellsFilterRequestTableDataColumnWildcard,
            'version_id': str
        }

        self.attribute_map = {
            'table_catalog_id': 'TableCatalogId',
            'database_name': 'DatabaseName',
            'table_name': 'TableName',
            'name': 'Name',
            'row_filter': 'RowFilter',
            'column_names': 'ColumnNames',
            'column_wildcard': 'ColumnWildcard',
            'version_id': 'VersionId'
        }

        self._table_catalog_id = table_catalog_id
        self._database_name = database_name
        self._table_name = table_name
        self._name = name
        self._row_filter = row_filter
        self._column_names = column_names
        self._column_wildcard = column_wildcard
        self._version_id = version_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetDataCellsFilterResponseDataCellsFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetDataCellsFilterResponse_DataCellsFilter of this GetDataCellsFilterResponseDataCellsFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def table_catalog_id(self):
        """Gets the table_catalog_id of this GetDataCellsFilterResponseDataCellsFilter.


        :return: The table_catalog_id of this GetDataCellsFilterResponseDataCellsFilter.
        :rtype: str
        """
        return self._table_catalog_id

    @table_catalog_id.setter
    def table_catalog_id(self, table_catalog_id):
        """Sets the table_catalog_id of this GetDataCellsFilterResponseDataCellsFilter.


        :param table_catalog_id: The table_catalog_id of this GetDataCellsFilterResponseDataCellsFilter.
        :type table_catalog_id: str
        """
        if table_catalog_id is None:
            raise ValueError("Invalid value for `table_catalog_id`, must not be `None`")

        self._table_catalog_id = table_catalog_id

    @property
    def database_name(self):
        """Gets the database_name of this GetDataCellsFilterResponseDataCellsFilter.


        :return: The database_name of this GetDataCellsFilterResponseDataCellsFilter.
        :rtype: str
        """
        return self._database_name

    @database_name.setter
    def database_name(self, database_name):
        """Sets the database_name of this GetDataCellsFilterResponseDataCellsFilter.


        :param database_name: The database_name of this GetDataCellsFilterResponseDataCellsFilter.
        :type database_name: str
        """
        if database_name is None:
            raise ValueError("Invalid value for `database_name`, must not be `None`")

        self._database_name = database_name

    @property
    def table_name(self):
        """Gets the table_name of this GetDataCellsFilterResponseDataCellsFilter.


        :return: The table_name of this GetDataCellsFilterResponseDataCellsFilter.
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this GetDataCellsFilterResponseDataCellsFilter.


        :param table_name: The table_name of this GetDataCellsFilterResponseDataCellsFilter.
        :type table_name: str
        """
        if table_name is None:
            raise ValueError("Invalid value for `table_name`, must not be `None`")

        self._table_name = table_name

    @property
    def name(self):
        """Gets the name of this GetDataCellsFilterResponseDataCellsFilter.


        :return: The name of this GetDataCellsFilterResponseDataCellsFilter.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetDataCellsFilterResponseDataCellsFilter.


        :param name: The name of this GetDataCellsFilterResponseDataCellsFilter.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def row_filter(self):
        """Gets the row_filter of this GetDataCellsFilterResponseDataCellsFilter.


        :return: The row_filter of this GetDataCellsFilterResponseDataCellsFilter.
        :rtype: CreateDataCellsFilterRequestTableDataRowFilter
        """
        return self._row_filter

    @row_filter.setter
    def row_filter(self, row_filter):
        """Sets the row_filter of this GetDataCellsFilterResponseDataCellsFilter.


        :param row_filter: The row_filter of this GetDataCellsFilterResponseDataCellsFilter.
        :type row_filter: CreateDataCellsFilterRequestTableDataRowFilter
        """

        self._row_filter = row_filter

    @property
    def column_names(self):
        """Gets the column_names of this GetDataCellsFilterResponseDataCellsFilter.


        :return: The column_names of this GetDataCellsFilterResponseDataCellsFilter.
        :rtype: List
        """
        return self._column_names

    @column_names.setter
    def column_names(self, column_names):
        """Sets the column_names of this GetDataCellsFilterResponseDataCellsFilter.


        :param column_names: The column_names of this GetDataCellsFilterResponseDataCellsFilter.
        :type column_names: List
        """

        self._column_names = column_names

    @property
    def column_wildcard(self):
        """Gets the column_wildcard of this GetDataCellsFilterResponseDataCellsFilter.


        :return: The column_wildcard of this GetDataCellsFilterResponseDataCellsFilter.
        :rtype: CreateDataCellsFilterRequestTableDataColumnWildcard
        """
        return self._column_wildcard

    @column_wildcard.setter
    def column_wildcard(self, column_wildcard):
        """Sets the column_wildcard of this GetDataCellsFilterResponseDataCellsFilter.


        :param column_wildcard: The column_wildcard of this GetDataCellsFilterResponseDataCellsFilter.
        :type column_wildcard: CreateDataCellsFilterRequestTableDataColumnWildcard
        """

        self._column_wildcard = column_wildcard

    @property
    def version_id(self):
        """Gets the version_id of this GetDataCellsFilterResponseDataCellsFilter.


        :return: The version_id of this GetDataCellsFilterResponseDataCellsFilter.
        :rtype: str
        """
        return self._version_id

    @version_id.setter
    def version_id(self, version_id):
        """Sets the version_id of this GetDataCellsFilterResponseDataCellsFilter.


        :param version_id: The version_id of this GetDataCellsFilterResponseDataCellsFilter.
        :type version_id: str
        """

        self._version_id = version_id
