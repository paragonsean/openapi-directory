# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListLFTagsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, catalog_id: str=None, resource_share_type: str=None, max_results: int=None, next_token: str=None):
        """ListLFTagsRequest - a model defined in OpenAPI

        :param catalog_id: The catalog_id of this ListLFTagsRequest.
        :param resource_share_type: The resource_share_type of this ListLFTagsRequest.
        :param max_results: The max_results of this ListLFTagsRequest.
        :param next_token: The next_token of this ListLFTagsRequest.
        """
        self.openapi_types = {
            'catalog_id': str,
            'resource_share_type': str,
            'max_results': int,
            'next_token': str
        }

        self.attribute_map = {
            'catalog_id': 'CatalogId',
            'resource_share_type': 'ResourceShareType',
            'max_results': 'MaxResults',
            'next_token': 'NextToken'
        }

        self._catalog_id = catalog_id
        self._resource_share_type = resource_share_type
        self._max_results = max_results
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListLFTagsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListLFTags_request of this ListLFTagsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def catalog_id(self):
        """Gets the catalog_id of this ListLFTagsRequest.

        The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. 

        :return: The catalog_id of this ListLFTagsRequest.
        :rtype: str
        """
        return self._catalog_id

    @catalog_id.setter
    def catalog_id(self, catalog_id):
        """Sets the catalog_id of this ListLFTagsRequest.

        The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. 

        :param catalog_id: The catalog_id of this ListLFTagsRequest.
        :type catalog_id: str
        """
        if catalog_id is not None and len(catalog_id) > 255:
            raise ValueError("Invalid value for `catalog_id`, length must be less than or equal to `255`")
        if catalog_id is not None and len(catalog_id) < 1:
            raise ValueError("Invalid value for `catalog_id`, length must be greater than or equal to `1`")

        self._catalog_id = catalog_id

    @property
    def resource_share_type(self):
        """Gets the resource_share_type of this ListLFTagsRequest.

        If resource share type is <code>ALL</code>, returns both in-account LF-tags and shared LF-tags that the requester has permission to view. If resource share type is <code>FOREIGN</code>, returns all share LF-tags that the requester can view. If no resource share type is passed, lists LF-tags in the given catalog ID that the requester has permission to view.

        :return: The resource_share_type of this ListLFTagsRequest.
        :rtype: str
        """
        return self._resource_share_type

    @resource_share_type.setter
    def resource_share_type(self, resource_share_type):
        """Sets the resource_share_type of this ListLFTagsRequest.

        If resource share type is <code>ALL</code>, returns both in-account LF-tags and shared LF-tags that the requester has permission to view. If resource share type is <code>FOREIGN</code>, returns all share LF-tags that the requester can view. If no resource share type is passed, lists LF-tags in the given catalog ID that the requester has permission to view.

        :param resource_share_type: The resource_share_type of this ListLFTagsRequest.
        :type resource_share_type: str
        """
        allowed_values = ["FOREIGN", "ALL"]  # noqa: E501
        if resource_share_type not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_share_type` ({0}), must be one of {1}"
                .format(resource_share_type, allowed_values)
            )

        self._resource_share_type = resource_share_type

    @property
    def max_results(self):
        """Gets the max_results of this ListLFTagsRequest.

        The maximum number of results to return.

        :return: The max_results of this ListLFTagsRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListLFTagsRequest.

        The maximum number of results to return.

        :param max_results: The max_results of this ListLFTagsRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 1000:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `1000`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this ListLFTagsRequest.

        A continuation token, if this is not the first call to retrieve this list.

        :return: The next_token of this ListLFTagsRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListLFTagsRequest.

        A continuation token, if this is not the first call to retrieve this list.

        :param next_token: The next_token of this ListLFTagsRequest.
        :type next_token: str
        """

        self._next_token = next_token
