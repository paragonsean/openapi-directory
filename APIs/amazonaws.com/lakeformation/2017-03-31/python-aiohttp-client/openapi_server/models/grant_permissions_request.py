# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.add_lf_tags_to_resource_request_resource import AddLFTagsToResourceRequestResource
from openapi_server.models.grant_permissions_request_principal import GrantPermissionsRequestPrincipal
from openapi_server.models.permission import Permission
from openapi_server import util


class GrantPermissionsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, catalog_id: str=None, principal: GrantPermissionsRequestPrincipal=None, resource: AddLFTagsToResourceRequestResource=None, permissions: List[Permission]=None, permissions_with_grant_option: List[Permission]=None):
        """GrantPermissionsRequest - a model defined in OpenAPI

        :param catalog_id: The catalog_id of this GrantPermissionsRequest.
        :param principal: The principal of this GrantPermissionsRequest.
        :param resource: The resource of this GrantPermissionsRequest.
        :param permissions: The permissions of this GrantPermissionsRequest.
        :param permissions_with_grant_option: The permissions_with_grant_option of this GrantPermissionsRequest.
        """
        self.openapi_types = {
            'catalog_id': str,
            'principal': GrantPermissionsRequestPrincipal,
            'resource': AddLFTagsToResourceRequestResource,
            'permissions': List[Permission],
            'permissions_with_grant_option': List[Permission]
        }

        self.attribute_map = {
            'catalog_id': 'CatalogId',
            'principal': 'Principal',
            'resource': 'Resource',
            'permissions': 'Permissions',
            'permissions_with_grant_option': 'PermissionsWithGrantOption'
        }

        self._catalog_id = catalog_id
        self._principal = principal
        self._resource = resource
        self._permissions = permissions
        self._permissions_with_grant_option = permissions_with_grant_option

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GrantPermissionsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GrantPermissions_request of this GrantPermissionsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def catalog_id(self):
        """Gets the catalog_id of this GrantPermissionsRequest.

        The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. 

        :return: The catalog_id of this GrantPermissionsRequest.
        :rtype: str
        """
        return self._catalog_id

    @catalog_id.setter
    def catalog_id(self, catalog_id):
        """Sets the catalog_id of this GrantPermissionsRequest.

        The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. 

        :param catalog_id: The catalog_id of this GrantPermissionsRequest.
        :type catalog_id: str
        """
        if catalog_id is not None and len(catalog_id) > 255:
            raise ValueError("Invalid value for `catalog_id`, length must be less than or equal to `255`")
        if catalog_id is not None and len(catalog_id) < 1:
            raise ValueError("Invalid value for `catalog_id`, length must be greater than or equal to `1`")

        self._catalog_id = catalog_id

    @property
    def principal(self):
        """Gets the principal of this GrantPermissionsRequest.


        :return: The principal of this GrantPermissionsRequest.
        :rtype: GrantPermissionsRequestPrincipal
        """
        return self._principal

    @principal.setter
    def principal(self, principal):
        """Sets the principal of this GrantPermissionsRequest.


        :param principal: The principal of this GrantPermissionsRequest.
        :type principal: GrantPermissionsRequestPrincipal
        """
        if principal is None:
            raise ValueError("Invalid value for `principal`, must not be `None`")

        self._principal = principal

    @property
    def resource(self):
        """Gets the resource of this GrantPermissionsRequest.


        :return: The resource of this GrantPermissionsRequest.
        :rtype: AddLFTagsToResourceRequestResource
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this GrantPermissionsRequest.


        :param resource: The resource of this GrantPermissionsRequest.
        :type resource: AddLFTagsToResourceRequestResource
        """
        if resource is None:
            raise ValueError("Invalid value for `resource`, must not be `None`")

        self._resource = resource

    @property
    def permissions(self):
        """Gets the permissions of this GrantPermissionsRequest.

        The permissions granted to the principal on the resource. Lake Formation defines privileges to grant and revoke access to metadata in the Data Catalog and data organized in underlying data storage such as Amazon S3. Lake Formation requires that each principal be authorized to perform a specific task on Lake Formation resources. 

        :return: The permissions of this GrantPermissionsRequest.
        :rtype: List[Permission]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this GrantPermissionsRequest.

        The permissions granted to the principal on the resource. Lake Formation defines privileges to grant and revoke access to metadata in the Data Catalog and data organized in underlying data storage such as Amazon S3. Lake Formation requires that each principal be authorized to perform a specific task on Lake Formation resources. 

        :param permissions: The permissions of this GrantPermissionsRequest.
        :type permissions: List[Permission]
        """
        if permissions is None:
            raise ValueError("Invalid value for `permissions`, must not be `None`")

        self._permissions = permissions

    @property
    def permissions_with_grant_option(self):
        """Gets the permissions_with_grant_option of this GrantPermissionsRequest.

        Indicates a list of the granted permissions that the principal may pass to other users. These permissions may only be a subset of the permissions granted in the <code>Privileges</code>.

        :return: The permissions_with_grant_option of this GrantPermissionsRequest.
        :rtype: List[Permission]
        """
        return self._permissions_with_grant_option

    @permissions_with_grant_option.setter
    def permissions_with_grant_option(self, permissions_with_grant_option):
        """Sets the permissions_with_grant_option of this GrantPermissionsRequest.

        Indicates a list of the granted permissions that the principal may pass to other users. These permissions may only be a subset of the permissions granted in the <code>Privileges</code>.

        :param permissions_with_grant_option: The permissions_with_grant_option of this GrantPermissionsRequest.
        :type permissions_with_grant_option: List[Permission]
        """

        self._permissions_with_grant_option = permissions_with_grant_option
