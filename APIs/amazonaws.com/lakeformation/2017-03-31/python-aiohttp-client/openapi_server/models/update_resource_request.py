# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class UpdateResourceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, role_arn: str=None, resource_arn: str=None, with_federation: bool=None):
        """UpdateResourceRequest - a model defined in OpenAPI

        :param role_arn: The role_arn of this UpdateResourceRequest.
        :param resource_arn: The resource_arn of this UpdateResourceRequest.
        :param with_federation: The with_federation of this UpdateResourceRequest.
        """
        self.openapi_types = {
            'role_arn': str,
            'resource_arn': str,
            'with_federation': bool
        }

        self.attribute_map = {
            'role_arn': 'RoleArn',
            'resource_arn': 'ResourceArn',
            'with_federation': 'WithFederation'
        }

        self._role_arn = role_arn
        self._resource_arn = resource_arn
        self._with_federation = with_federation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateResourceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateResource_request of this UpdateResourceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def role_arn(self):
        """Gets the role_arn of this UpdateResourceRequest.

        The new role to use for the given resource registered in Lake Formation.

        :return: The role_arn of this UpdateResourceRequest.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this UpdateResourceRequest.

        The new role to use for the given resource registered in Lake Formation.

        :param role_arn: The role_arn of this UpdateResourceRequest.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")
        if role_arn is not None and not re.search(r'arn:aws:iam::[0-9]*:role\/.*', role_arn):
            raise ValueError("Invalid value for `role_arn`, must be a follow pattern or equal to `/arn:aws:iam::[0-9]*:role\/.*/`")

        self._role_arn = role_arn

    @property
    def resource_arn(self):
        """Gets the resource_arn of this UpdateResourceRequest.

        The resource ARN.

        :return: The resource_arn of this UpdateResourceRequest.
        :rtype: str
        """
        return self._resource_arn

    @resource_arn.setter
    def resource_arn(self, resource_arn):
        """Sets the resource_arn of this UpdateResourceRequest.

        The resource ARN.

        :param resource_arn: The resource_arn of this UpdateResourceRequest.
        :type resource_arn: str
        """
        if resource_arn is None:
            raise ValueError("Invalid value for `resource_arn`, must not be `None`")

        self._resource_arn = resource_arn

    @property
    def with_federation(self):
        """Gets the with_federation of this UpdateResourceRequest.

        Whether or not the resource is a federated resource.

        :return: The with_federation of this UpdateResourceRequest.
        :rtype: bool
        """
        return self._with_federation

    @with_federation.setter
    def with_federation(self, with_federation):
        """Sets the with_federation of this UpdateResourceRequest.

        Whether or not the resource is a federated resource.

        :param with_federation: The with_federation of this UpdateResourceRequest.
        :type with_federation: bool
        """

        self._with_federation = with_federation
