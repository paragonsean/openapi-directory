# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.virtual_object import VirtualObject
import re
from openapi_server import util


class DeleteObjectsOnCancelRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, catalog_id: str=None, database_name: str=None, table_name: str=None, transaction_id: str=None, objects: List[VirtualObject]=None):
        """DeleteObjectsOnCancelRequest - a model defined in OpenAPI

        :param catalog_id: The catalog_id of this DeleteObjectsOnCancelRequest.
        :param database_name: The database_name of this DeleteObjectsOnCancelRequest.
        :param table_name: The table_name of this DeleteObjectsOnCancelRequest.
        :param transaction_id: The transaction_id of this DeleteObjectsOnCancelRequest.
        :param objects: The objects of this DeleteObjectsOnCancelRequest.
        """
        self.openapi_types = {
            'catalog_id': str,
            'database_name': str,
            'table_name': str,
            'transaction_id': str,
            'objects': List[VirtualObject]
        }

        self.attribute_map = {
            'catalog_id': 'CatalogId',
            'database_name': 'DatabaseName',
            'table_name': 'TableName',
            'transaction_id': 'TransactionId',
            'objects': 'Objects'
        }

        self._catalog_id = catalog_id
        self._database_name = database_name
        self._table_name = table_name
        self._transaction_id = transaction_id
        self._objects = objects

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeleteObjectsOnCancelRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeleteObjectsOnCancel_request of this DeleteObjectsOnCancelRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def catalog_id(self):
        """Gets the catalog_id of this DeleteObjectsOnCancelRequest.

        The Glue data catalog that contains the governed table. Defaults to the current account ID.

        :return: The catalog_id of this DeleteObjectsOnCancelRequest.
        :rtype: str
        """
        return self._catalog_id

    @catalog_id.setter
    def catalog_id(self, catalog_id):
        """Sets the catalog_id of this DeleteObjectsOnCancelRequest.

        The Glue data catalog that contains the governed table. Defaults to the current account ID.

        :param catalog_id: The catalog_id of this DeleteObjectsOnCancelRequest.
        :type catalog_id: str
        """
        if catalog_id is not None and len(catalog_id) > 255:
            raise ValueError("Invalid value for `catalog_id`, length must be less than or equal to `255`")
        if catalog_id is not None and len(catalog_id) < 1:
            raise ValueError("Invalid value for `catalog_id`, length must be greater than or equal to `1`")

        self._catalog_id = catalog_id

    @property
    def database_name(self):
        """Gets the database_name of this DeleteObjectsOnCancelRequest.

        The database that contains the governed table.

        :return: The database_name of this DeleteObjectsOnCancelRequest.
        :rtype: str
        """
        return self._database_name

    @database_name.setter
    def database_name(self, database_name):
        """Sets the database_name of this DeleteObjectsOnCancelRequest.

        The database that contains the governed table.

        :param database_name: The database_name of this DeleteObjectsOnCancelRequest.
        :type database_name: str
        """
        if database_name is None:
            raise ValueError("Invalid value for `database_name`, must not be `None`")
        if database_name is not None and len(database_name) > 255:
            raise ValueError("Invalid value for `database_name`, length must be less than or equal to `255`")
        if database_name is not None and len(database_name) < 1:
            raise ValueError("Invalid value for `database_name`, length must be greater than or equal to `1`")

        self._database_name = database_name

    @property
    def table_name(self):
        """Gets the table_name of this DeleteObjectsOnCancelRequest.

        The name of the governed table.

        :return: The table_name of this DeleteObjectsOnCancelRequest.
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this DeleteObjectsOnCancelRequest.

        The name of the governed table.

        :param table_name: The table_name of this DeleteObjectsOnCancelRequest.
        :type table_name: str
        """
        if table_name is None:
            raise ValueError("Invalid value for `table_name`, must not be `None`")
        if table_name is not None and len(table_name) > 255:
            raise ValueError("Invalid value for `table_name`, length must be less than or equal to `255`")
        if table_name is not None and len(table_name) < 1:
            raise ValueError("Invalid value for `table_name`, length must be greater than or equal to `1`")

        self._table_name = table_name

    @property
    def transaction_id(self):
        """Gets the transaction_id of this DeleteObjectsOnCancelRequest.

        ID of the transaction that the writes occur in.

        :return: The transaction_id of this DeleteObjectsOnCancelRequest.
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this DeleteObjectsOnCancelRequest.

        ID of the transaction that the writes occur in.

        :param transaction_id: The transaction_id of this DeleteObjectsOnCancelRequest.
        :type transaction_id: str
        """
        if transaction_id is None:
            raise ValueError("Invalid value for `transaction_id`, must not be `None`")
        if transaction_id is not None and len(transaction_id) > 255:
            raise ValueError("Invalid value for `transaction_id`, length must be less than or equal to `255`")
        if transaction_id is not None and len(transaction_id) < 1:
            raise ValueError("Invalid value for `transaction_id`, length must be greater than or equal to `1`")
        if transaction_id is not None and not re.search(r'[\p{L}\p{N}\p{P}]*', transaction_id):
            raise ValueError("Invalid value for `transaction_id`, must be a follow pattern or equal to `/[\p{L}\p{N}\p{P}]*/`")

        self._transaction_id = transaction_id

    @property
    def objects(self):
        """Gets the objects of this DeleteObjectsOnCancelRequest.

        A list of VirtualObject structures, which indicates the Amazon S3 objects to be deleted if the transaction cancels.

        :return: The objects of this DeleteObjectsOnCancelRequest.
        :rtype: List[VirtualObject]
        """
        return self._objects

    @objects.setter
    def objects(self, objects):
        """Sets the objects of this DeleteObjectsOnCancelRequest.

        A list of VirtualObject structures, which indicates the Amazon S3 objects to be deleted if the transaction cancels.

        :param objects: The objects of this DeleteObjectsOnCancelRequest.
        :type objects: List[VirtualObject]
        """
        if objects is None:
            raise ValueError("Invalid value for `objects`, must not be `None`")
        if objects is not None and len(objects) > 100:
            raise ValueError("Invalid value for `objects`, number of items must be less than or equal to `100`")
        if objects is not None and len(objects) < 1:
            raise ValueError("Invalid value for `objects`, number of items must be greater than or equal to `1`")

        self._objects = objects
