# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_temporary_glue_partition_credentials_request_audit_context import GetTemporaryGluePartitionCredentialsRequestAuditContext
from openapi_server.models.permission import Permission
from openapi_server.models.permission_type import PermissionType
from openapi_server import util


class GetTemporaryGlueTableCredentialsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, table_arn: str=None, permissions: List[Permission]=None, duration_seconds: int=None, audit_context: GetTemporaryGluePartitionCredentialsRequestAuditContext=None, supported_permission_types: List[PermissionType]=None):
        """GetTemporaryGlueTableCredentialsRequest - a model defined in OpenAPI

        :param table_arn: The table_arn of this GetTemporaryGlueTableCredentialsRequest.
        :param permissions: The permissions of this GetTemporaryGlueTableCredentialsRequest.
        :param duration_seconds: The duration_seconds of this GetTemporaryGlueTableCredentialsRequest.
        :param audit_context: The audit_context of this GetTemporaryGlueTableCredentialsRequest.
        :param supported_permission_types: The supported_permission_types of this GetTemporaryGlueTableCredentialsRequest.
        """
        self.openapi_types = {
            'table_arn': str,
            'permissions': List[Permission],
            'duration_seconds': int,
            'audit_context': GetTemporaryGluePartitionCredentialsRequestAuditContext,
            'supported_permission_types': List[PermissionType]
        }

        self.attribute_map = {
            'table_arn': 'TableArn',
            'permissions': 'Permissions',
            'duration_seconds': 'DurationSeconds',
            'audit_context': 'AuditContext',
            'supported_permission_types': 'SupportedPermissionTypes'
        }

        self._table_arn = table_arn
        self._permissions = permissions
        self._duration_seconds = duration_seconds
        self._audit_context = audit_context
        self._supported_permission_types = supported_permission_types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetTemporaryGlueTableCredentialsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetTemporaryGlueTableCredentials_request of this GetTemporaryGlueTableCredentialsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def table_arn(self):
        """Gets the table_arn of this GetTemporaryGlueTableCredentialsRequest.

        The ARN identifying a table in the Data Catalog for the temporary credentials request.

        :return: The table_arn of this GetTemporaryGlueTableCredentialsRequest.
        :rtype: str
        """
        return self._table_arn

    @table_arn.setter
    def table_arn(self, table_arn):
        """Sets the table_arn of this GetTemporaryGlueTableCredentialsRequest.

        The ARN identifying a table in the Data Catalog for the temporary credentials request.

        :param table_arn: The table_arn of this GetTemporaryGlueTableCredentialsRequest.
        :type table_arn: str
        """
        if table_arn is None:
            raise ValueError("Invalid value for `table_arn`, must not be `None`")

        self._table_arn = table_arn

    @property
    def permissions(self):
        """Gets the permissions of this GetTemporaryGlueTableCredentialsRequest.

        Filters the request based on the user having been granted a list of specified permissions on the requested resource(s).

        :return: The permissions of this GetTemporaryGlueTableCredentialsRequest.
        :rtype: List[Permission]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this GetTemporaryGlueTableCredentialsRequest.

        Filters the request based on the user having been granted a list of specified permissions on the requested resource(s).

        :param permissions: The permissions of this GetTemporaryGlueTableCredentialsRequest.
        :type permissions: List[Permission]
        """

        self._permissions = permissions

    @property
    def duration_seconds(self):
        """Gets the duration_seconds of this GetTemporaryGlueTableCredentialsRequest.

        The time period, between 900 and 21,600 seconds, for the timeout of the temporary credentials.

        :return: The duration_seconds of this GetTemporaryGlueTableCredentialsRequest.
        :rtype: int
        """
        return self._duration_seconds

    @duration_seconds.setter
    def duration_seconds(self, duration_seconds):
        """Sets the duration_seconds of this GetTemporaryGlueTableCredentialsRequest.

        The time period, between 900 and 21,600 seconds, for the timeout of the temporary credentials.

        :param duration_seconds: The duration_seconds of this GetTemporaryGlueTableCredentialsRequest.
        :type duration_seconds: int
        """
        if duration_seconds is not None and duration_seconds > 43200:
            raise ValueError("Invalid value for `duration_seconds`, must be a value less than or equal to `43200`")
        if duration_seconds is not None and duration_seconds < 900:
            raise ValueError("Invalid value for `duration_seconds`, must be a value greater than or equal to `900`")

        self._duration_seconds = duration_seconds

    @property
    def audit_context(self):
        """Gets the audit_context of this GetTemporaryGlueTableCredentialsRequest.


        :return: The audit_context of this GetTemporaryGlueTableCredentialsRequest.
        :rtype: GetTemporaryGluePartitionCredentialsRequestAuditContext
        """
        return self._audit_context

    @audit_context.setter
    def audit_context(self, audit_context):
        """Sets the audit_context of this GetTemporaryGlueTableCredentialsRequest.


        :param audit_context: The audit_context of this GetTemporaryGlueTableCredentialsRequest.
        :type audit_context: GetTemporaryGluePartitionCredentialsRequestAuditContext
        """

        self._audit_context = audit_context

    @property
    def supported_permission_types(self):
        """Gets the supported_permission_types of this GetTemporaryGlueTableCredentialsRequest.

        A list of supported permission types for the table. Valid values are <code>COLUMN_PERMISSION</code> and <code>CELL_FILTER_PERMISSION</code>.

        :return: The supported_permission_types of this GetTemporaryGlueTableCredentialsRequest.
        :rtype: List[PermissionType]
        """
        return self._supported_permission_types

    @supported_permission_types.setter
    def supported_permission_types(self, supported_permission_types):
        """Sets the supported_permission_types of this GetTemporaryGlueTableCredentialsRequest.

        A list of supported permission types for the table. Valid values are <code>COLUMN_PERMISSION</code> and <code>CELL_FILTER_PERMISSION</code>.

        :param supported_permission_types: The supported_permission_types of this GetTemporaryGlueTableCredentialsRequest.
        :type supported_permission_types: List[PermissionType]
        """
        if supported_permission_types is not None and len(supported_permission_types) > 255:
            raise ValueError("Invalid value for `supported_permission_types`, number of items must be less than or equal to `255`")
        if supported_permission_types is not None and len(supported_permission_types) < 1:
            raise ValueError("Invalid value for `supported_permission_types`, number of items must be greater than or equal to `1`")

        self._supported_permission_types = supported_permission_types
