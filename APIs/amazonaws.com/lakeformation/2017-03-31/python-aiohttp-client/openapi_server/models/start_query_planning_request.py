# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.start_query_planning_request_query_planning_context import StartQueryPlanningRequestQueryPlanningContext
from openapi_server import util


class StartQueryPlanningRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, query_planning_context: StartQueryPlanningRequestQueryPlanningContext=None, query_string: str=None):
        """StartQueryPlanningRequest - a model defined in OpenAPI

        :param query_planning_context: The query_planning_context of this StartQueryPlanningRequest.
        :param query_string: The query_string of this StartQueryPlanningRequest.
        """
        self.openapi_types = {
            'query_planning_context': StartQueryPlanningRequestQueryPlanningContext,
            'query_string': str
        }

        self.attribute_map = {
            'query_planning_context': 'QueryPlanningContext',
            'query_string': 'QueryString'
        }

        self._query_planning_context = query_planning_context
        self._query_string = query_string

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartQueryPlanningRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartQueryPlanning_request of this StartQueryPlanningRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def query_planning_context(self):
        """Gets the query_planning_context of this StartQueryPlanningRequest.


        :return: The query_planning_context of this StartQueryPlanningRequest.
        :rtype: StartQueryPlanningRequestQueryPlanningContext
        """
        return self._query_planning_context

    @query_planning_context.setter
    def query_planning_context(self, query_planning_context):
        """Sets the query_planning_context of this StartQueryPlanningRequest.


        :param query_planning_context: The query_planning_context of this StartQueryPlanningRequest.
        :type query_planning_context: StartQueryPlanningRequestQueryPlanningContext
        """
        if query_planning_context is None:
            raise ValueError("Invalid value for `query_planning_context`, must not be `None`")

        self._query_planning_context = query_planning_context

    @property
    def query_string(self):
        """Gets the query_string of this StartQueryPlanningRequest.

        A PartiQL query statement used as an input to the planner service.

        :return: The query_string of this StartQueryPlanningRequest.
        :rtype: str
        """
        return self._query_string

    @query_string.setter
    def query_string(self, query_string):
        """Sets the query_string of this StartQueryPlanningRequest.

        A PartiQL query statement used as an input to the planner service.

        :param query_string: The query_string of this StartQueryPlanningRequest.
        :type query_string: str
        """
        if query_string is None:
            raise ValueError("Invalid value for `query_string`, must not be `None`")
        if query_string is not None and len(query_string) < 1:
            raise ValueError("Invalid value for `query_string`, length must be greater than or equal to `1`")

        self._query_string = query_string
