# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.add_lf_tags_to_resource_request_resource import AddLFTagsToResourceRequestResource
from openapi_server.models.grant_permissions_request_principal import GrantPermissionsRequestPrincipal
from openapi_server import util


class ListPermissionsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, catalog_id: str=None, principal: GrantPermissionsRequestPrincipal=None, resource_type: str=None, resource: AddLFTagsToResourceRequestResource=None, next_token: str=None, max_results: int=None, include_related: str=None):
        """ListPermissionsRequest - a model defined in OpenAPI

        :param catalog_id: The catalog_id of this ListPermissionsRequest.
        :param principal: The principal of this ListPermissionsRequest.
        :param resource_type: The resource_type of this ListPermissionsRequest.
        :param resource: The resource of this ListPermissionsRequest.
        :param next_token: The next_token of this ListPermissionsRequest.
        :param max_results: The max_results of this ListPermissionsRequest.
        :param include_related: The include_related of this ListPermissionsRequest.
        """
        self.openapi_types = {
            'catalog_id': str,
            'principal': GrantPermissionsRequestPrincipal,
            'resource_type': str,
            'resource': AddLFTagsToResourceRequestResource,
            'next_token': str,
            'max_results': int,
            'include_related': str
        }

        self.attribute_map = {
            'catalog_id': 'CatalogId',
            'principal': 'Principal',
            'resource_type': 'ResourceType',
            'resource': 'Resource',
            'next_token': 'NextToken',
            'max_results': 'MaxResults',
            'include_related': 'IncludeRelated'
        }

        self._catalog_id = catalog_id
        self._principal = principal
        self._resource_type = resource_type
        self._resource = resource
        self._next_token = next_token
        self._max_results = max_results
        self._include_related = include_related

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListPermissionsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListPermissions_request of this ListPermissionsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def catalog_id(self):
        """Gets the catalog_id of this ListPermissionsRequest.

        The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. 

        :return: The catalog_id of this ListPermissionsRequest.
        :rtype: str
        """
        return self._catalog_id

    @catalog_id.setter
    def catalog_id(self, catalog_id):
        """Sets the catalog_id of this ListPermissionsRequest.

        The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. 

        :param catalog_id: The catalog_id of this ListPermissionsRequest.
        :type catalog_id: str
        """
        if catalog_id is not None and len(catalog_id) > 255:
            raise ValueError("Invalid value for `catalog_id`, length must be less than or equal to `255`")
        if catalog_id is not None and len(catalog_id) < 1:
            raise ValueError("Invalid value for `catalog_id`, length must be greater than or equal to `1`")

        self._catalog_id = catalog_id

    @property
    def principal(self):
        """Gets the principal of this ListPermissionsRequest.


        :return: The principal of this ListPermissionsRequest.
        :rtype: GrantPermissionsRequestPrincipal
        """
        return self._principal

    @principal.setter
    def principal(self, principal):
        """Sets the principal of this ListPermissionsRequest.


        :param principal: The principal of this ListPermissionsRequest.
        :type principal: GrantPermissionsRequestPrincipal
        """

        self._principal = principal

    @property
    def resource_type(self):
        """Gets the resource_type of this ListPermissionsRequest.

        Specifies a resource type to filter the permissions returned.

        :return: The resource_type of this ListPermissionsRequest.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this ListPermissionsRequest.

        Specifies a resource type to filter the permissions returned.

        :param resource_type: The resource_type of this ListPermissionsRequest.
        :type resource_type: str
        """
        allowed_values = ["CATALOG", "DATABASE", "TABLE", "DATA_LOCATION", "LF_TAG", "LF_TAG_POLICY", "LF_TAG_POLICY_DATABASE", "LF_TAG_POLICY_TABLE"]  # noqa: E501
        if resource_type not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_type` ({0}), must be one of {1}"
                .format(resource_type, allowed_values)
            )

        self._resource_type = resource_type

    @property
    def resource(self):
        """Gets the resource of this ListPermissionsRequest.


        :return: The resource of this ListPermissionsRequest.
        :rtype: AddLFTagsToResourceRequestResource
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this ListPermissionsRequest.


        :param resource: The resource of this ListPermissionsRequest.
        :type resource: AddLFTagsToResourceRequestResource
        """

        self._resource = resource

    @property
    def next_token(self):
        """Gets the next_token of this ListPermissionsRequest.

        A continuation token, if this is not the first call to retrieve this list.

        :return: The next_token of this ListPermissionsRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListPermissionsRequest.

        A continuation token, if this is not the first call to retrieve this list.

        :param next_token: The next_token of this ListPermissionsRequest.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def max_results(self):
        """Gets the max_results of this ListPermissionsRequest.

        The maximum number of results to return.

        :return: The max_results of this ListPermissionsRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListPermissionsRequest.

        The maximum number of results to return.

        :param max_results: The max_results of this ListPermissionsRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 1000:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `1000`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results

    @property
    def include_related(self):
        """Gets the include_related of this ListPermissionsRequest.

        Indicates that related permissions should be included in the results.

        :return: The include_related of this ListPermissionsRequest.
        :rtype: str
        """
        return self._include_related

    @include_related.setter
    def include_related(self, include_related):
        """Sets the include_related of this ListPermissionsRequest.

        Indicates that related permissions should be included in the results.

        :param include_related: The include_related of this ListPermissionsRequest.
        :type include_related: str
        """
        if include_related is not None and len(include_related) > 5:
            raise ValueError("Invalid value for `include_related`, length must be less than or equal to `5`")
        if include_related is not None and len(include_related) < 1:
            raise ValueError("Invalid value for `include_related`, length must be greater than or equal to `1`")

        self._include_related = include_related
