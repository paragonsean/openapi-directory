# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.lf_tag import LFTag
from openapi_server import util


class SearchTablesByLFTagsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, next_token: str=None, max_results: int=None, catalog_id: str=None, expression: List[LFTag]=None):
        """SearchTablesByLFTagsRequest - a model defined in OpenAPI

        :param next_token: The next_token of this SearchTablesByLFTagsRequest.
        :param max_results: The max_results of this SearchTablesByLFTagsRequest.
        :param catalog_id: The catalog_id of this SearchTablesByLFTagsRequest.
        :param expression: The expression of this SearchTablesByLFTagsRequest.
        """
        self.openapi_types = {
            'next_token': str,
            'max_results': int,
            'catalog_id': str,
            'expression': List[LFTag]
        }

        self.attribute_map = {
            'next_token': 'NextToken',
            'max_results': 'MaxResults',
            'catalog_id': 'CatalogId',
            'expression': 'Expression'
        }

        self._next_token = next_token
        self._max_results = max_results
        self._catalog_id = catalog_id
        self._expression = expression

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchTablesByLFTagsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchTablesByLFTags_request of this SearchTablesByLFTagsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def next_token(self):
        """Gets the next_token of this SearchTablesByLFTagsRequest.

        A continuation token, if this is not the first call to retrieve this list.

        :return: The next_token of this SearchTablesByLFTagsRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this SearchTablesByLFTagsRequest.

        A continuation token, if this is not the first call to retrieve this list.

        :param next_token: The next_token of this SearchTablesByLFTagsRequest.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def max_results(self):
        """Gets the max_results of this SearchTablesByLFTagsRequest.

        The maximum number of results to return.

        :return: The max_results of this SearchTablesByLFTagsRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this SearchTablesByLFTagsRequest.

        The maximum number of results to return.

        :param max_results: The max_results of this SearchTablesByLFTagsRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 100:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `100`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results

    @property
    def catalog_id(self):
        """Gets the catalog_id of this SearchTablesByLFTagsRequest.

        The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. 

        :return: The catalog_id of this SearchTablesByLFTagsRequest.
        :rtype: str
        """
        return self._catalog_id

    @catalog_id.setter
    def catalog_id(self, catalog_id):
        """Sets the catalog_id of this SearchTablesByLFTagsRequest.

        The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. 

        :param catalog_id: The catalog_id of this SearchTablesByLFTagsRequest.
        :type catalog_id: str
        """
        if catalog_id is not None and len(catalog_id) > 255:
            raise ValueError("Invalid value for `catalog_id`, length must be less than or equal to `255`")
        if catalog_id is not None and len(catalog_id) < 1:
            raise ValueError("Invalid value for `catalog_id`, length must be greater than or equal to `1`")

        self._catalog_id = catalog_id

    @property
    def expression(self):
        """Gets the expression of this SearchTablesByLFTagsRequest.

        A list of conditions (<code>LFTag</code> structures) to search for in table resources.

        :return: The expression of this SearchTablesByLFTagsRequest.
        :rtype: List[LFTag]
        """
        return self._expression

    @expression.setter
    def expression(self, expression):
        """Sets the expression of this SearchTablesByLFTagsRequest.

        A list of conditions (<code>LFTag</code> structures) to search for in table resources.

        :param expression: The expression of this SearchTablesByLFTagsRequest.
        :type expression: List[LFTag]
        """
        if expression is None:
            raise ValueError("Invalid value for `expression`, must not be `None`")

        self._expression = expression
