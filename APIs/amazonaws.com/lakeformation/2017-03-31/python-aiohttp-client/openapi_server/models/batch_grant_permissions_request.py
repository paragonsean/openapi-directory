# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.batch_permissions_request_entry import BatchPermissionsRequestEntry
from openapi_server import util


class BatchGrantPermissionsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, catalog_id: str=None, entries: List[BatchPermissionsRequestEntry]=None):
        """BatchGrantPermissionsRequest - a model defined in OpenAPI

        :param catalog_id: The catalog_id of this BatchGrantPermissionsRequest.
        :param entries: The entries of this BatchGrantPermissionsRequest.
        """
        self.openapi_types = {
            'catalog_id': str,
            'entries': List[BatchPermissionsRequestEntry]
        }

        self.attribute_map = {
            'catalog_id': 'CatalogId',
            'entries': 'Entries'
        }

        self._catalog_id = catalog_id
        self._entries = entries

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchGrantPermissionsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchGrantPermissions_request of this BatchGrantPermissionsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def catalog_id(self):
        """Gets the catalog_id of this BatchGrantPermissionsRequest.

        The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. 

        :return: The catalog_id of this BatchGrantPermissionsRequest.
        :rtype: str
        """
        return self._catalog_id

    @catalog_id.setter
    def catalog_id(self, catalog_id):
        """Sets the catalog_id of this BatchGrantPermissionsRequest.

        The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. 

        :param catalog_id: The catalog_id of this BatchGrantPermissionsRequest.
        :type catalog_id: str
        """
        if catalog_id is not None and len(catalog_id) > 255:
            raise ValueError("Invalid value for `catalog_id`, length must be less than or equal to `255`")
        if catalog_id is not None and len(catalog_id) < 1:
            raise ValueError("Invalid value for `catalog_id`, length must be greater than or equal to `1`")

        self._catalog_id = catalog_id

    @property
    def entries(self):
        """Gets the entries of this BatchGrantPermissionsRequest.

        A list of up to 20 entries for resource permissions to be granted by batch operation to the principal.

        :return: The entries of this BatchGrantPermissionsRequest.
        :rtype: List[BatchPermissionsRequestEntry]
        """
        return self._entries

    @entries.setter
    def entries(self, entries):
        """Sets the entries of this BatchGrantPermissionsRequest.

        A list of up to 20 entries for resource permissions to be granted by batch operation to the principal.

        :param entries: The entries of this BatchGrantPermissionsRequest.
        :type entries: List[BatchPermissionsRequestEntry]
        """
        if entries is None:
            raise ValueError("Invalid value for `entries`, must not be `None`")

        self._entries = entries
