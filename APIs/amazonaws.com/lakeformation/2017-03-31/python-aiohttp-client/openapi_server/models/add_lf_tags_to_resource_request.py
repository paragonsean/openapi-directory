# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.add_lf_tags_to_resource_request_resource import AddLFTagsToResourceRequestResource
from openapi_server.models.lf_tag_pair import LFTagPair
from openapi_server import util


class AddLFTagsToResourceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, catalog_id: str=None, resource: AddLFTagsToResourceRequestResource=None, lf_tags: List[LFTagPair]=None):
        """AddLFTagsToResourceRequest - a model defined in OpenAPI

        :param catalog_id: The catalog_id of this AddLFTagsToResourceRequest.
        :param resource: The resource of this AddLFTagsToResourceRequest.
        :param lf_tags: The lf_tags of this AddLFTagsToResourceRequest.
        """
        self.openapi_types = {
            'catalog_id': str,
            'resource': AddLFTagsToResourceRequestResource,
            'lf_tags': List[LFTagPair]
        }

        self.attribute_map = {
            'catalog_id': 'CatalogId',
            'resource': 'Resource',
            'lf_tags': 'LFTags'
        }

        self._catalog_id = catalog_id
        self._resource = resource
        self._lf_tags = lf_tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddLFTagsToResourceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AddLFTagsToResource_request of this AddLFTagsToResourceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def catalog_id(self):
        """Gets the catalog_id of this AddLFTagsToResourceRequest.

        The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. 

        :return: The catalog_id of this AddLFTagsToResourceRequest.
        :rtype: str
        """
        return self._catalog_id

    @catalog_id.setter
    def catalog_id(self, catalog_id):
        """Sets the catalog_id of this AddLFTagsToResourceRequest.

        The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. 

        :param catalog_id: The catalog_id of this AddLFTagsToResourceRequest.
        :type catalog_id: str
        """
        if catalog_id is not None and len(catalog_id) > 255:
            raise ValueError("Invalid value for `catalog_id`, length must be less than or equal to `255`")
        if catalog_id is not None and len(catalog_id) < 1:
            raise ValueError("Invalid value for `catalog_id`, length must be greater than or equal to `1`")

        self._catalog_id = catalog_id

    @property
    def resource(self):
        """Gets the resource of this AddLFTagsToResourceRequest.


        :return: The resource of this AddLFTagsToResourceRequest.
        :rtype: AddLFTagsToResourceRequestResource
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this AddLFTagsToResourceRequest.


        :param resource: The resource of this AddLFTagsToResourceRequest.
        :type resource: AddLFTagsToResourceRequestResource
        """
        if resource is None:
            raise ValueError("Invalid value for `resource`, must not be `None`")

        self._resource = resource

    @property
    def lf_tags(self):
        """Gets the lf_tags of this AddLFTagsToResourceRequest.

        The LF-tags to attach to the resource.

        :return: The lf_tags of this AddLFTagsToResourceRequest.
        :rtype: List[LFTagPair]
        """
        return self._lf_tags

    @lf_tags.setter
    def lf_tags(self, lf_tags):
        """Sets the lf_tags of this AddLFTagsToResourceRequest.

        The LF-tags to attach to the resource.

        :param lf_tags: The lf_tags of this AddLFTagsToResourceRequest.
        :type lf_tags: List[LFTagPair]
        """
        if lf_tags is None:
            raise ValueError("Invalid value for `lf_tags`, must not be `None`")
        if lf_tags is not None and len(lf_tags) > 50:
            raise ValueError("Invalid value for `lf_tags`, number of items must be less than or equal to `50`")
        if lf_tags is not None and len(lf_tags) < 1:
            raise ValueError("Invalid value for `lf_tags`, number of items must be greater than or equal to `1`")

        self._lf_tags = lf_tags
