# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListTransactionsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, catalog_id: str=None, status_filter: str=None, max_results: int=None, next_token: str=None):
        """ListTransactionsRequest - a model defined in OpenAPI

        :param catalog_id: The catalog_id of this ListTransactionsRequest.
        :param status_filter: The status_filter of this ListTransactionsRequest.
        :param max_results: The max_results of this ListTransactionsRequest.
        :param next_token: The next_token of this ListTransactionsRequest.
        """
        self.openapi_types = {
            'catalog_id': str,
            'status_filter': str,
            'max_results': int,
            'next_token': str
        }

        self.attribute_map = {
            'catalog_id': 'CatalogId',
            'status_filter': 'StatusFilter',
            'max_results': 'MaxResults',
            'next_token': 'NextToken'
        }

        self._catalog_id = catalog_id
        self._status_filter = status_filter
        self._max_results = max_results
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListTransactionsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListTransactions_request of this ListTransactionsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def catalog_id(self):
        """Gets the catalog_id of this ListTransactionsRequest.

        The catalog for which to list transactions. Defaults to the account ID of the caller.

        :return: The catalog_id of this ListTransactionsRequest.
        :rtype: str
        """
        return self._catalog_id

    @catalog_id.setter
    def catalog_id(self, catalog_id):
        """Sets the catalog_id of this ListTransactionsRequest.

        The catalog for which to list transactions. Defaults to the account ID of the caller.

        :param catalog_id: The catalog_id of this ListTransactionsRequest.
        :type catalog_id: str
        """
        if catalog_id is not None and len(catalog_id) > 255:
            raise ValueError("Invalid value for `catalog_id`, length must be less than or equal to `255`")
        if catalog_id is not None and len(catalog_id) < 1:
            raise ValueError("Invalid value for `catalog_id`, length must be greater than or equal to `1`")

        self._catalog_id = catalog_id

    @property
    def status_filter(self):
        """Gets the status_filter of this ListTransactionsRequest.

         A filter indicating the status of transactions to return. Options are ALL | COMPLETED | COMMITTED | ABORTED | ACTIVE. The default is <code>ALL</code>.

        :return: The status_filter of this ListTransactionsRequest.
        :rtype: str
        """
        return self._status_filter

    @status_filter.setter
    def status_filter(self, status_filter):
        """Sets the status_filter of this ListTransactionsRequest.

         A filter indicating the status of transactions to return. Options are ALL | COMPLETED | COMMITTED | ABORTED | ACTIVE. The default is <code>ALL</code>.

        :param status_filter: The status_filter of this ListTransactionsRequest.
        :type status_filter: str
        """
        allowed_values = ["ALL", "COMPLETED", "ACTIVE", "COMMITTED", "ABORTED"]  # noqa: E501
        if status_filter not in allowed_values:
            raise ValueError(
                "Invalid value for `status_filter` ({0}), must be one of {1}"
                .format(status_filter, allowed_values)
            )

        self._status_filter = status_filter

    @property
    def max_results(self):
        """Gets the max_results of this ListTransactionsRequest.

        The maximum number of transactions to return in a single call.

        :return: The max_results of this ListTransactionsRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListTransactionsRequest.

        The maximum number of transactions to return in a single call.

        :param max_results: The max_results of this ListTransactionsRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 1000:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `1000`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this ListTransactionsRequest.

        A continuation token if this is not the first call to retrieve transactions.

        :return: The next_token of this ListTransactionsRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListTransactionsRequest.

        A continuation token if this is not the first call to retrieve transactions.

        :param next_token: The next_token of this ListTransactionsRequest.
        :type next_token: str
        """
        if next_token is not None and len(next_token) > 4096:
            raise ValueError("Invalid value for `next_token`, length must be less than or equal to `4096`")

        self._next_token = next_token
