# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class AssumeDecoratedRoleWithSAMLRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, saml_assertion: str=None, role_arn: str=None, principal_arn: str=None, duration_seconds: int=None):
        """AssumeDecoratedRoleWithSAMLRequest - a model defined in OpenAPI

        :param saml_assertion: The saml_assertion of this AssumeDecoratedRoleWithSAMLRequest.
        :param role_arn: The role_arn of this AssumeDecoratedRoleWithSAMLRequest.
        :param principal_arn: The principal_arn of this AssumeDecoratedRoleWithSAMLRequest.
        :param duration_seconds: The duration_seconds of this AssumeDecoratedRoleWithSAMLRequest.
        """
        self.openapi_types = {
            'saml_assertion': str,
            'role_arn': str,
            'principal_arn': str,
            'duration_seconds': int
        }

        self.attribute_map = {
            'saml_assertion': 'SAMLAssertion',
            'role_arn': 'RoleArn',
            'principal_arn': 'PrincipalArn',
            'duration_seconds': 'DurationSeconds'
        }

        self._saml_assertion = saml_assertion
        self._role_arn = role_arn
        self._principal_arn = principal_arn
        self._duration_seconds = duration_seconds

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssumeDecoratedRoleWithSAMLRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssumeDecoratedRoleWithSAML_request of this AssumeDecoratedRoleWithSAMLRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def saml_assertion(self):
        """Gets the saml_assertion of this AssumeDecoratedRoleWithSAMLRequest.

        A SAML assertion consisting of an assertion statement for the user who needs temporary credentials. This must match the SAML assertion that was issued to IAM. This must be Base64 encoded.

        :return: The saml_assertion of this AssumeDecoratedRoleWithSAMLRequest.
        :rtype: str
        """
        return self._saml_assertion

    @saml_assertion.setter
    def saml_assertion(self, saml_assertion):
        """Sets the saml_assertion of this AssumeDecoratedRoleWithSAMLRequest.

        A SAML assertion consisting of an assertion statement for the user who needs temporary credentials. This must match the SAML assertion that was issued to IAM. This must be Base64 encoded.

        :param saml_assertion: The saml_assertion of this AssumeDecoratedRoleWithSAMLRequest.
        :type saml_assertion: str
        """
        if saml_assertion is None:
            raise ValueError("Invalid value for `saml_assertion`, must not be `None`")
        if saml_assertion is not None and len(saml_assertion) > 100000:
            raise ValueError("Invalid value for `saml_assertion`, length must be less than or equal to `100000`")
        if saml_assertion is not None and len(saml_assertion) < 4:
            raise ValueError("Invalid value for `saml_assertion`, length must be greater than or equal to `4`")

        self._saml_assertion = saml_assertion

    @property
    def role_arn(self):
        """Gets the role_arn of this AssumeDecoratedRoleWithSAMLRequest.

        The role that represents an IAM principal whose scope down policy allows it to call credential vending APIs such as <code>GetTemporaryTableCredentials</code>. The caller must also have iam:PassRole permission on this role. 

        :return: The role_arn of this AssumeDecoratedRoleWithSAMLRequest.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this AssumeDecoratedRoleWithSAMLRequest.

        The role that represents an IAM principal whose scope down policy allows it to call credential vending APIs such as <code>GetTemporaryTableCredentials</code>. The caller must also have iam:PassRole permission on this role. 

        :param role_arn: The role_arn of this AssumeDecoratedRoleWithSAMLRequest.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")
        if role_arn is not None and not re.search(r'arn:aws:iam::[0-9]*:role\/.*', role_arn):
            raise ValueError("Invalid value for `role_arn`, must be a follow pattern or equal to `/arn:aws:iam::[0-9]*:role\/.*/`")

        self._role_arn = role_arn

    @property
    def principal_arn(self):
        """Gets the principal_arn of this AssumeDecoratedRoleWithSAMLRequest.

        The Amazon Resource Name (ARN) of the SAML provider in IAM that describes the IdP.

        :return: The principal_arn of this AssumeDecoratedRoleWithSAMLRequest.
        :rtype: str
        """
        return self._principal_arn

    @principal_arn.setter
    def principal_arn(self, principal_arn):
        """Sets the principal_arn of this AssumeDecoratedRoleWithSAMLRequest.

        The Amazon Resource Name (ARN) of the SAML provider in IAM that describes the IdP.

        :param principal_arn: The principal_arn of this AssumeDecoratedRoleWithSAMLRequest.
        :type principal_arn: str
        """
        if principal_arn is None:
            raise ValueError("Invalid value for `principal_arn`, must not be `None`")
        if principal_arn is not None and not re.search(r'arn:aws:iam::[0-9]*:saml-provider\/.*', principal_arn):
            raise ValueError("Invalid value for `principal_arn`, must be a follow pattern or equal to `/arn:aws:iam::[0-9]*:saml-provider\/.*/`")

        self._principal_arn = principal_arn

    @property
    def duration_seconds(self):
        """Gets the duration_seconds of this AssumeDecoratedRoleWithSAMLRequest.

        The time period, between 900 and 43,200 seconds, for the timeout of the temporary credentials.

        :return: The duration_seconds of this AssumeDecoratedRoleWithSAMLRequest.
        :rtype: int
        """
        return self._duration_seconds

    @duration_seconds.setter
    def duration_seconds(self, duration_seconds):
        """Sets the duration_seconds of this AssumeDecoratedRoleWithSAMLRequest.

        The time period, between 900 and 43,200 seconds, for the timeout of the temporary credentials.

        :param duration_seconds: The duration_seconds of this AssumeDecoratedRoleWithSAMLRequest.
        :type duration_seconds: int
        """
        if duration_seconds is not None and duration_seconds > 43200:
            raise ValueError("Invalid value for `duration_seconds`, must be a value less than or equal to `43200`")
        if duration_seconds is not None and duration_seconds < 900:
            raise ValueError("Invalid value for `duration_seconds`, must be a value greater than or equal to `900`")

        self._duration_seconds = duration_seconds
