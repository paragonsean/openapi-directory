# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetWorkUnitsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, next_token: str=None, query_id: str=None, work_unit_ranges: List=None):
        """GetWorkUnitsResponse - a model defined in OpenAPI

        :param next_token: The next_token of this GetWorkUnitsResponse.
        :param query_id: The query_id of this GetWorkUnitsResponse.
        :param work_unit_ranges: The work_unit_ranges of this GetWorkUnitsResponse.
        """
        self.openapi_types = {
            'next_token': str,
            'query_id': str,
            'work_unit_ranges': List
        }

        self.attribute_map = {
            'next_token': 'NextToken',
            'query_id': 'QueryId',
            'work_unit_ranges': 'WorkUnitRanges'
        }

        self._next_token = next_token
        self._query_id = query_id
        self._work_unit_ranges = work_unit_ranges

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetWorkUnitsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetWorkUnitsResponse of this GetWorkUnitsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def next_token(self):
        """Gets the next_token of this GetWorkUnitsResponse.


        :return: The next_token of this GetWorkUnitsResponse.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this GetWorkUnitsResponse.


        :param next_token: The next_token of this GetWorkUnitsResponse.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def query_id(self):
        """Gets the query_id of this GetWorkUnitsResponse.


        :return: The query_id of this GetWorkUnitsResponse.
        :rtype: str
        """
        return self._query_id

    @query_id.setter
    def query_id(self, query_id):
        """Sets the query_id of this GetWorkUnitsResponse.


        :param query_id: The query_id of this GetWorkUnitsResponse.
        :type query_id: str
        """
        if query_id is None:
            raise ValueError("Invalid value for `query_id`, must not be `None`")

        self._query_id = query_id

    @property
    def work_unit_ranges(self):
        """Gets the work_unit_ranges of this GetWorkUnitsResponse.


        :return: The work_unit_ranges of this GetWorkUnitsResponse.
        :rtype: List
        """
        return self._work_unit_ranges

    @work_unit_ranges.setter
    def work_unit_ranges(self, work_unit_ranges):
        """Sets the work_unit_ranges of this GetWorkUnitsResponse.


        :param work_unit_ranges: The work_unit_ranges of this GetWorkUnitsResponse.
        :type work_unit_ranges: List
        """
        if work_unit_ranges is None:
            raise ValueError("Invalid value for `work_unit_ranges`, must not be `None`")

        self._work_unit_ranges = work_unit_ranges
